
macrolev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08040000  08040000  000112a0  2**0
                  CONTENTS
  1 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000e2d8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000017a4  0800e478  0800e478  0000f478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800fc1c  0800fc1c  000112a0  2**0
                  CONTENTS
  5 .ARM          00000008  0800fc1c  0800fc1c  00010c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800fc24  0800fc24  000112a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800fc24  0800fc24  00010c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800fc28  0800fc28  00010c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000002a0  20000000  0800fc2c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000017a4  200002a0  0800fecc  000112a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001a44  0800fecc  00011a44  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000112a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f006  00000000  00000000  000112d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000557e  00000000  00000000  000302d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e8  00000000  00000000  00035858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000124b  00000000  00000000  00036f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000203d4  00000000  00000000  0003818b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e70f  00000000  00000000  0005855f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9cc4  00000000  00000000  00076c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00130932  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b10  00000000  00000000  00130978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00137488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002a0 	.word	0x200002a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e460 	.word	0x0800e460

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002a4 	.word	0x200002a4
 80001dc:	0800e460 	.word	0x0800e460

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <cdc_performance_measure>:
static void handle_streaming(void);
static void set_key_param(uint8_t row, uint8_t col, const char *param, uint16_t value);
static void print_key_config(uint8_t row, uint8_t col);
extern uint32_t started_at; // Define this somewhere in your code

void cdc_performance_measure(uint32_t started_at) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b098      	sub	sp, #96	@ 0x60
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_ready(void) {
  return tud_cdc_n_ready(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_connected(void) {
  return tud_cdc_n_connected(0);
 80005e4:	2000      	movs	r0, #0
 80005e6:	f006 fd25 	bl	8007034 <tud_cdc_n_connected>
 80005ea:	4603      	mov	r3, r0
  if (!tud_cdc_connected())
 80005ec:	f083 0301 	eor.w	r3, r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d11d      	bne.n	8000632 <cdc_performance_measure+0x56>
    return;

  uint32_t now = HAL_GetTick();
 80005f6:	f003 fecd 	bl	8004394 <HAL_GetTick>
 80005fa:	4603      	mov	r3, r0
 80005fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t difference = now - started_at;
 80005fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	65bb      	str	r3, [r7, #88]	@ 0x58

  char msg[64];
  int len = snprintf(msg, sizeof(msg), "One cycle duration: %lu\r\n", difference);
 8000606:	f107 000c 	add.w	r0, r7, #12
 800060a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800060c:	4a0b      	ldr	r2, [pc, #44]	@ (800063c <cdc_performance_measure+0x60>)
 800060e:	2140      	movs	r1, #64	@ 0x40
 8000610:	f00c fc98 	bl	800cf44 <sniprintf>
 8000614:	6578      	str	r0, [r7, #84]	@ 0x54

  tud_cdc_write(msg, len);
 8000616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000618:	f107 020c 	add.w	r2, r7, #12
 800061c:	653a      	str	r2, [r7, #80]	@ 0x50
 800061e:	64fb      	str	r3, [r7, #76]	@ 0x4c
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_char(char ch) {
  return tud_cdc_n_write_char(0, ch);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write(void const* buffer, uint32_t bufsize) {
  return tud_cdc_n_write(0, buffer, bufsize);
 8000620:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000622:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000624:	2000      	movs	r0, #0
 8000626:	f006 fd85 	bl	8007134 <tud_cdc_n_write>
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_str(char const* str) {
  return tud_cdc_n_write_str(0, str);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_flush(void) {
  return tud_cdc_n_write_flush(0);
 800062a:	2000      	movs	r0, #0
 800062c:	f006 fdb6 	bl	800719c <tud_cdc_n_write_flush>
 8000630:	e000      	b.n	8000634 <cdc_performance_measure+0x58>
    return;
 8000632:	bf00      	nop
  tud_cdc_write_flush(); // Make sure data is sent
}
 8000634:	3760      	adds	r7, #96	@ 0x60
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	0800e478 	.word	0x0800e478

08000640 <cdc_task>:

void cdc_task(void) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b098      	sub	sp, #96	@ 0x60
 8000644:	af00      	add	r7, sp, #0
  return tud_cdc_n_connected(0);
 8000646:	2000      	movs	r0, #0
 8000648:	f006 fcf4 	bl	8007034 <tud_cdc_n_connected>
 800064c:	4603      	mov	r3, r0
  if (tud_cdc_connected()) {
 800064e:	2b00      	cmp	r3, #0
 8000650:	f000 80b8 	beq.w	80007c4 <cdc_task+0x184>
    // Handle streaming if active
    handle_streaming();
 8000654:	f000 f962 	bl	800091c <handle_streaming>
  return tud_cdc_n_available(0);
 8000658:	2000      	movs	r0, #0
 800065a:	f006 fd29 	bl	80070b0 <tud_cdc_n_available>
 800065e:	4603      	mov	r3, r0

    if (tud_cdc_available()) {
 8000660:	2b00      	cmp	r3, #0
 8000662:	f000 80b8 	beq.w	80007d6 <cdc_task+0x196>
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	657b      	str	r3, [r7, #84]	@ 0x54
 800066a:	2340      	movs	r3, #64	@ 0x40
 800066c:	653b      	str	r3, [r7, #80]	@ 0x50
  return tud_cdc_n_read(0, buffer, bufsize);
 800066e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000670:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000672:	2000      	movs	r0, #0
 8000674:	f006 fd32 	bl	80070dc <tud_cdc_n_read>
 8000678:	4603      	mov	r3, r0
      uint8_t buf[CFG_TUD_CDC_RX_BUFSIZE];
      uint32_t count = tud_cdc_read(buf, sizeof(buf));
 800067a:	65bb      	str	r3, [r7, #88]	@ 0x58

      for (uint32_t i = 0; i < count; i++) {
 800067c:	2300      	movs	r3, #0
 800067e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000680:	e091      	b.n	80007a6 <cdc_task+0x166>
        char c = buf[i];
 8000682:	1d3a      	adds	r2, r7, #4
 8000684:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000686:	4413      	add	r3, r2
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Handle Ctrl+C to stop streaming
        if (c == 3) { // Ctrl+C ASCII code
 800068e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000692:	2b03      	cmp	r3, #3
 8000694:	d10c      	bne.n	80006b0 <cdc_task+0x70>
          if (streaming_active) {
 8000696:	4b52      	ldr	r3, [pc, #328]	@ (80007e0 <cdc_task+0x1a0>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d07b      	beq.n	8000796 <cdc_task+0x156>
            stop_streaming();
 800069e:	f000 f931 	bl	8000904 <stop_streaming>
            cdc_write_string_chunked("\r\nStreaming stopped\r\n");
 80006a2:	4850      	ldr	r0, [pc, #320]	@ (80007e4 <cdc_task+0x1a4>)
 80006a4:	f000 f8ac 	bl	8000800 <cdc_write_string_chunked>
            cdc_write_string_chunked("Ready> ");
 80006a8:	484f      	ldr	r0, [pc, #316]	@ (80007e8 <cdc_task+0x1a8>)
 80006aa:	f000 f8a9 	bl	8000800 <cdc_write_string_chunked>
 80006ae:	e077      	b.n	80007a0 <cdc_task+0x160>
          }
          continue;
        }

        // Handle backspace
        if (c == '\b' || c == 127) {
 80006b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006b4:	2b08      	cmp	r3, #8
 80006b6:	d003      	beq.n	80006c0 <cdc_task+0x80>
 80006b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80006be:	d114      	bne.n	80006ea <cdc_task+0xaa>
          if (cmd_index > 0 && !streaming_active) {
 80006c0:	4b4a      	ldr	r3, [pc, #296]	@ (80007ec <cdc_task+0x1ac>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d068      	beq.n	800079a <cdc_task+0x15a>
 80006c8:	4b45      	ldr	r3, [pc, #276]	@ (80007e0 <cdc_task+0x1a0>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	f083 0301 	eor.w	r3, r3, #1
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d061      	beq.n	800079a <cdc_task+0x15a>
            cmd_index--;
 80006d6:	4b45      	ldr	r3, [pc, #276]	@ (80007ec <cdc_task+0x1ac>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	3b01      	subs	r3, #1
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4b43      	ldr	r3, [pc, #268]	@ (80007ec <cdc_task+0x1ac>)
 80006e0:	701a      	strb	r2, [r3, #0]
            cdc_write_string_chunked("\b \b"); // Erase character
 80006e2:	4843      	ldr	r0, [pc, #268]	@ (80007f0 <cdc_task+0x1b0>)
 80006e4:	f000 f88c 	bl	8000800 <cdc_write_string_chunked>
          if (cmd_index > 0 && !streaming_active) {
 80006e8:	e057      	b.n	800079a <cdc_task+0x15a>
          }
        }
        // Handle enter/newline
        else if (c == '\r' || c == '\n') {
 80006ea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006ee:	2b0d      	cmp	r3, #13
 80006f0:	d003      	beq.n	80006fa <cdc_task+0xba>
 80006f2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006f6:	2b0a      	cmp	r3, #10
 80006f8:	d124      	bne.n	8000744 <cdc_task+0x104>
          if (!streaming_active) {
 80006fa:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <cdc_task+0x1a0>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	f083 0301 	eor.w	r3, r3, #1
 8000702:	b2db      	uxtb	r3, r3
 8000704:	2b00      	cmp	r3, #0
 8000706:	d04a      	beq.n	800079e <cdc_task+0x15e>
            cdc_write_string_chunked("\r\n");
 8000708:	483a      	ldr	r0, [pc, #232]	@ (80007f4 <cdc_task+0x1b4>)
 800070a:	f000 f879 	bl	8000800 <cdc_write_string_chunked>
            cmd_buffer[cmd_index] = '\0';
 800070e:	4b37      	ldr	r3, [pc, #220]	@ (80007ec <cdc_task+0x1ac>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	4b38      	ldr	r3, [pc, #224]	@ (80007f8 <cdc_task+0x1b8>)
 8000716:	2100      	movs	r1, #0
 8000718:	5499      	strb	r1, [r3, r2]

            if (cmd_index > 0) {
 800071a:	4b34      	ldr	r3, [pc, #208]	@ (80007ec <cdc_task+0x1ac>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d005      	beq.n	800072e <cdc_task+0xee>
              process_command(cmd_buffer);
 8000722:	4835      	ldr	r0, [pc, #212]	@ (80007f8 <cdc_task+0x1b8>)
 8000724:	f000 f9d4 	bl	8000ad0 <process_command>
              cmd_index = 0;
 8000728:	4b30      	ldr	r3, [pc, #192]	@ (80007ec <cdc_task+0x1ac>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
            }

            if (!streaming_active) {
 800072e:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <cdc_task+0x1a0>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	f083 0301 	eor.w	r3, r3, #1
 8000736:	b2db      	uxtb	r3, r3
 8000738:	2b00      	cmp	r3, #0
 800073a:	d030      	beq.n	800079e <cdc_task+0x15e>
              cdc_write_string_chunked("Ready> ");
 800073c:	482a      	ldr	r0, [pc, #168]	@ (80007e8 <cdc_task+0x1a8>)
 800073e:	f000 f85f 	bl	8000800 <cdc_write_string_chunked>
          if (!streaming_active) {
 8000742:	e02c      	b.n	800079e <cdc_task+0x15e>
            }
          }
        }
        // Handle printable characters
        else if (c >= 32 && c <= 126 && cmd_index < sizeof(cmd_buffer) - 1 && !streaming_active) {
 8000744:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000748:	2b1f      	cmp	r3, #31
 800074a:	d929      	bls.n	80007a0 <cdc_task+0x160>
 800074c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000750:	2b7e      	cmp	r3, #126	@ 0x7e
 8000752:	d825      	bhi.n	80007a0 <cdc_task+0x160>
 8000754:	4b25      	ldr	r3, [pc, #148]	@ (80007ec <cdc_task+0x1ac>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b3e      	cmp	r3, #62	@ 0x3e
 800075a:	d821      	bhi.n	80007a0 <cdc_task+0x160>
 800075c:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <cdc_task+0x1a0>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	f083 0301 	eor.w	r3, r3, #1
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d01a      	beq.n	80007a0 <cdc_task+0x160>
          cmd_buffer[cmd_index++] = c;
 800076a:	4b20      	ldr	r3, [pc, #128]	@ (80007ec <cdc_task+0x1ac>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	b2d1      	uxtb	r1, r2
 8000772:	4a1e      	ldr	r2, [pc, #120]	@ (80007ec <cdc_task+0x1ac>)
 8000774:	7011      	strb	r1, [r2, #0]
 8000776:	461a      	mov	r2, r3
 8000778:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800077c:	4b1e      	ldr	r3, [pc, #120]	@ (80007f8 <cdc_task+0x1b8>)
 800077e:	5499      	strb	r1, [r3, r2]
 8000780:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 8000784:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000786:	2301      	movs	r3, #1
 8000788:	64bb      	str	r3, [r7, #72]	@ 0x48
  return tud_cdc_n_write(0, buffer, bufsize);
 800078a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800078c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800078e:	2000      	movs	r0, #0
 8000790:	f006 fcd0 	bl	8007134 <tud_cdc_n_write>
 8000794:	e004      	b.n	80007a0 <cdc_task+0x160>
          continue;
 8000796:	bf00      	nop
 8000798:	e002      	b.n	80007a0 <cdc_task+0x160>
          if (cmd_index > 0 && !streaming_active) {
 800079a:	bf00      	nop
 800079c:	e000      	b.n	80007a0 <cdc_task+0x160>
          if (!streaming_active) {
 800079e:	bf00      	nop
      for (uint32_t i = 0; i < count; i++) {
 80007a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80007a2:	3301      	adds	r3, #1
 80007a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80007a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80007a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80007aa:	429a      	cmp	r2, r3
 80007ac:	f4ff af69 	bcc.w	8000682 <cdc_task+0x42>
          tud_cdc_write(&c, 1); // Echo character
        }
      }

      if (!streaming_active) {
 80007b0:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <cdc_task+0x1a0>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	f083 0301 	eor.w	r3, r3, #1
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d00b      	beq.n	80007d6 <cdc_task+0x196>
        cdc_write_flush_wait();
 80007be:	f000 f86a 	bl	8000896 <cdc_write_flush_wait>
    // Reset flags when disconnected
    cmd_index = 0;
    streaming_active = false;
    cycle_count_on = 0;
  }
}
 80007c2:	e008      	b.n	80007d6 <cdc_task+0x196>
    cmd_index = 0;
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <cdc_task+0x1ac>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
    streaming_active = false;
 80007ca:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <cdc_task+0x1a0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
    cycle_count_on = 0;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <cdc_task+0x1bc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
}
 80007d6:	bf00      	nop
 80007d8:	3760      	adds	r7, #96	@ 0x60
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200002fd 	.word	0x200002fd
 80007e4:	0800e494 	.word	0x0800e494
 80007e8:	0800e4ac 	.word	0x0800e4ac
 80007ec:	200002fc 	.word	0x200002fc
 80007f0:	0800e4b4 	.word	0x0800e4b4
 80007f4:	0800e4b8 	.word	0x0800e4b8
 80007f8:	200002bc 	.word	0x200002bc
 80007fc:	20000cf8 	.word	0x20000cf8

08000800 <cdc_write_string_chunked>:

// Write string in chunks to avoid buffer overflow
static void cdc_write_string_chunked(const char *str) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if (!str)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d03f      	beq.n	800088e <cdc_write_string_chunked+0x8e>
    return;

  size_t len = strlen(str);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff fcf0 	bl	80001f4 <strlen>
 8000814:	61b8      	str	r0, [r7, #24]
  size_t sent = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  const size_t chunk_size = CFG_TUD_CDC_EP_BUFSIZE - 8; // Leave some margin
 800081a:	2338      	movs	r3, #56	@ 0x38
 800081c:	617b      	str	r3, [r7, #20]

  while (sent < len) {
 800081e:	e031      	b.n	8000884 <cdc_write_string_chunked+0x84>
    size_t to_send = (len - sent > chunk_size) ? chunk_size : (len - sent);
 8000820:	69ba      	ldr	r2, [r7, #24]
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	4293      	cmp	r3, r2
 800082a:	bf28      	it	cs
 800082c:	4613      	movcs	r3, r2
 800082e:	613b      	str	r3, [r7, #16]

    // Wait for space in buffer
    while (tud_cdc_write_available() < to_send) {
 8000830:	e005      	b.n	800083e <cdc_write_string_chunked+0x3e>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 8000832:	2100      	movs	r1, #0
 8000834:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000838:	f008 fd8a 	bl	8009350 <tud_task_ext>
}
 800083c:	bf00      	nop
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_available(void) {
  return tud_cdc_n_write_available(0);
 800083e:	2000      	movs	r0, #0
 8000840:	f006 fd2e 	bl	80072a0 <tud_cdc_n_write_available>
 8000844:	4602      	mov	r2, r0
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	4293      	cmp	r3, r2
 800084a:	d8f2      	bhi.n	8000832 <cdc_write_string_chunked+0x32>
      tud_task(); // Process USB tasks
    }

    tud_cdc_write(str + sent, to_send);
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	4413      	add	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	60bb      	str	r3, [r7, #8]
  return tud_cdc_n_write(0, buffer, bufsize);
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	68f9      	ldr	r1, [r7, #12]
 800085c:	2000      	movs	r0, #0
 800085e:	f006 fc69 	bl	8007134 <tud_cdc_n_write>
    sent += to_send;
 8000862:	69fa      	ldr	r2, [r7, #28]
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	4413      	add	r3, r2
 8000868:	61fb      	str	r3, [r7, #28]
  return tud_cdc_n_write_available(0);
 800086a:	2000      	movs	r0, #0
 800086c:	f006 fd18 	bl	80072a0 <tud_cdc_n_write_available>
 8000870:	4602      	mov	r2, r0

    // Flush if buffer is getting full or we're done
    if (tud_cdc_write_available() < chunk_size || sent >= len) {
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	4293      	cmp	r3, r2
 8000876:	d803      	bhi.n	8000880 <cdc_write_string_chunked+0x80>
 8000878:	69fa      	ldr	r2, [r7, #28]
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	429a      	cmp	r2, r3
 800087e:	d301      	bcc.n	8000884 <cdc_write_string_chunked+0x84>
      cdc_write_flush_wait();
 8000880:	f000 f809 	bl	8000896 <cdc_write_flush_wait>
  while (sent < len) {
 8000884:	69fa      	ldr	r2, [r7, #28]
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	429a      	cmp	r2, r3
 800088a:	d3c9      	bcc.n	8000820 <cdc_write_string_chunked+0x20>
 800088c:	e000      	b.n	8000890 <cdc_write_string_chunked+0x90>
    return;
 800088e:	bf00      	nop
    }
  }
}
 8000890:	3720      	adds	r7, #32
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <cdc_write_flush_wait>:

// Wait for flush to complete
static void cdc_write_flush_wait(void) {
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 800089c:	2000      	movs	r0, #0
 800089e:	f006 fc7d 	bl	800719c <tud_cdc_n_write_flush>
  tud_cdc_write_flush();

  // Wait for data to be sent
  uint32_t timeout = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
  while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 80008a6:	e008      	b.n	80008ba <cdc_write_flush_wait+0x24>
  tud_task_ext(UINT32_MAX, false);
 80008a8:	2100      	movs	r1, #0
 80008aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008ae:	f008 fd4f 	bl	8009350 <tud_task_ext>
}
 80008b2:	bf00      	nop
    tud_task(); // Process USB tasks
    timeout++;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3301      	adds	r3, #1
 80008b8:	607b      	str	r3, [r7, #4]
  return tud_cdc_n_write_available(0);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f006 fcf0 	bl	80072a0 <tud_cdc_n_write_available>
 80008c0:	4603      	mov	r3, r0
  while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 80008c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80008c4:	d804      	bhi.n	80008d0 <cdc_write_flush_wait+0x3a>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d9eb      	bls.n	80008a8 <cdc_write_flush_wait+0x12>
  }
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <start_streaming>:

static void start_streaming(void) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  streaming_active = true;
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <start_streaming+0x20>)
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]
  last_stream_time = HAL_GetTick();
 80008e2:	f003 fd57 	bl	8004394 <HAL_GetTick>
 80008e6:	4603      	mov	r3, r0
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <start_streaming+0x24>)
 80008ec:	601a      	str	r2, [r3, #0]
  cdc_write_string_chunked("Starting ADC stream (Press Ctrl+C to stop)...\r\n");
 80008ee:	4804      	ldr	r0, [pc, #16]	@ (8000900 <start_streaming+0x28>)
 80008f0:	f7ff ff86 	bl	8000800 <cdc_write_string_chunked>
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200002fd 	.word	0x200002fd
 80008fc:	20000300 	.word	0x20000300
 8000900:	0800e4bc 	.word	0x0800e4bc

08000904 <stop_streaming>:

static void stop_streaming(void) {
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  streaming_active = false;
 8000908:	4b03      	ldr	r3, [pc, #12]	@ (8000918 <stop_streaming+0x14>)
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	200002fd 	.word	0x200002fd

0800091c <handle_streaming>:

static void handle_streaming(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8000922:	af00      	add	r7, sp, #0
  if (!streaming_active || !tud_cdc_connected()) {
 8000924:	4b64      	ldr	r3, [pc, #400]	@ (8000ab8 <handle_streaming+0x19c>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	f083 0301 	eor.w	r3, r3, #1
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	f040 80bc 	bne.w	8000aac <handle_streaming+0x190>
  return tud_cdc_n_connected(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f006 fb7d 	bl	8007034 <tud_cdc_n_connected>
 800093a:	4603      	mov	r3, r0
 800093c:	f083 0301 	eor.w	r3, r3, #1
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	f040 80b2 	bne.w	8000aac <handle_streaming+0x190>
    return;
  }

  uint32_t current_time = HAL_GetTick();
 8000948:	f003 fd24 	bl	8004394 <HAL_GetTick>
 800094c:	4603      	mov	r3, r0
 800094e:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

  // Check if it's time to send data (1ms interval for ~1kHz)
  if (current_time - last_stream_time >= STREAM_INTERVAL_MS) {
 8000952:	4b5a      	ldr	r3, [pc, #360]	@ (8000abc <handle_streaming+0x1a0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	2201      	movs	r2, #1
 800095e:	4293      	cmp	r3, r2
 8000960:	f0c0 80a5 	bcc.w	8000aae <handle_streaming+0x192>
    last_stream_time = current_time;
 8000964:	4a55      	ldr	r2, [pc, #340]	@ (8000abc <handle_streaming+0x1a0>)
 8000966:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800096a:	6013      	str	r3, [r2, #0]

    // Build CSV string with all keyboard_keys state.value data
    char csv_buffer[512];
    int pos = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214

    // Iterate through the keyboard_keys array and collect state.value for each key
    bool first = true;
 8000972:	2301      	movs	r3, #1
 8000974:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    for (uint8_t adc_ch = 0; adc_ch < ADC_CHANNEL_COUNT; adc_ch++) {
 8000978:	2300      	movs	r3, #0
 800097a:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
 800097e:	e063      	b.n	8000a48 <handle_streaming+0x12c>
      for (uint8_t amux_ch = 0; amux_ch < AMUX_CHANNEL_COUNT; amux_ch++) {
 8000980:	2300      	movs	r3, #0
 8000982:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
 8000986:	e04f      	b.n	8000a28 <handle_streaming+0x10c>
        if (!first) {
 8000988:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 800098c:	f083 0301 	eor.w	r3, r3, #1
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d011      	beq.n	80009ba <handle_streaming+0x9e>
          pos += snprintf(csv_buffer + pos, sizeof(csv_buffer) - pos, ",");
 8000996:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800099a:	463a      	mov	r2, r7
 800099c:	18d0      	adds	r0, r2, r3
 800099e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80009a2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80009a6:	4a46      	ldr	r2, [pc, #280]	@ (8000ac0 <handle_streaming+0x1a4>)
 80009a8:	4619      	mov	r1, r3
 80009aa:	f00c facb 	bl	800cf44 <sniprintf>
 80009ae:	4602      	mov	r2, r0
 80009b0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80009b4:	4413      	add	r3, r2
 80009b6:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
        }
        first = false;
 80009ba:	2300      	movs	r3, #0
 80009bc:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

        // Get the state.value from the current key
        uint16_t value = keyboard_keys[adc_ch][amux_ch].state.value;
 80009c0:	f897 1212 	ldrb.w	r1, [r7, #530]	@ 0x212
 80009c4:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 80009c8:	483e      	ldr	r0, [pc, #248]	@ (8000ac4 <handle_streaming+0x1a8>)
 80009ca:	461a      	mov	r2, r3
 80009cc:	0112      	lsls	r2, r2, #4
 80009ce:	441a      	add	r2, r3
 80009d0:	0093      	lsls	r3, r2, #2
 80009d2:	461a      	mov	r2, r3
 80009d4:	460b      	mov	r3, r1
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	440b      	add	r3, r1
 80009da:	019b      	lsls	r3, r3, #6
 80009dc:	4413      	add	r3, r2
 80009de:	4403      	add	r3, r0
 80009e0:	3328      	adds	r3, #40	@ 0x28
 80009e2:	79da      	ldrb	r2, [r3, #7]
 80009e4:	7a1b      	ldrb	r3, [r3, #8]
 80009e6:	021b      	lsls	r3, r3, #8
 80009e8:	4313      	orrs	r3, r2
 80009ea:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
        pos += snprintf(csv_buffer + pos, sizeof(csv_buffer) - pos, "%u", value);
 80009ee:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80009f2:	463a      	mov	r2, r7
 80009f4:	18d0      	adds	r0, r2, r3
 80009f6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80009fa:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 80009fe:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 8000a02:	4a31      	ldr	r2, [pc, #196]	@ (8000ac8 <handle_streaming+0x1ac>)
 8000a04:	f00c fa9e 	bl	800cf44 <sniprintf>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a0e:	4413      	add	r3, r2
 8000a10:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214

        // Safety check to prevent buffer overflow
        if (pos >= sizeof(csv_buffer) - 10) {
 8000a14:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a18:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 8000a1c:	d209      	bcs.n	8000a32 <handle_streaming+0x116>
      for (uint8_t amux_ch = 0; amux_ch < AMUX_CHANNEL_COUNT; amux_ch++) {
 8000a1e:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8000a22:	3301      	adds	r3, #1
 8000a24:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
 8000a28:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d9ab      	bls.n	8000988 <handle_streaming+0x6c>
 8000a30:	e000      	b.n	8000a34 <handle_streaming+0x118>
          break;
 8000a32:	bf00      	nop
        }
      }
      if (pos >= sizeof(csv_buffer) - 10) {
 8000a34:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a38:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 8000a3c:	d209      	bcs.n	8000a52 <handle_streaming+0x136>
    for (uint8_t adc_ch = 0; adc_ch < ADC_CHANNEL_COUNT; adc_ch++) {
 8000a3e:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 8000a42:	3301      	adds	r3, #1
 8000a44:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
 8000a48:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d097      	beq.n	8000980 <handle_streaming+0x64>
 8000a50:	e000      	b.n	8000a54 <handle_streaming+0x138>
        break;
 8000a52:	bf00      	nop
      }
    }

    // Add newline
    pos += snprintf(csv_buffer + pos, sizeof(csv_buffer) - pos, "\r\n");
 8000a54:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a58:	463a      	mov	r2, r7
 8000a5a:	18d0      	adds	r0, r2, r3
 8000a5c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a60:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000a64:	4a19      	ldr	r2, [pc, #100]	@ (8000acc <handle_streaming+0x1b0>)
 8000a66:	4619      	mov	r1, r3
 8000a68:	f00c fa6c 	bl	800cf44 <sniprintf>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a72:	4413      	add	r3, r2
 8000a74:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
  return tud_cdc_n_write_available(0);
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f006 fc11 	bl	80072a0 <tud_cdc_n_write_available>
 8000a7e:	4602      	mov	r2, r0

    // Send the CSV data
    if (tud_cdc_write_available() >= pos) {
 8000a80:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d312      	bcc.n	8000aae <handle_streaming+0x192>
      tud_cdc_write(csv_buffer, pos);
 8000a88:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a8c:	463a      	mov	r2, r7
 8000a8e:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 8000a92:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
  return tud_cdc_n_write(0, buffer, bufsize);
 8000a96:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 8000a9a:	f8d7 1204 	ldr.w	r1, [r7, #516]	@ 0x204
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f006 fb48 	bl	8007134 <tud_cdc_n_write>
  return tud_cdc_n_write_flush(0);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f006 fb79 	bl	800719c <tud_cdc_n_write_flush>
 8000aaa:	e000      	b.n	8000aae <handle_streaming+0x192>
    return;
 8000aac:	bf00      	nop
      tud_cdc_write_flush();
    }
  }
}
 8000aae:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200002fd 	.word	0x200002fd
 8000abc:	20000300 	.word	0x20000300
 8000ac0:	0800e4ec 	.word	0x0800e4ec
 8000ac4:	20000310 	.word	0x20000310
 8000ac8:	0800e4f0 	.word	0x0800e4f0
 8000acc:	0800e4b8 	.word	0x0800e4b8

08000ad0 <process_command>:

static void process_command(char *cmd) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b09e      	sub	sp, #120	@ 0x78
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  // Convert to lowercase for case-insensitive commands
  for (int i = 0; cmd[i]; i++) {
 8000ad8:	2300      	movs	r3, #0
 8000ada:	677b      	str	r3, [r7, #116]	@ 0x74
 8000adc:	e018      	b.n	8000b10 <process_command+0x40>
    if (cmd[i] >= 'A' && cmd[i] <= 'Z') {
 8000ade:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b40      	cmp	r3, #64	@ 0x40
 8000ae8:	d90f      	bls.n	8000b0a <process_command+0x3a>
 8000aea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	4413      	add	r3, r2
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b5a      	cmp	r3, #90	@ 0x5a
 8000af4:	d809      	bhi.n	8000b0a <process_command+0x3a>
      cmd[i] += 32;
 8000af6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	4413      	add	r3, r2
 8000afc:	781a      	ldrb	r2, [r3, #0]
 8000afe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b00:	6879      	ldr	r1, [r7, #4]
 8000b02:	440b      	add	r3, r1
 8000b04:	3220      	adds	r2, #32
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	701a      	strb	r2, [r3, #0]
  for (int i = 0; cmd[i]; i++) {
 8000b0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	677b      	str	r3, [r7, #116]	@ 0x74
 8000b10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1e0      	bne.n	8000ade <process_command+0xe>
    }
  }

  char *token = strtok(cmd, " ");
 8000b1c:	49ad      	ldr	r1, [pc, #692]	@ (8000dd4 <process_command+0x304>)
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f00c fbb6 	bl	800d290 <strtok>
 8000b24:	66b8      	str	r0, [r7, #104]	@ 0x68
  if (!token)
 8000b26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	f000 8223 	beq.w	8000f74 <process_command+0x4a4>
    return;

  if (strcmp(token, "help") == 0) {
 8000b2e:	49aa      	ldr	r1, [pc, #680]	@ (8000dd8 <process_command+0x308>)
 8000b30:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000b32:	f7ff fb55 	bl	80001e0 <strcmp>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <process_command+0x72>
    print_help();
 8000b3c:	f000 fad2 	bl	80010e4 <print_help>
 8000b40:	e219      	b.n	8000f76 <process_command+0x4a6>
  } else if (strcmp(token, "show") == 0) {
 8000b42:	49a6      	ldr	r1, [pc, #664]	@ (8000ddc <process_command+0x30c>)
 8000b44:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000b46:	f7ff fb4b 	bl	80001e0 <strcmp>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <process_command+0x86>
    print_config();
 8000b50:	f000 fba2 	bl	8001298 <print_config>
 8000b54:	e20f      	b.n	8000f76 <process_command+0x4a6>
  } else if (strcmp(token, "stream") == 0) {
 8000b56:	49a2      	ldr	r1, [pc, #648]	@ (8000de0 <process_command+0x310>)
 8000b58:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000b5a:	f7ff fb41 	bl	80001e0 <strcmp>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d102      	bne.n	8000b6a <process_command+0x9a>
    start_streaming();
 8000b64:	f7ff feb8 	bl	80008d8 <start_streaming>
 8000b68:	e205      	b.n	8000f76 <process_command+0x4a6>
  } else if (strcmp(token, "set") == 0) {
 8000b6a:	499e      	ldr	r1, [pc, #632]	@ (8000de4 <process_command+0x314>)
 8000b6c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000b6e:	f7ff fb37 	bl	80001e0 <strcmp>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d118      	bne.n	8000baa <process_command+0xda>
    char *param = strtok(NULL, " ");
 8000b78:	4996      	ldr	r1, [pc, #600]	@ (8000dd4 <process_command+0x304>)
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f00c fb88 	bl	800d290 <strtok>
 8000b80:	6178      	str	r0, [r7, #20]
    char *value = strtok(NULL, " ");
 8000b82:	4994      	ldr	r1, [pc, #592]	@ (8000dd4 <process_command+0x304>)
 8000b84:	2000      	movs	r0, #0
 8000b86:	f00c fb83 	bl	800d290 <strtok>
 8000b8a:	6138      	str	r0, [r7, #16]
    if (param && value) {
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d007      	beq.n	8000ba2 <process_command+0xd2>
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d004      	beq.n	8000ba2 <process_command+0xd2>
      set_config_value(param, value);
 8000b98:	6939      	ldr	r1, [r7, #16]
 8000b9a:	6978      	ldr	r0, [r7, #20]
 8000b9c:	f000 fbd0 	bl	8001340 <set_config_value>
 8000ba0:	e1e9      	b.n	8000f76 <process_command+0x4a6>
    } else {
      cdc_write_string_chunked("Usage: set <parameter> <value>\r\n");
 8000ba2:	4891      	ldr	r0, [pc, #580]	@ (8000de8 <process_command+0x318>)
 8000ba4:	f7ff fe2c 	bl	8000800 <cdc_write_string_chunked>
 8000ba8:	e1e5      	b.n	8000f76 <process_command+0x4a6>
    }
  } else if (strcmp(token, "keymap") == 0) {
 8000baa:	4990      	ldr	r1, [pc, #576]	@ (8000dec <process_command+0x31c>)
 8000bac:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000bae:	f7ff fb17 	bl	80001e0 <strcmp>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d11c      	bne.n	8000bf2 <process_command+0x122>
    char *layer_str = strtok(NULL, " ");
 8000bb8:	4986      	ldr	r1, [pc, #536]	@ (8000dd4 <process_command+0x304>)
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f00c fb68 	bl	800d290 <strtok>
 8000bc0:	61f8      	str	r0, [r7, #28]
    if (layer_str) {
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d010      	beq.n	8000bea <process_command+0x11a>
      uint8_t layer = atoi(layer_str);
 8000bc8:	69f8      	ldr	r0, [r7, #28]
 8000bca:	f00c f9b6 	bl	800cf3a <atoi>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	76fb      	strb	r3, [r7, #27]
      if (layer < LAYERS_COUNT) {
 8000bd2:	7efb      	ldrb	r3, [r7, #27]
 8000bd4:	2b03      	cmp	r3, #3
 8000bd6:	d804      	bhi.n	8000be2 <process_command+0x112>
        print_keymap(layer);
 8000bd8:	7efb      	ldrb	r3, [r7, #27]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 fc54 	bl	8001488 <print_keymap>
 8000be0:	e1c9      	b.n	8000f76 <process_command+0x4a6>
      } else {
        cdc_write_string_chunked("Invalid layer number\r\n");
 8000be2:	4883      	ldr	r0, [pc, #524]	@ (8000df0 <process_command+0x320>)
 8000be4:	f7ff fe0c 	bl	8000800 <cdc_write_string_chunked>
 8000be8:	e1c5      	b.n	8000f76 <process_command+0x4a6>
      }
    } else {
      cdc_write_string_chunked("Usage: keymap <layer>\r\n");
 8000bea:	4882      	ldr	r0, [pc, #520]	@ (8000df4 <process_command+0x324>)
 8000bec:	f7ff fe08 	bl	8000800 <cdc_write_string_chunked>
 8000bf0:	e1c1      	b.n	8000f76 <process_command+0x4a6>
    }
  } else if (strcmp(token, "setkey") == 0) {
 8000bf2:	4981      	ldr	r1, [pc, #516]	@ (8000df8 <process_command+0x328>)
 8000bf4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000bf6:	f7ff faf3 	bl	80001e0 <strcmp>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d154      	bne.n	8000caa <process_command+0x1da>
    char *layer_str = strtok(NULL, " ");
 8000c00:	4974      	ldr	r1, [pc, #464]	@ (8000dd4 <process_command+0x304>)
 8000c02:	2000      	movs	r0, #0
 8000c04:	f00c fb44 	bl	800d290 <strtok>
 8000c08:	6378      	str	r0, [r7, #52]	@ 0x34
    char *row_str = strtok(NULL, " ");
 8000c0a:	4972      	ldr	r1, [pc, #456]	@ (8000dd4 <process_command+0x304>)
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f00c fb3f 	bl	800d290 <strtok>
 8000c12:	6338      	str	r0, [r7, #48]	@ 0x30
    char *col_str = strtok(NULL, " ");
 8000c14:	496f      	ldr	r1, [pc, #444]	@ (8000dd4 <process_command+0x304>)
 8000c16:	2000      	movs	r0, #0
 8000c18:	f00c fb3a 	bl	800d290 <strtok>
 8000c1c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    char *value_str = strtok(NULL, " ");
 8000c1e:	496d      	ldr	r1, [pc, #436]	@ (8000dd4 <process_command+0x304>)
 8000c20:	2000      	movs	r0, #0
 8000c22:	f00c fb35 	bl	800d290 <strtok>
 8000c26:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (layer_str && row_str && col_str && value_str) {
 8000c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d039      	beq.n	8000ca2 <process_command+0x1d2>
 8000c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d036      	beq.n	8000ca2 <process_command+0x1d2>
 8000c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d033      	beq.n	8000ca2 <process_command+0x1d2>
 8000c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d030      	beq.n	8000ca2 <process_command+0x1d2>
      uint8_t layer = atoi(layer_str);
 8000c40:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000c42:	f00c f97a 	bl	800cf3a <atoi>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      uint8_t row = atoi(row_str);
 8000c4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000c4e:	f00c f974 	bl	800cf3a <atoi>
 8000c52:	4603      	mov	r3, r0
 8000c54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
      uint8_t col = atoi(col_str);
 8000c58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000c5a:	f00c f96e 	bl	800cf3a <atoi>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      uint16_t value = atoi(value_str);
 8000c64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c66:	f00c f968 	bl	800cf3a <atoi>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	847b      	strh	r3, [r7, #34]	@ 0x22

      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000c6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d811      	bhi.n	8000c9a <process_command+0x1ca>
 8000c76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	d80d      	bhi.n	8000c9a <process_command+0x1ca>
 8000c7e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d809      	bhi.n	8000c9a <process_command+0x1ca>
        set_keymap_value(layer, row, col, value);
 8000c86:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000c88:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000c8c:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8000c90:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8000c94:	f000 fd3e 	bl	8001714 <set_keymap_value>
    if (layer_str && row_str && col_str && value_str) {
 8000c98:	e16d      	b.n	8000f76 <process_command+0x4a6>
      } else {
        cdc_write_string_chunked("Invalid layer/row/col values\r\n");
 8000c9a:	4858      	ldr	r0, [pc, #352]	@ (8000dfc <process_command+0x32c>)
 8000c9c:	f7ff fdb0 	bl	8000800 <cdc_write_string_chunked>
    if (layer_str && row_str && col_str && value_str) {
 8000ca0:	e169      	b.n	8000f76 <process_command+0x4a6>
      }
    } else {
      cdc_write_string_chunked("Usage: setkey <layer> <row> <col> <value>\r\n");
 8000ca2:	4857      	ldr	r0, [pc, #348]	@ (8000e00 <process_command+0x330>)
 8000ca4:	f7ff fdac 	bl	8000800 <cdc_write_string_chunked>
 8000ca8:	e165      	b.n	8000f76 <process_command+0x4a6>
    }
  } else if (strcmp(token, "setmacro") == 0) {
 8000caa:	4956      	ldr	r1, [pc, #344]	@ (8000e04 <process_command+0x334>)
 8000cac:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000cae:	f7ff fa97 	bl	80001e0 <strcmp>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f040 8082 	bne.w	8000dbe <process_command+0x2ee>
    char *layer_str = strtok(NULL, " ");
 8000cba:	4946      	ldr	r1, [pc, #280]	@ (8000dd4 <process_command+0x304>)
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f00c fae7 	bl	800d290 <strtok>
 8000cc2:	6478      	str	r0, [r7, #68]	@ 0x44
    char *row_str = strtok(NULL, " ");
 8000cc4:	4943      	ldr	r1, [pc, #268]	@ (8000dd4 <process_command+0x304>)
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f00c fae2 	bl	800d290 <strtok>
 8000ccc:	6438      	str	r0, [r7, #64]	@ 0x40
    char *col_str = strtok(NULL, " ");
 8000cce:	4941      	ldr	r1, [pc, #260]	@ (8000dd4 <process_command+0x304>)
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f00c fadd 	bl	800d290 <strtok>
 8000cd6:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (layer_str && row_str && col_str) {
 8000cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d06b      	beq.n	8000db6 <process_command+0x2e6>
 8000cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d068      	beq.n	8000db6 <process_command+0x2e6>
 8000ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d065      	beq.n	8000db6 <process_command+0x2e6>
      uint8_t layer = atoi(layer_str);
 8000cea:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000cec:	f00c f925 	bl	800cf3a <atoi>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      uint8_t row = atoi(row_str);
 8000cf6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000cf8:	f00c f91f 	bl	800cf3a <atoi>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
      uint8_t col = atoi(col_str);
 8000d02:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000d04:	f00c f919 	bl	800cf3a <atoi>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000d0e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	d84b      	bhi.n	8000dae <process_command+0x2de>
 8000d16:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	d847      	bhi.n	8000dae <process_command+0x2de>
 8000d1e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000d22:	2b03      	cmp	r3, #3
 8000d24:	d843      	bhi.n	8000dae <process_command+0x2de>
        uint16_t values[MAX_MACRO_LEN];
        uint8_t value_count = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

        // Parse up to MAX_MACRO_LEN values
        char *value_str = strtok(NULL, " ");
 8000d2c:	4929      	ldr	r1, [pc, #164]	@ (8000dd4 <process_command+0x304>)
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f00c faae 	bl	800d290 <strtok>
 8000d34:	66f8      	str	r0, [r7, #108]	@ 0x6c
        while (value_str && value_count < MAX_MACRO_LEN) {
 8000d36:	e015      	b.n	8000d64 <process_command+0x294>
          values[value_count] = atoi(value_str);
 8000d38:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000d3a:	f00c f8fe 	bl	800cf3a <atoi>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000d44:	b292      	uxth	r2, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	3378      	adds	r3, #120	@ 0x78
 8000d4a:	443b      	add	r3, r7
 8000d4c:	f823 2c70 	strh.w	r2, [r3, #-112]
          value_count++;
 8000d50:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000d54:	3301      	adds	r3, #1
 8000d56:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
          value_str = strtok(NULL, " ");
 8000d5a:	491e      	ldr	r1, [pc, #120]	@ (8000dd4 <process_command+0x304>)
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f00c fa97 	bl	800d290 <strtok>
 8000d62:	66f8      	str	r0, [r7, #108]	@ 0x6c
        while (value_str && value_count < MAX_MACRO_LEN) {
 8000d64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d011      	beq.n	8000d8e <process_command+0x2be>
 8000d6a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	d9e2      	bls.n	8000d38 <process_command+0x268>
        }

        // Fill remaining slots with ____ if not enough values provided
        while (value_count < MAX_MACRO_LEN) {
 8000d72:	e00c      	b.n	8000d8e <process_command+0x2be>
          values[value_count] = ____;
 8000d74:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	3378      	adds	r3, #120	@ 0x78
 8000d7c:	443b      	add	r3, r7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f823 2c70 	strh.w	r2, [r3, #-112]
          value_count++;
 8000d84:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000d88:	3301      	adds	r3, #1
 8000d8a:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
        while (value_count < MAX_MACRO_LEN) {
 8000d8e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d9ee      	bls.n	8000d74 <process_command+0x2a4>
        }

        set_macro_keymap_value(layer, row, col, values);
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8000d9e:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8000da2:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8000da6:	f000 fd11 	bl	80017cc <set_macro_keymap_value>
      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000daa:	bf00      	nop
    if (layer_str && row_str && col_str) {
 8000dac:	e0e3      	b.n	8000f76 <process_command+0x4a6>
      } else {
        cdc_write_string_chunked("Invalid layer/row/col values\r\n");
 8000dae:	4813      	ldr	r0, [pc, #76]	@ (8000dfc <process_command+0x32c>)
 8000db0:	f7ff fd26 	bl	8000800 <cdc_write_string_chunked>
    if (layer_str && row_str && col_str) {
 8000db4:	e0df      	b.n	8000f76 <process_command+0x4a6>
      }
    } else {
      cdc_write_string_chunked("Usage: setmacro <layer> <row> <col> <value1> [value2] [value3] [value4]\r\n");
 8000db6:	4814      	ldr	r0, [pc, #80]	@ (8000e08 <process_command+0x338>)
 8000db8:	f7ff fd22 	bl	8000800 <cdc_write_string_chunked>
 8000dbc:	e0db      	b.n	8000f76 <process_command+0x4a6>
    }
  } else if (strcmp(token, "save") == 0) {
 8000dbe:	4913      	ldr	r1, [pc, #76]	@ (8000e0c <process_command+0x33c>)
 8000dc0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000dc2:	f7ff fa0d 	bl	80001e0 <strcmp>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d121      	bne.n	8000e10 <process_command+0x340>
    save_config();
 8000dcc:	f000 fda4 	bl	8001918 <save_config>
 8000dd0:	e0d1      	b.n	8000f76 <process_command+0x4a6>
 8000dd2:	bf00      	nop
 8000dd4:	0800e4f4 	.word	0x0800e4f4
 8000dd8:	0800e4f8 	.word	0x0800e4f8
 8000ddc:	0800e500 	.word	0x0800e500
 8000de0:	0800e508 	.word	0x0800e508
 8000de4:	0800e510 	.word	0x0800e510
 8000de8:	0800e514 	.word	0x0800e514
 8000dec:	0800e538 	.word	0x0800e538
 8000df0:	0800e540 	.word	0x0800e540
 8000df4:	0800e558 	.word	0x0800e558
 8000df8:	0800e570 	.word	0x0800e570
 8000dfc:	0800e578 	.word	0x0800e578
 8000e00:	0800e598 	.word	0x0800e598
 8000e04:	0800e5c4 	.word	0x0800e5c4
 8000e08:	0800e5d0 	.word	0x0800e5d0
 8000e0c:	0800e61c 	.word	0x0800e61c
  } else if (strcmp(token, "load") == 0) {
 8000e10:	495a      	ldr	r1, [pc, #360]	@ (8000f7c <process_command+0x4ac>)
 8000e12:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000e14:	f7ff f9e4 	bl	80001e0 <strcmp>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d102      	bne.n	8000e24 <process_command+0x354>
    load_config();
 8000e1e:	f000 fd8f 	bl	8001940 <load_config>
 8000e22:	e0a8      	b.n	8000f76 <process_command+0x4a6>
  } else if (strcmp(token, "reset") == 0) {
 8000e24:	4956      	ldr	r1, [pc, #344]	@ (8000f80 <process_command+0x4b0>)
 8000e26:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000e28:	f7ff f9da 	bl	80001e0 <strcmp>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d102      	bne.n	8000e38 <process_command+0x368>
    reset_config();
 8000e32:	f000 fd91 	bl	8001958 <reset_config>
 8000e36:	e09e      	b.n	8000f76 <process_command+0x4a6>
  } else if (strcmp(token, "cycle") == 0) {
 8000e38:	4952      	ldr	r1, [pc, #328]	@ (8000f84 <process_command+0x4b4>)
 8000e3a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000e3c:	f7ff f9d0 	bl	80001e0 <strcmp>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d103      	bne.n	8000e4e <process_command+0x37e>
    cycle_count_on = 1;
 8000e46:	4b50      	ldr	r3, [pc, #320]	@ (8000f88 <process_command+0x4b8>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	e093      	b.n	8000f76 <process_command+0x4a6>
  }
  else if (strcmp(token, "setkeyparam") == 0) {
 8000e4e:	494f      	ldr	r1, [pc, #316]	@ (8000f8c <process_command+0x4bc>)
 8000e50:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000e52:	f7ff f9c5 	bl	80001e0 <strcmp>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d14b      	bne.n	8000ef4 <process_command+0x424>
    char *row_str = strtok(NULL, " ");
 8000e5c:	494c      	ldr	r1, [pc, #304]	@ (8000f90 <process_command+0x4c0>)
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f00c fa16 	bl	800d290 <strtok>
 8000e64:	65b8      	str	r0, [r7, #88]	@ 0x58
    char *col_str = strtok(NULL, " ");
 8000e66:	494a      	ldr	r1, [pc, #296]	@ (8000f90 <process_command+0x4c0>)
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f00c fa11 	bl	800d290 <strtok>
 8000e6e:	6578      	str	r0, [r7, #84]	@ 0x54
    char *param = strtok(NULL, " ");
 8000e70:	4947      	ldr	r1, [pc, #284]	@ (8000f90 <process_command+0x4c0>)
 8000e72:	2000      	movs	r0, #0
 8000e74:	f00c fa0c 	bl	800d290 <strtok>
 8000e78:	6538      	str	r0, [r7, #80]	@ 0x50
    char *value_str = strtok(NULL, " ");
 8000e7a:	4945      	ldr	r1, [pc, #276]	@ (8000f90 <process_command+0x4c0>)
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f00c fa07 	bl	800d290 <strtok>
 8000e82:	64f8      	str	r0, [r7, #76]	@ 0x4c

    if (row_str && col_str && param && value_str) {
 8000e84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d030      	beq.n	8000eec <process_command+0x41c>
 8000e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d02d      	beq.n	8000eec <process_command+0x41c>
 8000e90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d02a      	beq.n	8000eec <process_command+0x41c>
 8000e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d027      	beq.n	8000eec <process_command+0x41c>
      uint8_t row = atoi(row_str);
 8000e9c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8000e9e:	f00c f84c 	bl	800cf3a <atoi>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
      uint8_t col = atoi(col_str);
 8000ea8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000eaa:	f00c f846 	bl	800cf3a <atoi>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
      uint16_t value = atoi(value_str);
 8000eb4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000eb6:	f00c f840 	bl	800cf3a <atoi>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

      if (row < ADC_CHANNEL_COUNT && col < AMUX_CHANNEL_COUNT) {
 8000ec0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d10d      	bne.n	8000ee4 <process_command+0x414>
 8000ec8:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d809      	bhi.n	8000ee4 <process_command+0x414>
        set_key_param(row, col, param, value);
 8000ed0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000ed4:	f897 104a 	ldrb.w	r1, [r7, #74]	@ 0x4a
 8000ed8:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8000edc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000ede:	f000 f951 	bl	8001184 <set_key_param>
    if (row_str && col_str && param && value_str) {
 8000ee2:	e048      	b.n	8000f76 <process_command+0x4a6>
      } else {
        cdc_write_string_chunked("Invalid row/col values\r\n");
 8000ee4:	482b      	ldr	r0, [pc, #172]	@ (8000f94 <process_command+0x4c4>)
 8000ee6:	f7ff fc8b 	bl	8000800 <cdc_write_string_chunked>
    if (row_str && col_str && param && value_str) {
 8000eea:	e044      	b.n	8000f76 <process_command+0x4a6>
      }
    }
    else {
      cdc_write_string_chunked("Usage: setkeyparam <row> <col> <param> <value>\r\n");
 8000eec:	482a      	ldr	r0, [pc, #168]	@ (8000f98 <process_command+0x4c8>)
 8000eee:	f7ff fc87 	bl	8000800 <cdc_write_string_chunked>
 8000ef2:	e040      	b.n	8000f76 <process_command+0x4a6>
    }
  }
  else if (strcmp(token, "showkey") == 0) {
 8000ef4:	4929      	ldr	r1, [pc, #164]	@ (8000f9c <process_command+0x4cc>)
 8000ef6:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000ef8:	f7ff f972 	bl	80001e0 <strcmp>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d134      	bne.n	8000f6c <process_command+0x49c>
    char *row_str = strtok(NULL, " ");
 8000f02:	4923      	ldr	r1, [pc, #140]	@ (8000f90 <process_command+0x4c0>)
 8000f04:	2000      	movs	r0, #0
 8000f06:	f00c f9c3 	bl	800d290 <strtok>
 8000f0a:	6678      	str	r0, [r7, #100]	@ 0x64
    char *col_str = strtok(NULL, " ");
 8000f0c:	4920      	ldr	r1, [pc, #128]	@ (8000f90 <process_command+0x4c0>)
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f00c f9be 	bl	800d290 <strtok>
 8000f14:	6638      	str	r0, [r7, #96]	@ 0x60

    if (row_str && col_str) {
 8000f16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d023      	beq.n	8000f64 <process_command+0x494>
 8000f1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d020      	beq.n	8000f64 <process_command+0x494>
      uint8_t row = atoi(row_str);
 8000f22:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000f24:	f00c f809 	bl	800cf3a <atoi>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      uint8_t col = atoi(col_str);
 8000f2e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000f30:	f00c f803 	bl	800cf3a <atoi>
 8000f34:	4603      	mov	r3, r0
 8000f36:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

      if (row < ADC_CHANNEL_COUNT && col < AMUX_CHANNEL_COUNT) {
 8000f3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10c      	bne.n	8000f5c <process_command+0x48c>
 8000f42:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8000f46:	2b0f      	cmp	r3, #15
 8000f48:	d808      	bhi.n	8000f5c <process_command+0x48c>
        print_key_config(row, col);
 8000f4a:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 8000f4e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 f827 	bl	8000fa8 <print_key_config>
    if (row_str && col_str) {
 8000f5a:	e00c      	b.n	8000f76 <process_command+0x4a6>
      } else {
        cdc_write_string_chunked("Invalid row/col values\r\n");
 8000f5c:	480d      	ldr	r0, [pc, #52]	@ (8000f94 <process_command+0x4c4>)
 8000f5e:	f7ff fc4f 	bl	8000800 <cdc_write_string_chunked>
    if (row_str && col_str) {
 8000f62:	e008      	b.n	8000f76 <process_command+0x4a6>
      }
    } else {
      cdc_write_string_chunked("Usage: showkey <row> <col>\r\n");
 8000f64:	480e      	ldr	r0, [pc, #56]	@ (8000fa0 <process_command+0x4d0>)
 8000f66:	f7ff fc4b 	bl	8000800 <cdc_write_string_chunked>
 8000f6a:	e004      	b.n	8000f76 <process_command+0x4a6>
    }
  }

else {
    cdc_write_string_chunked("Unknown command. Type 'help' for available commands\r\n");
 8000f6c:	480d      	ldr	r0, [pc, #52]	@ (8000fa4 <process_command+0x4d4>)
 8000f6e:	f7ff fc47 	bl	8000800 <cdc_write_string_chunked>
 8000f72:	e000      	b.n	8000f76 <process_command+0x4a6>
    return;
 8000f74:	bf00      	nop
  }
}
 8000f76:	3778      	adds	r7, #120	@ 0x78
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	0800e624 	.word	0x0800e624
 8000f80:	0800e62c 	.word	0x0800e62c
 8000f84:	0800e634 	.word	0x0800e634
 8000f88:	20000cf8 	.word	0x20000cf8
 8000f8c:	0800e63c 	.word	0x0800e63c
 8000f90:	0800e4f4 	.word	0x0800e4f4
 8000f94:	0800e648 	.word	0x0800e648
 8000f98:	0800e664 	.word	0x0800e664
 8000f9c:	0800e698 	.word	0x0800e698
 8000fa0:	0800e6a0 	.word	0x0800e6a0
 8000fa4:	0800e6c0 	.word	0x0800e6c0

08000fa8 <print_key_config>:

static void print_key_config(uint8_t row, uint8_t col) {
 8000fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000faa:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 8000fae:	af0e      	add	r7, sp, #56	@ 0x38
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000fb6:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8000fba:	701a      	strb	r2, [r3, #0]
 8000fbc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000fc0:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	701a      	strb	r2, [r3, #0]
  char buffer[512];
  struct key *k = &keyboard_keys[row][col];
 8000fc8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000fcc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8000fd0:	7819      	ldrb	r1, [r3, #0]
 8000fd2:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000fd6:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	441a      	add	r2, r3
 8000fe2:	0093      	lsls	r3, r2, #2
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	011b      	lsls	r3, r3, #4
 8000fea:	440b      	add	r3, r1
 8000fec:	019b      	lsls	r3, r3, #6
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a3a      	ldr	r2, [pc, #232]	@ (80010dc <print_key_config+0x134>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c

  snprintf(buffer, sizeof(buffer),
 8000ff8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000ffc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8001000:	781c      	ldrb	r4, [r3, #0]
 8001002:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8001006:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 800100a:	781a      	ldrb	r2, [r3, #0]
    "    reset_offset       : %u\r\n"
    "    trigger_offset     : %u\r\n"
    "    rapid_trigger_off  : %u\r\n"
    "    triggered_at       : %lu\r\n",
    row, col,
    k->layers[0].value,
 800100c:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8001010:	1d99      	adds	r1, r3, #6
    k->idle_counter,
 8001012:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8001016:	78db      	ldrb	r3, [r3, #3]
  snprintf(buffer, sizeof(buffer),
 8001018:	461e      	mov	r6, r3
    k->is_idle,
 800101a:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800101e:	791b      	ldrb	r3, [r3, #4]
  snprintf(buffer, sizeof(buffer),
 8001020:	623b      	str	r3, [r7, #32]
    k->calibration.cycles_count,
 8001022:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8001026:	f8b3 3029 	ldrh.w	r3, [r3, #41]	@ 0x29
 800102a:	b29b      	uxth	r3, r3
  snprintf(buffer, sizeof(buffer),
 800102c:	61fb      	str	r3, [r7, #28]
    k->calibration.idle_value,
 800102e:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8001032:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001036:	b29b      	uxth	r3, r3
  snprintf(buffer, sizeof(buffer),
 8001038:	61bb      	str	r3, [r7, #24]
    k->calibration.max_distance,
 800103a:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800103e:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 8001042:	b29b      	uxth	r3, r3
  snprintf(buffer, sizeof(buffer),
 8001044:	617b      	str	r3, [r7, #20]
    k->actuation.direction,
 8001046:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800104a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
  snprintf(buffer, sizeof(buffer),
 800104e:	613b      	str	r3, [r7, #16]
    k->actuation.direction_changed_point,
 8001050:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8001054:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
  snprintf(buffer, sizeof(buffer),
 8001058:	60fb      	str	r3, [r7, #12]
    k->actuation.status,
 800105a:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800105e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
  snprintf(buffer, sizeof(buffer),
 8001062:	60bb      	str	r3, [r7, #8]
    k->actuation.reset_offset,
 8001064:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8001068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
  snprintf(buffer, sizeof(buffer),
 800106c:	607b      	str	r3, [r7, #4]
    k->actuation.trigger_offset,
 800106e:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8001072:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
  snprintf(buffer, sizeof(buffer),
 8001076:	603b      	str	r3, [r7, #0]
    k->actuation.rapid_trigger_offset,
 8001078:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800107c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
  snprintf(buffer, sizeof(buffer),
 8001080:	461d      	mov	r5, r3
 8001082:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8001086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001088:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800108c:	930d      	str	r3, [sp, #52]	@ 0x34
 800108e:	950c      	str	r5, [sp, #48]	@ 0x30
 8001090:	683d      	ldr	r5, [r7, #0]
 8001092:	950b      	str	r5, [sp, #44]	@ 0x2c
 8001094:	687d      	ldr	r5, [r7, #4]
 8001096:	950a      	str	r5, [sp, #40]	@ 0x28
 8001098:	68bd      	ldr	r5, [r7, #8]
 800109a:	9509      	str	r5, [sp, #36]	@ 0x24
 800109c:	68fd      	ldr	r5, [r7, #12]
 800109e:	9508      	str	r5, [sp, #32]
 80010a0:	693d      	ldr	r5, [r7, #16]
 80010a2:	9507      	str	r5, [sp, #28]
 80010a4:	697d      	ldr	r5, [r7, #20]
 80010a6:	9506      	str	r5, [sp, #24]
 80010a8:	69bd      	ldr	r5, [r7, #24]
 80010aa:	9505      	str	r5, [sp, #20]
 80010ac:	69fd      	ldr	r5, [r7, #28]
 80010ae:	9504      	str	r5, [sp, #16]
 80010b0:	6a3b      	ldr	r3, [r7, #32]
 80010b2:	9303      	str	r3, [sp, #12]
 80010b4:	9602      	str	r6, [sp, #8]
 80010b6:	9101      	str	r1, [sp, #4]
 80010b8:	9200      	str	r2, [sp, #0]
 80010ba:	4623      	mov	r3, r4
 80010bc:	4a08      	ldr	r2, [pc, #32]	@ (80010e0 <print_key_config+0x138>)
 80010be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010c2:	f00b ff3f 	bl	800cf44 <sniprintf>
    k->actuation.triggered_at
  );

  cdc_write_string_chunked(buffer);
 80010c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fb98 	bl	8000800 <cdc_write_string_chunked>
}
 80010d0:	bf00      	nop
 80010d2:	f507 770d 	add.w	r7, r7, #564	@ 0x234
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000310 	.word	0x20000310
 80010e0:	0800e6f8 	.word	0x0800e6f8

080010e4 <print_help>:


static void print_help(void) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  cdc_write_string_chunked("Available commands:\r\n");
 80010e8:	4817      	ldr	r0, [pc, #92]	@ (8001148 <print_help+0x64>)
 80010ea:	f7ff fb89 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  help                    - Show this help\r\n");
 80010ee:	4817      	ldr	r0, [pc, #92]	@ (800114c <print_help+0x68>)
 80010f0:	f7ff fb86 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  show                    - Show current configuration\r\n");
 80010f4:	4816      	ldr	r0, [pc, #88]	@ (8001150 <print_help+0x6c>)
 80010f6:	f7ff fb83 	bl	8000800 <cdc_write_string_chunked>
  //  cdc_write_string_chunked("  stream                  - Start streaming ADC values (Ctrl+C to stop)\r\n");
  cdc_write_string_chunked("  set <param> <value>     - Set configuration parameter\r\n");
 80010fa:	4816      	ldr	r0, [pc, #88]	@ (8001154 <print_help+0x70>)
 80010fc:	f7ff fb80 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  keymap <layer>          - Show keymap for layer\r\n");
 8001100:	4815      	ldr	r0, [pc, #84]	@ (8001158 <print_help+0x74>)
 8001102:	f7ff fb7d 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  setkey <L> <R> <C> <V>  - Set key value (Layer/Row/Col/Value)\r\n");
 8001106:	4815      	ldr	r0, [pc, #84]	@ (800115c <print_help+0x78>)
 8001108:	f7ff fb7a 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  setmacro <L> <R> <C> <V1> [V2] [V3] [V4]  - Set macro key value (Layer/Row/Col/Value1 [Value2] [Value3] [Value4])\r\n");
 800110c:	4814      	ldr	r0, [pc, #80]	@ (8001160 <print_help+0x7c>)
 800110e:	f7ff fb77 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  save                    - Save configuration to flash\r\n");
 8001112:	4814      	ldr	r0, [pc, #80]	@ (8001164 <print_help+0x80>)
 8001114:	f7ff fb74 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  load                    - Load configuration from flash\r\n");
 8001118:	4813      	ldr	r0, [pc, #76]	@ (8001168 <print_help+0x84>)
 800111a:	f7ff fb71 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  reset                   - Reset to default values\r\n");
 800111e:	4813      	ldr	r0, [pc, #76]	@ (800116c <print_help+0x88>)
 8001120:	f7ff fb6e 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  showkey <R> <C>        - Show config for key at row R, column C\r\n");
 8001124:	4812      	ldr	r0, [pc, #72]	@ (8001170 <print_help+0x8c>)
 8001126:	f7ff fb6b 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  setkeyparam <R> <C> <param> <value> - Set key actuation param (trigger_offset, reset_offset, etc.)\r\n");
 800112a:	4812      	ldr	r0, [pc, #72]	@ (8001174 <print_help+0x90>)
 800112c:	f7ff fb68 	bl	8000800 <cdc_write_string_chunked>

  cdc_write_string_chunked("\r\nParameters:\r\n");
 8001130:	4811      	ldr	r0, [pc, #68]	@ (8001178 <print_help+0x94>)
 8001132:	f7ff fb65 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  reverse_magnet_pole, trigger_offset, reset_threshold,\r\n");
 8001136:	4811      	ldr	r0, [pc, #68]	@ (800117c <print_help+0x98>)
 8001138:	f7ff fb62 	bl	8000800 <cdc_write_string_chunked>
  cdc_write_string_chunked("  rapid_trigger_offset, tap_timeout\r\n");
 800113c:	4810      	ldr	r0, [pc, #64]	@ (8001180 <print_help+0x9c>)
 800113e:	f7ff fb5f 	bl	8000800 <cdc_write_string_chunked>

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	0800e8ac 	.word	0x0800e8ac
 800114c:	0800e8c4 	.word	0x0800e8c4
 8001150:	0800e8f4 	.word	0x0800e8f4
 8001154:	0800e930 	.word	0x0800e930
 8001158:	0800e96c 	.word	0x0800e96c
 800115c:	0800e9a0 	.word	0x0800e9a0
 8001160:	0800e9e4 	.word	0x0800e9e4
 8001164:	0800ea5c 	.word	0x0800ea5c
 8001168:	0800ea98 	.word	0x0800ea98
 800116c:	0800ead4 	.word	0x0800ead4
 8001170:	0800eb0c 	.word	0x0800eb0c
 8001174:	0800eb50 	.word	0x0800eb50
 8001178:	0800ebb8 	.word	0x0800ebb8
 800117c:	0800ebc8 	.word	0x0800ebc8
 8001180:	0800ec04 	.word	0x0800ec04

08001184 <set_key_param>:

static void set_key_param(uint8_t row, uint8_t col, const char *param, uint16_t value) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b0a6      	sub	sp, #152	@ 0x98
 8001188:	af02      	add	r7, sp, #8
 800118a:	603a      	str	r2, [r7, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
 8001192:	460b      	mov	r3, r1
 8001194:	71bb      	strb	r3, [r7, #6]
 8001196:	4613      	mov	r3, r2
 8001198:	80bb      	strh	r3, [r7, #4]
  char buffer[128];
  struct key *k = &keyboard_keys[row][col];
 800119a:	79f9      	ldrb	r1, [r7, #7]
 800119c:	79bb      	ldrb	r3, [r7, #6]
 800119e:	461a      	mov	r2, r3
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	441a      	add	r2, r3
 80011a4:	0093      	lsls	r3, r2, #2
 80011a6:	461a      	mov	r2, r3
 80011a8:	460b      	mov	r3, r1
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	440b      	add	r3, r1
 80011ae:	019b      	lsls	r3, r3, #6
 80011b0:	4413      	add	r3, r2
 80011b2:	4a31      	ldr	r2, [pc, #196]	@ (8001278 <set_key_param+0xf4>)
 80011b4:	4413      	add	r3, r2
 80011b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  if (strcmp(param, "trigger_offset") == 0) {
 80011ba:	4930      	ldr	r1, [pc, #192]	@ (800127c <set_key_param+0xf8>)
 80011bc:	6838      	ldr	r0, [r7, #0]
 80011be:	f7ff f80f 	bl	80001e0 <strcmp>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d112      	bne.n	80011ee <set_key_param+0x6a>
    k->actuation.trigger_offset = (uint8_t)value;
 80011c8:	88bb      	ldrh	r3, [r7, #4]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80011d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    snprintf(buffer, sizeof(buffer), "Key[%u][%u] trigger_offset set to %u\r\n", row, col, value);
 80011d4:	79f9      	ldrb	r1, [r7, #7]
 80011d6:	79bb      	ldrb	r3, [r7, #6]
 80011d8:	88ba      	ldrh	r2, [r7, #4]
 80011da:	f107 000c 	add.w	r0, r7, #12
 80011de:	9201      	str	r2, [sp, #4]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	460b      	mov	r3, r1
 80011e4:	4a26      	ldr	r2, [pc, #152]	@ (8001280 <set_key_param+0xfc>)
 80011e6:	2180      	movs	r1, #128	@ 0x80
 80011e8:	f00b feac 	bl	800cf44 <sniprintf>
 80011ec:	e03a      	b.n	8001264 <set_key_param+0xe0>
  } else if (strcmp(param, "reset_offset") == 0) {
 80011ee:	4925      	ldr	r1, [pc, #148]	@ (8001284 <set_key_param+0x100>)
 80011f0:	6838      	ldr	r0, [r7, #0]
 80011f2:	f7fe fff5 	bl	80001e0 <strcmp>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d112      	bne.n	8001222 <set_key_param+0x9e>
    k->actuation.reset_offset = (uint8_t)value;
 80011fc:	88bb      	ldrh	r3, [r7, #4]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    snprintf(buffer, sizeof(buffer), "Key[%u][%u] reset_offset set to %u\r\n", row, col, value);
 8001208:	79f9      	ldrb	r1, [r7, #7]
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	88ba      	ldrh	r2, [r7, #4]
 800120e:	f107 000c 	add.w	r0, r7, #12
 8001212:	9201      	str	r2, [sp, #4]
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	460b      	mov	r3, r1
 8001218:	4a1b      	ldr	r2, [pc, #108]	@ (8001288 <set_key_param+0x104>)
 800121a:	2180      	movs	r1, #128	@ 0x80
 800121c:	f00b fe92 	bl	800cf44 <sniprintf>
 8001220:	e020      	b.n	8001264 <set_key_param+0xe0>
  } else if (strcmp(param, "rapid_trigger_offset") == 0) {
 8001222:	491a      	ldr	r1, [pc, #104]	@ (800128c <set_key_param+0x108>)
 8001224:	6838      	ldr	r0, [r7, #0]
 8001226:	f7fe ffdb 	bl	80001e0 <strcmp>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d112      	bne.n	8001256 <set_key_param+0xd2>
    k->actuation.rapid_trigger_offset = (uint8_t)value;
 8001230:	88bb      	ldrh	r3, [r7, #4]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001238:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    snprintf(buffer, sizeof(buffer), "Key[%u][%u] rapid_trigger_offset set to %u\r\n", row, col, value);
 800123c:	79f9      	ldrb	r1, [r7, #7]
 800123e:	79bb      	ldrb	r3, [r7, #6]
 8001240:	88ba      	ldrh	r2, [r7, #4]
 8001242:	f107 000c 	add.w	r0, r7, #12
 8001246:	9201      	str	r2, [sp, #4]
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	460b      	mov	r3, r1
 800124c:	4a10      	ldr	r2, [pc, #64]	@ (8001290 <set_key_param+0x10c>)
 800124e:	2180      	movs	r1, #128	@ 0x80
 8001250:	f00b fe78 	bl	800cf44 <sniprintf>
 8001254:	e006      	b.n	8001264 <set_key_param+0xe0>
  } else {
    snprintf(buffer, sizeof(buffer), "Unknown key parameter: %s\r\n", param);
 8001256:	f107 000c 	add.w	r0, r7, #12
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <set_key_param+0x110>)
 800125e:	2180      	movs	r1, #128	@ 0x80
 8001260:	f00b fe70 	bl	800cf44 <sniprintf>
  }

  cdc_write_string_chunked(buffer);
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fac9 	bl	8000800 <cdc_write_string_chunked>
}
 800126e:	bf00      	nop
 8001270:	3790      	adds	r7, #144	@ 0x90
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000310 	.word	0x20000310
 800127c:	0800ec2c 	.word	0x0800ec2c
 8001280:	0800ec3c 	.word	0x0800ec3c
 8001284:	0800ec64 	.word	0x0800ec64
 8001288:	0800ec74 	.word	0x0800ec74
 800128c:	0800ec9c 	.word	0x0800ec9c
 8001290:	0800ecb4 	.word	0x0800ecb4
 8001294:	0800ece4 	.word	0x0800ece4

08001298 <print_config>:


static void print_config(void) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b0a0      	sub	sp, #128	@ 0x80
 800129c:	af00      	add	r7, sp, #0
  char buffer[128];

  cdc_write_string_chunked("Current Configuration:\r\n");
 800129e:	4820      	ldr	r0, [pc, #128]	@ (8001320 <print_config+0x88>)
 80012a0:	f7ff faae 	bl	8000800 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  reverse_magnet_pole: %u\r\n", keyboard_user_config.reverse_magnet_pole);
 80012a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001324 <print_config+0x8c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4638      	mov	r0, r7
 80012aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001328 <print_config+0x90>)
 80012ac:	2180      	movs	r1, #128	@ 0x80
 80012ae:	f00b fe49 	bl	800cf44 <sniprintf>
  cdc_write_string_chunked(buffer);
 80012b2:	463b      	mov	r3, r7
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff faa3 	bl	8000800 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  trigger_offset: %u\r\n", keyboard_user_config.trigger_offset);
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <print_config+0x8c>)
 80012bc:	785b      	ldrb	r3, [r3, #1]
 80012be:	4638      	mov	r0, r7
 80012c0:	4a1a      	ldr	r2, [pc, #104]	@ (800132c <print_config+0x94>)
 80012c2:	2180      	movs	r1, #128	@ 0x80
 80012c4:	f00b fe3e 	bl	800cf44 <sniprintf>
  cdc_write_string_chunked(buffer);
 80012c8:	463b      	mov	r3, r7
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fa98 	bl	8000800 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  reset_threshold: %u\r\n", keyboard_user_config.reset_threshold);
 80012d0:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <print_config+0x8c>)
 80012d2:	789b      	ldrb	r3, [r3, #2]
 80012d4:	4638      	mov	r0, r7
 80012d6:	4a16      	ldr	r2, [pc, #88]	@ (8001330 <print_config+0x98>)
 80012d8:	2180      	movs	r1, #128	@ 0x80
 80012da:	f00b fe33 	bl	800cf44 <sniprintf>
  cdc_write_string_chunked(buffer);
 80012de:	463b      	mov	r3, r7
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fa8d 	bl	8000800 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  rapid_trigger_offset: %u\r\n", keyboard_user_config.rapid_trigger_offset);
 80012e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <print_config+0x8c>)
 80012e8:	78db      	ldrb	r3, [r3, #3]
 80012ea:	4638      	mov	r0, r7
 80012ec:	4a11      	ldr	r2, [pc, #68]	@ (8001334 <print_config+0x9c>)
 80012ee:	2180      	movs	r1, #128	@ 0x80
 80012f0:	f00b fe28 	bl	800cf44 <sniprintf>
  cdc_write_string_chunked(buffer);
 80012f4:	463b      	mov	r3, r7
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fa82 	bl	8000800 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  tap_timeout: %u\r\n", keyboard_user_config.tap_timeout);
 80012fc:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <print_config+0x8c>)
 80012fe:	889b      	ldrh	r3, [r3, #4]
 8001300:	4638      	mov	r0, r7
 8001302:	4a0d      	ldr	r2, [pc, #52]	@ (8001338 <print_config+0xa0>)
 8001304:	2180      	movs	r1, #128	@ 0x80
 8001306:	f00b fe1d 	bl	800cf44 <sniprintf>
  cdc_write_string_chunked(buffer);
 800130a:	463b      	mov	r3, r7
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fa77 	bl	8000800 <cdc_write_string_chunked>

  cdc_write_string_chunked("Use 'keymap <layer>' to view keymaps\r\n");
 8001312:	480a      	ldr	r0, [pc, #40]	@ (800133c <print_config+0xa4>)
 8001314:	f7ff fa74 	bl	8000800 <cdc_write_string_chunked>
}
 8001318:	bf00      	nop
 800131a:	3780      	adds	r7, #128	@ 0x80
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	0800ed00 	.word	0x0800ed00
 8001324:	20000000 	.word	0x20000000
 8001328:	0800ed1c 	.word	0x0800ed1c
 800132c:	0800ed38 	.word	0x0800ed38
 8001330:	0800ed50 	.word	0x0800ed50
 8001334:	0800ed68 	.word	0x0800ed68
 8001338:	0800ed88 	.word	0x0800ed88
 800133c:	0800ed9c 	.word	0x0800ed9c

08001340 <set_config_value>:

static void set_config_value(char *param, char *value) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b094      	sub	sp, #80	@ 0x50
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  char buffer[64];
  uint32_t val = atoi(value);
 800134a:	6838      	ldr	r0, [r7, #0]
 800134c:	f00b fdf5 	bl	800cf3a <atoi>
 8001350:	4603      	mov	r3, r0
 8001352:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (strcmp(param, "reverse_magnet_pole") == 0) {
 8001354:	4940      	ldr	r1, [pc, #256]	@ (8001458 <set_config_value+0x118>)
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7fe ff42 	bl	80001e0 <strcmp>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10c      	bne.n	800137c <set_config_value+0x3c>
    keyboard_user_config.reverse_magnet_pole = (uint8_t)val;
 8001362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b3d      	ldr	r3, [pc, #244]	@ (800145c <set_config_value+0x11c>)
 8001368:	701a      	strb	r2, [r3, #0]
    snprintf(buffer, sizeof(buffer), "Set reverse_magnet_pole to %u\r\n", keyboard_user_config.reverse_magnet_pole);
 800136a:	4b3c      	ldr	r3, [pc, #240]	@ (800145c <set_config_value+0x11c>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	f107 000c 	add.w	r0, r7, #12
 8001372:	4a3b      	ldr	r2, [pc, #236]	@ (8001460 <set_config_value+0x120>)
 8001374:	2140      	movs	r1, #64	@ 0x40
 8001376:	f00b fde5 	bl	800cf44 <sniprintf>
 800137a:	e05e      	b.n	800143a <set_config_value+0xfa>
  } else if (strcmp(param, "trigger_offset") == 0) {
 800137c:	4939      	ldr	r1, [pc, #228]	@ (8001464 <set_config_value+0x124>)
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7fe ff2e 	bl	80001e0 <strcmp>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d114      	bne.n	80013b4 <set_config_value+0x74>
    keyboard_user_config.trigger_offset = (uint8_t)val;
 800138a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4b33      	ldr	r3, [pc, #204]	@ (800145c <set_config_value+0x11c>)
 8001390:	705a      	strb	r2, [r3, #1]
    keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 8001392:	f240 2206 	movw	r2, #518	@ 0x206
 8001396:	2100      	movs	r1, #0
 8001398:	4830      	ldr	r0, [pc, #192]	@ (800145c <set_config_value+0x11c>)
 800139a:	f002 f8d7 	bl	800354c <keyboard_write_config>
    keyboard_init_keys();
 800139e:	f001 f987 	bl	80026b0 <keyboard_init_keys>
    snprintf(buffer, sizeof(buffer), "Set trigger_offset to %u\r\n", keyboard_user_config.trigger_offset);
 80013a2:	4b2e      	ldr	r3, [pc, #184]	@ (800145c <set_config_value+0x11c>)
 80013a4:	785b      	ldrb	r3, [r3, #1]
 80013a6:	f107 000c 	add.w	r0, r7, #12
 80013aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001468 <set_config_value+0x128>)
 80013ac:	2140      	movs	r1, #64	@ 0x40
 80013ae:	f00b fdc9 	bl	800cf44 <sniprintf>
 80013b2:	e042      	b.n	800143a <set_config_value+0xfa>
  } else if (strcmp(param, "reset_threshold") == 0) {
 80013b4:	492d      	ldr	r1, [pc, #180]	@ (800146c <set_config_value+0x12c>)
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7fe ff12 	bl	80001e0 <strcmp>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10c      	bne.n	80013dc <set_config_value+0x9c>
    keyboard_user_config.reset_threshold = (uint8_t)val;
 80013c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4b25      	ldr	r3, [pc, #148]	@ (800145c <set_config_value+0x11c>)
 80013c8:	709a      	strb	r2, [r3, #2]
    snprintf(buffer, sizeof(buffer), "Set reset_threshold to %u\r\n", keyboard_user_config.reset_threshold);
 80013ca:	4b24      	ldr	r3, [pc, #144]	@ (800145c <set_config_value+0x11c>)
 80013cc:	789b      	ldrb	r3, [r3, #2]
 80013ce:	f107 000c 	add.w	r0, r7, #12
 80013d2:	4a27      	ldr	r2, [pc, #156]	@ (8001470 <set_config_value+0x130>)
 80013d4:	2140      	movs	r1, #64	@ 0x40
 80013d6:	f00b fdb5 	bl	800cf44 <sniprintf>
 80013da:	e02e      	b.n	800143a <set_config_value+0xfa>
  } else if (strcmp(param, "rapid_trigger_offset") == 0) {
 80013dc:	4925      	ldr	r1, [pc, #148]	@ (8001474 <set_config_value+0x134>)
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7fe fefe 	bl	80001e0 <strcmp>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10c      	bne.n	8001404 <set_config_value+0xc4>
    keyboard_user_config.rapid_trigger_offset = (uint8_t)val;
 80013ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <set_config_value+0x11c>)
 80013f0:	70da      	strb	r2, [r3, #3]
    snprintf(buffer, sizeof(buffer), "Set rapid_trigger_offset to %u\r\n", keyboard_user_config.rapid_trigger_offset);
 80013f2:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <set_config_value+0x11c>)
 80013f4:	78db      	ldrb	r3, [r3, #3]
 80013f6:	f107 000c 	add.w	r0, r7, #12
 80013fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001478 <set_config_value+0x138>)
 80013fc:	2140      	movs	r1, #64	@ 0x40
 80013fe:	f00b fda1 	bl	800cf44 <sniprintf>
 8001402:	e01a      	b.n	800143a <set_config_value+0xfa>
  } else if (strcmp(param, "tap_timeout") == 0) {
 8001404:	491d      	ldr	r1, [pc, #116]	@ (800147c <set_config_value+0x13c>)
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7fe feea 	bl	80001e0 <strcmp>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10c      	bne.n	800142c <set_config_value+0xec>
    keyboard_user_config.tap_timeout = (uint16_t)val;
 8001412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001414:	b29a      	uxth	r2, r3
 8001416:	4b11      	ldr	r3, [pc, #68]	@ (800145c <set_config_value+0x11c>)
 8001418:	809a      	strh	r2, [r3, #4]
    snprintf(buffer, sizeof(buffer), "Set tap_timeout to %u\r\n", keyboard_user_config.tap_timeout);
 800141a:	4b10      	ldr	r3, [pc, #64]	@ (800145c <set_config_value+0x11c>)
 800141c:	889b      	ldrh	r3, [r3, #4]
 800141e:	f107 000c 	add.w	r0, r7, #12
 8001422:	4a17      	ldr	r2, [pc, #92]	@ (8001480 <set_config_value+0x140>)
 8001424:	2140      	movs	r1, #64	@ 0x40
 8001426:	f00b fd8d 	bl	800cf44 <sniprintf>
 800142a:	e006      	b.n	800143a <set_config_value+0xfa>
  } else {
    snprintf(buffer, sizeof(buffer), "Unknown parameter: %s\r\n", param);
 800142c:	f107 000c 	add.w	r0, r7, #12
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a14      	ldr	r2, [pc, #80]	@ (8001484 <set_config_value+0x144>)
 8001434:	2140      	movs	r1, #64	@ 0x40
 8001436:	f00b fd85 	bl	800cf44 <sniprintf>
  }
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 800143a:	f240 2206 	movw	r2, #518	@ 0x206
 800143e:	2100      	movs	r1, #0
 8001440:	4806      	ldr	r0, [pc, #24]	@ (800145c <set_config_value+0x11c>)
 8001442:	f002 f883 	bl	800354c <keyboard_write_config>
  cdc_write_string_chunked(buffer);
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f9d8 	bl	8000800 <cdc_write_string_chunked>
}
 8001450:	bf00      	nop
 8001452:	3750      	adds	r7, #80	@ 0x50
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	0800edc4 	.word	0x0800edc4
 800145c:	20000000 	.word	0x20000000
 8001460:	0800edd8 	.word	0x0800edd8
 8001464:	0800ec2c 	.word	0x0800ec2c
 8001468:	0800edf8 	.word	0x0800edf8
 800146c:	0800ee14 	.word	0x0800ee14
 8001470:	0800ee24 	.word	0x0800ee24
 8001474:	0800ec9c 	.word	0x0800ec9c
 8001478:	0800ee40 	.word	0x0800ee40
 800147c:	0800ee64 	.word	0x0800ee64
 8001480:	0800ee70 	.word	0x0800ee70
 8001484:	0800ee88 	.word	0x0800ee88

08001488 <print_keymap>:

static void print_keymap(uint8_t layer) {
 8001488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148a:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 800148e:	af00      	add	r7, sp, #0
 8001490:	4602      	mov	r2, r0
 8001492:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001496:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 800149a:	701a      	strb	r2, [r3, #0]
  char buffer[128];

  snprintf(buffer, sizeof(buffer), "Keymap for Layer %u:\r\n", layer);
 800149c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80014a0:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	f507 7003 	add.w	r0, r7, #524	@ 0x20c
 80014aa:	4a91      	ldr	r2, [pc, #580]	@ (80016f0 <print_keymap+0x268>)
 80014ac:	2180      	movs	r1, #128	@ 0x80
 80014ae:	f00b fd49 	bl	800cf44 <sniprintf>
  cdc_write_string_chunked(buffer);
 80014b2:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff f9a2 	bl	8000800 <cdc_write_string_chunked>

  // Print keymap row by row with proper chunking
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 80014bc:	2300      	movs	r3, #0
 80014be:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
 80014c2:	e109      	b.n	80016d8 <print_keymap+0x250>
    // Build the row string first
    char row_buffer[512]; // Larger buffer for macro display
    int pos = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "Row %u: ", row);
 80014ca:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80014ce:	f107 020c 	add.w	r2, r7, #12
 80014d2:	18d0      	adds	r0, r2, r3
 80014d4:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80014d8:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 80014dc:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 80014e0:	4a84      	ldr	r2, [pc, #528]	@ (80016f4 <print_keymap+0x26c>)
 80014e2:	f00b fd2f 	bl	800cf44 <sniprintf>
 80014e6:	4602      	mov	r2, r0
 80014e8:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80014ec:	4413      	add	r3, r2
 80014ee:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 80014f2:	2300      	movs	r3, #0
 80014f4:	f887 328f 	strb.w	r3, [r7, #655]	@ 0x28f
 80014f8:	e0cc      	b.n	8001694 <print_keymap+0x20c>
      // Check if this is a macro (multiple non-zero values)
      uint8_t macro_count = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f887 328e 	strb.w	r3, [r7, #654]	@ 0x28e
      for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001500:	2300      	movs	r3, #0
 8001502:	f887 328d 	strb.w	r3, [r7, #653]	@ 0x28d
 8001506:	e020      	b.n	800154a <print_keymap+0xc2>
        if (keyboard_user_config.keymaps[layer][row][col][i] != ____) {
 8001508:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800150c:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8001510:	7818      	ldrb	r0, [r3, #0]
 8001512:	f897 1297 	ldrb.w	r1, [r7, #663]	@ 0x297
 8001516:	f897 228f 	ldrb.w	r2, [r7, #655]	@ 0x28f
 800151a:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 800151e:	4c76      	ldr	r4, [pc, #472]	@ (80016f8 <print_keymap+0x270>)
 8001520:	0080      	lsls	r0, r0, #2
 8001522:	4401      	add	r1, r0
 8001524:	0089      	lsls	r1, r1, #2
 8001526:	440a      	add	r2, r1
 8001528:	0092      	lsls	r2, r2, #2
 800152a:	4413      	add	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4423      	add	r3, r4
 8001530:	88db      	ldrh	r3, [r3, #6]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d004      	beq.n	8001540 <print_keymap+0xb8>
          macro_count++;
 8001536:	f897 328e 	ldrb.w	r3, [r7, #654]	@ 0x28e
 800153a:	3301      	adds	r3, #1
 800153c:	f887 328e 	strb.w	r3, [r7, #654]	@ 0x28e
      for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001540:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 8001544:	3301      	adds	r3, #1
 8001546:	f887 328d 	strb.w	r3, [r7, #653]	@ 0x28d
 800154a:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 800154e:	2b03      	cmp	r3, #3
 8001550:	d9da      	bls.n	8001508 <print_keymap+0x80>
        }
      }

      if (macro_count > 1) {
 8001552:	f897 328e 	ldrb.w	r3, [r7, #654]	@ 0x28e
 8001556:	2b01      	cmp	r3, #1
 8001558:	d973      	bls.n	8001642 <print_keymap+0x1ba>
        // This is a macro - show all values in brackets
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "[");
 800155a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800155e:	f107 020c 	add.w	r2, r7, #12
 8001562:	18d0      	adds	r0, r2, r3
 8001564:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001568:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800156c:	4a63      	ldr	r2, [pc, #396]	@ (80016fc <print_keymap+0x274>)
 800156e:	4619      	mov	r1, r3
 8001570:	f00b fce8 	bl	800cf44 <sniprintf>
 8001574:	4602      	mov	r2, r0
 8001576:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800157a:	4413      	add	r3, r2
 800157c:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
        for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001580:	2300      	movs	r3, #0
 8001582:	f887 328c 	strb.w	r3, [r7, #652]	@ 0x28c
 8001586:	e044      	b.n	8001612 <print_keymap+0x18a>
          if (i > 0)
 8001588:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 800158c:	2b00      	cmp	r3, #0
 800158e:	d012      	beq.n	80015b6 <print_keymap+0x12e>
            pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, ",");
 8001590:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001594:	f107 020c 	add.w	r2, r7, #12
 8001598:	18d0      	adds	r0, r2, r3
 800159a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800159e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80015a2:	4a57      	ldr	r2, [pc, #348]	@ (8001700 <print_keymap+0x278>)
 80015a4:	4619      	mov	r1, r3
 80015a6:	f00b fccd 	bl	800cf44 <sniprintf>
 80015aa:	4602      	mov	r2, r0
 80015ac:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80015b0:	4413      	add	r3, r2
 80015b2:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
          pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%u",
 80015b6:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80015ba:	f107 020c 	add.w	r2, r7, #12
 80015be:	18d4      	adds	r4, r2, r3
 80015c0:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80015c4:	f5c3 7500 	rsb	r5, r3, #512	@ 0x200
                          keyboard_user_config.keymaps[layer][row][col][i]);
 80015c8:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80015cc:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 80015d0:	7818      	ldrb	r0, [r3, #0]
 80015d2:	f897 1297 	ldrb.w	r1, [r7, #663]	@ 0x297
 80015d6:	f897 228f 	ldrb.w	r2, [r7, #655]	@ 0x28f
 80015da:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 80015de:	4e46      	ldr	r6, [pc, #280]	@ (80016f8 <print_keymap+0x270>)
 80015e0:	0080      	lsls	r0, r0, #2
 80015e2:	4401      	add	r1, r0
 80015e4:	0089      	lsls	r1, r1, #2
 80015e6:	440a      	add	r2, r1
 80015e8:	0092      	lsls	r2, r2, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4433      	add	r3, r6
 80015f0:	88db      	ldrh	r3, [r3, #6]
          pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%u",
 80015f2:	4a44      	ldr	r2, [pc, #272]	@ (8001704 <print_keymap+0x27c>)
 80015f4:	4629      	mov	r1, r5
 80015f6:	4620      	mov	r0, r4
 80015f8:	f00b fca4 	bl	800cf44 <sniprintf>
 80015fc:	4602      	mov	r2, r0
 80015fe:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001602:	4413      	add	r3, r2
 8001604:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
        for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001608:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 800160c:	3301      	adds	r3, #1
 800160e:	f887 328c 	strb.w	r3, [r7, #652]	@ 0x28c
 8001612:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 8001616:	2b03      	cmp	r3, #3
 8001618:	d9b6      	bls.n	8001588 <print_keymap+0x100>
        }
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "] ");
 800161a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800161e:	f107 020c 	add.w	r2, r7, #12
 8001622:	18d0      	adds	r0, r2, r3
 8001624:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001628:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800162c:	4a36      	ldr	r2, [pc, #216]	@ (8001708 <print_keymap+0x280>)
 800162e:	4619      	mov	r1, r3
 8001630:	f00b fc88 	bl	800cf44 <sniprintf>
 8001634:	4602      	mov	r2, r0
 8001636:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800163a:	4413      	add	r3, r2
 800163c:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001640:	e023      	b.n	800168a <print_keymap+0x202>
      } else {
        // Single key - show just the first value
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%4u ",
 8001642:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001646:	f107 020c 	add.w	r2, r7, #12
 800164a:	18d0      	adds	r0, r2, r3
 800164c:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001650:	f5c3 7400 	rsb	r4, r3, #512	@ 0x200
                        keyboard_user_config.keymaps[layer][row][col][0]);
 8001654:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001658:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 800165c:	7819      	ldrb	r1, [r3, #0]
 800165e:	f897 2297 	ldrb.w	r2, [r7, #663]	@ 0x297
 8001662:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 8001666:	4d24      	ldr	r5, [pc, #144]	@ (80016f8 <print_keymap+0x270>)
 8001668:	0089      	lsls	r1, r1, #2
 800166a:	440a      	add	r2, r1
 800166c:	0092      	lsls	r2, r2, #2
 800166e:	4413      	add	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	442b      	add	r3, r5
 8001674:	88db      	ldrh	r3, [r3, #6]
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%4u ",
 8001676:	4a25      	ldr	r2, [pc, #148]	@ (800170c <print_keymap+0x284>)
 8001678:	4621      	mov	r1, r4
 800167a:	f00b fc63 	bl	800cf44 <sniprintf>
 800167e:	4602      	mov	r2, r0
 8001680:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001684:	4413      	add	r3, r2
 8001686:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 800168a:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 800168e:	3301      	adds	r3, #1
 8001690:	f887 328f 	strb.w	r3, [r7, #655]	@ 0x28f
 8001694:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 8001698:	2b03      	cmp	r3, #3
 800169a:	f67f af2e 	bls.w	80014fa <print_keymap+0x72>
      }
    }

    pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "\r\n");
 800169e:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80016a2:	f107 020c 	add.w	r2, r7, #12
 80016a6:	18d0      	adds	r0, r2, r3
 80016a8:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80016ac:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80016b0:	4a17      	ldr	r2, [pc, #92]	@ (8001710 <print_keymap+0x288>)
 80016b2:	4619      	mov	r1, r3
 80016b4:	f00b fc46 	bl	800cf44 <sniprintf>
 80016b8:	4602      	mov	r2, r0
 80016ba:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80016be:	4413      	add	r3, r2
 80016c0:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    // Send the complete row
    cdc_write_string_chunked(row_buffer);
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff f899 	bl	8000800 <cdc_write_string_chunked>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 80016ce:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 80016d2:	3301      	adds	r3, #1
 80016d4:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
 80016d8:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 80016dc:	2b03      	cmp	r3, #3
 80016de:	f67f aef1 	bls.w	80014c4 <print_keymap+0x3c>
  }
}
 80016e2:	bf00      	nop
 80016e4:	bf00      	nop
 80016e6:	f507 7727 	add.w	r7, r7, #668	@ 0x29c
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ee:	bf00      	nop
 80016f0:	0800eea0 	.word	0x0800eea0
 80016f4:	0800eeb8 	.word	0x0800eeb8
 80016f8:	20000000 	.word	0x20000000
 80016fc:	0800eec4 	.word	0x0800eec4
 8001700:	0800e4ec 	.word	0x0800e4ec
 8001704:	0800e4f0 	.word	0x0800e4f0
 8001708:	0800eec8 	.word	0x0800eec8
 800170c:	0800eecc 	.word	0x0800eecc
 8001710:	0800e4b8 	.word	0x0800e4b8

08001714 <set_keymap_value>:

static void set_keymap_value(uint8_t layer, uint8_t row, uint8_t col, uint16_t value) {
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b099      	sub	sp, #100	@ 0x64
 8001718:	af04      	add	r7, sp, #16
 800171a:	4604      	mov	r4, r0
 800171c:	4608      	mov	r0, r1
 800171e:	4611      	mov	r1, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4623      	mov	r3, r4
 8001724:	71fb      	strb	r3, [r7, #7]
 8001726:	4603      	mov	r3, r0
 8001728:	71bb      	strb	r3, [r7, #6]
 800172a:	460b      	mov	r3, r1
 800172c:	717b      	strb	r3, [r7, #5]
 800172e:	4613      	mov	r3, r2
 8001730:	807b      	strh	r3, [r7, #2]
  char buffer[64];

  keyboard_user_config.keymaps[layer][row][col][0] = value;
 8001732:	79f9      	ldrb	r1, [r7, #7]
 8001734:	79ba      	ldrb	r2, [r7, #6]
 8001736:	797b      	ldrb	r3, [r7, #5]
 8001738:	4822      	ldr	r0, [pc, #136]	@ (80017c4 <set_keymap_value+0xb0>)
 800173a:	0089      	lsls	r1, r1, #2
 800173c:	440a      	add	r2, r1
 800173e:	0092      	lsls	r2, r2, #2
 8001740:	4413      	add	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4403      	add	r3, r0
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	80da      	strh	r2, [r3, #6]
  // Clear remaining macro slots
  for (uint8_t i = 1; i < MAX_MACRO_LEN; i++) {
 800174a:	2301      	movs	r3, #1
 800174c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001750:	e014      	b.n	800177c <set_keymap_value+0x68>
    keyboard_user_config.keymaps[layer][row][col][i] = ____;
 8001752:	79f8      	ldrb	r0, [r7, #7]
 8001754:	79b9      	ldrb	r1, [r7, #6]
 8001756:	797a      	ldrb	r2, [r7, #5]
 8001758:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800175c:	4c19      	ldr	r4, [pc, #100]	@ (80017c4 <set_keymap_value+0xb0>)
 800175e:	0080      	lsls	r0, r0, #2
 8001760:	4401      	add	r1, r0
 8001762:	0089      	lsls	r1, r1, #2
 8001764:	440a      	add	r2, r1
 8001766:	0092      	lsls	r2, r2, #2
 8001768:	4413      	add	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4423      	add	r3, r4
 800176e:	2200      	movs	r2, #0
 8001770:	80da      	strh	r2, [r3, #6]
  for (uint8_t i = 1; i < MAX_MACRO_LEN; i++) {
 8001772:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001776:	3301      	adds	r3, #1
 8001778:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800177c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001780:	2b03      	cmp	r3, #3
 8001782:	d9e6      	bls.n	8001752 <set_keymap_value+0x3e>
  }
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 8001784:	f240 2206 	movw	r2, #518	@ 0x206
 8001788:	2100      	movs	r1, #0
 800178a:	480e      	ldr	r0, [pc, #56]	@ (80017c4 <set_keymap_value+0xb0>)
 800178c:	f001 fede 	bl	800354c <keyboard_write_config>
  keyboard_init_keys();
 8001790:	f000 ff8e 	bl	80026b0 <keyboard_init_keys>

  snprintf(buffer, sizeof(buffer), "Set keymap[%u][%u][%u] to %u\r\n", layer, row, col, value);
 8001794:	79fc      	ldrb	r4, [r7, #7]
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	797a      	ldrb	r2, [r7, #5]
 800179a:	8879      	ldrh	r1, [r7, #2]
 800179c:	f107 000c 	add.w	r0, r7, #12
 80017a0:	9102      	str	r1, [sp, #8]
 80017a2:	9201      	str	r2, [sp, #4]
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	4623      	mov	r3, r4
 80017a8:	4a07      	ldr	r2, [pc, #28]	@ (80017c8 <set_keymap_value+0xb4>)
 80017aa:	2140      	movs	r1, #64	@ 0x40
 80017ac:	f00b fbca 	bl	800cf44 <sniprintf>
  cdc_write_string_chunked(buffer);
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff f823 	bl	8000800 <cdc_write_string_chunked>
}
 80017ba:	bf00      	nop
 80017bc:	3754      	adds	r7, #84	@ 0x54
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd90      	pop	{r4, r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000000 	.word	0x20000000
 80017c8:	0800eed4 	.word	0x0800eed4

080017cc <set_macro_keymap_value>:

static void set_macro_keymap_value(uint8_t layer, uint8_t row, uint8_t col, uint16_t values[MAX_MACRO_LEN]) {
 80017cc:	b5b0      	push	{r4, r5, r7, lr}
 80017ce:	b0a8      	sub	sp, #160	@ 0xa0
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	4603      	mov	r3, r0
 80017d6:	71fb      	strb	r3, [r7, #7]
 80017d8:	460b      	mov	r3, r1
 80017da:	71bb      	strb	r3, [r7, #6]
 80017dc:	4613      	mov	r3, r2
 80017de:	717b      	strb	r3, [r7, #5]
  char buffer[128];

  // Copy all macro values
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80017e0:	2300      	movs	r3, #0
 80017e2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80017e6:	e01a      	b.n	800181e <set_macro_keymap_value+0x52>
    keyboard_user_config.keymaps[layer][row][col][i] = values[i];
 80017e8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	18d4      	adds	r4, r2, r3
 80017f2:	79f8      	ldrb	r0, [r7, #7]
 80017f4:	79b9      	ldrb	r1, [r7, #6]
 80017f6:	797a      	ldrb	r2, [r7, #5]
 80017f8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80017fc:	8825      	ldrh	r5, [r4, #0]
 80017fe:	4c41      	ldr	r4, [pc, #260]	@ (8001904 <set_macro_keymap_value+0x138>)
 8001800:	0080      	lsls	r0, r0, #2
 8001802:	4401      	add	r1, r0
 8001804:	0089      	lsls	r1, r1, #2
 8001806:	440a      	add	r2, r1
 8001808:	0092      	lsls	r2, r2, #2
 800180a:	4413      	add	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4423      	add	r3, r4
 8001810:	462a      	mov	r2, r5
 8001812:	80da      	strh	r2, [r3, #6]
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001814:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001818:	3301      	adds	r3, #1
 800181a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800181e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001822:	2b03      	cmp	r3, #3
 8001824:	d9e0      	bls.n	80017e8 <set_macro_keymap_value+0x1c>
  }
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 8001826:	f240 2206 	movw	r2, #518	@ 0x206
 800182a:	2100      	movs	r1, #0
 800182c:	4835      	ldr	r0, [pc, #212]	@ (8001904 <set_macro_keymap_value+0x138>)
 800182e:	f001 fe8d 	bl	800354c <keyboard_write_config>
  keyboard_init_keys();
 8001832:	f000 ff3d 	bl	80026b0 <keyboard_init_keys>

  // Build response message showing all macro values
  int pos = snprintf(buffer, sizeof(buffer), "Set macro keymap[%u][%u][%u] to [", layer, row, col);
 8001836:	79f9      	ldrb	r1, [r7, #7]
 8001838:	79bb      	ldrb	r3, [r7, #6]
 800183a:	797a      	ldrb	r2, [r7, #5]
 800183c:	f107 000c 	add.w	r0, r7, #12
 8001840:	9201      	str	r2, [sp, #4]
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	460b      	mov	r3, r1
 8001846:	4a30      	ldr	r2, [pc, #192]	@ (8001908 <set_macro_keymap_value+0x13c>)
 8001848:	2180      	movs	r1, #128	@ 0x80
 800184a:	f00b fb7b 	bl	800cf44 <sniprintf>
 800184e:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001852:	2300      	movs	r3, #0
 8001854:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8001858:	e033      	b.n	80018c2 <set_macro_keymap_value+0xf6>
    if (i > 0)
 800185a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800185e:	2b00      	cmp	r3, #0
 8001860:	d012      	beq.n	8001888 <set_macro_keymap_value+0xbc>
      pos += snprintf(buffer + pos, sizeof(buffer) - pos, ", ");
 8001862:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001866:	f107 020c 	add.w	r2, r7, #12
 800186a:	18d0      	adds	r0, r2, r3
 800186c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001870:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001874:	4a25      	ldr	r2, [pc, #148]	@ (800190c <set_macro_keymap_value+0x140>)
 8001876:	4619      	mov	r1, r3
 8001878:	f00b fb64 	bl	800cf44 <sniprintf>
 800187c:	4602      	mov	r2, r0
 800187e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001882:	4413      	add	r3, r2
 8001884:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    pos += snprintf(buffer + pos, sizeof(buffer) - pos, "%u", values[i]);
 8001888:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800188c:	f107 020c 	add.w	r2, r7, #12
 8001890:	18d0      	adds	r0, r2, r3
 8001892:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001896:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 800189a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	4a1a      	ldr	r2, [pc, #104]	@ (8001910 <set_macro_keymap_value+0x144>)
 80018a8:	f00b fb4c 	bl	800cf44 <sniprintf>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80018b2:	4413      	add	r3, r2
 80018b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80018b8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80018bc:	3301      	adds	r3, #1
 80018be:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80018c2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d9c7      	bls.n	800185a <set_macro_keymap_value+0x8e>
  }
  pos += snprintf(buffer + pos, sizeof(buffer) - pos, "]\r\n");
 80018ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80018ce:	f107 020c 	add.w	r2, r7, #12
 80018d2:	18d0      	adds	r0, r2, r3
 80018d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80018d8:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80018dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001914 <set_macro_keymap_value+0x148>)
 80018de:	4619      	mov	r1, r3
 80018e0:	f00b fb30 	bl	800cf44 <sniprintf>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80018ea:	4413      	add	r3, r2
 80018ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  cdc_write_string_chunked(buffer);
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe ff83 	bl	8000800 <cdc_write_string_chunked>
}
 80018fa:	bf00      	nop
 80018fc:	3798      	adds	r7, #152	@ 0x98
 80018fe:	46bd      	mov	sp, r7
 8001900:	bdb0      	pop	{r4, r5, r7, pc}
 8001902:	bf00      	nop
 8001904:	20000000 	.word	0x20000000
 8001908:	0800eef4 	.word	0x0800eef4
 800190c:	0800ef18 	.word	0x0800ef18
 8001910:	0800e4f0 	.word	0x0800e4f0
 8001914:	0800ef1c 	.word	0x0800ef1c

08001918 <save_config>:

static void save_config(void) {
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  // TODO: Implement flash save functionality
  // This would typically write the config struct to flash memory
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 800191c:	f240 2206 	movw	r2, #518	@ 0x206
 8001920:	2100      	movs	r1, #0
 8001922:	4805      	ldr	r0, [pc, #20]	@ (8001938 <save_config+0x20>)
 8001924:	f001 fe12 	bl	800354c <keyboard_write_config>
  keyboard_init_keys();
 8001928:	f000 fec2 	bl	80026b0 <keyboard_init_keys>
  cdc_write_string_chunked("Configuration saved to flash\r\n");
 800192c:	4803      	ldr	r0, [pc, #12]	@ (800193c <save_config+0x24>)
 800192e:	f7fe ff67 	bl	8000800 <cdc_write_string_chunked>
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000000 	.word	0x20000000
 800193c:	0800ef20 	.word	0x0800ef20

08001940 <load_config>:

static void load_config(void) {
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  // TODO: Implement flash load functionality
  // This would typically read the config struct from flash memory
  keyboard_read_config();
 8001944:	f001 fdf0 	bl	8003528 <keyboard_read_config>
  cdc_write_string_chunked("Configuration loaded from flash\r\n");
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <load_config+0x14>)
 800194a:	f7fe ff59 	bl	8000800 <cdc_write_string_chunked>
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	0800ef40 	.word	0x0800ef40

08001958 <reset_config>:

static void reset_config(void) {
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  // Reset to default values
  keyboard_write_config(&keyboard_default_user_config, 0, sizeof keyboard_default_user_config);
 800195c:	f240 2206 	movw	r2, #518	@ 0x206
 8001960:	2100      	movs	r1, #0
 8001962:	4806      	ldr	r0, [pc, #24]	@ (800197c <reset_config+0x24>)
 8001964:	f001 fdf2 	bl	800354c <keyboard_write_config>
  keyboard_read_config();
 8001968:	f001 fdde 	bl	8003528 <keyboard_read_config>
  keyboard_init_keys();
 800196c:	f000 fea0 	bl	80026b0 <keyboard_init_keys>

  cdc_write_string_chunked("Configuration reset to defaults\r\n");
 8001970:	4803      	ldr	r0, [pc, #12]	@ (8001980 <reset_config+0x28>)
 8001972:	f7fe ff45 	bl	8000800 <cdc_write_string_chunked>
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	0800f0b4 	.word	0x0800f0b4
 8001980:	0800ef64 	.word	0x0800ef64

08001984 <tud_cdc_line_state_cb>:
// Getter function for other modules to access configuration
struct user_config *get_user_config(void) {
  return &keyboard_user_config;
}

void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
 800198e:	460b      	mov	r3, r1
 8001990:	71bb      	strb	r3, [r7, #6]
 8001992:	4613      	mov	r3, r2
 8001994:	717b      	strb	r3, [r7, #5]
  (void)itf;

  // Check if terminal is connecting (DTR asserted)
  if (dtr) {
 8001996:	79bb      	ldrb	r3, [r7, #6]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d015      	beq.n	80019c8 <tud_cdc_line_state_cb+0x44>
    // Give a small delay to ensure connection is stable
    for (volatile int i = 0; i < 10000; i++)
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	e002      	b.n	80019a8 <tud_cdc_line_state_cb+0x24>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	3301      	adds	r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f242 720f 	movw	r2, #9999	@ 0x270f
 80019ae:	4293      	cmp	r3, r2
 80019b0:	ddf7      	ble.n	80019a2 <tud_cdc_line_state_cb+0x1e>
      ;

    cdc_write_string_chunked("\r\n=== HE16 Configuration Interface ===\r\n");
 80019b2:	4807      	ldr	r0, [pc, #28]	@ (80019d0 <tud_cdc_line_state_cb+0x4c>)
 80019b4:	f7fe ff24 	bl	8000800 <cdc_write_string_chunked>
    cdc_write_string_chunked("Type 'help' for available commands\r\n");
 80019b8:	4806      	ldr	r0, [pc, #24]	@ (80019d4 <tud_cdc_line_state_cb+0x50>)
 80019ba:	f7fe ff21 	bl	8000800 <cdc_write_string_chunked>
    cdc_write_string_chunked("Ready> ");
 80019be:	4806      	ldr	r0, [pc, #24]	@ (80019d8 <tud_cdc_line_state_cb+0x54>)
 80019c0:	f7fe ff1e 	bl	8000800 <cdc_write_string_chunked>
    cdc_write_flush_wait();
 80019c4:	f7fe ff67 	bl	8000896 <cdc_write_flush_wait>
  }
}
 80019c8:	bf00      	nop
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	0800ef88 	.word	0x0800ef88
 80019d4:	0800efb4 	.word	0x0800efb4
 80019d8:	0800e4ac 	.word	0x0800e4ac

080019dc <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf) {
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
  (void)itf;
  // Data handling is done in cdc_task()
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <hid_task>:
static uint8_t modifiers = 0;
static uint8_t keycodes[6] = {0};
// static uint8_t is_screaming = 0;
static uint8_t consumer_report = 0;

void hid_task() {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0

  if ((should_send_consumer_report || should_send_keyboard_report) && tud_hid_ready()) {
 80019fa:	4b21      	ldr	r3, [pc, #132]	@ (8001a80 <hid_task+0x8c>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d103      	bne.n	8001a0a <hid_task+0x16>
 8001a02:	4b20      	ldr	r3, [pc, #128]	@ (8001a84 <hid_task+0x90>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d035      	beq.n	8001a76 <hid_task+0x82>

//--------------------------------------------------------------------+
// Application API (Single Port)
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_ready(void) {
  return tud_hid_n_ready(0);
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f005 fffe 	bl	8007a0c <tud_hid_n_ready>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d02f      	beq.n	8001a76 <hid_task+0x82>
    if (tud_suspended()) {
 8001a16:	f007 fb15 	bl	8009044 <tud_suspended>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <hid_task+0x32>
      tud_remote_wakeup();
 8001a20:	f007 fb24 	bl	800906c <tud_remote_wakeup>
        should_send_keyboard_report = 0;
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
      }
    }
  }
}
 8001a24:	e027      	b.n	8001a76 <hid_task+0x82>
      if (should_send_consumer_report) {
 8001a26:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <hid_task+0x8c>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00f      	beq.n	8001a4e <hid_task+0x5a>
        should_send_consumer_report = 0;
 8001a2e:	4b14      	ldr	r3, [pc, #80]	@ (8001a80 <hid_task+0x8c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
 8001a34:	2302      	movs	r3, #2
 8001a36:	73fb      	strb	r3, [r7, #15]
 8001a38:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <hid_task+0x94>)
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	80fb      	strh	r3, [r7, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tud_hid_get_protocol(void) {
  return tud_hid_n_get_protocol(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_report(uint8_t report_id, void const* report, uint16_t len) {
  return tud_hid_n_report(0, report_id, report, len);
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	7bf9      	ldrb	r1, [r7, #15]
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	2000      	movs	r0, #0
 8001a48:	f006 f822 	bl	8007a90 <tud_hid_n_report>
 8001a4c:	e013      	b.n	8001a76 <hid_task+0x82>
      } else if (should_send_keyboard_report) {
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a84 <hid_task+0x90>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00f      	beq.n	8001a76 <hid_task+0x82>
        should_send_keyboard_report = 0;
 8001a56:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <hid_task+0x90>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <hid_task+0x98>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2201      	movs	r2, #1
 8001a62:	717a      	strb	r2, [r7, #5]
 8001a64:	713b      	strb	r3, [r7, #4]
 8001a66:	4b0a      	ldr	r3, [pc, #40]	@ (8001a90 <hid_task+0x9c>)
 8001a68:	603b      	str	r3, [r7, #0]
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
  return tud_hid_n_keyboard_report(0, report_id, modifier, keycode);
 8001a6a:	793a      	ldrb	r2, [r7, #4]
 8001a6c:	7979      	ldrb	r1, [r7, #5]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2000      	movs	r0, #0
 8001a72:	f006 f893 	bl	8007b9c <tud_hid_n_keyboard_report>
}
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000304 	.word	0x20000304
 8001a84:	20000305 	.word	0x20000305
 8001a88:	2000030e 	.word	0x2000030e
 8001a8c:	20000306 	.word	0x20000306
 8001a90:	20000308 	.word	0x20000308

08001a94 <hid_press_key>:

void hid_press_key(struct key *key, uint8_t layer) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 8001aa0:	78fa      	ldrb	r2, [r7, #3]
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	440b      	add	r3, r1
 8001aac:	3305      	adds	r3, #5
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	f200 80f7 	bhi.w	8001ca6 <hid_press_key+0x212>
 8001ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ac0 <hid_press_key+0x2c>)
 8001aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abe:	bf00      	nop
 8001ac0:	08001af7 	.word	0x08001af7
 8001ac4:	08001ad1 	.word	0x08001ad1
 8001ac8:	08001b37 	.word	0x08001b37
 8001acc:	08001b55 	.word	0x08001b55
  case KEY_TYPE_MODIFIER:
    modifiers |= key->layers[layer].value[0];
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4413      	add	r3, r2
 8001ada:	440b      	add	r3, r1
 8001adc:	88db      	ldrh	r3, [r3, #6]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4b74      	ldr	r3, [pc, #464]	@ (8001cb4 <hid_press_key+0x220>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b72      	ldr	r3, [pc, #456]	@ (8001cb4 <hid_press_key+0x220>)
 8001aec:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 8001aee:	4b72      	ldr	r3, [pc, #456]	@ (8001cb8 <hid_press_key+0x224>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
    break;
 8001af4:	e0da      	b.n	8001cac <hid_press_key+0x218>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 8001af6:	2300      	movs	r3, #0
 8001af8:	75fb      	strb	r3, [r7, #23]
 8001afa:	e018      	b.n	8001b2e <hid_press_key+0x9a>
      if (keycodes[i] == 0) {
 8001afc:	7dfb      	ldrb	r3, [r7, #23]
 8001afe:	4a6f      	ldr	r2, [pc, #444]	@ (8001cbc <hid_press_key+0x228>)
 8001b00:	5cd3      	ldrb	r3, [r2, r3]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d110      	bne.n	8001b28 <hid_press_key+0x94>
        keycodes[i] = key->layers[layer].value[0];
 8001b06:	78fa      	ldrb	r2, [r7, #3]
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4413      	add	r3, r2
 8001b10:	440b      	add	r3, r1
 8001b12:	88db      	ldrh	r3, [r3, #6]
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	7dfb      	ldrb	r3, [r7, #23]
 8001b18:	b2d1      	uxtb	r1, r2
 8001b1a:	4a68      	ldr	r2, [pc, #416]	@ (8001cbc <hid_press_key+0x228>)
 8001b1c:	54d1      	strb	r1, [r2, r3]
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // } else if (i == 0 && key->state.velocity > keyboard_user_config.screaming_velocity_trigger) {
        //   is_screaming = 1;
        //   modifiers |= get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 8001b1e:	4b66      	ldr	r3, [pc, #408]	@ (8001cb8 <hid_press_key+0x224>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
        break;
 8001b24:	bf00      	nop
      }
    }
    break;
 8001b26:	e0c1      	b.n	8001cac <hid_press_key+0x218>
    for (uint8_t i = 0; i < 6; i++) {
 8001b28:	7dfb      	ldrb	r3, [r7, #23]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	75fb      	strb	r3, [r7, #23]
 8001b2e:	7dfb      	ldrb	r3, [r7, #23]
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d9e3      	bls.n	8001afc <hid_press_key+0x68>
    break;
 8001b34:	e0ba      	b.n	8001cac <hid_press_key+0x218>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = key->layers[layer].value[0];
 8001b36:	78fa      	ldrb	r2, [r7, #3]
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4413      	add	r3, r2
 8001b40:	440b      	add	r3, r1
 8001b42:	88db      	ldrh	r3, [r3, #6]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	4b5d      	ldr	r3, [pc, #372]	@ (8001cc0 <hid_press_key+0x22c>)
 8001b4a:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 8001b4c:	4b5d      	ldr	r3, [pc, #372]	@ (8001cc4 <hid_press_key+0x230>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
    break;
 8001b52:	e0ab      	b.n	8001cac <hid_press_key+0x218>

  case KEY_TYPE_MACRO:
    // Count how many non-zero macro values we have (excluding modifiers)
    uint8_t macro_count = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001b58:	2300      	movs	r3, #0
 8001b5a:	757b      	strb	r3, [r7, #21]
 8001b5c:	e025      	b.n	8001baa <hid_press_key+0x116>
      if (key->layers[layer].value[i] != ____) {
 8001b5e:	78fa      	ldrb	r2, [r7, #3]
 8001b60:	7d7b      	ldrb	r3, [r7, #21]
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	0058      	lsls	r0, r3, #1
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4403      	add	r3, r0
 8001b6e:	440b      	add	r3, r1
 8001b70:	88db      	ldrh	r3, [r3, #6]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d015      	beq.n	8001ba4 <hid_press_key+0x110>
        // Check if this is a modifier
        uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[i]);
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	7d7b      	ldrb	r3, [r7, #21]
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	0058      	lsls	r0, r3, #1
 8001b80:	4613      	mov	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4413      	add	r3, r2
 8001b86:	4403      	add	r3, r0
 8001b88:	440b      	add	r3, r1
 8001b8a:	88db      	ldrh	r3, [r3, #6]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f9a0 	bl	8001ed4 <get_bitmask_for_modifier>
 8001b94:	4603      	mov	r3, r0
 8001b96:	737b      	strb	r3, [r7, #13]
        if (!bitmask) {
 8001b98:	7b7b      	ldrb	r3, [r7, #13]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d102      	bne.n	8001ba4 <hid_press_key+0x110>
          macro_count++; // Only count non-modifier keys
 8001b9e:	7dbb      	ldrb	r3, [r7, #22]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001ba4:	7d7b      	ldrb	r3, [r7, #21]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	757b      	strb	r3, [r7, #21]
 8001baa:	7d7b      	ldrb	r3, [r7, #21]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d9d6      	bls.n	8001b5e <hid_press_key+0xca>
        }
      }
    }

    // Find the first empty slot for the macro
    uint8_t start_slot = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	753b      	strb	r3, [r7, #20]
    for (uint8_t i = 0; i < 6; i++) {
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	74fb      	strb	r3, [r7, #19]
 8001bb8:	e00a      	b.n	8001bd0 <hid_press_key+0x13c>
      if (keycodes[i] == 0) {
 8001bba:	7cfb      	ldrb	r3, [r7, #19]
 8001bbc:	4a3f      	ldr	r2, [pc, #252]	@ (8001cbc <hid_press_key+0x228>)
 8001bbe:	5cd3      	ldrb	r3, [r2, r3]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <hid_press_key+0x136>
        start_slot = i;
 8001bc4:	7cfb      	ldrb	r3, [r7, #19]
 8001bc6:	753b      	strb	r3, [r7, #20]
        break;
 8001bc8:	e005      	b.n	8001bd6 <hid_press_key+0x142>
    for (uint8_t i = 0; i < 6; i++) {
 8001bca:	7cfb      	ldrb	r3, [r7, #19]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	74fb      	strb	r3, [r7, #19]
 8001bd0:	7cfb      	ldrb	r3, [r7, #19]
 8001bd2:	2b05      	cmp	r3, #5
 8001bd4:	d9f1      	bls.n	8001bba <hid_press_key+0x126>
      }
    }

    // Check if we have enough consecutive empty slots for the non-modifier keys
    uint8_t available_slots = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	74bb      	strb	r3, [r7, #18]
    for (uint8_t i = start_slot; i < 6; i++) {
 8001bda:	7d3b      	ldrb	r3, [r7, #20]
 8001bdc:	747b      	strb	r3, [r7, #17]
 8001bde:	e00a      	b.n	8001bf6 <hid_press_key+0x162>
      if (keycodes[i] == 0) {
 8001be0:	7c7b      	ldrb	r3, [r7, #17]
 8001be2:	4a36      	ldr	r2, [pc, #216]	@ (8001cbc <hid_press_key+0x228>)
 8001be4:	5cd3      	ldrb	r3, [r2, r3]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d109      	bne.n	8001bfe <hid_press_key+0x16a>
        available_slots++;
 8001bea:	7cbb      	ldrb	r3, [r7, #18]
 8001bec:	3301      	adds	r3, #1
 8001bee:	74bb      	strb	r3, [r7, #18]
    for (uint8_t i = start_slot; i < 6; i++) {
 8001bf0:	7c7b      	ldrb	r3, [r7, #17]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	747b      	strb	r3, [r7, #17]
 8001bf6:	7c7b      	ldrb	r3, [r7, #17]
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	d9f1      	bls.n	8001be0 <hid_press_key+0x14c>
 8001bfc:	e000      	b.n	8001c00 <hid_press_key+0x16c>
      } else {
        break; // Stop counting if we hit a non-empty slot
 8001bfe:	bf00      	nop
      }
    }

    // Only proceed if we have enough slots for the non-modifier keys
    if (available_slots >= macro_count) {
 8001c00:	7cba      	ldrb	r2, [r7, #18]
 8001c02:	7dbb      	ldrb	r3, [r7, #22]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d350      	bcc.n	8001caa <hid_press_key+0x216>
      // Process macro values
      uint8_t macro_idx = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	743b      	strb	r3, [r7, #16]
      for (uint8_t i = start_slot; i < 6 && macro_idx < MAX_MACRO_LEN; macro_idx++) {
 8001c0c:	7d3b      	ldrb	r3, [r7, #20]
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	e042      	b.n	8001c98 <hid_press_key+0x204>
        if (key->layers[layer].value[macro_idx] != ____) {
 8001c12:	78fa      	ldrb	r2, [r7, #3]
 8001c14:	7c3b      	ldrb	r3, [r7, #16]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	0058      	lsls	r0, r3, #1
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4413      	add	r3, r2
 8001c20:	4403      	add	r3, r0
 8001c22:	440b      	add	r3, r1
 8001c24:	88db      	ldrh	r3, [r3, #6]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d032      	beq.n	8001c92 <hid_press_key+0x1fe>
          // Check if this is a modifier
          uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[macro_idx]);
 8001c2c:	78fa      	ldrb	r2, [r7, #3]
 8001c2e:	7c3b      	ldrb	r3, [r7, #16]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	0058      	lsls	r0, r3, #1
 8001c34:	4613      	mov	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4413      	add	r3, r2
 8001c3a:	4403      	add	r3, r0
 8001c3c:	440b      	add	r3, r1
 8001c3e:	88db      	ldrh	r3, [r3, #6]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f946 	bl	8001ed4 <get_bitmask_for_modifier>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	73bb      	strb	r3, [r7, #14]
          if (bitmask) {
 8001c4c:	7bbb      	ldrb	r3, [r7, #14]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00a      	beq.n	8001c68 <hid_press_key+0x1d4>
            // Set modifier bit
            modifiers |= bitmask;
 8001c52:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <hid_press_key+0x220>)
 8001c54:	781a      	ldrb	r2, [r3, #0]
 8001c56:	7bbb      	ldrb	r3, [r7, #14]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <hid_press_key+0x220>)
 8001c5e:	701a      	strb	r2, [r3, #0]
            should_send_keyboard_report = 1;
 8001c60:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <hid_press_key+0x224>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
 8001c66:	e014      	b.n	8001c92 <hid_press_key+0x1fe>
          } else {
            // Place non-modifier key in keycodes array
            keycodes[i] = key->layers[layer].value[macro_idx];
 8001c68:	78fa      	ldrb	r2, [r7, #3]
 8001c6a:	7c3b      	ldrb	r3, [r7, #16]
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	0058      	lsls	r0, r3, #1
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	4403      	add	r3, r0
 8001c78:	440b      	add	r3, r1
 8001c7a:	88db      	ldrh	r3, [r3, #6]
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	b2d1      	uxtb	r1, r2
 8001c82:	4a0e      	ldr	r2, [pc, #56]	@ (8001cbc <hid_press_key+0x228>)
 8001c84:	54d1      	strb	r1, [r2, r3]
            i++; // Move to next keycodes slot
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
            should_send_keyboard_report = 1;
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <hid_press_key+0x224>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
      for (uint8_t i = start_slot; i < 6 && macro_idx < MAX_MACRO_LEN; macro_idx++) {
 8001c92:	7c3b      	ldrb	r3, [r7, #16]
 8001c94:	3301      	adds	r3, #1
 8001c96:	743b      	strb	r3, [r7, #16]
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	2b05      	cmp	r3, #5
 8001c9c:	d805      	bhi.n	8001caa <hid_press_key+0x216>
 8001c9e:	7c3b      	ldrb	r3, [r7, #16]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d9b6      	bls.n	8001c12 <hid_press_key+0x17e>
          }
        }
      }
    }
    break;
 8001ca4:	e001      	b.n	8001caa <hid_press_key+0x216>

  default:
    break;
 8001ca6:	bf00      	nop
 8001ca8:	e000      	b.n	8001cac <hid_press_key+0x218>
    break;
 8001caa:	bf00      	nop
  }
}
 8001cac:	bf00      	nop
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000306 	.word	0x20000306
 8001cb8:	20000305 	.word	0x20000305
 8001cbc:	20000308 	.word	0x20000308
 8001cc0:	2000030e 	.word	0x2000030e
 8001cc4:	20000304 	.word	0x20000304

08001cc8 <hid_release_key>:

void hid_release_key(struct key *key, uint8_t layer) {
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 8001cd4:	78fa      	ldrb	r2, [r7, #3]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	440b      	add	r3, r1
 8001ce0:	3305      	adds	r3, #5
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	f200 80a7 	bhi.w	8001e3a <hid_release_key+0x172>
 8001cec:	a201      	add	r2, pc, #4	@ (adr r2, 8001cf4 <hid_release_key+0x2c>)
 8001cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf2:	bf00      	nop
 8001cf4:	08001d33 	.word	0x08001d33
 8001cf8:	08001d05 	.word	0x08001d05
 8001cfc:	08001d75 	.word	0x08001d75
 8001d00:	08001d83 	.word	0x08001d83
  case KEY_TYPE_MODIFIER:
    modifiers &= ~key->layers[layer].value[0];
 8001d04:	78fa      	ldrb	r2, [r7, #3]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	440b      	add	r3, r1
 8001d10:	88db      	ldrh	r3, [r3, #6]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	b25b      	sxtb	r3, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	b25a      	sxtb	r2, r3
 8001d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e44 <hid_release_key+0x17c>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	b25b      	sxtb	r3, r3
 8001d20:	4013      	ands	r3, r2
 8001d22:	b25b      	sxtb	r3, r3
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4b47      	ldr	r3, [pc, #284]	@ (8001e44 <hid_release_key+0x17c>)
 8001d28:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 8001d2a:	4b47      	ldr	r3, [pc, #284]	@ (8001e48 <hid_release_key+0x180>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
    break;
 8001d30:	e084      	b.n	8001e3c <hid_release_key+0x174>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 8001d32:	2300      	movs	r3, #0
 8001d34:	73fb      	strb	r3, [r7, #15]
 8001d36:	e019      	b.n	8001d6c <hid_release_key+0xa4>
      if (keycodes[i] == key->layers[layer].value[0]) {
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	4a44      	ldr	r2, [pc, #272]	@ (8001e4c <hid_release_key+0x184>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	78fa      	ldrb	r2, [r7, #3]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4413      	add	r3, r2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	88db      	ldrh	r3, [r3, #6]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	4298      	cmp	r0, r3
 8001d52:	d108      	bne.n	8001d66 <hid_release_key+0x9e>
        keycodes[i] = 0;
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	4a3d      	ldr	r2, [pc, #244]	@ (8001e4c <hid_release_key+0x184>)
 8001d58:	2100      	movs	r1, #0
 8001d5a:	54d1      	strb	r1, [r2, r3]
        // if (is_screaming) {
        //   is_screaming = 0;
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 8001d5c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e48 <hid_release_key+0x180>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
        break;
 8001d62:	bf00      	nop
      }
    }
    break;
 8001d64:	e06a      	b.n	8001e3c <hid_release_key+0x174>
    for (uint8_t i = 0; i < 6; i++) {
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	2b05      	cmp	r3, #5
 8001d70:	d9e2      	bls.n	8001d38 <hid_release_key+0x70>
    break;
 8001d72:	e063      	b.n	8001e3c <hid_release_key+0x174>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = 0;
 8001d74:	4b36      	ldr	r3, [pc, #216]	@ (8001e50 <hid_release_key+0x188>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 8001d7a:	4b36      	ldr	r3, [pc, #216]	@ (8001e54 <hid_release_key+0x18c>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	701a      	strb	r2, [r3, #0]
    break;
 8001d80:	e05c      	b.n	8001e3c <hid_release_key+0x174>

  case KEY_TYPE_MACRO:
    // Process macro values for release
    for (uint8_t macro_idx = 0; macro_idx < MAX_MACRO_LEN; macro_idx++) {
 8001d82:	2300      	movs	r3, #0
 8001d84:	73bb      	strb	r3, [r7, #14]
 8001d86:	e054      	b.n	8001e32 <hid_release_key+0x16a>
      if (key->layers[layer].value[macro_idx] != ____) {
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	7bbb      	ldrb	r3, [r7, #14]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	0058      	lsls	r0, r3, #1
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	4403      	add	r3, r0
 8001d98:	440b      	add	r3, r1
 8001d9a:	88db      	ldrh	r3, [r3, #6]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d044      	beq.n	8001e2c <hid_release_key+0x164>
        // Check if this is a modifier
        uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[macro_idx]);
 8001da2:	78fa      	ldrb	r2, [r7, #3]
 8001da4:	7bbb      	ldrb	r3, [r7, #14]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	0058      	lsls	r0, r3, #1
 8001daa:	4613      	mov	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4413      	add	r3, r2
 8001db0:	4403      	add	r3, r0
 8001db2:	440b      	add	r3, r1
 8001db4:	88db      	ldrh	r3, [r3, #6]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	4618      	mov	r0, r3
 8001dba:	f000 f88b 	bl	8001ed4 <get_bitmask_for_modifier>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	733b      	strb	r3, [r7, #12]
        if (bitmask) {
 8001dc2:	7b3b      	ldrb	r3, [r7, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00f      	beq.n	8001de8 <hid_release_key+0x120>
          // Clear modifier bit
          modifiers &= ~bitmask;
 8001dc8:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	b25a      	sxtb	r2, r3
 8001dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e44 <hid_release_key+0x17c>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	b25b      	sxtb	r3, r3
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	b25b      	sxtb	r3, r3
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	4b19      	ldr	r3, [pc, #100]	@ (8001e44 <hid_release_key+0x17c>)
 8001dde:	701a      	strb	r2, [r3, #0]
          should_send_keyboard_report = 1;
 8001de0:	4b19      	ldr	r3, [pc, #100]	@ (8001e48 <hid_release_key+0x180>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	e021      	b.n	8001e2c <hid_release_key+0x164>
        } else {
          // Remove non-modifier key from keycodes array
          for (uint8_t i = 0; i < 6; i++) {
 8001de8:	2300      	movs	r3, #0
 8001dea:	737b      	strb	r3, [r7, #13]
 8001dec:	e01b      	b.n	8001e26 <hid_release_key+0x15e>
            if (keycodes[i] == key->layers[layer].value[macro_idx]) {
 8001dee:	7b7b      	ldrb	r3, [r7, #13]
 8001df0:	4a16      	ldr	r2, [pc, #88]	@ (8001e4c <hid_release_key+0x184>)
 8001df2:	5cd3      	ldrb	r3, [r2, r3]
 8001df4:	461c      	mov	r4, r3
 8001df6:	78fa      	ldrb	r2, [r7, #3]
 8001df8:	7bbb      	ldrb	r3, [r7, #14]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	0058      	lsls	r0, r3, #1
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4413      	add	r3, r2
 8001e04:	4403      	add	r3, r0
 8001e06:	440b      	add	r3, r1
 8001e08:	88db      	ldrh	r3, [r3, #6]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	429c      	cmp	r4, r3
 8001e0e:	d107      	bne.n	8001e20 <hid_release_key+0x158>
              keycodes[i] = 0;
 8001e10:	7b7b      	ldrb	r3, [r7, #13]
 8001e12:	4a0e      	ldr	r2, [pc, #56]	@ (8001e4c <hid_release_key+0x184>)
 8001e14:	2100      	movs	r1, #0
 8001e16:	54d1      	strb	r1, [r2, r3]
              should_send_keyboard_report = 1;
 8001e18:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <hid_release_key+0x180>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
              break;
 8001e1e:	e005      	b.n	8001e2c <hid_release_key+0x164>
          for (uint8_t i = 0; i < 6; i++) {
 8001e20:	7b7b      	ldrb	r3, [r7, #13]
 8001e22:	3301      	adds	r3, #1
 8001e24:	737b      	strb	r3, [r7, #13]
 8001e26:	7b7b      	ldrb	r3, [r7, #13]
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d9e0      	bls.n	8001dee <hid_release_key+0x126>
    for (uint8_t macro_idx = 0; macro_idx < MAX_MACRO_LEN; macro_idx++) {
 8001e2c:	7bbb      	ldrb	r3, [r7, #14]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	73bb      	strb	r3, [r7, #14]
 8001e32:	7bbb      	ldrb	r3, [r7, #14]
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d9a7      	bls.n	8001d88 <hid_release_key+0xc0>
            }
          }
        }
      }
    }
    break;
 8001e38:	e000      	b.n	8001e3c <hid_release_key+0x174>

  default:
    break;
 8001e3a:	bf00      	nop
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd90      	pop	{r4, r7, pc}
 8001e44:	20000306 	.word	0x20000306
 8001e48:	20000305 	.word	0x20000305
 8001e4c:	20000308 	.word	0x20000308
 8001e50:	2000030e 	.word	0x2000030e
 8001e54:	20000304 	.word	0x20000304

08001e58 <tud_hid_set_protocol_cb>:
// Invoked when received SET_PROTOCOL request
// protocol is either HID_PROTOCOL_BOOT (0) or HID_PROTOCOL_REPORT (1)

/// CALLBACKS

void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	460a      	mov	r2, r1
 8001e62:	71fb      	strb	r3, [r7, #7]
 8001e64:	4613      	mov	r3, r2
 8001e66:	71bb      	strb	r3, [r7, #6]
  (void)instance;
  (void)protocol;
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <tud_hid_report_complete_cb>:

void tud_hid_report_complete_cb(uint8_t instance, uint8_t const *report, uint16_t len) {
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
 8001e80:	4613      	mov	r3, r2
 8001e82:	80bb      	strh	r3, [r7, #4]
  (void)instance;
  (void)len;
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <tud_hid_get_report_cb>:
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t *buffer, uint16_t reqlen) {
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	71bb      	strb	r3, [r7, #6]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	717b      	strb	r3, [r7, #5]
  (void)instance;
  (void)report_type;
  (void)buffer;
  (void)reqlen;

  return 0;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const *buffer, uint16_t bufsize) {
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	603b      	str	r3, [r7, #0]
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	71bb      	strb	r3, [r7, #6]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	717b      	strb	r3, [r7, #5]
  (void)instance;
  (void)report_type;
  (void)buffer;
  (void)bufsize;
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <get_bitmask_for_modifier>:

static uint8_t key_triggered = 0;

struct key *current_pressed_key = NULL;

uint8_t get_bitmask_for_modifier(uint8_t keycode) {
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
  switch (keycode) {
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	3be0      	subs	r3, #224	@ 0xe0
 8001ee2:	2b07      	cmp	r3, #7
 8001ee4:	d822      	bhi.n	8001f2c <get_bitmask_for_modifier+0x58>
 8001ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8001eec <get_bitmask_for_modifier+0x18>)
 8001ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eec:	08001f0d 	.word	0x08001f0d
 8001ef0:	08001f11 	.word	0x08001f11
 8001ef4:	08001f15 	.word	0x08001f15
 8001ef8:	08001f19 	.word	0x08001f19
 8001efc:	08001f1d 	.word	0x08001f1d
 8001f00:	08001f21 	.word	0x08001f21
 8001f04:	08001f25 	.word	0x08001f25
 8001f08:	08001f29 	.word	0x08001f29
  case HID_KEY_CONTROL_LEFT:
    return 0b00000001;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e00e      	b.n	8001f2e <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_LEFT:
    return 0b00000010;
 8001f10:	2302      	movs	r3, #2
 8001f12:	e00c      	b.n	8001f2e <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_LEFT:
    return 0b00000100;
 8001f14:	2304      	movs	r3, #4
 8001f16:	e00a      	b.n	8001f2e <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_LEFT:
    return 0b00001000;
 8001f18:	2308      	movs	r3, #8
 8001f1a:	e008      	b.n	8001f2e <get_bitmask_for_modifier+0x5a>
  case HID_KEY_CONTROL_RIGHT:
    return 0b00010000;
 8001f1c:	2310      	movs	r3, #16
 8001f1e:	e006      	b.n	8001f2e <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_RIGHT:
    return 0b00100000;
 8001f20:	2320      	movs	r3, #32
 8001f22:	e004      	b.n	8001f2e <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_RIGHT:
    return 0b01000000;
 8001f24:	2340      	movs	r3, #64	@ 0x40
 8001f26:	e002      	b.n	8001f2e <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_RIGHT:
    return 0b10000000;
 8001f28:	2380      	movs	r3, #128	@ 0x80
 8001f2a:	e000      	b.n	8001f2e <get_bitmask_for_modifier+0x5a>
  default:
    return 0b00000000;
 8001f2c:	2300      	movs	r3, #0
  }
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop

08001f3c <get_usage_consumer_control>:

uint16_t get_usage_consumer_control(uint16_t value) {
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	80fb      	strh	r3, [r7, #6]
  if (value > 0xFF) {
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	2bff      	cmp	r3, #255	@ 0xff
 8001f4a:	d904      	bls.n	8001f56 <get_usage_consumer_control+0x1a>
    return value & 0b0111111111111111;
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	e000      	b.n	8001f58 <get_usage_consumer_control+0x1c>
  } else {
    return 0;
 8001f56:	2300      	movs	r3, #0
  }
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <init_key>:

void init_key(uint8_t adc_channel, uint8_t amux_channel, uint8_t row, uint8_t column) {
 8001f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	4608      	mov	r0, r1
 8001f6e:	4611      	mov	r1, r2
 8001f70:	461a      	mov	r2, r3
 8001f72:	4623      	mov	r3, r4
 8001f74:	71fb      	strb	r3, [r7, #7]
 8001f76:	4603      	mov	r3, r0
 8001f78:	71bb      	strb	r3, [r7, #6]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	717b      	strb	r3, [r7, #5]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	713b      	strb	r3, [r7, #4]

  struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8001f82:	79f9      	ldrb	r1, [r7, #7]
 8001f84:	79bb      	ldrb	r3, [r7, #6]
 8001f86:	461a      	mov	r2, r3
 8001f88:	0112      	lsls	r2, r2, #4
 8001f8a:	441a      	add	r2, r3
 8001f8c:	0093      	lsls	r3, r2, #2
 8001f8e:	461a      	mov	r2, r3
 8001f90:	460b      	mov	r3, r1
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	440b      	add	r3, r1
 8001f96:	019b      	lsls	r3, r3, #6
 8001f98:	4413      	add	r3, r2
 8001f9a:	4a8b      	ldr	r2, [pc, #556]	@ (80021c8 <init_key+0x264>)
 8001f9c:	4413      	add	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]

  key->is_enabled = 1;
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
  key->is_idle = 0;
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	711a      	strb	r2, [r3, #4]
  key->row = row;
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	797a      	ldrb	r2, [r7, #5]
 8001fb0:	705a      	strb	r2, [r3, #1]
  key->column = column;
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	793a      	ldrb	r2, [r7, #4]
 8001fb6:	709a      	strb	r2, [r3, #2]

  key->calibration.cycles_count = 0;
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  key->calibration.idle_value = IDLE_VALUE_APPROX;
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f042 0208 	orr.w	r2, r2, #8
 8001fce:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f042 0207 	orr.w	r2, r2, #7
 8001fd8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  key->calibration.max_distance = MAX_DISTANCE_APPROX;
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f062 020b 	orn	r2, r2, #11
 8001fe4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f042 0201 	orr.w	r2, r2, #1
 8001fee:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  key->actuation.status = STATUS_RESET;
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  key->actuation.trigger_offset = keyboard_user_config.trigger_offset;
 8001ffa:	4b74      	ldr	r3, [pc, #464]	@ (80021cc <init_key+0x268>)
 8001ffc:	785a      	ldrb	r2, [r3, #1]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
//  if ( (row == 1) && (column == 0)) {
//	  key->actuation.trigger_offset = 42;
//   }
  key->actuation.reset_offset = keyboard_user_config.trigger_offset - keyboard_user_config.reset_threshold;
 8002004:	4b71      	ldr	r3, [pc, #452]	@ (80021cc <init_key+0x268>)
 8002006:	785a      	ldrb	r2, [r3, #1]
 8002008:	4b70      	ldr	r3, [pc, #448]	@ (80021cc <init_key+0x268>)
 800200a:	789b      	ldrb	r3, [r3, #2]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	b2da      	uxtb	r2, r3
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  key->actuation.rapid_trigger_offset = keyboard_user_config.rapid_trigger_offset;
 8002016:	4b6d      	ldr	r3, [pc, #436]	@ (80021cc <init_key+0x268>)
 8002018:	78da      	ldrb	r2, [r3, #3]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8002020:	2300      	movs	r3, #0
 8002022:	75fb      	strb	r3, [r7, #23]
 8002024:	e0c6      	b.n	80021b4 <init_key+0x250>
    if (keyboard_user_config.keymaps[i][row][column][0] != ____) {
 8002026:	7df9      	ldrb	r1, [r7, #23]
 8002028:	797a      	ldrb	r2, [r7, #5]
 800202a:	793b      	ldrb	r3, [r7, #4]
 800202c:	4867      	ldr	r0, [pc, #412]	@ (80021cc <init_key+0x268>)
 800202e:	0089      	lsls	r1, r1, #2
 8002030:	440a      	add	r2, r1
 8002032:	0092      	lsls	r2, r2, #2
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4403      	add	r3, r0
 800203a:	88db      	ldrh	r3, [r3, #6]
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80b6 	beq.w	80021ae <init_key+0x24a>
      // Check if this is a macro (multiple non-zero elements)
      uint8_t macro_count = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	75bb      	strb	r3, [r7, #22]
      for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8002046:	2300      	movs	r3, #0
 8002048:	757b      	strb	r3, [r7, #21]
 800204a:	e015      	b.n	8002078 <init_key+0x114>
        if (keyboard_user_config.keymaps[i][row][column][j] != ____) {
 800204c:	7df8      	ldrb	r0, [r7, #23]
 800204e:	7979      	ldrb	r1, [r7, #5]
 8002050:	793a      	ldrb	r2, [r7, #4]
 8002052:	7d7b      	ldrb	r3, [r7, #21]
 8002054:	4c5d      	ldr	r4, [pc, #372]	@ (80021cc <init_key+0x268>)
 8002056:	0080      	lsls	r0, r0, #2
 8002058:	4401      	add	r1, r0
 800205a:	0089      	lsls	r1, r1, #2
 800205c:	440a      	add	r2, r1
 800205e:	0092      	lsls	r2, r2, #2
 8002060:	4413      	add	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4423      	add	r3, r4
 8002066:	88db      	ldrh	r3, [r3, #6]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <init_key+0x10e>
          macro_count++;
 800206c:	7dbb      	ldrb	r3, [r7, #22]
 800206e:	3301      	adds	r3, #1
 8002070:	75bb      	strb	r3, [r7, #22]
      for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8002072:	7d7b      	ldrb	r3, [r7, #21]
 8002074:	3301      	adds	r3, #1
 8002076:	757b      	strb	r3, [r7, #21]
 8002078:	7d7b      	ldrb	r3, [r7, #21]
 800207a:	2b03      	cmp	r3, #3
 800207c:	d9e6      	bls.n	800204c <init_key+0xe8>
        }
      }

      if (macro_count > 1) {
 800207e:	7dbb      	ldrb	r3, [r7, #22]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d92b      	bls.n	80020dc <init_key+0x178>
        // This is a macro - copy all values
        key->layers[i].type = KEY_TYPE_MACRO;
 8002084:	7dfa      	ldrb	r2, [r7, #23]
 8002086:	6939      	ldr	r1, [r7, #16]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	440b      	add	r3, r1
 8002090:	3305      	adds	r3, #5
 8002092:	2204      	movs	r2, #4
 8002094:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8002096:	2300      	movs	r3, #0
 8002098:	753b      	strb	r3, [r7, #20]
 800209a:	e01b      	b.n	80020d4 <init_key+0x170>
          key->layers[i].value[j] = keyboard_user_config.keymaps[i][row][column][j];
 800209c:	7dfd      	ldrb	r5, [r7, #23]
 800209e:	797c      	ldrb	r4, [r7, #5]
 80020a0:	7939      	ldrb	r1, [r7, #4]
 80020a2:	7d3b      	ldrb	r3, [r7, #20]
 80020a4:	7dfa      	ldrb	r2, [r7, #23]
 80020a6:	7d38      	ldrb	r0, [r7, #20]
 80020a8:	4e48      	ldr	r6, [pc, #288]	@ (80021cc <init_key+0x268>)
 80020aa:	00ad      	lsls	r5, r5, #2
 80020ac:	442c      	add	r4, r5
 80020ae:	00a4      	lsls	r4, r4, #2
 80020b0:	4421      	add	r1, r4
 80020b2:	0089      	lsls	r1, r1, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4433      	add	r3, r6
 80020ba:	88dc      	ldrh	r4, [r3, #6]
 80020bc:	6939      	ldr	r1, [r7, #16]
 80020be:	0040      	lsls	r0, r0, #1
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	4403      	add	r3, r0
 80020c8:	440b      	add	r3, r1
 80020ca:	4622      	mov	r2, r4
 80020cc:	80da      	strh	r2, [r3, #6]
        for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 80020ce:	7d3b      	ldrb	r3, [r7, #20]
 80020d0:	3301      	adds	r3, #1
 80020d2:	753b      	strb	r3, [r7, #20]
 80020d4:	7d3b      	ldrb	r3, [r7, #20]
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d9e0      	bls.n	800209c <init_key+0x138>
 80020da:	e068      	b.n	80021ae <init_key+0x24a>
        }
      } else {
        // Single key - check type
        uint16_t usage_consumer_control = get_usage_consumer_control(
 80020dc:	7df9      	ldrb	r1, [r7, #23]
 80020de:	797a      	ldrb	r2, [r7, #5]
 80020e0:	793b      	ldrb	r3, [r7, #4]
 80020e2:	483a      	ldr	r0, [pc, #232]	@ (80021cc <init_key+0x268>)
 80020e4:	0089      	lsls	r1, r1, #2
 80020e6:	440a      	add	r2, r1
 80020e8:	0092      	lsls	r2, r2, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4403      	add	r3, r0
 80020f0:	88db      	ldrh	r3, [r3, #6]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff ff22 	bl	8001f3c <get_usage_consumer_control>
 80020f8:	4603      	mov	r3, r0
 80020fa:	81fb      	strh	r3, [r7, #14]
            keyboard_user_config.keymaps[i][row][column][0]);
        if (usage_consumer_control) {
 80020fc:	89fb      	ldrh	r3, [r7, #14]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d011      	beq.n	8002126 <init_key+0x1c2>
          key->layers[i].type = KEY_TYPE_CONSUMER_CONTROL;
 8002102:	7dfa      	ldrb	r2, [r7, #23]
 8002104:	6939      	ldr	r1, [r7, #16]
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	440b      	add	r3, r1
 800210e:	3305      	adds	r3, #5
 8002110:	2203      	movs	r2, #3
 8002112:	701a      	strb	r2, [r3, #0]
          key->layers[i].value[0] = usage_consumer_control;
 8002114:	7dfa      	ldrb	r2, [r7, #23]
 8002116:	6939      	ldr	r1, [r7, #16]
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	440b      	add	r3, r1
 8002120:	89fa      	ldrh	r2, [r7, #14]
 8002122:	80da      	strh	r2, [r3, #6]
 8002124:	e043      	b.n	80021ae <init_key+0x24a>
        } else {
          uint8_t bitmask = get_bitmask_for_modifier(
              keyboard_user_config.keymaps[i][row][column][0]);
 8002126:	7df9      	ldrb	r1, [r7, #23]
 8002128:	797a      	ldrb	r2, [r7, #5]
 800212a:	793b      	ldrb	r3, [r7, #4]
 800212c:	4827      	ldr	r0, [pc, #156]	@ (80021cc <init_key+0x268>)
 800212e:	0089      	lsls	r1, r1, #2
 8002130:	440a      	add	r2, r1
 8002132:	0092      	lsls	r2, r2, #2
 8002134:	4413      	add	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4403      	add	r3, r0
 800213a:	88db      	ldrh	r3, [r3, #6]
          uint8_t bitmask = get_bitmask_for_modifier(
 800213c:	b2db      	uxtb	r3, r3
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fec8 	bl	8001ed4 <get_bitmask_for_modifier>
 8002144:	4603      	mov	r3, r0
 8002146:	737b      	strb	r3, [r7, #13]
          if (bitmask) {
 8002148:	7b7b      	ldrb	r3, [r7, #13]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d013      	beq.n	8002176 <init_key+0x212>
            key->layers[i].type = KEY_TYPE_MODIFIER;
 800214e:	7dfa      	ldrb	r2, [r7, #23]
 8002150:	6939      	ldr	r1, [r7, #16]
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	440b      	add	r3, r1
 800215a:	3305      	adds	r3, #5
 800215c:	2202      	movs	r2, #2
 800215e:	701a      	strb	r2, [r3, #0]
            key->layers[i].value[0] = bitmask;
 8002160:	7dfa      	ldrb	r2, [r7, #23]
 8002162:	7b7b      	ldrb	r3, [r7, #13]
 8002164:	b298      	uxth	r0, r3
 8002166:	6939      	ldr	r1, [r7, #16]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	440b      	add	r3, r1
 8002170:	4602      	mov	r2, r0
 8002172:	80da      	strh	r2, [r3, #6]
 8002174:	e01b      	b.n	80021ae <init_key+0x24a>
          } else {
            key->layers[i].type = KEY_TYPE_NORMAL;
 8002176:	7dfa      	ldrb	r2, [r7, #23]
 8002178:	6939      	ldr	r1, [r7, #16]
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	440b      	add	r3, r1
 8002182:	3305      	adds	r3, #5
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
            key->layers[i].value[0] =
                keyboard_user_config.keymaps[i][row][column][0];
 8002188:	7df8      	ldrb	r0, [r7, #23]
 800218a:	7979      	ldrb	r1, [r7, #5]
 800218c:	793b      	ldrb	r3, [r7, #4]
            key->layers[i].value[0] =
 800218e:	7dfa      	ldrb	r2, [r7, #23]
                keyboard_user_config.keymaps[i][row][column][0];
 8002190:	4c0e      	ldr	r4, [pc, #56]	@ (80021cc <init_key+0x268>)
 8002192:	0080      	lsls	r0, r0, #2
 8002194:	4401      	add	r1, r0
 8002196:	0089      	lsls	r1, r1, #2
 8002198:	440b      	add	r3, r1
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4423      	add	r3, r4
 800219e:	88d8      	ldrh	r0, [r3, #6]
            key->layers[i].value[0] =
 80021a0:	6939      	ldr	r1, [r7, #16]
 80021a2:	4613      	mov	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4413      	add	r3, r2
 80021a8:	440b      	add	r3, r1
 80021aa:	4602      	mov	r2, r0
 80021ac:	80da      	strh	r2, [r3, #6]
  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 80021ae:	7dfb      	ldrb	r3, [r7, #23]
 80021b0:	3301      	adds	r3, #1
 80021b2:	75fb      	strb	r3, [r7, #23]
 80021b4:	7dfb      	ldrb	r3, [r7, #23]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	f67f af35 	bls.w	8002026 <init_key+0xc2>
          }
        }
      }
    }
  }
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	371c      	adds	r7, #28
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000310 	.word	0x20000310
 80021cc:	20000000 	.word	0x20000000

080021d0 <update_key_state>:

uint8_t update_key_state(struct key *key) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  struct state state;

  // Get a reading
  state.value = keyboard_user_config.reverse_magnet_pole ? 4095 - keyboard_read_adc() : keyboard_read_adc();
 80021d8:	4bab      	ldr	r3, [pc, #684]	@ (8002488 <update_key_state+0x2b8>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d007      	beq.n	80021f0 <update_key_state+0x20>
 80021e0:	f001 fa3c 	bl	800365c <keyboard_read_adc>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 80021ea:	330f      	adds	r3, #15
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	e002      	b.n	80021f6 <update_key_state+0x26>
 80021f0:	f001 fa34 	bl	800365c <keyboard_read_adc>
 80021f4:	4603      	mov	r3, r0
 80021f6:	813b      	strh	r3, [r7, #8]

  if (key->calibration.cycles_count < CALIBRATION_CYCLES) {
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f8b3 3029 	ldrh.w	r3, [r3, #41]	@ 0x29
 80021fe:	b29b      	uxth	r3, r3
 8002200:	2b13      	cmp	r3, #19
 8002202:	d82f      	bhi.n	8002264 <update_key_state+0x94>
    // Calibrate idle value
    float delta = 0.6;
 8002204:	4ba1      	ldr	r3, [pc, #644]	@ (800248c <update_key_state+0x2bc>)
 8002206:	617b      	str	r3, [r7, #20]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8002208:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800220c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002210:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002214:	893b      	ldrh	r3, [r7, #8]
 8002216:	ee07 3a90 	vmov	s15, r3
 800221a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800221e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8002228:	b29b      	uxth	r3, r3
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002232:	edd7 7a05 	vldr	s15, [r7, #20]
 8002236:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800223a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002242:	ee17 3a90 	vmov	r3, s15
 8002246:	b29a      	uxth	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f8a3 202b 	strh.w	r2, [r3, #43]	@ 0x2b
    key->calibration.cycles_count++;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f8b3 3029 	ldrh.w	r3, [r3, #41]	@ 0x29
 8002254:	b29b      	uxth	r3, r3
 8002256:	3301      	adds	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f8a3 2029 	strh.w	r2, [r3, #41]	@ 0x29

    return 0;
 8002260:	2300      	movs	r3, #0
 8002262:	e10c      	b.n	800247e <update_key_state+0x2ae>
  }

  // Calibrate idle value
  if (state.value > key->calibration.idle_value) {
 8002264:	893a      	ldrh	r2, [r7, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 800226c:	b29b      	uxth	r3, r3
 800226e:	429a      	cmp	r2, r3
 8002270:	d929      	bls.n	80022c6 <update_key_state+0xf6>
    // opti possible sur float
    float delta = 0.8;
 8002272:	4b87      	ldr	r3, [pc, #540]	@ (8002490 <update_key_state+0x2c0>)
 8002274:	61fb      	str	r3, [r7, #28]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8002276:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800227a:	edd7 7a07 	vldr	s15, [r7, #28]
 800227e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002282:	893b      	ldrh	r3, [r7, #8]
 8002284:	ee07 3a90 	vmov	s15, r3
 8002288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800228c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8002296:	b29b      	uxth	r3, r3
 8002298:	ee07 3a90 	vmov	s15, r3
 800229c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80022a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022b0:	ee17 3a90 	vmov	r3, s15
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f8a3 202b 	strh.w	r2, [r3, #43]	@ 0x2b
    state.value = key->calibration.idle_value;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	813b      	strh	r3, [r7, #8]
  }

  // Do nothing if key is idle
  if (key->state.distance == 0 && state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f8b3 3031 	ldrh.w	r3, [r3, #49]	@ 0x31
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d117      	bne.n	8002302 <update_key_state+0x132>
 80022d2:	893b      	ldrh	r3, [r7, #8]
 80022d4:	461a      	mov	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 80022dc:	b29b      	uxth	r3, r3
 80022de:	3b0a      	subs	r3, #10
 80022e0:	429a      	cmp	r2, r3
 80022e2:	db0e      	blt.n	8002302 <update_key_state+0x132>
    if (key->idle_counter >= IDLE_CYCLES_UNTIL_SLEEP) {
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	78db      	ldrb	r3, [r3, #3]
 80022e8:	2b0e      	cmp	r3, #14
 80022ea:	d904      	bls.n	80022f6 <update_key_state+0x126>
      key->is_idle = 1;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	711a      	strb	r2, [r3, #4]
      return 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	e0c3      	b.n	800247e <update_key_state+0x2ae>
    }
    key->idle_counter++;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	78db      	ldrb	r3, [r3, #3]
 80022fa:	3301      	adds	r3, #1
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	70da      	strb	r2, [r3, #3]
  }

  // Get distance from top
  if (state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8002302:	893b      	ldrh	r3, [r7, #8]
 8002304:	461a      	mov	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b0a      	subs	r3, #10
 8002310:	429a      	cmp	r2, r3
 8002312:	db06      	blt.n	8002322 <update_key_state+0x152>
    state.distance = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	817b      	strh	r3, [r7, #10]
    key->actuation.direction_changed_point = 0;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8002320:	e00f      	b.n	8002342 <update_key_state+0x172>
  } else {
    state.distance = key->calibration.idle_value - IDLE_VALUE_OFFSET - state.value;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8002328:	b29a      	uxth	r2, r3
 800232a:	893b      	ldrh	r3, [r7, #8]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b0a      	subs	r3, #10
 8002332:	b29b      	uxth	r3, r3
 8002334:	817b      	strh	r3, [r7, #10]
    key->is_idle = 0;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	711a      	strb	r2, [r3, #4]
    key->idle_counter = 0;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	70da      	strb	r2, [r3, #3]
  }

  // Calibrate max distance value
  if (state.distance > key->calibration.max_distance) {
 8002342:	897a      	ldrh	r2, [r7, #10]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 800234a:	b29b      	uxth	r3, r3
 800234c:	429a      	cmp	r2, r3
 800234e:	d903      	bls.n	8002358 <update_key_state+0x188>
    key->calibration.max_distance = state.distance;
 8002350:	897a      	ldrh	r2, [r7, #10]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f8a3 202d 	strh.w	r2, [r3, #45]	@ 0x2d
  }

  // Limit max distance
  if (state.distance >= key->calibration.max_distance - MAX_DISTANCE_OFFSET) {
 8002358:	897b      	ldrh	r3, [r7, #10]
 800235a:	461a      	mov	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 8002362:	b29b      	uxth	r3, r3
 8002364:	3b3c      	subs	r3, #60	@ 0x3c
 8002366:	429a      	cmp	r2, r3
 8002368:	db04      	blt.n	8002374 <update_key_state+0x1a4>
    state.distance = key->calibration.max_distance;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 8002370:	b29b      	uxth	r3, r3
 8002372:	817b      	strh	r3, [r7, #10]
  }

  // Map distance in percentages
  state.distance_8bits = (state.distance * 0xff) / key->calibration.max_distance;
 8002374:	897b      	ldrh	r3, [r7, #10]
 8002376:	461a      	mov	r2, r3
 8002378:	4613      	mov	r3, r2
 800237a:	021b      	lsls	r3, r3, #8
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	f8b2 202d 	ldrh.w	r2, [r2, #45]	@ 0x2d
 8002384:	b292      	uxth	r2, r2
 8002386:	fb93 f3f2 	sdiv	r3, r3, r2
 800238a:	b2db      	uxtb	r3, r3
 800238c:	733b      	strb	r3, [r7, #12]

  float delta = 0.8;
 800238e:	4b40      	ldr	r3, [pc, #256]	@ (8002490 <update_key_state+0x2c0>)
 8002390:	61bb      	str	r3, [r7, #24]
  state.filtered_distance = (1 - delta) * state.distance_8bits + delta * key->state.filtered_distance;
 8002392:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002396:	edd7 7a06 	vldr	s15, [r7, #24]
 800239a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800239e:	7b3b      	ldrb	r3, [r7, #12]
 80023a0:	ee07 3a90 	vmov	s15, r3
 80023a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80023b4:	ee06 3a90 	vmov	s13, r3
 80023b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c0:	ee17 3a90 	vmov	r3, s15
 80023c4:	f8c7 300d 	str.w	r3, [r7, #13]
  state.filtered_distance_8bits = state.filtered_distance;
 80023c8:	f8d7 300d 	ldr.w	r3, [r7, #13]
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023d4:	edc7 7a00 	vstr	s15, [r7]
 80023d8:	783b      	ldrb	r3, [r7, #0]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	74bb      	strb	r3, [r7, #18]

  // Update velocity
  state.velocity = state.filtered_distance_8bits - key->state.filtered_distance_8bits;
 80023de:	7cba      	ldrb	r2, [r7, #18]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	b25b      	sxtb	r3, r3
 80023ec:	747b      	strb	r3, [r7, #17]

  // Update direction
  if (key->state.velocity > 0 && state.velocity > 0 && key->actuation.direction != GOING_DOWN) {
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	dd18      	ble.n	800242a <update_key_state+0x25a>
 80023f8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	dd14      	ble.n	800242a <update_key_state+0x25a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002406:	2b01      	cmp	r3, #1
 8002408:	d00f      	beq.n	800242a <update_key_state+0x25a>
    key->actuation.direction = GOING_DOWN;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    if (key->actuation.direction_changed_point != 0) {
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8002418:	2b00      	cmp	r3, #0
 800241a:	d023      	beq.n	8002464 <update_key_state+0x294>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    if (key->actuation.direction_changed_point != 0) {
 8002428:	e01c      	b.n	8002464 <update_key_state+0x294>
    }
  } else if (key->state.velocity < 0 && state.velocity < 0 && key->actuation.direction != GOING_UP) {
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8002430:	2b00      	cmp	r3, #0
 8002432:	da17      	bge.n	8002464 <update_key_state+0x294>
 8002434:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8002438:	2b00      	cmp	r3, #0
 800243a:	da13      	bge.n	8002464 <update_key_state+0x294>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00e      	beq.n	8002464 <update_key_state+0x294>
    key->actuation.direction = GOING_UP;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    if (key->actuation.direction_changed_point != 255) {
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8002454:	2bff      	cmp	r3, #255	@ 0xff
 8002456:	d005      	beq.n	8002464 <update_key_state+0x294>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    }
  }

  key->state = state;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 800246a:	f107 0308 	add.w	r3, r7, #8
 800246e:	cb03      	ldmia	r3!, {r0, r1}
 8002470:	6010      	str	r0, [r2, #0]
 8002472:	6051      	str	r1, [r2, #4]
 8002474:	8819      	ldrh	r1, [r3, #0]
 8002476:	789b      	ldrb	r3, [r3, #2]
 8002478:	8111      	strh	r1, [r2, #8]
 800247a:	7293      	strb	r3, [r2, #10]
  return 1;
 800247c:	2301      	movs	r3, #1
}
 800247e:	4618      	mov	r0, r3
 8002480:	3720      	adds	r7, #32
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000000 	.word	0x20000000
 800248c:	3f19999a 	.word	0x3f19999a
 8002490:	3f4ccccd 	.word	0x3f4ccccd

08002494 <update_key_actuation>:

void update_key_actuation(struct key *key, uint8_t layer) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	70fb      	strb	r3, [r7, #3]
   *
   */

  // if rapid trigger enable, move trigger and reset offsets according to the distance taht began the trigger

  uint32_t now = keyboard_get_time();
 80024a0:	f001 f8f2 	bl	8003688 <keyboard_get_time>
 80024a4:	6178      	str	r0, [r7, #20]
  uint8_t is_after_trigger_offset = key->state.distance_8bits > key->actuation.trigger_offset;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024b2:	429a      	cmp	r2, r3
 80024b4:	bf8c      	ite	hi
 80024b6:	2301      	movhi	r3, #1
 80024b8:	2300      	movls	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	74fb      	strb	r3, [r7, #19]
  uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024ca:	429a      	cmp	r2, r3
 80024cc:	bf34      	ite	cc
 80024ce:	2301      	movcc	r3, #1
 80024d0:	2300      	movcs	r3, #0
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	74bb      	strb	r3, [r7, #18]
  uint8_t has_rapid_trigger = key->actuation.rapid_trigger_offset != 0;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80024dc:	2b00      	cmp	r3, #0
 80024de:	bf14      	ite	ne
 80024e0:	2301      	movne	r3, #1
 80024e2:	2300      	moveq	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	747b      	strb	r3, [r7, #17]
  uint8_t is_after_rapid_trigger_offset = key->state.distance_8bits > key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset + keyboard_user_config.reset_threshold;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80024ee:	4619      	mov	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80024f6:	461a      	mov	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	4a5d      	ldr	r2, [pc, #372]	@ (8002678 <update_key_actuation+0x1e4>)
 8002502:	7892      	ldrb	r2, [r2, #2]
 8002504:	4413      	add	r3, r2
 8002506:	4299      	cmp	r1, r3
 8002508:	bfcc      	ite	gt
 800250a:	2301      	movgt	r3, #1
 800250c:	2300      	movle	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	743b      	strb	r3, [r7, #16]
  uint8_t is_before_rapid_reset_offset = key->state.distance_8bits < key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002518:	461a      	mov	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8002520:	4619      	mov	r1, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002528:	1acb      	subs	r3, r1, r3
 800252a:	429a      	cmp	r2, r3
 800252c:	bfb4      	ite	lt
 800252e:	2301      	movlt	r3, #1
 8002530:	2300      	movge	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	73fb      	strb	r3, [r7, #15]

  switch (key->actuation.status) {
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800253c:	3b01      	subs	r3, #1
 800253e:	2b03      	cmp	r3, #3
 8002540:	f200 808f 	bhi.w	8002662 <update_key_actuation+0x1ce>
 8002544:	a201      	add	r2, pc, #4	@ (adr r2, 800254c <update_key_actuation+0xb8>)
 8002546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254a:	bf00      	nop
 800254c:	0800260d 	.word	0x0800260d
 8002550:	0800261f 	.word	0x0800261f
 8002554:	0800255d 	.word	0x0800255d
 8002558:	0800259b 	.word	0x0800259b

  case STATUS_RESET:
    // if reset, can be triggered or tap
    if (is_after_trigger_offset) {
 800255c:	7cfb      	ldrb	r3, [r7, #19]
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8081 	beq.w	8002666 <update_key_actuation+0x1d2>
      if (key->layers[_TAP_LAYER].value[0]) {
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d004      	beq.n	800257a <update_key_actuation+0xe6>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002578:	e00b      	b.n	8002592 <update_key_actuation+0xfe>
        // key_triggered = 1;
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2202      	movs	r2, #2
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        key_triggered = 1;
 8002582:	4b3e      	ldr	r3, [pc, #248]	@ (800267c <update_key_actuation+0x1e8>)
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, layer);
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	4619      	mov	r1, r3
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff fa81 	bl	8001a94 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    break;
 8002598:	e065      	b.n	8002666 <update_key_actuation+0x1d2>

  case STATUS_RAPID_TRIGGER_RESET:
    if (!has_rapid_trigger) {
 800259a:	7c7b      	ldrb	r3, [r7, #17]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d104      	bne.n	80025aa <update_key_actuation+0x116>
      key->actuation.status = STATUS_RESET;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2203      	movs	r2, #3
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      break;
 80025a8:	e062      	b.n	8002670 <update_key_actuation+0x1dc>
    }
    // if reset, can be triggered or tap
    if (is_after_trigger_offset && key->actuation.direction == GOING_DOWN && is_after_rapid_trigger_offset) {
 80025aa:	7cfb      	ldrb	r3, [r7, #19]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d025      	beq.n	80025fc <update_key_actuation+0x168>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d120      	bne.n	80025fc <update_key_actuation+0x168>
 80025ba:	7c3b      	ldrb	r3, [r7, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01d      	beq.n	80025fc <update_key_actuation+0x168>
      if (key->layers[_TAP_LAYER].value[0]) {
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d007      	beq.n	80025dc <update_key_actuation+0x148>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        key_triggered = 1;
 80025d4:	4b29      	ldr	r3, [pc, #164]	@ (800267c <update_key_actuation+0x1e8>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	e00b      	b.n	80025f4 <update_key_actuation+0x160>
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2202      	movs	r2, #2
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        key_triggered = 1;
 80025e4:	4b25      	ldr	r3, [pc, #148]	@ (800267c <update_key_actuation+0x1e8>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, layer);
 80025ea:	78fb      	ldrb	r3, [r7, #3]
 80025ec:	4619      	mov	r1, r3
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff fa50 	bl	8001a94 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	641a      	str	r2, [r3, #64]	@ 0x40
    } else if (is_before_reset_offset) {
      key->actuation.status = STATUS_RESET;
    }
    break;
 80025fa:	e036      	b.n	800266a <update_key_actuation+0x1d6>
    } else if (is_before_reset_offset) {
 80025fc:	7cbb      	ldrb	r3, [r7, #18]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d033      	beq.n	800266a <update_key_actuation+0x1d6>
      key->actuation.status = STATUS_RESET;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2203      	movs	r2, #3
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    break;
 800260a:	e02e      	b.n	800266a <update_key_actuation+0x1d6>

  case STATUS_TAP:
    // if tap, can be reset
    key->actuation.status = STATUS_RESET;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2203      	movs	r2, #3
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    hid_release_key(key, _TAP_LAYER);
 8002614:	2101      	movs	r1, #1
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff fb56 	bl	8001cc8 <hid_release_key>
    break;
 800261c:	e028      	b.n	8002670 <update_key_actuation+0x1dc>

  case STATUS_TRIGGERED:
    // if triggered, can be reset
    if (is_before_reset_offset) {
 800261e:	7cbb      	ldrb	r3, [r7, #18]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d009      	beq.n	8002638 <update_key_actuation+0x1a4>
      key->actuation.status = STATUS_RESET;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2203      	movs	r2, #3
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      hid_release_key(key, layer);
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	4619      	mov	r1, r3
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff fb49 	bl	8001cc8 <hid_release_key>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
      hid_release_key(key, layer);
    }
    break;
 8002636:	e01a      	b.n	800266e <update_key_actuation+0x1da>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
 8002638:	7c7b      	ldrb	r3, [r7, #17]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d017      	beq.n	800266e <update_key_actuation+0x1da>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002644:	2b00      	cmp	r3, #0
 8002646:	d112      	bne.n	800266e <update_key_actuation+0x1da>
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00f      	beq.n	800266e <update_key_actuation+0x1da>
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2204      	movs	r2, #4
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      hid_release_key(key, layer);
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	4619      	mov	r1, r3
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff fb34 	bl	8001cc8 <hid_release_key>
    break;
 8002660:	e005      	b.n	800266e <update_key_actuation+0x1da>

  default:
    break;
 8002662:	bf00      	nop
 8002664:	e004      	b.n	8002670 <update_key_actuation+0x1dc>
    break;
 8002666:	bf00      	nop
 8002668:	e002      	b.n	8002670 <update_key_actuation+0x1dc>
    break;
 800266a:	bf00      	nop
 800266c:	e000      	b.n	8002670 <update_key_actuation+0x1dc>
    break;
 800266e:	bf00      	nop
  }
}
 8002670:	bf00      	nop
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20000000 	.word	0x20000000
 800267c:	20000754 	.word	0x20000754

08002680 <update_key>:

void update_key(struct key *key) {
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if (!update_key_state(key)) {
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff fda1 	bl	80021d0 <update_key_state>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d007      	beq.n	80026a4 <update_key+0x24>
    return;
  }

  extern int current_layer;
  update_key_actuation(key, current_layer);
 8002694:	4b05      	ldr	r3, [pc, #20]	@ (80026ac <update_key+0x2c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	4619      	mov	r1, r3
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff fef9 	bl	8002494 <update_key_actuation>
 80026a2:	e000      	b.n	80026a6 <update_key+0x26>
    return;
 80026a4:	bf00      	nop
}
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000cf4 	.word	0x20000cf4

080026b0 <keyboard_init_keys>:

void keyboard_init_keys() {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
  	keyboard_read_config();
 80026b6:	f000 ff37 	bl	8003528 <keyboard_read_config>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 80026ba:	2300      	movs	r3, #0
 80026bc:	71fb      	strb	r3, [r7, #7]
 80026be:	e027      	b.n	8002710 <keyboard_init_keys+0x60>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 80026c0:	2300      	movs	r3, #0
 80026c2:	71bb      	strb	r3, [r7, #6]
 80026c4:	e01e      	b.n	8002704 <keyboard_init_keys+0x54>
      if (channels_by_row_col[row][col][0] != XXXX) {
 80026c6:	79fa      	ldrb	r2, [r7, #7]
 80026c8:	79bb      	ldrb	r3, [r7, #6]
 80026ca:	4915      	ldr	r1, [pc, #84]	@ (8002720 <keyboard_init_keys+0x70>)
 80026cc:	0092      	lsls	r2, r2, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80026d4:	2bff      	cmp	r3, #255	@ 0xff
 80026d6:	d012      	beq.n	80026fe <keyboard_init_keys+0x4e>
        init_key(channels_by_row_col[row][col][0], channels_by_row_col[row][col][1], row, col);
 80026d8:	79fa      	ldrb	r2, [r7, #7]
 80026da:	79bb      	ldrb	r3, [r7, #6]
 80026dc:	4910      	ldr	r1, [pc, #64]	@ (8002720 <keyboard_init_keys+0x70>)
 80026de:	0092      	lsls	r2, r2, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 80026e6:	79fa      	ldrb	r2, [r7, #7]
 80026e8:	79bb      	ldrb	r3, [r7, #6]
 80026ea:	490d      	ldr	r1, [pc, #52]	@ (8002720 <keyboard_init_keys+0x70>)
 80026ec:	0092      	lsls	r2, r2, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	440b      	add	r3, r1
 80026f4:	7859      	ldrb	r1, [r3, #1]
 80026f6:	79bb      	ldrb	r3, [r7, #6]
 80026f8:	79fa      	ldrb	r2, [r7, #7]
 80026fa:	f7ff fc33 	bl	8001f64 <init_key>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 80026fe:	79bb      	ldrb	r3, [r7, #6]
 8002700:	3301      	adds	r3, #1
 8002702:	71bb      	strb	r3, [r7, #6]
 8002704:	79bb      	ldrb	r3, [r7, #6]
 8002706:	2b03      	cmp	r3, #3
 8002708:	d9dd      	bls.n	80026c6 <keyboard_init_keys+0x16>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	3301      	adds	r3, #1
 800270e:	71fb      	strb	r3, [r7, #7]
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	2b03      	cmp	r3, #3
 8002714:	d9d4      	bls.n	80026c0 <keyboard_init_keys+0x10>
      }
    }
  }
}
 8002716:	bf00      	nop
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	0800f2bc 	.word	0x0800f2bc

08002724 <keyboard_task>:

void keyboard_task() {
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 800272a:	f000 ffad 	bl	8003688 <keyboard_get_time>
 800272e:	60b8      	str	r0, [r7, #8]
  key_triggered = 0;
 8002730:	4b65      	ldr	r3, [pc, #404]	@ (80028c8 <keyboard_task+0x1a4>)
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
 800273a:	e039      	b.n	80027b0 <keyboard_task+0x8c>
    keyboard_select_amux(amux_channel);
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	4618      	mov	r0, r3
 8002740:	f000 ff48 	bl	80035d4 <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002744:	2300      	movs	r3, #0
 8002746:	73bb      	strb	r3, [r7, #14]
 8002748:	e02c      	b.n	80027a4 <keyboard_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 800274a:	7bb9      	ldrb	r1, [r7, #14]
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	485f      	ldr	r0, [pc, #380]	@ (80028cc <keyboard_task+0x1a8>)
 8002750:	461a      	mov	r2, r3
 8002752:	0112      	lsls	r2, r2, #4
 8002754:	441a      	add	r2, r3
 8002756:	0093      	lsls	r3, r2, #2
 8002758:	461a      	mov	r2, r3
 800275a:	460b      	mov	r3, r1
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	440b      	add	r3, r1
 8002760:	019b      	lsls	r3, r3, #6
 8002762:	4413      	add	r3, r2
 8002764:	4403      	add	r3, r0
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d017      	beq.n	800279c <keyboard_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 800276c:	7bbb      	ldrb	r3, [r7, #14]
 800276e:	4618      	mov	r0, r3
 8002770:	f000 ff58 	bl	8003624 <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 8002774:	7bb9      	ldrb	r1, [r7, #14]
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	461a      	mov	r2, r3
 800277a:	0112      	lsls	r2, r2, #4
 800277c:	441a      	add	r2, r3
 800277e:	0093      	lsls	r3, r2, #2
 8002780:	461a      	mov	r2, r3
 8002782:	460b      	mov	r3, r1
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	440b      	add	r3, r1
 8002788:	019b      	lsls	r3, r3, #6
 800278a:	4413      	add	r3, r2
 800278c:	4a4f      	ldr	r2, [pc, #316]	@ (80028cc <keyboard_task+0x1a8>)
 800278e:	4413      	add	r3, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff75 	bl	8002680 <update_key>

      keyboard_close_adc();
 8002796:	f000 ff6d 	bl	8003674 <keyboard_close_adc>
 800279a:	e000      	b.n	800279e <keyboard_task+0x7a>
        continue;
 800279c:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800279e:	7bbb      	ldrb	r3, [r7, #14]
 80027a0:	3301      	adds	r3, #1
 80027a2:	73bb      	strb	r3, [r7, #14]
 80027a4:	7bbb      	ldrb	r3, [r7, #14]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0cf      	beq.n	800274a <keyboard_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	3301      	adds	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	2b0f      	cmp	r3, #15
 80027b4:	d9c2      	bls.n	800273c <keyboard_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80027b6:	2300      	movs	r3, #0
 80027b8:	737b      	strb	r3, [r7, #13]
 80027ba:	e077      	b.n	80028ac <keyboard_task+0x188>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80027bc:	2300      	movs	r3, #0
 80027be:	733b      	strb	r3, [r7, #12]
 80027c0:	e06e      	b.n	80028a0 <keyboard_task+0x17c>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 80027c2:	7b39      	ldrb	r1, [r7, #12]
 80027c4:	7b7b      	ldrb	r3, [r7, #13]
 80027c6:	4841      	ldr	r0, [pc, #260]	@ (80028cc <keyboard_task+0x1a8>)
 80027c8:	461a      	mov	r2, r3
 80027ca:	0112      	lsls	r2, r2, #4
 80027cc:	441a      	add	r2, r3
 80027ce:	0093      	lsls	r3, r2, #2
 80027d0:	461a      	mov	r2, r3
 80027d2:	460b      	mov	r3, r1
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	440b      	add	r3, r1
 80027d8:	019b      	lsls	r3, r3, #6
 80027da:	4413      	add	r3, r2
 80027dc:	4403      	add	r3, r0
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d059      	beq.n	8002898 <keyboard_task+0x174>
 80027e4:	7b39      	ldrb	r1, [r7, #12]
 80027e6:	7b7b      	ldrb	r3, [r7, #13]
 80027e8:	4838      	ldr	r0, [pc, #224]	@ (80028cc <keyboard_task+0x1a8>)
 80027ea:	461a      	mov	r2, r3
 80027ec:	0112      	lsls	r2, r2, #4
 80027ee:	441a      	add	r2, r3
 80027f0:	0093      	lsls	r3, r2, #2
 80027f2:	461a      	mov	r2, r3
 80027f4:	460b      	mov	r3, r1
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	440b      	add	r3, r1
 80027fa:	019b      	lsls	r3, r3, #6
 80027fc:	4413      	add	r3, r2
 80027fe:	4403      	add	r3, r0
 8002800:	333c      	adds	r3, #60	@ 0x3c
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d147      	bne.n	8002898 <keyboard_task+0x174>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8002808:	7b39      	ldrb	r1, [r7, #12]
 800280a:	7b7b      	ldrb	r3, [r7, #13]
 800280c:	461a      	mov	r2, r3
 800280e:	0112      	lsls	r2, r2, #4
 8002810:	441a      	add	r2, r3
 8002812:	0093      	lsls	r3, r2, #2
 8002814:	461a      	mov	r2, r3
 8002816:	460b      	mov	r3, r1
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	440b      	add	r3, r1
 800281c:	019b      	lsls	r3, r3, #6
 800281e:	4413      	add	r3, r2
 8002820:	4a2a      	ldr	r2, [pc, #168]	@ (80028cc <keyboard_task+0x1a8>)
 8002822:	4413      	add	r3, r2
 8002824:	607b      	str	r3, [r7, #4]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002832:	429a      	cmp	r2, r3
 8002834:	bf34      	ite	cc
 8002836:	2301      	movcc	r3, #1
 8002838:	2300      	movcs	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	70fb      	strb	r3, [r7, #3]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 800283e:	f000 ff23 	bl	8003688 <keyboard_get_time>
 8002842:	4602      	mov	r2, r0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	4a21      	ldr	r2, [pc, #132]	@ (80028d0 <keyboard_task+0x1ac>)
 800284c:	8892      	ldrh	r2, [r2, #4]
 800284e:	4293      	cmp	r3, r2
 8002850:	bf94      	ite	ls
 8002852:	2301      	movls	r3, #1
 8002854:	2300      	movhi	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	70bb      	strb	r3, [r7, #2]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00b      	beq.n	8002878 <keyboard_task+0x154>
 8002860:	78bb      	ldrb	r3, [r7, #2]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d008      	beq.n	8002878 <keyboard_task+0x154>
        key->actuation.status = STATUS_TAP;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _TAP_LAYER);
 800286e:	2101      	movs	r1, #1
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff f90f 	bl	8001a94 <hid_press_key>
 8002876:	e010      	b.n	800289a <keyboard_task+0x176>
      } else if (!is_before_timeout || key_triggered) {
 8002878:	78bb      	ldrb	r3, [r7, #2]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <keyboard_task+0x162>
 800287e:	4b12      	ldr	r3, [pc, #72]	@ (80028c8 <keyboard_task+0x1a4>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d009      	beq.n	800289a <keyboard_task+0x176>
        key->actuation.status = STATUS_TRIGGERED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2202      	movs	r2, #2
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _BASE_LAYER);
 800288e:	2100      	movs	r1, #0
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff f8ff 	bl	8001a94 <hid_press_key>
 8002896:	e000      	b.n	800289a <keyboard_task+0x176>
        continue;
 8002898:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800289a:	7b3b      	ldrb	r3, [r7, #12]
 800289c:	3301      	adds	r3, #1
 800289e:	733b      	strb	r3, [r7, #12]
 80028a0:	7b3b      	ldrb	r3, [r7, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d08d      	beq.n	80027c2 <keyboard_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80028a6:	7b7b      	ldrb	r3, [r7, #13]
 80028a8:	3301      	adds	r3, #1
 80028aa:	737b      	strb	r3, [r7, #13]
 80028ac:	7b7b      	ldrb	r3, [r7, #13]
 80028ae:	2b0f      	cmp	r3, #15
 80028b0:	d984      	bls.n	80027bc <keyboard_task+0x98>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 80028b2:	f000 fee9 	bl	8003688 <keyboard_get_time>
 80028b6:	4602      	mov	r2, r0
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	4a05      	ldr	r2, [pc, #20]	@ (80028d4 <keyboard_task+0x1b0>)
 80028be:	6013      	str	r3, [r2, #0]
}
 80028c0:	bf00      	nop
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000754 	.word	0x20000754
 80028cc:	20000310 	.word	0x20000310
 80028d0:	20000000 	.word	0x20000000
 80028d4:	20000750 	.word	0x20000750

080028d8 <snaptap_task>:

void snaptap_task() {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 80028de:	f000 fed3 	bl	8003688 <keyboard_get_time>
 80028e2:	6138      	str	r0, [r7, #16]
  key_triggered = 0;
 80028e4:	4b8b      	ldr	r3, [pc, #556]	@ (8002b14 <snaptap_task+0x23c>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80028ea:	2300      	movs	r3, #0
 80028ec:	77fb      	strb	r3, [r7, #31]
 80028ee:	e039      	b.n	8002964 <snaptap_task+0x8c>
    keyboard_select_amux(amux_channel);
 80028f0:	7ffb      	ldrb	r3, [r7, #31]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fe6e 	bl	80035d4 <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80028f8:	2300      	movs	r3, #0
 80028fa:	77bb      	strb	r3, [r7, #30]
 80028fc:	e02c      	b.n	8002958 <snaptap_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 80028fe:	7fb9      	ldrb	r1, [r7, #30]
 8002900:	7ffb      	ldrb	r3, [r7, #31]
 8002902:	4885      	ldr	r0, [pc, #532]	@ (8002b18 <snaptap_task+0x240>)
 8002904:	461a      	mov	r2, r3
 8002906:	0112      	lsls	r2, r2, #4
 8002908:	441a      	add	r2, r3
 800290a:	0093      	lsls	r3, r2, #2
 800290c:	461a      	mov	r2, r3
 800290e:	460b      	mov	r3, r1
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	440b      	add	r3, r1
 8002914:	019b      	lsls	r3, r3, #6
 8002916:	4413      	add	r3, r2
 8002918:	4403      	add	r3, r0
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d017      	beq.n	8002950 <snaptap_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 8002920:	7fbb      	ldrb	r3, [r7, #30]
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fe7e 	bl	8003624 <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 8002928:	7fb9      	ldrb	r1, [r7, #30]
 800292a:	7ffb      	ldrb	r3, [r7, #31]
 800292c:	461a      	mov	r2, r3
 800292e:	0112      	lsls	r2, r2, #4
 8002930:	441a      	add	r2, r3
 8002932:	0093      	lsls	r3, r2, #2
 8002934:	461a      	mov	r2, r3
 8002936:	460b      	mov	r3, r1
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	440b      	add	r3, r1
 800293c:	019b      	lsls	r3, r3, #6
 800293e:	4413      	add	r3, r2
 8002940:	4a75      	ldr	r2, [pc, #468]	@ (8002b18 <snaptap_task+0x240>)
 8002942:	4413      	add	r3, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fe9b 	bl	8002680 <update_key>

      keyboard_close_adc();
 800294a:	f000 fe93 	bl	8003674 <keyboard_close_adc>
 800294e:	e000      	b.n	8002952 <snaptap_task+0x7a>
        continue;
 8002950:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002952:	7fbb      	ldrb	r3, [r7, #30]
 8002954:	3301      	adds	r3, #1
 8002956:	77bb      	strb	r3, [r7, #30]
 8002958:	7fbb      	ldrb	r3, [r7, #30]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0cf      	beq.n	80028fe <snaptap_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800295e:	7ffb      	ldrb	r3, [r7, #31]
 8002960:	3301      	adds	r3, #1
 8002962:	77fb      	strb	r3, [r7, #31]
 8002964:	7ffb      	ldrb	r3, [r7, #31]
 8002966:	2b0f      	cmp	r3, #15
 8002968:	d9c2      	bls.n	80028f0 <snaptap_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800296a:	2300      	movs	r3, #0
 800296c:	777b      	strb	r3, [r7, #29]
 800296e:	e077      	b.n	8002a60 <snaptap_task+0x188>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002970:	2300      	movs	r3, #0
 8002972:	773b      	strb	r3, [r7, #28]
 8002974:	e06e      	b.n	8002a54 <snaptap_task+0x17c>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 8002976:	7f39      	ldrb	r1, [r7, #28]
 8002978:	7f7b      	ldrb	r3, [r7, #29]
 800297a:	4867      	ldr	r0, [pc, #412]	@ (8002b18 <snaptap_task+0x240>)
 800297c:	461a      	mov	r2, r3
 800297e:	0112      	lsls	r2, r2, #4
 8002980:	441a      	add	r2, r3
 8002982:	0093      	lsls	r3, r2, #2
 8002984:	461a      	mov	r2, r3
 8002986:	460b      	mov	r3, r1
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	440b      	add	r3, r1
 800298c:	019b      	lsls	r3, r3, #6
 800298e:	4413      	add	r3, r2
 8002990:	4403      	add	r3, r0
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d059      	beq.n	8002a4c <snaptap_task+0x174>
 8002998:	7f39      	ldrb	r1, [r7, #28]
 800299a:	7f7b      	ldrb	r3, [r7, #29]
 800299c:	485e      	ldr	r0, [pc, #376]	@ (8002b18 <snaptap_task+0x240>)
 800299e:	461a      	mov	r2, r3
 80029a0:	0112      	lsls	r2, r2, #4
 80029a2:	441a      	add	r2, r3
 80029a4:	0093      	lsls	r3, r2, #2
 80029a6:	461a      	mov	r2, r3
 80029a8:	460b      	mov	r3, r1
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	440b      	add	r3, r1
 80029ae:	019b      	lsls	r3, r3, #6
 80029b0:	4413      	add	r3, r2
 80029b2:	4403      	add	r3, r0
 80029b4:	333c      	adds	r3, #60	@ 0x3c
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d147      	bne.n	8002a4c <snaptap_task+0x174>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 80029bc:	7f39      	ldrb	r1, [r7, #28]
 80029be:	7f7b      	ldrb	r3, [r7, #29]
 80029c0:	461a      	mov	r2, r3
 80029c2:	0112      	lsls	r2, r2, #4
 80029c4:	441a      	add	r2, r3
 80029c6:	0093      	lsls	r3, r2, #2
 80029c8:	461a      	mov	r2, r3
 80029ca:	460b      	mov	r3, r1
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	440b      	add	r3, r1
 80029d0:	019b      	lsls	r3, r3, #6
 80029d2:	4413      	add	r3, r2
 80029d4:	4a50      	ldr	r2, [pc, #320]	@ (8002b18 <snaptap_task+0x240>)
 80029d6:	4413      	add	r3, r2
 80029d8:	60bb      	str	r3, [r7, #8]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029e6:	429a      	cmp	r2, r3
 80029e8:	bf34      	ite	cc
 80029ea:	2301      	movcc	r3, #1
 80029ec:	2300      	movcs	r3, #0
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	71fb      	strb	r3, [r7, #7]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 80029f2:	f000 fe49 	bl	8003688 <keyboard_get_time>
 80029f6:	4602      	mov	r2, r0
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	4a47      	ldr	r2, [pc, #284]	@ (8002b1c <snaptap_task+0x244>)
 8002a00:	8892      	ldrh	r2, [r2, #4]
 8002a02:	4293      	cmp	r3, r2
 8002a04:	bf94      	ite	ls
 8002a06:	2301      	movls	r3, #1
 8002a08:	2300      	movhi	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	71bb      	strb	r3, [r7, #6]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00b      	beq.n	8002a2c <snaptap_task+0x154>
 8002a14:	79bb      	ldrb	r3, [r7, #6]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <snaptap_task+0x154>
        key->actuation.status = STATUS_TAP;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _TAP_LAYER);
 8002a22:	2101      	movs	r1, #1
 8002a24:	68b8      	ldr	r0, [r7, #8]
 8002a26:	f7ff f835 	bl	8001a94 <hid_press_key>
 8002a2a:	e010      	b.n	8002a4e <snaptap_task+0x176>
      } else if (!is_before_timeout || key_triggered) {
 8002a2c:	79bb      	ldrb	r3, [r7, #6]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <snaptap_task+0x162>
 8002a32:	4b38      	ldr	r3, [pc, #224]	@ (8002b14 <snaptap_task+0x23c>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d009      	beq.n	8002a4e <snaptap_task+0x176>
        key->actuation.status = STATUS_TRIGGERED;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _BASE_LAYER);
 8002a42:	2100      	movs	r1, #0
 8002a44:	68b8      	ldr	r0, [r7, #8]
 8002a46:	f7ff f825 	bl	8001a94 <hid_press_key>
 8002a4a:	e000      	b.n	8002a4e <snaptap_task+0x176>
        continue;
 8002a4c:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002a4e:	7f3b      	ldrb	r3, [r7, #28]
 8002a50:	3301      	adds	r3, #1
 8002a52:	773b      	strb	r3, [r7, #28]
 8002a54:	7f3b      	ldrb	r3, [r7, #28]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d08d      	beq.n	8002976 <snaptap_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002a5a:	7f7b      	ldrb	r3, [r7, #29]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	777b      	strb	r3, [r7, #29]
 8002a60:	7f7b      	ldrb	r3, [r7, #29]
 8002a62:	2b0f      	cmp	r3, #15
 8002a64:	d984      	bls.n	8002970 <snaptap_task+0x98>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 8002a66:	f000 fe0f 	bl	8003688 <keyboard_get_time>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	4a2b      	ldr	r2, [pc, #172]	@ (8002b20 <snaptap_task+0x248>)
 8002a72:	6013      	str	r3, [r2, #0]

  // Snaptap logic - chỉ xử lý việc thả phím cũ, không nhấn phím mới
  static struct key* current_pressed_key = NULL;
  uint32_t latest_triggered_time = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61bb      	str	r3, [r7, #24]
  static struct key* new_pressed_key = NULL;
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002a78:	2300      	movs	r3, #0
 8002a7a:	75fb      	strb	r3, [r7, #23]
 8002a7c:	e02e      	b.n	8002adc <snaptap_task+0x204>
      for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002a7e:	2300      	movs	r3, #0
 8002a80:	75bb      	strb	r3, [r7, #22]
 8002a82:	e025      	b.n	8002ad0 <snaptap_task+0x1f8>
          struct key* key = &keyboard_keys[adc_channel][amux_channel];
 8002a84:	7db9      	ldrb	r1, [r7, #22]
 8002a86:	7dfb      	ldrb	r3, [r7, #23]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	0112      	lsls	r2, r2, #4
 8002a8c:	441a      	add	r2, r3
 8002a8e:	0093      	lsls	r3, r2, #2
 8002a90:	461a      	mov	r2, r3
 8002a92:	460b      	mov	r3, r1
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	440b      	add	r3, r1
 8002a98:	019b      	lsls	r3, r3, #6
 8002a9a:	4413      	add	r3, r2
 8002a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8002b18 <snaptap_task+0x240>)
 8002a9e:	4413      	add	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
          if (key->is_enabled && key->actuation.status == STATUS_TRIGGERED) {
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00f      	beq.n	8002aca <snaptap_task+0x1f2>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d10a      	bne.n	8002aca <snaptap_task+0x1f2>
              if (key->actuation.triggered_at >= latest_triggered_time) {
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d805      	bhi.n	8002aca <snaptap_task+0x1f2>
                  latest_triggered_time = key->actuation.triggered_at;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	61bb      	str	r3, [r7, #24]
                  new_pressed_key = key;
 8002ac4:	4a17      	ldr	r2, [pc, #92]	@ (8002b24 <snaptap_task+0x24c>)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6013      	str	r3, [r2, #0]
      for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002aca:	7dbb      	ldrb	r3, [r7, #22]
 8002acc:	3301      	adds	r3, #1
 8002ace:	75bb      	strb	r3, [r7, #22]
 8002ad0:	7dbb      	ldrb	r3, [r7, #22]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0d6      	beq.n	8002a84 <snaptap_task+0x1ac>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002ad6:	7dfb      	ldrb	r3, [r7, #23]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	75fb      	strb	r3, [r7, #23]
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
 8002ade:	2b0f      	cmp	r3, #15
 8002ae0:	d9cd      	bls.n	8002a7e <snaptap_task+0x1a6>
          }
      }
  }
  
  // Xử lý snaptap - chỉ thả phím cũ, không nhấn phím mới
  if (new_pressed_key != current_pressed_key) {
 8002ae2:	4b10      	ldr	r3, [pc, #64]	@ (8002b24 <snaptap_task+0x24c>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	4b10      	ldr	r3, [pc, #64]	@ (8002b28 <snaptap_task+0x250>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d00d      	beq.n	8002b0a <snaptap_task+0x232>
      if (current_pressed_key) {
 8002aee:	4b0e      	ldr	r3, [pc, #56]	@ (8002b28 <snaptap_task+0x250>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <snaptap_task+0x22a>
          hid_release_key(current_pressed_key, _BASE_LAYER);
 8002af6:	4b0c      	ldr	r3, [pc, #48]	@ (8002b28 <snaptap_task+0x250>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff f8e3 	bl	8001cc8 <hid_release_key>
      }
      // KHÔNG gọi hid_press_key() ở đây vì phím đã được nhấn trong update_key_actuation()
      current_pressed_key = new_pressed_key;
 8002b02:	4b08      	ldr	r3, [pc, #32]	@ (8002b24 <snaptap_task+0x24c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a08      	ldr	r2, [pc, #32]	@ (8002b28 <snaptap_task+0x250>)
 8002b08:	6013      	str	r3, [r2, #0]
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	3720      	adds	r7, #32
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000754 	.word	0x20000754
 8002b18:	20000310 	.word	0x20000310
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	20000750 	.word	0x20000750
 8002b24:	20000758 	.word	0x20000758
 8002b28:	2000075c 	.word	0x2000075c

08002b2c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b0b6      	sub	sp, #216	@ 0xd8
 8002b30:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b32:	f001 fbc9 	bl	80042c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b36:	f000 fb8f 	bl	8003258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b3a:	f000 fca3 	bl	8003484 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002b3e:	f000 fbf3 	bl	8003328 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002b42:	f000 fc71 	bl	8003428 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8002b46:	f000 fc41 	bl	80033cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ADC_channel_Config.Rank = 1;
 8002b4a:	4bbd      	ldr	r3, [pc, #756]	@ (8002e40 <main+0x314>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	605a      	str	r2, [r3, #4]
  ADC_channel_Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002b50:	4bbb      	ldr	r3, [pc, #748]	@ (8002e40 <main+0x314>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]

  keyboard_init_keys();
 8002b56:	f7ff fdab 	bl	80026b0 <keyboard_init_keys>
  ssd1306_Init();
 8002b5a:	f000 fdd9 	bl	8003710 <ssd1306_Init>
  tusb_rhport_init_t dev_init = {
 8002b5e:	4bb9      	ldr	r3, [pc, #740]	@ (8002e44 <main+0x318>)
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	863b      	strh	r3, [r7, #48]	@ 0x30
      .role = TUSB_ROLE_DEVICE,
      .speed = TUSB_SPEED_AUTO};
  tusb_init(0, &dev_init); // initialize device stack on roothub port 0
 8002b64:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b68:	4619      	mov	r1, r3
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	f00a f83e 	bl	800cbec <tusb_rhport_init>
  /* USER CODE BEGIN WHILE */
  uint32_t start_at;

  while (1) {
    // MARK: Main loop
    start_at = HAL_GetTick();
 8002b70:	f001 fc10 	bl	8004394 <HAL_GetTick>
 8002b74:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
  tud_task_ext(UINT32_MAX, false);
 8002b78:	2100      	movs	r1, #0
 8002b7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b7e:	f006 fbe7 	bl	8009350 <tud_task_ext>
}
 8002b82:	bf00      	nop
    tud_task();

    struct key *mode_key = NULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    struct key *layer_key = NULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    for (int adc = 0; adc < ADC_CHANNEL_COUNT; ++adc) {
 8002b90:	2300      	movs	r3, #0
 8002b92:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002b96:	e032      	b.n	8002bfe <main+0xd2>
      for (int amux = 0; amux < AMUX_CHANNEL_COUNT; ++amux) {
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b9e:	e025      	b.n	8002bec <main+0xc0>
        struct key *k = &keyboard_keys[adc][amux];
 8002ba0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	0112      	lsls	r2, r2, #4
 8002ba8:	441a      	add	r2, r3
 8002baa:	0093      	lsls	r3, r2, #2
 8002bac:	461a      	mov	r2, r3
 8002bae:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	440b      	add	r3, r1
 8002bb8:	019b      	lsls	r3, r3, #6
 8002bba:	4413      	add	r3, r2
 8002bbc:	4aa2      	ldr	r2, [pc, #648]	@ (8002e48 <main+0x31c>)
 8002bbe:	4413      	add	r3, r2
 8002bc0:	673b      	str	r3, [r7, #112]	@ 0x70
        if (k->layers[_BASE_LAYER].value[0] == HID_MODE_CHANGE) {
 8002bc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bc4:	88db      	ldrh	r3, [r3, #6]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2bf0      	cmp	r3, #240	@ 0xf0
 8002bca:	d102      	bne.n	8002bd2 <main+0xa6>
          mode_key = k;
 8002bcc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        }
        if (k->layers[_BASE_LAYER].value[0] == HID_LAYER_CHANGE) {
 8002bd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bd4:	88db      	ldrh	r3, [r3, #6]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2bf1      	cmp	r3, #241	@ 0xf1
 8002bda:	d102      	bne.n	8002be2 <main+0xb6>
          layer_key = k;
 8002bdc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      for (int amux = 0; amux < AMUX_CHANNEL_COUNT; ++amux) {
 8002be2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002be6:	3301      	adds	r3, #1
 8002be8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bf0:	2b0f      	cmp	r3, #15
 8002bf2:	ddd5      	ble.n	8002ba0 <main+0x74>
    for (int adc = 0; adc < ADC_CHANNEL_COUNT; ++adc) {
 8002bf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002bfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	ddc8      	ble.n	8002b98 <main+0x6c>
        }
      }
    }
    uint8_t mode_key_pressed = (mode_key && mode_key->actuation.status == STATUS_TRIGGERED);
 8002c06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <main+0xf2>
 8002c0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d101      	bne.n	8002c1e <main+0xf2>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <main+0xf4>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    uint8_t layer_key_pressed = (layer_key && layer_key->actuation.status == STATUS_TRIGGERED);
 8002c24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d007      	beq.n	8002c3c <main+0x110>
 8002c2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d101      	bne.n	8002c3c <main+0x110>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <main+0x112>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
    if (mode_key_pressed && !last_mode_key_pressed) {
 8002c42:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d033      	beq.n	8002cb2 <main+0x186>
 8002c4a:	4b80      	ldr	r3, [pc, #512]	@ (8002e4c <main+0x320>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d12f      	bne.n	8002cb2 <main+0x186>
      g_keyboard_mode = (g_keyboard_mode == MODE_COMBO_KEY) ? MODE_SNAP_TAP : MODE_COMBO_KEY;
 8002c52:	4b7f      	ldr	r3, [pc, #508]	@ (8002e50 <main+0x324>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	bf0c      	ite	eq
 8002c5a:	2301      	moveq	r3, #1
 8002c5c:	2300      	movne	r3, #0
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	461a      	mov	r2, r3
 8002c62:	4b7b      	ldr	r3, [pc, #492]	@ (8002e50 <main+0x324>)
 8002c64:	701a      	strb	r2, [r3, #0]
      if (g_keyboard_mode == MODE_COMBO_KEY) {
 8002c66:	4b7a      	ldr	r3, [pc, #488]	@ (8002e50 <main+0x324>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10f      	bne.n	8002c8e <main+0x162>
 8002c6e:	4b79      	ldr	r3, [pc, #484]	@ (8002e54 <main+0x328>)
 8002c70:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c72:	2300      	movs	r3, #0
 8002c74:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8002c78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c7a:	667b      	str	r3, [r7, #100]	@ 0x64
  return tud_cdc_n_write(itf, str, strlen(str));
 8002c7c:	2211      	movs	r2, #17
 8002c7e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002c82:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002c84:	4618      	mov	r0, r3
 8002c86:	f004 fa55 	bl	8007134 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 8002c8a:	bf00      	nop
 8002c8c:	e00e      	b.n	8002cac <main+0x180>
 8002c8e:	4b72      	ldr	r3, [pc, #456]	@ (8002e58 <main+0x32c>)
 8002c90:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c92:	2300      	movs	r3, #0
 8002c94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002c98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c9a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return tud_cdc_n_write(itf, str, strlen(str));
 8002c9c:	2210      	movs	r2, #16
 8002c9e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002ca2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f004 fa45 	bl	8007134 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 8002caa:	bf00      	nop
  return tud_cdc_n_write_flush(0);
 8002cac:	2000      	movs	r0, #0
 8002cae:	f004 fa75 	bl	800719c <tud_cdc_n_write_flush>
      } else {
        tud_cdc_write_str("Mode: SNAP_TAP\r\n");
      }
      tud_cdc_write_flush();
    }
    if (layer_key_pressed && !last_layer_key_pressed) {
 8002cb2:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d046      	beq.n	8002d48 <main+0x21c>
 8002cba:	4b68      	ldr	r3, [pc, #416]	@ (8002e5c <main+0x330>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d142      	bne.n	8002d48 <main+0x21c>
      // Toggle tuần tự giữa BASE, ALT, ALT2
      if (current_layer == _BASE_LAYER) {
 8002cc2:	4b67      	ldr	r3, [pc, #412]	@ (8002e60 <main+0x334>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d112      	bne.n	8002cf0 <main+0x1c4>
        current_layer = _ALT_LAYER;
 8002cca:	4b65      	ldr	r3, [pc, #404]	@ (8002e60 <main+0x334>)
 8002ccc:	2202      	movs	r2, #2
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	4b64      	ldr	r3, [pc, #400]	@ (8002e64 <main+0x338>)
 8002cd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8002cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return tud_cdc_n_write(itf, str, strlen(str));
 8002cde:	220c      	movs	r2, #12
 8002ce0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002ce4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f004 fa24 	bl	8007134 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 8002cec:	bf00      	nop
 8002cee:	e028      	b.n	8002d42 <main+0x216>
        tud_cdc_write_str("Layer: ALT\r\n");
      } else if (current_layer == _ALT_LAYER) {
 8002cf0:	4b5b      	ldr	r3, [pc, #364]	@ (8002e60 <main+0x334>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d112      	bne.n	8002d1e <main+0x1f2>
        current_layer = _ALT_LAYER_2;
 8002cf8:	4b59      	ldr	r3, [pc, #356]	@ (8002e60 <main+0x334>)
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	4b5a      	ldr	r3, [pc, #360]	@ (8002e68 <main+0x33c>)
 8002d00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002d08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d0a:	643b      	str	r3, [r7, #64]	@ 0x40
  return tud_cdc_n_write(itf, str, strlen(str));
 8002d0c:	220d      	movs	r2, #13
 8002d0e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002d12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d14:	4618      	mov	r0, r3
 8002d16:	f004 fa0d 	bl	8007134 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 8002d1a:	bf00      	nop
 8002d1c:	e011      	b.n	8002d42 <main+0x216>
        tud_cdc_write_str("Layer: ALT2\r\n");
      } else {
        current_layer = _BASE_LAYER;
 8002d1e:	4b50      	ldr	r3, [pc, #320]	@ (8002e60 <main+0x334>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	4b51      	ldr	r3, [pc, #324]	@ (8002e6c <main+0x340>)
 8002d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8002d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d30:	637b      	str	r3, [r7, #52]	@ 0x34
  return tud_cdc_n_write(itf, str, strlen(str));
 8002d32:	220d      	movs	r2, #13
 8002d34:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002d38:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f004 f9fa 	bl	8007134 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 8002d40:	bf00      	nop
  return tud_cdc_n_write_flush(0);
 8002d42:	2000      	movs	r0, #0
 8002d44:	f004 fa2a 	bl	800719c <tud_cdc_n_write_flush>
        tud_cdc_write_str("Layer: BASE\r\n");
      }
      tud_cdc_write_flush();
    }
    last_mode_key_pressed = mode_key_pressed;
 8002d48:	4a40      	ldr	r2, [pc, #256]	@ (8002e4c <main+0x320>)
 8002d4a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002d4e:	7013      	strb	r3, [r2, #0]
    last_layer_key_pressed = layer_key_pressed;
 8002d50:	4a42      	ldr	r2, [pc, #264]	@ (8002e5c <main+0x330>)
 8002d52:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8002d56:	7013      	strb	r3, [r2, #0]

    // Call the appropriate task based on mode
    if (g_keyboard_mode == MODE_COMBO_KEY) {
 8002d58:	4b3d      	ldr	r3, [pc, #244]	@ (8002e50 <main+0x324>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <main+0x23a>
      keyboard_task();
 8002d60:	f7ff fce0 	bl	8002724 <keyboard_task>
 8002d64:	e001      	b.n	8002d6a <main+0x23e>
    } else {
      snaptap_task();
 8002d66:	f7ff fdb7 	bl	80028d8 <snaptap_task>
    }
    //    snaptap_task();
    //    keyboard_task();

    hid_task();
 8002d6a:	f7fe fe43 	bl	80019f4 <hid_task>
    cdc_task();
 8002d6e:	f7fd fc67 	bl	8000640 <cdc_task>

    ssd1306_Fill(White);
 8002d72:	2001      	movs	r0, #1
 8002d74:	f000 fd36 	bl	80037e4 <ssd1306_Fill>
    ssd1306_FlipScreen(1, 1);
 8002d78:	2101      	movs	r1, #1
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f000 ffc2 	bl	8003d04 <ssd1306_FlipScreen>

    ssd1306_DrawRectangle(0, 0, SSD1306_WIDTH - 1, SSD1306_HEIGHT - 1, Black);
 8002d80:	2300      	movs	r3, #0
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	233f      	movs	r3, #63	@ 0x3f
 8002d86:	227f      	movs	r2, #127	@ 0x7f
 8002d88:	2100      	movs	r1, #0
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f000 ff52 	bl	8003c34 <ssd1306_DrawRectangle>
    ssd1306_Line(MOD_WIDTH, DIVIDER, SSD1306_WIDTH - 1, DIVIDER, Black);
 8002d90:	2300      	movs	r3, #0
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	2320      	movs	r3, #32
 8002d96:	227f      	movs	r2, #127	@ 0x7f
 8002d98:	2120      	movs	r1, #32
 8002d9a:	2026      	movs	r0, #38	@ 0x26
 8002d9c:	f000 fede 	bl	8003b5c <ssd1306_Line>
    ssd1306_Line(MOD_WIDTH, 0, MOD_WIDTH, SSD1306_HEIGHT - 1, Black);
 8002da0:	2300      	movs	r3, #0
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	233f      	movs	r3, #63	@ 0x3f
 8002da6:	2226      	movs	r2, #38	@ 0x26
 8002da8:	2100      	movs	r1, #0
 8002daa:	2026      	movs	r0, #38	@ 0x26
 8002dac:	f000 fed6 	bl	8003b5c <ssd1306_Line>
    for (int i = 1; i < 3; i++) {
 8002db0:	2301      	movs	r3, #1
 8002db2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002db6:	e016      	b.n	8002de6 <main+0x2ba>
      int x = MOD_WIDTH + i * KEY_WIDTH;
 8002db8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	3326      	adds	r3, #38	@ 0x26
 8002dc6:	677b      	str	r3, [r7, #116]	@ 0x74
      ssd1306_Line(x, 0, x, SSD1306_HEIGHT - 1, Black);
 8002dc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dca:	b2d8      	uxtb	r0, r3
 8002dcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	233f      	movs	r3, #63	@ 0x3f
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	f000 fec0 	bl	8003b5c <ssd1306_Line>
    for (int i = 1; i < 3; i++) {
 8002ddc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002de0:	3301      	adds	r3, #1
 8002de2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002de6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	dde4      	ble.n	8002db8 <main+0x28c>
    }

    int mod_y = 2;
 8002dee:	2302      	movs	r3, #2
 8002df0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    const int mod_line_height = 10;
 8002df4:	230a      	movs	r3, #10
 8002df6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

    int label_row_bot = SSD1306_HEIGHT - DIVIDER + 2;
 8002dfa:	2322      	movs	r3, #34	@ 0x22
 8002dfc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    int percent_row_bot = SSD1306_HEIGHT - 8 - 2;
 8002e00:	2336      	movs	r3, #54	@ 0x36
 8002e02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    int label_row_top = 2;
 8002e06:	2302      	movs	r3, #2
 8002e08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    int percent_row_top = label_row_bot - 11;
 8002e0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e10:	3b0b      	subs	r3, #11
 8002e12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

    char keycodes[6][4] = {0};
 8002e16:	f107 0318 	add.w	r3, r7, #24
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]
 8002e20:	609a      	str	r2, [r3, #8]
 8002e22:	60da      	str	r2, [r3, #12]
 8002e24:	611a      	str	r2, [r3, #16]
 8002e26:	615a      	str	r2, [r3, #20]
    uint8_t key_percents[6] = {0};
 8002e28:	f107 0310 	add.w	r3, r7, #16
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	809a      	strh	r2, [r3, #4]
    int tracker = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e3e:	e12c      	b.n	800309a <main+0x56e>
 8002e40:	20000ce0 	.word	0x20000ce0
 8002e44:	0800f07c 	.word	0x0800f07c
 8002e48:	20000310 	.word	0x20000310
 8002e4c:	20000cf1 	.word	0x20000cf1
 8002e50:	20000cf0 	.word	0x20000cf0
 8002e54:	0800efdc 	.word	0x0800efdc
 8002e58:	0800eff0 	.word	0x0800eff0
 8002e5c:	20000cf2 	.word	0x20000cf2
 8002e60:	20000cf4 	.word	0x20000cf4
 8002e64:	0800f004 	.word	0x0800f004
 8002e68:	0800f014 	.word	0x0800f014
 8002e6c:	0800f024 	.word	0x0800f024
      struct key *k = &keyboard_keys[0][amux];
 8002e70:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002e74:	4613      	mov	r3, r2
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4ab7      	ldr	r2, [pc, #732]	@ (800315c <main+0x630>)
 8002e7e:	4413      	add	r3, r2
 8002e80:	67fb      	str	r3, [r7, #124]	@ 0x7c

      if (k->state.filtered_distance_8bits >= 15 && k->layers[_BASE_LAYER].type == KEY_TYPE_MODIFIER) {
 8002e82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e84:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002e88:	2b0e      	cmp	r3, #14
 8002e8a:	d968      	bls.n	8002f5e <main+0x432>
 8002e8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e8e:	795b      	ldrb	r3, [r3, #5]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d164      	bne.n	8002f5e <main+0x432>
        uint16_t bitmask = *(uint16_t *)k->layers[_BASE_LAYER].value;
 8002e94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e96:	799a      	ldrb	r2, [r3, #6]
 8002e98:	79db      	ldrb	r3, [r3, #7]
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        const char *label = NULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

        if (bitmask == 0b00000001)
 8002ea8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d103      	bne.n	8002eb8 <main+0x38c>
          label = "LCtrl";
 8002eb0:	4bab      	ldr	r3, [pc, #684]	@ (8003160 <main+0x634>)
 8002eb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002eb6:	e036      	b.n	8002f26 <main+0x3fa>
        else if (bitmask == 0b00000010)
 8002eb8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d103      	bne.n	8002ec8 <main+0x39c>
          label = "LShift";
 8002ec0:	4ba8      	ldr	r3, [pc, #672]	@ (8003164 <main+0x638>)
 8002ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ec6:	e02e      	b.n	8002f26 <main+0x3fa>
        else if (bitmask == 0b00000100)
 8002ec8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d103      	bne.n	8002ed8 <main+0x3ac>
          label = "LAlt";
 8002ed0:	4ba5      	ldr	r3, [pc, #660]	@ (8003168 <main+0x63c>)
 8002ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ed6:	e026      	b.n	8002f26 <main+0x3fa>
        else if (bitmask == 0b00001000)
 8002ed8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d103      	bne.n	8002ee8 <main+0x3bc>
          label = "LGUI";
 8002ee0:	4ba2      	ldr	r3, [pc, #648]	@ (800316c <main+0x640>)
 8002ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ee6:	e01e      	b.n	8002f26 <main+0x3fa>
        else if (bitmask == 0b00010000)
 8002ee8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d103      	bne.n	8002ef8 <main+0x3cc>
          label = "RCtrl";
 8002ef0:	4b9f      	ldr	r3, [pc, #636]	@ (8003170 <main+0x644>)
 8002ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ef6:	e016      	b.n	8002f26 <main+0x3fa>
        else if (bitmask == 0b00100000)
 8002ef8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d103      	bne.n	8002f08 <main+0x3dc>
          label = "RShift";
 8002f00:	4b9c      	ldr	r3, [pc, #624]	@ (8003174 <main+0x648>)
 8002f02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f06:	e00e      	b.n	8002f26 <main+0x3fa>
        else if (bitmask == 0b01000000)
 8002f08:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002f0c:	2b40      	cmp	r3, #64	@ 0x40
 8002f0e:	d103      	bne.n	8002f18 <main+0x3ec>
          label = "RAlt";
 8002f10:	4b99      	ldr	r3, [pc, #612]	@ (8003178 <main+0x64c>)
 8002f12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f16:	e006      	b.n	8002f26 <main+0x3fa>
        else if (bitmask == 0b10000000)
 8002f18:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002f1c:	2b80      	cmp	r3, #128	@ 0x80
 8002f1e:	d102      	bne.n	8002f26 <main+0x3fa>
          label = "RGUI";
 8002f20:	4b96      	ldr	r3, [pc, #600]	@ (800317c <main+0x650>)
 8002f22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

        if (label) {
 8002f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80af 	beq.w	800308e <main+0x562>
          ssd1306_SetCursor(2, mod_y);
 8002f30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	4619      	mov	r1, r3
 8002f38:	2002      	movs	r0, #2
 8002f3a:	f000 fdf7 	bl	8003b2c <ssd1306_SetCursor>
          ssd1306_WriteString(label, Font_6x8, Black);
 8002f3e:	4b90      	ldr	r3, [pc, #576]	@ (8003180 <main+0x654>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	9200      	str	r2, [sp, #0]
 8002f44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f46:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8002f4a:	f000 fdc9 	bl	8003ae0 <ssd1306_WriteString>
          mod_y += mod_line_height;
 8002f4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002f52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f56:	4413      	add	r3, r2
 8002f58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
      if (k->state.filtered_distance_8bits >= 15 && k->layers[_BASE_LAYER].type == KEY_TYPE_MODIFIER) {
 8002f5c:	e097      	b.n	800308e <main+0x562>
        }
      }

      else if (k->state.filtered_distance_8bits >= 15 && tracker < 6 && k->layers[_BASE_LAYER].type == KEY_TYPE_NORMAL) {
 8002f5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f60:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002f64:	2b0e      	cmp	r3, #14
 8002f66:	f240 8093 	bls.w	8003090 <main+0x564>
 8002f6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f6e:	2b05      	cmp	r3, #5
 8002f70:	f300 808e 	bgt.w	8003090 <main+0x564>
 8002f74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f76:	795b      	ldrb	r3, [r3, #5]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	f040 8089 	bne.w	8003090 <main+0x564>
        uint16_t keycode = k->layers[current_layer].value[0];
 8002f7e:	4b81      	ldr	r3, [pc, #516]	@ (8003184 <main+0x658>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4413      	add	r3, r2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	799a      	ldrb	r2, [r3, #6]
 8002f8e:	79db      	ldrb	r3, [r3, #7]
 8002f90:	021b      	lsls	r3, r3, #8
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
        if (keycode >= 0x04 && keycode <= 0x1D) {
 8002f98:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d928      	bls.n	8002ff2 <main+0x4c6>
 8002fa0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002fa4:	2b1d      	cmp	r3, #29
 8002fa6:	d824      	bhi.n	8002ff2 <main+0x4c6>
          keycodes[tracker][0] = '0';
 8002fa8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	33d0      	adds	r3, #208	@ 0xd0
 8002fb0:	443b      	add	r3, r7
 8002fb2:	2230      	movs	r2, #48	@ 0x30
 8002fb4:	f803 2cb8 	strb.w	r2, [r3, #-184]
          keycodes[tracker][1] = 'x';
 8002fb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	33d0      	adds	r3, #208	@ 0xd0
 8002fc0:	443b      	add	r3, r7
 8002fc2:	2278      	movs	r2, #120	@ 0x78
 8002fc4:	f803 2cb7 	strb.w	r2, [r3, #-183]
          keycodes[tracker][2] = 'A' + (keycode - 0x04);
 8002fc8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	333d      	adds	r3, #61	@ 0x3d
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	33d0      	adds	r3, #208	@ 0xd0
 8002fda:	443b      	add	r3, r7
 8002fdc:	f803 2cb6 	strb.w	r2, [r3, #-182]
          keycodes[tracker][3] = '\0';
 8002fe0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	33d0      	adds	r3, #208	@ 0xd0
 8002fe8:	443b      	add	r3, r7
 8002fea:	2200      	movs	r2, #0
 8002fec:	f803 2cb5 	strb.w	r2, [r3, #-181]
 8002ff0:	e031      	b.n	8003056 <main+0x52a>
        } else if (keycode >= 0x1E && keycode <= 0x27) {
 8002ff2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002ff6:	2b1d      	cmp	r3, #29
 8002ff8:	d92d      	bls.n	8003056 <main+0x52a>
 8002ffa:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002ffe:	2b27      	cmp	r3, #39	@ 0x27
 8003000:	d829      	bhi.n	8003056 <main+0x52a>
          keycodes[tracker][0] = '0';
 8003002:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	33d0      	adds	r3, #208	@ 0xd0
 800300a:	443b      	add	r3, r7
 800300c:	2230      	movs	r2, #48	@ 0x30
 800300e:	f803 2cb8 	strb.w	r2, [r3, #-184]
          keycodes[tracker][1] = 'x';
 8003012:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	33d0      	adds	r3, #208	@ 0xd0
 800301a:	443b      	add	r3, r7
 800301c:	2278      	movs	r2, #120	@ 0x78
 800301e:	f803 2cb7 	strb.w	r2, [r3, #-183]
          keycodes[tracker][2] = (keycode == 0x27) ? '0' : ('1' + (keycode - 0x1E));
 8003022:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8003026:	2b27      	cmp	r3, #39	@ 0x27
 8003028:	d005      	beq.n	8003036 <main+0x50a>
 800302a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800302e:	b2db      	uxtb	r3, r3
 8003030:	3313      	adds	r3, #19
 8003032:	b2da      	uxtb	r2, r3
 8003034:	e000      	b.n	8003038 <main+0x50c>
 8003036:	2230      	movs	r2, #48	@ 0x30
 8003038:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	33d0      	adds	r3, #208	@ 0xd0
 8003040:	443b      	add	r3, r7
 8003042:	f803 2cb6 	strb.w	r2, [r3, #-182]
          keycodes[tracker][3] = '\0';
 8003046:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	33d0      	adds	r3, #208	@ 0xd0
 800304e:	443b      	add	r3, r7
 8003050:	2200      	movs	r2, #0
 8003052:	f803 2cb5 	strb.w	r2, [r3, #-181]
        }

        key_percents[tracker] = (k->state.filtered_distance_8bits * 100) / 254;
 8003056:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003058:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800305c:	461a      	mov	r2, r3
 800305e:	2364      	movs	r3, #100	@ 0x64
 8003060:	fb02 f303 	mul.w	r3, r2, r3
 8003064:	4a48      	ldr	r2, [pc, #288]	@ (8003188 <main+0x65c>)
 8003066:	fb82 1203 	smull	r1, r2, r2, r3
 800306a:	441a      	add	r2, r3
 800306c:	11d2      	asrs	r2, r2, #7
 800306e:	17db      	asrs	r3, r3, #31
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	b2d9      	uxtb	r1, r3
 8003074:	f107 0210 	add.w	r2, r7, #16
 8003078:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800307c:	4413      	add	r3, r2
 800307e:	460a      	mov	r2, r1
 8003080:	701a      	strb	r2, [r3, #0]
        tracker++;
 8003082:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003086:	3301      	adds	r3, #1
 8003088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800308c:	e000      	b.n	8003090 <main+0x564>
      if (k->state.filtered_distance_8bits >= 15 && k->layers[_BASE_LAYER].type == KEY_TYPE_MODIFIER) {
 800308e:	bf00      	nop
    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 8003090:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003094:	3301      	adds	r3, #1
 8003096:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800309a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800309e:	2b0f      	cmp	r3, #15
 80030a0:	f77f aee6 	ble.w	8002e70 <main+0x344>
      }
    }

    for (int i = 1; i <= 3; i++) {
 80030a4:	2301      	movs	r3, #1
 80030a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030aa:	e04f      	b.n	800314c <main+0x620>
      if (keycodes[i - 1][0] != '\0') {
 80030ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030b0:	3b01      	subs	r3, #1
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	33d0      	adds	r3, #208	@ 0xd0
 80030b6:	443b      	add	r3, r7
 80030b8:	f813 3cb8 	ldrb.w	r3, [r3, #-184]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d040      	beq.n	8003142 <main+0x616>
        int x = MOD_WIDTH + (i - 1) * KEY_WIDTH + 4;
 80030c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030c4:	1e5a      	subs	r2, r3, #1
 80030c6:	4613      	mov	r3, r2
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	332a      	adds	r3, #42	@ 0x2a
 80030d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        ssd1306_SetCursor(x, label_row_top);
 80030d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fd22 	bl	8003b2c <ssd1306_SetCursor>
        ssd1306_WriteString((char *)keycodes[i - 1], Font_6x8, Black);
 80030e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030ec:	3b01      	subs	r3, #1
 80030ee:	f107 0218 	add.w	r2, r7, #24
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	18d0      	adds	r0, r2, r3
 80030f6:	4b22      	ldr	r3, [pc, #136]	@ (8003180 <main+0x654>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	9200      	str	r2, [sp, #0]
 80030fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030fe:	f000 fcef 	bl	8003ae0 <ssd1306_WriteString>

        char buf[6];
        sprintf(buf, "%d%%", key_percents[i - 1]);
 8003102:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003106:	3b01      	subs	r3, #1
 8003108:	33d0      	adds	r3, #208	@ 0xd0
 800310a:	443b      	add	r3, r7
 800310c:	f813 3cc0 	ldrb.w	r3, [r3, #-192]
 8003110:	461a      	mov	r2, r3
 8003112:	f107 0308 	add.w	r3, r7, #8
 8003116:	491d      	ldr	r1, [pc, #116]	@ (800318c <main+0x660>)
 8003118:	4618      	mov	r0, r3
 800311a:	f009 ff49 	bl	800cfb0 <siprintf>
        ssd1306_SetCursor(x, percent_row_top);
 800311e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fcfd 	bl	8003b2c <ssd1306_SetCursor>
        ssd1306_WriteString(buf, Font_6x8, Black);
 8003132:	4b13      	ldr	r3, [pc, #76]	@ (8003180 <main+0x654>)
 8003134:	f107 0008 	add.w	r0, r7, #8
 8003138:	2200      	movs	r2, #0
 800313a:	9200      	str	r2, [sp, #0]
 800313c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800313e:	f000 fccf 	bl	8003ae0 <ssd1306_WriteString>
    for (int i = 1; i <= 3; i++) {
 8003142:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003146:	3301      	adds	r3, #1
 8003148:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800314c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003150:	2b03      	cmp	r3, #3
 8003152:	ddab      	ble.n	80030ac <main+0x580>
      }
    }

    for (int i = 4; i <= 6; i++) {
 8003154:	2304      	movs	r3, #4
 8003156:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800315a:	e067      	b.n	800322c <main+0x700>
 800315c:	20000310 	.word	0x20000310
 8003160:	0800f034 	.word	0x0800f034
 8003164:	0800f03c 	.word	0x0800f03c
 8003168:	0800f044 	.word	0x0800f044
 800316c:	0800f04c 	.word	0x0800f04c
 8003170:	0800f054 	.word	0x0800f054
 8003174:	0800f05c 	.word	0x0800f05c
 8003178:	0800f064 	.word	0x0800f064
 800317c:	0800f06c 	.word	0x0800f06c
 8003180:	0800f8dc 	.word	0x0800f8dc
 8003184:	20000cf4 	.word	0x20000cf4
 8003188:	81020409 	.word	0x81020409
 800318c:	0800f074 	.word	0x0800f074
      if (keycodes[i - 1][0] != '\0') {
 8003190:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003194:	3b01      	subs	r3, #1
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	33d0      	adds	r3, #208	@ 0xd0
 800319a:	443b      	add	r3, r7
 800319c:	f813 3cb8 	ldrb.w	r3, [r3, #-184]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d03e      	beq.n	8003222 <main+0x6f6>
        int x = MOD_WIDTH + (i - 4) * KEY_WIDTH + 4;
 80031a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80031a8:	1f1a      	subs	r2, r3, #4
 80031aa:	4613      	mov	r3, r2
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	332a      	adds	r3, #42	@ 0x2a
 80031b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        ssd1306_SetCursor(x, label_row_bot);
 80031b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	4611      	mov	r1, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fcb0 	bl	8003b2c <ssd1306_SetCursor>
        ssd1306_WriteString((char *)keycodes[i - 1], Font_6x8, Black);
 80031cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80031d0:	3b01      	subs	r3, #1
 80031d2:	f107 0218 	add.w	r2, r7, #24
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	18d0      	adds	r0, r2, r3
 80031da:	4b1c      	ldr	r3, [pc, #112]	@ (800324c <main+0x720>)
 80031dc:	2200      	movs	r2, #0
 80031de:	9200      	str	r2, [sp, #0]
 80031e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031e2:	f000 fc7d 	bl	8003ae0 <ssd1306_WriteString>

        char buf[6];
        sprintf(buf, "%d%%", key_percents[i - 1]);
 80031e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80031ea:	3b01      	subs	r3, #1
 80031ec:	33d0      	adds	r3, #208	@ 0xd0
 80031ee:	443b      	add	r3, r7
 80031f0:	f813 3cc0 	ldrb.w	r3, [r3, #-192]
 80031f4:	461a      	mov	r2, r3
 80031f6:	463b      	mov	r3, r7
 80031f8:	4915      	ldr	r1, [pc, #84]	@ (8003250 <main+0x724>)
 80031fa:	4618      	mov	r0, r3
 80031fc:	f009 fed8 	bl	800cfb0 <siprintf>
        ssd1306_SetCursor(x, percent_row_bot);
 8003200:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003204:	b2db      	uxtb	r3, r3
 8003206:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	4611      	mov	r1, r2
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fc8c 	bl	8003b2c <ssd1306_SetCursor>
        ssd1306_WriteString(buf, Font_6x8, Black);
 8003214:	4b0d      	ldr	r3, [pc, #52]	@ (800324c <main+0x720>)
 8003216:	4638      	mov	r0, r7
 8003218:	2200      	movs	r2, #0
 800321a:	9200      	str	r2, [sp, #0]
 800321c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800321e:	f000 fc5f 	bl	8003ae0 <ssd1306_WriteString>
    for (int i = 4; i <= 6; i++) {
 8003222:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003226:	3301      	adds	r3, #1
 8003228:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800322c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003230:	2b06      	cmp	r3, #6
 8003232:	ddad      	ble.n	8003190 <main+0x664>
      }
    }

    ssd1306_UpdateScreen();
 8003234:	f000 faee 	bl	8003814 <ssd1306_UpdateScreen>
    if (cycle_count_on) {
 8003238:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <main+0x728>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	f43f ac97 	beq.w	8002b70 <main+0x44>
      cdc_performance_measure(start_at);
 8003242:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8003246:	f7fd f9c9 	bl	80005dc <cdc_performance_measure>
  while (1) {
 800324a:	e491      	b.n	8002b70 <main+0x44>
 800324c:	0800f8dc 	.word	0x0800f8dc
 8003250:	0800f074 	.word	0x0800f074
 8003254:	20000cf8 	.word	0x20000cf8

08003258 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003258:	b580      	push	{r7, lr}
 800325a:	b094      	sub	sp, #80	@ 0x50
 800325c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800325e:	f107 0320 	add.w	r3, r7, #32
 8003262:	2230      	movs	r2, #48	@ 0x30
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f00a f80a 	bl	800d280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800326c:	f107 030c 	add.w	r3, r7, #12
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 800327c:	2300      	movs	r3, #0
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	4b27      	ldr	r3, [pc, #156]	@ (8003320 <SystemClock_Config+0xc8>)
 8003282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003284:	4a26      	ldr	r2, [pc, #152]	@ (8003320 <SystemClock_Config+0xc8>)
 8003286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800328a:	6413      	str	r3, [r2, #64]	@ 0x40
 800328c:	4b24      	ldr	r3, [pc, #144]	@ (8003320 <SystemClock_Config+0xc8>)
 800328e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003298:	2300      	movs	r3, #0
 800329a:	607b      	str	r3, [r7, #4]
 800329c:	4b21      	ldr	r3, [pc, #132]	@ (8003324 <SystemClock_Config+0xcc>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a20      	ldr	r2, [pc, #128]	@ (8003324 <SystemClock_Config+0xcc>)
 80032a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003324 <SystemClock_Config+0xcc>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80032b0:	607b      	str	r3, [r7, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032b4:	2301      	movs	r3, #1
 80032b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80032bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032be:	2302      	movs	r3, #2
 80032c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80032c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 80032c8:	230d      	movs	r3, #13
 80032ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80032cc:	23a8      	movs	r3, #168	@ 0xa8
 80032ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80032d0:	2304      	movs	r3, #4
 80032d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80032d4:	2307      	movs	r3, #7
 80032d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80032d8:	f107 0320 	add.w	r3, r7, #32
 80032dc:	4618      	mov	r0, r3
 80032de:	f002 fef5 	bl	80060cc <HAL_RCC_OscConfig>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <SystemClock_Config+0x94>
    Error_Handler();
 80032e8:	f000 f9d5 	bl	8003696 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032ec:	230f      	movs	r3, #15
 80032ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032f0:	2302      	movs	r3, #2
 80032f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003302:	f107 030c 	add.w	r3, r7, #12
 8003306:	2102      	movs	r1, #2
 8003308:	4618      	mov	r0, r3
 800330a:	f003 f957 	bl	80065bc <HAL_RCC_ClockConfig>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <SystemClock_Config+0xc0>
    Error_Handler();
 8003314:	f000 f9bf 	bl	8003696 <Error_Handler>
  }
}
 8003318:	bf00      	nop
 800331a:	3750      	adds	r7, #80	@ 0x50
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40023800 	.word	0x40023800
 8003324:	40007000 	.word	0x40007000

08003328 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800332e:	463b      	mov	r3, r7
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 800333a:	4b21      	ldr	r3, [pc, #132]	@ (80033c0 <MX_ADC1_Init+0x98>)
 800333c:	4a21      	ldr	r2, [pc, #132]	@ (80033c4 <MX_ADC1_Init+0x9c>)
 800333e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003340:	4b1f      	ldr	r3, [pc, #124]	@ (80033c0 <MX_ADC1_Init+0x98>)
 8003342:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003346:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003348:	4b1d      	ldr	r3, [pc, #116]	@ (80033c0 <MX_ADC1_Init+0x98>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800334e:	4b1c      	ldr	r3, [pc, #112]	@ (80033c0 <MX_ADC1_Init+0x98>)
 8003350:	2200      	movs	r2, #0
 8003352:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003354:	4b1a      	ldr	r3, [pc, #104]	@ (80033c0 <MX_ADC1_Init+0x98>)
 8003356:	2200      	movs	r2, #0
 8003358:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800335a:	4b19      	ldr	r3, [pc, #100]	@ (80033c0 <MX_ADC1_Init+0x98>)
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003362:	4b17      	ldr	r3, [pc, #92]	@ (80033c0 <MX_ADC1_Init+0x98>)
 8003364:	2200      	movs	r2, #0
 8003366:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003368:	4b15      	ldr	r3, [pc, #84]	@ (80033c0 <MX_ADC1_Init+0x98>)
 800336a:	4a17      	ldr	r2, [pc, #92]	@ (80033c8 <MX_ADC1_Init+0xa0>)
 800336c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800336e:	4b14      	ldr	r3, [pc, #80]	@ (80033c0 <MX_ADC1_Init+0x98>)
 8003370:	2200      	movs	r2, #0
 8003372:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003374:	4b12      	ldr	r3, [pc, #72]	@ (80033c0 <MX_ADC1_Init+0x98>)
 8003376:	2201      	movs	r2, #1
 8003378:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800337a:	4b11      	ldr	r3, [pc, #68]	@ (80033c0 <MX_ADC1_Init+0x98>)
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003382:	4b0f      	ldr	r3, [pc, #60]	@ (80033c0 <MX_ADC1_Init+0x98>)
 8003384:	2201      	movs	r2, #1
 8003386:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8003388:	480d      	ldr	r0, [pc, #52]	@ (80033c0 <MX_ADC1_Init+0x98>)
 800338a:	f001 f833 	bl	80043f4 <HAL_ADC_Init>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <MX_ADC1_Init+0x70>
    Error_Handler();
 8003394:	f000 f97f 	bl	8003696 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 8003398:	2309      	movs	r3, #9
 800339a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800339c:	2301      	movs	r3, #1
 800339e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80033a4:	463b      	mov	r3, r7
 80033a6:	4619      	mov	r1, r3
 80033a8:	4805      	ldr	r0, [pc, #20]	@ (80033c0 <MX_ADC1_Init+0x98>)
 80033aa:	f001 f9e7 	bl	800477c <HAL_ADC_ConfigChannel>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <MX_ADC1_Init+0x90>
    Error_Handler();
 80033b4:	f000 f96f 	bl	8003696 <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */

  // memcpy(&ADC_channel_Config, &sConfig, sizeof(ADC_ChannelConfTypeDef));

  /* USER CODE END ADC1_Init 2 */
}
 80033b8:	bf00      	nop
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20000760 	.word	0x20000760
 80033c4:	40012000 	.word	0x40012000
 80033c8:	0f000001 	.word	0x0f000001

080033cc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033d0:	4b12      	ldr	r3, [pc, #72]	@ (800341c <MX_I2C1_Init+0x50>)
 80033d2:	4a13      	ldr	r2, [pc, #76]	@ (8003420 <MX_I2C1_Init+0x54>)
 80033d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80033d6:	4b11      	ldr	r3, [pc, #68]	@ (800341c <MX_I2C1_Init+0x50>)
 80033d8:	4a12      	ldr	r2, [pc, #72]	@ (8003424 <MX_I2C1_Init+0x58>)
 80033da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80033dc:	4b0f      	ldr	r3, [pc, #60]	@ (800341c <MX_I2C1_Init+0x50>)
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80033e2:	4b0e      	ldr	r3, [pc, #56]	@ (800341c <MX_I2C1_Init+0x50>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033e8:	4b0c      	ldr	r3, [pc, #48]	@ (800341c <MX_I2C1_Init+0x50>)
 80033ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80033ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033f0:	4b0a      	ldr	r3, [pc, #40]	@ (800341c <MX_I2C1_Init+0x50>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80033f6:	4b09      	ldr	r3, [pc, #36]	@ (800341c <MX_I2C1_Init+0x50>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033fc:	4b07      	ldr	r3, [pc, #28]	@ (800341c <MX_I2C1_Init+0x50>)
 80033fe:	2200      	movs	r2, #0
 8003400:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003402:	4b06      	ldr	r3, [pc, #24]	@ (800341c <MX_I2C1_Init+0x50>)
 8003404:	2200      	movs	r2, #0
 8003406:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003408:	4804      	ldr	r0, [pc, #16]	@ (800341c <MX_I2C1_Init+0x50>)
 800340a:	f002 f8a3 	bl	8005554 <HAL_I2C_Init>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <MX_I2C1_Init+0x4c>
    Error_Handler();
 8003414:	f000 f93f 	bl	8003696 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8003418:	bf00      	nop
 800341a:	bd80      	pop	{r7, pc}
 800341c:	200007a8 	.word	0x200007a8
 8003420:	40005400 	.word	0x40005400
 8003424:	00061a80 	.word	0x00061a80

08003428 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800342c:	4b14      	ldr	r3, [pc, #80]	@ (8003480 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800342e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003432:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003434:	4b12      	ldr	r3, [pc, #72]	@ (8003480 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003436:	2204      	movs	r2, #4
 8003438:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800343a:	4b11      	ldr	r3, [pc, #68]	@ (8003480 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800343c:	2202      	movs	r2, #2
 800343e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003440:	4b0f      	ldr	r3, [pc, #60]	@ (8003480 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003442:	2200      	movs	r2, #0
 8003444:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003446:	4b0e      	ldr	r3, [pc, #56]	@ (8003480 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003448:	2202      	movs	r2, #2
 800344a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800344c:	4b0c      	ldr	r3, [pc, #48]	@ (8003480 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800344e:	2200      	movs	r2, #0
 8003450:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003452:	4b0b      	ldr	r3, [pc, #44]	@ (8003480 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003454:	2200      	movs	r2, #0
 8003456:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003458:	4b09      	ldr	r3, [pc, #36]	@ (8003480 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800345a:	2200      	movs	r2, #0
 800345c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800345e:	4b08      	ldr	r3, [pc, #32]	@ (8003480 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003460:	2200      	movs	r2, #0
 8003462:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003464:	4b06      	ldr	r3, [pc, #24]	@ (8003480 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003466:	2200      	movs	r2, #0
 8003468:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 800346a:	4805      	ldr	r0, [pc, #20]	@ (8003480 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800346c:	f002 fd1f 	bl	8005eae <HAL_PCD_Init>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <MX_USB_OTG_FS_PCD_Init+0x52>
    Error_Handler();
 8003476:	f000 f90e 	bl	8003696 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	200007fc 	.word	0x200007fc

08003484 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800348a:	f107 030c 	add.w	r3, r7, #12
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	605a      	str	r2, [r3, #4]
 8003494:	609a      	str	r2, [r3, #8]
 8003496:	60da      	str	r2, [r3, #12]
 8003498:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	4b20      	ldr	r3, [pc, #128]	@ (8003520 <MX_GPIO_Init+0x9c>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003520 <MX_GPIO_Init+0x9c>)
 80034a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003520 <MX_GPIO_Init+0x9c>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b6:	2300      	movs	r3, #0
 80034b8:	607b      	str	r3, [r7, #4]
 80034ba:	4b19      	ldr	r3, [pc, #100]	@ (8003520 <MX_GPIO_Init+0x9c>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	4a18      	ldr	r2, [pc, #96]	@ (8003520 <MX_GPIO_Init+0x9c>)
 80034c0:	f043 0302 	orr.w	r3, r3, #2
 80034c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034c6:	4b16      	ldr	r3, [pc, #88]	@ (8003520 <MX_GPIO_Init+0x9c>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	607b      	str	r3, [r7, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	603b      	str	r3, [r7, #0]
 80034d6:	4b12      	ldr	r3, [pc, #72]	@ (8003520 <MX_GPIO_Init+0x9c>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	4a11      	ldr	r2, [pc, #68]	@ (8003520 <MX_GPIO_Init+0x9c>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003520 <MX_GPIO_Init+0x9c>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 80034ee:	2200      	movs	r2, #0
 80034f0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80034f4:	480b      	ldr	r0, [pc, #44]	@ (8003524 <MX_GPIO_Init+0xa0>)
 80034f6:	f002 f813 	bl	8005520 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80034fa:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80034fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003500:	2301      	movs	r3, #1
 8003502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003508:	2300      	movs	r3, #0
 800350a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350c:	f107 030c 	add.w	r3, r7, #12
 8003510:	4619      	mov	r1, r3
 8003512:	4804      	ldr	r0, [pc, #16]	@ (8003524 <MX_GPIO_Init+0xa0>)
 8003514:	f001 fe80 	bl	8005218 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003518:	bf00      	nop
 800351a:	3720      	adds	r7, #32
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40023800 	.word	0x40023800
 8003524:	40020400 	.word	0x40020400

08003528 <keyboard_read_config>:

/* USER CODE BEGIN 4 */

// MARK: keyboard_* functions

void keyboard_read_config() {
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  memcpy(&keyboard_user_config, (uint32_t *)CONFIG_ADDRESS, sizeof(keyboard_user_config));
 800352c:	4a05      	ldr	r2, [pc, #20]	@ (8003544 <keyboard_read_config+0x1c>)
 800352e:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <keyboard_read_config+0x20>)
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	f240 2306 	movw	r3, #518	@ 0x206
 8003538:	461a      	mov	r2, r3
 800353a:	f009 ff32 	bl	800d3a2 <memcpy>
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000000 	.word	0x20000000
 8003548:	08040000 	.word	0x08040000

0800354c <keyboard_write_config>:

uint8_t keyboard_write_config(uint8_t *buffer, uint16_t offset, uint16_t size) {
 800354c:	b5b0      	push	{r4, r5, r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	807b      	strh	r3, [r7, #2]
 8003558:	4613      	mov	r3, r2
 800355a:	803b      	strh	r3, [r7, #0]
  if (offset >= sizeof(keyboard_user_config)) {
 800355c:	887b      	ldrh	r3, [r7, #2]
 800355e:	f240 2205 	movw	r2, #517	@ 0x205
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <keyboard_write_config+0x1e>
    return 0;
 8003566:	2300      	movs	r3, #0
 8003568:	e02d      	b.n	80035c6 <keyboard_write_config+0x7a>
  }

  HAL_FLASH_Unlock();
 800356a:	f001 fc9b 	bl	8004ea4 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 800356e:	4b18      	ldr	r3, [pc, #96]	@ (80035d0 <keyboard_write_config+0x84>)
 8003570:	22b3      	movs	r2, #179	@ 0xb3
 8003572:	60da      	str	r2, [r3, #12]
  FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 8003574:	2102      	movs	r1, #2
 8003576:	2006      	movs	r0, #6
 8003578:	f001 fe06 	bl	8005188 <FLASH_Erase_Sector>
  for (uint16_t i = offset; i < size; i++) {
 800357c:	887b      	ldrh	r3, [r7, #2]
 800357e:	81fb      	strh	r3, [r7, #14]
 8003580:	e01a      	b.n	80035b8 <keyboard_write_config+0x6c>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, CONFIG_ADDRESS + i, buffer[i]) != HAL_OK) {
 8003582:	89fb      	ldrh	r3, [r7, #14]
 8003584:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8003588:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 800358c:	4619      	mov	r1, r3
 800358e:	89fb      	ldrh	r3, [r7, #14]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	4413      	add	r3, r2
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2200      	movs	r2, #0
 800359a:	461c      	mov	r4, r3
 800359c:	4615      	mov	r5, r2
 800359e:	4622      	mov	r2, r4
 80035a0:	462b      	mov	r3, r5
 80035a2:	2000      	movs	r0, #0
 80035a4:	f001 fc2a 	bl	8004dfc <HAL_FLASH_Program>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <keyboard_write_config+0x66>
      HAL_FLASH_Lock();
 80035ae:	f001 fc9b 	bl	8004ee8 <HAL_FLASH_Lock>
  for (uint16_t i = offset; i < size; i++) {
 80035b2:	89fb      	ldrh	r3, [r7, #14]
 80035b4:	3301      	adds	r3, #1
 80035b6:	81fb      	strh	r3, [r7, #14]
 80035b8:	89fa      	ldrh	r2, [r7, #14]
 80035ba:	883b      	ldrh	r3, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d3e0      	bcc.n	8003582 <keyboard_write_config+0x36>
    };
  }
  HAL_FLASH_Lock();
 80035c0:	f001 fc92 	bl	8004ee8 <HAL_FLASH_Lock>
  return 1;
 80035c4:	2301      	movs	r3, #1
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bdb0      	pop	{r4, r5, r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40023c00 	.word	0x40023c00

080035d4 <keyboard_select_amux>:

void keyboard_select_amux(uint8_t amux_channel) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	71fb      	strb	r3, [r7, #7]
  // TODO: set GPIOs at the same time using bitmap on register
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 80035de:	2300      	movs	r3, #0
 80035e0:	73fb      	strb	r3, [r7, #15]
 80035e2:	e013      	b.n	800360c <keyboard_select_amux+0x38>
    HAL_GPIO_WritePin(GPIOB, amux_select_pins[i], (amux_channel >> i) & 1);
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	4a0d      	ldr	r2, [pc, #52]	@ (800361c <keyboard_select_amux+0x48>)
 80035e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ec:	b299      	uxth	r1, r3
 80035ee:	79fa      	ldrb	r2, [r7, #7]
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	fa42 f303 	asr.w	r3, r2, r3
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	461a      	mov	r2, r3
 8003600:	4807      	ldr	r0, [pc, #28]	@ (8003620 <keyboard_select_amux+0x4c>)
 8003602:	f001 ff8d 	bl	8005520 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	3301      	adds	r3, #1
 800360a:	73fb      	strb	r3, [r7, #15]
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	2b03      	cmp	r3, #3
 8003610:	d9e8      	bls.n	80035e4 <keyboard_select_amux+0x10>
  }
}
 8003612:	bf00      	nop
 8003614:	bf00      	nop
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	0800f2dc 	.word	0x0800f2dc
 8003620:	40020400 	.word	0x40020400

08003624 <keyboard_select_adc>:

void keyboard_select_adc(uint8_t adc_channel) {
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	71fb      	strb	r3, [r7, #7]
  ADC_channel_Config.Channel = adc_channels[adc_channel];
 800362e:	2209      	movs	r2, #9
 8003630:	4b08      	ldr	r3, [pc, #32]	@ (8003654 <keyboard_select_adc+0x30>)
 8003632:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &ADC_channel_Config);
 8003634:	4907      	ldr	r1, [pc, #28]	@ (8003654 <keyboard_select_adc+0x30>)
 8003636:	4808      	ldr	r0, [pc, #32]	@ (8003658 <keyboard_select_adc+0x34>)
 8003638:	f001 f8a0 	bl	800477c <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 800363c:	4806      	ldr	r0, [pc, #24]	@ (8003658 <keyboard_select_adc+0x34>)
 800363e:	f000 ff1d 	bl	800447c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 8003642:	2101      	movs	r1, #1
 8003644:	4804      	ldr	r0, [pc, #16]	@ (8003658 <keyboard_select_adc+0x34>)
 8003646:	f001 f800 	bl	800464a <HAL_ADC_PollForConversion>
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	20000ce0 	.word	0x20000ce0
 8003658:	20000760 	.word	0x20000760

0800365c <keyboard_read_adc>:

uint16_t keyboard_read_adc() {
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 8003660:	4803      	ldr	r0, [pc, #12]	@ (8003670 <keyboard_read_adc+0x14>)
 8003662:	f001 f87d 	bl	8004760 <HAL_ADC_GetValue>
 8003666:	4603      	mov	r3, r0
 8003668:	b29b      	uxth	r3, r3
}
 800366a:	4618      	mov	r0, r3
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20000760 	.word	0x20000760

08003674 <keyboard_close_adc>:

void keyboard_close_adc() {
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  HAL_ADC_Stop(&hadc1);
 8003678:	4802      	ldr	r0, [pc, #8]	@ (8003684 <keyboard_close_adc+0x10>)
 800367a:	f000 ffb3 	bl	80045e4 <HAL_ADC_Stop>
}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20000760 	.word	0x20000760

08003688 <keyboard_get_time>:

uint32_t keyboard_get_time() {
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800368c:	f000 fe82 	bl	8004394 <HAL_GetTick>
 8003690:	4603      	mov	r3, r0
}
 8003692:	4618      	mov	r0, r3
 8003694:	bd80      	pop	{r7, pc}

08003696 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003696:	b480      	push	{r7}
 8003698:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800369a:	b672      	cpsid	i
}
 800369c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800369e:	bf00      	nop
 80036a0:	e7fd      	b.n	800369e <Error_Handler+0x8>

080036a2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80036a2:	b480      	push	{r7}
 80036a4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80036a6:	bf00      	nop
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af04      	add	r7, sp, #16
 80036b6:	4603      	mov	r3, r0
 80036b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, OLED_TIMEOUT_MS);
 80036ba:	230a      	movs	r3, #10
 80036bc:	9302      	str	r3, [sp, #8]
 80036be:	2301      	movs	r3, #1
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	1dfb      	adds	r3, r7, #7
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	2301      	movs	r3, #1
 80036c8:	2200      	movs	r2, #0
 80036ca:	2178      	movs	r1, #120	@ 0x78
 80036cc:	4803      	ldr	r0, [pc, #12]	@ (80036dc <ssd1306_WriteCommand+0x2c>)
 80036ce:	f002 f885 	bl	80057dc <HAL_I2C_Mem_Write>
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	200007a8 	.word	0x200007a8

080036e0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af04      	add	r7, sp, #16
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, OLED_TIMEOUT_MS);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	220a      	movs	r2, #10
 80036f0:	9202      	str	r2, [sp, #8]
 80036f2:	9301      	str	r3, [sp, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	2301      	movs	r3, #1
 80036fa:	2240      	movs	r2, #64	@ 0x40
 80036fc:	2178      	movs	r1, #120	@ 0x78
 80036fe:	4803      	ldr	r0, [pc, #12]	@ (800370c <ssd1306_WriteData+0x2c>)
 8003700:	f002 f86c 	bl	80057dc <HAL_I2C_Mem_Write>
}
 8003704:	bf00      	nop
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	200007a8 	.word	0x200007a8

08003710 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003714:	f7ff ffc5 	bl	80036a2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003718:	2064      	movs	r0, #100	@ 0x64
 800371a:	f000 fe47 	bl	80043ac <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800371e:	2000      	movs	r0, #0
 8003720:	f000 fad2 	bl	8003cc8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003724:	2020      	movs	r0, #32
 8003726:	f7ff ffc3 	bl	80036b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800372a:	2000      	movs	r0, #0
 800372c:	f7ff ffc0 	bl	80036b0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003730:	20b0      	movs	r0, #176	@ 0xb0
 8003732:	f7ff ffbd 	bl	80036b0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8003736:	20c0      	movs	r0, #192	@ 0xc0
 8003738:	f7ff ffba 	bl	80036b0 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800373c:	2000      	movs	r0, #0
 800373e:	f7ff ffb7 	bl	80036b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003742:	2010      	movs	r0, #16
 8003744:	f7ff ffb4 	bl	80036b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003748:	2040      	movs	r0, #64	@ 0x40
 800374a:	f7ff ffb1 	bl	80036b0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800374e:	20ff      	movs	r0, #255	@ 0xff
 8003750:	f000 faa7 	bl	8003ca2 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8003754:	20a0      	movs	r0, #160	@ 0xa0
 8003756:	f7ff ffab 	bl	80036b0 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
 800375a:	20a7      	movs	r0, #167	@ 0xa7
 800375c:	f7ff ffa8 	bl	80036b0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003760:	20a8      	movs	r0, #168	@ 0xa8
 8003762:	f7ff ffa5 	bl	80036b0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003766:	203f      	movs	r0, #63	@ 0x3f
 8003768:	f7ff ffa2 	bl	80036b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800376c:	20a4      	movs	r0, #164	@ 0xa4
 800376e:	f7ff ff9f 	bl	80036b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003772:	20d3      	movs	r0, #211	@ 0xd3
 8003774:	f7ff ff9c 	bl	80036b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003778:	2000      	movs	r0, #0
 800377a:	f7ff ff99 	bl	80036b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800377e:	20d5      	movs	r0, #213	@ 0xd5
 8003780:	f7ff ff96 	bl	80036b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003784:	20f0      	movs	r0, #240	@ 0xf0
 8003786:	f7ff ff93 	bl	80036b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800378a:	20d9      	movs	r0, #217	@ 0xd9
 800378c:	f7ff ff90 	bl	80036b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003790:	2022      	movs	r0, #34	@ 0x22
 8003792:	f7ff ff8d 	bl	80036b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003796:	20da      	movs	r0, #218	@ 0xda
 8003798:	f7ff ff8a 	bl	80036b0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800379c:	2012      	movs	r0, #18
 800379e:	f7ff ff87 	bl	80036b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80037a2:	20db      	movs	r0, #219	@ 0xdb
 80037a4:	f7ff ff84 	bl	80036b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80037a8:	2020      	movs	r0, #32
 80037aa:	f7ff ff81 	bl	80036b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80037ae:	208d      	movs	r0, #141	@ 0x8d
 80037b0:	f7ff ff7e 	bl	80036b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80037b4:	2014      	movs	r0, #20
 80037b6:	f7ff ff7b 	bl	80036b0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80037ba:	2001      	movs	r0, #1
 80037bc:	f000 fa84 	bl	8003cc8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80037c0:	2000      	movs	r0, #0
 80037c2:	f000 f80f 	bl	80037e4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80037c6:	f000 f825 	bl	8003814 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80037ca:	4b05      	ldr	r3, [pc, #20]	@ (80037e0 <ssd1306_Init+0xd0>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80037d0:	4b03      	ldr	r3, [pc, #12]	@ (80037e0 <ssd1306_Init+0xd0>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80037d6:	4b02      	ldr	r3, [pc, #8]	@ (80037e0 <ssd1306_Init+0xd0>)
 80037d8:	2201      	movs	r2, #1
 80037da:	711a      	strb	r2, [r3, #4]
}
 80037dc:	bf00      	nop
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20000cfc 	.word	0x20000cfc

080037e4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <ssd1306_Fill+0x14>
 80037f4:	2300      	movs	r3, #0
 80037f6:	e000      	b.n	80037fa <ssd1306_Fill+0x16>
 80037f8:	23ff      	movs	r3, #255	@ 0xff
 80037fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037fe:	4619      	mov	r1, r3
 8003800:	4803      	ldr	r0, [pc, #12]	@ (8003810 <ssd1306_Fill+0x2c>)
 8003802:	f009 fd3d 	bl	800d280 <memset>
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20000d04 	.word	0x20000d04

08003814 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
uint8_t SSD1306_Buffer[SSD1306_WIDTH * (SSD1306_HEIGHT / 8)] = {0};
uint8_t SSD1306_LastBuffer[SSD1306_WIDTH * (SSD1306_HEIGHT / 8)] = {0};

void ssd1306_UpdateScreen(void) {
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
    int anyPageChanged = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
    for (uint8_t page = 0; page < (SSD1306_HEIGHT / 8); page++) {
 800381e:	2300      	movs	r3, #0
 8003820:	76fb      	strb	r3, [r7, #27]
 8003822:	e06a      	b.n	80038fa <ssd1306_UpdateScreen+0xe6>
        uint16_t base = page * SSD1306_WIDTH;
 8003824:	7efb      	ldrb	r3, [r7, #27]
 8003826:	b29b      	uxth	r3, r3
 8003828:	01db      	lsls	r3, r3, #7
 800382a:	813b      	strh	r3, [r7, #8]
        int pageChanged = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
        int firstChanged = -1, lastChanged = -1;
 8003830:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800383a:	60fb      	str	r3, [r7, #12]

        // Find the first and last changed column in this page
        for (uint16_t col = 0; col < SSD1306_WIDTH; col++) {
 800383c:	2300      	movs	r3, #0
 800383e:	817b      	strh	r3, [r7, #10]
 8003840:	e018      	b.n	8003874 <ssd1306_UpdateScreen+0x60>
            uint16_t index = base + col;
 8003842:	893a      	ldrh	r2, [r7, #8]
 8003844:	897b      	ldrh	r3, [r7, #10]
 8003846:	4413      	add	r3, r2
 8003848:	80fb      	strh	r3, [r7, #6]
            if (SSD1306_Buffer[index] != SSD1306_LastBuffer[index]) {
 800384a:	88fb      	ldrh	r3, [r7, #6]
 800384c:	4a2f      	ldr	r2, [pc, #188]	@ (800390c <ssd1306_UpdateScreen+0xf8>)
 800384e:	5cd2      	ldrb	r2, [r2, r3]
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	492f      	ldr	r1, [pc, #188]	@ (8003910 <ssd1306_UpdateScreen+0xfc>)
 8003854:	5ccb      	ldrb	r3, [r1, r3]
 8003856:	429a      	cmp	r2, r3
 8003858:	d009      	beq.n	800386e <ssd1306_UpdateScreen+0x5a>
                if (firstChanged == -1) firstChanged = col;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003860:	d101      	bne.n	8003866 <ssd1306_UpdateScreen+0x52>
 8003862:	897b      	ldrh	r3, [r7, #10]
 8003864:	613b      	str	r3, [r7, #16]
                lastChanged = col;
 8003866:	897b      	ldrh	r3, [r7, #10]
 8003868:	60fb      	str	r3, [r7, #12]
                pageChanged = 1;
 800386a:	2301      	movs	r3, #1
 800386c:	617b      	str	r3, [r7, #20]
        for (uint16_t col = 0; col < SSD1306_WIDTH; col++) {
 800386e:	897b      	ldrh	r3, [r7, #10]
 8003870:	3301      	adds	r3, #1
 8003872:	817b      	strh	r3, [r7, #10]
 8003874:	897b      	ldrh	r3, [r7, #10]
 8003876:	2b7f      	cmp	r3, #127	@ 0x7f
 8003878:	d9e3      	bls.n	8003842 <ssd1306_UpdateScreen+0x2e>
            }
        }

        if (!pageChanged)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d038      	beq.n	80038f2 <ssd1306_UpdateScreen+0xde>
            continue;
        anyPageChanged = 1;
 8003880:	2301      	movs	r3, #1
 8003882:	61fb      	str	r3, [r7, #28]

        // Write only the changed columns in this page
        ssd1306_WriteCommand(0xB0 + page);
 8003884:	7efb      	ldrb	r3, [r7, #27]
 8003886:	3b50      	subs	r3, #80	@ 0x50
 8003888:	b2db      	uxtb	r3, r3
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff ff10 	bl	80036b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + ((firstChanged + SSD1306_X_OFFSET_LOWER) & 0x0F));
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	b2db      	uxtb	r3, r3
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff ff08 	bl	80036b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + (((firstChanged + SSD1306_X_OFFSET_LOWER) >> 4) & 0x07));
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	111b      	asrs	r3, r3, #4
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	3310      	adds	r3, #16
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fefd 	bl	80036b0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[base + firstChanged], lastChanged - firstChanged + 1);
 80038b6:	893a      	ldrh	r2, [r7, #8]
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4413      	add	r3, r2
 80038bc:	4a13      	ldr	r2, [pc, #76]	@ (800390c <ssd1306_UpdateScreen+0xf8>)
 80038be:	1898      	adds	r0, r3, r2
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	3301      	adds	r3, #1
 80038c8:	4619      	mov	r1, r3
 80038ca:	f7ff ff09 	bl	80036e0 <ssd1306_WriteData>

        // Copy new page data to last buffer for the changed range
        memcpy(&SSD1306_LastBuffer[base + firstChanged], &SSD1306_Buffer[base + firstChanged], lastChanged - firstChanged + 1);
 80038ce:	893a      	ldrh	r2, [r7, #8]
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4413      	add	r3, r2
 80038d4:	4a0e      	ldr	r2, [pc, #56]	@ (8003910 <ssd1306_UpdateScreen+0xfc>)
 80038d6:	1898      	adds	r0, r3, r2
 80038d8:	893a      	ldrh	r2, [r7, #8]
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4413      	add	r3, r2
 80038de:	4a0b      	ldr	r2, [pc, #44]	@ (800390c <ssd1306_UpdateScreen+0xf8>)
 80038e0:	1899      	adds	r1, r3, r2
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	3301      	adds	r3, #1
 80038ea:	461a      	mov	r2, r3
 80038ec:	f009 fd59 	bl	800d3a2 <memcpy>
 80038f0:	e000      	b.n	80038f4 <ssd1306_UpdateScreen+0xe0>
            continue;
 80038f2:	bf00      	nop
    for (uint8_t page = 0; page < (SSD1306_HEIGHT / 8); page++) {
 80038f4:	7efb      	ldrb	r3, [r7, #27]
 80038f6:	3301      	adds	r3, #1
 80038f8:	76fb      	strb	r3, [r7, #27]
 80038fa:	7efb      	ldrb	r3, [r7, #27]
 80038fc:	2b07      	cmp	r3, #7
 80038fe:	d991      	bls.n	8003824 <ssd1306_UpdateScreen+0x10>
    }
    // If nothing changed, skip the update entirely
    if (!anyPageChanged) {
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	2b00      	cmp	r3, #0
        return;
    }
}
 8003904:	3720      	adds	r7, #32
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20000d04 	.word	0x20000d04
 8003910:	20001104 	.word	0x20001104

08003914 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	71fb      	strb	r3, [r7, #7]
 800391e:	460b      	mov	r3, r1
 8003920:	71bb      	strb	r3, [r7, #6]
 8003922:	4613      	mov	r3, r2
 8003924:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392a:	2b00      	cmp	r3, #0
 800392c:	db3d      	blt.n	80039aa <ssd1306_DrawPixel+0x96>
 800392e:	79bb      	ldrb	r3, [r7, #6]
 8003930:	2b3f      	cmp	r3, #63	@ 0x3f
 8003932:	d83a      	bhi.n	80039aa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003934:	797b      	ldrb	r3, [r7, #5]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d11a      	bne.n	8003970 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800393a:	79fa      	ldrb	r2, [r7, #7]
 800393c:	79bb      	ldrb	r3, [r7, #6]
 800393e:	08db      	lsrs	r3, r3, #3
 8003940:	b2d8      	uxtb	r0, r3
 8003942:	4603      	mov	r3, r0
 8003944:	01db      	lsls	r3, r3, #7
 8003946:	4413      	add	r3, r2
 8003948:	4a1b      	ldr	r2, [pc, #108]	@ (80039b8 <ssd1306_DrawPixel+0xa4>)
 800394a:	5cd3      	ldrb	r3, [r2, r3]
 800394c:	b25a      	sxtb	r2, r3
 800394e:	79bb      	ldrb	r3, [r7, #6]
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	2101      	movs	r1, #1
 8003956:	fa01 f303 	lsl.w	r3, r1, r3
 800395a:	b25b      	sxtb	r3, r3
 800395c:	4313      	orrs	r3, r2
 800395e:	b259      	sxtb	r1, r3
 8003960:	79fa      	ldrb	r2, [r7, #7]
 8003962:	4603      	mov	r3, r0
 8003964:	01db      	lsls	r3, r3, #7
 8003966:	4413      	add	r3, r2
 8003968:	b2c9      	uxtb	r1, r1
 800396a:	4a13      	ldr	r2, [pc, #76]	@ (80039b8 <ssd1306_DrawPixel+0xa4>)
 800396c:	54d1      	strb	r1, [r2, r3]
 800396e:	e01d      	b.n	80039ac <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003970:	79fa      	ldrb	r2, [r7, #7]
 8003972:	79bb      	ldrb	r3, [r7, #6]
 8003974:	08db      	lsrs	r3, r3, #3
 8003976:	b2d8      	uxtb	r0, r3
 8003978:	4603      	mov	r3, r0
 800397a:	01db      	lsls	r3, r3, #7
 800397c:	4413      	add	r3, r2
 800397e:	4a0e      	ldr	r2, [pc, #56]	@ (80039b8 <ssd1306_DrawPixel+0xa4>)
 8003980:	5cd3      	ldrb	r3, [r2, r3]
 8003982:	b25a      	sxtb	r2, r3
 8003984:	79bb      	ldrb	r3, [r7, #6]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	2101      	movs	r1, #1
 800398c:	fa01 f303 	lsl.w	r3, r1, r3
 8003990:	b25b      	sxtb	r3, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	b25b      	sxtb	r3, r3
 8003996:	4013      	ands	r3, r2
 8003998:	b259      	sxtb	r1, r3
 800399a:	79fa      	ldrb	r2, [r7, #7]
 800399c:	4603      	mov	r3, r0
 800399e:	01db      	lsls	r3, r3, #7
 80039a0:	4413      	add	r3, r2
 80039a2:	b2c9      	uxtb	r1, r1
 80039a4:	4a04      	ldr	r2, [pc, #16]	@ (80039b8 <ssd1306_DrawPixel+0xa4>)
 80039a6:	54d1      	strb	r1, [r2, r3]
 80039a8:	e000      	b.n	80039ac <ssd1306_DrawPixel+0x98>
        return;
 80039aa:	bf00      	nop
    }
}
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000d04 	.word	0x20000d04

080039bc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80039bc:	b590      	push	{r4, r7, lr}
 80039be:	b089      	sub	sp, #36	@ 0x24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4604      	mov	r4, r0
 80039c4:	4638      	mov	r0, r7
 80039c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80039ca:	4623      	mov	r3, r4
 80039cc:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	2b1f      	cmp	r3, #31
 80039d2:	d902      	bls.n	80039da <ssd1306_WriteChar+0x1e>
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	2b7e      	cmp	r3, #126	@ 0x7e
 80039d8:	d901      	bls.n	80039de <ssd1306_WriteChar+0x22>
        return 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	e079      	b.n	8003ad2 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <ssd1306_WriteChar+0x34>
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	3b20      	subs	r3, #32
 80039ea:	4413      	add	r3, r2
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	e000      	b.n	80039f2 <ssd1306_WriteChar+0x36>
 80039f0:	783b      	ldrb	r3, [r7, #0]
 80039f2:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80039f4:	4b39      	ldr	r3, [pc, #228]	@ (8003adc <ssd1306_WriteChar+0x120>)
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	461a      	mov	r2, r3
 80039fa:	7dfb      	ldrb	r3, [r7, #23]
 80039fc:	4413      	add	r3, r2
 80039fe:	2b80      	cmp	r3, #128	@ 0x80
 8003a00:	dc06      	bgt.n	8003a10 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8003a02:	4b36      	ldr	r3, [pc, #216]	@ (8003adc <ssd1306_WriteChar+0x120>)
 8003a04:	885b      	ldrh	r3, [r3, #2]
 8003a06:	461a      	mov	r2, r3
 8003a08:	787b      	ldrb	r3, [r7, #1]
 8003a0a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8003a0c:	2b40      	cmp	r3, #64	@ 0x40
 8003a0e:	dd01      	ble.n	8003a14 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e05e      	b.n	8003ad2 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8003a14:	2300      	movs	r3, #0
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	e04d      	b.n	8003ab6 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	3b20      	subs	r3, #32
 8003a20:	7879      	ldrb	r1, [r7, #1]
 8003a22:	fb01 f303 	mul.w	r3, r1, r3
 8003a26:	4619      	mov	r1, r3
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	440b      	add	r3, r1
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	4413      	add	r3, r2
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8003a34:	2300      	movs	r3, #0
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	e036      	b.n	8003aa8 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d013      	beq.n	8003a72 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003a4a:	4b24      	ldr	r3, [pc, #144]	@ (8003adc <ssd1306_WriteChar+0x120>)
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	4413      	add	r3, r2
 8003a56:	b2d8      	uxtb	r0, r3
 8003a58:	4b20      	ldr	r3, [pc, #128]	@ (8003adc <ssd1306_WriteChar+0x120>)
 8003a5a:	885b      	ldrh	r3, [r3, #2]
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	4413      	add	r3, r2
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	f7ff ff52 	bl	8003914 <ssd1306_DrawPixel>
 8003a70:	e017      	b.n	8003aa2 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003a72:	4b1a      	ldr	r3, [pc, #104]	@ (8003adc <ssd1306_WriteChar+0x120>)
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	b2d8      	uxtb	r0, r3
 8003a80:	4b16      	ldr	r3, [pc, #88]	@ (8003adc <ssd1306_WriteChar+0x120>)
 8003a82:	885b      	ldrh	r3, [r3, #2]
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	b2d9      	uxtb	r1, r3
 8003a8e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	bf0c      	ite	eq
 8003a96:	2301      	moveq	r3, #1
 8003a98:	2300      	movne	r3, #0
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f7ff ff39 	bl	8003914 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	61bb      	str	r3, [r7, #24]
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d3c4      	bcc.n	8003a3a <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	61fb      	str	r3, [r7, #28]
 8003ab6:	787b      	ldrb	r3, [r7, #1]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d3ac      	bcc.n	8003a1a <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8003ac0:	4b06      	ldr	r3, [pc, #24]	@ (8003adc <ssd1306_WriteChar+0x120>)
 8003ac2:	881a      	ldrh	r2, [r3, #0]
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	4413      	add	r3, r2
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	4b03      	ldr	r3, [pc, #12]	@ (8003adc <ssd1306_WriteChar+0x120>)
 8003ace:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3724      	adds	r7, #36	@ 0x24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd90      	pop	{r4, r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000cfc 	.word	0x20000cfc

08003ae0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	4638      	mov	r0, r7
 8003aea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8003aee:	e013      	b.n	8003b18 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	7818      	ldrb	r0, [r3, #0]
 8003af4:	7e3b      	ldrb	r3, [r7, #24]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	463b      	mov	r3, r7
 8003afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003afc:	f7ff ff5e 	bl	80039bc <ssd1306_WriteChar>
 8003b00:	4603      	mov	r3, r0
 8003b02:	461a      	mov	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d002      	beq.n	8003b12 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	e008      	b.n	8003b24 <ssd1306_WriteString+0x44>
        }
        str++;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	3301      	adds	r3, #1
 8003b16:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e7      	bne.n	8003af0 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	781b      	ldrb	r3, [r3, #0]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	460a      	mov	r2, r1
 8003b36:	71fb      	strb	r3, [r7, #7]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	4b05      	ldr	r3, [pc, #20]	@ (8003b58 <ssd1306_SetCursor+0x2c>)
 8003b42:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003b44:	79bb      	ldrb	r3, [r7, #6]
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	4b03      	ldr	r3, [pc, #12]	@ (8003b58 <ssd1306_SetCursor+0x2c>)
 8003b4a:	805a      	strh	r2, [r3, #2]
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	20000cfc 	.word	0x20000cfc

08003b5c <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003b5c:	b590      	push	{r4, r7, lr}
 8003b5e:	b089      	sub	sp, #36	@ 0x24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4604      	mov	r4, r0
 8003b64:	4608      	mov	r0, r1
 8003b66:	4611      	mov	r1, r2
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	71fb      	strb	r3, [r7, #7]
 8003b6e:	4603      	mov	r3, r0
 8003b70:	71bb      	strb	r3, [r7, #6]
 8003b72:	460b      	mov	r3, r1
 8003b74:	717b      	strb	r3, [r7, #5]
 8003b76:	4613      	mov	r3, r2
 8003b78:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8003b7a:	797a      	ldrb	r2, [r7, #5]
 8003b7c:	79fb      	ldrb	r3, [r7, #7]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	bfb8      	it	lt
 8003b84:	425b      	neglt	r3, r3
 8003b86:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8003b88:	793a      	ldrb	r2, [r7, #4]
 8003b8a:	79bb      	ldrb	r3, [r7, #6]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bfb8      	it	lt
 8003b92:	425b      	neglt	r3, r3
 8003b94:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8003b96:	79fa      	ldrb	r2, [r7, #7]
 8003b98:	797b      	ldrb	r3, [r7, #5]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d201      	bcs.n	8003ba2 <ssd1306_Line+0x46>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e001      	b.n	8003ba6 <ssd1306_Line+0x4a>
 8003ba2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ba6:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8003ba8:	79ba      	ldrb	r2, [r7, #6]
 8003baa:	793b      	ldrb	r3, [r7, #4]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d201      	bcs.n	8003bb4 <ssd1306_Line+0x58>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e001      	b.n	8003bb8 <ssd1306_Line+0x5c>
 8003bb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003bb8:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8003bc2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003bc6:	7939      	ldrb	r1, [r7, #4]
 8003bc8:	797b      	ldrb	r3, [r7, #5]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff fea2 	bl	8003914 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8003bd0:	e024      	b.n	8003c1c <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8003bd2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003bd6:	79b9      	ldrb	r1, [r7, #6]
 8003bd8:	79fb      	ldrb	r3, [r7, #7]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff fe9a 	bl	8003914 <ssd1306_DrawPixel>
        error2 = error * 2;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	425b      	negs	r3, r3
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	dd08      	ble.n	8003c02 <ssd1306_Line+0xa6>
            error -= deltaY;
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	4413      	add	r3, r2
 8003c00:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	da08      	bge.n	8003c1c <ssd1306_Line+0xc0>
            error += deltaX;
 8003c0a:	69fa      	ldr	r2, [r7, #28]
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	4413      	add	r3, r2
 8003c10:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	79bb      	ldrb	r3, [r7, #6]
 8003c18:	4413      	add	r3, r2
 8003c1a:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8003c1c:	79fa      	ldrb	r2, [r7, #7]
 8003c1e:	797b      	ldrb	r3, [r7, #5]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d1d6      	bne.n	8003bd2 <ssd1306_Line+0x76>
 8003c24:	79ba      	ldrb	r2, [r7, #6]
 8003c26:	793b      	ldrb	r3, [r7, #4]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d1d2      	bne.n	8003bd2 <ssd1306_Line+0x76>
        }
    }
    return;
 8003c2c:	bf00      	nop
}
 8003c2e:	3724      	adds	r7, #36	@ 0x24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd90      	pop	{r4, r7, pc}

08003c34 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	4608      	mov	r0, r1
 8003c3e:	4611      	mov	r1, r2
 8003c40:	461a      	mov	r2, r3
 8003c42:	4623      	mov	r3, r4
 8003c44:	71fb      	strb	r3, [r7, #7]
 8003c46:	4603      	mov	r3, r0
 8003c48:	71bb      	strb	r3, [r7, #6]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	717b      	strb	r3, [r7, #5]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8003c52:	79bc      	ldrb	r4, [r7, #6]
 8003c54:	797a      	ldrb	r2, [r7, #5]
 8003c56:	79b9      	ldrb	r1, [r7, #6]
 8003c58:	79f8      	ldrb	r0, [r7, #7]
 8003c5a:	7e3b      	ldrb	r3, [r7, #24]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	4623      	mov	r3, r4
 8003c60:	f7ff ff7c 	bl	8003b5c <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8003c64:	793c      	ldrb	r4, [r7, #4]
 8003c66:	797a      	ldrb	r2, [r7, #5]
 8003c68:	79b9      	ldrb	r1, [r7, #6]
 8003c6a:	7978      	ldrb	r0, [r7, #5]
 8003c6c:	7e3b      	ldrb	r3, [r7, #24]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	4623      	mov	r3, r4
 8003c72:	f7ff ff73 	bl	8003b5c <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8003c76:	793c      	ldrb	r4, [r7, #4]
 8003c78:	79fa      	ldrb	r2, [r7, #7]
 8003c7a:	7939      	ldrb	r1, [r7, #4]
 8003c7c:	7978      	ldrb	r0, [r7, #5]
 8003c7e:	7e3b      	ldrb	r3, [r7, #24]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	4623      	mov	r3, r4
 8003c84:	f7ff ff6a 	bl	8003b5c <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8003c88:	79bc      	ldrb	r4, [r7, #6]
 8003c8a:	79fa      	ldrb	r2, [r7, #7]
 8003c8c:	7939      	ldrb	r1, [r7, #4]
 8003c8e:	79f8      	ldrb	r0, [r7, #7]
 8003c90:	7e3b      	ldrb	r3, [r7, #24]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	4623      	mov	r3, r4
 8003c96:	f7ff ff61 	bl	8003b5c <ssd1306_Line>

    return;
 8003c9a:	bf00      	nop
}
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd90      	pop	{r4, r7, pc}

08003ca2 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b084      	sub	sp, #16
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	4603      	mov	r3, r0
 8003caa:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003cac:	2381      	movs	r3, #129	@ 0x81
 8003cae:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff fcfc 	bl	80036b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fcf8 	bl	80036b0 <ssd1306_WriteCommand>
}
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003cd8:	23af      	movs	r3, #175	@ 0xaf
 8003cda:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003cdc:	4b08      	ldr	r3, [pc, #32]	@ (8003d00 <ssd1306_SetDisplayOn+0x38>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	715a      	strb	r2, [r3, #5]
 8003ce2:	e004      	b.n	8003cee <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003ce4:	23ae      	movs	r3, #174	@ 0xae
 8003ce6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003ce8:	4b05      	ldr	r3, [pc, #20]	@ (8003d00 <ssd1306_SetDisplayOn+0x38>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fcdd 	bl	80036b0 <ssd1306_WriteCommand>
}
 8003cf6:	bf00      	nop
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000cfc 	.word	0x20000cfc

08003d04 <ssd1306_FlipScreen>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_FlipScreen(uint8_t flip_horizontal, uint8_t flip_vertical) {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	460a      	mov	r2, r1
 8003d0e:	71fb      	strb	r3, [r7, #7]
 8003d10:	4613      	mov	r3, r2
 8003d12:	71bb      	strb	r3, [r7, #6]
    if (flip_horizontal) {
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <ssd1306_FlipScreen+0x1e>
        ssd1306_WriteCommand(0xA1);
 8003d1a:	20a1      	movs	r0, #161	@ 0xa1
 8003d1c:	f7ff fcc8 	bl	80036b0 <ssd1306_WriteCommand>
 8003d20:	e002      	b.n	8003d28 <ssd1306_FlipScreen+0x24>
    } else {
        ssd1306_WriteCommand(0xA0);
 8003d22:	20a0      	movs	r0, #160	@ 0xa0
 8003d24:	f7ff fcc4 	bl	80036b0 <ssd1306_WriteCommand>
    }

    if (flip_vertical) {
 8003d28:	79bb      	ldrb	r3, [r7, #6]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <ssd1306_FlipScreen+0x32>
        ssd1306_WriteCommand(0xC8);
 8003d2e:	20c8      	movs	r0, #200	@ 0xc8
 8003d30:	f7ff fcbe 	bl	80036b0 <ssd1306_WriteCommand>
    } else {
        ssd1306_WriteCommand(0xC0);
    }
}
 8003d34:	e002      	b.n	8003d3c <ssd1306_FlipScreen+0x38>
        ssd1306_WriteCommand(0xC0);
 8003d36:	20c0      	movs	r0, #192	@ 0xc0
 8003d38:	f7ff fcba 	bl	80036b0 <ssd1306_WriteCommand>
}
 8003d3c:	bf00      	nop
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	4b10      	ldr	r3, [pc, #64]	@ (8003d90 <HAL_MspInit+0x4c>)
 8003d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d52:	4a0f      	ldr	r2, [pc, #60]	@ (8003d90 <HAL_MspInit+0x4c>)
 8003d54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d90 <HAL_MspInit+0x4c>)
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d62:	607b      	str	r3, [r7, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d66:	2300      	movs	r3, #0
 8003d68:	603b      	str	r3, [r7, #0]
 8003d6a:	4b09      	ldr	r3, [pc, #36]	@ (8003d90 <HAL_MspInit+0x4c>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	4a08      	ldr	r2, [pc, #32]	@ (8003d90 <HAL_MspInit+0x4c>)
 8003d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d76:	4b06      	ldr	r3, [pc, #24]	@ (8003d90 <HAL_MspInit+0x4c>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40023800 	.word	0x40023800

08003d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08a      	sub	sp, #40	@ 0x28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d9c:	f107 0314 	add.w	r3, r7, #20
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	60da      	str	r2, [r3, #12]
 8003daa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a17      	ldr	r2, [pc, #92]	@ (8003e10 <HAL_ADC_MspInit+0x7c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d127      	bne.n	8003e06 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	4b16      	ldr	r3, [pc, #88]	@ (8003e14 <HAL_ADC_MspInit+0x80>)
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dbe:	4a15      	ldr	r2, [pc, #84]	@ (8003e14 <HAL_ADC_MspInit+0x80>)
 8003dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dc6:	4b13      	ldr	r3, [pc, #76]	@ (8003e14 <HAL_ADC_MspInit+0x80>)
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8003e14 <HAL_ADC_MspInit+0x80>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	4a0e      	ldr	r2, [pc, #56]	@ (8003e14 <HAL_ADC_MspInit+0x80>)
 8003ddc:	f043 0302 	orr.w	r3, r3, #2
 8003de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003de2:	4b0c      	ldr	r3, [pc, #48]	@ (8003e14 <HAL_ADC_MspInit+0x80>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003dee:	2302      	movs	r3, #2
 8003df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003df2:	2303      	movs	r3, #3
 8003df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df6:	2300      	movs	r3, #0
 8003df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dfa:	f107 0314 	add.w	r3, r7, #20
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4805      	ldr	r0, [pc, #20]	@ (8003e18 <HAL_ADC_MspInit+0x84>)
 8003e02:	f001 fa09 	bl	8005218 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e06:	bf00      	nop
 8003e08:	3728      	adds	r7, #40	@ 0x28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40012000 	.word	0x40012000
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40020400 	.word	0x40020400

08003e1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08a      	sub	sp, #40	@ 0x28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e24:	f107 0314 	add.w	r3, r7, #20
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	605a      	str	r2, [r3, #4]
 8003e2e:	609a      	str	r2, [r3, #8]
 8003e30:	60da      	str	r2, [r3, #12]
 8003e32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a19      	ldr	r2, [pc, #100]	@ (8003ea0 <HAL_I2C_MspInit+0x84>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d12b      	bne.n	8003e96 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	4b18      	ldr	r3, [pc, #96]	@ (8003ea4 <HAL_I2C_MspInit+0x88>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e46:	4a17      	ldr	r2, [pc, #92]	@ (8003ea4 <HAL_I2C_MspInit+0x88>)
 8003e48:	f043 0302 	orr.w	r3, r3, #2
 8003e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e4e:	4b15      	ldr	r3, [pc, #84]	@ (8003ea4 <HAL_I2C_MspInit+0x88>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e5a:	23c0      	movs	r3, #192	@ 0xc0
 8003e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e5e:	2312      	movs	r3, #18
 8003e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e62:	2301      	movs	r3, #1
 8003e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e66:	2303      	movs	r3, #3
 8003e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e6a:	2304      	movs	r3, #4
 8003e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e6e:	f107 0314 	add.w	r3, r7, #20
 8003e72:	4619      	mov	r1, r3
 8003e74:	480c      	ldr	r0, [pc, #48]	@ (8003ea8 <HAL_I2C_MspInit+0x8c>)
 8003e76:	f001 f9cf 	bl	8005218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	4b09      	ldr	r3, [pc, #36]	@ (8003ea4 <HAL_I2C_MspInit+0x88>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e82:	4a08      	ldr	r2, [pc, #32]	@ (8003ea4 <HAL_I2C_MspInit+0x88>)
 8003e84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ea4 <HAL_I2C_MspInit+0x88>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003e96:	bf00      	nop
 8003e98:	3728      	adds	r7, #40	@ 0x28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40005400 	.word	0x40005400
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40020400 	.word	0x40020400

08003eac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08a      	sub	sp, #40	@ 0x28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb4:	f107 0314 	add.w	r3, r7, #20
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	605a      	str	r2, [r3, #4]
 8003ebe:	609a      	str	r2, [r3, #8]
 8003ec0:	60da      	str	r2, [r3, #12]
 8003ec2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ecc:	d13a      	bne.n	8003f44 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ece:	2300      	movs	r3, #0
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f4c <HAL_PCD_MspInit+0xa0>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8003f4c <HAL_PCD_MspInit+0xa0>)
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ede:	4b1b      	ldr	r3, [pc, #108]	@ (8003f4c <HAL_PCD_MspInit+0xa0>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	613b      	str	r3, [r7, #16]
 8003ee8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003eea:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003efc:	230a      	movs	r3, #10
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f00:	f107 0314 	add.w	r3, r7, #20
 8003f04:	4619      	mov	r1, r3
 8003f06:	4812      	ldr	r0, [pc, #72]	@ (8003f50 <HAL_PCD_MspInit+0xa4>)
 8003f08:	f001 f986 	bl	8005218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f4c <HAL_PCD_MspInit+0xa0>)
 8003f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f10:	4a0e      	ldr	r2, [pc, #56]	@ (8003f4c <HAL_PCD_MspInit+0xa0>)
 8003f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f16:	6353      	str	r3, [r2, #52]	@ 0x34
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f4c <HAL_PCD_MspInit+0xa0>)
 8003f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f20:	4a0a      	ldr	r2, [pc, #40]	@ (8003f4c <HAL_PCD_MspInit+0xa0>)
 8003f22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f26:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f28:	4b08      	ldr	r3, [pc, #32]	@ (8003f4c <HAL_PCD_MspInit+0xa0>)
 8003f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003f34:	2200      	movs	r2, #0
 8003f36:	2100      	movs	r1, #0
 8003f38:	2043      	movs	r0, #67	@ 0x43
 8003f3a:	f000 ff28 	bl	8004d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003f3e:	2043      	movs	r0, #67	@ 0x43
 8003f40:	f000 ff41 	bl	8004dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003f44:	bf00      	nop
 8003f46:	3728      	adds	r7, #40	@ 0x28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	40020000 	.word	0x40020000

08003f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8003f58:	bf00      	nop
 8003f5a:	e7fd      	b.n	8003f58 <NMI_Handler+0x4>

08003f5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm("BKPT #0\n");
 8003f60:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f62:	bf00      	nop
 8003f64:	e7fd      	b.n	8003f62 <HardFault_Handler+0x6>

08003f66 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f66:	b480      	push	{r7}
 8003f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f6a:	bf00      	nop
 8003f6c:	e7fd      	b.n	8003f6a <MemManage_Handler+0x4>

08003f6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f72:	bf00      	nop
 8003f74:	e7fd      	b.n	8003f72 <BusFault_Handler+0x4>

08003f76 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f76:	b480      	push	{r7}
 8003f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f7a:	bf00      	nop
 8003f7c:	e7fd      	b.n	8003f7a <UsageFault_Handler+0x4>

08003f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f82:	bf00      	nop
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f9e:	bf00      	nop
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fac:	f000 f9de 	bl	800436c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  system_ticks++;
 8003fb0:	4b03      	ldr	r3, [pc, #12]	@ (8003fc0 <SysTick_Handler+0x18>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	4a02      	ldr	r2, [pc, #8]	@ (8003fc0 <SysTick_Handler+0x18>)
 8003fb8:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20001504 	.word	0x20001504

08003fc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 8003fc8:	2000      	movs	r0, #0
 8003fca:	f008 fa25 	bl	800c418 <dcd_int_handler>
	return;
 8003fce:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	af00      	add	r7, sp, #0
  return 1;
 8003fd6:	2301      	movs	r3, #1
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <_kill>:

int _kill(int pid, int sig)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003fec:	f009 f9ac 	bl	800d348 <__errno>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2216      	movs	r2, #22
 8003ff4:	601a      	str	r2, [r3, #0]
  return -1;
 8003ff6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <_exit>:

void _exit (int status)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b082      	sub	sp, #8
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800400a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7ff ffe7 	bl	8003fe2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004014:	bf00      	nop
 8004016:	e7fd      	b.n	8004014 <_exit+0x12>

08004018 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	e00a      	b.n	8004040 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800402a:	f3af 8000 	nop.w
 800402e:	4601      	mov	r1, r0
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	60ba      	str	r2, [r7, #8]
 8004036:	b2ca      	uxtb	r2, r1
 8004038:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	3301      	adds	r3, #1
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	dbf0      	blt.n	800402a <_read+0x12>
  }

  return len;
 8004048:	687b      	ldr	r3, [r7, #4]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b086      	sub	sp, #24
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	e009      	b.n	8004078 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	60ba      	str	r2, [r7, #8]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	3301      	adds	r3, #1
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	429a      	cmp	r2, r3
 800407e:	dbf1      	blt.n	8004064 <_write+0x12>
  }
  return len;
 8004080:	687b      	ldr	r3, [r7, #4]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <_close>:

int _close(int file)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004092:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80040b2:	605a      	str	r2, [r3, #4]
  return 0;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <_isatty>:

int _isatty(int file)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80040ca:	2301      	movs	r3, #1
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040fc:	4a14      	ldr	r2, [pc, #80]	@ (8004150 <_sbrk+0x5c>)
 80040fe:	4b15      	ldr	r3, [pc, #84]	@ (8004154 <_sbrk+0x60>)
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004108:	4b13      	ldr	r3, [pc, #76]	@ (8004158 <_sbrk+0x64>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d102      	bne.n	8004116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004110:	4b11      	ldr	r3, [pc, #68]	@ (8004158 <_sbrk+0x64>)
 8004112:	4a12      	ldr	r2, [pc, #72]	@ (800415c <_sbrk+0x68>)
 8004114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004116:	4b10      	ldr	r3, [pc, #64]	@ (8004158 <_sbrk+0x64>)
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4413      	add	r3, r2
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	429a      	cmp	r2, r3
 8004122:	d207      	bcs.n	8004134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004124:	f009 f910 	bl	800d348 <__errno>
 8004128:	4603      	mov	r3, r0
 800412a:	220c      	movs	r2, #12
 800412c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800412e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004132:	e009      	b.n	8004148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004134:	4b08      	ldr	r3, [pc, #32]	@ (8004158 <_sbrk+0x64>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800413a:	4b07      	ldr	r3, [pc, #28]	@ (8004158 <_sbrk+0x64>)
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4413      	add	r3, r2
 8004142:	4a05      	ldr	r2, [pc, #20]	@ (8004158 <_sbrk+0x64>)
 8004144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004146:	68fb      	ldr	r3, [r7, #12]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20020000 	.word	0x20020000
 8004154:	00000400 	.word	0x00000400
 8004158:	20001508 	.word	0x20001508
 800415c:	20001a48 	.word	0x20001a48

08004160 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004164:	4b06      	ldr	r3, [pc, #24]	@ (8004180 <SystemInit+0x20>)
 8004166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416a:	4a05      	ldr	r2, [pc, #20]	@ (8004180 <SystemInit+0x20>)
 800416c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004170:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	e000ed00 	.word	0xe000ed00

08004184 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8004188:	4b02      	ldr	r3, [pc, #8]	@ (8004194 <tud_descriptor_device_cb+0x10>)
}
 800418a:	4618      	mov	r0, r3
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	0800f900 	.word	0x0800f900

08004198 <tud_hid_descriptor_report_cb>:

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_hid_descriptor_report_cb(uint8_t instance)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	71fb      	strb	r3, [r7, #7]
  (void) instance;
  return desc_hid_report;
 80041a2:	4b03      	ldr	r3, [pc, #12]	@ (80041b0 <tud_hid_descriptor_report_cb+0x18>)
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	0800f914 	.word	0x0800f914

080041b4 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	4603      	mov	r3, r0
 80041bc:	71fb      	strb	r3, [r7, #7]
  (void) index; // for multiple configurations
  return desc_configuration;
 80041be:	4b03      	ldr	r3, [pc, #12]	@ (80041cc <tud_descriptor_configuration_cb+0x18>)
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	0800f970 	.word	0x0800f970

080041d0 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	460a      	mov	r2, r1
 80041da:	71fb      	strb	r3, [r7, #7]
 80041dc:	4613      	mov	r3, r2
 80041de:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d108      	bne.n	80041f8 <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 80041e6:	4b21      	ldr	r3, [pc, #132]	@ (800426c <tud_descriptor_string_cb+0x9c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	4b20      	ldr	r3, [pc, #128]	@ (8004270 <tud_descriptor_string_cb+0xa0>)
 80041f0:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 80041f2:	2301      	movs	r3, #1
 80041f4:	73fb      	strb	r3, [r7, #15]
 80041f6:	e027      	b.n	8004248 <tud_descriptor_string_cb+0x78>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	2b05      	cmp	r3, #5
 80041fc:	d901      	bls.n	8004202 <tud_descriptor_string_cb+0x32>
 80041fe:	2300      	movs	r3, #0
 8004200:	e02f      	b.n	8004262 <tud_descriptor_string_cb+0x92>

    const char* str = string_desc_arr[index];
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	4a19      	ldr	r2, [pc, #100]	@ (800426c <tud_descriptor_string_cb+0x9c>)
 8004206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800420a:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = strlen(str);
 800420c:	68b8      	ldr	r0, [r7, #8]
 800420e:	f7fb fff1 	bl	80001f4 <strlen>
 8004212:	4603      	mov	r3, r0
 8004214:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	2b1f      	cmp	r3, #31
 800421a:	d901      	bls.n	8004220 <tud_descriptor_string_cb+0x50>
 800421c:	231f      	movs	r3, #31
 800421e:	73fb      	strb	r3, [r7, #15]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 8004220:	2300      	movs	r3, #0
 8004222:	73bb      	strb	r3, [r7, #14]
 8004224:	e00c      	b.n	8004240 <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 8004226:	7bbb      	ldrb	r3, [r7, #14]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	4413      	add	r3, r2
 800422c:	781a      	ldrb	r2, [r3, #0]
 800422e:	7bbb      	ldrb	r3, [r7, #14]
 8004230:	3301      	adds	r3, #1
 8004232:	4611      	mov	r1, r2
 8004234:	4a0e      	ldr	r2, [pc, #56]	@ (8004270 <tud_descriptor_string_cb+0xa0>)
 8004236:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 800423a:	7bbb      	ldrb	r3, [r7, #14]
 800423c:	3301      	adds	r3, #1
 800423e:	73bb      	strb	r3, [r7, #14]
 8004240:	7bba      	ldrb	r2, [r7, #14]
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	429a      	cmp	r2, r3
 8004246:	d3ee      	bcc.n	8004226 <tud_descriptor_string_cb+0x56>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8004248:	7bfb      	ldrb	r3, [r7, #15]
 800424a:	3301      	adds	r3, #1
 800424c:	b29b      	uxth	r3, r3
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	b29b      	uxth	r3, r3
 8004252:	b21b      	sxth	r3, r3
 8004254:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004258:	b21b      	sxth	r3, r3
 800425a:	b29a      	uxth	r2, r3
 800425c:	4b04      	ldr	r3, [pc, #16]	@ (8004270 <tud_descriptor_string_cb+0xa0>)
 800425e:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8004260:	4b03      	ldr	r3, [pc, #12]	@ (8004270 <tud_descriptor_string_cb+0xa0>)
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	2000020c 	.word	0x2000020c
 8004270:	2000150c 	.word	0x2000150c

08004274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004274:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80042ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004278:	f7ff ff72 	bl	8004160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800427c:	480c      	ldr	r0, [pc, #48]	@ (80042b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800427e:	490d      	ldr	r1, [pc, #52]	@ (80042b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004280:	4a0d      	ldr	r2, [pc, #52]	@ (80042b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004284:	e002      	b.n	800428c <LoopCopyDataInit>

08004286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800428a:	3304      	adds	r3, #4

0800428c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800428c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800428e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004290:	d3f9      	bcc.n	8004286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004292:	4a0a      	ldr	r2, [pc, #40]	@ (80042bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004294:	4c0a      	ldr	r4, [pc, #40]	@ (80042c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004298:	e001      	b.n	800429e <LoopFillZerobss>

0800429a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800429a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800429c:	3204      	adds	r2, #4

0800429e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800429e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042a0:	d3fb      	bcc.n	800429a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042a2:	f009 f857 	bl	800d354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042a6:	f7fe fc41 	bl	8002b2c <main>
  bx  lr    
 80042aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80042ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042b4:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 80042b8:	0800fc2c 	.word	0x0800fc2c
  ldr r2, =_sbss
 80042bc:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 80042c0:	20001a44 	.word	0x20001a44

080042c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042c4:	e7fe      	b.n	80042c4 <ADC_IRQHandler>
	...

080042c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004308 <HAL_Init+0x40>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004308 <HAL_Init+0x40>)
 80042d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004308 <HAL_Init+0x40>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004308 <HAL_Init+0x40>)
 80042de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042e4:	4b08      	ldr	r3, [pc, #32]	@ (8004308 <HAL_Init+0x40>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a07      	ldr	r2, [pc, #28]	@ (8004308 <HAL_Init+0x40>)
 80042ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042f0:	2003      	movs	r0, #3
 80042f2:	f000 fd41 	bl	8004d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042f6:	200f      	movs	r0, #15
 80042f8:	f000 f808 	bl	800430c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042fc:	f7ff fd22 	bl	8003d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40023c00 	.word	0x40023c00

0800430c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004314:	4b12      	ldr	r3, [pc, #72]	@ (8004360 <HAL_InitTick+0x54>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	4b12      	ldr	r3, [pc, #72]	@ (8004364 <HAL_InitTick+0x58>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	4619      	mov	r1, r3
 800431e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004322:	fbb3 f3f1 	udiv	r3, r3, r1
 8004326:	fbb2 f3f3 	udiv	r3, r2, r3
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fd59 	bl	8004de2 <HAL_SYSTICK_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e00e      	b.n	8004358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b0f      	cmp	r3, #15
 800433e:	d80a      	bhi.n	8004356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004340:	2200      	movs	r2, #0
 8004342:	6879      	ldr	r1, [r7, #4]
 8004344:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004348:	f000 fd21 	bl	8004d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800434c:	4a06      	ldr	r2, [pc, #24]	@ (8004368 <HAL_InitTick+0x5c>)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	e000      	b.n	8004358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
}
 8004358:	4618      	mov	r0, r3
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	20000208 	.word	0x20000208
 8004364:	20000228 	.word	0x20000228
 8004368:	20000224 	.word	0x20000224

0800436c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004370:	4b06      	ldr	r3, [pc, #24]	@ (800438c <HAL_IncTick+0x20>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	4b06      	ldr	r3, [pc, #24]	@ (8004390 <HAL_IncTick+0x24>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4413      	add	r3, r2
 800437c:	4a04      	ldr	r2, [pc, #16]	@ (8004390 <HAL_IncTick+0x24>)
 800437e:	6013      	str	r3, [r2, #0]
}
 8004380:	bf00      	nop
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	20000228 	.word	0x20000228
 8004390:	2000154c 	.word	0x2000154c

08004394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  return uwTick;
 8004398:	4b03      	ldr	r3, [pc, #12]	@ (80043a8 <HAL_GetTick+0x14>)
 800439a:	681b      	ldr	r3, [r3, #0]
}
 800439c:	4618      	mov	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	2000154c 	.word	0x2000154c

080043ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043b4:	f7ff ffee 	bl	8004394 <HAL_GetTick>
 80043b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043c4:	d005      	beq.n	80043d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043c6:	4b0a      	ldr	r3, [pc, #40]	@ (80043f0 <HAL_Delay+0x44>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4413      	add	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043d2:	bf00      	nop
 80043d4:	f7ff ffde 	bl	8004394 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d8f7      	bhi.n	80043d4 <HAL_Delay+0x28>
  {
  }
}
 80043e4:	bf00      	nop
 80043e6:	bf00      	nop
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20000228 	.word	0x20000228

080043f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e033      	b.n	8004472 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7ff fcbe 	bl	8003d94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	2b00      	cmp	r3, #0
 8004430:	d118      	bne.n	8004464 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004436:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800443a:	f023 0302 	bic.w	r3, r3, #2
 800443e:	f043 0202 	orr.w	r2, r3, #2
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 faca 	bl	80049e0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	f023 0303 	bic.w	r3, r3, #3
 800445a:	f043 0201 	orr.w	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	641a      	str	r2, [r3, #64]	@ 0x40
 8004462:	e001      	b.n	8004468 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004470:	7bfb      	ldrb	r3, [r7, #15]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_ADC_Start+0x1a>
 8004492:	2302      	movs	r3, #2
 8004494:	e097      	b.n	80045c6 <HAL_ADC_Start+0x14a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d018      	beq.n	80044de <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80044bc:	4b45      	ldr	r3, [pc, #276]	@ (80045d4 <HAL_ADC_Start+0x158>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a45      	ldr	r2, [pc, #276]	@ (80045d8 <HAL_ADC_Start+0x15c>)
 80044c2:	fba2 2303 	umull	r2, r3, r2, r3
 80044c6:	0c9a      	lsrs	r2, r3, #18
 80044c8:	4613      	mov	r3, r2
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	4413      	add	r3, r2
 80044ce:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80044d0:	e002      	b.n	80044d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f9      	bne.n	80044d2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d15f      	bne.n	80045ac <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80044f4:	f023 0301 	bic.w	r3, r3, #1
 80044f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004516:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004522:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800452a:	d106      	bne.n	800453a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004530:	f023 0206 	bic.w	r2, r3, #6
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	645a      	str	r2, [r3, #68]	@ 0x44
 8004538:	e002      	b.n	8004540 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004548:	4b24      	ldr	r3, [pc, #144]	@ (80045dc <HAL_ADC_Start+0x160>)
 800454a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004554:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 031f 	and.w	r3, r3, #31
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10f      	bne.n	8004582 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d129      	bne.n	80045c4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800457e:	609a      	str	r2, [r3, #8]
 8004580:	e020      	b.n	80045c4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a16      	ldr	r2, [pc, #88]	@ (80045e0 <HAL_ADC_Start+0x164>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d11b      	bne.n	80045c4 <HAL_ADC_Start+0x148>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d114      	bne.n	80045c4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80045a8:	609a      	str	r2, [r3, #8]
 80045aa:	e00b      	b.n	80045c4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b0:	f043 0210 	orr.w	r2, r3, #16
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045bc:	f043 0201 	orr.w	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	20000208 	.word	0x20000208
 80045d8:	431bde83 	.word	0x431bde83
 80045dc:	40012300 	.word	0x40012300
 80045e0:	40012000 	.word	0x40012000

080045e4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <HAL_ADC_Stop+0x16>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e021      	b.n	800463e <HAL_ADC_Stop+0x5a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d109      	bne.n	8004634 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004624:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004628:	f023 0301 	bic.w	r3, r3, #1
 800462c:	f043 0201 	orr.w	r2, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004666:	d113      	bne.n	8004690 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004676:	d10b      	bne.n	8004690 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467c:	f043 0220 	orr.w	r2, r3, #32
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e063      	b.n	8004758 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004690:	f7ff fe80 	bl	8004394 <HAL_GetTick>
 8004694:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004696:	e021      	b.n	80046dc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800469e:	d01d      	beq.n	80046dc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d007      	beq.n	80046b6 <HAL_ADC_PollForConversion+0x6c>
 80046a6:	f7ff fe75 	bl	8004394 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d212      	bcs.n	80046dc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d00b      	beq.n	80046dc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c8:	f043 0204 	orr.w	r2, r3, #4
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e03d      	b.n	8004758 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d1d6      	bne.n	8004698 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f06f 0212 	mvn.w	r2, #18
 80046f2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d123      	bne.n	8004756 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004712:	2b00      	cmp	r3, #0
 8004714:	d11f      	bne.n	8004756 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004720:	2b00      	cmp	r3, #0
 8004722:	d006      	beq.n	8004732 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800472e:	2b00      	cmp	r3, #0
 8004730:	d111      	bne.n	8004756 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004736:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d105      	bne.n	8004756 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474e:	f043 0201 	orr.w	r2, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800476e:	4618      	mov	r0, r3
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
	...

0800477c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x1c>
 8004794:	2302      	movs	r3, #2
 8004796:	e113      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x244>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b09      	cmp	r3, #9
 80047a6:	d925      	bls.n	80047f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68d9      	ldr	r1, [r3, #12]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	461a      	mov	r2, r3
 80047b6:	4613      	mov	r3, r2
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	4413      	add	r3, r2
 80047bc:	3b1e      	subs	r3, #30
 80047be:	2207      	movs	r2, #7
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	43da      	mvns	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	400a      	ands	r2, r1
 80047cc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68d9      	ldr	r1, [r3, #12]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	4618      	mov	r0, r3
 80047e0:	4603      	mov	r3, r0
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	4403      	add	r3, r0
 80047e6:	3b1e      	subs	r3, #30
 80047e8:	409a      	lsls	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	60da      	str	r2, [r3, #12]
 80047f2:	e022      	b.n	800483a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6919      	ldr	r1, [r3, #16]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	461a      	mov	r2, r3
 8004802:	4613      	mov	r3, r2
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	4413      	add	r3, r2
 8004808:	2207      	movs	r2, #7
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	43da      	mvns	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	400a      	ands	r2, r1
 8004816:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6919      	ldr	r1, [r3, #16]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	b29b      	uxth	r3, r3
 8004828:	4618      	mov	r0, r3
 800482a:	4603      	mov	r3, r0
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	4403      	add	r3, r0
 8004830:	409a      	lsls	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b06      	cmp	r3, #6
 8004840:	d824      	bhi.n	800488c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	3b05      	subs	r3, #5
 8004854:	221f      	movs	r2, #31
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	43da      	mvns	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	400a      	ands	r2, r1
 8004862:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	b29b      	uxth	r3, r3
 8004870:	4618      	mov	r0, r3
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	3b05      	subs	r3, #5
 800487e:	fa00 f203 	lsl.w	r2, r0, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	635a      	str	r2, [r3, #52]	@ 0x34
 800488a:	e04c      	b.n	8004926 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b0c      	cmp	r3, #12
 8004892:	d824      	bhi.n	80048de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	3b23      	subs	r3, #35	@ 0x23
 80048a6:	221f      	movs	r2, #31
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	43da      	mvns	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	400a      	ands	r2, r1
 80048b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	4618      	mov	r0, r3
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	4613      	mov	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	3b23      	subs	r3, #35	@ 0x23
 80048d0:	fa00 f203 	lsl.w	r2, r0, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	631a      	str	r2, [r3, #48]	@ 0x30
 80048dc:	e023      	b.n	8004926 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	4613      	mov	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	3b41      	subs	r3, #65	@ 0x41
 80048f0:	221f      	movs	r2, #31
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	43da      	mvns	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	400a      	ands	r2, r1
 80048fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	b29b      	uxth	r3, r3
 800490c:	4618      	mov	r0, r3
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	4613      	mov	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	3b41      	subs	r3, #65	@ 0x41
 800491a:	fa00 f203 	lsl.w	r2, r0, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004926:	4b29      	ldr	r3, [pc, #164]	@ (80049cc <HAL_ADC_ConfigChannel+0x250>)
 8004928:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a28      	ldr	r2, [pc, #160]	@ (80049d0 <HAL_ADC_ConfigChannel+0x254>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d10f      	bne.n	8004954 <HAL_ADC_ConfigChannel+0x1d8>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b12      	cmp	r3, #18
 800493a:	d10b      	bne.n	8004954 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a1d      	ldr	r2, [pc, #116]	@ (80049d0 <HAL_ADC_ConfigChannel+0x254>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d12b      	bne.n	80049b6 <HAL_ADC_ConfigChannel+0x23a>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a1c      	ldr	r2, [pc, #112]	@ (80049d4 <HAL_ADC_ConfigChannel+0x258>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d003      	beq.n	8004970 <HAL_ADC_ConfigChannel+0x1f4>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b11      	cmp	r3, #17
 800496e:	d122      	bne.n	80049b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a11      	ldr	r2, [pc, #68]	@ (80049d4 <HAL_ADC_ConfigChannel+0x258>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d111      	bne.n	80049b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004992:	4b11      	ldr	r3, [pc, #68]	@ (80049d8 <HAL_ADC_ConfigChannel+0x25c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a11      	ldr	r2, [pc, #68]	@ (80049dc <HAL_ADC_ConfigChannel+0x260>)
 8004998:	fba2 2303 	umull	r2, r3, r2, r3
 800499c:	0c9a      	lsrs	r2, r3, #18
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80049a8:	e002      	b.n	80049b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f9      	bne.n	80049aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	40012300 	.word	0x40012300
 80049d0:	40012000 	.word	0x40012000
 80049d4:	10000012 	.word	0x10000012
 80049d8:	20000208 	.word	0x20000208
 80049dc:	431bde83 	.word	0x431bde83

080049e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049e8:	4b79      	ldr	r3, [pc, #484]	@ (8004bd0 <ADC_Init+0x1f0>)
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6859      	ldr	r1, [r3, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	021a      	lsls	r2, r3, #8
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004a38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6859      	ldr	r1, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6899      	ldr	r1, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a72:	4a58      	ldr	r2, [pc, #352]	@ (8004bd4 <ADC_Init+0x1f4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d022      	beq.n	8004abe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6899      	ldr	r1, [r3, #8]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004aa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6899      	ldr	r1, [r3, #8]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	609a      	str	r2, [r3, #8]
 8004abc:	e00f      	b.n	8004ade <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004acc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004adc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0202 	bic.w	r2, r2, #2
 8004aec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6899      	ldr	r1, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	7e1b      	ldrb	r3, [r3, #24]
 8004af8:	005a      	lsls	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01b      	beq.n	8004b44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b1a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004b2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6859      	ldr	r1, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b36:	3b01      	subs	r3, #1
 8004b38:	035a      	lsls	r2, r3, #13
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	e007      	b.n	8004b54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b52:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	051a      	lsls	r2, r3, #20
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004b88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6899      	ldr	r1, [r3, #8]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b96:	025a      	lsls	r2, r3, #9
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6899      	ldr	r1, [r3, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	029a      	lsls	r2, r3, #10
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	609a      	str	r2, [r3, #8]
}
 8004bc4:	bf00      	nop
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	40012300 	.word	0x40012300
 8004bd4:	0f000001 	.word	0x0f000001

08004bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004be8:	4b0c      	ldr	r3, [pc, #48]	@ (8004c1c <__NVIC_SetPriorityGrouping+0x44>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c0a:	4a04      	ldr	r2, [pc, #16]	@ (8004c1c <__NVIC_SetPriorityGrouping+0x44>)
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	60d3      	str	r3, [r2, #12]
}
 8004c10:	bf00      	nop
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	e000ed00 	.word	0xe000ed00

08004c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c24:	4b04      	ldr	r3, [pc, #16]	@ (8004c38 <__NVIC_GetPriorityGrouping+0x18>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	0a1b      	lsrs	r3, r3, #8
 8004c2a:	f003 0307 	and.w	r3, r3, #7
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	e000ed00 	.word	0xe000ed00

08004c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	db0b      	blt.n	8004c66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	f003 021f 	and.w	r2, r3, #31
 8004c54:	4907      	ldr	r1, [pc, #28]	@ (8004c74 <__NVIC_EnableIRQ+0x38>)
 8004c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c5a:	095b      	lsrs	r3, r3, #5
 8004c5c:	2001      	movs	r0, #1
 8004c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	e000e100 	.word	0xe000e100

08004c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	6039      	str	r1, [r7, #0]
 8004c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	db0a      	blt.n	8004ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	490c      	ldr	r1, [pc, #48]	@ (8004cc4 <__NVIC_SetPriority+0x4c>)
 8004c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c96:	0112      	lsls	r2, r2, #4
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	440b      	add	r3, r1
 8004c9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ca0:	e00a      	b.n	8004cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	4908      	ldr	r1, [pc, #32]	@ (8004cc8 <__NVIC_SetPriority+0x50>)
 8004ca8:	79fb      	ldrb	r3, [r7, #7]
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	3b04      	subs	r3, #4
 8004cb0:	0112      	lsls	r2, r2, #4
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	761a      	strb	r2, [r3, #24]
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	e000e100 	.word	0xe000e100
 8004cc8:	e000ed00 	.word	0xe000ed00

08004ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b089      	sub	sp, #36	@ 0x24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	f1c3 0307 	rsb	r3, r3, #7
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	bf28      	it	cs
 8004cea:	2304      	movcs	r3, #4
 8004cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	2b06      	cmp	r3, #6
 8004cf4:	d902      	bls.n	8004cfc <NVIC_EncodePriority+0x30>
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	3b03      	subs	r3, #3
 8004cfa:	e000      	b.n	8004cfe <NVIC_EncodePriority+0x32>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0a:	43da      	mvns	r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	401a      	ands	r2, r3
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1e:	43d9      	mvns	r1, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d24:	4313      	orrs	r3, r2
         );
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3724      	adds	r7, #36	@ 0x24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
	...

08004d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d44:	d301      	bcc.n	8004d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d46:	2301      	movs	r3, #1
 8004d48:	e00f      	b.n	8004d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d74 <SysTick_Config+0x40>)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d52:	210f      	movs	r1, #15
 8004d54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d58:	f7ff ff8e 	bl	8004c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d5c:	4b05      	ldr	r3, [pc, #20]	@ (8004d74 <SysTick_Config+0x40>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d62:	4b04      	ldr	r3, [pc, #16]	@ (8004d74 <SysTick_Config+0x40>)
 8004d64:	2207      	movs	r2, #7
 8004d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	e000e010 	.word	0xe000e010

08004d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff ff29 	bl	8004bd8 <__NVIC_SetPriorityGrouping>
}
 8004d86:	bf00      	nop
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b086      	sub	sp, #24
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	4603      	mov	r3, r0
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	607a      	str	r2, [r7, #4]
 8004d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004da0:	f7ff ff3e 	bl	8004c20 <__NVIC_GetPriorityGrouping>
 8004da4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	68b9      	ldr	r1, [r7, #8]
 8004daa:	6978      	ldr	r0, [r7, #20]
 8004dac:	f7ff ff8e 	bl	8004ccc <NVIC_EncodePriority>
 8004db0:	4602      	mov	r2, r0
 8004db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004db6:	4611      	mov	r1, r2
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff ff5d 	bl	8004c78 <__NVIC_SetPriority>
}
 8004dbe:	bf00      	nop
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b082      	sub	sp, #8
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	4603      	mov	r3, r0
 8004dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff ff31 	bl	8004c3c <__NVIC_EnableIRQ>
}
 8004dda:	bf00      	nop
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b082      	sub	sp, #8
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7ff ffa2 	bl	8004d34 <SysTick_Config>
 8004df0:	4603      	mov	r3, r0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004e0e:	4b23      	ldr	r3, [pc, #140]	@ (8004e9c <HAL_FLASH_Program+0xa0>)
 8004e10:	7e1b      	ldrb	r3, [r3, #24]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <HAL_FLASH_Program+0x1e>
 8004e16:	2302      	movs	r3, #2
 8004e18:	e03b      	b.n	8004e92 <HAL_FLASH_Program+0x96>
 8004e1a:	4b20      	ldr	r3, [pc, #128]	@ (8004e9c <HAL_FLASH_Program+0xa0>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e20:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004e24:	f000 f870 	bl	8004f08 <FLASH_WaitForLastOperation>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004e2c:	7dfb      	ldrb	r3, [r7, #23]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d12b      	bne.n	8004e8a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d105      	bne.n	8004e44 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004e38:	783b      	ldrb	r3, [r7, #0]
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	68b8      	ldr	r0, [r7, #8]
 8004e3e:	f000 f91b 	bl	8005078 <FLASH_Program_Byte>
 8004e42:	e016      	b.n	8004e72 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d105      	bne.n	8004e56 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004e4a:	883b      	ldrh	r3, [r7, #0]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	68b8      	ldr	r0, [r7, #8]
 8004e50:	f000 f8ee 	bl	8005030 <FLASH_Program_HalfWord>
 8004e54:	e00d      	b.n	8004e72 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d105      	bne.n	8004e68 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	68b8      	ldr	r0, [r7, #8]
 8004e62:	f000 f8c3 	bl	8004fec <FLASH_Program_Word>
 8004e66:	e004      	b.n	8004e72 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004e68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e6c:	68b8      	ldr	r0, [r7, #8]
 8004e6e:	f000 f88b 	bl	8004f88 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e72:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004e76:	f000 f847 	bl	8004f08 <FLASH_WaitForLastOperation>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004e7e:	4b08      	ldr	r3, [pc, #32]	@ (8004ea0 <HAL_FLASH_Program+0xa4>)
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	4a07      	ldr	r2, [pc, #28]	@ (8004ea0 <HAL_FLASH_Program+0xa4>)
 8004e84:	f023 0301 	bic.w	r3, r3, #1
 8004e88:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004e8a:	4b04      	ldr	r3, [pc, #16]	@ (8004e9c <HAL_FLASH_Program+0xa0>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20001550 	.word	0x20001550
 8004ea0:	40023c00 	.word	0x40023c00

08004ea4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004eae:	4b0b      	ldr	r3, [pc, #44]	@ (8004edc <HAL_FLASH_Unlock+0x38>)
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	da0b      	bge.n	8004ece <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004eb6:	4b09      	ldr	r3, [pc, #36]	@ (8004edc <HAL_FLASH_Unlock+0x38>)
 8004eb8:	4a09      	ldr	r2, [pc, #36]	@ (8004ee0 <HAL_FLASH_Unlock+0x3c>)
 8004eba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004ebc:	4b07      	ldr	r3, [pc, #28]	@ (8004edc <HAL_FLASH_Unlock+0x38>)
 8004ebe:	4a09      	ldr	r2, [pc, #36]	@ (8004ee4 <HAL_FLASH_Unlock+0x40>)
 8004ec0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004ec2:	4b06      	ldr	r3, [pc, #24]	@ (8004edc <HAL_FLASH_Unlock+0x38>)
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	da01      	bge.n	8004ece <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004ece:	79fb      	ldrb	r3, [r7, #7]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	40023c00 	.word	0x40023c00
 8004ee0:	45670123 	.word	0x45670123
 8004ee4:	cdef89ab 	.word	0xcdef89ab

08004ee8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004eec:	4b05      	ldr	r3, [pc, #20]	@ (8004f04 <HAL_FLASH_Lock+0x1c>)
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	4a04      	ldr	r2, [pc, #16]	@ (8004f04 <HAL_FLASH_Lock+0x1c>)
 8004ef2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ef6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	40023c00 	.word	0x40023c00

08004f08 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f14:	4b1a      	ldr	r3, [pc, #104]	@ (8004f80 <FLASH_WaitForLastOperation+0x78>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004f1a:	f7ff fa3b 	bl	8004394 <HAL_GetTick>
 8004f1e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004f20:	e010      	b.n	8004f44 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f28:	d00c      	beq.n	8004f44 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d007      	beq.n	8004f40 <FLASH_WaitForLastOperation+0x38>
 8004f30:	f7ff fa30 	bl	8004394 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d201      	bcs.n	8004f44 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e019      	b.n	8004f78 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004f44:	4b0f      	ldr	r3, [pc, #60]	@ (8004f84 <FLASH_WaitForLastOperation+0x7c>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e8      	bne.n	8004f22 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004f50:	4b0c      	ldr	r3, [pc, #48]	@ (8004f84 <FLASH_WaitForLastOperation+0x7c>)
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004f5c:	4b09      	ldr	r3, [pc, #36]	@ (8004f84 <FLASH_WaitForLastOperation+0x7c>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004f62:	4b08      	ldr	r3, [pc, #32]	@ (8004f84 <FLASH_WaitForLastOperation+0x7c>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004f6e:	f000 f8a5 	bl	80050bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e000      	b.n	8004f78 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
  
}  
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	20001550 	.word	0x20001550
 8004f84:	40023c00 	.word	0x40023c00

08004f88 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004f94:	4b14      	ldr	r3, [pc, #80]	@ (8004fe8 <FLASH_Program_DoubleWord+0x60>)
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	4a13      	ldr	r2, [pc, #76]	@ (8004fe8 <FLASH_Program_DoubleWord+0x60>)
 8004f9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004fa0:	4b11      	ldr	r3, [pc, #68]	@ (8004fe8 <FLASH_Program_DoubleWord+0x60>)
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	4a10      	ldr	r2, [pc, #64]	@ (8004fe8 <FLASH_Program_DoubleWord+0x60>)
 8004fa6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004faa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004fac:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe8 <FLASH_Program_DoubleWord+0x60>)
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8004fe8 <FLASH_Program_DoubleWord+0x60>)
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004fbe:	f3bf 8f6f 	isb	sy
}
 8004fc2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004fc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	000a      	movs	r2, r1
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	68f9      	ldr	r1, [r7, #12]
 8004fd6:	3104      	adds	r1, #4
 8004fd8:	4613      	mov	r3, r2
 8004fda:	600b      	str	r3, [r1, #0]
}
 8004fdc:	bf00      	nop
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	40023c00 	.word	0x40023c00

08004fec <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800502c <FLASH_Program_Word+0x40>)
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	4a0c      	ldr	r2, [pc, #48]	@ (800502c <FLASH_Program_Word+0x40>)
 8004ffc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005000:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005002:	4b0a      	ldr	r3, [pc, #40]	@ (800502c <FLASH_Program_Word+0x40>)
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	4a09      	ldr	r2, [pc, #36]	@ (800502c <FLASH_Program_Word+0x40>)
 8005008:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800500c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800500e:	4b07      	ldr	r3, [pc, #28]	@ (800502c <FLASH_Program_Word+0x40>)
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	4a06      	ldr	r2, [pc, #24]	@ (800502c <FLASH_Program_Word+0x40>)
 8005014:	f043 0301 	orr.w	r3, r3, #1
 8005018:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	601a      	str	r2, [r3, #0]
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	40023c00 	.word	0x40023c00

08005030 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800503c:	4b0d      	ldr	r3, [pc, #52]	@ (8005074 <FLASH_Program_HalfWord+0x44>)
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	4a0c      	ldr	r2, [pc, #48]	@ (8005074 <FLASH_Program_HalfWord+0x44>)
 8005042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005046:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005048:	4b0a      	ldr	r3, [pc, #40]	@ (8005074 <FLASH_Program_HalfWord+0x44>)
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	4a09      	ldr	r2, [pc, #36]	@ (8005074 <FLASH_Program_HalfWord+0x44>)
 800504e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005052:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005054:	4b07      	ldr	r3, [pc, #28]	@ (8005074 <FLASH_Program_HalfWord+0x44>)
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	4a06      	ldr	r2, [pc, #24]	@ (8005074 <FLASH_Program_HalfWord+0x44>)
 800505a:	f043 0301 	orr.w	r3, r3, #1
 800505e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	887a      	ldrh	r2, [r7, #2]
 8005064:	801a      	strh	r2, [r3, #0]
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40023c00 	.word	0x40023c00

08005078 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005084:	4b0c      	ldr	r3, [pc, #48]	@ (80050b8 <FLASH_Program_Byte+0x40>)
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	4a0b      	ldr	r2, [pc, #44]	@ (80050b8 <FLASH_Program_Byte+0x40>)
 800508a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800508e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005090:	4b09      	ldr	r3, [pc, #36]	@ (80050b8 <FLASH_Program_Byte+0x40>)
 8005092:	4a09      	ldr	r2, [pc, #36]	@ (80050b8 <FLASH_Program_Byte+0x40>)
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005098:	4b07      	ldr	r3, [pc, #28]	@ (80050b8 <FLASH_Program_Byte+0x40>)
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	4a06      	ldr	r2, [pc, #24]	@ (80050b8 <FLASH_Program_Byte+0x40>)
 800509e:	f043 0301 	orr.w	r3, r3, #1
 80050a2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	78fa      	ldrb	r2, [r7, #3]
 80050a8:	701a      	strb	r2, [r3, #0]
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40023c00 	.word	0x40023c00

080050bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80050c0:	4b2f      	ldr	r3, [pc, #188]	@ (8005180 <FLASH_SetErrorCode+0xc4>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d008      	beq.n	80050de <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80050cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005184 <FLASH_SetErrorCode+0xc8>)
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	f043 0310 	orr.w	r3, r3, #16
 80050d4:	4a2b      	ldr	r2, [pc, #172]	@ (8005184 <FLASH_SetErrorCode+0xc8>)
 80050d6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80050d8:	4b29      	ldr	r3, [pc, #164]	@ (8005180 <FLASH_SetErrorCode+0xc4>)
 80050da:	2210      	movs	r2, #16
 80050dc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80050de:	4b28      	ldr	r3, [pc, #160]	@ (8005180 <FLASH_SetErrorCode+0xc4>)
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d008      	beq.n	80050fc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80050ea:	4b26      	ldr	r3, [pc, #152]	@ (8005184 <FLASH_SetErrorCode+0xc8>)
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f043 0308 	orr.w	r3, r3, #8
 80050f2:	4a24      	ldr	r2, [pc, #144]	@ (8005184 <FLASH_SetErrorCode+0xc8>)
 80050f4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80050f6:	4b22      	ldr	r3, [pc, #136]	@ (8005180 <FLASH_SetErrorCode+0xc4>)
 80050f8:	2220      	movs	r2, #32
 80050fa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80050fc:	4b20      	ldr	r3, [pc, #128]	@ (8005180 <FLASH_SetErrorCode+0xc4>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005104:	2b00      	cmp	r3, #0
 8005106:	d008      	beq.n	800511a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005108:	4b1e      	ldr	r3, [pc, #120]	@ (8005184 <FLASH_SetErrorCode+0xc8>)
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	f043 0304 	orr.w	r3, r3, #4
 8005110:	4a1c      	ldr	r2, [pc, #112]	@ (8005184 <FLASH_SetErrorCode+0xc8>)
 8005112:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005114:	4b1a      	ldr	r3, [pc, #104]	@ (8005180 <FLASH_SetErrorCode+0xc4>)
 8005116:	2240      	movs	r2, #64	@ 0x40
 8005118:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800511a:	4b19      	ldr	r3, [pc, #100]	@ (8005180 <FLASH_SetErrorCode+0xc4>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005122:	2b00      	cmp	r3, #0
 8005124:	d008      	beq.n	8005138 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005126:	4b17      	ldr	r3, [pc, #92]	@ (8005184 <FLASH_SetErrorCode+0xc8>)
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	f043 0302 	orr.w	r3, r3, #2
 800512e:	4a15      	ldr	r2, [pc, #84]	@ (8005184 <FLASH_SetErrorCode+0xc8>)
 8005130:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005132:	4b13      	ldr	r3, [pc, #76]	@ (8005180 <FLASH_SetErrorCode+0xc4>)
 8005134:	2280      	movs	r2, #128	@ 0x80
 8005136:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005138:	4b11      	ldr	r3, [pc, #68]	@ (8005180 <FLASH_SetErrorCode+0xc4>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005140:	2b00      	cmp	r3, #0
 8005142:	d009      	beq.n	8005158 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005144:	4b0f      	ldr	r3, [pc, #60]	@ (8005184 <FLASH_SetErrorCode+0xc8>)
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	f043 0301 	orr.w	r3, r3, #1
 800514c:	4a0d      	ldr	r2, [pc, #52]	@ (8005184 <FLASH_SetErrorCode+0xc8>)
 800514e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005150:	4b0b      	ldr	r3, [pc, #44]	@ (8005180 <FLASH_SetErrorCode+0xc4>)
 8005152:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005156:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005158:	4b09      	ldr	r3, [pc, #36]	@ (8005180 <FLASH_SetErrorCode+0xc4>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d008      	beq.n	8005176 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005164:	4b07      	ldr	r3, [pc, #28]	@ (8005184 <FLASH_SetErrorCode+0xc8>)
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	f043 0320 	orr.w	r3, r3, #32
 800516c:	4a05      	ldr	r2, [pc, #20]	@ (8005184 <FLASH_SetErrorCode+0xc8>)
 800516e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005170:	4b03      	ldr	r3, [pc, #12]	@ (8005180 <FLASH_SetErrorCode+0xc4>)
 8005172:	2202      	movs	r2, #2
 8005174:	60da      	str	r2, [r3, #12]
  }
}
 8005176:	bf00      	nop
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	40023c00 	.word	0x40023c00
 8005184:	20001550 	.word	0x20001550

08005188 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d102      	bne.n	80051a4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	e010      	b.n	80051c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d103      	bne.n	80051b2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80051aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	e009      	b.n	80051c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80051b2:	78fb      	ldrb	r3, [r7, #3]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d103      	bne.n	80051c0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80051b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	e002      	b.n	80051c6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80051c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80051c4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80051c6:	4b13      	ldr	r3, [pc, #76]	@ (8005214 <FLASH_Erase_Sector+0x8c>)
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	4a12      	ldr	r2, [pc, #72]	@ (8005214 <FLASH_Erase_Sector+0x8c>)
 80051cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80051d2:	4b10      	ldr	r3, [pc, #64]	@ (8005214 <FLASH_Erase_Sector+0x8c>)
 80051d4:	691a      	ldr	r2, [r3, #16]
 80051d6:	490f      	ldr	r1, [pc, #60]	@ (8005214 <FLASH_Erase_Sector+0x8c>)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80051de:	4b0d      	ldr	r3, [pc, #52]	@ (8005214 <FLASH_Erase_Sector+0x8c>)
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	4a0c      	ldr	r2, [pc, #48]	@ (8005214 <FLASH_Erase_Sector+0x8c>)
 80051e4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80051e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80051ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005214 <FLASH_Erase_Sector+0x8c>)
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	4313      	orrs	r3, r2
 80051f4:	4a07      	ldr	r2, [pc, #28]	@ (8005214 <FLASH_Erase_Sector+0x8c>)
 80051f6:	f043 0302 	orr.w	r3, r3, #2
 80051fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80051fc:	4b05      	ldr	r3, [pc, #20]	@ (8005214 <FLASH_Erase_Sector+0x8c>)
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	4a04      	ldr	r2, [pc, #16]	@ (8005214 <FLASH_Erase_Sector+0x8c>)
 8005202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005206:	6113      	str	r3, [r2, #16]
}
 8005208:	bf00      	nop
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	40023c00 	.word	0x40023c00

08005218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005218:	b480      	push	{r7}
 800521a:	b089      	sub	sp, #36	@ 0x24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005222:	2300      	movs	r3, #0
 8005224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005226:	2300      	movs	r3, #0
 8005228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800522a:	2300      	movs	r3, #0
 800522c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
 8005232:	e159      	b.n	80054e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005234:	2201      	movs	r2, #1
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	fa02 f303 	lsl.w	r3, r2, r3
 800523c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4013      	ands	r3, r2
 8005246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	429a      	cmp	r2, r3
 800524e:	f040 8148 	bne.w	80054e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	2b01      	cmp	r3, #1
 800525c:	d005      	beq.n	800526a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005266:	2b02      	cmp	r3, #2
 8005268:	d130      	bne.n	80052cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	2203      	movs	r2, #3
 8005276:	fa02 f303 	lsl.w	r3, r2, r3
 800527a:	43db      	mvns	r3, r3
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	4013      	ands	r3, r2
 8005280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	fa02 f303 	lsl.w	r3, r2, r3
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	4313      	orrs	r3, r2
 8005292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052a0:	2201      	movs	r2, #1
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	43db      	mvns	r3, r3
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	4013      	ands	r3, r2
 80052ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	f003 0201 	and.w	r2, r3, #1
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f003 0303 	and.w	r3, r3, #3
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d017      	beq.n	8005308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	2203      	movs	r2, #3
 80052e4:	fa02 f303 	lsl.w	r3, r2, r3
 80052e8:	43db      	mvns	r3, r3
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	4013      	ands	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	fa02 f303 	lsl.w	r3, r2, r3
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	4313      	orrs	r3, r2
 8005300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f003 0303 	and.w	r3, r3, #3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d123      	bne.n	800535c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	08da      	lsrs	r2, r3, #3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	3208      	adds	r2, #8
 800531c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	220f      	movs	r2, #15
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	43db      	mvns	r3, r3
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	4013      	ands	r3, r2
 8005336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	691a      	ldr	r2, [r3, #16]
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4313      	orrs	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	08da      	lsrs	r2, r3, #3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3208      	adds	r2, #8
 8005356:	69b9      	ldr	r1, [r7, #24]
 8005358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	2203      	movs	r2, #3
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	43db      	mvns	r3, r3
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4013      	ands	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f003 0203 	and.w	r2, r3, #3
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	4313      	orrs	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 80a2 	beq.w	80054e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	4b57      	ldr	r3, [pc, #348]	@ (8005500 <HAL_GPIO_Init+0x2e8>)
 80053a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a6:	4a56      	ldr	r2, [pc, #344]	@ (8005500 <HAL_GPIO_Init+0x2e8>)
 80053a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80053ae:	4b54      	ldr	r3, [pc, #336]	@ (8005500 <HAL_GPIO_Init+0x2e8>)
 80053b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053ba:	4a52      	ldr	r2, [pc, #328]	@ (8005504 <HAL_GPIO_Init+0x2ec>)
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	089b      	lsrs	r3, r3, #2
 80053c0:	3302      	adds	r3, #2
 80053c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	220f      	movs	r2, #15
 80053d2:	fa02 f303 	lsl.w	r3, r2, r3
 80053d6:	43db      	mvns	r3, r3
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	4013      	ands	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a49      	ldr	r2, [pc, #292]	@ (8005508 <HAL_GPIO_Init+0x2f0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d019      	beq.n	800541a <HAL_GPIO_Init+0x202>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a48      	ldr	r2, [pc, #288]	@ (800550c <HAL_GPIO_Init+0x2f4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d013      	beq.n	8005416 <HAL_GPIO_Init+0x1fe>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a47      	ldr	r2, [pc, #284]	@ (8005510 <HAL_GPIO_Init+0x2f8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00d      	beq.n	8005412 <HAL_GPIO_Init+0x1fa>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a46      	ldr	r2, [pc, #280]	@ (8005514 <HAL_GPIO_Init+0x2fc>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d007      	beq.n	800540e <HAL_GPIO_Init+0x1f6>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a45      	ldr	r2, [pc, #276]	@ (8005518 <HAL_GPIO_Init+0x300>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d101      	bne.n	800540a <HAL_GPIO_Init+0x1f2>
 8005406:	2304      	movs	r3, #4
 8005408:	e008      	b.n	800541c <HAL_GPIO_Init+0x204>
 800540a:	2307      	movs	r3, #7
 800540c:	e006      	b.n	800541c <HAL_GPIO_Init+0x204>
 800540e:	2303      	movs	r3, #3
 8005410:	e004      	b.n	800541c <HAL_GPIO_Init+0x204>
 8005412:	2302      	movs	r3, #2
 8005414:	e002      	b.n	800541c <HAL_GPIO_Init+0x204>
 8005416:	2301      	movs	r3, #1
 8005418:	e000      	b.n	800541c <HAL_GPIO_Init+0x204>
 800541a:	2300      	movs	r3, #0
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	f002 0203 	and.w	r2, r2, #3
 8005422:	0092      	lsls	r2, r2, #2
 8005424:	4093      	lsls	r3, r2
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	4313      	orrs	r3, r2
 800542a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800542c:	4935      	ldr	r1, [pc, #212]	@ (8005504 <HAL_GPIO_Init+0x2ec>)
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	089b      	lsrs	r3, r3, #2
 8005432:	3302      	adds	r3, #2
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800543a:	4b38      	ldr	r3, [pc, #224]	@ (800551c <HAL_GPIO_Init+0x304>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	43db      	mvns	r3, r3
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	4013      	ands	r3, r2
 8005448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800545e:	4a2f      	ldr	r2, [pc, #188]	@ (800551c <HAL_GPIO_Init+0x304>)
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005464:	4b2d      	ldr	r3, [pc, #180]	@ (800551c <HAL_GPIO_Init+0x304>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	43db      	mvns	r3, r3
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	4013      	ands	r3, r2
 8005472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005488:	4a24      	ldr	r2, [pc, #144]	@ (800551c <HAL_GPIO_Init+0x304>)
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800548e:	4b23      	ldr	r3, [pc, #140]	@ (800551c <HAL_GPIO_Init+0x304>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	43db      	mvns	r3, r3
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	4013      	ands	r3, r2
 800549c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054b2:	4a1a      	ldr	r2, [pc, #104]	@ (800551c <HAL_GPIO_Init+0x304>)
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054b8:	4b18      	ldr	r3, [pc, #96]	@ (800551c <HAL_GPIO_Init+0x304>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	43db      	mvns	r3, r3
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	4013      	ands	r3, r2
 80054c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	4313      	orrs	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054dc:	4a0f      	ldr	r2, [pc, #60]	@ (800551c <HAL_GPIO_Init+0x304>)
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	3301      	adds	r3, #1
 80054e6:	61fb      	str	r3, [r7, #28]
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	2b0f      	cmp	r3, #15
 80054ec:	f67f aea2 	bls.w	8005234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	3724      	adds	r7, #36	@ 0x24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40023800 	.word	0x40023800
 8005504:	40013800 	.word	0x40013800
 8005508:	40020000 	.word	0x40020000
 800550c:	40020400 	.word	0x40020400
 8005510:	40020800 	.word	0x40020800
 8005514:	40020c00 	.word	0x40020c00
 8005518:	40021000 	.word	0x40021000
 800551c:	40013c00 	.word	0x40013c00

08005520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	807b      	strh	r3, [r7, #2]
 800552c:	4613      	mov	r3, r2
 800552e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005530:	787b      	ldrb	r3, [r7, #1]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005536:	887a      	ldrh	r2, [r7, #2]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800553c:	e003      	b.n	8005546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800553e:	887b      	ldrh	r3, [r7, #2]
 8005540:	041a      	lsls	r2, r3, #16
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	619a      	str	r2, [r3, #24]
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
	...

08005554 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e12b      	b.n	80057be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7fe fc4e 	bl	8003e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2224      	movs	r2, #36	@ 0x24
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0201 	bic.w	r2, r2, #1
 8005596:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80055b8:	f001 f9b8 	bl	800692c <HAL_RCC_GetPCLK1Freq>
 80055bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	4a81      	ldr	r2, [pc, #516]	@ (80057c8 <HAL_I2C_Init+0x274>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d807      	bhi.n	80055d8 <HAL_I2C_Init+0x84>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4a80      	ldr	r2, [pc, #512]	@ (80057cc <HAL_I2C_Init+0x278>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	bf94      	ite	ls
 80055d0:	2301      	movls	r3, #1
 80055d2:	2300      	movhi	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	e006      	b.n	80055e6 <HAL_I2C_Init+0x92>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4a7d      	ldr	r2, [pc, #500]	@ (80057d0 <HAL_I2C_Init+0x27c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	bf94      	ite	ls
 80055e0:	2301      	movls	r3, #1
 80055e2:	2300      	movhi	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e0e7      	b.n	80057be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4a78      	ldr	r2, [pc, #480]	@ (80057d4 <HAL_I2C_Init+0x280>)
 80055f2:	fba2 2303 	umull	r2, r3, r2, r3
 80055f6:	0c9b      	lsrs	r3, r3, #18
 80055f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	430a      	orrs	r2, r1
 800560c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	4a6a      	ldr	r2, [pc, #424]	@ (80057c8 <HAL_I2C_Init+0x274>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d802      	bhi.n	8005628 <HAL_I2C_Init+0xd4>
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	3301      	adds	r3, #1
 8005626:	e009      	b.n	800563c <HAL_I2C_Init+0xe8>
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800562e:	fb02 f303 	mul.w	r3, r2, r3
 8005632:	4a69      	ldr	r2, [pc, #420]	@ (80057d8 <HAL_I2C_Init+0x284>)
 8005634:	fba2 2303 	umull	r2, r3, r2, r3
 8005638:	099b      	lsrs	r3, r3, #6
 800563a:	3301      	adds	r3, #1
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6812      	ldr	r2, [r2, #0]
 8005640:	430b      	orrs	r3, r1
 8005642:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800564e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	495c      	ldr	r1, [pc, #368]	@ (80057c8 <HAL_I2C_Init+0x274>)
 8005658:	428b      	cmp	r3, r1
 800565a:	d819      	bhi.n	8005690 <HAL_I2C_Init+0x13c>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	1e59      	subs	r1, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	fbb1 f3f3 	udiv	r3, r1, r3
 800566a:	1c59      	adds	r1, r3, #1
 800566c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005670:	400b      	ands	r3, r1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <HAL_I2C_Init+0x138>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1e59      	subs	r1, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	fbb1 f3f3 	udiv	r3, r1, r3
 8005684:	3301      	adds	r3, #1
 8005686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800568a:	e051      	b.n	8005730 <HAL_I2C_Init+0x1dc>
 800568c:	2304      	movs	r3, #4
 800568e:	e04f      	b.n	8005730 <HAL_I2C_Init+0x1dc>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d111      	bne.n	80056bc <HAL_I2C_Init+0x168>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	1e58      	subs	r0, r3, #1
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6859      	ldr	r1, [r3, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	440b      	add	r3, r1
 80056a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80056aa:	3301      	adds	r3, #1
 80056ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	bf0c      	ite	eq
 80056b4:	2301      	moveq	r3, #1
 80056b6:	2300      	movne	r3, #0
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	e012      	b.n	80056e2 <HAL_I2C_Init+0x18e>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	1e58      	subs	r0, r3, #1
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6859      	ldr	r1, [r3, #4]
 80056c4:	460b      	mov	r3, r1
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	0099      	lsls	r1, r3, #2
 80056cc:	440b      	add	r3, r1
 80056ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80056d2:	3301      	adds	r3, #1
 80056d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056d8:	2b00      	cmp	r3, #0
 80056da:	bf0c      	ite	eq
 80056dc:	2301      	moveq	r3, #1
 80056de:	2300      	movne	r3, #0
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <HAL_I2C_Init+0x196>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e022      	b.n	8005730 <HAL_I2C_Init+0x1dc>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10e      	bne.n	8005710 <HAL_I2C_Init+0x1bc>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	1e58      	subs	r0, r3, #1
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6859      	ldr	r1, [r3, #4]
 80056fa:	460b      	mov	r3, r1
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	440b      	add	r3, r1
 8005700:	fbb0 f3f3 	udiv	r3, r0, r3
 8005704:	3301      	adds	r3, #1
 8005706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800570a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800570e:	e00f      	b.n	8005730 <HAL_I2C_Init+0x1dc>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	1e58      	subs	r0, r3, #1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6859      	ldr	r1, [r3, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	440b      	add	r3, r1
 800571e:	0099      	lsls	r1, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	fbb0 f3f3 	udiv	r3, r0, r3
 8005726:	3301      	adds	r3, #1
 8005728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800572c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	6809      	ldr	r1, [r1, #0]
 8005734:	4313      	orrs	r3, r2
 8005736:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69da      	ldr	r2, [r3, #28]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800575e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6911      	ldr	r1, [r2, #16]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	68d2      	ldr	r2, [r2, #12]
 800576a:	4311      	orrs	r1, r2
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	430b      	orrs	r3, r1
 8005772:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	695a      	ldr	r2, [r3, #20]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	431a      	orrs	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0201 	orr.w	r2, r2, #1
 800579e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	000186a0 	.word	0x000186a0
 80057cc:	001e847f 	.word	0x001e847f
 80057d0:	003d08ff 	.word	0x003d08ff
 80057d4:	431bde83 	.word	0x431bde83
 80057d8:	10624dd3 	.word	0x10624dd3

080057dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b088      	sub	sp, #32
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	4608      	mov	r0, r1
 80057e6:	4611      	mov	r1, r2
 80057e8:	461a      	mov	r2, r3
 80057ea:	4603      	mov	r3, r0
 80057ec:	817b      	strh	r3, [r7, #10]
 80057ee:	460b      	mov	r3, r1
 80057f0:	813b      	strh	r3, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057f6:	f7fe fdcd 	bl	8004394 <HAL_GetTick>
 80057fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b20      	cmp	r3, #32
 8005806:	f040 80d9 	bne.w	80059bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	2319      	movs	r3, #25
 8005810:	2201      	movs	r2, #1
 8005812:	496d      	ldr	r1, [pc, #436]	@ (80059c8 <HAL_I2C_Mem_Write+0x1ec>)
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 f971 	bl	8005afc <I2C_WaitOnFlagUntilTimeout>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005820:	2302      	movs	r3, #2
 8005822:	e0cc      	b.n	80059be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <HAL_I2C_Mem_Write+0x56>
 800582e:	2302      	movs	r3, #2
 8005830:	e0c5      	b.n	80059be <HAL_I2C_Mem_Write+0x1e2>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b01      	cmp	r3, #1
 8005846:	d007      	beq.n	8005858 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f042 0201 	orr.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005866:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2221      	movs	r2, #33	@ 0x21
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2240      	movs	r2, #64	@ 0x40
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a3a      	ldr	r2, [r7, #32]
 8005882:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005888:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4a4d      	ldr	r2, [pc, #308]	@ (80059cc <HAL_I2C_Mem_Write+0x1f0>)
 8005898:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800589a:	88f8      	ldrh	r0, [r7, #6]
 800589c:	893a      	ldrh	r2, [r7, #8]
 800589e:	8979      	ldrh	r1, [r7, #10]
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	9301      	str	r3, [sp, #4]
 80058a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	4603      	mov	r3, r0
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f890 	bl	80059d0 <I2C_RequestMemoryWrite>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d052      	beq.n	800595c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e081      	b.n	80059be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 fa36 	bl	8005d30 <I2C_WaitOnTXEFlagUntilTimeout>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00d      	beq.n	80058e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d107      	bne.n	80058e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e06b      	b.n	80059be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ea:	781a      	ldrb	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005900:	3b01      	subs	r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800590c:	b29b      	uxth	r3, r3
 800590e:	3b01      	subs	r3, #1
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b04      	cmp	r3, #4
 8005922:	d11b      	bne.n	800595c <HAL_I2C_Mem_Write+0x180>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005928:	2b00      	cmp	r3, #0
 800592a:	d017      	beq.n	800595c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005930:	781a      	ldrb	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593c:	1c5a      	adds	r2, r3, #1
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005946:	3b01      	subs	r3, #1
 8005948:	b29a      	uxth	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005952:	b29b      	uxth	r3, r3
 8005954:	3b01      	subs	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1aa      	bne.n	80058ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 fa29 	bl	8005dc0 <I2C_WaitOnBTFFlagUntilTimeout>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00d      	beq.n	8005990 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005978:	2b04      	cmp	r3, #4
 800597a:	d107      	bne.n	800598c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800598a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e016      	b.n	80059be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800599e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	e000      	b.n	80059be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80059bc:	2302      	movs	r3, #2
  }
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	00100002 	.word	0x00100002
 80059cc:	ffff0000 	.word	0xffff0000

080059d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b088      	sub	sp, #32
 80059d4:	af02      	add	r7, sp, #8
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	4608      	mov	r0, r1
 80059da:	4611      	mov	r1, r2
 80059dc:	461a      	mov	r2, r3
 80059de:	4603      	mov	r3, r0
 80059e0:	817b      	strh	r3, [r7, #10]
 80059e2:	460b      	mov	r3, r1
 80059e4:	813b      	strh	r3, [r7, #8]
 80059e6:	4613      	mov	r3, r2
 80059e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 f878 	bl	8005afc <I2C_WaitOnFlagUntilTimeout>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00d      	beq.n	8005a2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a20:	d103      	bne.n	8005a2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a28:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e05f      	b.n	8005aee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a2e:	897b      	ldrh	r3, [r7, #10]
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	461a      	mov	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a40:	6a3a      	ldr	r2, [r7, #32]
 8005a42:	492d      	ldr	r1, [pc, #180]	@ (8005af8 <I2C_RequestMemoryWrite+0x128>)
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 f8d3 	bl	8005bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e04c      	b.n	8005aee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a54:	2300      	movs	r3, #0
 8005a56:	617b      	str	r3, [r7, #20]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a6c:	6a39      	ldr	r1, [r7, #32]
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 f95e 	bl	8005d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00d      	beq.n	8005a96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d107      	bne.n	8005a92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e02b      	b.n	8005aee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a96:	88fb      	ldrh	r3, [r7, #6]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d105      	bne.n	8005aa8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a9c:	893b      	ldrh	r3, [r7, #8]
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	611a      	str	r2, [r3, #16]
 8005aa6:	e021      	b.n	8005aec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005aa8:	893b      	ldrh	r3, [r7, #8]
 8005aaa:	0a1b      	lsrs	r3, r3, #8
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ab8:	6a39      	ldr	r1, [r7, #32]
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 f938 	bl	8005d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00d      	beq.n	8005ae2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d107      	bne.n	8005ade <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005adc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e005      	b.n	8005aee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ae2:	893b      	ldrh	r3, [r7, #8]
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	00010002 	.word	0x00010002

08005afc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	603b      	str	r3, [r7, #0]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b0c:	e048      	b.n	8005ba0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b14:	d044      	beq.n	8005ba0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b16:	f7fe fc3d 	bl	8004394 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d302      	bcc.n	8005b2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d139      	bne.n	8005ba0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	0c1b      	lsrs	r3, r3, #16
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d10d      	bne.n	8005b52 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	43da      	mvns	r2, r3
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	4013      	ands	r3, r2
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	bf0c      	ite	eq
 8005b48:	2301      	moveq	r3, #1
 8005b4a:	2300      	movne	r3, #0
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	461a      	mov	r2, r3
 8005b50:	e00c      	b.n	8005b6c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	43da      	mvns	r2, r3
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	bf0c      	ite	eq
 8005b64:	2301      	moveq	r3, #1
 8005b66:	2300      	movne	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	79fb      	ldrb	r3, [r7, #7]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d116      	bne.n	8005ba0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8c:	f043 0220 	orr.w	r2, r3, #32
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e023      	b.n	8005be8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	0c1b      	lsrs	r3, r3, #16
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d10d      	bne.n	8005bc6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	43da      	mvns	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	bf0c      	ite	eq
 8005bbc:	2301      	moveq	r3, #1
 8005bbe:	2300      	movne	r3, #0
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	e00c      	b.n	8005be0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	43da      	mvns	r2, r3
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	bf0c      	ite	eq
 8005bd8:	2301      	moveq	r3, #1
 8005bda:	2300      	movne	r3, #0
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	461a      	mov	r2, r3
 8005be0:	79fb      	ldrb	r3, [r7, #7]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d093      	beq.n	8005b0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bfe:	e071      	b.n	8005ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c0e:	d123      	bne.n	8005c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c1e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c44:	f043 0204 	orr.w	r2, r3, #4
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e067      	b.n	8005d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c5e:	d041      	beq.n	8005ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c60:	f7fe fb98 	bl	8004394 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d302      	bcc.n	8005c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d136      	bne.n	8005ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	0c1b      	lsrs	r3, r3, #16
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d10c      	bne.n	8005c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	43da      	mvns	r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	bf14      	ite	ne
 8005c92:	2301      	movne	r3, #1
 8005c94:	2300      	moveq	r3, #0
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	e00b      	b.n	8005cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	43da      	mvns	r2, r3
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	bf14      	ite	ne
 8005cac:	2301      	movne	r3, #1
 8005cae:	2300      	moveq	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d016      	beq.n	8005ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd0:	f043 0220 	orr.w	r2, r3, #32
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e021      	b.n	8005d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	0c1b      	lsrs	r3, r3, #16
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d10c      	bne.n	8005d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	43da      	mvns	r2, r3
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	bf14      	ite	ne
 8005d00:	2301      	movne	r3, #1
 8005d02:	2300      	moveq	r3, #0
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	e00b      	b.n	8005d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	43da      	mvns	r2, r3
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	4013      	ands	r3, r2
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	bf14      	ite	ne
 8005d1a:	2301      	movne	r3, #1
 8005d1c:	2300      	moveq	r3, #0
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f47f af6d 	bne.w	8005c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d3c:	e034      	b.n	8005da8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 f886 	bl	8005e50 <I2C_IsAcknowledgeFailed>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e034      	b.n	8005db8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d54:	d028      	beq.n	8005da8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d56:	f7fe fb1d 	bl	8004394 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d302      	bcc.n	8005d6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d11d      	bne.n	8005da8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d76:	2b80      	cmp	r3, #128	@ 0x80
 8005d78:	d016      	beq.n	8005da8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d94:	f043 0220 	orr.w	r2, r3, #32
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e007      	b.n	8005db8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db2:	2b80      	cmp	r3, #128	@ 0x80
 8005db4:	d1c3      	bne.n	8005d3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005dcc:	e034      	b.n	8005e38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f83e 	bl	8005e50 <I2C_IsAcknowledgeFailed>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e034      	b.n	8005e48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005de4:	d028      	beq.n	8005e38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de6:	f7fe fad5 	bl	8004394 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d302      	bcc.n	8005dfc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d11d      	bne.n	8005e38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d016      	beq.n	8005e38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2220      	movs	r2, #32
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e24:	f043 0220 	orr.w	r2, r3, #32
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e007      	b.n	8005e48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f003 0304 	and.w	r3, r3, #4
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d1c3      	bne.n	8005dce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e66:	d11b      	bne.n	8005ea0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8c:	f043 0204 	orr.w	r2, r3, #4
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e000      	b.n	8005ea2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b086      	sub	sp, #24
 8005eb2:	af02      	add	r7, sp, #8
 8005eb4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e101      	b.n	80060c4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d106      	bne.n	8005ee0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7fd ffe6 	bl	8003eac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2203      	movs	r2, #3
 8005ee4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005eee:	d102      	bne.n	8005ef6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 fd8e 	bl	8006a1c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6818      	ldr	r0, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	7c1a      	ldrb	r2, [r3, #16]
 8005f08:	f88d 2000 	strb.w	r2, [sp]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f10:	f000 fd20 	bl	8006954 <USB_CoreInit>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d005      	beq.n	8005f26 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e0ce      	b.n	80060c4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 fd86 	bl	8006a3e <USB_SetCurrentMode>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e0bf      	b.n	80060c4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f44:	2300      	movs	r3, #0
 8005f46:	73fb      	strb	r3, [r7, #15]
 8005f48:	e04a      	b.n	8005fe0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005f4a:	7bfa      	ldrb	r2, [r7, #15]
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	440b      	add	r3, r1
 8005f58:	3315      	adds	r3, #21
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005f5e:	7bfa      	ldrb	r2, [r7, #15]
 8005f60:	6879      	ldr	r1, [r7, #4]
 8005f62:	4613      	mov	r3, r2
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	440b      	add	r3, r1
 8005f6c:	3314      	adds	r3, #20
 8005f6e:	7bfa      	ldrb	r2, [r7, #15]
 8005f70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005f72:	7bfa      	ldrb	r2, [r7, #15]
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	b298      	uxth	r0, r3
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	4413      	add	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	440b      	add	r3, r1
 8005f84:	332e      	adds	r3, #46	@ 0x2e
 8005f86:	4602      	mov	r2, r0
 8005f88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005f8a:	7bfa      	ldrb	r2, [r7, #15]
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	440b      	add	r3, r1
 8005f98:	3318      	adds	r3, #24
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005f9e:	7bfa      	ldrb	r2, [r7, #15]
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	4413      	add	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	440b      	add	r3, r1
 8005fac:	331c      	adds	r3, #28
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005fb2:	7bfa      	ldrb	r2, [r7, #15]
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	00db      	lsls	r3, r3, #3
 8005fba:	4413      	add	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	440b      	add	r3, r1
 8005fc0:	3320      	adds	r3, #32
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005fc6:	7bfa      	ldrb	r2, [r7, #15]
 8005fc8:	6879      	ldr	r1, [r7, #4]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	00db      	lsls	r3, r3, #3
 8005fce:	4413      	add	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	440b      	add	r3, r1
 8005fd4:	3324      	adds	r3, #36	@ 0x24
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	73fb      	strb	r3, [r7, #15]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	791b      	ldrb	r3, [r3, #4]
 8005fe4:	7bfa      	ldrb	r2, [r7, #15]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d3af      	bcc.n	8005f4a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fea:	2300      	movs	r3, #0
 8005fec:	73fb      	strb	r3, [r7, #15]
 8005fee:	e044      	b.n	800607a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ff0:	7bfa      	ldrb	r2, [r7, #15]
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	440b      	add	r3, r1
 8005ffe:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006002:	2200      	movs	r2, #0
 8006004:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006006:	7bfa      	ldrb	r2, [r7, #15]
 8006008:	6879      	ldr	r1, [r7, #4]
 800600a:	4613      	mov	r3, r2
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	440b      	add	r3, r1
 8006014:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006018:	7bfa      	ldrb	r2, [r7, #15]
 800601a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800601c:	7bfa      	ldrb	r2, [r7, #15]
 800601e:	6879      	ldr	r1, [r7, #4]
 8006020:	4613      	mov	r3, r2
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	4413      	add	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	440b      	add	r3, r1
 800602a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800602e:	2200      	movs	r2, #0
 8006030:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006032:	7bfa      	ldrb	r2, [r7, #15]
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	4613      	mov	r3, r2
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	440b      	add	r3, r1
 8006040:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006048:	7bfa      	ldrb	r2, [r7, #15]
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	4613      	mov	r3, r2
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	440b      	add	r3, r1
 8006056:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800605e:	7bfa      	ldrb	r2, [r7, #15]
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	4613      	mov	r3, r2
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	4413      	add	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	440b      	add	r3, r1
 800606c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006074:	7bfb      	ldrb	r3, [r7, #15]
 8006076:	3301      	adds	r3, #1
 8006078:	73fb      	strb	r3, [r7, #15]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	791b      	ldrb	r3, [r3, #4]
 800607e:	7bfa      	ldrb	r2, [r7, #15]
 8006080:	429a      	cmp	r2, r3
 8006082:	d3b5      	bcc.n	8005ff0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6818      	ldr	r0, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	7c1a      	ldrb	r2, [r3, #16]
 800608c:	f88d 2000 	strb.w	r2, [sp]
 8006090:	3304      	adds	r3, #4
 8006092:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006094:	f000 fd20 	bl	8006ad8 <USB_DevInit>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d005      	beq.n	80060aa <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2202      	movs	r2, #2
 80060a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e00c      	b.n	80060c4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 fee8 	bl	8006e92 <USB_DevDisconnect>

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e267      	b.n	80065ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d075      	beq.n	80061d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060ea:	4b88      	ldr	r3, [pc, #544]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f003 030c 	and.w	r3, r3, #12
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	d00c      	beq.n	8006110 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060f6:	4b85      	ldr	r3, [pc, #532]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060fe:	2b08      	cmp	r3, #8
 8006100:	d112      	bne.n	8006128 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006102:	4b82      	ldr	r3, [pc, #520]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800610a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800610e:	d10b      	bne.n	8006128 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006110:	4b7e      	ldr	r3, [pc, #504]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d05b      	beq.n	80061d4 <HAL_RCC_OscConfig+0x108>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d157      	bne.n	80061d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e242      	b.n	80065ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006130:	d106      	bne.n	8006140 <HAL_RCC_OscConfig+0x74>
 8006132:	4b76      	ldr	r3, [pc, #472]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a75      	ldr	r2, [pc, #468]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 8006138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800613c:	6013      	str	r3, [r2, #0]
 800613e:	e01d      	b.n	800617c <HAL_RCC_OscConfig+0xb0>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006148:	d10c      	bne.n	8006164 <HAL_RCC_OscConfig+0x98>
 800614a:	4b70      	ldr	r3, [pc, #448]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a6f      	ldr	r2, [pc, #444]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 8006150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	4b6d      	ldr	r3, [pc, #436]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a6c      	ldr	r2, [pc, #432]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 800615c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006160:	6013      	str	r3, [r2, #0]
 8006162:	e00b      	b.n	800617c <HAL_RCC_OscConfig+0xb0>
 8006164:	4b69      	ldr	r3, [pc, #420]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a68      	ldr	r2, [pc, #416]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 800616a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	4b66      	ldr	r3, [pc, #408]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a65      	ldr	r2, [pc, #404]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 8006176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800617a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d013      	beq.n	80061ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006184:	f7fe f906 	bl	8004394 <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800618c:	f7fe f902 	bl	8004394 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b64      	cmp	r3, #100	@ 0x64
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e207      	b.n	80065ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800619e:	4b5b      	ldr	r3, [pc, #364]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0f0      	beq.n	800618c <HAL_RCC_OscConfig+0xc0>
 80061aa:	e014      	b.n	80061d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ac:	f7fe f8f2 	bl	8004394 <HAL_GetTick>
 80061b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061b4:	f7fe f8ee 	bl	8004394 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b64      	cmp	r3, #100	@ 0x64
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e1f3      	b.n	80065ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061c6:	4b51      	ldr	r3, [pc, #324]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f0      	bne.n	80061b4 <HAL_RCC_OscConfig+0xe8>
 80061d2:	e000      	b.n	80061d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d063      	beq.n	80062aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061e2:	4b4a      	ldr	r3, [pc, #296]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 030c 	and.w	r3, r3, #12
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00b      	beq.n	8006206 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061ee:	4b47      	ldr	r3, [pc, #284]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061f6:	2b08      	cmp	r3, #8
 80061f8:	d11c      	bne.n	8006234 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061fa:	4b44      	ldr	r3, [pc, #272]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d116      	bne.n	8006234 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006206:	4b41      	ldr	r3, [pc, #260]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d005      	beq.n	800621e <HAL_RCC_OscConfig+0x152>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d001      	beq.n	800621e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e1c7      	b.n	80065ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800621e:	4b3b      	ldr	r3, [pc, #236]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	4937      	ldr	r1, [pc, #220]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 800622e:	4313      	orrs	r3, r2
 8006230:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006232:	e03a      	b.n	80062aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d020      	beq.n	800627e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800623c:	4b34      	ldr	r3, [pc, #208]	@ (8006310 <HAL_RCC_OscConfig+0x244>)
 800623e:	2201      	movs	r2, #1
 8006240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006242:	f7fe f8a7 	bl	8004394 <HAL_GetTick>
 8006246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006248:	e008      	b.n	800625c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800624a:	f7fe f8a3 	bl	8004394 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d901      	bls.n	800625c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e1a8      	b.n	80065ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800625c:	4b2b      	ldr	r3, [pc, #172]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d0f0      	beq.n	800624a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006268:	4b28      	ldr	r3, [pc, #160]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	00db      	lsls	r3, r3, #3
 8006276:	4925      	ldr	r1, [pc, #148]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 8006278:	4313      	orrs	r3, r2
 800627a:	600b      	str	r3, [r1, #0]
 800627c:	e015      	b.n	80062aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800627e:	4b24      	ldr	r3, [pc, #144]	@ (8006310 <HAL_RCC_OscConfig+0x244>)
 8006280:	2200      	movs	r2, #0
 8006282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006284:	f7fe f886 	bl	8004394 <HAL_GetTick>
 8006288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800628a:	e008      	b.n	800629e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800628c:	f7fe f882 	bl	8004394 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b02      	cmp	r3, #2
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e187      	b.n	80065ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800629e:	4b1b      	ldr	r3, [pc, #108]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1f0      	bne.n	800628c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0308 	and.w	r3, r3, #8
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d036      	beq.n	8006324 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d016      	beq.n	80062ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062be:	4b15      	ldr	r3, [pc, #84]	@ (8006314 <HAL_RCC_OscConfig+0x248>)
 80062c0:	2201      	movs	r2, #1
 80062c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c4:	f7fe f866 	bl	8004394 <HAL_GetTick>
 80062c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062ca:	e008      	b.n	80062de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062cc:	f7fe f862 	bl	8004394 <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d901      	bls.n	80062de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e167      	b.n	80065ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062de:	4b0b      	ldr	r3, [pc, #44]	@ (800630c <HAL_RCC_OscConfig+0x240>)
 80062e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0f0      	beq.n	80062cc <HAL_RCC_OscConfig+0x200>
 80062ea:	e01b      	b.n	8006324 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062ec:	4b09      	ldr	r3, [pc, #36]	@ (8006314 <HAL_RCC_OscConfig+0x248>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062f2:	f7fe f84f 	bl	8004394 <HAL_GetTick>
 80062f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062f8:	e00e      	b.n	8006318 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062fa:	f7fe f84b 	bl	8004394 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	2b02      	cmp	r3, #2
 8006306:	d907      	bls.n	8006318 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e150      	b.n	80065ae <HAL_RCC_OscConfig+0x4e2>
 800630c:	40023800 	.word	0x40023800
 8006310:	42470000 	.word	0x42470000
 8006314:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006318:	4b88      	ldr	r3, [pc, #544]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 800631a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1ea      	bne.n	80062fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0304 	and.w	r3, r3, #4
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 8097 	beq.w	8006460 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006332:	2300      	movs	r3, #0
 8006334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006336:	4b81      	ldr	r3, [pc, #516]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 8006338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10f      	bne.n	8006362 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006342:	2300      	movs	r3, #0
 8006344:	60bb      	str	r3, [r7, #8]
 8006346:	4b7d      	ldr	r3, [pc, #500]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 8006348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634a:	4a7c      	ldr	r2, [pc, #496]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 800634c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006350:	6413      	str	r3, [r2, #64]	@ 0x40
 8006352:	4b7a      	ldr	r3, [pc, #488]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 8006354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800635a:	60bb      	str	r3, [r7, #8]
 800635c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800635e:	2301      	movs	r3, #1
 8006360:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006362:	4b77      	ldr	r3, [pc, #476]	@ (8006540 <HAL_RCC_OscConfig+0x474>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800636a:	2b00      	cmp	r3, #0
 800636c:	d118      	bne.n	80063a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800636e:	4b74      	ldr	r3, [pc, #464]	@ (8006540 <HAL_RCC_OscConfig+0x474>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a73      	ldr	r2, [pc, #460]	@ (8006540 <HAL_RCC_OscConfig+0x474>)
 8006374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800637a:	f7fe f80b 	bl	8004394 <HAL_GetTick>
 800637e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006380:	e008      	b.n	8006394 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006382:	f7fe f807 	bl	8004394 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d901      	bls.n	8006394 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e10c      	b.n	80065ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006394:	4b6a      	ldr	r3, [pc, #424]	@ (8006540 <HAL_RCC_OscConfig+0x474>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0f0      	beq.n	8006382 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d106      	bne.n	80063b6 <HAL_RCC_OscConfig+0x2ea>
 80063a8:	4b64      	ldr	r3, [pc, #400]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 80063aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ac:	4a63      	ldr	r2, [pc, #396]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 80063ae:	f043 0301 	orr.w	r3, r3, #1
 80063b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80063b4:	e01c      	b.n	80063f0 <HAL_RCC_OscConfig+0x324>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	2b05      	cmp	r3, #5
 80063bc:	d10c      	bne.n	80063d8 <HAL_RCC_OscConfig+0x30c>
 80063be:	4b5f      	ldr	r3, [pc, #380]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 80063c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063c2:	4a5e      	ldr	r2, [pc, #376]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 80063c4:	f043 0304 	orr.w	r3, r3, #4
 80063c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80063ca:	4b5c      	ldr	r3, [pc, #368]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 80063cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ce:	4a5b      	ldr	r2, [pc, #364]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 80063d0:	f043 0301 	orr.w	r3, r3, #1
 80063d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80063d6:	e00b      	b.n	80063f0 <HAL_RCC_OscConfig+0x324>
 80063d8:	4b58      	ldr	r3, [pc, #352]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 80063da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063dc:	4a57      	ldr	r2, [pc, #348]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 80063de:	f023 0301 	bic.w	r3, r3, #1
 80063e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80063e4:	4b55      	ldr	r3, [pc, #340]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 80063e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063e8:	4a54      	ldr	r2, [pc, #336]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 80063ea:	f023 0304 	bic.w	r3, r3, #4
 80063ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d015      	beq.n	8006424 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f8:	f7fd ffcc 	bl	8004394 <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063fe:	e00a      	b.n	8006416 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006400:	f7fd ffc8 	bl	8004394 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800640e:	4293      	cmp	r3, r2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e0cb      	b.n	80065ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006416:	4b49      	ldr	r3, [pc, #292]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 8006418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d0ee      	beq.n	8006400 <HAL_RCC_OscConfig+0x334>
 8006422:	e014      	b.n	800644e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006424:	f7fd ffb6 	bl	8004394 <HAL_GetTick>
 8006428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800642a:	e00a      	b.n	8006442 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800642c:	f7fd ffb2 	bl	8004394 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800643a:	4293      	cmp	r3, r2
 800643c:	d901      	bls.n	8006442 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e0b5      	b.n	80065ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006442:	4b3e      	ldr	r3, [pc, #248]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 8006444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1ee      	bne.n	800642c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800644e:	7dfb      	ldrb	r3, [r7, #23]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d105      	bne.n	8006460 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006454:	4b39      	ldr	r3, [pc, #228]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 8006456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006458:	4a38      	ldr	r2, [pc, #224]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 800645a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800645e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 80a1 	beq.w	80065ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800646a:	4b34      	ldr	r3, [pc, #208]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f003 030c 	and.w	r3, r3, #12
 8006472:	2b08      	cmp	r3, #8
 8006474:	d05c      	beq.n	8006530 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	2b02      	cmp	r3, #2
 800647c:	d141      	bne.n	8006502 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800647e:	4b31      	ldr	r3, [pc, #196]	@ (8006544 <HAL_RCC_OscConfig+0x478>)
 8006480:	2200      	movs	r2, #0
 8006482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006484:	f7fd ff86 	bl	8004394 <HAL_GetTick>
 8006488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800648c:	f7fd ff82 	bl	8004394 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b02      	cmp	r3, #2
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e087      	b.n	80065ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800649e:	4b27      	ldr	r3, [pc, #156]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1f0      	bne.n	800648c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	69da      	ldr	r2, [r3, #28]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	431a      	orrs	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b8:	019b      	lsls	r3, r3, #6
 80064ba:	431a      	orrs	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c0:	085b      	lsrs	r3, r3, #1
 80064c2:	3b01      	subs	r3, #1
 80064c4:	041b      	lsls	r3, r3, #16
 80064c6:	431a      	orrs	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064cc:	061b      	lsls	r3, r3, #24
 80064ce:	491b      	ldr	r1, [pc, #108]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006544 <HAL_RCC_OscConfig+0x478>)
 80064d6:	2201      	movs	r2, #1
 80064d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064da:	f7fd ff5b 	bl	8004394 <HAL_GetTick>
 80064de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064e0:	e008      	b.n	80064f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064e2:	f7fd ff57 	bl	8004394 <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d901      	bls.n	80064f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e05c      	b.n	80065ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064f4:	4b11      	ldr	r3, [pc, #68]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d0f0      	beq.n	80064e2 <HAL_RCC_OscConfig+0x416>
 8006500:	e054      	b.n	80065ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006502:	4b10      	ldr	r3, [pc, #64]	@ (8006544 <HAL_RCC_OscConfig+0x478>)
 8006504:	2200      	movs	r2, #0
 8006506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006508:	f7fd ff44 	bl	8004394 <HAL_GetTick>
 800650c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800650e:	e008      	b.n	8006522 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006510:	f7fd ff40 	bl	8004394 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e045      	b.n	80065ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006522:	4b06      	ldr	r3, [pc, #24]	@ (800653c <HAL_RCC_OscConfig+0x470>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1f0      	bne.n	8006510 <HAL_RCC_OscConfig+0x444>
 800652e:	e03d      	b.n	80065ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d107      	bne.n	8006548 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e038      	b.n	80065ae <HAL_RCC_OscConfig+0x4e2>
 800653c:	40023800 	.word	0x40023800
 8006540:	40007000 	.word	0x40007000
 8006544:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006548:	4b1b      	ldr	r3, [pc, #108]	@ (80065b8 <HAL_RCC_OscConfig+0x4ec>)
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d028      	beq.n	80065a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006560:	429a      	cmp	r2, r3
 8006562:	d121      	bne.n	80065a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800656e:	429a      	cmp	r2, r3
 8006570:	d11a      	bne.n	80065a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006578:	4013      	ands	r3, r2
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800657e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006580:	4293      	cmp	r3, r2
 8006582:	d111      	bne.n	80065a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658e:	085b      	lsrs	r3, r3, #1
 8006590:	3b01      	subs	r3, #1
 8006592:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006594:	429a      	cmp	r2, r3
 8006596:	d107      	bne.n	80065a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d001      	beq.n	80065ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e000      	b.n	80065ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	40023800 	.word	0x40023800

080065bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e0cc      	b.n	800676a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065d0:	4b68      	ldr	r3, [pc, #416]	@ (8006774 <HAL_RCC_ClockConfig+0x1b8>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0307 	and.w	r3, r3, #7
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d90c      	bls.n	80065f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065de:	4b65      	ldr	r3, [pc, #404]	@ (8006774 <HAL_RCC_ClockConfig+0x1b8>)
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	b2d2      	uxtb	r2, r2
 80065e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065e6:	4b63      	ldr	r3, [pc, #396]	@ (8006774 <HAL_RCC_ClockConfig+0x1b8>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0307 	and.w	r3, r3, #7
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d001      	beq.n	80065f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e0b8      	b.n	800676a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d020      	beq.n	8006646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006610:	4b59      	ldr	r3, [pc, #356]	@ (8006778 <HAL_RCC_ClockConfig+0x1bc>)
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	4a58      	ldr	r2, [pc, #352]	@ (8006778 <HAL_RCC_ClockConfig+0x1bc>)
 8006616:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800661a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0308 	and.w	r3, r3, #8
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006628:	4b53      	ldr	r3, [pc, #332]	@ (8006778 <HAL_RCC_ClockConfig+0x1bc>)
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	4a52      	ldr	r2, [pc, #328]	@ (8006778 <HAL_RCC_ClockConfig+0x1bc>)
 800662e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006634:	4b50      	ldr	r3, [pc, #320]	@ (8006778 <HAL_RCC_ClockConfig+0x1bc>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	494d      	ldr	r1, [pc, #308]	@ (8006778 <HAL_RCC_ClockConfig+0x1bc>)
 8006642:	4313      	orrs	r3, r2
 8006644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	d044      	beq.n	80066dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d107      	bne.n	800666a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800665a:	4b47      	ldr	r3, [pc, #284]	@ (8006778 <HAL_RCC_ClockConfig+0x1bc>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d119      	bne.n	800669a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e07f      	b.n	800676a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2b02      	cmp	r3, #2
 8006670:	d003      	beq.n	800667a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006676:	2b03      	cmp	r3, #3
 8006678:	d107      	bne.n	800668a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800667a:	4b3f      	ldr	r3, [pc, #252]	@ (8006778 <HAL_RCC_ClockConfig+0x1bc>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d109      	bne.n	800669a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e06f      	b.n	800676a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800668a:	4b3b      	ldr	r3, [pc, #236]	@ (8006778 <HAL_RCC_ClockConfig+0x1bc>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e067      	b.n	800676a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800669a:	4b37      	ldr	r3, [pc, #220]	@ (8006778 <HAL_RCC_ClockConfig+0x1bc>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f023 0203 	bic.w	r2, r3, #3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	4934      	ldr	r1, [pc, #208]	@ (8006778 <HAL_RCC_ClockConfig+0x1bc>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066ac:	f7fd fe72 	bl	8004394 <HAL_GetTick>
 80066b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066b2:	e00a      	b.n	80066ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066b4:	f7fd fe6e 	bl	8004394 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d901      	bls.n	80066ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e04f      	b.n	800676a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ca:	4b2b      	ldr	r3, [pc, #172]	@ (8006778 <HAL_RCC_ClockConfig+0x1bc>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 020c 	and.w	r2, r3, #12
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	429a      	cmp	r2, r3
 80066da:	d1eb      	bne.n	80066b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066dc:	4b25      	ldr	r3, [pc, #148]	@ (8006774 <HAL_RCC_ClockConfig+0x1b8>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0307 	and.w	r3, r3, #7
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d20c      	bcs.n	8006704 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ea:	4b22      	ldr	r3, [pc, #136]	@ (8006774 <HAL_RCC_ClockConfig+0x1b8>)
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066f2:	4b20      	ldr	r3, [pc, #128]	@ (8006774 <HAL_RCC_ClockConfig+0x1b8>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d001      	beq.n	8006704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e032      	b.n	800676a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b00      	cmp	r3, #0
 800670e:	d008      	beq.n	8006722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006710:	4b19      	ldr	r3, [pc, #100]	@ (8006778 <HAL_RCC_ClockConfig+0x1bc>)
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	4916      	ldr	r1, [pc, #88]	@ (8006778 <HAL_RCC_ClockConfig+0x1bc>)
 800671e:	4313      	orrs	r3, r2
 8006720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0308 	and.w	r3, r3, #8
 800672a:	2b00      	cmp	r3, #0
 800672c:	d009      	beq.n	8006742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800672e:	4b12      	ldr	r3, [pc, #72]	@ (8006778 <HAL_RCC_ClockConfig+0x1bc>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	490e      	ldr	r1, [pc, #56]	@ (8006778 <HAL_RCC_ClockConfig+0x1bc>)
 800673e:	4313      	orrs	r3, r2
 8006740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006742:	f000 f821 	bl	8006788 <HAL_RCC_GetSysClockFreq>
 8006746:	4602      	mov	r2, r0
 8006748:	4b0b      	ldr	r3, [pc, #44]	@ (8006778 <HAL_RCC_ClockConfig+0x1bc>)
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	091b      	lsrs	r3, r3, #4
 800674e:	f003 030f 	and.w	r3, r3, #15
 8006752:	490a      	ldr	r1, [pc, #40]	@ (800677c <HAL_RCC_ClockConfig+0x1c0>)
 8006754:	5ccb      	ldrb	r3, [r1, r3]
 8006756:	fa22 f303 	lsr.w	r3, r2, r3
 800675a:	4a09      	ldr	r2, [pc, #36]	@ (8006780 <HAL_RCC_ClockConfig+0x1c4>)
 800675c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800675e:	4b09      	ldr	r3, [pc, #36]	@ (8006784 <HAL_RCC_ClockConfig+0x1c8>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4618      	mov	r0, r3
 8006764:	f7fd fdd2 	bl	800430c <HAL_InitTick>

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	40023c00 	.word	0x40023c00
 8006778:	40023800 	.word	0x40023800
 800677c:	0800f8e8 	.word	0x0800f8e8
 8006780:	20000208 	.word	0x20000208
 8006784:	20000224 	.word	0x20000224

08006788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800678c:	b090      	sub	sp, #64	@ 0x40
 800678e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	637b      	str	r3, [r7, #52]	@ 0x34
 8006794:	2300      	movs	r3, #0
 8006796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006798:	2300      	movs	r3, #0
 800679a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067a0:	4b59      	ldr	r3, [pc, #356]	@ (8006908 <HAL_RCC_GetSysClockFreq+0x180>)
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f003 030c 	and.w	r3, r3, #12
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	d00d      	beq.n	80067c8 <HAL_RCC_GetSysClockFreq+0x40>
 80067ac:	2b08      	cmp	r3, #8
 80067ae:	f200 80a1 	bhi.w	80068f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <HAL_RCC_GetSysClockFreq+0x34>
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	d003      	beq.n	80067c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80067ba:	e09b      	b.n	80068f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067bc:	4b53      	ldr	r3, [pc, #332]	@ (800690c <HAL_RCC_GetSysClockFreq+0x184>)
 80067be:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80067c0:	e09b      	b.n	80068fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067c2:	4b53      	ldr	r3, [pc, #332]	@ (8006910 <HAL_RCC_GetSysClockFreq+0x188>)
 80067c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80067c6:	e098      	b.n	80068fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067c8:	4b4f      	ldr	r3, [pc, #316]	@ (8006908 <HAL_RCC_GetSysClockFreq+0x180>)
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067d2:	4b4d      	ldr	r3, [pc, #308]	@ (8006908 <HAL_RCC_GetSysClockFreq+0x180>)
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d028      	beq.n	8006830 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067de:	4b4a      	ldr	r3, [pc, #296]	@ (8006908 <HAL_RCC_GetSysClockFreq+0x180>)
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	099b      	lsrs	r3, r3, #6
 80067e4:	2200      	movs	r2, #0
 80067e6:	623b      	str	r3, [r7, #32]
 80067e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80067f0:	2100      	movs	r1, #0
 80067f2:	4b47      	ldr	r3, [pc, #284]	@ (8006910 <HAL_RCC_GetSysClockFreq+0x188>)
 80067f4:	fb03 f201 	mul.w	r2, r3, r1
 80067f8:	2300      	movs	r3, #0
 80067fa:	fb00 f303 	mul.w	r3, r0, r3
 80067fe:	4413      	add	r3, r2
 8006800:	4a43      	ldr	r2, [pc, #268]	@ (8006910 <HAL_RCC_GetSysClockFreq+0x188>)
 8006802:	fba0 1202 	umull	r1, r2, r0, r2
 8006806:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006808:	460a      	mov	r2, r1
 800680a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800680c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800680e:	4413      	add	r3, r2
 8006810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006814:	2200      	movs	r2, #0
 8006816:	61bb      	str	r3, [r7, #24]
 8006818:	61fa      	str	r2, [r7, #28]
 800681a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800681e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006822:	f7f9 fd45 	bl	80002b0 <__aeabi_uldivmod>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4613      	mov	r3, r2
 800682c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800682e:	e053      	b.n	80068d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006830:	4b35      	ldr	r3, [pc, #212]	@ (8006908 <HAL_RCC_GetSysClockFreq+0x180>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	099b      	lsrs	r3, r3, #6
 8006836:	2200      	movs	r2, #0
 8006838:	613b      	str	r3, [r7, #16]
 800683a:	617a      	str	r2, [r7, #20]
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006842:	f04f 0b00 	mov.w	fp, #0
 8006846:	4652      	mov	r2, sl
 8006848:	465b      	mov	r3, fp
 800684a:	f04f 0000 	mov.w	r0, #0
 800684e:	f04f 0100 	mov.w	r1, #0
 8006852:	0159      	lsls	r1, r3, #5
 8006854:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006858:	0150      	lsls	r0, r2, #5
 800685a:	4602      	mov	r2, r0
 800685c:	460b      	mov	r3, r1
 800685e:	ebb2 080a 	subs.w	r8, r2, sl
 8006862:	eb63 090b 	sbc.w	r9, r3, fp
 8006866:	f04f 0200 	mov.w	r2, #0
 800686a:	f04f 0300 	mov.w	r3, #0
 800686e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006872:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006876:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800687a:	ebb2 0408 	subs.w	r4, r2, r8
 800687e:	eb63 0509 	sbc.w	r5, r3, r9
 8006882:	f04f 0200 	mov.w	r2, #0
 8006886:	f04f 0300 	mov.w	r3, #0
 800688a:	00eb      	lsls	r3, r5, #3
 800688c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006890:	00e2      	lsls	r2, r4, #3
 8006892:	4614      	mov	r4, r2
 8006894:	461d      	mov	r5, r3
 8006896:	eb14 030a 	adds.w	r3, r4, sl
 800689a:	603b      	str	r3, [r7, #0]
 800689c:	eb45 030b 	adc.w	r3, r5, fp
 80068a0:	607b      	str	r3, [r7, #4]
 80068a2:	f04f 0200 	mov.w	r2, #0
 80068a6:	f04f 0300 	mov.w	r3, #0
 80068aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068ae:	4629      	mov	r1, r5
 80068b0:	028b      	lsls	r3, r1, #10
 80068b2:	4621      	mov	r1, r4
 80068b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068b8:	4621      	mov	r1, r4
 80068ba:	028a      	lsls	r2, r1, #10
 80068bc:	4610      	mov	r0, r2
 80068be:	4619      	mov	r1, r3
 80068c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c2:	2200      	movs	r2, #0
 80068c4:	60bb      	str	r3, [r7, #8]
 80068c6:	60fa      	str	r2, [r7, #12]
 80068c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068cc:	f7f9 fcf0 	bl	80002b0 <__aeabi_uldivmod>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	4613      	mov	r3, r2
 80068d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80068d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006908 <HAL_RCC_GetSysClockFreq+0x180>)
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	0c1b      	lsrs	r3, r3, #16
 80068de:	f003 0303 	and.w	r3, r3, #3
 80068e2:	3301      	adds	r3, #1
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80068e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80068ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80068f2:	e002      	b.n	80068fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068f4:	4b05      	ldr	r3, [pc, #20]	@ (800690c <HAL_RCC_GetSysClockFreq+0x184>)
 80068f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80068f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3740      	adds	r7, #64	@ 0x40
 8006900:	46bd      	mov	sp, r7
 8006902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006906:	bf00      	nop
 8006908:	40023800 	.word	0x40023800
 800690c:	00f42400 	.word	0x00f42400
 8006910:	018cba80 	.word	0x018cba80

08006914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006914:	b480      	push	{r7}
 8006916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006918:	4b03      	ldr	r3, [pc, #12]	@ (8006928 <HAL_RCC_GetHCLKFreq+0x14>)
 800691a:	681b      	ldr	r3, [r3, #0]
}
 800691c:	4618      	mov	r0, r3
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	20000208 	.word	0x20000208

0800692c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006930:	f7ff fff0 	bl	8006914 <HAL_RCC_GetHCLKFreq>
 8006934:	4602      	mov	r2, r0
 8006936:	4b05      	ldr	r3, [pc, #20]	@ (800694c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	0a9b      	lsrs	r3, r3, #10
 800693c:	f003 0307 	and.w	r3, r3, #7
 8006940:	4903      	ldr	r1, [pc, #12]	@ (8006950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006942:	5ccb      	ldrb	r3, [r1, r3]
 8006944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006948:	4618      	mov	r0, r3
 800694a:	bd80      	pop	{r7, pc}
 800694c:	40023800 	.word	0x40023800
 8006950:	0800f8f8 	.word	0x0800f8f8

08006954 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006954:	b084      	sub	sp, #16
 8006956:	b580      	push	{r7, lr}
 8006958:	b084      	sub	sp, #16
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	f107 001c 	add.w	r0, r7, #28
 8006962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006966:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800696a:	2b01      	cmp	r3, #1
 800696c:	d123      	bne.n	80069b6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006972:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006982:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006996:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800699a:	2b01      	cmp	r3, #1
 800699c:	d105      	bne.n	80069aa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 faa0 	bl	8006ef0 <USB_CoreReset>
 80069b0:	4603      	mov	r3, r0
 80069b2:	73fb      	strb	r3, [r7, #15]
 80069b4:	e01b      	b.n	80069ee <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fa94 	bl	8006ef0 <USB_CoreReset>
 80069c8:	4603      	mov	r3, r0
 80069ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d106      	bne.n	80069e2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	639a      	str	r2, [r3, #56]	@ 0x38
 80069e0:	e005      	b.n	80069ee <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069ee:	7fbb      	ldrb	r3, [r7, #30]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d10b      	bne.n	8006a0c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f043 0206 	orr.w	r2, r3, #6
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f043 0220 	orr.w	r2, r3, #32
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a18:	b004      	add	sp, #16
 8006a1a:	4770      	bx	lr

08006a1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f023 0201 	bic.w	r2, r3, #1
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b084      	sub	sp, #16
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	460b      	mov	r3, r1
 8006a48:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a5a:	78fb      	ldrb	r3, [r7, #3]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d115      	bne.n	8006a8c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006a6c:	200a      	movs	r0, #10
 8006a6e:	f7fd fc9d 	bl	80043ac <HAL_Delay>
      ms += 10U;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	330a      	adds	r3, #10
 8006a76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fa2b 	bl	8006ed4 <USB_GetMode>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d01e      	beq.n	8006ac2 <USB_SetCurrentMode+0x84>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2bc7      	cmp	r3, #199	@ 0xc7
 8006a88:	d9f0      	bls.n	8006a6c <USB_SetCurrentMode+0x2e>
 8006a8a:	e01a      	b.n	8006ac2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a8c:	78fb      	ldrb	r3, [r7, #3]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d115      	bne.n	8006abe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006a9e:	200a      	movs	r0, #10
 8006aa0:	f7fd fc84 	bl	80043ac <HAL_Delay>
      ms += 10U;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	330a      	adds	r3, #10
 8006aa8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fa12 	bl	8006ed4 <USB_GetMode>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <USB_SetCurrentMode+0x84>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2bc7      	cmp	r3, #199	@ 0xc7
 8006aba:	d9f0      	bls.n	8006a9e <USB_SetCurrentMode+0x60>
 8006abc:	e001      	b.n	8006ac2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e005      	b.n	8006ace <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2bc8      	cmp	r3, #200	@ 0xc8
 8006ac6:	d101      	bne.n	8006acc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e000      	b.n	8006ace <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
	...

08006ad8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ad8:	b084      	sub	sp, #16
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b086      	sub	sp, #24
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006ae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006af2:	2300      	movs	r3, #0
 8006af4:	613b      	str	r3, [r7, #16]
 8006af6:	e009      	b.n	8006b0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	3340      	adds	r3, #64	@ 0x40
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	2200      	movs	r2, #0
 8006b04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	613b      	str	r3, [r7, #16]
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	2b0e      	cmp	r3, #14
 8006b10:	d9f2      	bls.n	8006af8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b12:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d11c      	bne.n	8006b54 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b28:	f043 0302 	orr.w	r3, r3, #2
 8006b2c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b32:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b52:	e00b      	b.n	8006b6c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b58:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b64:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b72:	461a      	mov	r2, r3
 8006b74:	2300      	movs	r3, #0
 8006b76:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b78:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d10d      	bne.n	8006b9c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d104      	bne.n	8006b92 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b88:	2100      	movs	r1, #0
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f968 	bl	8006e60 <USB_SetDevSpeed>
 8006b90:	e008      	b.n	8006ba4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b92:	2101      	movs	r1, #1
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f963 	bl	8006e60 <USB_SetDevSpeed>
 8006b9a:	e003      	b.n	8006ba4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b9c:	2103      	movs	r1, #3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f95e 	bl	8006e60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ba4:	2110      	movs	r1, #16
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f8fa 	bl	8006da0 <USB_FlushTxFifo>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f924 	bl	8006e04 <USB_FlushRxFifo>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d001      	beq.n	8006bc6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bcc:	461a      	mov	r2, r3
 8006bce:	2300      	movs	r3, #0
 8006bd0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bd8:	461a      	mov	r2, r3
 8006bda:	2300      	movs	r3, #0
 8006bdc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006be4:	461a      	mov	r2, r3
 8006be6:	2300      	movs	r3, #0
 8006be8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bea:	2300      	movs	r3, #0
 8006bec:	613b      	str	r3, [r7, #16]
 8006bee:	e043      	b.n	8006c78 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c06:	d118      	bne.n	8006c3a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10a      	bne.n	8006c24 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	e013      	b.n	8006c4c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c30:	461a      	mov	r2, r3
 8006c32:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c36:	6013      	str	r3, [r2, #0]
 8006c38:	e008      	b.n	8006c4c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c46:	461a      	mov	r2, r3
 8006c48:	2300      	movs	r3, #0
 8006c4a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c58:	461a      	mov	r2, r3
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	3301      	adds	r3, #1
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d3b5      	bcc.n	8006bf0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c84:	2300      	movs	r3, #0
 8006c86:	613b      	str	r3, [r7, #16]
 8006c88:	e043      	b.n	8006d12 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ca0:	d118      	bne.n	8006cd4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	e013      	b.n	8006ce6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cca:	461a      	mov	r2, r3
 8006ccc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006cd0:	6013      	str	r3, [r2, #0]
 8006cd2:	e008      	b.n	8006ce6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d04:	461a      	mov	r2, r3
 8006d06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	613b      	str	r3, [r7, #16]
 8006d12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d16:	461a      	mov	r2, r3
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d3b5      	bcc.n	8006c8a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d30:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006d3e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d105      	bne.n	8006d54 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	f043 0210 	orr.w	r2, r3, #16
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	699a      	ldr	r2, [r3, #24]
 8006d58:	4b10      	ldr	r3, [pc, #64]	@ (8006d9c <USB_DevInit+0x2c4>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d60:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d005      	beq.n	8006d74 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	f043 0208 	orr.w	r2, r3, #8
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d74:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d107      	bne.n	8006d8c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d84:	f043 0304 	orr.w	r3, r3, #4
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d98:	b004      	add	sp, #16
 8006d9a:	4770      	bx	lr
 8006d9c:	803c3800 	.word	0x803c3800

08006da0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	3301      	adds	r3, #1
 8006db2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006dba:	d901      	bls.n	8006dc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e01b      	b.n	8006df8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	daf2      	bge.n	8006dae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	019b      	lsls	r3, r3, #6
 8006dd0:	f043 0220 	orr.w	r2, r3, #32
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006de4:	d901      	bls.n	8006dea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e006      	b.n	8006df8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b20      	cmp	r3, #32
 8006df4:	d0f0      	beq.n	8006dd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	3301      	adds	r3, #1
 8006e14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e1c:	d901      	bls.n	8006e22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e018      	b.n	8006e54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	daf2      	bge.n	8006e10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2210      	movs	r2, #16
 8006e32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	3301      	adds	r3, #1
 8006e38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e40:	d901      	bls.n	8006e46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e006      	b.n	8006e54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	f003 0310 	and.w	r3, r3, #16
 8006e4e:	2b10      	cmp	r3, #16
 8006e50:	d0f0      	beq.n	8006e34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	78fb      	ldrb	r3, [r7, #3]
 8006e7a:	68f9      	ldr	r1, [r7, #12]
 8006e7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e80:	4313      	orrs	r3, r2
 8006e82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b085      	sub	sp, #20
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006eac:	f023 0303 	bic.w	r3, r3, #3
 8006eb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ec0:	f043 0302 	orr.w	r3, r3, #2
 8006ec4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	3301      	adds	r3, #1
 8006f00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f08:	d901      	bls.n	8006f0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e01b      	b.n	8006f46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	daf2      	bge.n	8006efc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f043 0201 	orr.w	r2, r3, #1
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f32:	d901      	bls.n	8006f38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e006      	b.n	8006f46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	f003 0301 	and.w	r3, r3, #1
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d0f0      	beq.n	8006f26 <USB_CoreReset+0x36>

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
	...

08006f54 <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_t _cdcd_cfg = TUD_CDC_CONFIGURE_DEFAULT();

static bool _prep_out_transaction(uint8_t itf) {
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8006f62:	79fb      	ldrb	r3, [r7, #7]
 8006f64:	22e8      	movs	r2, #232	@ 0xe8
 8006f66:	fb02 f303 	mul.w	r3, r2, r3
 8006f6a:	4a30      	ldr	r2, [pc, #192]	@ (800702c <_prep_out_transaction+0xd8>)
 8006f6c:	4413      	add	r3, r2
 8006f6e:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8006f70:	79fb      	ldrb	r3, [r7, #7]
 8006f72:	01db      	lsls	r3, r3, #7
 8006f74:	4a2e      	ldr	r2, [pc, #184]	@ (8007030 <_prep_out_transaction+0xdc>)
 8006f76:	4413      	add	r3, r2
 8006f78:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 8006f7a:	f002 f851 	bl	8009020 <tud_mounted>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d009      	beq.n	8006f98 <_prep_out_transaction+0x44>
 8006f84:	f002 f85e 	bl	8009044 <tud_suspended>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	f083 0301 	eor.w	r3, r3, #1
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <_prep_out_transaction+0x44>
 8006f94:	2301      	movs	r3, #1
 8006f96:	e000      	b.n	8006f9a <_prep_out_transaction+0x46>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 8006fa0:	f083 0301 	eor.w	r3, r3, #1
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d103      	bne.n	8006fb2 <_prep_out_transaction+0x5e>
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	78db      	ldrb	r3, [r3, #3]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <_prep_out_transaction+0x62>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e035      	b.n	8007022 <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	3310      	adds	r3, #16
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f001 feab 	bl	8008d16 <tu_fifo_remaining>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 8006fc4:	897b      	ldrh	r3, [r7, #10]
 8006fc6:	2b3f      	cmp	r3, #63	@ 0x3f
 8006fc8:	d801      	bhi.n	8006fce <_prep_out_transaction+0x7a>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	e029      	b.n	8007022 <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	78da      	ldrb	r2, [r3, #3]
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f003 fb44 	bl	800a664 <usbd_edpt_claim>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	f083 0301 	eor.w	r3, r3, #1
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <_prep_out_transaction+0x98>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	e01a      	b.n	8007022 <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	3310      	adds	r3, #16
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f001 fe90 	bl	8008d16 <tu_fifo_remaining>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 8006ffa:	897b      	ldrh	r3, [r7, #10]
 8006ffc:	2b3f      	cmp	r3, #63	@ 0x3f
 8006ffe:	d908      	bls.n	8007012 <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	78d9      	ldrb	r1, [r3, #3]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	7df8      	ldrb	r0, [r7, #23]
 8007008:	2340      	movs	r3, #64	@ 0x40
 800700a:	f003 fb7b 	bl	800a704 <usbd_edpt_xfer>
 800700e:	4603      	mov	r3, r0
 8007010:	e007      	b.n	8007022 <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	78da      	ldrb	r2, [r3, #3]
 8007016:	7dfb      	ldrb	r3, [r7, #23]
 8007018:	4611      	mov	r1, r2
 800701a:	4618      	mov	r0, r3
 800701c:	f003 fb4a 	bl	800a6b4 <usbd_edpt_release>
    return false;
 8007020:	2300      	movs	r3, #0
  }
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	20001570 	.word	0x20001570
 8007030:	20001658 	.word	0x20001658

08007034 <tud_cdc_n_connected>:

bool tud_cdc_n_ready(uint8_t itf) {
  return tud_ready() && _cdcd_itf[itf].ep_in != 0 && _cdcd_itf[itf].ep_out != 0;
}

bool tud_cdc_n_connected(uint8_t itf) {
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	4603      	mov	r3, r0
 800703c:	71fb      	strb	r3, [r7, #7]
 800703e:	f001 ffef 	bl	8009020 <tud_mounted>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d009      	beq.n	800705c <tud_cdc_n_connected+0x28>
 8007048:	f001 fffc 	bl	8009044 <tud_suspended>
 800704c:	4603      	mov	r3, r0
 800704e:	f083 0301 	eor.w	r3, r3, #1
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <tud_cdc_n_connected+0x28>
 8007058:	2301      	movs	r3, #1
 800705a:	e000      	b.n	800705e <tud_cdc_n_connected+0x2a>
 800705c:	2300      	movs	r3, #0
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	b2db      	uxtb	r3, r3
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 8007064:	2b00      	cmp	r3, #0
 8007066:	d019      	beq.n	800709c <tud_cdc_n_connected+0x68>
 8007068:	79fb      	ldrb	r3, [r7, #7]
 800706a:	4a10      	ldr	r2, [pc, #64]	@ (80070ac <tud_cdc_n_connected+0x78>)
 800706c:	21e8      	movs	r1, #232	@ 0xe8
 800706e:	fb01 f303 	mul.w	r3, r1, r3
 8007072:	4413      	add	r3, r2
 8007074:	3304      	adds	r3, #4
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	60fb      	str	r3, [r7, #12]
 800707a:	2300      	movs	r3, #0
 800707c:	72fb      	strb	r3, [r7, #11]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 800707e:	7afb      	ldrb	r3, [r7, #11]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	fa22 f303 	lsr.w	r3, r2, r3
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	bf14      	ite	ne
 800708e:	2301      	movne	r3, #1
 8007090:	2300      	moveq	r3, #0
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <tud_cdc_n_connected+0x68>
 8007098:	2301      	movs	r3, #1
 800709a:	e000      	b.n	800709e <tud_cdc_n_connected+0x6a>
 800709c:	2300      	movs	r3, #0
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	b2db      	uxtb	r3, r3
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	20001570 	.word	0x20001570

080070b0 <tud_cdc_n_available>:
}

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf) {
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	4603      	mov	r3, r0
 80070b8:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 80070ba:	79fb      	ldrb	r3, [r7, #7]
 80070bc:	22e8      	movs	r2, #232	@ 0xe8
 80070be:	fb02 f303 	mul.w	r3, r2, r3
 80070c2:	3310      	adds	r3, #16
 80070c4:	4a04      	ldr	r2, [pc, #16]	@ (80070d8 <tud_cdc_n_available+0x28>)
 80070c6:	4413      	add	r3, r2
 80070c8:	4618      	mov	r0, r3
 80070ca:	f001 fdaf 	bl	8008c2c <tu_fifo_count>
 80070ce:	4603      	mov	r3, r0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	20001570 	.word	0x20001570

080070dc <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize) {
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	4603      	mov	r3, r0
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
 80070e8:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
 80070ec:	22e8      	movs	r2, #232	@ 0xe8
 80070ee:	fb02 f303 	mul.w	r3, r2, r3
 80070f2:	4a0f      	ldr	r2, [pc, #60]	@ (8007130 <tud_cdc_n_read+0x54>)
 80070f4:	4413      	add	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f103 0010 	add.w	r0, r3, #16
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007104:	4293      	cmp	r3, r2
 8007106:	d802      	bhi.n	800710e <tud_cdc_n_read+0x32>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	b29b      	uxth	r3, r3
 800710c:	e001      	b.n	8007112 <tud_cdc_n_read+0x36>
 800710e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007112:	461a      	mov	r2, r3
 8007114:	68b9      	ldr	r1, [r7, #8]
 8007116:	f001 fe5a 	bl	8008dce <tu_fifo_read_n>
 800711a:	4603      	mov	r3, r0
 800711c:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(itf);
 800711e:	7bfb      	ldrb	r3, [r7, #15]
 8007120:	4618      	mov	r0, r3
 8007122:	f7ff ff17 	bl	8006f54 <_prep_out_transaction>
  return num_read;
 8007126:	693b      	ldr	r3, [r7, #16]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	20001570 	.word	0x20001570

08007134 <tud_cdc_n_write>:
}

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, const void* buffer, uint32_t bufsize) {
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	4603      	mov	r3, r0
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8007142:	7bfb      	ldrb	r3, [r7, #15]
 8007144:	22e8      	movs	r2, #232	@ 0xe8
 8007146:	fb02 f303 	mul.w	r3, r2, r3
 800714a:	4a13      	ldr	r2, [pc, #76]	@ (8007198 <tud_cdc_n_write+0x64>)
 800714c:	4413      	add	r3, r2
 800714e:	617b      	str	r3, [r7, #20]
  uint16_t wr_count = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f103 001c 	add.w	r0, r3, #28
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800715c:	4293      	cmp	r3, r2
 800715e:	d802      	bhi.n	8007166 <tud_cdc_n_write+0x32>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	b29b      	uxth	r3, r3
 8007164:	e001      	b.n	800716a <tud_cdc_n_write+0x36>
 8007166:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800716a:	461a      	mov	r2, r3
 800716c:	68b9      	ldr	r1, [r7, #8]
 800716e:	f001 fe95 	bl	8008e9c <tu_fifo_write_n>
 8007172:	4603      	mov	r3, r0
 8007174:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	331c      	adds	r3, #28
 800717a:	4618      	mov	r0, r3
 800717c:	f001 fd56 	bl	8008c2c <tu_fifo_count>
 8007180:	4603      	mov	r3, r0
 8007182:	2b3f      	cmp	r3, #63	@ 0x3f
 8007184:	d903      	bls.n	800718e <tud_cdc_n_write+0x5a>
      #if CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
      || tu_fifo_full(&p_cdc->tx_ff) // check full if fifo size is less than packet size
      #endif
      ) {
    tud_cdc_n_write_flush(itf);
 8007186:	7bfb      	ldrb	r3, [r7, #15]
 8007188:	4618      	mov	r0, r3
 800718a:	f000 f807 	bl	800719c <tud_cdc_n_write_flush>
  }

  return wr_count;
 800718e:	8a7b      	ldrh	r3, [r7, #18]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	20001570 	.word	0x20001570

0800719c <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	4603      	mov	r3, r0
 80071a4:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80071a6:	79fb      	ldrb	r3, [r7, #7]
 80071a8:	22e8      	movs	r2, #232	@ 0xe8
 80071aa:	fb02 f303 	mul.w	r3, r2, r3
 80071ae:	4a39      	ldr	r2, [pc, #228]	@ (8007294 <tud_cdc_n_write_flush+0xf8>)
 80071b0:	4413      	add	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 80071b4:	79fb      	ldrb	r3, [r7, #7]
 80071b6:	01db      	lsls	r3, r3, #7
 80071b8:	4a37      	ldr	r2, [pc, #220]	@ (8007298 <tud_cdc_n_write_flush+0xfc>)
 80071ba:	4413      	add	r3, r2
 80071bc:	613b      	str	r3, [r7, #16]
 80071be:	f001 ff2f 	bl	8009020 <tud_mounted>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d009      	beq.n	80071dc <tud_cdc_n_write_flush+0x40>
 80071c8:	f001 ff3c 	bl	8009044 <tud_suspended>
 80071cc:	4603      	mov	r3, r0
 80071ce:	f083 0301 	eor.w	r3, r3, #1
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <tud_cdc_n_write_flush+0x40>
 80071d8:	2301      	movs	r3, #1
 80071da:	e000      	b.n	80071de <tud_cdc_n_write_flush+0x42>
 80071dc:	2300      	movs	r3, #0
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 80071e4:	f083 0301 	eor.w	r3, r3, #1
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <tud_cdc_n_write_flush+0x56>
 80071ee:	2300      	movs	r3, #0
 80071f0:	e04c      	b.n	800728c <tud_cdc_n_write_flush+0xf0>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	331c      	adds	r3, #28
 80071f6:	4618      	mov	r0, r3
 80071f8:	f001 fd18 	bl	8008c2c <tu_fifo_count>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <tud_cdc_n_write_flush+0x6a>
    return 0;
 8007202:	2300      	movs	r3, #0
 8007204:	e042      	b.n	800728c <tud_cdc_n_write_flush+0xf0>
  }

  const uint8_t rhport = 0;
 8007206:	2300      	movs	r3, #0
 8007208:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	789a      	ldrb	r2, [r3, #2]
 800720e:	7bfb      	ldrb	r3, [r7, #15]
 8007210:	4611      	mov	r1, r2
 8007212:	4618      	mov	r0, r3
 8007214:	f003 fa26 	bl	800a664 <usbd_edpt_claim>
 8007218:	4603      	mov	r3, r0
 800721a:	f083 0301 	eor.w	r3, r3, #1
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <tud_cdc_n_write_flush+0x8c>
 8007224:	2300      	movs	r3, #0
 8007226:	e031      	b.n	800728c <tud_cdc_n_write_flush+0xf0>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f103 001c 	add.w	r0, r3, #28
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	3340      	adds	r3, #64	@ 0x40
 8007232:	2240      	movs	r2, #64	@ 0x40
 8007234:	4619      	mov	r1, r3
 8007236:	f001 fdca 	bl	8008dce <tu_fifo_read_n>
 800723a:	4603      	mov	r3, r0
 800723c:	81bb      	strh	r3, [r7, #12]

  if (count) {
 800723e:	89bb      	ldrh	r3, [r7, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d01b      	beq.n	800727c <tud_cdc_n_write_flush+0xe0>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	7899      	ldrb	r1, [r3, #2]
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800724e:	89bb      	ldrh	r3, [r7, #12]
 8007250:	7bf8      	ldrb	r0, [r7, #15]
 8007252:	f003 fa57 	bl	800a704 <usbd_edpt_xfer>
 8007256:	4603      	mov	r3, r0
 8007258:	f083 0301 	eor.w	r3, r3, #1
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00a      	beq.n	8007278 <tud_cdc_n_write_flush+0xdc>
 8007262:	4b0e      	ldr	r3, [pc, #56]	@ (800729c <tud_cdc_n_write_flush+0x100>)
 8007264:	60bb      	str	r3, [r7, #8]
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b00      	cmp	r3, #0
 8007270:	d000      	beq.n	8007274 <tud_cdc_n_write_flush+0xd8>
 8007272:	be00      	bkpt	0x0000
 8007274:	2300      	movs	r3, #0
 8007276:	e009      	b.n	800728c <tud_cdc_n_write_flush+0xf0>
    return count;
 8007278:	89bb      	ldrh	r3, [r7, #12]
 800727a:	e007      	b.n	800728c <tud_cdc_n_write_flush+0xf0>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	789a      	ldrb	r2, [r3, #2]
 8007280:	7bfb      	ldrb	r3, [r7, #15]
 8007282:	4611      	mov	r1, r2
 8007284:	4618      	mov	r0, r3
 8007286:	f003 fa15 	bl	800a6b4 <usbd_edpt_release>
    return 0;
 800728a:	2300      	movs	r3, #0
  }
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	20001570 	.word	0x20001570
 8007298:	20001658 	.word	0x20001658
 800729c:	e000edf0 	.word	0xe000edf0

080072a0 <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available(uint8_t itf) {
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	4603      	mov	r3, r0
 80072a8:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
 80072aa:	79fb      	ldrb	r3, [r7, #7]
 80072ac:	22e8      	movs	r2, #232	@ 0xe8
 80072ae:	fb02 f303 	mul.w	r3, r2, r3
 80072b2:	3318      	adds	r3, #24
 80072b4:	4a05      	ldr	r2, [pc, #20]	@ (80072cc <tud_cdc_n_write_available+0x2c>)
 80072b6:	4413      	add	r3, r2
 80072b8:	3304      	adds	r3, #4
 80072ba:	4618      	mov	r0, r3
 80072bc:	f001 fd2b 	bl	8008d16 <tu_fifo_remaining>
 80072c0:	4603      	mov	r3, r0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	20001570 	.word	0x20001570

080072d0 <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 80072d6:	22e8      	movs	r2, #232	@ 0xe8
 80072d8:	2100      	movs	r1, #0
 80072da:	4824      	ldr	r0, [pc, #144]	@ (800736c <cdcd_init+0x9c>)
 80072dc:	f005 ffd0 	bl	800d280 <memset>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 80072e0:	2300      	movs	r3, #0
 80072e2:	71fb      	strb	r3, [r7, #7]
 80072e4:	e03a      	b.n	800735c <cdcd_init+0x8c>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 80072e6:	79fb      	ldrb	r3, [r7, #7]
 80072e8:	22e8      	movs	r2, #232	@ 0xe8
 80072ea:	fb02 f303 	mul.w	r3, r2, r3
 80072ee:	4a1f      	ldr	r2, [pc, #124]	@ (800736c <cdcd_init+0x9c>)
 80072f0:	4413      	add	r3, r2
 80072f2:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	22ff      	movs	r2, #255	@ 0xff
 80072f8:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007300:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2200      	movs	r2, #0
 8007306:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	2200      	movs	r2, #0
 800730c:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2208      	movs	r2, #8
 8007312:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	f103 0010 	add.w	r0, r3, #16
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007320:	2300      	movs	r3, #0
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	2301      	movs	r3, #1
 8007326:	2240      	movs	r2, #64	@ 0x40
 8007328:	f000 ffee 	bl	8008308 <tu_fifo_config>

    // TX fifo can be configured to change to overwritable if not connected (DTR bit not set). Without DTR we do not
    // know if data is actually polled by terminal. This way the most current data is prioritized.
    // Default: is overwritable
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, _cdcd_cfg.tx_overwritabe_if_not_connected);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	f103 001c 	add.w	r0, r3, #28
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8007338:	4b0d      	ldr	r3, [pc, #52]	@ (8007370 <cdcd_init+0xa0>)
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	bf14      	ite	ne
 8007346:	2301      	movne	r3, #1
 8007348:	2300      	moveq	r3, #0
 800734a:	b2db      	uxtb	r3, r3
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	2301      	movs	r3, #1
 8007350:	2280      	movs	r2, #128	@ 0x80
 8007352:	f000 ffd9 	bl	8008308 <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8007356:	79fb      	ldrb	r3, [r7, #7]
 8007358:	3301      	adds	r3, #1
 800735a:	71fb      	strb	r3, [r7, #7]
 800735c:	79fb      	ldrb	r3, [r7, #7]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0c1      	beq.n	80072e6 <cdcd_init+0x16>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 8007362:	bf00      	nop
 8007364:	bf00      	nop
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	20001570 	.word	0x20001570
 8007370:	2000022c 	.word	0x2000022c

08007374 <cdcd_deinit>:

bool cdcd_deinit(void) {
 8007374:	b480      	push	{r7}
 8007376:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 8007378:	2301      	movs	r3, #1
}
 800737a:	4618      	mov	r0, r3
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	4603      	mov	r3, r0
 800738c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]
 8007392:	e037      	b.n	8007404 <cdcd_reset+0x80>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8007394:	7bfb      	ldrb	r3, [r7, #15]
 8007396:	22e8      	movs	r2, #232	@ 0xe8
 8007398:	fb02 f303 	mul.w	r3, r2, r3
 800739c:	4a1d      	ldr	r2, [pc, #116]	@ (8007414 <cdcd_reset+0x90>)
 800739e:	4413      	add	r3, r2
 80073a0:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 80073a2:	2205      	movs	r2, #5
 80073a4:	2100      	movs	r1, #0
 80073a6:	68b8      	ldr	r0, [r7, #8]
 80073a8:	f005 ff6a 	bl	800d280 <memset>
    if (!_cdcd_cfg.rx_persistent) {
 80073ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007418 <cdcd_reset+0x94>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d104      	bne.n	80073c4 <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	3310      	adds	r3, #16
 80073be:	4618      	mov	r0, r3
 80073c0:	f001 fd90 	bl	8008ee4 <tu_fifo_clear>
    }
    if (!_cdcd_cfg.tx_persistent) {
 80073c4:	4b14      	ldr	r3, [pc, #80]	@ (8007418 <cdcd_reset+0x94>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d104      	bne.n	80073dc <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	331c      	adds	r3, #28
 80073d6:	4618      	mov	r0, r3
 80073d8:	f001 fd84 	bl	8008ee4 <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, _cdcd_cfg.tx_overwritabe_if_not_connected);
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f103 021c 	add.w	r2, r3, #28
 80073e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007418 <cdcd_reset+0x94>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	bf14      	ite	ne
 80073f0:	2301      	movne	r3, #1
 80073f2:	2300      	moveq	r3, #0
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	4619      	mov	r1, r3
 80073f8:	4610      	mov	r0, r2
 80073fa:	f001 fd84 	bl	8008f06 <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
 8007400:	3301      	adds	r3, #1
 8007402:	73fb      	strb	r3, [r7, #15]
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d0c4      	beq.n	8007394 <cdcd_reset+0x10>
  }
}
 800740a:	bf00      	nop
 800740c:	bf00      	nop
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	20001570 	.word	0x20001570
 8007418:	2000022c 	.word	0x2000022c

0800741c <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 800741c:	b580      	push	{r7, lr}
 800741e:	b09a      	sub	sp, #104	@ 0x68
 8007420:	af02      	add	r7, sp, #8
 8007422:	4603      	mov	r3, r0
 8007424:	6039      	str	r1, [r7, #0]
 8007426:	71fb      	strb	r3, [r7, #7]
 8007428:	4613      	mov	r3, r2
 800742a:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	795b      	ldrb	r3, [r3, #5]
 8007430:	2b02      	cmp	r3, #2
 8007432:	d103      	bne.n	800743c <cdcd_open+0x20>
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	799b      	ldrb	r3, [r3, #6]
 8007438:	2b02      	cmp	r3, #2
 800743a:	d001      	beq.n	8007440 <cdcd_open+0x24>
 800743c:	2300      	movs	r3, #0
 800743e:	e0da      	b.n	80075f6 <cdcd_open+0x1da>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8007440:	2300      	movs	r3, #0
 8007442:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8007446:	e010      	b.n	800746a <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 8007448:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800744c:	22e8      	movs	r2, #232	@ 0xe8
 800744e:	fb02 f303 	mul.w	r3, r2, r3
 8007452:	4a6b      	ldr	r2, [pc, #428]	@ (8007600 <cdcd_open+0x1e4>)
 8007454:	4413      	add	r3, r2
 8007456:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 8007458:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800745a:	789b      	ldrb	r3, [r3, #2]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d009      	beq.n	8007474 <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8007460:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007464:	3301      	adds	r3, #1
 8007466:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800746a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800746e:	2b00      	cmp	r3, #0
 8007470:	d0ea      	beq.n	8007448 <cdcd_open+0x2c>
 8007472:	e000      	b.n	8007476 <cdcd_open+0x5a>
      break;
 8007474:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 8007476:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00a      	beq.n	8007494 <cdcd_open+0x78>
 800747e:	4b61      	ldr	r3, [pc, #388]	@ (8007604 <cdcd_open+0x1e8>)
 8007480:	647b      	str	r3, [r7, #68]	@ 0x44
 8007482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d000      	beq.n	8007490 <cdcd_open+0x74>
 800748e:	be00      	bkpt	0x0000
 8007490:	2300      	movs	r3, #0
 8007492:	e0b0      	b.n	80075f6 <cdcd_open+0x1da>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	789a      	ldrb	r2, [r3, #2]
 8007498:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800749a:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 800749c:	2309      	movs	r3, #9
 800749e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 80074a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 80074aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074b2:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 80074b4:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 80074b6:	e013      	b.n	80074e0 <cdcd_open+0xc4>
 80074b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074ba:	633b      	str	r3, [r7, #48]	@ 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80074bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074be:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 80074c0:	461a      	mov	r2, r3
 80074c2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80074c6:	4413      	add	r3, r2
 80074c8:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80074cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 80074d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d2:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 80074d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	461a      	mov	r2, r3
 80074da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074dc:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 80074de:	657b      	str	r3, [r7, #84]	@ 0x54
 80074e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80074e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e6:	3301      	adds	r3, #1
 80074e8:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 80074ea:	2b24      	cmp	r3, #36	@ 0x24
 80074ec:	d104      	bne.n	80074f8 <cdcd_open+0xdc>
 80074ee:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80074f2:	88bb      	ldrh	r3, [r7, #4]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d9df      	bls.n	80074b8 <cdcd_open+0x9c>
 80074f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fe:	3301      	adds	r3, #1
 8007500:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 8007502:	2b05      	cmp	r3, #5
 8007504:	d12f      	bne.n	8007566 <cdcd_open+0x14a>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 8007506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007508:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 800750a:	79fb      	ldrb	r3, [r7, #7]
 800750c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800750e:	4618      	mov	r0, r3
 8007510:	f003 f862 	bl	800a5d8 <usbd_edpt_open>
 8007514:	4603      	mov	r3, r0
 8007516:	f083 0301 	eor.w	r3, r3, #1
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00a      	beq.n	8007536 <cdcd_open+0x11a>
 8007520:	4b38      	ldr	r3, [pc, #224]	@ (8007604 <cdcd_open+0x1e8>)
 8007522:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007524:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	2b00      	cmp	r3, #0
 800752e:	d000      	beq.n	8007532 <cdcd_open+0x116>
 8007530:	be00      	bkpt	0x0000
 8007532:	2300      	movs	r3, #0
 8007534:	e05f      	b.n	80075f6 <cdcd_open+0x1da>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8007536:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007538:	789a      	ldrb	r2, [r3, #2]
 800753a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800753c:	705a      	strb	r2, [r3, #1]
 800753e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007540:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8007546:	461a      	mov	r2, r3
 8007548:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800754c:	4413      	add	r3, r2
 800754e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8007552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007554:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007558:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8007564:	657b      	str	r3, [r7, #84]	@ 0x54
 8007566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007568:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	3301      	adds	r3, #1
 800756e:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8007570:	2b04      	cmp	r3, #4
 8007572:	d139      	bne.n	80075e8 <cdcd_open+0x1cc>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 8007574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007576:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8007578:	2b0a      	cmp	r3, #10
 800757a:	d135      	bne.n	80075e8 <cdcd_open+0x1cc>
 800757c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800757e:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8007584:	461a      	mov	r2, r3
 8007586:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800758a:	4413      	add	r3, r2
 800758c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8007590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007592:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	461a      	mov	r2, r3
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 80075a2:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 80075a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075a6:	3303      	adds	r3, #3
 80075a8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80075aa:	3202      	adds	r2, #2
 80075ac:	79f8      	ldrb	r0, [r7, #7]
 80075ae:	9201      	str	r2, [sp, #4]
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	2302      	movs	r3, #2
 80075b4:	2202      	movs	r2, #2
 80075b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075b8:	f002 ffa6 	bl	800a508 <usbd_open_edpt_pair>
 80075bc:	4603      	mov	r3, r0
 80075be:	f083 0301 	eor.w	r3, r3, #1
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00a      	beq.n	80075de <cdcd_open+0x1c2>
 80075c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007604 <cdcd_open+0x1e8>)
 80075ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d000      	beq.n	80075da <cdcd_open+0x1be>
 80075d8:	be00      	bkpt	0x0000
 80075da:	2300      	movs	r3, #0
 80075dc:	e00b      	b.n	80075f6 <cdcd_open+0x1da>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 80075de:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80075e2:	330e      	adds	r3, #14
 80075e4:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 80075e8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7ff fcb1 	bl	8006f54 <_prep_out_transaction>

  return drv_len;
 80075f2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3760      	adds	r7, #96	@ 0x60
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20001570 	.word	0x20001570
 8007604:	e000edf0 	.word	0xe000edf0

08007608 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 8007608:	b580      	push	{r7, lr}
 800760a:	b08a      	sub	sp, #40	@ 0x28
 800760c:	af00      	add	r7, sp, #0
 800760e:	4603      	mov	r3, r0
 8007610:	603a      	str	r2, [r7, #0]
 8007612:	71fb      	strb	r3, [r7, #7]
 8007614:	460b      	mov	r3, r1
 8007616:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b20      	cmp	r3, #32
 8007624:	d001      	beq.n	800762a <cdcd_control_xfer_cb+0x22>
 8007626:	2300      	movs	r3, #0
 8007628:	e0e6      	b.n	80077f8 <cdcd_control_xfer_cb+0x1f0>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 800762a:	2300      	movs	r3, #0
 800762c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007630:	e014      	b.n	800765c <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 8007632:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007636:	22e8      	movs	r2, #232	@ 0xe8
 8007638:	fb02 f303 	mul.w	r3, r2, r3
 800763c:	4a70      	ldr	r2, [pc, #448]	@ (8007800 <cdcd_control_xfer_cb+0x1f8>)
 800763e:	4413      	add	r3, r2
 8007640:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	889b      	ldrh	r3, [r3, #4]
 800764c:	b29b      	uxth	r3, r3
 800764e:	429a      	cmp	r2, r3
 8007650:	d009      	beq.n	8007666 <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8007652:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007656:	3301      	adds	r3, #1
 8007658:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800765c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0e6      	beq.n	8007632 <cdcd_control_xfer_cb+0x2a>
 8007664:	e000      	b.n	8007668 <cdcd_control_xfer_cb+0x60>
      break;
 8007666:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 8007668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800766c:	2b00      	cmp	r3, #0
 800766e:	d001      	beq.n	8007674 <cdcd_control_xfer_cb+0x6c>
 8007670:	2300      	movs	r3, #0
 8007672:	e0c1      	b.n	80077f8 <cdcd_control_xfer_cb+0x1f0>

  switch (request->bRequest) {
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	785b      	ldrb	r3, [r3, #1]
 8007678:	3b20      	subs	r3, #32
 800767a:	2b03      	cmp	r3, #3
 800767c:	f200 80b2 	bhi.w	80077e4 <cdcd_control_xfer_cb+0x1dc>
 8007680:	a201      	add	r2, pc, #4	@ (adr r2, 8007688 <cdcd_control_xfer_cb+0x80>)
 8007682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007686:	bf00      	nop
 8007688:	08007699 	.word	0x08007699
 800768c:	080076d5 	.word	0x080076d5
 8007690:	080076ef 	.word	0x080076ef
 8007694:	080077b3 	.word	0x080077b3
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8007698:	79bb      	ldrb	r3, [r7, #6]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d108      	bne.n	80076b0 <cdcd_control_xfer_cb+0xa8>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	f103 0208 	add.w	r2, r3, #8
 80076a4:	79f8      	ldrb	r0, [r7, #7]
 80076a6:	2307      	movs	r3, #7
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	f003 fa13 	bl	800aad4 <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 80076ae:	e09b      	b.n	80077e8 <cdcd_control_xfer_cb+0x1e0>
      } else if (stage == CONTROL_STAGE_ACK) {
 80076b0:	79bb      	ldrb	r3, [r7, #6]
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	f040 8098 	bne.w	80077e8 <cdcd_control_xfer_cb+0x1e0>
        if (tud_cdc_line_coding_cb) {
 80076b8:	4b52      	ldr	r3, [pc, #328]	@ (8007804 <cdcd_control_xfer_cb+0x1fc>)
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f000 8094 	beq.w	80077e8 <cdcd_control_xfer_cb+0x1e0>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	f103 0208 	add.w	r2, r3, #8
 80076c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80076ca:	4611      	mov	r1, r2
 80076cc:	4618      	mov	r0, r3
 80076ce:	f3af 8000 	nop.w
      break;
 80076d2:	e089      	b.n	80077e8 <cdcd_control_xfer_cb+0x1e0>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 80076d4:	79bb      	ldrb	r3, [r7, #6]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	f040 8088 	bne.w	80077ec <cdcd_control_xfer_cb+0x1e4>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 80076dc:	6a3b      	ldr	r3, [r7, #32]
 80076de:	f103 0208 	add.w	r2, r3, #8
 80076e2:	79f8      	ldrb	r0, [r7, #7]
 80076e4:	2307      	movs	r3, #7
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	f003 f9f4 	bl	800aad4 <tud_control_xfer>
      }
      break;
 80076ec:	e07e      	b.n	80077ec <cdcd_control_xfer_cb+0x1e4>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 80076ee:	79bb      	ldrb	r3, [r7, #6]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d105      	bne.n	8007700 <cdcd_control_xfer_cb+0xf8>
        tud_control_status(rhport, request);
 80076f4:	79fb      	ldrb	r3, [r7, #7]
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	4618      	mov	r0, r3
 80076fa:	f003 f979 	bl	800a9f0 <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 80076fe:	e077      	b.n	80077f0 <cdcd_control_xfer_cb+0x1e8>
      } else if (stage == CONTROL_STAGE_ACK) {
 8007700:	79bb      	ldrb	r3, [r7, #6]
 8007702:	2b03      	cmp	r3, #3
 8007704:	d174      	bne.n	80077f0 <cdcd_control_xfer_cb+0x1e8>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	885b      	ldrh	r3, [r3, #2]
 800770a:	b29b      	uxth	r3, r3
 800770c:	613b      	str	r3, [r7, #16]
 800770e:	2300      	movs	r3, #0
 8007710:	73fb      	strb	r3, [r7, #15]
 8007712:	7bfb      	ldrb	r3, [r7, #15]
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	fa22 f303 	lsr.w	r3, r2, r3
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	bf14      	ite	ne
 8007722:	2301      	movne	r3, #1
 8007724:	2300      	moveq	r3, #0
 8007726:	b2db      	uxtb	r3, r3
 8007728:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	885b      	ldrh	r3, [r3, #2]
 800772e:	b29b      	uxth	r3, r3
 8007730:	61bb      	str	r3, [r7, #24]
 8007732:	2301      	movs	r3, #1
 8007734:	75fb      	strb	r3, [r7, #23]
 8007736:	7dfb      	ldrb	r3, [r7, #23]
 8007738:	69ba      	ldr	r2, [r7, #24]
 800773a:	fa22 f303 	lsr.w	r3, r2, r3
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b00      	cmp	r3, #0
 8007744:	bf14      	ite	ne
 8007746:	2301      	movne	r3, #1
 8007748:	2300      	moveq	r3, #0
 800774a:	b2db      	uxtb	r3, r3
 800774c:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	885b      	ldrh	r3, [r3, #2]
 8007752:	b29b      	uxth	r3, r3
 8007754:	b2da      	uxtb	r2, r3
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	711a      	strb	r2, [r3, #4]
        if (_cdcd_cfg.tx_overwritabe_if_not_connected) {
 800775a:	4b2b      	ldr	r3, [pc, #172]	@ (8007808 <cdcd_control_xfer_cb+0x200>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	f003 0304 	and.w	r3, r3, #4
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	d013      	beq.n	8007790 <cdcd_control_xfer_cb+0x188>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8007768:	6a3b      	ldr	r3, [r7, #32]
 800776a:	f103 021c 	add.w	r2, r3, #28
 800776e:	7ffb      	ldrb	r3, [r7, #31]
 8007770:	2b00      	cmp	r3, #0
 8007772:	bf14      	ite	ne
 8007774:	2301      	movne	r3, #1
 8007776:	2300      	moveq	r3, #0
 8007778:	b2db      	uxtb	r3, r3
 800777a:	f083 0301 	eor.w	r3, r3, #1
 800777e:	b2db      	uxtb	r3, r3
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	b2db      	uxtb	r3, r3
 8007786:	4619      	mov	r1, r3
 8007788:	4610      	mov	r0, r2
 800778a:	f001 fbbc 	bl	8008f06 <tu_fifo_set_overwritable>
 800778e:	e005      	b.n	800779c <cdcd_control_xfer_cb+0x194>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, false);
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	331c      	adds	r3, #28
 8007794:	2100      	movs	r1, #0
 8007796:	4618      	mov	r0, r3
 8007798:	f001 fbb5 	bl	8008f06 <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 800779c:	4b1b      	ldr	r3, [pc, #108]	@ (800780c <cdcd_control_xfer_cb+0x204>)
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d026      	beq.n	80077f0 <cdcd_control_xfer_cb+0x1e8>
          tud_cdc_line_state_cb(itf, dtr, rts);
 80077a2:	7fba      	ldrb	r2, [r7, #30]
 80077a4:	7ff9      	ldrb	r1, [r7, #31]
 80077a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fa f8ea 	bl	8001984 <tud_cdc_line_state_cb>
      break;
 80077b0:	e01e      	b.n	80077f0 <cdcd_control_xfer_cb+0x1e8>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 80077b2:	79bb      	ldrb	r3, [r7, #6]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d105      	bne.n	80077c4 <cdcd_control_xfer_cb+0x1bc>
        tud_control_status(rhport, request);
 80077b8:	79fb      	ldrb	r3, [r7, #7]
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	4618      	mov	r0, r3
 80077be:	f003 f917 	bl	800a9f0 <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 80077c2:	e017      	b.n	80077f4 <cdcd_control_xfer_cb+0x1ec>
      } else if (stage == CONTROL_STAGE_ACK) {
 80077c4:	79bb      	ldrb	r3, [r7, #6]
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d114      	bne.n	80077f4 <cdcd_control_xfer_cb+0x1ec>
        if (tud_cdc_send_break_cb) {
 80077ca:	4b11      	ldr	r3, [pc, #68]	@ (8007810 <cdcd_control_xfer_cb+0x208>)
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d011      	beq.n	80077f4 <cdcd_control_xfer_cb+0x1ec>
          tud_cdc_send_break_cb(itf, request->wValue);
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	885b      	ldrh	r3, [r3, #2]
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077da:	4611      	mov	r1, r2
 80077dc:	4618      	mov	r0, r3
 80077de:	f3af 8000 	nop.w
      break;
 80077e2:	e007      	b.n	80077f4 <cdcd_control_xfer_cb+0x1ec>

    default:
      return false; // stall unsupported request
 80077e4:	2300      	movs	r3, #0
 80077e6:	e007      	b.n	80077f8 <cdcd_control_xfer_cb+0x1f0>
      break;
 80077e8:	bf00      	nop
 80077ea:	e004      	b.n	80077f6 <cdcd_control_xfer_cb+0x1ee>
      break;
 80077ec:	bf00      	nop
 80077ee:	e002      	b.n	80077f6 <cdcd_control_xfer_cb+0x1ee>
      break;
 80077f0:	bf00      	nop
 80077f2:	e000      	b.n	80077f6 <cdcd_control_xfer_cb+0x1ee>
      break;
 80077f4:	bf00      	nop
  }

  return true;
 80077f6:	2301      	movs	r3, #1
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3728      	adds	r7, #40	@ 0x28
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	20001570 	.word	0x20001570
 8007804:	00000000 	.word	0x00000000
 8007808:	2000022c 	.word	0x2000022c
 800780c:	08001985 	.word	0x08001985
 8007810:	00000000 	.word	0x00000000

08007814 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af00      	add	r7, sp, #0
 800781a:	603b      	str	r3, [r7, #0]
 800781c:	4603      	mov	r3, r0
 800781e:	71fb      	strb	r3, [r7, #7]
 8007820:	460b      	mov	r3, r1
 8007822:	71bb      	strb	r3, [r7, #6]
 8007824:	4613      	mov	r3, r2
 8007826:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8007828:	2300      	movs	r3, #0
 800782a:	77fb      	strb	r3, [r7, #31]
 800782c:	e013      	b.n	8007856 <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 800782e:	7ffb      	ldrb	r3, [r7, #31]
 8007830:	22e8      	movs	r2, #232	@ 0xe8
 8007832:	fb02 f303 	mul.w	r3, r2, r3
 8007836:	4a5f      	ldr	r2, [pc, #380]	@ (80079b4 <cdcd_xfer_cb+0x1a0>)
 8007838:	4413      	add	r3, r2
 800783a:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	78db      	ldrb	r3, [r3, #3]
 8007840:	79ba      	ldrb	r2, [r7, #6]
 8007842:	429a      	cmp	r2, r3
 8007844:	d00a      	beq.n	800785c <cdcd_xfer_cb+0x48>
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	789b      	ldrb	r3, [r3, #2]
 800784a:	79ba      	ldrb	r2, [r7, #6]
 800784c:	429a      	cmp	r2, r3
 800784e:	d005      	beq.n	800785c <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8007850:	7ffb      	ldrb	r3, [r7, #31]
 8007852:	3301      	adds	r3, #1
 8007854:	77fb      	strb	r3, [r7, #31]
 8007856:	7ffb      	ldrb	r3, [r7, #31]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d0e8      	beq.n	800782e <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 800785c:	7ffb      	ldrb	r3, [r7, #31]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00a      	beq.n	8007878 <cdcd_xfer_cb+0x64>
 8007862:	4b55      	ldr	r3, [pc, #340]	@ (80079b8 <cdcd_xfer_cb+0x1a4>)
 8007864:	60bb      	str	r3, [r7, #8]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d000      	beq.n	8007874 <cdcd_xfer_cb+0x60>
 8007872:	be00      	bkpt	0x0000
 8007874:	2300      	movs	r3, #0
 8007876:	e098      	b.n	80079aa <cdcd_xfer_cb+0x196>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8007878:	7ffb      	ldrb	r3, [r7, #31]
 800787a:	01db      	lsls	r3, r3, #7
 800787c:	4a4f      	ldr	r2, [pc, #316]	@ (80079bc <cdcd_xfer_cb+0x1a8>)
 800787e:	4413      	add	r3, r2
 8007880:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	78db      	ldrb	r3, [r3, #3]
 8007886:	79ba      	ldrb	r2, [r7, #6]
 8007888:	429a      	cmp	r2, r3
 800788a:	d148      	bne.n	800791e <cdcd_xfer_cb+0x10a>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	3310      	adds	r3, #16
 8007890:	6939      	ldr	r1, [r7, #16]
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	b292      	uxth	r2, r2
 8007896:	4618      	mov	r0, r3
 8007898:	f001 fb00 	bl	8008e9c <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 800789c:	4b48      	ldr	r3, [pc, #288]	@ (80079c0 <cdcd_xfer_cb+0x1ac>)
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d027      	beq.n	80078f2 <cdcd_xfer_cb+0xde>
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	795b      	ldrb	r3, [r3, #5]
 80078a6:	2bff      	cmp	r3, #255	@ 0xff
 80078a8:	d023      	beq.n	80078f2 <cdcd_xfer_cb+0xde>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 80078aa:	2300      	movs	r3, #0
 80078ac:	617b      	str	r3, [r7, #20]
 80078ae:	e01c      	b.n	80078ea <cdcd_xfer_cb+0xd6>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	795a      	ldrb	r2, [r3, #5]
 80078b4:	6939      	ldr	r1, [r7, #16]
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	440b      	add	r3, r1
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d111      	bne.n	80078e4 <cdcd_xfer_cb+0xd0>
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	3310      	adds	r3, #16
 80078c4:	4618      	mov	r0, r3
 80078c6:	f001 f9e3 	bl	8008c90 <tu_fifo_empty>
 80078ca:	4603      	mov	r3, r0
 80078cc:	f083 0301 	eor.w	r3, r3, #1
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d006      	beq.n	80078e4 <cdcd_xfer_cb+0xd0>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	795a      	ldrb	r2, [r3, #5]
 80078da:	7ffb      	ldrb	r3, [r7, #31]
 80078dc:	4611      	mov	r1, r2
 80078de:	4618      	mov	r0, r3
 80078e0:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	3301      	adds	r3, #1
 80078e8:	617b      	str	r3, [r7, #20]
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d3de      	bcc.n	80078b0 <cdcd_xfer_cb+0x9c>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 80078f2:	4b34      	ldr	r3, [pc, #208]	@ (80079c4 <cdcd_xfer_cb+0x1b0>)
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00e      	beq.n	8007916 <cdcd_xfer_cb+0x102>
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	3310      	adds	r3, #16
 80078fc:	4618      	mov	r0, r3
 80078fe:	f001 f9c7 	bl	8008c90 <tu_fifo_empty>
 8007902:	4603      	mov	r3, r0
 8007904:	f083 0301 	eor.w	r3, r3, #1
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <cdcd_xfer_cb+0x102>
      tud_cdc_rx_cb(itf);
 800790e:	7ffb      	ldrb	r3, [r7, #31]
 8007910:	4618      	mov	r0, r3
 8007912:	f7fa f863 	bl	80019dc <tud_cdc_rx_cb>
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 8007916:	7ffb      	ldrb	r3, [r7, #31]
 8007918:	4618      	mov	r0, r3
 800791a:	f7ff fb1b 	bl	8006f54 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	789b      	ldrb	r3, [r3, #2]
 8007922:	79ba      	ldrb	r2, [r7, #6]
 8007924:	429a      	cmp	r2, r3
 8007926:	d13f      	bne.n	80079a8 <cdcd_xfer_cb+0x194>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 8007928:	4b27      	ldr	r3, [pc, #156]	@ (80079c8 <cdcd_xfer_cb+0x1b4>)
 800792a:	2b00      	cmp	r3, #0
 800792c:	d003      	beq.n	8007936 <cdcd_xfer_cb+0x122>
      tud_cdc_tx_complete_cb(itf);
 800792e:	7ffb      	ldrb	r3, [r7, #31]
 8007930:	4618      	mov	r0, r3
 8007932:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 8007936:	7ffb      	ldrb	r3, [r7, #31]
 8007938:	4618      	mov	r0, r3
 800793a:	f7ff fc2f 	bl	800719c <tud_cdc_n_write_flush>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d131      	bne.n	80079a8 <cdcd_xfer_cb+0x194>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	331c      	adds	r3, #28
 8007948:	4618      	mov	r0, r3
 800794a:	f001 f96f 	bl	8008c2c <tu_fifo_count>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d129      	bne.n	80079a8 <cdcd_xfer_cb+0x194>
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d026      	beq.n	80079a8 <cdcd_xfer_cb+0x194>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007960:	2b00      	cmp	r3, #0
 8007962:	d121      	bne.n	80079a8 <cdcd_xfer_cb+0x194>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	789a      	ldrb	r2, [r3, #2]
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	4611      	mov	r1, r2
 800796c:	4618      	mov	r0, r3
 800796e:	f002 fe79 	bl	800a664 <usbd_edpt_claim>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d017      	beq.n	80079a8 <cdcd_xfer_cb+0x194>
          TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0));
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	7899      	ldrb	r1, [r3, #2]
 800797c:	79f8      	ldrb	r0, [r7, #7]
 800797e:	2300      	movs	r3, #0
 8007980:	2200      	movs	r2, #0
 8007982:	f002 febf 	bl	800a704 <usbd_edpt_xfer>
 8007986:	4603      	mov	r3, r0
 8007988:	f083 0301 	eor.w	r3, r3, #1
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00a      	beq.n	80079a8 <cdcd_xfer_cb+0x194>
 8007992:	4b09      	ldr	r3, [pc, #36]	@ (80079b8 <cdcd_xfer_cb+0x1a4>)
 8007994:	60fb      	str	r3, [r7, #12]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d000      	beq.n	80079a4 <cdcd_xfer_cb+0x190>
 80079a2:	be00      	bkpt	0x0000
 80079a4:	2300      	movs	r3, #0
 80079a6:	e000      	b.n	80079aa <cdcd_xfer_cb+0x196>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 80079a8:	2301      	movs	r3, #1
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3720      	adds	r7, #32
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	20001570 	.word	0x20001570
 80079b8:	e000edf0 	.word	0xe000edf0
 80079bc:	20001658 	.word	0x20001658
 80079c0:	00000000 	.word	0x00000000
 80079c4:	080019dd 	.word	0x080019dd
 80079c8:	00000000 	.word	0x00000000

080079cc <tud_hid_set_idle_cb>:
TU_ATTR_WEAK void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
  (void) instance;
  (void) protocol;
}

TU_ATTR_WEAK bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate) {
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	4603      	mov	r3, r0
 80079d4:	460a      	mov	r2, r1
 80079d6:	71fb      	strb	r3, [r7, #7]
 80079d8:	4613      	mov	r3, r2
 80079da:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) idle_rate;
  return true;
 80079dc:	2301      	movs	r3, #1
}
 80079de:	4618      	mov	r0, r3
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <tud_hid_report_failed_cb>:
  (void) report;
  (void) len;
}

// Invoked when a transfer wasn't successful
TU_ATTR_WEAK void tud_hid_report_failed_cb(uint8_t instance, hid_report_type_t report_type, uint8_t const* report, uint16_t xferred_bytes) {
 80079ea:	b480      	push	{r7}
 80079ec:	b083      	sub	sp, #12
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	603a      	str	r2, [r7, #0]
 80079f2:	461a      	mov	r2, r3
 80079f4:	4603      	mov	r3, r0
 80079f6:	71fb      	strb	r3, [r7, #7]
 80079f8:	460b      	mov	r3, r1
 80079fa:	71bb      	strb	r3, [r7, #6]
 80079fc:	4613      	mov	r3, r2
 80079fe:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report_type;
  (void) report;
  (void) xferred_bytes;
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance) {
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	4603      	mov	r3, r0
 8007a14:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 8007a16:	2300      	movs	r3, #0
 8007a18:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 8007a1a:	79fa      	ldrb	r2, [r7, #7]
 8007a1c:	491b      	ldr	r1, [pc, #108]	@ (8007a8c <tud_hid_n_ready+0x80>)
 8007a1e:	4613      	mov	r3, r2
 8007a20:	005b      	lsls	r3, r3, #1
 8007a22:	4413      	add	r3, r2
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	440b      	add	r3, r1
 8007a28:	3301      	adds	r3, #1
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	73bb      	strb	r3, [r7, #14]
 8007a2e:	f001 faf7 	bl	8009020 <tud_mounted>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d009      	beq.n	8007a4c <tud_hid_n_ready+0x40>
 8007a38:	f001 fb04 	bl	8009044 <tud_suspended>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f083 0301 	eor.w	r3, r3, #1
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d001      	beq.n	8007a4c <tud_hid_n_ready+0x40>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e000      	b.n	8007a4e <tud_hid_n_ready+0x42>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d010      	beq.n	8007a7a <tud_hid_n_ready+0x6e>
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00d      	beq.n	8007a7a <tud_hid_n_ready+0x6e>
 8007a5e:	7bba      	ldrb	r2, [r7, #14]
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
 8007a62:	4611      	mov	r1, r2
 8007a64:	4618      	mov	r0, r3
 8007a66:	f002 fec3 	bl	800a7f0 <usbd_edpt_busy>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	f083 0301 	eor.w	r3, r3, #1
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <tud_hid_n_ready+0x6e>
 8007a76:	2301      	movs	r3, #1
 8007a78:	e000      	b.n	8007a7c <tud_hid_n_ready+0x70>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	b2db      	uxtb	r3, r3
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	200016d8 	.word	0x200016d8

08007a90 <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const *report, uint16_t len) {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b08e      	sub	sp, #56	@ 0x38
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	603a      	str	r2, [r7, #0]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	71fb      	strb	r3, [r7, #7]
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	71bb      	strb	r3, [r7, #6]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(instance < CFG_TUD_HID);
 8007aa6:	79fb      	ldrb	r3, [r7, #7]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <tud_hid_n_report+0x20>
 8007aac:	2300      	movs	r3, #0
 8007aae:	e06d      	b.n	8007b8c <tud_hid_n_report+0xfc>
  const uint8_t rhport = 0;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  hidd_interface_t *p_hid = &_hidd_itf[instance];
 8007ab6:	79fa      	ldrb	r2, [r7, #7]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	4413      	add	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4a34      	ldr	r2, [pc, #208]	@ (8007b94 <tud_hid_n_report+0x104>)
 8007ac2:	4413      	add	r3, r2
 8007ac4:	633b      	str	r3, [r7, #48]	@ 0x30
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8007ac6:	79fa      	ldrb	r2, [r7, #7]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	005b      	lsls	r3, r3, #1
 8007acc:	4413      	add	r3, r2
 8007ace:	011b      	lsls	r3, r3, #4
 8007ad0:	4a31      	ldr	r2, [pc, #196]	@ (8007b98 <tud_hid_n_report+0x108>)
 8007ad2:	4413      	add	r3, r2
 8007ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_hid->ep_in));
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad8:	785a      	ldrb	r2, [r3, #1]
 8007ada:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ade:	4611      	mov	r1, r2
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f002 fdbf 	bl	800a664 <usbd_edpt_claim>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	f083 0301 	eor.w	r3, r3, #1
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <tud_hid_n_report+0x66>
 8007af2:	2300      	movs	r3, #0
 8007af4:	e04a      	b.n	8007b8c <tud_hid_n_report+0xfc>

  // prepare data
  if (report_id) {
 8007af6:	79bb      	ldrb	r3, [r7, #6]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d021      	beq.n	8007b40 <tud_hid_n_report+0xb0>
    p_epbuf->epin[0] = report_id;
 8007afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007afe:	79ba      	ldrb	r2, [r7, #6]
 8007b00:	741a      	strb	r2, [r3, #16]
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin + 1, CFG_TUD_HID_EP_BUFSIZE - 1, report, len));
 8007b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b04:	3310      	adds	r3, #16
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	88bb      	ldrh	r3, [r7, #4]
 8007b0a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007b0c:	220f      	movs	r2, #15
 8007b0e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b10:	683a      	ldr	r2, [r7, #0]
 8007b12:	623a      	str	r2, [r7, #32]
 8007b14:	61fb      	str	r3, [r7, #28]
  if ( count > destsz ) {
 8007b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d202      	bcs.n	8007b24 <tud_hid_n_report+0x94>
    return -1;
 8007b1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b22:	e005      	b.n	8007b30 <tud_hid_n_report+0xa0>
  memcpy(dest, src, count);
 8007b24:	69fa      	ldr	r2, [r7, #28]
 8007b26:	6a39      	ldr	r1, [r7, #32]
 8007b28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b2a:	f005 fc3a 	bl	800d3a2 <memcpy>
  return 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d001      	beq.n	8007b38 <tud_hid_n_report+0xa8>
 8007b34:	2300      	movs	r3, #0
 8007b36:	e029      	b.n	8007b8c <tud_hid_n_report+0xfc>
    len++;
 8007b38:	88bb      	ldrh	r3, [r7, #4]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	80bb      	strh	r3, [r7, #4]
 8007b3e:	e01a      	b.n	8007b76 <tud_hid_n_report+0xe6>
  } else {
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin, CFG_TUD_HID_EP_BUFSIZE, report, len));
 8007b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b42:	f103 0210 	add.w	r2, r3, #16
 8007b46:	88bb      	ldrh	r3, [r7, #4]
 8007b48:	61ba      	str	r2, [r7, #24]
 8007b4a:	2210      	movs	r2, #16
 8007b4c:	617a      	str	r2, [r7, #20]
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	613a      	str	r2, [r7, #16]
 8007b52:	60fb      	str	r3, [r7, #12]
  if ( count > destsz ) {
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d202      	bcs.n	8007b62 <tud_hid_n_report+0xd2>
    return -1;
 8007b5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b60:	e005      	b.n	8007b6e <tud_hid_n_report+0xde>
  memcpy(dest, src, count);
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	6939      	ldr	r1, [r7, #16]
 8007b66:	69b8      	ldr	r0, [r7, #24]
 8007b68:	f005 fc1b 	bl	800d3a2 <memcpy>
  return 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <tud_hid_n_report+0xe6>
 8007b72:	2300      	movs	r3, #0
 8007b74:	e00a      	b.n	8007b8c <tud_hid_n_report+0xfc>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_epbuf->epin, len);
 8007b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b78:	7859      	ldrb	r1, [r3, #1]
 8007b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b7c:	f103 0210 	add.w	r2, r3, #16
 8007b80:	88bb      	ldrh	r3, [r7, #4]
 8007b82:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8007b86:	f002 fdbd 	bl	800a704 <usbd_edpt_xfer>
 8007b8a:	4603      	mov	r3, r0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3738      	adds	r7, #56	@ 0x38
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	200016d8 	.word	0x200016d8
 8007b98:	200016e4 	.word	0x200016e4

08007b9c <tud_hid_n_keyboard_report>:

uint8_t tud_hid_n_get_protocol(uint8_t instance) {
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	603b      	str	r3, [r7, #0]
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	71fb      	strb	r3, [r7, #7]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	71bb      	strb	r3, [r7, #6]
 8007bac:	4613      	mov	r3, r2
 8007bae:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;
  report.modifier = modifier;
 8007bb0:	797b      	ldrb	r3, [r7, #5]
 8007bb2:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	727b      	strb	r3, [r7, #9]

  if (keycode) {
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d007      	beq.n	8007bce <tud_hid_n_keyboard_report+0x32>
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	f107 030a 	add.w	r3, r7, #10
 8007bc4:	6811      	ldr	r1, [r2, #0]
 8007bc6:	6019      	str	r1, [r3, #0]
 8007bc8:	8892      	ldrh	r2, [r2, #4]
 8007bca:	809a      	strh	r2, [r3, #4]
 8007bcc:	e007      	b.n	8007bde <tud_hid_n_keyboard_report+0x42>
  } else {
    tu_memclr(report.keycode, 6);
 8007bce:	f107 0308 	add.w	r3, r7, #8
 8007bd2:	3302      	adds	r3, #2
 8007bd4:	2206      	movs	r2, #6
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f005 fb51 	bl	800d280 <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 8007bde:	f107 0208 	add.w	r2, r7, #8
 8007be2:	79b9      	ldrb	r1, [r7, #6]
 8007be4:	79f8      	ldrb	r0, [r7, #7]
 8007be6:	2308      	movs	r3, #8
 8007be8:	f7ff ff52 	bl	8007a90 <tud_hid_n_report>
 8007bec:	4603      	mov	r3, r0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <hidd_init>:
}

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void) {
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	af00      	add	r7, sp, #0
  hidd_reset(0);
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	f000 f80a 	bl	8007c14 <hidd_reset>
}
 8007c00:	bf00      	nop
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <hidd_deinit>:

bool hidd_deinit(void) {
 8007c04:	b480      	push	{r7}
 8007c06:	af00      	add	r7, sp, #0
  return true;
 8007c08:	2301      	movs	r3, #1
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <hidd_reset>:

void hidd_reset(uint8_t rhport) {
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 8007c1e:	220c      	movs	r2, #12
 8007c20:	2100      	movs	r1, #0
 8007c22:	4803      	ldr	r0, [pc, #12]	@ (8007c30 <hidd_reset+0x1c>)
 8007c24:	f005 fb2c 	bl	800d280 <memset>
}
 8007c28:	bf00      	nop
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	200016d8 	.word	0x200016d8

08007c34 <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const *desc_itf, uint16_t max_len) {
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b094      	sub	sp, #80	@ 0x50
 8007c38:	af02      	add	r7, sp, #8
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	6039      	str	r1, [r7, #0]
 8007c3e:	71fb      	strb	r3, [r7, #7]
 8007c40:	4613      	mov	r3, r2
 8007c42:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	795b      	ldrb	r3, [r3, #5]
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	d001      	beq.n	8007c50 <hidd_open+0x1c>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e0ce      	b.n	8007dee <hidd_open+0x1ba>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	791b      	ldrb	r3, [r3, #4]
 8007c54:	461a      	mov	r2, r3
 8007c56:	00d2      	lsls	r2, r2, #3
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 8007c5c:	3312      	adds	r3, #18
 8007c5e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  TU_ASSERT(max_len >= drv_len, 0);
 8007c62:	88ba      	ldrh	r2, [r7, #4]
 8007c64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d20a      	bcs.n	8007c82 <hidd_open+0x4e>
 8007c6c:	4b62      	ldr	r3, [pc, #392]	@ (8007df8 <hidd_open+0x1c4>)
 8007c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d000      	beq.n	8007c7e <hidd_open+0x4a>
 8007c7c:	be00      	bkpt	0x0000
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e0b5      	b.n	8007dee <hidd_open+0x1ba>

  // Find available interface
  hidd_interface_t *p_hid;
  uint8_t hid_id;
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8007c82:	2300      	movs	r3, #0
 8007c84:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c88:	e011      	b.n	8007cae <hidd_open+0x7a>
    p_hid = &_hidd_itf[hid_id];
 8007c8a:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8007c8e:	4613      	mov	r3, r2
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	4413      	add	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4a59      	ldr	r2, [pc, #356]	@ (8007dfc <hidd_open+0x1c8>)
 8007c98:	4413      	add	r3, r2
 8007c9a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (p_hid->ep_in == 0) {
 8007c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c9e:	785b      	ldrb	r3, [r3, #1]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d009      	beq.n	8007cb8 <hidd_open+0x84>
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8007ca4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007ca8:	3301      	adds	r3, #1
 8007caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d0e9      	beq.n	8007c8a <hidd_open+0x56>
 8007cb6:	e000      	b.n	8007cba <hidd_open+0x86>
      break;
 8007cb8:	bf00      	nop
    }
  }
  TU_ASSERT(hid_id < CFG_TUD_HID, 0);
 8007cba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <hidd_open+0xa4>
 8007cc2:	4b4d      	ldr	r3, [pc, #308]	@ (8007df8 <hidd_open+0x1c4>)
 8007cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d000      	beq.n	8007cd4 <hidd_open+0xa0>
 8007cd2:	be00      	bkpt	0x0000
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	e08a      	b.n	8007dee <hidd_open+0x1ba>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_id];
 8007cd8:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8007cdc:	4613      	mov	r3, r2
 8007cde:	005b      	lsls	r3, r3, #1
 8007ce0:	4413      	add	r3, r2
 8007ce2:	011b      	lsls	r3, r3, #4
 8007ce4:	4a46      	ldr	r2, [pc, #280]	@ (8007e00 <hidd_open+0x1cc>)
 8007ce6:	4413      	add	r3, r2
 8007ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint8_t const *p_desc = (uint8_t const *)desc_itf;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf0:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8007d00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d04:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007d06:	6a3b      	ldr	r3, [r7, #32]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 8007d0c:	2b21      	cmp	r3, #33	@ 0x21
 8007d0e:	d00a      	beq.n	8007d26 <hidd_open+0xf2>
 8007d10:	4b39      	ldr	r3, [pc, #228]	@ (8007df8 <hidd_open+0x1c4>)
 8007d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d000      	beq.n	8007d22 <hidd_open+0xee>
 8007d20:	be00      	bkpt	0x0000
 8007d22:	2300      	movs	r3, #0
 8007d24:	e063      	b.n	8007dee <hidd_open+0x1ba>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *)p_desc;
 8007d26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d2a:	609a      	str	r2, [r3, #8]
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2e:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	461a      	mov	r2, r3
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8007d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	7919      	ldrb	r1, [r3, #4]
 8007d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d46:	3302      	adds	r3, #2
 8007d48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d4a:	3201      	adds	r2, #1
 8007d4c:	79f8      	ldrb	r0, [r7, #7]
 8007d4e:	9201      	str	r2, [sp, #4]
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	2303      	movs	r3, #3
 8007d54:	460a      	mov	r2, r1
 8007d56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007d58:	f002 fbd6 	bl	800a508 <usbd_open_edpt_pair>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	f083 0301 	eor.w	r3, r3, #1
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00a      	beq.n	8007d7e <hidd_open+0x14a>
 8007d68:	4b23      	ldr	r3, [pc, #140]	@ (8007df8 <hidd_open+0x1c4>)
 8007d6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d000      	beq.n	8007d7a <hidd_open+0x146>
 8007d78:	be00      	bkpt	0x0000
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	e037      	b.n	8007dee <hidd_open+0x1ba>

  if (desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT) {
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	799b      	ldrb	r3, [r3, #6]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d103      	bne.n	8007d8e <hidd_open+0x15a>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	79da      	ldrb	r2, [r3, #7]
 8007d8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d8c:	70da      	strb	r2, [r3, #3]
  }

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 8007d8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d90:	2201      	movs	r2, #1
 8007d92:	719a      	strb	r2, [r3, #6]
  p_hid->itf_num = desc_itf->bInterfaceNumber;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	789a      	ldrb	r2, [r3, #2]
 8007d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d9a:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const *)p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 8007d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	3307      	adds	r3, #7
 8007da2:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	881a      	ldrh	r2, [r3, #0]
 8007da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007daa:	809a      	strh	r2, [r3, #4]

  // Prepare for output endpoint
  if (p_hid->ep_out) {
 8007dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dae:	789b      	ldrb	r3, [r3, #2]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d01a      	beq.n	8007dea <hidd_open+0x1b6>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE), drv_len);
 8007db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007db6:	7899      	ldrb	r1, [r3, #2]
 8007db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dba:	f103 0220 	add.w	r2, r3, #32
 8007dbe:	79f8      	ldrb	r0, [r7, #7]
 8007dc0:	2310      	movs	r3, #16
 8007dc2:	f002 fc9f 	bl	800a704 <usbd_edpt_xfer>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	f083 0301 	eor.w	r3, r3, #1
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00b      	beq.n	8007dea <hidd_open+0x1b6>
 8007dd2:	4b09      	ldr	r3, [pc, #36]	@ (8007df8 <hidd_open+0x1c4>)
 8007dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d000      	beq.n	8007de4 <hidd_open+0x1b0>
 8007de2:	be00      	bkpt	0x0000
 8007de4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007de8:	e001      	b.n	8007dee <hidd_open+0x1ba>
  }

  return drv_len;
 8007dea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3748      	adds	r7, #72	@ 0x48
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	e000edf0 	.word	0xe000edf0
 8007dfc:	200016d8 	.word	0x200016d8
 8007e00:	200016e4 	.word	0x200016e4

08007e04 <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b094      	sub	sp, #80	@ 0x50
 8007e08:	af02      	add	r7, sp, #8
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	603a      	str	r2, [r7, #0]
 8007e0e:	71fb      	strb	r3, [r7, #7]
 8007e10:	460b      	mov	r3, r1
 8007e12:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	f003 031f 	and.w	r3, r3, #31
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d001      	beq.n	8007e26 <hidd_control_xfer_cb+0x22>
 8007e22:	2300      	movs	r3, #0
 8007e24:	e1d6      	b.n	80081d4 <hidd_control_xfer_cb+0x3d0>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	889b      	ldrh	r3, [r3, #4]
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8007e30:	2300      	movs	r3, #0
 8007e32:	77bb      	strb	r3, [r7, #30]
 8007e34:	e00f      	b.n	8007e56 <hidd_control_xfer_cb+0x52>
    if (itf_num == _hidd_itf[i].itf_num) {
 8007e36:	7fba      	ldrb	r2, [r7, #30]
 8007e38:	498f      	ldr	r1, [pc, #572]	@ (8008078 <hidd_control_xfer_cb+0x274>)
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	4413      	add	r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	440b      	add	r3, r1
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	7ffa      	ldrb	r2, [r7, #31]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d101      	bne.n	8007e50 <hidd_control_xfer_cb+0x4c>
      return i;
 8007e4c:	7fbb      	ldrb	r3, [r7, #30]
 8007e4e:	e006      	b.n	8007e5e <hidd_control_xfer_cb+0x5a>
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8007e50:	7fbb      	ldrb	r3, [r7, #30]
 8007e52:	3301      	adds	r3, #1
 8007e54:	77bb      	strb	r3, [r7, #30]
 8007e56:	7fbb      	ldrb	r3, [r7, #30]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d0ec      	beq.n	8007e36 <hidd_control_xfer_cb+0x32>
  return 0xFF;
 8007e5c:	23ff      	movs	r3, #255	@ 0xff
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 8007e5e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 8007e62:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <hidd_control_xfer_cb+0x6a>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	e1b2      	b.n	80081d4 <hidd_control_xfer_cb+0x3d0>
  hidd_interface_t *p_hid = &_hidd_itf[hid_itf];
 8007e6e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007e72:	4613      	mov	r3, r2
 8007e74:	005b      	lsls	r3, r3, #1
 8007e76:	4413      	add	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4a7f      	ldr	r2, [pc, #508]	@ (8008078 <hidd_control_xfer_cb+0x274>)
 8007e7c:	4413      	add	r3, r2
 8007e7e:	637b      	str	r3, [r7, #52]	@ 0x34
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_itf];
 8007e80:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007e84:	4613      	mov	r3, r2
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	4413      	add	r3, r2
 8007e8a:	011b      	lsls	r3, r3, #4
 8007e8c:	4a7b      	ldr	r2, [pc, #492]	@ (800807c <hidd_control_xfer_cb+0x278>)
 8007e8e:	4413      	add	r3, r2
 8007e90:	633b      	str	r3, [r7, #48]	@ 0x30

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) {
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d145      	bne.n	8007f2c <hidd_control_xfer_cb+0x128>
    //------------- STD Request -------------//
    if (stage == CONTROL_STAGE_SETUP) {
 8007ea0:	79bb      	ldrb	r3, [r7, #6]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	f040 8195 	bne.w	80081d2 <hidd_control_xfer_cb+0x3ce>
      uint8_t const desc_type = tu_u16_high(request->wValue);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	885b      	ldrh	r3, [r3, #2]
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8007eb0:	8bbb      	ldrh	r3, [r7, #28]
 8007eb2:	0a1b      	lsrs	r3, r3, #8
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID) {
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	785b      	ldrb	r3, [r3, #1]
 8007ec0:	2b06      	cmp	r3, #6
 8007ec2:	d11b      	bne.n	8007efc <hidd_control_xfer_cb+0xf8>
 8007ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ec8:	2b21      	cmp	r3, #33	@ 0x21
 8007eca:	d117      	bne.n	8007efc <hidd_control_xfer_cb+0xf8>
        TU_VERIFY(p_hid->hid_descriptor);
 8007ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d101      	bne.n	8007ed8 <hidd_control_xfer_cb+0xd4>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	e17d      	b.n	80081d4 <hidd_control_xfer_cb+0x3d0>
        TU_VERIFY(tud_control_xfer(rhport, request, (void *)(uintptr_t)p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 8007ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eda:	689a      	ldr	r2, [r3, #8]
 8007edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	79f8      	ldrb	r0, [r7, #7]
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	f002 fdf5 	bl	800aad4 <tud_control_xfer>
 8007eea:	4603      	mov	r3, r0
 8007eec:	f083 0301 	eor.w	r3, r3, #1
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f000 816d 	beq.w	80081d2 <hidd_control_xfer_cb+0x3ce>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e16b      	b.n	80081d4 <hidd_control_xfer_cb+0x3d0>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	785b      	ldrb	r3, [r3, #1]
 8007f00:	2b06      	cmp	r3, #6
 8007f02:	d111      	bne.n	8007f28 <hidd_control_xfer_cb+0x124>
 8007f04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f08:	2b22      	cmp	r3, #34	@ 0x22
 8007f0a:	d10d      	bne.n	8007f28 <hidd_control_xfer_cb+0x124>
        uint8_t const *desc_report = tud_hid_descriptor_report_cb(hid_itf);
 8007f0c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fc f941 	bl	8004198 <tud_hid_descriptor_report_cb>
 8007f16:	6238      	str	r0, [r7, #32]
        tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_report, p_hid->report_desc_len);
 8007f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f1a:	889b      	ldrh	r3, [r3, #4]
 8007f1c:	79f8      	ldrb	r0, [r7, #7]
 8007f1e:	6a3a      	ldr	r2, [r7, #32]
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	f002 fdd7 	bl	800aad4 <tud_control_xfer>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8007f26:	e154      	b.n	80081d2 <hidd_control_xfer_cb+0x3ce>
      } else {
        return false; // stall unsupported request
 8007f28:	2300      	movs	r3, #0
 8007f2a:	e153      	b.n	80081d4 <hidd_control_xfer_cb+0x3d0>
      }
    }
  } else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS) {
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b20      	cmp	r3, #32
 8007f38:	f040 813e 	bne.w	80081b8 <hidd_control_xfer_cb+0x3b4>
    //------------- Class Specific Request -------------//
    switch (request->bRequest) {
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	785b      	ldrb	r3, [r3, #1]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	2b0a      	cmp	r3, #10
 8007f44:	f200 8136 	bhi.w	80081b4 <hidd_control_xfer_cb+0x3b0>
 8007f48:	a201      	add	r2, pc, #4	@ (adr r2, 8007f50 <hidd_control_xfer_cb+0x14c>)
 8007f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4e:	bf00      	nop
 8007f50:	08007f7d 	.word	0x08007f7d
 8007f54:	08008153 	.word	0x08008153
 8007f58:	08008169 	.word	0x08008169
 8007f5c:	080081b5 	.word	0x080081b5
 8007f60:	080081b5 	.word	0x080081b5
 8007f64:	080081b5 	.word	0x080081b5
 8007f68:	080081b5 	.word	0x080081b5
 8007f6c:	080081b5 	.word	0x080081b5
 8007f70:	08008053 	.word	0x08008053
 8007f74:	0800810d 	.word	0x0800810d
 8007f78:	0800817f 	.word	0x0800817f
      case HID_REQ_CONTROL_GET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8007f7c:	79bb      	ldrb	r3, [r7, #6]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	f040 811c 	bne.w	80081bc <hidd_control_xfer_cb+0x3b8>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	885b      	ldrh	r3, [r3, #2]
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	82bb      	strh	r3, [r7, #20]
 8007f8c:	8abb      	ldrh	r3, [r7, #20]
 8007f8e:	0a1b      	lsrs	r3, r3, #8
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          uint8_t const report_id = tu_u16_low(request->wValue);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	885b      	ldrh	r3, [r3, #2]
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8007fa0:	8afb      	ldrh	r3, [r7, #22]
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

          uint8_t* report_buf = p_epbuf->ctrl;
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007faa:	647b      	str	r3, [r7, #68]	@ 0x44
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	88db      	ldrh	r3, [r3, #6]
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	837b      	strh	r3, [r7, #26]
 8007fb4:	2310      	movs	r3, #16
 8007fb6:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007fb8:	8b7a      	ldrh	r2, [r7, #26]
 8007fba:	8b3b      	ldrh	r3, [r7, #24]
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	bf28      	it	cs
 8007fc0:	4613      	movcs	r3, r2
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          uint16_t xferlen = 0;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ((report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1)) {
 8007fce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d013      	beq.n	8007ffe <hidd_control_xfer_cb+0x1fa>
 8007fd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d90f      	bls.n	8007ffe <hidd_control_xfer_cb+0x1fa>
            *report_buf++ = report_id;
 8007fde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fe0:	1c5a      	adds	r2, r3, #1
 8007fe2:	647a      	str	r2, [r7, #68]	@ 0x44
 8007fe4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8007fe8:	701a      	strb	r2, [r3, #0]
            req_len--;
 8007fea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            xferlen++;
 8007ff4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 8007ffe:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8008002:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8008006:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 800800a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008012:	f7f9 ff3d 	bl	8001e90 <tud_hid_get_report_cb>
 8008016:	4603      	mov	r3, r0
 8008018:	461a      	mov	r2, r3
 800801a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800801e:	4413      	add	r3, r2
 8008020:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          TU_ASSERT(xferlen > 0);
 8008024:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10a      	bne.n	8008042 <hidd_control_xfer_cb+0x23e>
 800802c:	4b14      	ldr	r3, [pc, #80]	@ (8008080 <hidd_control_xfer_cb+0x27c>)
 800802e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b00      	cmp	r3, #0
 800803a:	d000      	beq.n	800803e <hidd_control_xfer_cb+0x23a>
 800803c:	be00      	bkpt	0x0000
 800803e:	2300      	movs	r3, #0
 8008040:	e0c8      	b.n	80081d4 <hidd_control_xfer_cb+0x3d0>

          tud_control_xfer(rhport, request, p_epbuf->ctrl, xferlen);
 8008042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008044:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008048:	79f8      	ldrb	r0, [r7, #7]
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	f002 fd42 	bl	800aad4 <tud_control_xfer>
        }
        break;
 8008050:	e0b4      	b.n	80081bc <hidd_control_xfer_cb+0x3b8>

      case HID_REQ_CONTROL_SET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8008052:	79bb      	ldrb	r3, [r7, #6]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d115      	bne.n	8008084 <hidd_control_xfer_cb+0x280>
          TU_VERIFY(request->wLength <= CFG_TUD_HID_EP_BUFSIZE);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	88db      	ldrh	r3, [r3, #6]
 800805c:	b29b      	uxth	r3, r3
 800805e:	2b10      	cmp	r3, #16
 8008060:	d901      	bls.n	8008066 <hidd_control_xfer_cb+0x262>
 8008062:	2300      	movs	r3, #0
 8008064:	e0b6      	b.n	80081d4 <hidd_control_xfer_cb+0x3d0>
          tud_control_xfer(rhport, request, p_epbuf->ctrl, request->wLength);
 8008066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	88db      	ldrh	r3, [r3, #6]
 800806c:	b29b      	uxth	r3, r3
 800806e:	79f8      	ldrb	r0, [r7, #7]
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	f002 fd2f 	bl	800aad4 <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
        break;
 8008076:	e0a3      	b.n	80081c0 <hidd_control_xfer_cb+0x3bc>
 8008078:	200016d8 	.word	0x200016d8
 800807c:	200016e4 	.word	0x200016e4
 8008080:	e000edf0 	.word	0xe000edf0
        } else if (stage == CONTROL_STAGE_ACK) {
 8008084:	79bb      	ldrb	r3, [r7, #6]
 8008086:	2b03      	cmp	r3, #3
 8008088:	f040 809a 	bne.w	80081c0 <hidd_control_xfer_cb+0x3bc>
          uint8_t const report_type = tu_u16_high(request->wValue);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	885b      	ldrh	r3, [r3, #2]
 8008090:	b29b      	uxth	r3, r3
 8008092:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8008094:	89bb      	ldrh	r3, [r7, #12]
 8008096:	0a1b      	lsrs	r3, r3, #8
 8008098:	b29b      	uxth	r3, r3
 800809a:	b2db      	uxtb	r3, r3
 800809c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          uint8_t const report_id = tu_u16_low(request->wValue);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	885b      	ldrh	r3, [r3, #2]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80080a8:	89fb      	ldrh	r3, [r7, #14]
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          uint8_t const* report_buf = p_epbuf->ctrl;
 80080b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	88db      	ldrh	r3, [r3, #6]
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	827b      	strh	r3, [r7, #18]
 80080bc:	2310      	movs	r3, #16
 80080be:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80080c0:	8a7a      	ldrh	r2, [r7, #18]
 80080c2:	8a3b      	ldrh	r3, [r7, #16]
 80080c4:	4293      	cmp	r3, r2
 80080c6:	bf28      	it	cs
 80080c8:	4613      	movcs	r3, r2
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	877b      	strh	r3, [r7, #58]	@ 0x3a
          if ((report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0])) {
 80080ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00e      	beq.n	80080f4 <hidd_control_xfer_cb+0x2f0>
 80080d6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d90b      	bls.n	80080f4 <hidd_control_xfer_cb+0x2f0>
 80080dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d105      	bne.n	80080f4 <hidd_control_xfer_cb+0x2f0>
            report_buf++;
 80080e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ea:	3301      	adds	r3, #1
 80080ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
            report_len--;
 80080ee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80080f0:	3b01      	subs	r3, #1
 80080f2:	877b      	strh	r3, [r7, #58]	@ 0x3a
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 80080f4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80080f8:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 80080fc:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8008100:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008106:	f7f9 fed4 	bl	8001eb2 <tud_hid_set_report_cb>
        break;
 800810a:	e059      	b.n	80081c0 <hidd_control_xfer_cb+0x3bc>

      case HID_REQ_CONTROL_SET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 800810c:	79bb      	ldrb	r3, [r7, #6]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d158      	bne.n	80081c4 <hidd_control_xfer_cb+0x3c0>
          p_hid->idle_rate = tu_u16_high(request->wValue);
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	885b      	ldrh	r3, [r3, #2]
 8008116:	b29b      	uxth	r3, r3
 8008118:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 800811a:	897b      	ldrh	r3, [r7, #10]
 800811c:	0a1b      	lsrs	r3, r3, #8
 800811e:	b29b      	uxth	r3, r3
 8008120:	b2da      	uxtb	r2, r3
 8008122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008124:	71da      	strb	r2, [r3, #7]
          TU_VERIFY(tud_hid_set_idle_cb(hid_itf, p_hid->idle_rate)); // stall if false
 8008126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008128:	79da      	ldrb	r2, [r3, #7]
 800812a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800812e:	4611      	mov	r1, r2
 8008130:	4618      	mov	r0, r3
 8008132:	f7ff fc4b 	bl	80079cc <tud_hid_set_idle_cb>
 8008136:	4603      	mov	r3, r0
 8008138:	f083 0301 	eor.w	r3, r3, #1
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <hidd_control_xfer_cb+0x342>
 8008142:	2300      	movs	r3, #0
 8008144:	e046      	b.n	80081d4 <hidd_control_xfer_cb+0x3d0>
          tud_control_status(rhport, request);
 8008146:	79fb      	ldrb	r3, [r7, #7]
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	4618      	mov	r0, r3
 800814c:	f002 fc50 	bl	800a9f0 <tud_control_status>
        }
        break;
 8008150:	e038      	b.n	80081c4 <hidd_control_xfer_cb+0x3c0>

      case HID_REQ_CONTROL_GET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8008152:	79bb      	ldrb	r3, [r7, #6]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d137      	bne.n	80081c8 <hidd_control_xfer_cb+0x3c4>
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 8008158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800815a:	1dda      	adds	r2, r3, #7
 800815c:	79f8      	ldrb	r0, [r7, #7]
 800815e:	2301      	movs	r3, #1
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	f002 fcb7 	bl	800aad4 <tud_control_xfer>
        }
        break;
 8008166:	e02f      	b.n	80081c8 <hidd_control_xfer_cb+0x3c4>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8008168:	79bb      	ldrb	r3, [r7, #6]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d12e      	bne.n	80081cc <hidd_control_xfer_cb+0x3c8>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 800816e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008170:	1d9a      	adds	r2, r3, #6
 8008172:	79f8      	ldrb	r0, [r7, #7]
 8008174:	2301      	movs	r3, #1
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	f002 fcac 	bl	800aad4 <tud_control_xfer>
        }
        break;
 800817c:	e026      	b.n	80081cc <hidd_control_xfer_cb+0x3c8>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 800817e:	79bb      	ldrb	r3, [r7, #6]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d105      	bne.n	8008190 <hidd_control_xfer_cb+0x38c>
          tud_control_status(rhport, request);
 8008184:	79fb      	ldrb	r3, [r7, #7]
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	4618      	mov	r0, r3
 800818a:	f002 fc31 	bl	800a9f0 <tud_control_status>
        } else if (stage == CONTROL_STAGE_ACK) {
          p_hid->protocol_mode = (uint8_t) request->wValue;
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
        }
        break;
 800818e:	e01f      	b.n	80081d0 <hidd_control_xfer_cb+0x3cc>
        } else if (stage == CONTROL_STAGE_ACK) {
 8008190:	79bb      	ldrb	r3, [r7, #6]
 8008192:	2b03      	cmp	r3, #3
 8008194:	d11c      	bne.n	80081d0 <hidd_control_xfer_cb+0x3cc>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	885b      	ldrh	r3, [r3, #2]
 800819a:	b29b      	uxth	r3, r3
 800819c:	b2da      	uxtb	r2, r3
 800819e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081a0:	719a      	strb	r2, [r3, #6]
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 80081a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081a4:	799a      	ldrb	r2, [r3, #6]
 80081a6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80081aa:	4611      	mov	r1, r2
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7f9 fe53 	bl	8001e58 <tud_hid_set_protocol_cb>
        break;
 80081b2:	e00d      	b.n	80081d0 <hidd_control_xfer_cb+0x3cc>

      default:
        return false; // stall unsupported request
 80081b4:	2300      	movs	r3, #0
 80081b6:	e00d      	b.n	80081d4 <hidd_control_xfer_cb+0x3d0>
    }
  } else {
    return false; // stall unsupported request
 80081b8:	2300      	movs	r3, #0
 80081ba:	e00b      	b.n	80081d4 <hidd_control_xfer_cb+0x3d0>
        break;
 80081bc:	bf00      	nop
 80081be:	e008      	b.n	80081d2 <hidd_control_xfer_cb+0x3ce>
        break;
 80081c0:	bf00      	nop
 80081c2:	e006      	b.n	80081d2 <hidd_control_xfer_cb+0x3ce>
        break;
 80081c4:	bf00      	nop
 80081c6:	e004      	b.n	80081d2 <hidd_control_xfer_cb+0x3ce>
        break;
 80081c8:	bf00      	nop
 80081ca:	e002      	b.n	80081d2 <hidd_control_xfer_cb+0x3ce>
        break;
 80081cc:	bf00      	nop
 80081ce:	e000      	b.n	80081d2 <hidd_control_xfer_cb+0x3ce>
        break;
 80081d0:	bf00      	nop
  }

  return true;
 80081d2:	2301      	movs	r3, #1
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3748      	adds	r7, #72	@ 0x48
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08a      	sub	sp, #40	@ 0x28
 80081e0:	af02      	add	r7, sp, #8
 80081e2:	603b      	str	r3, [r7, #0]
 80081e4:	4603      	mov	r3, r0
 80081e6:	71fb      	strb	r3, [r7, #7]
 80081e8:	460b      	mov	r3, r1
 80081ea:	71bb      	strb	r3, [r7, #6]
 80081ec:	4613      	mov	r3, r2
 80081ee:	717b      	strb	r3, [r7, #5]
  uint8_t instance;
  hidd_interface_t *p_hid;

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 80081f0:	2300      	movs	r3, #0
 80081f2:	77fb      	strb	r3, [r7, #31]
 80081f4:	e014      	b.n	8008220 <hidd_xfer_cb+0x44>
    p_hid = &_hidd_itf[instance];
 80081f6:	7ffa      	ldrb	r2, [r7, #31]
 80081f8:	4613      	mov	r3, r2
 80081fa:	005b      	lsls	r3, r3, #1
 80081fc:	4413      	add	r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4a3e      	ldr	r2, [pc, #248]	@ (80082fc <hidd_xfer_cb+0x120>)
 8008202:	4413      	add	r3, r2
 8008204:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in)) {
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	789b      	ldrb	r3, [r3, #2]
 800820a:	79ba      	ldrb	r2, [r7, #6]
 800820c:	429a      	cmp	r2, r3
 800820e:	d00a      	beq.n	8008226 <hidd_xfer_cb+0x4a>
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	785b      	ldrb	r3, [r3, #1]
 8008214:	79ba      	ldrb	r2, [r7, #6]
 8008216:	429a      	cmp	r2, r3
 8008218:	d005      	beq.n	8008226 <hidd_xfer_cb+0x4a>
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 800821a:	7ffb      	ldrb	r3, [r7, #31]
 800821c:	3301      	adds	r3, #1
 800821e:	77fb      	strb	r3, [r7, #31]
 8008220:	7ffb      	ldrb	r3, [r7, #31]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d0e7      	beq.n	80081f6 <hidd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 8008226:	7ffb      	ldrb	r3, [r7, #31]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00a      	beq.n	8008242 <hidd_xfer_cb+0x66>
 800822c:	4b34      	ldr	r3, [pc, #208]	@ (8008300 <hidd_xfer_cb+0x124>)
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	2b00      	cmp	r3, #0
 800823a:	d000      	beq.n	800823e <hidd_xfer_cb+0x62>
 800823c:	be00      	bkpt	0x0000
 800823e:	2300      	movs	r3, #0
 8008240:	e057      	b.n	80082f2 <hidd_xfer_cb+0x116>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8008242:	7ffa      	ldrb	r2, [r7, #31]
 8008244:	4613      	mov	r3, r2
 8008246:	005b      	lsls	r3, r3, #1
 8008248:	4413      	add	r3, r2
 800824a:	011b      	lsls	r3, r3, #4
 800824c:	4a2d      	ldr	r2, [pc, #180]	@ (8008304 <hidd_xfer_cb+0x128>)
 800824e:	4413      	add	r3, r2
 8008250:	617b      	str	r3, [r7, #20]

  if (ep_addr == p_hid->ep_in) {
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	785b      	ldrb	r3, [r3, #1]
 8008256:	79ba      	ldrb	r2, [r7, #6]
 8008258:	429a      	cmp	r2, r3
 800825a:	d116      	bne.n	800828a <hidd_xfer_cb+0xae>
    // Input report
    if (XFER_RESULT_SUCCESS == result) {
 800825c:	797b      	ldrb	r3, [r7, #5]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d109      	bne.n	8008276 <hidd_xfer_cb+0x9a>
      tud_hid_report_complete_cb(instance, p_epbuf->epin, (uint16_t) xferred_bytes);
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	f103 0110 	add.w	r1, r3, #16
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	b29a      	uxth	r2, r3
 800826c:	7ffb      	ldrb	r3, [r7, #31]
 800826e:	4618      	mov	r0, r3
 8008270:	f7f9 fe00 	bl	8001e74 <tud_hid_report_complete_cb>
 8008274:	e03c      	b.n	80082f0 <hidd_xfer_cb+0x114>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_INPUT, p_epbuf->epin, (uint16_t) xferred_bytes);
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f103 0210 	add.w	r2, r3, #16
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	b29b      	uxth	r3, r3
 8008280:	7ff8      	ldrb	r0, [r7, #31]
 8008282:	2101      	movs	r1, #1
 8008284:	f7ff fbb1 	bl	80079ea <tud_hid_report_failed_cb>
 8008288:	e032      	b.n	80082f0 <hidd_xfer_cb+0x114>
    }
  } else {
    // Output report
    if (XFER_RESULT_SUCCESS == result) {
 800828a:	797b      	ldrb	r3, [r7, #5]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10c      	bne.n	80082aa <hidd_xfer_cb+0xce>
      tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t)xferred_bytes);
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	f103 0220 	add.w	r2, r3, #32
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	b29b      	uxth	r3, r3
 800829a:	7ff8      	ldrb	r0, [r7, #31]
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	4613      	mov	r3, r2
 80082a0:	2202      	movs	r2, #2
 80082a2:	2100      	movs	r1, #0
 80082a4:	f7f9 fe05 	bl	8001eb2 <tud_hid_set_report_cb>
 80082a8:	e008      	b.n	80082bc <hidd_xfer_cb+0xe0>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t) xferred_bytes);
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	f103 0220 	add.w	r2, r3, #32
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	7ff8      	ldrb	r0, [r7, #31]
 80082b6:	2102      	movs	r1, #2
 80082b8:	f7ff fb97 	bl	80079ea <tud_hid_report_failed_cb>
    }

    // prepare for new transfer
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE));
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	7899      	ldrb	r1, [r3, #2]
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f103 0220 	add.w	r2, r3, #32
 80082c6:	79f8      	ldrb	r0, [r7, #7]
 80082c8:	2310      	movs	r3, #16
 80082ca:	f002 fa1b 	bl	800a704 <usbd_edpt_xfer>
 80082ce:	4603      	mov	r3, r0
 80082d0:	f083 0301 	eor.w	r3, r3, #1
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00a      	beq.n	80082f0 <hidd_xfer_cb+0x114>
 80082da:	4b09      	ldr	r3, [pc, #36]	@ (8008300 <hidd_xfer_cb+0x124>)
 80082dc:	613b      	str	r3, [r7, #16]
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d000      	beq.n	80082ec <hidd_xfer_cb+0x110>
 80082ea:	be00      	bkpt	0x0000
 80082ec:	2300      	movs	r3, #0
 80082ee:	e000      	b.n	80082f2 <hidd_xfer_cb+0x116>
  }

  return true;
 80082f0:	2301      	movs	r3, #1
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3720      	adds	r7, #32
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	200016d8 	.word	0x200016d8
 8008300:	e000edf0 	.word	0xe000edf0
 8008304:	200016e4 	.word	0x200016e4

08008308 <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	4611      	mov	r1, r2
 8008314:	461a      	mov	r2, r3
 8008316:	460b      	mov	r3, r1
 8008318:	80fb      	strh	r3, [r7, #6]
 800831a:	4613      	mov	r3, r2
 800831c:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 800831e:	88fb      	ldrh	r3, [r7, #6]
 8008320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008324:	d901      	bls.n	800832a <tu_fifo_config+0x22>
 8008326:	2300      	movs	r3, #0
 8008328:	e01b      	b.n	8008362 <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	88fa      	ldrh	r2, [r7, #6]
 8008334:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8008336:	88bb      	ldrh	r3, [r7, #4]
 8008338:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800833c:	b299      	uxth	r1, r3
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	88d3      	ldrh	r3, [r2, #6]
 8008342:	f361 030e 	bfi	r3, r1, #0, #15
 8008346:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	79d3      	ldrb	r3, [r2, #7]
 800834c:	7e39      	ldrb	r1, [r7, #24]
 800834e:	f361 13c7 	bfi	r3, r1, #7, #1
 8008352:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8008360:	2301      	movs	r3, #1
}
 8008362:	4618      	mov	r0, r3
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b08a      	sub	sp, #40	@ 0x28
 8008372:	af00      	add	r7, sp, #0
 8008374:	60f8      	str	r0, [r7, #12]
 8008376:	60b9      	str	r1, [r7, #8]
 8008378:	4613      	mov	r3, r2
 800837a:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8008380:	88fb      	ldrh	r3, [r7, #6]
 8008382:	089b      	lsrs	r3, r3, #2
 8008384:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8008386:	e00b      	b.n	80083a0 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8008388:	6a3b      	ldr	r3, [r7, #32]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	61ba      	str	r2, [r7, #24]
 8008390:	617b      	str	r3, [r7, #20]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	601a      	str	r2, [r3, #0]
}
 8008398:	bf00      	nop
    ff_buf += 4;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3304      	adds	r3, #4
 800839e:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 80083a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80083a2:	1e5a      	subs	r2, r3, #1
 80083a4:	84fa      	strh	r2, [r7, #38]	@ 0x26
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1ee      	bne.n	8008388 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 80083aa:	88fb      	ldrh	r3, [r7, #6]
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	f003 0303 	and.w	r3, r3, #3
 80083b2:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80083b4:	7ffb      	ldrb	r3, [r7, #31]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d009      	beq.n	80083ce <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 80083c0:	7ffa      	ldrb	r2, [r7, #31]
 80083c2:	f107 0310 	add.w	r3, r7, #16
 80083c6:	4619      	mov	r1, r3
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f004 ffea 	bl	800d3a2 <memcpy>
  }
}
 80083ce:	bf00      	nop
 80083d0:	3728      	adds	r7, #40	@ 0x28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b08a      	sub	sp, #40	@ 0x28
 80083da:	af00      	add	r7, sp, #0
 80083dc:	60f8      	str	r0, [r7, #12]
 80083de:	60b9      	str	r1, [r7, #8]
 80083e0:	4613      	mov	r3, r2
 80083e2:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 80083e8:	88fb      	ldrh	r3, [r7, #6]
 80083ea:	089b      	lsrs	r3, r3, #2
 80083ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 80083ee:	e008      	b.n	8008402 <_ff_pull_const_addr+0x2c>
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	3304      	adds	r3, #4
 8008400:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8008402:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008404:	1e5a      	subs	r2, r3, #1
 8008406:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1f1      	bne.n	80083f0 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 800840c:	88fb      	ldrh	r3, [r7, #6]
 800840e:	b2db      	uxtb	r3, r3
 8008410:	f003 0303 	and.w	r3, r3, #3
 8008414:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8008416:	7ffb      	ldrb	r3, [r7, #31]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00b      	beq.n	8008434 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 800841c:	2300      	movs	r3, #0
 800841e:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8008420:	7ffa      	ldrb	r2, [r7, #31]
 8008422:	f107 0314 	add.w	r3, r7, #20
 8008426:	68b9      	ldr	r1, [r7, #8]
 8008428:	4618      	mov	r0, r3
 800842a:	f004 ffba 	bl	800d3a2 <memcpy>

    *reg_tx = tmp32;
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	601a      	str	r2, [r3, #0]
  }
}
 8008434:	bf00      	nop
 8008436:	3728      	adds	r7, #40	@ 0x28
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	4613      	mov	r3, r2
 8008448:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	88fa      	ldrh	r2, [r7, #6]
 8008450:	68f9      	ldr	r1, [r7, #12]
 8008452:	88c9      	ldrh	r1, [r1, #6]
 8008454:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8008458:	b289      	uxth	r1, r1
 800845a:	fb01 f202 	mul.w	r2, r1, r2
 800845e:	1898      	adds	r0, r3, r2
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	88db      	ldrh	r3, [r3, #6]
 8008464:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008468:	b29b      	uxth	r3, r3
 800846a:	461a      	mov	r2, r3
 800846c:	68b9      	ldr	r1, [r7, #8]
 800846e:	f004 ff98 	bl	800d3a2 <memcpy>
}
 8008472:	bf00      	nop
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b08e      	sub	sp, #56	@ 0x38
 800847e:	af00      	add	r7, sp, #0
 8008480:	60f8      	str	r0, [r7, #12]
 8008482:	60b9      	str	r1, [r7, #8]
 8008484:	4611      	mov	r1, r2
 8008486:	461a      	mov	r2, r3
 8008488:	460b      	mov	r3, r1
 800848a:	80fb      	strh	r3, [r7, #6]
 800848c:	4613      	mov	r3, r2
 800848e:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	889a      	ldrh	r2, [r3, #4]
 8008494:	88bb      	ldrh	r3, [r7, #4]
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 800849a:	88fa      	ldrh	r2, [r7, #6]
 800849c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	88db      	ldrh	r3, [r3, #6]
 80084a6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	461a      	mov	r2, r3
 80084ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80084b0:	fb13 f302 	smulbb	r3, r3, r2
 80084b4:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	88db      	ldrh	r3, [r3, #6]
 80084ba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80084be:	b29b      	uxth	r3, r3
 80084c0:	461a      	mov	r2, r3
 80084c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80084c4:	fb13 f302 	smulbb	r3, r3, r2
 80084c8:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	88ba      	ldrh	r2, [r7, #4]
 80084d0:	68f9      	ldr	r1, [r7, #12]
 80084d2:	88c9      	ldrh	r1, [r1, #6]
 80084d4:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80084d8:	b289      	uxth	r1, r1
 80084da:	fb01 f202 	mul.w	r2, r1, r2
 80084de:	4413      	add	r3, r2
 80084e0:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 80084e2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d002      	beq.n	80084f0 <_ff_push_n+0x76>
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d022      	beq.n	8008534 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 80084ee:	e09e      	b.n	800862e <_ff_push_n+0x1b4>
      if(n <= lin_count)
 80084f0:	88fa      	ldrh	r2, [r7, #6]
 80084f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d80d      	bhi.n	8008514 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 80084f8:	88fb      	ldrh	r3, [r7, #6]
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	88d2      	ldrh	r2, [r2, #6]
 80084fe:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008502:	b292      	uxth	r2, r2
 8008504:	fb02 f303 	mul.w	r3, r2, r3
 8008508:	461a      	mov	r2, r3
 800850a:	68b9      	ldr	r1, [r7, #8]
 800850c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800850e:	f004 ff48 	bl	800d3a2 <memcpy>
      break;
 8008512:	e08c      	b.n	800862e <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8008514:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008516:	461a      	mov	r2, r3
 8008518:	68b9      	ldr	r1, [r7, #8]
 800851a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800851c:	f004 ff41 	bl	800d3a2 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6818      	ldr	r0, [r3, #0]
 8008524:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	4413      	add	r3, r2
 800852a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800852c:	4619      	mov	r1, r3
 800852e:	f004 ff38 	bl	800d3a2 <memcpy>
      break;
 8008532:	e07c      	b.n	800862e <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8008534:	88fa      	ldrh	r2, [r7, #6]
 8008536:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008538:	429a      	cmp	r2, r3
 800853a:	d80f      	bhi.n	800855c <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	88db      	ldrh	r3, [r3, #6]
 8008540:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008544:	b29b      	uxth	r3, r3
 8008546:	461a      	mov	r2, r3
 8008548:	88fb      	ldrh	r3, [r7, #6]
 800854a:	fb13 f302 	smulbb	r3, r3, r2
 800854e:	b29b      	uxth	r3, r3
 8008550:	461a      	mov	r2, r3
 8008552:	68b9      	ldr	r1, [r7, #8]
 8008554:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008556:	f7ff ff0a 	bl	800836e <_ff_push_const_addr>
      break;
 800855a:	e067      	b.n	800862c <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 800855c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800855e:	f023 0303 	bic.w	r3, r3, #3
 8008562:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8008564:	8c3b      	ldrh	r3, [r7, #32]
 8008566:	461a      	mov	r2, r3
 8008568:	68b9      	ldr	r1, [r7, #8]
 800856a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800856c:	f7ff feff 	bl	800836e <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8008570:	8c3b      	ldrh	r3, [r7, #32]
 8008572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008574:	4413      	add	r3, r2
 8008576:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8008578:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800857a:	b2db      	uxtb	r3, r3
 800857c:	f003 0303 	and.w	r3, r3, #3
 8008580:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8008584:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008588:	2b00      	cmp	r3, #0
 800858a:	d043      	beq.n	8008614 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8008590:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008594:	b29b      	uxth	r3, r3
 8008596:	f1c3 0304 	rsb	r3, r3, #4
 800859a:	b29a      	uxth	r2, r3
 800859c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800859e:	837b      	strh	r3, [r7, #26]
 80085a0:	4613      	mov	r3, r2
 80085a2:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80085a4:	8b7a      	ldrh	r2, [r7, #26]
 80085a6:	8b3b      	ldrh	r3, [r7, #24]
 80085a8:	4293      	cmp	r3, r2
 80085aa:	bf28      	it	cs
 80085ac:	4613      	movcs	r3, r2
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 80085b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 80085c6:	f107 0314 	add.w	r3, r7, #20
 80085ca:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 80085cc:	e007      	b.n	80085de <_ff_push_n+0x164>
 80085ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085d0:	1c53      	adds	r3, r2, #1
 80085d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d6:	1c59      	adds	r1, r3, #1
 80085d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80085da:	7812      	ldrb	r2, [r2, #0]
 80085dc:	701a      	strb	r2, [r3, #0]
 80085de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80085e2:	1e5a      	subs	r2, r3, #1
 80085e4:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1f0      	bne.n	80085ce <_ff_push_n+0x154>
          ff_buf = f->buffer;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 80085f2:	e007      	b.n	8008604 <_ff_push_n+0x18a>
 80085f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085f6:	1c53      	adds	r3, r2, #1
 80085f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fc:	1c59      	adds	r1, r3, #1
 80085fe:	6339      	str	r1, [r7, #48]	@ 0x30
 8008600:	7812      	ldrb	r2, [r2, #0]
 8008602:	701a      	strb	r2, [r3, #0]
 8008604:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008608:	1e5a      	subs	r2, r3, #1
 800860a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1f0      	bne.n	80085f4 <_ff_push_n+0x17a>
 8008612:	e002      	b.n	800861a <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 800861a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800861c:	2b00      	cmp	r3, #0
 800861e:	d005      	beq.n	800862c <_ff_push_n+0x1b2>
 8008620:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008622:	461a      	mov	r2, r3
 8008624:	68b9      	ldr	r1, [r7, #8]
 8008626:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008628:	f7ff fea1 	bl	800836e <_ff_push_const_addr>
      break;
 800862c:	bf00      	nop
  }
}
 800862e:	bf00      	nop
 8008630:	3738      	adds	r7, #56	@ 0x38
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b084      	sub	sp, #16
 800863a:	af00      	add	r7, sp, #0
 800863c:	60f8      	str	r0, [r7, #12]
 800863e:	60b9      	str	r1, [r7, #8]
 8008640:	4613      	mov	r3, r2
 8008642:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	88fa      	ldrh	r2, [r7, #6]
 800864a:	68f9      	ldr	r1, [r7, #12]
 800864c:	88c9      	ldrh	r1, [r1, #6]
 800864e:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8008652:	b289      	uxth	r1, r1
 8008654:	fb01 f202 	mul.w	r2, r1, r2
 8008658:	1899      	adds	r1, r3, r2
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	88db      	ldrh	r3, [r3, #6]
 800865e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008662:	b29b      	uxth	r3, r3
 8008664:	461a      	mov	r2, r3
 8008666:	68b8      	ldr	r0, [r7, #8]
 8008668:	f004 fe9b 	bl	800d3a2 <memcpy>
}
 800866c:	bf00      	nop
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b08e      	sub	sp, #56	@ 0x38
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	4611      	mov	r1, r2
 8008680:	461a      	mov	r2, r3
 8008682:	460b      	mov	r3, r1
 8008684:	80fb      	strh	r3, [r7, #6]
 8008686:	4613      	mov	r3, r2
 8008688:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	889a      	ldrh	r2, [r3, #4]
 800868e:	88bb      	ldrh	r3, [r7, #4]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8008694:	88fa      	ldrh	r2, [r7, #6]
 8008696:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	88db      	ldrh	r3, [r3, #6]
 80086a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	461a      	mov	r2, r3
 80086a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80086aa:	fb13 f302 	smulbb	r3, r3, r2
 80086ae:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	88db      	ldrh	r3, [r3, #6]
 80086b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	461a      	mov	r2, r3
 80086bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086be:	fb13 f302 	smulbb	r3, r3, r2
 80086c2:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	88ba      	ldrh	r2, [r7, #4]
 80086ca:	68f9      	ldr	r1, [r7, #12]
 80086cc:	88c9      	ldrh	r1, [r1, #6]
 80086ce:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80086d2:	b289      	uxth	r1, r1
 80086d4:	fb01 f202 	mul.w	r2, r1, r2
 80086d8:	4413      	add	r3, r2
 80086da:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 80086dc:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <_ff_pull_n+0x76>
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d022      	beq.n	800872e <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 80086e8:	e0a0      	b.n	800882c <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 80086ea:	88fa      	ldrh	r2, [r7, #6]
 80086ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d80d      	bhi.n	800870e <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 80086f2:	88fb      	ldrh	r3, [r7, #6]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	88d2      	ldrh	r2, [r2, #6]
 80086f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80086fc:	b292      	uxth	r2, r2
 80086fe:	fb02 f303 	mul.w	r3, r2, r3
 8008702:	461a      	mov	r2, r3
 8008704:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008706:	68b8      	ldr	r0, [r7, #8]
 8008708:	f004 fe4b 	bl	800d3a2 <memcpy>
    break;
 800870c:	e08e      	b.n	800882c <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 800870e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008710:	461a      	mov	r2, r3
 8008712:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008714:	68b8      	ldr	r0, [r7, #8]
 8008716:	f004 fe44 	bl	800d3a2 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 800871a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	18d0      	adds	r0, r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008726:	4619      	mov	r1, r3
 8008728:	f004 fe3b 	bl	800d3a2 <memcpy>
    break;
 800872c:	e07e      	b.n	800882c <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 800872e:	88fa      	ldrh	r2, [r7, #6]
 8008730:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008732:	429a      	cmp	r2, r3
 8008734:	d80f      	bhi.n	8008756 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	88db      	ldrh	r3, [r3, #6]
 800873a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800873e:	b29b      	uxth	r3, r3
 8008740:	461a      	mov	r2, r3
 8008742:	88fb      	ldrh	r3, [r7, #6]
 8008744:	fb13 f302 	smulbb	r3, r3, r2
 8008748:	b29b      	uxth	r3, r3
 800874a:	461a      	mov	r2, r3
 800874c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800874e:	68b8      	ldr	r0, [r7, #8]
 8008750:	f7ff fe41 	bl	80083d6 <_ff_pull_const_addr>
    break;
 8008754:	e069      	b.n	800882a <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8008756:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008758:	f023 0303 	bic.w	r3, r3, #3
 800875c:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 800875e:	8c3b      	ldrh	r3, [r7, #32]
 8008760:	461a      	mov	r2, r3
 8008762:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008764:	68b8      	ldr	r0, [r7, #8]
 8008766:	f7ff fe36 	bl	80083d6 <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 800876a:	8c3b      	ldrh	r3, [r7, #32]
 800876c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800876e:	4413      	add	r3, r2
 8008770:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8008772:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008774:	b2db      	uxtb	r3, r3
 8008776:	f003 0303 	and.w	r3, r3, #3
 800877a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 800877e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008782:	2b00      	cmp	r3, #0
 8008784:	d045      	beq.n	8008812 <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800878a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800878e:	b29b      	uxth	r3, r3
 8008790:	f1c3 0304 	rsb	r3, r3, #4
 8008794:	b29a      	uxth	r2, r3
 8008796:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008798:	837b      	strh	r3, [r7, #26]
 800879a:	4613      	mov	r3, r2
 800879c:	833b      	strh	r3, [r7, #24]
 800879e:	8b7a      	ldrh	r2, [r7, #26]
 80087a0:	8b3b      	ldrh	r3, [r7, #24]
 80087a2:	4293      	cmp	r3, r2
 80087a4:	bf28      	it	cs
 80087a6:	4613      	movcs	r3, r2
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 80087ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 80087ba:	2300      	movs	r3, #0
 80087bc:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 80087be:	f107 0314 	add.w	r3, r7, #20
 80087c2:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 80087c4:	e007      	b.n	80087d6 <_ff_pull_n+0x162>
 80087c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087c8:	1c53      	adds	r3, r2, #1
 80087ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80087cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ce:	1c59      	adds	r1, r3, #1
 80087d0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80087d2:	7812      	ldrb	r2, [r2, #0]
 80087d4:	701a      	strb	r2, [r3, #0]
 80087d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80087da:	1e5a      	subs	r2, r3, #1
 80087dc:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1f0      	bne.n	80087c6 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 80087ea:	e007      	b.n	80087fc <_ff_pull_n+0x188>
 80087ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087ee:	1c53      	adds	r3, r2, #1
 80087f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80087f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f4:	1c59      	adds	r1, r3, #1
 80087f6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80087f8:	7812      	ldrb	r2, [r2, #0]
 80087fa:	701a      	strb	r2, [r3, #0]
 80087fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008800:	1e5a      	subs	r2, r3, #1
 8008802:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1f0      	bne.n	80087ec <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	e002      	b.n	8008818 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8008818:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800881a:	2b00      	cmp	r3, #0
 800881c:	d005      	beq.n	800882a <_ff_pull_n+0x1b6>
 800881e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008820:	461a      	mov	r2, r3
 8008822:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008824:	68b8      	ldr	r0, [r7, #8]
 8008826:	f7ff fdd6 	bl	80083d6 <_ff_pull_const_addr>
    break;
 800882a:	bf00      	nop
  }
}
 800882c:	bf00      	nop
 800882e:	3738      	adds	r7, #56	@ 0x38
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	4603      	mov	r3, r0
 800883c:	80fb      	strh	r3, [r7, #6]
 800883e:	460b      	mov	r3, r1
 8008840:	80bb      	strh	r3, [r7, #4]
 8008842:	4613      	mov	r3, r2
 8008844:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8008846:	88ba      	ldrh	r2, [r7, #4]
 8008848:	887b      	ldrh	r3, [r7, #2]
 800884a:	4413      	add	r3, r2
 800884c:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800884e:	88ba      	ldrh	r2, [r7, #4]
 8008850:	89fb      	ldrh	r3, [r7, #14]
 8008852:	429a      	cmp	r2, r3
 8008854:	d804      	bhi.n	8008860 <advance_index+0x2c>
 8008856:	89fa      	ldrh	r2, [r7, #14]
 8008858:	88fb      	ldrh	r3, [r7, #6]
 800885a:	005b      	lsls	r3, r3, #1
 800885c:	429a      	cmp	r2, r3
 800885e:	db08      	blt.n	8008872 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8008860:	88fb      	ldrh	r3, [r7, #6]
 8008862:	005b      	lsls	r3, r3, #1
 8008864:	b29b      	uxth	r3, r3
 8008866:	425b      	negs	r3, r3
 8008868:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800886a:	89fa      	ldrh	r2, [r7, #14]
 800886c:	89bb      	ldrh	r3, [r7, #12]
 800886e:	4413      	add	r3, r2
 8008870:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8008872:	89fb      	ldrh	r3, [r7, #14]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b08a      	sub	sp, #40	@ 0x28
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	4611      	mov	r1, r2
 800888c:	461a      	mov	r2, r3
 800888e:	460b      	mov	r3, r1
 8008890:	80fb      	strh	r3, [r7, #6]
 8008892:	4613      	mov	r3, r2
 8008894:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	889b      	ldrh	r3, [r3, #4]
 800889a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800889c:	88fb      	ldrh	r3, [r7, #6]
 800889e:	843b      	strh	r3, [r7, #32]
 80088a0:	88bb      	ldrh	r3, [r7, #4]
 80088a2:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80088a4:	8c3a      	ldrh	r2, [r7, #32]
 80088a6:	8bfb      	ldrh	r3, [r7, #30]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d304      	bcc.n	80088b6 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80088ac:	8c3a      	ldrh	r2, [r7, #32]
 80088ae:	8bfb      	ldrh	r3, [r7, #30]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	e008      	b.n	80088c8 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80088b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	8c39      	ldrh	r1, [r7, #32]
 80088be:	8bfb      	ldrh	r3, [r7, #30]
 80088c0:	1acb      	subs	r3, r1, r3
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	4413      	add	r3, r2
 80088c6:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80088c8:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 80088ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d101      	bne.n	80088d4 <_tu_fifo_peek+0x54>
 80088d0:	2300      	movs	r3, #0
 80088d2:	e037      	b.n	8008944 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	889b      	ldrh	r3, [r3, #4]
 80088d8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80088da:	429a      	cmp	r2, r3
 80088dc:	d91b      	bls.n	8008916 <_tu_fifo_peek+0x96>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	61bb      	str	r3, [r7, #24]
 80088e2:	88fb      	ldrh	r3, [r7, #6]
 80088e4:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	889b      	ldrh	r3, [r3, #4]
 80088ea:	8afa      	ldrh	r2, [r7, #22]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d305      	bcc.n	80088fc <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	889b      	ldrh	r3, [r3, #4]
 80088f4:	8afa      	ldrh	r2, [r7, #22]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	82bb      	strh	r3, [r7, #20]
 80088fa:	e004      	b.n	8008906 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	889a      	ldrh	r2, [r3, #4]
 8008900:	8afb      	ldrh	r3, [r7, #22]
 8008902:	4413      	add	r3, r2
 8008904:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	8aba      	ldrh	r2, [r7, #20]
 800890a:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 800890c:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800890e:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	889b      	ldrh	r3, [r3, #4]
 8008914:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	889b      	ldrh	r3, [r3, #4]
 800891a:	827b      	strh	r3, [r7, #18]
 800891c:	88bb      	ldrh	r3, [r7, #4]
 800891e:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8008920:	e003      	b.n	800892a <_tu_fifo_peek+0xaa>
 8008922:	8a3a      	ldrh	r2, [r7, #16]
 8008924:	8a7b      	ldrh	r3, [r7, #18]
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	823b      	strh	r3, [r7, #16]
 800892a:	8a7a      	ldrh	r2, [r7, #18]
 800892c:	8a3b      	ldrh	r3, [r7, #16]
 800892e:	429a      	cmp	r2, r3
 8008930:	d9f7      	bls.n	8008922 <_tu_fifo_peek+0xa2>
  return idx;
 8008932:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8008934:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 8008936:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008938:	461a      	mov	r2, r3
 800893a:	68b9      	ldr	r1, [r7, #8]
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f7ff fe7a 	bl	8008636 <_ff_pull>

  return true;
 8008942:	2301      	movs	r3, #1
}
 8008944:	4618      	mov	r0, r3
 8008946:	3728      	adds	r7, #40	@ 0x28
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b08c      	sub	sp, #48	@ 0x30
 8008950:	af02      	add	r7, sp, #8
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	4611      	mov	r1, r2
 8008958:	461a      	mov	r2, r3
 800895a:	460b      	mov	r3, r1
 800895c:	80fb      	strh	r3, [r7, #6]
 800895e:	4613      	mov	r3, r2
 8008960:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	889b      	ldrh	r3, [r3, #4]
 8008966:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008968:	88bb      	ldrh	r3, [r7, #4]
 800896a:	843b      	strh	r3, [r7, #32]
 800896c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800896e:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8008970:	8c3a      	ldrh	r2, [r7, #32]
 8008972:	8bfb      	ldrh	r3, [r7, #30]
 8008974:	429a      	cmp	r2, r3
 8008976:	d304      	bcc.n	8008982 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8008978:	8c3a      	ldrh	r2, [r7, #32]
 800897a:	8bfb      	ldrh	r3, [r7, #30]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	b29b      	uxth	r3, r3
 8008980:	e008      	b.n	8008994 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008982:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008984:	005b      	lsls	r3, r3, #1
 8008986:	b29a      	uxth	r2, r3
 8008988:	8c39      	ldrh	r1, [r7, #32]
 800898a:	8bfb      	ldrh	r3, [r7, #30]
 800898c:	1acb      	subs	r3, r1, r3
 800898e:	b29b      	uxth	r3, r3
 8008990:	4413      	add	r3, r2
 8008992:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8008994:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 8008996:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008998:	2b00      	cmp	r3, #0
 800899a:	d101      	bne.n	80089a0 <_tu_fifo_peek_n+0x54>
 800899c:	2300      	movs	r3, #0
 800899e:	e041      	b.n	8008a24 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	889b      	ldrh	r3, [r3, #4]
 80089a4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d91b      	bls.n	80089e2 <_tu_fifo_peek_n+0x96>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	61bb      	str	r3, [r7, #24]
 80089ae:	88bb      	ldrh	r3, [r7, #4]
 80089b0:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	889b      	ldrh	r3, [r3, #4]
 80089b6:	8afa      	ldrh	r2, [r7, #22]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d305      	bcc.n	80089c8 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	889b      	ldrh	r3, [r3, #4]
 80089c0:	8afa      	ldrh	r2, [r7, #22]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	82bb      	strh	r3, [r7, #20]
 80089c6:	e004      	b.n	80089d2 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	889a      	ldrh	r2, [r3, #4]
 80089cc:	8afb      	ldrh	r3, [r7, #22]
 80089ce:	4413      	add	r3, r2
 80089d0:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	8aba      	ldrh	r2, [r7, #20]
 80089d6:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 80089d8:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 80089da:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	889b      	ldrh	r3, [r3, #4]
 80089e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 80089e2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80089e4:	88fb      	ldrh	r3, [r7, #6]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d201      	bcs.n	80089ee <_tu_fifo_peek_n+0xa2>
 80089ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80089ec:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	889b      	ldrh	r3, [r3, #4]
 80089f2:	827b      	strh	r3, [r7, #18]
 80089f4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80089f6:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80089f8:	e003      	b.n	8008a02 <_tu_fifo_peek_n+0xb6>
 80089fa:	8a3a      	ldrh	r2, [r7, #16]
 80089fc:	8a7b      	ldrh	r3, [r7, #18]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	823b      	strh	r3, [r7, #16]
 8008a02:	8a7a      	ldrh	r2, [r7, #18]
 8008a04:	8a3b      	ldrh	r3, [r7, #16]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d9f7      	bls.n	80089fa <_tu_fifo_peek_n+0xae>
  return idx;
 8008a0a:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8008a0c:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8008a0e:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8008a10:	88fa      	ldrh	r2, [r7, #6]
 8008a12:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	68b9      	ldr	r1, [r7, #8]
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f7ff fe29 	bl	8008674 <_ff_pull_n>

  return n;
 8008a22:	88fb      	ldrh	r3, [r7, #6]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3728      	adds	r7, #40	@ 0x28
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b092      	sub	sp, #72	@ 0x48
 8008a30:	af02      	add	r7, sp, #8
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	4611      	mov	r1, r2
 8008a38:	461a      	mov	r2, r3
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	80fb      	strh	r3, [r7, #6]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8008a42:	88fb      	ldrh	r3, [r7, #6]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <_tu_fifo_write_n+0x20>
 8008a48:	2300      	movs	r3, #0
 8008a4a:	e0bc      	b.n	8008bc6 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	891b      	ldrh	r3, [r3, #8]
 8008a50:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	895b      	ldrh	r3, [r3, #10]
 8008a56:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	79db      	ldrb	r3, [r3, #7]
 8008a60:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	f083 0301 	eor.w	r3, r3, #1
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d036      	beq.n	8008ade <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	889b      	ldrh	r3, [r3, #4]
 8008a74:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008a76:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008a78:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008a7a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008a7c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008a7e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008a80:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008a82:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008a84:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008a86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008a88:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 8008a8a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008a8c:	8c3b      	ldrh	r3, [r7, #32]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d304      	bcc.n	8008a9c <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 8008a92:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008a94:	8c3b      	ldrh	r3, [r7, #32]
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	e008      	b.n	8008aae <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008a9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a9e:	005b      	lsls	r3, r3, #1
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8008aa4:	8c3b      	ldrh	r3, [r7, #32]
 8008aa6:	1acb      	subs	r3, r1, r3
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	4413      	add	r3, r2
 8008aac:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8008aae:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8008ab0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8008ab2:	8bfb      	ldrh	r3, [r7, #30]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d904      	bls.n	8008ac2 <_tu_fifo_write_n+0x96>
 8008ab8:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8008aba:	8bfb      	ldrh	r3, [r7, #30]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	e000      	b.n	8008ac4 <_tu_fifo_write_n+0x98>
 8008ac2:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8008ac4:	867b      	strh	r3, [r7, #50]	@ 0x32
 8008ac6:	88fb      	ldrh	r3, [r7, #6]
 8008ac8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008aca:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008acc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008ace:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008ad0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	bf28      	it	cs
 8008ad6:	4613      	movcs	r3, r2
 8008ad8:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 8008ada:	80fb      	strh	r3, [r7, #6]
 8008adc:	e04b      	b.n	8008b76 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	889b      	ldrh	r3, [r3, #4]
 8008ae2:	88fa      	ldrh	r2, [r7, #6]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d317      	bcc.n	8008b18 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8008ae8:	797b      	ldrb	r3, [r7, #5]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10e      	bne.n	8008b0c <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8008aee:	88fb      	ldrh	r3, [r7, #6]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	8892      	ldrh	r2, [r2, #4]
 8008af4:	1a9b      	subs	r3, r3, r2
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	88d2      	ldrh	r2, [r2, #6]
 8008afa:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008afe:	b292      	uxth	r2, r2
 8008b00:	fb02 f303 	mul.w	r3, r2, r3
 8008b04:	461a      	mov	r2, r3
 8008b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b08:	4413      	add	r3, r2
 8008b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	889b      	ldrh	r3, [r3, #4]
 8008b10:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8008b12:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008b14:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008b16:	e02e      	b.n	8008b76 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	889b      	ldrh	r3, [r3, #4]
 8008b1c:	83bb      	strh	r3, [r7, #28]
 8008b1e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008b20:	837b      	strh	r3, [r7, #26]
 8008b22:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008b24:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8008b26:	8b7a      	ldrh	r2, [r7, #26]
 8008b28:	8b3b      	ldrh	r3, [r7, #24]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d304      	bcc.n	8008b38 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8008b2e:	8b7a      	ldrh	r2, [r7, #26]
 8008b30:	8b3b      	ldrh	r3, [r7, #24]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	e008      	b.n	8008b4a <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008b38:	8bbb      	ldrh	r3, [r7, #28]
 8008b3a:	005b      	lsls	r3, r3, #1
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	8b79      	ldrh	r1, [r7, #26]
 8008b40:	8b3b      	ldrh	r3, [r7, #24]
 8008b42:	1acb      	subs	r3, r1, r3
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	4413      	add	r3, r2
 8008b48:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8008b4a:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 8008b4c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008b4e:	88fb      	ldrh	r3, [r7, #6]
 8008b50:	441a      	add	r2, r3
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	889b      	ldrh	r3, [r3, #4]
 8008b56:	005b      	lsls	r3, r3, #1
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	db0c      	blt.n	8008b76 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	8898      	ldrh	r0, [r3, #4]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	889a      	ldrh	r2, [r3, #4]
 8008b64:	88fb      	ldrh	r3, [r7, #6]
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	f7ff fe61 	bl	8008834 <advance_index>
 8008b72:	4603      	mov	r3, r0
 8008b74:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 8008b76:	88fb      	ldrh	r3, [r7, #6]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d023      	beq.n	8008bc4 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	889b      	ldrh	r3, [r3, #4]
 8008b80:	82fb      	strh	r3, [r7, #22]
 8008b82:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008b84:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8008b86:	e003      	b.n	8008b90 <_tu_fifo_write_n+0x164>
 8008b88:	8aba      	ldrh	r2, [r7, #20]
 8008b8a:	8afb      	ldrh	r3, [r7, #22]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	82bb      	strh	r3, [r7, #20]
 8008b90:	8afa      	ldrh	r2, [r7, #22]
 8008b92:	8abb      	ldrh	r3, [r7, #20]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d9f7      	bls.n	8008b88 <_tu_fifo_write_n+0x15c>
  return idx;
 8008b98:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8008b9a:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8008b9c:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8008b9e:	88fa      	ldrh	r2, [r7, #6]
 8008ba0:	797b      	ldrb	r3, [r7, #5]
 8008ba2:	9300      	str	r3, [sp, #0]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f7ff fc66 	bl	800847a <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	889b      	ldrh	r3, [r3, #4]
 8008bb2:	88fa      	ldrh	r2, [r7, #6]
 8008bb4:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7ff fe3c 	bl	8008834 <advance_index>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8008bc4:	88fb      	ldrh	r3, [r7, #6]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3740      	adds	r7, #64	@ 0x40
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b086      	sub	sp, #24
 8008bd2:	af02      	add	r7, sp, #8
 8008bd4:	60f8      	str	r0, [r7, #12]
 8008bd6:	60b9      	str	r1, [r7, #8]
 8008bd8:	4611      	mov	r1, r2
 8008bda:	461a      	mov	r2, r3
 8008bdc:	460b      	mov	r3, r1
 8008bde:	80fb      	strh	r3, [r7, #6]
 8008be0:	4613      	mov	r3, r2
 8008be2:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	891b      	ldrh	r3, [r3, #8]
 8008be8:	b298      	uxth	r0, r3
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	895b      	ldrh	r3, [r3, #10]
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	88f9      	ldrh	r1, [r7, #6]
 8008bf2:	797a      	ldrb	r2, [r7, #5]
 8008bf4:	9201      	str	r2, [sp, #4]
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	460a      	mov	r2, r1
 8008bfc:	68b9      	ldr	r1, [r7, #8]
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f7ff fea4 	bl	800894c <_tu_fifo_peek_n>
 8008c04:	4603      	mov	r3, r0
 8008c06:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	8898      	ldrh	r0, [r3, #4]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	895b      	ldrh	r3, [r3, #10]
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	88fa      	ldrh	r2, [r7, #6]
 8008c14:	4619      	mov	r1, r3
 8008c16:	f7ff fe0d 	bl	8008834 <advance_index>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8008c22:	88fb      	ldrh	r3, [r7, #6]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b087      	sub	sp, #28
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	8899      	ldrh	r1, [r3, #4]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	891b      	ldrh	r3, [r3, #8]
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	895b      	ldrh	r3, [r3, #10]
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	8279      	strh	r1, [r7, #18]
 8008c46:	823a      	strh	r2, [r7, #16]
 8008c48:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 8008c4a:	8a3a      	ldrh	r2, [r7, #16]
 8008c4c:	89fb      	ldrh	r3, [r7, #14]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d304      	bcc.n	8008c5c <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8008c52:	8a3a      	ldrh	r2, [r7, #16]
 8008c54:	89fb      	ldrh	r3, [r7, #14]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	e008      	b.n	8008c6e <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008c5c:	8a7b      	ldrh	r3, [r7, #18]
 8008c5e:	005b      	lsls	r3, r3, #1
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	8a39      	ldrh	r1, [r7, #16]
 8008c64:	89fb      	ldrh	r3, [r7, #14]
 8008c66:	1acb      	subs	r3, r1, r3
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	4413      	add	r3, r2
 8008c6c:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	8892      	ldrh	r2, [r2, #4]
 8008c72:	82fb      	strh	r3, [r7, #22]
 8008c74:	4613      	mov	r3, r2
 8008c76:	82bb      	strh	r3, [r7, #20]
 8008c78:	8afa      	ldrh	r2, [r7, #22]
 8008c7a:	8abb      	ldrh	r3, [r7, #20]
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	bf28      	it	cs
 8008c80:	4613      	movcs	r3, r2
 8008c82:	b29b      	uxth	r3, r3
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	371c      	adds	r7, #28
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	891b      	ldrh	r3, [r3, #8]
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	895b      	ldrh	r3, [r3, #10]
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	bf0c      	ite	eq
 8008ca8:	2301      	moveq	r3, #1
 8008caa:	2300      	movne	r3, #0
 8008cac:	b2db      	uxtb	r3, r3
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b085      	sub	sp, #20
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	8899      	ldrh	r1, [r3, #4]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	891b      	ldrh	r3, [r3, #8]
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	895b      	ldrh	r3, [r3, #10]
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	81f9      	strh	r1, [r7, #14]
 8008cd4:	81ba      	strh	r2, [r7, #12]
 8008cd6:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8008cd8:	89ba      	ldrh	r2, [r7, #12]
 8008cda:	897b      	ldrh	r3, [r7, #10]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d304      	bcc.n	8008cea <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8008ce0:	89ba      	ldrh	r2, [r7, #12]
 8008ce2:	897b      	ldrh	r3, [r7, #10]
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	e008      	b.n	8008cfc <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008cea:	89fb      	ldrh	r3, [r7, #14]
 8008cec:	005b      	lsls	r3, r3, #1
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	89b9      	ldrh	r1, [r7, #12]
 8008cf2:	897b      	ldrh	r3, [r7, #10]
 8008cf4:	1acb      	subs	r3, r1, r3
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	4413      	add	r3, r2
 8008cfa:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	8892      	ldrh	r2, [r2, #4]
 8008d00:	4293      	cmp	r3, r2
 8008d02:	bf2c      	ite	cs
 8008d04:	2301      	movcs	r3, #1
 8008d06:	2300      	movcc	r3, #0
 8008d08:	b2db      	uxtb	r3, r3
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b087      	sub	sp, #28
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	8899      	ldrh	r1, [r3, #4]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	891b      	ldrh	r3, [r3, #8]
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	895b      	ldrh	r3, [r3, #10]
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	82f9      	strh	r1, [r7, #22]
 8008d30:	82ba      	strh	r2, [r7, #20]
 8008d32:	827b      	strh	r3, [r7, #18]
 8008d34:	8afb      	ldrh	r3, [r7, #22]
 8008d36:	823b      	strh	r3, [r7, #16]
 8008d38:	8abb      	ldrh	r3, [r7, #20]
 8008d3a:	81fb      	strh	r3, [r7, #14]
 8008d3c:	8a7b      	ldrh	r3, [r7, #18]
 8008d3e:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8008d40:	89fa      	ldrh	r2, [r7, #14]
 8008d42:	89bb      	ldrh	r3, [r7, #12]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d304      	bcc.n	8008d52 <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8008d48:	89fa      	ldrh	r2, [r7, #14]
 8008d4a:	89bb      	ldrh	r3, [r7, #12]
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	e008      	b.n	8008d64 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008d52:	8a3b      	ldrh	r3, [r7, #16]
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	89f9      	ldrh	r1, [r7, #14]
 8008d5a:	89bb      	ldrh	r3, [r7, #12]
 8008d5c:	1acb      	subs	r3, r1, r3
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	4413      	add	r3, r2
 8008d62:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8008d64:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8008d66:	8afa      	ldrh	r2, [r7, #22]
 8008d68:	897b      	ldrh	r3, [r7, #10]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d904      	bls.n	8008d78 <tu_fifo_remaining+0x62>
 8008d6e:	8afa      	ldrh	r2, [r7, #22]
 8008d70:	897b      	ldrh	r3, [r7, #10]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	e000      	b.n	8008d7a <tu_fifo_remaining+0x64>
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	371c      	adds	r7, #28
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	891b      	ldrh	r3, [r3, #8]
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	895b      	ldrh	r3, [r3, #10]
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7ff fd6e 	bl	8008880 <_tu_fifo_peek>
 8008da4:	4603      	mov	r3, r0
 8008da6:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	8898      	ldrh	r0, [r3, #4]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	895b      	ldrh	r3, [r3, #10]
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	7bfa      	ldrb	r2, [r7, #15]
 8008db4:	b292      	uxth	r2, r2
 8008db6:	4619      	mov	r1, r3
 8008db8:	f7ff fd3c 	bl	8008834 <advance_index>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8008dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	60f8      	str	r0, [r7, #12]
 8008dd6:	60b9      	str	r1, [r7, #8]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8008ddc:	88fa      	ldrh	r2, [r7, #6]
 8008dde:	2300      	movs	r3, #0
 8008de0:	68b9      	ldr	r1, [r7, #8]
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f7ff fef3 	bl	8008bce <_tu_fifo_read_n>
 8008de8:	4603      	mov	r3, r0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b084      	sub	sp, #16
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	60f8      	str	r0, [r7, #12]
 8008dfa:	60b9      	str	r1, [r7, #8]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8008e00:	88fa      	ldrh	r2, [r7, #6]
 8008e02:	2301      	movs	r3, #1
 8008e04:	68b9      	ldr	r1, [r7, #8]
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f7ff fee1 	bl	8008bce <_tu_fifo_read_n>
 8008e0c:	4603      	mov	r3, r0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b086      	sub	sp, #24
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	891b      	ldrh	r3, [r3, #8]
 8008e24:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7ff ff47 	bl	8008cba <tu_fifo_full>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00c      	beq.n	8008e4c <tu_fifo_write+0x36>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	79db      	ldrb	r3, [r3, #7]
 8008e36:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	f083 0301 	eor.w	r3, r3, #1
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d002      	beq.n	8008e4c <tu_fifo_write+0x36>
  {
    ret = false;
 8008e46:	2300      	movs	r3, #0
 8008e48:	75fb      	strb	r3, [r7, #23]
 8008e4a:	e022      	b.n	8008e92 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	889b      	ldrh	r3, [r3, #4]
 8008e50:	823b      	strh	r3, [r7, #16]
 8008e52:	8abb      	ldrh	r3, [r7, #20]
 8008e54:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8008e56:	e003      	b.n	8008e60 <tu_fifo_write+0x4a>
 8008e58:	89fa      	ldrh	r2, [r7, #14]
 8008e5a:	8a3b      	ldrh	r3, [r7, #16]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	81fb      	strh	r3, [r7, #14]
 8008e60:	8a3a      	ldrh	r2, [r7, #16]
 8008e62:	89fb      	ldrh	r3, [r7, #14]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d9f7      	bls.n	8008e58 <tu_fifo_write+0x42>
  return idx;
 8008e68:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8008e6a:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8008e6c:	8a7b      	ldrh	r3, [r7, #18]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7ff fae2 	bl	800843c <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	889b      	ldrh	r3, [r3, #4]
 8008e7c:	8ab9      	ldrh	r1, [r7, #20]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7ff fcd7 	bl	8008834 <advance_index>
 8008e86:	4603      	mov	r3, r0
 8008e88:	461a      	mov	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	811a      	strh	r2, [r3, #8]

    ret = true;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3718      	adds	r7, #24
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8008eaa:	88fa      	ldrh	r2, [r7, #6]
 8008eac:	2300      	movs	r3, #0
 8008eae:	68b9      	ldr	r1, [r7, #8]
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f7ff fdbb 	bl	8008a2c <_tu_fifo_write_n>
 8008eb6:	4603      	mov	r3, r0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	4613      	mov	r3, r2
 8008ecc:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8008ece:	88fa      	ldrh	r2, [r7, #6]
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	68b9      	ldr	r1, [r7, #8]
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f7ff fda9 	bl	8008a2c <_tu_fifo_write_n>
 8008eda:	4603      	mov	r3, r0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8008ef8:	2301      	movs	r3, #1
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	370c      	adds	r7, #12
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <tu_fifo_set_overwritable>:
                Pointer to the FIFO buffer to manipulate
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable) {
 8008f06:	b480      	push	{r7}
 8008f08:	b083      	sub	sp, #12
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	460b      	mov	r3, r1
 8008f10:	70fb      	strb	r3, [r7, #3]
  if (f->overwritable == overwritable) {
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	79db      	ldrb	r3, [r3, #7]
 8008f16:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	78fa      	ldrb	r2, [r7, #3]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d101      	bne.n	8008f26 <tu_fifo_set_overwritable+0x20>
    return true;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e006      	b.n	8008f34 <tu_fifo_set_overwritable+0x2e>
  }

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	79d3      	ldrb	r3, [r2, #7]
 8008f2a:	78f9      	ldrb	r1, [r7, #3]
 8008f2c:	f361 13c7 	bfi	r3, r1, #7, #1
 8008f30:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8008f32:	2301      	movs	r3, #1
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	6039      	str	r1, [r7, #0]
 8008f4a:	71fb      	strb	r3, [r7, #7]
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 8008f50:	bf00      	nop
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <tud_descriptor_bos_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
 8008f70:	b480      	push	{r7}
 8008f72:	af00      	add	r7, sp, #0
  return NULL;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8008f80:	b480      	push	{r7}
 8008f82:	af00      	add	r7, sp, #0
  return NULL;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	4603      	mov	r3, r0
 8008f98:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <tud_mount_cb>:

TU_ATTR_WEAK void tud_mount_cb(void) {
 8008fa8:	b480      	push	{r7}
 8008faa:	af00      	add	r7, sp, #0
}
 8008fac:	bf00      	nop
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr

08008fb6 <tud_umount_cb>:

TU_ATTR_WEAK void tud_umount_cb(void) {
 8008fb6:	b480      	push	{r7}
 8008fb8:	af00      	add	r7, sp, #0
}
 8008fba:	bf00      	nop
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <tud_suspend_cb>:

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 8008fce:	bf00      	nop
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 8008fda:	b480      	push	{r7}
 8008fdc:	af00      	add	r7, sp, #0
}
 8008fde:	bf00      	nop
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <tud_vendor_control_xfer_cb>:

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	4603      	mov	r3, r0
 8008ff0:	603a      	str	r2, [r7, #0]
 8008ff2:	71fb      	strb	r3, [r7, #7]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) stage; (void) request;
  return false;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	370c      	adds	r7, #12
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr

08009006 <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 8009006:	b480      	push	{r7}
 8009008:	b083      	sub	sp, #12
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8009010:	2301      	movs	r3, #1
}
 8009012:	4618      	mov	r0, r3
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
	...

08009020 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8009020:	b480      	push	{r7}
 8009022:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8009024:	4b06      	ldr	r3, [pc, #24]	@ (8009040 <tud_mounted+0x20>)
 8009026:	785b      	ldrb	r3, [r3, #1]
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	bf14      	ite	ne
 800902e:	2301      	movne	r3, #1
 8009030:	2300      	moveq	r3, #0
 8009032:	b2db      	uxtb	r3, r3
}
 8009034:	4618      	mov	r0, r3
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	20001714 	.word	0x20001714

08009044 <tud_suspended>:

bool tud_suspended(void) {
 8009044:	b480      	push	{r7}
 8009046:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8009048:	4b07      	ldr	r3, [pc, #28]	@ (8009068 <tud_suspended+0x24>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b00      	cmp	r3, #0
 8009054:	bf14      	ite	ne
 8009056:	2301      	movne	r3, #1
 8009058:	2300      	moveq	r3, #0
 800905a:	b2db      	uxtb	r3, r3
}
 800905c:	4618      	mov	r0, r3
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	20001714 	.word	0x20001714

0800906c <tud_remote_wakeup>:

bool tud_remote_wakeup(void) {
 800906c:	b580      	push	{r7, lr}
 800906e:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en);
 8009070:	4b0f      	ldr	r3, [pc, #60]	@ (80090b0 <tud_remote_wakeup+0x44>)
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009078:	b2db      	uxtb	r3, r3
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00d      	beq.n	800909a <tud_remote_wakeup+0x2e>
 800907e:	4b0c      	ldr	r3, [pc, #48]	@ (80090b0 <tud_remote_wakeup+0x44>)
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	f003 0310 	and.w	r3, r3, #16
 8009086:	b2db      	uxtb	r3, r3
 8009088:	2b00      	cmp	r3, #0
 800908a:	d006      	beq.n	800909a <tud_remote_wakeup+0x2e>
 800908c:	4b08      	ldr	r3, [pc, #32]	@ (80090b0 <tud_remote_wakeup+0x44>)
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	f003 0308 	and.w	r3, r3, #8
 8009094:	b2db      	uxtb	r3, r3
 8009096:	2b00      	cmp	r3, #0
 8009098:	d101      	bne.n	800909e <tud_remote_wakeup+0x32>
 800909a:	2300      	movs	r3, #0
 800909c:	e005      	b.n	80090aa <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 800909e:	4b05      	ldr	r3, [pc, #20]	@ (80090b4 <tud_remote_wakeup+0x48>)
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f002 fba4 	bl	800b7f0 <dcd_remote_wakeup>
  return true;
 80090a8:	2301      	movs	r3, #1
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	20001714 	.word	0x20001714
 80090b4:	2000022d 	.word	0x2000022d

080090b8 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 80090b8:	b480      	push	{r7}
 80090ba:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 80090bc:	4b05      	ldr	r3, [pc, #20]	@ (80090d4 <tud_inited+0x1c>)
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	2bff      	cmp	r3, #255	@ 0xff
 80090c2:	bf14      	ite	ne
 80090c4:	2301      	movne	r3, #1
 80090c6:	2300      	moveq	r3, #0
 80090c8:	b2db      	uxtb	r3, r3
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	2000022d 	.word	0x2000022d

080090d8 <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08c      	sub	sp, #48	@ 0x30
 80090dc:	af00      	add	r7, sp, #0
 80090de:	4603      	mov	r3, r0
 80090e0:	6039      	str	r1, [r7, #0]
 80090e2:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 80090e4:	f7ff ffe8 	bl	80090b8 <tud_inited>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 80090ee:	2301      	movs	r3, #1
 80090f0:	e09e      	b.n	8009230 <tud_rhport_init+0x158>
  }
  TU_ASSERT(rh_init);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10a      	bne.n	800910e <tud_rhport_init+0x36>
 80090f8:	4b4f      	ldr	r3, [pc, #316]	@ (8009238 <tud_rhport_init+0x160>)
 80090fa:	61bb      	str	r3, [r7, #24]
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0301 	and.w	r3, r3, #1
 8009104:	2b00      	cmp	r3, #0
 8009106:	d000      	beq.n	800910a <tud_rhport_init+0x32>
 8009108:	be00      	bkpt	0x0000
 800910a:	2300      	movs	r3, #0
 800910c:	e090      	b.n	8009230 <tud_rhport_init+0x158>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 800910e:	222c      	movs	r2, #44	@ 0x2c
 8009110:	2100      	movs	r1, #0
 8009112:	484a      	ldr	r0, [pc, #296]	@ (800923c <tud_rhport_init+0x164>)
 8009114:	f004 f8b4 	bl	800d280 <memset>
  _usbd_queued_setup = 0;
 8009118:	4b49      	ldr	r3, [pc, #292]	@ (8009240 <tud_rhport_init+0x168>)
 800911a:	2200      	movs	r2, #0
 800911c:	701a      	strb	r2, [r3, #0]
 800911e:	4b49      	ldr	r3, [pc, #292]	@ (8009244 <tud_rhport_init+0x16c>)
 8009120:	613b      	str	r3, [r7, #16]
#define OSAL_SPINLOCK_DEF(_name, _int_set) \
  osal_spinlock_t _name = { .interrupt_set = _int_set }

TU_ATTR_ALWAYS_INLINE static inline void osal_spin_init(osal_spinlock_t *ctx) {
  (void) ctx;
}
 8009122:	bf00      	nop
 8009124:	4b48      	ldr	r3, [pc, #288]	@ (8009248 <tud_rhport_init+0x170>)
 8009126:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	3304      	adds	r3, #4
 800912c:	4618      	mov	r0, r3
 800912e:	f7ff fed9 	bl	8008ee4 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8009132:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8009134:	4a45      	ldr	r2, [pc, #276]	@ (800924c <tud_rhport_init+0x174>)
 8009136:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8009138:	4b44      	ldr	r3, [pc, #272]	@ (800924c <tud_rhport_init+0x174>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10a      	bne.n	8009156 <tud_rhport_init+0x7e>
 8009140:	4b3d      	ldr	r3, [pc, #244]	@ (8009238 <tud_rhport_init+0x160>)
 8009142:	61fb      	str	r3, [r7, #28]
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 0301 	and.w	r3, r3, #1
 800914c:	2b00      	cmp	r3, #0
 800914e:	d000      	beq.n	8009152 <tud_rhport_init+0x7a>
 8009150:	be00      	bkpt	0x0000
 8009152:	2300      	movs	r3, #0
 8009154:	e06c      	b.n	8009230 <tud_rhport_init+0x158>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8009156:	4b3e      	ldr	r3, [pc, #248]	@ (8009250 <tud_rhport_init+0x178>)
 8009158:	2b00      	cmp	r3, #0
 800915a:	d005      	beq.n	8009168 <tud_rhport_init+0x90>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 800915c:	483d      	ldr	r0, [pc, #244]	@ (8009254 <tud_rhport_init+0x17c>)
 800915e:	f3af 8000 	nop.w
 8009162:	4603      	mov	r3, r0
 8009164:	4a3c      	ldr	r2, [pc, #240]	@ (8009258 <tud_rhport_init+0x180>)
 8009166:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8009168:	2300      	movs	r3, #0
 800916a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800916e:	e03a      	b.n	80091e6 <tud_rhport_init+0x10e>
 8009170:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009174:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8009176:	2300      	movs	r3, #0
 8009178:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 800917a:	4b36      	ldr	r3, [pc, #216]	@ (8009254 <tud_rhport_init+0x17c>)
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	7bfa      	ldrb	r2, [r7, #15]
 8009180:	429a      	cmp	r2, r3
 8009182:	d206      	bcs.n	8009192 <tud_rhport_init+0xba>
    driver = &_app_driver[drvid];
 8009184:	4b34      	ldr	r3, [pc, #208]	@ (8009258 <tud_rhport_init+0x180>)
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	7bfb      	ldrb	r3, [r7, #15]
 800918a:	015b      	lsls	r3, r3, #5
 800918c:	4413      	add	r3, r2
 800918e:	60bb      	str	r3, [r7, #8]
 8009190:	e00d      	b.n	80091ae <tud_rhport_init+0xd6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009192:	4b30      	ldr	r3, [pc, #192]	@ (8009254 <tud_rhport_init+0x17c>)
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	1c5a      	adds	r2, r3, #1
 8009198:	7bfb      	ldrb	r3, [r7, #15]
 800919a:	429a      	cmp	r2, r3
 800919c:	db07      	blt.n	80091ae <tud_rhport_init+0xd6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800919e:	7bfb      	ldrb	r3, [r7, #15]
 80091a0:	4a2c      	ldr	r2, [pc, #176]	@ (8009254 <tud_rhport_init+0x17c>)
 80091a2:	7812      	ldrb	r2, [r2, #0]
 80091a4:	1a9b      	subs	r3, r3, r2
 80091a6:	015b      	lsls	r3, r3, #5
 80091a8:	4a2c      	ldr	r2, [pc, #176]	@ (800925c <tud_rhport_init+0x184>)
 80091aa:	4413      	add	r3, r2
 80091ac:	60bb      	str	r3, [r7, #8]
  return driver;
 80091ae:	68bb      	ldr	r3, [r7, #8]
    usbd_class_driver_t const* driver = get_driver(i);
 80091b0:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 80091b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d003      	beq.n	80091c0 <tud_rhport_init+0xe8>
 80091b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10a      	bne.n	80091d6 <tud_rhport_init+0xfe>
 80091c0:	4b1d      	ldr	r3, [pc, #116]	@ (8009238 <tud_rhport_init+0x160>)
 80091c2:	623b      	str	r3, [r7, #32]
 80091c4:	6a3b      	ldr	r3, [r7, #32]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 0301 	and.w	r3, r3, #1
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d000      	beq.n	80091d2 <tud_rhport_init+0xfa>
 80091d0:	be00      	bkpt	0x0000
 80091d2:	2300      	movs	r3, #0
 80091d4:	e02c      	b.n	8009230 <tud_rhport_init+0x158>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 80091d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80091dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80091e0:	3301      	adds	r3, #1
 80091e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80091e6:	4b1b      	ldr	r3, [pc, #108]	@ (8009254 <tud_rhport_init+0x17c>)
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	1c5a      	adds	r2, r3, #1
 80091ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80091f0:	429a      	cmp	r2, r3
 80091f2:	dabd      	bge.n	8009170 <tud_rhport_init+0x98>
  }

  _usbd_rhport = rhport;
 80091f4:	4a1a      	ldr	r2, [pc, #104]	@ (8009260 <tud_rhport_init+0x188>)
 80091f6:	79fb      	ldrb	r3, [r7, #7]
 80091f8:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 80091fa:	79fb      	ldrb	r3, [r7, #7]
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	4618      	mov	r0, r3
 8009200:	f002 f9cc 	bl	800b59c <dcd_init>
 8009204:	4603      	mov	r3, r0
 8009206:	f083 0301 	eor.w	r3, r3, #1
 800920a:	b2db      	uxtb	r3, r3
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00a      	beq.n	8009226 <tud_rhport_init+0x14e>
 8009210:	4b09      	ldr	r3, [pc, #36]	@ (8009238 <tud_rhport_init+0x160>)
 8009212:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0301 	and.w	r3, r3, #1
 800921c:	2b00      	cmp	r3, #0
 800921e:	d000      	beq.n	8009222 <tud_rhport_init+0x14a>
 8009220:	be00      	bkpt	0x0000
 8009222:	2300      	movs	r3, #0
 8009224:	e004      	b.n	8009230 <tud_rhport_init+0x158>
  dcd_int_enable(rhport);
 8009226:	79fb      	ldrb	r3, [r7, #7]
 8009228:	4618      	mov	r0, r3
 800922a:	f002 fa55 	bl	800b6d8 <dcd_int_enable>

  return true;
 800922e:	2301      	movs	r3, #1
}
 8009230:	4618      	mov	r0, r3
 8009232:	3730      	adds	r7, #48	@ 0x30
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	e000edf0 	.word	0xe000edf0
 800923c:	20001714 	.word	0x20001714
 8009240:	20001740 	.word	0x20001740
 8009244:	20000230 	.word	0x20000230
 8009248:	20000234 	.word	0x20000234
 800924c:	2000180c 	.word	0x2000180c
 8009250:	00000000 	.word	0x00000000
 8009254:	20001748 	.word	0x20001748
 8009258:	20001744 	.word	0x20001744
 800925c:	0800f9d8 	.word	0x0800f9d8
 8009260:	2000022d 	.word	0x2000022d

08009264 <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8009264:	b580      	push	{r7, lr}
 8009266:	b088      	sub	sp, #32
 8009268:	af00      	add	r7, sp, #0
 800926a:	4603      	mov	r3, r0
 800926c:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 800926e:	2300      	movs	r3, #0
 8009270:	77fb      	strb	r3, [r7, #31]
 8009272:	e034      	b.n	80092de <configuration_reset+0x7a>
 8009274:	7ffb      	ldrb	r3, [r7, #31]
 8009276:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8009278:	2300      	movs	r3, #0
 800927a:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 800927c:	4b25      	ldr	r3, [pc, #148]	@ (8009314 <configuration_reset+0xb0>)
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	7cfa      	ldrb	r2, [r7, #19]
 8009282:	429a      	cmp	r2, r3
 8009284:	d206      	bcs.n	8009294 <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 8009286:	4b24      	ldr	r3, [pc, #144]	@ (8009318 <configuration_reset+0xb4>)
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	7cfb      	ldrb	r3, [r7, #19]
 800928c:	015b      	lsls	r3, r3, #5
 800928e:	4413      	add	r3, r2
 8009290:	60fb      	str	r3, [r7, #12]
 8009292:	e00d      	b.n	80092b0 <configuration_reset+0x4c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009294:	4b1f      	ldr	r3, [pc, #124]	@ (8009314 <configuration_reset+0xb0>)
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	1c5a      	adds	r2, r3, #1
 800929a:	7cfb      	ldrb	r3, [r7, #19]
 800929c:	429a      	cmp	r2, r3
 800929e:	db07      	blt.n	80092b0 <configuration_reset+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80092a0:	7cfb      	ldrb	r3, [r7, #19]
 80092a2:	4a1c      	ldr	r2, [pc, #112]	@ (8009314 <configuration_reset+0xb0>)
 80092a4:	7812      	ldrb	r2, [r2, #0]
 80092a6:	1a9b      	subs	r3, r3, r2
 80092a8:	015b      	lsls	r3, r3, #5
 80092aa:	4a1c      	ldr	r2, [pc, #112]	@ (800931c <configuration_reset+0xb8>)
 80092ac:	4413      	add	r3, r2
 80092ae:	60fb      	str	r3, [r7, #12]
  return driver;
 80092b0:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 80092b2:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d109      	bne.n	80092ce <configuration_reset+0x6a>
 80092ba:	4b19      	ldr	r3, [pc, #100]	@ (8009320 <configuration_reset+0xbc>)
 80092bc:	617b      	str	r3, [r7, #20]
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d01f      	beq.n	800930a <configuration_reset+0xa6>
 80092ca:	be00      	bkpt	0x0000
 80092cc:	e01d      	b.n	800930a <configuration_reset+0xa6>
    driver->reset(rhport);
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	79fa      	ldrb	r2, [r7, #7]
 80092d4:	4610      	mov	r0, r2
 80092d6:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80092d8:	7ffb      	ldrb	r3, [r7, #31]
 80092da:	3301      	adds	r3, #1
 80092dc:	77fb      	strb	r3, [r7, #31]
 80092de:	4b0d      	ldr	r3, [pc, #52]	@ (8009314 <configuration_reset+0xb0>)
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	1c5a      	adds	r2, r3, #1
 80092e4:	7ffb      	ldrb	r3, [r7, #31]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	dac4      	bge.n	8009274 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 80092ea:	222c      	movs	r2, #44	@ 0x2c
 80092ec:	2100      	movs	r1, #0
 80092ee:	480d      	ldr	r0, [pc, #52]	@ (8009324 <configuration_reset+0xc0>)
 80092f0:	f003 ffc6 	bl	800d280 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 80092f4:	2210      	movs	r2, #16
 80092f6:	21ff      	movs	r1, #255	@ 0xff
 80092f8:	480b      	ldr	r0, [pc, #44]	@ (8009328 <configuration_reset+0xc4>)
 80092fa:	f003 ffc1 	bl	800d280 <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 80092fe:	220c      	movs	r2, #12
 8009300:	21ff      	movs	r1, #255	@ 0xff
 8009302:	480a      	ldr	r0, [pc, #40]	@ (800932c <configuration_reset+0xc8>)
 8009304:	f003 ffbc 	bl	800d280 <memset>
 8009308:	e000      	b.n	800930c <configuration_reset+0xa8>
    TU_ASSERT(driver,);
 800930a:	bf00      	nop
}
 800930c:	3720      	adds	r7, #32
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	20001748 	.word	0x20001748
 8009318:	20001744 	.word	0x20001744
 800931c:	0800f9d8 	.word	0x0800f9d8
 8009320:	e000edf0 	.word	0xe000edf0
 8009324:	20001714 	.word	0x20001714
 8009328:	20001718 	.word	0x20001718
 800932c:	20001728 	.word	0x20001728

08009330 <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	4603      	mov	r3, r0
 8009338:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 800933a:	79fb      	ldrb	r3, [r7, #7]
 800933c:	4618      	mov	r0, r3
 800933e:	f7ff ff91 	bl	8009264 <configuration_reset>
  usbd_control_reset();
 8009342:	f001 fc37 	bl	800abb4 <usbd_control_reset>
}
 8009346:	bf00      	nop
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
	...

08009350 <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8009350:	b590      	push	{r4, r7, lr}
 8009352:	b093      	sub	sp, #76	@ 0x4c
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	460b      	mov	r3, r1
 800935a:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 800935c:	f7ff feac 	bl	80090b8 <tud_inited>
 8009360:	4603      	mov	r3, r0
 8009362:	f083 0301 	eor.w	r3, r3, #1
 8009366:	b2db      	uxtb	r3, r3
 8009368:	2b00      	cmp	r3, #0
 800936a:	f040 8189 	bne.w	8009680 <tud_task_ext+0x330>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 800936e:	4bb1      	ldr	r3, [pc, #708]	@ (8009634 <tud_task_ext+0x2e4>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	633b      	str	r3, [r7, #48]	@ 0x30
 8009374:	f107 030c 	add.w	r3, r7, #12
 8009378:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 800937e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2000      	movs	r0, #0
 8009384:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 8009386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009388:	3304      	adds	r3, #4
 800938a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800938c:	4618      	mov	r0, r3
 800938e:	f7ff fcfa 	bl	8008d86 <tu_fifo_read>
 8009392:	4603      	mov	r3, r0
 8009394:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 8009398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2001      	movs	r0, #1
 800939e:	4798      	blx	r3

  return success;
 80093a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093a4:	f083 0301 	eor.w	r3, r3, #1
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f040 816a 	bne.w	8009684 <tud_task_ext+0x334>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 80093b0:	7b7b      	ldrb	r3, [r7, #13]
 80093b2:	3b01      	subs	r3, #1
 80093b4:	2b07      	cmp	r3, #7
 80093b6:	f200 814b 	bhi.w	8009650 <tud_task_ext+0x300>
 80093ba:	a201      	add	r2, pc, #4	@ (adr r2, 80093c0 <tud_task_ext+0x70>)
 80093bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c0:	080093e1 	.word	0x080093e1
 80093c4:	080093f1 	.word	0x080093f1
 80093c8:	08009605 	.word	0x08009605
 80093cc:	080095b7 	.word	0x080095b7
 80093d0:	080095e1 	.word	0x080095e1
 80093d4:	080093ff 	.word	0x080093ff
 80093d8:	080094af 	.word	0x080094af
 80093dc:	080095f5 	.word	0x080095f5
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 80093e0:	7b3b      	ldrb	r3, [r7, #12]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7ff ffa4 	bl	8009330 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 80093e8:	7c3a      	ldrb	r2, [r7, #16]
 80093ea:	4b93      	ldr	r3, [pc, #588]	@ (8009638 <tud_task_ext+0x2e8>)
 80093ec:	709a      	strb	r2, [r3, #2]
        break;
 80093ee:	e146      	b.n	800967e <tud_task_ext+0x32e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 80093f0:	7b3b      	ldrb	r3, [r7, #12]
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7ff ff9c 	bl	8009330 <usbd_reset>
        tud_umount_cb();
 80093f8:	f7ff fddd 	bl	8008fb6 <tud_umount_cb>
        break;
 80093fc:	e13f      	b.n	800967e <tud_task_ext+0x32e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 80093fe:	4b8f      	ldr	r3, [pc, #572]	@ (800963c <tud_task_ext+0x2ec>)
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	b2db      	uxtb	r3, r3
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10a      	bne.n	800941e <tud_task_ext+0xce>
 8009408:	4b8d      	ldr	r3, [pc, #564]	@ (8009640 <tud_task_ext+0x2f0>)
 800940a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800940c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 8137 	beq.w	8009688 <tud_task_ext+0x338>
 800941a:	be00      	bkpt	0x0000
 800941c:	e134      	b.n	8009688 <tud_task_ext+0x338>
        _usbd_queued_setup--;
 800941e:	4b87      	ldr	r3, [pc, #540]	@ (800963c <tud_task_ext+0x2ec>)
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	b2db      	uxtb	r3, r3
 8009424:	3b01      	subs	r3, #1
 8009426:	b2da      	uxtb	r2, r3
 8009428:	4b84      	ldr	r3, [pc, #528]	@ (800963c <tud_task_ext+0x2ec>)
 800942a:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 800942c:	4b83      	ldr	r3, [pc, #524]	@ (800963c <tud_task_ext+0x2ec>)
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	b2db      	uxtb	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	f040 8116 	bne.w	8009664 <tud_task_ext+0x314>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8009438:	4a7f      	ldr	r2, [pc, #508]	@ (8009638 <tud_task_ext+0x2e8>)
 800943a:	7813      	ldrb	r3, [r2, #0]
 800943c:	f043 0301 	orr.w	r3, r3, #1
 8009440:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8009442:	4a7d      	ldr	r2, [pc, #500]	@ (8009638 <tud_task_ext+0x2e8>)
 8009444:	f892 3020 	ldrb.w	r3, [r2, #32]
 8009448:	f023 0301 	bic.w	r3, r3, #1
 800944c:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8009450:	4a79      	ldr	r2, [pc, #484]	@ (8009638 <tud_task_ext+0x2e8>)
 8009452:	f892 3020 	ldrb.w	r3, [r2, #32]
 8009456:	f023 0304 	bic.w	r3, r3, #4
 800945a:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 800945e:	4a76      	ldr	r2, [pc, #472]	@ (8009638 <tud_task_ext+0x2e8>)
 8009460:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8009464:	f023 0301 	bic.w	r3, r3, #1
 8009468:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 800946c:	4a72      	ldr	r2, [pc, #456]	@ (8009638 <tud_task_ext+0x2e8>)
 800946e:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8009472:	f023 0304 	bic.w	r3, r3, #4
 8009476:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 800947a:	7b3a      	ldrb	r2, [r7, #12]
 800947c:	f107 030c 	add.w	r3, r7, #12
 8009480:	3304      	adds	r3, #4
 8009482:	4619      	mov	r1, r3
 8009484:	4610      	mov	r0, r2
 8009486:	f000 f91f 	bl	80096c8 <process_control_request>
 800948a:	4603      	mov	r3, r0
 800948c:	f083 0301 	eor.w	r3, r3, #1
 8009490:	b2db      	uxtb	r3, r3
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 80e8 	beq.w	8009668 <tud_task_ext+0x318>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8009498:	7b3b      	ldrb	r3, [r7, #12]
 800949a:	2100      	movs	r1, #0
 800949c:	4618      	mov	r0, r3
 800949e:	f002 fb7b 	bl	800bb98 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 80094a2:	7b3b      	ldrb	r3, [r7, #12]
 80094a4:	2180      	movs	r1, #128	@ 0x80
 80094a6:	4618      	mov	r0, r3
 80094a8:	f002 fb76 	bl	800bb98 <dcd_edpt_stall>
        }
        break;
 80094ac:	e0dc      	b.n	8009668 <tud_task_ext+0x318>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 80094ae:	7c3b      	ldrb	r3, [r7, #16]
 80094b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80094b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80094b8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80094bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80094c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094c4:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 80094c6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80094ca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80094ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80094d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80094d6:	09db      	lsrs	r3, r3, #7
 80094d8:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 80094da:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 80094de:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80094e2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80094e6:	4954      	ldr	r1, [pc, #336]	@ (8009638 <tud_task_ext+0x2e8>)
 80094e8:	0052      	lsls	r2, r2, #1
 80094ea:	440a      	add	r2, r1
 80094ec:	4413      	add	r3, r2
 80094ee:	f103 0220 	add.w	r2, r3, #32
 80094f2:	7813      	ldrb	r3, [r2, #0]
 80094f4:	f023 0301 	bic.w	r3, r3, #1
 80094f8:	7013      	strb	r3, [r2, #0]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80094fa:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80094fe:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8009502:	494d      	ldr	r1, [pc, #308]	@ (8009638 <tud_task_ext+0x2e8>)
 8009504:	0052      	lsls	r2, r2, #1
 8009506:	440a      	add	r2, r1
 8009508:	4413      	add	r3, r2
 800950a:	f103 0220 	add.w	r2, r3, #32
 800950e:	7813      	ldrb	r3, [r2, #0]
 8009510:	f023 0304 	bic.w	r3, r3, #4
 8009514:	7013      	strb	r3, [r2, #0]

        if (0 == epnum) {
 8009516:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800951a:	2b00      	cmp	r3, #0
 800951c:	d107      	bne.n	800952e <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 800951e:	7b38      	ldrb	r0, [r7, #12]
 8009520:	7c7a      	ldrb	r2, [r7, #17]
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8009528:	f001 fb7a 	bl	800ac20 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 800952c:	e0a7      	b.n	800967e <tud_task_ext+0x32e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 800952e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8009532:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8009536:	4940      	ldr	r1, [pc, #256]	@ (8009638 <tud_task_ext+0x2e8>)
 8009538:	0052      	lsls	r2, r2, #1
 800953a:	440a      	add	r2, r1
 800953c:	4413      	add	r3, r2
 800953e:	3314      	adds	r3, #20
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 8009546:	2300      	movs	r3, #0
 8009548:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 800954a:	4b3e      	ldr	r3, [pc, #248]	@ (8009644 <tud_task_ext+0x2f4>)
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8009552:	429a      	cmp	r2, r3
 8009554:	d207      	bcs.n	8009566 <tud_task_ext+0x216>
    driver = &_app_driver[drvid];
 8009556:	4b3c      	ldr	r3, [pc, #240]	@ (8009648 <tud_task_ext+0x2f8>)
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800955e:	015b      	lsls	r3, r3, #5
 8009560:	4413      	add	r3, r2
 8009562:	623b      	str	r3, [r7, #32]
 8009564:	e00f      	b.n	8009586 <tud_task_ext+0x236>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009566:	4b37      	ldr	r3, [pc, #220]	@ (8009644 <tud_task_ext+0x2f4>)
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	1c5a      	adds	r2, r3, #1
 800956c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009570:	429a      	cmp	r2, r3
 8009572:	db08      	blt.n	8009586 <tud_task_ext+0x236>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8009574:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009578:	4a32      	ldr	r2, [pc, #200]	@ (8009644 <tud_task_ext+0x2f4>)
 800957a:	7812      	ldrb	r2, [r2, #0]
 800957c:	1a9b      	subs	r3, r3, r2
 800957e:	015b      	lsls	r3, r3, #5
 8009580:	4a32      	ldr	r2, [pc, #200]	@ (800964c <tud_task_ext+0x2fc>)
 8009582:	4413      	add	r3, r2
 8009584:	623b      	str	r3, [r7, #32]
  return driver;
 8009586:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8009588:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 800958a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800958c:	2b00      	cmp	r3, #0
 800958e:	d109      	bne.n	80095a4 <tud_task_ext+0x254>
 8009590:	4b2b      	ldr	r3, [pc, #172]	@ (8009640 <tud_task_ext+0x2f0>)
 8009592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	2b00      	cmp	r3, #0
 800959e:	d075      	beq.n	800968c <tud_task_ext+0x33c>
 80095a0:	be00      	bkpt	0x0000
 80095a2:	e073      	b.n	800968c <tud_task_ext+0x33c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 80095a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095a6:	699c      	ldr	r4, [r3, #24]
 80095a8:	7b38      	ldrb	r0, [r7, #12]
 80095aa:	7c7a      	ldrb	r2, [r7, #17]
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80095b2:	47a0      	blx	r4
        break;
 80095b4:	e063      	b.n	800967e <tud_task_ext+0x32e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 80095b6:	4b20      	ldr	r3, [pc, #128]	@ (8009638 <tud_task_ext+0x2e8>)
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d053      	beq.n	800966c <tud_task_ext+0x31c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 80095c4:	4b1c      	ldr	r3, [pc, #112]	@ (8009638 <tud_task_ext+0x2e8>)
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	bf14      	ite	ne
 80095d2:	2301      	movne	r3, #1
 80095d4:	2300      	moveq	r3, #0
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	4618      	mov	r0, r3
 80095da:	f7ff fcf3 	bl	8008fc4 <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80095de:	e045      	b.n	800966c <tud_task_ext+0x31c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 80095e0:	4b15      	ldr	r3, [pc, #84]	@ (8009638 <tud_task_ext+0x2e8>)
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d040      	beq.n	8009670 <tud_task_ext+0x320>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 80095ee:	f7ff fcf4 	bl	8008fda <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80095f2:	e03d      	b.n	8009670 <tud_task_ext+0x320>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) {
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d03c      	beq.n	8009674 <tud_task_ext+0x324>
          event.func_call.func(event.func_call.param);
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	697a      	ldr	r2, [r7, #20]
 80095fe:	4610      	mov	r0, r2
 8009600:	4798      	blx	r3
        }
        break;
 8009602:	e037      	b.n	8009674 <tud_task_ext+0x324>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8009604:	4b0c      	ldr	r3, [pc, #48]	@ (8009638 <tud_task_ext+0x2e8>)
 8009606:	78db      	ldrb	r3, [r3, #3]
 8009608:	b2db      	uxtb	r3, r3
 800960a:	61fb      	str	r3, [r7, #28]
 800960c:	2300      	movs	r3, #0
 800960e:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8009610:	7efb      	ldrb	r3, [r7, #27]
 8009612:	69fa      	ldr	r2, [r7, #28]
 8009614:	fa22 f303 	lsr.w	r3, r2, r3
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	2b00      	cmp	r3, #0
 800961e:	bf14      	ite	ne
 8009620:	2301      	movne	r3, #1
 8009622:	2300      	moveq	r3, #0
 8009624:	b2db      	uxtb	r3, r3
 8009626:	2b00      	cmp	r3, #0
 8009628:	d026      	beq.n	8009678 <tud_task_ext+0x328>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	4618      	mov	r0, r3
 800962e:	f7ff fc95 	bl	8008f5c <tud_sof_cb>
        }
      break;
 8009632:	e021      	b.n	8009678 <tud_task_ext+0x328>
 8009634:	2000180c 	.word	0x2000180c
 8009638:	20001714 	.word	0x20001714
 800963c:	20001740 	.word	0x20001740
 8009640:	e000edf0 	.word	0xe000edf0
 8009644:	20001748 	.word	0x20001748
 8009648:	20001744 	.word	0x20001744
 800964c:	0800f9d8 	.word	0x0800f9d8

      default:
        TU_BREAKPOINT();
 8009650:	4b10      	ldr	r3, [pc, #64]	@ (8009694 <tud_task_ext+0x344>)
 8009652:	637b      	str	r3, [r7, #52]	@ 0x34
 8009654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 0301 	and.w	r3, r3, #1
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00d      	beq.n	800967c <tud_task_ext+0x32c>
 8009660:	be00      	bkpt	0x0000
        break;
 8009662:	e00b      	b.n	800967c <tud_task_ext+0x32c>
          break;
 8009664:	bf00      	nop
 8009666:	e682      	b.n	800936e <tud_task_ext+0x1e>
        break;
 8009668:	bf00      	nop
 800966a:	e680      	b.n	800936e <tud_task_ext+0x1e>
        break;
 800966c:	bf00      	nop
 800966e:	e67e      	b.n	800936e <tud_task_ext+0x1e>
        break;
 8009670:	bf00      	nop
 8009672:	e67c      	b.n	800936e <tud_task_ext+0x1e>
        break;
 8009674:	bf00      	nop
 8009676:	e67a      	b.n	800936e <tud_task_ext+0x1e>
      break;
 8009678:	bf00      	nop
 800967a:	e678      	b.n	800936e <tud_task_ext+0x1e>
        break;
 800967c:	bf00      	nop
  while (1) {
 800967e:	e676      	b.n	800936e <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 8009680:	bf00      	nop
 8009682:	e004      	b.n	800968e <tud_task_ext+0x33e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8009684:	bf00      	nop
 8009686:	e002      	b.n	800968e <tud_task_ext+0x33e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8009688:	bf00      	nop
 800968a:	e000      	b.n	800968e <tud_task_ext+0x33e>
          TU_ASSERT(driver,);
 800968c:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) { return; }
#endif
  }
}
 800968e:	374c      	adds	r7, #76	@ 0x4c
 8009690:	46bd      	mov	sp, r7
 8009692:	bd90      	pop	{r4, r7, pc}
 8009694:	e000edf0 	.word	0xe000edf0

08009698 <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	4603      	mov	r3, r0
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
 80096a4:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	695b      	ldr	r3, [r3, #20]
 80096aa:	4618      	mov	r0, r3
 80096ac:	f001 fa8e 	bl	800abcc <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	695b      	ldr	r3, [r3, #20]
 80096b4:	7bf8      	ldrb	r0, [r7, #15]
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	2101      	movs	r1, #1
 80096ba:	4798      	blx	r3
 80096bc:	4603      	mov	r3, r0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
	...

080096c8 <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b09a      	sub	sp, #104	@ 0x68
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	4603      	mov	r3, r0
 80096d0:	6039      	str	r1, [r7, #0]
 80096d2:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 80096d4:	2000      	movs	r0, #0
 80096d6:	f001 fa79 	bl	800abcc <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	2b60      	cmp	r3, #96	@ 0x60
 80096e6:	d10a      	bne.n	80096fe <process_control_request+0x36>
 80096e8:	4ba5      	ldr	r3, [pc, #660]	@ (8009980 <process_control_request+0x2b8>)
 80096ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80096ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0301 	and.w	r3, r3, #1
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d000      	beq.n	80096fa <process_control_request+0x32>
 80096f8:	be00      	bkpt	0x0000
 80096fa:	2300      	movs	r3, #0
 80096fc:	e2bb      	b.n	8009c76 <process_control_request+0x5ae>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009706:	b2db      	uxtb	r3, r3
 8009708:	2b40      	cmp	r3, #64	@ 0x40
 800970a:	d10a      	bne.n	8009722 <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 800970c:	489d      	ldr	r0, [pc, #628]	@ (8009984 <process_control_request+0x2bc>)
 800970e:	f001 fa5d 	bl	800abcc <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8009712:	79fb      	ldrb	r3, [r7, #7]
 8009714:	683a      	ldr	r2, [r7, #0]
 8009716:	2101      	movs	r1, #1
 8009718:	4618      	mov	r0, r3
 800971a:	f7ff fc65 	bl	8008fe8 <tud_vendor_control_xfer_cb>
 800971e:	4603      	mov	r3, r0
 8009720:	e2a9      	b.n	8009c76 <process_control_request+0x5ae>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800972a:	b2db      	uxtb	r3, r3
 800972c:	2b02      	cmp	r3, #2
 800972e:	f000 81ca 	beq.w	8009ac6 <process_control_request+0x3fe>
 8009732:	2b02      	cmp	r3, #2
 8009734:	f300 8292 	bgt.w	8009c5c <process_control_request+0x594>
 8009738:	2b00      	cmp	r3, #0
 800973a:	d003      	beq.n	8009744 <process_control_request+0x7c>
 800973c:	2b01      	cmp	r3, #1
 800973e:	f000 8151 	beq.w	80099e4 <process_control_request+0x31c>
 8009742:	e28b      	b.n	8009c5c <process_control_request+0x594>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800974c:	b2db      	uxtb	r3, r3
 800974e:	2b20      	cmp	r3, #32
 8009750:	d143      	bne.n	80097da <process_control_request+0x112>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	889b      	ldrh	r3, [r3, #4]
 8009756:	b29b      	uxth	r3, r3
 8009758:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800975a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800975c:	b2db      	uxtb	r3, r3
 800975e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8009762:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009766:	2b0f      	cmp	r3, #15
 8009768:	d901      	bls.n	800976e <process_control_request+0xa6>
 800976a:	2300      	movs	r3, #0
 800976c:	e283      	b.n	8009c76 <process_control_request+0x5ae>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800976e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009772:	4a85      	ldr	r2, [pc, #532]	@ (8009988 <process_control_request+0x2c0>)
 8009774:	4413      	add	r3, r2
 8009776:	791b      	ldrb	r3, [r3, #4]
 8009778:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 800977c:	2300      	movs	r3, #0
 800977e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 8009780:	4b82      	ldr	r3, [pc, #520]	@ (800998c <process_control_request+0x2c4>)
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8009788:	429a      	cmp	r2, r3
 800978a:	d207      	bcs.n	800979c <process_control_request+0xd4>
    driver = &_app_driver[drvid];
 800978c:	4b80      	ldr	r3, [pc, #512]	@ (8009990 <process_control_request+0x2c8>)
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009794:	015b      	lsls	r3, r3, #5
 8009796:	4413      	add	r3, r2
 8009798:	62bb      	str	r3, [r7, #40]	@ 0x28
 800979a:	e00f      	b.n	80097bc <process_control_request+0xf4>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800979c:	4b7b      	ldr	r3, [pc, #492]	@ (800998c <process_control_request+0x2c4>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	1c5a      	adds	r2, r3, #1
 80097a2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80097a6:	429a      	cmp	r2, r3
 80097a8:	db08      	blt.n	80097bc <process_control_request+0xf4>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80097aa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80097ae:	4a77      	ldr	r2, [pc, #476]	@ (800998c <process_control_request+0x2c4>)
 80097b0:	7812      	ldrb	r2, [r2, #0]
 80097b2:	1a9b      	subs	r3, r3, r2
 80097b4:	015b      	lsls	r3, r3, #5
 80097b6:	4a77      	ldr	r2, [pc, #476]	@ (8009994 <process_control_request+0x2cc>)
 80097b8:	4413      	add	r3, r2
 80097ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 80097bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80097be:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 80097c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d101      	bne.n	80097ca <process_control_request+0x102>
 80097c6:	2300      	movs	r3, #0
 80097c8:	e255      	b.n	8009c76 <process_control_request+0x5ae>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 80097ca:	79fb      	ldrb	r3, [r7, #7]
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7ff ff61 	bl	8009698 <invoke_class_control>
 80097d6:	4603      	mov	r3, r0
 80097d8:	e24d      	b.n	8009c76 <process_control_request+0x5ae>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00a      	beq.n	80097fe <process_control_request+0x136>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 80097e8:	4b65      	ldr	r3, [pc, #404]	@ (8009980 <process_control_request+0x2b8>)
 80097ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80097ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 0301 	and.w	r3, r3, #1
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d000      	beq.n	80097fa <process_control_request+0x132>
 80097f8:	be00      	bkpt	0x0000
        return false;
 80097fa:	2300      	movs	r3, #0
 80097fc:	e23b      	b.n	8009c76 <process_control_request+0x5ae>
      }

      switch ( p_request->bRequest ) {
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	785b      	ldrb	r3, [r3, #1]
 8009802:	2b09      	cmp	r3, #9
 8009804:	f200 80e1 	bhi.w	80099ca <process_control_request+0x302>
 8009808:	a201      	add	r2, pc, #4	@ (adr r2, 8009810 <process_control_request+0x148>)
 800980a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980e:	bf00      	nop
 8009810:	08009999 	.word	0x08009999
 8009814:	0800995d 	.word	0x0800995d
 8009818:	080099cb 	.word	0x080099cb
 800981c:	08009937 	.word	0x08009937
 8009820:	080099cb 	.word	0x080099cb
 8009824:	08009839 	.word	0x08009839
 8009828:	0800991d 	.word	0x0800991d
 800982c:	080099cb 	.word	0x080099cb
 8009830:	0800985d 	.word	0x0800985d
 8009834:	08009875 	.word	0x08009875
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8009838:	6838      	ldr	r0, [r7, #0]
 800983a:	f001 f9d7 	bl	800abec <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	885b      	ldrh	r3, [r3, #2]
 8009842:	b29b      	uxth	r3, r3
 8009844:	b2da      	uxtb	r2, r3
 8009846:	79fb      	ldrb	r3, [r7, #7]
 8009848:	4611      	mov	r1, r2
 800984a:	4618      	mov	r0, r3
 800984c:	f001 ff94 	bl	800b778 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8009850:	4a4d      	ldr	r2, [pc, #308]	@ (8009988 <process_control_request+0x2c0>)
 8009852:	7813      	ldrb	r3, [r2, #0]
 8009854:	f043 0302 	orr.w	r3, r3, #2
 8009858:	7013      	strb	r3, [r2, #0]
        break;
 800985a:	e0c2      	b.n	80099e2 <process_control_request+0x31a>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 800985c:	4b4a      	ldr	r3, [pc, #296]	@ (8009988 <process_control_request+0x2c0>)
 800985e:	785b      	ldrb	r3, [r3, #1]
 8009860:	b2db      	uxtb	r3, r3
 8009862:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8009864:	f107 0213 	add.w	r2, r7, #19
 8009868:	79f8      	ldrb	r0, [r7, #7]
 800986a:	2301      	movs	r3, #1
 800986c:	6839      	ldr	r1, [r7, #0]
 800986e:	f001 f931 	bl	800aad4 <tud_control_xfer>
        }
        break;
 8009872:	e0b6      	b.n	80099e2 <process_control_request+0x31a>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	885b      	ldrh	r3, [r3, #2]
 8009878:	b29b      	uxth	r3, r3
 800987a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 800987e:	4b42      	ldr	r3, [pc, #264]	@ (8009988 <process_control_request+0x2c0>)
 8009880:	785b      	ldrb	r3, [r3, #1]
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8009888:	429a      	cmp	r2, r3
 800988a:	d041      	beq.n	8009910 <process_control_request+0x248>
            if ( _usbd_dev.cfg_num ) {
 800988c:	4b3e      	ldr	r3, [pc, #248]	@ (8009988 <process_control_request+0x2c0>)
 800988e:	785b      	ldrb	r3, [r3, #1]
 8009890:	b2db      	uxtb	r3, r3
 8009892:	2b00      	cmp	r3, #0
 8009894:	d014      	beq.n	80098c0 <process_control_request+0x1f8>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 8009896:	79fb      	ldrb	r3, [r7, #7]
 8009898:	2100      	movs	r1, #0
 800989a:	4618      	mov	r0, r3
 800989c:	f002 f832 	bl	800b904 <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 80098a0:	79fb      	ldrb	r3, [r7, #7]
 80098a2:	4618      	mov	r0, r3
 80098a4:	f002 f896 	bl	800b9d4 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 80098a8:	4b37      	ldr	r3, [pc, #220]	@ (8009988 <process_control_request+0x2c0>)
 80098aa:	789b      	ldrb	r3, [r3, #2]
 80098ac:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 80098b0:	79fb      	ldrb	r3, [r7, #7]
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7ff fcd6 	bl	8009264 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 80098b8:	4a33      	ldr	r2, [pc, #204]	@ (8009988 <process_control_request+0x2c0>)
 80098ba:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80098be:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 80098c0:	4a31      	ldr	r2, [pc, #196]	@ (8009988 <process_control_request+0x2c0>)
 80098c2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80098c6:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 80098c8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d01d      	beq.n	800990c <process_control_request+0x244>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 80098d0:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80098d4:	79fb      	ldrb	r3, [r7, #7]
 80098d6:	4611      	mov	r1, r2
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 f9d5 	bl	8009c88 <process_set_config>
 80098de:	4603      	mov	r3, r0
 80098e0:	f083 0301 	eor.w	r3, r3, #1
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00d      	beq.n	8009906 <process_control_request+0x23e>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 80098ea:	4b25      	ldr	r3, [pc, #148]	@ (8009980 <process_control_request+0x2b8>)
 80098ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 0301 	and.w	r3, r3, #1
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d000      	beq.n	80098fc <process_control_request+0x234>
 80098fa:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 80098fc:	4b22      	ldr	r3, [pc, #136]	@ (8009988 <process_control_request+0x2c0>)
 80098fe:	2200      	movs	r2, #0
 8009900:	705a      	strb	r2, [r3, #1]
                return false;
 8009902:	2300      	movs	r3, #0
 8009904:	e1b7      	b.n	8009c76 <process_control_request+0x5ae>
              }
              tud_mount_cb();
 8009906:	f7ff fb4f 	bl	8008fa8 <tud_mount_cb>
 800990a:	e001      	b.n	8009910 <process_control_request+0x248>
            } else {
              tud_umount_cb();
 800990c:	f7ff fb53 	bl	8008fb6 <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 8009910:	79fb      	ldrb	r3, [r7, #7]
 8009912:	6839      	ldr	r1, [r7, #0]
 8009914:	4618      	mov	r0, r3
 8009916:	f001 f86b 	bl	800a9f0 <tud_control_status>
        }
        break;
 800991a:	e062      	b.n	80099e2 <process_control_request+0x31a>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 800991c:	79fb      	ldrb	r3, [r7, #7]
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	4618      	mov	r0, r3
 8009922:	f000 fae5 	bl	8009ef0 <process_get_descriptor>
 8009926:	4603      	mov	r3, r0
 8009928:	f083 0301 	eor.w	r3, r3, #1
 800992c:	b2db      	uxtb	r3, r3
 800992e:	2b00      	cmp	r3, #0
 8009930:	d056      	beq.n	80099e0 <process_control_request+0x318>
 8009932:	2300      	movs	r3, #0
 8009934:	e19f      	b.n	8009c76 <process_control_request+0x5ae>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	885b      	ldrh	r3, [r3, #2]
 800993a:	b29b      	uxth	r3, r3
 800993c:	2b01      	cmp	r3, #1
 800993e:	d10b      	bne.n	8009958 <process_control_request+0x290>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 8009940:	4a11      	ldr	r2, [pc, #68]	@ (8009988 <process_control_request+0x2c0>)
 8009942:	7813      	ldrb	r3, [r2, #0]
 8009944:	f043 0308 	orr.w	r3, r3, #8
 8009948:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 800994a:	79fb      	ldrb	r3, [r7, #7]
 800994c:	6839      	ldr	r1, [r7, #0]
 800994e:	4618      	mov	r0, r3
 8009950:	f001 f84e 	bl	800a9f0 <tud_control_status>
            break;
 8009954:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 8009956:	e044      	b.n	80099e2 <process_control_request+0x31a>
            default: return false;
 8009958:	2300      	movs	r3, #0
 800995a:	e18c      	b.n	8009c76 <process_control_request+0x5ae>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	885b      	ldrh	r3, [r3, #2]
 8009960:	b29b      	uxth	r3, r3
 8009962:	2b01      	cmp	r3, #1
 8009964:	d001      	beq.n	800996a <process_control_request+0x2a2>
 8009966:	2300      	movs	r3, #0
 8009968:	e185      	b.n	8009c76 <process_control_request+0x5ae>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 800996a:	4a07      	ldr	r2, [pc, #28]	@ (8009988 <process_control_request+0x2c0>)
 800996c:	7813      	ldrb	r3, [r2, #0]
 800996e:	f023 0308 	bic.w	r3, r3, #8
 8009972:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8009974:	79fb      	ldrb	r3, [r7, #7]
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	4618      	mov	r0, r3
 800997a:	f001 f839 	bl	800a9f0 <tud_control_status>
        break;
 800997e:	e030      	b.n	80099e2 <process_control_request+0x31a>
 8009980:	e000edf0 	.word	0xe000edf0
 8009984:	08008fe9 	.word	0x08008fe9
 8009988:	20001714 	.word	0x20001714
 800998c:	20001748 	.word	0x20001748
 8009990:	20001744 	.word	0x20001744
 8009994:	0800f9d8 	.word	0x0800f9d8

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8009998:	4b94      	ldr	r3, [pc, #592]	@ (8009bec <process_control_request+0x524>)
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	095b      	lsrs	r3, r3, #5
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	f003 0301 	and.w	r3, r3, #1
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	4b91      	ldr	r3, [pc, #580]	@ (8009bec <process_control_request+0x524>)
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	089b      	lsrs	r3, r3, #2
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	f003 0302 	and.w	r3, r3, #2
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	4313      	orrs	r3, r2
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 80099ba:	f107 0210 	add.w	r2, r7, #16
 80099be:	79f8      	ldrb	r0, [r7, #7]
 80099c0:	2302      	movs	r3, #2
 80099c2:	6839      	ldr	r1, [r7, #0]
 80099c4:	f001 f886 	bl	800aad4 <tud_control_xfer>
          break;
 80099c8:	e00b      	b.n	80099e2 <process_control_request+0x31a>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 80099ca:	4b89      	ldr	r3, [pc, #548]	@ (8009bf0 <process_control_request+0x528>)
 80099cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80099ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f003 0301 	and.w	r3, r3, #1
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d000      	beq.n	80099dc <process_control_request+0x314>
 80099da:	be00      	bkpt	0x0000
 80099dc:	2300      	movs	r3, #0
 80099de:	e14a      	b.n	8009c76 <process_control_request+0x5ae>
        break;
 80099e0:	bf00      	nop
      }
    break;
 80099e2:	e147      	b.n	8009c74 <process_control_request+0x5ac>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	889b      	ldrh	r3, [r3, #4]
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80099ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80099f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80099f8:	2b0f      	cmp	r3, #15
 80099fa:	d901      	bls.n	8009a00 <process_control_request+0x338>
 80099fc:	2300      	movs	r3, #0
 80099fe:	e13a      	b.n	8009c76 <process_control_request+0x5ae>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8009a00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009a04:	4a79      	ldr	r2, [pc, #484]	@ (8009bec <process_control_request+0x524>)
 8009a06:	4413      	add	r3, r2
 8009a08:	791b      	ldrb	r3, [r3, #4]
 8009a0a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8009a12:	4b78      	ldr	r3, [pc, #480]	@ (8009bf4 <process_control_request+0x52c>)
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d207      	bcs.n	8009a2e <process_control_request+0x366>
    driver = &_app_driver[drvid];
 8009a1e:	4b76      	ldr	r3, [pc, #472]	@ (8009bf8 <process_control_request+0x530>)
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009a26:	015b      	lsls	r3, r3, #5
 8009a28:	4413      	add	r3, r2
 8009a2a:	623b      	str	r3, [r7, #32]
 8009a2c:	e00f      	b.n	8009a4e <process_control_request+0x386>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009a2e:	4b71      	ldr	r3, [pc, #452]	@ (8009bf4 <process_control_request+0x52c>)
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	1c5a      	adds	r2, r3, #1
 8009a34:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	db08      	blt.n	8009a4e <process_control_request+0x386>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8009a3c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009a40:	4a6c      	ldr	r2, [pc, #432]	@ (8009bf4 <process_control_request+0x52c>)
 8009a42:	7812      	ldrb	r2, [r2, #0]
 8009a44:	1a9b      	subs	r3, r3, r2
 8009a46:	015b      	lsls	r3, r3, #5
 8009a48:	4a6c      	ldr	r2, [pc, #432]	@ (8009bfc <process_control_request+0x534>)
 8009a4a:	4413      	add	r3, r2
 8009a4c:	623b      	str	r3, [r7, #32]
  return driver;
 8009a4e:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8009a50:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 8009a52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d101      	bne.n	8009a5c <process_control_request+0x394>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	e10c      	b.n	8009c76 <process_control_request+0x5ae>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 8009a5c:	79fb      	ldrb	r3, [r7, #7]
 8009a5e:	683a      	ldr	r2, [r7, #0]
 8009a60:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7ff fe18 	bl	8009698 <invoke_class_control>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	f083 0301 	eor.w	r3, r3, #1
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f000 80fe 	beq.w	8009c72 <process_control_request+0x5aa>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <process_control_request+0x3c0>
 8009a84:	2300      	movs	r3, #0
 8009a86:	e0f6      	b.n	8009c76 <process_control_request+0x5ae>

        switch(p_request->bRequest) {
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	785b      	ldrb	r3, [r3, #1]
 8009a8c:	3b0a      	subs	r3, #10
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d816      	bhi.n	8009ac0 <process_control_request+0x3f8>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8009a92:	2000      	movs	r0, #0
 8009a94:	f001 f89a 	bl	800abcc <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	785b      	ldrb	r3, [r3, #1]
 8009a9c:	2b0a      	cmp	r3, #10
 8009a9e:	d109      	bne.n	8009ab4 <process_control_request+0x3ec>
              uint8_t alternate = 0;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8009aa4:	f107 020f 	add.w	r2, r7, #15
 8009aa8:	79f8      	ldrb	r0, [r7, #7]
 8009aaa:	2301      	movs	r3, #1
 8009aac:	6839      	ldr	r1, [r7, #0]
 8009aae:	f001 f811 	bl	800aad4 <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 8009ab2:	e007      	b.n	8009ac4 <process_control_request+0x3fc>
              tud_control_status(rhport, p_request);
 8009ab4:	79fb      	ldrb	r3, [r7, #7]
 8009ab6:	6839      	ldr	r1, [r7, #0]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f000 ff99 	bl	800a9f0 <tud_control_status>
          break;
 8009abe:	e001      	b.n	8009ac4 <process_control_request+0x3fc>

          default: return false;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	e0d8      	b.n	8009c76 <process_control_request+0x5ae>
        }
      }
      break;
 8009ac4:	e0d5      	b.n	8009c72 <process_control_request+0x5aa>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	889b      	ldrh	r3, [r3, #4]
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	83bb      	strh	r3, [r7, #28]
 8009ace:	8bbb      	ldrh	r3, [r7, #28]
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009ad6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009ada:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009adc:	7fbb      	ldrb	r3, [r7, #30]
 8009ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ae2:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8009ae4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8009ae8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009aec:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009aee:	7ffb      	ldrb	r3, [r7, #31]
 8009af0:	09db      	lsrs	r3, r3, #7
 8009af2:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8009af4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8009af8:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8009afc:	2b05      	cmp	r3, #5
 8009afe:	d90a      	bls.n	8009b16 <process_control_request+0x44e>
 8009b00:	4b3b      	ldr	r3, [pc, #236]	@ (8009bf0 <process_control_request+0x528>)
 8009b02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 0301 	and.w	r3, r3, #1
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d000      	beq.n	8009b12 <process_control_request+0x44a>
 8009b10:	be00      	bkpt	0x0000
 8009b12:	2300      	movs	r3, #0
 8009b14:	e0af      	b.n	8009c76 <process_control_request+0x5ae>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8009b16:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8009b1a:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8009b1e:	4933      	ldr	r1, [pc, #204]	@ (8009bec <process_control_request+0x524>)
 8009b20:	0052      	lsls	r2, r2, #1
 8009b22:	440a      	add	r2, r1
 8009b24:	4413      	add	r3, r2
 8009b26:	3314      	adds	r3, #20
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 8009b30:	4b30      	ldr	r3, [pc, #192]	@ (8009bf4 <process_control_request+0x52c>)
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	7efa      	ldrb	r2, [r7, #27]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d206      	bcs.n	8009b48 <process_control_request+0x480>
    driver = &_app_driver[drvid];
 8009b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8009bf8 <process_control_request+0x530>)
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	7efb      	ldrb	r3, [r7, #27]
 8009b40:	015b      	lsls	r3, r3, #5
 8009b42:	4413      	add	r3, r2
 8009b44:	617b      	str	r3, [r7, #20]
 8009b46:	e00d      	b.n	8009b64 <process_control_request+0x49c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009b48:	4b2a      	ldr	r3, [pc, #168]	@ (8009bf4 <process_control_request+0x52c>)
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	1c5a      	adds	r2, r3, #1
 8009b4e:	7efb      	ldrb	r3, [r7, #27]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	db07      	blt.n	8009b64 <process_control_request+0x49c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8009b54:	7efb      	ldrb	r3, [r7, #27]
 8009b56:	4a27      	ldr	r2, [pc, #156]	@ (8009bf4 <process_control_request+0x52c>)
 8009b58:	7812      	ldrb	r2, [r2, #0]
 8009b5a:	1a9b      	subs	r3, r3, r2
 8009b5c:	015b      	lsls	r3, r3, #5
 8009b5e:	4a27      	ldr	r2, [pc, #156]	@ (8009bfc <process_control_request+0x534>)
 8009b60:	4413      	add	r3, r2
 8009b62:	617b      	str	r3, [r7, #20]
  return driver;
 8009b64:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8009b66:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00c      	beq.n	8009b90 <process_control_request+0x4c8>
        // Forward class request to its driver
        TU_VERIFY(driver);
 8009b76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d101      	bne.n	8009b80 <process_control_request+0x4b8>
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	e07a      	b.n	8009c76 <process_control_request+0x5ae>
        return invoke_class_control(rhport, driver, p_request);
 8009b80:	79fb      	ldrb	r3, [r7, #7]
 8009b82:	683a      	ldr	r2, [r7, #0]
 8009b84:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7ff fd86 	bl	8009698 <invoke_class_control>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	e072      	b.n	8009c76 <process_control_request+0x5ae>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	785b      	ldrb	r3, [r3, #1]
 8009b94:	2b03      	cmp	r3, #3
 8009b96:	d017      	beq.n	8009bc8 <process_control_request+0x500>
 8009b98:	2b03      	cmp	r3, #3
 8009b9a:	dc52      	bgt.n	8009c42 <process_control_request+0x57a>
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d002      	beq.n	8009ba6 <process_control_request+0x4de>
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d011      	beq.n	8009bc8 <process_control_request+0x500>
 8009ba4:	e04d      	b.n	8009c42 <process_control_request+0x57a>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8009ba6:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8009baa:	79fb      	ldrb	r3, [r7, #7]
 8009bac:	4611      	mov	r1, r2
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f000 fec8 	bl	800a944 <usbd_edpt_stalled>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 8009bb8:	f107 020c 	add.w	r2, r7, #12
 8009bbc:	79f8      	ldrb	r0, [r7, #7]
 8009bbe:	2302      	movs	r3, #2
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	f000 ff87 	bl	800aad4 <tud_control_xfer>
          }
          break;
 8009bc6:	e048      	b.n	8009c5a <process_control_request+0x592>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	885b      	ldrh	r3, [r3, #2]
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d11d      	bne.n	8009c0e <process_control_request+0x546>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	785b      	ldrb	r3, [r3, #1]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d112      	bne.n	8009c00 <process_control_request+0x538>
                usbd_edpt_clear_stall(rhport, ep_addr);
 8009bda:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8009bde:	79fb      	ldrb	r3, [r7, #7]
 8009be0:	4611      	mov	r1, r2
 8009be2:	4618      	mov	r0, r3
 8009be4:	f000 fe70 	bl	800a8c8 <usbd_edpt_clear_stall>
 8009be8:	e011      	b.n	8009c0e <process_control_request+0x546>
 8009bea:	bf00      	nop
 8009bec:	20001714 	.word	0x20001714
 8009bf0:	e000edf0 	.word	0xe000edf0
 8009bf4:	20001748 	.word	0x20001748
 8009bf8:	20001744 	.word	0x20001744
 8009bfc:	0800f9d8 	.word	0x0800f9d8
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 8009c00:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8009c04:	79fb      	ldrb	r3, [r7, #7]
 8009c06:	4611      	mov	r1, r2
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 fe1f 	bl	800a84c <usbd_edpt_stall>
              }
            }

            if (driver) {
 8009c0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d021      	beq.n	8009c58 <process_control_request+0x590>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8009c14:	79fb      	ldrb	r3, [r7, #7]
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7ff fd3c 	bl	8009698 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8009c20:	2000      	movs	r0, #0
 8009c22:	f000 ffd3 	bl	800abcc <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8009c26:	4b16      	ldr	r3, [pc, #88]	@ (8009c80 <process_control_request+0x5b8>)
 8009c28:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009c2c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d110      	bne.n	8009c58 <process_control_request+0x590>
 8009c36:	79fb      	ldrb	r3, [r7, #7]
 8009c38:	6839      	ldr	r1, [r7, #0]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f000 fed8 	bl	800a9f0 <tud_control_status>
            }
          }
          break;
 8009c40:	e00a      	b.n	8009c58 <process_control_request+0x590>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 8009c42:	4b10      	ldr	r3, [pc, #64]	@ (8009c84 <process_control_request+0x5bc>)
 8009c44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 0301 	and.w	r3, r3, #1
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d000      	beq.n	8009c54 <process_control_request+0x58c>
 8009c52:	be00      	bkpt	0x0000
            return false;
 8009c54:	2300      	movs	r3, #0
 8009c56:	e00e      	b.n	8009c76 <process_control_request+0x5ae>
          break;
 8009c58:	bf00      	nop
        }
      }
    }
    break;
 8009c5a:	e00b      	b.n	8009c74 <process_control_request+0x5ac>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 8009c5c:	4b09      	ldr	r3, [pc, #36]	@ (8009c84 <process_control_request+0x5bc>)
 8009c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f003 0301 	and.w	r3, r3, #1
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d000      	beq.n	8009c6e <process_control_request+0x5a6>
 8009c6c:	be00      	bkpt	0x0000
      return false;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	e001      	b.n	8009c76 <process_control_request+0x5ae>
      break;
 8009c72:	bf00      	nop
  }

  return true;
 8009c74:	2301      	movs	r3, #1
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3768      	adds	r7, #104	@ 0x68
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	20001714 	.word	0x20001714
 8009c84:	e000edf0 	.word	0xe000edf0

08009c88 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b096      	sub	sp, #88	@ 0x58
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	4603      	mov	r3, r0
 8009c90:	460a      	mov	r2, r1
 8009c92:	71fb      	strb	r3, [r7, #7]
 8009c94:	4613      	mov	r3, r2
 8009c96:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8009c98:	79bb      	ldrb	r3, [r7, #6]
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7fa fa88 	bl	80041b4 <tud_descriptor_configuration_cb>
 8009ca4:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8009ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d003      	beq.n	8009cb4 <process_set_config+0x2c>
 8009cac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cae:	785b      	ldrb	r3, [r3, #1]
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d00a      	beq.n	8009cca <process_set_config+0x42>
 8009cb4:	4b87      	ldr	r3, [pc, #540]	@ (8009ed4 <process_set_config+0x24c>)
 8009cb6:	623b      	str	r3, [r7, #32]
 8009cb8:	6a3b      	ldr	r3, [r7, #32]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 0301 	and.w	r3, r3, #1
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d000      	beq.n	8009cc6 <process_set_config+0x3e>
 8009cc4:	be00      	bkpt	0x0000
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	e100      	b.n	8009ecc <process_set_config+0x244>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8009cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ccc:	79db      	ldrb	r3, [r3, #7]
 8009cce:	115b      	asrs	r3, r3, #5
 8009cd0:	f003 0301 	and.w	r3, r3, #1
 8009cd4:	b2d9      	uxtb	r1, r3
 8009cd6:	4a80      	ldr	r2, [pc, #512]	@ (8009ed8 <process_set_config+0x250>)
 8009cd8:	7813      	ldrb	r3, [r2, #0]
 8009cda:	f361 1304 	bfi	r3, r1, #4, #1
 8009cde:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8009ce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ce2:	79db      	ldrb	r3, [r3, #7]
 8009ce4:	119b      	asrs	r3, r3, #6
 8009ce6:	f003 0301 	and.w	r3, r3, #1
 8009cea:	b2d9      	uxtb	r1, r3
 8009cec:	4a7a      	ldr	r2, [pc, #488]	@ (8009ed8 <process_set_config+0x250>)
 8009cee:	7813      	ldrb	r3, [r2, #0]
 8009cf0:	f361 1345 	bfi	r3, r1, #5, #1
 8009cf4:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8009cf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cf8:	3309      	adds	r3, #9
 8009cfa:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8009cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cfe:	885b      	ldrh	r3, [r3, #2]
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	461a      	mov	r2, r3
 8009d04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d06:	4413      	add	r3, r2
 8009d08:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 8009d0a:	e0d9      	b.n	8009ec0 <process_set_config+0x238>
  {
    uint8_t assoc_itf_count = 1;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8009d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d14:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8009d1c:	2b0b      	cmp	r3, #11
 8009d1e:	d10f      	bne.n	8009d40 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8009d20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d22:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 8009d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d26:	78db      	ldrb	r3, [r3, #3]
 8009d28:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8009d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d2e:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	461a      	mov	r2, r3
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8009d3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d42:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	3301      	adds	r3, #1
 8009d48:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8009d4a:	2b04      	cmp	r3, #4
 8009d4c:	d00a      	beq.n	8009d64 <process_set_config+0xdc>
 8009d4e:	4b61      	ldr	r3, [pc, #388]	@ (8009ed4 <process_set_config+0x24c>)
 8009d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d000      	beq.n	8009d60 <process_set_config+0xd8>
 8009d5e:	be00      	bkpt	0x0000
 8009d60:	2300      	movs	r3, #0
 8009d62:	e0b3      	b.n	8009ecc <process_set_config+0x244>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8009d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d66:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8009d68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d6c:	1ad3      	subs	r3, r2, r3
 8009d6e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8009d70:	2300      	movs	r3, #0
 8009d72:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8009d76:	e089      	b.n	8009e8c <process_set_config+0x204>
 8009d78:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009d7c:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8009d82:	4b56      	ldr	r3, [pc, #344]	@ (8009edc <process_set_config+0x254>)
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	7bfa      	ldrb	r2, [r7, #15]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d206      	bcs.n	8009d9a <process_set_config+0x112>
    driver = &_app_driver[drvid];
 8009d8c:	4b54      	ldr	r3, [pc, #336]	@ (8009ee0 <process_set_config+0x258>)
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	7bfb      	ldrb	r3, [r7, #15]
 8009d92:	015b      	lsls	r3, r3, #5
 8009d94:	4413      	add	r3, r2
 8009d96:	60bb      	str	r3, [r7, #8]
 8009d98:	e00d      	b.n	8009db6 <process_set_config+0x12e>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009d9a:	4b50      	ldr	r3, [pc, #320]	@ (8009edc <process_set_config+0x254>)
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	1c5a      	adds	r2, r3, #1
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	db07      	blt.n	8009db6 <process_set_config+0x12e>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8009da6:	7bfb      	ldrb	r3, [r7, #15]
 8009da8:	4a4c      	ldr	r2, [pc, #304]	@ (8009edc <process_set_config+0x254>)
 8009daa:	7812      	ldrb	r2, [r2, #0]
 8009dac:	1a9b      	subs	r3, r3, r2
 8009dae:	015b      	lsls	r3, r3, #5
 8009db0:	4a4c      	ldr	r2, [pc, #304]	@ (8009ee4 <process_set_config+0x25c>)
 8009db2:	4413      	add	r3, r2
 8009db4:	60bb      	str	r3, [r7, #8]
  return driver;
 8009db6:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8009db8:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 8009dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d10a      	bne.n	8009dd6 <process_set_config+0x14e>
 8009dc0:	4b44      	ldr	r3, [pc, #272]	@ (8009ed4 <process_set_config+0x24c>)
 8009dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f003 0301 	and.w	r3, r3, #1
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d000      	beq.n	8009dd2 <process_set_config+0x14a>
 8009dd0:	be00      	bkpt	0x0000
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	e07a      	b.n	8009ecc <process_set_config+0x244>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8009dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8009ddc:	79f8      	ldrb	r0, [r7, #7]
 8009dde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009de0:	4798      	blx	r3
 8009de2:	4603      	mov	r3, r0
 8009de4:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8009de6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009de8:	2b08      	cmp	r3, #8
 8009dea:	d94a      	bls.n	8009e82 <process_set_config+0x1fa>
 8009dec:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009dee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d846      	bhi.n	8009e82 <process_set_config+0x1fa>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 8009df4:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d107      	bne.n	8009e0c <process_set_config+0x184>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 8009dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	4a39      	ldr	r2, [pc, #228]	@ (8009ee8 <process_set_config+0x260>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d102      	bne.n	8009e0c <process_set_config+0x184>
 8009e06:	2302      	movs	r3, #2
 8009e08:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8009e12:	e024      	b.n	8009e5e <process_set_config+0x1d6>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8009e14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e16:	789a      	ldrb	r2, [r3, #2]
 8009e18:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8009e1c:	4413      	add	r3, r2
 8009e1e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8009e22:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009e26:	4a2c      	ldr	r2, [pc, #176]	@ (8009ed8 <process_set_config+0x250>)
 8009e28:	4413      	add	r3, r2
 8009e2a:	791b      	ldrb	r3, [r3, #4]
 8009e2c:	2bff      	cmp	r3, #255	@ 0xff
 8009e2e:	d00a      	beq.n	8009e46 <process_set_config+0x1be>
 8009e30:	4b28      	ldr	r3, [pc, #160]	@ (8009ed4 <process_set_config+0x24c>)
 8009e32:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 0301 	and.w	r3, r3, #1
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d000      	beq.n	8009e42 <process_set_config+0x1ba>
 8009e40:	be00      	bkpt	0x0000
 8009e42:	2300      	movs	r3, #0
 8009e44:	e042      	b.n	8009ecc <process_set_config+0x244>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8009e46:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009e4a:	4a23      	ldr	r2, [pc, #140]	@ (8009ed8 <process_set_config+0x250>)
 8009e4c:	4413      	add	r3, r2
 8009e4e:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8009e52:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8009e54:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8009e58:	3301      	adds	r3, #1
 8009e5a:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8009e5e:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8009e62:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d3d4      	bcc.n	8009e14 <process_set_config+0x18c>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8009e6a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009e6e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009e70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e72:	481e      	ldr	r0, [pc, #120]	@ (8009eec <process_set_config+0x264>)
 8009e74:	f003 f81c 	bl	800ceb0 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8009e78:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009e7a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009e7c:	4413      	add	r3, r2
 8009e7e:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 8009e80:	e00c      	b.n	8009e9c <process_set_config+0x214>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8009e82:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009e86:	3301      	adds	r3, #1
 8009e88:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8009e8c:	4b13      	ldr	r3, [pc, #76]	@ (8009edc <process_set_config+0x254>)
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	1c5a      	adds	r2, r3, #1
 8009e92:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009e96:	429a      	cmp	r2, r3
 8009e98:	f6bf af6e 	bge.w	8009d78 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8009e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8009edc <process_set_config+0x254>)
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	1c5a      	adds	r2, r3, #1
 8009ea2:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	da0a      	bge.n	8009ec0 <process_set_config+0x238>
 8009eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8009ed4 <process_set_config+0x24c>)
 8009eac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d000      	beq.n	8009ebc <process_set_config+0x234>
 8009eba:	be00      	bkpt	0x0000
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	e005      	b.n	8009ecc <process_set_config+0x244>
  while( p_desc < desc_end )
 8009ec0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009ec2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	f4ff af21 	bcc.w	8009d0c <process_set_config+0x84>
  }

  return true;
 8009eca:	2301      	movs	r3, #1
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3758      	adds	r7, #88	@ 0x58
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	e000edf0 	.word	0xe000edf0
 8009ed8:	20001714 	.word	0x20001714
 8009edc:	20001748 	.word	0x20001748
 8009ee0:	20001744 	.word	0x20001744
 8009ee4:	0800f9d8 	.word	0x0800f9d8
 8009ee8:	0800741d 	.word	0x0800741d
 8009eec:	20001728 	.word	0x20001728

08009ef0 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b094      	sub	sp, #80	@ 0x50
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	6039      	str	r1, [r7, #0]
 8009efa:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	885b      	ldrh	r3, [r3, #2]
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8009f04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f06:	0a1b      	lsrs	r3, r3, #8
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	885b      	ldrh	r3, [r3, #2]
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8009f18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 8009f20:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009f24:	3b01      	subs	r3, #1
 8009f26:	2b0e      	cmp	r3, #14
 8009f28:	f200 80b4 	bhi.w	800a094 <process_get_descriptor+0x1a4>
 8009f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f34 <process_get_descriptor+0x44>)
 8009f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f32:	bf00      	nop
 8009f34:	08009f71 	.word	0x08009f71
 8009f38:	08009fd5 	.word	0x08009fd5
 8009f3c:	0800a03b 	.word	0x0800a03b
 8009f40:	0800a095 	.word	0x0800a095
 8009f44:	0800a095 	.word	0x0800a095
 8009f48:	0800a06f 	.word	0x0800a06f
 8009f4c:	08009fd5 	.word	0x08009fd5
 8009f50:	0800a095 	.word	0x0800a095
 8009f54:	0800a095 	.word	0x0800a095
 8009f58:	0800a095 	.word	0x0800a095
 8009f5c:	0800a095 	.word	0x0800a095
 8009f60:	0800a095 	.word	0x0800a095
 8009f64:	0800a095 	.word	0x0800a095
 8009f68:	0800a095 	.word	0x0800a095
 8009f6c:	08009fa3 	.word	0x08009fa3
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8009f70:	f7fa f908 	bl	8004184 <tud_descriptor_device_cb>
 8009f74:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 8009f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10a      	bne.n	8009f92 <process_get_descriptor+0xa2>
 8009f7c:	4b48      	ldr	r3, [pc, #288]	@ (800a0a0 <process_get_descriptor+0x1b0>)
 8009f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f003 0301 	and.w	r3, r3, #1
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d000      	beq.n	8009f8e <process_get_descriptor+0x9e>
 8009f8c:	be00      	bkpt	0x0000
 8009f8e:	2300      	movs	r3, #0
 8009f90:	e081      	b.n	800a096 <process_get_descriptor+0x1a6>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8009f92:	79f8      	ldrb	r0, [r7, #7]
 8009f94:	2312      	movs	r3, #18
 8009f96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f98:	6839      	ldr	r1, [r7, #0]
 8009f9a:	f000 fd9b 	bl	800aad4 <tud_control_xfer>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	e079      	b.n	800a096 <process_get_descriptor+0x1a6>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8009fa2:	f7fe ffe5 	bl	8008f70 <tud_descriptor_bos_cb>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 8009faa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d101      	bne.n	8009fb4 <process_get_descriptor+0xc4>
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	e070      	b.n	800a096 <process_get_descriptor+0x1a6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8009fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fb6:	3302      	adds	r3, #2
 8009fb8:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 8009fba:	6a3b      	ldr	r3, [r7, #32]
 8009fbc:	881b      	ldrh	r3, [r3, #0]
 8009fbe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8009fc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009fc8:	79f8      	ldrb	r0, [r7, #7]
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	f000 fd82 	bl	800aad4 <tud_control_xfer>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	e060      	b.n	800a096 <process_get_descriptor+0x1a6>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 8009fd4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009fd8:	2b02      	cmp	r3, #2
 8009fda:	d114      	bne.n	800a006 <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8009fdc:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fa f8e7 	bl	80041b4 <tud_descriptor_configuration_cb>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 8009fea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d116      	bne.n	800a01e <process_get_descriptor+0x12e>
 8009ff0:	4b2b      	ldr	r3, [pc, #172]	@ (800a0a0 <process_get_descriptor+0x1b0>)
 8009ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 0301 	and.w	r3, r3, #1
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d000      	beq.n	800a002 <process_get_descriptor+0x112>
 800a000:	be00      	bkpt	0x0000
 800a002:	2300      	movs	r3, #0
 800a004:	e047      	b.n	800a096 <process_get_descriptor+0x1a6>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 800a006:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fe ffc0 	bl	8008f90 <tud_descriptor_other_speed_configuration_cb>
 800a010:	4603      	mov	r3, r0
 800a012:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 800a014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a016:	2b00      	cmp	r3, #0
 800a018:	d101      	bne.n	800a01e <process_get_descriptor+0x12e>
 800a01a:	2300      	movs	r3, #0
 800a01c:	e03b      	b.n	800a096 <process_get_descriptor+0x1a6>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 800a01e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a020:	3302      	adds	r3, #2
 800a022:	61fb      	str	r3, [r7, #28]
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	881b      	ldrh	r3, [r3, #0]
 800a028:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 800a02a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a02c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a02e:	79f8      	ldrb	r0, [r7, #7]
 800a030:	6839      	ldr	r1, [r7, #0]
 800a032:	f000 fd4f 	bl	800aad4 <tud_control_xfer>
 800a036:	4603      	mov	r3, r0
 800a038:	e02d      	b.n	800a096 <process_get_descriptor+0x1a6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	889b      	ldrh	r3, [r3, #4]
 800a03e:	b29a      	uxth	r2, r3
 800a040:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800a044:	4611      	mov	r1, r2
 800a046:	4618      	mov	r0, r3
 800a048:	f7fa f8c2 	bl	80041d0 <tud_descriptor_string_cb>
 800a04c:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 800a04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a050:	2b00      	cmp	r3, #0
 800a052:	d101      	bne.n	800a058 <process_get_descriptor+0x168>
 800a054:	2300      	movs	r3, #0
 800a056:	e01e      	b.n	800a096 <process_get_descriptor+0x1a6>
 800a058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a05a:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 800a060:	79f8      	ldrb	r0, [r7, #7]
 800a062:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a064:	6839      	ldr	r1, [r7, #0]
 800a066:	f000 fd35 	bl	800aad4 <tud_control_xfer>
 800a06a:	4603      	mov	r3, r0
 800a06c:	e013      	b.n	800a096 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 800a06e:	f7fe ff87 	bl	8008f80 <tud_descriptor_device_qualifier_cb>
 800a072:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 800a074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a076:	2b00      	cmp	r3, #0
 800a078:	d101      	bne.n	800a07e <process_get_descriptor+0x18e>
 800a07a:	2300      	movs	r3, #0
 800a07c:	e00b      	b.n	800a096 <process_get_descriptor+0x1a6>
 800a07e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a080:	617b      	str	r3, [r7, #20]
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 800a086:	79f8      	ldrb	r0, [r7, #7]
 800a088:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a08a:	6839      	ldr	r1, [r7, #0]
 800a08c:	f000 fd22 	bl	800aad4 <tud_control_xfer>
 800a090:	4603      	mov	r3, r0
 800a092:	e000      	b.n	800a096 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    default: return false;
 800a094:	2300      	movs	r3, #0
  }
}
 800a096:	4618      	mov	r0, r3
 800a098:	3750      	adds	r7, #80	@ 0x50
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	e000edf0 	.word	0xe000edf0

0800a0a4 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b0a0      	sub	sp, #128	@ 0x80
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	785b      	ldrb	r3, [r3, #1]
 800a0ba:	3b02      	subs	r3, #2
 800a0bc:	2b04      	cmp	r3, #4
 800a0be:	f200 8175 	bhi.w	800a3ac <dcd_event_handler+0x308>
 800a0c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c8 <dcd_event_handler+0x24>)
 800a0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c8:	0800a0dd 	.word	0x0800a0dd
 800a0cc:	0800a14d 	.word	0x0800a14d
 800a0d0:	0800a109 	.word	0x0800a109
 800a0d4:	0800a12b 	.word	0x0800a12b
 800a0d8:	0800a379 	.word	0x0800a379
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 800a0dc:	4aac      	ldr	r2, [pc, #688]	@ (800a390 <dcd_event_handler+0x2ec>)
 800a0de:	7813      	ldrb	r3, [r2, #0]
 800a0e0:	f023 0301 	bic.w	r3, r3, #1
 800a0e4:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 800a0e6:	4aaa      	ldr	r2, [pc, #680]	@ (800a390 <dcd_event_handler+0x2ec>)
 800a0e8:	7813      	ldrb	r3, [r2, #0]
 800a0ea:	f023 0302 	bic.w	r3, r3, #2
 800a0ee:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 800a0f0:	4ba7      	ldr	r3, [pc, #668]	@ (800a390 <dcd_event_handler+0x2ec>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 800a0f6:	4aa6      	ldr	r2, [pc, #664]	@ (800a390 <dcd_event_handler+0x2ec>)
 800a0f8:	7813      	ldrb	r3, [r2, #0]
 800a0fa:	f023 0304 	bic.w	r3, r3, #4
 800a0fe:	7013      	strb	r3, [r2, #0]
      send = true;
 800a100:	2301      	movs	r3, #1
 800a102:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 800a106:	e15a      	b.n	800a3be <dcd_event_handler+0x31a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 800a108:	4ba1      	ldr	r3, [pc, #644]	@ (800a390 <dcd_event_handler+0x2ec>)
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a110:	b2db      	uxtb	r3, r3
 800a112:	2b00      	cmp	r3, #0
 800a114:	f000 814e 	beq.w	800a3b4 <dcd_event_handler+0x310>
        _usbd_dev.suspended = 1;
 800a118:	4a9d      	ldr	r2, [pc, #628]	@ (800a390 <dcd_event_handler+0x2ec>)
 800a11a:	7813      	ldrb	r3, [r2, #0]
 800a11c:	f043 0304 	orr.w	r3, r3, #4
 800a120:	7013      	strb	r3, [r2, #0]
        send = true;
 800a122:	2301      	movs	r3, #1
 800a124:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 800a128:	e144      	b.n	800a3b4 <dcd_event_handler+0x310>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 800a12a:	4b99      	ldr	r3, [pc, #612]	@ (800a390 <dcd_event_handler+0x2ec>)
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 813f 	beq.w	800a3b8 <dcd_event_handler+0x314>
        _usbd_dev.suspended = 0;
 800a13a:	4a95      	ldr	r2, [pc, #596]	@ (800a390 <dcd_event_handler+0x2ec>)
 800a13c:	7813      	ldrb	r3, [r2, #0]
 800a13e:	f023 0304 	bic.w	r3, r3, #4
 800a142:	7013      	strb	r3, [r2, #0]
        send = true;
 800a144:	2301      	movs	r3, #1
 800a146:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 800a14a:	e135      	b.n	800a3b8 <dcd_event_handler+0x314>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 800a14c:	2300      	movs	r3, #0
 800a14e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800a152:	e039      	b.n	800a1c8 <dcd_event_handler+0x124>
 800a154:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800a158:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 800a15c:	2300      	movs	r3, #0
 800a15e:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 800a160:	4b8c      	ldr	r3, [pc, #560]	@ (800a394 <dcd_event_handler+0x2f0>)
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800a168:	429a      	cmp	r2, r3
 800a16a:	d207      	bcs.n	800a17c <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 800a16c:	4b8a      	ldr	r3, [pc, #552]	@ (800a398 <dcd_event_handler+0x2f4>)
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a174:	015b      	lsls	r3, r3, #5
 800a176:	4413      	add	r3, r2
 800a178:	673b      	str	r3, [r7, #112]	@ 0x70
 800a17a:	e00f      	b.n	800a19c <dcd_event_handler+0xf8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800a17c:	4b85      	ldr	r3, [pc, #532]	@ (800a394 <dcd_event_handler+0x2f0>)
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	1c5a      	adds	r2, r3, #1
 800a182:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a186:	429a      	cmp	r2, r3
 800a188:	db08      	blt.n	800a19c <dcd_event_handler+0xf8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800a18a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a18e:	4a81      	ldr	r2, [pc, #516]	@ (800a394 <dcd_event_handler+0x2f0>)
 800a190:	7812      	ldrb	r2, [r2, #0]
 800a192:	1a9b      	subs	r3, r3, r2
 800a194:	015b      	lsls	r3, r3, #5
 800a196:	4a81      	ldr	r2, [pc, #516]	@ (800a39c <dcd_event_handler+0x2f8>)
 800a198:	4413      	add	r3, r2
 800a19a:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 800a19c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 800a19e:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 800a1a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00b      	beq.n	800a1be <dcd_event_handler+0x11a>
 800a1a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1a8:	69db      	ldr	r3, [r3, #28]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d007      	beq.n	800a1be <dcd_event_handler+0x11a>
          driver->sof(event->rhport, event->sof.frame_count);
 800a1ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1b0:	69db      	ldr	r3, [r3, #28]
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	7810      	ldrb	r0, [r2, #0]
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	6852      	ldr	r2, [r2, #4]
 800a1ba:	4611      	mov	r1, r2
 800a1bc:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 800a1be:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800a1c8:	4b72      	ldr	r3, [pc, #456]	@ (800a394 <dcd_event_handler+0x2f0>)
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	1c5a      	adds	r2, r3, #1
 800a1ce:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	dabe      	bge.n	800a154 <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 800a1d6:	4b6e      	ldr	r3, [pc, #440]	@ (800a390 <dcd_event_handler+0x2ec>)
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d05a      	beq.n	800a29a <dcd_event_handler+0x1f6>
        _usbd_dev.suspended = 0;
 800a1e4:	4a6a      	ldr	r2, [pc, #424]	@ (800a390 <dcd_event_handler+0x2ec>)
 800a1e6:	7813      	ldrb	r3, [r2, #0]
 800a1e8:	f023 0304 	bic.w	r3, r3, #4
 800a1ec:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 800a1ee:	f107 0314 	add.w	r3, r7, #20
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	601a      	str	r2, [r3, #0]
 800a1f6:	605a      	str	r2, [r3, #4]
 800a1f8:	609a      	str	r2, [r3, #8]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	753b      	strb	r3, [r7, #20]
 800a200:	2305      	movs	r3, #5
 800a202:	757b      	strb	r3, [r7, #21]
 800a204:	f107 0314 	add.w	r3, r7, #20
 800a208:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a20a:	78fb      	ldrb	r3, [r7, #3]
 800a20c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 800a210:	4b63      	ldr	r3, [pc, #396]	@ (800a3a0 <dcd_event_handler+0x2fc>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	667b      	str	r3, [r7, #100]	@ 0x64
 800a216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a218:	663b      	str	r3, [r7, #96]	@ 0x60
 800a21a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a21e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 800a222:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a226:	f083 0301 	eor.w	r3, r3, #1
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d003      	beq.n	800a238 <dcd_event_handler+0x194>
    qhdl->interrupt_set(false);
 800a230:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2000      	movs	r0, #0
 800a236:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 800a238:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a23a:	3304      	adds	r3, #4
 800a23c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a23e:	4618      	mov	r0, r3
 800a240:	f7fe fde9 	bl	8008e16 <tu_fifo_write>
 800a244:	4603      	mov	r3, r0
 800a246:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 800a24a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a24e:	f083 0301 	eor.w	r3, r3, #1
 800a252:	b2db      	uxtb	r3, r3
 800a254:	2b00      	cmp	r3, #0
 800a256:	d003      	beq.n	800a260 <dcd_event_handler+0x1bc>
    qhdl->interrupt_set(true);
 800a258:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2001      	movs	r0, #1
 800a25e:	4798      	blx	r3
  }

  return success;
 800a260:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800a264:	f083 0301 	eor.w	r3, r3, #1
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d009      	beq.n	800a282 <dcd_event_handler+0x1de>
 800a26e:	4b4d      	ldr	r3, [pc, #308]	@ (800a3a4 <dcd_event_handler+0x300>)
 800a270:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a272:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f003 0301 	and.w	r3, r3, #1
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00c      	beq.n	800a298 <dcd_event_handler+0x1f4>
 800a27e:	be00      	bkpt	0x0000
 800a280:	e00a      	b.n	800a298 <dcd_event_handler+0x1f4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 800a282:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a284:	7818      	ldrb	r0, [r3, #0]
 800a286:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a288:	785b      	ldrb	r3, [r3, #1]
 800a28a:	4619      	mov	r1, r3
 800a28c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a290:	461a      	mov	r2, r3
 800a292:	f7fe fe55 	bl	8008f40 <tud_event_hook_cb>
  return true;
 800a296:	e000      	b.n	800a29a <dcd_event_handler+0x1f6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 800a298:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 800a29a:	4b3d      	ldr	r3, [pc, #244]	@ (800a390 <dcd_event_handler+0x2ec>)
 800a29c:	78db      	ldrb	r3, [r3, #3]
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 800a2a8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800a2ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a2ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a2b2:	f003 0301 	and.w	r3, r3, #1
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	bf14      	ite	ne
 800a2ba:	2301      	movne	r3, #1
 800a2bc:	2300      	moveq	r3, #0
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d07b      	beq.n	800a3bc <dcd_event_handler+0x318>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 800a2c4:	f107 0308 	add.w	r3, r7, #8
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	601a      	str	r2, [r3, #0]
 800a2cc:	605a      	str	r2, [r3, #4]
 800a2ce:	609a      	str	r2, [r3, #8]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	723b      	strb	r3, [r7, #8]
 800a2d6:	2303      	movs	r3, #3
 800a2d8:	727b      	strb	r3, [r7, #9]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	60fb      	str	r3, [r7, #12]
 800a2e0:	f107 0308 	add.w	r3, r7, #8
 800a2e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2e6:	78fb      	ldrb	r3, [r7, #3]
 800a2e8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 800a2ec:	4b2c      	ldr	r3, [pc, #176]	@ (800a3a0 <dcd_event_handler+0x2fc>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2f6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800a2fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 800a2fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a302:	f083 0301 	eor.w	r3, r3, #1
 800a306:	b2db      	uxtb	r3, r3
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d003      	beq.n	800a314 <dcd_event_handler+0x270>
    qhdl->interrupt_set(false);
 800a30c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2000      	movs	r0, #0
 800a312:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 800a314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a316:	3304      	adds	r3, #4
 800a318:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7fe fd7b 	bl	8008e16 <tu_fifo_write>
 800a320:	4603      	mov	r3, r0
 800a322:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 800a326:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a32a:	f083 0301 	eor.w	r3, r3, #1
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	2b00      	cmp	r3, #0
 800a332:	d003      	beq.n	800a33c <dcd_event_handler+0x298>
    qhdl->interrupt_set(true);
 800a334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2001      	movs	r0, #1
 800a33a:	4798      	blx	r3
  return success;
 800a33c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a340:	f083 0301 	eor.w	r3, r3, #1
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b00      	cmp	r3, #0
 800a348:	d009      	beq.n	800a35e <dcd_event_handler+0x2ba>
 800a34a:	4b16      	ldr	r3, [pc, #88]	@ (800a3a4 <dcd_event_handler+0x300>)
 800a34c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 0301 	and.w	r3, r3, #1
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00c      	beq.n	800a374 <dcd_event_handler+0x2d0>
 800a35a:	be00      	bkpt	0x0000
 800a35c:	e00a      	b.n	800a374 <dcd_event_handler+0x2d0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 800a35e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a360:	7818      	ldrb	r0, [r3, #0]
 800a362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a364:	785b      	ldrb	r3, [r3, #1]
 800a366:	4619      	mov	r1, r3
 800a368:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800a36c:	461a      	mov	r2, r3
 800a36e:	f7fe fde7 	bl	8008f40 <tud_event_hook_cb>
  return true;
 800a372:	e000      	b.n	800a376 <dcd_event_handler+0x2d2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 800a374:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 800a376:	e021      	b.n	800a3bc <dcd_event_handler+0x318>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 800a378:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a8 <dcd_event_handler+0x304>)
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	3301      	adds	r3, #1
 800a380:	b2da      	uxtb	r2, r3
 800a382:	4b09      	ldr	r3, [pc, #36]	@ (800a3a8 <dcd_event_handler+0x304>)
 800a384:	701a      	strb	r2, [r3, #0]
      send = true;
 800a386:	2301      	movs	r3, #1
 800a388:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 800a38c:	e017      	b.n	800a3be <dcd_event_handler+0x31a>
 800a38e:	bf00      	nop
 800a390:	20001714 	.word	0x20001714
 800a394:	20001748 	.word	0x20001748
 800a398:	20001744 	.word	0x20001744
 800a39c:	0800f9d8 	.word	0x0800f9d8
 800a3a0:	2000180c 	.word	0x2000180c
 800a3a4:	e000edf0 	.word	0xe000edf0
 800a3a8:	20001740 	.word	0x20001740

    default:
      send = true;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 800a3b2:	e004      	b.n	800a3be <dcd_event_handler+0x31a>
      break;
 800a3b4:	bf00      	nop
 800a3b6:	e002      	b.n	800a3be <dcd_event_handler+0x31a>
      break;
 800a3b8:	bf00      	nop
 800a3ba:	e000      	b.n	800a3be <dcd_event_handler+0x31a>
      break;
 800a3bc:	bf00      	nop
  }

  if (send) {
 800a3be:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d049      	beq.n	800a45a <dcd_event_handler+0x3b6>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3ca:	78fb      	ldrb	r3, [r7, #3]
 800a3cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 800a3d0:	4b24      	ldr	r3, [pc, #144]	@ (800a464 <dcd_event_handler+0x3c0>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a3da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a3de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 800a3e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3e6:	f083 0301 	eor.w	r3, r3, #1
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d003      	beq.n	800a3f8 <dcd_event_handler+0x354>
    qhdl->interrupt_set(false);
 800a3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2000      	movs	r0, #0
 800a3f6:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 800a3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3fa:	3304      	adds	r3, #4
 800a3fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fe fd09 	bl	8008e16 <tu_fifo_write>
 800a404:	4603      	mov	r3, r0
 800a406:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 800a40a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a40e:	f083 0301 	eor.w	r3, r3, #1
 800a412:	b2db      	uxtb	r3, r3
 800a414:	2b00      	cmp	r3, #0
 800a416:	d003      	beq.n	800a420 <dcd_event_handler+0x37c>
    qhdl->interrupt_set(true);
 800a418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2001      	movs	r0, #1
 800a41e:	4798      	blx	r3
  return success;
 800a420:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a424:	f083 0301 	eor.w	r3, r3, #1
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d009      	beq.n	800a442 <dcd_event_handler+0x39e>
 800a42e:	4b0e      	ldr	r3, [pc, #56]	@ (800a468 <dcd_event_handler+0x3c4>)
 800a430:	623b      	str	r3, [r7, #32]
 800a432:	6a3b      	ldr	r3, [r7, #32]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f003 0301 	and.w	r3, r3, #1
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00c      	beq.n	800a458 <dcd_event_handler+0x3b4>
 800a43e:	be00      	bkpt	0x0000
 800a440:	e00a      	b.n	800a458 <dcd_event_handler+0x3b4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 800a442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a444:	7818      	ldrb	r0, [r3, #0]
 800a446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a448:	785b      	ldrb	r3, [r3, #1]
 800a44a:	4619      	mov	r1, r3
 800a44c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a450:	461a      	mov	r2, r3
 800a452:	f7fe fd75 	bl	8008f40 <tud_event_hook_cb>
  return true;
 800a456:	e000      	b.n	800a45a <dcd_event_handler+0x3b6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 800a458:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 800a45a:	bf00      	nop
 800a45c:	3780      	adds	r7, #128	@ 0x80
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	2000180c 	.word	0x2000180c
 800a468:	e000edf0 	.word	0xe000edf0

0800a46c <usbd_int_set>:

//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled) {
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	4603      	mov	r3, r0
 800a474:	71fb      	strb	r3, [r7, #7]
  if (enabled) {
 800a476:	79fb      	ldrb	r3, [r7, #7]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d005      	beq.n	800a488 <usbd_int_set+0x1c>
    dcd_int_enable(_usbd_rhport);
 800a47c:	4b07      	ldr	r3, [pc, #28]	@ (800a49c <usbd_int_set+0x30>)
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	4618      	mov	r0, r3
 800a482:	f001 f929 	bl	800b6d8 <dcd_int_enable>
  } else {
    dcd_int_disable(_usbd_rhport);
  }
}
 800a486:	e004      	b.n	800a492 <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 800a488:	4b04      	ldr	r3, [pc, #16]	@ (800a49c <usbd_int_set+0x30>)
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f001 f94b 	bl	800b728 <dcd_int_disable>
}
 800a492:	bf00      	nop
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	2000022d 	.word	0x2000022d

0800a4a0 <usbd_spin_lock>:

void usbd_spin_lock(bool in_isr) {
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	71fb      	strb	r3, [r7, #7]
 800a4aa:	4b09      	ldr	r3, [pc, #36]	@ (800a4d0 <usbd_spin_lock+0x30>)
 800a4ac:	60fb      	str	r3, [r7, #12]
 800a4ae:	79fb      	ldrb	r3, [r7, #7]
 800a4b0:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 800a4b2:	7afb      	ldrb	r3, [r7, #11]
 800a4b4:	f083 0301 	eor.w	r3, r3, #1
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d003      	beq.n	800a4c6 <usbd_spin_lock+0x26>
    ctx->interrupt_set(false);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2000      	movs	r0, #0
 800a4c4:	4798      	blx	r3
}
 800a4c6:	bf00      	nop
  osal_spin_lock(&_usbd_spin, in_isr);
}
 800a4c8:	bf00      	nop
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	20000230 	.word	0x20000230

0800a4d4 <usbd_spin_unlock>:
void usbd_spin_unlock(bool in_isr) {
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	4603      	mov	r3, r0
 800a4dc:	71fb      	strb	r3, [r7, #7]
 800a4de:	4b09      	ldr	r3, [pc, #36]	@ (800a504 <usbd_spin_unlock+0x30>)
 800a4e0:	60fb      	str	r3, [r7, #12]
 800a4e2:	79fb      	ldrb	r3, [r7, #7]
 800a4e4:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 800a4e6:	7afb      	ldrb	r3, [r7, #11]
 800a4e8:	f083 0301 	eor.w	r3, r3, #1
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d003      	beq.n	800a4fa <usbd_spin_unlock+0x26>
    ctx->interrupt_set(true);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2001      	movs	r0, #1
 800a4f8:	4798      	blx	r3
}
 800a4fa:	bf00      	nop
  osal_spin_unlock(&_usbd_spin, in_isr);
}
 800a4fc:	bf00      	nop
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	20000230 	.word	0x20000230

0800a508 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b08a      	sub	sp, #40	@ 0x28
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6039      	str	r1, [r7, #0]
 800a510:	4611      	mov	r1, r2
 800a512:	461a      	mov	r2, r3
 800a514:	4603      	mov	r3, r0
 800a516:	71fb      	strb	r3, [r7, #7]
 800a518:	460b      	mov	r3, r1
 800a51a:	71bb      	strb	r3, [r7, #6]
 800a51c:	4613      	mov	r3, r2
 800a51e:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 800a520:	2300      	movs	r3, #0
 800a522:	627b      	str	r3, [r7, #36]	@ 0x24
 800a524:	e04d      	b.n	800a5c2 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 800a52a:	6a3b      	ldr	r3, [r7, #32]
 800a52c:	785b      	ldrb	r3, [r3, #1]
 800a52e:	2b05      	cmp	r3, #5
 800a530:	d108      	bne.n	800a544 <usbd_open_edpt_pair+0x3c>
 800a532:	6a3b      	ldr	r3, [r7, #32]
 800a534:	78db      	ldrb	r3, [r3, #3]
 800a536:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	461a      	mov	r2, r3
 800a53e:	797b      	ldrb	r3, [r7, #5]
 800a540:	4293      	cmp	r3, r2
 800a542:	d00a      	beq.n	800a55a <usbd_open_edpt_pair+0x52>
 800a544:	4b23      	ldr	r3, [pc, #140]	@ (800a5d4 <usbd_open_edpt_pair+0xcc>)
 800a546:	61bb      	str	r3, [r7, #24]
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f003 0301 	and.w	r3, r3, #1
 800a550:	2b00      	cmp	r3, #0
 800a552:	d000      	beq.n	800a556 <usbd_open_edpt_pair+0x4e>
 800a554:	be00      	bkpt	0x0000
 800a556:	2300      	movs	r3, #0
 800a558:	e038      	b.n	800a5cc <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800a55a:	79fb      	ldrb	r3, [r7, #7]
 800a55c:	6a39      	ldr	r1, [r7, #32]
 800a55e:	4618      	mov	r0, r3
 800a560:	f000 f83a 	bl	800a5d8 <usbd_edpt_open>
 800a564:	4603      	mov	r3, r0
 800a566:	f083 0301 	eor.w	r3, r3, #1
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d00a      	beq.n	800a586 <usbd_open_edpt_pair+0x7e>
 800a570:	4b18      	ldr	r3, [pc, #96]	@ (800a5d4 <usbd_open_edpt_pair+0xcc>)
 800a572:	61fb      	str	r3, [r7, #28]
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 0301 	and.w	r3, r3, #1
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d000      	beq.n	800a582 <usbd_open_edpt_pair+0x7a>
 800a580:	be00      	bkpt	0x0000
 800a582:	2300      	movs	r3, #0
 800a584:	e022      	b.n	800a5cc <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 800a586:	6a3b      	ldr	r3, [r7, #32]
 800a588:	789b      	ldrb	r3, [r3, #2]
 800a58a:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a58c:	7dfb      	ldrb	r3, [r7, #23]
 800a58e:	09db      	lsrs	r3, r3, #7
 800a590:	b2db      	uxtb	r3, r3
 800a592:	2b01      	cmp	r3, #1
 800a594:	d104      	bne.n	800a5a0 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 800a596:	6a3b      	ldr	r3, [r7, #32]
 800a598:	789a      	ldrb	r2, [r3, #2]
 800a59a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a59c:	701a      	strb	r2, [r3, #0]
 800a59e:	e003      	b.n	800a5a8 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	789a      	ldrb	r2, [r3, #2]
 800a5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a6:	701a      	strb	r2, [r3, #0]
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 800a5ba:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5be:	3301      	adds	r3, #1
 800a5c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5c2:	79bb      	ldrb	r3, [r7, #6]
 800a5c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	dbad      	blt.n	800a526 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 800a5ca:	2301      	movs	r3, #1
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3728      	adds	r7, #40	@ 0x28
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	e000edf0 	.word	0xe000edf0

0800a5d8 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b086      	sub	sp, #24
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	4603      	mov	r3, r0
 800a5e0:	6039      	str	r1, [r7, #0]
 800a5e2:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 800a5e4:	4b1c      	ldr	r3, [pc, #112]	@ (800a658 <usbd_edpt_open+0x80>)
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	789b      	ldrb	r3, [r3, #2]
 800a5ee:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a5f0:	7bfb      	ldrb	r3, [r7, #15]
 800a5f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	2b05      	cmp	r3, #5
 800a5fa:	d90a      	bls.n	800a612 <usbd_edpt_open+0x3a>
 800a5fc:	4b17      	ldr	r3, [pc, #92]	@ (800a65c <usbd_edpt_open+0x84>)
 800a5fe:	613b      	str	r3, [r7, #16]
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f003 0301 	and.w	r3, r3, #1
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d000      	beq.n	800a60e <usbd_edpt_open+0x36>
 800a60c:	be00      	bkpt	0x0000
 800a60e:	2300      	movs	r3, #0
 800a610:	e01d      	b.n	800a64e <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 800a612:	4b13      	ldr	r3, [pc, #76]	@ (800a660 <usbd_edpt_open+0x88>)
 800a614:	789b      	ldrb	r3, [r3, #2]
 800a616:	2200      	movs	r2, #0
 800a618:	4619      	mov	r1, r3
 800a61a:	6838      	ldr	r0, [r7, #0]
 800a61c:	f002 fbae 	bl	800cd7c <tu_edpt_validate>
 800a620:	4603      	mov	r3, r0
 800a622:	f083 0301 	eor.w	r3, r3, #1
 800a626:	b2db      	uxtb	r3, r3
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00a      	beq.n	800a642 <usbd_edpt_open+0x6a>
 800a62c:	4b0b      	ldr	r3, [pc, #44]	@ (800a65c <usbd_edpt_open+0x84>)
 800a62e:	617b      	str	r3, [r7, #20]
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f003 0301 	and.w	r3, r3, #1
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d000      	beq.n	800a63e <usbd_edpt_open+0x66>
 800a63c:	be00      	bkpt	0x0000
 800a63e:	2300      	movs	r3, #0
 800a640:	e005      	b.n	800a64e <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 800a642:	79fb      	ldrb	r3, [r7, #7]
 800a644:	6839      	ldr	r1, [r7, #0]
 800a646:	4618      	mov	r0, r3
 800a648:	f001 f992 	bl	800b970 <dcd_edpt_open>
 800a64c:	4603      	mov	r3, r0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3718      	adds	r7, #24
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	2000022d 	.word	0x2000022d
 800a65c:	e000edf0 	.word	0xe000edf0
 800a660:	20001714 	.word	0x20001714

0800a664 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 800a664:	b580      	push	{r7, lr}
 800a666:	b086      	sub	sp, #24
 800a668:	af00      	add	r7, sp, #0
 800a66a:	4603      	mov	r3, r0
 800a66c:	460a      	mov	r2, r1
 800a66e:	71fb      	strb	r3, [r7, #7]
 800a670:	4613      	mov	r3, r2
 800a672:	71bb      	strb	r3, [r7, #6]
 800a674:	79bb      	ldrb	r3, [r7, #6]
 800a676:	73bb      	strb	r3, [r7, #14]
 800a678:	7bbb      	ldrb	r3, [r7, #14]
 800a67a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a67e:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a680:	75fb      	strb	r3, [r7, #23]
 800a682:	79bb      	ldrb	r3, [r7, #6]
 800a684:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a686:	7bfb      	ldrb	r3, [r7, #15]
 800a688:	09db      	lsrs	r3, r3, #7
 800a68a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a68c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800a68e:	7dfa      	ldrb	r2, [r7, #23]
 800a690:	7dbb      	ldrb	r3, [r7, #22]
 800a692:	0052      	lsls	r2, r2, #1
 800a694:	4413      	add	r3, r2
 800a696:	3320      	adds	r3, #32
 800a698:	4a05      	ldr	r2, [pc, #20]	@ (800a6b0 <usbd_edpt_claim+0x4c>)
 800a69a:	4413      	add	r3, r2
 800a69c:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 800a69e:	2100      	movs	r1, #0
 800a6a0:	6938      	ldr	r0, [r7, #16]
 800a6a2:	f002 fb07 	bl	800ccb4 <tu_edpt_claim>
 800a6a6:	4603      	mov	r3, r0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3718      	adds	r7, #24
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	20001714 	.word	0x20001714

0800a6b4 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b086      	sub	sp, #24
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	460a      	mov	r2, r1
 800a6be:	71fb      	strb	r3, [r7, #7]
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	71bb      	strb	r3, [r7, #6]
 800a6c4:	79bb      	ldrb	r3, [r7, #6]
 800a6c6:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a6c8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6ce:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a6d0:	75fb      	strb	r3, [r7, #23]
 800a6d2:	79bb      	ldrb	r3, [r7, #6]
 800a6d4:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a6d6:	7bfb      	ldrb	r3, [r7, #15]
 800a6d8:	09db      	lsrs	r3, r3, #7
 800a6da:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a6dc:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800a6de:	7dfa      	ldrb	r2, [r7, #23]
 800a6e0:	7dbb      	ldrb	r3, [r7, #22]
 800a6e2:	0052      	lsls	r2, r2, #1
 800a6e4:	4413      	add	r3, r2
 800a6e6:	3320      	adds	r3, #32
 800a6e8:	4a05      	ldr	r2, [pc, #20]	@ (800a700 <usbd_edpt_release+0x4c>)
 800a6ea:	4413      	add	r3, r2
 800a6ec:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	6938      	ldr	r0, [r7, #16]
 800a6f2:	f002 fb19 	bl	800cd28 <tu_edpt_release>
 800a6f6:	4603      	mov	r3, r0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3718      	adds	r7, #24
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	20001714 	.word	0x20001714

0800a704 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 800a704:	b580      	push	{r7, lr}
 800a706:	b086      	sub	sp, #24
 800a708:	af00      	add	r7, sp, #0
 800a70a:	603a      	str	r2, [r7, #0]
 800a70c:	461a      	mov	r2, r3
 800a70e:	4603      	mov	r3, r0
 800a710:	71fb      	strb	r3, [r7, #7]
 800a712:	460b      	mov	r3, r1
 800a714:	71bb      	strb	r3, [r7, #6]
 800a716:	4613      	mov	r3, r2
 800a718:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 800a71a:	4b32      	ldr	r3, [pc, #200]	@ (800a7e4 <usbd_edpt_xfer+0xe0>)
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	71fb      	strb	r3, [r7, #7]
 800a720:	79bb      	ldrb	r3, [r7, #6]
 800a722:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a724:	7abb      	ldrb	r3, [r7, #10]
 800a726:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a72a:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a72c:	75fb      	strb	r3, [r7, #23]
 800a72e:	79bb      	ldrb	r3, [r7, #6]
 800a730:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a732:	7afb      	ldrb	r3, [r7, #11]
 800a734:	09db      	lsrs	r3, r3, #7
 800a736:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a738:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 800a73a:	7dfa      	ldrb	r2, [r7, #23]
 800a73c:	7dbb      	ldrb	r3, [r7, #22]
 800a73e:	492a      	ldr	r1, [pc, #168]	@ (800a7e8 <usbd_edpt_xfer+0xe4>)
 800a740:	0052      	lsls	r2, r2, #1
 800a742:	440a      	add	r2, r1
 800a744:	4413      	add	r3, r2
 800a746:	3320      	adds	r3, #32
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	2b00      	cmp	r3, #0
 800a752:	d00a      	beq.n	800a76a <usbd_edpt_xfer+0x66>
 800a754:	4b25      	ldr	r3, [pc, #148]	@ (800a7ec <usbd_edpt_xfer+0xe8>)
 800a756:	60fb      	str	r3, [r7, #12]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f003 0301 	and.w	r3, r3, #1
 800a760:	2b00      	cmp	r3, #0
 800a762:	d000      	beq.n	800a766 <usbd_edpt_xfer+0x62>
 800a764:	be00      	bkpt	0x0000
 800a766:	2300      	movs	r3, #0
 800a768:	e038      	b.n	800a7dc <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800a76a:	7dfa      	ldrb	r2, [r7, #23]
 800a76c:	7dbb      	ldrb	r3, [r7, #22]
 800a76e:	491e      	ldr	r1, [pc, #120]	@ (800a7e8 <usbd_edpt_xfer+0xe4>)
 800a770:	0052      	lsls	r2, r2, #1
 800a772:	440a      	add	r2, r1
 800a774:	4413      	add	r3, r2
 800a776:	f103 0220 	add.w	r2, r3, #32
 800a77a:	7813      	ldrb	r3, [r2, #0]
 800a77c:	f043 0301 	orr.w	r3, r3, #1
 800a780:	7013      	strb	r3, [r2, #0]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 800a782:	88bb      	ldrh	r3, [r7, #4]
 800a784:	79b9      	ldrb	r1, [r7, #6]
 800a786:	79f8      	ldrb	r0, [r7, #7]
 800a788:	683a      	ldr	r2, [r7, #0]
 800a78a:	f001 f9b5 	bl	800baf8 <dcd_edpt_xfer>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <usbd_edpt_xfer+0x94>
    return true;
 800a794:	2301      	movs	r3, #1
 800a796:	e021      	b.n	800a7dc <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 800a798:	7dfa      	ldrb	r2, [r7, #23]
 800a79a:	7dbb      	ldrb	r3, [r7, #22]
 800a79c:	4912      	ldr	r1, [pc, #72]	@ (800a7e8 <usbd_edpt_xfer+0xe4>)
 800a79e:	0052      	lsls	r2, r2, #1
 800a7a0:	440a      	add	r2, r1
 800a7a2:	4413      	add	r3, r2
 800a7a4:	f103 0220 	add.w	r2, r3, #32
 800a7a8:	7813      	ldrb	r3, [r2, #0]
 800a7aa:	f023 0301 	bic.w	r3, r3, #1
 800a7ae:	7013      	strb	r3, [r2, #0]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 800a7b0:	7dfa      	ldrb	r2, [r7, #23]
 800a7b2:	7dbb      	ldrb	r3, [r7, #22]
 800a7b4:	490c      	ldr	r1, [pc, #48]	@ (800a7e8 <usbd_edpt_xfer+0xe4>)
 800a7b6:	0052      	lsls	r2, r2, #1
 800a7b8:	440a      	add	r2, r1
 800a7ba:	4413      	add	r3, r2
 800a7bc:	f103 0220 	add.w	r2, r3, #32
 800a7c0:	7813      	ldrb	r3, [r2, #0]
 800a7c2:	f023 0304 	bic.w	r3, r3, #4
 800a7c6:	7013      	strb	r3, [r2, #0]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 800a7c8:	4b08      	ldr	r3, [pc, #32]	@ (800a7ec <usbd_edpt_xfer+0xe8>)
 800a7ca:	613b      	str	r3, [r7, #16]
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 0301 	and.w	r3, r3, #1
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d000      	beq.n	800a7da <usbd_edpt_xfer+0xd6>
 800a7d8:	be00      	bkpt	0x0000
    return false;
 800a7da:	2300      	movs	r3, #0
  }
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3718      	adds	r7, #24
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	2000022d 	.word	0x2000022d
 800a7e8:	20001714 	.word	0x20001714
 800a7ec:	e000edf0 	.word	0xe000edf0

0800a7f0 <usbd_edpt_busy>:
    TU_BREAKPOINT();
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr) {
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	460a      	mov	r2, r1
 800a7fa:	71fb      	strb	r3, [r7, #7]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	71bb      	strb	r3, [r7, #6]
 800a800:	79bb      	ldrb	r3, [r7, #6]
 800a802:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a804:	7b3b      	ldrb	r3, [r7, #12]
 800a806:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a80a:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a80c:	73fb      	strb	r3, [r7, #15]
 800a80e:	79bb      	ldrb	r3, [r7, #6]
 800a810:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a812:	7b7b      	ldrb	r3, [r7, #13]
 800a814:	09db      	lsrs	r3, r3, #7
 800a816:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a818:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 800a81a:	7bfa      	ldrb	r2, [r7, #15]
 800a81c:	7bbb      	ldrb	r3, [r7, #14]
 800a81e:	490a      	ldr	r1, [pc, #40]	@ (800a848 <usbd_edpt_busy+0x58>)
 800a820:	0052      	lsls	r2, r2, #1
 800a822:	440a      	add	r2, r1
 800a824:	4413      	add	r3, r2
 800a826:	3320      	adds	r3, #32
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	2b00      	cmp	r3, #0
 800a832:	bf14      	ite	ne
 800a834:	2301      	movne	r3, #1
 800a836:	2300      	moveq	r3, #0
 800a838:	b2db      	uxtb	r3, r3
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3714      	adds	r7, #20
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	20001714 	.word	0x20001714

0800a84c <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	4603      	mov	r3, r0
 800a854:	460a      	mov	r2, r1
 800a856:	71fb      	strb	r3, [r7, #7]
 800a858:	4613      	mov	r3, r2
 800a85a:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 800a85c:	4b18      	ldr	r3, [pc, #96]	@ (800a8c0 <usbd_edpt_stall+0x74>)
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	71fb      	strb	r3, [r7, #7]
 800a862:	79bb      	ldrb	r3, [r7, #6]
 800a864:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a866:	7b3b      	ldrb	r3, [r7, #12]
 800a868:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a86c:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a86e:	73fb      	strb	r3, [r7, #15]
 800a870:	79bb      	ldrb	r3, [r7, #6]
 800a872:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a874:	7b7b      	ldrb	r3, [r7, #13]
 800a876:	09db      	lsrs	r3, r3, #7
 800a878:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a87a:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 800a87c:	79ba      	ldrb	r2, [r7, #6]
 800a87e:	79fb      	ldrb	r3, [r7, #7]
 800a880:	4611      	mov	r1, r2
 800a882:	4618      	mov	r0, r3
 800a884:	f001 f988 	bl	800bb98 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 800a888:	7bfa      	ldrb	r2, [r7, #15]
 800a88a:	7bbb      	ldrb	r3, [r7, #14]
 800a88c:	490d      	ldr	r1, [pc, #52]	@ (800a8c4 <usbd_edpt_stall+0x78>)
 800a88e:	0052      	lsls	r2, r2, #1
 800a890:	440a      	add	r2, r1
 800a892:	4413      	add	r3, r2
 800a894:	f103 0220 	add.w	r2, r3, #32
 800a898:	7813      	ldrb	r3, [r2, #0]
 800a89a:	f043 0302 	orr.w	r3, r3, #2
 800a89e:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800a8a0:	7bfa      	ldrb	r2, [r7, #15]
 800a8a2:	7bbb      	ldrb	r3, [r7, #14]
 800a8a4:	4907      	ldr	r1, [pc, #28]	@ (800a8c4 <usbd_edpt_stall+0x78>)
 800a8a6:	0052      	lsls	r2, r2, #1
 800a8a8:	440a      	add	r2, r1
 800a8aa:	4413      	add	r3, r2
 800a8ac:	f103 0220 	add.w	r2, r3, #32
 800a8b0:	7813      	ldrb	r3, [r2, #0]
 800a8b2:	f043 0301 	orr.w	r3, r3, #1
 800a8b6:	7013      	strb	r3, [r2, #0]
}
 800a8b8:	bf00      	nop
 800a8ba:	3710      	adds	r7, #16
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	2000022d 	.word	0x2000022d
 800a8c4:	20001714 	.word	0x20001714

0800a8c8 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	460a      	mov	r2, r1
 800a8d2:	71fb      	strb	r3, [r7, #7]
 800a8d4:	4613      	mov	r3, r2
 800a8d6:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 800a8d8:	4b18      	ldr	r3, [pc, #96]	@ (800a93c <usbd_edpt_clear_stall+0x74>)
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	71fb      	strb	r3, [r7, #7]
 800a8de:	79bb      	ldrb	r3, [r7, #6]
 800a8e0:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a8e2:	7b3b      	ldrb	r3, [r7, #12]
 800a8e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8e8:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a8ea:	73fb      	strb	r3, [r7, #15]
 800a8ec:	79bb      	ldrb	r3, [r7, #6]
 800a8ee:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a8f0:	7b7b      	ldrb	r3, [r7, #13]
 800a8f2:	09db      	lsrs	r3, r3, #7
 800a8f4:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a8f6:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 800a8f8:	79ba      	ldrb	r2, [r7, #6]
 800a8fa:	79fb      	ldrb	r3, [r7, #7]
 800a8fc:	4611      	mov	r1, r2
 800a8fe:	4618      	mov	r0, r3
 800a900:	f001 f980 	bl	800bc04 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 800a904:	7bfa      	ldrb	r2, [r7, #15]
 800a906:	7bbb      	ldrb	r3, [r7, #14]
 800a908:	490d      	ldr	r1, [pc, #52]	@ (800a940 <usbd_edpt_clear_stall+0x78>)
 800a90a:	0052      	lsls	r2, r2, #1
 800a90c:	440a      	add	r2, r1
 800a90e:	4413      	add	r3, r2
 800a910:	f103 0220 	add.w	r2, r3, #32
 800a914:	7813      	ldrb	r3, [r2, #0]
 800a916:	f023 0302 	bic.w	r3, r3, #2
 800a91a:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 800a91c:	7bfa      	ldrb	r2, [r7, #15]
 800a91e:	7bbb      	ldrb	r3, [r7, #14]
 800a920:	4907      	ldr	r1, [pc, #28]	@ (800a940 <usbd_edpt_clear_stall+0x78>)
 800a922:	0052      	lsls	r2, r2, #1
 800a924:	440a      	add	r2, r1
 800a926:	4413      	add	r3, r2
 800a928:	f103 0220 	add.w	r2, r3, #32
 800a92c:	7813      	ldrb	r3, [r2, #0]
 800a92e:	f023 0301 	bic.w	r3, r3, #1
 800a932:	7013      	strb	r3, [r2, #0]
}
 800a934:	bf00      	nop
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	2000022d 	.word	0x2000022d
 800a940:	20001714 	.word	0x20001714

0800a944 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	460a      	mov	r2, r1
 800a94e:	71fb      	strb	r3, [r7, #7]
 800a950:	4613      	mov	r3, r2
 800a952:	71bb      	strb	r3, [r7, #6]
 800a954:	79bb      	ldrb	r3, [r7, #6]
 800a956:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a958:	7b3b      	ldrb	r3, [r7, #12]
 800a95a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a95e:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a960:	73fb      	strb	r3, [r7, #15]
 800a962:	79bb      	ldrb	r3, [r7, #6]
 800a964:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a966:	7b7b      	ldrb	r3, [r7, #13]
 800a968:	09db      	lsrs	r3, r3, #7
 800a96a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a96c:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 800a96e:	7bfa      	ldrb	r2, [r7, #15]
 800a970:	7bbb      	ldrb	r3, [r7, #14]
 800a972:	490a      	ldr	r1, [pc, #40]	@ (800a99c <usbd_edpt_stalled+0x58>)
 800a974:	0052      	lsls	r2, r2, #1
 800a976:	440a      	add	r2, r1
 800a978:	4413      	add	r3, r2
 800a97a:	3320      	adds	r3, #32
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a982:	b2db      	uxtb	r3, r3
 800a984:	2b00      	cmp	r3, #0
 800a986:	bf14      	ite	ne
 800a988:	2301      	movne	r3, #1
 800a98a:	2300      	moveq	r3, #0
 800a98c:	b2db      	uxtb	r3, r3
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3714      	adds	r7, #20
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	20001714 	.word	0x20001714

0800a9a0 <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, const tusb_control_request_t* request) {
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	6039      	str	r1, [r7, #0]
 800a9aa:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	4603      	mov	r3, r0
 800a9c0:	6039      	str	r1, [r7, #0]
 800a9c2:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d001      	beq.n	800a9d6 <status_stage_xact+0x1e>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	e000      	b.n	800a9d8 <status_stage_xact+0x20>
 800a9d6:	2380      	movs	r3, #128	@ 0x80
 800a9d8:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 800a9da:	7bf9      	ldrb	r1, [r7, #15]
 800a9dc:	79f8      	ldrb	r0, [r7, #7]
 800a9de:	2300      	movs	r3, #0
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f7ff fe8f 	bl	800a704 <usbd_edpt_xfer>
 800a9e6:	4603      	mov	r3, r0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	6039      	str	r1, [r7, #0]
 800a9fa:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 800a9fc:	4b0b      	ldr	r3, [pc, #44]	@ (800aa2c <tud_control_status+0x3c>)
 800a9fe:	683a      	ldr	r2, [r7, #0]
 800aa00:	6810      	ldr	r0, [r2, #0]
 800aa02:	6851      	ldr	r1, [r2, #4]
 800aa04:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800aa06:	4b09      	ldr	r3, [pc, #36]	@ (800aa2c <tud_control_status+0x3c>)
 800aa08:	2200      	movs	r2, #0
 800aa0a:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800aa0c:	4b07      	ldr	r3, [pc, #28]	@ (800aa2c <tud_control_status+0x3c>)
 800aa0e:	2200      	movs	r2, #0
 800aa10:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800aa12:	4b06      	ldr	r3, [pc, #24]	@ (800aa2c <tud_control_status+0x3c>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 800aa18:	79fb      	ldrb	r3, [r7, #7]
 800aa1a:	6839      	ldr	r1, [r7, #0]
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7ff ffcb 	bl	800a9b8 <status_stage_xact>
 800aa22:	4603      	mov	r3, r0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	20001810 	.word	0x20001810

0800aa30 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b088      	sub	sp, #32
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	4603      	mov	r3, r0
 800aa38:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 800aa3a:	4b24      	ldr	r3, [pc, #144]	@ (800aacc <data_stage_xact+0x9c>)
 800aa3c:	899a      	ldrh	r2, [r3, #12]
 800aa3e:	4b23      	ldr	r3, [pc, #140]	@ (800aacc <data_stage_xact+0x9c>)
 800aa40:	89db      	ldrh	r3, [r3, #14]
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	837b      	strh	r3, [r7, #26]
 800aa48:	2340      	movs	r3, #64	@ 0x40
 800aa4a:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800aa4c:	8b7a      	ldrh	r2, [r7, #26]
 800aa4e:	8b3b      	ldrh	r3, [r7, #24]
 800aa50:	4293      	cmp	r3, r2
 800aa52:	bf28      	it	cs
 800aa54:	4613      	movcs	r3, r2
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 800aa5e:	4b1b      	ldr	r3, [pc, #108]	@ (800aacc <data_stage_xact+0x9c>)
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d01e      	beq.n	800aaaa <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 800aa6c:	2380      	movs	r3, #128	@ 0x80
 800aa6e:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 800aa70:	8bbb      	ldrh	r3, [r7, #28]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d019      	beq.n	800aaaa <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 800aa76:	4b15      	ldr	r3, [pc, #84]	@ (800aacc <data_stage_xact+0x9c>)
 800aa78:	689a      	ldr	r2, [r3, #8]
 800aa7a:	8bbb      	ldrh	r3, [r7, #28]
 800aa7c:	4914      	ldr	r1, [pc, #80]	@ (800aad0 <data_stage_xact+0xa0>)
 800aa7e:	6179      	str	r1, [r7, #20]
 800aa80:	2140      	movs	r1, #64	@ 0x40
 800aa82:	6139      	str	r1, [r7, #16]
 800aa84:	60fa      	str	r2, [r7, #12]
 800aa86:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 800aa88:	693a      	ldr	r2, [r7, #16]
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d202      	bcs.n	800aa96 <data_stage_xact+0x66>
    return -1;
 800aa90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa94:	e005      	b.n	800aaa2 <data_stage_xact+0x72>
  memcpy(dest, src, count);
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	68f9      	ldr	r1, [r7, #12]
 800aa9a:	6978      	ldr	r0, [r7, #20]
 800aa9c:	f002 fc81 	bl	800d3a2 <memcpy>
  return 0;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d001      	beq.n	800aaaa <data_stage_xact+0x7a>
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	e00b      	b.n	800aac2 <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 800aaaa:	8bbb      	ldrh	r3, [r7, #28]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d001      	beq.n	800aab4 <data_stage_xact+0x84>
 800aab0:	4a07      	ldr	r2, [pc, #28]	@ (800aad0 <data_stage_xact+0xa0>)
 800aab2:	e000      	b.n	800aab6 <data_stage_xact+0x86>
 800aab4:	2200      	movs	r2, #0
 800aab6:	8bbb      	ldrh	r3, [r7, #28]
 800aab8:	7ff9      	ldrb	r1, [r7, #31]
 800aaba:	79f8      	ldrb	r0, [r7, #7]
 800aabc:	f7ff fe22 	bl	800a704 <usbd_edpt_xfer>
 800aac0:	4603      	mov	r3, r0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3720      	adds	r7, #32
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	20001810 	.word	0x20001810
 800aad0:	20001824 	.word	0x20001824

0800aad4 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b088      	sub	sp, #32
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60b9      	str	r1, [r7, #8]
 800aadc:	607a      	str	r2, [r7, #4]
 800aade:	461a      	mov	r2, r3
 800aae0:	4603      	mov	r3, r0
 800aae2:	73fb      	strb	r3, [r7, #15]
 800aae4:	4613      	mov	r3, r2
 800aae6:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 800aae8:	4b30      	ldr	r3, [pc, #192]	@ (800abac <tud_control_xfer+0xd8>)
 800aaea:	68ba      	ldr	r2, [r7, #8]
 800aaec:	6810      	ldr	r0, [r2, #0]
 800aaee:	6851      	ldr	r1, [r2, #4]
 800aaf0:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 800aaf2:	4a2e      	ldr	r2, [pc, #184]	@ (800abac <tud_control_xfer+0xd8>)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 800aaf8:	4b2c      	ldr	r3, [pc, #176]	@ (800abac <tud_control_xfer+0xd8>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	88db      	ldrh	r3, [r3, #6]
 800ab02:	b29a      	uxth	r2, r3
 800ab04:	89bb      	ldrh	r3, [r7, #12]
 800ab06:	827b      	strh	r3, [r7, #18]
 800ab08:	4613      	mov	r3, r2
 800ab0a:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800ab0c:	8a7a      	ldrh	r2, [r7, #18]
 800ab0e:	8a3b      	ldrh	r3, [r7, #16]
 800ab10:	4293      	cmp	r3, r2
 800ab12:	bf28      	it	cs
 800ab14:	4613      	movcs	r3, r2
 800ab16:	b29a      	uxth	r2, r3
 800ab18:	4b24      	ldr	r3, [pc, #144]	@ (800abac <tud_control_xfer+0xd8>)
 800ab1a:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	88db      	ldrh	r3, [r3, #6]
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d026      	beq.n	800ab74 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 800ab26:	4b21      	ldr	r3, [pc, #132]	@ (800abac <tud_control_xfer+0xd8>)
 800ab28:	899b      	ldrh	r3, [r3, #12]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d00d      	beq.n	800ab4a <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10a      	bne.n	800ab4a <tud_control_xfer+0x76>
 800ab34:	4b1e      	ldr	r3, [pc, #120]	@ (800abb0 <tud_control_xfer+0xdc>)
 800ab36:	61bb      	str	r3, [r7, #24]
 800ab38:	69bb      	ldr	r3, [r7, #24]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f003 0301 	and.w	r3, r3, #1
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d000      	beq.n	800ab46 <tud_control_xfer+0x72>
 800ab44:	be00      	bkpt	0x0000
 800ab46:	2300      	movs	r3, #0
 800ab48:	e02b      	b.n	800aba2 <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 800ab4a:	7bfb      	ldrb	r3, [r7, #15]
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7ff ff6f 	bl	800aa30 <data_stage_xact>
 800ab52:	4603      	mov	r3, r0
 800ab54:	f083 0301 	eor.w	r3, r3, #1
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d020      	beq.n	800aba0 <tud_control_xfer+0xcc>
 800ab5e:	4b14      	ldr	r3, [pc, #80]	@ (800abb0 <tud_control_xfer+0xdc>)
 800ab60:	617b      	str	r3, [r7, #20]
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f003 0301 	and.w	r3, r3, #1
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d000      	beq.n	800ab70 <tud_control_xfer+0x9c>
 800ab6e:	be00      	bkpt	0x0000
 800ab70:	2300      	movs	r3, #0
 800ab72:	e016      	b.n	800aba2 <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 800ab74:	7bfb      	ldrb	r3, [r7, #15]
 800ab76:	68b9      	ldr	r1, [r7, #8]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7ff ff1d 	bl	800a9b8 <status_stage_xact>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	f083 0301 	eor.w	r3, r3, #1
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00a      	beq.n	800aba0 <tud_control_xfer+0xcc>
 800ab8a:	4b09      	ldr	r3, [pc, #36]	@ (800abb0 <tud_control_xfer+0xdc>)
 800ab8c:	61fb      	str	r3, [r7, #28]
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f003 0301 	and.w	r3, r3, #1
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d000      	beq.n	800ab9c <tud_control_xfer+0xc8>
 800ab9a:	be00      	bkpt	0x0000
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	e000      	b.n	800aba2 <tud_control_xfer+0xce>
  }

  return true;
 800aba0:	2301      	movs	r3, #1
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3720      	adds	r7, #32
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	20001810 	.word	0x20001810
 800abb0:	e000edf0 	.word	0xe000edf0

0800abb4 <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 800abb4:	b580      	push	{r7, lr}
 800abb6:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 800abb8:	2214      	movs	r2, #20
 800abba:	2100      	movs	r1, #0
 800abbc:	4802      	ldr	r0, [pc, #8]	@ (800abc8 <usbd_control_reset+0x14>)
 800abbe:	f002 fb5f 	bl	800d280 <memset>
}
 800abc2:	bf00      	nop
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	20001810 	.word	0x20001810

0800abcc <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 800abd4:	4a04      	ldr	r2, [pc, #16]	@ (800abe8 <usbd_control_set_complete_callback+0x1c>)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6113      	str	r3, [r2, #16]
}
 800abda:	bf00      	nop
 800abdc:	370c      	adds	r7, #12
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	20001810 	.word	0x20001810

0800abec <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 800abf4:	4b09      	ldr	r3, [pc, #36]	@ (800ac1c <usbd_control_set_request+0x30>)
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	6810      	ldr	r0, [r2, #0]
 800abfa:	6851      	ldr	r1, [r2, #4]
 800abfc:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800abfe:	4b07      	ldr	r3, [pc, #28]	@ (800ac1c <usbd_control_set_request+0x30>)
 800ac00:	2200      	movs	r2, #0
 800ac02:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800ac04:	4b05      	ldr	r3, [pc, #20]	@ (800ac1c <usbd_control_set_request+0x30>)
 800ac06:	2200      	movs	r2, #0
 800ac08:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800ac0a:	4b04      	ldr	r3, [pc, #16]	@ (800ac1c <usbd_control_set_request+0x30>)
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	819a      	strh	r2, [r3, #12]
}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr
 800ac1c:	20001810 	.word	0x20001810

0800ac20 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b088      	sub	sp, #32
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	603b      	str	r3, [r7, #0]
 800ac28:	4603      	mov	r3, r0
 800ac2a:	71fb      	strb	r3, [r7, #7]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	71bb      	strb	r3, [r7, #6]
 800ac30:	4613      	mov	r3, r2
 800ac32:	717b      	strb	r3, [r7, #5]
 800ac34:	79bb      	ldrb	r3, [r7, #6]
 800ac36:	73fb      	strb	r3, [r7, #15]
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
 800ac3a:	09db      	lsrs	r3, r3, #7
 800ac3c:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 800ac3e:	4a4f      	ldr	r2, [pc, #316]	@ (800ad7c <usbd_control_xfer_cb+0x15c>)
 800ac40:	7812      	ldrb	r2, [r2, #0]
 800ac42:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 800ac46:	b2d2      	uxtb	r2, r2
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d01e      	beq.n	800ac8a <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00a      	beq.n	800ac68 <usbd_control_xfer_cb+0x48>
 800ac52:	4b4b      	ldr	r3, [pc, #300]	@ (800ad80 <usbd_control_xfer_cb+0x160>)
 800ac54:	613b      	str	r3, [r7, #16]
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f003 0301 	and.w	r3, r3, #1
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d000      	beq.n	800ac64 <usbd_control_xfer_cb+0x44>
 800ac62:	be00      	bkpt	0x0000
 800ac64:	2300      	movs	r3, #0
 800ac66:	e084      	b.n	800ad72 <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 800ac68:	79fb      	ldrb	r3, [r7, #7]
 800ac6a:	4944      	ldr	r1, [pc, #272]	@ (800ad7c <usbd_control_xfer_cb+0x15c>)
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7ff fe97 	bl	800a9a0 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 800ac72:	4b42      	ldr	r3, [pc, #264]	@ (800ad7c <usbd_control_xfer_cb+0x15c>)
 800ac74:	691b      	ldr	r3, [r3, #16]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d005      	beq.n	800ac86 <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 800ac7a:	4b40      	ldr	r3, [pc, #256]	@ (800ad7c <usbd_control_xfer_cb+0x15c>)
 800ac7c:	691b      	ldr	r3, [r3, #16]
 800ac7e:	79f8      	ldrb	r0, [r7, #7]
 800ac80:	4a3e      	ldr	r2, [pc, #248]	@ (800ad7c <usbd_control_xfer_cb+0x15c>)
 800ac82:	2103      	movs	r1, #3
 800ac84:	4798      	blx	r3
    }

    return true;
 800ac86:	2301      	movs	r3, #1
 800ac88:	e073      	b.n	800ad72 <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 800ac8a:	4b3c      	ldr	r3, [pc, #240]	@ (800ad7c <usbd_control_xfer_cb+0x15c>)
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d10c      	bne.n	800acb2 <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 800ac98:	4b38      	ldr	r3, [pc, #224]	@ (800ad7c <usbd_control_xfer_cb+0x15c>)
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d101      	bne.n	800aca4 <usbd_control_xfer_cb+0x84>
 800aca0:	2300      	movs	r3, #0
 800aca2:	e066      	b.n	800ad72 <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 800aca4:	4b35      	ldr	r3, [pc, #212]	@ (800ad7c <usbd_control_xfer_cb+0x15c>)
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	683a      	ldr	r2, [r7, #0]
 800acaa:	4936      	ldr	r1, [pc, #216]	@ (800ad84 <usbd_control_xfer_cb+0x164>)
 800acac:	4618      	mov	r0, r3
 800acae:	f002 fb78 	bl	800d3a2 <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 800acb2:	4b32      	ldr	r3, [pc, #200]	@ (800ad7c <usbd_control_xfer_cb+0x15c>)
 800acb4:	89da      	ldrh	r2, [r3, #14]
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	b29b      	uxth	r3, r3
 800acba:	4413      	add	r3, r2
 800acbc:	b29a      	uxth	r2, r3
 800acbe:	4b2f      	ldr	r3, [pc, #188]	@ (800ad7c <usbd_control_xfer_cb+0x15c>)
 800acc0:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 800acc2:	4b2e      	ldr	r3, [pc, #184]	@ (800ad7c <usbd_control_xfer_cb+0x15c>)
 800acc4:	689a      	ldr	r2, [r3, #8]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	4413      	add	r3, r2
 800acca:	4a2c      	ldr	r2, [pc, #176]	@ (800ad7c <usbd_control_xfer_cb+0x15c>)
 800accc:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 800acce:	4b2b      	ldr	r3, [pc, #172]	@ (800ad7c <usbd_control_xfer_cb+0x15c>)
 800acd0:	88da      	ldrh	r2, [r3, #6]
 800acd2:	4b2a      	ldr	r3, [pc, #168]	@ (800ad7c <usbd_control_xfer_cb+0x15c>)
 800acd4:	89db      	ldrh	r3, [r3, #14]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d002      	beq.n	800ace0 <usbd_control_xfer_cb+0xc0>
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	2b3f      	cmp	r3, #63	@ 0x3f
 800acde:	d831      	bhi.n	800ad44 <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 800ace0:	2301      	movs	r3, #1
 800ace2:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 800ace4:	4b25      	ldr	r3, [pc, #148]	@ (800ad7c <usbd_control_xfer_cb+0x15c>)
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d007      	beq.n	800acfc <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 800acec:	4b23      	ldr	r3, [pc, #140]	@ (800ad7c <usbd_control_xfer_cb+0x15c>)
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	79f8      	ldrb	r0, [r7, #7]
 800acf2:	4a22      	ldr	r2, [pc, #136]	@ (800ad7c <usbd_control_xfer_cb+0x15c>)
 800acf4:	2102      	movs	r1, #2
 800acf6:	4798      	blx	r3
 800acf8:	4603      	mov	r3, r0
 800acfa:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 800acfc:	7ffb      	ldrb	r3, [r7, #31]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d015      	beq.n	800ad2e <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 800ad02:	79fb      	ldrb	r3, [r7, #7]
 800ad04:	491d      	ldr	r1, [pc, #116]	@ (800ad7c <usbd_control_xfer_cb+0x15c>)
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7ff fe56 	bl	800a9b8 <status_stage_xact>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	f083 0301 	eor.w	r3, r3, #1
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d02a      	beq.n	800ad6e <usbd_control_xfer_cb+0x14e>
 800ad18:	4b19      	ldr	r3, [pc, #100]	@ (800ad80 <usbd_control_xfer_cb+0x160>)
 800ad1a:	617b      	str	r3, [r7, #20]
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f003 0301 	and.w	r3, r3, #1
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d000      	beq.n	800ad2a <usbd_control_xfer_cb+0x10a>
 800ad28:	be00      	bkpt	0x0000
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	e021      	b.n	800ad72 <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 800ad2e:	79fb      	ldrb	r3, [r7, #7]
 800ad30:	2100      	movs	r1, #0
 800ad32:	4618      	mov	r0, r3
 800ad34:	f000 ff30 	bl	800bb98 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 800ad38:	79fb      	ldrb	r3, [r7, #7]
 800ad3a:	2180      	movs	r1, #128	@ 0x80
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f000 ff2b 	bl	800bb98 <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 800ad42:	e014      	b.n	800ad6e <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 800ad44:	79fb      	ldrb	r3, [r7, #7]
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7ff fe72 	bl	800aa30 <data_stage_xact>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	f083 0301 	eor.w	r3, r3, #1
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00b      	beq.n	800ad70 <usbd_control_xfer_cb+0x150>
 800ad58:	4b09      	ldr	r3, [pc, #36]	@ (800ad80 <usbd_control_xfer_cb+0x160>)
 800ad5a:	61bb      	str	r3, [r7, #24]
 800ad5c:	69bb      	ldr	r3, [r7, #24]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f003 0301 	and.w	r3, r3, #1
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d000      	beq.n	800ad6a <usbd_control_xfer_cb+0x14a>
 800ad68:	be00      	bkpt	0x0000
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	e001      	b.n	800ad72 <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 800ad6e:	bf00      	nop
  }

  return true;
 800ad70:	2301      	movs	r3, #1
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3720      	adds	r7, #32
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	20001810 	.word	0x20001810
 800ad80:	e000edf0 	.word	0xe000edf0
 800ad84:	20001824 	.word	0x20001824

0800ad88 <__NVIC_EnableIRQ>:
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	4603      	mov	r3, r0
 800ad90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	db0b      	blt.n	800adb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ad9a:	79fb      	ldrb	r3, [r7, #7]
 800ad9c:	f003 021f 	and.w	r2, r3, #31
 800ada0:	4907      	ldr	r1, [pc, #28]	@ (800adc0 <__NVIC_EnableIRQ+0x38>)
 800ada2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ada6:	095b      	lsrs	r3, r3, #5
 800ada8:	2001      	movs	r0, #1
 800adaa:	fa00 f202 	lsl.w	r2, r0, r2
 800adae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800adb2:	bf00      	nop
 800adb4:	370c      	adds	r7, #12
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	e000e100 	.word	0xe000e100

0800adc4 <__NVIC_DisableIRQ>:
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	4603      	mov	r3, r0
 800adcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800adce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800add2:	2b00      	cmp	r3, #0
 800add4:	db12      	blt.n	800adfc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800add6:	79fb      	ldrb	r3, [r7, #7]
 800add8:	f003 021f 	and.w	r2, r3, #31
 800addc:	490a      	ldr	r1, [pc, #40]	@ (800ae08 <__NVIC_DisableIRQ+0x44>)
 800adde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ade2:	095b      	lsrs	r3, r3, #5
 800ade4:	2001      	movs	r0, #1
 800ade6:	fa00 f202 	lsl.w	r2, r0, r2
 800adea:	3320      	adds	r3, #32
 800adec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800adf0:	f3bf 8f4f 	dsb	sy
}
 800adf4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800adf6:	f3bf 8f6f 	isb	sy
}
 800adfa:	bf00      	nop
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr
 800ae08:	e000e100 	.word	0xe000e100

0800ae0c <dma_setup_prepare>:
  // Internal DMA only
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	4603      	mov	r3, r0
 800ae14:	71fb      	strb	r3, [r7, #7]
 800ae16:	79fb      	ldrb	r3, [r7, #7]
 800ae18:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ae1a:	7afb      	ldrb	r3, [r7, #11]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d001      	beq.n	800ae24 <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 800ae20:	2300      	movs	r3, #0
 800ae22:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800ae24:	7afb      	ldrb	r3, [r7, #11]
 800ae26:	4a13      	ldr	r2, [pc, #76]	@ (800ae74 <dma_setup_prepare+0x68>)
 800ae28:	011b      	lsls	r3, r3, #4
 800ae2a:	4413      	add	r3, r2
 800ae2c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800ae2e:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae34:	4a10      	ldr	r2, [pc, #64]	@ (800ae78 <dma_setup_prepare+0x6c>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d904      	bls.n	800ae44 <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	db10      	blt.n	800ae66 <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	4a0d      	ldr	r2, [pc, #52]	@ (800ae7c <dma_setup_prepare+0x70>)
 800ae48:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 800ae4c:	4a0c      	ldr	r2, [pc, #48]	@ (800ae80 <dma_setup_prepare+0x74>)
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800ae5a:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 800ae64:	e000      	b.n	800ae68 <dma_setup_prepare+0x5c>
      return;
 800ae66:	bf00      	nop
}
 800ae68:	3714      	adds	r7, #20
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	0800fa18 	.word	0x0800fa18
 800ae78:	4f543009 	.word	0x4f543009
 800ae7c:	20080008 	.word	0x20080008
 800ae80:	200018ec 	.word	0x200018ec

0800ae84 <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 800ae84:	b480      	push	{r7}
 800ae86:	b091      	sub	sp, #68	@ 0x44
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	71fb      	strb	r3, [r7, #7]
 800ae8e:	460b      	mov	r3, r1
 800ae90:	71bb      	strb	r3, [r7, #6]
 800ae92:	4613      	mov	r3, r2
 800ae94:	80bb      	strh	r3, [r7, #4]
 800ae96:	79fb      	ldrb	r3, [r7, #7]
 800ae98:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ae9a:	7e7b      	ldrb	r3, [r7, #25]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d001      	beq.n	800aea4 <dfifo_alloc+0x20>
    rhport = 0;
 800aea0:	2300      	movs	r3, #0
 800aea2:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800aea4:	7e7b      	ldrb	r3, [r7, #25]
 800aea6:	4a65      	ldr	r2, [pc, #404]	@ (800b03c <dfifo_alloc+0x1b8>)
 800aea8:	011b      	lsls	r3, r3, #4
 800aeaa:	4413      	add	r3, r2
 800aeac:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800aeae:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 800aeb0:	79fb      	ldrb	r3, [r7, #7]
 800aeb2:	011b      	lsls	r3, r3, #4
 800aeb4:	4a61      	ldr	r2, [pc, #388]	@ (800b03c <dfifo_alloc+0x1b8>)
 800aeb6:	4413      	add	r3, r2
 800aeb8:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 800aeba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aebc:	7a1b      	ldrb	r3, [r3, #8]
 800aebe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800aec2:	79bb      	ldrb	r3, [r7, #6]
 800aec4:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800aec6:	7ebb      	ldrb	r3, [r7, #26]
 800aec8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aecc:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 800aece:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800aed2:	79bb      	ldrb	r3, [r7, #6]
 800aed4:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800aed6:	7efb      	ldrb	r3, [r7, #27]
 800aed8:	09db      	lsrs	r3, r3, #7
 800aeda:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 800aedc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 800aee0:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800aee4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d30a      	bcc.n	800af02 <dfifo_alloc+0x7e>
 800aeec:	4b54      	ldr	r3, [pc, #336]	@ (800b040 <dfifo_alloc+0x1bc>)
 800aeee:	61fb      	str	r3, [r7, #28]
 800aef0:	69fb      	ldr	r3, [r7, #28]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f003 0301 	and.w	r3, r3, #1
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d000      	beq.n	800aefe <dfifo_alloc+0x7a>
 800aefc:	be00      	bkpt	0x0000
 800aefe:	2300      	movs	r3, #0
 800af00:	e095      	b.n	800b02e <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 800af02:	88bb      	ldrh	r3, [r7, #4]
 800af04:	617b      	str	r3, [r7, #20]
 800af06:	2304      	movs	r3, #4
 800af08:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800af0a:	697a      	ldr	r2, [r7, #20]
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	4413      	add	r3, r2
 800af10:	1e5a      	subs	r2, r3, #1
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	fbb2 f3f3 	udiv	r3, r2, r3
 800af18:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 800af1a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d12a      	bne.n	800af78 <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 800af22:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	b29b      	uxth	r3, r3
 800af28:	81fb      	strh	r3, [r7, #14]
 800af2a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800af2e:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 800af30:	89fb      	ldrh	r3, [r7, #14]
 800af32:	089b      	lsrs	r3, r3, #2
 800af34:	b29b      	uxth	r3, r3
 800af36:	f103 0208 	add.w	r2, r3, #8
 800af3a:	7b7b      	ldrb	r3, [r7, #13]
 800af3c:	4413      	add	r3, r2
 800af3e:	b29b      	uxth	r3, r3
 800af40:	005b      	lsls	r3, r3, #1
 800af42:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 800af44:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 800af46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d26d      	bcs.n	800b02c <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 800af50:	4b3c      	ldr	r3, [pc, #240]	@ (800b044 <dfifo_alloc+0x1c0>)
 800af52:	889b      	ldrh	r3, [r3, #4]
 800af54:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800af56:	429a      	cmp	r2, r3
 800af58:	d90a      	bls.n	800af70 <dfifo_alloc+0xec>
 800af5a:	4b39      	ldr	r3, [pc, #228]	@ (800b040 <dfifo_alloc+0x1bc>)
 800af5c:	623b      	str	r3, [r7, #32]
 800af5e:	6a3b      	ldr	r3, [r7, #32]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f003 0301 	and.w	r3, r3, #1
 800af66:	2b00      	cmp	r3, #0
 800af68:	d000      	beq.n	800af6c <dfifo_alloc+0xe8>
 800af6a:	be00      	bkpt	0x0000
 800af6c:	2300      	movs	r3, #0
 800af6e:	e05e      	b.n	800b02e <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 800af70:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800af72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af74:	625a      	str	r2, [r3, #36]	@ 0x24
 800af76:	e059      	b.n	800b02c <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 800af78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af7a:	7a5b      	ldrb	r3, [r3, #9]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d016      	beq.n	800afae <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 800af80:	4b30      	ldr	r3, [pc, #192]	@ (800b044 <dfifo_alloc+0x1c0>)
 800af82:	799a      	ldrb	r2, [r3, #6]
 800af84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af86:	7a5b      	ldrb	r3, [r3, #9]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d30a      	bcc.n	800afa2 <dfifo_alloc+0x11e>
 800af8c:	4b2c      	ldr	r3, [pc, #176]	@ (800b040 <dfifo_alloc+0x1bc>)
 800af8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f003 0301 	and.w	r3, r3, #1
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d000      	beq.n	800af9e <dfifo_alloc+0x11a>
 800af9c:	be00      	bkpt	0x0000
 800af9e:	2300      	movs	r3, #0
 800afa0:	e045      	b.n	800b02e <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 800afa2:	4b28      	ldr	r3, [pc, #160]	@ (800b044 <dfifo_alloc+0x1c0>)
 800afa4:	799b      	ldrb	r3, [r3, #6]
 800afa6:	3301      	adds	r3, #1
 800afa8:	b2da      	uxtb	r2, r3
 800afaa:	4b26      	ldr	r3, [pc, #152]	@ (800b044 <dfifo_alloc+0x1c0>)
 800afac:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 800afae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d102      	bne.n	800afc0 <dfifo_alloc+0x13c>
      fifo_size *= 2;
 800afba:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800afbc:	005b      	lsls	r3, r3, #1
 800afbe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 800afc0:	4b20      	ldr	r3, [pc, #128]	@ (800b044 <dfifo_alloc+0x1c0>)
 800afc2:	889b      	ldrh	r3, [r3, #4]
 800afc4:	4619      	mov	r1, r3
 800afc6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800afc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afcc:	4413      	add	r3, r2
 800afce:	4299      	cmp	r1, r3
 800afd0:	d20a      	bcs.n	800afe8 <dfifo_alloc+0x164>
 800afd2:	4b1b      	ldr	r3, [pc, #108]	@ (800b040 <dfifo_alloc+0x1bc>)
 800afd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800afd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 0301 	and.w	r3, r3, #1
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d000      	beq.n	800afe4 <dfifo_alloc+0x160>
 800afe2:	be00      	bkpt	0x0000
 800afe4:	2300      	movs	r3, #0
 800afe6:	e022      	b.n	800b02e <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 800afe8:	4b16      	ldr	r3, [pc, #88]	@ (800b044 <dfifo_alloc+0x1c0>)
 800afea:	889a      	ldrh	r2, [r3, #4]
 800afec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	b29a      	uxth	r2, r3
 800aff2:	4b14      	ldr	r3, [pc, #80]	@ (800b044 <dfifo_alloc+0x1c0>)
 800aff4:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 800aff6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800affa:	2b00      	cmp	r3, #0
 800affc:	d108      	bne.n	800b010 <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 800affe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b000:	041b      	lsls	r3, r3, #16
 800b002:	4a10      	ldr	r2, [pc, #64]	@ (800b044 <dfifo_alloc+0x1c0>)
 800b004:	8892      	ldrh	r2, [r2, #4]
 800b006:	4313      	orrs	r3, r2
 800b008:	461a      	mov	r2, r3
 800b00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b00c:	629a      	str	r2, [r3, #40]	@ 0x28
 800b00e:	e00d      	b.n	800b02c <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 800b010:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b012:	041b      	lsls	r3, r3, #16
 800b014:	4a0b      	ldr	r2, [pc, #44]	@ (800b044 <dfifo_alloc+0x1c0>)
 800b016:	8892      	ldrh	r2, [r2, #4]
 800b018:	431a      	orrs	r2, r3
 800b01a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800b01e:	3b01      	subs	r3, #1
 800b020:	4611      	mov	r1, r2
 800b022:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b024:	3340      	adds	r3, #64	@ 0x40
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	4413      	add	r3, r2
 800b02a:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 800b02c:	2301      	movs	r3, #1
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3744      	adds	r7, #68	@ 0x44
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	0800fa18 	.word	0x0800fa18
 800b040:	e000edf0 	.word	0xe000edf0
 800b044:	200018e4 	.word	0x200018e4

0800b048 <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 800b048:	b580      	push	{r7, lr}
 800b04a:	b088      	sub	sp, #32
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	4603      	mov	r3, r0
 800b050:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 800b052:	79fb      	ldrb	r3, [r7, #7]
 800b054:	011b      	lsls	r3, r3, #4
 800b056:	4a27      	ldr	r2, [pc, #156]	@ (800b0f4 <dfifo_device_init+0xac>)
 800b058:	4413      	add	r3, r2
 800b05a:	61fb      	str	r3, [r7, #28]
 800b05c:	79fb      	ldrb	r3, [r7, #7]
 800b05e:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b060:	7b3b      	ldrb	r3, [r7, #12]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d001      	beq.n	800b06a <dfifo_device_init+0x22>
    rhport = 0;
 800b066:	2300      	movs	r3, #0
 800b068:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b06a:	7b3b      	ldrb	r3, [r7, #12]
 800b06c:	4a21      	ldr	r2, [pc, #132]	@ (800b0f4 <dfifo_device_init+0xac>)
 800b06e:	011b      	lsls	r3, r3, #4
 800b070:	4413      	add	r3, r2
 800b072:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b074:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	7a1b      	ldrb	r3, [r3, #8]
 800b07a:	2240      	movs	r2, #64	@ 0x40
 800b07c:	81fa      	strh	r2, [r7, #14]
 800b07e:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 800b080:	89fb      	ldrh	r3, [r7, #14]
 800b082:	089b      	lsrs	r3, r3, #2
 800b084:	b29b      	uxth	r3, r3
 800b086:	f103 0208 	add.w	r2, r3, #8
 800b08a:	7b7b      	ldrb	r3, [r7, #13]
 800b08c:	4413      	add	r3, r2
 800b08e:	b29b      	uxth	r3, r3
 800b090:	005b      	lsls	r3, r3, #1
 800b092:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 800b094:	461a      	mov	r2, r3
 800b096:	69bb      	ldr	r3, [r7, #24]
 800b098:	625a      	str	r2, [r3, #36]	@ 0x24
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b0a2:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800b0a4:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 800b0a6:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 800b0a8:	69fb      	ldr	r3, [r7, #28]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	089b      	lsrs	r3, r3, #2
 800b0ae:	b29a      	uxth	r2, r3
 800b0b0:	4b11      	ldr	r3, [pc, #68]	@ (800b0f8 <dfifo_device_init+0xb0>)
 800b0b2:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 800b0b4:	7dfb      	ldrb	r3, [r7, #23]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d009      	beq.n	800b0ce <dfifo_device_init+0x86>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 800b0ba:	4b0f      	ldr	r3, [pc, #60]	@ (800b0f8 <dfifo_device_init+0xb0>)
 800b0bc:	889a      	ldrh	r2, [r3, #4]
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	7a1b      	ldrb	r3, [r3, #8]
 800b0c2:	005b      	lsls	r3, r3, #1
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	1ad3      	subs	r3, r2, r3
 800b0c8:	b29a      	uxth	r2, r3
 800b0ca:	4b0b      	ldr	r3, [pc, #44]	@ (800b0f8 <dfifo_device_init+0xb0>)
 800b0cc:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 800b0ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b0f8 <dfifo_device_init+0xb0>)
 800b0d0:	889b      	ldrh	r3, [r3, #4]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	4613      	mov	r3, r2
 800b0d6:	041b      	lsls	r3, r3, #16
 800b0d8:	441a      	add	r2, r3
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 800b0de:	79fb      	ldrb	r3, [r7, #7]
 800b0e0:	2240      	movs	r2, #64	@ 0x40
 800b0e2:	2180      	movs	r1, #128	@ 0x80
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7ff fecd 	bl	800ae84 <dfifo_alloc>
}
 800b0ea:	bf00      	nop
 800b0ec:	3720      	adds	r7, #32
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	0800fa18 	.word	0x0800fa18
 800b0f8:	200018e4 	.word	0x200018e4

0800b0fc <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 800b0fc:	b480      	push	{r7}
 800b0fe:	b08b      	sub	sp, #44	@ 0x2c
 800b100:	af00      	add	r7, sp, #0
 800b102:	4603      	mov	r3, r0
 800b104:	6039      	str	r1, [r7, #0]
 800b106:	71fb      	strb	r3, [r7, #7]
 800b108:	79fb      	ldrb	r3, [r7, #7]
 800b10a:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b10c:	7c7b      	ldrb	r3, [r7, #17]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d001      	beq.n	800b116 <edpt_activate+0x1a>
    rhport = 0;
 800b112:	2300      	movs	r3, #0
 800b114:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b116:	7c7b      	ldrb	r3, [r7, #17]
 800b118:	4a45      	ldr	r2, [pc, #276]	@ (800b230 <edpt_activate+0x134>)
 800b11a:	011b      	lsls	r3, r3, #4
 800b11c:	4413      	add	r3, r2
 800b11e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b120:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	789b      	ldrb	r3, [r3, #2]
 800b126:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800b128:	7cbb      	ldrb	r3, [r7, #18]
 800b12a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	789b      	ldrb	r3, [r3, #2]
 800b138:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800b13a:	7cfb      	ldrb	r3, [r7, #19]
 800b13c:	09db      	lsrs	r3, r3, #7
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 800b144:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800b148:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800b14c:	0052      	lsls	r2, r2, #1
 800b14e:	4413      	add	r3, r2
 800b150:	011b      	lsls	r3, r3, #4
 800b152:	4a38      	ldr	r2, [pc, #224]	@ (800b234 <edpt_activate+0x138>)
 800b154:	4413      	add	r3, r2
 800b156:	61fb      	str	r3, [r7, #28]
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	889b      	ldrh	r3, [r3, #4]
 800b160:	b29b      	uxth	r3, r3
 800b162:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b166:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 800b168:	69fb      	ldr	r3, [r7, #28]
 800b16a:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	799a      	ldrb	r2, [r3, #6]
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	731a      	strb	r2, [r3, #12]

  // Endpoint control
  dwc2_depctl_t depctl = {.value = 0};
 800b174:	2300      	movs	r3, #0
 800b176:	60fb      	str	r3, [r7, #12]
  depctl.mps = xfer->max_size;
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	895b      	ldrh	r3, [r3, #10]
 800b17c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b180:	b29a      	uxth	r2, r3
 800b182:	89bb      	ldrh	r3, [r7, #12]
 800b184:	f362 030a 	bfi	r3, r2, #0, #11
 800b188:	81bb      	strh	r3, [r7, #12]
  depctl.active = 1;
 800b18a:	7b7b      	ldrb	r3, [r7, #13]
 800b18c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b190:	737b      	strb	r3, [r7, #13]
  depctl.type = p_endpoint_desc->bmAttributes.xfer;
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	78db      	ldrb	r3, [r3, #3]
 800b196:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b19a:	b2da      	uxtb	r2, r3
 800b19c:	7bbb      	ldrb	r3, [r7, #14]
 800b19e:	f362 0383 	bfi	r3, r2, #2, #2
 800b1a2:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	78db      	ldrb	r3, [r3, #3]
 800b1a8:	f003 0303 	and.w	r3, r3, #3
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d003      	beq.n	800b1ba <edpt_activate+0xbe>
    depctl.set_data0_iso_even = 1;
 800b1b2:	7bfb      	ldrb	r3, [r7, #15]
 800b1b4:	f043 0310 	orr.w	r3, r3, #16
 800b1b8:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 800b1ba:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d108      	bne.n	800b1d4 <edpt_activate+0xd8>
    depctl.tx_fifo_num = epnum;
 800b1c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b1c6:	f003 030f 	and.w	r3, r3, #15
 800b1ca:	b2da      	uxtb	r2, r3
 800b1cc:	89fb      	ldrh	r3, [r7, #14]
 800b1ce:	f362 1389 	bfi	r3, r2, #6, #4
 800b1d2:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800b1d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	bf14      	ite	ne
 800b1dc:	2301      	movne	r3, #1
 800b1de:	2300      	moveq	r3, #0
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b1e8:	0112      	lsls	r2, r2, #4
 800b1ea:	4413      	add	r3, r2
 800b1ec:	3348      	adds	r3, #72	@ 0x48
 800b1ee:	015b      	lsls	r3, r3, #5
 800b1f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1f2:	4413      	add	r3, r2
 800b1f4:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 800b1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1fe:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 800b202:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b206:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 800b20a:	2901      	cmp	r1, #1
 800b20c:	d101      	bne.n	800b212 <edpt_activate+0x116>
 800b20e:	2100      	movs	r1, #0
 800b210:	e000      	b.n	800b214 <edpt_activate+0x118>
 800b212:	2110      	movs	r1, #16
 800b214:	440b      	add	r3, r1
 800b216:	2101      	movs	r1, #1
 800b218:	fa01 f303 	lsl.w	r3, r1, r3
 800b21c:	431a      	orrs	r2, r3
 800b21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b220:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 800b224:	bf00      	nop
 800b226:	372c      	adds	r7, #44	@ 0x2c
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	0800fa18 	.word	0x0800fa18
 800b234:	20001864 	.word	0x20001864

0800b238 <edpt_disable>:

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 800b238:	b480      	push	{r7}
 800b23a:	b089      	sub	sp, #36	@ 0x24
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	4603      	mov	r3, r0
 800b240:	71fb      	strb	r3, [r7, #7]
 800b242:	460b      	mov	r3, r1
 800b244:	71bb      	strb	r3, [r7, #6]
 800b246:	4613      	mov	r3, r2
 800b248:	717b      	strb	r3, [r7, #5]
 800b24a:	79fb      	ldrb	r3, [r7, #7]
 800b24c:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b24e:	7c7b      	ldrb	r3, [r7, #17]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d001      	beq.n	800b258 <edpt_disable+0x20>
    rhport = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b258:	7c7b      	ldrb	r3, [r7, #17]
 800b25a:	4a5b      	ldr	r2, [pc, #364]	@ (800b3c8 <edpt_disable+0x190>)
 800b25c:	011b      	lsls	r3, r3, #4
 800b25e:	4413      	add	r3, r2
 800b260:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b262:	61fb      	str	r3, [r7, #28]
 800b264:	79bb      	ldrb	r3, [r7, #6]
 800b266:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800b268:	7cbb      	ldrb	r3, [r7, #18]
 800b26a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b26e:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 800b270:	76fb      	strb	r3, [r7, #27]
 800b272:	79bb      	ldrb	r3, [r7, #6]
 800b274:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800b276:	7cfb      	ldrb	r3, [r7, #19]
 800b278:	09db      	lsrs	r3, r3, #7
 800b27a:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 800b27c:	76bb      	strb	r3, [r7, #26]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800b27e:	7ebb      	ldrb	r3, [r7, #26]
 800b280:	2b01      	cmp	r3, #1
 800b282:	bf14      	ite	ne
 800b284:	2301      	movne	r3, #1
 800b286:	2300      	moveq	r3, #0
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	461a      	mov	r2, r3
 800b28c:	7efb      	ldrb	r3, [r7, #27]
 800b28e:	0112      	lsls	r2, r2, #4
 800b290:	4413      	add	r3, r2
 800b292:	3348      	adds	r3, #72	@ 0x48
 800b294:	015b      	lsls	r3, r3, #5
 800b296:	69fa      	ldr	r2, [r7, #28]
 800b298:	4413      	add	r3, r2
 800b29a:	617b      	str	r3, [r7, #20]

  if (dir == TUSB_DIR_IN) {
 800b29c:	7ebb      	ldrb	r3, [r7, #26]
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d149      	bne.n	800b336 <edpt_disable+0xfe>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 800b2a2:	7efb      	ldrb	r3, [r7, #27]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d003      	beq.n	800b2b0 <edpt_disable+0x78>
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	db0d      	blt.n	800b2cc <edpt_disable+0x94>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	797a      	ldrb	r2, [r7, #5]
 800b2b6:	2a00      	cmp	r2, #0
 800b2b8:	d002      	beq.n	800b2c0 <edpt_disable+0x88>
 800b2ba:	f04f 6202 	mov.w	r2, #136314880	@ 0x8200000
 800b2be:	e001      	b.n	800b2c4 <edpt_disable+0x8c>
 800b2c0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b2c4:	431a      	orrs	r2, r3
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	601a      	str	r2, [r3, #0]
 800b2ca:	e022      	b.n	800b312 <edpt_disable+0xda>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      dep->diepctl |= DIEPCTL_SNAK;
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 800b2d8:	bf00      	nop
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d0f9      	beq.n	800b2da <edpt_disable+0xa2>

      // Disable the endpoint.
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	797a      	ldrb	r2, [r7, #5]
 800b2ec:	2a00      	cmp	r2, #0
 800b2ee:	d001      	beq.n	800b2f4 <edpt_disable+0xbc>
 800b2f0:	4a36      	ldr	r2, [pc, #216]	@ (800b3cc <edpt_disable+0x194>)
 800b2f2:	e001      	b.n	800b2f8 <edpt_disable+0xc0>
 800b2f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800b2f8:	431a      	orrs	r2, r3
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 800b2fe:	bf00      	nop
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	f003 0302 	and.w	r3, r3, #2
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d0f9      	beq.n	800b300 <edpt_disable+0xc8>

      dep->diepint = DIEPINT_EPDISD;
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	2202      	movs	r2, #2
 800b310:	609a      	str	r2, [r3, #8]
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	60fb      	str	r3, [r7, #12]
 800b316:	7efb      	ldrb	r3, [r7, #27]
 800b318:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800b31a:	7afb      	ldrb	r3, [r7, #11]
 800b31c:	019b      	lsls	r3, r3, #6
 800b31e:	f043 0220 	orr.w	r2, r3, #32
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800b326:	bf00      	nop
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	691b      	ldr	r3, [r3, #16]
 800b32c:	f003 0320 	and.w	r3, r3, #32
 800b330:	2b00      	cmp	r3, #0
 800b332:	d1f9      	bne.n	800b328 <edpt_disable+0xf0>
}
 800b334:	e041      	b.n	800b3ba <edpt_disable+0x182>

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dfifo_flush_tx(dwc2, epnum);
  } else {
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 800b336:	7efb      	ldrb	r3, [r7, #27]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d003      	beq.n	800b344 <edpt_disable+0x10c>
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	db0c      	blt.n	800b35e <edpt_disable+0x126>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	797a      	ldrb	r2, [r7, #5]
 800b34a:	2a00      	cmp	r2, #0
 800b34c:	d002      	beq.n	800b354 <edpt_disable+0x11c>
 800b34e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800b352:	e000      	b.n	800b356 <edpt_disable+0x11e>
 800b354:	2200      	movs	r2, #0
 800b356:	431a      	orrs	r2, r3
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	601a      	str	r2, [r3, #0]
 800b35c:	e02d      	b.n	800b3ba <edpt_disable+0x182>
    } else {
      // Asserting GONAK is required to STALL an OUT endpoint.
      // Simpler to use polling here, we don't use the "B"OUTNAKEFF interrupt
      // anyway, and it can't be cleared by user code. If this while loop never
      // finishes, we have bigger problems than just the stack.
      dwc2->dctl |= DCTL_SGONAK;
 800b35e:	69fb      	ldr	r3, [r7, #28]
 800b360:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b364:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 800b36e:	bf00      	nop
 800b370:	69fb      	ldr	r3, [r7, #28]
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d0f9      	beq.n	800b370 <edpt_disable+0x138>

      // Ditto here disable the endpoint.
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	797a      	ldrb	r2, [r7, #5]
 800b382:	2a00      	cmp	r2, #0
 800b384:	d001      	beq.n	800b38a <edpt_disable+0x152>
 800b386:	4a11      	ldr	r2, [pc, #68]	@ (800b3cc <edpt_disable+0x194>)
 800b388:	e001      	b.n	800b38e <edpt_disable+0x156>
 800b38a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800b38e:	431a      	orrs	r2, r3
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	601a      	str	r2, [r3, #0]
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 800b394:	bf00      	nop
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	f003 0302 	and.w	r3, r3, #2
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d0f9      	beq.n	800b396 <edpt_disable+0x15e>

      dep->doepint = DOEPINT_EPDISD;
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	2202      	movs	r2, #2
 800b3a6:	609a      	str	r2, [r3, #8]

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b3ae:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
  }
}
 800b3b8:	bf00      	nop
 800b3ba:	bf00      	nop
 800b3bc:	3724      	adds	r7, #36	@ 0x24
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr
 800b3c6:	bf00      	nop
 800b3c8:	0800fa18 	.word	0x0800fa18
 800b3cc:	40200000 	.word	0x40200000

0800b3d0 <edpt_schedule_packets>:

// Since this function returns void, it is not possible to return a boolean success message
// We must make sure that this function is not called when the EP is disabled
// Must be called from critical section
static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b090      	sub	sp, #64	@ 0x40
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	71fb      	strb	r3, [r7, #7]
 800b3da:	460b      	mov	r3, r1
 800b3dc:	71bb      	strb	r3, [r7, #6]
 800b3de:	4613      	mov	r3, r2
 800b3e0:	717b      	strb	r3, [r7, #5]
 800b3e2:	79fb      	ldrb	r3, [r7, #7]
 800b3e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b3e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d002      	beq.n	800b3f6 <edpt_schedule_packets+0x26>
    rhport = 0;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b3f6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b3fa:	4a65      	ldr	r2, [pc, #404]	@ (800b590 <edpt_schedule_packets+0x1c0>)
 800b3fc:	011b      	lsls	r3, r3, #4
 800b3fe:	4413      	add	r3, r2
 800b400:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b402:	63bb      	str	r3, [r7, #56]	@ 0x38
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 800b404:	79ba      	ldrb	r2, [r7, #6]
 800b406:	797b      	ldrb	r3, [r7, #5]
 800b408:	0052      	lsls	r2, r2, #1
 800b40a:	4413      	add	r3, r2
 800b40c:	011b      	lsls	r3, r3, #4
 800b40e:	4a61      	ldr	r2, [pc, #388]	@ (800b594 <edpt_schedule_packets+0x1c4>)
 800b410:	4413      	add	r3, r2
 800b412:	637b      	str	r3, [r7, #52]	@ 0x34
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800b414:	797b      	ldrb	r3, [r7, #5]
 800b416:	2b01      	cmp	r3, #1
 800b418:	bf14      	ite	ne
 800b41a:	2301      	movne	r3, #1
 800b41c:	2300      	moveq	r3, #0
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	461a      	mov	r2, r3
 800b422:	79bb      	ldrb	r3, [r7, #6]
 800b424:	0112      	lsls	r2, r2, #4
 800b426:	4413      	add	r3, r2
 800b428:	3348      	adds	r3, #72	@ 0x48
 800b42a:	015b      	lsls	r3, r3, #5
 800b42c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b42e:	4413      	add	r3, r2
 800b430:	633b      	str	r3, [r7, #48]	@ 0x30

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 800b432:	79bb      	ldrb	r3, [r7, #6]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d11c      	bne.n	800b472 <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 800b438:	797b      	ldrb	r3, [r7, #5]
 800b43a:	4a57      	ldr	r2, [pc, #348]	@ (800b598 <edpt_schedule_packets+0x1c8>)
 800b43c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800b440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b442:	895b      	ldrh	r3, [r3, #10]
 800b444:	853a      	strh	r2, [r7, #40]	@ 0x28
 800b446:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800b448:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b44a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b44c:	4293      	cmp	r3, r2
 800b44e:	bf28      	it	cs
 800b450:	4613      	movcs	r3, r2
 800b452:	b29b      	uxth	r3, r3
 800b454:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    _dcd_data.ep0_pending[dir] -= total_bytes;
 800b456:	797b      	ldrb	r3, [r7, #5]
 800b458:	4a4f      	ldr	r2, [pc, #316]	@ (800b598 <edpt_schedule_packets+0x1c8>)
 800b45a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800b45e:	797b      	ldrb	r3, [r7, #5]
 800b460:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800b462:	1a8a      	subs	r2, r1, r2
 800b464:	b291      	uxth	r1, r2
 800b466:	4a4c      	ldr	r2, [pc, #304]	@ (800b598 <edpt_schedule_packets+0x1c8>)
 800b468:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 800b46c:	2301      	movs	r3, #1
 800b46e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b470:	e014      	b.n	800b49c <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 800b472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b474:	891b      	ldrh	r3, [r3, #8]
 800b476:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 800b478:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b47a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b47c:	8952      	ldrh	r2, [r2, #10]
 800b47e:	623b      	str	r3, [r7, #32]
 800b480:	61fa      	str	r2, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800b482:	6a3a      	ldr	r2, [r7, #32]
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	4413      	add	r3, r2
 800b488:	1e5a      	subs	r2, r3, #1
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b490:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if (num_packets == 0) {
 800b492:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b494:	2b00      	cmp	r3, #0
 800b496:	d101      	bne.n	800b49c <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 800b498:	2301      	movs	r3, #1
 800b49a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }
  }

  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  dwc2_ep_tsize_t deptsiz = {.value = 0};
 800b49c:	2300      	movs	r3, #0
 800b49e:	617b      	str	r3, [r7, #20]
  deptsiz.xfer_size = total_bytes;
 800b4a0:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800b4a2:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	f362 0312 	bfi	r3, r2, #0, #19
 800b4ac:	617b      	str	r3, [r7, #20]
  deptsiz.packet_count = num_packets;
 800b4ae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b4b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	8afb      	ldrh	r3, [r7, #22]
 800b4b8:	f362 03cc 	bfi	r3, r2, #3, #10
 800b4bc:	82fb      	strh	r3, [r7, #22]
  dep->tsiz = deptsiz.value;
 800b4be:	697a      	ldr	r2, [r7, #20]
 800b4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c2:	611a      	str	r2, [r3, #16]

  // control
  dwc2_depctl_t depctl = {.value = dep->ctl};
 800b4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	613b      	str	r3, [r7, #16]
  depctl.clear_nak = 1;
 800b4ca:	7cfb      	ldrb	r3, [r7, #19]
 800b4cc:	f043 0304 	orr.w	r3, r3, #4
 800b4d0:	74fb      	strb	r3, [r7, #19]
  depctl.enable = 1;
 800b4d2:	7cfb      	ldrb	r3, [r7, #19]
 800b4d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4d8:	74fb      	strb	r3, [r7, #19]
  if (depctl.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 800b4da:	7cbb      	ldrb	r3, [r7, #18]
 800b4dc:	f003 030c 	and.w	r3, r3, #12
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	2b04      	cmp	r3, #4
 800b4e4:	d11a      	bne.n	800b51c <edpt_schedule_packets+0x14c>
 800b4e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4e8:	7b1b      	ldrb	r3, [r3, #12]
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d116      	bne.n	800b51c <edpt_schedule_packets+0x14c>
    const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 800b4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800b4f4:	60bb      	str	r3, [r7, #8]
    const uint32_t odd_now = dsts.frame_number & 1u;
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	f003 0301 	and.w	r3, r3, #1
 800b502:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (odd_now) {
 800b504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b506:	2b00      	cmp	r3, #0
 800b508:	d004      	beq.n	800b514 <edpt_schedule_packets+0x144>
      depctl.set_data0_iso_even = 1;
 800b50a:	7cfb      	ldrb	r3, [r7, #19]
 800b50c:	f043 0310 	orr.w	r3, r3, #16
 800b510:	74fb      	strb	r3, [r7, #19]
 800b512:	e003      	b.n	800b51c <edpt_schedule_packets+0x14c>
    } else {
      depctl.set_data1_iso_odd = 1;
 800b514:	7cfb      	ldrb	r3, [r7, #19]
 800b516:	f043 0320 	orr.w	r3, r3, #32
 800b51a:	74fb      	strb	r3, [r7, #19]
 800b51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b51e:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b524:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800b526:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 800b528:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if(is_dma) {
 800b52c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b530:	2b00      	cmp	r3, #0
 800b532:	d015      	beq.n	800b560 <edpt_schedule_packets+0x190>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 800b534:	797b      	ldrb	r3, [r7, #5]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d109      	bne.n	800b54e <edpt_schedule_packets+0x17e>
 800b53a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d006      	beq.n	800b54e <edpt_schedule_packets+0x17e>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 800b540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800b546:	4611      	mov	r1, r2
 800b548:	4618      	mov	r0, r3
 800b54a:	f7fd fd5c 	bl	8009006 <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 800b54e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	461a      	mov	r2, r3
 800b554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b556:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 800b558:	693a      	ldr	r2, [r7, #16]
 800b55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55c:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 800b55e:	e013      	b.n	800b588 <edpt_schedule_packets+0x1b8>
    dep->diepctl = depctl.value; // enable endpoint
 800b560:	693a      	ldr	r2, [r7, #16]
 800b562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b564:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 800b566:	797b      	ldrb	r3, [r7, #5]
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d10d      	bne.n	800b588 <edpt_schedule_packets+0x1b8>
 800b56c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d00a      	beq.n	800b588 <edpt_schedule_packets+0x1b8>
      dwc2->diepempmsk |= (1 << epnum);
 800b572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b574:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800b578:	79ba      	ldrb	r2, [r7, #6]
 800b57a:	2101      	movs	r1, #1
 800b57c:	fa01 f202 	lsl.w	r2, r1, r2
 800b580:	431a      	orrs	r2, r3
 800b582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b584:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 800b588:	bf00      	nop
 800b58a:	3740      	adds	r7, #64	@ 0x40
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	0800fa18 	.word	0x0800fa18
 800b594:	20001864 	.word	0x20001864
 800b598:	200018e4 	.word	0x200018e4

0800b59c <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b08c      	sub	sp, #48	@ 0x30
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	6039      	str	r1, [r7, #0]
 800b5a6:	71fb      	strb	r3, [r7, #7]
 800b5a8:	79fb      	ldrb	r3, [r7, #7]
 800b5aa:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b5ac:	7dfb      	ldrb	r3, [r7, #23]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d001      	beq.n	800b5b6 <dcd_init+0x1a>
    rhport = 0;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b5b6:	7dfb      	ldrb	r3, [r7, #23]
 800b5b8:	4a43      	ldr	r2, [pc, #268]	@ (800b6c8 <dcd_init+0x12c>)
 800b5ba:	011b      	lsls	r3, r3, #4
 800b5bc:	4413      	add	r3, r2
 800b5be:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b5c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 800b5c2:	2208      	movs	r2, #8
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	4841      	ldr	r0, [pc, #260]	@ (800b6cc <dcd_init+0x130>)
 800b5c8:	f001 fe5a 	bl	800d280 <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 800b5cc:	2101      	movs	r1, #1
 800b5ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5d0:	f001 f9c6 	bl	800c960 <dwc2_core_is_highspeed>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5dc:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b5de:	69bb      	ldr	r3, [r7, #24]
 800b5e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b5e2:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800b5e4:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800b5e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 800b5ea:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b5ee:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800b5f2:	79fb      	ldrb	r3, [r7, #7]
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f001 f9d1 	bl	800c99c <dwc2_core_init>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	f083 0301 	eor.w	r3, r3, #1
 800b600:	b2db      	uxtb	r3, r3
 800b602:	2b00      	cmp	r3, #0
 800b604:	d00a      	beq.n	800b61c <dcd_init+0x80>
 800b606:	4b32      	ldr	r3, [pc, #200]	@ (800b6d0 <dcd_init+0x134>)
 800b608:	61fb      	str	r3, [r7, #28]
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f003 0301 	and.w	r3, r3, #1
 800b612:	2b00      	cmp	r3, #0
 800b614:	d000      	beq.n	800b618 <dcd_init+0x7c>
 800b616:	be00      	bkpt	0x0000
 800b618:	2300      	movs	r3, #0
 800b61a:	e050      	b.n	800b6be <dcd_init+0x122>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 800b61c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b61e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b622:	f023 0303 	bic.w	r3, r3, #3
 800b626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (is_highspeed) {
 800b628:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00d      	beq.n	800b64c <dcd_init+0xb0>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b634:	60fb      	str	r3, [r7, #12]
    if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800b636:	7b3b      	ldrb	r3, [r7, #12]
 800b638:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	2b80      	cmp	r3, #128	@ 0x80
 800b640:	d108      	bne.n	800b654 <dcd_init+0xb8>
      dcfg |= DCFG_XCVRDLY;
 800b642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b64a:	e003      	b.n	800b654 <dcd_init+0xb8>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 800b64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b64e:	f043 0303 	orr.w	r3, r3, #3
 800b652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 800b654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b656:	f043 0304 	orr.w	r3, r3, #4
 800b65a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2->dcfg = dcfg;
 800b65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b65e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b660:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 800b664:	79fb      	ldrb	r3, [r7, #7]
 800b666:	4618      	mov	r0, r3
 800b668:	f000 f92a 	bl	800b8c0 <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 800b66c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b66e:	68db      	ldr	r3, [r3, #12]
 800b670:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b674:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b67a:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 800b67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 800b684:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 800b688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b68a:	601a      	str	r2, [r3, #0]
  // No hardware detection of Vbus B-session is available on the STM32N6
  dwc2->stm32_gccfg |= STM32_GCCFG_VBVALOVAL;
#endif

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 800b68c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b68e:	699a      	ldr	r2, [r3, #24]
 800b690:	4b10      	ldr	r3, [pc, #64]	@ (800b6d4 <dcd_init+0x138>)
 800b692:	4313      	orrs	r3, r2
 800b694:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b696:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 800b698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 800b69e:	6a3b      	ldr	r3, [r7, #32]
 800b6a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6a4:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 800b6a6:	6a3b      	ldr	r3, [r7, #32]
 800b6a8:	f043 0301 	orr.w	r3, r3, #1
 800b6ac:	623b      	str	r3, [r7, #32]
  dwc2->gahbcfg = gahbcfg;
 800b6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b0:	6a3a      	ldr	r2, [r7, #32]
 800b6b2:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 800b6b4:	79fb      	ldrb	r3, [r7, #7]
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f000 f8e0 	bl	800b87c <dcd_connect>
  return true;
 800b6bc:	2301      	movs	r3, #1
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3730      	adds	r7, #48	@ 0x30
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	0800fa18 	.word	0x0800fa18
 800b6cc:	200018e4 	.word	0x200018e4
 800b6d0:	e000edf0 	.word	0xe000edf0
 800b6d4:	80003804 	.word	0x80003804

0800b6d8 <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	4603      	mov	r3, r0
 800b6e0:	71fb      	strb	r3, [r7, #7]
 800b6e2:	79fb      	ldrb	r3, [r7, #7]
 800b6e4:	73fb      	strb	r3, [r7, #15]
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	73bb      	strb	r3, [r7, #14]
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800b6ee:	7bfb      	ldrb	r3, [r7, #15]
 800b6f0:	4a0c      	ldr	r2, [pc, #48]	@ (800b724 <dcd_int_enable+0x4c>)
 800b6f2:	011b      	lsls	r3, r3, #4
 800b6f4:	4413      	add	r3, r2
 800b6f6:	3304      	adds	r3, #4
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800b6fc:	7b7b      	ldrb	r3, [r7, #13]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d005      	beq.n	800b70e <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 800b702:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b706:	4618      	mov	r0, r3
 800b708:	f7ff fb3e 	bl	800ad88 <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 800b70c:	e004      	b.n	800b718 <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 800b70e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b712:	4618      	mov	r0, r3
 800b714:	f7ff fb56 	bl	800adc4 <__NVIC_DisableIRQ>
}
 800b718:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 800b71a:	bf00      	nop
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	0800fa18 	.word	0x0800fa18

0800b728 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	4603      	mov	r3, r0
 800b730:	71fb      	strb	r3, [r7, #7]
 800b732:	79fb      	ldrb	r3, [r7, #7]
 800b734:	73fb      	strb	r3, [r7, #15]
 800b736:	2301      	movs	r3, #1
 800b738:	73bb      	strb	r3, [r7, #14]
 800b73a:	2300      	movs	r3, #0
 800b73c:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800b73e:	7bfb      	ldrb	r3, [r7, #15]
 800b740:	4a0c      	ldr	r2, [pc, #48]	@ (800b774 <dcd_int_disable+0x4c>)
 800b742:	011b      	lsls	r3, r3, #4
 800b744:	4413      	add	r3, r2
 800b746:	3304      	adds	r3, #4
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800b74c:	7b7b      	ldrb	r3, [r7, #13]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d005      	beq.n	800b75e <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 800b752:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b756:	4618      	mov	r0, r3
 800b758:	f7ff fb16 	bl	800ad88 <__NVIC_EnableIRQ>
}
 800b75c:	e004      	b.n	800b768 <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 800b75e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b762:	4618      	mov	r0, r3
 800b764:	f7ff fb2e 	bl	800adc4 <__NVIC_DisableIRQ>
}
 800b768:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 800b76a:	bf00      	nop
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	0800fa18 	.word	0x0800fa18

0800b778 <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	4603      	mov	r3, r0
 800b780:	460a      	mov	r2, r1
 800b782:	71fb      	strb	r3, [r7, #7]
 800b784:	4613      	mov	r3, r2
 800b786:	71bb      	strb	r3, [r7, #6]
 800b788:	79fb      	ldrb	r3, [r7, #7]
 800b78a:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b78c:	7a7b      	ldrb	r3, [r7, #9]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d001      	beq.n	800b796 <dcd_set_address+0x1e>
    rhport = 0;
 800b792:	2300      	movs	r3, #0
 800b794:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b796:	7a7b      	ldrb	r3, [r7, #9]
 800b798:	4a14      	ldr	r2, [pc, #80]	@ (800b7ec <dcd_set_address+0x74>)
 800b79a:	011b      	lsls	r3, r3, #4
 800b79c:	4413      	add	r3, r2
 800b79e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b7a0:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b7a8:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 800b7ac:	79bb      	ldrb	r3, [r7, #6]
 800b7ae:	011b      	lsls	r3, r3, #4
 800b7b0:	431a      	orrs	r2, r3
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	72fb      	strb	r3, [r7, #11]
 800b7bc:	2301      	movs	r3, #1
 800b7be:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 800b7c0:	7abb      	ldrb	r3, [r7, #10]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d002      	beq.n	800b7cc <dcd_set_address+0x54>
 800b7c6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800b7ca:	e000      	b.n	800b7ce <dcd_set_address+0x56>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	b25b      	sxtb	r3, r3
 800b7d6:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 800b7d8:	79f8      	ldrb	r0, [r7, #7]
 800b7da:	2300      	movs	r3, #0
 800b7dc:	2200      	movs	r2, #0
 800b7de:	f000 f98b 	bl	800baf8 <dcd_edpt_xfer>
}
 800b7e2:	bf00      	nop
 800b7e4:	3710      	adds	r7, #16
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	0800fa18 	.word	0x0800fa18

0800b7f0 <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 800b7f0:	b480      	push	{r7}
 800b7f2:	b087      	sub	sp, #28
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	71fb      	strb	r3, [r7, #7]
 800b7fa:	79fb      	ldrb	r3, [r7, #7]
 800b7fc:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b7fe:	7bfb      	ldrb	r3, [r7, #15]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d001      	beq.n	800b808 <dcd_remote_wakeup+0x18>
    rhport = 0;
 800b804:	2300      	movs	r3, #0
 800b806:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b808:	7bfb      	ldrb	r3, [r7, #15]
 800b80a:	4a19      	ldr	r2, [pc, #100]	@ (800b870 <dcd_remote_wakeup+0x80>)
 800b80c:	011b      	lsls	r3, r3, #4
 800b80e:	4413      	add	r3, r2
 800b810:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b812:	617b      	str	r3, [r7, #20]

  // set remote wakeup
  dwc2->dctl |= DCTL_RWUSIG;
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b81a:	f043 0201 	orr.w	r2, r3, #1
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  // enable SOF to detect bus resume
  dwc2->gintsts = GINTSTS_SOF;
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	2208      	movs	r2, #8
 800b828:	615a      	str	r2, [r3, #20]
  dwc2->gintmsk |= GINTMSK_SOFM;
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	699b      	ldr	r3, [r3, #24]
 800b82e:	f043 0208 	orr.w	r2, r3, #8
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	619a      	str	r2, [r3, #24]
#define dwc2_dcd_int_disable(_rhport) dwc2_int_set(_rhport, TUSB_ROLE_DEVICE, false)


TU_ATTR_ALWAYS_INLINE static inline void dwc2_remote_wakeup_delay(void) {
  // try to delay for 1 ms
  uint32_t count = SystemCoreClock / 1000;
 800b836:	4b0f      	ldr	r3, [pc, #60]	@ (800b874 <dcd_remote_wakeup+0x84>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a0f      	ldr	r2, [pc, #60]	@ (800b878 <dcd_remote_wakeup+0x88>)
 800b83c:	fba2 2303 	umull	r2, r3, r2, r3
 800b840:	099b      	lsrs	r3, r3, #6
 800b842:	613b      	str	r3, [r7, #16]
  while (count--) __NOP();
 800b844:	e000      	b.n	800b848 <dcd_remote_wakeup+0x58>
 800b846:	bf00      	nop
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	1e5a      	subs	r2, r3, #1
 800b84c:	613a      	str	r2, [r7, #16]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d1f9      	bne.n	800b846 <dcd_remote_wakeup+0x56>
}
 800b852:	bf00      	nop

  // Per specs: remote wakeup signal bit must be clear within 1-15ms
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b85a:	f023 0201 	bic.w	r2, r3, #1
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800b864:	bf00      	nop
 800b866:	371c      	adds	r7, #28
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr
 800b870:	0800fa18 	.word	0x0800fa18
 800b874:	20000208 	.word	0x20000208
 800b878:	10624dd3 	.word	0x10624dd3

0800b87c <dcd_connect>:

void dcd_connect(uint8_t rhport) {
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
 800b882:	4603      	mov	r3, r0
 800b884:	71fb      	strb	r3, [r7, #7]
 800b886:	79fb      	ldrb	r3, [r7, #7]
 800b888:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b88a:	7afb      	ldrb	r3, [r7, #11]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d001      	beq.n	800b894 <dcd_connect+0x18>
    rhport = 0;
 800b890:	2300      	movs	r3, #0
 800b892:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b894:	7afb      	ldrb	r3, [r7, #11]
 800b896:	4a09      	ldr	r2, [pc, #36]	@ (800b8bc <dcd_connect+0x40>)
 800b898:	011b      	lsls	r3, r3, #4
 800b89a:	4413      	add	r3, r2
 800b89c:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b89e:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b8a6:	f023 0202 	bic.w	r2, r3, #2
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800b8b0:	bf00      	nop
 800b8b2:	3714      	adds	r7, #20
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr
 800b8bc:	0800fa18 	.word	0x0800fa18

0800b8c0 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	71fb      	strb	r3, [r7, #7]
 800b8ca:	79fb      	ldrb	r3, [r7, #7]
 800b8cc:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b8ce:	7afb      	ldrb	r3, [r7, #11]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d001      	beq.n	800b8d8 <dcd_disconnect+0x18>
    rhport = 0;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b8d8:	7afb      	ldrb	r3, [r7, #11]
 800b8da:	4a09      	ldr	r2, [pc, #36]	@ (800b900 <dcd_disconnect+0x40>)
 800b8dc:	011b      	lsls	r3, r3, #4
 800b8de:	4413      	add	r3, r2
 800b8e0:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b8e2:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b8ea:	f043 0202 	orr.w	r2, r3, #2
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800b8f4:	bf00      	nop
 800b8f6:	3714      	adds	r7, #20
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr
 800b900:	0800fa18 	.word	0x0800fa18

0800b904 <dcd_sof_enable>:

// Be advised: audio, video and possibly other iso-ep classes use dcd_sof_enable() to enable/disable its corresponding ISR on purpose!
void dcd_sof_enable(uint8_t rhport, bool en) {
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	4603      	mov	r3, r0
 800b90c:	460a      	mov	r2, r1
 800b90e:	71fb      	strb	r3, [r7, #7]
 800b910:	4613      	mov	r3, r2
 800b912:	71bb      	strb	r3, [r7, #6]
 800b914:	79fb      	ldrb	r3, [r7, #7]
 800b916:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b918:	7afb      	ldrb	r3, [r7, #11]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d001      	beq.n	800b922 <dcd_sof_enable+0x1e>
    rhport = 0;
 800b91e:	2300      	movs	r3, #0
 800b920:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b922:	7afb      	ldrb	r3, [r7, #11]
 800b924:	4a10      	ldr	r2, [pc, #64]	@ (800b968 <dcd_sof_enable+0x64>)
 800b926:	011b      	lsls	r3, r3, #4
 800b928:	4413      	add	r3, r2
 800b92a:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b92c:	60fb      	str	r3, [r7, #12]

  _dcd_data.sof_en = en;
 800b92e:	4a0f      	ldr	r2, [pc, #60]	@ (800b96c <dcd_sof_enable+0x68>)
 800b930:	79bb      	ldrb	r3, [r7, #6]
 800b932:	71d3      	strb	r3, [r2, #7]

  if (en) {
 800b934:	79bb      	ldrb	r3, [r7, #6]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d009      	beq.n	800b94e <dcd_sof_enable+0x4a>
    dwc2->gintsts = GINTSTS_SOF;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2208      	movs	r2, #8
 800b93e:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	699b      	ldr	r3, [r3, #24]
 800b944:	f043 0208 	orr.w	r2, r3, #8
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	619a      	str	r2, [r3, #24]
  } else {
    dwc2->gintmsk &= ~GINTMSK_SOFM;
  }
}
 800b94c:	e005      	b.n	800b95a <dcd_sof_enable+0x56>
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	699b      	ldr	r3, [r3, #24]
 800b952:	f023 0208 	bic.w	r2, r3, #8
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	619a      	str	r2, [r3, #24]
}
 800b95a:	bf00      	nop
 800b95c:	3714      	adds	r7, #20
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	0800fa18 	.word	0x0800fa18
 800b96c:	200018e4 	.word	0x200018e4

0800b970 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	4603      	mov	r3, r0
 800b978:	6039      	str	r1, [r7, #0]
 800b97a:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	7899      	ldrb	r1, [r3, #2]
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	889b      	ldrh	r3, [r3, #4]
 800b988:	b29b      	uxth	r3, r3
 800b98a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b98e:	b29a      	uxth	r2, r3
 800b990:	79fb      	ldrb	r3, [r7, #7]
 800b992:	4618      	mov	r0, r3
 800b994:	f7ff fa76 	bl	800ae84 <dfifo_alloc>
 800b998:	4603      	mov	r3, r0
 800b99a:	f083 0301 	eor.w	r3, r3, #1
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00a      	beq.n	800b9ba <dcd_edpt_open+0x4a>
 800b9a4:	4b0a      	ldr	r3, [pc, #40]	@ (800b9d0 <dcd_edpt_open+0x60>)
 800b9a6:	60fb      	str	r3, [r7, #12]
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f003 0301 	and.w	r3, r3, #1
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d000      	beq.n	800b9b6 <dcd_edpt_open+0x46>
 800b9b4:	be00      	bkpt	0x0000
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	e005      	b.n	800b9c6 <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 800b9ba:	79fb      	ldrb	r3, [r7, #7]
 800b9bc:	6839      	ldr	r1, [r7, #0]
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7ff fb9c 	bl	800b0fc <edpt_activate>
  return true;
 800b9c4:	2301      	movs	r3, #1
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	e000edf0 	.word	0xe000edf0

0800b9d4 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b08a      	sub	sp, #40	@ 0x28
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	4603      	mov	r3, r0
 800b9dc:	71fb      	strb	r3, [r7, #7]
 800b9de:	79fb      	ldrb	r3, [r7, #7]
 800b9e0:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b9e2:	7dfb      	ldrb	r3, [r7, #23]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d001      	beq.n	800b9ec <dcd_edpt_close_all+0x18>
    rhport = 0;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b9ec:	7dfb      	ldrb	r3, [r7, #23]
 800b9ee:	4a3f      	ldr	r2, [pc, #252]	@ (800baec <dcd_edpt_close_all+0x118>)
 800b9f0:	011b      	lsls	r3, r3, #4
 800b9f2:	4413      	add	r3, r2
 800b9f4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b9f6:	623b      	str	r3, [r7, #32]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800b9f8:	79fb      	ldrb	r3, [r7, #7]
 800b9fa:	4a3c      	ldr	r2, [pc, #240]	@ (800baec <dcd_edpt_close_all+0x118>)
 800b9fc:	011b      	lsls	r3, r3, #4
 800b9fe:	4413      	add	r3, r2
 800ba00:	3308      	adds	r3, #8
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	77fb      	strb	r3, [r7, #31]

  usbd_spin_lock(false);
 800ba06:	2000      	movs	r0, #0
 800ba08:	f7fe fd4a 	bl	800a4a0 <usbd_spin_lock>

  _dcd_data.allocated_epin_count = 0;
 800ba0c:	4b38      	ldr	r3, [pc, #224]	@ (800baf0 <dcd_edpt_close_all+0x11c>)
 800ba0e:	2200      	movs	r2, #0
 800ba10:	719a      	strb	r2, [r3, #6]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 800ba12:	6a3b      	ldr	r3, [r7, #32]
 800ba14:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800ba18:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ba22:	e034      	b.n	800ba8e <dcd_edpt_close_all+0xba>
    for (uint8_t d = 0; d < 2; d++) {
 800ba24:	2300      	movs	r3, #0
 800ba26:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ba2a:	e027      	b.n	800ba7c <dcd_edpt_close_all+0xa8>
      dwc2_dep_t* dep = &dwc2->ep[d][n];
 800ba2c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ba30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba34:	0112      	lsls	r2, r2, #4
 800ba36:	4413      	add	r3, r2
 800ba38:	3348      	adds	r3, #72	@ 0x48
 800ba3a:	015b      	lsls	r3, r3, #5
 800ba3c:	6a3a      	ldr	r2, [r7, #32]
 800ba3e:	4413      	add	r3, r2
 800ba40:	61bb      	str	r3, [r7, #24]
      if (dep->ctl & EPCTL_EPENA) {
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	da05      	bge.n	800ba56 <dcd_edpt_close_all+0x82>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f043 4290 	orr.w	r2, r3, #1207959552	@ 0x48000000
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	601a      	str	r2, [r3, #0]
      }
      xfer_status[n][1-d].max_size = 0;
 800ba56:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ba5a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ba5e:	f1c3 0301 	rsb	r3, r3, #1
 800ba62:	4924      	ldr	r1, [pc, #144]	@ (800baf4 <dcd_edpt_close_all+0x120>)
 800ba64:	0052      	lsls	r2, r2, #1
 800ba66:	4413      	add	r3, r2
 800ba68:	011b      	lsls	r3, r3, #4
 800ba6a:	440b      	add	r3, r1
 800ba6c:	330a      	adds	r3, #10
 800ba6e:	2200      	movs	r2, #0
 800ba70:	801a      	strh	r2, [r3, #0]
    for (uint8_t d = 0; d < 2; d++) {
 800ba72:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ba76:	3301      	adds	r3, #1
 800ba78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ba7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d9d3      	bls.n	800ba2c <dcd_edpt_close_all+0x58>
  for (uint8_t n = 1; n < ep_count; n++) {
 800ba84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba88:	3301      	adds	r3, #1
 800ba8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ba8e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ba92:	7ffb      	ldrb	r3, [r7, #31]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d3c5      	bcc.n	800ba24 <dcd_edpt_close_all+0x50>
 800ba98:	6a3b      	ldr	r3, [r7, #32]
 800ba9a:	60fb      	str	r3, [r7, #12]
 800ba9c:	2310      	movs	r3, #16
 800ba9e:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800baa0:	7afb      	ldrb	r3, [r7, #11]
 800baa2:	019b      	lsls	r3, r3, #6
 800baa4:	f043 0220 	orr.w	r2, r3, #32
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800baac:	bf00      	nop
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	691b      	ldr	r3, [r3, #16]
 800bab2:	f003 0320 	and.w	r3, r3, #32
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d1f9      	bne.n	800baae <dcd_edpt_close_all+0xda>
}
 800baba:	bf00      	nop
 800babc:	6a3b      	ldr	r3, [r7, #32]
 800babe:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	2210      	movs	r2, #16
 800bac4:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800bac6:	bf00      	nop
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	691b      	ldr	r3, [r3, #16]
 800bacc:	f003 0310 	and.w	r3, r3, #16
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d1f9      	bne.n	800bac8 <dcd_edpt_close_all+0xf4>
}
 800bad4:	bf00      	nop
    }
  }

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport); // re-init dfifo
 800bad6:	79fb      	ldrb	r3, [r7, #7]
 800bad8:	4618      	mov	r0, r3
 800bada:	f7ff fab5 	bl	800b048 <dfifo_device_init>

  usbd_spin_unlock(false);
 800bade:	2000      	movs	r0, #0
 800bae0:	f7fe fcf8 	bl	800a4d4 <usbd_spin_unlock>
}
 800bae4:	bf00      	nop
 800bae6:	3728      	adds	r7, #40	@ 0x28
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	0800fa18 	.word	0x0800fa18
 800baf0:	200018e4 	.word	0x200018e4
 800baf4:	20001864 	.word	0x20001864

0800baf8 <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b086      	sub	sp, #24
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	603a      	str	r2, [r7, #0]
 800bb00:	461a      	mov	r2, r3
 800bb02:	4603      	mov	r3, r0
 800bb04:	71fb      	strb	r3, [r7, #7]
 800bb06:	460b      	mov	r3, r1
 800bb08:	71bb      	strb	r3, [r7, #6]
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	80bb      	strh	r3, [r7, #4]
 800bb0e:	79bb      	ldrb	r3, [r7, #6]
 800bb10:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800bb12:	7bbb      	ldrb	r3, [r7, #14]
 800bb14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb18:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800bb1a:	75bb      	strb	r3, [r7, #22]
 800bb1c:	79bb      	ldrb	r3, [r7, #6]
 800bb1e:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800bb20:	7bfb      	ldrb	r3, [r7, #15]
 800bb22:	09db      	lsrs	r3, r3, #7
 800bb24:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800bb26:	757b      	strb	r3, [r7, #21]
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 800bb28:	7dba      	ldrb	r2, [r7, #22]
 800bb2a:	7d7b      	ldrb	r3, [r7, #21]
 800bb2c:	0052      	lsls	r2, r2, #1
 800bb2e:	4413      	add	r3, r2
 800bb30:	011b      	lsls	r3, r3, #4
 800bb32:	4a17      	ldr	r2, [pc, #92]	@ (800bb90 <dcd_edpt_xfer+0x98>)
 800bb34:	4413      	add	r3, r2
 800bb36:	613b      	str	r3, [r7, #16]
  bool ret;

  usbd_spin_lock(false);
 800bb38:	2000      	movs	r0, #0
 800bb3a:	f7fe fcb1 	bl	800a4a0 <usbd_spin_lock>

  if (xfer->max_size == 0) {
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	895b      	ldrh	r3, [r3, #10]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d102      	bne.n	800bb4c <dcd_edpt_xfer+0x54>
    ret = false;  // Endpoint is closed
 800bb46:	2300      	movs	r3, #0
 800bb48:	75fb      	strb	r3, [r7, #23]
 800bb4a:	e018      	b.n	800bb7e <dcd_edpt_xfer+0x86>
  } else {
    xfer->buffer = buffer;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	683a      	ldr	r2, [r7, #0]
 800bb50:	601a      	str	r2, [r3, #0]
    xfer->ff = NULL;
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	2200      	movs	r2, #0
 800bb56:	605a      	str	r2, [r3, #4]
    xfer->total_len = total_bytes;
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	88ba      	ldrh	r2, [r7, #4]
 800bb5c:	811a      	strh	r2, [r3, #8]

    // EP0 can only handle one packet
    if (epnum == 0) {
 800bb5e:	7dbb      	ldrb	r3, [r7, #22]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d104      	bne.n	800bb6e <dcd_edpt_xfer+0x76>
      _dcd_data.ep0_pending[dir] = total_bytes;
 800bb64:	7d7b      	ldrb	r3, [r7, #21]
 800bb66:	490b      	ldr	r1, [pc, #44]	@ (800bb94 <dcd_edpt_xfer+0x9c>)
 800bb68:	88ba      	ldrh	r2, [r7, #4]
 800bb6a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir);
 800bb6e:	7d7a      	ldrb	r2, [r7, #21]
 800bb70:	7db9      	ldrb	r1, [r7, #22]
 800bb72:	79fb      	ldrb	r3, [r7, #7]
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7ff fc2b 	bl	800b3d0 <edpt_schedule_packets>
    ret = true;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	75fb      	strb	r3, [r7, #23]
  }

  usbd_spin_unlock(false);
 800bb7e:	2000      	movs	r0, #0
 800bb80:	f7fe fca8 	bl	800a4d4 <usbd_spin_unlock>

  return ret;
 800bb84:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3718      	adds	r7, #24
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	20001864 	.word	0x20001864
 800bb94:	200018e4 	.word	0x200018e4

0800bb98 <dcd_edpt_stall>:
  usbd_spin_unlock(false);

  return ret;
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b086      	sub	sp, #24
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	4603      	mov	r3, r0
 800bba0:	460a      	mov	r2, r1
 800bba2:	71fb      	strb	r3, [r7, #7]
 800bba4:	4613      	mov	r3, r2
 800bba6:	71bb      	strb	r3, [r7, #6]
 800bba8:	79fb      	ldrb	r3, [r7, #7]
 800bbaa:	74bb      	strb	r3, [r7, #18]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800bbac:	7cbb      	ldrb	r3, [r7, #18]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d001      	beq.n	800bbb6 <dcd_edpt_stall+0x1e>
    rhport = 0;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	74bb      	strb	r3, [r7, #18]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800bbb6:	7cbb      	ldrb	r3, [r7, #18]
 800bbb8:	4a11      	ldr	r2, [pc, #68]	@ (800bc00 <dcd_edpt_stall+0x68>)
 800bbba:	011b      	lsls	r3, r3, #4
 800bbbc:	4413      	add	r3, r2
 800bbbe:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800bbc0:	617b      	str	r3, [r7, #20]
  edpt_disable(rhport, ep_addr, true);
 800bbc2:	79b9      	ldrb	r1, [r7, #6]
 800bbc4:	79fb      	ldrb	r3, [r7, #7]
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7ff fb35 	bl	800b238 <edpt_disable>
 800bbce:	79bb      	ldrb	r3, [r7, #6]
 800bbd0:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800bbd2:	7cfb      	ldrb	r3, [r7, #19]
 800bbd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbd8:	b2db      	uxtb	r3, r3
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d10b      	bne.n	800bbf6 <dcd_edpt_stall+0x5e>
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	60fb      	str	r3, [r7, #12]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbe6:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800bbe8:	2300      	movs	r3, #0
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d003      	beq.n	800bbf6 <dcd_edpt_stall+0x5e>
    dma_setup_prepare(rhport);
 800bbee:	79fb      	ldrb	r3, [r7, #7]
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7ff f90b 	bl	800ae0c <dma_setup_prepare>
  }
}
 800bbf6:	bf00      	nop
 800bbf8:	3718      	adds	r7, #24
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	0800fa18 	.word	0x0800fa18

0800bc04 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800bc04:	b480      	push	{r7}
 800bc06:	b087      	sub	sp, #28
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	460a      	mov	r2, r1
 800bc0e:	71fb      	strb	r3, [r7, #7]
 800bc10:	4613      	mov	r3, r2
 800bc12:	71bb      	strb	r3, [r7, #6]
 800bc14:	79fb      	ldrb	r3, [r7, #7]
 800bc16:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800bc18:	7a7b      	ldrb	r3, [r7, #9]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d001      	beq.n	800bc22 <dcd_edpt_clear_stall+0x1e>
    rhport = 0;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800bc22:	7a7b      	ldrb	r3, [r7, #9]
 800bc24:	4a19      	ldr	r2, [pc, #100]	@ (800bc8c <dcd_edpt_clear_stall+0x88>)
 800bc26:	011b      	lsls	r3, r3, #4
 800bc28:	4413      	add	r3, r2
 800bc2a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800bc2c:	617b      	str	r3, [r7, #20]
 800bc2e:	79bb      	ldrb	r3, [r7, #6]
 800bc30:	72bb      	strb	r3, [r7, #10]
 800bc32:	7abb      	ldrb	r3, [r7, #10]
 800bc34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc38:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800bc3a:	74fb      	strb	r3, [r7, #19]
 800bc3c:	79bb      	ldrb	r3, [r7, #6]
 800bc3e:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800bc40:	7afb      	ldrb	r3, [r7, #11]
 800bc42:	09db      	lsrs	r3, r3, #7
 800bc44:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800bc46:	74bb      	strb	r3, [r7, #18]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800bc48:	7cbb      	ldrb	r3, [r7, #18]
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	bf14      	ite	ne
 800bc4e:	2301      	movne	r3, #1
 800bc50:	2300      	moveq	r3, #0
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	461a      	mov	r2, r3
 800bc56:	7cfb      	ldrb	r3, [r7, #19]
 800bc58:	0112      	lsls	r2, r2, #4
 800bc5a:	4413      	add	r3, r2
 800bc5c:	3348      	adds	r3, #72	@ 0x48
 800bc5e:	015b      	lsls	r3, r3, #5
 800bc60:	697a      	ldr	r2, [r7, #20]
 800bc62:	4413      	add	r3, r2
 800bc64:	60fb      	str	r3, [r7, #12]

  // Clear stall and reset data toggle
  dep->ctl &= ~EPCTL_STALL;;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	601a      	str	r2, [r3, #0]
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	601a      	str	r2, [r3, #0]
}
 800bc7e:	bf00      	nop
 800bc80:	371c      	adds	r7, #28
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr
 800bc8a:	bf00      	nop
 800bc8c:	0800fa18 	.word	0x0800fa18

0800bc90 <handle_bus_reset>:
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
// Must be called from critical section
static void handle_bus_reset(uint8_t rhport) {
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b08e      	sub	sp, #56	@ 0x38
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	4603      	mov	r3, r0
 800bc98:	71fb      	strb	r3, [r7, #7]
 800bc9a:	79fb      	ldrb	r3, [r7, #7]
 800bc9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800bca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d002      	beq.n	800bcae <handle_bus_reset+0x1e>
    rhport = 0;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800bcae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcb2:	4a6a      	ldr	r2, [pc, #424]	@ (800be5c <handle_bus_reset+0x1cc>)
 800bcb4:	011b      	lsls	r3, r3, #4
 800bcb6:	4413      	add	r3, r2
 800bcb8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800bcba:	633b      	str	r3, [r7, #48]	@ 0x30
 800bcbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800bcc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bcc4:	60bb      	str	r3, [r7, #8]
  return ghwcfg2.num_dev_ep + 1;
 800bcc6:	7a7b      	ldrb	r3, [r7, #9]
 800bcc8:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	3301      	adds	r3, #1
 800bcd0:	b2db      	uxtb	r3, r3
  const uint8_t ep_count =  dwc2_ep_count(dwc2);
 800bcd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  tu_memclr(xfer_status, sizeof(xfer_status));
 800bcd6:	2280      	movs	r2, #128	@ 0x80
 800bcd8:	2100      	movs	r1, #0
 800bcda:	4861      	ldr	r0, [pc, #388]	@ (800be60 <handle_bus_reset+0x1d0>)
 800bcdc:	f001 fad0 	bl	800d280 <memset>

  _dcd_data.sof_en = false;
 800bce0:	4b60      	ldr	r3, [pc, #384]	@ (800be64 <handle_bus_reset+0x1d4>)
 800bce2:	2200      	movs	r2, #0
 800bce4:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 800bce6:	4b5f      	ldr	r3, [pc, #380]	@ (800be64 <handle_bus_reset+0x1d4>)
 800bce8:	2200      	movs	r2, #0
 800bcea:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800bcec:	2300      	movs	r3, #0
 800bcee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bcf2:	e014      	b.n	800bd1e <handle_bus_reset+0x8e>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 800bcf4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bcf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcfa:	3358      	adds	r3, #88	@ 0x58
 800bcfc:	015b      	lsls	r3, r3, #5
 800bcfe:	4413      	add	r3, r2
 800bd00:	681a      	ldr	r2, [r3, #0]
 800bd02:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bd06:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800bd0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bd0c:	3358      	adds	r3, #88	@ 0x58
 800bd0e:	015b      	lsls	r3, r3, #5
 800bd10:	440b      	add	r3, r1
 800bd12:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 800bd14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bd18:	3301      	adds	r3, #1
 800bd1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bd1e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800bd22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d3e4      	bcc.n	800bcf4 <handle_bus_reset+0x64>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800bd30:	e01d      	b.n	800bd6e <handle_bus_reset+0xde>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 800bd32:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800bd36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd38:	3348      	adds	r3, #72	@ 0x48
 800bd3a:	015b      	lsls	r3, r3, #5
 800bd3c:	4413      	add	r3, r2
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	da0f      	bge.n	800bd64 <handle_bus_reset+0xd4>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 800bd44:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800bd48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd4a:	3348      	adds	r3, #72	@ 0x48
 800bd4c:	015b      	lsls	r3, r3, #5
 800bd4e:	4413      	add	r3, r2
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800bd56:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 800bd5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bd5c:	3348      	adds	r3, #72	@ 0x48
 800bd5e:	015b      	lsls	r3, r3, #5
 800bd60:	440b      	add	r3, r1
 800bd62:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 800bd64:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800bd68:	3301      	adds	r3, #1
 800bd6a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800bd6e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800bd72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d3db      	bcc.n	800bd32 <handle_bus_reset+0xa2>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 800bd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd7c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800bd80:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 800bd84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd86:	2209      	movs	r2, #9
 800bd88:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 800bd8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd8e:	2209      	movs	r2, #9
 800bd90:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 800bd94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd96:	61bb      	str	r3, [r7, #24]
 800bd98:	2310      	movs	r3, #16
 800bd9a:	75fb      	strb	r3, [r7, #23]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800bd9c:	7dfb      	ldrb	r3, [r7, #23]
 800bd9e:	019b      	lsls	r3, r3, #6
 800bda0:	f043 0220 	orr.w	r2, r3, #32
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800bda8:	bf00      	nop
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	691b      	ldr	r3, [r3, #16]
 800bdae:	f003 0320 	and.w	r3, r3, #32
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d1f9      	bne.n	800bdaa <handle_bus_reset+0x11a>
}
 800bdb6:	bf00      	nop
 800bdb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdba:	61fb      	str	r3, [r7, #28]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	2210      	movs	r2, #16
 800bdc0:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800bdc2:	bf00      	nop
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	691b      	ldr	r3, [r3, #16]
 800bdc8:	f003 0310 	and.w	r3, r3, #16
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d1f9      	bne.n	800bdc4 <handle_bus_reset+0x134>
}
 800bdd0:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 800bdd2:	79fb      	ldrb	r3, [r7, #7]
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7ff f937 	bl	800b048 <dfifo_device_init>

  // 5. Reset device address
  dwc2_dcfg_t dcfg = {.value = dwc2->dcfg};
 800bdda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bddc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800bde0:	613b      	str	r3, [r7, #16]
  dcfg.address = 0;
 800bde2:	8a3b      	ldrh	r3, [r7, #16]
 800bde4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800bde8:	823b      	strh	r3, [r7, #16]
  dwc2->dcfg = dcfg.value;
 800bdea:	693a      	ldr	r2, [r7, #16]
 800bdec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdee:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 800bdf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdf4:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 800bdf8:	f023 0203 	bic.w	r2, r3, #3
 800bdfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdfe:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 800be02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be04:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800be08:	f023 0203 	bic.w	r2, r3, #3
 800be0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be0e:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 800be12:	4b13      	ldr	r3, [pc, #76]	@ (800be60 <handle_bus_reset+0x1d0>)
 800be14:	2240      	movs	r2, #64	@ 0x40
 800be16:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 800be18:	4b11      	ldr	r3, [pc, #68]	@ (800be60 <handle_bus_reset+0x1d0>)
 800be1a:	2240      	movs	r2, #64	@ 0x40
 800be1c:	835a      	strh	r2, [r3, #26]
 800be1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be20:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800be22:	6a3b      	ldr	r3, [r7, #32]
 800be24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be26:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800be28:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d004      	beq.n	800be38 <handle_bus_reset+0x1a8>
    dma_setup_prepare(rhport);
 800be2e:	79fb      	ldrb	r3, [r7, #7]
 800be30:	4618      	mov	r0, r3
 800be32:	f7fe ffeb 	bl	800ae0c <dma_setup_prepare>
 800be36:	e007      	b.n	800be48 <handle_bus_reset+0x1b8>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800be38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be3a:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 800be3e:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800be42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be44:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 800be48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be4a:	699b      	ldr	r3, [r3, #24]
 800be4c:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 800be50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be52:	619a      	str	r2, [r3, #24]
}
 800be54:	bf00      	nop
 800be56:	3738      	adds	r7, #56	@ 0x38
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	0800fa18 	.word	0x0800fa18
 800be60:	20001864 	.word	0x20001864
 800be64:	200018e4 	.word	0x200018e4

0800be68 <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 800be68:	b580      	push	{r7, lr}
 800be6a:	b08a      	sub	sp, #40	@ 0x28
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	4603      	mov	r3, r0
 800be70:	71fb      	strb	r3, [r7, #7]
 800be72:	79fb      	ldrb	r3, [r7, #7]
 800be74:	77fb      	strb	r3, [r7, #31]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800be76:	7ffb      	ldrb	r3, [r7, #31]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d001      	beq.n	800be80 <handle_enum_done+0x18>
    rhport = 0;
 800be7c:	2300      	movs	r3, #0
 800be7e:	77fb      	strb	r3, [r7, #31]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800be80:	7ffb      	ldrb	r3, [r7, #31]
 800be82:	4a1b      	ldr	r2, [pc, #108]	@ (800bef0 <handle_enum_done+0x88>)
 800be84:	011b      	lsls	r3, r3, #4
 800be86:	4413      	add	r3, r2
 800be88:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800be8a:	623b      	str	r3, [r7, #32]
  const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 800be8c:	6a3b      	ldr	r3, [r7, #32]
 800be8e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800be92:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dsts.enum_speed) {
 800be94:	7e3b      	ldrb	r3, [r7, #24]
 800be96:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d002      	beq.n	800bea6 <handle_enum_done+0x3e>
 800bea0:	2b02      	cmp	r3, #2
 800bea2:	d004      	beq.n	800beae <handle_enum_done+0x46>
 800bea4:	e007      	b.n	800beb6 <handle_enum_done+0x4e>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 800bea6:	2302      	movs	r3, #2
 800bea8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800beac:	e007      	b.n	800bebe <handle_enum_done+0x56>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 800beae:	2301      	movs	r3, #1
 800beb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800beb4:	e003      	b.n	800bebe <handle_enum_done+0x56>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 800beb6:	2300      	movs	r3, #0
 800beb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800bebc:	bf00      	nop
 800bebe:	79fb      	ldrb	r3, [r7, #7]
 800bec0:	77bb      	strb	r3, [r7, #30]
 800bec2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bec6:	777b      	strb	r3, [r7, #29]
 800bec8:	2301      	movs	r3, #1
 800beca:	773b      	strb	r3, [r7, #28]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800becc:	7fbb      	ldrb	r3, [r7, #30]
 800bece:	733b      	strb	r3, [r7, #12]
  event.event_id = DCD_EVENT_BUS_RESET;
 800bed0:	2301      	movs	r3, #1
 800bed2:	737b      	strb	r3, [r7, #13]
  event.bus_reset.speed = speed;
 800bed4:	7f7b      	ldrb	r3, [r7, #29]
 800bed6:	743b      	strb	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 800bed8:	7f3a      	ldrb	r2, [r7, #28]
 800beda:	f107 030c 	add.w	r3, r7, #12
 800bede:	4611      	mov	r1, r2
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7fe f8df 	bl	800a0a4 <dcd_event_handler>
}
 800bee6:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 800bee8:	bf00      	nop
 800beea:	3728      	adds	r7, #40	@ 0x28
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	0800fa18 	.word	0x0800fa18

0800bef4 <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b08c      	sub	sp, #48	@ 0x30
 800bef8:	af00      	add	r7, sp, #0
 800befa:	4603      	mov	r3, r0
 800befc:	71fb      	strb	r3, [r7, #7]
 800befe:	79fb      	ldrb	r3, [r7, #7]
 800bf00:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800bf02:	7cfb      	ldrb	r3, [r7, #19]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d001      	beq.n	800bf0c <handle_rxflvl_irq+0x18>
    rhport = 0;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800bf0c:	7cfb      	ldrb	r3, [r7, #19]
 800bf0e:	4a49      	ldr	r2, [pc, #292]	@ (800c034 <handle_rxflvl_irq+0x140>)
 800bf10:	011b      	lsls	r3, r3, #4
 800bf12:	4413      	add	r3, r2
 800bf14:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800bf16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800bf18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf1e:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp = {.value = dwc2->grxstsp};
 800bf20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf22:	6a1b      	ldr	r3, [r3, #32]
 800bf24:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp.ep_ch_num;
 800bf26:	7b3b      	ldrb	r3, [r7, #12]
 800bf28:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800bf2c:	b2db      	uxtb	r3, r3
 800bf2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 800bf32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf36:	3358      	adds	r3, #88	@ 0x58
 800bf38:	015b      	lsls	r3, r3, #5
 800bf3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf3c:	4413      	add	r3, r2
 800bf3e:	623b      	str	r3, [r7, #32]

  switch (grxstsp.packet_status) {
 800bf40:	7bbb      	ldrb	r3, [r7, #14]
 800bf42:	f3c3 0343 	ubfx	r3, r3, #1, #4
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	3b01      	subs	r3, #1
 800bf4a:	2b05      	cmp	r3, #5
 800bf4c:	d86a      	bhi.n	800c024 <handle_rxflvl_irq+0x130>
 800bf4e:	a201      	add	r2, pc, #4	@ (adr r2, 800bf54 <handle_rxflvl_irq+0x60>)
 800bf50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf54:	0800c025 	.word	0x0800c025
 800bf58:	0800bf93 	.word	0x0800bf93
 800bf5c:	0800c025 	.word	0x0800c025
 800bf60:	0800bf85 	.word	0x0800bf85
 800bf64:	0800c025 	.word	0x0800c025
 800bf68:	0800bf6d 	.word	0x0800bf6d
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 800bf6c:	4b32      	ldr	r3, [pc, #200]	@ (800c038 <handle_rxflvl_irq+0x144>)
 800bf6e:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 800bf70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	69fb      	ldr	r3, [r7, #28]
 800bf76:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 800bf78:	69fb      	ldr	r3, [r7, #28]
 800bf7a:	3304      	adds	r3, #4
 800bf7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf7e:	6812      	ldr	r2, [r2, #0]
 800bf80:	601a      	str	r2, [r3, #0]
      break;
 800bf82:	e052      	b.n	800c02a <handle_rxflvl_irq+0x136>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800bf84:	6a3b      	ldr	r3, [r7, #32]
 800bf86:	691b      	ldr	r3, [r3, #16]
 800bf88:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800bf8c:	6a3b      	ldr	r3, [r7, #32]
 800bf8e:	611a      	str	r2, [r3, #16]
      break;
 800bf90:	e04b      	b.n	800c02a <handle_rxflvl_irq+0x136>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp.byte_count;
 800bf92:	89bb      	ldrh	r3, [r7, #12]
 800bf94:	f3c3 130a 	ubfx	r3, r3, #4, #11
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800bf9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfa0:	015b      	lsls	r3, r3, #5
 800bfa2:	4a26      	ldr	r2, [pc, #152]	@ (800c03c <handle_rxflvl_irq+0x148>)
 800bfa4:	4413      	add	r3, r2
 800bfa6:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 800bfa8:	8b7b      	ldrh	r3, [r7, #26]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d03c      	beq.n	800c028 <handle_rxflvl_irq+0x134>
        // Read packet off RxFIFO
        if (xfer->ff) {
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d007      	beq.n	800bfc6 <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	8b7a      	ldrh	r2, [r7, #26]
 800bfbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fc ff7e 	bl	8008ec0 <tu_fifo_write_n_const_addr_full_words>
 800bfc4:	e00c      	b.n	800bfe0 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	8b7a      	ldrh	r2, [r7, #26]
 800bfcc:	4619      	mov	r1, r3
 800bfce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bfd0:	f000 fd70 	bl	800cab4 <dfifo_read_packet>
          xfer->buffer += byte_count;
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	681a      	ldr	r2, [r3, #0]
 800bfd8:	8b7b      	ldrh	r3, [r7, #26]
 800bfda:	441a      	add	r2, r3
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	895b      	ldrh	r3, [r3, #10]
 800bfe4:	8b7a      	ldrh	r2, [r7, #26]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d21e      	bcs.n	800c028 <handle_rxflvl_irq+0x134>
          const dwc2_ep_tsize_t tsiz = {.value = epout->tsiz};
 800bfea:	6a3b      	ldr	r3, [r7, #32]
 800bfec:	691b      	ldr	r3, [r3, #16]
 800bfee:	60bb      	str	r3, [r7, #8]
          xfer->total_len -= tsiz.xfer_size;
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	891a      	ldrh	r2, [r3, #8]
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	1ad3      	subs	r3, r2, r3
 800bffe:	b29a      	uxth	r2, r3
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 800c004:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d10d      	bne.n	800c028 <handle_rxflvl_irq+0x134>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	891a      	ldrh	r2, [r3, #8]
 800c010:	4b0b      	ldr	r3, [pc, #44]	@ (800c040 <handle_rxflvl_irq+0x14c>)
 800c012:	881b      	ldrh	r3, [r3, #0]
 800c014:	1ad3      	subs	r3, r2, r3
 800c016:	b29a      	uxth	r2, r3
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 800c01c:	4b08      	ldr	r3, [pc, #32]	@ (800c040 <handle_rxflvl_irq+0x14c>)
 800c01e:	2200      	movs	r2, #0
 800c020:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 800c022:	e001      	b.n	800c028 <handle_rxflvl_irq+0x134>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 800c024:	bf00      	nop
 800c026:	e000      	b.n	800c02a <handle_rxflvl_irq+0x136>
      break;
 800c028:	bf00      	nop
  }
}
 800c02a:	bf00      	nop
 800c02c:	3730      	adds	r7, #48	@ 0x30
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	0800fa18 	.word	0x0800fa18
 800c038:	200018ec 	.word	0x200018ec
 800c03c:	20001864 	.word	0x20001864
 800c040:	200018e4 	.word	0x200018e4

0800c044 <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 800c044:	b580      	push	{r7, lr}
 800c046:	b08e      	sub	sp, #56	@ 0x38
 800c048:	af00      	add	r7, sp, #0
 800c04a:	4603      	mov	r3, r0
 800c04c:	603a      	str	r2, [r7, #0]
 800c04e:	71fb      	strb	r3, [r7, #7]
 800c050:	460b      	mov	r3, r1
 800c052:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 800c054:	783b      	ldrb	r3, [r7, #0]
 800c056:	f003 0308 	and.w	r3, r3, #8
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d01c      	beq.n	800c09a <handle_epout_slave+0x56>
 800c060:	79fb      	ldrb	r3, [r7, #7]
 800c062:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800c066:	4b34      	ldr	r3, [pc, #208]	@ (800c138 <handle_epout_slave+0xf4>)
 800c068:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c06a:	2301      	movs	r3, #1
 800c06c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800c070:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c074:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 800c076:	2306      	movs	r3, #6
 800c078:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 800c07a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c07c:	f107 0318 	add.w	r3, r7, #24
 800c080:	6810      	ldr	r0, [r2, #0]
 800c082:	6851      	ldr	r1, [r2, #4]
 800c084:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 800c086:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800c08a:	f107 0314 	add.w	r3, r7, #20
 800c08e:	4611      	mov	r1, r2
 800c090:	4618      	mov	r0, r3
 800c092:	f7fe f807 	bl	800a0a4 <dcd_event_handler>
}
 800c096:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 800c098:	e04a      	b.n	800c130 <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 800c09a:	783b      	ldrb	r3, [r7, #0]
 800c09c:	f003 0301 	and.w	r3, r3, #1
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d044      	beq.n	800c130 <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 800c0a6:	783b      	ldrb	r3, [r7, #0]
 800c0a8:	f003 0320 	and.w	r3, r3, #32
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d13e      	bne.n	800c130 <handle_epout_slave+0xec>
 800c0b2:	787b      	ldrb	r3, [r7, #1]
 800c0b4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c0b8:	b2db      	uxtb	r3, r3
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d138      	bne.n	800c130 <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800c0be:	79bb      	ldrb	r3, [r7, #6]
 800c0c0:	015b      	lsls	r3, r3, #5
 800c0c2:	4a1e      	ldr	r2, [pc, #120]	@ (800c13c <handle_epout_slave+0xf8>)
 800c0c4:	4413      	add	r3, r2
 800c0c6:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 800c0c8:	79bb      	ldrb	r3, [r7, #6]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10a      	bne.n	800c0e4 <handle_epout_slave+0xa0>
 800c0ce:	4b1c      	ldr	r3, [pc, #112]	@ (800c140 <handle_epout_slave+0xfc>)
 800c0d0:	881b      	ldrh	r3, [r3, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d006      	beq.n	800c0e4 <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 800c0d6:	79b9      	ldrb	r1, [r7, #6]
 800c0d8:	79fb      	ldrb	r3, [r7, #7]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7ff f977 	bl	800b3d0 <edpt_schedule_packets>
 800c0e2:	e025      	b.n	800c130 <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800c0e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0e6:	891b      	ldrh	r3, [r3, #8]
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	79fb      	ldrb	r3, [r7, #7]
 800c0ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c0f0:	79bb      	ldrb	r3, [r7, #6]
 800c0f2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800c0f6:	627a      	str	r2, [r7, #36]	@ 0x24
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c0fe:	2301      	movs	r3, #1
 800c100:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800c104:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800c108:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800c10a:	2307      	movs	r3, #7
 800c10c:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 800c10e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c112:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 800c114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c116:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 800c118:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c11c:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 800c11e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800c122:	f107 0308 	add.w	r3, r7, #8
 800c126:	4611      	mov	r1, r2
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fd ffbb 	bl	800a0a4 <dcd_event_handler>
}
 800c12e:	bf00      	nop
      }
    }
  }
}
 800c130:	3738      	adds	r7, #56	@ 0x38
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	200018ec 	.word	0x200018ec
 800c13c:	20001864 	.word	0x20001864
 800c140:	200018e4 	.word	0x200018e4

0800c144 <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 800c144:	b580      	push	{r7, lr}
 800c146:	b092      	sub	sp, #72	@ 0x48
 800c148:	af00      	add	r7, sp, #0
 800c14a:	4603      	mov	r3, r0
 800c14c:	603a      	str	r2, [r7, #0]
 800c14e:	71fb      	strb	r3, [r7, #7]
 800c150:	460b      	mov	r3, r1
 800c152:	71bb      	strb	r3, [r7, #6]
 800c154:	79fb      	ldrb	r3, [r7, #7]
 800c156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800c15a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d002      	beq.n	800c168 <handle_epin_slave+0x24>
    rhport = 0;
 800c162:	2300      	movs	r3, #0
 800c164:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800c168:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c16c:	4a64      	ldr	r2, [pc, #400]	@ (800c300 <handle_epin_slave+0x1bc>)
 800c16e:	011b      	lsls	r3, r3, #4
 800c170:	4413      	add	r3, r2
 800c172:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800c174:	643b      	str	r3, [r7, #64]	@ 0x40
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 800c176:	79bb      	ldrb	r3, [r7, #6]
 800c178:	3348      	adds	r3, #72	@ 0x48
 800c17a:	015b      	lsls	r3, r3, #5
 800c17c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c17e:	4413      	add	r3, r2
 800c180:	63fb      	str	r3, [r7, #60]	@ 0x3c
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 800c182:	79bb      	ldrb	r3, [r7, #6]
 800c184:	015b      	lsls	r3, r3, #5
 800c186:	3310      	adds	r3, #16
 800c188:	4a5e      	ldr	r2, [pc, #376]	@ (800c304 <handle_epin_slave+0x1c0>)
 800c18a:	4413      	add	r3, r2
 800c18c:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (diepint_bm.xfer_complete) {
 800c18e:	783b      	ldrb	r3, [r7, #0]
 800c190:	f003 0301 	and.w	r3, r3, #1
 800c194:	b2db      	uxtb	r3, r3
 800c196:	2b00      	cmp	r3, #0
 800c198:	d037      	beq.n	800c20a <handle_epin_slave+0xc6>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 800c19a:	79bb      	ldrb	r3, [r7, #6]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d10a      	bne.n	800c1b6 <handle_epin_slave+0x72>
 800c1a0:	4b59      	ldr	r3, [pc, #356]	@ (800c308 <handle_epin_slave+0x1c4>)
 800c1a2:	885b      	ldrh	r3, [r3, #2]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d006      	beq.n	800c1b6 <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 800c1a8:	79b9      	ldrb	r1, [r7, #6]
 800c1aa:	79fb      	ldrb	r3, [r7, #7]
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7ff f90e 	bl	800b3d0 <edpt_schedule_packets>
 800c1b4:	e029      	b.n	800c20a <handle_epin_slave+0xc6>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800c1b6:	79bb      	ldrb	r3, [r7, #6]
 800c1b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c1bc:	b2d9      	uxtb	r1, r3
 800c1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1c0:	891b      	ldrh	r3, [r3, #8]
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	79fb      	ldrb	r3, [r7, #7]
 800c1c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800c1d0:	627a      	str	r2, [r7, #36]	@ 0x24
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c1d8:	2301      	movs	r3, #1
 800c1da:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  event.rhport = rhport;
 800c1de:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800c1e2:	743b      	strb	r3, [r7, #16]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800c1e4:	2307      	movs	r3, #7
 800c1e6:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 800c1e8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c1ec:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 800c1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f0:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 800c1f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c1f6:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800c1f8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800c1fc:	f107 0310 	add.w	r3, r7, #16
 800c200:	4611      	mov	r1, r2
 800c202:	4618      	mov	r0, r3
 800c204:	f7fd ff4e 	bl	800a0a4 <dcd_event_handler>
}
 800c208:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 800c20a:	783b      	ldrb	r3, [r7, #0]
 800c20c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c210:	b2db      	uxtb	r3, r3
 800c212:	2b00      	cmp	r3, #0
 800c214:	d070      	beq.n	800c2f8 <handle_epin_slave+0x1b4>
 800c216:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c218:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800c21c:	79ba      	ldrb	r2, [r7, #6]
 800c21e:	2101      	movs	r1, #1
 800c220:	fa01 f202 	lsl.w	r2, r1, r2
 800c224:	4013      	ands	r3, r2
 800c226:	2b00      	cmp	r3, #0
 800c228:	d066      	beq.n	800c2f8 <handle_epin_slave+0x1b4>
    dwc2_ep_tsize_t tsiz = {.value = epin->tsiz};
 800c22a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c22c:	691b      	ldr	r3, [r3, #16]
 800c22e:	60fb      	str	r3, [r7, #12]
    const uint16_t remain_packets = tsiz.packet_count;
 800c230:	89fb      	ldrh	r3, [r7, #14]
 800c232:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800c236:	b29b      	uxth	r3, r3
 800c238:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 800c23a:	2300      	movs	r3, #0
 800c23c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800c240:	e03f      	b.n	800c2c2 <handle_epin_slave+0x17e>
      tsiz.value = epin->tsiz;
 800c242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c244:	691b      	ldr	r3, [r3, #16]
 800c246:	60fb      	str	r3, [r7, #12]
      const uint16_t remain_bytes = (uint16_t) tsiz.xfer_size;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c24e:	86bb      	strh	r3, [r7, #52]	@ 0x34
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 800c250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c252:	895a      	ldrh	r2, [r3, #10]
 800c254:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c256:	843b      	strh	r3, [r7, #32]
 800c258:	4613      	mov	r3, r2
 800c25a:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800c25c:	8c3a      	ldrh	r2, [r7, #32]
 800c25e:	8bfb      	ldrh	r3, [r7, #30]
 800c260:	4293      	cmp	r3, r2
 800c262:	bf28      	it	cs
 800c264:	4613      	movcs	r3, r2
 800c266:	b29b      	uxth	r3, r3
 800c268:	867b      	strh	r3, [r7, #50]	@ 0x32

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 800c26a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800c26c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c26e:	699b      	ldr	r3, [r3, #24]
 800c270:	0099      	lsls	r1, r3, #2
 800c272:	4b26      	ldr	r3, [pc, #152]	@ (800c30c <handle_epin_slave+0x1c8>)
 800c274:	400b      	ands	r3, r1
 800c276:	429a      	cmp	r2, r3
 800c278:	d829      	bhi.n	800c2ce <handle_epin_slave+0x18a>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 800c27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00d      	beq.n	800c29e <handle_epin_slave+0x15a>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 800c282:	79bb      	ldrb	r3, [r7, #6]
 800c284:	3301      	adds	r3, #1
 800c286:	031b      	lsls	r3, r3, #12
 800c288:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c28a:	4413      	add	r3, r2
 800c28c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 800c28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800c294:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c296:	4618      	mov	r0, r3
 800c298:	f7fc fdab 	bl	8008df2 <tu_fifo_read_n_const_addr_full_words>
 800c29c:	e00c      	b.n	800c2b8 <handle_epin_slave+0x174>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 800c29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800c2a4:	79b9      	ldrb	r1, [r7, #6]
 800c2a6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800c2a8:	f000 fc55 	bl	800cb56 <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 800c2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800c2b2:	441a      	add	r2, r3
 800c2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2b6:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 800c2b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c2bc:	3301      	adds	r3, #1
 800c2be:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800c2c2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800c2c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d3ba      	bcc.n	800c242 <handle_epin_slave+0xfe>
 800c2cc:	e000      	b.n	800c2d0 <handle_epin_slave+0x18c>
        break;
 800c2ce:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    tsiz.value = epin->tsiz;
 800c2d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2d2:	691b      	ldr	r3, [r3, #16]
 800c2d4:	60fb      	str	r3, [r7, #12]
    if (tsiz.xfer_size == 0) {
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d10b      	bne.n	800c2f8 <handle_epin_slave+0x1b4>
      dwc2->diepempmsk &= ~(1 << epnum);
 800c2e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2e2:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800c2e6:	79ba      	ldrb	r2, [r7, #6]
 800c2e8:	2101      	movs	r1, #1
 800c2ea:	fa01 f202 	lsl.w	r2, r1, r2
 800c2ee:	43d2      	mvns	r2, r2
 800c2f0:	401a      	ands	r2, r3
 800c2f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2f4:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 800c2f8:	bf00      	nop
 800c2fa:	3748      	adds	r7, #72	@ 0x48
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	0800fa18 	.word	0x0800fa18
 800c304:	20001864 	.word	0x20001864
 800c308:	200018e4 	.word	0x200018e4
 800c30c:	0003fffc 	.word	0x0003fffc

0800c310 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 800c310:	b580      	push	{r7, lr}
 800c312:	b08e      	sub	sp, #56	@ 0x38
 800c314:	af00      	add	r7, sp, #0
 800c316:	4603      	mov	r3, r0
 800c318:	460a      	mov	r2, r1
 800c31a:	71fb      	strb	r3, [r7, #7]
 800c31c:	4613      	mov	r3, r2
 800c31e:	71bb      	strb	r3, [r7, #6]
 800c320:	79fb      	ldrb	r3, [r7, #7]
 800c322:	76fb      	strb	r3, [r7, #27]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800c324:	7efb      	ldrb	r3, [r7, #27]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d001      	beq.n	800c32e <handle_ep_irq+0x1e>
    rhport = 0;
 800c32a:	2300      	movs	r3, #0
 800c32c:	76fb      	strb	r3, [r7, #27]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800c32e:	7efb      	ldrb	r3, [r7, #27]
 800c330:	4a38      	ldr	r2, [pc, #224]	@ (800c414 <handle_ep_irq+0x104>)
 800c332:	011b      	lsls	r3, r3, #4
 800c334:	4413      	add	r3, r2
 800c336:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800c338:	633b      	str	r3, [r7, #48]	@ 0x30
 800c33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c33c:	61fb      	str	r3, [r7, #28]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800c33e:	69fb      	ldr	r3, [r7, #28]
 800c340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c342:	617b      	str	r3, [r7, #20]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800c344:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800c346:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c34c:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800c34e:	6a3b      	ldr	r3, [r7, #32]
 800c350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c352:	613b      	str	r3, [r7, #16]
  return ghwcfg2.num_dev_ep + 1;
 800c354:	7c7b      	ldrb	r3, [r7, #17]
 800c356:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	3301      	adds	r3, #1
 800c35e:	b2db      	uxtb	r3, r3
  const uint8_t ep_count = dwc2_ep_count(dwc2);
 800c360:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 800c364:	79bb      	ldrb	r3, [r7, #6]
 800c366:	2b01      	cmp	r3, #1
 800c368:	d101      	bne.n	800c36e <handle_ep_irq+0x5e>
 800c36a:	2300      	movs	r3, #0
 800c36c:	e000      	b.n	800c370 <handle_ep_irq+0x60>
 800c36e:	2310      	movs	r3, #16
 800c370:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 800c374:	79bb      	ldrb	r3, [r7, #6]
 800c376:	2b01      	cmp	r3, #1
 800c378:	bf14      	ite	ne
 800c37a:	2301      	movne	r3, #1
 800c37c:	2300      	moveq	r3, #0
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	025b      	lsls	r3, r3, #9
 800c382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c388:	4413      	add	r3, r2
 800c38a:	62bb      	str	r3, [r7, #40]	@ 0x28

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800c38c:	2300      	movs	r3, #0
 800c38e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c392:	e034      	b.n	800c3fe <handle_ep_irq+0xee>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 800c394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c396:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800c39a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800c39e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c3a2:	440b      	add	r3, r1
 800c3a4:	fa22 f303 	lsr.w	r3, r2, r3
 800c3a8:	f003 0301 	and.w	r3, r3, #1
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d021      	beq.n	800c3f4 <handle_ep_irq+0xe4>
      dwc2_dep_t* epout = &ep_base[epnum];
 800c3b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c3b4:	015b      	lsls	r3, r3, #5
 800c3b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3b8:	4413      	add	r3, r2
 800c3ba:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 800c3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	60fb      	str	r3, [r7, #12]

      epout->intr = intr.value; // Clear interrupt
 800c3c2:	68fa      	ldr	r2, [r7, #12]
 800c3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3c6:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 800c3c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d111      	bne.n	800c3f4 <handle_ep_irq+0xe4>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 800c3d0:	79bb      	ldrb	r3, [r7, #6]
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d107      	bne.n	800c3e6 <handle_ep_irq+0xd6>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 800c3d6:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800c3da:	79fb      	ldrb	r3, [r7, #7]
 800c3dc:	68fa      	ldr	r2, [r7, #12]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7ff feb0 	bl	800c144 <handle_epin_slave>
 800c3e4:	e006      	b.n	800c3f4 <handle_ep_irq+0xe4>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 800c3e6:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800c3ea:	79fb      	ldrb	r3, [r7, #7]
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7ff fe28 	bl	800c044 <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800c3f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c3fe:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800c402:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c406:	429a      	cmp	r2, r3
 800c408:	d3c4      	bcc.n	800c394 <handle_ep_irq+0x84>
        }
        #endif
      }
    }
  }
}
 800c40a:	bf00      	nop
 800c40c:	bf00      	nop
 800c40e:	3738      	adds	r7, #56	@ 0x38
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	0800fa18 	.word	0x0800fa18

0800c418 <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 800c418:	b580      	push	{r7, lr}
 800c41a:	b098      	sub	sp, #96	@ 0x60
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	4603      	mov	r3, r0
 800c420:	71fb      	strb	r3, [r7, #7]
 800c422:	79fb      	ldrb	r3, [r7, #7]
 800c424:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800c428:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d002      	beq.n	800c436 <dcd_int_handler+0x1e>
    rhport = 0;
 800c430:	2300      	movs	r3, #0
 800c432:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800c436:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800c43a:	4a80      	ldr	r2, [pc, #512]	@ (800c63c <dcd_int_handler+0x224>)
 800c43c:	011b      	lsls	r3, r3, #4
 800c43e:	4413      	add	r3, r2
 800c440:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800c442:	65fb      	str	r3, [r7, #92]	@ 0x5c
  const uint32_t gintmask = dwc2->gintmsk;
 800c444:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c446:	699b      	ldr	r3, [r3, #24]
 800c448:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 800c44a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c44c:	695b      	ldr	r3, [r3, #20]
 800c44e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c450:	4013      	ands	r3, r2
 800c452:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 800c454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c456:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d00d      	beq.n	800c47a <dcd_int_handler+0x62>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 800c45e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c460:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c464:	615a      	str	r2, [r3, #20]

    usbd_spin_lock(true);
 800c466:	2001      	movs	r0, #1
 800c468:	f7fe f81a 	bl	800a4a0 <usbd_spin_lock>
    handle_bus_reset(rhport);
 800c46c:	79fb      	ldrb	r3, [r7, #7]
 800c46e:	4618      	mov	r0, r3
 800c470:	f7ff fc0e 	bl	800bc90 <handle_bus_reset>
    usbd_spin_unlock(true);
 800c474:	2001      	movs	r0, #1
 800c476:	f7fe f82d 	bl	800a4d4 <usbd_spin_unlock>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 800c47a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c47c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c480:	2b00      	cmp	r3, #0
 800c482:	d007      	beq.n	800c494 <dcd_int_handler+0x7c>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 800c484:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c486:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800c48a:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 800c48c:	79fb      	ldrb	r3, [r7, #7]
 800c48e:	4618      	mov	r0, r3
 800c490:	f7ff fcea 	bl	800be68 <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 800c494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c496:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d01d      	beq.n	800c4da <dcd_int_handler+0xc2>
    dwc2->gintsts = GINTSTS_USBSUSP;
 800c49e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c4a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c4a4:	615a      	str	r2, [r3, #20]
 800c4a6:	79fb      	ldrb	r3, [r7, #7]
 800c4a8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800c4ac:	2304      	movs	r3, #4
 800c4ae:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 800c4b8:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800c4bc:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 800c4c0:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800c4c4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 800c4c8:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800c4cc:	f107 0320 	add.w	r3, r7, #32
 800c4d0:	4611      	mov	r1, r2
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7fd fde6 	bl	800a0a4 <dcd_event_handler>
}
 800c4d8:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 800c4da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	da1d      	bge.n	800c51c <dcd_int_handler+0x104>
    dwc2->gintsts = GINTSTS_WKUINT;
 800c4e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c4e2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c4e6:	615a      	str	r2, [r3, #20]
 800c4e8:	79fb      	ldrb	r3, [r7, #7]
 800c4ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c4ee:	2305      	movs	r3, #5
 800c4f0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 800c4fa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c4fe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 800c502:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c506:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 800c50a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c50e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c512:	4611      	mov	r1, r2
 800c514:	4618      	mov	r0, r3
 800c516:	f7fd fdc5 	bl	800a0a4 <dcd_event_handler>
}
 800c51a:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 800c51c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c51e:	f003 0304 	and.w	r3, r3, #4
 800c522:	2b00      	cmp	r3, #0
 800c524:	d022      	beq.n	800c56c <dcd_int_handler+0x154>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 800c526:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 800c52c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c52e:	f003 0304 	and.w	r3, r3, #4
 800c532:	2b00      	cmp	r3, #0
 800c534:	d017      	beq.n	800c566 <dcd_int_handler+0x14e>
 800c536:	79fb      	ldrb	r3, [r7, #7]
 800c538:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800c53c:	2302      	movs	r3, #2
 800c53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c542:	2301      	movs	r3, #1
 800c544:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 800c548:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800c54c:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 800c54e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c552:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800c554:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 800c558:	f107 0314 	add.w	r3, r7, #20
 800c55c:	4611      	mov	r1, r2
 800c55e:	4618      	mov	r0, r3
 800c560:	f7fd fda0 	bl	800a0a4 <dcd_event_handler>
}
 800c564:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 800c566:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c568:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c56a:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 800c56c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c56e:	f003 0308 	and.w	r3, r3, #8
 800c572:	2b00      	cmp	r3, #0
 800c574:	d02e      	beq.n	800c5d4 <dcd_int_handler+0x1bc>
    dwc2->gintsts = GINTSTS_SOF;
 800c576:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c578:	2208      	movs	r2, #8
 800c57a:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 800c57c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c57e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800c582:	0a1b      	lsrs	r3, r3, #8
 800c584:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c588:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 800c58a:	4b2d      	ldr	r3, [pc, #180]	@ (800c640 <dcd_int_handler+0x228>)
 800c58c:	79db      	ldrb	r3, [r3, #7]
 800c58e:	f083 0301 	eor.w	r3, r3, #1
 800c592:	b2db      	uxtb	r3, r3
 800c594:	2b00      	cmp	r3, #0
 800c596:	d005      	beq.n	800c5a4 <dcd_int_handler+0x18c>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 800c598:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c59a:	699b      	ldr	r3, [r3, #24]
 800c59c:	f023 0208 	bic.w	r2, r3, #8
 800c5a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c5a2:	619a      	str	r2, [r3, #24]
 800c5a4:	79fb      	ldrb	r3, [r7, #7]
 800c5a6:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800c5aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800c5b4:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800c5b8:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 800c5ba:	2303      	movs	r3, #3
 800c5bc:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 800c5be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5c0:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 800c5c2:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800c5c6:	f107 0308 	add.w	r3, r7, #8
 800c5ca:	4611      	mov	r1, r2
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7fd fd69 	bl	800a0a4 <dcd_event_handler>
}
 800c5d2:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 800c5d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5d6:	f003 0310 	and.w	r3, r3, #16
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d015      	beq.n	800c60a <dcd_int_handler+0x1f2>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 800c5de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c5e0:	699b      	ldr	r3, [r3, #24]
 800c5e2:	f023 0210 	bic.w	r2, r3, #16
 800c5e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c5e8:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 800c5ea:	79fb      	ldrb	r3, [r7, #7]
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7ff fc81 	bl	800bef4 <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 800c5f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c5f4:	695b      	ldr	r3, [r3, #20]
 800c5f6:	f003 0310 	and.w	r3, r3, #16
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d1f5      	bne.n	800c5ea <dcd_int_handler+0x1d2>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 800c5fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c600:	699b      	ldr	r3, [r3, #24]
 800c602:	f043 0210 	orr.w	r2, r3, #16
 800c606:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c608:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 800c60a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c60c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c610:	2b00      	cmp	r3, #0
 800c612:	d004      	beq.n	800c61e <dcd_int_handler+0x206>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 800c614:	79fb      	ldrb	r3, [r7, #7]
 800c616:	2100      	movs	r1, #0
 800c618:	4618      	mov	r0, r3
 800c61a:	f7ff fe79 	bl	800c310 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 800c61e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c620:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c624:	2b00      	cmp	r3, #0
 800c626:	d004      	beq.n	800c632 <dcd_int_handler+0x21a>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 800c628:	79fb      	ldrb	r3, [r7, #7]
 800c62a:	2101      	movs	r1, #1
 800c62c:	4618      	mov	r0, r3
 800c62e:	f7ff fe6f 	bl	800c310 <handle_ep_irq>
  }
}
 800c632:	bf00      	nop
 800c634:	3760      	adds	r7, #96	@ 0x60
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	0800fa18 	.word	0x0800fa18
 800c640:	200018e4 	.word	0x200018e4

0800c644 <dwc2_phy_init>:

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	460b      	mov	r3, r1
 800c64e:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800c650:	78fb      	ldrb	r3, [r7, #3]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d106      	bne.n	800c664 <dwc2_phy_init+0x20>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c65a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	639a      	str	r2, [r3, #56]	@ 0x38
      #else

      #endif
    }
  }
}
 800c662:	e005      	b.n	800c670 <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c668:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800c670:	bf00      	nop
 800c672:	370c      	adds	r7, #12
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr

0800c67c <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	460b      	mov	r3, r1
 800c686:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800c688:	78fb      	ldrb	r3, [r7, #3]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d152      	bne.n	800c734 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 800c68e:	4b2c      	ldr	r3, [pc, #176]	@ (800c740 <dwc2_phy_update+0xc4>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4a2c      	ldr	r2, [pc, #176]	@ (800c744 <dwc2_phy_update+0xc8>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d302      	bcc.n	800c69e <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 800c698:	2306      	movs	r3, #6
 800c69a:	60fb      	str	r3, [r7, #12]
 800c69c:	e041      	b.n	800c722 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 800c69e:	4b28      	ldr	r3, [pc, #160]	@ (800c740 <dwc2_phy_update+0xc4>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a29      	ldr	r2, [pc, #164]	@ (800c748 <dwc2_phy_update+0xcc>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d902      	bls.n	800c6ae <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 800c6a8:	2307      	movs	r3, #7
 800c6aa:	60fb      	str	r3, [r7, #12]
 800c6ac:	e039      	b.n	800c722 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 800c6ae:	4b24      	ldr	r3, [pc, #144]	@ (800c740 <dwc2_phy_update+0xc4>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4a26      	ldr	r2, [pc, #152]	@ (800c74c <dwc2_phy_update+0xd0>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d302      	bcc.n	800c6be <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 800c6b8:	2308      	movs	r3, #8
 800c6ba:	60fb      	str	r3, [r7, #12]
 800c6bc:	e031      	b.n	800c722 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 800c6be:	4b20      	ldr	r3, [pc, #128]	@ (800c740 <dwc2_phy_update+0xc4>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4a23      	ldr	r2, [pc, #140]	@ (800c750 <dwc2_phy_update+0xd4>)
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d902      	bls.n	800c6ce <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 800c6c8:	2309      	movs	r3, #9
 800c6ca:	60fb      	str	r3, [r7, #12]
 800c6cc:	e029      	b.n	800c722 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 800c6ce:	4b1c      	ldr	r3, [pc, #112]	@ (800c740 <dwc2_phy_update+0xc4>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a20      	ldr	r2, [pc, #128]	@ (800c754 <dwc2_phy_update+0xd8>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d902      	bls.n	800c6de <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 800c6d8:	230a      	movs	r3, #10
 800c6da:	60fb      	str	r3, [r7, #12]
 800c6dc:	e021      	b.n	800c722 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 800c6de:	4b18      	ldr	r3, [pc, #96]	@ (800c740 <dwc2_phy_update+0xc4>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a1d      	ldr	r2, [pc, #116]	@ (800c758 <dwc2_phy_update+0xdc>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d902      	bls.n	800c6ee <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 800c6e8:	230b      	movs	r3, #11
 800c6ea:	60fb      	str	r3, [r7, #12]
 800c6ec:	e019      	b.n	800c722 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 800c6ee:	4b14      	ldr	r3, [pc, #80]	@ (800c740 <dwc2_phy_update+0xc4>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4a1a      	ldr	r2, [pc, #104]	@ (800c75c <dwc2_phy_update+0xe0>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d302      	bcc.n	800c6fe <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 800c6f8:	230c      	movs	r3, #12
 800c6fa:	60fb      	str	r3, [r7, #12]
 800c6fc:	e011      	b.n	800c722 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 800c6fe:	4b10      	ldr	r3, [pc, #64]	@ (800c740 <dwc2_phy_update+0xc4>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a17      	ldr	r2, [pc, #92]	@ (800c760 <dwc2_phy_update+0xe4>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d302      	bcc.n	800c70e <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 800c708:	230d      	movs	r3, #13
 800c70a:	60fb      	str	r3, [r7, #12]
 800c70c:	e009      	b.n	800c722 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 800c70e:	4b0c      	ldr	r3, [pc, #48]	@ (800c740 <dwc2_phy_update+0xc4>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4a14      	ldr	r2, [pc, #80]	@ (800c764 <dwc2_phy_update+0xe8>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d302      	bcc.n	800c71e <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 800c718:	230e      	movs	r3, #14
 800c71a:	60fb      	str	r3, [r7, #12]
 800c71c:	e001      	b.n	800c722 <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 800c71e:	230f      	movs	r3, #15
 800c720:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	68db      	ldr	r3, [r3, #12]
 800c726:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	029b      	lsls	r3, r3, #10
 800c72e:	431a      	orrs	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	60da      	str	r2, [r3, #12]
  }
}
 800c734:	bf00      	nop
 800c736:	3714      	adds	r7, #20
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr
 800c740:	20000208 	.word	0x20000208
 800c744:	01e84800 	.word	0x01e84800
 800c748:	01a39ddf 	.word	0x01a39ddf
 800c74c:	016e3600 	.word	0x016e3600
 800c750:	014ca43f 	.word	0x014ca43f
 800c754:	01312cff 	.word	0x01312cff
 800c758:	011a499f 	.word	0x011a499f
 800c75c:	01067380 	.word	0x01067380
 800c760:	00f42400 	.word	0x00f42400
 800c764:	00e4e1c0 	.word	0x00e4e1c0

0800c768 <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 800c768:	b480      	push	{r7}
 800c76a:	b083      	sub	sp, #12
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	691b      	ldr	r3, [r3, #16]
 800c774:	f043 0201 	orr.w	r2, r3, #1
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c780:	b29b      	uxth	r3, r3
 800c782:	f244 2209 	movw	r2, #16905	@ 0x4209
 800c786:	4293      	cmp	r3, r2
 800c788:	d807      	bhi.n	800c79a <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 800c78a:	bf00      	nop
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	691b      	ldr	r3, [r3, #16]
 800c790:	f003 0301 	and.w	r3, r3, #1
 800c794:	2b00      	cmp	r3, #0
 800c796:	d1f9      	bne.n	800c78c <reset_core+0x24>
 800c798:	e010      	b.n	800c7bc <reset_core+0x54>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 800c79a:	bf00      	nop
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	691b      	ldr	r3, [r3, #16]
 800c7a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d0f9      	beq.n	800c79c <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	691b      	ldr	r3, [r3, #16]
 800c7ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c7b0:	f023 0301 	bic.w	r3, r3, #1
 800c7b4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 800c7bc:	bf00      	nop
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	691b      	ldr	r3, [r3, #16]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	dafb      	bge.n	800c7be <reset_core+0x56>
}
 800c7c6:	bf00      	nop
 800c7c8:	bf00      	nop
 800c7ca:	370c      	adds	r7, #12
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr

0800c7d4 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7e8:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	68fa      	ldr	r2, [r7, #12]
 800c7ee:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f7ff ff26 	bl	800c644 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f7ff ffb5 	bl	800c768 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800c804:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800c80c:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	68fa      	ldr	r2, [r7, #12]
 800c812:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800c814:	2100      	movs	r1, #0
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f7ff ff30 	bl	800c67c <dwc2_phy_update>
}
 800c81c:	bf00      	nop
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 800c824:	b580      	push	{r7, lr}
 800c826:	b086      	sub	sp, #24
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	68db      	ldr	r3, [r3, #12]
 800c830:	617b      	str	r3, [r7, #20]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c836:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg4_t ghwcfg4 = {.value = dwc2->ghwcfg4};
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c83c:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c844:	617b      	str	r3, [r7, #20]

  if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800c846:	7c3b      	ldrb	r3, [r7, #16]
 800c848:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	2b80      	cmp	r3, #128	@ 0x80
 800c850:	d114      	bne.n	800c87c <phy_hs_init+0x58>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	f043 0310 	orr.w	r3, r3, #16
 800c858:	617b      	str	r3, [r7, #20]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	f023 0308 	bic.w	r3, r3, #8
 800c860:	617b      	str	r3, [r7, #20]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c868:	617b      	str	r3, [r7, #20]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c870:	617b      	str	r3, [r7, #20]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 800c878:	617b      	str	r3, [r7, #20]
 800c87a:	e012      	b.n	800c8a2 <phy_hs_init+0x7e>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	f023 0310 	bic.w	r3, r3, #16
 800c882:	617b      	str	r3, [r7, #20]

    // Set 16-bit interface if supported
    if (ghwcfg4.phy_data_width) {
 800c884:	7b7b      	ldrb	r3, [r7, #13]
 800c886:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d004      	beq.n	800c89a <phy_hs_init+0x76>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	f043 0308 	orr.w	r3, r3, #8
 800c896:	617b      	str	r3, [r7, #20]
 800c898:	e003      	b.n	800c8a2 <phy_hs_init+0x7e>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	f023 0308 	bic.w	r3, r3, #8
 800c8a0:	617b      	str	r3, [r7, #20]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	697a      	ldr	r2, [r7, #20]
 800c8a6:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, ghwcfg2.hs_phy_type);
 800c8a8:	7c3b      	ldrb	r3, [r7, #16]
 800c8aa:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f7ff fec6 	bl	800c644 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f7ff ff55 	bl	800c768 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800c8c4:	617b      	str	r3, [r7, #20]
  gusbcfg |= (ghwcfg4.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 800c8c6:	7b7b      	ldrb	r3, [r7, #13]
 800c8c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d002      	beq.n	800c8d8 <phy_hs_init+0xb4>
 800c8d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800c8d6:	e001      	b.n	800c8dc <phy_hs_init+0xb8>
 800c8d8:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800c8dc:	697a      	ldr	r2, [r7, #20]
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	617b      	str	r3, [r7, #20]
  dwc2->gusbcfg = gusbcfg;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	697a      	ldr	r2, [r7, #20]
 800c8e6:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, ghwcfg2.hs_phy_type);
 800c8e8:	7c3b      	ldrb	r3, [r7, #16]
 800c8ea:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f7ff fec2 	bl	800c67c <dwc2_phy_update>
}
 800c8f8:	bf00      	nop
 800c8fa:	3718      	adds	r7, #24
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c90c:	0c1b      	lsrs	r3, r3, #16
 800c90e:	041b      	lsls	r3, r3, #16
 800c910:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	4a0e      	ldr	r2, [pc, #56]	@ (800c950 <check_dwc2+0x50>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d012      	beq.n	800c940 <check_dwc2+0x40>
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	4a0d      	ldr	r2, [pc, #52]	@ (800c954 <check_dwc2+0x54>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d00e      	beq.n	800c940 <check_dwc2+0x40>
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	4a0c      	ldr	r2, [pc, #48]	@ (800c958 <check_dwc2+0x58>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d00a      	beq.n	800c940 <check_dwc2+0x40>
 800c92a:	4b0c      	ldr	r3, [pc, #48]	@ (800c95c <check_dwc2+0x5c>)
 800c92c:	60bb      	str	r3, [r7, #8]
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f003 0301 	and.w	r3, r3, #1
 800c936:	2b00      	cmp	r3, #0
 800c938:	d000      	beq.n	800c93c <check_dwc2+0x3c>
 800c93a:	be00      	bkpt	0x0000
 800c93c:	2300      	movs	r3, #0
 800c93e:	e000      	b.n	800c942 <check_dwc2+0x42>
#endif

  return true;
 800c940:	2301      	movs	r3, #1
}
 800c942:	4618      	mov	r0, r3
 800c944:	3714      	adds	r7, #20
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr
 800c94e:	bf00      	nop
 800c950:	4f540000 	.word	0x4f540000
 800c954:	55310000 	.word	0x55310000
 800c958:	55320000 	.word	0x55320000
 800c95c:	e000edf0 	.word	0xe000edf0

0800c960 <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 800c960:	b480      	push	{r7}
 800c962:	b085      	sub	sp, #20
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	460b      	mov	r3, r1
 800c96a:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;
#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 800c96c:	78fb      	ldrb	r3, [r7, #3]
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d101      	bne.n	800c976 <dwc2_core_is_highspeed+0x16>
    return false;
 800c972:	2300      	movs	r3, #0
 800c974:	e00b      	b.n	800c98e <dwc2_core_is_highspeed+0x2e>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c97a:	60fb      	str	r3, [r7, #12]
  return ghwcfg2.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 800c97c:	7b3b      	ldrb	r3, [r7, #12]
 800c97e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c982:	b2db      	uxtb	r3, r3
 800c984:	2b00      	cmp	r3, #0
 800c986:	bf14      	ite	ne
 800c988:	2301      	movne	r3, #1
 800c98a:	2300      	moveq	r3, #0
 800c98c:	b2db      	uxtb	r3, r3
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3714      	adds	r7, #20
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr
	...

0800c99c <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b088      	sub	sp, #32
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	71fb      	strb	r3, [r7, #7]
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	71bb      	strb	r3, [r7, #6]
 800c9aa:	4613      	mov	r3, r2
 800c9ac:	717b      	strb	r3, [r7, #5]
 800c9ae:	79fb      	ldrb	r3, [r7, #7]
 800c9b0:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800c9b2:	7dfb      	ldrb	r3, [r7, #23]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d001      	beq.n	800c9bc <dwc2_core_init+0x20>
    rhport = 0;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800c9bc:	7dfb      	ldrb	r3, [r7, #23]
 800c9be:	4a3b      	ldr	r2, [pc, #236]	@ (800caac <dwc2_core_init+0x110>)
 800c9c0:	011b      	lsls	r3, r3, #4
 800c9c2:	4413      	add	r3, r2
 800c9c4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800c9c6:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 800c9c8:	69f8      	ldr	r0, [r7, #28]
 800c9ca:	f7ff ff99 	bl	800c900 <check_dwc2>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	f083 0301 	eor.w	r3, r3, #1
 800c9d4:	b2db      	uxtb	r3, r3
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00a      	beq.n	800c9f0 <dwc2_core_init+0x54>
 800c9da:	4b35      	ldr	r3, [pc, #212]	@ (800cab0 <dwc2_core_init+0x114>)
 800c9dc:	61bb      	str	r3, [r7, #24]
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f003 0301 	and.w	r3, r3, #1
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d000      	beq.n	800c9ec <dwc2_core_init+0x50>
 800c9ea:	be00      	bkpt	0x0000
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	e058      	b.n	800caa2 <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	f023 0201 	bic.w	r2, r3, #1
 800c9f8:	69fb      	ldr	r3, [r7, #28]
 800c9fa:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 800c9fc:	79bb      	ldrb	r3, [r7, #6]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d003      	beq.n	800ca0a <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 800ca02:	69f8      	ldr	r0, [r7, #28]
 800ca04:	f7ff ff0e 	bl	800c824 <phy_hs_init>
 800ca08:	e002      	b.n	800ca10 <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 800ca0a:	69f8      	ldr	r0, [r7, #28]
 800ca0c:	f7ff fee2 	bl	800c7d4 <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 800ca10:	69fb      	ldr	r3, [r7, #28]
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	f043 0207 	orr.w	r2, r3, #7
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800ca22:	f023 020f 	bic.w	r2, r3, #15
 800ca26:	69fb      	ldr	r3, [r7, #28]
 800ca28:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	60fb      	str	r3, [r7, #12]
 800ca30:	2310      	movs	r3, #16
 800ca32:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800ca34:	7afb      	ldrb	r3, [r7, #11]
 800ca36:	019b      	lsls	r3, r3, #6
 800ca38:	f043 0220 	orr.w	r2, r3, #32
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800ca40:	bf00      	nop
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	691b      	ldr	r3, [r3, #16]
 800ca46:	f003 0320 	and.w	r3, r3, #32
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d1f9      	bne.n	800ca42 <dwc2_core_init+0xa6>
}
 800ca4e:	bf00      	nop
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	2210      	movs	r2, #16
 800ca58:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800ca5a:	bf00      	nop
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	691b      	ldr	r3, [r3, #16]
 800ca60:	f003 0310 	and.w	r3, r3, #16
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d1f9      	bne.n	800ca5c <dwc2_core_init+0xc0>
}
 800ca68:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ca70:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 800ca72:	69fb      	ldr	r3, [r7, #28]
 800ca74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ca78:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 800ca7a:	69fb      	ldr	r3, [r7, #28]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 800ca80:	797b      	ldrb	r3, [r7, #5]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d006      	beq.n	800ca94 <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	689b      	ldr	r3, [r3, #8]
 800ca8a:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 800ca8e:	69fb      	ldr	r3, [r7, #28]
 800ca90:	609a      	str	r2, [r3, #8]
 800ca92:	e005      	b.n	800caa0 <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 800ca94:	69fb      	ldr	r3, [r7, #28]
 800ca96:	699b      	ldr	r3, [r3, #24]
 800ca98:	f043 0210 	orr.w	r2, r3, #16
 800ca9c:	69fb      	ldr	r3, [r7, #28]
 800ca9e:	619a      	str	r2, [r3, #24]
  }

  return true;
 800caa0:	2301      	movs	r3, #1
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3720      	adds	r7, #32
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	0800fa28 	.word	0x0800fa28
 800cab0:	e000edf0 	.word	0xe000edf0

0800cab4 <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 800cab4:	b480      	push	{r7}
 800cab6:	b08f      	sub	sp, #60	@ 0x3c
 800cab8:	af00      	add	r7, sp, #0
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	4613      	mov	r3, r2
 800cac0:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cac8:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 800caca:	88fb      	ldrh	r3, [r7, #6]
 800cacc:	089b      	lsrs	r3, r3, #2
 800cace:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 800cad0:	e00b      	b.n	800caea <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 800cad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	68ba      	ldr	r2, [r7, #8]
 800cad8:	627a      	str	r2, [r7, #36]	@ 0x24
 800cada:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 800cadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cade:	6a3a      	ldr	r2, [r7, #32]
 800cae0:	601a      	str	r2, [r3, #0]
}
 800cae2:	bf00      	nop
    dst += 4;
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	3304      	adds	r3, #4
 800cae8:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 800caea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800caec:	1e5a      	subs	r2, r3, #1
 800caee:	86fa      	strh	r2, [r7, #54]	@ 0x36
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d1ee      	bne.n	800cad2 <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 800caf4:	88fb      	ldrh	r3, [r7, #6]
 800caf6:	b2db      	uxtb	r3, r3
 800caf8:	f003 0303 	and.w	r3, r3, #3
 800cafc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 800cb00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d020      	beq.n	800cb4a <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 800cb08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cb0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb10:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 800cb1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d907      	bls.n	800cb32 <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	3301      	adds	r3, #1
 800cb26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb28:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 800cb2a:	69ba      	ldr	r2, [r7, #24]
 800cb2c:	0a12      	lsrs	r2, r2, #8
 800cb2e:	b2d2      	uxtb	r2, r2
 800cb30:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 800cb32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	d907      	bls.n	800cb4a <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	3302      	adds	r3, #2
 800cb3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb40:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 800cb42:	697a      	ldr	r2, [r7, #20]
 800cb44:	0c12      	lsrs	r2, r2, #16
 800cb46:	b2d2      	uxtb	r2, r2
 800cb48:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800cb4a:	bf00      	nop
 800cb4c:	373c      	adds	r7, #60	@ 0x3c
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr

0800cb56 <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 800cb56:	b480      	push	{r7}
 800cb58:	b08b      	sub	sp, #44	@ 0x2c
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	60f8      	str	r0, [r7, #12]
 800cb5e:	607a      	str	r2, [r7, #4]
 800cb60:	461a      	mov	r2, r3
 800cb62:	460b      	mov	r3, r1
 800cb64:	72fb      	strb	r3, [r7, #11]
 800cb66:	4613      	mov	r3, r2
 800cb68:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 800cb6a:	7afb      	ldrb	r3, [r7, #11]
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	031b      	lsls	r3, r3, #12
 800cb70:	68fa      	ldr	r2, [r7, #12]
 800cb72:	4413      	add	r3, r2
 800cb74:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 800cb76:	893b      	ldrh	r3, [r7, #8]
 800cb78:	089b      	lsrs	r3, r3, #2
 800cb7a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 800cb7c:	e008      	b.n	800cb90 <dfifo_write_packet+0x3a>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	601a      	str	r2, [r3, #0]
    src += 4;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	3304      	adds	r3, #4
 800cb8e:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 800cb90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cb92:	1e5a      	subs	r2, r3, #1
 800cb94:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d1f1      	bne.n	800cb7e <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 800cb9a:	893b      	ldrh	r3, [r7, #8]
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	f003 0303 	and.w	r3, r3, #3
 800cba2:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 800cba4:	7efb      	ldrb	r3, [r7, #27]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d019      	beq.n	800cbde <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 800cbb0:	7efb      	ldrb	r3, [r7, #27]
 800cbb2:	2b01      	cmp	r3, #1
 800cbb4:	d906      	bls.n	800cbc4 <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	021b      	lsls	r3, r3, #8
 800cbbe:	6a3a      	ldr	r2, [r7, #32]
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 800cbc4:	7efb      	ldrb	r3, [r7, #27]
 800cbc6:	2b02      	cmp	r3, #2
 800cbc8:	d906      	bls.n	800cbd8 <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	3302      	adds	r3, #2
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	041b      	lsls	r3, r3, #16
 800cbd2:	6a3a      	ldr	r2, [r7, #32]
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 800cbd8:	69fb      	ldr	r3, [r7, #28]
 800cbda:	6a3a      	ldr	r2, [r7, #32]
 800cbdc:	601a      	str	r2, [r3, #0]
  }
}
 800cbde:	bf00      	nop
 800cbe0:	372c      	adds	r7, #44	@ 0x2c
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr
	...

0800cbec <tusb_rhport_init>:
}

//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+
bool tusb_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b086      	sub	sp, #24
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	6039      	str	r1, [r7, #0]
 800cbf6:	71fb      	strb	r3, [r7, #7]
  //  backward compatible called with tusb_init(void)
  #if defined(TUD_OPT_RHPORT) || defined(TUH_OPT_RHPORT)
  if (rh_init == NULL) {
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d11f      	bne.n	800cc3e <tusb_rhport_init+0x52>
    #if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
    // init device stack CFG_TUSB_RHPORTx_MODE must be defined
    const tusb_rhport_init_t dev_init = {
 800cbfe:	2301      	movs	r3, #1
 800cc00:	723b      	strb	r3, [r7, #8]
 800cc02:	2300      	movs	r3, #0
 800cc04:	727b      	strb	r3, [r7, #9]
      .role = TUSB_ROLE_DEVICE,
      .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
    };
    TU_ASSERT ( tud_rhport_init(TUD_OPT_RHPORT, &dev_init) );
 800cc06:	f107 0308 	add.w	r3, r7, #8
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	f7fc fa63 	bl	80090d8 <tud_rhport_init>
 800cc12:	4603      	mov	r3, r0
 800cc14:	f083 0301 	eor.w	r3, r3, #1
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d00a      	beq.n	800cc34 <tusb_rhport_init+0x48>
 800cc1e:	4b23      	ldr	r3, [pc, #140]	@ (800ccac <tusb_rhport_init+0xc0>)
 800cc20:	60fb      	str	r3, [r7, #12]
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f003 0301 	and.w	r3, r3, #1
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d000      	beq.n	800cc30 <tusb_rhport_init+0x44>
 800cc2e:	be00      	bkpt	0x0000
 800cc30:	2300      	movs	r3, #0
 800cc32:	e036      	b.n	800cca2 <tusb_rhport_init+0xb6>
    _tusb_rhport_role[TUD_OPT_RHPORT] = TUSB_ROLE_DEVICE;
 800cc34:	4b1e      	ldr	r3, [pc, #120]	@ (800ccb0 <tusb_rhport_init+0xc4>)
 800cc36:	2201      	movs	r2, #1
 800cc38:	701a      	strb	r2, [r3, #0]
    };
    TU_ASSERT( tuh_rhport_init(TUH_OPT_RHPORT, &host_init) );
    _tusb_rhport_role[TUH_OPT_RHPORT] = TUSB_ROLE_HOST;
    #endif

    return true;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	e031      	b.n	800cca2 <tusb_rhport_init+0xb6>
  }
  #endif

  // new API with explicit rhport and role
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 800cc3e:	79fb      	ldrb	r3, [r7, #7]
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d803      	bhi.n	800cc4c <tusb_rhport_init+0x60>
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d10a      	bne.n	800cc62 <tusb_rhport_init+0x76>
 800cc4c:	4b17      	ldr	r3, [pc, #92]	@ (800ccac <tusb_rhport_init+0xc0>)
 800cc4e:	613b      	str	r3, [r7, #16]
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f003 0301 	and.w	r3, r3, #1
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d000      	beq.n	800cc5e <tusb_rhport_init+0x72>
 800cc5c:	be00      	bkpt	0x0000
 800cc5e:	2300      	movs	r3, #0
 800cc60:	e01f      	b.n	800cca2 <tusb_rhport_init+0xb6>
  _tusb_rhport_role[rhport] = rh_init->role;
 800cc62:	79fb      	ldrb	r3, [r7, #7]
 800cc64:	683a      	ldr	r2, [r7, #0]
 800cc66:	7811      	ldrb	r1, [r2, #0]
 800cc68:	4a11      	ldr	r2, [pc, #68]	@ (800ccb0 <tusb_rhport_init+0xc4>)
 800cc6a:	54d1      	strb	r1, [r2, r3]

  #if CFG_TUD_ENABLED
  if (rh_init->role == TUSB_ROLE_DEVICE) {
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d115      	bne.n	800cca0 <tusb_rhport_init+0xb4>
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
 800cc74:	79fb      	ldrb	r3, [r7, #7]
 800cc76:	6839      	ldr	r1, [r7, #0]
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7fc fa2d 	bl	80090d8 <tud_rhport_init>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	f083 0301 	eor.w	r3, r3, #1
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d00a      	beq.n	800cca0 <tusb_rhport_init+0xb4>
 800cc8a:	4b08      	ldr	r3, [pc, #32]	@ (800ccac <tusb_rhport_init+0xc0>)
 800cc8c:	617b      	str	r3, [r7, #20]
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f003 0301 	and.w	r3, r3, #1
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d000      	beq.n	800cc9c <tusb_rhport_init+0xb0>
 800cc9a:	be00      	bkpt	0x0000
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	e000      	b.n	800cca2 <tusb_rhport_init+0xb6>
  if (rh_init->role == TUSB_ROLE_HOST) {
    TU_ASSERT(tuh_rhport_init(rhport, rh_init));
  }
  #endif

  return true;
 800cca0:	2301      	movs	r3, #1
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3718      	adds	r7, #24
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	e000edf0 	.word	0xe000edf0
 800ccb0:	200018f4 	.word	0x200018f4

0800ccb4 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800ccb4:	b480      	push	{r7}
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d106      	bne.n	800ccda <tu_edpt_claim+0x26>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ccd4:	b2db      	uxtb	r3, r3
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d001      	beq.n	800ccde <tu_edpt_claim+0x2a>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	e01e      	b.n	800cd1c <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d108      	bne.n	800ccfe <tu_edpt_claim+0x4a>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d101      	bne.n	800ccfe <tu_edpt_claim+0x4a>
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e000      	b.n	800cd00 <tu_edpt_claim+0x4c>
 800ccfe:	2300      	movs	r3, #0
 800cd00:	73fb      	strb	r3, [r7, #15]
 800cd02:	7bfb      	ldrb	r3, [r7, #15]
 800cd04:	f003 0301 	and.w	r3, r3, #1
 800cd08:	73fb      	strb	r3, [r7, #15]
  if (available) {
 800cd0a:	7bfb      	ldrb	r3, [r7, #15]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d004      	beq.n	800cd1a <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	7813      	ldrb	r3, [r2, #0]
 800cd14:	f043 0304 	orr.w	r3, r3, #4
 800cd18:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 800cd1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3714      	adds	r7, #20
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800cd3a:	b2db      	uxtb	r3, r3
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d108      	bne.n	800cd52 <tu_edpt_release+0x2a>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d101      	bne.n	800cd52 <tu_edpt_release+0x2a>
 800cd4e:	2301      	movs	r3, #1
 800cd50:	e000      	b.n	800cd54 <tu_edpt_release+0x2c>
 800cd52:	2300      	movs	r3, #0
 800cd54:	73fb      	strb	r3, [r7, #15]
 800cd56:	7bfb      	ldrb	r3, [r7, #15]
 800cd58:	f003 0301 	and.w	r3, r3, #1
 800cd5c:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 800cd5e:	7bfb      	ldrb	r3, [r7, #15]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d004      	beq.n	800cd6e <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	7813      	ldrb	r3, [r2, #0]
 800cd68:	f023 0304 	bic.w	r3, r3, #4
 800cd6c:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 800cd6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3714      	adds	r7, #20
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr

0800cd7c <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 800cd7c:	b480      	push	{r7}
 800cd7e:	b08b      	sub	sp, #44	@ 0x2c
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	460b      	mov	r3, r1
 800cd86:	70fb      	strb	r3, [r7, #3]
 800cd88:	4613      	mov	r3, r2
 800cd8a:	70bb      	strb	r3, [r7, #2]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	889b      	ldrh	r3, [r3, #4]
 800cd94:	b29b      	uxth	r3, r3
 800cd96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd9a:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800cd9c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	78db      	ldrb	r3, [r3, #3]
 800cda2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	2b03      	cmp	r3, #3
 800cdaa:	d059      	beq.n	800ce60 <tu_edpt_validate+0xe4>
 800cdac:	2b03      	cmp	r3, #3
 800cdae:	dc6e      	bgt.n	800ce8e <tu_edpt_validate+0x112>
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d002      	beq.n	800cdba <tu_edpt_validate+0x3e>
 800cdb4:	2b02      	cmp	r3, #2
 800cdb6:	d018      	beq.n	800cdea <tu_edpt_validate+0x6e>
 800cdb8:	e069      	b.n	800ce8e <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800cdba:	78fb      	ldrb	r3, [r7, #3]
 800cdbc:	2b02      	cmp	r3, #2
 800cdbe:	d102      	bne.n	800cdc6 <tu_edpt_validate+0x4a>
 800cdc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cdc4:	e001      	b.n	800cdca <tu_edpt_validate+0x4e>
 800cdc6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800cdca:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 800cdcc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800cdce:	8a7b      	ldrh	r3, [r7, #18]
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d95e      	bls.n	800ce92 <tu_edpt_validate+0x116>
 800cdd4:	4b35      	ldr	r3, [pc, #212]	@ (800ceac <tu_edpt_validate+0x130>)
 800cdd6:	60fb      	str	r3, [r7, #12]
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f003 0301 	and.w	r3, r3, #1
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d000      	beq.n	800cde6 <tu_edpt_validate+0x6a>
 800cde4:	be00      	bkpt	0x0000
 800cde6:	2300      	movs	r3, #0
 800cde8:	e059      	b.n	800ce9e <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 800cdea:	78fb      	ldrb	r3, [r7, #3]
 800cdec:	2b02      	cmp	r3, #2
 800cdee:	d10e      	bne.n	800ce0e <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 800cdf0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cdf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cdf6:	d04e      	beq.n	800ce96 <tu_edpt_validate+0x11a>
 800cdf8:	4b2c      	ldr	r3, [pc, #176]	@ (800ceac <tu_edpt_validate+0x130>)
 800cdfa:	617b      	str	r3, [r7, #20]
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f003 0301 	and.w	r3, r3, #1
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d000      	beq.n	800ce0a <tu_edpt_validate+0x8e>
 800ce08:	be00      	bkpt	0x0000
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	e047      	b.n	800ce9e <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 800ce0e:	78bb      	ldrb	r3, [r7, #2]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d00e      	beq.n	800ce32 <tu_edpt_validate+0xb6>
 800ce14:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ce16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce1a:	d10a      	bne.n	800ce32 <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 800ce20:	69fb      	ldr	r3, [r7, #28]
 800ce22:	2200      	movs	r2, #0
 800ce24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ce28:	711a      	strb	r2, [r3, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 800ce2e:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 800ce30:	e031      	b.n	800ce96 <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 800ce32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ce34:	2b08      	cmp	r3, #8
 800ce36:	d02e      	beq.n	800ce96 <tu_edpt_validate+0x11a>
 800ce38:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ce3a:	2b10      	cmp	r3, #16
 800ce3c:	d02b      	beq.n	800ce96 <tu_edpt_validate+0x11a>
 800ce3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ce40:	2b20      	cmp	r3, #32
 800ce42:	d028      	beq.n	800ce96 <tu_edpt_validate+0x11a>
 800ce44:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ce46:	2b40      	cmp	r3, #64	@ 0x40
 800ce48:	d025      	beq.n	800ce96 <tu_edpt_validate+0x11a>
 800ce4a:	4b18      	ldr	r3, [pc, #96]	@ (800ceac <tu_edpt_validate+0x130>)
 800ce4c:	61bb      	str	r3, [r7, #24]
 800ce4e:	69bb      	ldr	r3, [r7, #24]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f003 0301 	and.w	r3, r3, #1
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d000      	beq.n	800ce5c <tu_edpt_validate+0xe0>
 800ce5a:	be00      	bkpt	0x0000
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	e01e      	b.n	800ce9e <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800ce60:	78fb      	ldrb	r3, [r7, #3]
 800ce62:	2b02      	cmp	r3, #2
 800ce64:	d102      	bne.n	800ce6c <tu_edpt_validate+0xf0>
 800ce66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce6a:	e000      	b.n	800ce6e <tu_edpt_validate+0xf2>
 800ce6c:	2340      	movs	r3, #64	@ 0x40
 800ce6e:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800ce70:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ce72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d910      	bls.n	800ce9a <tu_edpt_validate+0x11e>
 800ce78:	4b0c      	ldr	r3, [pc, #48]	@ (800ceac <tu_edpt_validate+0x130>)
 800ce7a:	623b      	str	r3, [r7, #32]
 800ce7c:	6a3b      	ldr	r3, [r7, #32]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f003 0301 	and.w	r3, r3, #1
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d000      	beq.n	800ce8a <tu_edpt_validate+0x10e>
 800ce88:	be00      	bkpt	0x0000
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	e007      	b.n	800ce9e <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	e005      	b.n	800ce9e <tu_edpt_validate+0x122>
      break;
 800ce92:	bf00      	nop
 800ce94:	e002      	b.n	800ce9c <tu_edpt_validate+0x120>
      break;
 800ce96:	bf00      	nop
 800ce98:	e000      	b.n	800ce9c <tu_edpt_validate+0x120>
      break;
 800ce9a:	bf00      	nop
  }

  return true;
 800ce9c:	2301      	movs	r3, #1
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	372c      	adds	r7, #44	@ 0x2c
 800cea2:	46bd      	mov	sp, r7
 800cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea8:	4770      	bx	lr
 800ceaa:	bf00      	nop
 800ceac:	e000edf0 	.word	0xe000edf0

0800ceb0 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 800ceb0:	b480      	push	{r7}
 800ceb2:	b08d      	sub	sp, #52	@ 0x34
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	60b9      	str	r1, [r7, #8]
 800ceba:	4611      	mov	r1, r2
 800cebc:	461a      	mov	r2, r3
 800cebe:	460b      	mov	r3, r1
 800cec0:	80fb      	strh	r3, [r7, #6]
 800cec2:	4613      	mov	r3, r2
 800cec4:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800ceca:	88fb      	ldrh	r3, [r7, #6]
 800cecc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cece:	4413      	add	r3, r2
 800ced0:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 800ced2:	e027      	b.n	800cf24 <tu_edpt_bind_driver+0x74>
 800ced4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ced6:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800ced8:	6a3b      	ldr	r3, [r7, #32]
 800ceda:	3301      	adds	r3, #1
 800cedc:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 800cede:	2b05      	cmp	r3, #5
 800cee0:	d116      	bne.n	800cf10 <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800cee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cee4:	789b      	ldrb	r3, [r3, #2]
 800cee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ceea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ceee:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800cef0:	7fbb      	ldrb	r3, [r7, #30]
 800cef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cef6:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800cef8:	005b      	lsls	r3, r3, #1
 800cefa:	68fa      	ldr	r2, [r7, #12]
 800cefc:	4413      	add	r3, r2
 800cefe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cf02:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800cf04:	7ffa      	ldrb	r2, [r7, #31]
 800cf06:	09d2      	lsrs	r2, r2, #7
 800cf08:	b2d2      	uxtb	r2, r2
 800cf0a:	4611      	mov	r1, r2
 800cf0c:	797a      	ldrb	r2, [r7, #5]
 800cf0e:	545a      	strb	r2, [r3, r1]
 800cf10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf12:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 800cf22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 800cf24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d3d3      	bcc.n	800ced4 <tu_edpt_bind_driver+0x24>
  }
}
 800cf2c:	bf00      	nop
 800cf2e:	bf00      	nop
 800cf30:	3734      	adds	r7, #52	@ 0x34
 800cf32:	46bd      	mov	sp, r7
 800cf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf38:	4770      	bx	lr

0800cf3a <atoi>:
 800cf3a:	220a      	movs	r2, #10
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	f000 b977 	b.w	800d230 <strtol>
	...

0800cf44 <sniprintf>:
 800cf44:	b40c      	push	{r2, r3}
 800cf46:	b530      	push	{r4, r5, lr}
 800cf48:	4b18      	ldr	r3, [pc, #96]	@ (800cfac <sniprintf+0x68>)
 800cf4a:	1e0c      	subs	r4, r1, #0
 800cf4c:	681d      	ldr	r5, [r3, #0]
 800cf4e:	b09d      	sub	sp, #116	@ 0x74
 800cf50:	da08      	bge.n	800cf64 <sniprintf+0x20>
 800cf52:	238b      	movs	r3, #139	@ 0x8b
 800cf54:	602b      	str	r3, [r5, #0]
 800cf56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf5a:	b01d      	add	sp, #116	@ 0x74
 800cf5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf60:	b002      	add	sp, #8
 800cf62:	4770      	bx	lr
 800cf64:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cf68:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cf6c:	f04f 0300 	mov.w	r3, #0
 800cf70:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cf72:	bf14      	ite	ne
 800cf74:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800cf78:	4623      	moveq	r3, r4
 800cf7a:	9304      	str	r3, [sp, #16]
 800cf7c:	9307      	str	r3, [sp, #28]
 800cf7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cf82:	9002      	str	r0, [sp, #8]
 800cf84:	9006      	str	r0, [sp, #24]
 800cf86:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cf8a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cf8c:	ab21      	add	r3, sp, #132	@ 0x84
 800cf8e:	a902      	add	r1, sp, #8
 800cf90:	4628      	mov	r0, r5
 800cf92:	9301      	str	r3, [sp, #4]
 800cf94:	f000 fa8e 	bl	800d4b4 <_svfiprintf_r>
 800cf98:	1c43      	adds	r3, r0, #1
 800cf9a:	bfbc      	itt	lt
 800cf9c:	238b      	movlt	r3, #139	@ 0x8b
 800cf9e:	602b      	strlt	r3, [r5, #0]
 800cfa0:	2c00      	cmp	r4, #0
 800cfa2:	d0da      	beq.n	800cf5a <sniprintf+0x16>
 800cfa4:	9b02      	ldr	r3, [sp, #8]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	701a      	strb	r2, [r3, #0]
 800cfaa:	e7d6      	b.n	800cf5a <sniprintf+0x16>
 800cfac:	20000250 	.word	0x20000250

0800cfb0 <siprintf>:
 800cfb0:	b40e      	push	{r1, r2, r3}
 800cfb2:	b510      	push	{r4, lr}
 800cfb4:	b09d      	sub	sp, #116	@ 0x74
 800cfb6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800cfb8:	9002      	str	r0, [sp, #8]
 800cfba:	9006      	str	r0, [sp, #24]
 800cfbc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cfc0:	480a      	ldr	r0, [pc, #40]	@ (800cfec <siprintf+0x3c>)
 800cfc2:	9107      	str	r1, [sp, #28]
 800cfc4:	9104      	str	r1, [sp, #16]
 800cfc6:	490a      	ldr	r1, [pc, #40]	@ (800cff0 <siprintf+0x40>)
 800cfc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfcc:	9105      	str	r1, [sp, #20]
 800cfce:	2400      	movs	r4, #0
 800cfd0:	a902      	add	r1, sp, #8
 800cfd2:	6800      	ldr	r0, [r0, #0]
 800cfd4:	9301      	str	r3, [sp, #4]
 800cfd6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800cfd8:	f000 fa6c 	bl	800d4b4 <_svfiprintf_r>
 800cfdc:	9b02      	ldr	r3, [sp, #8]
 800cfde:	701c      	strb	r4, [r3, #0]
 800cfe0:	b01d      	add	sp, #116	@ 0x74
 800cfe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfe6:	b003      	add	sp, #12
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	20000250 	.word	0x20000250
 800cff0:	ffff0208 	.word	0xffff0208

0800cff4 <std>:
 800cff4:	2300      	movs	r3, #0
 800cff6:	b510      	push	{r4, lr}
 800cff8:	4604      	mov	r4, r0
 800cffa:	e9c0 3300 	strd	r3, r3, [r0]
 800cffe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d002:	6083      	str	r3, [r0, #8]
 800d004:	8181      	strh	r1, [r0, #12]
 800d006:	6643      	str	r3, [r0, #100]	@ 0x64
 800d008:	81c2      	strh	r2, [r0, #14]
 800d00a:	6183      	str	r3, [r0, #24]
 800d00c:	4619      	mov	r1, r3
 800d00e:	2208      	movs	r2, #8
 800d010:	305c      	adds	r0, #92	@ 0x5c
 800d012:	f000 f935 	bl	800d280 <memset>
 800d016:	4b0d      	ldr	r3, [pc, #52]	@ (800d04c <std+0x58>)
 800d018:	6263      	str	r3, [r4, #36]	@ 0x24
 800d01a:	4b0d      	ldr	r3, [pc, #52]	@ (800d050 <std+0x5c>)
 800d01c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d01e:	4b0d      	ldr	r3, [pc, #52]	@ (800d054 <std+0x60>)
 800d020:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d022:	4b0d      	ldr	r3, [pc, #52]	@ (800d058 <std+0x64>)
 800d024:	6323      	str	r3, [r4, #48]	@ 0x30
 800d026:	4b0d      	ldr	r3, [pc, #52]	@ (800d05c <std+0x68>)
 800d028:	6224      	str	r4, [r4, #32]
 800d02a:	429c      	cmp	r4, r3
 800d02c:	d006      	beq.n	800d03c <std+0x48>
 800d02e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d032:	4294      	cmp	r4, r2
 800d034:	d002      	beq.n	800d03c <std+0x48>
 800d036:	33d0      	adds	r3, #208	@ 0xd0
 800d038:	429c      	cmp	r4, r3
 800d03a:	d105      	bne.n	800d048 <std+0x54>
 800d03c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d044:	f000 b9aa 	b.w	800d39c <__retarget_lock_init_recursive>
 800d048:	bd10      	pop	{r4, pc}
 800d04a:	bf00      	nop
 800d04c:	0800df0d 	.word	0x0800df0d
 800d050:	0800df2f 	.word	0x0800df2f
 800d054:	0800df67 	.word	0x0800df67
 800d058:	0800df8b 	.word	0x0800df8b
 800d05c:	200018f8 	.word	0x200018f8

0800d060 <stdio_exit_handler>:
 800d060:	4a02      	ldr	r2, [pc, #8]	@ (800d06c <stdio_exit_handler+0xc>)
 800d062:	4903      	ldr	r1, [pc, #12]	@ (800d070 <stdio_exit_handler+0x10>)
 800d064:	4803      	ldr	r0, [pc, #12]	@ (800d074 <stdio_exit_handler+0x14>)
 800d066:	f000 b8ed 	b.w	800d244 <_fwalk_sglue>
 800d06a:	bf00      	nop
 800d06c:	20000244 	.word	0x20000244
 800d070:	0800dea5 	.word	0x0800dea5
 800d074:	20000254 	.word	0x20000254

0800d078 <cleanup_stdio>:
 800d078:	6841      	ldr	r1, [r0, #4]
 800d07a:	4b0c      	ldr	r3, [pc, #48]	@ (800d0ac <cleanup_stdio+0x34>)
 800d07c:	4299      	cmp	r1, r3
 800d07e:	b510      	push	{r4, lr}
 800d080:	4604      	mov	r4, r0
 800d082:	d001      	beq.n	800d088 <cleanup_stdio+0x10>
 800d084:	f000 ff0e 	bl	800dea4 <_fflush_r>
 800d088:	68a1      	ldr	r1, [r4, #8]
 800d08a:	4b09      	ldr	r3, [pc, #36]	@ (800d0b0 <cleanup_stdio+0x38>)
 800d08c:	4299      	cmp	r1, r3
 800d08e:	d002      	beq.n	800d096 <cleanup_stdio+0x1e>
 800d090:	4620      	mov	r0, r4
 800d092:	f000 ff07 	bl	800dea4 <_fflush_r>
 800d096:	68e1      	ldr	r1, [r4, #12]
 800d098:	4b06      	ldr	r3, [pc, #24]	@ (800d0b4 <cleanup_stdio+0x3c>)
 800d09a:	4299      	cmp	r1, r3
 800d09c:	d004      	beq.n	800d0a8 <cleanup_stdio+0x30>
 800d09e:	4620      	mov	r0, r4
 800d0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0a4:	f000 befe 	b.w	800dea4 <_fflush_r>
 800d0a8:	bd10      	pop	{r4, pc}
 800d0aa:	bf00      	nop
 800d0ac:	200018f8 	.word	0x200018f8
 800d0b0:	20001960 	.word	0x20001960
 800d0b4:	200019c8 	.word	0x200019c8

0800d0b8 <global_stdio_init.part.0>:
 800d0b8:	b510      	push	{r4, lr}
 800d0ba:	4b0b      	ldr	r3, [pc, #44]	@ (800d0e8 <global_stdio_init.part.0+0x30>)
 800d0bc:	4c0b      	ldr	r4, [pc, #44]	@ (800d0ec <global_stdio_init.part.0+0x34>)
 800d0be:	4a0c      	ldr	r2, [pc, #48]	@ (800d0f0 <global_stdio_init.part.0+0x38>)
 800d0c0:	601a      	str	r2, [r3, #0]
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	2104      	movs	r1, #4
 800d0c8:	f7ff ff94 	bl	800cff4 <std>
 800d0cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d0d0:	2201      	movs	r2, #1
 800d0d2:	2109      	movs	r1, #9
 800d0d4:	f7ff ff8e 	bl	800cff4 <std>
 800d0d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d0dc:	2202      	movs	r2, #2
 800d0de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0e2:	2112      	movs	r1, #18
 800d0e4:	f7ff bf86 	b.w	800cff4 <std>
 800d0e8:	20001a30 	.word	0x20001a30
 800d0ec:	200018f8 	.word	0x200018f8
 800d0f0:	0800d061 	.word	0x0800d061

0800d0f4 <__sfp_lock_acquire>:
 800d0f4:	4801      	ldr	r0, [pc, #4]	@ (800d0fc <__sfp_lock_acquire+0x8>)
 800d0f6:	f000 b952 	b.w	800d39e <__retarget_lock_acquire_recursive>
 800d0fa:	bf00      	nop
 800d0fc:	20001a35 	.word	0x20001a35

0800d100 <__sfp_lock_release>:
 800d100:	4801      	ldr	r0, [pc, #4]	@ (800d108 <__sfp_lock_release+0x8>)
 800d102:	f000 b94d 	b.w	800d3a0 <__retarget_lock_release_recursive>
 800d106:	bf00      	nop
 800d108:	20001a35 	.word	0x20001a35

0800d10c <__sinit>:
 800d10c:	b510      	push	{r4, lr}
 800d10e:	4604      	mov	r4, r0
 800d110:	f7ff fff0 	bl	800d0f4 <__sfp_lock_acquire>
 800d114:	6a23      	ldr	r3, [r4, #32]
 800d116:	b11b      	cbz	r3, 800d120 <__sinit+0x14>
 800d118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d11c:	f7ff bff0 	b.w	800d100 <__sfp_lock_release>
 800d120:	4b04      	ldr	r3, [pc, #16]	@ (800d134 <__sinit+0x28>)
 800d122:	6223      	str	r3, [r4, #32]
 800d124:	4b04      	ldr	r3, [pc, #16]	@ (800d138 <__sinit+0x2c>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d1f5      	bne.n	800d118 <__sinit+0xc>
 800d12c:	f7ff ffc4 	bl	800d0b8 <global_stdio_init.part.0>
 800d130:	e7f2      	b.n	800d118 <__sinit+0xc>
 800d132:	bf00      	nop
 800d134:	0800d079 	.word	0x0800d079
 800d138:	20001a30 	.word	0x20001a30

0800d13c <_strtol_l.isra.0>:
 800d13c:	2b24      	cmp	r3, #36	@ 0x24
 800d13e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d142:	4686      	mov	lr, r0
 800d144:	4690      	mov	r8, r2
 800d146:	d801      	bhi.n	800d14c <_strtol_l.isra.0+0x10>
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d106      	bne.n	800d15a <_strtol_l.isra.0+0x1e>
 800d14c:	f000 f8fc 	bl	800d348 <__errno>
 800d150:	2316      	movs	r3, #22
 800d152:	6003      	str	r3, [r0, #0]
 800d154:	2000      	movs	r0, #0
 800d156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d15a:	4834      	ldr	r0, [pc, #208]	@ (800d22c <_strtol_l.isra.0+0xf0>)
 800d15c:	460d      	mov	r5, r1
 800d15e:	462a      	mov	r2, r5
 800d160:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d164:	5d06      	ldrb	r6, [r0, r4]
 800d166:	f016 0608 	ands.w	r6, r6, #8
 800d16a:	d1f8      	bne.n	800d15e <_strtol_l.isra.0+0x22>
 800d16c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d16e:	d110      	bne.n	800d192 <_strtol_l.isra.0+0x56>
 800d170:	782c      	ldrb	r4, [r5, #0]
 800d172:	2601      	movs	r6, #1
 800d174:	1c95      	adds	r5, r2, #2
 800d176:	f033 0210 	bics.w	r2, r3, #16
 800d17a:	d115      	bne.n	800d1a8 <_strtol_l.isra.0+0x6c>
 800d17c:	2c30      	cmp	r4, #48	@ 0x30
 800d17e:	d10d      	bne.n	800d19c <_strtol_l.isra.0+0x60>
 800d180:	782a      	ldrb	r2, [r5, #0]
 800d182:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d186:	2a58      	cmp	r2, #88	@ 0x58
 800d188:	d108      	bne.n	800d19c <_strtol_l.isra.0+0x60>
 800d18a:	786c      	ldrb	r4, [r5, #1]
 800d18c:	3502      	adds	r5, #2
 800d18e:	2310      	movs	r3, #16
 800d190:	e00a      	b.n	800d1a8 <_strtol_l.isra.0+0x6c>
 800d192:	2c2b      	cmp	r4, #43	@ 0x2b
 800d194:	bf04      	itt	eq
 800d196:	782c      	ldrbeq	r4, [r5, #0]
 800d198:	1c95      	addeq	r5, r2, #2
 800d19a:	e7ec      	b.n	800d176 <_strtol_l.isra.0+0x3a>
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1f6      	bne.n	800d18e <_strtol_l.isra.0+0x52>
 800d1a0:	2c30      	cmp	r4, #48	@ 0x30
 800d1a2:	bf14      	ite	ne
 800d1a4:	230a      	movne	r3, #10
 800d1a6:	2308      	moveq	r3, #8
 800d1a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d1ac:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	fbbc f9f3 	udiv	r9, ip, r3
 800d1b6:	4610      	mov	r0, r2
 800d1b8:	fb03 ca19 	mls	sl, r3, r9, ip
 800d1bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d1c0:	2f09      	cmp	r7, #9
 800d1c2:	d80f      	bhi.n	800d1e4 <_strtol_l.isra.0+0xa8>
 800d1c4:	463c      	mov	r4, r7
 800d1c6:	42a3      	cmp	r3, r4
 800d1c8:	dd1b      	ble.n	800d202 <_strtol_l.isra.0+0xc6>
 800d1ca:	1c57      	adds	r7, r2, #1
 800d1cc:	d007      	beq.n	800d1de <_strtol_l.isra.0+0xa2>
 800d1ce:	4581      	cmp	r9, r0
 800d1d0:	d314      	bcc.n	800d1fc <_strtol_l.isra.0+0xc0>
 800d1d2:	d101      	bne.n	800d1d8 <_strtol_l.isra.0+0x9c>
 800d1d4:	45a2      	cmp	sl, r4
 800d1d6:	db11      	blt.n	800d1fc <_strtol_l.isra.0+0xc0>
 800d1d8:	fb00 4003 	mla	r0, r0, r3, r4
 800d1dc:	2201      	movs	r2, #1
 800d1de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d1e2:	e7eb      	b.n	800d1bc <_strtol_l.isra.0+0x80>
 800d1e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d1e8:	2f19      	cmp	r7, #25
 800d1ea:	d801      	bhi.n	800d1f0 <_strtol_l.isra.0+0xb4>
 800d1ec:	3c37      	subs	r4, #55	@ 0x37
 800d1ee:	e7ea      	b.n	800d1c6 <_strtol_l.isra.0+0x8a>
 800d1f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d1f4:	2f19      	cmp	r7, #25
 800d1f6:	d804      	bhi.n	800d202 <_strtol_l.isra.0+0xc6>
 800d1f8:	3c57      	subs	r4, #87	@ 0x57
 800d1fa:	e7e4      	b.n	800d1c6 <_strtol_l.isra.0+0x8a>
 800d1fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d200:	e7ed      	b.n	800d1de <_strtol_l.isra.0+0xa2>
 800d202:	1c53      	adds	r3, r2, #1
 800d204:	d108      	bne.n	800d218 <_strtol_l.isra.0+0xdc>
 800d206:	2322      	movs	r3, #34	@ 0x22
 800d208:	f8ce 3000 	str.w	r3, [lr]
 800d20c:	4660      	mov	r0, ip
 800d20e:	f1b8 0f00 	cmp.w	r8, #0
 800d212:	d0a0      	beq.n	800d156 <_strtol_l.isra.0+0x1a>
 800d214:	1e69      	subs	r1, r5, #1
 800d216:	e006      	b.n	800d226 <_strtol_l.isra.0+0xea>
 800d218:	b106      	cbz	r6, 800d21c <_strtol_l.isra.0+0xe0>
 800d21a:	4240      	negs	r0, r0
 800d21c:	f1b8 0f00 	cmp.w	r8, #0
 800d220:	d099      	beq.n	800d156 <_strtol_l.isra.0+0x1a>
 800d222:	2a00      	cmp	r2, #0
 800d224:	d1f6      	bne.n	800d214 <_strtol_l.isra.0+0xd8>
 800d226:	f8c8 1000 	str.w	r1, [r8]
 800d22a:	e794      	b.n	800d156 <_strtol_l.isra.0+0x1a>
 800d22c:	0800fb19 	.word	0x0800fb19

0800d230 <strtol>:
 800d230:	4613      	mov	r3, r2
 800d232:	460a      	mov	r2, r1
 800d234:	4601      	mov	r1, r0
 800d236:	4802      	ldr	r0, [pc, #8]	@ (800d240 <strtol+0x10>)
 800d238:	6800      	ldr	r0, [r0, #0]
 800d23a:	f7ff bf7f 	b.w	800d13c <_strtol_l.isra.0>
 800d23e:	bf00      	nop
 800d240:	20000250 	.word	0x20000250

0800d244 <_fwalk_sglue>:
 800d244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d248:	4607      	mov	r7, r0
 800d24a:	4688      	mov	r8, r1
 800d24c:	4614      	mov	r4, r2
 800d24e:	2600      	movs	r6, #0
 800d250:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d254:	f1b9 0901 	subs.w	r9, r9, #1
 800d258:	d505      	bpl.n	800d266 <_fwalk_sglue+0x22>
 800d25a:	6824      	ldr	r4, [r4, #0]
 800d25c:	2c00      	cmp	r4, #0
 800d25e:	d1f7      	bne.n	800d250 <_fwalk_sglue+0xc>
 800d260:	4630      	mov	r0, r6
 800d262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d266:	89ab      	ldrh	r3, [r5, #12]
 800d268:	2b01      	cmp	r3, #1
 800d26a:	d907      	bls.n	800d27c <_fwalk_sglue+0x38>
 800d26c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d270:	3301      	adds	r3, #1
 800d272:	d003      	beq.n	800d27c <_fwalk_sglue+0x38>
 800d274:	4629      	mov	r1, r5
 800d276:	4638      	mov	r0, r7
 800d278:	47c0      	blx	r8
 800d27a:	4306      	orrs	r6, r0
 800d27c:	3568      	adds	r5, #104	@ 0x68
 800d27e:	e7e9      	b.n	800d254 <_fwalk_sglue+0x10>

0800d280 <memset>:
 800d280:	4402      	add	r2, r0
 800d282:	4603      	mov	r3, r0
 800d284:	4293      	cmp	r3, r2
 800d286:	d100      	bne.n	800d28a <memset+0xa>
 800d288:	4770      	bx	lr
 800d28a:	f803 1b01 	strb.w	r1, [r3], #1
 800d28e:	e7f9      	b.n	800d284 <memset+0x4>

0800d290 <strtok>:
 800d290:	4b16      	ldr	r3, [pc, #88]	@ (800d2ec <strtok+0x5c>)
 800d292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d296:	681f      	ldr	r7, [r3, #0]
 800d298:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800d29a:	4605      	mov	r5, r0
 800d29c:	460e      	mov	r6, r1
 800d29e:	b9ec      	cbnz	r4, 800d2dc <strtok+0x4c>
 800d2a0:	2050      	movs	r0, #80	@ 0x50
 800d2a2:	f000 fb45 	bl	800d930 <malloc>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	6478      	str	r0, [r7, #68]	@ 0x44
 800d2aa:	b920      	cbnz	r0, 800d2b6 <strtok+0x26>
 800d2ac:	4b10      	ldr	r3, [pc, #64]	@ (800d2f0 <strtok+0x60>)
 800d2ae:	4811      	ldr	r0, [pc, #68]	@ (800d2f4 <strtok+0x64>)
 800d2b0:	215b      	movs	r1, #91	@ 0x5b
 800d2b2:	f000 f885 	bl	800d3c0 <__assert_func>
 800d2b6:	e9c0 4400 	strd	r4, r4, [r0]
 800d2ba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d2be:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d2c2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800d2c6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800d2ca:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800d2ce:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800d2d2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800d2d6:	6184      	str	r4, [r0, #24]
 800d2d8:	7704      	strb	r4, [r0, #28]
 800d2da:	6244      	str	r4, [r0, #36]	@ 0x24
 800d2dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d2de:	4631      	mov	r1, r6
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e8:	f000 b806 	b.w	800d2f8 <__strtok_r>
 800d2ec:	20000250 	.word	0x20000250
 800d2f0:	0800fa38 	.word	0x0800fa38
 800d2f4:	0800fa4f 	.word	0x0800fa4f

0800d2f8 <__strtok_r>:
 800d2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2fa:	4604      	mov	r4, r0
 800d2fc:	b908      	cbnz	r0, 800d302 <__strtok_r+0xa>
 800d2fe:	6814      	ldr	r4, [r2, #0]
 800d300:	b144      	cbz	r4, 800d314 <__strtok_r+0x1c>
 800d302:	4620      	mov	r0, r4
 800d304:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d308:	460f      	mov	r7, r1
 800d30a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d30e:	b91e      	cbnz	r6, 800d318 <__strtok_r+0x20>
 800d310:	b965      	cbnz	r5, 800d32c <__strtok_r+0x34>
 800d312:	6015      	str	r5, [r2, #0]
 800d314:	2000      	movs	r0, #0
 800d316:	e005      	b.n	800d324 <__strtok_r+0x2c>
 800d318:	42b5      	cmp	r5, r6
 800d31a:	d1f6      	bne.n	800d30a <__strtok_r+0x12>
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d1f0      	bne.n	800d302 <__strtok_r+0xa>
 800d320:	6014      	str	r4, [r2, #0]
 800d322:	7003      	strb	r3, [r0, #0]
 800d324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d326:	461c      	mov	r4, r3
 800d328:	e00c      	b.n	800d344 <__strtok_r+0x4c>
 800d32a:	b91d      	cbnz	r5, 800d334 <__strtok_r+0x3c>
 800d32c:	4627      	mov	r7, r4
 800d32e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d332:	460e      	mov	r6, r1
 800d334:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d338:	42ab      	cmp	r3, r5
 800d33a:	d1f6      	bne.n	800d32a <__strtok_r+0x32>
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d0f2      	beq.n	800d326 <__strtok_r+0x2e>
 800d340:	2300      	movs	r3, #0
 800d342:	703b      	strb	r3, [r7, #0]
 800d344:	6014      	str	r4, [r2, #0]
 800d346:	e7ed      	b.n	800d324 <__strtok_r+0x2c>

0800d348 <__errno>:
 800d348:	4b01      	ldr	r3, [pc, #4]	@ (800d350 <__errno+0x8>)
 800d34a:	6818      	ldr	r0, [r3, #0]
 800d34c:	4770      	bx	lr
 800d34e:	bf00      	nop
 800d350:	20000250 	.word	0x20000250

0800d354 <__libc_init_array>:
 800d354:	b570      	push	{r4, r5, r6, lr}
 800d356:	4d0d      	ldr	r5, [pc, #52]	@ (800d38c <__libc_init_array+0x38>)
 800d358:	4c0d      	ldr	r4, [pc, #52]	@ (800d390 <__libc_init_array+0x3c>)
 800d35a:	1b64      	subs	r4, r4, r5
 800d35c:	10a4      	asrs	r4, r4, #2
 800d35e:	2600      	movs	r6, #0
 800d360:	42a6      	cmp	r6, r4
 800d362:	d109      	bne.n	800d378 <__libc_init_array+0x24>
 800d364:	4d0b      	ldr	r5, [pc, #44]	@ (800d394 <__libc_init_array+0x40>)
 800d366:	4c0c      	ldr	r4, [pc, #48]	@ (800d398 <__libc_init_array+0x44>)
 800d368:	f001 f87a 	bl	800e460 <_init>
 800d36c:	1b64      	subs	r4, r4, r5
 800d36e:	10a4      	asrs	r4, r4, #2
 800d370:	2600      	movs	r6, #0
 800d372:	42a6      	cmp	r6, r4
 800d374:	d105      	bne.n	800d382 <__libc_init_array+0x2e>
 800d376:	bd70      	pop	{r4, r5, r6, pc}
 800d378:	f855 3b04 	ldr.w	r3, [r5], #4
 800d37c:	4798      	blx	r3
 800d37e:	3601      	adds	r6, #1
 800d380:	e7ee      	b.n	800d360 <__libc_init_array+0xc>
 800d382:	f855 3b04 	ldr.w	r3, [r5], #4
 800d386:	4798      	blx	r3
 800d388:	3601      	adds	r6, #1
 800d38a:	e7f2      	b.n	800d372 <__libc_init_array+0x1e>
 800d38c:	0800fc24 	.word	0x0800fc24
 800d390:	0800fc24 	.word	0x0800fc24
 800d394:	0800fc24 	.word	0x0800fc24
 800d398:	0800fc28 	.word	0x0800fc28

0800d39c <__retarget_lock_init_recursive>:
 800d39c:	4770      	bx	lr

0800d39e <__retarget_lock_acquire_recursive>:
 800d39e:	4770      	bx	lr

0800d3a0 <__retarget_lock_release_recursive>:
 800d3a0:	4770      	bx	lr

0800d3a2 <memcpy>:
 800d3a2:	440a      	add	r2, r1
 800d3a4:	4291      	cmp	r1, r2
 800d3a6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d3aa:	d100      	bne.n	800d3ae <memcpy+0xc>
 800d3ac:	4770      	bx	lr
 800d3ae:	b510      	push	{r4, lr}
 800d3b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3b8:	4291      	cmp	r1, r2
 800d3ba:	d1f9      	bne.n	800d3b0 <memcpy+0xe>
 800d3bc:	bd10      	pop	{r4, pc}
	...

0800d3c0 <__assert_func>:
 800d3c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3c2:	4614      	mov	r4, r2
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	4b09      	ldr	r3, [pc, #36]	@ (800d3ec <__assert_func+0x2c>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	4605      	mov	r5, r0
 800d3cc:	68d8      	ldr	r0, [r3, #12]
 800d3ce:	b14c      	cbz	r4, 800d3e4 <__assert_func+0x24>
 800d3d0:	4b07      	ldr	r3, [pc, #28]	@ (800d3f0 <__assert_func+0x30>)
 800d3d2:	9100      	str	r1, [sp, #0]
 800d3d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d3d8:	4906      	ldr	r1, [pc, #24]	@ (800d3f4 <__assert_func+0x34>)
 800d3da:	462b      	mov	r3, r5
 800d3dc:	f000 fdda 	bl	800df94 <fiprintf>
 800d3e0:	f000 ffa0 	bl	800e324 <abort>
 800d3e4:	4b04      	ldr	r3, [pc, #16]	@ (800d3f8 <__assert_func+0x38>)
 800d3e6:	461c      	mov	r4, r3
 800d3e8:	e7f3      	b.n	800d3d2 <__assert_func+0x12>
 800d3ea:	bf00      	nop
 800d3ec:	20000250 	.word	0x20000250
 800d3f0:	0800faa9 	.word	0x0800faa9
 800d3f4:	0800fab6 	.word	0x0800fab6
 800d3f8:	0800fae4 	.word	0x0800fae4

0800d3fc <__ssputs_r>:
 800d3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d400:	688e      	ldr	r6, [r1, #8]
 800d402:	461f      	mov	r7, r3
 800d404:	42be      	cmp	r6, r7
 800d406:	680b      	ldr	r3, [r1, #0]
 800d408:	4682      	mov	sl, r0
 800d40a:	460c      	mov	r4, r1
 800d40c:	4690      	mov	r8, r2
 800d40e:	d82d      	bhi.n	800d46c <__ssputs_r+0x70>
 800d410:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d414:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d418:	d026      	beq.n	800d468 <__ssputs_r+0x6c>
 800d41a:	6965      	ldr	r5, [r4, #20]
 800d41c:	6909      	ldr	r1, [r1, #16]
 800d41e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d422:	eba3 0901 	sub.w	r9, r3, r1
 800d426:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d42a:	1c7b      	adds	r3, r7, #1
 800d42c:	444b      	add	r3, r9
 800d42e:	106d      	asrs	r5, r5, #1
 800d430:	429d      	cmp	r5, r3
 800d432:	bf38      	it	cc
 800d434:	461d      	movcc	r5, r3
 800d436:	0553      	lsls	r3, r2, #21
 800d438:	d527      	bpl.n	800d48a <__ssputs_r+0x8e>
 800d43a:	4629      	mov	r1, r5
 800d43c:	f000 faa2 	bl	800d984 <_malloc_r>
 800d440:	4606      	mov	r6, r0
 800d442:	b360      	cbz	r0, 800d49e <__ssputs_r+0xa2>
 800d444:	6921      	ldr	r1, [r4, #16]
 800d446:	464a      	mov	r2, r9
 800d448:	f7ff ffab 	bl	800d3a2 <memcpy>
 800d44c:	89a3      	ldrh	r3, [r4, #12]
 800d44e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d456:	81a3      	strh	r3, [r4, #12]
 800d458:	6126      	str	r6, [r4, #16]
 800d45a:	6165      	str	r5, [r4, #20]
 800d45c:	444e      	add	r6, r9
 800d45e:	eba5 0509 	sub.w	r5, r5, r9
 800d462:	6026      	str	r6, [r4, #0]
 800d464:	60a5      	str	r5, [r4, #8]
 800d466:	463e      	mov	r6, r7
 800d468:	42be      	cmp	r6, r7
 800d46a:	d900      	bls.n	800d46e <__ssputs_r+0x72>
 800d46c:	463e      	mov	r6, r7
 800d46e:	6820      	ldr	r0, [r4, #0]
 800d470:	4632      	mov	r2, r6
 800d472:	4641      	mov	r1, r8
 800d474:	f000 fec4 	bl	800e200 <memmove>
 800d478:	68a3      	ldr	r3, [r4, #8]
 800d47a:	1b9b      	subs	r3, r3, r6
 800d47c:	60a3      	str	r3, [r4, #8]
 800d47e:	6823      	ldr	r3, [r4, #0]
 800d480:	4433      	add	r3, r6
 800d482:	6023      	str	r3, [r4, #0]
 800d484:	2000      	movs	r0, #0
 800d486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d48a:	462a      	mov	r2, r5
 800d48c:	f000 fd94 	bl	800dfb8 <_realloc_r>
 800d490:	4606      	mov	r6, r0
 800d492:	2800      	cmp	r0, #0
 800d494:	d1e0      	bne.n	800d458 <__ssputs_r+0x5c>
 800d496:	6921      	ldr	r1, [r4, #16]
 800d498:	4650      	mov	r0, sl
 800d49a:	f000 ff4b 	bl	800e334 <_free_r>
 800d49e:	230c      	movs	r3, #12
 800d4a0:	f8ca 3000 	str.w	r3, [sl]
 800d4a4:	89a3      	ldrh	r3, [r4, #12]
 800d4a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4aa:	81a3      	strh	r3, [r4, #12]
 800d4ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4b0:	e7e9      	b.n	800d486 <__ssputs_r+0x8a>
	...

0800d4b4 <_svfiprintf_r>:
 800d4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4b8:	4698      	mov	r8, r3
 800d4ba:	898b      	ldrh	r3, [r1, #12]
 800d4bc:	061b      	lsls	r3, r3, #24
 800d4be:	b09d      	sub	sp, #116	@ 0x74
 800d4c0:	4607      	mov	r7, r0
 800d4c2:	460d      	mov	r5, r1
 800d4c4:	4614      	mov	r4, r2
 800d4c6:	d510      	bpl.n	800d4ea <_svfiprintf_r+0x36>
 800d4c8:	690b      	ldr	r3, [r1, #16]
 800d4ca:	b973      	cbnz	r3, 800d4ea <_svfiprintf_r+0x36>
 800d4cc:	2140      	movs	r1, #64	@ 0x40
 800d4ce:	f000 fa59 	bl	800d984 <_malloc_r>
 800d4d2:	6028      	str	r0, [r5, #0]
 800d4d4:	6128      	str	r0, [r5, #16]
 800d4d6:	b930      	cbnz	r0, 800d4e6 <_svfiprintf_r+0x32>
 800d4d8:	230c      	movs	r3, #12
 800d4da:	603b      	str	r3, [r7, #0]
 800d4dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4e0:	b01d      	add	sp, #116	@ 0x74
 800d4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4e6:	2340      	movs	r3, #64	@ 0x40
 800d4e8:	616b      	str	r3, [r5, #20]
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4ee:	2320      	movs	r3, #32
 800d4f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d4f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4f8:	2330      	movs	r3, #48	@ 0x30
 800d4fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d698 <_svfiprintf_r+0x1e4>
 800d4fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d502:	f04f 0901 	mov.w	r9, #1
 800d506:	4623      	mov	r3, r4
 800d508:	469a      	mov	sl, r3
 800d50a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d50e:	b10a      	cbz	r2, 800d514 <_svfiprintf_r+0x60>
 800d510:	2a25      	cmp	r2, #37	@ 0x25
 800d512:	d1f9      	bne.n	800d508 <_svfiprintf_r+0x54>
 800d514:	ebba 0b04 	subs.w	fp, sl, r4
 800d518:	d00b      	beq.n	800d532 <_svfiprintf_r+0x7e>
 800d51a:	465b      	mov	r3, fp
 800d51c:	4622      	mov	r2, r4
 800d51e:	4629      	mov	r1, r5
 800d520:	4638      	mov	r0, r7
 800d522:	f7ff ff6b 	bl	800d3fc <__ssputs_r>
 800d526:	3001      	adds	r0, #1
 800d528:	f000 80a7 	beq.w	800d67a <_svfiprintf_r+0x1c6>
 800d52c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d52e:	445a      	add	r2, fp
 800d530:	9209      	str	r2, [sp, #36]	@ 0x24
 800d532:	f89a 3000 	ldrb.w	r3, [sl]
 800d536:	2b00      	cmp	r3, #0
 800d538:	f000 809f 	beq.w	800d67a <_svfiprintf_r+0x1c6>
 800d53c:	2300      	movs	r3, #0
 800d53e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d546:	f10a 0a01 	add.w	sl, sl, #1
 800d54a:	9304      	str	r3, [sp, #16]
 800d54c:	9307      	str	r3, [sp, #28]
 800d54e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d552:	931a      	str	r3, [sp, #104]	@ 0x68
 800d554:	4654      	mov	r4, sl
 800d556:	2205      	movs	r2, #5
 800d558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d55c:	484e      	ldr	r0, [pc, #312]	@ (800d698 <_svfiprintf_r+0x1e4>)
 800d55e:	f7f2 fe57 	bl	8000210 <memchr>
 800d562:	9a04      	ldr	r2, [sp, #16]
 800d564:	b9d8      	cbnz	r0, 800d59e <_svfiprintf_r+0xea>
 800d566:	06d0      	lsls	r0, r2, #27
 800d568:	bf44      	itt	mi
 800d56a:	2320      	movmi	r3, #32
 800d56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d570:	0711      	lsls	r1, r2, #28
 800d572:	bf44      	itt	mi
 800d574:	232b      	movmi	r3, #43	@ 0x2b
 800d576:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d57a:	f89a 3000 	ldrb.w	r3, [sl]
 800d57e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d580:	d015      	beq.n	800d5ae <_svfiprintf_r+0xfa>
 800d582:	9a07      	ldr	r2, [sp, #28]
 800d584:	4654      	mov	r4, sl
 800d586:	2000      	movs	r0, #0
 800d588:	f04f 0c0a 	mov.w	ip, #10
 800d58c:	4621      	mov	r1, r4
 800d58e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d592:	3b30      	subs	r3, #48	@ 0x30
 800d594:	2b09      	cmp	r3, #9
 800d596:	d94b      	bls.n	800d630 <_svfiprintf_r+0x17c>
 800d598:	b1b0      	cbz	r0, 800d5c8 <_svfiprintf_r+0x114>
 800d59a:	9207      	str	r2, [sp, #28]
 800d59c:	e014      	b.n	800d5c8 <_svfiprintf_r+0x114>
 800d59e:	eba0 0308 	sub.w	r3, r0, r8
 800d5a2:	fa09 f303 	lsl.w	r3, r9, r3
 800d5a6:	4313      	orrs	r3, r2
 800d5a8:	9304      	str	r3, [sp, #16]
 800d5aa:	46a2      	mov	sl, r4
 800d5ac:	e7d2      	b.n	800d554 <_svfiprintf_r+0xa0>
 800d5ae:	9b03      	ldr	r3, [sp, #12]
 800d5b0:	1d19      	adds	r1, r3, #4
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	9103      	str	r1, [sp, #12]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	bfbb      	ittet	lt
 800d5ba:	425b      	neglt	r3, r3
 800d5bc:	f042 0202 	orrlt.w	r2, r2, #2
 800d5c0:	9307      	strge	r3, [sp, #28]
 800d5c2:	9307      	strlt	r3, [sp, #28]
 800d5c4:	bfb8      	it	lt
 800d5c6:	9204      	strlt	r2, [sp, #16]
 800d5c8:	7823      	ldrb	r3, [r4, #0]
 800d5ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5cc:	d10a      	bne.n	800d5e4 <_svfiprintf_r+0x130>
 800d5ce:	7863      	ldrb	r3, [r4, #1]
 800d5d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5d2:	d132      	bne.n	800d63a <_svfiprintf_r+0x186>
 800d5d4:	9b03      	ldr	r3, [sp, #12]
 800d5d6:	1d1a      	adds	r2, r3, #4
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	9203      	str	r2, [sp, #12]
 800d5dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5e0:	3402      	adds	r4, #2
 800d5e2:	9305      	str	r3, [sp, #20]
 800d5e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d6a8 <_svfiprintf_r+0x1f4>
 800d5e8:	7821      	ldrb	r1, [r4, #0]
 800d5ea:	2203      	movs	r2, #3
 800d5ec:	4650      	mov	r0, sl
 800d5ee:	f7f2 fe0f 	bl	8000210 <memchr>
 800d5f2:	b138      	cbz	r0, 800d604 <_svfiprintf_r+0x150>
 800d5f4:	9b04      	ldr	r3, [sp, #16]
 800d5f6:	eba0 000a 	sub.w	r0, r0, sl
 800d5fa:	2240      	movs	r2, #64	@ 0x40
 800d5fc:	4082      	lsls	r2, r0
 800d5fe:	4313      	orrs	r3, r2
 800d600:	3401      	adds	r4, #1
 800d602:	9304      	str	r3, [sp, #16]
 800d604:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d608:	4824      	ldr	r0, [pc, #144]	@ (800d69c <_svfiprintf_r+0x1e8>)
 800d60a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d60e:	2206      	movs	r2, #6
 800d610:	f7f2 fdfe 	bl	8000210 <memchr>
 800d614:	2800      	cmp	r0, #0
 800d616:	d036      	beq.n	800d686 <_svfiprintf_r+0x1d2>
 800d618:	4b21      	ldr	r3, [pc, #132]	@ (800d6a0 <_svfiprintf_r+0x1ec>)
 800d61a:	bb1b      	cbnz	r3, 800d664 <_svfiprintf_r+0x1b0>
 800d61c:	9b03      	ldr	r3, [sp, #12]
 800d61e:	3307      	adds	r3, #7
 800d620:	f023 0307 	bic.w	r3, r3, #7
 800d624:	3308      	adds	r3, #8
 800d626:	9303      	str	r3, [sp, #12]
 800d628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d62a:	4433      	add	r3, r6
 800d62c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d62e:	e76a      	b.n	800d506 <_svfiprintf_r+0x52>
 800d630:	fb0c 3202 	mla	r2, ip, r2, r3
 800d634:	460c      	mov	r4, r1
 800d636:	2001      	movs	r0, #1
 800d638:	e7a8      	b.n	800d58c <_svfiprintf_r+0xd8>
 800d63a:	2300      	movs	r3, #0
 800d63c:	3401      	adds	r4, #1
 800d63e:	9305      	str	r3, [sp, #20]
 800d640:	4619      	mov	r1, r3
 800d642:	f04f 0c0a 	mov.w	ip, #10
 800d646:	4620      	mov	r0, r4
 800d648:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d64c:	3a30      	subs	r2, #48	@ 0x30
 800d64e:	2a09      	cmp	r2, #9
 800d650:	d903      	bls.n	800d65a <_svfiprintf_r+0x1a6>
 800d652:	2b00      	cmp	r3, #0
 800d654:	d0c6      	beq.n	800d5e4 <_svfiprintf_r+0x130>
 800d656:	9105      	str	r1, [sp, #20]
 800d658:	e7c4      	b.n	800d5e4 <_svfiprintf_r+0x130>
 800d65a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d65e:	4604      	mov	r4, r0
 800d660:	2301      	movs	r3, #1
 800d662:	e7f0      	b.n	800d646 <_svfiprintf_r+0x192>
 800d664:	ab03      	add	r3, sp, #12
 800d666:	9300      	str	r3, [sp, #0]
 800d668:	462a      	mov	r2, r5
 800d66a:	4b0e      	ldr	r3, [pc, #56]	@ (800d6a4 <_svfiprintf_r+0x1f0>)
 800d66c:	a904      	add	r1, sp, #16
 800d66e:	4638      	mov	r0, r7
 800d670:	f3af 8000 	nop.w
 800d674:	1c42      	adds	r2, r0, #1
 800d676:	4606      	mov	r6, r0
 800d678:	d1d6      	bne.n	800d628 <_svfiprintf_r+0x174>
 800d67a:	89ab      	ldrh	r3, [r5, #12]
 800d67c:	065b      	lsls	r3, r3, #25
 800d67e:	f53f af2d 	bmi.w	800d4dc <_svfiprintf_r+0x28>
 800d682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d684:	e72c      	b.n	800d4e0 <_svfiprintf_r+0x2c>
 800d686:	ab03      	add	r3, sp, #12
 800d688:	9300      	str	r3, [sp, #0]
 800d68a:	462a      	mov	r2, r5
 800d68c:	4b05      	ldr	r3, [pc, #20]	@ (800d6a4 <_svfiprintf_r+0x1f0>)
 800d68e:	a904      	add	r1, sp, #16
 800d690:	4638      	mov	r0, r7
 800d692:	f000 fa65 	bl	800db60 <_printf_i>
 800d696:	e7ed      	b.n	800d674 <_svfiprintf_r+0x1c0>
 800d698:	0800fae5 	.word	0x0800fae5
 800d69c:	0800faef 	.word	0x0800faef
 800d6a0:	00000000 	.word	0x00000000
 800d6a4:	0800d3fd 	.word	0x0800d3fd
 800d6a8:	0800faeb 	.word	0x0800faeb

0800d6ac <__sfputc_r>:
 800d6ac:	6893      	ldr	r3, [r2, #8]
 800d6ae:	3b01      	subs	r3, #1
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	b410      	push	{r4}
 800d6b4:	6093      	str	r3, [r2, #8]
 800d6b6:	da08      	bge.n	800d6ca <__sfputc_r+0x1e>
 800d6b8:	6994      	ldr	r4, [r2, #24]
 800d6ba:	42a3      	cmp	r3, r4
 800d6bc:	db01      	blt.n	800d6c2 <__sfputc_r+0x16>
 800d6be:	290a      	cmp	r1, #10
 800d6c0:	d103      	bne.n	800d6ca <__sfputc_r+0x1e>
 800d6c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6c6:	f000 bca5 	b.w	800e014 <__swbuf_r>
 800d6ca:	6813      	ldr	r3, [r2, #0]
 800d6cc:	1c58      	adds	r0, r3, #1
 800d6ce:	6010      	str	r0, [r2, #0]
 800d6d0:	7019      	strb	r1, [r3, #0]
 800d6d2:	4608      	mov	r0, r1
 800d6d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6d8:	4770      	bx	lr

0800d6da <__sfputs_r>:
 800d6da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6dc:	4606      	mov	r6, r0
 800d6de:	460f      	mov	r7, r1
 800d6e0:	4614      	mov	r4, r2
 800d6e2:	18d5      	adds	r5, r2, r3
 800d6e4:	42ac      	cmp	r4, r5
 800d6e6:	d101      	bne.n	800d6ec <__sfputs_r+0x12>
 800d6e8:	2000      	movs	r0, #0
 800d6ea:	e007      	b.n	800d6fc <__sfputs_r+0x22>
 800d6ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6f0:	463a      	mov	r2, r7
 800d6f2:	4630      	mov	r0, r6
 800d6f4:	f7ff ffda 	bl	800d6ac <__sfputc_r>
 800d6f8:	1c43      	adds	r3, r0, #1
 800d6fa:	d1f3      	bne.n	800d6e4 <__sfputs_r+0xa>
 800d6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d700 <_vfiprintf_r>:
 800d700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d704:	460d      	mov	r5, r1
 800d706:	b09d      	sub	sp, #116	@ 0x74
 800d708:	4614      	mov	r4, r2
 800d70a:	4698      	mov	r8, r3
 800d70c:	4606      	mov	r6, r0
 800d70e:	b118      	cbz	r0, 800d718 <_vfiprintf_r+0x18>
 800d710:	6a03      	ldr	r3, [r0, #32]
 800d712:	b90b      	cbnz	r3, 800d718 <_vfiprintf_r+0x18>
 800d714:	f7ff fcfa 	bl	800d10c <__sinit>
 800d718:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d71a:	07d9      	lsls	r1, r3, #31
 800d71c:	d405      	bmi.n	800d72a <_vfiprintf_r+0x2a>
 800d71e:	89ab      	ldrh	r3, [r5, #12]
 800d720:	059a      	lsls	r2, r3, #22
 800d722:	d402      	bmi.n	800d72a <_vfiprintf_r+0x2a>
 800d724:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d726:	f7ff fe3a 	bl	800d39e <__retarget_lock_acquire_recursive>
 800d72a:	89ab      	ldrh	r3, [r5, #12]
 800d72c:	071b      	lsls	r3, r3, #28
 800d72e:	d501      	bpl.n	800d734 <_vfiprintf_r+0x34>
 800d730:	692b      	ldr	r3, [r5, #16]
 800d732:	b99b      	cbnz	r3, 800d75c <_vfiprintf_r+0x5c>
 800d734:	4629      	mov	r1, r5
 800d736:	4630      	mov	r0, r6
 800d738:	f000 fcaa 	bl	800e090 <__swsetup_r>
 800d73c:	b170      	cbz	r0, 800d75c <_vfiprintf_r+0x5c>
 800d73e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d740:	07dc      	lsls	r4, r3, #31
 800d742:	d504      	bpl.n	800d74e <_vfiprintf_r+0x4e>
 800d744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d748:	b01d      	add	sp, #116	@ 0x74
 800d74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d74e:	89ab      	ldrh	r3, [r5, #12]
 800d750:	0598      	lsls	r0, r3, #22
 800d752:	d4f7      	bmi.n	800d744 <_vfiprintf_r+0x44>
 800d754:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d756:	f7ff fe23 	bl	800d3a0 <__retarget_lock_release_recursive>
 800d75a:	e7f3      	b.n	800d744 <_vfiprintf_r+0x44>
 800d75c:	2300      	movs	r3, #0
 800d75e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d760:	2320      	movs	r3, #32
 800d762:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d766:	f8cd 800c 	str.w	r8, [sp, #12]
 800d76a:	2330      	movs	r3, #48	@ 0x30
 800d76c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d91c <_vfiprintf_r+0x21c>
 800d770:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d774:	f04f 0901 	mov.w	r9, #1
 800d778:	4623      	mov	r3, r4
 800d77a:	469a      	mov	sl, r3
 800d77c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d780:	b10a      	cbz	r2, 800d786 <_vfiprintf_r+0x86>
 800d782:	2a25      	cmp	r2, #37	@ 0x25
 800d784:	d1f9      	bne.n	800d77a <_vfiprintf_r+0x7a>
 800d786:	ebba 0b04 	subs.w	fp, sl, r4
 800d78a:	d00b      	beq.n	800d7a4 <_vfiprintf_r+0xa4>
 800d78c:	465b      	mov	r3, fp
 800d78e:	4622      	mov	r2, r4
 800d790:	4629      	mov	r1, r5
 800d792:	4630      	mov	r0, r6
 800d794:	f7ff ffa1 	bl	800d6da <__sfputs_r>
 800d798:	3001      	adds	r0, #1
 800d79a:	f000 80a7 	beq.w	800d8ec <_vfiprintf_r+0x1ec>
 800d79e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7a0:	445a      	add	r2, fp
 800d7a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d7a4:	f89a 3000 	ldrb.w	r3, [sl]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	f000 809f 	beq.w	800d8ec <_vfiprintf_r+0x1ec>
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d7b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7b8:	f10a 0a01 	add.w	sl, sl, #1
 800d7bc:	9304      	str	r3, [sp, #16]
 800d7be:	9307      	str	r3, [sp, #28]
 800d7c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d7c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800d7c6:	4654      	mov	r4, sl
 800d7c8:	2205      	movs	r2, #5
 800d7ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7ce:	4853      	ldr	r0, [pc, #332]	@ (800d91c <_vfiprintf_r+0x21c>)
 800d7d0:	f7f2 fd1e 	bl	8000210 <memchr>
 800d7d4:	9a04      	ldr	r2, [sp, #16]
 800d7d6:	b9d8      	cbnz	r0, 800d810 <_vfiprintf_r+0x110>
 800d7d8:	06d1      	lsls	r1, r2, #27
 800d7da:	bf44      	itt	mi
 800d7dc:	2320      	movmi	r3, #32
 800d7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7e2:	0713      	lsls	r3, r2, #28
 800d7e4:	bf44      	itt	mi
 800d7e6:	232b      	movmi	r3, #43	@ 0x2b
 800d7e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7ec:	f89a 3000 	ldrb.w	r3, [sl]
 800d7f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7f2:	d015      	beq.n	800d820 <_vfiprintf_r+0x120>
 800d7f4:	9a07      	ldr	r2, [sp, #28]
 800d7f6:	4654      	mov	r4, sl
 800d7f8:	2000      	movs	r0, #0
 800d7fa:	f04f 0c0a 	mov.w	ip, #10
 800d7fe:	4621      	mov	r1, r4
 800d800:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d804:	3b30      	subs	r3, #48	@ 0x30
 800d806:	2b09      	cmp	r3, #9
 800d808:	d94b      	bls.n	800d8a2 <_vfiprintf_r+0x1a2>
 800d80a:	b1b0      	cbz	r0, 800d83a <_vfiprintf_r+0x13a>
 800d80c:	9207      	str	r2, [sp, #28]
 800d80e:	e014      	b.n	800d83a <_vfiprintf_r+0x13a>
 800d810:	eba0 0308 	sub.w	r3, r0, r8
 800d814:	fa09 f303 	lsl.w	r3, r9, r3
 800d818:	4313      	orrs	r3, r2
 800d81a:	9304      	str	r3, [sp, #16]
 800d81c:	46a2      	mov	sl, r4
 800d81e:	e7d2      	b.n	800d7c6 <_vfiprintf_r+0xc6>
 800d820:	9b03      	ldr	r3, [sp, #12]
 800d822:	1d19      	adds	r1, r3, #4
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	9103      	str	r1, [sp, #12]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	bfbb      	ittet	lt
 800d82c:	425b      	neglt	r3, r3
 800d82e:	f042 0202 	orrlt.w	r2, r2, #2
 800d832:	9307      	strge	r3, [sp, #28]
 800d834:	9307      	strlt	r3, [sp, #28]
 800d836:	bfb8      	it	lt
 800d838:	9204      	strlt	r2, [sp, #16]
 800d83a:	7823      	ldrb	r3, [r4, #0]
 800d83c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d83e:	d10a      	bne.n	800d856 <_vfiprintf_r+0x156>
 800d840:	7863      	ldrb	r3, [r4, #1]
 800d842:	2b2a      	cmp	r3, #42	@ 0x2a
 800d844:	d132      	bne.n	800d8ac <_vfiprintf_r+0x1ac>
 800d846:	9b03      	ldr	r3, [sp, #12]
 800d848:	1d1a      	adds	r2, r3, #4
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	9203      	str	r2, [sp, #12]
 800d84e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d852:	3402      	adds	r4, #2
 800d854:	9305      	str	r3, [sp, #20]
 800d856:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d92c <_vfiprintf_r+0x22c>
 800d85a:	7821      	ldrb	r1, [r4, #0]
 800d85c:	2203      	movs	r2, #3
 800d85e:	4650      	mov	r0, sl
 800d860:	f7f2 fcd6 	bl	8000210 <memchr>
 800d864:	b138      	cbz	r0, 800d876 <_vfiprintf_r+0x176>
 800d866:	9b04      	ldr	r3, [sp, #16]
 800d868:	eba0 000a 	sub.w	r0, r0, sl
 800d86c:	2240      	movs	r2, #64	@ 0x40
 800d86e:	4082      	lsls	r2, r0
 800d870:	4313      	orrs	r3, r2
 800d872:	3401      	adds	r4, #1
 800d874:	9304      	str	r3, [sp, #16]
 800d876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d87a:	4829      	ldr	r0, [pc, #164]	@ (800d920 <_vfiprintf_r+0x220>)
 800d87c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d880:	2206      	movs	r2, #6
 800d882:	f7f2 fcc5 	bl	8000210 <memchr>
 800d886:	2800      	cmp	r0, #0
 800d888:	d03f      	beq.n	800d90a <_vfiprintf_r+0x20a>
 800d88a:	4b26      	ldr	r3, [pc, #152]	@ (800d924 <_vfiprintf_r+0x224>)
 800d88c:	bb1b      	cbnz	r3, 800d8d6 <_vfiprintf_r+0x1d6>
 800d88e:	9b03      	ldr	r3, [sp, #12]
 800d890:	3307      	adds	r3, #7
 800d892:	f023 0307 	bic.w	r3, r3, #7
 800d896:	3308      	adds	r3, #8
 800d898:	9303      	str	r3, [sp, #12]
 800d89a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d89c:	443b      	add	r3, r7
 800d89e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8a0:	e76a      	b.n	800d778 <_vfiprintf_r+0x78>
 800d8a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8a6:	460c      	mov	r4, r1
 800d8a8:	2001      	movs	r0, #1
 800d8aa:	e7a8      	b.n	800d7fe <_vfiprintf_r+0xfe>
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	3401      	adds	r4, #1
 800d8b0:	9305      	str	r3, [sp, #20]
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	f04f 0c0a 	mov.w	ip, #10
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8be:	3a30      	subs	r2, #48	@ 0x30
 800d8c0:	2a09      	cmp	r2, #9
 800d8c2:	d903      	bls.n	800d8cc <_vfiprintf_r+0x1cc>
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d0c6      	beq.n	800d856 <_vfiprintf_r+0x156>
 800d8c8:	9105      	str	r1, [sp, #20]
 800d8ca:	e7c4      	b.n	800d856 <_vfiprintf_r+0x156>
 800d8cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8d0:	4604      	mov	r4, r0
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	e7f0      	b.n	800d8b8 <_vfiprintf_r+0x1b8>
 800d8d6:	ab03      	add	r3, sp, #12
 800d8d8:	9300      	str	r3, [sp, #0]
 800d8da:	462a      	mov	r2, r5
 800d8dc:	4b12      	ldr	r3, [pc, #72]	@ (800d928 <_vfiprintf_r+0x228>)
 800d8de:	a904      	add	r1, sp, #16
 800d8e0:	4630      	mov	r0, r6
 800d8e2:	f3af 8000 	nop.w
 800d8e6:	4607      	mov	r7, r0
 800d8e8:	1c78      	adds	r0, r7, #1
 800d8ea:	d1d6      	bne.n	800d89a <_vfiprintf_r+0x19a>
 800d8ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d8ee:	07d9      	lsls	r1, r3, #31
 800d8f0:	d405      	bmi.n	800d8fe <_vfiprintf_r+0x1fe>
 800d8f2:	89ab      	ldrh	r3, [r5, #12]
 800d8f4:	059a      	lsls	r2, r3, #22
 800d8f6:	d402      	bmi.n	800d8fe <_vfiprintf_r+0x1fe>
 800d8f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8fa:	f7ff fd51 	bl	800d3a0 <__retarget_lock_release_recursive>
 800d8fe:	89ab      	ldrh	r3, [r5, #12]
 800d900:	065b      	lsls	r3, r3, #25
 800d902:	f53f af1f 	bmi.w	800d744 <_vfiprintf_r+0x44>
 800d906:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d908:	e71e      	b.n	800d748 <_vfiprintf_r+0x48>
 800d90a:	ab03      	add	r3, sp, #12
 800d90c:	9300      	str	r3, [sp, #0]
 800d90e:	462a      	mov	r2, r5
 800d910:	4b05      	ldr	r3, [pc, #20]	@ (800d928 <_vfiprintf_r+0x228>)
 800d912:	a904      	add	r1, sp, #16
 800d914:	4630      	mov	r0, r6
 800d916:	f000 f923 	bl	800db60 <_printf_i>
 800d91a:	e7e4      	b.n	800d8e6 <_vfiprintf_r+0x1e6>
 800d91c:	0800fae5 	.word	0x0800fae5
 800d920:	0800faef 	.word	0x0800faef
 800d924:	00000000 	.word	0x00000000
 800d928:	0800d6db 	.word	0x0800d6db
 800d92c:	0800faeb 	.word	0x0800faeb

0800d930 <malloc>:
 800d930:	4b02      	ldr	r3, [pc, #8]	@ (800d93c <malloc+0xc>)
 800d932:	4601      	mov	r1, r0
 800d934:	6818      	ldr	r0, [r3, #0]
 800d936:	f000 b825 	b.w	800d984 <_malloc_r>
 800d93a:	bf00      	nop
 800d93c:	20000250 	.word	0x20000250

0800d940 <sbrk_aligned>:
 800d940:	b570      	push	{r4, r5, r6, lr}
 800d942:	4e0f      	ldr	r6, [pc, #60]	@ (800d980 <sbrk_aligned+0x40>)
 800d944:	460c      	mov	r4, r1
 800d946:	6831      	ldr	r1, [r6, #0]
 800d948:	4605      	mov	r5, r0
 800d94a:	b911      	cbnz	r1, 800d952 <sbrk_aligned+0x12>
 800d94c:	f000 fca6 	bl	800e29c <_sbrk_r>
 800d950:	6030      	str	r0, [r6, #0]
 800d952:	4621      	mov	r1, r4
 800d954:	4628      	mov	r0, r5
 800d956:	f000 fca1 	bl	800e29c <_sbrk_r>
 800d95a:	1c43      	adds	r3, r0, #1
 800d95c:	d103      	bne.n	800d966 <sbrk_aligned+0x26>
 800d95e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d962:	4620      	mov	r0, r4
 800d964:	bd70      	pop	{r4, r5, r6, pc}
 800d966:	1cc4      	adds	r4, r0, #3
 800d968:	f024 0403 	bic.w	r4, r4, #3
 800d96c:	42a0      	cmp	r0, r4
 800d96e:	d0f8      	beq.n	800d962 <sbrk_aligned+0x22>
 800d970:	1a21      	subs	r1, r4, r0
 800d972:	4628      	mov	r0, r5
 800d974:	f000 fc92 	bl	800e29c <_sbrk_r>
 800d978:	3001      	adds	r0, #1
 800d97a:	d1f2      	bne.n	800d962 <sbrk_aligned+0x22>
 800d97c:	e7ef      	b.n	800d95e <sbrk_aligned+0x1e>
 800d97e:	bf00      	nop
 800d980:	20001a38 	.word	0x20001a38

0800d984 <_malloc_r>:
 800d984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d988:	1ccd      	adds	r5, r1, #3
 800d98a:	f025 0503 	bic.w	r5, r5, #3
 800d98e:	3508      	adds	r5, #8
 800d990:	2d0c      	cmp	r5, #12
 800d992:	bf38      	it	cc
 800d994:	250c      	movcc	r5, #12
 800d996:	2d00      	cmp	r5, #0
 800d998:	4606      	mov	r6, r0
 800d99a:	db01      	blt.n	800d9a0 <_malloc_r+0x1c>
 800d99c:	42a9      	cmp	r1, r5
 800d99e:	d904      	bls.n	800d9aa <_malloc_r+0x26>
 800d9a0:	230c      	movs	r3, #12
 800d9a2:	6033      	str	r3, [r6, #0]
 800d9a4:	2000      	movs	r0, #0
 800d9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800da80 <_malloc_r+0xfc>
 800d9ae:	f000 faa1 	bl	800def4 <__malloc_lock>
 800d9b2:	f8d8 3000 	ldr.w	r3, [r8]
 800d9b6:	461c      	mov	r4, r3
 800d9b8:	bb44      	cbnz	r4, 800da0c <_malloc_r+0x88>
 800d9ba:	4629      	mov	r1, r5
 800d9bc:	4630      	mov	r0, r6
 800d9be:	f7ff ffbf 	bl	800d940 <sbrk_aligned>
 800d9c2:	1c43      	adds	r3, r0, #1
 800d9c4:	4604      	mov	r4, r0
 800d9c6:	d158      	bne.n	800da7a <_malloc_r+0xf6>
 800d9c8:	f8d8 4000 	ldr.w	r4, [r8]
 800d9cc:	4627      	mov	r7, r4
 800d9ce:	2f00      	cmp	r7, #0
 800d9d0:	d143      	bne.n	800da5a <_malloc_r+0xd6>
 800d9d2:	2c00      	cmp	r4, #0
 800d9d4:	d04b      	beq.n	800da6e <_malloc_r+0xea>
 800d9d6:	6823      	ldr	r3, [r4, #0]
 800d9d8:	4639      	mov	r1, r7
 800d9da:	4630      	mov	r0, r6
 800d9dc:	eb04 0903 	add.w	r9, r4, r3
 800d9e0:	f000 fc5c 	bl	800e29c <_sbrk_r>
 800d9e4:	4581      	cmp	r9, r0
 800d9e6:	d142      	bne.n	800da6e <_malloc_r+0xea>
 800d9e8:	6821      	ldr	r1, [r4, #0]
 800d9ea:	1a6d      	subs	r5, r5, r1
 800d9ec:	4629      	mov	r1, r5
 800d9ee:	4630      	mov	r0, r6
 800d9f0:	f7ff ffa6 	bl	800d940 <sbrk_aligned>
 800d9f4:	3001      	adds	r0, #1
 800d9f6:	d03a      	beq.n	800da6e <_malloc_r+0xea>
 800d9f8:	6823      	ldr	r3, [r4, #0]
 800d9fa:	442b      	add	r3, r5
 800d9fc:	6023      	str	r3, [r4, #0]
 800d9fe:	f8d8 3000 	ldr.w	r3, [r8]
 800da02:	685a      	ldr	r2, [r3, #4]
 800da04:	bb62      	cbnz	r2, 800da60 <_malloc_r+0xdc>
 800da06:	f8c8 7000 	str.w	r7, [r8]
 800da0a:	e00f      	b.n	800da2c <_malloc_r+0xa8>
 800da0c:	6822      	ldr	r2, [r4, #0]
 800da0e:	1b52      	subs	r2, r2, r5
 800da10:	d420      	bmi.n	800da54 <_malloc_r+0xd0>
 800da12:	2a0b      	cmp	r2, #11
 800da14:	d917      	bls.n	800da46 <_malloc_r+0xc2>
 800da16:	1961      	adds	r1, r4, r5
 800da18:	42a3      	cmp	r3, r4
 800da1a:	6025      	str	r5, [r4, #0]
 800da1c:	bf18      	it	ne
 800da1e:	6059      	strne	r1, [r3, #4]
 800da20:	6863      	ldr	r3, [r4, #4]
 800da22:	bf08      	it	eq
 800da24:	f8c8 1000 	streq.w	r1, [r8]
 800da28:	5162      	str	r2, [r4, r5]
 800da2a:	604b      	str	r3, [r1, #4]
 800da2c:	4630      	mov	r0, r6
 800da2e:	f000 fa67 	bl	800df00 <__malloc_unlock>
 800da32:	f104 000b 	add.w	r0, r4, #11
 800da36:	1d23      	adds	r3, r4, #4
 800da38:	f020 0007 	bic.w	r0, r0, #7
 800da3c:	1ac2      	subs	r2, r0, r3
 800da3e:	bf1c      	itt	ne
 800da40:	1a1b      	subne	r3, r3, r0
 800da42:	50a3      	strne	r3, [r4, r2]
 800da44:	e7af      	b.n	800d9a6 <_malloc_r+0x22>
 800da46:	6862      	ldr	r2, [r4, #4]
 800da48:	42a3      	cmp	r3, r4
 800da4a:	bf0c      	ite	eq
 800da4c:	f8c8 2000 	streq.w	r2, [r8]
 800da50:	605a      	strne	r2, [r3, #4]
 800da52:	e7eb      	b.n	800da2c <_malloc_r+0xa8>
 800da54:	4623      	mov	r3, r4
 800da56:	6864      	ldr	r4, [r4, #4]
 800da58:	e7ae      	b.n	800d9b8 <_malloc_r+0x34>
 800da5a:	463c      	mov	r4, r7
 800da5c:	687f      	ldr	r7, [r7, #4]
 800da5e:	e7b6      	b.n	800d9ce <_malloc_r+0x4a>
 800da60:	461a      	mov	r2, r3
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	42a3      	cmp	r3, r4
 800da66:	d1fb      	bne.n	800da60 <_malloc_r+0xdc>
 800da68:	2300      	movs	r3, #0
 800da6a:	6053      	str	r3, [r2, #4]
 800da6c:	e7de      	b.n	800da2c <_malloc_r+0xa8>
 800da6e:	230c      	movs	r3, #12
 800da70:	6033      	str	r3, [r6, #0]
 800da72:	4630      	mov	r0, r6
 800da74:	f000 fa44 	bl	800df00 <__malloc_unlock>
 800da78:	e794      	b.n	800d9a4 <_malloc_r+0x20>
 800da7a:	6005      	str	r5, [r0, #0]
 800da7c:	e7d6      	b.n	800da2c <_malloc_r+0xa8>
 800da7e:	bf00      	nop
 800da80:	20001a3c 	.word	0x20001a3c

0800da84 <_printf_common>:
 800da84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da88:	4616      	mov	r6, r2
 800da8a:	4698      	mov	r8, r3
 800da8c:	688a      	ldr	r2, [r1, #8]
 800da8e:	690b      	ldr	r3, [r1, #16]
 800da90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800da94:	4293      	cmp	r3, r2
 800da96:	bfb8      	it	lt
 800da98:	4613      	movlt	r3, r2
 800da9a:	6033      	str	r3, [r6, #0]
 800da9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800daa0:	4607      	mov	r7, r0
 800daa2:	460c      	mov	r4, r1
 800daa4:	b10a      	cbz	r2, 800daaa <_printf_common+0x26>
 800daa6:	3301      	adds	r3, #1
 800daa8:	6033      	str	r3, [r6, #0]
 800daaa:	6823      	ldr	r3, [r4, #0]
 800daac:	0699      	lsls	r1, r3, #26
 800daae:	bf42      	ittt	mi
 800dab0:	6833      	ldrmi	r3, [r6, #0]
 800dab2:	3302      	addmi	r3, #2
 800dab4:	6033      	strmi	r3, [r6, #0]
 800dab6:	6825      	ldr	r5, [r4, #0]
 800dab8:	f015 0506 	ands.w	r5, r5, #6
 800dabc:	d106      	bne.n	800dacc <_printf_common+0x48>
 800dabe:	f104 0a19 	add.w	sl, r4, #25
 800dac2:	68e3      	ldr	r3, [r4, #12]
 800dac4:	6832      	ldr	r2, [r6, #0]
 800dac6:	1a9b      	subs	r3, r3, r2
 800dac8:	42ab      	cmp	r3, r5
 800daca:	dc26      	bgt.n	800db1a <_printf_common+0x96>
 800dacc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dad0:	6822      	ldr	r2, [r4, #0]
 800dad2:	3b00      	subs	r3, #0
 800dad4:	bf18      	it	ne
 800dad6:	2301      	movne	r3, #1
 800dad8:	0692      	lsls	r2, r2, #26
 800dada:	d42b      	bmi.n	800db34 <_printf_common+0xb0>
 800dadc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dae0:	4641      	mov	r1, r8
 800dae2:	4638      	mov	r0, r7
 800dae4:	47c8      	blx	r9
 800dae6:	3001      	adds	r0, #1
 800dae8:	d01e      	beq.n	800db28 <_printf_common+0xa4>
 800daea:	6823      	ldr	r3, [r4, #0]
 800daec:	6922      	ldr	r2, [r4, #16]
 800daee:	f003 0306 	and.w	r3, r3, #6
 800daf2:	2b04      	cmp	r3, #4
 800daf4:	bf02      	ittt	eq
 800daf6:	68e5      	ldreq	r5, [r4, #12]
 800daf8:	6833      	ldreq	r3, [r6, #0]
 800dafa:	1aed      	subeq	r5, r5, r3
 800dafc:	68a3      	ldr	r3, [r4, #8]
 800dafe:	bf0c      	ite	eq
 800db00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db04:	2500      	movne	r5, #0
 800db06:	4293      	cmp	r3, r2
 800db08:	bfc4      	itt	gt
 800db0a:	1a9b      	subgt	r3, r3, r2
 800db0c:	18ed      	addgt	r5, r5, r3
 800db0e:	2600      	movs	r6, #0
 800db10:	341a      	adds	r4, #26
 800db12:	42b5      	cmp	r5, r6
 800db14:	d11a      	bne.n	800db4c <_printf_common+0xc8>
 800db16:	2000      	movs	r0, #0
 800db18:	e008      	b.n	800db2c <_printf_common+0xa8>
 800db1a:	2301      	movs	r3, #1
 800db1c:	4652      	mov	r2, sl
 800db1e:	4641      	mov	r1, r8
 800db20:	4638      	mov	r0, r7
 800db22:	47c8      	blx	r9
 800db24:	3001      	adds	r0, #1
 800db26:	d103      	bne.n	800db30 <_printf_common+0xac>
 800db28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db30:	3501      	adds	r5, #1
 800db32:	e7c6      	b.n	800dac2 <_printf_common+0x3e>
 800db34:	18e1      	adds	r1, r4, r3
 800db36:	1c5a      	adds	r2, r3, #1
 800db38:	2030      	movs	r0, #48	@ 0x30
 800db3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800db3e:	4422      	add	r2, r4
 800db40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800db44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800db48:	3302      	adds	r3, #2
 800db4a:	e7c7      	b.n	800dadc <_printf_common+0x58>
 800db4c:	2301      	movs	r3, #1
 800db4e:	4622      	mov	r2, r4
 800db50:	4641      	mov	r1, r8
 800db52:	4638      	mov	r0, r7
 800db54:	47c8      	blx	r9
 800db56:	3001      	adds	r0, #1
 800db58:	d0e6      	beq.n	800db28 <_printf_common+0xa4>
 800db5a:	3601      	adds	r6, #1
 800db5c:	e7d9      	b.n	800db12 <_printf_common+0x8e>
	...

0800db60 <_printf_i>:
 800db60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db64:	7e0f      	ldrb	r7, [r1, #24]
 800db66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800db68:	2f78      	cmp	r7, #120	@ 0x78
 800db6a:	4691      	mov	r9, r2
 800db6c:	4680      	mov	r8, r0
 800db6e:	460c      	mov	r4, r1
 800db70:	469a      	mov	sl, r3
 800db72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800db76:	d807      	bhi.n	800db88 <_printf_i+0x28>
 800db78:	2f62      	cmp	r7, #98	@ 0x62
 800db7a:	d80a      	bhi.n	800db92 <_printf_i+0x32>
 800db7c:	2f00      	cmp	r7, #0
 800db7e:	f000 80d1 	beq.w	800dd24 <_printf_i+0x1c4>
 800db82:	2f58      	cmp	r7, #88	@ 0x58
 800db84:	f000 80b8 	beq.w	800dcf8 <_printf_i+0x198>
 800db88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800db90:	e03a      	b.n	800dc08 <_printf_i+0xa8>
 800db92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800db96:	2b15      	cmp	r3, #21
 800db98:	d8f6      	bhi.n	800db88 <_printf_i+0x28>
 800db9a:	a101      	add	r1, pc, #4	@ (adr r1, 800dba0 <_printf_i+0x40>)
 800db9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dba0:	0800dbf9 	.word	0x0800dbf9
 800dba4:	0800dc0d 	.word	0x0800dc0d
 800dba8:	0800db89 	.word	0x0800db89
 800dbac:	0800db89 	.word	0x0800db89
 800dbb0:	0800db89 	.word	0x0800db89
 800dbb4:	0800db89 	.word	0x0800db89
 800dbb8:	0800dc0d 	.word	0x0800dc0d
 800dbbc:	0800db89 	.word	0x0800db89
 800dbc0:	0800db89 	.word	0x0800db89
 800dbc4:	0800db89 	.word	0x0800db89
 800dbc8:	0800db89 	.word	0x0800db89
 800dbcc:	0800dd0b 	.word	0x0800dd0b
 800dbd0:	0800dc37 	.word	0x0800dc37
 800dbd4:	0800dcc5 	.word	0x0800dcc5
 800dbd8:	0800db89 	.word	0x0800db89
 800dbdc:	0800db89 	.word	0x0800db89
 800dbe0:	0800dd2d 	.word	0x0800dd2d
 800dbe4:	0800db89 	.word	0x0800db89
 800dbe8:	0800dc37 	.word	0x0800dc37
 800dbec:	0800db89 	.word	0x0800db89
 800dbf0:	0800db89 	.word	0x0800db89
 800dbf4:	0800dccd 	.word	0x0800dccd
 800dbf8:	6833      	ldr	r3, [r6, #0]
 800dbfa:	1d1a      	adds	r2, r3, #4
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	6032      	str	r2, [r6, #0]
 800dc00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dc08:	2301      	movs	r3, #1
 800dc0a:	e09c      	b.n	800dd46 <_printf_i+0x1e6>
 800dc0c:	6833      	ldr	r3, [r6, #0]
 800dc0e:	6820      	ldr	r0, [r4, #0]
 800dc10:	1d19      	adds	r1, r3, #4
 800dc12:	6031      	str	r1, [r6, #0]
 800dc14:	0606      	lsls	r6, r0, #24
 800dc16:	d501      	bpl.n	800dc1c <_printf_i+0xbc>
 800dc18:	681d      	ldr	r5, [r3, #0]
 800dc1a:	e003      	b.n	800dc24 <_printf_i+0xc4>
 800dc1c:	0645      	lsls	r5, r0, #25
 800dc1e:	d5fb      	bpl.n	800dc18 <_printf_i+0xb8>
 800dc20:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dc24:	2d00      	cmp	r5, #0
 800dc26:	da03      	bge.n	800dc30 <_printf_i+0xd0>
 800dc28:	232d      	movs	r3, #45	@ 0x2d
 800dc2a:	426d      	negs	r5, r5
 800dc2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc30:	4858      	ldr	r0, [pc, #352]	@ (800dd94 <_printf_i+0x234>)
 800dc32:	230a      	movs	r3, #10
 800dc34:	e011      	b.n	800dc5a <_printf_i+0xfa>
 800dc36:	6821      	ldr	r1, [r4, #0]
 800dc38:	6833      	ldr	r3, [r6, #0]
 800dc3a:	0608      	lsls	r0, r1, #24
 800dc3c:	f853 5b04 	ldr.w	r5, [r3], #4
 800dc40:	d402      	bmi.n	800dc48 <_printf_i+0xe8>
 800dc42:	0649      	lsls	r1, r1, #25
 800dc44:	bf48      	it	mi
 800dc46:	b2ad      	uxthmi	r5, r5
 800dc48:	2f6f      	cmp	r7, #111	@ 0x6f
 800dc4a:	4852      	ldr	r0, [pc, #328]	@ (800dd94 <_printf_i+0x234>)
 800dc4c:	6033      	str	r3, [r6, #0]
 800dc4e:	bf14      	ite	ne
 800dc50:	230a      	movne	r3, #10
 800dc52:	2308      	moveq	r3, #8
 800dc54:	2100      	movs	r1, #0
 800dc56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dc5a:	6866      	ldr	r6, [r4, #4]
 800dc5c:	60a6      	str	r6, [r4, #8]
 800dc5e:	2e00      	cmp	r6, #0
 800dc60:	db05      	blt.n	800dc6e <_printf_i+0x10e>
 800dc62:	6821      	ldr	r1, [r4, #0]
 800dc64:	432e      	orrs	r6, r5
 800dc66:	f021 0104 	bic.w	r1, r1, #4
 800dc6a:	6021      	str	r1, [r4, #0]
 800dc6c:	d04b      	beq.n	800dd06 <_printf_i+0x1a6>
 800dc6e:	4616      	mov	r6, r2
 800dc70:	fbb5 f1f3 	udiv	r1, r5, r3
 800dc74:	fb03 5711 	mls	r7, r3, r1, r5
 800dc78:	5dc7      	ldrb	r7, [r0, r7]
 800dc7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dc7e:	462f      	mov	r7, r5
 800dc80:	42bb      	cmp	r3, r7
 800dc82:	460d      	mov	r5, r1
 800dc84:	d9f4      	bls.n	800dc70 <_printf_i+0x110>
 800dc86:	2b08      	cmp	r3, #8
 800dc88:	d10b      	bne.n	800dca2 <_printf_i+0x142>
 800dc8a:	6823      	ldr	r3, [r4, #0]
 800dc8c:	07df      	lsls	r7, r3, #31
 800dc8e:	d508      	bpl.n	800dca2 <_printf_i+0x142>
 800dc90:	6923      	ldr	r3, [r4, #16]
 800dc92:	6861      	ldr	r1, [r4, #4]
 800dc94:	4299      	cmp	r1, r3
 800dc96:	bfde      	ittt	le
 800dc98:	2330      	movle	r3, #48	@ 0x30
 800dc9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dc9e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800dca2:	1b92      	subs	r2, r2, r6
 800dca4:	6122      	str	r2, [r4, #16]
 800dca6:	f8cd a000 	str.w	sl, [sp]
 800dcaa:	464b      	mov	r3, r9
 800dcac:	aa03      	add	r2, sp, #12
 800dcae:	4621      	mov	r1, r4
 800dcb0:	4640      	mov	r0, r8
 800dcb2:	f7ff fee7 	bl	800da84 <_printf_common>
 800dcb6:	3001      	adds	r0, #1
 800dcb8:	d14a      	bne.n	800dd50 <_printf_i+0x1f0>
 800dcba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dcbe:	b004      	add	sp, #16
 800dcc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcc4:	6823      	ldr	r3, [r4, #0]
 800dcc6:	f043 0320 	orr.w	r3, r3, #32
 800dcca:	6023      	str	r3, [r4, #0]
 800dccc:	4832      	ldr	r0, [pc, #200]	@ (800dd98 <_printf_i+0x238>)
 800dcce:	2778      	movs	r7, #120	@ 0x78
 800dcd0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dcd4:	6823      	ldr	r3, [r4, #0]
 800dcd6:	6831      	ldr	r1, [r6, #0]
 800dcd8:	061f      	lsls	r7, r3, #24
 800dcda:	f851 5b04 	ldr.w	r5, [r1], #4
 800dcde:	d402      	bmi.n	800dce6 <_printf_i+0x186>
 800dce0:	065f      	lsls	r7, r3, #25
 800dce2:	bf48      	it	mi
 800dce4:	b2ad      	uxthmi	r5, r5
 800dce6:	6031      	str	r1, [r6, #0]
 800dce8:	07d9      	lsls	r1, r3, #31
 800dcea:	bf44      	itt	mi
 800dcec:	f043 0320 	orrmi.w	r3, r3, #32
 800dcf0:	6023      	strmi	r3, [r4, #0]
 800dcf2:	b11d      	cbz	r5, 800dcfc <_printf_i+0x19c>
 800dcf4:	2310      	movs	r3, #16
 800dcf6:	e7ad      	b.n	800dc54 <_printf_i+0xf4>
 800dcf8:	4826      	ldr	r0, [pc, #152]	@ (800dd94 <_printf_i+0x234>)
 800dcfa:	e7e9      	b.n	800dcd0 <_printf_i+0x170>
 800dcfc:	6823      	ldr	r3, [r4, #0]
 800dcfe:	f023 0320 	bic.w	r3, r3, #32
 800dd02:	6023      	str	r3, [r4, #0]
 800dd04:	e7f6      	b.n	800dcf4 <_printf_i+0x194>
 800dd06:	4616      	mov	r6, r2
 800dd08:	e7bd      	b.n	800dc86 <_printf_i+0x126>
 800dd0a:	6833      	ldr	r3, [r6, #0]
 800dd0c:	6825      	ldr	r5, [r4, #0]
 800dd0e:	6961      	ldr	r1, [r4, #20]
 800dd10:	1d18      	adds	r0, r3, #4
 800dd12:	6030      	str	r0, [r6, #0]
 800dd14:	062e      	lsls	r6, r5, #24
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	d501      	bpl.n	800dd1e <_printf_i+0x1be>
 800dd1a:	6019      	str	r1, [r3, #0]
 800dd1c:	e002      	b.n	800dd24 <_printf_i+0x1c4>
 800dd1e:	0668      	lsls	r0, r5, #25
 800dd20:	d5fb      	bpl.n	800dd1a <_printf_i+0x1ba>
 800dd22:	8019      	strh	r1, [r3, #0]
 800dd24:	2300      	movs	r3, #0
 800dd26:	6123      	str	r3, [r4, #16]
 800dd28:	4616      	mov	r6, r2
 800dd2a:	e7bc      	b.n	800dca6 <_printf_i+0x146>
 800dd2c:	6833      	ldr	r3, [r6, #0]
 800dd2e:	1d1a      	adds	r2, r3, #4
 800dd30:	6032      	str	r2, [r6, #0]
 800dd32:	681e      	ldr	r6, [r3, #0]
 800dd34:	6862      	ldr	r2, [r4, #4]
 800dd36:	2100      	movs	r1, #0
 800dd38:	4630      	mov	r0, r6
 800dd3a:	f7f2 fa69 	bl	8000210 <memchr>
 800dd3e:	b108      	cbz	r0, 800dd44 <_printf_i+0x1e4>
 800dd40:	1b80      	subs	r0, r0, r6
 800dd42:	6060      	str	r0, [r4, #4]
 800dd44:	6863      	ldr	r3, [r4, #4]
 800dd46:	6123      	str	r3, [r4, #16]
 800dd48:	2300      	movs	r3, #0
 800dd4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd4e:	e7aa      	b.n	800dca6 <_printf_i+0x146>
 800dd50:	6923      	ldr	r3, [r4, #16]
 800dd52:	4632      	mov	r2, r6
 800dd54:	4649      	mov	r1, r9
 800dd56:	4640      	mov	r0, r8
 800dd58:	47d0      	blx	sl
 800dd5a:	3001      	adds	r0, #1
 800dd5c:	d0ad      	beq.n	800dcba <_printf_i+0x15a>
 800dd5e:	6823      	ldr	r3, [r4, #0]
 800dd60:	079b      	lsls	r3, r3, #30
 800dd62:	d413      	bmi.n	800dd8c <_printf_i+0x22c>
 800dd64:	68e0      	ldr	r0, [r4, #12]
 800dd66:	9b03      	ldr	r3, [sp, #12]
 800dd68:	4298      	cmp	r0, r3
 800dd6a:	bfb8      	it	lt
 800dd6c:	4618      	movlt	r0, r3
 800dd6e:	e7a6      	b.n	800dcbe <_printf_i+0x15e>
 800dd70:	2301      	movs	r3, #1
 800dd72:	4632      	mov	r2, r6
 800dd74:	4649      	mov	r1, r9
 800dd76:	4640      	mov	r0, r8
 800dd78:	47d0      	blx	sl
 800dd7a:	3001      	adds	r0, #1
 800dd7c:	d09d      	beq.n	800dcba <_printf_i+0x15a>
 800dd7e:	3501      	adds	r5, #1
 800dd80:	68e3      	ldr	r3, [r4, #12]
 800dd82:	9903      	ldr	r1, [sp, #12]
 800dd84:	1a5b      	subs	r3, r3, r1
 800dd86:	42ab      	cmp	r3, r5
 800dd88:	dcf2      	bgt.n	800dd70 <_printf_i+0x210>
 800dd8a:	e7eb      	b.n	800dd64 <_printf_i+0x204>
 800dd8c:	2500      	movs	r5, #0
 800dd8e:	f104 0619 	add.w	r6, r4, #25
 800dd92:	e7f5      	b.n	800dd80 <_printf_i+0x220>
 800dd94:	0800faf6 	.word	0x0800faf6
 800dd98:	0800fb07 	.word	0x0800fb07

0800dd9c <__sflush_r>:
 800dd9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dda4:	0716      	lsls	r6, r2, #28
 800dda6:	4605      	mov	r5, r0
 800dda8:	460c      	mov	r4, r1
 800ddaa:	d454      	bmi.n	800de56 <__sflush_r+0xba>
 800ddac:	684b      	ldr	r3, [r1, #4]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	dc02      	bgt.n	800ddb8 <__sflush_r+0x1c>
 800ddb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	dd48      	ble.n	800de4a <__sflush_r+0xae>
 800ddb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ddba:	2e00      	cmp	r6, #0
 800ddbc:	d045      	beq.n	800de4a <__sflush_r+0xae>
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ddc4:	682f      	ldr	r7, [r5, #0]
 800ddc6:	6a21      	ldr	r1, [r4, #32]
 800ddc8:	602b      	str	r3, [r5, #0]
 800ddca:	d030      	beq.n	800de2e <__sflush_r+0x92>
 800ddcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ddce:	89a3      	ldrh	r3, [r4, #12]
 800ddd0:	0759      	lsls	r1, r3, #29
 800ddd2:	d505      	bpl.n	800dde0 <__sflush_r+0x44>
 800ddd4:	6863      	ldr	r3, [r4, #4]
 800ddd6:	1ad2      	subs	r2, r2, r3
 800ddd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ddda:	b10b      	cbz	r3, 800dde0 <__sflush_r+0x44>
 800dddc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ddde:	1ad2      	subs	r2, r2, r3
 800dde0:	2300      	movs	r3, #0
 800dde2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dde4:	6a21      	ldr	r1, [r4, #32]
 800dde6:	4628      	mov	r0, r5
 800dde8:	47b0      	blx	r6
 800ddea:	1c43      	adds	r3, r0, #1
 800ddec:	89a3      	ldrh	r3, [r4, #12]
 800ddee:	d106      	bne.n	800ddfe <__sflush_r+0x62>
 800ddf0:	6829      	ldr	r1, [r5, #0]
 800ddf2:	291d      	cmp	r1, #29
 800ddf4:	d82b      	bhi.n	800de4e <__sflush_r+0xb2>
 800ddf6:	4a2a      	ldr	r2, [pc, #168]	@ (800dea0 <__sflush_r+0x104>)
 800ddf8:	40ca      	lsrs	r2, r1
 800ddfa:	07d6      	lsls	r6, r2, #31
 800ddfc:	d527      	bpl.n	800de4e <__sflush_r+0xb2>
 800ddfe:	2200      	movs	r2, #0
 800de00:	6062      	str	r2, [r4, #4]
 800de02:	04d9      	lsls	r1, r3, #19
 800de04:	6922      	ldr	r2, [r4, #16]
 800de06:	6022      	str	r2, [r4, #0]
 800de08:	d504      	bpl.n	800de14 <__sflush_r+0x78>
 800de0a:	1c42      	adds	r2, r0, #1
 800de0c:	d101      	bne.n	800de12 <__sflush_r+0x76>
 800de0e:	682b      	ldr	r3, [r5, #0]
 800de10:	b903      	cbnz	r3, 800de14 <__sflush_r+0x78>
 800de12:	6560      	str	r0, [r4, #84]	@ 0x54
 800de14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de16:	602f      	str	r7, [r5, #0]
 800de18:	b1b9      	cbz	r1, 800de4a <__sflush_r+0xae>
 800de1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de1e:	4299      	cmp	r1, r3
 800de20:	d002      	beq.n	800de28 <__sflush_r+0x8c>
 800de22:	4628      	mov	r0, r5
 800de24:	f000 fa86 	bl	800e334 <_free_r>
 800de28:	2300      	movs	r3, #0
 800de2a:	6363      	str	r3, [r4, #52]	@ 0x34
 800de2c:	e00d      	b.n	800de4a <__sflush_r+0xae>
 800de2e:	2301      	movs	r3, #1
 800de30:	4628      	mov	r0, r5
 800de32:	47b0      	blx	r6
 800de34:	4602      	mov	r2, r0
 800de36:	1c50      	adds	r0, r2, #1
 800de38:	d1c9      	bne.n	800ddce <__sflush_r+0x32>
 800de3a:	682b      	ldr	r3, [r5, #0]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d0c6      	beq.n	800ddce <__sflush_r+0x32>
 800de40:	2b1d      	cmp	r3, #29
 800de42:	d001      	beq.n	800de48 <__sflush_r+0xac>
 800de44:	2b16      	cmp	r3, #22
 800de46:	d11e      	bne.n	800de86 <__sflush_r+0xea>
 800de48:	602f      	str	r7, [r5, #0]
 800de4a:	2000      	movs	r0, #0
 800de4c:	e022      	b.n	800de94 <__sflush_r+0xf8>
 800de4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de52:	b21b      	sxth	r3, r3
 800de54:	e01b      	b.n	800de8e <__sflush_r+0xf2>
 800de56:	690f      	ldr	r7, [r1, #16]
 800de58:	2f00      	cmp	r7, #0
 800de5a:	d0f6      	beq.n	800de4a <__sflush_r+0xae>
 800de5c:	0793      	lsls	r3, r2, #30
 800de5e:	680e      	ldr	r6, [r1, #0]
 800de60:	bf08      	it	eq
 800de62:	694b      	ldreq	r3, [r1, #20]
 800de64:	600f      	str	r7, [r1, #0]
 800de66:	bf18      	it	ne
 800de68:	2300      	movne	r3, #0
 800de6a:	eba6 0807 	sub.w	r8, r6, r7
 800de6e:	608b      	str	r3, [r1, #8]
 800de70:	f1b8 0f00 	cmp.w	r8, #0
 800de74:	dde9      	ble.n	800de4a <__sflush_r+0xae>
 800de76:	6a21      	ldr	r1, [r4, #32]
 800de78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800de7a:	4643      	mov	r3, r8
 800de7c:	463a      	mov	r2, r7
 800de7e:	4628      	mov	r0, r5
 800de80:	47b0      	blx	r6
 800de82:	2800      	cmp	r0, #0
 800de84:	dc08      	bgt.n	800de98 <__sflush_r+0xfc>
 800de86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de8e:	81a3      	strh	r3, [r4, #12]
 800de90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de98:	4407      	add	r7, r0
 800de9a:	eba8 0800 	sub.w	r8, r8, r0
 800de9e:	e7e7      	b.n	800de70 <__sflush_r+0xd4>
 800dea0:	20400001 	.word	0x20400001

0800dea4 <_fflush_r>:
 800dea4:	b538      	push	{r3, r4, r5, lr}
 800dea6:	690b      	ldr	r3, [r1, #16]
 800dea8:	4605      	mov	r5, r0
 800deaa:	460c      	mov	r4, r1
 800deac:	b913      	cbnz	r3, 800deb4 <_fflush_r+0x10>
 800deae:	2500      	movs	r5, #0
 800deb0:	4628      	mov	r0, r5
 800deb2:	bd38      	pop	{r3, r4, r5, pc}
 800deb4:	b118      	cbz	r0, 800debe <_fflush_r+0x1a>
 800deb6:	6a03      	ldr	r3, [r0, #32]
 800deb8:	b90b      	cbnz	r3, 800debe <_fflush_r+0x1a>
 800deba:	f7ff f927 	bl	800d10c <__sinit>
 800debe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d0f3      	beq.n	800deae <_fflush_r+0xa>
 800dec6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dec8:	07d0      	lsls	r0, r2, #31
 800deca:	d404      	bmi.n	800ded6 <_fflush_r+0x32>
 800decc:	0599      	lsls	r1, r3, #22
 800dece:	d402      	bmi.n	800ded6 <_fflush_r+0x32>
 800ded0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ded2:	f7ff fa64 	bl	800d39e <__retarget_lock_acquire_recursive>
 800ded6:	4628      	mov	r0, r5
 800ded8:	4621      	mov	r1, r4
 800deda:	f7ff ff5f 	bl	800dd9c <__sflush_r>
 800dede:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dee0:	07da      	lsls	r2, r3, #31
 800dee2:	4605      	mov	r5, r0
 800dee4:	d4e4      	bmi.n	800deb0 <_fflush_r+0xc>
 800dee6:	89a3      	ldrh	r3, [r4, #12]
 800dee8:	059b      	lsls	r3, r3, #22
 800deea:	d4e1      	bmi.n	800deb0 <_fflush_r+0xc>
 800deec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800deee:	f7ff fa57 	bl	800d3a0 <__retarget_lock_release_recursive>
 800def2:	e7dd      	b.n	800deb0 <_fflush_r+0xc>

0800def4 <__malloc_lock>:
 800def4:	4801      	ldr	r0, [pc, #4]	@ (800defc <__malloc_lock+0x8>)
 800def6:	f7ff ba52 	b.w	800d39e <__retarget_lock_acquire_recursive>
 800defa:	bf00      	nop
 800defc:	20001a34 	.word	0x20001a34

0800df00 <__malloc_unlock>:
 800df00:	4801      	ldr	r0, [pc, #4]	@ (800df08 <__malloc_unlock+0x8>)
 800df02:	f7ff ba4d 	b.w	800d3a0 <__retarget_lock_release_recursive>
 800df06:	bf00      	nop
 800df08:	20001a34 	.word	0x20001a34

0800df0c <__sread>:
 800df0c:	b510      	push	{r4, lr}
 800df0e:	460c      	mov	r4, r1
 800df10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df14:	f000 f9b0 	bl	800e278 <_read_r>
 800df18:	2800      	cmp	r0, #0
 800df1a:	bfab      	itete	ge
 800df1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800df1e:	89a3      	ldrhlt	r3, [r4, #12]
 800df20:	181b      	addge	r3, r3, r0
 800df22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800df26:	bfac      	ite	ge
 800df28:	6563      	strge	r3, [r4, #84]	@ 0x54
 800df2a:	81a3      	strhlt	r3, [r4, #12]
 800df2c:	bd10      	pop	{r4, pc}

0800df2e <__swrite>:
 800df2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df32:	461f      	mov	r7, r3
 800df34:	898b      	ldrh	r3, [r1, #12]
 800df36:	05db      	lsls	r3, r3, #23
 800df38:	4605      	mov	r5, r0
 800df3a:	460c      	mov	r4, r1
 800df3c:	4616      	mov	r6, r2
 800df3e:	d505      	bpl.n	800df4c <__swrite+0x1e>
 800df40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df44:	2302      	movs	r3, #2
 800df46:	2200      	movs	r2, #0
 800df48:	f000 f984 	bl	800e254 <_lseek_r>
 800df4c:	89a3      	ldrh	r3, [r4, #12]
 800df4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800df56:	81a3      	strh	r3, [r4, #12]
 800df58:	4632      	mov	r2, r6
 800df5a:	463b      	mov	r3, r7
 800df5c:	4628      	mov	r0, r5
 800df5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df62:	f000 b9ab 	b.w	800e2bc <_write_r>

0800df66 <__sseek>:
 800df66:	b510      	push	{r4, lr}
 800df68:	460c      	mov	r4, r1
 800df6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df6e:	f000 f971 	bl	800e254 <_lseek_r>
 800df72:	1c43      	adds	r3, r0, #1
 800df74:	89a3      	ldrh	r3, [r4, #12]
 800df76:	bf15      	itete	ne
 800df78:	6560      	strne	r0, [r4, #84]	@ 0x54
 800df7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800df7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800df82:	81a3      	strheq	r3, [r4, #12]
 800df84:	bf18      	it	ne
 800df86:	81a3      	strhne	r3, [r4, #12]
 800df88:	bd10      	pop	{r4, pc}

0800df8a <__sclose>:
 800df8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df8e:	f000 b9a7 	b.w	800e2e0 <_close_r>
	...

0800df94 <fiprintf>:
 800df94:	b40e      	push	{r1, r2, r3}
 800df96:	b503      	push	{r0, r1, lr}
 800df98:	4601      	mov	r1, r0
 800df9a:	ab03      	add	r3, sp, #12
 800df9c:	4805      	ldr	r0, [pc, #20]	@ (800dfb4 <fiprintf+0x20>)
 800df9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfa2:	6800      	ldr	r0, [r0, #0]
 800dfa4:	9301      	str	r3, [sp, #4]
 800dfa6:	f7ff fbab 	bl	800d700 <_vfiprintf_r>
 800dfaa:	b002      	add	sp, #8
 800dfac:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfb0:	b003      	add	sp, #12
 800dfb2:	4770      	bx	lr
 800dfb4:	20000250 	.word	0x20000250

0800dfb8 <_realloc_r>:
 800dfb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfbc:	4607      	mov	r7, r0
 800dfbe:	4614      	mov	r4, r2
 800dfc0:	460d      	mov	r5, r1
 800dfc2:	b921      	cbnz	r1, 800dfce <_realloc_r+0x16>
 800dfc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfc8:	4611      	mov	r1, r2
 800dfca:	f7ff bcdb 	b.w	800d984 <_malloc_r>
 800dfce:	b92a      	cbnz	r2, 800dfdc <_realloc_r+0x24>
 800dfd0:	f000 f9b0 	bl	800e334 <_free_r>
 800dfd4:	4625      	mov	r5, r4
 800dfd6:	4628      	mov	r0, r5
 800dfd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfdc:	f000 f9f4 	bl	800e3c8 <_malloc_usable_size_r>
 800dfe0:	4284      	cmp	r4, r0
 800dfe2:	4606      	mov	r6, r0
 800dfe4:	d802      	bhi.n	800dfec <_realloc_r+0x34>
 800dfe6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dfea:	d8f4      	bhi.n	800dfd6 <_realloc_r+0x1e>
 800dfec:	4621      	mov	r1, r4
 800dfee:	4638      	mov	r0, r7
 800dff0:	f7ff fcc8 	bl	800d984 <_malloc_r>
 800dff4:	4680      	mov	r8, r0
 800dff6:	b908      	cbnz	r0, 800dffc <_realloc_r+0x44>
 800dff8:	4645      	mov	r5, r8
 800dffa:	e7ec      	b.n	800dfd6 <_realloc_r+0x1e>
 800dffc:	42b4      	cmp	r4, r6
 800dffe:	4622      	mov	r2, r4
 800e000:	4629      	mov	r1, r5
 800e002:	bf28      	it	cs
 800e004:	4632      	movcs	r2, r6
 800e006:	f7ff f9cc 	bl	800d3a2 <memcpy>
 800e00a:	4629      	mov	r1, r5
 800e00c:	4638      	mov	r0, r7
 800e00e:	f000 f991 	bl	800e334 <_free_r>
 800e012:	e7f1      	b.n	800dff8 <_realloc_r+0x40>

0800e014 <__swbuf_r>:
 800e014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e016:	460e      	mov	r6, r1
 800e018:	4614      	mov	r4, r2
 800e01a:	4605      	mov	r5, r0
 800e01c:	b118      	cbz	r0, 800e026 <__swbuf_r+0x12>
 800e01e:	6a03      	ldr	r3, [r0, #32]
 800e020:	b90b      	cbnz	r3, 800e026 <__swbuf_r+0x12>
 800e022:	f7ff f873 	bl	800d10c <__sinit>
 800e026:	69a3      	ldr	r3, [r4, #24]
 800e028:	60a3      	str	r3, [r4, #8]
 800e02a:	89a3      	ldrh	r3, [r4, #12]
 800e02c:	071a      	lsls	r2, r3, #28
 800e02e:	d501      	bpl.n	800e034 <__swbuf_r+0x20>
 800e030:	6923      	ldr	r3, [r4, #16]
 800e032:	b943      	cbnz	r3, 800e046 <__swbuf_r+0x32>
 800e034:	4621      	mov	r1, r4
 800e036:	4628      	mov	r0, r5
 800e038:	f000 f82a 	bl	800e090 <__swsetup_r>
 800e03c:	b118      	cbz	r0, 800e046 <__swbuf_r+0x32>
 800e03e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e042:	4638      	mov	r0, r7
 800e044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e046:	6823      	ldr	r3, [r4, #0]
 800e048:	6922      	ldr	r2, [r4, #16]
 800e04a:	1a98      	subs	r0, r3, r2
 800e04c:	6963      	ldr	r3, [r4, #20]
 800e04e:	b2f6      	uxtb	r6, r6
 800e050:	4283      	cmp	r3, r0
 800e052:	4637      	mov	r7, r6
 800e054:	dc05      	bgt.n	800e062 <__swbuf_r+0x4e>
 800e056:	4621      	mov	r1, r4
 800e058:	4628      	mov	r0, r5
 800e05a:	f7ff ff23 	bl	800dea4 <_fflush_r>
 800e05e:	2800      	cmp	r0, #0
 800e060:	d1ed      	bne.n	800e03e <__swbuf_r+0x2a>
 800e062:	68a3      	ldr	r3, [r4, #8]
 800e064:	3b01      	subs	r3, #1
 800e066:	60a3      	str	r3, [r4, #8]
 800e068:	6823      	ldr	r3, [r4, #0]
 800e06a:	1c5a      	adds	r2, r3, #1
 800e06c:	6022      	str	r2, [r4, #0]
 800e06e:	701e      	strb	r6, [r3, #0]
 800e070:	6962      	ldr	r2, [r4, #20]
 800e072:	1c43      	adds	r3, r0, #1
 800e074:	429a      	cmp	r2, r3
 800e076:	d004      	beq.n	800e082 <__swbuf_r+0x6e>
 800e078:	89a3      	ldrh	r3, [r4, #12]
 800e07a:	07db      	lsls	r3, r3, #31
 800e07c:	d5e1      	bpl.n	800e042 <__swbuf_r+0x2e>
 800e07e:	2e0a      	cmp	r6, #10
 800e080:	d1df      	bne.n	800e042 <__swbuf_r+0x2e>
 800e082:	4621      	mov	r1, r4
 800e084:	4628      	mov	r0, r5
 800e086:	f7ff ff0d 	bl	800dea4 <_fflush_r>
 800e08a:	2800      	cmp	r0, #0
 800e08c:	d0d9      	beq.n	800e042 <__swbuf_r+0x2e>
 800e08e:	e7d6      	b.n	800e03e <__swbuf_r+0x2a>

0800e090 <__swsetup_r>:
 800e090:	b538      	push	{r3, r4, r5, lr}
 800e092:	4b29      	ldr	r3, [pc, #164]	@ (800e138 <__swsetup_r+0xa8>)
 800e094:	4605      	mov	r5, r0
 800e096:	6818      	ldr	r0, [r3, #0]
 800e098:	460c      	mov	r4, r1
 800e09a:	b118      	cbz	r0, 800e0a4 <__swsetup_r+0x14>
 800e09c:	6a03      	ldr	r3, [r0, #32]
 800e09e:	b90b      	cbnz	r3, 800e0a4 <__swsetup_r+0x14>
 800e0a0:	f7ff f834 	bl	800d10c <__sinit>
 800e0a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0a8:	0719      	lsls	r1, r3, #28
 800e0aa:	d422      	bmi.n	800e0f2 <__swsetup_r+0x62>
 800e0ac:	06da      	lsls	r2, r3, #27
 800e0ae:	d407      	bmi.n	800e0c0 <__swsetup_r+0x30>
 800e0b0:	2209      	movs	r2, #9
 800e0b2:	602a      	str	r2, [r5, #0]
 800e0b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0b8:	81a3      	strh	r3, [r4, #12]
 800e0ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e0be:	e033      	b.n	800e128 <__swsetup_r+0x98>
 800e0c0:	0758      	lsls	r0, r3, #29
 800e0c2:	d512      	bpl.n	800e0ea <__swsetup_r+0x5a>
 800e0c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e0c6:	b141      	cbz	r1, 800e0da <__swsetup_r+0x4a>
 800e0c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e0cc:	4299      	cmp	r1, r3
 800e0ce:	d002      	beq.n	800e0d6 <__swsetup_r+0x46>
 800e0d0:	4628      	mov	r0, r5
 800e0d2:	f000 f92f 	bl	800e334 <_free_r>
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e0da:	89a3      	ldrh	r3, [r4, #12]
 800e0dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e0e0:	81a3      	strh	r3, [r4, #12]
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	6063      	str	r3, [r4, #4]
 800e0e6:	6923      	ldr	r3, [r4, #16]
 800e0e8:	6023      	str	r3, [r4, #0]
 800e0ea:	89a3      	ldrh	r3, [r4, #12]
 800e0ec:	f043 0308 	orr.w	r3, r3, #8
 800e0f0:	81a3      	strh	r3, [r4, #12]
 800e0f2:	6923      	ldr	r3, [r4, #16]
 800e0f4:	b94b      	cbnz	r3, 800e10a <__swsetup_r+0x7a>
 800e0f6:	89a3      	ldrh	r3, [r4, #12]
 800e0f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e0fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e100:	d003      	beq.n	800e10a <__swsetup_r+0x7a>
 800e102:	4621      	mov	r1, r4
 800e104:	4628      	mov	r0, r5
 800e106:	f000 f83f 	bl	800e188 <__smakebuf_r>
 800e10a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e10e:	f013 0201 	ands.w	r2, r3, #1
 800e112:	d00a      	beq.n	800e12a <__swsetup_r+0x9a>
 800e114:	2200      	movs	r2, #0
 800e116:	60a2      	str	r2, [r4, #8]
 800e118:	6962      	ldr	r2, [r4, #20]
 800e11a:	4252      	negs	r2, r2
 800e11c:	61a2      	str	r2, [r4, #24]
 800e11e:	6922      	ldr	r2, [r4, #16]
 800e120:	b942      	cbnz	r2, 800e134 <__swsetup_r+0xa4>
 800e122:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e126:	d1c5      	bne.n	800e0b4 <__swsetup_r+0x24>
 800e128:	bd38      	pop	{r3, r4, r5, pc}
 800e12a:	0799      	lsls	r1, r3, #30
 800e12c:	bf58      	it	pl
 800e12e:	6962      	ldrpl	r2, [r4, #20]
 800e130:	60a2      	str	r2, [r4, #8]
 800e132:	e7f4      	b.n	800e11e <__swsetup_r+0x8e>
 800e134:	2000      	movs	r0, #0
 800e136:	e7f7      	b.n	800e128 <__swsetup_r+0x98>
 800e138:	20000250 	.word	0x20000250

0800e13c <__swhatbuf_r>:
 800e13c:	b570      	push	{r4, r5, r6, lr}
 800e13e:	460c      	mov	r4, r1
 800e140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e144:	2900      	cmp	r1, #0
 800e146:	b096      	sub	sp, #88	@ 0x58
 800e148:	4615      	mov	r5, r2
 800e14a:	461e      	mov	r6, r3
 800e14c:	da0d      	bge.n	800e16a <__swhatbuf_r+0x2e>
 800e14e:	89a3      	ldrh	r3, [r4, #12]
 800e150:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e154:	f04f 0100 	mov.w	r1, #0
 800e158:	bf14      	ite	ne
 800e15a:	2340      	movne	r3, #64	@ 0x40
 800e15c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e160:	2000      	movs	r0, #0
 800e162:	6031      	str	r1, [r6, #0]
 800e164:	602b      	str	r3, [r5, #0]
 800e166:	b016      	add	sp, #88	@ 0x58
 800e168:	bd70      	pop	{r4, r5, r6, pc}
 800e16a:	466a      	mov	r2, sp
 800e16c:	f000 f8c8 	bl	800e300 <_fstat_r>
 800e170:	2800      	cmp	r0, #0
 800e172:	dbec      	blt.n	800e14e <__swhatbuf_r+0x12>
 800e174:	9901      	ldr	r1, [sp, #4]
 800e176:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e17a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e17e:	4259      	negs	r1, r3
 800e180:	4159      	adcs	r1, r3
 800e182:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e186:	e7eb      	b.n	800e160 <__swhatbuf_r+0x24>

0800e188 <__smakebuf_r>:
 800e188:	898b      	ldrh	r3, [r1, #12]
 800e18a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e18c:	079d      	lsls	r5, r3, #30
 800e18e:	4606      	mov	r6, r0
 800e190:	460c      	mov	r4, r1
 800e192:	d507      	bpl.n	800e1a4 <__smakebuf_r+0x1c>
 800e194:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e198:	6023      	str	r3, [r4, #0]
 800e19a:	6123      	str	r3, [r4, #16]
 800e19c:	2301      	movs	r3, #1
 800e19e:	6163      	str	r3, [r4, #20]
 800e1a0:	b003      	add	sp, #12
 800e1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1a4:	ab01      	add	r3, sp, #4
 800e1a6:	466a      	mov	r2, sp
 800e1a8:	f7ff ffc8 	bl	800e13c <__swhatbuf_r>
 800e1ac:	9f00      	ldr	r7, [sp, #0]
 800e1ae:	4605      	mov	r5, r0
 800e1b0:	4639      	mov	r1, r7
 800e1b2:	4630      	mov	r0, r6
 800e1b4:	f7ff fbe6 	bl	800d984 <_malloc_r>
 800e1b8:	b948      	cbnz	r0, 800e1ce <__smakebuf_r+0x46>
 800e1ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1be:	059a      	lsls	r2, r3, #22
 800e1c0:	d4ee      	bmi.n	800e1a0 <__smakebuf_r+0x18>
 800e1c2:	f023 0303 	bic.w	r3, r3, #3
 800e1c6:	f043 0302 	orr.w	r3, r3, #2
 800e1ca:	81a3      	strh	r3, [r4, #12]
 800e1cc:	e7e2      	b.n	800e194 <__smakebuf_r+0xc>
 800e1ce:	89a3      	ldrh	r3, [r4, #12]
 800e1d0:	6020      	str	r0, [r4, #0]
 800e1d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1d6:	81a3      	strh	r3, [r4, #12]
 800e1d8:	9b01      	ldr	r3, [sp, #4]
 800e1da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e1de:	b15b      	cbz	r3, 800e1f8 <__smakebuf_r+0x70>
 800e1e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1e4:	4630      	mov	r0, r6
 800e1e6:	f000 f825 	bl	800e234 <_isatty_r>
 800e1ea:	b128      	cbz	r0, 800e1f8 <__smakebuf_r+0x70>
 800e1ec:	89a3      	ldrh	r3, [r4, #12]
 800e1ee:	f023 0303 	bic.w	r3, r3, #3
 800e1f2:	f043 0301 	orr.w	r3, r3, #1
 800e1f6:	81a3      	strh	r3, [r4, #12]
 800e1f8:	89a3      	ldrh	r3, [r4, #12]
 800e1fa:	431d      	orrs	r5, r3
 800e1fc:	81a5      	strh	r5, [r4, #12]
 800e1fe:	e7cf      	b.n	800e1a0 <__smakebuf_r+0x18>

0800e200 <memmove>:
 800e200:	4288      	cmp	r0, r1
 800e202:	b510      	push	{r4, lr}
 800e204:	eb01 0402 	add.w	r4, r1, r2
 800e208:	d902      	bls.n	800e210 <memmove+0x10>
 800e20a:	4284      	cmp	r4, r0
 800e20c:	4623      	mov	r3, r4
 800e20e:	d807      	bhi.n	800e220 <memmove+0x20>
 800e210:	1e43      	subs	r3, r0, #1
 800e212:	42a1      	cmp	r1, r4
 800e214:	d008      	beq.n	800e228 <memmove+0x28>
 800e216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e21a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e21e:	e7f8      	b.n	800e212 <memmove+0x12>
 800e220:	4402      	add	r2, r0
 800e222:	4601      	mov	r1, r0
 800e224:	428a      	cmp	r2, r1
 800e226:	d100      	bne.n	800e22a <memmove+0x2a>
 800e228:	bd10      	pop	{r4, pc}
 800e22a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e22e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e232:	e7f7      	b.n	800e224 <memmove+0x24>

0800e234 <_isatty_r>:
 800e234:	b538      	push	{r3, r4, r5, lr}
 800e236:	4d06      	ldr	r5, [pc, #24]	@ (800e250 <_isatty_r+0x1c>)
 800e238:	2300      	movs	r3, #0
 800e23a:	4604      	mov	r4, r0
 800e23c:	4608      	mov	r0, r1
 800e23e:	602b      	str	r3, [r5, #0]
 800e240:	f7f5 ff3f 	bl	80040c2 <_isatty>
 800e244:	1c43      	adds	r3, r0, #1
 800e246:	d102      	bne.n	800e24e <_isatty_r+0x1a>
 800e248:	682b      	ldr	r3, [r5, #0]
 800e24a:	b103      	cbz	r3, 800e24e <_isatty_r+0x1a>
 800e24c:	6023      	str	r3, [r4, #0]
 800e24e:	bd38      	pop	{r3, r4, r5, pc}
 800e250:	20001a40 	.word	0x20001a40

0800e254 <_lseek_r>:
 800e254:	b538      	push	{r3, r4, r5, lr}
 800e256:	4d07      	ldr	r5, [pc, #28]	@ (800e274 <_lseek_r+0x20>)
 800e258:	4604      	mov	r4, r0
 800e25a:	4608      	mov	r0, r1
 800e25c:	4611      	mov	r1, r2
 800e25e:	2200      	movs	r2, #0
 800e260:	602a      	str	r2, [r5, #0]
 800e262:	461a      	mov	r2, r3
 800e264:	f7f5 ff38 	bl	80040d8 <_lseek>
 800e268:	1c43      	adds	r3, r0, #1
 800e26a:	d102      	bne.n	800e272 <_lseek_r+0x1e>
 800e26c:	682b      	ldr	r3, [r5, #0]
 800e26e:	b103      	cbz	r3, 800e272 <_lseek_r+0x1e>
 800e270:	6023      	str	r3, [r4, #0]
 800e272:	bd38      	pop	{r3, r4, r5, pc}
 800e274:	20001a40 	.word	0x20001a40

0800e278 <_read_r>:
 800e278:	b538      	push	{r3, r4, r5, lr}
 800e27a:	4d07      	ldr	r5, [pc, #28]	@ (800e298 <_read_r+0x20>)
 800e27c:	4604      	mov	r4, r0
 800e27e:	4608      	mov	r0, r1
 800e280:	4611      	mov	r1, r2
 800e282:	2200      	movs	r2, #0
 800e284:	602a      	str	r2, [r5, #0]
 800e286:	461a      	mov	r2, r3
 800e288:	f7f5 fec6 	bl	8004018 <_read>
 800e28c:	1c43      	adds	r3, r0, #1
 800e28e:	d102      	bne.n	800e296 <_read_r+0x1e>
 800e290:	682b      	ldr	r3, [r5, #0]
 800e292:	b103      	cbz	r3, 800e296 <_read_r+0x1e>
 800e294:	6023      	str	r3, [r4, #0]
 800e296:	bd38      	pop	{r3, r4, r5, pc}
 800e298:	20001a40 	.word	0x20001a40

0800e29c <_sbrk_r>:
 800e29c:	b538      	push	{r3, r4, r5, lr}
 800e29e:	4d06      	ldr	r5, [pc, #24]	@ (800e2b8 <_sbrk_r+0x1c>)
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	4604      	mov	r4, r0
 800e2a4:	4608      	mov	r0, r1
 800e2a6:	602b      	str	r3, [r5, #0]
 800e2a8:	f7f5 ff24 	bl	80040f4 <_sbrk>
 800e2ac:	1c43      	adds	r3, r0, #1
 800e2ae:	d102      	bne.n	800e2b6 <_sbrk_r+0x1a>
 800e2b0:	682b      	ldr	r3, [r5, #0]
 800e2b2:	b103      	cbz	r3, 800e2b6 <_sbrk_r+0x1a>
 800e2b4:	6023      	str	r3, [r4, #0]
 800e2b6:	bd38      	pop	{r3, r4, r5, pc}
 800e2b8:	20001a40 	.word	0x20001a40

0800e2bc <_write_r>:
 800e2bc:	b538      	push	{r3, r4, r5, lr}
 800e2be:	4d07      	ldr	r5, [pc, #28]	@ (800e2dc <_write_r+0x20>)
 800e2c0:	4604      	mov	r4, r0
 800e2c2:	4608      	mov	r0, r1
 800e2c4:	4611      	mov	r1, r2
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	602a      	str	r2, [r5, #0]
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	f7f5 fec1 	bl	8004052 <_write>
 800e2d0:	1c43      	adds	r3, r0, #1
 800e2d2:	d102      	bne.n	800e2da <_write_r+0x1e>
 800e2d4:	682b      	ldr	r3, [r5, #0]
 800e2d6:	b103      	cbz	r3, 800e2da <_write_r+0x1e>
 800e2d8:	6023      	str	r3, [r4, #0]
 800e2da:	bd38      	pop	{r3, r4, r5, pc}
 800e2dc:	20001a40 	.word	0x20001a40

0800e2e0 <_close_r>:
 800e2e0:	b538      	push	{r3, r4, r5, lr}
 800e2e2:	4d06      	ldr	r5, [pc, #24]	@ (800e2fc <_close_r+0x1c>)
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	4608      	mov	r0, r1
 800e2ea:	602b      	str	r3, [r5, #0]
 800e2ec:	f7f5 fecd 	bl	800408a <_close>
 800e2f0:	1c43      	adds	r3, r0, #1
 800e2f2:	d102      	bne.n	800e2fa <_close_r+0x1a>
 800e2f4:	682b      	ldr	r3, [r5, #0]
 800e2f6:	b103      	cbz	r3, 800e2fa <_close_r+0x1a>
 800e2f8:	6023      	str	r3, [r4, #0]
 800e2fa:	bd38      	pop	{r3, r4, r5, pc}
 800e2fc:	20001a40 	.word	0x20001a40

0800e300 <_fstat_r>:
 800e300:	b538      	push	{r3, r4, r5, lr}
 800e302:	4d07      	ldr	r5, [pc, #28]	@ (800e320 <_fstat_r+0x20>)
 800e304:	2300      	movs	r3, #0
 800e306:	4604      	mov	r4, r0
 800e308:	4608      	mov	r0, r1
 800e30a:	4611      	mov	r1, r2
 800e30c:	602b      	str	r3, [r5, #0]
 800e30e:	f7f5 fec8 	bl	80040a2 <_fstat>
 800e312:	1c43      	adds	r3, r0, #1
 800e314:	d102      	bne.n	800e31c <_fstat_r+0x1c>
 800e316:	682b      	ldr	r3, [r5, #0]
 800e318:	b103      	cbz	r3, 800e31c <_fstat_r+0x1c>
 800e31a:	6023      	str	r3, [r4, #0]
 800e31c:	bd38      	pop	{r3, r4, r5, pc}
 800e31e:	bf00      	nop
 800e320:	20001a40 	.word	0x20001a40

0800e324 <abort>:
 800e324:	b508      	push	{r3, lr}
 800e326:	2006      	movs	r0, #6
 800e328:	f000 f87e 	bl	800e428 <raise>
 800e32c:	2001      	movs	r0, #1
 800e32e:	f7f5 fe68 	bl	8004002 <_exit>
	...

0800e334 <_free_r>:
 800e334:	b538      	push	{r3, r4, r5, lr}
 800e336:	4605      	mov	r5, r0
 800e338:	2900      	cmp	r1, #0
 800e33a:	d041      	beq.n	800e3c0 <_free_r+0x8c>
 800e33c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e340:	1f0c      	subs	r4, r1, #4
 800e342:	2b00      	cmp	r3, #0
 800e344:	bfb8      	it	lt
 800e346:	18e4      	addlt	r4, r4, r3
 800e348:	f7ff fdd4 	bl	800def4 <__malloc_lock>
 800e34c:	4a1d      	ldr	r2, [pc, #116]	@ (800e3c4 <_free_r+0x90>)
 800e34e:	6813      	ldr	r3, [r2, #0]
 800e350:	b933      	cbnz	r3, 800e360 <_free_r+0x2c>
 800e352:	6063      	str	r3, [r4, #4]
 800e354:	6014      	str	r4, [r2, #0]
 800e356:	4628      	mov	r0, r5
 800e358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e35c:	f7ff bdd0 	b.w	800df00 <__malloc_unlock>
 800e360:	42a3      	cmp	r3, r4
 800e362:	d908      	bls.n	800e376 <_free_r+0x42>
 800e364:	6820      	ldr	r0, [r4, #0]
 800e366:	1821      	adds	r1, r4, r0
 800e368:	428b      	cmp	r3, r1
 800e36a:	bf01      	itttt	eq
 800e36c:	6819      	ldreq	r1, [r3, #0]
 800e36e:	685b      	ldreq	r3, [r3, #4]
 800e370:	1809      	addeq	r1, r1, r0
 800e372:	6021      	streq	r1, [r4, #0]
 800e374:	e7ed      	b.n	800e352 <_free_r+0x1e>
 800e376:	461a      	mov	r2, r3
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	b10b      	cbz	r3, 800e380 <_free_r+0x4c>
 800e37c:	42a3      	cmp	r3, r4
 800e37e:	d9fa      	bls.n	800e376 <_free_r+0x42>
 800e380:	6811      	ldr	r1, [r2, #0]
 800e382:	1850      	adds	r0, r2, r1
 800e384:	42a0      	cmp	r0, r4
 800e386:	d10b      	bne.n	800e3a0 <_free_r+0x6c>
 800e388:	6820      	ldr	r0, [r4, #0]
 800e38a:	4401      	add	r1, r0
 800e38c:	1850      	adds	r0, r2, r1
 800e38e:	4283      	cmp	r3, r0
 800e390:	6011      	str	r1, [r2, #0]
 800e392:	d1e0      	bne.n	800e356 <_free_r+0x22>
 800e394:	6818      	ldr	r0, [r3, #0]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	6053      	str	r3, [r2, #4]
 800e39a:	4408      	add	r0, r1
 800e39c:	6010      	str	r0, [r2, #0]
 800e39e:	e7da      	b.n	800e356 <_free_r+0x22>
 800e3a0:	d902      	bls.n	800e3a8 <_free_r+0x74>
 800e3a2:	230c      	movs	r3, #12
 800e3a4:	602b      	str	r3, [r5, #0]
 800e3a6:	e7d6      	b.n	800e356 <_free_r+0x22>
 800e3a8:	6820      	ldr	r0, [r4, #0]
 800e3aa:	1821      	adds	r1, r4, r0
 800e3ac:	428b      	cmp	r3, r1
 800e3ae:	bf04      	itt	eq
 800e3b0:	6819      	ldreq	r1, [r3, #0]
 800e3b2:	685b      	ldreq	r3, [r3, #4]
 800e3b4:	6063      	str	r3, [r4, #4]
 800e3b6:	bf04      	itt	eq
 800e3b8:	1809      	addeq	r1, r1, r0
 800e3ba:	6021      	streq	r1, [r4, #0]
 800e3bc:	6054      	str	r4, [r2, #4]
 800e3be:	e7ca      	b.n	800e356 <_free_r+0x22>
 800e3c0:	bd38      	pop	{r3, r4, r5, pc}
 800e3c2:	bf00      	nop
 800e3c4:	20001a3c 	.word	0x20001a3c

0800e3c8 <_malloc_usable_size_r>:
 800e3c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3cc:	1f18      	subs	r0, r3, #4
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	bfbc      	itt	lt
 800e3d2:	580b      	ldrlt	r3, [r1, r0]
 800e3d4:	18c0      	addlt	r0, r0, r3
 800e3d6:	4770      	bx	lr

0800e3d8 <_raise_r>:
 800e3d8:	291f      	cmp	r1, #31
 800e3da:	b538      	push	{r3, r4, r5, lr}
 800e3dc:	4605      	mov	r5, r0
 800e3de:	460c      	mov	r4, r1
 800e3e0:	d904      	bls.n	800e3ec <_raise_r+0x14>
 800e3e2:	2316      	movs	r3, #22
 800e3e4:	6003      	str	r3, [r0, #0]
 800e3e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e3ea:	bd38      	pop	{r3, r4, r5, pc}
 800e3ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e3ee:	b112      	cbz	r2, 800e3f6 <_raise_r+0x1e>
 800e3f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e3f4:	b94b      	cbnz	r3, 800e40a <_raise_r+0x32>
 800e3f6:	4628      	mov	r0, r5
 800e3f8:	f000 f830 	bl	800e45c <_getpid_r>
 800e3fc:	4622      	mov	r2, r4
 800e3fe:	4601      	mov	r1, r0
 800e400:	4628      	mov	r0, r5
 800e402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e406:	f000 b817 	b.w	800e438 <_kill_r>
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	d00a      	beq.n	800e424 <_raise_r+0x4c>
 800e40e:	1c59      	adds	r1, r3, #1
 800e410:	d103      	bne.n	800e41a <_raise_r+0x42>
 800e412:	2316      	movs	r3, #22
 800e414:	6003      	str	r3, [r0, #0]
 800e416:	2001      	movs	r0, #1
 800e418:	e7e7      	b.n	800e3ea <_raise_r+0x12>
 800e41a:	2100      	movs	r1, #0
 800e41c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e420:	4620      	mov	r0, r4
 800e422:	4798      	blx	r3
 800e424:	2000      	movs	r0, #0
 800e426:	e7e0      	b.n	800e3ea <_raise_r+0x12>

0800e428 <raise>:
 800e428:	4b02      	ldr	r3, [pc, #8]	@ (800e434 <raise+0xc>)
 800e42a:	4601      	mov	r1, r0
 800e42c:	6818      	ldr	r0, [r3, #0]
 800e42e:	f7ff bfd3 	b.w	800e3d8 <_raise_r>
 800e432:	bf00      	nop
 800e434:	20000250 	.word	0x20000250

0800e438 <_kill_r>:
 800e438:	b538      	push	{r3, r4, r5, lr}
 800e43a:	4d07      	ldr	r5, [pc, #28]	@ (800e458 <_kill_r+0x20>)
 800e43c:	2300      	movs	r3, #0
 800e43e:	4604      	mov	r4, r0
 800e440:	4608      	mov	r0, r1
 800e442:	4611      	mov	r1, r2
 800e444:	602b      	str	r3, [r5, #0]
 800e446:	f7f5 fdcc 	bl	8003fe2 <_kill>
 800e44a:	1c43      	adds	r3, r0, #1
 800e44c:	d102      	bne.n	800e454 <_kill_r+0x1c>
 800e44e:	682b      	ldr	r3, [r5, #0]
 800e450:	b103      	cbz	r3, 800e454 <_kill_r+0x1c>
 800e452:	6023      	str	r3, [r4, #0]
 800e454:	bd38      	pop	{r3, r4, r5, pc}
 800e456:	bf00      	nop
 800e458:	20001a40 	.word	0x20001a40

0800e45c <_getpid_r>:
 800e45c:	f7f5 bdb9 	b.w	8003fd2 <_getpid>

0800e460 <_init>:
 800e460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e462:	bf00      	nop
 800e464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e466:	bc08      	pop	{r3}
 800e468:	469e      	mov	lr, r3
 800e46a:	4770      	bx	lr

0800e46c <_fini>:
 800e46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e46e:	bf00      	nop
 800e470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e472:	bc08      	pop	{r3}
 800e474:	469e      	mov	lr, r3
 800e476:	4770      	bx	lr
