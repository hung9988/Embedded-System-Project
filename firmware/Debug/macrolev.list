
macrolev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08040000  08040000  000112a0  2**0
                  CONTENTS
  1 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000dc08  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001440  0800dda8  0800dda8  0000eda8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800f1e8  0800f1e8  000112a0  2**0
                  CONTENTS
  5 .ARM          00000008  0800f1e8  0800f1e8  000101e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800f1f0  0800f1f0  000112a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800f1f0  0800f1f0  000101f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800f1f4  0800f1f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000002a0  20000000  0800f1f8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000017a4  200002a0  0800f498  000112a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001a44  0800f498  00011a44  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000112a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ea9d  00000000  00000000  000112d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000551b  00000000  00000000  0002fd6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  00035288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001203  00000000  00000000  00036948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000203e0  00000000  00000000  00037b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f595  00000000  00000000  00057f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9c6b  00000000  00000000  000774c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013112b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a58  00000000  00000000  00131170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00137bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002a0 	.word	0x200002a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dd90 	.word	0x0800dd90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002a4 	.word	0x200002a4
 80001dc:	0800dd90 	.word	0x0800dd90

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <cdc_performance_measure>:
static void cdc_write_string_chunked(const char *str);
static void cdc_write_flush_wait(void);

extern uint32_t started_at; // Define this somewhere in your code

void cdc_performance_measure(uint32_t started_at) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b098      	sub	sp, #96	@ 0x60
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_ready(void) {
  return tud_cdc_n_ready(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_connected(void) {
  return tud_cdc_n_connected(0);
 80005e4:	2000      	movs	r0, #0
 80005e6:	f006 f9bd 	bl	8006964 <tud_cdc_n_connected>
 80005ea:	4603      	mov	r3, r0
  if (!tud_cdc_connected())
 80005ec:	f083 0301 	eor.w	r3, r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d11d      	bne.n	8000632 <cdc_performance_measure+0x56>
    return;

  uint32_t now = HAL_GetTick();
 80005f6:	f003 fb65 	bl	8003cc4 <HAL_GetTick>
 80005fa:	4603      	mov	r3, r0
 80005fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t difference = now - started_at;
 80005fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	65bb      	str	r3, [r7, #88]	@ 0x58

  char msg[64];
  int len = snprintf(msg, sizeof(msg), "One cycle duration: %lu\r\n", difference);
 8000606:	f107 000c 	add.w	r0, r7, #12
 800060a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800060c:	4a0b      	ldr	r2, [pc, #44]	@ (800063c <cdc_performance_measure+0x60>)
 800060e:	2140      	movs	r1, #64	@ 0x40
 8000610:	f00c fa76 	bl	800cb00 <sniprintf>
 8000614:	6578      	str	r0, [r7, #84]	@ 0x54

  tud_cdc_write(msg, len);
 8000616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000618:	f107 020c 	add.w	r2, r7, #12
 800061c:	653a      	str	r2, [r7, #80]	@ 0x50
 800061e:	64fb      	str	r3, [r7, #76]	@ 0x4c
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_char(char ch) {
  return tud_cdc_n_write_char(0, ch);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write(void const* buffer, uint32_t bufsize) {
  return tud_cdc_n_write(0, buffer, bufsize);
 8000620:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000622:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000624:	2000      	movs	r0, #0
 8000626:	f006 fa1d 	bl	8006a64 <tud_cdc_n_write>
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_str(char const* str) {
  return tud_cdc_n_write_str(0, str);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_flush(void) {
  return tud_cdc_n_write_flush(0);
 800062a:	2000      	movs	r0, #0
 800062c:	f006 fa4e 	bl	8006acc <tud_cdc_n_write_flush>
 8000630:	e000      	b.n	8000634 <cdc_performance_measure+0x58>
    return;
 8000632:	bf00      	nop
  tud_cdc_write_flush(); // Make sure data is sent
}
 8000634:	3760      	adds	r7, #96	@ 0x60
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	0800dda8 	.word	0x0800dda8

08000640 <cdc_task>:
void cdc_task(void) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b098      	sub	sp, #96	@ 0x60
 8000644:	af00      	add	r7, sp, #0
  return tud_cdc_n_connected(0);
 8000646:	2000      	movs	r0, #0
 8000648:	f006 f98c 	bl	8006964 <tud_cdc_n_connected>
 800064c:	4603      	mov	r3, r0
  if (tud_cdc_connected()) {
 800064e:	2b00      	cmp	r3, #0
 8000650:	d079      	beq.n	8000746 <cdc_task+0x106>
  return tud_cdc_n_available(0);
 8000652:	2000      	movs	r0, #0
 8000654:	f006 f9c4 	bl	80069e0 <tud_cdc_n_available>
 8000658:	4603      	mov	r3, r0
    if (tud_cdc_available()) {
 800065a:	2b00      	cmp	r3, #0
 800065c:	d076      	beq.n	800074c <cdc_task+0x10c>
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	657b      	str	r3, [r7, #84]	@ 0x54
 8000662:	2340      	movs	r3, #64	@ 0x40
 8000664:	653b      	str	r3, [r7, #80]	@ 0x50
  return tud_cdc_n_read(0, buffer, bufsize);
 8000666:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000668:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800066a:	2000      	movs	r0, #0
 800066c:	f006 f9ce 	bl	8006a0c <tud_cdc_n_read>
 8000670:	4603      	mov	r3, r0
      uint8_t buf[CFG_TUD_CDC_RX_BUFSIZE];
      uint32_t count = tud_cdc_read(buf, sizeof(buf));
 8000672:	65bb      	str	r3, [r7, #88]	@ 0x58

      for (uint32_t i = 0; i < count; i++) {
 8000674:	2300      	movs	r3, #0
 8000676:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000678:	e05e      	b.n	8000738 <cdc_task+0xf8>
        char c = buf[i];
 800067a:	1d3a      	adds	r2, r7, #4
 800067c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800067e:	4413      	add	r3, r2
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Handle backspace
        if (c == '\b' || c == 127) {
 8000686:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800068a:	2b08      	cmp	r3, #8
 800068c:	d003      	beq.n	8000696 <cdc_task+0x56>
 800068e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000692:	2b7f      	cmp	r3, #127	@ 0x7f
 8000694:	d10d      	bne.n	80006b2 <cdc_task+0x72>
          if (cmd_index > 0) {
 8000696:	4b2f      	ldr	r3, [pc, #188]	@ (8000754 <cdc_task+0x114>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d049      	beq.n	8000732 <cdc_task+0xf2>
            cmd_index--;
 800069e:	4b2d      	ldr	r3, [pc, #180]	@ (8000754 <cdc_task+0x114>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <cdc_task+0x114>)
 80006a8:	701a      	strb	r2, [r3, #0]
            cdc_write_string_chunked("\b \b"); // Erase character
 80006aa:	482b      	ldr	r0, [pc, #172]	@ (8000758 <cdc_task+0x118>)
 80006ac:	f000 f85c 	bl	8000768 <cdc_write_string_chunked>
          if (cmd_index > 0) {
 80006b0:	e03f      	b.n	8000732 <cdc_task+0xf2>
          }
        }
        // Handle enter/newline
        else if (c == '\r' || c == '\n') {
 80006b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006b6:	2b0d      	cmp	r3, #13
 80006b8:	d003      	beq.n	80006c2 <cdc_task+0x82>
 80006ba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006be:	2b0a      	cmp	r3, #10
 80006c0:	d116      	bne.n	80006f0 <cdc_task+0xb0>
          cdc_write_string_chunked("\r\n");
 80006c2:	4826      	ldr	r0, [pc, #152]	@ (800075c <cdc_task+0x11c>)
 80006c4:	f000 f850 	bl	8000768 <cdc_write_string_chunked>
          cmd_buffer[cmd_index] = '\0';
 80006c8:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <cdc_task+0x114>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b24      	ldr	r3, [pc, #144]	@ (8000760 <cdc_task+0x120>)
 80006d0:	2100      	movs	r1, #0
 80006d2:	5499      	strb	r1, [r3, r2]

          if (cmd_index >= 5) {
 80006d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <cdc_task+0x114>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b04      	cmp	r3, #4
 80006da:	d905      	bls.n	80006e8 <cdc_task+0xa8>
            process_command(cmd_buffer);
 80006dc:	4820      	ldr	r0, [pc, #128]	@ (8000760 <cdc_task+0x120>)
 80006de:	f000 f8af 	bl	8000840 <process_command>
            cmd_index = 0;
 80006e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <cdc_task+0x114>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
          }

          cdc_write_string_chunked("Ready> ");
 80006e8:	481e      	ldr	r0, [pc, #120]	@ (8000764 <cdc_task+0x124>)
 80006ea:	f000 f83d 	bl	8000768 <cdc_write_string_chunked>
 80006ee:	e020      	b.n	8000732 <cdc_task+0xf2>
        }
        // Handle printable characters
        else if (c >= 32 && c <= 126 && cmd_index < sizeof(cmd_buffer) - 1) {
 80006f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006f4:	2b1f      	cmp	r3, #31
 80006f6:	d91c      	bls.n	8000732 <cdc_task+0xf2>
 80006f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006fc:	2b7e      	cmp	r3, #126	@ 0x7e
 80006fe:	d818      	bhi.n	8000732 <cdc_task+0xf2>
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <cdc_task+0x114>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b3e      	cmp	r3, #62	@ 0x3e
 8000706:	d814      	bhi.n	8000732 <cdc_task+0xf2>
          cmd_buffer[cmd_index++] = c;
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <cdc_task+0x114>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	1c5a      	adds	r2, r3, #1
 800070e:	b2d1      	uxtb	r1, r2
 8000710:	4a10      	ldr	r2, [pc, #64]	@ (8000754 <cdc_task+0x114>)
 8000712:	7011      	strb	r1, [r2, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <cdc_task+0x120>)
 800071c:	5499      	strb	r1, [r3, r2]
 800071e:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 8000722:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000724:	2301      	movs	r3, #1
 8000726:	64bb      	str	r3, [r7, #72]	@ 0x48
  return tud_cdc_n_write(0, buffer, bufsize);
 8000728:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800072a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800072c:	2000      	movs	r0, #0
 800072e:	f006 f999 	bl	8006a64 <tud_cdc_n_write>
      for (uint32_t i = 0; i < count; i++) {
 8000732:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000734:	3301      	adds	r3, #1
 8000736:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000738:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800073a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800073c:	429a      	cmp	r2, r3
 800073e:	d39c      	bcc.n	800067a <cdc_task+0x3a>
          tud_cdc_write(&c, 1); // Echo character
        }
      }

      cdc_write_flush_wait();
 8000740:	f000 f85d 	bl	80007fe <cdc_write_flush_wait>
    }
  } else {
    // Reset flag when disconnected
    cmd_index = 0;
  }
}
 8000744:	e002      	b.n	800074c <cdc_task+0x10c>
    cmd_index = 0;
 8000746:	4b03      	ldr	r3, [pc, #12]	@ (8000754 <cdc_task+0x114>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
}
 800074c:	bf00      	nop
 800074e:	3760      	adds	r7, #96	@ 0x60
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200002fc 	.word	0x200002fc
 8000758:	0800ddc4 	.word	0x0800ddc4
 800075c:	0800ddc8 	.word	0x0800ddc8
 8000760:	200002bc 	.word	0x200002bc
 8000764:	0800ddcc 	.word	0x0800ddcc

08000768 <cdc_write_string_chunked>:

// Write string in chunks to avoid buffer overflow
static void cdc_write_string_chunked(const char *str) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  if (!str)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d03f      	beq.n	80007f6 <cdc_write_string_chunked+0x8e>
    return;

  size_t len = strlen(str);
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff fd3c 	bl	80001f4 <strlen>
 800077c:	61b8      	str	r0, [r7, #24]
  size_t sent = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  const size_t chunk_size = CFG_TUD_CDC_EP_BUFSIZE - 8; // Leave some margin
 8000782:	2338      	movs	r3, #56	@ 0x38
 8000784:	617b      	str	r3, [r7, #20]

  while (sent < len) {
 8000786:	e031      	b.n	80007ec <cdc_write_string_chunked+0x84>
    size_t to_send = (len - sent > chunk_size) ? chunk_size : (len - sent);
 8000788:	69ba      	ldr	r2, [r7, #24]
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	697a      	ldr	r2, [r7, #20]
 8000790:	4293      	cmp	r3, r2
 8000792:	bf28      	it	cs
 8000794:	4613      	movcs	r3, r2
 8000796:	613b      	str	r3, [r7, #16]

    // Wait for space in buffer
    while (tud_cdc_write_available() < to_send) {
 8000798:	e005      	b.n	80007a6 <cdc_write_string_chunked+0x3e>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 800079a:	2100      	movs	r1, #0
 800079c:	f04f 30ff 	mov.w	r0, #4294967295
 80007a0:	f008 fa6e 	bl	8008c80 <tud_task_ext>
}
 80007a4:	bf00      	nop
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_available(void) {
  return tud_cdc_n_write_available(0);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f006 fa12 	bl	8006bd0 <tud_cdc_n_write_available>
 80007ac:	4602      	mov	r2, r0
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d8f2      	bhi.n	800079a <cdc_write_string_chunked+0x32>
      tud_task(); // Process USB tasks
    }

    tud_cdc_write(str + sent, to_send);
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	4413      	add	r3, r2
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	60bb      	str	r3, [r7, #8]
  return tud_cdc_n_write(0, buffer, bufsize);
 80007c0:	68ba      	ldr	r2, [r7, #8]
 80007c2:	68f9      	ldr	r1, [r7, #12]
 80007c4:	2000      	movs	r0, #0
 80007c6:	f006 f94d 	bl	8006a64 <tud_cdc_n_write>
    sent += to_send;
 80007ca:	69fa      	ldr	r2, [r7, #28]
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	4413      	add	r3, r2
 80007d0:	61fb      	str	r3, [r7, #28]
  return tud_cdc_n_write_available(0);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f006 f9fc 	bl	8006bd0 <tud_cdc_n_write_available>
 80007d8:	4602      	mov	r2, r0

    // Flush if buffer is getting full or we're done
    if (tud_cdc_write_available() < chunk_size || sent >= len) {
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	4293      	cmp	r3, r2
 80007de:	d803      	bhi.n	80007e8 <cdc_write_string_chunked+0x80>
 80007e0:	69fa      	ldr	r2, [r7, #28]
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d301      	bcc.n	80007ec <cdc_write_string_chunked+0x84>
      cdc_write_flush_wait();
 80007e8:	f000 f809 	bl	80007fe <cdc_write_flush_wait>
  while (sent < len) {
 80007ec:	69fa      	ldr	r2, [r7, #28]
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d3c9      	bcc.n	8000788 <cdc_write_string_chunked+0x20>
 80007f4:	e000      	b.n	80007f8 <cdc_write_string_chunked+0x90>
    return;
 80007f6:	bf00      	nop
    }
  }
}
 80007f8:	3720      	adds	r7, #32
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <cdc_write_flush_wait>:

// Wait for flush to complete
static void cdc_write_flush_wait(void) {
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 8000804:	2000      	movs	r0, #0
 8000806:	f006 f961 	bl	8006acc <tud_cdc_n_write_flush>
  tud_cdc_write_flush();

  // Wait for data to be sent
  uint32_t timeout = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
  while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 800080e:	e008      	b.n	8000822 <cdc_write_flush_wait+0x24>
  tud_task_ext(UINT32_MAX, false);
 8000810:	2100      	movs	r1, #0
 8000812:	f04f 30ff 	mov.w	r0, #4294967295
 8000816:	f008 fa33 	bl	8008c80 <tud_task_ext>
}
 800081a:	bf00      	nop
    tud_task(); // Process USB tasks
    timeout++;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3301      	adds	r3, #1
 8000820:	607b      	str	r3, [r7, #4]
  return tud_cdc_n_write_available(0);
 8000822:	2000      	movs	r0, #0
 8000824:	f006 f9d4 	bl	8006bd0 <tud_cdc_n_write_available>
 8000828:	4603      	mov	r3, r0
  while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 800082a:	2b7f      	cmp	r3, #127	@ 0x7f
 800082c:	d804      	bhi.n	8000838 <cdc_write_flush_wait+0x3a>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000834:	4293      	cmp	r3, r2
 8000836:	d9eb      	bls.n	8000810 <cdc_write_flush_wait+0x12>
  }
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <process_command>:

static void process_command(char *cmd) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b096      	sub	sp, #88	@ 0x58
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  // Convert to lowercase for case-insensitive commands
  for (int i = 0; cmd[i]; i++) {
 8000848:	2300      	movs	r3, #0
 800084a:	657b      	str	r3, [r7, #84]	@ 0x54
 800084c:	e018      	b.n	8000880 <process_command+0x40>
    if (cmd[i] >= 'A' && cmd[i] <= 'Z') {
 800084e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	4413      	add	r3, r2
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b40      	cmp	r3, #64	@ 0x40
 8000858:	d90f      	bls.n	800087a <process_command+0x3a>
 800085a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	4413      	add	r3, r2
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b5a      	cmp	r3, #90	@ 0x5a
 8000864:	d809      	bhi.n	800087a <process_command+0x3a>
      cmd[i] += 32;
 8000866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	4413      	add	r3, r2
 800086c:	781a      	ldrb	r2, [r3, #0]
 800086e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000870:	6879      	ldr	r1, [r7, #4]
 8000872:	440b      	add	r3, r1
 8000874:	3220      	adds	r2, #32
 8000876:	b2d2      	uxtb	r2, r2
 8000878:	701a      	strb	r2, [r3, #0]
  for (int i = 0; cmd[i]; i++) {
 800087a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800087c:	3301      	adds	r3, #1
 800087e:	657b      	str	r3, [r7, #84]	@ 0x54
 8000880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1e0      	bne.n	800084e <process_command+0xe>
    }
  }

  char *token = strtok(cmd, " ");
 800088c:	49ad      	ldr	r1, [pc, #692]	@ (8000b44 <process_command+0x304>)
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f00c f9da 	bl	800cc48 <strtok>
 8000894:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (!token)
 8000896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000898:	2b00      	cmp	r3, #0
 800089a:	f000 817f 	beq.w	8000b9c <process_command+0x35c>
    return;

  if (strcmp(token, "help") == 0) {
 800089e:	49aa      	ldr	r1, [pc, #680]	@ (8000b48 <process_command+0x308>)
 80008a0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80008a2:	f7ff fc9d 	bl	80001e0 <strcmp>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d102      	bne.n	80008b2 <process_command+0x72>
    print_help();
 80008ac:	f000 f97e 	bl	8000bac <print_help>
 80008b0:	e175      	b.n	8000b9e <process_command+0x35e>
  } else if (strcmp(token, "show") == 0) {
 80008b2:	49a6      	ldr	r1, [pc, #664]	@ (8000b4c <process_command+0x30c>)
 80008b4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80008b6:	f7ff fc93 	bl	80001e0 <strcmp>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d102      	bne.n	80008c6 <process_command+0x86>
    print_config();
 80008c0:	f000 f9ba 	bl	8000c38 <print_config>
 80008c4:	e16b      	b.n	8000b9e <process_command+0x35e>
  } else if (strcmp(token, "set") == 0) {
 80008c6:	49a2      	ldr	r1, [pc, #648]	@ (8000b50 <process_command+0x310>)
 80008c8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80008ca:	f7ff fc89 	bl	80001e0 <strcmp>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d118      	bne.n	8000906 <process_command+0xc6>
    char *param = strtok(NULL, " ");
 80008d4:	499b      	ldr	r1, [pc, #620]	@ (8000b44 <process_command+0x304>)
 80008d6:	2000      	movs	r0, #0
 80008d8:	f00c f9b6 	bl	800cc48 <strtok>
 80008dc:	6178      	str	r0, [r7, #20]
    char *value = strtok(NULL, " ");
 80008de:	4999      	ldr	r1, [pc, #612]	@ (8000b44 <process_command+0x304>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f00c f9b1 	bl	800cc48 <strtok>
 80008e6:	6138      	str	r0, [r7, #16]
    if (param && value) {
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d007      	beq.n	80008fe <process_command+0xbe>
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d004      	beq.n	80008fe <process_command+0xbe>
      set_config_value(param, value);
 80008f4:	6939      	ldr	r1, [r7, #16]
 80008f6:	6978      	ldr	r0, [r7, #20]
 80008f8:	f000 fa00 	bl	8000cfc <set_config_value>
 80008fc:	e14f      	b.n	8000b9e <process_command+0x35e>
    } else {
      cdc_write_string_chunked("Usage: set <parameter> <value>\r\n");
 80008fe:	4895      	ldr	r0, [pc, #596]	@ (8000b54 <process_command+0x314>)
 8000900:	f7ff ff32 	bl	8000768 <cdc_write_string_chunked>
 8000904:	e14b      	b.n	8000b9e <process_command+0x35e>
    }
  } else if (strcmp(token, "keymap") == 0) {
 8000906:	4994      	ldr	r1, [pc, #592]	@ (8000b58 <process_command+0x318>)
 8000908:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800090a:	f7ff fc69 	bl	80001e0 <strcmp>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d11c      	bne.n	800094e <process_command+0x10e>
    char *layer_str = strtok(NULL, " ");
 8000914:	498b      	ldr	r1, [pc, #556]	@ (8000b44 <process_command+0x304>)
 8000916:	2000      	movs	r0, #0
 8000918:	f00c f996 	bl	800cc48 <strtok>
 800091c:	61f8      	str	r0, [r7, #28]
    if (layer_str) {
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d010      	beq.n	8000946 <process_command+0x106>
      uint8_t layer = atoi(layer_str);
 8000924:	69f8      	ldr	r0, [r7, #28]
 8000926:	f00b ffa0 	bl	800c86a <atoi>
 800092a:	4603      	mov	r3, r0
 800092c:	76fb      	strb	r3, [r7, #27]
      if (layer < LAYERS_COUNT) {
 800092e:	7efb      	ldrb	r3, [r7, #27]
 8000930:	2b03      	cmp	r3, #3
 8000932:	d804      	bhi.n	800093e <process_command+0xfe>
        print_keymap(layer);
 8000934:	7efb      	ldrb	r3, [r7, #27]
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fa8e 	bl	8000e58 <print_keymap>
 800093c:	e12f      	b.n	8000b9e <process_command+0x35e>
      } else {
        cdc_write_string_chunked("Invalid layer number\r\n");
 800093e:	4887      	ldr	r0, [pc, #540]	@ (8000b5c <process_command+0x31c>)
 8000940:	f7ff ff12 	bl	8000768 <cdc_write_string_chunked>
 8000944:	e12b      	b.n	8000b9e <process_command+0x35e>
      }
    } else {
      cdc_write_string_chunked("Usage: keymap <layer>\r\n");
 8000946:	4886      	ldr	r0, [pc, #536]	@ (8000b60 <process_command+0x320>)
 8000948:	f7ff ff0e 	bl	8000768 <cdc_write_string_chunked>
 800094c:	e127      	b.n	8000b9e <process_command+0x35e>
    }
  } else if (strcmp(token, "setkey") == 0) {
 800094e:	4985      	ldr	r1, [pc, #532]	@ (8000b64 <process_command+0x324>)
 8000950:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000952:	f7ff fc45 	bl	80001e0 <strcmp>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d154      	bne.n	8000a06 <process_command+0x1c6>
    char *layer_str = strtok(NULL, " ");
 800095c:	4979      	ldr	r1, [pc, #484]	@ (8000b44 <process_command+0x304>)
 800095e:	2000      	movs	r0, #0
 8000960:	f00c f972 	bl	800cc48 <strtok>
 8000964:	6378      	str	r0, [r7, #52]	@ 0x34
    char *row_str = strtok(NULL, " ");
 8000966:	4977      	ldr	r1, [pc, #476]	@ (8000b44 <process_command+0x304>)
 8000968:	2000      	movs	r0, #0
 800096a:	f00c f96d 	bl	800cc48 <strtok>
 800096e:	6338      	str	r0, [r7, #48]	@ 0x30
    char *col_str = strtok(NULL, " ");
 8000970:	4974      	ldr	r1, [pc, #464]	@ (8000b44 <process_command+0x304>)
 8000972:	2000      	movs	r0, #0
 8000974:	f00c f968 	bl	800cc48 <strtok>
 8000978:	62f8      	str	r0, [r7, #44]	@ 0x2c
    char *value_str = strtok(NULL, " ");
 800097a:	4972      	ldr	r1, [pc, #456]	@ (8000b44 <process_command+0x304>)
 800097c:	2000      	movs	r0, #0
 800097e:	f00c f963 	bl	800cc48 <strtok>
 8000982:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (layer_str && row_str && col_str && value_str) {
 8000984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000986:	2b00      	cmp	r3, #0
 8000988:	d039      	beq.n	80009fe <process_command+0x1be>
 800098a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800098c:	2b00      	cmp	r3, #0
 800098e:	d036      	beq.n	80009fe <process_command+0x1be>
 8000990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000992:	2b00      	cmp	r3, #0
 8000994:	d033      	beq.n	80009fe <process_command+0x1be>
 8000996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000998:	2b00      	cmp	r3, #0
 800099a:	d030      	beq.n	80009fe <process_command+0x1be>
      uint8_t layer = atoi(layer_str);
 800099c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800099e:	f00b ff64 	bl	800c86a <atoi>
 80009a2:	4603      	mov	r3, r0
 80009a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      uint8_t row = atoi(row_str);
 80009a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009aa:	f00b ff5e 	bl	800c86a <atoi>
 80009ae:	4603      	mov	r3, r0
 80009b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
      uint8_t col = atoi(col_str);
 80009b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80009b6:	f00b ff58 	bl	800c86a <atoi>
 80009ba:	4603      	mov	r3, r0
 80009bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      uint16_t value = atoi(value_str);
 80009c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80009c2:	f00b ff52 	bl	800c86a <atoi>
 80009c6:	4603      	mov	r3, r0
 80009c8:	847b      	strh	r3, [r7, #34]	@ 0x22

      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 80009ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	d811      	bhi.n	80009f6 <process_command+0x1b6>
 80009d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80009d6:	2b03      	cmp	r3, #3
 80009d8:	d80d      	bhi.n	80009f6 <process_command+0x1b6>
 80009da:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d809      	bhi.n	80009f6 <process_command+0x1b6>
        set_keymap_value(layer, row, col, value);
 80009e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80009e4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80009e8:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 80009ec:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80009f0:	f000 fb78 	bl	80010e4 <set_keymap_value>
    if (layer_str && row_str && col_str && value_str) {
 80009f4:	e0d3      	b.n	8000b9e <process_command+0x35e>
      } else {
        cdc_write_string_chunked("Invalid layer/row/col values\r\n");
 80009f6:	485c      	ldr	r0, [pc, #368]	@ (8000b68 <process_command+0x328>)
 80009f8:	f7ff feb6 	bl	8000768 <cdc_write_string_chunked>
    if (layer_str && row_str && col_str && value_str) {
 80009fc:	e0cf      	b.n	8000b9e <process_command+0x35e>
      }
    } else {
      cdc_write_string_chunked("Usage: setkey <layer> <row> <col> <value>\r\n");
 80009fe:	485b      	ldr	r0, [pc, #364]	@ (8000b6c <process_command+0x32c>)
 8000a00:	f7ff feb2 	bl	8000768 <cdc_write_string_chunked>
 8000a04:	e0cb      	b.n	8000b9e <process_command+0x35e>
    }
  } else if (strcmp(token, "setmacro") == 0) {
 8000a06:	495a      	ldr	r1, [pc, #360]	@ (8000b70 <process_command+0x330>)
 8000a08:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000a0a:	f7ff fbe9 	bl	80001e0 <strcmp>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f040 8082 	bne.w	8000b1a <process_command+0x2da>
    char *layer_str = strtok(NULL, " ");
 8000a16:	494b      	ldr	r1, [pc, #300]	@ (8000b44 <process_command+0x304>)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f00c f915 	bl	800cc48 <strtok>
 8000a1e:	6478      	str	r0, [r7, #68]	@ 0x44
    char *row_str = strtok(NULL, " ");
 8000a20:	4948      	ldr	r1, [pc, #288]	@ (8000b44 <process_command+0x304>)
 8000a22:	2000      	movs	r0, #0
 8000a24:	f00c f910 	bl	800cc48 <strtok>
 8000a28:	6438      	str	r0, [r7, #64]	@ 0x40
    char *col_str = strtok(NULL, " ");
 8000a2a:	4946      	ldr	r1, [pc, #280]	@ (8000b44 <process_command+0x304>)
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f00c f90b 	bl	800cc48 <strtok>
 8000a32:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (layer_str && row_str && col_str) {
 8000a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d06b      	beq.n	8000b12 <process_command+0x2d2>
 8000a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d068      	beq.n	8000b12 <process_command+0x2d2>
 8000a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d065      	beq.n	8000b12 <process_command+0x2d2>
      uint8_t layer = atoi(layer_str);
 8000a46:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000a48:	f00b ff0f 	bl	800c86a <atoi>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      uint8_t row = atoi(row_str);
 8000a52:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000a54:	f00b ff09 	bl	800c86a <atoi>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
      uint8_t col = atoi(col_str);
 8000a5e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000a60:	f00b ff03 	bl	800c86a <atoi>
 8000a64:	4603      	mov	r3, r0
 8000a66:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000a6a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d84b      	bhi.n	8000b0a <process_command+0x2ca>
 8000a72:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d847      	bhi.n	8000b0a <process_command+0x2ca>
 8000a7a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	d843      	bhi.n	8000b0a <process_command+0x2ca>
        uint16_t values[MAX_MACRO_LEN];
        uint8_t value_count = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        // Parse up to MAX_MACRO_LEN values
        char *value_str = strtok(NULL, " ");
 8000a88:	492e      	ldr	r1, [pc, #184]	@ (8000b44 <process_command+0x304>)
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f00c f8dc 	bl	800cc48 <strtok>
 8000a90:	64f8      	str	r0, [r7, #76]	@ 0x4c
        while (value_str && value_count < MAX_MACRO_LEN) {
 8000a92:	e015      	b.n	8000ac0 <process_command+0x280>
          values[value_count] = atoi(value_str);
 8000a94:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000a96:	f00b fee8 	bl	800c86a <atoi>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000aa0:	b292      	uxth	r2, r2
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	3358      	adds	r3, #88	@ 0x58
 8000aa6:	443b      	add	r3, r7
 8000aa8:	f823 2c50 	strh.w	r2, [r3, #-80]
          value_count++;
 8000aac:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          value_str = strtok(NULL, " ");
 8000ab6:	4923      	ldr	r1, [pc, #140]	@ (8000b44 <process_command+0x304>)
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f00c f8c5 	bl	800cc48 <strtok>
 8000abe:	64f8      	str	r0, [r7, #76]	@ 0x4c
        while (value_str && value_count < MAX_MACRO_LEN) {
 8000ac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d011      	beq.n	8000aea <process_command+0x2aa>
 8000ac6:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d9e2      	bls.n	8000a94 <process_command+0x254>
        }

        // Fill remaining slots with ____ if not enough values provided
        while (value_count < MAX_MACRO_LEN) {
 8000ace:	e00c      	b.n	8000aea <process_command+0x2aa>
          values[value_count] = ____;
 8000ad0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	3358      	adds	r3, #88	@ 0x58
 8000ad8:	443b      	add	r3, r7
 8000ada:	2200      	movs	r2, #0
 8000adc:	f823 2c50 	strh.w	r2, [r3, #-80]
          value_count++;
 8000ae0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        while (value_count < MAX_MACRO_LEN) {
 8000aea:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	d9ee      	bls.n	8000ad0 <process_command+0x290>
        }

        set_macro_keymap_value(layer, row, col, values);
 8000af2:	f107 0308 	add.w	r3, r7, #8
 8000af6:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8000afa:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8000afe:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8000b02:	f000 fb4b 	bl	800119c <set_macro_keymap_value>
      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000b06:	bf00      	nop
    if (layer_str && row_str && col_str) {
 8000b08:	e049      	b.n	8000b9e <process_command+0x35e>
      } else {
        cdc_write_string_chunked("Invalid layer/row/col values\r\n");
 8000b0a:	4817      	ldr	r0, [pc, #92]	@ (8000b68 <process_command+0x328>)
 8000b0c:	f7ff fe2c 	bl	8000768 <cdc_write_string_chunked>
    if (layer_str && row_str && col_str) {
 8000b10:	e045      	b.n	8000b9e <process_command+0x35e>
      }
    } else {
      cdc_write_string_chunked("Usage: setmacro <layer> <row> <col> <value1> [value2] [value3] [value4]\r\n");
 8000b12:	4818      	ldr	r0, [pc, #96]	@ (8000b74 <process_command+0x334>)
 8000b14:	f7ff fe28 	bl	8000768 <cdc_write_string_chunked>
 8000b18:	e041      	b.n	8000b9e <process_command+0x35e>
    }
  } else if (strcmp(token, "save") == 0) {
 8000b1a:	4917      	ldr	r1, [pc, #92]	@ (8000b78 <process_command+0x338>)
 8000b1c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b1e:	f7ff fb5f 	bl	80001e0 <strcmp>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d102      	bne.n	8000b2e <process_command+0x2ee>
    save_config();
 8000b28:	f000 fbde 	bl	80012e8 <save_config>
 8000b2c:	e037      	b.n	8000b9e <process_command+0x35e>
  } else if (strcmp(token, "load") == 0) {
 8000b2e:	4913      	ldr	r1, [pc, #76]	@ (8000b7c <process_command+0x33c>)
 8000b30:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b32:	f7ff fb55 	bl	80001e0 <strcmp>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d121      	bne.n	8000b80 <process_command+0x340>
    load_config();
 8000b3c:	f000 fbe8 	bl	8001310 <load_config>
 8000b40:	e02d      	b.n	8000b9e <process_command+0x35e>
 8000b42:	bf00      	nop
 8000b44:	0800ddd4 	.word	0x0800ddd4
 8000b48:	0800ddd8 	.word	0x0800ddd8
 8000b4c:	0800dde0 	.word	0x0800dde0
 8000b50:	0800dde8 	.word	0x0800dde8
 8000b54:	0800ddec 	.word	0x0800ddec
 8000b58:	0800de10 	.word	0x0800de10
 8000b5c:	0800de18 	.word	0x0800de18
 8000b60:	0800de30 	.word	0x0800de30
 8000b64:	0800de48 	.word	0x0800de48
 8000b68:	0800de50 	.word	0x0800de50
 8000b6c:	0800de70 	.word	0x0800de70
 8000b70:	0800de9c 	.word	0x0800de9c
 8000b74:	0800dea8 	.word	0x0800dea8
 8000b78:	0800def4 	.word	0x0800def4
 8000b7c:	0800defc 	.word	0x0800defc
  } else if (strcmp(token, "reset") == 0) {
 8000b80:	4908      	ldr	r1, [pc, #32]	@ (8000ba4 <process_command+0x364>)
 8000b82:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b84:	f7ff fb2c 	bl	80001e0 <strcmp>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d102      	bne.n	8000b94 <process_command+0x354>
    reset_config();
 8000b8e:	f000 fbcb 	bl	8001328 <reset_config>
 8000b92:	e004      	b.n	8000b9e <process_command+0x35e>
  } else {
    cdc_write_string_chunked("Unknown command. Type 'help' for available commands\r\n");
 8000b94:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <process_command+0x368>)
 8000b96:	f7ff fde7 	bl	8000768 <cdc_write_string_chunked>
 8000b9a:	e000      	b.n	8000b9e <process_command+0x35e>
    return;
 8000b9c:	bf00      	nop
  }
}
 8000b9e:	3758      	adds	r7, #88	@ 0x58
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	0800df04 	.word	0x0800df04
 8000ba8:	0800df0c 	.word	0x0800df0c

08000bac <print_help>:

static void print_help(void) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  cdc_write_string_chunked("Available commands:\r\n");
 8000bb0:	4814      	ldr	r0, [pc, #80]	@ (8000c04 <print_help+0x58>)
 8000bb2:	f7ff fdd9 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  help                    - Show this help\r\n");
 8000bb6:	4814      	ldr	r0, [pc, #80]	@ (8000c08 <print_help+0x5c>)
 8000bb8:	f7ff fdd6 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  show                    - Show current configuration\r\n");
 8000bbc:	4813      	ldr	r0, [pc, #76]	@ (8000c0c <print_help+0x60>)
 8000bbe:	f7ff fdd3 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  set <param> <value>     - Set configuration parameter\r\n");
 8000bc2:	4813      	ldr	r0, [pc, #76]	@ (8000c10 <print_help+0x64>)
 8000bc4:	f7ff fdd0 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  keymap <layer>          - Show keymap for layer\r\n");
 8000bc8:	4812      	ldr	r0, [pc, #72]	@ (8000c14 <print_help+0x68>)
 8000bca:	f7ff fdcd 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  setkey <L> <R> <C> <V>  - Set key value (Layer/Row/Col/Value)\r\n");
 8000bce:	4812      	ldr	r0, [pc, #72]	@ (8000c18 <print_help+0x6c>)
 8000bd0:	f7ff fdca 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  setmacro <L> <R> <C> <V1> [V2] [V3] [V4]  - Set macro key value (Layer/Row/Col/Value1 [Value2] [Value3] [Value4])\r\n");
 8000bd4:	4811      	ldr	r0, [pc, #68]	@ (8000c1c <print_help+0x70>)
 8000bd6:	f7ff fdc7 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  save                    - Save configuration to flash\r\n");
 8000bda:	4811      	ldr	r0, [pc, #68]	@ (8000c20 <print_help+0x74>)
 8000bdc:	f7ff fdc4 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  load                    - Load configuration from flash\r\n");
 8000be0:	4810      	ldr	r0, [pc, #64]	@ (8000c24 <print_help+0x78>)
 8000be2:	f7ff fdc1 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  reset                   - Reset to default values\r\n");
 8000be6:	4810      	ldr	r0, [pc, #64]	@ (8000c28 <print_help+0x7c>)
 8000be8:	f7ff fdbe 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("\r\nParameters:\r\n");
 8000bec:	480f      	ldr	r0, [pc, #60]	@ (8000c2c <print_help+0x80>)
 8000bee:	f7ff fdbb 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  reverse_magnet_pole, trigger_offset, reset_threshold,\r\n");
 8000bf2:	480f      	ldr	r0, [pc, #60]	@ (8000c30 <print_help+0x84>)
 8000bf4:	f7ff fdb8 	bl	8000768 <cdc_write_string_chunked>
  cdc_write_string_chunked("  rapid_trigger_offset, screaming_velocity_trigger, tap_timeout\r\n");
 8000bf8:	480e      	ldr	r0, [pc, #56]	@ (8000c34 <print_help+0x88>)
 8000bfa:	f7ff fdb5 	bl	8000768 <cdc_write_string_chunked>
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	0800df44 	.word	0x0800df44
 8000c08:	0800df5c 	.word	0x0800df5c
 8000c0c:	0800df8c 	.word	0x0800df8c
 8000c10:	0800dfc8 	.word	0x0800dfc8
 8000c14:	0800e004 	.word	0x0800e004
 8000c18:	0800e038 	.word	0x0800e038
 8000c1c:	0800e07c 	.word	0x0800e07c
 8000c20:	0800e0f4 	.word	0x0800e0f4
 8000c24:	0800e130 	.word	0x0800e130
 8000c28:	0800e16c 	.word	0x0800e16c
 8000c2c:	0800e1a4 	.word	0x0800e1a4
 8000c30:	0800e1b4 	.word	0x0800e1b4
 8000c34:	0800e1f0 	.word	0x0800e1f0

08000c38 <print_config>:

static void print_config(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b0a0      	sub	sp, #128	@ 0x80
 8000c3c:	af00      	add	r7, sp, #0
  char buffer[128];

  cdc_write_string_chunked("Current Configuration:\r\n");
 8000c3e:	4826      	ldr	r0, [pc, #152]	@ (8000cd8 <print_config+0xa0>)
 8000c40:	f7ff fd92 	bl	8000768 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  reverse_magnet_pole: %u\r\n", keyboard_user_config.reverse_magnet_pole);
 8000c44:	4b25      	ldr	r3, [pc, #148]	@ (8000cdc <print_config+0xa4>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4638      	mov	r0, r7
 8000c4a:	4a25      	ldr	r2, [pc, #148]	@ (8000ce0 <print_config+0xa8>)
 8000c4c:	2180      	movs	r1, #128	@ 0x80
 8000c4e:	f00b ff57 	bl	800cb00 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000c52:	463b      	mov	r3, r7
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fd87 	bl	8000768 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  trigger_offset: %u\r\n", keyboard_user_config.trigger_offset);
 8000c5a:	4b20      	ldr	r3, [pc, #128]	@ (8000cdc <print_config+0xa4>)
 8000c5c:	785b      	ldrb	r3, [r3, #1]
 8000c5e:	4638      	mov	r0, r7
 8000c60:	4a20      	ldr	r2, [pc, #128]	@ (8000ce4 <print_config+0xac>)
 8000c62:	2180      	movs	r1, #128	@ 0x80
 8000c64:	f00b ff4c 	bl	800cb00 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000c68:	463b      	mov	r3, r7
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fd7c 	bl	8000768 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  reset_threshold: %u\r\n", keyboard_user_config.reset_threshold);
 8000c70:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <print_config+0xa4>)
 8000c72:	789b      	ldrb	r3, [r3, #2]
 8000c74:	4638      	mov	r0, r7
 8000c76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce8 <print_config+0xb0>)
 8000c78:	2180      	movs	r1, #128	@ 0x80
 8000c7a:	f00b ff41 	bl	800cb00 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000c7e:	463b      	mov	r3, r7
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fd71 	bl	8000768 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  rapid_trigger_offset: %u\r\n", keyboard_user_config.rapid_trigger_offset);
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <print_config+0xa4>)
 8000c88:	78db      	ldrb	r3, [r3, #3]
 8000c8a:	4638      	mov	r0, r7
 8000c8c:	4a17      	ldr	r2, [pc, #92]	@ (8000cec <print_config+0xb4>)
 8000c8e:	2180      	movs	r1, #128	@ 0x80
 8000c90:	f00b ff36 	bl	800cb00 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000c94:	463b      	mov	r3, r7
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fd66 	bl	8000768 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  screaming_velocity_trigger: %u\r\n", keyboard_user_config.screaming_velocity_trigger);
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <print_config+0xa4>)
 8000c9e:	791b      	ldrb	r3, [r3, #4]
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	4a13      	ldr	r2, [pc, #76]	@ (8000cf0 <print_config+0xb8>)
 8000ca4:	2180      	movs	r1, #128	@ 0x80
 8000ca6:	f00b ff2b 	bl	800cb00 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000caa:	463b      	mov	r3, r7
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fd5b 	bl	8000768 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  tap_timeout: %u\r\n", keyboard_user_config.tap_timeout);
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <print_config+0xa4>)
 8000cb4:	88db      	ldrh	r3, [r3, #6]
 8000cb6:	4638      	mov	r0, r7
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf4 <print_config+0xbc>)
 8000cba:	2180      	movs	r1, #128	@ 0x80
 8000cbc:	f00b ff20 	bl	800cb00 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fd50 	bl	8000768 <cdc_write_string_chunked>

  cdc_write_string_chunked("Use 'keymap <layer>' to view keymaps\r\n");
 8000cc8:	480b      	ldr	r0, [pc, #44]	@ (8000cf8 <print_config+0xc0>)
 8000cca:	f7ff fd4d 	bl	8000768 <cdc_write_string_chunked>
}
 8000cce:	bf00      	nop
 8000cd0:	3780      	adds	r7, #128	@ 0x80
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	0800e234 	.word	0x0800e234
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	0800e250 	.word	0x0800e250
 8000ce4:	0800e26c 	.word	0x0800e26c
 8000ce8:	0800e284 	.word	0x0800e284
 8000cec:	0800e29c 	.word	0x0800e29c
 8000cf0:	0800e2bc 	.word	0x0800e2bc
 8000cf4:	0800e2e0 	.word	0x0800e2e0
 8000cf8:	0800e2f4 	.word	0x0800e2f4

08000cfc <set_config_value>:

static void set_config_value(char *param, char *value) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b094      	sub	sp, #80	@ 0x50
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  char buffer[64];
  uint32_t val = atoi(value);
 8000d06:	6838      	ldr	r0, [r7, #0]
 8000d08:	f00b fdaf 	bl	800c86a <atoi>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (strcmp(param, "reverse_magnet_pole") == 0) {
 8000d10:	4943      	ldr	r1, [pc, #268]	@ (8000e20 <set_config_value+0x124>)
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff fa64 	bl	80001e0 <strcmp>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d10c      	bne.n	8000d38 <set_config_value+0x3c>
    keyboard_user_config.reverse_magnet_pole = (uint8_t)val;
 8000d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b40      	ldr	r3, [pc, #256]	@ (8000e24 <set_config_value+0x128>)
 8000d24:	701a      	strb	r2, [r3, #0]
    snprintf(buffer, sizeof(buffer), "Set reverse_magnet_pole to %u\r\n", keyboard_user_config.reverse_magnet_pole);
 8000d26:	4b3f      	ldr	r3, [pc, #252]	@ (8000e24 <set_config_value+0x128>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	f107 000c 	add.w	r0, r7, #12
 8000d2e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e28 <set_config_value+0x12c>)
 8000d30:	2140      	movs	r1, #64	@ 0x40
 8000d32:	f00b fee5 	bl	800cb00 <sniprintf>
 8000d36:	e06a      	b.n	8000e0e <set_config_value+0x112>
  } else if (strcmp(param, "trigger_offset") == 0) {
 8000d38:	493c      	ldr	r1, [pc, #240]	@ (8000e2c <set_config_value+0x130>)
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff fa50 	bl	80001e0 <strcmp>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d10c      	bne.n	8000d60 <set_config_value+0x64>
    keyboard_user_config.trigger_offset = (uint8_t)val;
 8000d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b36      	ldr	r3, [pc, #216]	@ (8000e24 <set_config_value+0x128>)
 8000d4c:	705a      	strb	r2, [r3, #1]
    snprintf(buffer, sizeof(buffer), "Set trigger_offset to %u\r\n", keyboard_user_config.trigger_offset);
 8000d4e:	4b35      	ldr	r3, [pc, #212]	@ (8000e24 <set_config_value+0x128>)
 8000d50:	785b      	ldrb	r3, [r3, #1]
 8000d52:	f107 000c 	add.w	r0, r7, #12
 8000d56:	4a36      	ldr	r2, [pc, #216]	@ (8000e30 <set_config_value+0x134>)
 8000d58:	2140      	movs	r1, #64	@ 0x40
 8000d5a:	f00b fed1 	bl	800cb00 <sniprintf>
 8000d5e:	e056      	b.n	8000e0e <set_config_value+0x112>
  } else if (strcmp(param, "reset_threshold") == 0) {
 8000d60:	4934      	ldr	r1, [pc, #208]	@ (8000e34 <set_config_value+0x138>)
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff fa3c 	bl	80001e0 <strcmp>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10c      	bne.n	8000d88 <set_config_value+0x8c>
    keyboard_user_config.reset_threshold = (uint8_t)val;
 8000d6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b2c      	ldr	r3, [pc, #176]	@ (8000e24 <set_config_value+0x128>)
 8000d74:	709a      	strb	r2, [r3, #2]
    snprintf(buffer, sizeof(buffer), "Set reset_threshold to %u\r\n", keyboard_user_config.reset_threshold);
 8000d76:	4b2b      	ldr	r3, [pc, #172]	@ (8000e24 <set_config_value+0x128>)
 8000d78:	789b      	ldrb	r3, [r3, #2]
 8000d7a:	f107 000c 	add.w	r0, r7, #12
 8000d7e:	4a2e      	ldr	r2, [pc, #184]	@ (8000e38 <set_config_value+0x13c>)
 8000d80:	2140      	movs	r1, #64	@ 0x40
 8000d82:	f00b febd 	bl	800cb00 <sniprintf>
 8000d86:	e042      	b.n	8000e0e <set_config_value+0x112>
  } else if (strcmp(param, "rapid_trigger_offset") == 0) {
 8000d88:	492c      	ldr	r1, [pc, #176]	@ (8000e3c <set_config_value+0x140>)
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff fa28 	bl	80001e0 <strcmp>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10c      	bne.n	8000db0 <set_config_value+0xb4>
    keyboard_user_config.rapid_trigger_offset = (uint8_t)val;
 8000d96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4b22      	ldr	r3, [pc, #136]	@ (8000e24 <set_config_value+0x128>)
 8000d9c:	70da      	strb	r2, [r3, #3]
    snprintf(buffer, sizeof(buffer), "Set rapid_trigger_offset to %u\r\n", keyboard_user_config.rapid_trigger_offset);
 8000d9e:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <set_config_value+0x128>)
 8000da0:	78db      	ldrb	r3, [r3, #3]
 8000da2:	f107 000c 	add.w	r0, r7, #12
 8000da6:	4a26      	ldr	r2, [pc, #152]	@ (8000e40 <set_config_value+0x144>)
 8000da8:	2140      	movs	r1, #64	@ 0x40
 8000daa:	f00b fea9 	bl	800cb00 <sniprintf>
 8000dae:	e02e      	b.n	8000e0e <set_config_value+0x112>
  } else if (strcmp(param, "screaming_velocity_trigger") == 0) {
 8000db0:	4924      	ldr	r1, [pc, #144]	@ (8000e44 <set_config_value+0x148>)
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff fa14 	bl	80001e0 <strcmp>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d10c      	bne.n	8000dd8 <set_config_value+0xdc>
    keyboard_user_config.screaming_velocity_trigger = (uint8_t)val;
 8000dbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <set_config_value+0x128>)
 8000dc4:	711a      	strb	r2, [r3, #4]
    snprintf(buffer, sizeof(buffer), "Set screaming_velocity_trigger to %u\r\n", keyboard_user_config.screaming_velocity_trigger);
 8000dc6:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <set_config_value+0x128>)
 8000dc8:	791b      	ldrb	r3, [r3, #4]
 8000dca:	f107 000c 	add.w	r0, r7, #12
 8000dce:	4a1e      	ldr	r2, [pc, #120]	@ (8000e48 <set_config_value+0x14c>)
 8000dd0:	2140      	movs	r1, #64	@ 0x40
 8000dd2:	f00b fe95 	bl	800cb00 <sniprintf>
 8000dd6:	e01a      	b.n	8000e0e <set_config_value+0x112>
  } else if (strcmp(param, "tap_timeout") == 0) {
 8000dd8:	491c      	ldr	r1, [pc, #112]	@ (8000e4c <set_config_value+0x150>)
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff fa00 	bl	80001e0 <strcmp>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10c      	bne.n	8000e00 <set_config_value+0x104>
    keyboard_user_config.tap_timeout = (uint16_t)val;
 8000de6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	4b0e      	ldr	r3, [pc, #56]	@ (8000e24 <set_config_value+0x128>)
 8000dec:	80da      	strh	r2, [r3, #6]
    snprintf(buffer, sizeof(buffer), "Set tap_timeout to %u\r\n", keyboard_user_config.tap_timeout);
 8000dee:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <set_config_value+0x128>)
 8000df0:	88db      	ldrh	r3, [r3, #6]
 8000df2:	f107 000c 	add.w	r0, r7, #12
 8000df6:	4a16      	ldr	r2, [pc, #88]	@ (8000e50 <set_config_value+0x154>)
 8000df8:	2140      	movs	r1, #64	@ 0x40
 8000dfa:	f00b fe81 	bl	800cb00 <sniprintf>
 8000dfe:	e006      	b.n	8000e0e <set_config_value+0x112>
  } else {
    snprintf(buffer, sizeof(buffer), "Unknown parameter: %s\r\n", param);
 8000e00:	f107 000c 	add.w	r0, r7, #12
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a13      	ldr	r2, [pc, #76]	@ (8000e54 <set_config_value+0x158>)
 8000e08:	2140      	movs	r1, #64	@ 0x40
 8000e0a:	f00b fe79 	bl	800cb00 <sniprintf>
  }

  cdc_write_string_chunked(buffer);
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fca8 	bl	8000768 <cdc_write_string_chunked>
}
 8000e18:	bf00      	nop
 8000e1a:	3750      	adds	r7, #80	@ 0x50
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	0800e31c 	.word	0x0800e31c
 8000e24:	20000000 	.word	0x20000000
 8000e28:	0800e330 	.word	0x0800e330
 8000e2c:	0800e350 	.word	0x0800e350
 8000e30:	0800e360 	.word	0x0800e360
 8000e34:	0800e37c 	.word	0x0800e37c
 8000e38:	0800e38c 	.word	0x0800e38c
 8000e3c:	0800e3a8 	.word	0x0800e3a8
 8000e40:	0800e3c0 	.word	0x0800e3c0
 8000e44:	0800e3e4 	.word	0x0800e3e4
 8000e48:	0800e400 	.word	0x0800e400
 8000e4c:	0800e428 	.word	0x0800e428
 8000e50:	0800e434 	.word	0x0800e434
 8000e54:	0800e44c 	.word	0x0800e44c

08000e58 <print_keymap>:

static void print_keymap(uint8_t layer) {
 8000e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5a:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4602      	mov	r2, r0
 8000e62:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000e66:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8000e6a:	701a      	strb	r2, [r3, #0]
  char buffer[128];

  snprintf(buffer, sizeof(buffer), "Keymap for Layer %u:\r\n", layer);
 8000e6c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000e70:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	f507 7003 	add.w	r0, r7, #524	@ 0x20c
 8000e7a:	4a91      	ldr	r2, [pc, #580]	@ (80010c0 <print_keymap+0x268>)
 8000e7c:	2180      	movs	r1, #128	@ 0x80
 8000e7e:	f00b fe3f 	bl	800cb00 <sniprintf>
  cdc_write_string_chunked(buffer);
 8000e82:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fc6e 	bl	8000768 <cdc_write_string_chunked>

  // Print keymap row by row with proper chunking
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
 8000e92:	e109      	b.n	80010a8 <print_keymap+0x250>
    // Build the row string first
    char row_buffer[512]; // Larger buffer for macro display
    int pos = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "Row %u: ", row);
 8000e9a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000e9e:	f107 020c 	add.w	r2, r7, #12
 8000ea2:	18d0      	adds	r0, r2, r3
 8000ea4:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000ea8:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 8000eac:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8000eb0:	4a84      	ldr	r2, [pc, #528]	@ (80010c4 <print_keymap+0x26c>)
 8000eb2:	f00b fe25 	bl	800cb00 <sniprintf>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000ebc:	4413      	add	r3, r2
 8000ebe:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f887 328f 	strb.w	r3, [r7, #655]	@ 0x28f
 8000ec8:	e0cc      	b.n	8001064 <print_keymap+0x20c>
      // Check if this is a macro (multiple non-zero values)
      uint8_t macro_count = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f887 328e 	strb.w	r3, [r7, #654]	@ 0x28e
      for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f887 328d 	strb.w	r3, [r7, #653]	@ 0x28d
 8000ed6:	e020      	b.n	8000f1a <print_keymap+0xc2>
        if (keyboard_user_config.keymaps[layer][row][col][i] != ____) {
 8000ed8:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000edc:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8000ee0:	7818      	ldrb	r0, [r3, #0]
 8000ee2:	f897 1297 	ldrb.w	r1, [r7, #663]	@ 0x297
 8000ee6:	f897 228f 	ldrb.w	r2, [r7, #655]	@ 0x28f
 8000eea:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 8000eee:	4c76      	ldr	r4, [pc, #472]	@ (80010c8 <print_keymap+0x270>)
 8000ef0:	0080      	lsls	r0, r0, #2
 8000ef2:	4401      	add	r1, r0
 8000ef4:	0089      	lsls	r1, r1, #2
 8000ef6:	440a      	add	r2, r1
 8000ef8:	0092      	lsls	r2, r2, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	3304      	adds	r3, #4
 8000efe:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d004      	beq.n	8000f10 <print_keymap+0xb8>
          macro_count++;
 8000f06:	f897 328e 	ldrb.w	r3, [r7, #654]	@ 0x28e
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	f887 328e 	strb.w	r3, [r7, #654]	@ 0x28e
      for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8000f10:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 8000f14:	3301      	adds	r3, #1
 8000f16:	f887 328d 	strb.w	r3, [r7, #653]	@ 0x28d
 8000f1a:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d9da      	bls.n	8000ed8 <print_keymap+0x80>
        }
      }

      if (macro_count > 1) {
 8000f22:	f897 328e 	ldrb.w	r3, [r7, #654]	@ 0x28e
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d973      	bls.n	8001012 <print_keymap+0x1ba>
        // This is a macro - show all values in brackets
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "[");
 8000f2a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f2e:	f107 020c 	add.w	r2, r7, #12
 8000f32:	18d0      	adds	r0, r2, r3
 8000f34:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f38:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000f3c:	4a63      	ldr	r2, [pc, #396]	@ (80010cc <print_keymap+0x274>)
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f00b fdde 	bl	800cb00 <sniprintf>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f4a:	4413      	add	r3, r2
 8000f4c:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
        for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8000f50:	2300      	movs	r3, #0
 8000f52:	f887 328c 	strb.w	r3, [r7, #652]	@ 0x28c
 8000f56:	e044      	b.n	8000fe2 <print_keymap+0x18a>
          if (i > 0)
 8000f58:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d012      	beq.n	8000f86 <print_keymap+0x12e>
            pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, ",");
 8000f60:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f64:	f107 020c 	add.w	r2, r7, #12
 8000f68:	18d0      	adds	r0, r2, r3
 8000f6a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f6e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000f72:	4a57      	ldr	r2, [pc, #348]	@ (80010d0 <print_keymap+0x278>)
 8000f74:	4619      	mov	r1, r3
 8000f76:	f00b fdc3 	bl	800cb00 <sniprintf>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f80:	4413      	add	r3, r2
 8000f82:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
          pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%u",
 8000f86:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f8a:	f107 020c 	add.w	r2, r7, #12
 8000f8e:	18d4      	adds	r4, r2, r3
 8000f90:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000f94:	f5c3 7500 	rsb	r5, r3, #512	@ 0x200
                          keyboard_user_config.keymaps[layer][row][col][i]);
 8000f98:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000f9c:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8000fa0:	7818      	ldrb	r0, [r3, #0]
 8000fa2:	f897 1297 	ldrb.w	r1, [r7, #663]	@ 0x297
 8000fa6:	f897 228f 	ldrb.w	r2, [r7, #655]	@ 0x28f
 8000faa:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 8000fae:	4e46      	ldr	r6, [pc, #280]	@ (80010c8 <print_keymap+0x270>)
 8000fb0:	0080      	lsls	r0, r0, #2
 8000fb2:	4401      	add	r1, r0
 8000fb4:	0089      	lsls	r1, r1, #2
 8000fb6:	440a      	add	r2, r1
 8000fb8:	0092      	lsls	r2, r2, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
          pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%u",
 8000fc2:	4a44      	ldr	r2, [pc, #272]	@ (80010d4 <print_keymap+0x27c>)
 8000fc4:	4629      	mov	r1, r5
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	f00b fd9a 	bl	800cb00 <sniprintf>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000fd2:	4413      	add	r3, r2
 8000fd4:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
        for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8000fd8:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 8000fdc:	3301      	adds	r3, #1
 8000fde:	f887 328c 	strb.w	r3, [r7, #652]	@ 0x28c
 8000fe2:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d9b6      	bls.n	8000f58 <print_keymap+0x100>
        }
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "] ");
 8000fea:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000fee:	f107 020c 	add.w	r2, r7, #12
 8000ff2:	18d0      	adds	r0, r2, r3
 8000ff4:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000ff8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000ffc:	4a36      	ldr	r2, [pc, #216]	@ (80010d8 <print_keymap+0x280>)
 8000ffe:	4619      	mov	r1, r3
 8001000:	f00b fd7e 	bl	800cb00 <sniprintf>
 8001004:	4602      	mov	r2, r0
 8001006:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800100a:	4413      	add	r3, r2
 800100c:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001010:	e023      	b.n	800105a <print_keymap+0x202>
      } else {
        // Single key - show just the first value
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%4u ",
 8001012:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001016:	f107 020c 	add.w	r2, r7, #12
 800101a:	18d0      	adds	r0, r2, r3
 800101c:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001020:	f5c3 7400 	rsb	r4, r3, #512	@ 0x200
                        keyboard_user_config.keymaps[layer][row][col][0]);
 8001024:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001028:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 800102c:	7819      	ldrb	r1, [r3, #0]
 800102e:	f897 2297 	ldrb.w	r2, [r7, #663]	@ 0x297
 8001032:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 8001036:	4d24      	ldr	r5, [pc, #144]	@ (80010c8 <print_keymap+0x270>)
 8001038:	0089      	lsls	r1, r1, #2
 800103a:	440a      	add	r2, r1
 800103c:	0092      	lsls	r2, r2, #2
 800103e:	4413      	add	r3, r2
 8001040:	3301      	adds	r3, #1
 8001042:	f835 3033 	ldrh.w	r3, [r5, r3, lsl #3]
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%4u ",
 8001046:	4a25      	ldr	r2, [pc, #148]	@ (80010dc <print_keymap+0x284>)
 8001048:	4621      	mov	r1, r4
 800104a:	f00b fd59 	bl	800cb00 <sniprintf>
 800104e:	4602      	mov	r2, r0
 8001050:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001054:	4413      	add	r3, r2
 8001056:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 800105a:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 800105e:	3301      	adds	r3, #1
 8001060:	f887 328f 	strb.w	r3, [r7, #655]	@ 0x28f
 8001064:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 8001068:	2b03      	cmp	r3, #3
 800106a:	f67f af2e 	bls.w	8000eca <print_keymap+0x72>
      }
    }

    pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "\r\n");
 800106e:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001072:	f107 020c 	add.w	r2, r7, #12
 8001076:	18d0      	adds	r0, r2, r3
 8001078:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800107c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001080:	4a17      	ldr	r2, [pc, #92]	@ (80010e0 <print_keymap+0x288>)
 8001082:	4619      	mov	r1, r3
 8001084:	f00b fd3c 	bl	800cb00 <sniprintf>
 8001088:	4602      	mov	r2, r0
 800108a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800108e:	4413      	add	r3, r2
 8001090:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    // Send the complete row
    cdc_write_string_chunked(row_buffer);
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fb65 	bl	8000768 <cdc_write_string_chunked>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 800109e:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 80010a2:	3301      	adds	r3, #1
 80010a4:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
 80010a8:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	f67f aef1 	bls.w	8000e94 <print_keymap+0x3c>
  }
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	f507 7727 	add.w	r7, r7, #668	@ 0x29c
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010be:	bf00      	nop
 80010c0:	0800e464 	.word	0x0800e464
 80010c4:	0800e47c 	.word	0x0800e47c
 80010c8:	20000000 	.word	0x20000000
 80010cc:	0800e488 	.word	0x0800e488
 80010d0:	0800e48c 	.word	0x0800e48c
 80010d4:	0800e490 	.word	0x0800e490
 80010d8:	0800e494 	.word	0x0800e494
 80010dc:	0800e498 	.word	0x0800e498
 80010e0:	0800ddc8 	.word	0x0800ddc8

080010e4 <set_keymap_value>:

static void set_keymap_value(uint8_t layer, uint8_t row, uint8_t col, uint16_t value) {
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b099      	sub	sp, #100	@ 0x64
 80010e8:	af04      	add	r7, sp, #16
 80010ea:	4604      	mov	r4, r0
 80010ec:	4608      	mov	r0, r1
 80010ee:	4611      	mov	r1, r2
 80010f0:	461a      	mov	r2, r3
 80010f2:	4623      	mov	r3, r4
 80010f4:	71fb      	strb	r3, [r7, #7]
 80010f6:	4603      	mov	r3, r0
 80010f8:	71bb      	strb	r3, [r7, #6]
 80010fa:	460b      	mov	r3, r1
 80010fc:	717b      	strb	r3, [r7, #5]
 80010fe:	4613      	mov	r3, r2
 8001100:	807b      	strh	r3, [r7, #2]
  char buffer[64];

  keyboard_user_config.keymaps[layer][row][col][0] = value;
 8001102:	79f9      	ldrb	r1, [r7, #7]
 8001104:	79ba      	ldrb	r2, [r7, #6]
 8001106:	797b      	ldrb	r3, [r7, #5]
 8001108:	4822      	ldr	r0, [pc, #136]	@ (8001194 <set_keymap_value+0xb0>)
 800110a:	0089      	lsls	r1, r1, #2
 800110c:	440a      	add	r2, r1
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	4413      	add	r3, r2
 8001112:	3301      	adds	r3, #1
 8001114:	887a      	ldrh	r2, [r7, #2]
 8001116:	f820 2033 	strh.w	r2, [r0, r3, lsl #3]
  // Clear remaining macro slots
  for (uint8_t i = 1; i < MAX_MACRO_LEN; i++) {
 800111a:	2301      	movs	r3, #1
 800111c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001120:	e014      	b.n	800114c <set_keymap_value+0x68>
    keyboard_user_config.keymaps[layer][row][col][i] = ____;
 8001122:	79f8      	ldrb	r0, [r7, #7]
 8001124:	79b9      	ldrb	r1, [r7, #6]
 8001126:	797a      	ldrb	r2, [r7, #5]
 8001128:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800112c:	4c19      	ldr	r4, [pc, #100]	@ (8001194 <set_keymap_value+0xb0>)
 800112e:	0080      	lsls	r0, r0, #2
 8001130:	4401      	add	r1, r0
 8001132:	0089      	lsls	r1, r1, #2
 8001134:	440a      	add	r2, r1
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	4413      	add	r3, r2
 800113a:	3304      	adds	r3, #4
 800113c:	2200      	movs	r2, #0
 800113e:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for (uint8_t i = 1; i < MAX_MACRO_LEN; i++) {
 8001142:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001146:	3301      	adds	r3, #1
 8001148:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800114c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001150:	2b03      	cmp	r3, #3
 8001152:	d9e6      	bls.n	8001122 <set_keymap_value+0x3e>
  }
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 8001154:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8001158:	2100      	movs	r1, #0
 800115a:	480e      	ldr	r0, [pc, #56]	@ (8001194 <set_keymap_value+0xb0>)
 800115c:	f001 fe90 	bl	8002e80 <keyboard_write_config>
  keyboard_init_keys();
 8001160:	f000 ff94 	bl	800208c <keyboard_init_keys>

  snprintf(buffer, sizeof(buffer), "Set keymap[%u][%u][%u] to %u\r\n", layer, row, col, value);
 8001164:	79fc      	ldrb	r4, [r7, #7]
 8001166:	79bb      	ldrb	r3, [r7, #6]
 8001168:	797a      	ldrb	r2, [r7, #5]
 800116a:	8879      	ldrh	r1, [r7, #2]
 800116c:	f107 000c 	add.w	r0, r7, #12
 8001170:	9102      	str	r1, [sp, #8]
 8001172:	9201      	str	r2, [sp, #4]
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	4623      	mov	r3, r4
 8001178:	4a07      	ldr	r2, [pc, #28]	@ (8001198 <set_keymap_value+0xb4>)
 800117a:	2140      	movs	r1, #64	@ 0x40
 800117c:	f00b fcc0 	bl	800cb00 <sniprintf>
  cdc_write_string_chunked(buffer);
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff faef 	bl	8000768 <cdc_write_string_chunked>
}
 800118a:	bf00      	nop
 800118c:	3754      	adds	r7, #84	@ 0x54
 800118e:	46bd      	mov	sp, r7
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	bf00      	nop
 8001194:	20000000 	.word	0x20000000
 8001198:	0800e4a0 	.word	0x0800e4a0

0800119c <set_macro_keymap_value>:

static void set_macro_keymap_value(uint8_t layer, uint8_t row, uint8_t col, uint16_t values[MAX_MACRO_LEN]) {
 800119c:	b5b0      	push	{r4, r5, r7, lr}
 800119e:	b0a8      	sub	sp, #160	@ 0xa0
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	460b      	mov	r3, r1
 80011aa:	71bb      	strb	r3, [r7, #6]
 80011ac:	4613      	mov	r3, r2
 80011ae:	717b      	strb	r3, [r7, #5]
  char buffer[128];

  // Copy all macro values
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80011b0:	2300      	movs	r3, #0
 80011b2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80011b6:	e01a      	b.n	80011ee <set_macro_keymap_value+0x52>
    keyboard_user_config.keymaps[layer][row][col][i] = values[i];
 80011b8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	18d4      	adds	r4, r2, r3
 80011c2:	79f8      	ldrb	r0, [r7, #7]
 80011c4:	79b9      	ldrb	r1, [r7, #6]
 80011c6:	797a      	ldrb	r2, [r7, #5]
 80011c8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80011cc:	8825      	ldrh	r5, [r4, #0]
 80011ce:	4c41      	ldr	r4, [pc, #260]	@ (80012d4 <set_macro_keymap_value+0x138>)
 80011d0:	0080      	lsls	r0, r0, #2
 80011d2:	4401      	add	r1, r0
 80011d4:	0089      	lsls	r1, r1, #2
 80011d6:	440a      	add	r2, r1
 80011d8:	0092      	lsls	r2, r2, #2
 80011da:	4413      	add	r3, r2
 80011dc:	3304      	adds	r3, #4
 80011de:	462a      	mov	r2, r5
 80011e0:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80011e4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80011e8:	3301      	adds	r3, #1
 80011ea:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80011ee:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d9e0      	bls.n	80011b8 <set_macro_keymap_value+0x1c>
  }
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 80011f6:	f44f 7202 	mov.w	r2, #520	@ 0x208
 80011fa:	2100      	movs	r1, #0
 80011fc:	4835      	ldr	r0, [pc, #212]	@ (80012d4 <set_macro_keymap_value+0x138>)
 80011fe:	f001 fe3f 	bl	8002e80 <keyboard_write_config>
  keyboard_init_keys();
 8001202:	f000 ff43 	bl	800208c <keyboard_init_keys>

  // Build response message showing all macro values
  int pos = snprintf(buffer, sizeof(buffer), "Set macro keymap[%u][%u][%u] to [", layer, row, col);
 8001206:	79f9      	ldrb	r1, [r7, #7]
 8001208:	79bb      	ldrb	r3, [r7, #6]
 800120a:	797a      	ldrb	r2, [r7, #5]
 800120c:	f107 000c 	add.w	r0, r7, #12
 8001210:	9201      	str	r2, [sp, #4]
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	460b      	mov	r3, r1
 8001216:	4a30      	ldr	r2, [pc, #192]	@ (80012d8 <set_macro_keymap_value+0x13c>)
 8001218:	2180      	movs	r1, #128	@ 0x80
 800121a:	f00b fc71 	bl	800cb00 <sniprintf>
 800121e:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001222:	2300      	movs	r3, #0
 8001224:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8001228:	e033      	b.n	8001292 <set_macro_keymap_value+0xf6>
    if (i > 0)
 800122a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800122e:	2b00      	cmp	r3, #0
 8001230:	d012      	beq.n	8001258 <set_macro_keymap_value+0xbc>
      pos += snprintf(buffer + pos, sizeof(buffer) - pos, ", ");
 8001232:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001236:	f107 020c 	add.w	r2, r7, #12
 800123a:	18d0      	adds	r0, r2, r3
 800123c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001240:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001244:	4a25      	ldr	r2, [pc, #148]	@ (80012dc <set_macro_keymap_value+0x140>)
 8001246:	4619      	mov	r1, r3
 8001248:	f00b fc5a 	bl	800cb00 <sniprintf>
 800124c:	4602      	mov	r2, r0
 800124e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001252:	4413      	add	r3, r2
 8001254:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    pos += snprintf(buffer + pos, sizeof(buffer) - pos, "%u", values[i]);
 8001258:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800125c:	f107 020c 	add.w	r2, r7, #12
 8001260:	18d0      	adds	r0, r2, r3
 8001262:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001266:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 800126a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	4413      	add	r3, r2
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	4a1a      	ldr	r2, [pc, #104]	@ (80012e0 <set_macro_keymap_value+0x144>)
 8001278:	f00b fc42 	bl	800cb00 <sniprintf>
 800127c:	4602      	mov	r2, r0
 800127e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001282:	4413      	add	r3, r2
 8001284:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001288:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800128c:	3301      	adds	r3, #1
 800128e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8001292:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001296:	2b03      	cmp	r3, #3
 8001298:	d9c7      	bls.n	800122a <set_macro_keymap_value+0x8e>
  }
  pos += snprintf(buffer + pos, sizeof(buffer) - pos, "]\r\n");
 800129a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800129e:	f107 020c 	add.w	r2, r7, #12
 80012a2:	18d0      	adds	r0, r2, r3
 80012a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80012a8:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80012ac:	4a0d      	ldr	r2, [pc, #52]	@ (80012e4 <set_macro_keymap_value+0x148>)
 80012ae:	4619      	mov	r1, r3
 80012b0:	f00b fc26 	bl	800cb00 <sniprintf>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80012ba:	4413      	add	r3, r2
 80012bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  cdc_write_string_chunked(buffer);
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fa4f 	bl	8000768 <cdc_write_string_chunked>
}
 80012ca:	bf00      	nop
 80012cc:	3798      	adds	r7, #152	@ 0x98
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bdb0      	pop	{r4, r5, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000000 	.word	0x20000000
 80012d8:	0800e4c0 	.word	0x0800e4c0
 80012dc:	0800e4e4 	.word	0x0800e4e4
 80012e0:	0800e490 	.word	0x0800e490
 80012e4:	0800e4e8 	.word	0x0800e4e8

080012e8 <save_config>:

static void save_config(void) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  // TODO: Implement flash save functionality
  // This would typically write the config struct to flash memory
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 80012ec:	f44f 7202 	mov.w	r2, #520	@ 0x208
 80012f0:	2100      	movs	r1, #0
 80012f2:	4805      	ldr	r0, [pc, #20]	@ (8001308 <save_config+0x20>)
 80012f4:	f001 fdc4 	bl	8002e80 <keyboard_write_config>
  keyboard_init_keys();
 80012f8:	f000 fec8 	bl	800208c <keyboard_init_keys>
  cdc_write_string_chunked("Configuration saved to flash\r\n");
 80012fc:	4803      	ldr	r0, [pc, #12]	@ (800130c <save_config+0x24>)
 80012fe:	f7ff fa33 	bl	8000768 <cdc_write_string_chunked>
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000000 	.word	0x20000000
 800130c:	0800e4ec 	.word	0x0800e4ec

08001310 <load_config>:

static void load_config(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  // TODO: Implement flash load functionality
  // This would typically read the config struct from flash memory
  keyboard_read_config();
 8001314:	f001 fda2 	bl	8002e5c <keyboard_read_config>
  cdc_write_string_chunked("Configuration loaded from flash\r\n");
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <load_config+0x14>)
 800131a:	f7ff fa25 	bl	8000768 <cdc_write_string_chunked>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	0800e50c 	.word	0x0800e50c

08001328 <reset_config>:

static void reset_config(void) {
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  // Reset to default values
  keyboard_write_config(&keyboard_default_user_config, 0, sizeof keyboard_default_user_config);
 800132c:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8001330:	2100      	movs	r1, #0
 8001332:	4806      	ldr	r0, [pc, #24]	@ (800134c <reset_config+0x24>)
 8001334:	f001 fda4 	bl	8002e80 <keyboard_write_config>
  keyboard_read_config();
 8001338:	f001 fd90 	bl	8002e5c <keyboard_read_config>
  keyboard_init_keys();
 800133c:	f000 fea6 	bl	800208c <keyboard_init_keys>

  cdc_write_string_chunked("Configuration reset to defaults\r\n");
 8001340:	4803      	ldr	r0, [pc, #12]	@ (8001350 <reset_config+0x28>)
 8001342:	f7ff fa11 	bl	8000768 <cdc_write_string_chunked>
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	0800e680 	.word	0x0800e680
 8001350:	0800e530 	.word	0x0800e530

08001354 <tud_cdc_line_state_cb>:
// Getter function for other modules to access configuration
struct user_config *get_user_config(void) {
  return &keyboard_user_config;
}

void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
 800135e:	460b      	mov	r3, r1
 8001360:	71bb      	strb	r3, [r7, #6]
 8001362:	4613      	mov	r3, r2
 8001364:	717b      	strb	r3, [r7, #5]
  (void)itf;

  // Check if terminal is connecting (DTR asserted)
  if (dtr) {
 8001366:	79bb      	ldrb	r3, [r7, #6]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d015      	beq.n	8001398 <tud_cdc_line_state_cb+0x44>
    // Give a small delay to ensure connection is stable
    for (volatile int i = 0; i < 10000; i++)
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	e002      	b.n	8001378 <tud_cdc_line_state_cb+0x24>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3301      	adds	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800137e:	4293      	cmp	r3, r2
 8001380:	ddf7      	ble.n	8001372 <tud_cdc_line_state_cb+0x1e>
      ;

    cdc_write_string_chunked("\r\n=== HE16 Configuration Interface ===\r\n");
 8001382:	4807      	ldr	r0, [pc, #28]	@ (80013a0 <tud_cdc_line_state_cb+0x4c>)
 8001384:	f7ff f9f0 	bl	8000768 <cdc_write_string_chunked>
    cdc_write_string_chunked("Type 'help' for available commands\r\n");
 8001388:	4806      	ldr	r0, [pc, #24]	@ (80013a4 <tud_cdc_line_state_cb+0x50>)
 800138a:	f7ff f9ed 	bl	8000768 <cdc_write_string_chunked>
    cdc_write_string_chunked("Ready> ");
 800138e:	4806      	ldr	r0, [pc, #24]	@ (80013a8 <tud_cdc_line_state_cb+0x54>)
 8001390:	f7ff f9ea 	bl	8000768 <cdc_write_string_chunked>
    cdc_write_flush_wait();
 8001394:	f7ff fa33 	bl	80007fe <cdc_write_flush_wait>
  }
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	0800e554 	.word	0x0800e554
 80013a4:	0800e580 	.word	0x0800e580
 80013a8:	0800ddcc 	.word	0x0800ddcc

080013ac <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf) {
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  (void)itf;
  // Data handling is done in cdc_task()
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <hid_task>:
static uint8_t modifiers = 0;
static uint8_t keycodes[6] = {0};
// static uint8_t is_screaming = 0;
static uint8_t consumer_report = 0;

void hid_task() {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0

  if ((should_send_consumer_report || should_send_keyboard_report) && tud_hid_ready()) {
 80013ca:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <hid_task+0x8c>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d103      	bne.n	80013da <hid_task+0x16>
 80013d2:	4b20      	ldr	r3, [pc, #128]	@ (8001454 <hid_task+0x90>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d035      	beq.n	8001446 <hid_task+0x82>

//--------------------------------------------------------------------+
// Application API (Single Port)
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_ready(void) {
  return tud_hid_n_ready(0);
 80013da:	2000      	movs	r0, #0
 80013dc:	f005 ffae 	bl	800733c <tud_hid_n_ready>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d02f      	beq.n	8001446 <hid_task+0x82>
    if (tud_suspended()) {
 80013e6:	f007 fac5 	bl	8008974 <tud_suspended>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <hid_task+0x32>
      tud_remote_wakeup();
 80013f0:	f007 fad4 	bl	800899c <tud_remote_wakeup>
        should_send_keyboard_report = 0;
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
      }
    }
  }
}
 80013f4:	e027      	b.n	8001446 <hid_task+0x82>
      if (should_send_consumer_report) {
 80013f6:	4b16      	ldr	r3, [pc, #88]	@ (8001450 <hid_task+0x8c>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00f      	beq.n	800141e <hid_task+0x5a>
        should_send_consumer_report = 0;
 80013fe:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <hid_task+0x8c>)
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	2302      	movs	r3, #2
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <hid_task+0x94>)
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	2302      	movs	r3, #2
 800140e:	80fb      	strh	r3, [r7, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tud_hid_get_protocol(void) {
  return tud_hid_n_get_protocol(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_report(uint8_t report_id, void const* report, uint16_t len) {
  return tud_hid_n_report(0, report_id, report, len);
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	7bf9      	ldrb	r1, [r7, #15]
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	2000      	movs	r0, #0
 8001418:	f005 ffd2 	bl	80073c0 <tud_hid_n_report>
 800141c:	e013      	b.n	8001446 <hid_task+0x82>
      } else if (should_send_keyboard_report) {
 800141e:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <hid_task+0x90>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00f      	beq.n	8001446 <hid_task+0x82>
        should_send_keyboard_report = 0;
 8001426:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <hid_task+0x90>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
 800142c:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <hid_task+0x98>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2201      	movs	r2, #1
 8001432:	717a      	strb	r2, [r7, #5]
 8001434:	713b      	strb	r3, [r7, #4]
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <hid_task+0x9c>)
 8001438:	603b      	str	r3, [r7, #0]
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
  return tud_hid_n_keyboard_report(0, report_id, modifier, keycode);
 800143a:	793a      	ldrb	r2, [r7, #4]
 800143c:	7979      	ldrb	r1, [r7, #5]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2000      	movs	r0, #0
 8001442:	f006 f843 	bl	80074cc <tud_hid_n_keyboard_report>
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200002fd 	.word	0x200002fd
 8001454:	200002fe 	.word	0x200002fe
 8001458:	20000306 	.word	0x20000306
 800145c:	200002ff 	.word	0x200002ff
 8001460:	20000300 	.word	0x20000300

08001464 <hid_press_key>:

void hid_press_key(struct key *key, uint8_t layer) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 8001470:	78fa      	ldrb	r2, [r7, #3]
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4413      	add	r3, r2
 800147a:	440b      	add	r3, r1
 800147c:	3305      	adds	r3, #5
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	3b01      	subs	r3, #1
 8001482:	2b03      	cmp	r3, #3
 8001484:	f200 80f7 	bhi.w	8001676 <hid_press_key+0x212>
 8001488:	a201      	add	r2, pc, #4	@ (adr r2, 8001490 <hid_press_key+0x2c>)
 800148a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148e:	bf00      	nop
 8001490:	080014c7 	.word	0x080014c7
 8001494:	080014a1 	.word	0x080014a1
 8001498:	08001507 	.word	0x08001507
 800149c:	08001525 	.word	0x08001525
  case KEY_TYPE_MODIFIER:
    modifiers |= key->layers[layer].value[0];
 80014a0:	78fa      	ldrb	r2, [r7, #3]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4413      	add	r3, r2
 80014aa:	440b      	add	r3, r1
 80014ac:	88db      	ldrh	r3, [r3, #6]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b74      	ldr	r3, [pc, #464]	@ (8001684 <hid_press_key+0x220>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4b72      	ldr	r3, [pc, #456]	@ (8001684 <hid_press_key+0x220>)
 80014bc:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80014be:	4b72      	ldr	r3, [pc, #456]	@ (8001688 <hid_press_key+0x224>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
    break;
 80014c4:	e0da      	b.n	800167c <hid_press_key+0x218>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
 80014ca:	e018      	b.n	80014fe <hid_press_key+0x9a>
      if (keycodes[i] == 0) {
 80014cc:	7dfb      	ldrb	r3, [r7, #23]
 80014ce:	4a6f      	ldr	r2, [pc, #444]	@ (800168c <hid_press_key+0x228>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d110      	bne.n	80014f8 <hid_press_key+0x94>
        keycodes[i] = key->layers[layer].value[0];
 80014d6:	78fa      	ldrb	r2, [r7, #3]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	88db      	ldrh	r3, [r3, #6]
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	7dfb      	ldrb	r3, [r7, #23]
 80014e8:	b2d1      	uxtb	r1, r2
 80014ea:	4a68      	ldr	r2, [pc, #416]	@ (800168c <hid_press_key+0x228>)
 80014ec:	54d1      	strb	r1, [r2, r3]
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // } else if (i == 0 && key->state.velocity > keyboard_user_config.screaming_velocity_trigger) {
        //   is_screaming = 1;
        //   modifiers |= get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 80014ee:	4b66      	ldr	r3, [pc, #408]	@ (8001688 <hid_press_key+0x224>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	701a      	strb	r2, [r3, #0]
        break;
 80014f4:	bf00      	nop
      }
    }
    break;
 80014f6:	e0c1      	b.n	800167c <hid_press_key+0x218>
    for (uint8_t i = 0; i < 6; i++) {
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	3301      	adds	r3, #1
 80014fc:	75fb      	strb	r3, [r7, #23]
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
 8001500:	2b05      	cmp	r3, #5
 8001502:	d9e3      	bls.n	80014cc <hid_press_key+0x68>
    break;
 8001504:	e0ba      	b.n	800167c <hid_press_key+0x218>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = key->layers[layer].value[0];
 8001506:	78fa      	ldrb	r2, [r7, #3]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4413      	add	r3, r2
 8001510:	440b      	add	r3, r1
 8001512:	88db      	ldrh	r3, [r3, #6]
 8001514:	b29b      	uxth	r3, r3
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b5d      	ldr	r3, [pc, #372]	@ (8001690 <hid_press_key+0x22c>)
 800151a:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 800151c:	4b5d      	ldr	r3, [pc, #372]	@ (8001694 <hid_press_key+0x230>)
 800151e:	2201      	movs	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
    break;
 8001522:	e0ab      	b.n	800167c <hid_press_key+0x218>

  case KEY_TYPE_MACRO:
    // Count how many non-zero macro values we have (excluding modifiers)
    uint8_t macro_count = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001528:	2300      	movs	r3, #0
 800152a:	757b      	strb	r3, [r7, #21]
 800152c:	e025      	b.n	800157a <hid_press_key+0x116>
      if (key->layers[layer].value[i] != ____) {
 800152e:	78fa      	ldrb	r2, [r7, #3]
 8001530:	7d7b      	ldrb	r3, [r7, #21]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	0058      	lsls	r0, r3, #1
 8001536:	4613      	mov	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4413      	add	r3, r2
 800153c:	4403      	add	r3, r0
 800153e:	440b      	add	r3, r1
 8001540:	88db      	ldrh	r3, [r3, #6]
 8001542:	b29b      	uxth	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d015      	beq.n	8001574 <hid_press_key+0x110>
        // Check if this is a modifier
        uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[i]);
 8001548:	78fa      	ldrb	r2, [r7, #3]
 800154a:	7d7b      	ldrb	r3, [r7, #21]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	0058      	lsls	r0, r3, #1
 8001550:	4613      	mov	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	4413      	add	r3, r2
 8001556:	4403      	add	r3, r0
 8001558:	440b      	add	r3, r1
 800155a:	88db      	ldrh	r3, [r3, #6]
 800155c:	b29b      	uxth	r3, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f9a0 	bl	80018a4 <get_bitmask_for_modifier>
 8001564:	4603      	mov	r3, r0
 8001566:	737b      	strb	r3, [r7, #13]
        if (!bitmask) {
 8001568:	7b7b      	ldrb	r3, [r7, #13]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d102      	bne.n	8001574 <hid_press_key+0x110>
          macro_count++; // Only count non-modifier keys
 800156e:	7dbb      	ldrb	r3, [r7, #22]
 8001570:	3301      	adds	r3, #1
 8001572:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001574:	7d7b      	ldrb	r3, [r7, #21]
 8001576:	3301      	adds	r3, #1
 8001578:	757b      	strb	r3, [r7, #21]
 800157a:	7d7b      	ldrb	r3, [r7, #21]
 800157c:	2b03      	cmp	r3, #3
 800157e:	d9d6      	bls.n	800152e <hid_press_key+0xca>
        }
      }
    }

    // Find the first empty slot for the macro
    uint8_t start_slot = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	753b      	strb	r3, [r7, #20]
    for (uint8_t i = 0; i < 6; i++) {
 8001584:	2300      	movs	r3, #0
 8001586:	74fb      	strb	r3, [r7, #19]
 8001588:	e00a      	b.n	80015a0 <hid_press_key+0x13c>
      if (keycodes[i] == 0) {
 800158a:	7cfb      	ldrb	r3, [r7, #19]
 800158c:	4a3f      	ldr	r2, [pc, #252]	@ (800168c <hid_press_key+0x228>)
 800158e:	5cd3      	ldrb	r3, [r2, r3]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <hid_press_key+0x136>
        start_slot = i;
 8001594:	7cfb      	ldrb	r3, [r7, #19]
 8001596:	753b      	strb	r3, [r7, #20]
        break;
 8001598:	e005      	b.n	80015a6 <hid_press_key+0x142>
    for (uint8_t i = 0; i < 6; i++) {
 800159a:	7cfb      	ldrb	r3, [r7, #19]
 800159c:	3301      	adds	r3, #1
 800159e:	74fb      	strb	r3, [r7, #19]
 80015a0:	7cfb      	ldrb	r3, [r7, #19]
 80015a2:	2b05      	cmp	r3, #5
 80015a4:	d9f1      	bls.n	800158a <hid_press_key+0x126>
      }
    }

    // Check if we have enough consecutive empty slots for the non-modifier keys
    uint8_t available_slots = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	74bb      	strb	r3, [r7, #18]
    for (uint8_t i = start_slot; i < 6; i++) {
 80015aa:	7d3b      	ldrb	r3, [r7, #20]
 80015ac:	747b      	strb	r3, [r7, #17]
 80015ae:	e00a      	b.n	80015c6 <hid_press_key+0x162>
      if (keycodes[i] == 0) {
 80015b0:	7c7b      	ldrb	r3, [r7, #17]
 80015b2:	4a36      	ldr	r2, [pc, #216]	@ (800168c <hid_press_key+0x228>)
 80015b4:	5cd3      	ldrb	r3, [r2, r3]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d109      	bne.n	80015ce <hid_press_key+0x16a>
        available_slots++;
 80015ba:	7cbb      	ldrb	r3, [r7, #18]
 80015bc:	3301      	adds	r3, #1
 80015be:	74bb      	strb	r3, [r7, #18]
    for (uint8_t i = start_slot; i < 6; i++) {
 80015c0:	7c7b      	ldrb	r3, [r7, #17]
 80015c2:	3301      	adds	r3, #1
 80015c4:	747b      	strb	r3, [r7, #17]
 80015c6:	7c7b      	ldrb	r3, [r7, #17]
 80015c8:	2b05      	cmp	r3, #5
 80015ca:	d9f1      	bls.n	80015b0 <hid_press_key+0x14c>
 80015cc:	e000      	b.n	80015d0 <hid_press_key+0x16c>
      } else {
        break; // Stop counting if we hit a non-empty slot
 80015ce:	bf00      	nop
      }
    }

    // Only proceed if we have enough slots for the non-modifier keys
    if (available_slots >= macro_count) {
 80015d0:	7cba      	ldrb	r2, [r7, #18]
 80015d2:	7dbb      	ldrb	r3, [r7, #22]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d350      	bcc.n	800167a <hid_press_key+0x216>
      // Process macro values
      uint8_t macro_idx = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	743b      	strb	r3, [r7, #16]
      for (uint8_t i = start_slot; i < 6 && macro_idx < MAX_MACRO_LEN; macro_idx++) {
 80015dc:	7d3b      	ldrb	r3, [r7, #20]
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	e042      	b.n	8001668 <hid_press_key+0x204>
        if (key->layers[layer].value[macro_idx] != ____) {
 80015e2:	78fa      	ldrb	r2, [r7, #3]
 80015e4:	7c3b      	ldrb	r3, [r7, #16]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	0058      	lsls	r0, r3, #1
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	4403      	add	r3, r0
 80015f2:	440b      	add	r3, r1
 80015f4:	88db      	ldrh	r3, [r3, #6]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d032      	beq.n	8001662 <hid_press_key+0x1fe>
          // Check if this is a modifier
          uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[macro_idx]);
 80015fc:	78fa      	ldrb	r2, [r7, #3]
 80015fe:	7c3b      	ldrb	r3, [r7, #16]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	0058      	lsls	r0, r3, #1
 8001604:	4613      	mov	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4413      	add	r3, r2
 800160a:	4403      	add	r3, r0
 800160c:	440b      	add	r3, r1
 800160e:	88db      	ldrh	r3, [r3, #6]
 8001610:	b29b      	uxth	r3, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f946 	bl	80018a4 <get_bitmask_for_modifier>
 8001618:	4603      	mov	r3, r0
 800161a:	73bb      	strb	r3, [r7, #14]
          if (bitmask) {
 800161c:	7bbb      	ldrb	r3, [r7, #14]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00a      	beq.n	8001638 <hid_press_key+0x1d4>
            // Set modifier bit
            modifiers |= bitmask;
 8001622:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <hid_press_key+0x220>)
 8001624:	781a      	ldrb	r2, [r3, #0]
 8001626:	7bbb      	ldrb	r3, [r7, #14]
 8001628:	4313      	orrs	r3, r2
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <hid_press_key+0x220>)
 800162e:	701a      	strb	r2, [r3, #0]
            should_send_keyboard_report = 1;
 8001630:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <hid_press_key+0x224>)
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	e014      	b.n	8001662 <hid_press_key+0x1fe>
          } else {
            // Place non-modifier key in keycodes array
            keycodes[i] = key->layers[layer].value[macro_idx];
 8001638:	78fa      	ldrb	r2, [r7, #3]
 800163a:	7c3b      	ldrb	r3, [r7, #16]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	0058      	lsls	r0, r3, #1
 8001640:	4613      	mov	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4413      	add	r3, r2
 8001646:	4403      	add	r3, r0
 8001648:	440b      	add	r3, r1
 800164a:	88db      	ldrh	r3, [r3, #6]
 800164c:	b29a      	uxth	r2, r3
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	b2d1      	uxtb	r1, r2
 8001652:	4a0e      	ldr	r2, [pc, #56]	@ (800168c <hid_press_key+0x228>)
 8001654:	54d1      	strb	r1, [r2, r3]
            i++; // Move to next keycodes slot
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	3301      	adds	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
            should_send_keyboard_report = 1;
 800165c:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <hid_press_key+0x224>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
      for (uint8_t i = start_slot; i < 6 && macro_idx < MAX_MACRO_LEN; macro_idx++) {
 8001662:	7c3b      	ldrb	r3, [r7, #16]
 8001664:	3301      	adds	r3, #1
 8001666:	743b      	strb	r3, [r7, #16]
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	2b05      	cmp	r3, #5
 800166c:	d805      	bhi.n	800167a <hid_press_key+0x216>
 800166e:	7c3b      	ldrb	r3, [r7, #16]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d9b6      	bls.n	80015e2 <hid_press_key+0x17e>
          }
        }
      }
    }
    break;
 8001674:	e001      	b.n	800167a <hid_press_key+0x216>

  default:
    break;
 8001676:	bf00      	nop
 8001678:	e000      	b.n	800167c <hid_press_key+0x218>
    break;
 800167a:	bf00      	nop
  }
}
 800167c:	bf00      	nop
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200002ff 	.word	0x200002ff
 8001688:	200002fe 	.word	0x200002fe
 800168c:	20000300 	.word	0x20000300
 8001690:	20000306 	.word	0x20000306
 8001694:	200002fd 	.word	0x200002fd

08001698 <hid_release_key>:

void hid_release_key(struct key *key, uint8_t layer) {
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 80016a4:	78fa      	ldrb	r2, [r7, #3]
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4413      	add	r3, r2
 80016ae:	440b      	add	r3, r1
 80016b0:	3305      	adds	r3, #5
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	f200 80a7 	bhi.w	800180a <hid_release_key+0x172>
 80016bc:	a201      	add	r2, pc, #4	@ (adr r2, 80016c4 <hid_release_key+0x2c>)
 80016be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c2:	bf00      	nop
 80016c4:	08001703 	.word	0x08001703
 80016c8:	080016d5 	.word	0x080016d5
 80016cc:	08001745 	.word	0x08001745
 80016d0:	08001753 	.word	0x08001753
  case KEY_TYPE_MODIFIER:
    modifiers &= ~key->layers[layer].value[0];
 80016d4:	78fa      	ldrb	r2, [r7, #3]
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4413      	add	r3, r2
 80016de:	440b      	add	r3, r1
 80016e0:	88db      	ldrh	r3, [r3, #6]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	b25a      	sxtb	r2, r3
 80016ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001814 <hid_release_key+0x17c>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	4013      	ands	r3, r2
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4b47      	ldr	r3, [pc, #284]	@ (8001814 <hid_release_key+0x17c>)
 80016f8:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80016fa:	4b47      	ldr	r3, [pc, #284]	@ (8001818 <hid_release_key+0x180>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]
    break;
 8001700:	e084      	b.n	800180c <hid_release_key+0x174>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 8001702:	2300      	movs	r3, #0
 8001704:	73fb      	strb	r3, [r7, #15]
 8001706:	e019      	b.n	800173c <hid_release_key+0xa4>
      if (keycodes[i] == key->layers[layer].value[0]) {
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	4a44      	ldr	r2, [pc, #272]	@ (800181c <hid_release_key+0x184>)
 800170c:	5cd3      	ldrb	r3, [r2, r3]
 800170e:	4618      	mov	r0, r3
 8001710:	78fa      	ldrb	r2, [r7, #3]
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4413      	add	r3, r2
 800171a:	440b      	add	r3, r1
 800171c:	88db      	ldrh	r3, [r3, #6]
 800171e:	b29b      	uxth	r3, r3
 8001720:	4298      	cmp	r0, r3
 8001722:	d108      	bne.n	8001736 <hid_release_key+0x9e>
        keycodes[i] = 0;
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	4a3d      	ldr	r2, [pc, #244]	@ (800181c <hid_release_key+0x184>)
 8001728:	2100      	movs	r1, #0
 800172a:	54d1      	strb	r1, [r2, r3]
        // if (is_screaming) {
        //   is_screaming = 0;
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 800172c:	4b3a      	ldr	r3, [pc, #232]	@ (8001818 <hid_release_key+0x180>)
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
        break;
 8001732:	bf00      	nop
      }
    }
    break;
 8001734:	e06a      	b.n	800180c <hid_release_key+0x174>
    for (uint8_t i = 0; i < 6; i++) {
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	3301      	adds	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	2b05      	cmp	r3, #5
 8001740:	d9e2      	bls.n	8001708 <hid_release_key+0x70>
    break;
 8001742:	e063      	b.n	800180c <hid_release_key+0x174>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = 0;
 8001744:	4b36      	ldr	r3, [pc, #216]	@ (8001820 <hid_release_key+0x188>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 800174a:	4b36      	ldr	r3, [pc, #216]	@ (8001824 <hid_release_key+0x18c>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
    break;
 8001750:	e05c      	b.n	800180c <hid_release_key+0x174>

  case KEY_TYPE_MACRO:
    // Process macro values for release
    for (uint8_t macro_idx = 0; macro_idx < MAX_MACRO_LEN; macro_idx++) {
 8001752:	2300      	movs	r3, #0
 8001754:	73bb      	strb	r3, [r7, #14]
 8001756:	e054      	b.n	8001802 <hid_release_key+0x16a>
      if (key->layers[layer].value[macro_idx] != ____) {
 8001758:	78fa      	ldrb	r2, [r7, #3]
 800175a:	7bbb      	ldrb	r3, [r7, #14]
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	0058      	lsls	r0, r3, #1
 8001760:	4613      	mov	r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4413      	add	r3, r2
 8001766:	4403      	add	r3, r0
 8001768:	440b      	add	r3, r1
 800176a:	88db      	ldrh	r3, [r3, #6]
 800176c:	b29b      	uxth	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d044      	beq.n	80017fc <hid_release_key+0x164>
        // Check if this is a modifier
        uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[macro_idx]);
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	7bbb      	ldrb	r3, [r7, #14]
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	0058      	lsls	r0, r3, #1
 800177a:	4613      	mov	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4413      	add	r3, r2
 8001780:	4403      	add	r3, r0
 8001782:	440b      	add	r3, r1
 8001784:	88db      	ldrh	r3, [r3, #6]
 8001786:	b29b      	uxth	r3, r3
 8001788:	4618      	mov	r0, r3
 800178a:	f000 f88b 	bl	80018a4 <get_bitmask_for_modifier>
 800178e:	4603      	mov	r3, r0
 8001790:	733b      	strb	r3, [r7, #12]
        if (bitmask) {
 8001792:	7b3b      	ldrb	r3, [r7, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00f      	beq.n	80017b8 <hid_release_key+0x120>
          // Clear modifier bit
          modifiers &= ~bitmask;
 8001798:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800179c:	43db      	mvns	r3, r3
 800179e:	b25a      	sxtb	r2, r3
 80017a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001814 <hid_release_key+0x17c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	4013      	ands	r3, r2
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <hid_release_key+0x17c>)
 80017ae:	701a      	strb	r2, [r3, #0]
          should_send_keyboard_report = 1;
 80017b0:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <hid_release_key+0x180>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	e021      	b.n	80017fc <hid_release_key+0x164>
        } else {
          // Remove non-modifier key from keycodes array
          for (uint8_t i = 0; i < 6; i++) {
 80017b8:	2300      	movs	r3, #0
 80017ba:	737b      	strb	r3, [r7, #13]
 80017bc:	e01b      	b.n	80017f6 <hid_release_key+0x15e>
            if (keycodes[i] == key->layers[layer].value[macro_idx]) {
 80017be:	7b7b      	ldrb	r3, [r7, #13]
 80017c0:	4a16      	ldr	r2, [pc, #88]	@ (800181c <hid_release_key+0x184>)
 80017c2:	5cd3      	ldrb	r3, [r2, r3]
 80017c4:	461c      	mov	r4, r3
 80017c6:	78fa      	ldrb	r2, [r7, #3]
 80017c8:	7bbb      	ldrb	r3, [r7, #14]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	0058      	lsls	r0, r3, #1
 80017ce:	4613      	mov	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4413      	add	r3, r2
 80017d4:	4403      	add	r3, r0
 80017d6:	440b      	add	r3, r1
 80017d8:	88db      	ldrh	r3, [r3, #6]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	429c      	cmp	r4, r3
 80017de:	d107      	bne.n	80017f0 <hid_release_key+0x158>
              keycodes[i] = 0;
 80017e0:	7b7b      	ldrb	r3, [r7, #13]
 80017e2:	4a0e      	ldr	r2, [pc, #56]	@ (800181c <hid_release_key+0x184>)
 80017e4:	2100      	movs	r1, #0
 80017e6:	54d1      	strb	r1, [r2, r3]
              should_send_keyboard_report = 1;
 80017e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <hid_release_key+0x180>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
              break;
 80017ee:	e005      	b.n	80017fc <hid_release_key+0x164>
          for (uint8_t i = 0; i < 6; i++) {
 80017f0:	7b7b      	ldrb	r3, [r7, #13]
 80017f2:	3301      	adds	r3, #1
 80017f4:	737b      	strb	r3, [r7, #13]
 80017f6:	7b7b      	ldrb	r3, [r7, #13]
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d9e0      	bls.n	80017be <hid_release_key+0x126>
    for (uint8_t macro_idx = 0; macro_idx < MAX_MACRO_LEN; macro_idx++) {
 80017fc:	7bbb      	ldrb	r3, [r7, #14]
 80017fe:	3301      	adds	r3, #1
 8001800:	73bb      	strb	r3, [r7, #14]
 8001802:	7bbb      	ldrb	r3, [r7, #14]
 8001804:	2b03      	cmp	r3, #3
 8001806:	d9a7      	bls.n	8001758 <hid_release_key+0xc0>
            }
          }
        }
      }
    }
    break;
 8001808:	e000      	b.n	800180c <hid_release_key+0x174>

  default:
    break;
 800180a:	bf00      	nop
  }
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	bd90      	pop	{r4, r7, pc}
 8001814:	200002ff 	.word	0x200002ff
 8001818:	200002fe 	.word	0x200002fe
 800181c:	20000300 	.word	0x20000300
 8001820:	20000306 	.word	0x20000306
 8001824:	200002fd 	.word	0x200002fd

08001828 <tud_hid_set_protocol_cb>:
// Invoked when received SET_PROTOCOL request
// protocol is either HID_PROTOCOL_BOOT (0) or HID_PROTOCOL_REPORT (1)

/// CALLBACKS

void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	460a      	mov	r2, r1
 8001832:	71fb      	strb	r3, [r7, #7]
 8001834:	4613      	mov	r3, r2
 8001836:	71bb      	strb	r3, [r7, #6]
  (void)instance;
  (void)protocol;
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <tud_hid_report_complete_cb>:

void tud_hid_report_complete_cb(uint8_t instance, uint8_t const *report, uint16_t len) {
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
 8001850:	4613      	mov	r3, r2
 8001852:	80bb      	strh	r3, [r7, #4]
  (void)instance;
  (void)len;
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <tud_hid_get_report_cb>:
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t *buffer, uint16_t reqlen) {
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	4603      	mov	r3, r0
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	460b      	mov	r3, r1
 800186e:	71bb      	strb	r3, [r7, #6]
 8001870:	4613      	mov	r3, r2
 8001872:	717b      	strb	r3, [r7, #5]
  (void)instance;
  (void)report_type;
  (void)buffer;
  (void)reqlen;

  return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const *buffer, uint16_t bufsize) {
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
 800188e:	460b      	mov	r3, r1
 8001890:	71bb      	strb	r3, [r7, #6]
 8001892:	4613      	mov	r3, r2
 8001894:	717b      	strb	r3, [r7, #5]
  (void)instance;
  (void)report_type;
  (void)buffer;
  (void)bufsize;
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <get_bitmask_for_modifier>:

static uint8_t key_triggered = 0;

struct key *current_pressed_key = NULL;

uint8_t get_bitmask_for_modifier(uint8_t keycode) {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
  switch (keycode) {
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	3be0      	subs	r3, #224	@ 0xe0
 80018b2:	2b07      	cmp	r3, #7
 80018b4:	d822      	bhi.n	80018fc <get_bitmask_for_modifier+0x58>
 80018b6:	a201      	add	r2, pc, #4	@ (adr r2, 80018bc <get_bitmask_for_modifier+0x18>)
 80018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018bc:	080018dd 	.word	0x080018dd
 80018c0:	080018e1 	.word	0x080018e1
 80018c4:	080018e5 	.word	0x080018e5
 80018c8:	080018e9 	.word	0x080018e9
 80018cc:	080018ed 	.word	0x080018ed
 80018d0:	080018f1 	.word	0x080018f1
 80018d4:	080018f5 	.word	0x080018f5
 80018d8:	080018f9 	.word	0x080018f9
  case HID_KEY_CONTROL_LEFT:
    return 0b00000001;
 80018dc:	2301      	movs	r3, #1
 80018de:	e00e      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_LEFT:
    return 0b00000010;
 80018e0:	2302      	movs	r3, #2
 80018e2:	e00c      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_LEFT:
    return 0b00000100;
 80018e4:	2304      	movs	r3, #4
 80018e6:	e00a      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_LEFT:
    return 0b00001000;
 80018e8:	2308      	movs	r3, #8
 80018ea:	e008      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  case HID_KEY_CONTROL_RIGHT:
    return 0b00010000;
 80018ec:	2310      	movs	r3, #16
 80018ee:	e006      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_RIGHT:
    return 0b00100000;
 80018f0:	2320      	movs	r3, #32
 80018f2:	e004      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_RIGHT:
    return 0b01000000;
 80018f4:	2340      	movs	r3, #64	@ 0x40
 80018f6:	e002      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_RIGHT:
    return 0b10000000;
 80018f8:	2380      	movs	r3, #128	@ 0x80
 80018fa:	e000      	b.n	80018fe <get_bitmask_for_modifier+0x5a>
  default:
    return 0b00000000;
 80018fc:	2300      	movs	r3, #0
  }
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop

0800190c <get_usage_consumer_control>:

uint16_t get_usage_consumer_control(uint16_t value) {
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
  if (value > 0xFF) {
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	2bff      	cmp	r3, #255	@ 0xff
 800191a:	d904      	bls.n	8001926 <get_usage_consumer_control+0x1a>
    return value & 0b0111111111111111;
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001922:	b29b      	uxth	r3, r3
 8001924:	e000      	b.n	8001928 <get_usage_consumer_control+0x1c>
  } else {
    return 0;
 8001926:	2300      	movs	r3, #0
  }
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <init_key>:

void init_key(uint8_t adc_channel, uint8_t amux_channel, uint8_t row, uint8_t column) {
 8001934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
 800193a:	4604      	mov	r4, r0
 800193c:	4608      	mov	r0, r1
 800193e:	4611      	mov	r1, r2
 8001940:	461a      	mov	r2, r3
 8001942:	4623      	mov	r3, r4
 8001944:	71fb      	strb	r3, [r7, #7]
 8001946:	4603      	mov	r3, r0
 8001948:	71bb      	strb	r3, [r7, #6]
 800194a:	460b      	mov	r3, r1
 800194c:	717b      	strb	r3, [r7, #5]
 800194e:	4613      	mov	r3, r2
 8001950:	713b      	strb	r3, [r7, #4]

  struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8001952:	79f9      	ldrb	r1, [r7, #7]
 8001954:	79ba      	ldrb	r2, [r7, #6]
 8001956:	4613      	mov	r3, r2
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 8001964:	fb01 f202 	mul.w	r2, r1, r2
 8001968:	4413      	add	r3, r2
 800196a:	4a8d      	ldr	r2, [pc, #564]	@ (8001ba0 <init_key+0x26c>)
 800196c:	4413      	add	r3, r2
 800196e:	613b      	str	r3, [r7, #16]

  key->is_enabled = 1;
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
  key->is_idle = 0;
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	2200      	movs	r2, #0
 800197a:	711a      	strb	r2, [r3, #4]
  key->row = row;
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	797a      	ldrb	r2, [r7, #5]
 8001980:	705a      	strb	r2, [r3, #1]
  key->column = column;
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	793a      	ldrb	r2, [r7, #4]
 8001986:	709a      	strb	r2, [r3, #2]

  key->calibration.cycles_count = 0;
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8001990:	2200      	movs	r2, #0
 8001992:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  key->calibration.idle_value = IDLE_VALUE_APPROX;
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	2200      	movs	r2, #0
 800199a:	f042 0208 	orr.w	r2, r2, #8
 800199e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 80019a2:	2200      	movs	r2, #0
 80019a4:	f042 0207 	orr.w	r2, r2, #7
 80019a8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  key->calibration.max_distance = MAX_DISTANCE_APPROX;
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f062 020b 	orn	r2, r2, #11
 80019b4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 80019b8:	2200      	movs	r2, #0
 80019ba:	f042 0201 	orr.w	r2, r2, #1
 80019be:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  key->actuation.status = STATUS_RESET;
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	2203      	movs	r2, #3
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  key->actuation.trigger_offset = keyboard_user_config.trigger_offset;
 80019ca:	4b76      	ldr	r3, [pc, #472]	@ (8001ba4 <init_key+0x270>)
 80019cc:	785a      	ldrb	r2, [r3, #1]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  key->actuation.reset_offset = keyboard_user_config.trigger_offset - keyboard_user_config.reset_threshold;
 80019d4:	4b73      	ldr	r3, [pc, #460]	@ (8001ba4 <init_key+0x270>)
 80019d6:	785a      	ldrb	r2, [r3, #1]
 80019d8:	4b72      	ldr	r3, [pc, #456]	@ (8001ba4 <init_key+0x270>)
 80019da:	789b      	ldrb	r3, [r3, #2]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  key->actuation.rapid_trigger_offset = keyboard_user_config.rapid_trigger_offset;
 80019e6:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba4 <init_key+0x270>)
 80019e8:	78da      	ldrb	r2, [r3, #3]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  key->actuation.is_continuous_rapid_trigger_enabled = 0;
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 80019f8:	2300      	movs	r3, #0
 80019fa:	75fb      	strb	r3, [r7, #23]
 80019fc:	e0c6      	b.n	8001b8c <init_key+0x258>
    if (keyboard_user_config.keymaps[i][row][column][0] != ____) {
 80019fe:	7df9      	ldrb	r1, [r7, #23]
 8001a00:	797a      	ldrb	r2, [r7, #5]
 8001a02:	793b      	ldrb	r3, [r7, #4]
 8001a04:	4867      	ldr	r0, [pc, #412]	@ (8001ba4 <init_key+0x270>)
 8001a06:	0089      	lsls	r1, r1, #2
 8001a08:	440a      	add	r2, r1
 8001a0a:	0092      	lsls	r2, r2, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3301      	adds	r3, #1
 8001a10:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80b6 	beq.w	8001b86 <init_key+0x252>
      // Check if this is a macro (multiple non-zero elements)
      uint8_t macro_count = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	75bb      	strb	r3, [r7, #22]
      for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001a1e:	2300      	movs	r3, #0
 8001a20:	757b      	strb	r3, [r7, #21]
 8001a22:	e015      	b.n	8001a50 <init_key+0x11c>
        if (keyboard_user_config.keymaps[i][row][column][j] != ____) {
 8001a24:	7df8      	ldrb	r0, [r7, #23]
 8001a26:	7979      	ldrb	r1, [r7, #5]
 8001a28:	793a      	ldrb	r2, [r7, #4]
 8001a2a:	7d7b      	ldrb	r3, [r7, #21]
 8001a2c:	4c5d      	ldr	r4, [pc, #372]	@ (8001ba4 <init_key+0x270>)
 8001a2e:	0080      	lsls	r0, r0, #2
 8001a30:	4401      	add	r1, r0
 8001a32:	0089      	lsls	r1, r1, #2
 8001a34:	440a      	add	r2, r1
 8001a36:	0092      	lsls	r2, r2, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <init_key+0x116>
          macro_count++;
 8001a44:	7dbb      	ldrb	r3, [r7, #22]
 8001a46:	3301      	adds	r3, #1
 8001a48:	75bb      	strb	r3, [r7, #22]
      for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001a4a:	7d7b      	ldrb	r3, [r7, #21]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	757b      	strb	r3, [r7, #21]
 8001a50:	7d7b      	ldrb	r3, [r7, #21]
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d9e6      	bls.n	8001a24 <init_key+0xf0>
        }
      }

      if (macro_count > 1) {
 8001a56:	7dbb      	ldrb	r3, [r7, #22]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d92b      	bls.n	8001ab4 <init_key+0x180>
        // This is a macro - copy all values
        key->layers[i].type = KEY_TYPE_MACRO;
 8001a5c:	7dfa      	ldrb	r2, [r7, #23]
 8001a5e:	6939      	ldr	r1, [r7, #16]
 8001a60:	4613      	mov	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4413      	add	r3, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	3305      	adds	r3, #5
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001a6e:	2300      	movs	r3, #0
 8001a70:	753b      	strb	r3, [r7, #20]
 8001a72:	e01b      	b.n	8001aac <init_key+0x178>
          key->layers[i].value[j] = keyboard_user_config.keymaps[i][row][column][j];
 8001a74:	7dfd      	ldrb	r5, [r7, #23]
 8001a76:	797c      	ldrb	r4, [r7, #5]
 8001a78:	7938      	ldrb	r0, [r7, #4]
 8001a7a:	7d39      	ldrb	r1, [r7, #20]
 8001a7c:	7dfa      	ldrb	r2, [r7, #23]
 8001a7e:	7d3b      	ldrb	r3, [r7, #20]
 8001a80:	4e48      	ldr	r6, [pc, #288]	@ (8001ba4 <init_key+0x270>)
 8001a82:	00ad      	lsls	r5, r5, #2
 8001a84:	442c      	add	r4, r5
 8001a86:	00a4      	lsls	r4, r4, #2
 8001a88:	4420      	add	r0, r4
 8001a8a:	0080      	lsls	r0, r0, #2
 8001a8c:	4401      	add	r1, r0
 8001a8e:	3104      	adds	r1, #4
 8001a90:	f836 4011 	ldrh.w	r4, [r6, r1, lsl #1]
 8001a94:	6939      	ldr	r1, [r7, #16]
 8001a96:	0058      	lsls	r0, r3, #1
 8001a98:	4613      	mov	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	4403      	add	r3, r0
 8001aa0:	440b      	add	r3, r1
 8001aa2:	4622      	mov	r2, r4
 8001aa4:	80da      	strh	r2, [r3, #6]
        for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001aa6:	7d3b      	ldrb	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	753b      	strb	r3, [r7, #20]
 8001aac:	7d3b      	ldrb	r3, [r7, #20]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d9e0      	bls.n	8001a74 <init_key+0x140>
 8001ab2:	e068      	b.n	8001b86 <init_key+0x252>
        }
      } else {
        // Single key - check type
        uint16_t usage_consumer_control = get_usage_consumer_control(
 8001ab4:	7df9      	ldrb	r1, [r7, #23]
 8001ab6:	797a      	ldrb	r2, [r7, #5]
 8001ab8:	793b      	ldrb	r3, [r7, #4]
 8001aba:	483a      	ldr	r0, [pc, #232]	@ (8001ba4 <init_key+0x270>)
 8001abc:	0089      	lsls	r1, r1, #2
 8001abe:	440a      	add	r2, r1
 8001ac0:	0092      	lsls	r2, r2, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff ff1e 	bl	800190c <get_usage_consumer_control>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	81fb      	strh	r3, [r7, #14]
            keyboard_user_config.keymaps[i][row][column][0]);
        if (usage_consumer_control) {
 8001ad4:	89fb      	ldrh	r3, [r7, #14]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d011      	beq.n	8001afe <init_key+0x1ca>
          key->layers[i].type = KEY_TYPE_CONSUMER_CONTROL;
 8001ada:	7dfa      	ldrb	r2, [r7, #23]
 8001adc:	6939      	ldr	r1, [r7, #16]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	3305      	adds	r3, #5
 8001ae8:	2203      	movs	r2, #3
 8001aea:	701a      	strb	r2, [r3, #0]
          key->layers[i].value[0] = usage_consumer_control;
 8001aec:	7dfa      	ldrb	r2, [r7, #23]
 8001aee:	6939      	ldr	r1, [r7, #16]
 8001af0:	4613      	mov	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4413      	add	r3, r2
 8001af6:	440b      	add	r3, r1
 8001af8:	89fa      	ldrh	r2, [r7, #14]
 8001afa:	80da      	strh	r2, [r3, #6]
 8001afc:	e043      	b.n	8001b86 <init_key+0x252>
        } else {
          uint8_t bitmask = get_bitmask_for_modifier(
              keyboard_user_config.keymaps[i][row][column][0]);
 8001afe:	7df9      	ldrb	r1, [r7, #23]
 8001b00:	797a      	ldrb	r2, [r7, #5]
 8001b02:	793b      	ldrb	r3, [r7, #4]
 8001b04:	4827      	ldr	r0, [pc, #156]	@ (8001ba4 <init_key+0x270>)
 8001b06:	0089      	lsls	r1, r1, #2
 8001b08:	440a      	add	r2, r1
 8001b0a:	0092      	lsls	r2, r2, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
          uint8_t bitmask = get_bitmask_for_modifier(
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fec4 	bl	80018a4 <get_bitmask_for_modifier>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	737b      	strb	r3, [r7, #13]
          if (bitmask) {
 8001b20:	7b7b      	ldrb	r3, [r7, #13]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d013      	beq.n	8001b4e <init_key+0x21a>
            key->layers[i].type = KEY_TYPE_MODIFIER;
 8001b26:	7dfa      	ldrb	r2, [r7, #23]
 8001b28:	6939      	ldr	r1, [r7, #16]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4413      	add	r3, r2
 8001b30:	440b      	add	r3, r1
 8001b32:	3305      	adds	r3, #5
 8001b34:	2202      	movs	r2, #2
 8001b36:	701a      	strb	r2, [r3, #0]
            key->layers[i].value[0] = bitmask;
 8001b38:	7dfa      	ldrb	r2, [r7, #23]
 8001b3a:	7b7b      	ldrb	r3, [r7, #13]
 8001b3c:	b298      	uxth	r0, r3
 8001b3e:	6939      	ldr	r1, [r7, #16]
 8001b40:	4613      	mov	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	4413      	add	r3, r2
 8001b46:	440b      	add	r3, r1
 8001b48:	4602      	mov	r2, r0
 8001b4a:	80da      	strh	r2, [r3, #6]
 8001b4c:	e01b      	b.n	8001b86 <init_key+0x252>
          } else {
            key->layers[i].type = KEY_TYPE_NORMAL;
 8001b4e:	7dfa      	ldrb	r2, [r7, #23]
 8001b50:	6939      	ldr	r1, [r7, #16]
 8001b52:	4613      	mov	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	440b      	add	r3, r1
 8001b5a:	3305      	adds	r3, #5
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]
            key->layers[i].value[0] =
                keyboard_user_config.keymaps[i][row][column][0];
 8001b60:	7df8      	ldrb	r0, [r7, #23]
 8001b62:	7979      	ldrb	r1, [r7, #5]
 8001b64:	793b      	ldrb	r3, [r7, #4]
            key->layers[i].value[0] =
 8001b66:	7dfa      	ldrb	r2, [r7, #23]
                keyboard_user_config.keymaps[i][row][column][0];
 8001b68:	4c0e      	ldr	r4, [pc, #56]	@ (8001ba4 <init_key+0x270>)
 8001b6a:	0080      	lsls	r0, r0, #2
 8001b6c:	4401      	add	r1, r0
 8001b6e:	0089      	lsls	r1, r1, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	3301      	adds	r3, #1
 8001b74:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
            key->layers[i].value[0] =
 8001b78:	6939      	ldr	r1, [r7, #16]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4413      	add	r3, r2
 8001b80:	440b      	add	r3, r1
 8001b82:	4602      	mov	r2, r0
 8001b84:	80da      	strh	r2, [r3, #6]
  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	75fb      	strb	r3, [r7, #23]
 8001b8c:	7dfb      	ldrb	r3, [r7, #23]
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	f67f af35 	bls.w	80019fe <init_key+0xca>
          }
        }
      }
    }
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	371c      	adds	r7, #28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000308 	.word	0x20000308
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <update_key_state>:

uint8_t update_key_state(struct key *key) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  struct state state;

  // Get a reading
  state.value = keyboard_user_config.reverse_magnet_pole ? 4095 - keyboard_read_adc() : keyboard_read_adc();
 8001bb0:	4bab      	ldr	r3, [pc, #684]	@ (8001e60 <update_key_state+0x2b8>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d007      	beq.n	8001bc8 <update_key_state+0x20>
 8001bb8:	f001 f9e8 	bl	8002f8c <keyboard_read_adc>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8001bc2:	330f      	adds	r3, #15
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	e002      	b.n	8001bce <update_key_state+0x26>
 8001bc8:	f001 f9e0 	bl	8002f8c <keyboard_read_adc>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	813b      	strh	r3, [r7, #8]

  if (key->calibration.cycles_count < CALIBRATION_CYCLES) {
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f8b3 3029 	ldrh.w	r3, [r3, #41]	@ 0x29
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	2b13      	cmp	r3, #19
 8001bda:	d82f      	bhi.n	8001c3c <update_key_state+0x94>
    // Calibrate idle value
    float delta = 0.6;
 8001bdc:	4ba1      	ldr	r3, [pc, #644]	@ (8001e64 <update_key_state+0x2bc>)
 8001bde:	617b      	str	r3, [r7, #20]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8001be0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001be4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001be8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bec:	893b      	ldrh	r3, [r7, #8]
 8001bee:	ee07 3a90 	vmov	s15, r3
 8001bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	ee07 3a90 	vmov	s15, r3
 8001c06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c1a:	ee17 3a90 	vmov	r3, s15
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8a3 202b 	strh.w	r2, [r3, #43]	@ 0x2b
    key->calibration.cycles_count++;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f8b3 3029 	ldrh.w	r3, [r3, #41]	@ 0x29
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f8a3 2029 	strh.w	r2, [r3, #41]	@ 0x29

    return 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e10c      	b.n	8001e56 <update_key_state+0x2ae>
  }

  // Calibrate idle value
  if (state.value > key->calibration.idle_value) {
 8001c3c:	893a      	ldrh	r2, [r7, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d929      	bls.n	8001c9e <update_key_state+0xf6>
    // opti possible sur float
    float delta = 0.8;
 8001c4a:	4b87      	ldr	r3, [pc, #540]	@ (8001e68 <update_key_state+0x2c0>)
 8001c4c:	61fb      	str	r3, [r7, #28]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8001c4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c52:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c5a:	893b      	ldrh	r3, [r7, #8]
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	ee07 3a90 	vmov	s15, r3
 8001c74:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c78:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c88:	ee17 3a90 	vmov	r3, s15
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f8a3 202b 	strh.w	r2, [r3, #43]	@ 0x2b
    state.value = key->calibration.idle_value;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	813b      	strh	r3, [r7, #8]
  }

  // Do nothing if key is idle
  if (key->state.distance == 0 && state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f8b3 3031 	ldrh.w	r3, [r3, #49]	@ 0x31
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d117      	bne.n	8001cda <update_key_state+0x132>
 8001caa:	893b      	ldrh	r3, [r7, #8]
 8001cac:	461a      	mov	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	3b0a      	subs	r3, #10
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	db0e      	blt.n	8001cda <update_key_state+0x132>
    if (key->idle_counter >= IDLE_CYCLES_UNTIL_SLEEP) {
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	78db      	ldrb	r3, [r3, #3]
 8001cc0:	2b0e      	cmp	r3, #14
 8001cc2:	d904      	bls.n	8001cce <update_key_state+0x126>
      key->is_idle = 1;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	711a      	strb	r2, [r3, #4]
      return 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e0c3      	b.n	8001e56 <update_key_state+0x2ae>
    }
    key->idle_counter++;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	78db      	ldrb	r3, [r3, #3]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	70da      	strb	r2, [r3, #3]
  }

  // Get distance from top
  if (state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8001cda:	893b      	ldrh	r3, [r7, #8]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	3b0a      	subs	r3, #10
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	db06      	blt.n	8001cfa <update_key_state+0x152>
    state.distance = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	817b      	strh	r3, [r7, #10]
    key->actuation.direction_changed_point = 0;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8001cf8:	e00f      	b.n	8001d1a <update_key_state+0x172>
  } else {
    state.distance = key->calibration.idle_value - IDLE_VALUE_OFFSET - state.value;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	893b      	ldrh	r3, [r7, #8]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	3b0a      	subs	r3, #10
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	817b      	strh	r3, [r7, #10]
    key->is_idle = 0;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	711a      	strb	r2, [r3, #4]
    key->idle_counter = 0;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	70da      	strb	r2, [r3, #3]
  }

  // Calibrate max distance value
  if (state.distance > key->calibration.max_distance) {
 8001d1a:	897a      	ldrh	r2, [r7, #10]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d903      	bls.n	8001d30 <update_key_state+0x188>
    key->calibration.max_distance = state.distance;
 8001d28:	897a      	ldrh	r2, [r7, #10]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f8a3 202d 	strh.w	r2, [r3, #45]	@ 0x2d
  }

  // Limit max distance
  if (state.distance >= key->calibration.max_distance - MAX_DISTANCE_OFFSET) {
 8001d30:	897b      	ldrh	r3, [r7, #10]
 8001d32:	461a      	mov	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3b3c      	subs	r3, #60	@ 0x3c
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	db04      	blt.n	8001d4c <update_key_state+0x1a4>
    state.distance = key->calibration.max_distance;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	817b      	strh	r3, [r7, #10]
  }

  // Map distance in percentages
  state.distance_8bits = (state.distance * 0xff) / key->calibration.max_distance;
 8001d4c:	897b      	ldrh	r3, [r7, #10]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4613      	mov	r3, r2
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	1a9b      	subs	r3, r3, r2
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	f8b2 202d 	ldrh.w	r2, [r2, #45]	@ 0x2d
 8001d5c:	b292      	uxth	r2, r2
 8001d5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	733b      	strb	r3, [r7, #12]

  float delta = 0.8;
 8001d66:	4b40      	ldr	r3, [pc, #256]	@ (8001e68 <update_key_state+0x2c0>)
 8001d68:	61bb      	str	r3, [r7, #24]
  state.filtered_distance = (1 - delta) * state.distance_8bits + delta * key->state.filtered_distance;
 8001d6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d76:	7b3b      	ldrb	r3, [r7, #12]
 8001d78:	ee07 3a90 	vmov	s15, r3
 8001d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d88:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d8c:	ee06 3a90 	vmov	s13, r3
 8001d90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d98:	ee17 3a90 	vmov	r3, s15
 8001d9c:	f8c7 300d 	str.w	r3, [r7, #13]
  state.filtered_distance_8bits = state.filtered_distance;
 8001da0:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8001da4:	ee07 3a90 	vmov	s15, r3
 8001da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dac:	edc7 7a00 	vstr	s15, [r7]
 8001db0:	783b      	ldrb	r3, [r7, #0]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	74bb      	strb	r3, [r7, #18]

  // Update velocity
  state.velocity = state.filtered_distance_8bits - key->state.filtered_distance_8bits;
 8001db6:	7cba      	ldrb	r2, [r7, #18]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	b25b      	sxtb	r3, r3
 8001dc4:	747b      	strb	r3, [r7, #17]

  // Update direction
  if (key->state.velocity > 0 && state.velocity > 0 && key->actuation.direction != GOING_DOWN) {
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	dd18      	ble.n	8001e02 <update_key_state+0x25a>
 8001dd0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	dd14      	ble.n	8001e02 <update_key_state+0x25a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d00f      	beq.n	8001e02 <update_key_state+0x25a>
    key->actuation.direction = GOING_DOWN;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    if (key->actuation.direction_changed_point != 0) {
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d023      	beq.n	8001e3c <update_key_state+0x294>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    if (key->actuation.direction_changed_point != 0) {
 8001e00:	e01c      	b.n	8001e3c <update_key_state+0x294>
    }
  } else if (key->state.velocity < 0 && state.velocity < 0 && key->actuation.direction != GOING_UP) {
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	da17      	bge.n	8001e3c <update_key_state+0x294>
 8001e0c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	da13      	bge.n	8001e3c <update_key_state+0x294>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00e      	beq.n	8001e3c <update_key_state+0x294>
    key->actuation.direction = GOING_UP;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    if (key->actuation.direction_changed_point != 255) {
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001e2c:	2bff      	cmp	r3, #255	@ 0xff
 8001e2e:	d005      	beq.n	8001e3c <update_key_state+0x294>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    }
  }

  key->state = state;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 8001e42:	f107 0308 	add.w	r3, r7, #8
 8001e46:	cb03      	ldmia	r3!, {r0, r1}
 8001e48:	6010      	str	r0, [r2, #0]
 8001e4a:	6051      	str	r1, [r2, #4]
 8001e4c:	8819      	ldrh	r1, [r3, #0]
 8001e4e:	789b      	ldrb	r3, [r3, #2]
 8001e50:	8111      	strh	r1, [r2, #8]
 8001e52:	7293      	strb	r3, [r2, #10]
  return 1;
 8001e54:	2301      	movs	r3, #1
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3720      	adds	r7, #32
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000000 	.word	0x20000000
 8001e64:	3f19999a 	.word	0x3f19999a
 8001e68:	3f4ccccd 	.word	0x3f4ccccd

08001e6c <update_key_actuation>:

void update_key_actuation(struct key *key, uint8_t layer) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	70fb      	strb	r3, [r7, #3]
   *
   */

  // if rapid trigger enable, move trigger and reset offsets according to the distance taht began the trigger

  uint32_t now = keyboard_get_time();
 8001e78:	f001 f89e 	bl	8002fb8 <keyboard_get_time>
 8001e7c:	6178      	str	r0, [r7, #20]
  uint8_t is_after_trigger_offset = key->state.distance_8bits > key->actuation.trigger_offset;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	bf8c      	ite	hi
 8001e8e:	2301      	movhi	r3, #1
 8001e90:	2300      	movls	r3, #0
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	74fb      	strb	r3, [r7, #19]
  uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	bf34      	ite	cc
 8001ea6:	2301      	movcc	r3, #1
 8001ea8:	2300      	movcs	r3, #0
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	74bb      	strb	r3, [r7, #18]
  uint8_t has_rapid_trigger = key->actuation.rapid_trigger_offset != 0;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	bf14      	ite	ne
 8001eb8:	2301      	movne	r3, #1
 8001eba:	2300      	moveq	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	747b      	strb	r3, [r7, #17]
  uint8_t is_after_rapid_trigger_offset = key->state.distance_8bits > key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset + keyboard_user_config.reset_threshold;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001ece:	461a      	mov	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	4a5e      	ldr	r2, [pc, #376]	@ (8002054 <update_key_actuation+0x1e8>)
 8001eda:	7892      	ldrb	r2, [r2, #2]
 8001edc:	4413      	add	r3, r2
 8001ede:	4299      	cmp	r1, r3
 8001ee0:	bfcc      	ite	gt
 8001ee2:	2301      	movgt	r3, #1
 8001ee4:	2300      	movle	r3, #0
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	743b      	strb	r3, [r7, #16]
  uint8_t is_before_rapid_reset_offset = key->state.distance_8bits < key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001ef8:	4619      	mov	r1, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001f00:	1acb      	subs	r3, r1, r3
 8001f02:	429a      	cmp	r2, r3
 8001f04:	bfb4      	ite	lt
 8001f06:	2301      	movlt	r3, #1
 8001f08:	2300      	movge	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	73fb      	strb	r3, [r7, #15]

  switch (key->actuation.status) {
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f14:	3b01      	subs	r3, #1
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	f200 8091 	bhi.w	800203e <update_key_actuation+0x1d2>
 8001f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f24 <update_key_actuation+0xb8>)
 8001f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f22:	bf00      	nop
 8001f24:	08001fe9 	.word	0x08001fe9
 8001f28:	08001ffb 	.word	0x08001ffb
 8001f2c:	08001f35 	.word	0x08001f35
 8001f30:	08001f75 	.word	0x08001f75

  case STATUS_RESET:
    // if reset, can be triggered or tap
    if (is_after_trigger_offset) {
 8001f34:	7cfb      	ldrb	r3, [r7, #19]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 8083 	beq.w	8002042 <update_key_actuation+0x1d6>
      if (key->layers[_TAP_LAYER].value[0]) {
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d004      	beq.n	8001f52 <update_key_actuation+0xe6>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001f50:	e00b      	b.n	8001f6a <update_key_actuation+0xfe>
        // key_triggered = 1;
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2202      	movs	r2, #2
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        key_triggered = 1;
 8001f5a:	4b3f      	ldr	r3, [pc, #252]	@ (8002058 <update_key_actuation+0x1ec>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, layer);
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	4619      	mov	r1, r3
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff fa7d 	bl	8001464 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	f8c3 2041 	str.w	r2, [r3, #65]	@ 0x41
    }
    break;
 8001f72:	e066      	b.n	8002042 <update_key_actuation+0x1d6>

  case STATUS_RAPID_TRIGGER_RESET:
    if (!has_rapid_trigger) {
 8001f74:	7c7b      	ldrb	r3, [r7, #17]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d104      	bne.n	8001f84 <update_key_actuation+0x118>
      key->actuation.status = STATUS_RESET;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      break;
 8001f82:	e063      	b.n	800204c <update_key_actuation+0x1e0>
    }
    // if reset, can be triggered or tap
    if (is_after_trigger_offset && key->actuation.direction == GOING_DOWN && is_after_rapid_trigger_offset) {
 8001f84:	7cfb      	ldrb	r3, [r7, #19]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d026      	beq.n	8001fd8 <update_key_actuation+0x16c>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d121      	bne.n	8001fd8 <update_key_actuation+0x16c>
 8001f94:	7c3b      	ldrb	r3, [r7, #16]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d01e      	beq.n	8001fd8 <update_key_actuation+0x16c>
      if (key->layers[_TAP_LAYER].value[0]) {
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d007      	beq.n	8001fb6 <update_key_actuation+0x14a>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        key_triggered = 1;
 8001fae:	4b2a      	ldr	r3, [pc, #168]	@ (8002058 <update_key_actuation+0x1ec>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
 8001fb4:	e00b      	b.n	8001fce <update_key_actuation+0x162>
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        key_triggered = 1;
 8001fbe:	4b26      	ldr	r3, [pc, #152]	@ (8002058 <update_key_actuation+0x1ec>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, layer);
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff fa4b 	bl	8001464 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	f8c3 2041 	str.w	r2, [r3, #65]	@ 0x41
    } else if (is_before_reset_offset) {
      key->actuation.status = STATUS_RESET;
    }
    break;
 8001fd6:	e036      	b.n	8002046 <update_key_actuation+0x1da>
    } else if (is_before_reset_offset) {
 8001fd8:	7cbb      	ldrb	r3, [r7, #18]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d033      	beq.n	8002046 <update_key_actuation+0x1da>
      key->actuation.status = STATUS_RESET;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    break;
 8001fe6:	e02e      	b.n	8002046 <update_key_actuation+0x1da>

  case STATUS_TAP:
    // if tap, can be reset
    key->actuation.status = STATUS_RESET;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2203      	movs	r2, #3
 8001fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    hid_release_key(key, _TAP_LAYER);
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fb50 	bl	8001698 <hid_release_key>
    break;
 8001ff8:	e028      	b.n	800204c <update_key_actuation+0x1e0>

  case STATUS_TRIGGERED:
    // if triggered, can be reset
    if (is_before_reset_offset) {
 8001ffa:	7cbb      	ldrb	r3, [r7, #18]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d009      	beq.n	8002014 <update_key_actuation+0x1a8>
      key->actuation.status = STATUS_RESET;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2203      	movs	r2, #3
 8002004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      hid_release_key(key, layer);
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	4619      	mov	r1, r3
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff fb43 	bl	8001698 <hid_release_key>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
      hid_release_key(key, layer);
    }
    break;
 8002012:	e01a      	b.n	800204a <update_key_actuation+0x1de>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
 8002014:	7c7b      	ldrb	r3, [r7, #17]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d017      	beq.n	800204a <update_key_actuation+0x1de>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002020:	2b00      	cmp	r3, #0
 8002022:	d112      	bne.n	800204a <update_key_actuation+0x1de>
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00f      	beq.n	800204a <update_key_actuation+0x1de>
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2204      	movs	r2, #4
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      hid_release_key(key, layer);
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	4619      	mov	r1, r3
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff fb2e 	bl	8001698 <hid_release_key>
    break;
 800203c:	e005      	b.n	800204a <update_key_actuation+0x1de>

  default:
    break;
 800203e:	bf00      	nop
 8002040:	e004      	b.n	800204c <update_key_actuation+0x1e0>
    break;
 8002042:	bf00      	nop
 8002044:	e002      	b.n	800204c <update_key_actuation+0x1e0>
    break;
 8002046:	bf00      	nop
 8002048:	e000      	b.n	800204c <update_key_actuation+0x1e0>
    break;
 800204a:	bf00      	nop
  }
}
 800204c:	bf00      	nop
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000000 	.word	0x20000000
 8002058:	2000075c 	.word	0x2000075c

0800205c <update_key>:

void update_key(struct key *key) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if (!update_key_state(key)) {
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff fd9f 	bl	8001ba8 <update_key_state>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <update_key+0x24>
    return;
  }

  extern int current_layer;
  update_key_actuation(key, current_layer);
 8002070:	4b05      	ldr	r3, [pc, #20]	@ (8002088 <update_key+0x2c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	4619      	mov	r1, r3
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fef7 	bl	8001e6c <update_key_actuation>
 800207e:	e000      	b.n	8002082 <update_key+0x26>
    return;
 8002080:	bf00      	nop
}
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000cf8 	.word	0x20000cf8

0800208c <keyboard_init_keys>:

void keyboard_init_keys() {
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
  //	keyboard_read_config();
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8002092:	2300      	movs	r3, #0
 8002094:	71fb      	strb	r3, [r7, #7]
 8002096:	e027      	b.n	80020e8 <keyboard_init_keys+0x5c>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8002098:	2300      	movs	r3, #0
 800209a:	71bb      	strb	r3, [r7, #6]
 800209c:	e01e      	b.n	80020dc <keyboard_init_keys+0x50>
      if (channels_by_row_col[row][col][0] != XXXX) {
 800209e:	79fa      	ldrb	r2, [r7, #7]
 80020a0:	79bb      	ldrb	r3, [r7, #6]
 80020a2:	4915      	ldr	r1, [pc, #84]	@ (80020f8 <keyboard_init_keys+0x6c>)
 80020a4:	0092      	lsls	r2, r2, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80020ac:	2bff      	cmp	r3, #255	@ 0xff
 80020ae:	d012      	beq.n	80020d6 <keyboard_init_keys+0x4a>
        init_key(channels_by_row_col[row][col][0], channels_by_row_col[row][col][1], row, col);
 80020b0:	79fa      	ldrb	r2, [r7, #7]
 80020b2:	79bb      	ldrb	r3, [r7, #6]
 80020b4:	4910      	ldr	r1, [pc, #64]	@ (80020f8 <keyboard_init_keys+0x6c>)
 80020b6:	0092      	lsls	r2, r2, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 80020be:	79fa      	ldrb	r2, [r7, #7]
 80020c0:	79bb      	ldrb	r3, [r7, #6]
 80020c2:	490d      	ldr	r1, [pc, #52]	@ (80020f8 <keyboard_init_keys+0x6c>)
 80020c4:	0092      	lsls	r2, r2, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	440b      	add	r3, r1
 80020cc:	7859      	ldrb	r1, [r3, #1]
 80020ce:	79bb      	ldrb	r3, [r7, #6]
 80020d0:	79fa      	ldrb	r2, [r7, #7]
 80020d2:	f7ff fc2f 	bl	8001934 <init_key>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 80020d6:	79bb      	ldrb	r3, [r7, #6]
 80020d8:	3301      	adds	r3, #1
 80020da:	71bb      	strb	r3, [r7, #6]
 80020dc:	79bb      	ldrb	r3, [r7, #6]
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d9dd      	bls.n	800209e <keyboard_init_keys+0x12>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	3301      	adds	r3, #1
 80020e6:	71fb      	strb	r3, [r7, #7]
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d9d4      	bls.n	8002098 <keyboard_init_keys+0xc>
      }
    }
  }
}
 80020ee:	bf00      	nop
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	0800e888 	.word	0x0800e888

080020fc <keyboard_task>:

void keyboard_task() {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 8002102:	f000 ff59 	bl	8002fb8 <keyboard_get_time>
 8002106:	60b8      	str	r0, [r7, #8]
  key_triggered = 0;
 8002108:	4b66      	ldr	r3, [pc, #408]	@ (80022a4 <keyboard_task+0x1a8>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800210e:	2300      	movs	r3, #0
 8002110:	73fb      	strb	r3, [r7, #15]
 8002112:	e039      	b.n	8002188 <keyboard_task+0x8c>
    keyboard_select_amux(amux_channel);
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	4618      	mov	r0, r3
 8002118:	f000 fef4 	bl	8002f04 <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800211c:	2300      	movs	r3, #0
 800211e:	73bb      	strb	r3, [r7, #14]
 8002120:	e02c      	b.n	800217c <keyboard_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 8002122:	7bb9      	ldrb	r1, [r7, #14]
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	4860      	ldr	r0, [pc, #384]	@ (80022a8 <keyboard_task+0x1ac>)
 8002128:	4613      	mov	r3, r2
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 8002136:	fb01 f202 	mul.w	r2, r1, r2
 800213a:	4413      	add	r3, r2
 800213c:	4403      	add	r3, r0
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d017      	beq.n	8002174 <keyboard_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 8002144:	7bbb      	ldrb	r3, [r7, #14]
 8002146:	4618      	mov	r0, r3
 8002148:	f000 ff04 	bl	8002f54 <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 800214c:	7bb9      	ldrb	r1, [r7, #14]
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	4613      	mov	r3, r2
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 800215e:	fb01 f202 	mul.w	r2, r1, r2
 8002162:	4413      	add	r3, r2
 8002164:	4a50      	ldr	r2, [pc, #320]	@ (80022a8 <keyboard_task+0x1ac>)
 8002166:	4413      	add	r3, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff77 	bl	800205c <update_key>

      keyboard_close_adc();
 800216e:	f000 ff19 	bl	8002fa4 <keyboard_close_adc>
 8002172:	e000      	b.n	8002176 <keyboard_task+0x7a>
        continue;
 8002174:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002176:	7bbb      	ldrb	r3, [r7, #14]
 8002178:	3301      	adds	r3, #1
 800217a:	73bb      	strb	r3, [r7, #14]
 800217c:	7bbb      	ldrb	r3, [r7, #14]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0cf      	beq.n	8002122 <keyboard_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	3301      	adds	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	2b0f      	cmp	r3, #15
 800218c:	d9c2      	bls.n	8002114 <keyboard_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800218e:	2300      	movs	r3, #0
 8002190:	737b      	strb	r3, [r7, #13]
 8002192:	e078      	b.n	8002286 <keyboard_task+0x18a>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002194:	2300      	movs	r3, #0
 8002196:	733b      	strb	r3, [r7, #12]
 8002198:	e06f      	b.n	800227a <keyboard_task+0x17e>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 800219a:	7b39      	ldrb	r1, [r7, #12]
 800219c:	7b7a      	ldrb	r2, [r7, #13]
 800219e:	4842      	ldr	r0, [pc, #264]	@ (80022a8 <keyboard_task+0x1ac>)
 80021a0:	4613      	mov	r3, r2
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 80021ae:	fb01 f202 	mul.w	r2, r1, r2
 80021b2:	4413      	add	r3, r2
 80021b4:	4403      	add	r3, r0
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d05a      	beq.n	8002272 <keyboard_task+0x176>
 80021bc:	7b39      	ldrb	r1, [r7, #12]
 80021be:	7b7a      	ldrb	r2, [r7, #13]
 80021c0:	4839      	ldr	r0, [pc, #228]	@ (80022a8 <keyboard_task+0x1ac>)
 80021c2:	4613      	mov	r3, r2
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 80021d0:	fb01 f202 	mul.w	r2, r1, r2
 80021d4:	4413      	add	r3, r2
 80021d6:	4403      	add	r3, r0
 80021d8:	333c      	adds	r3, #60	@ 0x3c
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d148      	bne.n	8002272 <keyboard_task+0x176>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 80021e0:	7b39      	ldrb	r1, [r7, #12]
 80021e2:	7b7a      	ldrb	r2, [r7, #13]
 80021e4:	4613      	mov	r3, r2
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 80021f2:	fb01 f202 	mul.w	r2, r1, r2
 80021f6:	4413      	add	r3, r2
 80021f8:	4a2b      	ldr	r2, [pc, #172]	@ (80022a8 <keyboard_task+0x1ac>)
 80021fa:	4413      	add	r3, r2
 80021fc:	607b      	str	r3, [r7, #4]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800220a:	429a      	cmp	r2, r3
 800220c:	bf34      	ite	cc
 800220e:	2301      	movcc	r3, #1
 8002210:	2300      	movcs	r3, #0
 8002212:	b2db      	uxtb	r3, r3
 8002214:	70fb      	strb	r3, [r7, #3]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 8002216:	f000 fecf 	bl	8002fb8 <keyboard_get_time>
 800221a:	4602      	mov	r2, r0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f8d3 3041 	ldr.w	r3, [r3, #65]	@ 0x41
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	4a21      	ldr	r2, [pc, #132]	@ (80022ac <keyboard_task+0x1b0>)
 8002226:	88d2      	ldrh	r2, [r2, #6]
 8002228:	4293      	cmp	r3, r2
 800222a:	bf94      	ite	ls
 800222c:	2301      	movls	r3, #1
 800222e:	2300      	movhi	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	70bb      	strb	r3, [r7, #2]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00b      	beq.n	8002252 <keyboard_task+0x156>
 800223a:	78bb      	ldrb	r3, [r7, #2]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <keyboard_task+0x156>
        key->actuation.status = STATUS_TAP;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _TAP_LAYER);
 8002248:	2101      	movs	r1, #1
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff f90a 	bl	8001464 <hid_press_key>
 8002250:	e010      	b.n	8002274 <keyboard_task+0x178>
      } else if (!is_before_timeout || key_triggered) {
 8002252:	78bb      	ldrb	r3, [r7, #2]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <keyboard_task+0x164>
 8002258:	4b12      	ldr	r3, [pc, #72]	@ (80022a4 <keyboard_task+0x1a8>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d009      	beq.n	8002274 <keyboard_task+0x178>
        key->actuation.status = STATUS_TRIGGERED;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _BASE_LAYER);
 8002268:	2100      	movs	r1, #0
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff f8fa 	bl	8001464 <hid_press_key>
 8002270:	e000      	b.n	8002274 <keyboard_task+0x178>
        continue;
 8002272:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002274:	7b3b      	ldrb	r3, [r7, #12]
 8002276:	3301      	adds	r3, #1
 8002278:	733b      	strb	r3, [r7, #12]
 800227a:	7b3b      	ldrb	r3, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d08c      	beq.n	800219a <keyboard_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002280:	7b7b      	ldrb	r3, [r7, #13]
 8002282:	3301      	adds	r3, #1
 8002284:	737b      	strb	r3, [r7, #13]
 8002286:	7b7b      	ldrb	r3, [r7, #13]
 8002288:	2b0f      	cmp	r3, #15
 800228a:	d983      	bls.n	8002194 <keyboard_task+0x98>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 800228c:	f000 fe94 	bl	8002fb8 <keyboard_get_time>
 8002290:	4602      	mov	r2, r0
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	4a06      	ldr	r2, [pc, #24]	@ (80022b0 <keyboard_task+0x1b4>)
 8002298:	6013      	str	r3, [r2, #0]
}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	2000075c 	.word	0x2000075c
 80022a8:	20000308 	.word	0x20000308
 80022ac:	20000000 	.word	0x20000000
 80022b0:	20000758 	.word	0x20000758

080022b4 <snaptap_task>:

void snaptap_task() {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 80022ba:	f000 fe7d 	bl	8002fb8 <keyboard_get_time>
 80022be:	6138      	str	r0, [r7, #16]
  key_triggered = 0;
 80022c0:	4b89      	ldr	r3, [pc, #548]	@ (80024e8 <snaptap_task+0x234>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80022c6:	2300      	movs	r3, #0
 80022c8:	77fb      	strb	r3, [r7, #31]
 80022ca:	e039      	b.n	8002340 <snaptap_task+0x8c>
    keyboard_select_amux(amux_channel);
 80022cc:	7ffb      	ldrb	r3, [r7, #31]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fe18 	bl	8002f04 <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80022d4:	2300      	movs	r3, #0
 80022d6:	77bb      	strb	r3, [r7, #30]
 80022d8:	e02c      	b.n	8002334 <snaptap_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 80022da:	7fb9      	ldrb	r1, [r7, #30]
 80022dc:	7ffa      	ldrb	r2, [r7, #31]
 80022de:	4883      	ldr	r0, [pc, #524]	@ (80024ec <snaptap_task+0x238>)
 80022e0:	4613      	mov	r3, r2
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 80022ee:	fb01 f202 	mul.w	r2, r1, r2
 80022f2:	4413      	add	r3, r2
 80022f4:	4403      	add	r3, r0
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d017      	beq.n	800232c <snaptap_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 80022fc:	7fbb      	ldrb	r3, [r7, #30]
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fe28 	bl	8002f54 <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 8002304:	7fb9      	ldrb	r1, [r7, #30]
 8002306:	7ffa      	ldrb	r2, [r7, #31]
 8002308:	4613      	mov	r3, r2
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	4413      	add	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 8002316:	fb01 f202 	mul.w	r2, r1, r2
 800231a:	4413      	add	r3, r2
 800231c:	4a73      	ldr	r2, [pc, #460]	@ (80024ec <snaptap_task+0x238>)
 800231e:	4413      	add	r3, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fe9b 	bl	800205c <update_key>

      keyboard_close_adc();
 8002326:	f000 fe3d 	bl	8002fa4 <keyboard_close_adc>
 800232a:	e000      	b.n	800232e <snaptap_task+0x7a>
        continue;
 800232c:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800232e:	7fbb      	ldrb	r3, [r7, #30]
 8002330:	3301      	adds	r3, #1
 8002332:	77bb      	strb	r3, [r7, #30]
 8002334:	7fbb      	ldrb	r3, [r7, #30]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0cf      	beq.n	80022da <snaptap_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800233a:	7ffb      	ldrb	r3, [r7, #31]
 800233c:	3301      	adds	r3, #1
 800233e:	77fb      	strb	r3, [r7, #31]
 8002340:	7ffb      	ldrb	r3, [r7, #31]
 8002342:	2b0f      	cmp	r3, #15
 8002344:	d9c2      	bls.n	80022cc <snaptap_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002346:	2300      	movs	r3, #0
 8002348:	777b      	strb	r3, [r7, #29]
 800234a:	e078      	b.n	800243e <snaptap_task+0x18a>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800234c:	2300      	movs	r3, #0
 800234e:	773b      	strb	r3, [r7, #28]
 8002350:	e06f      	b.n	8002432 <snaptap_task+0x17e>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 8002352:	7f39      	ldrb	r1, [r7, #28]
 8002354:	7f7a      	ldrb	r2, [r7, #29]
 8002356:	4865      	ldr	r0, [pc, #404]	@ (80024ec <snaptap_task+0x238>)
 8002358:	4613      	mov	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 8002366:	fb01 f202 	mul.w	r2, r1, r2
 800236a:	4413      	add	r3, r2
 800236c:	4403      	add	r3, r0
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d05a      	beq.n	800242a <snaptap_task+0x176>
 8002374:	7f39      	ldrb	r1, [r7, #28]
 8002376:	7f7a      	ldrb	r2, [r7, #29]
 8002378:	485c      	ldr	r0, [pc, #368]	@ (80024ec <snaptap_task+0x238>)
 800237a:	4613      	mov	r3, r2
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 8002388:	fb01 f202 	mul.w	r2, r1, r2
 800238c:	4413      	add	r3, r2
 800238e:	4403      	add	r3, r0
 8002390:	333c      	adds	r3, #60	@ 0x3c
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d148      	bne.n	800242a <snaptap_task+0x176>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8002398:	7f39      	ldrb	r1, [r7, #28]
 800239a:	7f7a      	ldrb	r2, [r7, #29]
 800239c:	4613      	mov	r3, r2
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	4413      	add	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 80023aa:	fb01 f202 	mul.w	r2, r1, r2
 80023ae:	4413      	add	r3, r2
 80023b0:	4a4e      	ldr	r2, [pc, #312]	@ (80024ec <snaptap_task+0x238>)
 80023b2:	4413      	add	r3, r2
 80023b4:	60bb      	str	r3, [r7, #8]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023c2:	429a      	cmp	r2, r3
 80023c4:	bf34      	ite	cc
 80023c6:	2301      	movcc	r3, #1
 80023c8:	2300      	movcs	r3, #0
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	71fb      	strb	r3, [r7, #7]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 80023ce:	f000 fdf3 	bl	8002fb8 <keyboard_get_time>
 80023d2:	4602      	mov	r2, r0
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f8d3 3041 	ldr.w	r3, [r3, #65]	@ 0x41
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	4a44      	ldr	r2, [pc, #272]	@ (80024f0 <snaptap_task+0x23c>)
 80023de:	88d2      	ldrh	r2, [r2, #6]
 80023e0:	4293      	cmp	r3, r2
 80023e2:	bf94      	ite	ls
 80023e4:	2301      	movls	r3, #1
 80023e6:	2300      	movhi	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	71bb      	strb	r3, [r7, #6]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00b      	beq.n	800240a <snaptap_task+0x156>
 80023f2:	79bb      	ldrb	r3, [r7, #6]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <snaptap_task+0x156>
        key->actuation.status = STATUS_TAP;
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _TAP_LAYER);
 8002400:	2101      	movs	r1, #1
 8002402:	68b8      	ldr	r0, [r7, #8]
 8002404:	f7ff f82e 	bl	8001464 <hid_press_key>
 8002408:	e010      	b.n	800242c <snaptap_task+0x178>
      } else if (!is_before_timeout || key_triggered) {
 800240a:	79bb      	ldrb	r3, [r7, #6]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <snaptap_task+0x164>
 8002410:	4b35      	ldr	r3, [pc, #212]	@ (80024e8 <snaptap_task+0x234>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d009      	beq.n	800242c <snaptap_task+0x178>
        key->actuation.status = STATUS_TRIGGERED;
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _BASE_LAYER);
 8002420:	2100      	movs	r1, #0
 8002422:	68b8      	ldr	r0, [r7, #8]
 8002424:	f7ff f81e 	bl	8001464 <hid_press_key>
 8002428:	e000      	b.n	800242c <snaptap_task+0x178>
        continue;
 800242a:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800242c:	7f3b      	ldrb	r3, [r7, #28]
 800242e:	3301      	adds	r3, #1
 8002430:	773b      	strb	r3, [r7, #28]
 8002432:	7f3b      	ldrb	r3, [r7, #28]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d08c      	beq.n	8002352 <snaptap_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002438:	7f7b      	ldrb	r3, [r7, #29]
 800243a:	3301      	adds	r3, #1
 800243c:	777b      	strb	r3, [r7, #29]
 800243e:	7f7b      	ldrb	r3, [r7, #29]
 8002440:	2b0f      	cmp	r3, #15
 8002442:	d983      	bls.n	800234c <snaptap_task+0x98>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 8002444:	f000 fdb8 	bl	8002fb8 <keyboard_get_time>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	4a29      	ldr	r2, [pc, #164]	@ (80024f4 <snaptap_task+0x240>)
 8002450:	6013      	str	r3, [r2, #0]

  // Snaptap logic - chỉ xử lý việc thả phím cũ, không nhấn phím mới
  static struct key* current_pressed_key = NULL;
  struct key* new_pressed_key = NULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
  
  // Tìm phím đang TRIGGERED
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002456:	2300      	movs	r3, #0
 8002458:	75fb      	strb	r3, [r7, #23]
 800245a:	e029      	b.n	80024b0 <snaptap_task+0x1fc>
      for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800245c:	2300      	movs	r3, #0
 800245e:	75bb      	strb	r3, [r7, #22]
 8002460:	e01d      	b.n	800249e <snaptap_task+0x1ea>
          struct key* key = &keyboard_keys[adc_channel][amux_channel];
 8002462:	7db9      	ldrb	r1, [r7, #22]
 8002464:	7dfa      	ldrb	r2, [r7, #23]
 8002466:	4613      	mov	r3, r2
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 8002474:	fb01 f202 	mul.w	r2, r1, r2
 8002478:	4413      	add	r3, r2
 800247a:	4a1c      	ldr	r2, [pc, #112]	@ (80024ec <snaptap_task+0x238>)
 800247c:	4413      	add	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
          if (key->is_enabled && key->actuation.status == STATUS_TRIGGERED) {
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <snaptap_task+0x1e4>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800248e:	2b02      	cmp	r3, #2
 8002490:	d102      	bne.n	8002498 <snaptap_task+0x1e4>
              new_pressed_key = key;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	61bb      	str	r3, [r7, #24]
              break;
 8002496:	e005      	b.n	80024a4 <snaptap_task+0x1f0>
      for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002498:	7dbb      	ldrb	r3, [r7, #22]
 800249a:	3301      	adds	r3, #1
 800249c:	75bb      	strb	r3, [r7, #22]
 800249e:	7dbb      	ldrb	r3, [r7, #22]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0de      	beq.n	8002462 <snaptap_task+0x1ae>
          }
      }
      if (new_pressed_key) break;
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d106      	bne.n	80024b8 <snaptap_task+0x204>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80024aa:	7dfb      	ldrb	r3, [r7, #23]
 80024ac:	3301      	adds	r3, #1
 80024ae:	75fb      	strb	r3, [r7, #23]
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
 80024b2:	2b0f      	cmp	r3, #15
 80024b4:	d9d2      	bls.n	800245c <snaptap_task+0x1a8>
 80024b6:	e000      	b.n	80024ba <snaptap_task+0x206>
      if (new_pressed_key) break;
 80024b8:	bf00      	nop
  }
  
  // Xử lý snaptap - chỉ thả phím cũ, không nhấn phím mới
  if (new_pressed_key != current_pressed_key) {
 80024ba:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <snaptap_task+0x244>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d00c      	beq.n	80024de <snaptap_task+0x22a>
      if (current_pressed_key) {
 80024c4:	4b0c      	ldr	r3, [pc, #48]	@ (80024f8 <snaptap_task+0x244>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <snaptap_task+0x224>
          hid_release_key(current_pressed_key, _BASE_LAYER);
 80024cc:	4b0a      	ldr	r3, [pc, #40]	@ (80024f8 <snaptap_task+0x244>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2100      	movs	r1, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f8e0 	bl	8001698 <hid_release_key>
      }
      // KHÔNG gọi hid_press_key() ở đây vì phím đã được nhấn trong update_key_actuation()
      current_pressed_key = new_pressed_key;
 80024d8:	4a07      	ldr	r2, [pc, #28]	@ (80024f8 <snaptap_task+0x244>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	6013      	str	r3, [r2, #0]
  }
}
 80024de:	bf00      	nop
 80024e0:	3720      	adds	r7, #32
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	2000075c 	.word	0x2000075c
 80024ec:	20000308 	.word	0x20000308
 80024f0:	20000000 	.word	0x20000000
 80024f4:	20000758 	.word	0x20000758
 80024f8:	20000760 	.word	0x20000760

080024fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b0b6      	sub	sp, #216	@ 0xd8
 8002500:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002502:	f001 fb79 	bl	8003bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002506:	f000 fb41 	bl	8002b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800250a:	f000 fc55 	bl	8002db8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800250e:	f000 fba5 	bl	8002c5c <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002512:	f000 fc23 	bl	8002d5c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8002516:	f000 fbf3 	bl	8002d00 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ADC_channel_Config.Rank = 1;
 800251a:	4bbd      	ldr	r3, [pc, #756]	@ (8002810 <main+0x314>)
 800251c:	2201      	movs	r2, #1
 800251e:	605a      	str	r2, [r3, #4]
  ADC_channel_Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002520:	4bbb      	ldr	r3, [pc, #748]	@ (8002810 <main+0x314>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]

  keyboard_init_keys();
 8002526:	f7ff fdb1 	bl	800208c <keyboard_init_keys>
  ssd1306_Init();
 800252a:	f000 fd89 	bl	8003040 <ssd1306_Init>
  tusb_rhport_init_t dev_init = {
 800252e:	4bb9      	ldr	r3, [pc, #740]	@ (8002814 <main+0x318>)
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	863b      	strh	r3, [r7, #48]	@ 0x30
      .role = TUSB_ROLE_DEVICE,
      .speed = TUSB_SPEED_AUTO};
  tusb_init(0, &dev_init); // initialize device stack on roothub port 0
 8002534:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002538:	4619      	mov	r1, r3
 800253a:	2000      	movs	r0, #0
 800253c:	f009 ffee 	bl	800c51c <tusb_rhport_init>
  /* USER CODE BEGIN WHILE */
  uint32_t start_at;

  while (1) {
    // MARK: Main loop
    start_at=HAL_GetTick();
 8002540:	f001 fbc0 	bl	8003cc4 <HAL_GetTick>
 8002544:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
  tud_task_ext(UINT32_MAX, false);
 8002548:	2100      	movs	r1, #0
 800254a:	f04f 30ff 	mov.w	r0, #4294967295
 800254e:	f006 fb97 	bl	8008c80 <tud_task_ext>
}
 8002552:	bf00      	nop
    tud_task();
    
    // Detect mode key by HID code
    struct key *mode_key = NULL;
 8002554:	2300      	movs	r3, #0
 8002556:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    struct key *layer_key = NULL;
 800255a:	2300      	movs	r3, #0
 800255c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    for (int adc = 0; adc < ADC_CHANNEL_COUNT; ++adc) {
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002566:	e032      	b.n	80025ce <main+0xd2>
        for (int amux = 0; amux < AMUX_CHANNEL_COUNT; ++amux) {
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800256e:	e025      	b.n	80025bc <main+0xc0>
            struct key *k = &keyboard_keys[adc][amux];
 8002570:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	4413      	add	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002582:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002586:	fb01 f202 	mul.w	r2, r1, r2
 800258a:	4413      	add	r3, r2
 800258c:	4aa2      	ldr	r2, [pc, #648]	@ (8002818 <main+0x31c>)
 800258e:	4413      	add	r3, r2
 8002590:	673b      	str	r3, [r7, #112]	@ 0x70
            if (k->layers[_BASE_LAYER].value[0] == HID_MODE_CHANGE) {
 8002592:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002594:	88db      	ldrh	r3, [r3, #6]
 8002596:	b29b      	uxth	r3, r3
 8002598:	2bf0      	cmp	r3, #240	@ 0xf0
 800259a:	d102      	bne.n	80025a2 <main+0xa6>
                mode_key = k;
 800259c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800259e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            }
            if (k->layers[_BASE_LAYER].value[0] == HID_LAYER_CHANGE) {
 80025a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025a4:	88db      	ldrh	r3, [r3, #6]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2bf1      	cmp	r3, #241	@ 0xf1
 80025aa:	d102      	bne.n	80025b2 <main+0xb6>
                layer_key = k;
 80025ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        for (int amux = 0; amux < AMUX_CHANNEL_COUNT; ++amux) {
 80025b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025b6:	3301      	adds	r3, #1
 80025b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80025bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025c0:	2b0f      	cmp	r3, #15
 80025c2:	ddd5      	ble.n	8002570 <main+0x74>
    for (int adc = 0; adc < ADC_CHANNEL_COUNT; ++adc) {
 80025c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025c8:	3301      	adds	r3, #1
 80025ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80025ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	ddc8      	ble.n	8002568 <main+0x6c>
            }
        }
    }
    uint8_t mode_key_pressed = (mode_key && mode_key->actuation.status == STATUS_TRIGGERED);
 80025d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <main+0xf2>
 80025de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d101      	bne.n	80025ee <main+0xf2>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <main+0xf4>
 80025ee:	2300      	movs	r3, #0
 80025f0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    uint8_t layer_key_pressed = (layer_key && layer_key->actuation.status == STATUS_TRIGGERED);
 80025f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <main+0x110>
 80025fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002604:	2b02      	cmp	r3, #2
 8002606:	d101      	bne.n	800260c <main+0x110>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <main+0x112>
 800260c:	2300      	movs	r3, #0
 800260e:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
    if (mode_key_pressed && !last_mode_key_pressed) {
 8002612:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002616:	2b00      	cmp	r3, #0
 8002618:	d033      	beq.n	8002682 <main+0x186>
 800261a:	4b80      	ldr	r3, [pc, #512]	@ (800281c <main+0x320>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d12f      	bne.n	8002682 <main+0x186>
        g_keyboard_mode = (g_keyboard_mode == MODE_COMBO_KEY) ? MODE_SNAP_TAP : MODE_COMBO_KEY;
 8002622:	4b7f      	ldr	r3, [pc, #508]	@ (8002820 <main+0x324>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	bf0c      	ite	eq
 800262a:	2301      	moveq	r3, #1
 800262c:	2300      	movne	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	4b7b      	ldr	r3, [pc, #492]	@ (8002820 <main+0x324>)
 8002634:	701a      	strb	r2, [r3, #0]
        if (g_keyboard_mode == MODE_COMBO_KEY) {
 8002636:	4b7a      	ldr	r3, [pc, #488]	@ (8002820 <main+0x324>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10f      	bne.n	800265e <main+0x162>
 800263e:	4b79      	ldr	r3, [pc, #484]	@ (8002824 <main+0x328>)
 8002640:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002642:	2300      	movs	r3, #0
 8002644:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8002648:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800264a:	667b      	str	r3, [r7, #100]	@ 0x64
  return tud_cdc_n_write(itf, str, strlen(str));
 800264c:	2211      	movs	r2, #17
 800264e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002652:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002654:	4618      	mov	r0, r3
 8002656:	f004 fa05 	bl	8006a64 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 800265a:	bf00      	nop
 800265c:	e00e      	b.n	800267c <main+0x180>
 800265e:	4b72      	ldr	r3, [pc, #456]	@ (8002828 <main+0x32c>)
 8002660:	663b      	str	r3, [r7, #96]	@ 0x60
 8002662:	2300      	movs	r3, #0
 8002664:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002668:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800266a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return tud_cdc_n_write(itf, str, strlen(str));
 800266c:	2210      	movs	r2, #16
 800266e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002672:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002674:	4618      	mov	r0, r3
 8002676:	f004 f9f5 	bl	8006a64 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 800267a:	bf00      	nop
  return tud_cdc_n_write_flush(0);
 800267c:	2000      	movs	r0, #0
 800267e:	f004 fa25 	bl	8006acc <tud_cdc_n_write_flush>
        } else {
            tud_cdc_write_str("Mode: SNAP_TAP\r\n");
        }
        tud_cdc_write_flush();
    }
    if (layer_key_pressed && !last_layer_key_pressed) {
 8002682:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8002686:	2b00      	cmp	r3, #0
 8002688:	d046      	beq.n	8002718 <main+0x21c>
 800268a:	4b68      	ldr	r3, [pc, #416]	@ (800282c <main+0x330>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d142      	bne.n	8002718 <main+0x21c>
        // Toggle tuần tự giữa BASE, ALT, ALT2
        if (current_layer == _BASE_LAYER) {
 8002692:	4b67      	ldr	r3, [pc, #412]	@ (8002830 <main+0x334>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d112      	bne.n	80026c0 <main+0x1c4>
            current_layer = _ALT_LAYER;
 800269a:	4b65      	ldr	r3, [pc, #404]	@ (8002830 <main+0x334>)
 800269c:	2202      	movs	r2, #2
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	4b64      	ldr	r3, [pc, #400]	@ (8002834 <main+0x338>)
 80026a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80026a4:	2300      	movs	r3, #0
 80026a6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80026aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return tud_cdc_n_write(itf, str, strlen(str));
 80026ae:	220c      	movs	r2, #12
 80026b0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80026b4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80026b6:	4618      	mov	r0, r3
 80026b8:	f004 f9d4 	bl	8006a64 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 80026bc:	bf00      	nop
 80026be:	e028      	b.n	8002712 <main+0x216>
            tud_cdc_write_str("Layer: ALT\r\n");
        } else if (current_layer == _ALT_LAYER) {
 80026c0:	4b5b      	ldr	r3, [pc, #364]	@ (8002830 <main+0x334>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d112      	bne.n	80026ee <main+0x1f2>
            current_layer = _ALT_LAYER_2;
 80026c8:	4b59      	ldr	r3, [pc, #356]	@ (8002830 <main+0x334>)
 80026ca:	2203      	movs	r2, #3
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	4b5a      	ldr	r3, [pc, #360]	@ (8002838 <main+0x33c>)
 80026d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026d2:	2300      	movs	r3, #0
 80026d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80026d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026da:	643b      	str	r3, [r7, #64]	@ 0x40
  return tud_cdc_n_write(itf, str, strlen(str));
 80026dc:	220d      	movs	r2, #13
 80026de:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80026e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80026e4:	4618      	mov	r0, r3
 80026e6:	f004 f9bd 	bl	8006a64 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 80026ea:	bf00      	nop
 80026ec:	e011      	b.n	8002712 <main+0x216>
            tud_cdc_write_str("Layer: ALT2\r\n");
        } else {
            current_layer = _BASE_LAYER;
 80026ee:	4b50      	ldr	r3, [pc, #320]	@ (8002830 <main+0x334>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	4b51      	ldr	r3, [pc, #324]	@ (800283c <main+0x340>)
 80026f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026f8:	2300      	movs	r3, #0
 80026fa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80026fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002700:	637b      	str	r3, [r7, #52]	@ 0x34
  return tud_cdc_n_write(itf, str, strlen(str));
 8002702:	220d      	movs	r2, #13
 8002704:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002708:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800270a:	4618      	mov	r0, r3
 800270c:	f004 f9aa 	bl	8006a64 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 8002710:	bf00      	nop
  return tud_cdc_n_write_flush(0);
 8002712:	2000      	movs	r0, #0
 8002714:	f004 f9da 	bl	8006acc <tud_cdc_n_write_flush>
            tud_cdc_write_str("Layer: BASE\r\n");
        }
        tud_cdc_write_flush();
    }
    last_mode_key_pressed = mode_key_pressed;
 8002718:	4a40      	ldr	r2, [pc, #256]	@ (800281c <main+0x320>)
 800271a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800271e:	7013      	strb	r3, [r2, #0]
    last_layer_key_pressed = layer_key_pressed;
 8002720:	4a42      	ldr	r2, [pc, #264]	@ (800282c <main+0x330>)
 8002722:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8002726:	7013      	strb	r3, [r2, #0]

    // Call the appropriate task based on mode
    if (g_keyboard_mode == MODE_COMBO_KEY) {
 8002728:	4b3d      	ldr	r3, [pc, #244]	@ (8002820 <main+0x324>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <main+0x23a>
        keyboard_task();
 8002730:	f7ff fce4 	bl	80020fc <keyboard_task>
 8002734:	e001      	b.n	800273a <main+0x23e>
    } else {
        snaptap_task();
 8002736:	f7ff fdbd 	bl	80022b4 <snaptap_task>
    }
    //snaptap_task();
    //keyboard_task();

    hid_task();
 800273a:	f7fe fe43 	bl	80013c4 <hid_task>
    cdc_task();
 800273e:	f7fd ff7f 	bl	8000640 <cdc_task>
    ssd1306_Fill(White);
 8002742:	2001      	movs	r0, #1
 8002744:	f000 fce6 	bl	8003114 <ssd1306_Fill>
    ssd1306_FlipScreen(1, 1);
 8002748:	2101      	movs	r1, #1
 800274a:	2001      	movs	r0, #1
 800274c:	f000 ff72 	bl	8003634 <ssd1306_FlipScreen>

    ssd1306_DrawRectangle(0, 0, SSD1306_WIDTH - 1, SSD1306_HEIGHT - 1, Black);
 8002750:	2300      	movs	r3, #0
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	233f      	movs	r3, #63	@ 0x3f
 8002756:	227f      	movs	r2, #127	@ 0x7f
 8002758:	2100      	movs	r1, #0
 800275a:	2000      	movs	r0, #0
 800275c:	f000 ff02 	bl	8003564 <ssd1306_DrawRectangle>
    ssd1306_Line(MOD_WIDTH, DIVIDER, SSD1306_WIDTH - 1, DIVIDER, Black);
 8002760:	2300      	movs	r3, #0
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2320      	movs	r3, #32
 8002766:	227f      	movs	r2, #127	@ 0x7f
 8002768:	2120      	movs	r1, #32
 800276a:	2026      	movs	r0, #38	@ 0x26
 800276c:	f000 fe8e 	bl	800348c <ssd1306_Line>
    ssd1306_Line(MOD_WIDTH, 0, MOD_WIDTH, SSD1306_HEIGHT - 1, Black);
 8002770:	2300      	movs	r3, #0
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	233f      	movs	r3, #63	@ 0x3f
 8002776:	2226      	movs	r2, #38	@ 0x26
 8002778:	2100      	movs	r1, #0
 800277a:	2026      	movs	r0, #38	@ 0x26
 800277c:	f000 fe86 	bl	800348c <ssd1306_Line>
    for (int i = 1; i < 3; i++) {
 8002780:	2301      	movs	r3, #1
 8002782:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002786:	e016      	b.n	80027b6 <main+0x2ba>
      int x = MOD_WIDTH + i * KEY_WIDTH;
 8002788:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800278c:	4613      	mov	r3, r2
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	3326      	adds	r3, #38	@ 0x26
 8002796:	677b      	str	r3, [r7, #116]	@ 0x74
      ssd1306_Line(x, 0, x, SSD1306_HEIGHT - 1, Black);
 8002798:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800279a:	b2d8      	uxtb	r0, r3
 800279c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	2300      	movs	r3, #0
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	233f      	movs	r3, #63	@ 0x3f
 80027a6:	2100      	movs	r1, #0
 80027a8:	f000 fe70 	bl	800348c <ssd1306_Line>
    for (int i = 1; i < 3; i++) {
 80027ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80027b0:	3301      	adds	r3, #1
 80027b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80027b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	dde4      	ble.n	8002788 <main+0x28c>
    }

    int mod_y = 2;
 80027be:	2302      	movs	r3, #2
 80027c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    const int mod_line_height = 10;
 80027c4:	230a      	movs	r3, #10
 80027c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

    int label_row_bot = SSD1306_HEIGHT - DIVIDER + 2;
 80027ca:	2322      	movs	r3, #34	@ 0x22
 80027cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    int percent_row_bot = SSD1306_HEIGHT - 8 - 2;
 80027d0:	2336      	movs	r3, #54	@ 0x36
 80027d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    int label_row_top = 2;
 80027d6:	2302      	movs	r3, #2
 80027d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    int percent_row_top = label_row_bot - 11;
 80027dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027e0:	3b0b      	subs	r3, #11
 80027e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

    char keycodes[6][4] = {0};
 80027e6:	f107 0318 	add.w	r3, r7, #24
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	60da      	str	r2, [r3, #12]
 80027f4:	611a      	str	r2, [r3, #16]
 80027f6:	615a      	str	r2, [r3, #20]
    uint8_t key_percents[6] = {0};
 80027f8:	f107 0310 	add.w	r3, r7, #16
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	809a      	strh	r2, [r3, #4]
    int tracker = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

        for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 8002808:	2300      	movs	r3, #0
 800280a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800280e:	e0eb      	b.n	80029e8 <main+0x4ec>
 8002810:	20000ce4 	.word	0x20000ce4
 8002814:	0800e648 	.word	0x0800e648
 8002818:	20000308 	.word	0x20000308
 800281c:	20000cf5 	.word	0x20000cf5
 8002820:	20000cf4 	.word	0x20000cf4
 8002824:	0800e5a8 	.word	0x0800e5a8
 8002828:	0800e5bc 	.word	0x0800e5bc
 800282c:	20000cf6 	.word	0x20000cf6
 8002830:	20000cf8 	.word	0x20000cf8
 8002834:	0800e5d0 	.word	0x0800e5d0
 8002838:	0800e5e0 	.word	0x0800e5e0
 800283c:	0800e5f0 	.word	0x0800e5f0
            struct key* k = &keyboard_keys[0][amux];
 8002840:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002844:	4613      	mov	r3, r2
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	4ac3      	ldr	r2, [pc, #780]	@ (8002b5c <main+0x660>)
 8002850:	4413      	add	r3, r2
 8002852:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if (k->state.distance_8bits >= 15 && k->layers[_BASE_LAYER].type == KEY_TYPE_MODIFIER) {
 8002854:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002856:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800285a:	2b0e      	cmp	r3, #14
 800285c:	d967      	bls.n	800292e <main+0x432>
 800285e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002860:	795b      	ldrb	r3, [r3, #5]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d163      	bne.n	800292e <main+0x432>
            	uint16_t bitmask = *(uint16_t *)k->layers[_BASE_LAYER].value;
 8002866:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002868:	799a      	ldrb	r2, [r3, #6]
 800286a:	79db      	ldrb	r3, [r3, #7]
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	4313      	orrs	r3, r2
 8002870:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
                const char* label = NULL;
 8002874:	2300      	movs	r3, #0
 8002876:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

                if (bitmask == 0b00000001) label = "LCtrl";
 800287a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800287e:	2b01      	cmp	r3, #1
 8002880:	d103      	bne.n	800288a <main+0x38e>
 8002882:	4bb7      	ldr	r3, [pc, #732]	@ (8002b60 <main+0x664>)
 8002884:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002888:	e036      	b.n	80028f8 <main+0x3fc>
                else if (bitmask == 0b00000010) label = "LShift";
 800288a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800288e:	2b02      	cmp	r3, #2
 8002890:	d103      	bne.n	800289a <main+0x39e>
 8002892:	4bb4      	ldr	r3, [pc, #720]	@ (8002b64 <main+0x668>)
 8002894:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002898:	e02e      	b.n	80028f8 <main+0x3fc>
                else if (bitmask == 0b00000100) label = "LAlt";
 800289a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d103      	bne.n	80028aa <main+0x3ae>
 80028a2:	4bb1      	ldr	r3, [pc, #708]	@ (8002b68 <main+0x66c>)
 80028a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80028a8:	e026      	b.n	80028f8 <main+0x3fc>
                else if (bitmask == 0b00001000) label = "LGUI";
 80028aa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d103      	bne.n	80028ba <main+0x3be>
 80028b2:	4bae      	ldr	r3, [pc, #696]	@ (8002b6c <main+0x670>)
 80028b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80028b8:	e01e      	b.n	80028f8 <main+0x3fc>
                else if (bitmask == 0b00010000) label = "RCtrl";
 80028ba:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80028be:	2b10      	cmp	r3, #16
 80028c0:	d103      	bne.n	80028ca <main+0x3ce>
 80028c2:	4bab      	ldr	r3, [pc, #684]	@ (8002b70 <main+0x674>)
 80028c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80028c8:	e016      	b.n	80028f8 <main+0x3fc>
                else if (bitmask == 0b00100000) label = "RShift";
 80028ca:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80028ce:	2b20      	cmp	r3, #32
 80028d0:	d103      	bne.n	80028da <main+0x3de>
 80028d2:	4ba8      	ldr	r3, [pc, #672]	@ (8002b74 <main+0x678>)
 80028d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80028d8:	e00e      	b.n	80028f8 <main+0x3fc>
                else if (bitmask == 0b01000000) label = "RAlt";
 80028da:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80028de:	2b40      	cmp	r3, #64	@ 0x40
 80028e0:	d103      	bne.n	80028ea <main+0x3ee>
 80028e2:	4ba5      	ldr	r3, [pc, #660]	@ (8002b78 <main+0x67c>)
 80028e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80028e8:	e006      	b.n	80028f8 <main+0x3fc>
                else if (bitmask == 0b10000000) label = "RGUI";
 80028ea:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80028ee:	2b80      	cmp	r3, #128	@ 0x80
 80028f0:	d102      	bne.n	80028f8 <main+0x3fc>
 80028f2:	4ba2      	ldr	r3, [pc, #648]	@ (8002b7c <main+0x680>)
 80028f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

                if (label) {
 80028f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d06d      	beq.n	80029dc <main+0x4e0>
                    ssd1306_SetCursor(2, mod_y);
 8002900:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002904:	b2db      	uxtb	r3, r3
 8002906:	4619      	mov	r1, r3
 8002908:	2002      	movs	r0, #2
 800290a:	f000 fda7 	bl	800345c <ssd1306_SetCursor>
                    ssd1306_WriteString(label, Font_6x8, Black);
 800290e:	4b9c      	ldr	r3, [pc, #624]	@ (8002b80 <main+0x684>)
 8002910:	2200      	movs	r2, #0
 8002912:	9200      	str	r2, [sp, #0]
 8002914:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002916:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800291a:	f000 fd79 	bl	8003410 <ssd1306_WriteString>
                    mod_y += mod_line_height;
 800291e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002922:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002926:	4413      	add	r3, r2
 8002928:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            if (k->state.distance_8bits >= 15 && k->layers[_BASE_LAYER].type == KEY_TYPE_MODIFIER) {
 800292c:	e056      	b.n	80029dc <main+0x4e0>
                }
            }

            else if (k->state.distance_8bits >= 15 && tracker < 6 && k->layers[_BASE_LAYER].type == KEY_TYPE_NORMAL) {
 800292e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002930:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002934:	2b0e      	cmp	r3, #14
 8002936:	d952      	bls.n	80029de <main+0x4e2>
 8002938:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800293c:	2b05      	cmp	r3, #5
 800293e:	dc4e      	bgt.n	80029de <main+0x4e2>
 8002940:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002942:	795b      	ldrb	r3, [r3, #5]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d14a      	bne.n	80029de <main+0x4e2>
            	keycodes[tracker][0] = '0';
 8002948:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	33d0      	adds	r3, #208	@ 0xd0
 8002950:	443b      	add	r3, r7
 8002952:	2230      	movs	r2, #48	@ 0x30
 8002954:	f803 2cb8 	strb.w	r2, [r3, #-184]
                keycodes[tracker][1] = 'x';
 8002958:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	33d0      	adds	r3, #208	@ 0xd0
 8002960:	443b      	add	r3, r7
 8002962:	2278      	movs	r2, #120	@ 0x78
 8002964:	f803 2cb7 	strb.w	r2, [r3, #-183]
               	keycodes[tracker][2] = (amux < 10) ? ('0' + amux) : ('A' + (amux - 10));
 8002968:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800296c:	2b09      	cmp	r3, #9
 800296e:	dc05      	bgt.n	800297c <main+0x480>
 8002970:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	3330      	adds	r3, #48	@ 0x30
 8002978:	b2da      	uxtb	r2, r3
 800297a:	e004      	b.n	8002986 <main+0x48a>
 800297c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	3337      	adds	r3, #55	@ 0x37
 8002984:	b2da      	uxtb	r2, r3
 8002986:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	33d0      	adds	r3, #208	@ 0xd0
 800298e:	443b      	add	r3, r7
 8002990:	f803 2cb6 	strb.w	r2, [r3, #-182]
                keycodes[tracker][3] = '\0';
 8002994:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	33d0      	adds	r3, #208	@ 0xd0
 800299c:	443b      	add	r3, r7
 800299e:	2200      	movs	r2, #0
 80029a0:	f803 2cb5 	strb.w	r2, [r3, #-181]

                key_percents[tracker] = (k->state.distance_8bits * 100) / 255;
 80029a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029a6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80029aa:	461a      	mov	r2, r3
 80029ac:	2364      	movs	r3, #100	@ 0x64
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	4a74      	ldr	r2, [pc, #464]	@ (8002b84 <main+0x688>)
 80029b4:	fb82 1203 	smull	r1, r2, r2, r3
 80029b8:	441a      	add	r2, r3
 80029ba:	11d2      	asrs	r2, r2, #7
 80029bc:	17db      	asrs	r3, r3, #31
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	b2d9      	uxtb	r1, r3
 80029c2:	f107 0210 	add.w	r2, r7, #16
 80029c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029ca:	4413      	add	r3, r2
 80029cc:	460a      	mov	r2, r1
 80029ce:	701a      	strb	r2, [r3, #0]
                tracker++;
 80029d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029d4:	3301      	adds	r3, #1
 80029d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029da:	e000      	b.n	80029de <main+0x4e2>
            if (k->state.distance_8bits >= 15 && k->layers[_BASE_LAYER].type == KEY_TYPE_MODIFIER) {
 80029dc:	bf00      	nop
        for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 80029de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029e2:	3301      	adds	r3, #1
 80029e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029ec:	2b0f      	cmp	r3, #15
 80029ee:	f77f af27 	ble.w	8002840 <main+0x344>
            }
        }

    for (int i = 1; i <= 3; i++) {
 80029f2:	2301      	movs	r3, #1
 80029f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80029f8:	e04f      	b.n	8002a9a <main+0x59e>
      if (keycodes[i - 1][0] != '\0') {
 80029fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029fe:	3b01      	subs	r3, #1
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	33d0      	adds	r3, #208	@ 0xd0
 8002a04:	443b      	add	r3, r7
 8002a06:	f813 3cb8 	ldrb.w	r3, [r3, #-184]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d040      	beq.n	8002a90 <main+0x594>
        int x = MOD_WIDTH + (i - 1) * KEY_WIDTH + 4;
 8002a0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a12:	1e5a      	subs	r2, r3, #1
 8002a14:	4613      	mov	r3, r2
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	1a9b      	subs	r3, r3, r2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	332a      	adds	r3, #42	@ 0x2a
 8002a1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        ssd1306_SetCursor(x, label_row_top);
 8002a22:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	4611      	mov	r1, r2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 fd13 	bl	800345c <ssd1306_SetCursor>
        ssd1306_WriteString((char *)keycodes[i - 1], Font_6x8, Black);
 8002a36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	f107 0218 	add.w	r2, r7, #24
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	18d0      	adds	r0, r2, r3
 8002a44:	4b4e      	ldr	r3, [pc, #312]	@ (8002b80 <main+0x684>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	9200      	str	r2, [sp, #0]
 8002a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a4c:	f000 fce0 	bl	8003410 <ssd1306_WriteString>

        char buf[6];
        sprintf(buf, "%d%%", key_percents[i - 1]);
 8002a50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a54:	3b01      	subs	r3, #1
 8002a56:	33d0      	adds	r3, #208	@ 0xd0
 8002a58:	443b      	add	r3, r7
 8002a5a:	f813 3cc0 	ldrb.w	r3, [r3, #-192]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f107 0308 	add.w	r3, r7, #8
 8002a64:	4948      	ldr	r1, [pc, #288]	@ (8002b88 <main+0x68c>)
 8002a66:	4618      	mov	r0, r3
 8002a68:	f00a f880 	bl	800cb6c <siprintf>
        ssd1306_SetCursor(x, percent_row_top);
 8002a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	4611      	mov	r1, r2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fcee 	bl	800345c <ssd1306_SetCursor>
        ssd1306_WriteString(buf, Font_6x8, Black);
 8002a80:	4b3f      	ldr	r3, [pc, #252]	@ (8002b80 <main+0x684>)
 8002a82:	f107 0008 	add.w	r0, r7, #8
 8002a86:	2200      	movs	r2, #0
 8002a88:	9200      	str	r2, [sp, #0]
 8002a8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a8c:	f000 fcc0 	bl	8003410 <ssd1306_WriteString>
    for (int i = 1; i <= 3; i++) {
 8002a90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a94:	3301      	adds	r3, #1
 8002a96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	ddab      	ble.n	80029fa <main+0x4fe>
      }
    }

    for (int i = 4; i <= 6; i++) {
 8002aa2:	2304      	movs	r3, #4
 8002aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002aa8:	e04d      	b.n	8002b46 <main+0x64a>
      if (keycodes[i - 1][0] != '\0') {
 8002aaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	33d0      	adds	r3, #208	@ 0xd0
 8002ab4:	443b      	add	r3, r7
 8002ab6:	f813 3cb8 	ldrb.w	r3, [r3, #-184]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d03e      	beq.n	8002b3c <main+0x640>
        int x = MOD_WIDTH + (i - 4) * KEY_WIDTH + 4;
 8002abe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ac2:	1f1a      	subs	r2, r3, #4
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	332a      	adds	r3, #42	@ 0x2a
 8002ace:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        ssd1306_SetCursor(x, label_row_bot);
 8002ad2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fcbb 	bl	800345c <ssd1306_SetCursor>
        ssd1306_WriteString((char *)keycodes[i - 1], Font_6x8, Black);
 8002ae6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002aea:	3b01      	subs	r3, #1
 8002aec:	f107 0218 	add.w	r2, r7, #24
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	18d0      	adds	r0, r2, r3
 8002af4:	4b22      	ldr	r3, [pc, #136]	@ (8002b80 <main+0x684>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	9200      	str	r2, [sp, #0]
 8002afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002afc:	f000 fc88 	bl	8003410 <ssd1306_WriteString>

        char buf[6];
        sprintf(buf, "%d%%", key_percents[i - 1]);
 8002b00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b04:	3b01      	subs	r3, #1
 8002b06:	33d0      	adds	r3, #208	@ 0xd0
 8002b08:	443b      	add	r3, r7
 8002b0a:	f813 3cc0 	ldrb.w	r3, [r3, #-192]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	463b      	mov	r3, r7
 8002b12:	491d      	ldr	r1, [pc, #116]	@ (8002b88 <main+0x68c>)
 8002b14:	4618      	mov	r0, r3
 8002b16:	f00a f829 	bl	800cb6c <siprintf>
        ssd1306_SetCursor(x, percent_row_bot);
 8002b1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fc97 	bl	800345c <ssd1306_SetCursor>
        ssd1306_WriteString(buf, Font_6x8, Black);
 8002b2e:	4b14      	ldr	r3, [pc, #80]	@ (8002b80 <main+0x684>)
 8002b30:	4638      	mov	r0, r7
 8002b32:	2200      	movs	r2, #0
 8002b34:	9200      	str	r2, [sp, #0]
 8002b36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b38:	f000 fc6a 	bl	8003410 <ssd1306_WriteString>
    for (int i = 4; i <= 6; i++) {
 8002b3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b40:	3301      	adds	r3, #1
 8002b42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002b46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	ddad      	ble.n	8002aaa <main+0x5ae>
      }
    }

    ssd1306_UpdateScreen();
 8002b4e:	f000 faf9 	bl	8003144 <ssd1306_UpdateScreen>
    cdc_performance_measure(start_at);
 8002b52:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002b56:	f7fd fd41 	bl	80005dc <cdc_performance_measure>
  while (1) {
 8002b5a:	e4f1      	b.n	8002540 <main+0x44>
 8002b5c:	20000308 	.word	0x20000308
 8002b60:	0800e600 	.word	0x0800e600
 8002b64:	0800e608 	.word	0x0800e608
 8002b68:	0800e610 	.word	0x0800e610
 8002b6c:	0800e618 	.word	0x0800e618
 8002b70:	0800e620 	.word	0x0800e620
 8002b74:	0800e628 	.word	0x0800e628
 8002b78:	0800e630 	.word	0x0800e630
 8002b7c:	0800e638 	.word	0x0800e638
 8002b80:	0800eea8 	.word	0x0800eea8
 8002b84:	80808081 	.word	0x80808081
 8002b88:	0800e640 	.word	0x0800e640

08002b8c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b094      	sub	sp, #80	@ 0x50
 8002b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b92:	f107 0320 	add.w	r3, r7, #32
 8002b96:	2230      	movs	r2, #48	@ 0x30
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f00a f84b 	bl	800cc36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	4b27      	ldr	r3, [pc, #156]	@ (8002c54 <SystemClock_Config+0xc8>)
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb8:	4a26      	ldr	r2, [pc, #152]	@ (8002c54 <SystemClock_Config+0xc8>)
 8002bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bc0:	4b24      	ldr	r3, [pc, #144]	@ (8002c54 <SystemClock_Config+0xc8>)
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bcc:	2300      	movs	r3, #0
 8002bce:	607b      	str	r3, [r7, #4]
 8002bd0:	4b21      	ldr	r3, [pc, #132]	@ (8002c58 <SystemClock_Config+0xcc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a20      	ldr	r2, [pc, #128]	@ (8002c58 <SystemClock_Config+0xcc>)
 8002bd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8002c58 <SystemClock_Config+0xcc>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002be4:	607b      	str	r3, [r7, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002be8:	2301      	movs	r3, #1
 8002bea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bf6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8002bfc:	230d      	movs	r3, #13
 8002bfe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002c00:	23a8      	movs	r3, #168	@ 0xa8
 8002c02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002c04:	2304      	movs	r3, #4
 8002c06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c08:	2307      	movs	r3, #7
 8002c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002c0c:	f107 0320 	add.w	r3, r7, #32
 8002c10:	4618      	mov	r0, r3
 8002c12:	f002 fef3 	bl	80059fc <HAL_RCC_OscConfig>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <SystemClock_Config+0x94>
    Error_Handler();
 8002c1c:	f000 f9d3 	bl	8002fc6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c20:	230f      	movs	r3, #15
 8002c22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c24:	2302      	movs	r3, #2
 8002c26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002c36:	f107 030c 	add.w	r3, r7, #12
 8002c3a:	2102      	movs	r1, #2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f003 f955 	bl	8005eec <HAL_RCC_ClockConfig>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <SystemClock_Config+0xc0>
    Error_Handler();
 8002c48:	f000 f9bd 	bl	8002fc6 <Error_Handler>
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	3750      	adds	r7, #80	@ 0x50
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40007000 	.word	0x40007000

08002c5c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c62:	463b      	mov	r3, r7
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8002c6e:	4b21      	ldr	r3, [pc, #132]	@ (8002cf4 <MX_ADC1_Init+0x98>)
 8002c70:	4a21      	ldr	r2, [pc, #132]	@ (8002cf8 <MX_ADC1_Init+0x9c>)
 8002c72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c74:	4b1f      	ldr	r3, [pc, #124]	@ (8002cf4 <MX_ADC1_Init+0x98>)
 8002c76:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002c7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf4 <MX_ADC1_Init+0x98>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002c82:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf4 <MX_ADC1_Init+0x98>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c88:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf4 <MX_ADC1_Init+0x98>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c8e:	4b19      	ldr	r3, [pc, #100]	@ (8002cf4 <MX_ADC1_Init+0x98>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c96:	4b17      	ldr	r3, [pc, #92]	@ (8002cf4 <MX_ADC1_Init+0x98>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c9c:	4b15      	ldr	r3, [pc, #84]	@ (8002cf4 <MX_ADC1_Init+0x98>)
 8002c9e:	4a17      	ldr	r2, [pc, #92]	@ (8002cfc <MX_ADC1_Init+0xa0>)
 8002ca0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ca2:	4b14      	ldr	r3, [pc, #80]	@ (8002cf4 <MX_ADC1_Init+0x98>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002ca8:	4b12      	ldr	r3, [pc, #72]	@ (8002cf4 <MX_ADC1_Init+0x98>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002cae:	4b11      	ldr	r3, [pc, #68]	@ (8002cf4 <MX_ADC1_Init+0x98>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf4 <MX_ADC1_Init+0x98>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002cbc:	480d      	ldr	r0, [pc, #52]	@ (8002cf4 <MX_ADC1_Init+0x98>)
 8002cbe:	f001 f831 	bl	8003d24 <HAL_ADC_Init>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <MX_ADC1_Init+0x70>
    Error_Handler();
 8002cc8:	f000 f97d 	bl	8002fc6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 8002ccc:	2309      	movs	r3, #9
 8002cce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002cd8:	463b      	mov	r3, r7
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4805      	ldr	r0, [pc, #20]	@ (8002cf4 <MX_ADC1_Init+0x98>)
 8002cde:	f001 f9e5 	bl	80040ac <HAL_ADC_ConfigChannel>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <MX_ADC1_Init+0x90>
    Error_Handler();
 8002ce8:	f000 f96d 	bl	8002fc6 <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */

  // memcpy(&ADC_channel_Config, &sConfig, sizeof(ADC_ChannelConfTypeDef));

  /* USER CODE END ADC1_Init 2 */
}
 8002cec:	bf00      	nop
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20000764 	.word	0x20000764
 8002cf8:	40012000 	.word	0x40012000
 8002cfc:	0f000001 	.word	0x0f000001

08002d00 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d04:	4b12      	ldr	r3, [pc, #72]	@ (8002d50 <MX_I2C1_Init+0x50>)
 8002d06:	4a13      	ldr	r2, [pc, #76]	@ (8002d54 <MX_I2C1_Init+0x54>)
 8002d08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002d0a:	4b11      	ldr	r3, [pc, #68]	@ (8002d50 <MX_I2C1_Init+0x50>)
 8002d0c:	4a12      	ldr	r2, [pc, #72]	@ (8002d58 <MX_I2C1_Init+0x58>)
 8002d0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d10:	4b0f      	ldr	r3, [pc, #60]	@ (8002d50 <MX_I2C1_Init+0x50>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d16:	4b0e      	ldr	r3, [pc, #56]	@ (8002d50 <MX_I2C1_Init+0x50>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d50 <MX_I2C1_Init+0x50>)
 8002d1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d24:	4b0a      	ldr	r3, [pc, #40]	@ (8002d50 <MX_I2C1_Init+0x50>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d2a:	4b09      	ldr	r3, [pc, #36]	@ (8002d50 <MX_I2C1_Init+0x50>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d30:	4b07      	ldr	r3, [pc, #28]	@ (8002d50 <MX_I2C1_Init+0x50>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d36:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <MX_I2C1_Init+0x50>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002d3c:	4804      	ldr	r0, [pc, #16]	@ (8002d50 <MX_I2C1_Init+0x50>)
 8002d3e:	f002 f8a1 	bl	8004e84 <HAL_I2C_Init>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_I2C1_Init+0x4c>
    Error_Handler();
 8002d48:	f000 f93d 	bl	8002fc6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8002d4c:	bf00      	nop
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	200007ac 	.word	0x200007ac
 8002d54:	40005400 	.word	0x40005400
 8002d58:	00061a80 	.word	0x00061a80

08002d5c <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002d60:	4b14      	ldr	r3, [pc, #80]	@ (8002db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d62:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002d66:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002d68:	4b12      	ldr	r3, [pc, #72]	@ (8002db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002d6e:	4b11      	ldr	r3, [pc, #68]	@ (8002db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d70:	2202      	movs	r2, #2
 8002d72:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002d74:	4b0f      	ldr	r3, [pc, #60]	@ (8002db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002d80:	4b0c      	ldr	r3, [pc, #48]	@ (8002db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002d86:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002d8c:	4b09      	ldr	r3, [pc, #36]	@ (8002db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002d92:	4b08      	ldr	r3, [pc, #32]	@ (8002db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002d98:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8002d9e:	4805      	ldr	r0, [pc, #20]	@ (8002db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002da0:	f002 fd1d 	bl	80057de <HAL_PCD_Init>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_USB_OTG_FS_PCD_Init+0x52>
    Error_Handler();
 8002daa:	f000 f90c 	bl	8002fc6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000800 	.word	0x20000800

08002db8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dbe:	f107 030c 	add.w	r3, r7, #12
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	605a      	str	r2, [r3, #4]
 8002dc8:	609a      	str	r2, [r3, #8]
 8002dca:	60da      	str	r2, [r3, #12]
 8002dcc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	4b20      	ldr	r3, [pc, #128]	@ (8002e54 <MX_GPIO_Init+0x9c>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd6:	4a1f      	ldr	r2, [pc, #124]	@ (8002e54 <MX_GPIO_Init+0x9c>)
 8002dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dde:	4b1d      	ldr	r3, [pc, #116]	@ (8002e54 <MX_GPIO_Init+0x9c>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	607b      	str	r3, [r7, #4]
 8002dee:	4b19      	ldr	r3, [pc, #100]	@ (8002e54 <MX_GPIO_Init+0x9c>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df2:	4a18      	ldr	r2, [pc, #96]	@ (8002e54 <MX_GPIO_Init+0x9c>)
 8002df4:	f043 0302 	orr.w	r3, r3, #2
 8002df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dfa:	4b16      	ldr	r3, [pc, #88]	@ (8002e54 <MX_GPIO_Init+0x9c>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	607b      	str	r3, [r7, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	603b      	str	r3, [r7, #0]
 8002e0a:	4b12      	ldr	r3, [pc, #72]	@ (8002e54 <MX_GPIO_Init+0x9c>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	4a11      	ldr	r2, [pc, #68]	@ (8002e54 <MX_GPIO_Init+0x9c>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e16:	4b0f      	ldr	r3, [pc, #60]	@ (8002e54 <MX_GPIO_Init+0x9c>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8002e22:	2200      	movs	r2, #0
 8002e24:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002e28:	480b      	ldr	r0, [pc, #44]	@ (8002e58 <MX_GPIO_Init+0xa0>)
 8002e2a:	f002 f811 	bl	8004e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8002e2e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002e32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e34:	2301      	movs	r3, #1
 8002e36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e40:	f107 030c 	add.w	r3, r7, #12
 8002e44:	4619      	mov	r1, r3
 8002e46:	4804      	ldr	r0, [pc, #16]	@ (8002e58 <MX_GPIO_Init+0xa0>)
 8002e48:	f001 fe7e 	bl	8004b48 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002e4c:	bf00      	nop
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40020400 	.word	0x40020400

08002e5c <keyboard_read_config>:

/* USER CODE BEGIN 4 */

// MARK: keyboard_* functions

void keyboard_read_config() {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  memcpy(&keyboard_user_config, (uint32_t *)CONFIG_ADDRESS, sizeof(keyboard_user_config));
 8002e60:	4a05      	ldr	r2, [pc, #20]	@ (8002e78 <keyboard_read_config+0x1c>)
 8002e62:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <keyboard_read_config+0x20>)
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f009 ffba 	bl	800cde6 <memcpy>
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000000 	.word	0x20000000
 8002e7c:	08040000 	.word	0x08040000

08002e80 <keyboard_write_config>:

uint8_t keyboard_write_config(uint8_t *buffer, uint16_t offset, uint16_t size) {
 8002e80:	b5b0      	push	{r4, r5, r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	807b      	strh	r3, [r7, #2]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	803b      	strh	r3, [r7, #0]
  if (offset >= sizeof(keyboard_user_config)) {
 8002e90:	887b      	ldrh	r3, [r7, #2]
 8002e92:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 8002e96:	d301      	bcc.n	8002e9c <keyboard_write_config+0x1c>
    return 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e02d      	b.n	8002ef8 <keyboard_write_config+0x78>
  }

  HAL_FLASH_Unlock();
 8002e9c:	f001 fc9a 	bl	80047d4 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 8002ea0:	4b17      	ldr	r3, [pc, #92]	@ (8002f00 <keyboard_write_config+0x80>)
 8002ea2:	22b3      	movs	r2, #179	@ 0xb3
 8002ea4:	60da      	str	r2, [r3, #12]
  FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 8002ea6:	2102      	movs	r1, #2
 8002ea8:	2006      	movs	r0, #6
 8002eaa:	f001 fe05 	bl	8004ab8 <FLASH_Erase_Sector>
  for (uint16_t i = offset; i < size; i++) {
 8002eae:	887b      	ldrh	r3, [r7, #2]
 8002eb0:	81fb      	strh	r3, [r7, #14]
 8002eb2:	e01a      	b.n	8002eea <keyboard_write_config+0x6a>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, CONFIG_ADDRESS + i, buffer[i]) != HAL_OK) {
 8002eb4:	89fb      	ldrh	r3, [r7, #14]
 8002eb6:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8002eba:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	89fb      	ldrh	r3, [r7, #14]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2200      	movs	r2, #0
 8002ecc:	461c      	mov	r4, r3
 8002ece:	4615      	mov	r5, r2
 8002ed0:	4622      	mov	r2, r4
 8002ed2:	462b      	mov	r3, r5
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f001 fc29 	bl	800472c <HAL_FLASH_Program>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <keyboard_write_config+0x64>
      HAL_FLASH_Lock();
 8002ee0:	f001 fc9a 	bl	8004818 <HAL_FLASH_Lock>
  for (uint16_t i = offset; i < size; i++) {
 8002ee4:	89fb      	ldrh	r3, [r7, #14]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	81fb      	strh	r3, [r7, #14]
 8002eea:	89fa      	ldrh	r2, [r7, #14]
 8002eec:	883b      	ldrh	r3, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d3e0      	bcc.n	8002eb4 <keyboard_write_config+0x34>
    };
  }
  HAL_FLASH_Lock();
 8002ef2:	f001 fc91 	bl	8004818 <HAL_FLASH_Lock>
  return 1;
 8002ef6:	2301      	movs	r3, #1
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bdb0      	pop	{r4, r5, r7, pc}
 8002f00:	40023c00 	.word	0x40023c00

08002f04 <keyboard_select_amux>:

void keyboard_select_amux(uint8_t amux_channel) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	71fb      	strb	r3, [r7, #7]
  // TODO: set GPIOs at the same time using bitmap on register
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8002f0e:	2300      	movs	r3, #0
 8002f10:	73fb      	strb	r3, [r7, #15]
 8002f12:	e013      	b.n	8002f3c <keyboard_select_amux+0x38>
    HAL_GPIO_WritePin(GPIOB, amux_select_pins[i], (amux_channel >> i) & 1);
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	4a0d      	ldr	r2, [pc, #52]	@ (8002f4c <keyboard_select_amux+0x48>)
 8002f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1c:	b299      	uxth	r1, r3
 8002f1e:	79fa      	ldrb	r2, [r7, #7]
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	fa42 f303 	asr.w	r3, r2, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	4807      	ldr	r0, [pc, #28]	@ (8002f50 <keyboard_select_amux+0x4c>)
 8002f32:	f001 ff8d 	bl	8004e50 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d9e8      	bls.n	8002f14 <keyboard_select_amux+0x10>
  }
}
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	0800e8a8 	.word	0x0800e8a8
 8002f50:	40020400 	.word	0x40020400

08002f54 <keyboard_select_adc>:

void keyboard_select_adc(uint8_t adc_channel) {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	71fb      	strb	r3, [r7, #7]
  ADC_channel_Config.Channel = adc_channels[adc_channel];
 8002f5e:	2209      	movs	r2, #9
 8002f60:	4b08      	ldr	r3, [pc, #32]	@ (8002f84 <keyboard_select_adc+0x30>)
 8002f62:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &ADC_channel_Config);
 8002f64:	4907      	ldr	r1, [pc, #28]	@ (8002f84 <keyboard_select_adc+0x30>)
 8002f66:	4808      	ldr	r0, [pc, #32]	@ (8002f88 <keyboard_select_adc+0x34>)
 8002f68:	f001 f8a0 	bl	80040ac <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 8002f6c:	4806      	ldr	r0, [pc, #24]	@ (8002f88 <keyboard_select_adc+0x34>)
 8002f6e:	f000 ff1d 	bl	8003dac <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 8002f72:	2101      	movs	r1, #1
 8002f74:	4804      	ldr	r0, [pc, #16]	@ (8002f88 <keyboard_select_adc+0x34>)
 8002f76:	f001 f800 	bl	8003f7a <HAL_ADC_PollForConversion>
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000ce4 	.word	0x20000ce4
 8002f88:	20000764 	.word	0x20000764

08002f8c <keyboard_read_adc>:

uint16_t keyboard_read_adc() {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 8002f90:	4803      	ldr	r0, [pc, #12]	@ (8002fa0 <keyboard_read_adc+0x14>)
 8002f92:	f001 f87d 	bl	8004090 <HAL_ADC_GetValue>
 8002f96:	4603      	mov	r3, r0
 8002f98:	b29b      	uxth	r3, r3
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000764 	.word	0x20000764

08002fa4 <keyboard_close_adc>:

void keyboard_close_adc() {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  HAL_ADC_Stop(&hadc1);
 8002fa8:	4802      	ldr	r0, [pc, #8]	@ (8002fb4 <keyboard_close_adc+0x10>)
 8002faa:	f000 ffb3 	bl	8003f14 <HAL_ADC_Stop>
}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000764 	.word	0x20000764

08002fb8 <keyboard_get_time>:

uint32_t keyboard_get_time() {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002fbc:	f000 fe82 	bl	8003cc4 <HAL_GetTick>
 8002fc0:	4603      	mov	r3, r0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fca:	b672      	cpsid	i
}
 8002fcc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8002fce:	bf00      	nop
 8002fd0:	e7fd      	b.n	8002fce <Error_Handler+0x8>

08002fd2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002fd2:	b480      	push	{r7}
 8002fd4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002fd6:	bf00      	nop
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af04      	add	r7, sp, #16
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, OLED_TIMEOUT_MS);
 8002fea:	230a      	movs	r3, #10
 8002fec:	9302      	str	r3, [sp, #8]
 8002fee:	2301      	movs	r3, #1
 8002ff0:	9301      	str	r3, [sp, #4]
 8002ff2:	1dfb      	adds	r3, r7, #7
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2178      	movs	r1, #120	@ 0x78
 8002ffc:	4803      	ldr	r0, [pc, #12]	@ (800300c <ssd1306_WriteCommand+0x2c>)
 8002ffe:	f002 f885 	bl	800510c <HAL_I2C_Mem_Write>
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	200007ac 	.word	0x200007ac

08003010 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af04      	add	r7, sp, #16
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, OLED_TIMEOUT_MS);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	b29b      	uxth	r3, r3
 800301e:	220a      	movs	r2, #10
 8003020:	9202      	str	r2, [sp, #8]
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	2301      	movs	r3, #1
 800302a:	2240      	movs	r2, #64	@ 0x40
 800302c:	2178      	movs	r1, #120	@ 0x78
 800302e:	4803      	ldr	r0, [pc, #12]	@ (800303c <ssd1306_WriteData+0x2c>)
 8003030:	f002 f86c 	bl	800510c <HAL_I2C_Mem_Write>
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	200007ac 	.word	0x200007ac

08003040 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003044:	f7ff ffc5 	bl	8002fd2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003048:	2064      	movs	r0, #100	@ 0x64
 800304a:	f000 fe47 	bl	8003cdc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800304e:	2000      	movs	r0, #0
 8003050:	f000 fad2 	bl	80035f8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003054:	2020      	movs	r0, #32
 8003056:	f7ff ffc3 	bl	8002fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800305a:	2000      	movs	r0, #0
 800305c:	f7ff ffc0 	bl	8002fe0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003060:	20b0      	movs	r0, #176	@ 0xb0
 8003062:	f7ff ffbd 	bl	8002fe0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8003066:	20c0      	movs	r0, #192	@ 0xc0
 8003068:	f7ff ffba 	bl	8002fe0 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800306c:	2000      	movs	r0, #0
 800306e:	f7ff ffb7 	bl	8002fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003072:	2010      	movs	r0, #16
 8003074:	f7ff ffb4 	bl	8002fe0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003078:	2040      	movs	r0, #64	@ 0x40
 800307a:	f7ff ffb1 	bl	8002fe0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800307e:	20ff      	movs	r0, #255	@ 0xff
 8003080:	f000 faa7 	bl	80035d2 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8003084:	20a0      	movs	r0, #160	@ 0xa0
 8003086:	f7ff ffab 	bl	8002fe0 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
 800308a:	20a7      	movs	r0, #167	@ 0xa7
 800308c:	f7ff ffa8 	bl	8002fe0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003090:	20a8      	movs	r0, #168	@ 0xa8
 8003092:	f7ff ffa5 	bl	8002fe0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003096:	203f      	movs	r0, #63	@ 0x3f
 8003098:	f7ff ffa2 	bl	8002fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800309c:	20a4      	movs	r0, #164	@ 0xa4
 800309e:	f7ff ff9f 	bl	8002fe0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80030a2:	20d3      	movs	r0, #211	@ 0xd3
 80030a4:	f7ff ff9c 	bl	8002fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80030a8:	2000      	movs	r0, #0
 80030aa:	f7ff ff99 	bl	8002fe0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80030ae:	20d5      	movs	r0, #213	@ 0xd5
 80030b0:	f7ff ff96 	bl	8002fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80030b4:	20f0      	movs	r0, #240	@ 0xf0
 80030b6:	f7ff ff93 	bl	8002fe0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80030ba:	20d9      	movs	r0, #217	@ 0xd9
 80030bc:	f7ff ff90 	bl	8002fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80030c0:	2022      	movs	r0, #34	@ 0x22
 80030c2:	f7ff ff8d 	bl	8002fe0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80030c6:	20da      	movs	r0, #218	@ 0xda
 80030c8:	f7ff ff8a 	bl	8002fe0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80030cc:	2012      	movs	r0, #18
 80030ce:	f7ff ff87 	bl	8002fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80030d2:	20db      	movs	r0, #219	@ 0xdb
 80030d4:	f7ff ff84 	bl	8002fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80030d8:	2020      	movs	r0, #32
 80030da:	f7ff ff81 	bl	8002fe0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80030de:	208d      	movs	r0, #141	@ 0x8d
 80030e0:	f7ff ff7e 	bl	8002fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80030e4:	2014      	movs	r0, #20
 80030e6:	f7ff ff7b 	bl	8002fe0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80030ea:	2001      	movs	r0, #1
 80030ec:	f000 fa84 	bl	80035f8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80030f0:	2000      	movs	r0, #0
 80030f2:	f000 f80f 	bl	8003114 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80030f6:	f000 f825 	bl	8003144 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80030fa:	4b05      	ldr	r3, [pc, #20]	@ (8003110 <ssd1306_Init+0xd0>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003100:	4b03      	ldr	r3, [pc, #12]	@ (8003110 <ssd1306_Init+0xd0>)
 8003102:	2200      	movs	r2, #0
 8003104:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003106:	4b02      	ldr	r3, [pc, #8]	@ (8003110 <ssd1306_Init+0xd0>)
 8003108:	2201      	movs	r2, #1
 800310a:	711a      	strb	r2, [r3, #4]
}
 800310c:	bf00      	nop
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000cfc 	.word	0x20000cfc

08003114 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <ssd1306_Fill+0x14>
 8003124:	2300      	movs	r3, #0
 8003126:	e000      	b.n	800312a <ssd1306_Fill+0x16>
 8003128:	23ff      	movs	r3, #255	@ 0xff
 800312a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800312e:	4619      	mov	r1, r3
 8003130:	4803      	ldr	r0, [pc, #12]	@ (8003140 <ssd1306_Fill+0x2c>)
 8003132:	f009 fd80 	bl	800cc36 <memset>
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20000d04 	.word	0x20000d04

08003144 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
uint8_t SSD1306_Buffer[SSD1306_WIDTH * (SSD1306_HEIGHT / 8)] = {0};
uint8_t SSD1306_LastBuffer[SSD1306_WIDTH * (SSD1306_HEIGHT / 8)] = {0};

void ssd1306_UpdateScreen(void) {
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af00      	add	r7, sp, #0
    int anyPageChanged = 0;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
    for (uint8_t page = 0; page < (SSD1306_HEIGHT / 8); page++) {
 800314e:	2300      	movs	r3, #0
 8003150:	76fb      	strb	r3, [r7, #27]
 8003152:	e06a      	b.n	800322a <ssd1306_UpdateScreen+0xe6>
        uint16_t base = page * SSD1306_WIDTH;
 8003154:	7efb      	ldrb	r3, [r7, #27]
 8003156:	b29b      	uxth	r3, r3
 8003158:	01db      	lsls	r3, r3, #7
 800315a:	813b      	strh	r3, [r7, #8]
        int pageChanged = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
        int firstChanged = -1, lastChanged = -1;
 8003160:	f04f 33ff 	mov.w	r3, #4294967295
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	f04f 33ff 	mov.w	r3, #4294967295
 800316a:	60fb      	str	r3, [r7, #12]

        // Find the first and last changed column in this page
        for (uint16_t col = 0; col < SSD1306_WIDTH; col++) {
 800316c:	2300      	movs	r3, #0
 800316e:	817b      	strh	r3, [r7, #10]
 8003170:	e018      	b.n	80031a4 <ssd1306_UpdateScreen+0x60>
            uint16_t index = base + col;
 8003172:	893a      	ldrh	r2, [r7, #8]
 8003174:	897b      	ldrh	r3, [r7, #10]
 8003176:	4413      	add	r3, r2
 8003178:	80fb      	strh	r3, [r7, #6]
            if (SSD1306_Buffer[index] != SSD1306_LastBuffer[index]) {
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	4a2f      	ldr	r2, [pc, #188]	@ (800323c <ssd1306_UpdateScreen+0xf8>)
 800317e:	5cd2      	ldrb	r2, [r2, r3]
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	492f      	ldr	r1, [pc, #188]	@ (8003240 <ssd1306_UpdateScreen+0xfc>)
 8003184:	5ccb      	ldrb	r3, [r1, r3]
 8003186:	429a      	cmp	r2, r3
 8003188:	d009      	beq.n	800319e <ssd1306_UpdateScreen+0x5a>
                if (firstChanged == -1) firstChanged = col;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d101      	bne.n	8003196 <ssd1306_UpdateScreen+0x52>
 8003192:	897b      	ldrh	r3, [r7, #10]
 8003194:	613b      	str	r3, [r7, #16]
                lastChanged = col;
 8003196:	897b      	ldrh	r3, [r7, #10]
 8003198:	60fb      	str	r3, [r7, #12]
                pageChanged = 1;
 800319a:	2301      	movs	r3, #1
 800319c:	617b      	str	r3, [r7, #20]
        for (uint16_t col = 0; col < SSD1306_WIDTH; col++) {
 800319e:	897b      	ldrh	r3, [r7, #10]
 80031a0:	3301      	adds	r3, #1
 80031a2:	817b      	strh	r3, [r7, #10]
 80031a4:	897b      	ldrh	r3, [r7, #10]
 80031a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80031a8:	d9e3      	bls.n	8003172 <ssd1306_UpdateScreen+0x2e>
            }
        }

        if (!pageChanged)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d038      	beq.n	8003222 <ssd1306_UpdateScreen+0xde>
            continue;
        anyPageChanged = 1;
 80031b0:	2301      	movs	r3, #1
 80031b2:	61fb      	str	r3, [r7, #28]

        // Write only the changed columns in this page
        ssd1306_WriteCommand(0xB0 + page);
 80031b4:	7efb      	ldrb	r3, [r7, #27]
 80031b6:	3b50      	subs	r3, #80	@ 0x50
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff ff10 	bl	8002fe0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + ((firstChanged + SSD1306_X_OFFSET_LOWER) & 0x0F));
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff ff08 	bl	8002fe0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + (((firstChanged + SSD1306_X_OFFSET_LOWER) >> 4) & 0x07));
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	111b      	asrs	r3, r3, #4
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	3310      	adds	r3, #16
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fefd 	bl	8002fe0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[base + firstChanged], lastChanged - firstChanged + 1);
 80031e6:	893a      	ldrh	r2, [r7, #8]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4413      	add	r3, r2
 80031ec:	4a13      	ldr	r2, [pc, #76]	@ (800323c <ssd1306_UpdateScreen+0xf8>)
 80031ee:	1898      	adds	r0, r3, r2
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	3301      	adds	r3, #1
 80031f8:	4619      	mov	r1, r3
 80031fa:	f7ff ff09 	bl	8003010 <ssd1306_WriteData>

        // Copy new page data to last buffer for the changed range
        memcpy(&SSD1306_LastBuffer[base + firstChanged], &SSD1306_Buffer[base + firstChanged], lastChanged - firstChanged + 1);
 80031fe:	893a      	ldrh	r2, [r7, #8]
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4413      	add	r3, r2
 8003204:	4a0e      	ldr	r2, [pc, #56]	@ (8003240 <ssd1306_UpdateScreen+0xfc>)
 8003206:	1898      	adds	r0, r3, r2
 8003208:	893a      	ldrh	r2, [r7, #8]
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4413      	add	r3, r2
 800320e:	4a0b      	ldr	r2, [pc, #44]	@ (800323c <ssd1306_UpdateScreen+0xf8>)
 8003210:	1899      	adds	r1, r3, r2
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	3301      	adds	r3, #1
 800321a:	461a      	mov	r2, r3
 800321c:	f009 fde3 	bl	800cde6 <memcpy>
 8003220:	e000      	b.n	8003224 <ssd1306_UpdateScreen+0xe0>
            continue;
 8003222:	bf00      	nop
    for (uint8_t page = 0; page < (SSD1306_HEIGHT / 8); page++) {
 8003224:	7efb      	ldrb	r3, [r7, #27]
 8003226:	3301      	adds	r3, #1
 8003228:	76fb      	strb	r3, [r7, #27]
 800322a:	7efb      	ldrb	r3, [r7, #27]
 800322c:	2b07      	cmp	r3, #7
 800322e:	d991      	bls.n	8003154 <ssd1306_UpdateScreen+0x10>
    }
    // If nothing changed, skip the update entirely
    if (!anyPageChanged) {
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	2b00      	cmp	r3, #0
        return;
    }
}
 8003234:	3720      	adds	r7, #32
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000d04 	.word	0x20000d04
 8003240:	20001104 	.word	0x20001104

08003244 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]
 800324e:	460b      	mov	r3, r1
 8003250:	71bb      	strb	r3, [r7, #6]
 8003252:	4613      	mov	r3, r2
 8003254:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	2b00      	cmp	r3, #0
 800325c:	db3d      	blt.n	80032da <ssd1306_DrawPixel+0x96>
 800325e:	79bb      	ldrb	r3, [r7, #6]
 8003260:	2b3f      	cmp	r3, #63	@ 0x3f
 8003262:	d83a      	bhi.n	80032da <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003264:	797b      	ldrb	r3, [r7, #5]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d11a      	bne.n	80032a0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800326a:	79fa      	ldrb	r2, [r7, #7]
 800326c:	79bb      	ldrb	r3, [r7, #6]
 800326e:	08db      	lsrs	r3, r3, #3
 8003270:	b2d8      	uxtb	r0, r3
 8003272:	4603      	mov	r3, r0
 8003274:	01db      	lsls	r3, r3, #7
 8003276:	4413      	add	r3, r2
 8003278:	4a1b      	ldr	r2, [pc, #108]	@ (80032e8 <ssd1306_DrawPixel+0xa4>)
 800327a:	5cd3      	ldrb	r3, [r2, r3]
 800327c:	b25a      	sxtb	r2, r3
 800327e:	79bb      	ldrb	r3, [r7, #6]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	2101      	movs	r1, #1
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	b25b      	sxtb	r3, r3
 800328c:	4313      	orrs	r3, r2
 800328e:	b259      	sxtb	r1, r3
 8003290:	79fa      	ldrb	r2, [r7, #7]
 8003292:	4603      	mov	r3, r0
 8003294:	01db      	lsls	r3, r3, #7
 8003296:	4413      	add	r3, r2
 8003298:	b2c9      	uxtb	r1, r1
 800329a:	4a13      	ldr	r2, [pc, #76]	@ (80032e8 <ssd1306_DrawPixel+0xa4>)
 800329c:	54d1      	strb	r1, [r2, r3]
 800329e:	e01d      	b.n	80032dc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80032a0:	79fa      	ldrb	r2, [r7, #7]
 80032a2:	79bb      	ldrb	r3, [r7, #6]
 80032a4:	08db      	lsrs	r3, r3, #3
 80032a6:	b2d8      	uxtb	r0, r3
 80032a8:	4603      	mov	r3, r0
 80032aa:	01db      	lsls	r3, r3, #7
 80032ac:	4413      	add	r3, r2
 80032ae:	4a0e      	ldr	r2, [pc, #56]	@ (80032e8 <ssd1306_DrawPixel+0xa4>)
 80032b0:	5cd3      	ldrb	r3, [r2, r3]
 80032b2:	b25a      	sxtb	r2, r3
 80032b4:	79bb      	ldrb	r3, [r7, #6]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	2101      	movs	r1, #1
 80032bc:	fa01 f303 	lsl.w	r3, r1, r3
 80032c0:	b25b      	sxtb	r3, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	b25b      	sxtb	r3, r3
 80032c6:	4013      	ands	r3, r2
 80032c8:	b259      	sxtb	r1, r3
 80032ca:	79fa      	ldrb	r2, [r7, #7]
 80032cc:	4603      	mov	r3, r0
 80032ce:	01db      	lsls	r3, r3, #7
 80032d0:	4413      	add	r3, r2
 80032d2:	b2c9      	uxtb	r1, r1
 80032d4:	4a04      	ldr	r2, [pc, #16]	@ (80032e8 <ssd1306_DrawPixel+0xa4>)
 80032d6:	54d1      	strb	r1, [r2, r3]
 80032d8:	e000      	b.n	80032dc <ssd1306_DrawPixel+0x98>
        return;
 80032da:	bf00      	nop
    }
}
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	20000d04 	.word	0x20000d04

080032ec <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80032ec:	b590      	push	{r4, r7, lr}
 80032ee:	b089      	sub	sp, #36	@ 0x24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4604      	mov	r4, r0
 80032f4:	4638      	mov	r0, r7
 80032f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80032fa:	4623      	mov	r3, r4
 80032fc:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	2b1f      	cmp	r3, #31
 8003302:	d902      	bls.n	800330a <ssd1306_WriteChar+0x1e>
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	2b7e      	cmp	r3, #126	@ 0x7e
 8003308:	d901      	bls.n	800330e <ssd1306_WriteChar+0x22>
        return 0;
 800330a:	2300      	movs	r3, #0
 800330c:	e079      	b.n	8003402 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <ssd1306_WriteChar+0x34>
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	3b20      	subs	r3, #32
 800331a:	4413      	add	r3, r2
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	e000      	b.n	8003322 <ssd1306_WriteChar+0x36>
 8003320:	783b      	ldrb	r3, [r7, #0]
 8003322:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8003324:	4b39      	ldr	r3, [pc, #228]	@ (800340c <ssd1306_WriteChar+0x120>)
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	7dfb      	ldrb	r3, [r7, #23]
 800332c:	4413      	add	r3, r2
 800332e:	2b80      	cmp	r3, #128	@ 0x80
 8003330:	dc06      	bgt.n	8003340 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8003332:	4b36      	ldr	r3, [pc, #216]	@ (800340c <ssd1306_WriteChar+0x120>)
 8003334:	885b      	ldrh	r3, [r3, #2]
 8003336:	461a      	mov	r2, r3
 8003338:	787b      	ldrb	r3, [r7, #1]
 800333a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 800333c:	2b40      	cmp	r3, #64	@ 0x40
 800333e:	dd01      	ble.n	8003344 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8003340:	2300      	movs	r3, #0
 8003342:	e05e      	b.n	8003402 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8003344:	2300      	movs	r3, #0
 8003346:	61fb      	str	r3, [r7, #28]
 8003348:	e04d      	b.n	80033e6 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	3b20      	subs	r3, #32
 8003350:	7879      	ldrb	r1, [r7, #1]
 8003352:	fb01 f303 	mul.w	r3, r1, r3
 8003356:	4619      	mov	r1, r3
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	440b      	add	r3, r1
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4413      	add	r3, r2
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8003364:	2300      	movs	r3, #0
 8003366:	61bb      	str	r3, [r7, #24]
 8003368:	e036      	b.n	80033d8 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d013      	beq.n	80033a2 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800337a:	4b24      	ldr	r3, [pc, #144]	@ (800340c <ssd1306_WriteChar+0x120>)
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	b2da      	uxtb	r2, r3
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	4413      	add	r3, r2
 8003386:	b2d8      	uxtb	r0, r3
 8003388:	4b20      	ldr	r3, [pc, #128]	@ (800340c <ssd1306_WriteChar+0x120>)
 800338a:	885b      	ldrh	r3, [r3, #2]
 800338c:	b2da      	uxtb	r2, r3
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	4413      	add	r3, r2
 8003394:	b2db      	uxtb	r3, r3
 8003396:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800339a:	4619      	mov	r1, r3
 800339c:	f7ff ff52 	bl	8003244 <ssd1306_DrawPixel>
 80033a0:	e017      	b.n	80033d2 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80033a2:	4b1a      	ldr	r3, [pc, #104]	@ (800340c <ssd1306_WriteChar+0x120>)
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	b2d8      	uxtb	r0, r3
 80033b0:	4b16      	ldr	r3, [pc, #88]	@ (800340c <ssd1306_WriteChar+0x120>)
 80033b2:	885b      	ldrh	r3, [r3, #2]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	b2d9      	uxtb	r1, r3
 80033be:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	bf0c      	ite	eq
 80033c6:	2301      	moveq	r3, #1
 80033c8:	2300      	movne	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	461a      	mov	r2, r3
 80033ce:	f7ff ff39 	bl	8003244 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	3301      	adds	r3, #1
 80033d6:	61bb      	str	r3, [r7, #24]
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d3c4      	bcc.n	800336a <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	3301      	adds	r3, #1
 80033e4:	61fb      	str	r3, [r7, #28]
 80033e6:	787b      	ldrb	r3, [r7, #1]
 80033e8:	461a      	mov	r2, r3
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d3ac      	bcc.n	800334a <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 80033f0:	4b06      	ldr	r3, [pc, #24]	@ (800340c <ssd1306_WriteChar+0x120>)
 80033f2:	881a      	ldrh	r2, [r3, #0]
 80033f4:	7dfb      	ldrb	r3, [r7, #23]
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	4b03      	ldr	r3, [pc, #12]	@ (800340c <ssd1306_WriteChar+0x120>)
 80033fe:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003400:	7bfb      	ldrb	r3, [r7, #15]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3724      	adds	r7, #36	@ 0x24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd90      	pop	{r4, r7, pc}
 800340a:	bf00      	nop
 800340c:	20000cfc 	.word	0x20000cfc

08003410 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af02      	add	r7, sp, #8
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	4638      	mov	r0, r7
 800341a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800341e:	e013      	b.n	8003448 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	7818      	ldrb	r0, [r3, #0]
 8003424:	7e3b      	ldrb	r3, [r7, #24]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	463b      	mov	r3, r7
 800342a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800342c:	f7ff ff5e 	bl	80032ec <ssd1306_WriteChar>
 8003430:	4603      	mov	r3, r0
 8003432:	461a      	mov	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d002      	beq.n	8003442 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	e008      	b.n	8003454 <ssd1306_WriteString+0x44>
        }
        str++;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3301      	adds	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e7      	bne.n	8003420 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	781b      	ldrb	r3, [r3, #0]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	460a      	mov	r2, r1
 8003466:	71fb      	strb	r3, [r7, #7]
 8003468:	4613      	mov	r3, r2
 800346a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	b29a      	uxth	r2, r3
 8003470:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <ssd1306_SetCursor+0x2c>)
 8003472:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003474:	79bb      	ldrb	r3, [r7, #6]
 8003476:	b29a      	uxth	r2, r3
 8003478:	4b03      	ldr	r3, [pc, #12]	@ (8003488 <ssd1306_SetCursor+0x2c>)
 800347a:	805a      	strh	r2, [r3, #2]
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	20000cfc 	.word	0x20000cfc

0800348c <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800348c:	b590      	push	{r4, r7, lr}
 800348e:	b089      	sub	sp, #36	@ 0x24
 8003490:	af00      	add	r7, sp, #0
 8003492:	4604      	mov	r4, r0
 8003494:	4608      	mov	r0, r1
 8003496:	4611      	mov	r1, r2
 8003498:	461a      	mov	r2, r3
 800349a:	4623      	mov	r3, r4
 800349c:	71fb      	strb	r3, [r7, #7]
 800349e:	4603      	mov	r3, r0
 80034a0:	71bb      	strb	r3, [r7, #6]
 80034a2:	460b      	mov	r3, r1
 80034a4:	717b      	strb	r3, [r7, #5]
 80034a6:	4613      	mov	r3, r2
 80034a8:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80034aa:	797a      	ldrb	r2, [r7, #5]
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	bfb8      	it	lt
 80034b4:	425b      	neglt	r3, r3
 80034b6:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80034b8:	793a      	ldrb	r2, [r7, #4]
 80034ba:	79bb      	ldrb	r3, [r7, #6]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bfb8      	it	lt
 80034c2:	425b      	neglt	r3, r3
 80034c4:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80034c6:	79fa      	ldrb	r2, [r7, #7]
 80034c8:	797b      	ldrb	r3, [r7, #5]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d201      	bcs.n	80034d2 <ssd1306_Line+0x46>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e001      	b.n	80034d6 <ssd1306_Line+0x4a>
 80034d2:	f04f 33ff 	mov.w	r3, #4294967295
 80034d6:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80034d8:	79ba      	ldrb	r2, [r7, #6]
 80034da:	793b      	ldrb	r3, [r7, #4]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d201      	bcs.n	80034e4 <ssd1306_Line+0x58>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e001      	b.n	80034e8 <ssd1306_Line+0x5c>
 80034e4:	f04f 33ff 	mov.w	r3, #4294967295
 80034e8:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80034f2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80034f6:	7939      	ldrb	r1, [r7, #4]
 80034f8:	797b      	ldrb	r3, [r7, #5]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fea2 	bl	8003244 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8003500:	e024      	b.n	800354c <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8003502:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003506:	79b9      	ldrb	r1, [r7, #6]
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fe9a 	bl	8003244 <ssd1306_DrawPixel>
        error2 = error * 2;
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	425b      	negs	r3, r3
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	429a      	cmp	r2, r3
 800351e:	dd08      	ble.n	8003532 <ssd1306_Line+0xa6>
            error -= deltaY;
 8003520:	69fa      	ldr	r2, [r7, #28]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	b2da      	uxtb	r2, r3
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	4413      	add	r3, r2
 8003530:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	429a      	cmp	r2, r3
 8003538:	da08      	bge.n	800354c <ssd1306_Line+0xc0>
            error += deltaX;
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	4413      	add	r3, r2
 8003540:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	b2da      	uxtb	r2, r3
 8003546:	79bb      	ldrb	r3, [r7, #6]
 8003548:	4413      	add	r3, r2
 800354a:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 800354c:	79fa      	ldrb	r2, [r7, #7]
 800354e:	797b      	ldrb	r3, [r7, #5]
 8003550:	429a      	cmp	r2, r3
 8003552:	d1d6      	bne.n	8003502 <ssd1306_Line+0x76>
 8003554:	79ba      	ldrb	r2, [r7, #6]
 8003556:	793b      	ldrb	r3, [r7, #4]
 8003558:	429a      	cmp	r2, r3
 800355a:	d1d2      	bne.n	8003502 <ssd1306_Line+0x76>
        }
    }
    return;
 800355c:	bf00      	nop
}
 800355e:	3724      	adds	r7, #36	@ 0x24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd90      	pop	{r4, r7, pc}

08003564 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003564:	b590      	push	{r4, r7, lr}
 8003566:	b085      	sub	sp, #20
 8003568:	af02      	add	r7, sp, #8
 800356a:	4604      	mov	r4, r0
 800356c:	4608      	mov	r0, r1
 800356e:	4611      	mov	r1, r2
 8003570:	461a      	mov	r2, r3
 8003572:	4623      	mov	r3, r4
 8003574:	71fb      	strb	r3, [r7, #7]
 8003576:	4603      	mov	r3, r0
 8003578:	71bb      	strb	r3, [r7, #6]
 800357a:	460b      	mov	r3, r1
 800357c:	717b      	strb	r3, [r7, #5]
 800357e:	4613      	mov	r3, r2
 8003580:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8003582:	79bc      	ldrb	r4, [r7, #6]
 8003584:	797a      	ldrb	r2, [r7, #5]
 8003586:	79b9      	ldrb	r1, [r7, #6]
 8003588:	79f8      	ldrb	r0, [r7, #7]
 800358a:	7e3b      	ldrb	r3, [r7, #24]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	4623      	mov	r3, r4
 8003590:	f7ff ff7c 	bl	800348c <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8003594:	793c      	ldrb	r4, [r7, #4]
 8003596:	797a      	ldrb	r2, [r7, #5]
 8003598:	79b9      	ldrb	r1, [r7, #6]
 800359a:	7978      	ldrb	r0, [r7, #5]
 800359c:	7e3b      	ldrb	r3, [r7, #24]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	4623      	mov	r3, r4
 80035a2:	f7ff ff73 	bl	800348c <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80035a6:	793c      	ldrb	r4, [r7, #4]
 80035a8:	79fa      	ldrb	r2, [r7, #7]
 80035aa:	7939      	ldrb	r1, [r7, #4]
 80035ac:	7978      	ldrb	r0, [r7, #5]
 80035ae:	7e3b      	ldrb	r3, [r7, #24]
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	4623      	mov	r3, r4
 80035b4:	f7ff ff6a 	bl	800348c <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80035b8:	79bc      	ldrb	r4, [r7, #6]
 80035ba:	79fa      	ldrb	r2, [r7, #7]
 80035bc:	7939      	ldrb	r1, [r7, #4]
 80035be:	79f8      	ldrb	r0, [r7, #7]
 80035c0:	7e3b      	ldrb	r3, [r7, #24]
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	4623      	mov	r3, r4
 80035c6:	f7ff ff61 	bl	800348c <ssd1306_Line>

    return;
 80035ca:	bf00      	nop
}
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd90      	pop	{r4, r7, pc}

080035d2 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	4603      	mov	r3, r0
 80035da:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80035dc:	2381      	movs	r3, #129	@ 0x81
 80035de:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff fcfc 	bl	8002fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fcf8 	bl	8002fe0 <ssd1306_WriteCommand>
}
 80035f0:	bf00      	nop
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003608:	23af      	movs	r3, #175	@ 0xaf
 800360a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800360c:	4b08      	ldr	r3, [pc, #32]	@ (8003630 <ssd1306_SetDisplayOn+0x38>)
 800360e:	2201      	movs	r2, #1
 8003610:	715a      	strb	r2, [r3, #5]
 8003612:	e004      	b.n	800361e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003614:	23ae      	movs	r3, #174	@ 0xae
 8003616:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003618:	4b05      	ldr	r3, [pc, #20]	@ (8003630 <ssd1306_SetDisplayOn+0x38>)
 800361a:	2200      	movs	r2, #0
 800361c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff fcdd 	bl	8002fe0 <ssd1306_WriteCommand>
}
 8003626:	bf00      	nop
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000cfc 	.word	0x20000cfc

08003634 <ssd1306_FlipScreen>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_FlipScreen(uint8_t flip_horizontal, uint8_t flip_vertical) {
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	460a      	mov	r2, r1
 800363e:	71fb      	strb	r3, [r7, #7]
 8003640:	4613      	mov	r3, r2
 8003642:	71bb      	strb	r3, [r7, #6]
    if (flip_horizontal) {
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <ssd1306_FlipScreen+0x1e>
        ssd1306_WriteCommand(0xA1);
 800364a:	20a1      	movs	r0, #161	@ 0xa1
 800364c:	f7ff fcc8 	bl	8002fe0 <ssd1306_WriteCommand>
 8003650:	e002      	b.n	8003658 <ssd1306_FlipScreen+0x24>
    } else {
        ssd1306_WriteCommand(0xA0);
 8003652:	20a0      	movs	r0, #160	@ 0xa0
 8003654:	f7ff fcc4 	bl	8002fe0 <ssd1306_WriteCommand>
    }

    if (flip_vertical) {
 8003658:	79bb      	ldrb	r3, [r7, #6]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <ssd1306_FlipScreen+0x32>
        ssd1306_WriteCommand(0xC8);
 800365e:	20c8      	movs	r0, #200	@ 0xc8
 8003660:	f7ff fcbe 	bl	8002fe0 <ssd1306_WriteCommand>
    } else {
        ssd1306_WriteCommand(0xC0);
    }
}
 8003664:	e002      	b.n	800366c <ssd1306_FlipScreen+0x38>
        ssd1306_WriteCommand(0xC0);
 8003666:	20c0      	movs	r0, #192	@ 0xc0
 8003668:	f7ff fcba 	bl	8002fe0 <ssd1306_WriteCommand>
}
 800366c:	bf00      	nop
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	607b      	str	r3, [r7, #4]
 800367e:	4b10      	ldr	r3, [pc, #64]	@ (80036c0 <HAL_MspInit+0x4c>)
 8003680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003682:	4a0f      	ldr	r2, [pc, #60]	@ (80036c0 <HAL_MspInit+0x4c>)
 8003684:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003688:	6453      	str	r3, [r2, #68]	@ 0x44
 800368a:	4b0d      	ldr	r3, [pc, #52]	@ (80036c0 <HAL_MspInit+0x4c>)
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003692:	607b      	str	r3, [r7, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	603b      	str	r3, [r7, #0]
 800369a:	4b09      	ldr	r3, [pc, #36]	@ (80036c0 <HAL_MspInit+0x4c>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	4a08      	ldr	r2, [pc, #32]	@ (80036c0 <HAL_MspInit+0x4c>)
 80036a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80036a6:	4b06      	ldr	r3, [pc, #24]	@ (80036c0 <HAL_MspInit+0x4c>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800

080036c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	@ 0x28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a17      	ldr	r2, [pc, #92]	@ (8003740 <HAL_ADC_MspInit+0x7c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d127      	bne.n	8003736 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	4b16      	ldr	r3, [pc, #88]	@ (8003744 <HAL_ADC_MspInit+0x80>)
 80036ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ee:	4a15      	ldr	r2, [pc, #84]	@ (8003744 <HAL_ADC_MspInit+0x80>)
 80036f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80036f6:	4b13      	ldr	r3, [pc, #76]	@ (8003744 <HAL_ADC_MspInit+0x80>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	4b0f      	ldr	r3, [pc, #60]	@ (8003744 <HAL_ADC_MspInit+0x80>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	4a0e      	ldr	r2, [pc, #56]	@ (8003744 <HAL_ADC_MspInit+0x80>)
 800370c:	f043 0302 	orr.w	r3, r3, #2
 8003710:	6313      	str	r3, [r2, #48]	@ 0x30
 8003712:	4b0c      	ldr	r3, [pc, #48]	@ (8003744 <HAL_ADC_MspInit+0x80>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800371e:	2302      	movs	r3, #2
 8003720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003722:	2303      	movs	r3, #3
 8003724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372a:	f107 0314 	add.w	r3, r7, #20
 800372e:	4619      	mov	r1, r3
 8003730:	4805      	ldr	r0, [pc, #20]	@ (8003748 <HAL_ADC_MspInit+0x84>)
 8003732:	f001 fa09 	bl	8004b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003736:	bf00      	nop
 8003738:	3728      	adds	r7, #40	@ 0x28
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40012000 	.word	0x40012000
 8003744:	40023800 	.word	0x40023800
 8003748:	40020400 	.word	0x40020400

0800374c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08a      	sub	sp, #40	@ 0x28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003754:	f107 0314 	add.w	r3, r7, #20
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	60da      	str	r2, [r3, #12]
 8003762:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a19      	ldr	r2, [pc, #100]	@ (80037d0 <HAL_I2C_MspInit+0x84>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d12b      	bne.n	80037c6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	4b18      	ldr	r3, [pc, #96]	@ (80037d4 <HAL_I2C_MspInit+0x88>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003776:	4a17      	ldr	r2, [pc, #92]	@ (80037d4 <HAL_I2C_MspInit+0x88>)
 8003778:	f043 0302 	orr.w	r3, r3, #2
 800377c:	6313      	str	r3, [r2, #48]	@ 0x30
 800377e:	4b15      	ldr	r3, [pc, #84]	@ (80037d4 <HAL_I2C_MspInit+0x88>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800378a:	23c0      	movs	r3, #192	@ 0xc0
 800378c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800378e:	2312      	movs	r3, #18
 8003790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003792:	2301      	movs	r3, #1
 8003794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003796:	2303      	movs	r3, #3
 8003798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800379a:	2304      	movs	r3, #4
 800379c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800379e:	f107 0314 	add.w	r3, r7, #20
 80037a2:	4619      	mov	r1, r3
 80037a4:	480c      	ldr	r0, [pc, #48]	@ (80037d8 <HAL_I2C_MspInit+0x8c>)
 80037a6:	f001 f9cf 	bl	8004b48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	4b09      	ldr	r3, [pc, #36]	@ (80037d4 <HAL_I2C_MspInit+0x88>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	4a08      	ldr	r2, [pc, #32]	@ (80037d4 <HAL_I2C_MspInit+0x88>)
 80037b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80037b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80037ba:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <HAL_I2C_MspInit+0x88>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80037c6:	bf00      	nop
 80037c8:	3728      	adds	r7, #40	@ 0x28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40005400 	.word	0x40005400
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40020400 	.word	0x40020400

080037dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	@ 0x28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e4:	f107 0314 	add.w	r3, r7, #20
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	60da      	str	r2, [r3, #12]
 80037f2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037fc:	d13a      	bne.n	8003874 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	4b1e      	ldr	r3, [pc, #120]	@ (800387c <HAL_PCD_MspInit+0xa0>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003806:	4a1d      	ldr	r2, [pc, #116]	@ (800387c <HAL_PCD_MspInit+0xa0>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	6313      	str	r3, [r2, #48]	@ 0x30
 800380e:	4b1b      	ldr	r3, [pc, #108]	@ (800387c <HAL_PCD_MspInit+0xa0>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	613b      	str	r3, [r7, #16]
 8003818:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800381a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800381e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003820:	2302      	movs	r3, #2
 8003822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003824:	2300      	movs	r3, #0
 8003826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003828:	2303      	movs	r3, #3
 800382a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800382c:	230a      	movs	r3, #10
 800382e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003830:	f107 0314 	add.w	r3, r7, #20
 8003834:	4619      	mov	r1, r3
 8003836:	4812      	ldr	r0, [pc, #72]	@ (8003880 <HAL_PCD_MspInit+0xa4>)
 8003838:	f001 f986 	bl	8004b48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800383c:	4b0f      	ldr	r3, [pc, #60]	@ (800387c <HAL_PCD_MspInit+0xa0>)
 800383e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003840:	4a0e      	ldr	r2, [pc, #56]	@ (800387c <HAL_PCD_MspInit+0xa0>)
 8003842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003846:	6353      	str	r3, [r2, #52]	@ 0x34
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	4b0b      	ldr	r3, [pc, #44]	@ (800387c <HAL_PCD_MspInit+0xa0>)
 800384e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003850:	4a0a      	ldr	r2, [pc, #40]	@ (800387c <HAL_PCD_MspInit+0xa0>)
 8003852:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003856:	6453      	str	r3, [r2, #68]	@ 0x44
 8003858:	4b08      	ldr	r3, [pc, #32]	@ (800387c <HAL_PCD_MspInit+0xa0>)
 800385a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003864:	2200      	movs	r2, #0
 8003866:	2100      	movs	r1, #0
 8003868:	2043      	movs	r0, #67	@ 0x43
 800386a:	f000 ff28 	bl	80046be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800386e:	2043      	movs	r0, #67	@ 0x43
 8003870:	f000 ff41 	bl	80046f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003874:	bf00      	nop
 8003876:	3728      	adds	r7, #40	@ 0x28
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40023800 	.word	0x40023800
 8003880:	40020000 	.word	0x40020000

08003884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8003888:	bf00      	nop
 800388a:	e7fd      	b.n	8003888 <NMI_Handler+0x4>

0800388c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm("BKPT #0\n");
 8003890:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003892:	bf00      	nop
 8003894:	e7fd      	b.n	8003892 <HardFault_Handler+0x6>

08003896 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003896:	b480      	push	{r7}
 8003898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800389a:	bf00      	nop
 800389c:	e7fd      	b.n	800389a <MemManage_Handler+0x4>

0800389e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800389e:	b480      	push	{r7}
 80038a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038a2:	bf00      	nop
 80038a4:	e7fd      	b.n	80038a2 <BusFault_Handler+0x4>

080038a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038a6:	b480      	push	{r7}
 80038a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038aa:	bf00      	nop
 80038ac:	e7fd      	b.n	80038aa <UsageFault_Handler+0x4>

080038ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038ae:	b480      	push	{r7}
 80038b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038b2:	bf00      	nop
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038c0:	bf00      	nop
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038ca:	b480      	push	{r7}
 80038cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038dc:	f000 f9de 	bl	8003c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  system_ticks++;
 80038e0:	4b03      	ldr	r3, [pc, #12]	@ (80038f0 <SysTick_Handler+0x18>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3301      	adds	r3, #1
 80038e6:	4a02      	ldr	r2, [pc, #8]	@ (80038f0 <SysTick_Handler+0x18>)
 80038e8:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80038ea:	bf00      	nop
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20001504 	.word	0x20001504

080038f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 80038f8:	2000      	movs	r0, #0
 80038fa:	f008 fa25 	bl	800bd48 <dcd_int_handler>
	return;
 80038fe:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003900:	bd80      	pop	{r7, pc}

08003902 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003902:	b480      	push	{r7}
 8003904:	af00      	add	r7, sp, #0
  return 1;
 8003906:	2301      	movs	r3, #1
}
 8003908:	4618      	mov	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <_kill>:

int _kill(int pid, int sig)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800391c:	f009 fa36 	bl	800cd8c <__errno>
 8003920:	4603      	mov	r3, r0
 8003922:	2216      	movs	r2, #22
 8003924:	601a      	str	r2, [r3, #0]
  return -1;
 8003926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <_exit>:

void _exit (int status)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800393a:	f04f 31ff 	mov.w	r1, #4294967295
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff ffe7 	bl	8003912 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003944:	bf00      	nop
 8003946:	e7fd      	b.n	8003944 <_exit+0x12>

08003948 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	e00a      	b.n	8003970 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800395a:	f3af 8000 	nop.w
 800395e:	4601      	mov	r1, r0
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	60ba      	str	r2, [r7, #8]
 8003966:	b2ca      	uxtb	r2, r1
 8003968:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	3301      	adds	r3, #1
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	429a      	cmp	r2, r3
 8003976:	dbf0      	blt.n	800395a <_read+0x12>
  }

  return len;
 8003978:	687b      	ldr	r3, [r7, #4]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b086      	sub	sp, #24
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	e009      	b.n	80039a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	60ba      	str	r2, [r7, #8]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	3301      	adds	r3, #1
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	dbf1      	blt.n	8003994 <_write+0x12>
  }
  return len;
 80039b0:	687b      	ldr	r3, [r7, #4]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <_close>:

int _close(int file)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039e2:	605a      	str	r2, [r3, #4]
  return 0;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <_isatty>:

int _isatty(int file)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80039fa:	2301      	movs	r3, #1
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
	...

08003a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a2c:	4a14      	ldr	r2, [pc, #80]	@ (8003a80 <_sbrk+0x5c>)
 8003a2e:	4b15      	ldr	r3, [pc, #84]	@ (8003a84 <_sbrk+0x60>)
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a38:	4b13      	ldr	r3, [pc, #76]	@ (8003a88 <_sbrk+0x64>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d102      	bne.n	8003a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a40:	4b11      	ldr	r3, [pc, #68]	@ (8003a88 <_sbrk+0x64>)
 8003a42:	4a12      	ldr	r2, [pc, #72]	@ (8003a8c <_sbrk+0x68>)
 8003a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a46:	4b10      	ldr	r3, [pc, #64]	@ (8003a88 <_sbrk+0x64>)
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d207      	bcs.n	8003a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a54:	f009 f99a 	bl	800cd8c <__errno>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	220c      	movs	r2, #12
 8003a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a62:	e009      	b.n	8003a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a64:	4b08      	ldr	r3, [pc, #32]	@ (8003a88 <_sbrk+0x64>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a6a:	4b07      	ldr	r3, [pc, #28]	@ (8003a88 <_sbrk+0x64>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4413      	add	r3, r2
 8003a72:	4a05      	ldr	r2, [pc, #20]	@ (8003a88 <_sbrk+0x64>)
 8003a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a76:	68fb      	ldr	r3, [r7, #12]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20020000 	.word	0x20020000
 8003a84:	00000400 	.word	0x00000400
 8003a88:	20001508 	.word	0x20001508
 8003a8c:	20001a48 	.word	0x20001a48

08003a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a94:	4b06      	ldr	r3, [pc, #24]	@ (8003ab0 <SystemInit+0x20>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a9a:	4a05      	ldr	r2, [pc, #20]	@ (8003ab0 <SystemInit+0x20>)
 8003a9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003aa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	e000ed00 	.word	0xe000ed00

08003ab4 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8003ab8:	4b02      	ldr	r3, [pc, #8]	@ (8003ac4 <tud_descriptor_device_cb+0x10>)
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	0800eecc 	.word	0x0800eecc

08003ac8 <tud_hid_descriptor_report_cb>:

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_hid_descriptor_report_cb(uint8_t instance)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	71fb      	strb	r3, [r7, #7]
  (void) instance;
  return desc_hid_report;
 8003ad2:	4b03      	ldr	r3, [pc, #12]	@ (8003ae0 <tud_hid_descriptor_report_cb+0x18>)
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	0800eee0 	.word	0x0800eee0

08003ae4 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	71fb      	strb	r3, [r7, #7]
  (void) index; // for multiple configurations
  return desc_configuration;
 8003aee:	4b03      	ldr	r3, [pc, #12]	@ (8003afc <tud_descriptor_configuration_cb+0x18>)
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	0800ef3c 	.word	0x0800ef3c

08003b00 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	460a      	mov	r2, r1
 8003b0a:	71fb      	strb	r3, [r7, #7]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d108      	bne.n	8003b28 <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8003b16:	4b21      	ldr	r3, [pc, #132]	@ (8003b9c <tud_descriptor_string_cb+0x9c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	4b20      	ldr	r3, [pc, #128]	@ (8003ba0 <tud_descriptor_string_cb+0xa0>)
 8003b20:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 8003b22:	2301      	movs	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
 8003b26:	e027      	b.n	8003b78 <tud_descriptor_string_cb+0x78>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	2b05      	cmp	r3, #5
 8003b2c:	d901      	bls.n	8003b32 <tud_descriptor_string_cb+0x32>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e02f      	b.n	8003b92 <tud_descriptor_string_cb+0x92>

    const char* str = string_desc_arr[index];
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	4a19      	ldr	r2, [pc, #100]	@ (8003b9c <tud_descriptor_string_cb+0x9c>)
 8003b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3a:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = strlen(str);
 8003b3c:	68b8      	ldr	r0, [r7, #8]
 8003b3e:	f7fc fb59 	bl	80001f4 <strlen>
 8003b42:	4603      	mov	r3, r0
 8003b44:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	2b1f      	cmp	r3, #31
 8003b4a:	d901      	bls.n	8003b50 <tud_descriptor_string_cb+0x50>
 8003b4c:	231f      	movs	r3, #31
 8003b4e:	73fb      	strb	r3, [r7, #15]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 8003b50:	2300      	movs	r3, #0
 8003b52:	73bb      	strb	r3, [r7, #14]
 8003b54:	e00c      	b.n	8003b70 <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 8003b56:	7bbb      	ldrb	r3, [r7, #14]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	781a      	ldrb	r2, [r3, #0]
 8003b5e:	7bbb      	ldrb	r3, [r7, #14]
 8003b60:	3301      	adds	r3, #1
 8003b62:	4611      	mov	r1, r2
 8003b64:	4a0e      	ldr	r2, [pc, #56]	@ (8003ba0 <tud_descriptor_string_cb+0xa0>)
 8003b66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 8003b6a:	7bbb      	ldrb	r3, [r7, #14]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	73bb      	strb	r3, [r7, #14]
 8003b70:	7bba      	ldrb	r2, [r7, #14]
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d3ee      	bcc.n	8003b56 <tud_descriptor_string_cb+0x56>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	b21b      	sxth	r3, r3
 8003b84:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003b88:	b21b      	sxth	r3, r3
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	4b04      	ldr	r3, [pc, #16]	@ (8003ba0 <tud_descriptor_string_cb+0xa0>)
 8003b8e:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8003b90:	4b03      	ldr	r3, [pc, #12]	@ (8003ba0 <tud_descriptor_string_cb+0xa0>)
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	2000020c 	.word	0x2000020c
 8003ba0:	2000150c 	.word	0x2000150c

08003ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ba4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003bdc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ba8:	f7ff ff72 	bl	8003a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bac:	480c      	ldr	r0, [pc, #48]	@ (8003be0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003bae:	490d      	ldr	r1, [pc, #52]	@ (8003be4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8003be8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bb4:	e002      	b.n	8003bbc <LoopCopyDataInit>

08003bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bba:	3304      	adds	r3, #4

08003bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bc0:	d3f9      	bcc.n	8003bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bc4:	4c0a      	ldr	r4, [pc, #40]	@ (8003bf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bc8:	e001      	b.n	8003bce <LoopFillZerobss>

08003bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bcc:	3204      	adds	r2, #4

08003bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bd0:	d3fb      	bcc.n	8003bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bd2:	f009 f8e1 	bl	800cd98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bd6:	f7fe fc91 	bl	80024fc <main>
  bx  lr    
 8003bda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003bdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003be4:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 8003be8:	0800f1f8 	.word	0x0800f1f8
  ldr r2, =_sbss
 8003bec:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8003bf0:	20001a44 	.word	0x20001a44

08003bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bf4:	e7fe      	b.n	8003bf4 <ADC_IRQHandler>
	...

08003bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8003c38 <HAL_Init+0x40>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a0d      	ldr	r2, [pc, #52]	@ (8003c38 <HAL_Init+0x40>)
 8003c02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c08:	4b0b      	ldr	r3, [pc, #44]	@ (8003c38 <HAL_Init+0x40>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8003c38 <HAL_Init+0x40>)
 8003c0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c14:	4b08      	ldr	r3, [pc, #32]	@ (8003c38 <HAL_Init+0x40>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a07      	ldr	r2, [pc, #28]	@ (8003c38 <HAL_Init+0x40>)
 8003c1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c20:	2003      	movs	r0, #3
 8003c22:	f000 fd41 	bl	80046a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c26:	200f      	movs	r0, #15
 8003c28:	f000 f808 	bl	8003c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c2c:	f7ff fd22 	bl	8003674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40023c00 	.word	0x40023c00

08003c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c44:	4b12      	ldr	r3, [pc, #72]	@ (8003c90 <HAL_InitTick+0x54>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <HAL_InitTick+0x58>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fd59 	bl	8004712 <HAL_SYSTICK_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e00e      	b.n	8003c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b0f      	cmp	r3, #15
 8003c6e:	d80a      	bhi.n	8003c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c70:	2200      	movs	r2, #0
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	f04f 30ff 	mov.w	r0, #4294967295
 8003c78:	f000 fd21 	bl	80046be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c7c:	4a06      	ldr	r2, [pc, #24]	@ (8003c98 <HAL_InitTick+0x5c>)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	e000      	b.n	8003c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	20000208 	.word	0x20000208
 8003c94:	20000228 	.word	0x20000228
 8003c98:	20000224 	.word	0x20000224

08003c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ca0:	4b06      	ldr	r3, [pc, #24]	@ (8003cbc <HAL_IncTick+0x20>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b06      	ldr	r3, [pc, #24]	@ (8003cc0 <HAL_IncTick+0x24>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4413      	add	r3, r2
 8003cac:	4a04      	ldr	r2, [pc, #16]	@ (8003cc0 <HAL_IncTick+0x24>)
 8003cae:	6013      	str	r3, [r2, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000228 	.word	0x20000228
 8003cc0:	2000154c 	.word	0x2000154c

08003cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8003cc8:	4b03      	ldr	r3, [pc, #12]	@ (8003cd8 <HAL_GetTick+0x14>)
 8003cca:	681b      	ldr	r3, [r3, #0]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	2000154c 	.word	0x2000154c

08003cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ce4:	f7ff ffee 	bl	8003cc4 <HAL_GetTick>
 8003ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf4:	d005      	beq.n	8003d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d20 <HAL_Delay+0x44>)
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d02:	bf00      	nop
 8003d04:	f7ff ffde 	bl	8003cc4 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d8f7      	bhi.n	8003d04 <HAL_Delay+0x28>
  {
  }
}
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000228 	.word	0x20000228

08003d24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e033      	b.n	8003da2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff fcbe 	bl	80036c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d118      	bne.n	8003d94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003d6a:	f023 0302 	bic.w	r3, r3, #2
 8003d6e:	f043 0202 	orr.w	r2, r3, #2
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 faca 	bl	8004310 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d86:	f023 0303 	bic.w	r3, r3, #3
 8003d8a:	f043 0201 	orr.w	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d92:	e001      	b.n	8003d98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_ADC_Start+0x1a>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e097      	b.n	8003ef6 <HAL_ADC_Start+0x14a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d018      	beq.n	8003e0e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003dec:	4b45      	ldr	r3, [pc, #276]	@ (8003f04 <HAL_ADC_Start+0x158>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a45      	ldr	r2, [pc, #276]	@ (8003f08 <HAL_ADC_Start+0x15c>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	0c9a      	lsrs	r2, r3, #18
 8003df8:	4613      	mov	r3, r2
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	4413      	add	r3, r2
 8003dfe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003e00:	e002      	b.n	8003e08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	3b01      	subs	r3, #1
 8003e06:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f9      	bne.n	8003e02 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d15f      	bne.n	8003edc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e20:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d007      	beq.n	8003e4e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003e46:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e5a:	d106      	bne.n	8003e6a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e60:	f023 0206 	bic.w	r2, r3, #6
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	645a      	str	r2, [r3, #68]	@ 0x44
 8003e68:	e002      	b.n	8003e70 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e78:	4b24      	ldr	r3, [pc, #144]	@ (8003f0c <HAL_ADC_Start+0x160>)
 8003e7a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003e84:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 031f 	and.w	r3, r3, #31
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10f      	bne.n	8003eb2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d129      	bne.n	8003ef4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	e020      	b.n	8003ef4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a16      	ldr	r2, [pc, #88]	@ (8003f10 <HAL_ADC_Start+0x164>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d11b      	bne.n	8003ef4 <HAL_ADC_Start+0x148>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d114      	bne.n	8003ef4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003ed8:	609a      	str	r2, [r3, #8]
 8003eda:	e00b      	b.n	8003ef4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	f043 0210 	orr.w	r2, r3, #16
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eec:	f043 0201 	orr.w	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	20000208 	.word	0x20000208
 8003f08:	431bde83 	.word	0x431bde83
 8003f0c:	40012300 	.word	0x40012300
 8003f10:	40012000 	.word	0x40012000

08003f14 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_ADC_Stop+0x16>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e021      	b.n	8003f6e <HAL_ADC_Stop+0x5a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0201 	bic.w	r2, r2, #1
 8003f40:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d109      	bne.n	8003f64 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f54:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003f58:	f023 0301 	bic.w	r3, r3, #1
 8003f5c:	f043 0201 	orr.w	r2, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f96:	d113      	bne.n	8003fc0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fa6:	d10b      	bne.n	8003fc0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fac:	f043 0220 	orr.w	r2, r3, #32
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e063      	b.n	8004088 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fc0:	f7ff fe80 	bl	8003cc4 <HAL_GetTick>
 8003fc4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003fc6:	e021      	b.n	800400c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fce:	d01d      	beq.n	800400c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d007      	beq.n	8003fe6 <HAL_ADC_PollForConversion+0x6c>
 8003fd6:	f7ff fe75 	bl	8003cc4 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d212      	bcs.n	800400c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d00b      	beq.n	800400c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	f043 0204 	orr.w	r2, r3, #4
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e03d      	b.n	8004088 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b02      	cmp	r3, #2
 8004018:	d1d6      	bne.n	8003fc8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f06f 0212 	mvn.w	r2, #18
 8004022:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d123      	bne.n	8004086 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004042:	2b00      	cmp	r3, #0
 8004044:	d11f      	bne.n	8004086 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004050:	2b00      	cmp	r3, #0
 8004052:	d006      	beq.n	8004062 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800405e:	2b00      	cmp	r3, #0
 8004060:	d111      	bne.n	8004086 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004072:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d105      	bne.n	8004086 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	f043 0201 	orr.w	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800409e:	4618      	mov	r0, r3
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
	...

080040ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x1c>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e113      	b.n	80042f0 <HAL_ADC_ConfigChannel+0x244>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b09      	cmp	r3, #9
 80040d6:	d925      	bls.n	8004124 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68d9      	ldr	r1, [r3, #12]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	4613      	mov	r3, r2
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	4413      	add	r3, r2
 80040ec:	3b1e      	subs	r3, #30
 80040ee:	2207      	movs	r2, #7
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	43da      	mvns	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	400a      	ands	r2, r1
 80040fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68d9      	ldr	r1, [r3, #12]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	b29b      	uxth	r3, r3
 800410e:	4618      	mov	r0, r3
 8004110:	4603      	mov	r3, r0
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	4403      	add	r3, r0
 8004116:	3b1e      	subs	r3, #30
 8004118:	409a      	lsls	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	60da      	str	r2, [r3, #12]
 8004122:	e022      	b.n	800416a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6919      	ldr	r1, [r3, #16]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	b29b      	uxth	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	4613      	mov	r3, r2
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	4413      	add	r3, r2
 8004138:	2207      	movs	r2, #7
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	43da      	mvns	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	400a      	ands	r2, r1
 8004146:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6919      	ldr	r1, [r3, #16]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	b29b      	uxth	r3, r3
 8004158:	4618      	mov	r0, r3
 800415a:	4603      	mov	r3, r0
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	4403      	add	r3, r0
 8004160:	409a      	lsls	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b06      	cmp	r3, #6
 8004170:	d824      	bhi.n	80041bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	4613      	mov	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	3b05      	subs	r3, #5
 8004184:	221f      	movs	r2, #31
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43da      	mvns	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	400a      	ands	r2, r1
 8004192:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	4618      	mov	r0, r3
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	4613      	mov	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	3b05      	subs	r3, #5
 80041ae:	fa00 f203 	lsl.w	r2, r0, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80041ba:	e04c      	b.n	8004256 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b0c      	cmp	r3, #12
 80041c2:	d824      	bhi.n	800420e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	3b23      	subs	r3, #35	@ 0x23
 80041d6:	221f      	movs	r2, #31
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43da      	mvns	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	400a      	ands	r2, r1
 80041e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	4618      	mov	r0, r3
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	4613      	mov	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	3b23      	subs	r3, #35	@ 0x23
 8004200:	fa00 f203 	lsl.w	r2, r0, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	631a      	str	r2, [r3, #48]	@ 0x30
 800420c:	e023      	b.n	8004256 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	3b41      	subs	r3, #65	@ 0x41
 8004220:	221f      	movs	r2, #31
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43da      	mvns	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	400a      	ands	r2, r1
 800422e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	b29b      	uxth	r3, r3
 800423c:	4618      	mov	r0, r3
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	4613      	mov	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	3b41      	subs	r3, #65	@ 0x41
 800424a:	fa00 f203 	lsl.w	r2, r0, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004256:	4b29      	ldr	r3, [pc, #164]	@ (80042fc <HAL_ADC_ConfigChannel+0x250>)
 8004258:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a28      	ldr	r2, [pc, #160]	@ (8004300 <HAL_ADC_ConfigChannel+0x254>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d10f      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x1d8>
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b12      	cmp	r3, #18
 800426a:	d10b      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1d      	ldr	r2, [pc, #116]	@ (8004300 <HAL_ADC_ConfigChannel+0x254>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d12b      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x23a>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1c      	ldr	r2, [pc, #112]	@ (8004304 <HAL_ADC_ConfigChannel+0x258>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d003      	beq.n	80042a0 <HAL_ADC_ConfigChannel+0x1f4>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b11      	cmp	r3, #17
 800429e:	d122      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a11      	ldr	r2, [pc, #68]	@ (8004304 <HAL_ADC_ConfigChannel+0x258>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d111      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042c2:	4b11      	ldr	r3, [pc, #68]	@ (8004308 <HAL_ADC_ConfigChannel+0x25c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a11      	ldr	r2, [pc, #68]	@ (800430c <HAL_ADC_ConfigChannel+0x260>)
 80042c8:	fba2 2303 	umull	r2, r3, r2, r3
 80042cc:	0c9a      	lsrs	r2, r3, #18
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80042d8:	e002      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	3b01      	subs	r3, #1
 80042de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f9      	bne.n	80042da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	40012300 	.word	0x40012300
 8004300:	40012000 	.word	0x40012000
 8004304:	10000012 	.word	0x10000012
 8004308:	20000208 	.word	0x20000208
 800430c:	431bde83 	.word	0x431bde83

08004310 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004318:	4b79      	ldr	r3, [pc, #484]	@ (8004500 <ADC_Init+0x1f0>)
 800431a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	431a      	orrs	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004344:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6859      	ldr	r1, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	021a      	lsls	r2, r3, #8
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004368:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6859      	ldr	r1, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800438a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6899      	ldr	r1, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a2:	4a58      	ldr	r2, [pc, #352]	@ (8004504 <ADC_Init+0x1f4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d022      	beq.n	80043ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80043b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6899      	ldr	r1, [r3, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80043d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6899      	ldr	r1, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	e00f      	b.n	800440e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80043fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800440c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0202 	bic.w	r2, r2, #2
 800441c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6899      	ldr	r1, [r3, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	7e1b      	ldrb	r3, [r3, #24]
 8004428:	005a      	lsls	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01b      	beq.n	8004474 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800444a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800445a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6859      	ldr	r1, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	3b01      	subs	r3, #1
 8004468:	035a      	lsls	r2, r3, #13
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
 8004472:	e007      	b.n	8004484 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004482:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004492:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	3b01      	subs	r3, #1
 80044a0:	051a      	lsls	r2, r3, #20
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80044b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6899      	ldr	r1, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80044c6:	025a      	lsls	r2, r3, #9
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6899      	ldr	r1, [r3, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	029a      	lsls	r2, r3, #10
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	609a      	str	r2, [r3, #8]
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	40012300 	.word	0x40012300
 8004504:	0f000001 	.word	0x0f000001

08004508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004518:	4b0c      	ldr	r3, [pc, #48]	@ (800454c <__NVIC_SetPriorityGrouping+0x44>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004524:	4013      	ands	r3, r2
 8004526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004530:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004534:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800453a:	4a04      	ldr	r2, [pc, #16]	@ (800454c <__NVIC_SetPriorityGrouping+0x44>)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	60d3      	str	r3, [r2, #12]
}
 8004540:	bf00      	nop
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	e000ed00 	.word	0xe000ed00

08004550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004554:	4b04      	ldr	r3, [pc, #16]	@ (8004568 <__NVIC_GetPriorityGrouping+0x18>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	0a1b      	lsrs	r3, r3, #8
 800455a:	f003 0307 	and.w	r3, r3, #7
}
 800455e:	4618      	mov	r0, r3
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	e000ed00 	.word	0xe000ed00

0800456c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457a:	2b00      	cmp	r3, #0
 800457c:	db0b      	blt.n	8004596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	f003 021f 	and.w	r2, r3, #31
 8004584:	4907      	ldr	r1, [pc, #28]	@ (80045a4 <__NVIC_EnableIRQ+0x38>)
 8004586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	2001      	movs	r0, #1
 800458e:	fa00 f202 	lsl.w	r2, r0, r2
 8004592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	e000e100 	.word	0xe000e100

080045a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	6039      	str	r1, [r7, #0]
 80045b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	db0a      	blt.n	80045d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	490c      	ldr	r1, [pc, #48]	@ (80045f4 <__NVIC_SetPriority+0x4c>)
 80045c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c6:	0112      	lsls	r2, r2, #4
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	440b      	add	r3, r1
 80045cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045d0:	e00a      	b.n	80045e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	4908      	ldr	r1, [pc, #32]	@ (80045f8 <__NVIC_SetPriority+0x50>)
 80045d8:	79fb      	ldrb	r3, [r7, #7]
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	3b04      	subs	r3, #4
 80045e0:	0112      	lsls	r2, r2, #4
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	440b      	add	r3, r1
 80045e6:	761a      	strb	r2, [r3, #24]
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	e000e100 	.word	0xe000e100
 80045f8:	e000ed00 	.word	0xe000ed00

080045fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b089      	sub	sp, #36	@ 0x24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f1c3 0307 	rsb	r3, r3, #7
 8004616:	2b04      	cmp	r3, #4
 8004618:	bf28      	it	cs
 800461a:	2304      	movcs	r3, #4
 800461c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	3304      	adds	r3, #4
 8004622:	2b06      	cmp	r3, #6
 8004624:	d902      	bls.n	800462c <NVIC_EncodePriority+0x30>
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	3b03      	subs	r3, #3
 800462a:	e000      	b.n	800462e <NVIC_EncodePriority+0x32>
 800462c:	2300      	movs	r3, #0
 800462e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004630:	f04f 32ff 	mov.w	r2, #4294967295
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	43da      	mvns	r2, r3
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	401a      	ands	r2, r3
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004644:	f04f 31ff 	mov.w	r1, #4294967295
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	fa01 f303 	lsl.w	r3, r1, r3
 800464e:	43d9      	mvns	r1, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004654:	4313      	orrs	r3, r2
         );
}
 8004656:	4618      	mov	r0, r3
 8004658:	3724      	adds	r7, #36	@ 0x24
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
	...

08004664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3b01      	subs	r3, #1
 8004670:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004674:	d301      	bcc.n	800467a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004676:	2301      	movs	r3, #1
 8004678:	e00f      	b.n	800469a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800467a:	4a0a      	ldr	r2, [pc, #40]	@ (80046a4 <SysTick_Config+0x40>)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3b01      	subs	r3, #1
 8004680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004682:	210f      	movs	r1, #15
 8004684:	f04f 30ff 	mov.w	r0, #4294967295
 8004688:	f7ff ff8e 	bl	80045a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800468c:	4b05      	ldr	r3, [pc, #20]	@ (80046a4 <SysTick_Config+0x40>)
 800468e:	2200      	movs	r2, #0
 8004690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004692:	4b04      	ldr	r3, [pc, #16]	@ (80046a4 <SysTick_Config+0x40>)
 8004694:	2207      	movs	r2, #7
 8004696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	e000e010 	.word	0xe000e010

080046a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff ff29 	bl	8004508 <__NVIC_SetPriorityGrouping>
}
 80046b6:	bf00      	nop
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046be:	b580      	push	{r7, lr}
 80046c0:	b086      	sub	sp, #24
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	4603      	mov	r3, r0
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
 80046ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046d0:	f7ff ff3e 	bl	8004550 <__NVIC_GetPriorityGrouping>
 80046d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	6978      	ldr	r0, [r7, #20]
 80046dc:	f7ff ff8e 	bl	80045fc <NVIC_EncodePriority>
 80046e0:	4602      	mov	r2, r0
 80046e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046e6:	4611      	mov	r1, r2
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff ff5d 	bl	80045a8 <__NVIC_SetPriority>
}
 80046ee:	bf00      	nop
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b082      	sub	sp, #8
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	4603      	mov	r3, r0
 80046fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff ff31 	bl	800456c <__NVIC_EnableIRQ>
}
 800470a:	bf00      	nop
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7ff ffa2 	bl	8004664 <SysTick_Config>
 8004720:	4603      	mov	r3, r0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800473e:	4b23      	ldr	r3, [pc, #140]	@ (80047cc <HAL_FLASH_Program+0xa0>)
 8004740:	7e1b      	ldrb	r3, [r3, #24]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d101      	bne.n	800474a <HAL_FLASH_Program+0x1e>
 8004746:	2302      	movs	r3, #2
 8004748:	e03b      	b.n	80047c2 <HAL_FLASH_Program+0x96>
 800474a:	4b20      	ldr	r3, [pc, #128]	@ (80047cc <HAL_FLASH_Program+0xa0>)
 800474c:	2201      	movs	r2, #1
 800474e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004750:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004754:	f000 f870 	bl	8004838 <FLASH_WaitForLastOperation>
 8004758:	4603      	mov	r3, r0
 800475a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800475c:	7dfb      	ldrb	r3, [r7, #23]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d12b      	bne.n	80047ba <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d105      	bne.n	8004774 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004768:	783b      	ldrb	r3, [r7, #0]
 800476a:	4619      	mov	r1, r3
 800476c:	68b8      	ldr	r0, [r7, #8]
 800476e:	f000 f91b 	bl	80049a8 <FLASH_Program_Byte>
 8004772:	e016      	b.n	80047a2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d105      	bne.n	8004786 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800477a:	883b      	ldrh	r3, [r7, #0]
 800477c:	4619      	mov	r1, r3
 800477e:	68b8      	ldr	r0, [r7, #8]
 8004780:	f000 f8ee 	bl	8004960 <FLASH_Program_HalfWord>
 8004784:	e00d      	b.n	80047a2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d105      	bne.n	8004798 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	4619      	mov	r1, r3
 8004790:	68b8      	ldr	r0, [r7, #8]
 8004792:	f000 f8c3 	bl	800491c <FLASH_Program_Word>
 8004796:	e004      	b.n	80047a2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800479c:	68b8      	ldr	r0, [r7, #8]
 800479e:	f000 f88b 	bl	80048b8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80047a2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80047a6:	f000 f847 	bl	8004838 <FLASH_WaitForLastOperation>
 80047aa:	4603      	mov	r3, r0
 80047ac:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80047ae:	4b08      	ldr	r3, [pc, #32]	@ (80047d0 <HAL_FLASH_Program+0xa4>)
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	4a07      	ldr	r2, [pc, #28]	@ (80047d0 <HAL_FLASH_Program+0xa4>)
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80047ba:	4b04      	ldr	r3, [pc, #16]	@ (80047cc <HAL_FLASH_Program+0xa0>)
 80047bc:	2200      	movs	r2, #0
 80047be:	761a      	strb	r2, [r3, #24]
  
  return status;
 80047c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20001550 	.word	0x20001550
 80047d0:	40023c00 	.word	0x40023c00

080047d4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80047de:	4b0b      	ldr	r3, [pc, #44]	@ (800480c <HAL_FLASH_Unlock+0x38>)
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	da0b      	bge.n	80047fe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80047e6:	4b09      	ldr	r3, [pc, #36]	@ (800480c <HAL_FLASH_Unlock+0x38>)
 80047e8:	4a09      	ldr	r2, [pc, #36]	@ (8004810 <HAL_FLASH_Unlock+0x3c>)
 80047ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80047ec:	4b07      	ldr	r3, [pc, #28]	@ (800480c <HAL_FLASH_Unlock+0x38>)
 80047ee:	4a09      	ldr	r2, [pc, #36]	@ (8004814 <HAL_FLASH_Unlock+0x40>)
 80047f0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80047f2:	4b06      	ldr	r3, [pc, #24]	@ (800480c <HAL_FLASH_Unlock+0x38>)
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	da01      	bge.n	80047fe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80047fe:	79fb      	ldrb	r3, [r7, #7]
}
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	40023c00 	.word	0x40023c00
 8004810:	45670123 	.word	0x45670123
 8004814:	cdef89ab 	.word	0xcdef89ab

08004818 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800481c:	4b05      	ldr	r3, [pc, #20]	@ (8004834 <HAL_FLASH_Lock+0x1c>)
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	4a04      	ldr	r2, [pc, #16]	@ (8004834 <HAL_FLASH_Lock+0x1c>)
 8004822:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004826:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	40023c00 	.word	0x40023c00

08004838 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004844:	4b1a      	ldr	r3, [pc, #104]	@ (80048b0 <FLASH_WaitForLastOperation+0x78>)
 8004846:	2200      	movs	r2, #0
 8004848:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800484a:	f7ff fa3b 	bl	8003cc4 <HAL_GetTick>
 800484e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004850:	e010      	b.n	8004874 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004858:	d00c      	beq.n	8004874 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <FLASH_WaitForLastOperation+0x38>
 8004860:	f7ff fa30 	bl	8003cc4 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	429a      	cmp	r2, r3
 800486e:	d201      	bcs.n	8004874 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e019      	b.n	80048a8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004874:	4b0f      	ldr	r3, [pc, #60]	@ (80048b4 <FLASH_WaitForLastOperation+0x7c>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1e8      	bne.n	8004852 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004880:	4b0c      	ldr	r3, [pc, #48]	@ (80048b4 <FLASH_WaitForLastOperation+0x7c>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800488c:	4b09      	ldr	r3, [pc, #36]	@ (80048b4 <FLASH_WaitForLastOperation+0x7c>)
 800488e:	2201      	movs	r2, #1
 8004890:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004892:	4b08      	ldr	r3, [pc, #32]	@ (80048b4 <FLASH_WaitForLastOperation+0x7c>)
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800489e:	f000 f8a5 	bl	80049ec <FLASH_SetErrorCode>
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
  
}  
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	20001550 	.word	0x20001550
 80048b4:	40023c00 	.word	0x40023c00

080048b8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80048c4:	4b14      	ldr	r3, [pc, #80]	@ (8004918 <FLASH_Program_DoubleWord+0x60>)
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	4a13      	ldr	r2, [pc, #76]	@ (8004918 <FLASH_Program_DoubleWord+0x60>)
 80048ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80048d0:	4b11      	ldr	r3, [pc, #68]	@ (8004918 <FLASH_Program_DoubleWord+0x60>)
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	4a10      	ldr	r2, [pc, #64]	@ (8004918 <FLASH_Program_DoubleWord+0x60>)
 80048d6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80048da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80048dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004918 <FLASH_Program_DoubleWord+0x60>)
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004918 <FLASH_Program_DoubleWord+0x60>)
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80048ee:	f3bf 8f6f 	isb	sy
}
 80048f2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80048f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	000a      	movs	r2, r1
 8004902:	2300      	movs	r3, #0
 8004904:	68f9      	ldr	r1, [r7, #12]
 8004906:	3104      	adds	r1, #4
 8004908:	4613      	mov	r3, r2
 800490a:	600b      	str	r3, [r1, #0]
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	40023c00 	.word	0x40023c00

0800491c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004926:	4b0d      	ldr	r3, [pc, #52]	@ (800495c <FLASH_Program_Word+0x40>)
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	4a0c      	ldr	r2, [pc, #48]	@ (800495c <FLASH_Program_Word+0x40>)
 800492c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004930:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004932:	4b0a      	ldr	r3, [pc, #40]	@ (800495c <FLASH_Program_Word+0x40>)
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	4a09      	ldr	r2, [pc, #36]	@ (800495c <FLASH_Program_Word+0x40>)
 8004938:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800493c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800493e:	4b07      	ldr	r3, [pc, #28]	@ (800495c <FLASH_Program_Word+0x40>)
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	4a06      	ldr	r2, [pc, #24]	@ (800495c <FLASH_Program_Word+0x40>)
 8004944:	f043 0301 	orr.w	r3, r3, #1
 8004948:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	601a      	str	r2, [r3, #0]
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	40023c00 	.word	0x40023c00

08004960 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800496c:	4b0d      	ldr	r3, [pc, #52]	@ (80049a4 <FLASH_Program_HalfWord+0x44>)
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	4a0c      	ldr	r2, [pc, #48]	@ (80049a4 <FLASH_Program_HalfWord+0x44>)
 8004972:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004976:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004978:	4b0a      	ldr	r3, [pc, #40]	@ (80049a4 <FLASH_Program_HalfWord+0x44>)
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	4a09      	ldr	r2, [pc, #36]	@ (80049a4 <FLASH_Program_HalfWord+0x44>)
 800497e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004982:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004984:	4b07      	ldr	r3, [pc, #28]	@ (80049a4 <FLASH_Program_HalfWord+0x44>)
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	4a06      	ldr	r2, [pc, #24]	@ (80049a4 <FLASH_Program_HalfWord+0x44>)
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	887a      	ldrh	r2, [r7, #2]
 8004994:	801a      	strh	r2, [r3, #0]
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40023c00 	.word	0x40023c00

080049a8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80049b4:	4b0c      	ldr	r3, [pc, #48]	@ (80049e8 <FLASH_Program_Byte+0x40>)
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	4a0b      	ldr	r2, [pc, #44]	@ (80049e8 <FLASH_Program_Byte+0x40>)
 80049ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80049c0:	4b09      	ldr	r3, [pc, #36]	@ (80049e8 <FLASH_Program_Byte+0x40>)
 80049c2:	4a09      	ldr	r2, [pc, #36]	@ (80049e8 <FLASH_Program_Byte+0x40>)
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80049c8:	4b07      	ldr	r3, [pc, #28]	@ (80049e8 <FLASH_Program_Byte+0x40>)
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	4a06      	ldr	r2, [pc, #24]	@ (80049e8 <FLASH_Program_Byte+0x40>)
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	78fa      	ldrb	r2, [r7, #3]
 80049d8:	701a      	strb	r2, [r3, #0]
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40023c00 	.word	0x40023c00

080049ec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80049f0:	4b2f      	ldr	r3, [pc, #188]	@ (8004ab0 <FLASH_SetErrorCode+0xc4>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d008      	beq.n	8004a0e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80049fc:	4b2d      	ldr	r3, [pc, #180]	@ (8004ab4 <FLASH_SetErrorCode+0xc8>)
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	f043 0310 	orr.w	r3, r3, #16
 8004a04:	4a2b      	ldr	r2, [pc, #172]	@ (8004ab4 <FLASH_SetErrorCode+0xc8>)
 8004a06:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004a08:	4b29      	ldr	r3, [pc, #164]	@ (8004ab0 <FLASH_SetErrorCode+0xc4>)
 8004a0a:	2210      	movs	r2, #16
 8004a0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004a0e:	4b28      	ldr	r3, [pc, #160]	@ (8004ab0 <FLASH_SetErrorCode+0xc4>)
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d008      	beq.n	8004a2c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004a1a:	4b26      	ldr	r3, [pc, #152]	@ (8004ab4 <FLASH_SetErrorCode+0xc8>)
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f043 0308 	orr.w	r3, r3, #8
 8004a22:	4a24      	ldr	r2, [pc, #144]	@ (8004ab4 <FLASH_SetErrorCode+0xc8>)
 8004a24:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004a26:	4b22      	ldr	r3, [pc, #136]	@ (8004ab0 <FLASH_SetErrorCode+0xc4>)
 8004a28:	2220      	movs	r2, #32
 8004a2a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004a2c:	4b20      	ldr	r3, [pc, #128]	@ (8004ab0 <FLASH_SetErrorCode+0xc4>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004a38:	4b1e      	ldr	r3, [pc, #120]	@ (8004ab4 <FLASH_SetErrorCode+0xc8>)
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	f043 0304 	orr.w	r3, r3, #4
 8004a40:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab4 <FLASH_SetErrorCode+0xc8>)
 8004a42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004a44:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab0 <FLASH_SetErrorCode+0xc4>)
 8004a46:	2240      	movs	r2, #64	@ 0x40
 8004a48:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004a4a:	4b19      	ldr	r3, [pc, #100]	@ (8004ab0 <FLASH_SetErrorCode+0xc4>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d008      	beq.n	8004a68 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004a56:	4b17      	ldr	r3, [pc, #92]	@ (8004ab4 <FLASH_SetErrorCode+0xc8>)
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	f043 0302 	orr.w	r3, r3, #2
 8004a5e:	4a15      	ldr	r2, [pc, #84]	@ (8004ab4 <FLASH_SetErrorCode+0xc8>)
 8004a60:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004a62:	4b13      	ldr	r3, [pc, #76]	@ (8004ab0 <FLASH_SetErrorCode+0xc4>)
 8004a64:	2280      	movs	r2, #128	@ 0x80
 8004a66:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004a68:	4b11      	ldr	r3, [pc, #68]	@ (8004ab0 <FLASH_SetErrorCode+0xc4>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d009      	beq.n	8004a88 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004a74:	4b0f      	ldr	r3, [pc, #60]	@ (8004ab4 <FLASH_SetErrorCode+0xc8>)
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8004ab4 <FLASH_SetErrorCode+0xc8>)
 8004a7e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004a80:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab0 <FLASH_SetErrorCode+0xc4>)
 8004a82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a86:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004a88:	4b09      	ldr	r3, [pc, #36]	@ (8004ab0 <FLASH_SetErrorCode+0xc4>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d008      	beq.n	8004aa6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004a94:	4b07      	ldr	r3, [pc, #28]	@ (8004ab4 <FLASH_SetErrorCode+0xc8>)
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	f043 0320 	orr.w	r3, r3, #32
 8004a9c:	4a05      	ldr	r2, [pc, #20]	@ (8004ab4 <FLASH_SetErrorCode+0xc8>)
 8004a9e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004aa0:	4b03      	ldr	r3, [pc, #12]	@ (8004ab0 <FLASH_SetErrorCode+0xc4>)
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	60da      	str	r2, [r3, #12]
  }
}
 8004aa6:	bf00      	nop
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	40023c00 	.word	0x40023c00
 8004ab4:	20001550 	.word	0x20001550

08004ab8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	e010      	b.n	8004af6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d103      	bne.n	8004ae2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004ada:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	e009      	b.n	8004af6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004ae2:	78fb      	ldrb	r3, [r7, #3]
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d103      	bne.n	8004af0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004ae8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	e002      	b.n	8004af6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004af0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004af4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004af6:	4b13      	ldr	r3, [pc, #76]	@ (8004b44 <FLASH_Erase_Sector+0x8c>)
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	4a12      	ldr	r2, [pc, #72]	@ (8004b44 <FLASH_Erase_Sector+0x8c>)
 8004afc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004b02:	4b10      	ldr	r3, [pc, #64]	@ (8004b44 <FLASH_Erase_Sector+0x8c>)
 8004b04:	691a      	ldr	r2, [r3, #16]
 8004b06:	490f      	ldr	r1, [pc, #60]	@ (8004b44 <FLASH_Erase_Sector+0x8c>)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b44 <FLASH_Erase_Sector+0x8c>)
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	4a0c      	ldr	r2, [pc, #48]	@ (8004b44 <FLASH_Erase_Sector+0x8c>)
 8004b14:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004b18:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b44 <FLASH_Erase_Sector+0x8c>)
 8004b1c:	691a      	ldr	r2, [r3, #16]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	4313      	orrs	r3, r2
 8004b24:	4a07      	ldr	r2, [pc, #28]	@ (8004b44 <FLASH_Erase_Sector+0x8c>)
 8004b26:	f043 0302 	orr.w	r3, r3, #2
 8004b2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004b2c:	4b05      	ldr	r3, [pc, #20]	@ (8004b44 <FLASH_Erase_Sector+0x8c>)
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	4a04      	ldr	r2, [pc, #16]	@ (8004b44 <FLASH_Erase_Sector+0x8c>)
 8004b32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b36:	6113      	str	r3, [r2, #16]
}
 8004b38:	bf00      	nop
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	40023c00 	.word	0x40023c00

08004b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b089      	sub	sp, #36	@ 0x24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
 8004b62:	e159      	b.n	8004e18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b64:	2201      	movs	r2, #1
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4013      	ands	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	f040 8148 	bne.w	8004e12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d005      	beq.n	8004b9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d130      	bne.n	8004bfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	2203      	movs	r2, #3
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	43db      	mvns	r3, r3
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	091b      	lsrs	r3, r3, #4
 8004be6:	f003 0201 	and.w	r2, r3, #1
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d017      	beq.n	8004c38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	2203      	movs	r2, #3
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f003 0303 	and.w	r3, r3, #3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d123      	bne.n	8004c8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	08da      	lsrs	r2, r3, #3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3208      	adds	r2, #8
 8004c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	220f      	movs	r2, #15
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	43db      	mvns	r3, r3
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	4013      	ands	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	691a      	ldr	r2, [r3, #16]
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	08da      	lsrs	r2, r3, #3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3208      	adds	r2, #8
 8004c86:	69b9      	ldr	r1, [r7, #24]
 8004c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	2203      	movs	r2, #3
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f003 0203 	and.w	r2, r3, #3
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 80a2 	beq.w	8004e12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	4b57      	ldr	r3, [pc, #348]	@ (8004e30 <HAL_GPIO_Init+0x2e8>)
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd6:	4a56      	ldr	r2, [pc, #344]	@ (8004e30 <HAL_GPIO_Init+0x2e8>)
 8004cd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004cde:	4b54      	ldr	r3, [pc, #336]	@ (8004e30 <HAL_GPIO_Init+0x2e8>)
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cea:	4a52      	ldr	r2, [pc, #328]	@ (8004e34 <HAL_GPIO_Init+0x2ec>)
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	089b      	lsrs	r3, r3, #2
 8004cf0:	3302      	adds	r3, #2
 8004cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	220f      	movs	r2, #15
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	43db      	mvns	r3, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a49      	ldr	r2, [pc, #292]	@ (8004e38 <HAL_GPIO_Init+0x2f0>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d019      	beq.n	8004d4a <HAL_GPIO_Init+0x202>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a48      	ldr	r2, [pc, #288]	@ (8004e3c <HAL_GPIO_Init+0x2f4>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d013      	beq.n	8004d46 <HAL_GPIO_Init+0x1fe>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a47      	ldr	r2, [pc, #284]	@ (8004e40 <HAL_GPIO_Init+0x2f8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00d      	beq.n	8004d42 <HAL_GPIO_Init+0x1fa>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a46      	ldr	r2, [pc, #280]	@ (8004e44 <HAL_GPIO_Init+0x2fc>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d007      	beq.n	8004d3e <HAL_GPIO_Init+0x1f6>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a45      	ldr	r2, [pc, #276]	@ (8004e48 <HAL_GPIO_Init+0x300>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d101      	bne.n	8004d3a <HAL_GPIO_Init+0x1f2>
 8004d36:	2304      	movs	r3, #4
 8004d38:	e008      	b.n	8004d4c <HAL_GPIO_Init+0x204>
 8004d3a:	2307      	movs	r3, #7
 8004d3c:	e006      	b.n	8004d4c <HAL_GPIO_Init+0x204>
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e004      	b.n	8004d4c <HAL_GPIO_Init+0x204>
 8004d42:	2302      	movs	r3, #2
 8004d44:	e002      	b.n	8004d4c <HAL_GPIO_Init+0x204>
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <HAL_GPIO_Init+0x204>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	69fa      	ldr	r2, [r7, #28]
 8004d4e:	f002 0203 	and.w	r2, r2, #3
 8004d52:	0092      	lsls	r2, r2, #2
 8004d54:	4093      	lsls	r3, r2
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d5c:	4935      	ldr	r1, [pc, #212]	@ (8004e34 <HAL_GPIO_Init+0x2ec>)
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	089b      	lsrs	r3, r3, #2
 8004d62:	3302      	adds	r3, #2
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d6a:	4b38      	ldr	r3, [pc, #224]	@ (8004e4c <HAL_GPIO_Init+0x304>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	43db      	mvns	r3, r3
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	4013      	ands	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d8e:	4a2f      	ldr	r2, [pc, #188]	@ (8004e4c <HAL_GPIO_Init+0x304>)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d94:	4b2d      	ldr	r3, [pc, #180]	@ (8004e4c <HAL_GPIO_Init+0x304>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	4013      	ands	r3, r2
 8004da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004db8:	4a24      	ldr	r2, [pc, #144]	@ (8004e4c <HAL_GPIO_Init+0x304>)
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004dbe:	4b23      	ldr	r3, [pc, #140]	@ (8004e4c <HAL_GPIO_Init+0x304>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004de2:	4a1a      	ldr	r2, [pc, #104]	@ (8004e4c <HAL_GPIO_Init+0x304>)
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004de8:	4b18      	ldr	r3, [pc, #96]	@ (8004e4c <HAL_GPIO_Init+0x304>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	43db      	mvns	r3, r3
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	4013      	ands	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8004e4c <HAL_GPIO_Init+0x304>)
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	3301      	adds	r3, #1
 8004e16:	61fb      	str	r3, [r7, #28]
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	2b0f      	cmp	r3, #15
 8004e1c:	f67f aea2 	bls.w	8004b64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e20:	bf00      	nop
 8004e22:	bf00      	nop
 8004e24:	3724      	adds	r7, #36	@ 0x24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40023800 	.word	0x40023800
 8004e34:	40013800 	.word	0x40013800
 8004e38:	40020000 	.word	0x40020000
 8004e3c:	40020400 	.word	0x40020400
 8004e40:	40020800 	.word	0x40020800
 8004e44:	40020c00 	.word	0x40020c00
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	40013c00 	.word	0x40013c00

08004e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	807b      	strh	r3, [r7, #2]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e60:	787b      	ldrb	r3, [r7, #1]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e66:	887a      	ldrh	r2, [r7, #2]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e6c:	e003      	b.n	8004e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e6e:	887b      	ldrh	r3, [r7, #2]
 8004e70:	041a      	lsls	r2, r3, #16
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	619a      	str	r2, [r3, #24]
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e12b      	b.n	80050ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fe fc4e 	bl	800374c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2224      	movs	r2, #36	@ 0x24
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0201 	bic.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ed6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ee6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ee8:	f001 f9b8 	bl	800625c <HAL_RCC_GetPCLK1Freq>
 8004eec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	4a81      	ldr	r2, [pc, #516]	@ (80050f8 <HAL_I2C_Init+0x274>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d807      	bhi.n	8004f08 <HAL_I2C_Init+0x84>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4a80      	ldr	r2, [pc, #512]	@ (80050fc <HAL_I2C_Init+0x278>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	bf94      	ite	ls
 8004f00:	2301      	movls	r3, #1
 8004f02:	2300      	movhi	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	e006      	b.n	8004f16 <HAL_I2C_Init+0x92>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4a7d      	ldr	r2, [pc, #500]	@ (8005100 <HAL_I2C_Init+0x27c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	bf94      	ite	ls
 8004f10:	2301      	movls	r3, #1
 8004f12:	2300      	movhi	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e0e7      	b.n	80050ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4a78      	ldr	r2, [pc, #480]	@ (8005104 <HAL_I2C_Init+0x280>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	0c9b      	lsrs	r3, r3, #18
 8004f28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	4a6a      	ldr	r2, [pc, #424]	@ (80050f8 <HAL_I2C_Init+0x274>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d802      	bhi.n	8004f58 <HAL_I2C_Init+0xd4>
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	3301      	adds	r3, #1
 8004f56:	e009      	b.n	8004f6c <HAL_I2C_Init+0xe8>
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004f5e:	fb02 f303 	mul.w	r3, r2, r3
 8004f62:	4a69      	ldr	r2, [pc, #420]	@ (8005108 <HAL_I2C_Init+0x284>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	099b      	lsrs	r3, r3, #6
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6812      	ldr	r2, [r2, #0]
 8004f70:	430b      	orrs	r3, r1
 8004f72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004f7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	495c      	ldr	r1, [pc, #368]	@ (80050f8 <HAL_I2C_Init+0x274>)
 8004f88:	428b      	cmp	r3, r1
 8004f8a:	d819      	bhi.n	8004fc0 <HAL_I2C_Init+0x13c>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	1e59      	subs	r1, r3, #1
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f9a:	1c59      	adds	r1, r3, #1
 8004f9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004fa0:	400b      	ands	r3, r1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <HAL_I2C_Init+0x138>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	1e59      	subs	r1, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fba:	e051      	b.n	8005060 <HAL_I2C_Init+0x1dc>
 8004fbc:	2304      	movs	r3, #4
 8004fbe:	e04f      	b.n	8005060 <HAL_I2C_Init+0x1dc>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d111      	bne.n	8004fec <HAL_I2C_Init+0x168>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	1e58      	subs	r0, r3, #1
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6859      	ldr	r1, [r3, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	440b      	add	r3, r1
 8004fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fda:	3301      	adds	r3, #1
 8004fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	bf0c      	ite	eq
 8004fe4:	2301      	moveq	r3, #1
 8004fe6:	2300      	movne	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	e012      	b.n	8005012 <HAL_I2C_Init+0x18e>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	1e58      	subs	r0, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6859      	ldr	r1, [r3, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	0099      	lsls	r1, r3, #2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005002:	3301      	adds	r3, #1
 8005004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005008:	2b00      	cmp	r3, #0
 800500a:	bf0c      	ite	eq
 800500c:	2301      	moveq	r3, #1
 800500e:	2300      	movne	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <HAL_I2C_Init+0x196>
 8005016:	2301      	movs	r3, #1
 8005018:	e022      	b.n	8005060 <HAL_I2C_Init+0x1dc>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10e      	bne.n	8005040 <HAL_I2C_Init+0x1bc>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	1e58      	subs	r0, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6859      	ldr	r1, [r3, #4]
 800502a:	460b      	mov	r3, r1
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	440b      	add	r3, r1
 8005030:	fbb0 f3f3 	udiv	r3, r0, r3
 8005034:	3301      	adds	r3, #1
 8005036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800503a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800503e:	e00f      	b.n	8005060 <HAL_I2C_Init+0x1dc>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	1e58      	subs	r0, r3, #1
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6859      	ldr	r1, [r3, #4]
 8005048:	460b      	mov	r3, r1
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	440b      	add	r3, r1
 800504e:	0099      	lsls	r1, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	fbb0 f3f3 	udiv	r3, r0, r3
 8005056:	3301      	adds	r3, #1
 8005058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800505c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	6809      	ldr	r1, [r1, #0]
 8005064:	4313      	orrs	r3, r2
 8005066:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69da      	ldr	r2, [r3, #28]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800508e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6911      	ldr	r1, [r2, #16]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	68d2      	ldr	r2, [r2, #12]
 800509a:	4311      	orrs	r1, r2
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6812      	ldr	r2, [r2, #0]
 80050a0:	430b      	orrs	r3, r1
 80050a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	695a      	ldr	r2, [r3, #20]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2220      	movs	r2, #32
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	000186a0 	.word	0x000186a0
 80050fc:	001e847f 	.word	0x001e847f
 8005100:	003d08ff 	.word	0x003d08ff
 8005104:	431bde83 	.word	0x431bde83
 8005108:	10624dd3 	.word	0x10624dd3

0800510c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	4608      	mov	r0, r1
 8005116:	4611      	mov	r1, r2
 8005118:	461a      	mov	r2, r3
 800511a:	4603      	mov	r3, r0
 800511c:	817b      	strh	r3, [r7, #10]
 800511e:	460b      	mov	r3, r1
 8005120:	813b      	strh	r3, [r7, #8]
 8005122:	4613      	mov	r3, r2
 8005124:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005126:	f7fe fdcd 	bl	8003cc4 <HAL_GetTick>
 800512a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b20      	cmp	r3, #32
 8005136:	f040 80d9 	bne.w	80052ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	2319      	movs	r3, #25
 8005140:	2201      	movs	r2, #1
 8005142:	496d      	ldr	r1, [pc, #436]	@ (80052f8 <HAL_I2C_Mem_Write+0x1ec>)
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 f971 	bl	800542c <I2C_WaitOnFlagUntilTimeout>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005150:	2302      	movs	r3, #2
 8005152:	e0cc      	b.n	80052ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800515a:	2b01      	cmp	r3, #1
 800515c:	d101      	bne.n	8005162 <HAL_I2C_Mem_Write+0x56>
 800515e:	2302      	movs	r3, #2
 8005160:	e0c5      	b.n	80052ee <HAL_I2C_Mem_Write+0x1e2>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b01      	cmp	r3, #1
 8005176:	d007      	beq.n	8005188 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005196:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2221      	movs	r2, #33	@ 0x21
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2240      	movs	r2, #64	@ 0x40
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a3a      	ldr	r2, [r7, #32]
 80051b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80051b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4a4d      	ldr	r2, [pc, #308]	@ (80052fc <HAL_I2C_Mem_Write+0x1f0>)
 80051c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051ca:	88f8      	ldrh	r0, [r7, #6]
 80051cc:	893a      	ldrh	r2, [r7, #8]
 80051ce:	8979      	ldrh	r1, [r7, #10]
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	9301      	str	r3, [sp, #4]
 80051d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	4603      	mov	r3, r0
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 f890 	bl	8005300 <I2C_RequestMemoryWrite>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d052      	beq.n	800528c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e081      	b.n	80052ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 fa36 	bl	8005660 <I2C_WaitOnTXEFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00d      	beq.n	8005216 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d107      	bne.n	8005212 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005210:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e06b      	b.n	80052ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521a:	781a      	ldrb	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b04      	cmp	r3, #4
 8005252:	d11b      	bne.n	800528c <HAL_I2C_Mem_Write+0x180>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005258:	2b00      	cmp	r3, #0
 800525a:	d017      	beq.n	800528c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005260:	781a      	ldrb	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1aa      	bne.n	80051ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 fa29 	bl	80056f0 <I2C_WaitOnBTFFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00d      	beq.n	80052c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	d107      	bne.n	80052bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e016      	b.n	80052ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	e000      	b.n	80052ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80052ec:	2302      	movs	r3, #2
  }
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	00100002 	.word	0x00100002
 80052fc:	ffff0000 	.word	0xffff0000

08005300 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af02      	add	r7, sp, #8
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	4608      	mov	r0, r1
 800530a:	4611      	mov	r1, r2
 800530c:	461a      	mov	r2, r3
 800530e:	4603      	mov	r3, r0
 8005310:	817b      	strh	r3, [r7, #10]
 8005312:	460b      	mov	r3, r1
 8005314:	813b      	strh	r3, [r7, #8]
 8005316:	4613      	mov	r3, r2
 8005318:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005328:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	2200      	movs	r2, #0
 8005332:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 f878 	bl	800542c <I2C_WaitOnFlagUntilTimeout>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00d      	beq.n	800535e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800534c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005350:	d103      	bne.n	800535a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005358:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e05f      	b.n	800541e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800535e:	897b      	ldrh	r3, [r7, #10]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	461a      	mov	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800536c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	6a3a      	ldr	r2, [r7, #32]
 8005372:	492d      	ldr	r1, [pc, #180]	@ (8005428 <I2C_RequestMemoryWrite+0x128>)
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 f8d3 	bl	8005520 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e04c      	b.n	800541e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005384:	2300      	movs	r3, #0
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800539a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800539c:	6a39      	ldr	r1, [r7, #32]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 f95e 	bl	8005660 <I2C_WaitOnTXEFlagUntilTimeout>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00d      	beq.n	80053c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d107      	bne.n	80053c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e02b      	b.n	800541e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053c6:	88fb      	ldrh	r3, [r7, #6]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d105      	bne.n	80053d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053cc:	893b      	ldrh	r3, [r7, #8]
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	611a      	str	r2, [r3, #16]
 80053d6:	e021      	b.n	800541c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053d8:	893b      	ldrh	r3, [r7, #8]
 80053da:	0a1b      	lsrs	r3, r3, #8
 80053dc:	b29b      	uxth	r3, r3
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053e8:	6a39      	ldr	r1, [r7, #32]
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 f938 	bl	8005660 <I2C_WaitOnTXEFlagUntilTimeout>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00d      	beq.n	8005412 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d107      	bne.n	800540e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800540c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e005      	b.n	800541e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005412:	893b      	ldrh	r3, [r7, #8]
 8005414:	b2da      	uxtb	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	00010002 	.word	0x00010002

0800542c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	4613      	mov	r3, r2
 800543a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800543c:	e048      	b.n	80054d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005444:	d044      	beq.n	80054d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005446:	f7fe fc3d 	bl	8003cc4 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d302      	bcc.n	800545c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d139      	bne.n	80054d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	0c1b      	lsrs	r3, r3, #16
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b01      	cmp	r3, #1
 8005464:	d10d      	bne.n	8005482 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	43da      	mvns	r2, r3
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	4013      	ands	r3, r2
 8005472:	b29b      	uxth	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	bf0c      	ite	eq
 8005478:	2301      	moveq	r3, #1
 800547a:	2300      	movne	r3, #0
 800547c:	b2db      	uxtb	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	e00c      	b.n	800549c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	43da      	mvns	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4013      	ands	r3, r2
 800548e:	b29b      	uxth	r3, r3
 8005490:	2b00      	cmp	r3, #0
 8005492:	bf0c      	ite	eq
 8005494:	2301      	moveq	r3, #1
 8005496:	2300      	movne	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	461a      	mov	r2, r3
 800549c:	79fb      	ldrb	r3, [r7, #7]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d116      	bne.n	80054d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054bc:	f043 0220 	orr.w	r2, r3, #32
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e023      	b.n	8005518 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	0c1b      	lsrs	r3, r3, #16
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d10d      	bne.n	80054f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	43da      	mvns	r2, r3
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	4013      	ands	r3, r2
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	bf0c      	ite	eq
 80054ec:	2301      	moveq	r3, #1
 80054ee:	2300      	movne	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	461a      	mov	r2, r3
 80054f4:	e00c      	b.n	8005510 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	43da      	mvns	r2, r3
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	4013      	ands	r3, r2
 8005502:	b29b      	uxth	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	bf0c      	ite	eq
 8005508:	2301      	moveq	r3, #1
 800550a:	2300      	movne	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	461a      	mov	r2, r3
 8005510:	79fb      	ldrb	r3, [r7, #7]
 8005512:	429a      	cmp	r2, r3
 8005514:	d093      	beq.n	800543e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800552e:	e071      	b.n	8005614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800553a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800553e:	d123      	bne.n	8005588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800554e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005558:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2220      	movs	r2, #32
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005574:	f043 0204 	orr.w	r2, r3, #4
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e067      	b.n	8005658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558e:	d041      	beq.n	8005614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005590:	f7fe fb98 	bl	8003cc4 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	429a      	cmp	r2, r3
 800559e:	d302      	bcc.n	80055a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d136      	bne.n	8005614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	0c1b      	lsrs	r3, r3, #16
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d10c      	bne.n	80055ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	43da      	mvns	r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4013      	ands	r3, r2
 80055bc:	b29b      	uxth	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	bf14      	ite	ne
 80055c2:	2301      	movne	r3, #1
 80055c4:	2300      	moveq	r3, #0
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	e00b      	b.n	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	43da      	mvns	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	4013      	ands	r3, r2
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bf14      	ite	ne
 80055dc:	2301      	movne	r3, #1
 80055de:	2300      	moveq	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d016      	beq.n	8005614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005600:	f043 0220 	orr.w	r2, r3, #32
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e021      	b.n	8005658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	0c1b      	lsrs	r3, r3, #16
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b01      	cmp	r3, #1
 800561c:	d10c      	bne.n	8005638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	43da      	mvns	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4013      	ands	r3, r2
 800562a:	b29b      	uxth	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	bf14      	ite	ne
 8005630:	2301      	movne	r3, #1
 8005632:	2300      	moveq	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	e00b      	b.n	8005650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	43da      	mvns	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4013      	ands	r3, r2
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	bf14      	ite	ne
 800564a:	2301      	movne	r3, #1
 800564c:	2300      	moveq	r3, #0
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	f47f af6d 	bne.w	8005530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800566c:	e034      	b.n	80056d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f886 	bl	8005780 <I2C_IsAcknowledgeFailed>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e034      	b.n	80056e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005684:	d028      	beq.n	80056d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005686:	f7fe fb1d 	bl	8003cc4 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	429a      	cmp	r2, r3
 8005694:	d302      	bcc.n	800569c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d11d      	bne.n	80056d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a6:	2b80      	cmp	r3, #128	@ 0x80
 80056a8:	d016      	beq.n	80056d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c4:	f043 0220 	orr.w	r2, r3, #32
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e007      	b.n	80056e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e2:	2b80      	cmp	r3, #128	@ 0x80
 80056e4:	d1c3      	bne.n	800566e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056fc:	e034      	b.n	8005768 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 f83e 	bl	8005780 <I2C_IsAcknowledgeFailed>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e034      	b.n	8005778 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005714:	d028      	beq.n	8005768 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005716:	f7fe fad5 	bl	8003cc4 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	429a      	cmp	r2, r3
 8005724:	d302      	bcc.n	800572c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d11d      	bne.n	8005768 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	f003 0304 	and.w	r3, r3, #4
 8005736:	2b04      	cmp	r3, #4
 8005738:	d016      	beq.n	8005768 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2220      	movs	r2, #32
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005754:	f043 0220 	orr.w	r2, r3, #32
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e007      	b.n	8005778 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	2b04      	cmp	r3, #4
 8005774:	d1c3      	bne.n	80056fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005796:	d11b      	bne.n	80057d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057bc:	f043 0204 	orr.w	r2, r3, #4
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e000      	b.n	80057d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b086      	sub	sp, #24
 80057e2:	af02      	add	r7, sp, #8
 80057e4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e101      	b.n	80059f4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d106      	bne.n	8005810 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fd ffe6 	bl	80037dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2203      	movs	r2, #3
 8005814:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800581e:	d102      	bne.n	8005826 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fd8e 	bl	800634c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6818      	ldr	r0, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	7c1a      	ldrb	r2, [r3, #16]
 8005838:	f88d 2000 	strb.w	r2, [sp]
 800583c:	3304      	adds	r3, #4
 800583e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005840:	f000 fd20 	bl	8006284 <USB_CoreInit>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d005      	beq.n	8005856 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2202      	movs	r2, #2
 800584e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e0ce      	b.n	80059f4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2100      	movs	r1, #0
 800585c:	4618      	mov	r0, r3
 800585e:	f000 fd86 	bl	800636e <USB_SetCurrentMode>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d005      	beq.n	8005874 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e0bf      	b.n	80059f4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005874:	2300      	movs	r3, #0
 8005876:	73fb      	strb	r3, [r7, #15]
 8005878:	e04a      	b.n	8005910 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800587a:	7bfa      	ldrb	r2, [r7, #15]
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	4613      	mov	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	4413      	add	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	440b      	add	r3, r1
 8005888:	3315      	adds	r3, #21
 800588a:	2201      	movs	r2, #1
 800588c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800588e:	7bfa      	ldrb	r2, [r7, #15]
 8005890:	6879      	ldr	r1, [r7, #4]
 8005892:	4613      	mov	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	3314      	adds	r3, #20
 800589e:	7bfa      	ldrb	r2, [r7, #15]
 80058a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80058a2:	7bfa      	ldrb	r2, [r7, #15]
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	b298      	uxth	r0, r3
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	4613      	mov	r3, r2
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	440b      	add	r3, r1
 80058b4:	332e      	adds	r3, #46	@ 0x2e
 80058b6:	4602      	mov	r2, r0
 80058b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80058ba:	7bfa      	ldrb	r2, [r7, #15]
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	4613      	mov	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	4413      	add	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	440b      	add	r3, r1
 80058c8:	3318      	adds	r3, #24
 80058ca:	2200      	movs	r2, #0
 80058cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80058ce:	7bfa      	ldrb	r2, [r7, #15]
 80058d0:	6879      	ldr	r1, [r7, #4]
 80058d2:	4613      	mov	r3, r2
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	4413      	add	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	440b      	add	r3, r1
 80058dc:	331c      	adds	r3, #28
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80058e2:	7bfa      	ldrb	r2, [r7, #15]
 80058e4:	6879      	ldr	r1, [r7, #4]
 80058e6:	4613      	mov	r3, r2
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	440b      	add	r3, r1
 80058f0:	3320      	adds	r3, #32
 80058f2:	2200      	movs	r2, #0
 80058f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80058f6:	7bfa      	ldrb	r2, [r7, #15]
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	4613      	mov	r3, r2
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	4413      	add	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	440b      	add	r3, r1
 8005904:	3324      	adds	r3, #36	@ 0x24
 8005906:	2200      	movs	r2, #0
 8005908:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	3301      	adds	r3, #1
 800590e:	73fb      	strb	r3, [r7, #15]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	791b      	ldrb	r3, [r3, #4]
 8005914:	7bfa      	ldrb	r2, [r7, #15]
 8005916:	429a      	cmp	r2, r3
 8005918:	d3af      	bcc.n	800587a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]
 800591e:	e044      	b.n	80059aa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005920:	7bfa      	ldrb	r2, [r7, #15]
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	4613      	mov	r3, r2
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	4413      	add	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	440b      	add	r3, r1
 800592e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005932:	2200      	movs	r2, #0
 8005934:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005936:	7bfa      	ldrb	r2, [r7, #15]
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	4613      	mov	r3, r2
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	4413      	add	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	440b      	add	r3, r1
 8005944:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005948:	7bfa      	ldrb	r2, [r7, #15]
 800594a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800594c:	7bfa      	ldrb	r2, [r7, #15]
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	4613      	mov	r3, r2
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	4413      	add	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	440b      	add	r3, r1
 800595a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800595e:	2200      	movs	r2, #0
 8005960:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005962:	7bfa      	ldrb	r2, [r7, #15]
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	4613      	mov	r3, r2
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	4413      	add	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	440b      	add	r3, r1
 8005970:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005974:	2200      	movs	r2, #0
 8005976:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005978:	7bfa      	ldrb	r2, [r7, #15]
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	4613      	mov	r3, r2
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	4413      	add	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	440b      	add	r3, r1
 8005986:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800598e:	7bfa      	ldrb	r2, [r7, #15]
 8005990:	6879      	ldr	r1, [r7, #4]
 8005992:	4613      	mov	r3, r2
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	440b      	add	r3, r1
 800599c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	3301      	adds	r3, #1
 80059a8:	73fb      	strb	r3, [r7, #15]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	791b      	ldrb	r3, [r3, #4]
 80059ae:	7bfa      	ldrb	r2, [r7, #15]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d3b5      	bcc.n	8005920 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	7c1a      	ldrb	r2, [r3, #16]
 80059bc:	f88d 2000 	strb.w	r2, [sp]
 80059c0:	3304      	adds	r3, #4
 80059c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059c4:	f000 fd20 	bl	8006408 <USB_DevInit>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d005      	beq.n	80059da <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2202      	movs	r2, #2
 80059d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e00c      	b.n	80059f4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fee8 	bl	80067c2 <USB_DevDisconnect>

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e267      	b.n	8005ede <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d075      	beq.n	8005b06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a1a:	4b88      	ldr	r3, [pc, #544]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 030c 	and.w	r3, r3, #12
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d00c      	beq.n	8005a40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a26:	4b85      	ldr	r3, [pc, #532]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a2e:	2b08      	cmp	r3, #8
 8005a30:	d112      	bne.n	8005a58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a32:	4b82      	ldr	r3, [pc, #520]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a3e:	d10b      	bne.n	8005a58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a40:	4b7e      	ldr	r3, [pc, #504]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d05b      	beq.n	8005b04 <HAL_RCC_OscConfig+0x108>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d157      	bne.n	8005b04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e242      	b.n	8005ede <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a60:	d106      	bne.n	8005a70 <HAL_RCC_OscConfig+0x74>
 8005a62:	4b76      	ldr	r3, [pc, #472]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a75      	ldr	r2, [pc, #468]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	e01d      	b.n	8005aac <HAL_RCC_OscConfig+0xb0>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a78:	d10c      	bne.n	8005a94 <HAL_RCC_OscConfig+0x98>
 8005a7a:	4b70      	ldr	r3, [pc, #448]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a6f      	ldr	r2, [pc, #444]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	4b6d      	ldr	r3, [pc, #436]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a6c      	ldr	r2, [pc, #432]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	e00b      	b.n	8005aac <HAL_RCC_OscConfig+0xb0>
 8005a94:	4b69      	ldr	r3, [pc, #420]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a68      	ldr	r2, [pc, #416]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005a9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	4b66      	ldr	r3, [pc, #408]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a65      	ldr	r2, [pc, #404]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005aa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d013      	beq.n	8005adc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab4:	f7fe f906 	bl	8003cc4 <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005abc:	f7fe f902 	bl	8003cc4 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b64      	cmp	r3, #100	@ 0x64
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e207      	b.n	8005ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ace:	4b5b      	ldr	r3, [pc, #364]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f0      	beq.n	8005abc <HAL_RCC_OscConfig+0xc0>
 8005ada:	e014      	b.n	8005b06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005adc:	f7fe f8f2 	bl	8003cc4 <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ae4:	f7fe f8ee 	bl	8003cc4 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b64      	cmp	r3, #100	@ 0x64
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e1f3      	b.n	8005ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005af6:	4b51      	ldr	r3, [pc, #324]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f0      	bne.n	8005ae4 <HAL_RCC_OscConfig+0xe8>
 8005b02:	e000      	b.n	8005b06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d063      	beq.n	8005bda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b12:	4b4a      	ldr	r3, [pc, #296]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f003 030c 	and.w	r3, r3, #12
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00b      	beq.n	8005b36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b1e:	4b47      	ldr	r3, [pc, #284]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d11c      	bne.n	8005b64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b2a:	4b44      	ldr	r3, [pc, #272]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d116      	bne.n	8005b64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b36:	4b41      	ldr	r3, [pc, #260]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d005      	beq.n	8005b4e <HAL_RCC_OscConfig+0x152>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d001      	beq.n	8005b4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e1c7      	b.n	8005ede <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	4937      	ldr	r1, [pc, #220]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b62:	e03a      	b.n	8005bda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d020      	beq.n	8005bae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b6c:	4b34      	ldr	r3, [pc, #208]	@ (8005c40 <HAL_RCC_OscConfig+0x244>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b72:	f7fe f8a7 	bl	8003cc4 <HAL_GetTick>
 8005b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b78:	e008      	b.n	8005b8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b7a:	f7fe f8a3 	bl	8003cc4 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e1a8      	b.n	8005ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0f0      	beq.n	8005b7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b98:	4b28      	ldr	r3, [pc, #160]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	4925      	ldr	r1, [pc, #148]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	600b      	str	r3, [r1, #0]
 8005bac:	e015      	b.n	8005bda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bae:	4b24      	ldr	r3, [pc, #144]	@ (8005c40 <HAL_RCC_OscConfig+0x244>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb4:	f7fe f886 	bl	8003cc4 <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bbc:	f7fe f882 	bl	8003cc4 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e187      	b.n	8005ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bce:	4b1b      	ldr	r3, [pc, #108]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1f0      	bne.n	8005bbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0308 	and.w	r3, r3, #8
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d036      	beq.n	8005c54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d016      	beq.n	8005c1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bee:	4b15      	ldr	r3, [pc, #84]	@ (8005c44 <HAL_RCC_OscConfig+0x248>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf4:	f7fe f866 	bl	8003cc4 <HAL_GetTick>
 8005bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bfc:	f7fe f862 	bl	8003cc4 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e167      	b.n	8005ede <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c3c <HAL_RCC_OscConfig+0x240>)
 8005c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0f0      	beq.n	8005bfc <HAL_RCC_OscConfig+0x200>
 8005c1a:	e01b      	b.n	8005c54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c1c:	4b09      	ldr	r3, [pc, #36]	@ (8005c44 <HAL_RCC_OscConfig+0x248>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c22:	f7fe f84f 	bl	8003cc4 <HAL_GetTick>
 8005c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c28:	e00e      	b.n	8005c48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c2a:	f7fe f84b 	bl	8003cc4 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d907      	bls.n	8005c48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e150      	b.n	8005ede <HAL_RCC_OscConfig+0x4e2>
 8005c3c:	40023800 	.word	0x40023800
 8005c40:	42470000 	.word	0x42470000
 8005c44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c48:	4b88      	ldr	r3, [pc, #544]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1ea      	bne.n	8005c2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 8097 	beq.w	8005d90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c62:	2300      	movs	r3, #0
 8005c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c66:	4b81      	ldr	r3, [pc, #516]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10f      	bne.n	8005c92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c72:	2300      	movs	r3, #0
 8005c74:	60bb      	str	r3, [r7, #8]
 8005c76:	4b7d      	ldr	r3, [pc, #500]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7a:	4a7c      	ldr	r2, [pc, #496]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c82:	4b7a      	ldr	r3, [pc, #488]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c8a:	60bb      	str	r3, [r7, #8]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c92:	4b77      	ldr	r3, [pc, #476]	@ (8005e70 <HAL_RCC_OscConfig+0x474>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d118      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c9e:	4b74      	ldr	r3, [pc, #464]	@ (8005e70 <HAL_RCC_OscConfig+0x474>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a73      	ldr	r2, [pc, #460]	@ (8005e70 <HAL_RCC_OscConfig+0x474>)
 8005ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005caa:	f7fe f80b 	bl	8003cc4 <HAL_GetTick>
 8005cae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb0:	e008      	b.n	8005cc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cb2:	f7fe f807 	bl	8003cc4 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d901      	bls.n	8005cc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e10c      	b.n	8005ede <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc4:	4b6a      	ldr	r3, [pc, #424]	@ (8005e70 <HAL_RCC_OscConfig+0x474>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d0f0      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d106      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x2ea>
 8005cd8:	4b64      	ldr	r3, [pc, #400]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cdc:	4a63      	ldr	r2, [pc, #396]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005cde:	f043 0301 	orr.w	r3, r3, #1
 8005ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ce4:	e01c      	b.n	8005d20 <HAL_RCC_OscConfig+0x324>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	2b05      	cmp	r3, #5
 8005cec:	d10c      	bne.n	8005d08 <HAL_RCC_OscConfig+0x30c>
 8005cee:	4b5f      	ldr	r3, [pc, #380]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf2:	4a5e      	ldr	r2, [pc, #376]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005cf4:	f043 0304 	orr.w	r3, r3, #4
 8005cf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cfa:	4b5c      	ldr	r3, [pc, #368]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cfe:	4a5b      	ldr	r2, [pc, #364]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005d00:	f043 0301 	orr.w	r3, r3, #1
 8005d04:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d06:	e00b      	b.n	8005d20 <HAL_RCC_OscConfig+0x324>
 8005d08:	4b58      	ldr	r3, [pc, #352]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d0c:	4a57      	ldr	r2, [pc, #348]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005d0e:	f023 0301 	bic.w	r3, r3, #1
 8005d12:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d14:	4b55      	ldr	r3, [pc, #340]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d18:	4a54      	ldr	r2, [pc, #336]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005d1a:	f023 0304 	bic.w	r3, r3, #4
 8005d1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d015      	beq.n	8005d54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d28:	f7fd ffcc 	bl	8003cc4 <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d2e:	e00a      	b.n	8005d46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d30:	f7fd ffc8 	bl	8003cc4 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e0cb      	b.n	8005ede <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d46:	4b49      	ldr	r3, [pc, #292]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0ee      	beq.n	8005d30 <HAL_RCC_OscConfig+0x334>
 8005d52:	e014      	b.n	8005d7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d54:	f7fd ffb6 	bl	8003cc4 <HAL_GetTick>
 8005d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d5a:	e00a      	b.n	8005d72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d5c:	f7fd ffb2 	bl	8003cc4 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e0b5      	b.n	8005ede <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d72:	4b3e      	ldr	r3, [pc, #248]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1ee      	bne.n	8005d5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d7e:	7dfb      	ldrb	r3, [r7, #23]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d105      	bne.n	8005d90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d84:	4b39      	ldr	r3, [pc, #228]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d88:	4a38      	ldr	r2, [pc, #224]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005d8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 80a1 	beq.w	8005edc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d9a:	4b34      	ldr	r3, [pc, #208]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f003 030c 	and.w	r3, r3, #12
 8005da2:	2b08      	cmp	r3, #8
 8005da4:	d05c      	beq.n	8005e60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d141      	bne.n	8005e32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dae:	4b31      	ldr	r3, [pc, #196]	@ (8005e74 <HAL_RCC_OscConfig+0x478>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db4:	f7fd ff86 	bl	8003cc4 <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dba:	e008      	b.n	8005dce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dbc:	f7fd ff82 	bl	8003cc4 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e087      	b.n	8005ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dce:	4b27      	ldr	r3, [pc, #156]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1f0      	bne.n	8005dbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69da      	ldr	r2, [r3, #28]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	431a      	orrs	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de8:	019b      	lsls	r3, r3, #6
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df0:	085b      	lsrs	r3, r3, #1
 8005df2:	3b01      	subs	r3, #1
 8005df4:	041b      	lsls	r3, r3, #16
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dfc:	061b      	lsls	r3, r3, #24
 8005dfe:	491b      	ldr	r1, [pc, #108]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e04:	4b1b      	ldr	r3, [pc, #108]	@ (8005e74 <HAL_RCC_OscConfig+0x478>)
 8005e06:	2201      	movs	r2, #1
 8005e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e0a:	f7fd ff5b 	bl	8003cc4 <HAL_GetTick>
 8005e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e10:	e008      	b.n	8005e24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e12:	f7fd ff57 	bl	8003cc4 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e05c      	b.n	8005ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e24:	4b11      	ldr	r3, [pc, #68]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0f0      	beq.n	8005e12 <HAL_RCC_OscConfig+0x416>
 8005e30:	e054      	b.n	8005edc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e32:	4b10      	ldr	r3, [pc, #64]	@ (8005e74 <HAL_RCC_OscConfig+0x478>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e38:	f7fd ff44 	bl	8003cc4 <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e3e:	e008      	b.n	8005e52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e40:	f7fd ff40 	bl	8003cc4 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e045      	b.n	8005ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e52:	4b06      	ldr	r3, [pc, #24]	@ (8005e6c <HAL_RCC_OscConfig+0x470>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1f0      	bne.n	8005e40 <HAL_RCC_OscConfig+0x444>
 8005e5e:	e03d      	b.n	8005edc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d107      	bne.n	8005e78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e038      	b.n	8005ede <HAL_RCC_OscConfig+0x4e2>
 8005e6c:	40023800 	.word	0x40023800
 8005e70:	40007000 	.word	0x40007000
 8005e74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e78:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee8 <HAL_RCC_OscConfig+0x4ec>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d028      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d121      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d11a      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005eae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d111      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ebe:	085b      	lsrs	r3, r3, #1
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d107      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d001      	beq.n	8005edc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e000      	b.n	8005ede <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3718      	adds	r7, #24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	40023800 	.word	0x40023800

08005eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e0cc      	b.n	800609a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f00:	4b68      	ldr	r3, [pc, #416]	@ (80060a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d90c      	bls.n	8005f28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f0e:	4b65      	ldr	r3, [pc, #404]	@ (80060a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f16:	4b63      	ldr	r3, [pc, #396]	@ (80060a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0307 	and.w	r3, r3, #7
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d001      	beq.n	8005f28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e0b8      	b.n	800609a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d020      	beq.n	8005f76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d005      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f40:	4b59      	ldr	r3, [pc, #356]	@ (80060a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	4a58      	ldr	r2, [pc, #352]	@ (80060a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d005      	beq.n	8005f64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f58:	4b53      	ldr	r3, [pc, #332]	@ (80060a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	4a52      	ldr	r2, [pc, #328]	@ (80060a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f64:	4b50      	ldr	r3, [pc, #320]	@ (80060a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	494d      	ldr	r1, [pc, #308]	@ (80060a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d044      	beq.n	800600c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d107      	bne.n	8005f9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f8a:	4b47      	ldr	r3, [pc, #284]	@ (80060a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d119      	bne.n	8005fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e07f      	b.n	800609a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d003      	beq.n	8005faa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	d107      	bne.n	8005fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005faa:	4b3f      	ldr	r3, [pc, #252]	@ (80060a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d109      	bne.n	8005fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e06f      	b.n	800609a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fba:	4b3b      	ldr	r3, [pc, #236]	@ (80060a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e067      	b.n	800609a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fca:	4b37      	ldr	r3, [pc, #220]	@ (80060a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f023 0203 	bic.w	r2, r3, #3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	4934      	ldr	r1, [pc, #208]	@ (80060a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fdc:	f7fd fe72 	bl	8003cc4 <HAL_GetTick>
 8005fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fe2:	e00a      	b.n	8005ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fe4:	f7fd fe6e 	bl	8003cc4 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e04f      	b.n	800609a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ffa:	4b2b      	ldr	r3, [pc, #172]	@ (80060a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 020c 	and.w	r2, r3, #12
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	429a      	cmp	r2, r3
 800600a:	d1eb      	bne.n	8005fe4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800600c:	4b25      	ldr	r3, [pc, #148]	@ (80060a4 <HAL_RCC_ClockConfig+0x1b8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	429a      	cmp	r2, r3
 8006018:	d20c      	bcs.n	8006034 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800601a:	4b22      	ldr	r3, [pc, #136]	@ (80060a4 <HAL_RCC_ClockConfig+0x1b8>)
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	b2d2      	uxtb	r2, r2
 8006020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006022:	4b20      	ldr	r3, [pc, #128]	@ (80060a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0307 	and.w	r3, r3, #7
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	429a      	cmp	r2, r3
 800602e:	d001      	beq.n	8006034 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e032      	b.n	800609a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	2b00      	cmp	r3, #0
 800603e:	d008      	beq.n	8006052 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006040:	4b19      	ldr	r3, [pc, #100]	@ (80060a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	4916      	ldr	r1, [pc, #88]	@ (80060a8 <HAL_RCC_ClockConfig+0x1bc>)
 800604e:	4313      	orrs	r3, r2
 8006050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0308 	and.w	r3, r3, #8
 800605a:	2b00      	cmp	r3, #0
 800605c:	d009      	beq.n	8006072 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800605e:	4b12      	ldr	r3, [pc, #72]	@ (80060a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	490e      	ldr	r1, [pc, #56]	@ (80060a8 <HAL_RCC_ClockConfig+0x1bc>)
 800606e:	4313      	orrs	r3, r2
 8006070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006072:	f000 f821 	bl	80060b8 <HAL_RCC_GetSysClockFreq>
 8006076:	4602      	mov	r2, r0
 8006078:	4b0b      	ldr	r3, [pc, #44]	@ (80060a8 <HAL_RCC_ClockConfig+0x1bc>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	091b      	lsrs	r3, r3, #4
 800607e:	f003 030f 	and.w	r3, r3, #15
 8006082:	490a      	ldr	r1, [pc, #40]	@ (80060ac <HAL_RCC_ClockConfig+0x1c0>)
 8006084:	5ccb      	ldrb	r3, [r1, r3]
 8006086:	fa22 f303 	lsr.w	r3, r2, r3
 800608a:	4a09      	ldr	r2, [pc, #36]	@ (80060b0 <HAL_RCC_ClockConfig+0x1c4>)
 800608c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800608e:	4b09      	ldr	r3, [pc, #36]	@ (80060b4 <HAL_RCC_ClockConfig+0x1c8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4618      	mov	r0, r3
 8006094:	f7fd fdd2 	bl	8003c3c <HAL_InitTick>

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	40023c00 	.word	0x40023c00
 80060a8:	40023800 	.word	0x40023800
 80060ac:	0800eeb4 	.word	0x0800eeb4
 80060b0:	20000208 	.word	0x20000208
 80060b4:	20000224 	.word	0x20000224

080060b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060bc:	b090      	sub	sp, #64	@ 0x40
 80060be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80060c4:	2300      	movs	r3, #0
 80060c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060c8:	2300      	movs	r3, #0
 80060ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060d0:	4b59      	ldr	r3, [pc, #356]	@ (8006238 <HAL_RCC_GetSysClockFreq+0x180>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f003 030c 	and.w	r3, r3, #12
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d00d      	beq.n	80060f8 <HAL_RCC_GetSysClockFreq+0x40>
 80060dc:	2b08      	cmp	r3, #8
 80060de:	f200 80a1 	bhi.w	8006224 <HAL_RCC_GetSysClockFreq+0x16c>
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <HAL_RCC_GetSysClockFreq+0x34>
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	d003      	beq.n	80060f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80060ea:	e09b      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060ec:	4b53      	ldr	r3, [pc, #332]	@ (800623c <HAL_RCC_GetSysClockFreq+0x184>)
 80060ee:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80060f0:	e09b      	b.n	800622a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060f2:	4b53      	ldr	r3, [pc, #332]	@ (8006240 <HAL_RCC_GetSysClockFreq+0x188>)
 80060f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80060f6:	e098      	b.n	800622a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060f8:	4b4f      	ldr	r3, [pc, #316]	@ (8006238 <HAL_RCC_GetSysClockFreq+0x180>)
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006100:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006102:	4b4d      	ldr	r3, [pc, #308]	@ (8006238 <HAL_RCC_GetSysClockFreq+0x180>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d028      	beq.n	8006160 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800610e:	4b4a      	ldr	r3, [pc, #296]	@ (8006238 <HAL_RCC_GetSysClockFreq+0x180>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	099b      	lsrs	r3, r3, #6
 8006114:	2200      	movs	r2, #0
 8006116:	623b      	str	r3, [r7, #32]
 8006118:	627a      	str	r2, [r7, #36]	@ 0x24
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006120:	2100      	movs	r1, #0
 8006122:	4b47      	ldr	r3, [pc, #284]	@ (8006240 <HAL_RCC_GetSysClockFreq+0x188>)
 8006124:	fb03 f201 	mul.w	r2, r3, r1
 8006128:	2300      	movs	r3, #0
 800612a:	fb00 f303 	mul.w	r3, r0, r3
 800612e:	4413      	add	r3, r2
 8006130:	4a43      	ldr	r2, [pc, #268]	@ (8006240 <HAL_RCC_GetSysClockFreq+0x188>)
 8006132:	fba0 1202 	umull	r1, r2, r0, r2
 8006136:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006138:	460a      	mov	r2, r1
 800613a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800613c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800613e:	4413      	add	r3, r2
 8006140:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006144:	2200      	movs	r2, #0
 8006146:	61bb      	str	r3, [r7, #24]
 8006148:	61fa      	str	r2, [r7, #28]
 800614a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800614e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006152:	f7fa f8ad 	bl	80002b0 <__aeabi_uldivmod>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	4613      	mov	r3, r2
 800615c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800615e:	e053      	b.n	8006208 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006160:	4b35      	ldr	r3, [pc, #212]	@ (8006238 <HAL_RCC_GetSysClockFreq+0x180>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	099b      	lsrs	r3, r3, #6
 8006166:	2200      	movs	r2, #0
 8006168:	613b      	str	r3, [r7, #16]
 800616a:	617a      	str	r2, [r7, #20]
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006172:	f04f 0b00 	mov.w	fp, #0
 8006176:	4652      	mov	r2, sl
 8006178:	465b      	mov	r3, fp
 800617a:	f04f 0000 	mov.w	r0, #0
 800617e:	f04f 0100 	mov.w	r1, #0
 8006182:	0159      	lsls	r1, r3, #5
 8006184:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006188:	0150      	lsls	r0, r2, #5
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	ebb2 080a 	subs.w	r8, r2, sl
 8006192:	eb63 090b 	sbc.w	r9, r3, fp
 8006196:	f04f 0200 	mov.w	r2, #0
 800619a:	f04f 0300 	mov.w	r3, #0
 800619e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80061a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80061a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80061aa:	ebb2 0408 	subs.w	r4, r2, r8
 80061ae:	eb63 0509 	sbc.w	r5, r3, r9
 80061b2:	f04f 0200 	mov.w	r2, #0
 80061b6:	f04f 0300 	mov.w	r3, #0
 80061ba:	00eb      	lsls	r3, r5, #3
 80061bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061c0:	00e2      	lsls	r2, r4, #3
 80061c2:	4614      	mov	r4, r2
 80061c4:	461d      	mov	r5, r3
 80061c6:	eb14 030a 	adds.w	r3, r4, sl
 80061ca:	603b      	str	r3, [r7, #0]
 80061cc:	eb45 030b 	adc.w	r3, r5, fp
 80061d0:	607b      	str	r3, [r7, #4]
 80061d2:	f04f 0200 	mov.w	r2, #0
 80061d6:	f04f 0300 	mov.w	r3, #0
 80061da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061de:	4629      	mov	r1, r5
 80061e0:	028b      	lsls	r3, r1, #10
 80061e2:	4621      	mov	r1, r4
 80061e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061e8:	4621      	mov	r1, r4
 80061ea:	028a      	lsls	r2, r1, #10
 80061ec:	4610      	mov	r0, r2
 80061ee:	4619      	mov	r1, r3
 80061f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f2:	2200      	movs	r2, #0
 80061f4:	60bb      	str	r3, [r7, #8]
 80061f6:	60fa      	str	r2, [r7, #12]
 80061f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061fc:	f7fa f858 	bl	80002b0 <__aeabi_uldivmod>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4613      	mov	r3, r2
 8006206:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006208:	4b0b      	ldr	r3, [pc, #44]	@ (8006238 <HAL_RCC_GetSysClockFreq+0x180>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	0c1b      	lsrs	r3, r3, #16
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	3301      	adds	r3, #1
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006218:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800621a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006220:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006222:	e002      	b.n	800622a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006224:	4b05      	ldr	r3, [pc, #20]	@ (800623c <HAL_RCC_GetSysClockFreq+0x184>)
 8006226:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800622a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800622c:	4618      	mov	r0, r3
 800622e:	3740      	adds	r7, #64	@ 0x40
 8006230:	46bd      	mov	sp, r7
 8006232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006236:	bf00      	nop
 8006238:	40023800 	.word	0x40023800
 800623c:	00f42400 	.word	0x00f42400
 8006240:	018cba80 	.word	0x018cba80

08006244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006248:	4b03      	ldr	r3, [pc, #12]	@ (8006258 <HAL_RCC_GetHCLKFreq+0x14>)
 800624a:	681b      	ldr	r3, [r3, #0]
}
 800624c:	4618      	mov	r0, r3
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	20000208 	.word	0x20000208

0800625c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006260:	f7ff fff0 	bl	8006244 <HAL_RCC_GetHCLKFreq>
 8006264:	4602      	mov	r2, r0
 8006266:	4b05      	ldr	r3, [pc, #20]	@ (800627c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	0a9b      	lsrs	r3, r3, #10
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	4903      	ldr	r1, [pc, #12]	@ (8006280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006272:	5ccb      	ldrb	r3, [r1, r3]
 8006274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006278:	4618      	mov	r0, r3
 800627a:	bd80      	pop	{r7, pc}
 800627c:	40023800 	.word	0x40023800
 8006280:	0800eec4 	.word	0x0800eec4

08006284 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006284:	b084      	sub	sp, #16
 8006286:	b580      	push	{r7, lr}
 8006288:	b084      	sub	sp, #16
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	f107 001c 	add.w	r0, r7, #28
 8006292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006296:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800629a:	2b01      	cmp	r3, #1
 800629c:	d123      	bne.n	80062e6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80062b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80062c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d105      	bne.n	80062da <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 faa0 	bl	8006820 <USB_CoreReset>
 80062e0:	4603      	mov	r3, r0
 80062e2:	73fb      	strb	r3, [r7, #15]
 80062e4:	e01b      	b.n	800631e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fa94 	bl	8006820 <USB_CoreReset>
 80062f8:	4603      	mov	r3, r0
 80062fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80062fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006300:	2b00      	cmp	r3, #0
 8006302:	d106      	bne.n	8006312 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006308:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006310:	e005      	b.n	800631e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006316:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800631e:	7fbb      	ldrb	r3, [r7, #30]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d10b      	bne.n	800633c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f043 0206 	orr.w	r2, r3, #6
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f043 0220 	orr.w	r2, r3, #32
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800633c:	7bfb      	ldrb	r3, [r7, #15]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006348:	b004      	add	sp, #16
 800634a:	4770      	bx	lr

0800634c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f023 0201 	bic.w	r2, r3, #1
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b084      	sub	sp, #16
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	460b      	mov	r3, r1
 8006378:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800638a:	78fb      	ldrb	r3, [r7, #3]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d115      	bne.n	80063bc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800639c:	200a      	movs	r0, #10
 800639e:	f7fd fc9d 	bl	8003cdc <HAL_Delay>
      ms += 10U;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	330a      	adds	r3, #10
 80063a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fa2b 	bl	8006804 <USB_GetMode>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d01e      	beq.n	80063f2 <USB_SetCurrentMode+0x84>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2bc7      	cmp	r3, #199	@ 0xc7
 80063b8:	d9f0      	bls.n	800639c <USB_SetCurrentMode+0x2e>
 80063ba:	e01a      	b.n	80063f2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063bc:	78fb      	ldrb	r3, [r7, #3]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d115      	bne.n	80063ee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80063ce:	200a      	movs	r0, #10
 80063d0:	f7fd fc84 	bl	8003cdc <HAL_Delay>
      ms += 10U;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	330a      	adds	r3, #10
 80063d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fa12 	bl	8006804 <USB_GetMode>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d005      	beq.n	80063f2 <USB_SetCurrentMode+0x84>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2bc7      	cmp	r3, #199	@ 0xc7
 80063ea:	d9f0      	bls.n	80063ce <USB_SetCurrentMode+0x60>
 80063ec:	e001      	b.n	80063f2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e005      	b.n	80063fe <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2bc8      	cmp	r3, #200	@ 0xc8
 80063f6:	d101      	bne.n	80063fc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e000      	b.n	80063fe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
	...

08006408 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006408:	b084      	sub	sp, #16
 800640a:	b580      	push	{r7, lr}
 800640c:	b086      	sub	sp, #24
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006422:	2300      	movs	r3, #0
 8006424:	613b      	str	r3, [r7, #16]
 8006426:	e009      	b.n	800643c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	3340      	adds	r3, #64	@ 0x40
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	2200      	movs	r2, #0
 8006434:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	3301      	adds	r3, #1
 800643a:	613b      	str	r3, [r7, #16]
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	2b0e      	cmp	r3, #14
 8006440:	d9f2      	bls.n	8006428 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006442:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006446:	2b00      	cmp	r3, #0
 8006448:	d11c      	bne.n	8006484 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006458:	f043 0302 	orr.w	r3, r3, #2
 800645c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006462:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	639a      	str	r2, [r3, #56]	@ 0x38
 8006482:	e00b      	b.n	800649c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006488:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006494:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064a2:	461a      	mov	r2, r3
 80064a4:	2300      	movs	r3, #0
 80064a6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064a8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d10d      	bne.n	80064cc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d104      	bne.n	80064c2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064b8:	2100      	movs	r1, #0
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f968 	bl	8006790 <USB_SetDevSpeed>
 80064c0:	e008      	b.n	80064d4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80064c2:	2101      	movs	r1, #1
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f963 	bl	8006790 <USB_SetDevSpeed>
 80064ca:	e003      	b.n	80064d4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064cc:	2103      	movs	r1, #3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f95e 	bl	8006790 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064d4:	2110      	movs	r1, #16
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f8fa 	bl	80066d0 <USB_FlushTxFifo>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f924 	bl	8006734 <USB_FlushRxFifo>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064fc:	461a      	mov	r2, r3
 80064fe:	2300      	movs	r3, #0
 8006500:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006508:	461a      	mov	r2, r3
 800650a:	2300      	movs	r3, #0
 800650c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006514:	461a      	mov	r2, r3
 8006516:	2300      	movs	r3, #0
 8006518:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800651a:	2300      	movs	r3, #0
 800651c:	613b      	str	r3, [r7, #16]
 800651e:	e043      	b.n	80065a8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006532:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006536:	d118      	bne.n	800656a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10a      	bne.n	8006554 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800654a:	461a      	mov	r2, r3
 800654c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	e013      	b.n	800657c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006560:	461a      	mov	r2, r3
 8006562:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	e008      	b.n	800657c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006576:	461a      	mov	r2, r3
 8006578:	2300      	movs	r3, #0
 800657a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006588:	461a      	mov	r2, r3
 800658a:	2300      	movs	r3, #0
 800658c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800659a:	461a      	mov	r2, r3
 800659c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	3301      	adds	r3, #1
 80065a6:	613b      	str	r3, [r7, #16]
 80065a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80065ac:	461a      	mov	r2, r3
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d3b5      	bcc.n	8006520 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065b4:	2300      	movs	r3, #0
 80065b6:	613b      	str	r3, [r7, #16]
 80065b8:	e043      	b.n	8006642 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065d0:	d118      	bne.n	8006604 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10a      	bne.n	80065ee <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065e4:	461a      	mov	r2, r3
 80065e6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	e013      	b.n	8006616 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065fa:	461a      	mov	r2, r3
 80065fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	e008      	b.n	8006616 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006610:	461a      	mov	r2, r3
 8006612:	2300      	movs	r3, #0
 8006614:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006622:	461a      	mov	r2, r3
 8006624:	2300      	movs	r3, #0
 8006626:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006634:	461a      	mov	r2, r3
 8006636:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800663a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	3301      	adds	r3, #1
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006646:	461a      	mov	r2, r3
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	4293      	cmp	r3, r2
 800664c:	d3b5      	bcc.n	80065ba <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800665c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006660:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800666e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006670:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006674:	2b00      	cmp	r3, #0
 8006676:	d105      	bne.n	8006684 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	f043 0210 	orr.w	r2, r3, #16
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	699a      	ldr	r2, [r3, #24]
 8006688:	4b10      	ldr	r3, [pc, #64]	@ (80066cc <USB_DevInit+0x2c4>)
 800668a:	4313      	orrs	r3, r2
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006690:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006694:	2b00      	cmp	r3, #0
 8006696:	d005      	beq.n	80066a4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	f043 0208 	orr.w	r2, r3, #8
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d107      	bne.n	80066bc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066b4:	f043 0304 	orr.w	r3, r3, #4
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066c8:	b004      	add	sp, #16
 80066ca:	4770      	bx	lr
 80066cc:	803c3800 	.word	0x803c3800

080066d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066da:	2300      	movs	r3, #0
 80066dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3301      	adds	r3, #1
 80066e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066ea:	d901      	bls.n	80066f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e01b      	b.n	8006728 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	daf2      	bge.n	80066de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	019b      	lsls	r3, r3, #6
 8006700:	f043 0220 	orr.w	r2, r3, #32
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	3301      	adds	r3, #1
 800670c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006714:	d901      	bls.n	800671a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e006      	b.n	8006728 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	f003 0320 	and.w	r3, r3, #32
 8006722:	2b20      	cmp	r3, #32
 8006724:	d0f0      	beq.n	8006708 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3301      	adds	r3, #1
 8006744:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800674c:	d901      	bls.n	8006752 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e018      	b.n	8006784 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	daf2      	bge.n	8006740 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2210      	movs	r2, #16
 8006762:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	3301      	adds	r3, #1
 8006768:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006770:	d901      	bls.n	8006776 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e006      	b.n	8006784 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	f003 0310 	and.w	r3, r3, #16
 800677e:	2b10      	cmp	r3, #16
 8006780:	d0f0      	beq.n	8006764 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	68f9      	ldr	r1, [r7, #12]
 80067ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067b0:	4313      	orrs	r3, r2
 80067b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b085      	sub	sp, #20
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80067dc:	f023 0303 	bic.w	r3, r3, #3
 80067e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067f0:	f043 0302 	orr.w	r3, r3, #2
 80067f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	f003 0301 	and.w	r3, r3, #1
}
 8006814:	4618      	mov	r0, r3
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	3301      	adds	r3, #1
 8006830:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006838:	d901      	bls.n	800683e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e01b      	b.n	8006876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	daf2      	bge.n	800682c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	f043 0201 	orr.w	r2, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3301      	adds	r3, #1
 800685a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006862:	d901      	bls.n	8006868 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e006      	b.n	8006876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b01      	cmp	r3, #1
 8006872:	d0f0      	beq.n	8006856 <USB_CoreReset+0x36>

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
	...

08006884 <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_t _cdcd_cfg = TUD_CDC_CONFIGURE_DEFAULT();

static bool _prep_out_transaction(uint8_t itf) {
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	4603      	mov	r3, r0
 800688c:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 800688e:	2300      	movs	r3, #0
 8006890:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8006892:	79fb      	ldrb	r3, [r7, #7]
 8006894:	22e8      	movs	r2, #232	@ 0xe8
 8006896:	fb02 f303 	mul.w	r3, r2, r3
 800689a:	4a30      	ldr	r2, [pc, #192]	@ (800695c <_prep_out_transaction+0xd8>)
 800689c:	4413      	add	r3, r2
 800689e:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	01db      	lsls	r3, r3, #7
 80068a4:	4a2e      	ldr	r2, [pc, #184]	@ (8006960 <_prep_out_transaction+0xdc>)
 80068a6:	4413      	add	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 80068aa:	f002 f851 	bl	8008950 <tud_mounted>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d009      	beq.n	80068c8 <_prep_out_transaction+0x44>
 80068b4:	f002 f85e 	bl	8008974 <tud_suspended>
 80068b8:	4603      	mov	r3, r0
 80068ba:	f083 0301 	eor.w	r3, r3, #1
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <_prep_out_transaction+0x44>
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <_prep_out_transaction+0x46>
 80068c8:	2300      	movs	r3, #0
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 80068d0:	f083 0301 	eor.w	r3, r3, #1
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d103      	bne.n	80068e2 <_prep_out_transaction+0x5e>
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	78db      	ldrb	r3, [r3, #3]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <_prep_out_transaction+0x62>
 80068e2:	2300      	movs	r3, #0
 80068e4:	e035      	b.n	8006952 <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	3310      	adds	r3, #16
 80068ea:	4618      	mov	r0, r3
 80068ec:	f001 feab 	bl	8008646 <tu_fifo_remaining>
 80068f0:	4603      	mov	r3, r0
 80068f2:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 80068f4:	897b      	ldrh	r3, [r7, #10]
 80068f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80068f8:	d801      	bhi.n	80068fe <_prep_out_transaction+0x7a>
 80068fa:	2300      	movs	r3, #0
 80068fc:	e029      	b.n	8006952 <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	78da      	ldrb	r2, [r3, #3]
 8006902:	7dfb      	ldrb	r3, [r7, #23]
 8006904:	4611      	mov	r1, r2
 8006906:	4618      	mov	r0, r3
 8006908:	f003 fb44 	bl	8009f94 <usbd_edpt_claim>
 800690c:	4603      	mov	r3, r0
 800690e:	f083 0301 	eor.w	r3, r3, #1
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <_prep_out_transaction+0x98>
 8006918:	2300      	movs	r3, #0
 800691a:	e01a      	b.n	8006952 <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	3310      	adds	r3, #16
 8006920:	4618      	mov	r0, r3
 8006922:	f001 fe90 	bl	8008646 <tu_fifo_remaining>
 8006926:	4603      	mov	r3, r0
 8006928:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 800692a:	897b      	ldrh	r3, [r7, #10]
 800692c:	2b3f      	cmp	r3, #63	@ 0x3f
 800692e:	d908      	bls.n	8006942 <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	78d9      	ldrb	r1, [r3, #3]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	7df8      	ldrb	r0, [r7, #23]
 8006938:	2340      	movs	r3, #64	@ 0x40
 800693a:	f003 fb7b 	bl	800a034 <usbd_edpt_xfer>
 800693e:	4603      	mov	r3, r0
 8006940:	e007      	b.n	8006952 <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	78da      	ldrb	r2, [r3, #3]
 8006946:	7dfb      	ldrb	r3, [r7, #23]
 8006948:	4611      	mov	r1, r2
 800694a:	4618      	mov	r0, r3
 800694c:	f003 fb4a 	bl	8009fe4 <usbd_edpt_release>
    return false;
 8006950:	2300      	movs	r3, #0
  }
}
 8006952:	4618      	mov	r0, r3
 8006954:	3718      	adds	r7, #24
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20001570 	.word	0x20001570
 8006960:	20001658 	.word	0x20001658

08006964 <tud_cdc_n_connected>:

bool tud_cdc_n_ready(uint8_t itf) {
  return tud_ready() && _cdcd_itf[itf].ep_in != 0 && _cdcd_itf[itf].ep_out != 0;
}

bool tud_cdc_n_connected(uint8_t itf) {
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	4603      	mov	r3, r0
 800696c:	71fb      	strb	r3, [r7, #7]
 800696e:	f001 ffef 	bl	8008950 <tud_mounted>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d009      	beq.n	800698c <tud_cdc_n_connected+0x28>
 8006978:	f001 fffc 	bl	8008974 <tud_suspended>
 800697c:	4603      	mov	r3, r0
 800697e:	f083 0301 	eor.w	r3, r3, #1
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <tud_cdc_n_connected+0x28>
 8006988:	2301      	movs	r3, #1
 800698a:	e000      	b.n	800698e <tud_cdc_n_connected+0x2a>
 800698c:	2300      	movs	r3, #0
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	b2db      	uxtb	r3, r3
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 8006994:	2b00      	cmp	r3, #0
 8006996:	d019      	beq.n	80069cc <tud_cdc_n_connected+0x68>
 8006998:	79fb      	ldrb	r3, [r7, #7]
 800699a:	4a10      	ldr	r2, [pc, #64]	@ (80069dc <tud_cdc_n_connected+0x78>)
 800699c:	21e8      	movs	r1, #232	@ 0xe8
 800699e:	fb01 f303 	mul.w	r3, r1, r3
 80069a2:	4413      	add	r3, r2
 80069a4:	3304      	adds	r3, #4
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	2300      	movs	r3, #0
 80069ac:	72fb      	strb	r3, [r7, #11]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80069ae:	7afb      	ldrb	r3, [r7, #11]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	fa22 f303 	lsr.w	r3, r2, r3
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	bf14      	ite	ne
 80069be:	2301      	movne	r3, #1
 80069c0:	2300      	moveq	r3, #0
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <tud_cdc_n_connected+0x68>
 80069c8:	2301      	movs	r3, #1
 80069ca:	e000      	b.n	80069ce <tud_cdc_n_connected+0x6a>
 80069cc:	2300      	movs	r3, #0
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	b2db      	uxtb	r3, r3
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	20001570 	.word	0x20001570

080069e0 <tud_cdc_n_available>:
}

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf) {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	4603      	mov	r3, r0
 80069e8:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 80069ea:	79fb      	ldrb	r3, [r7, #7]
 80069ec:	22e8      	movs	r2, #232	@ 0xe8
 80069ee:	fb02 f303 	mul.w	r3, r2, r3
 80069f2:	3310      	adds	r3, #16
 80069f4:	4a04      	ldr	r2, [pc, #16]	@ (8006a08 <tud_cdc_n_available+0x28>)
 80069f6:	4413      	add	r3, r2
 80069f8:	4618      	mov	r0, r3
 80069fa:	f001 fdaf 	bl	800855c <tu_fifo_count>
 80069fe:	4603      	mov	r3, r0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	20001570 	.word	0x20001570

08006a0c <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize) {
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	4603      	mov	r3, r0
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	22e8      	movs	r2, #232	@ 0xe8
 8006a1e:	fb02 f303 	mul.w	r3, r2, r3
 8006a22:	4a0f      	ldr	r2, [pc, #60]	@ (8006a60 <tud_cdc_n_read+0x54>)
 8006a24:	4413      	add	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f103 0010 	add.w	r0, r3, #16
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d802      	bhi.n	8006a3e <tud_cdc_n_read+0x32>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	e001      	b.n	8006a42 <tud_cdc_n_read+0x36>
 8006a3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a42:	461a      	mov	r2, r3
 8006a44:	68b9      	ldr	r1, [r7, #8]
 8006a46:	f001 fe5a 	bl	80086fe <tu_fifo_read_n>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(itf);
 8006a4e:	7bfb      	ldrb	r3, [r7, #15]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff ff17 	bl	8006884 <_prep_out_transaction>
  return num_read;
 8006a56:	693b      	ldr	r3, [r7, #16]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	20001570 	.word	0x20001570

08006a64 <tud_cdc_n_write>:
}

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, const void* buffer, uint32_t bufsize) {
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
 8006a70:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	22e8      	movs	r2, #232	@ 0xe8
 8006a76:	fb02 f303 	mul.w	r3, r2, r3
 8006a7a:	4a13      	ldr	r2, [pc, #76]	@ (8006ac8 <tud_cdc_n_write+0x64>)
 8006a7c:	4413      	add	r3, r2
 8006a7e:	617b      	str	r3, [r7, #20]
  uint16_t wr_count = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f103 001c 	add.w	r0, r3, #28
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d802      	bhi.n	8006a96 <tud_cdc_n_write+0x32>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	e001      	b.n	8006a9a <tud_cdc_n_write+0x36>
 8006a96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	f001 fe95 	bl	80087cc <tu_fifo_write_n>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	331c      	adds	r3, #28
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f001 fd56 	bl	800855c <tu_fifo_count>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b3f      	cmp	r3, #63	@ 0x3f
 8006ab4:	d903      	bls.n	8006abe <tud_cdc_n_write+0x5a>
      #if CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
      || tu_fifo_full(&p_cdc->tx_ff) // check full if fifo size is less than packet size
      #endif
      ) {
    tud_cdc_n_write_flush(itf);
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 f807 	bl	8006acc <tud_cdc_n_write_flush>
  }

  return wr_count;
 8006abe:	8a7b      	ldrh	r3, [r7, #18]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	20001570 	.word	0x20001570

08006acc <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8006ad6:	79fb      	ldrb	r3, [r7, #7]
 8006ad8:	22e8      	movs	r2, #232	@ 0xe8
 8006ada:	fb02 f303 	mul.w	r3, r2, r3
 8006ade:	4a39      	ldr	r2, [pc, #228]	@ (8006bc4 <tud_cdc_n_write_flush+0xf8>)
 8006ae0:	4413      	add	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	01db      	lsls	r3, r3, #7
 8006ae8:	4a37      	ldr	r2, [pc, #220]	@ (8006bc8 <tud_cdc_n_write_flush+0xfc>)
 8006aea:	4413      	add	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]
 8006aee:	f001 ff2f 	bl	8008950 <tud_mounted>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d009      	beq.n	8006b0c <tud_cdc_n_write_flush+0x40>
 8006af8:	f001 ff3c 	bl	8008974 <tud_suspended>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f083 0301 	eor.w	r3, r3, #1
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <tud_cdc_n_write_flush+0x40>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e000      	b.n	8006b0e <tud_cdc_n_write_flush+0x42>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 8006b14:	f083 0301 	eor.w	r3, r3, #1
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <tud_cdc_n_write_flush+0x56>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	e04c      	b.n	8006bbc <tud_cdc_n_write_flush+0xf0>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	331c      	adds	r3, #28
 8006b26:	4618      	mov	r0, r3
 8006b28:	f001 fd18 	bl	800855c <tu_fifo_count>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <tud_cdc_n_write_flush+0x6a>
    return 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	e042      	b.n	8006bbc <tud_cdc_n_write_flush+0xf0>
  }

  const uint8_t rhport = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	789a      	ldrb	r2, [r3, #2]
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	4611      	mov	r1, r2
 8006b42:	4618      	mov	r0, r3
 8006b44:	f003 fa26 	bl	8009f94 <usbd_edpt_claim>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	f083 0301 	eor.w	r3, r3, #1
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <tud_cdc_n_write_flush+0x8c>
 8006b54:	2300      	movs	r3, #0
 8006b56:	e031      	b.n	8006bbc <tud_cdc_n_write_flush+0xf0>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f103 001c 	add.w	r0, r3, #28
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	3340      	adds	r3, #64	@ 0x40
 8006b62:	2240      	movs	r2, #64	@ 0x40
 8006b64:	4619      	mov	r1, r3
 8006b66:	f001 fdca 	bl	80086fe <tu_fifo_read_n>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	81bb      	strh	r3, [r7, #12]

  if (count) {
 8006b6e:	89bb      	ldrh	r3, [r7, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d01b      	beq.n	8006bac <tud_cdc_n_write_flush+0xe0>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	7899      	ldrb	r1, [r3, #2]
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8006b7e:	89bb      	ldrh	r3, [r7, #12]
 8006b80:	7bf8      	ldrb	r0, [r7, #15]
 8006b82:	f003 fa57 	bl	800a034 <usbd_edpt_xfer>
 8006b86:	4603      	mov	r3, r0
 8006b88:	f083 0301 	eor.w	r3, r3, #1
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00a      	beq.n	8006ba8 <tud_cdc_n_write_flush+0xdc>
 8006b92:	4b0e      	ldr	r3, [pc, #56]	@ (8006bcc <tud_cdc_n_write_flush+0x100>)
 8006b94:	60bb      	str	r3, [r7, #8]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d000      	beq.n	8006ba4 <tud_cdc_n_write_flush+0xd8>
 8006ba2:	be00      	bkpt	0x0000
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	e009      	b.n	8006bbc <tud_cdc_n_write_flush+0xf0>
    return count;
 8006ba8:	89bb      	ldrh	r3, [r7, #12]
 8006baa:	e007      	b.n	8006bbc <tud_cdc_n_write_flush+0xf0>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	789a      	ldrb	r2, [r3, #2]
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f003 fa15 	bl	8009fe4 <usbd_edpt_release>
    return 0;
 8006bba:	2300      	movs	r3, #0
  }
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3718      	adds	r7, #24
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	20001570 	.word	0x20001570
 8006bc8:	20001658 	.word	0x20001658
 8006bcc:	e000edf0 	.word	0xe000edf0

08006bd0 <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available(uint8_t itf) {
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
 8006bda:	79fb      	ldrb	r3, [r7, #7]
 8006bdc:	22e8      	movs	r2, #232	@ 0xe8
 8006bde:	fb02 f303 	mul.w	r3, r2, r3
 8006be2:	3318      	adds	r3, #24
 8006be4:	4a05      	ldr	r2, [pc, #20]	@ (8006bfc <tud_cdc_n_write_available+0x2c>)
 8006be6:	4413      	add	r3, r2
 8006be8:	3304      	adds	r3, #4
 8006bea:	4618      	mov	r0, r3
 8006bec:	f001 fd2b 	bl	8008646 <tu_fifo_remaining>
 8006bf0:	4603      	mov	r3, r0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20001570 	.word	0x20001570

08006c00 <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8006c06:	22e8      	movs	r2, #232	@ 0xe8
 8006c08:	2100      	movs	r1, #0
 8006c0a:	4824      	ldr	r0, [pc, #144]	@ (8006c9c <cdcd_init+0x9c>)
 8006c0c:	f006 f813 	bl	800cc36 <memset>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006c10:	2300      	movs	r3, #0
 8006c12:	71fb      	strb	r3, [r7, #7]
 8006c14:	e03a      	b.n	8006c8c <cdcd_init+0x8c>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8006c16:	79fb      	ldrb	r3, [r7, #7]
 8006c18:	22e8      	movs	r2, #232	@ 0xe8
 8006c1a:	fb02 f303 	mul.w	r3, r2, r3
 8006c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8006c9c <cdcd_init+0x9c>)
 8006c20:	4413      	add	r3, r2
 8006c22:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	22ff      	movs	r2, #255	@ 0xff
 8006c28:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006c30:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2200      	movs	r2, #0
 8006c36:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2208      	movs	r2, #8
 8006c42:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	f103 0010 	add.w	r0, r3, #16
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8006c50:	2300      	movs	r3, #0
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	2301      	movs	r3, #1
 8006c56:	2240      	movs	r2, #64	@ 0x40
 8006c58:	f000 ffee 	bl	8007c38 <tu_fifo_config>

    // TX fifo can be configured to change to overwritable if not connected (DTR bit not set). Without DTR we do not
    // know if data is actually polled by terminal. This way the most current data is prioritized.
    // Default: is overwritable
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	f103 001c 	add.w	r0, r3, #28
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8006c68:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca0 <cdcd_init+0xa0>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	bf14      	ite	ne
 8006c76:	2301      	movne	r3, #1
 8006c78:	2300      	moveq	r3, #0
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	2301      	movs	r3, #1
 8006c80:	2280      	movs	r2, #128	@ 0x80
 8006c82:	f000 ffd9 	bl	8007c38 <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	71fb      	strb	r3, [r7, #7]
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d0c1      	beq.n	8006c16 <cdcd_init+0x16>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 8006c92:	bf00      	nop
 8006c94:	bf00      	nop
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	20001570 	.word	0x20001570
 8006ca0:	2000022c 	.word	0x2000022c

08006ca4 <cdcd_deinit>:

bool cdcd_deinit(void) {
 8006ca4:	b480      	push	{r7}
 8006ca6:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 8006ca8:	2301      	movs	r3, #1
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	4603      	mov	r3, r0
 8006cbc:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	73fb      	strb	r3, [r7, #15]
 8006cc2:	e037      	b.n	8006d34 <cdcd_reset+0x80>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
 8006cc6:	22e8      	movs	r2, #232	@ 0xe8
 8006cc8:	fb02 f303 	mul.w	r3, r2, r3
 8006ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8006d44 <cdcd_reset+0x90>)
 8006cce:	4413      	add	r3, r2
 8006cd0:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8006cd2:	2205      	movs	r2, #5
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	68b8      	ldr	r0, [r7, #8]
 8006cd8:	f005 ffad 	bl	800cc36 <memset>
    if (!_cdcd_cfg.rx_persistent) {
 8006cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8006d48 <cdcd_reset+0x94>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d104      	bne.n	8006cf4 <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	3310      	adds	r3, #16
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f001 fd90 	bl	8008814 <tu_fifo_clear>
    }
    if (!_cdcd_cfg.tx_persistent) {
 8006cf4:	4b14      	ldr	r3, [pc, #80]	@ (8006d48 <cdcd_reset+0x94>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d104      	bne.n	8006d0c <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	331c      	adds	r3, #28
 8006d06:	4618      	mov	r0, r3
 8006d08:	f001 fd84 	bl	8008814 <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f103 021c 	add.w	r2, r3, #28
 8006d12:	4b0d      	ldr	r3, [pc, #52]	@ (8006d48 <cdcd_reset+0x94>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	bf14      	ite	ne
 8006d20:	2301      	movne	r3, #1
 8006d22:	2300      	moveq	r3, #0
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	4619      	mov	r1, r3
 8006d28:	4610      	mov	r0, r2
 8006d2a:	f001 fd84 	bl	8008836 <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006d2e:	7bfb      	ldrb	r3, [r7, #15]
 8006d30:	3301      	adds	r3, #1
 8006d32:	73fb      	strb	r3, [r7, #15]
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d0c4      	beq.n	8006cc4 <cdcd_reset+0x10>
  }
}
 8006d3a:	bf00      	nop
 8006d3c:	bf00      	nop
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	20001570 	.word	0x20001570
 8006d48:	2000022c 	.word	0x2000022c

08006d4c <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b09a      	sub	sp, #104	@ 0x68
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	4603      	mov	r3, r0
 8006d54:	6039      	str	r1, [r7, #0]
 8006d56:	71fb      	strb	r3, [r7, #7]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	795b      	ldrb	r3, [r3, #5]
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d103      	bne.n	8006d6c <cdcd_open+0x20>
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	799b      	ldrb	r3, [r3, #6]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d001      	beq.n	8006d70 <cdcd_open+0x24>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	e0da      	b.n	8006f26 <cdcd_open+0x1da>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8006d70:	2300      	movs	r3, #0
 8006d72:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8006d76:	e010      	b.n	8006d9a <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 8006d78:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006d7c:	22e8      	movs	r2, #232	@ 0xe8
 8006d7e:	fb02 f303 	mul.w	r3, r2, r3
 8006d82:	4a6b      	ldr	r2, [pc, #428]	@ (8006f30 <cdcd_open+0x1e4>)
 8006d84:	4413      	add	r3, r2
 8006d86:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 8006d88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d8a:	789b      	ldrb	r3, [r3, #2]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d009      	beq.n	8006da4 <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8006d90:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006d94:	3301      	adds	r3, #1
 8006d96:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8006d9a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d0ea      	beq.n	8006d78 <cdcd_open+0x2c>
 8006da2:	e000      	b.n	8006da6 <cdcd_open+0x5a>
      break;
 8006da4:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 8006da6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <cdcd_open+0x78>
 8006dae:	4b61      	ldr	r3, [pc, #388]	@ (8006f34 <cdcd_open+0x1e8>)
 8006db0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006db2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d000      	beq.n	8006dc0 <cdcd_open+0x74>
 8006dbe:	be00      	bkpt	0x0000
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	e0b0      	b.n	8006f26 <cdcd_open+0x1da>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	789a      	ldrb	r2, [r3, #2]
 8006dc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006dca:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8006dcc:	2309      	movs	r3, #9
 8006dce:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006de2:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 8006de4:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8006de6:	e013      	b.n	8006e10 <cdcd_open+0xc4>
 8006de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dea:	633b      	str	r3, [r7, #48]	@ 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dee:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 8006df0:	461a      	mov	r2, r3
 8006df2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006df6:	4413      	add	r3, r2
 8006df8:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e02:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e0c:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8006e0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8006e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e16:	3301      	adds	r3, #1
 8006e18:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8006e1a:	2b24      	cmp	r3, #36	@ 0x24
 8006e1c:	d104      	bne.n	8006e28 <cdcd_open+0xdc>
 8006e1e:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8006e22:	88bb      	ldrh	r3, [r7, #4]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d9df      	bls.n	8006de8 <cdcd_open+0x9c>
 8006e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2e:	3301      	adds	r3, #1
 8006e30:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 8006e32:	2b05      	cmp	r3, #5
 8006e34:	d12f      	bne.n	8006e96 <cdcd_open+0x14a>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 8006e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e38:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 8006e3a:	79fb      	ldrb	r3, [r7, #7]
 8006e3c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f003 f862 	bl	8009f08 <usbd_edpt_open>
 8006e44:	4603      	mov	r3, r0
 8006e46:	f083 0301 	eor.w	r3, r3, #1
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00a      	beq.n	8006e66 <cdcd_open+0x11a>
 8006e50:	4b38      	ldr	r3, [pc, #224]	@ (8006f34 <cdcd_open+0x1e8>)
 8006e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d000      	beq.n	8006e62 <cdcd_open+0x116>
 8006e60:	be00      	bkpt	0x0000
 8006e62:	2300      	movs	r3, #0
 8006e64:	e05f      	b.n	8006f26 <cdcd_open+0x1da>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8006e66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e68:	789a      	ldrb	r2, [r3, #2]
 8006e6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e6c:	705a      	strb	r2, [r3, #1]
 8006e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e70:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8006e76:	461a      	mov	r2, r3
 8006e78:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e88:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8006e94:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e98:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	d139      	bne.n	8006f18 <cdcd_open+0x1cc>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 8006ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ea6:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8006ea8:	2b0a      	cmp	r3, #10
 8006eaa:	d135      	bne.n	8006f18 <cdcd_open+0x1cc>
 8006eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eae:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006eba:	4413      	add	r3, r2
 8006ebc:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8006ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ec2:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8006ed2:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 8006ed4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ed6:	3303      	adds	r3, #3
 8006ed8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006eda:	3202      	adds	r2, #2
 8006edc:	79f8      	ldrb	r0, [r7, #7]
 8006ede:	9201      	str	r2, [sp, #4]
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ee8:	f002 ffa6 	bl	8009e38 <usbd_open_edpt_pair>
 8006eec:	4603      	mov	r3, r0
 8006eee:	f083 0301 	eor.w	r3, r3, #1
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00a      	beq.n	8006f0e <cdcd_open+0x1c2>
 8006ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8006f34 <cdcd_open+0x1e8>)
 8006efa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006efc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d000      	beq.n	8006f0a <cdcd_open+0x1be>
 8006f08:	be00      	bkpt	0x0000
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	e00b      	b.n	8006f26 <cdcd_open+0x1da>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 8006f0e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006f12:	330e      	adds	r3, #14
 8006f14:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 8006f18:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7ff fcb1 	bl	8006884 <_prep_out_transaction>

  return drv_len;
 8006f22:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3760      	adds	r7, #96	@ 0x60
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	20001570 	.word	0x20001570
 8006f34:	e000edf0 	.word	0xe000edf0

08006f38 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08a      	sub	sp, #40	@ 0x28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	4603      	mov	r3, r0
 8006f40:	603a      	str	r2, [r7, #0]
 8006f42:	71fb      	strb	r3, [r7, #7]
 8006f44:	460b      	mov	r3, r1
 8006f46:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b20      	cmp	r3, #32
 8006f54:	d001      	beq.n	8006f5a <cdcd_control_xfer_cb+0x22>
 8006f56:	2300      	movs	r3, #0
 8006f58:	e0e6      	b.n	8007128 <cdcd_control_xfer_cb+0x1f0>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006f60:	e014      	b.n	8006f8c <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 8006f62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f66:	22e8      	movs	r2, #232	@ 0xe8
 8006f68:	fb02 f303 	mul.w	r3, r2, r3
 8006f6c:	4a70      	ldr	r2, [pc, #448]	@ (8007130 <cdcd_control_xfer_cb+0x1f8>)
 8006f6e:	4413      	add	r3, r2
 8006f70:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	889b      	ldrh	r3, [r3, #4]
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d009      	beq.n	8006f96 <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8006f82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f86:	3301      	adds	r3, #1
 8006f88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d0e6      	beq.n	8006f62 <cdcd_control_xfer_cb+0x2a>
 8006f94:	e000      	b.n	8006f98 <cdcd_control_xfer_cb+0x60>
      break;
 8006f96:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 8006f98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <cdcd_control_xfer_cb+0x6c>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	e0c1      	b.n	8007128 <cdcd_control_xfer_cb+0x1f0>

  switch (request->bRequest) {
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	785b      	ldrb	r3, [r3, #1]
 8006fa8:	3b20      	subs	r3, #32
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	f200 80b2 	bhi.w	8007114 <cdcd_control_xfer_cb+0x1dc>
 8006fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb8 <cdcd_control_xfer_cb+0x80>)
 8006fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb6:	bf00      	nop
 8006fb8:	08006fc9 	.word	0x08006fc9
 8006fbc:	08007005 	.word	0x08007005
 8006fc0:	0800701f 	.word	0x0800701f
 8006fc4:	080070e3 	.word	0x080070e3
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8006fc8:	79bb      	ldrb	r3, [r7, #6]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d108      	bne.n	8006fe0 <cdcd_control_xfer_cb+0xa8>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	f103 0208 	add.w	r2, r3, #8
 8006fd4:	79f8      	ldrb	r0, [r7, #7]
 8006fd6:	2307      	movs	r3, #7
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	f003 fa13 	bl	800a404 <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 8006fde:	e09b      	b.n	8007118 <cdcd_control_xfer_cb+0x1e0>
      } else if (stage == CONTROL_STAGE_ACK) {
 8006fe0:	79bb      	ldrb	r3, [r7, #6]
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	f040 8098 	bne.w	8007118 <cdcd_control_xfer_cb+0x1e0>
        if (tud_cdc_line_coding_cb) {
 8006fe8:	4b52      	ldr	r3, [pc, #328]	@ (8007134 <cdcd_control_xfer_cb+0x1fc>)
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 8094 	beq.w	8007118 <cdcd_control_xfer_cb+0x1e0>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	f103 0208 	add.w	r2, r3, #8
 8006ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f3af 8000 	nop.w
      break;
 8007002:	e089      	b.n	8007118 <cdcd_control_xfer_cb+0x1e0>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8007004:	79bb      	ldrb	r3, [r7, #6]
 8007006:	2b01      	cmp	r3, #1
 8007008:	f040 8088 	bne.w	800711c <cdcd_control_xfer_cb+0x1e4>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	f103 0208 	add.w	r2, r3, #8
 8007012:	79f8      	ldrb	r0, [r7, #7]
 8007014:	2307      	movs	r3, #7
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	f003 f9f4 	bl	800a404 <tud_control_xfer>
      }
      break;
 800701c:	e07e      	b.n	800711c <cdcd_control_xfer_cb+0x1e4>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 800701e:	79bb      	ldrb	r3, [r7, #6]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d105      	bne.n	8007030 <cdcd_control_xfer_cb+0xf8>
        tud_control_status(rhport, request);
 8007024:	79fb      	ldrb	r3, [r7, #7]
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	4618      	mov	r0, r3
 800702a:	f003 f979 	bl	800a320 <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 800702e:	e077      	b.n	8007120 <cdcd_control_xfer_cb+0x1e8>
      } else if (stage == CONTROL_STAGE_ACK) {
 8007030:	79bb      	ldrb	r3, [r7, #6]
 8007032:	2b03      	cmp	r3, #3
 8007034:	d174      	bne.n	8007120 <cdcd_control_xfer_cb+0x1e8>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	885b      	ldrh	r3, [r3, #2]
 800703a:	b29b      	uxth	r3, r3
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	2300      	movs	r3, #0
 8007040:	73fb      	strb	r3, [r7, #15]
 8007042:	7bfb      	ldrb	r3, [r7, #15]
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	fa22 f303 	lsr.w	r3, r2, r3
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	bf14      	ite	ne
 8007052:	2301      	movne	r3, #1
 8007054:	2300      	moveq	r3, #0
 8007056:	b2db      	uxtb	r3, r3
 8007058:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	885b      	ldrh	r3, [r3, #2]
 800705e:	b29b      	uxth	r3, r3
 8007060:	61bb      	str	r3, [r7, #24]
 8007062:	2301      	movs	r3, #1
 8007064:	75fb      	strb	r3, [r7, #23]
 8007066:	7dfb      	ldrb	r3, [r7, #23]
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	fa22 f303 	lsr.w	r3, r2, r3
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	bf14      	ite	ne
 8007076:	2301      	movne	r3, #1
 8007078:	2300      	moveq	r3, #0
 800707a:	b2db      	uxtb	r3, r3
 800707c:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	885b      	ldrh	r3, [r3, #2]
 8007082:	b29b      	uxth	r3, r3
 8007084:	b2da      	uxtb	r2, r3
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	711a      	strb	r2, [r3, #4]
        if (_cdcd_cfg.tx_overwritabe_if_not_connected) {
 800708a:	4b2b      	ldr	r3, [pc, #172]	@ (8007138 <cdcd_control_xfer_cb+0x200>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	f003 0304 	and.w	r3, r3, #4
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b00      	cmp	r3, #0
 8007096:	d013      	beq.n	80070c0 <cdcd_control_xfer_cb+0x188>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	f103 021c 	add.w	r2, r3, #28
 800709e:	7ffb      	ldrb	r3, [r7, #31]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	bf14      	ite	ne
 80070a4:	2301      	movne	r3, #1
 80070a6:	2300      	moveq	r3, #0
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	f083 0301 	eor.w	r3, r3, #1
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	4619      	mov	r1, r3
 80070b8:	4610      	mov	r0, r2
 80070ba:	f001 fbbc 	bl	8008836 <tu_fifo_set_overwritable>
 80070be:	e005      	b.n	80070cc <cdcd_control_xfer_cb+0x194>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, false);
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	331c      	adds	r3, #28
 80070c4:	2100      	movs	r1, #0
 80070c6:	4618      	mov	r0, r3
 80070c8:	f001 fbb5 	bl	8008836 <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 80070cc:	4b1b      	ldr	r3, [pc, #108]	@ (800713c <cdcd_control_xfer_cb+0x204>)
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d026      	beq.n	8007120 <cdcd_control_xfer_cb+0x1e8>
          tud_cdc_line_state_cb(itf, dtr, rts);
 80070d2:	7fba      	ldrb	r2, [r7, #30]
 80070d4:	7ff9      	ldrb	r1, [r7, #31]
 80070d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fa f93a 	bl	8001354 <tud_cdc_line_state_cb>
      break;
 80070e0:	e01e      	b.n	8007120 <cdcd_control_xfer_cb+0x1e8>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 80070e2:	79bb      	ldrb	r3, [r7, #6]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d105      	bne.n	80070f4 <cdcd_control_xfer_cb+0x1bc>
        tud_control_status(rhport, request);
 80070e8:	79fb      	ldrb	r3, [r7, #7]
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	4618      	mov	r0, r3
 80070ee:	f003 f917 	bl	800a320 <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 80070f2:	e017      	b.n	8007124 <cdcd_control_xfer_cb+0x1ec>
      } else if (stage == CONTROL_STAGE_ACK) {
 80070f4:	79bb      	ldrb	r3, [r7, #6]
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d114      	bne.n	8007124 <cdcd_control_xfer_cb+0x1ec>
        if (tud_cdc_send_break_cb) {
 80070fa:	4b11      	ldr	r3, [pc, #68]	@ (8007140 <cdcd_control_xfer_cb+0x208>)
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d011      	beq.n	8007124 <cdcd_control_xfer_cb+0x1ec>
          tud_cdc_send_break_cb(itf, request->wValue);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	885b      	ldrh	r3, [r3, #2]
 8007104:	b29a      	uxth	r2, r3
 8007106:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800710a:	4611      	mov	r1, r2
 800710c:	4618      	mov	r0, r3
 800710e:	f3af 8000 	nop.w
      break;
 8007112:	e007      	b.n	8007124 <cdcd_control_xfer_cb+0x1ec>

    default:
      return false; // stall unsupported request
 8007114:	2300      	movs	r3, #0
 8007116:	e007      	b.n	8007128 <cdcd_control_xfer_cb+0x1f0>
      break;
 8007118:	bf00      	nop
 800711a:	e004      	b.n	8007126 <cdcd_control_xfer_cb+0x1ee>
      break;
 800711c:	bf00      	nop
 800711e:	e002      	b.n	8007126 <cdcd_control_xfer_cb+0x1ee>
      break;
 8007120:	bf00      	nop
 8007122:	e000      	b.n	8007126 <cdcd_control_xfer_cb+0x1ee>
      break;
 8007124:	bf00      	nop
  }

  return true;
 8007126:	2301      	movs	r3, #1
}
 8007128:	4618      	mov	r0, r3
 800712a:	3728      	adds	r7, #40	@ 0x28
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	20001570 	.word	0x20001570
 8007134:	00000000 	.word	0x00000000
 8007138:	2000022c 	.word	0x2000022c
 800713c:	08001355 	.word	0x08001355
 8007140:	00000000 	.word	0x00000000

08007144 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8007144:	b580      	push	{r7, lr}
 8007146:	b088      	sub	sp, #32
 8007148:	af00      	add	r7, sp, #0
 800714a:	603b      	str	r3, [r7, #0]
 800714c:	4603      	mov	r3, r0
 800714e:	71fb      	strb	r3, [r7, #7]
 8007150:	460b      	mov	r3, r1
 8007152:	71bb      	strb	r3, [r7, #6]
 8007154:	4613      	mov	r3, r2
 8007156:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8007158:	2300      	movs	r3, #0
 800715a:	77fb      	strb	r3, [r7, #31]
 800715c:	e013      	b.n	8007186 <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 800715e:	7ffb      	ldrb	r3, [r7, #31]
 8007160:	22e8      	movs	r2, #232	@ 0xe8
 8007162:	fb02 f303 	mul.w	r3, r2, r3
 8007166:	4a5f      	ldr	r2, [pc, #380]	@ (80072e4 <cdcd_xfer_cb+0x1a0>)
 8007168:	4413      	add	r3, r2
 800716a:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	78db      	ldrb	r3, [r3, #3]
 8007170:	79ba      	ldrb	r2, [r7, #6]
 8007172:	429a      	cmp	r2, r3
 8007174:	d00a      	beq.n	800718c <cdcd_xfer_cb+0x48>
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	789b      	ldrb	r3, [r3, #2]
 800717a:	79ba      	ldrb	r2, [r7, #6]
 800717c:	429a      	cmp	r2, r3
 800717e:	d005      	beq.n	800718c <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8007180:	7ffb      	ldrb	r3, [r7, #31]
 8007182:	3301      	adds	r3, #1
 8007184:	77fb      	strb	r3, [r7, #31]
 8007186:	7ffb      	ldrb	r3, [r7, #31]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d0e8      	beq.n	800715e <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 800718c:	7ffb      	ldrb	r3, [r7, #31]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00a      	beq.n	80071a8 <cdcd_xfer_cb+0x64>
 8007192:	4b55      	ldr	r3, [pc, #340]	@ (80072e8 <cdcd_xfer_cb+0x1a4>)
 8007194:	60bb      	str	r3, [r7, #8]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d000      	beq.n	80071a4 <cdcd_xfer_cb+0x60>
 80071a2:	be00      	bkpt	0x0000
 80071a4:	2300      	movs	r3, #0
 80071a6:	e098      	b.n	80072da <cdcd_xfer_cb+0x196>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 80071a8:	7ffb      	ldrb	r3, [r7, #31]
 80071aa:	01db      	lsls	r3, r3, #7
 80071ac:	4a4f      	ldr	r2, [pc, #316]	@ (80072ec <cdcd_xfer_cb+0x1a8>)
 80071ae:	4413      	add	r3, r2
 80071b0:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	78db      	ldrb	r3, [r3, #3]
 80071b6:	79ba      	ldrb	r2, [r7, #6]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d148      	bne.n	800724e <cdcd_xfer_cb+0x10a>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	3310      	adds	r3, #16
 80071c0:	6939      	ldr	r1, [r7, #16]
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	b292      	uxth	r2, r2
 80071c6:	4618      	mov	r0, r3
 80071c8:	f001 fb00 	bl	80087cc <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 80071cc:	4b48      	ldr	r3, [pc, #288]	@ (80072f0 <cdcd_xfer_cb+0x1ac>)
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d027      	beq.n	8007222 <cdcd_xfer_cb+0xde>
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	795b      	ldrb	r3, [r3, #5]
 80071d6:	2bff      	cmp	r3, #255	@ 0xff
 80071d8:	d023      	beq.n	8007222 <cdcd_xfer_cb+0xde>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 80071da:	2300      	movs	r3, #0
 80071dc:	617b      	str	r3, [r7, #20]
 80071de:	e01c      	b.n	800721a <cdcd_xfer_cb+0xd6>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	795a      	ldrb	r2, [r3, #5]
 80071e4:	6939      	ldr	r1, [r7, #16]
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	440b      	add	r3, r1
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d111      	bne.n	8007214 <cdcd_xfer_cb+0xd0>
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	3310      	adds	r3, #16
 80071f4:	4618      	mov	r0, r3
 80071f6:	f001 f9e3 	bl	80085c0 <tu_fifo_empty>
 80071fa:	4603      	mov	r3, r0
 80071fc:	f083 0301 	eor.w	r3, r3, #1
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d006      	beq.n	8007214 <cdcd_xfer_cb+0xd0>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	795a      	ldrb	r2, [r3, #5]
 800720a:	7ffb      	ldrb	r3, [r7, #31]
 800720c:	4611      	mov	r1, r2
 800720e:	4618      	mov	r0, r3
 8007210:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	3301      	adds	r3, #1
 8007218:	617b      	str	r3, [r7, #20]
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	429a      	cmp	r2, r3
 8007220:	d3de      	bcc.n	80071e0 <cdcd_xfer_cb+0x9c>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8007222:	4b34      	ldr	r3, [pc, #208]	@ (80072f4 <cdcd_xfer_cb+0x1b0>)
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00e      	beq.n	8007246 <cdcd_xfer_cb+0x102>
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	3310      	adds	r3, #16
 800722c:	4618      	mov	r0, r3
 800722e:	f001 f9c7 	bl	80085c0 <tu_fifo_empty>
 8007232:	4603      	mov	r3, r0
 8007234:	f083 0301 	eor.w	r3, r3, #1
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <cdcd_xfer_cb+0x102>
      tud_cdc_rx_cb(itf);
 800723e:	7ffb      	ldrb	r3, [r7, #31]
 8007240:	4618      	mov	r0, r3
 8007242:	f7fa f8b3 	bl	80013ac <tud_cdc_rx_cb>
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 8007246:	7ffb      	ldrb	r3, [r7, #31]
 8007248:	4618      	mov	r0, r3
 800724a:	f7ff fb1b 	bl	8006884 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	789b      	ldrb	r3, [r3, #2]
 8007252:	79ba      	ldrb	r2, [r7, #6]
 8007254:	429a      	cmp	r2, r3
 8007256:	d13f      	bne.n	80072d8 <cdcd_xfer_cb+0x194>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 8007258:	4b27      	ldr	r3, [pc, #156]	@ (80072f8 <cdcd_xfer_cb+0x1b4>)
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <cdcd_xfer_cb+0x122>
      tud_cdc_tx_complete_cb(itf);
 800725e:	7ffb      	ldrb	r3, [r7, #31]
 8007260:	4618      	mov	r0, r3
 8007262:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 8007266:	7ffb      	ldrb	r3, [r7, #31]
 8007268:	4618      	mov	r0, r3
 800726a:	f7ff fc2f 	bl	8006acc <tud_cdc_n_write_flush>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d131      	bne.n	80072d8 <cdcd_xfer_cb+0x194>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	331c      	adds	r3, #28
 8007278:	4618      	mov	r0, r3
 800727a:	f001 f96f 	bl	800855c <tu_fifo_count>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d129      	bne.n	80072d8 <cdcd_xfer_cb+0x194>
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d026      	beq.n	80072d8 <cdcd_xfer_cb+0x194>
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007290:	2b00      	cmp	r3, #0
 8007292:	d121      	bne.n	80072d8 <cdcd_xfer_cb+0x194>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	789a      	ldrb	r2, [r3, #2]
 8007298:	79fb      	ldrb	r3, [r7, #7]
 800729a:	4611      	mov	r1, r2
 800729c:	4618      	mov	r0, r3
 800729e:	f002 fe79 	bl	8009f94 <usbd_edpt_claim>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d017      	beq.n	80072d8 <cdcd_xfer_cb+0x194>
          TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0));
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	7899      	ldrb	r1, [r3, #2]
 80072ac:	79f8      	ldrb	r0, [r7, #7]
 80072ae:	2300      	movs	r3, #0
 80072b0:	2200      	movs	r2, #0
 80072b2:	f002 febf 	bl	800a034 <usbd_edpt_xfer>
 80072b6:	4603      	mov	r3, r0
 80072b8:	f083 0301 	eor.w	r3, r3, #1
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00a      	beq.n	80072d8 <cdcd_xfer_cb+0x194>
 80072c2:	4b09      	ldr	r3, [pc, #36]	@ (80072e8 <cdcd_xfer_cb+0x1a4>)
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d000      	beq.n	80072d4 <cdcd_xfer_cb+0x190>
 80072d2:	be00      	bkpt	0x0000
 80072d4:	2300      	movs	r3, #0
 80072d6:	e000      	b.n	80072da <cdcd_xfer_cb+0x196>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 80072d8:	2301      	movs	r3, #1
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3720      	adds	r7, #32
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	20001570 	.word	0x20001570
 80072e8:	e000edf0 	.word	0xe000edf0
 80072ec:	20001658 	.word	0x20001658
 80072f0:	00000000 	.word	0x00000000
 80072f4:	080013ad 	.word	0x080013ad
 80072f8:	00000000 	.word	0x00000000

080072fc <tud_hid_set_idle_cb>:
TU_ATTR_WEAK void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
  (void) instance;
  (void) protocol;
}

TU_ATTR_WEAK bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate) {
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	4603      	mov	r3, r0
 8007304:	460a      	mov	r2, r1
 8007306:	71fb      	strb	r3, [r7, #7]
 8007308:	4613      	mov	r3, r2
 800730a:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) idle_rate;
  return true;
 800730c:	2301      	movs	r3, #1
}
 800730e:	4618      	mov	r0, r3
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <tud_hid_report_failed_cb>:
  (void) report;
  (void) len;
}

// Invoked when a transfer wasn't successful
TU_ATTR_WEAK void tud_hid_report_failed_cb(uint8_t instance, hid_report_type_t report_type, uint8_t const* report, uint16_t xferred_bytes) {
 800731a:	b480      	push	{r7}
 800731c:	b083      	sub	sp, #12
 800731e:	af00      	add	r7, sp, #0
 8007320:	603a      	str	r2, [r7, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	4603      	mov	r3, r0
 8007326:	71fb      	strb	r3, [r7, #7]
 8007328:	460b      	mov	r3, r1
 800732a:	71bb      	strb	r3, [r7, #6]
 800732c:	4613      	mov	r3, r2
 800732e:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report_type;
  (void) report;
  (void) xferred_bytes;
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance) {
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	4603      	mov	r3, r0
 8007344:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 8007346:	2300      	movs	r3, #0
 8007348:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 800734a:	79fa      	ldrb	r2, [r7, #7]
 800734c:	491b      	ldr	r1, [pc, #108]	@ (80073bc <tud_hid_n_ready+0x80>)
 800734e:	4613      	mov	r3, r2
 8007350:	005b      	lsls	r3, r3, #1
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	440b      	add	r3, r1
 8007358:	3301      	adds	r3, #1
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	73bb      	strb	r3, [r7, #14]
 800735e:	f001 faf7 	bl	8008950 <tud_mounted>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d009      	beq.n	800737c <tud_hid_n_ready+0x40>
 8007368:	f001 fb04 	bl	8008974 <tud_suspended>
 800736c:	4603      	mov	r3, r0
 800736e:	f083 0301 	eor.w	r3, r3, #1
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <tud_hid_n_ready+0x40>
 8007378:	2301      	movs	r3, #1
 800737a:	e000      	b.n	800737e <tud_hid_n_ready+0x42>
 800737c:	2300      	movs	r3, #0
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 8007384:	2b00      	cmp	r3, #0
 8007386:	d010      	beq.n	80073aa <tud_hid_n_ready+0x6e>
 8007388:	7bbb      	ldrb	r3, [r7, #14]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00d      	beq.n	80073aa <tud_hid_n_ready+0x6e>
 800738e:	7bba      	ldrb	r2, [r7, #14]
 8007390:	7bfb      	ldrb	r3, [r7, #15]
 8007392:	4611      	mov	r1, r2
 8007394:	4618      	mov	r0, r3
 8007396:	f002 fec3 	bl	800a120 <usbd_edpt_busy>
 800739a:	4603      	mov	r3, r0
 800739c:	f083 0301 	eor.w	r3, r3, #1
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <tud_hid_n_ready+0x6e>
 80073a6:	2301      	movs	r3, #1
 80073a8:	e000      	b.n	80073ac <tud_hid_n_ready+0x70>
 80073aa:	2300      	movs	r3, #0
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	b2db      	uxtb	r3, r3
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	200016d8 	.word	0x200016d8

080073c0 <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const *report, uint16_t len) {
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08e      	sub	sp, #56	@ 0x38
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	603a      	str	r2, [r7, #0]
 80073c8:	461a      	mov	r2, r3
 80073ca:	4603      	mov	r3, r0
 80073cc:	71fb      	strb	r3, [r7, #7]
 80073ce:	460b      	mov	r3, r1
 80073d0:	71bb      	strb	r3, [r7, #6]
 80073d2:	4613      	mov	r3, r2
 80073d4:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(instance < CFG_TUD_HID);
 80073d6:	79fb      	ldrb	r3, [r7, #7]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <tud_hid_n_report+0x20>
 80073dc:	2300      	movs	r3, #0
 80073de:	e06d      	b.n	80074bc <tud_hid_n_report+0xfc>
  const uint8_t rhport = 0;
 80073e0:	2300      	movs	r3, #0
 80073e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  hidd_interface_t *p_hid = &_hidd_itf[instance];
 80073e6:	79fa      	ldrb	r2, [r7, #7]
 80073e8:	4613      	mov	r3, r2
 80073ea:	005b      	lsls	r3, r3, #1
 80073ec:	4413      	add	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4a34      	ldr	r2, [pc, #208]	@ (80074c4 <tud_hid_n_report+0x104>)
 80073f2:	4413      	add	r3, r2
 80073f4:	633b      	str	r3, [r7, #48]	@ 0x30
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 80073f6:	79fa      	ldrb	r2, [r7, #7]
 80073f8:	4613      	mov	r3, r2
 80073fa:	005b      	lsls	r3, r3, #1
 80073fc:	4413      	add	r3, r2
 80073fe:	011b      	lsls	r3, r3, #4
 8007400:	4a31      	ldr	r2, [pc, #196]	@ (80074c8 <tud_hid_n_report+0x108>)
 8007402:	4413      	add	r3, r2
 8007404:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_hid->ep_in));
 8007406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007408:	785a      	ldrb	r2, [r3, #1]
 800740a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800740e:	4611      	mov	r1, r2
 8007410:	4618      	mov	r0, r3
 8007412:	f002 fdbf 	bl	8009f94 <usbd_edpt_claim>
 8007416:	4603      	mov	r3, r0
 8007418:	f083 0301 	eor.w	r3, r3, #1
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <tud_hid_n_report+0x66>
 8007422:	2300      	movs	r3, #0
 8007424:	e04a      	b.n	80074bc <tud_hid_n_report+0xfc>

  // prepare data
  if (report_id) {
 8007426:	79bb      	ldrb	r3, [r7, #6]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d021      	beq.n	8007470 <tud_hid_n_report+0xb0>
    p_epbuf->epin[0] = report_id;
 800742c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742e:	79ba      	ldrb	r2, [r7, #6]
 8007430:	741a      	strb	r2, [r3, #16]
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin + 1, CFG_TUD_HID_EP_BUFSIZE - 1, report, len));
 8007432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007434:	3310      	adds	r3, #16
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	88bb      	ldrh	r3, [r7, #4]
 800743a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800743c:	220f      	movs	r2, #15
 800743e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	623a      	str	r2, [r7, #32]
 8007444:	61fb      	str	r3, [r7, #28]
  if ( count > destsz ) {
 8007446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	429a      	cmp	r2, r3
 800744c:	d202      	bcs.n	8007454 <tud_hid_n_report+0x94>
    return -1;
 800744e:	f04f 33ff 	mov.w	r3, #4294967295
 8007452:	e005      	b.n	8007460 <tud_hid_n_report+0xa0>
  memcpy(dest, src, count);
 8007454:	69fa      	ldr	r2, [r7, #28]
 8007456:	6a39      	ldr	r1, [r7, #32]
 8007458:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800745a:	f005 fcc4 	bl	800cde6 <memcpy>
  return 0;
 800745e:	2300      	movs	r3, #0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <tud_hid_n_report+0xa8>
 8007464:	2300      	movs	r3, #0
 8007466:	e029      	b.n	80074bc <tud_hid_n_report+0xfc>
    len++;
 8007468:	88bb      	ldrh	r3, [r7, #4]
 800746a:	3301      	adds	r3, #1
 800746c:	80bb      	strh	r3, [r7, #4]
 800746e:	e01a      	b.n	80074a6 <tud_hid_n_report+0xe6>
  } else {
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin, CFG_TUD_HID_EP_BUFSIZE, report, len));
 8007470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007472:	f103 0210 	add.w	r2, r3, #16
 8007476:	88bb      	ldrh	r3, [r7, #4]
 8007478:	61ba      	str	r2, [r7, #24]
 800747a:	2210      	movs	r2, #16
 800747c:	617a      	str	r2, [r7, #20]
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	613a      	str	r2, [r7, #16]
 8007482:	60fb      	str	r3, [r7, #12]
  if ( count > destsz ) {
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	429a      	cmp	r2, r3
 800748a:	d202      	bcs.n	8007492 <tud_hid_n_report+0xd2>
    return -1;
 800748c:	f04f 33ff 	mov.w	r3, #4294967295
 8007490:	e005      	b.n	800749e <tud_hid_n_report+0xde>
  memcpy(dest, src, count);
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	6939      	ldr	r1, [r7, #16]
 8007496:	69b8      	ldr	r0, [r7, #24]
 8007498:	f005 fca5 	bl	800cde6 <memcpy>
  return 0;
 800749c:	2300      	movs	r3, #0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d001      	beq.n	80074a6 <tud_hid_n_report+0xe6>
 80074a2:	2300      	movs	r3, #0
 80074a4:	e00a      	b.n	80074bc <tud_hid_n_report+0xfc>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_epbuf->epin, len);
 80074a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a8:	7859      	ldrb	r1, [r3, #1]
 80074aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ac:	f103 0210 	add.w	r2, r3, #16
 80074b0:	88bb      	ldrh	r3, [r7, #4]
 80074b2:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 80074b6:	f002 fdbd 	bl	800a034 <usbd_edpt_xfer>
 80074ba:	4603      	mov	r3, r0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3738      	adds	r7, #56	@ 0x38
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	200016d8 	.word	0x200016d8
 80074c8:	200016e4 	.word	0x200016e4

080074cc <tud_hid_n_keyboard_report>:

uint8_t tud_hid_n_get_protocol(uint8_t instance) {
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	603b      	str	r3, [r7, #0]
 80074d4:	4603      	mov	r3, r0
 80074d6:	71fb      	strb	r3, [r7, #7]
 80074d8:	460b      	mov	r3, r1
 80074da:	71bb      	strb	r3, [r7, #6]
 80074dc:	4613      	mov	r3, r2
 80074de:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;
  report.modifier = modifier;
 80074e0:	797b      	ldrb	r3, [r7, #5]
 80074e2:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 80074e4:	2300      	movs	r3, #0
 80074e6:	727b      	strb	r3, [r7, #9]

  if (keycode) {
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d007      	beq.n	80074fe <tud_hid_n_keyboard_report+0x32>
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	f107 030a 	add.w	r3, r7, #10
 80074f4:	6811      	ldr	r1, [r2, #0]
 80074f6:	6019      	str	r1, [r3, #0]
 80074f8:	8892      	ldrh	r2, [r2, #4]
 80074fa:	809a      	strh	r2, [r3, #4]
 80074fc:	e007      	b.n	800750e <tud_hid_n_keyboard_report+0x42>
  } else {
    tu_memclr(report.keycode, 6);
 80074fe:	f107 0308 	add.w	r3, r7, #8
 8007502:	3302      	adds	r3, #2
 8007504:	2206      	movs	r2, #6
 8007506:	2100      	movs	r1, #0
 8007508:	4618      	mov	r0, r3
 800750a:	f005 fb94 	bl	800cc36 <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 800750e:	f107 0208 	add.w	r2, r7, #8
 8007512:	79b9      	ldrb	r1, [r7, #6]
 8007514:	79f8      	ldrb	r0, [r7, #7]
 8007516:	2308      	movs	r3, #8
 8007518:	f7ff ff52 	bl	80073c0 <tud_hid_n_report>
 800751c:	4603      	mov	r3, r0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <hidd_init>:
}

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void) {
 8007526:	b580      	push	{r7, lr}
 8007528:	af00      	add	r7, sp, #0
  hidd_reset(0);
 800752a:	2000      	movs	r0, #0
 800752c:	f000 f80a 	bl	8007544 <hidd_reset>
}
 8007530:	bf00      	nop
 8007532:	bd80      	pop	{r7, pc}

08007534 <hidd_deinit>:

bool hidd_deinit(void) {
 8007534:	b480      	push	{r7}
 8007536:	af00      	add	r7, sp, #0
  return true;
 8007538:	2301      	movs	r3, #1
}
 800753a:	4618      	mov	r0, r3
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <hidd_reset>:

void hidd_reset(uint8_t rhport) {
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	4603      	mov	r3, r0
 800754c:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 800754e:	220c      	movs	r2, #12
 8007550:	2100      	movs	r1, #0
 8007552:	4803      	ldr	r0, [pc, #12]	@ (8007560 <hidd_reset+0x1c>)
 8007554:	f005 fb6f 	bl	800cc36 <memset>
}
 8007558:	bf00      	nop
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	200016d8 	.word	0x200016d8

08007564 <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const *desc_itf, uint16_t max_len) {
 8007564:	b580      	push	{r7, lr}
 8007566:	b094      	sub	sp, #80	@ 0x50
 8007568:	af02      	add	r7, sp, #8
 800756a:	4603      	mov	r3, r0
 800756c:	6039      	str	r1, [r7, #0]
 800756e:	71fb      	strb	r3, [r7, #7]
 8007570:	4613      	mov	r3, r2
 8007572:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	795b      	ldrb	r3, [r3, #5]
 8007578:	2b03      	cmp	r3, #3
 800757a:	d001      	beq.n	8007580 <hidd_open+0x1c>
 800757c:	2300      	movs	r3, #0
 800757e:	e0ce      	b.n	800771e <hidd_open+0x1ba>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	791b      	ldrb	r3, [r3, #4]
 8007584:	461a      	mov	r2, r3
 8007586:	00d2      	lsls	r2, r2, #3
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 800758c:	3312      	adds	r3, #18
 800758e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  TU_ASSERT(max_len >= drv_len, 0);
 8007592:	88ba      	ldrh	r2, [r7, #4]
 8007594:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007598:	429a      	cmp	r2, r3
 800759a:	d20a      	bcs.n	80075b2 <hidd_open+0x4e>
 800759c:	4b62      	ldr	r3, [pc, #392]	@ (8007728 <hidd_open+0x1c4>)
 800759e:	627b      	str	r3, [r7, #36]	@ 0x24
 80075a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d000      	beq.n	80075ae <hidd_open+0x4a>
 80075ac:	be00      	bkpt	0x0000
 80075ae:	2300      	movs	r3, #0
 80075b0:	e0b5      	b.n	800771e <hidd_open+0x1ba>

  // Find available interface
  hidd_interface_t *p_hid;
  uint8_t hid_id;
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 80075b2:	2300      	movs	r3, #0
 80075b4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075b8:	e011      	b.n	80075de <hidd_open+0x7a>
    p_hid = &_hidd_itf[hid_id];
 80075ba:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80075be:	4613      	mov	r3, r2
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4a59      	ldr	r2, [pc, #356]	@ (800772c <hidd_open+0x1c8>)
 80075c8:	4413      	add	r3, r2
 80075ca:	647b      	str	r3, [r7, #68]	@ 0x44
    if (p_hid->ep_in == 0) {
 80075cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075ce:	785b      	ldrb	r3, [r3, #1]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d009      	beq.n	80075e8 <hidd_open+0x84>
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 80075d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80075d8:	3301      	adds	r3, #1
 80075da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d0e9      	beq.n	80075ba <hidd_open+0x56>
 80075e6:	e000      	b.n	80075ea <hidd_open+0x86>
      break;
 80075e8:	bf00      	nop
    }
  }
  TU_ASSERT(hid_id < CFG_TUD_HID, 0);
 80075ea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00a      	beq.n	8007608 <hidd_open+0xa4>
 80075f2:	4b4d      	ldr	r3, [pc, #308]	@ (8007728 <hidd_open+0x1c4>)
 80075f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d000      	beq.n	8007604 <hidd_open+0xa0>
 8007602:	be00      	bkpt	0x0000
 8007604:	2300      	movs	r3, #0
 8007606:	e08a      	b.n	800771e <hidd_open+0x1ba>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_id];
 8007608:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800760c:	4613      	mov	r3, r2
 800760e:	005b      	lsls	r3, r3, #1
 8007610:	4413      	add	r3, r2
 8007612:	011b      	lsls	r3, r3, #4
 8007614:	4a46      	ldr	r2, [pc, #280]	@ (8007730 <hidd_open+0x1cc>)
 8007616:	4413      	add	r3, r2
 8007618:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint8_t const *p_desc = (uint8_t const *)desc_itf;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800761e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007620:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8007630:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007634:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007636:	6a3b      	ldr	r3, [r7, #32]
 8007638:	3301      	adds	r3, #1
 800763a:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 800763c:	2b21      	cmp	r3, #33	@ 0x21
 800763e:	d00a      	beq.n	8007656 <hidd_open+0xf2>
 8007640:	4b39      	ldr	r3, [pc, #228]	@ (8007728 <hidd_open+0x1c4>)
 8007642:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	d000      	beq.n	8007652 <hidd_open+0xee>
 8007650:	be00      	bkpt	0x0000
 8007652:	2300      	movs	r3, #0
 8007654:	e063      	b.n	800771e <hidd_open+0x1ba>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *)p_desc;
 8007656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007658:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800765a:	609a      	str	r2, [r3, #8]
 800765c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765e:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	461a      	mov	r2, r3
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 800766e:	63bb      	str	r3, [r7, #56]	@ 0x38
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	7919      	ldrb	r1, [r3, #4]
 8007674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007676:	3302      	adds	r3, #2
 8007678:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800767a:	3201      	adds	r2, #1
 800767c:	79f8      	ldrb	r0, [r7, #7]
 800767e:	9201      	str	r2, [sp, #4]
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	2303      	movs	r3, #3
 8007684:	460a      	mov	r2, r1
 8007686:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007688:	f002 fbd6 	bl	8009e38 <usbd_open_edpt_pair>
 800768c:	4603      	mov	r3, r0
 800768e:	f083 0301 	eor.w	r3, r3, #1
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00a      	beq.n	80076ae <hidd_open+0x14a>
 8007698:	4b23      	ldr	r3, [pc, #140]	@ (8007728 <hidd_open+0x1c4>)
 800769a:	633b      	str	r3, [r7, #48]	@ 0x30
 800769c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d000      	beq.n	80076aa <hidd_open+0x146>
 80076a8:	be00      	bkpt	0x0000
 80076aa:	2300      	movs	r3, #0
 80076ac:	e037      	b.n	800771e <hidd_open+0x1ba>

  if (desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT) {
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	799b      	ldrb	r3, [r3, #6]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d103      	bne.n	80076be <hidd_open+0x15a>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	79da      	ldrb	r2, [r3, #7]
 80076ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076bc:	70da      	strb	r2, [r3, #3]
  }

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 80076be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076c0:	2201      	movs	r2, #1
 80076c2:	719a      	strb	r2, [r3, #6]
  p_hid->itf_num = desc_itf->bInterfaceNumber;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	789a      	ldrb	r2, [r3, #2]
 80076c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076ca:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const *)p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 80076cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	3307      	adds	r3, #7
 80076d2:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	881a      	ldrh	r2, [r3, #0]
 80076d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076da:	809a      	strh	r2, [r3, #4]

  // Prepare for output endpoint
  if (p_hid->ep_out) {
 80076dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076de:	789b      	ldrb	r3, [r3, #2]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d01a      	beq.n	800771a <hidd_open+0x1b6>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE), drv_len);
 80076e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076e6:	7899      	ldrb	r1, [r3, #2]
 80076e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ea:	f103 0220 	add.w	r2, r3, #32
 80076ee:	79f8      	ldrb	r0, [r7, #7]
 80076f0:	2310      	movs	r3, #16
 80076f2:	f002 fc9f 	bl	800a034 <usbd_edpt_xfer>
 80076f6:	4603      	mov	r3, r0
 80076f8:	f083 0301 	eor.w	r3, r3, #1
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00b      	beq.n	800771a <hidd_open+0x1b6>
 8007702:	4b09      	ldr	r3, [pc, #36]	@ (8007728 <hidd_open+0x1c4>)
 8007704:	637b      	str	r3, [r7, #52]	@ 0x34
 8007706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0301 	and.w	r3, r3, #1
 800770e:	2b00      	cmp	r3, #0
 8007710:	d000      	beq.n	8007714 <hidd_open+0x1b0>
 8007712:	be00      	bkpt	0x0000
 8007714:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007718:	e001      	b.n	800771e <hidd_open+0x1ba>
  }

  return drv_len;
 800771a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
}
 800771e:	4618      	mov	r0, r3
 8007720:	3748      	adds	r7, #72	@ 0x48
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	e000edf0 	.word	0xe000edf0
 800772c:	200016d8 	.word	0x200016d8
 8007730:	200016e4 	.word	0x200016e4

08007734 <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 8007734:	b580      	push	{r7, lr}
 8007736:	b094      	sub	sp, #80	@ 0x50
 8007738:	af02      	add	r7, sp, #8
 800773a:	4603      	mov	r3, r0
 800773c:	603a      	str	r2, [r7, #0]
 800773e:	71fb      	strb	r3, [r7, #7]
 8007740:	460b      	mov	r3, r1
 8007742:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	f003 031f 	and.w	r3, r3, #31
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b01      	cmp	r3, #1
 8007750:	d001      	beq.n	8007756 <hidd_control_xfer_cb+0x22>
 8007752:	2300      	movs	r3, #0
 8007754:	e1d6      	b.n	8007b04 <hidd_control_xfer_cb+0x3d0>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	889b      	ldrh	r3, [r3, #4]
 800775a:	b29b      	uxth	r3, r3
 800775c:	b2db      	uxtb	r3, r3
 800775e:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8007760:	2300      	movs	r3, #0
 8007762:	77bb      	strb	r3, [r7, #30]
 8007764:	e00f      	b.n	8007786 <hidd_control_xfer_cb+0x52>
    if (itf_num == _hidd_itf[i].itf_num) {
 8007766:	7fba      	ldrb	r2, [r7, #30]
 8007768:	498f      	ldr	r1, [pc, #572]	@ (80079a8 <hidd_control_xfer_cb+0x274>)
 800776a:	4613      	mov	r3, r2
 800776c:	005b      	lsls	r3, r3, #1
 800776e:	4413      	add	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	440b      	add	r3, r1
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	7ffa      	ldrb	r2, [r7, #31]
 8007778:	429a      	cmp	r2, r3
 800777a:	d101      	bne.n	8007780 <hidd_control_xfer_cb+0x4c>
      return i;
 800777c:	7fbb      	ldrb	r3, [r7, #30]
 800777e:	e006      	b.n	800778e <hidd_control_xfer_cb+0x5a>
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8007780:	7fbb      	ldrb	r3, [r7, #30]
 8007782:	3301      	adds	r3, #1
 8007784:	77bb      	strb	r3, [r7, #30]
 8007786:	7fbb      	ldrb	r3, [r7, #30]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d0ec      	beq.n	8007766 <hidd_control_xfer_cb+0x32>
  return 0xFF;
 800778c:	23ff      	movs	r3, #255	@ 0xff
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 800778e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 8007792:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <hidd_control_xfer_cb+0x6a>
 800779a:	2300      	movs	r3, #0
 800779c:	e1b2      	b.n	8007b04 <hidd_control_xfer_cb+0x3d0>
  hidd_interface_t *p_hid = &_hidd_itf[hid_itf];
 800779e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80077a2:	4613      	mov	r3, r2
 80077a4:	005b      	lsls	r3, r3, #1
 80077a6:	4413      	add	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4a7f      	ldr	r2, [pc, #508]	@ (80079a8 <hidd_control_xfer_cb+0x274>)
 80077ac:	4413      	add	r3, r2
 80077ae:	637b      	str	r3, [r7, #52]	@ 0x34
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_itf];
 80077b0:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80077b4:	4613      	mov	r3, r2
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	4413      	add	r3, r2
 80077ba:	011b      	lsls	r3, r3, #4
 80077bc:	4a7b      	ldr	r2, [pc, #492]	@ (80079ac <hidd_control_xfer_cb+0x278>)
 80077be:	4413      	add	r3, r2
 80077c0:	633b      	str	r3, [r7, #48]	@ 0x30

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) {
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d145      	bne.n	800785c <hidd_control_xfer_cb+0x128>
    //------------- STD Request -------------//
    if (stage == CONTROL_STAGE_SETUP) {
 80077d0:	79bb      	ldrb	r3, [r7, #6]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	f040 8195 	bne.w	8007b02 <hidd_control_xfer_cb+0x3ce>
      uint8_t const desc_type = tu_u16_high(request->wValue);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	885b      	ldrh	r3, [r3, #2]
 80077dc:	b29b      	uxth	r3, r3
 80077de:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80077e0:	8bbb      	ldrh	r3, [r7, #28]
 80077e2:	0a1b      	lsrs	r3, r3, #8
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID) {
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	785b      	ldrb	r3, [r3, #1]
 80077f0:	2b06      	cmp	r3, #6
 80077f2:	d11b      	bne.n	800782c <hidd_control_xfer_cb+0xf8>
 80077f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077f8:	2b21      	cmp	r3, #33	@ 0x21
 80077fa:	d117      	bne.n	800782c <hidd_control_xfer_cb+0xf8>
        TU_VERIFY(p_hid->hid_descriptor);
 80077fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <hidd_control_xfer_cb+0xd4>
 8007804:	2300      	movs	r3, #0
 8007806:	e17d      	b.n	8007b04 <hidd_control_xfer_cb+0x3d0>
        TU_VERIFY(tud_control_xfer(rhport, request, (void *)(uintptr_t)p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 8007808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800780a:	689a      	ldr	r2, [r3, #8]
 800780c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	79f8      	ldrb	r0, [r7, #7]
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	f002 fdf5 	bl	800a404 <tud_control_xfer>
 800781a:	4603      	mov	r3, r0
 800781c:	f083 0301 	eor.w	r3, r3, #1
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 816d 	beq.w	8007b02 <hidd_control_xfer_cb+0x3ce>
 8007828:	2300      	movs	r3, #0
 800782a:	e16b      	b.n	8007b04 <hidd_control_xfer_cb+0x3d0>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	785b      	ldrb	r3, [r3, #1]
 8007830:	2b06      	cmp	r3, #6
 8007832:	d111      	bne.n	8007858 <hidd_control_xfer_cb+0x124>
 8007834:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007838:	2b22      	cmp	r3, #34	@ 0x22
 800783a:	d10d      	bne.n	8007858 <hidd_control_xfer_cb+0x124>
        uint8_t const *desc_report = tud_hid_descriptor_report_cb(hid_itf);
 800783c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007840:	4618      	mov	r0, r3
 8007842:	f7fc f941 	bl	8003ac8 <tud_hid_descriptor_report_cb>
 8007846:	6238      	str	r0, [r7, #32]
        tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_report, p_hid->report_desc_len);
 8007848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800784a:	889b      	ldrh	r3, [r3, #4]
 800784c:	79f8      	ldrb	r0, [r7, #7]
 800784e:	6a3a      	ldr	r2, [r7, #32]
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	f002 fdd7 	bl	800a404 <tud_control_xfer>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8007856:	e154      	b.n	8007b02 <hidd_control_xfer_cb+0x3ce>
      } else {
        return false; // stall unsupported request
 8007858:	2300      	movs	r3, #0
 800785a:	e153      	b.n	8007b04 <hidd_control_xfer_cb+0x3d0>
      }
    }
  } else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS) {
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b20      	cmp	r3, #32
 8007868:	f040 813e 	bne.w	8007ae8 <hidd_control_xfer_cb+0x3b4>
    //------------- Class Specific Request -------------//
    switch (request->bRequest) {
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	785b      	ldrb	r3, [r3, #1]
 8007870:	3b01      	subs	r3, #1
 8007872:	2b0a      	cmp	r3, #10
 8007874:	f200 8136 	bhi.w	8007ae4 <hidd_control_xfer_cb+0x3b0>
 8007878:	a201      	add	r2, pc, #4	@ (adr r2, 8007880 <hidd_control_xfer_cb+0x14c>)
 800787a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787e:	bf00      	nop
 8007880:	080078ad 	.word	0x080078ad
 8007884:	08007a83 	.word	0x08007a83
 8007888:	08007a99 	.word	0x08007a99
 800788c:	08007ae5 	.word	0x08007ae5
 8007890:	08007ae5 	.word	0x08007ae5
 8007894:	08007ae5 	.word	0x08007ae5
 8007898:	08007ae5 	.word	0x08007ae5
 800789c:	08007ae5 	.word	0x08007ae5
 80078a0:	08007983 	.word	0x08007983
 80078a4:	08007a3d 	.word	0x08007a3d
 80078a8:	08007aaf 	.word	0x08007aaf
      case HID_REQ_CONTROL_GET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 80078ac:	79bb      	ldrb	r3, [r7, #6]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	f040 811c 	bne.w	8007aec <hidd_control_xfer_cb+0x3b8>
          uint8_t const report_type = tu_u16_high(request->wValue);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	885b      	ldrh	r3, [r3, #2]
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	82bb      	strh	r3, [r7, #20]
 80078bc:	8abb      	ldrh	r3, [r7, #20]
 80078be:	0a1b      	lsrs	r3, r3, #8
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          uint8_t const report_id = tu_u16_low(request->wValue);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	885b      	ldrh	r3, [r3, #2]
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80078d0:	8afb      	ldrh	r3, [r7, #22]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

          uint8_t* report_buf = p_epbuf->ctrl;
 80078d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078da:	647b      	str	r3, [r7, #68]	@ 0x44
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	88db      	ldrh	r3, [r3, #6]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	837b      	strh	r3, [r7, #26]
 80078e4:	2310      	movs	r3, #16
 80078e6:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80078e8:	8b7a      	ldrh	r2, [r7, #26]
 80078ea:	8b3b      	ldrh	r3, [r7, #24]
 80078ec:	4293      	cmp	r3, r2
 80078ee:	bf28      	it	cs
 80078f0:	4613      	movcs	r3, r2
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          uint16_t xferlen = 0;
 80078f8:	2300      	movs	r3, #0
 80078fa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ((report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1)) {
 80078fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007902:	2b00      	cmp	r3, #0
 8007904:	d013      	beq.n	800792e <hidd_control_xfer_cb+0x1fa>
 8007906:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800790a:	2b01      	cmp	r3, #1
 800790c:	d90f      	bls.n	800792e <hidd_control_xfer_cb+0x1fa>
            *report_buf++ = report_id;
 800790e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	647a      	str	r2, [r7, #68]	@ 0x44
 8007914:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8007918:	701a      	strb	r2, [r3, #0]
            req_len--;
 800791a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800791e:	3b01      	subs	r3, #1
 8007920:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            xferlen++;
 8007924:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007928:	3301      	adds	r3, #1
 800792a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 800792e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8007932:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8007936:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 800793a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007942:	f7f9 ff8d 	bl	8001860 <tud_hid_get_report_cb>
 8007946:	4603      	mov	r3, r0
 8007948:	461a      	mov	r2, r3
 800794a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800794e:	4413      	add	r3, r2
 8007950:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          TU_ASSERT(xferlen > 0);
 8007954:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10a      	bne.n	8007972 <hidd_control_xfer_cb+0x23e>
 800795c:	4b14      	ldr	r3, [pc, #80]	@ (80079b0 <hidd_control_xfer_cb+0x27c>)
 800795e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b00      	cmp	r3, #0
 800796a:	d000      	beq.n	800796e <hidd_control_xfer_cb+0x23a>
 800796c:	be00      	bkpt	0x0000
 800796e:	2300      	movs	r3, #0
 8007970:	e0c8      	b.n	8007b04 <hidd_control_xfer_cb+0x3d0>

          tud_control_xfer(rhport, request, p_epbuf->ctrl, xferlen);
 8007972:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007974:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007978:	79f8      	ldrb	r0, [r7, #7]
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	f002 fd42 	bl	800a404 <tud_control_xfer>
        }
        break;
 8007980:	e0b4      	b.n	8007aec <hidd_control_xfer_cb+0x3b8>

      case HID_REQ_CONTROL_SET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8007982:	79bb      	ldrb	r3, [r7, #6]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d115      	bne.n	80079b4 <hidd_control_xfer_cb+0x280>
          TU_VERIFY(request->wLength <= CFG_TUD_HID_EP_BUFSIZE);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	88db      	ldrh	r3, [r3, #6]
 800798c:	b29b      	uxth	r3, r3
 800798e:	2b10      	cmp	r3, #16
 8007990:	d901      	bls.n	8007996 <hidd_control_xfer_cb+0x262>
 8007992:	2300      	movs	r3, #0
 8007994:	e0b6      	b.n	8007b04 <hidd_control_xfer_cb+0x3d0>
          tud_control_xfer(rhport, request, p_epbuf->ctrl, request->wLength);
 8007996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	88db      	ldrh	r3, [r3, #6]
 800799c:	b29b      	uxth	r3, r3
 800799e:	79f8      	ldrb	r0, [r7, #7]
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	f002 fd2f 	bl	800a404 <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
        break;
 80079a6:	e0a3      	b.n	8007af0 <hidd_control_xfer_cb+0x3bc>
 80079a8:	200016d8 	.word	0x200016d8
 80079ac:	200016e4 	.word	0x200016e4
 80079b0:	e000edf0 	.word	0xe000edf0
        } else if (stage == CONTROL_STAGE_ACK) {
 80079b4:	79bb      	ldrb	r3, [r7, #6]
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	f040 809a 	bne.w	8007af0 <hidd_control_xfer_cb+0x3bc>
          uint8_t const report_type = tu_u16_high(request->wValue);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	885b      	ldrh	r3, [r3, #2]
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80079c4:	89bb      	ldrh	r3, [r7, #12]
 80079c6:	0a1b      	lsrs	r3, r3, #8
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          uint8_t const report_id = tu_u16_low(request->wValue);
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	885b      	ldrh	r3, [r3, #2]
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80079d8:	89fb      	ldrh	r3, [r7, #14]
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          uint8_t const* report_buf = p_epbuf->ctrl;
 80079e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	88db      	ldrh	r3, [r3, #6]
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	827b      	strh	r3, [r7, #18]
 80079ec:	2310      	movs	r3, #16
 80079ee:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80079f0:	8a7a      	ldrh	r2, [r7, #18]
 80079f2:	8a3b      	ldrh	r3, [r7, #16]
 80079f4:	4293      	cmp	r3, r2
 80079f6:	bf28      	it	cs
 80079f8:	4613      	movcs	r3, r2
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	877b      	strh	r3, [r7, #58]	@ 0x3a
          if ((report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0])) {
 80079fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00e      	beq.n	8007a24 <hidd_control_xfer_cb+0x2f0>
 8007a06:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d90b      	bls.n	8007a24 <hidd_control_xfer_cb+0x2f0>
 8007a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d105      	bne.n	8007a24 <hidd_control_xfer_cb+0x2f0>
            report_buf++;
 8007a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            report_len--;
 8007a1e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007a20:	3b01      	subs	r3, #1
 8007a22:	877b      	strh	r3, [r7, #58]	@ 0x3a
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 8007a24:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007a28:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8007a2c:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8007a30:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a36:	f7f9 ff24 	bl	8001882 <tud_hid_set_report_cb>
        break;
 8007a3a:	e059      	b.n	8007af0 <hidd_control_xfer_cb+0x3bc>

      case HID_REQ_CONTROL_SET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8007a3c:	79bb      	ldrb	r3, [r7, #6]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d158      	bne.n	8007af4 <hidd_control_xfer_cb+0x3c0>
          p_hid->idle_rate = tu_u16_high(request->wValue);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	885b      	ldrh	r3, [r3, #2]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8007a4a:	897b      	ldrh	r3, [r7, #10]
 8007a4c:	0a1b      	lsrs	r3, r3, #8
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a54:	71da      	strb	r2, [r3, #7]
          TU_VERIFY(tud_hid_set_idle_cb(hid_itf, p_hid->idle_rate)); // stall if false
 8007a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a58:	79da      	ldrb	r2, [r3, #7]
 8007a5a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007a5e:	4611      	mov	r1, r2
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7ff fc4b 	bl	80072fc <tud_hid_set_idle_cb>
 8007a66:	4603      	mov	r3, r0
 8007a68:	f083 0301 	eor.w	r3, r3, #1
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <hidd_control_xfer_cb+0x342>
 8007a72:	2300      	movs	r3, #0
 8007a74:	e046      	b.n	8007b04 <hidd_control_xfer_cb+0x3d0>
          tud_control_status(rhport, request);
 8007a76:	79fb      	ldrb	r3, [r7, #7]
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f002 fc50 	bl	800a320 <tud_control_status>
        }
        break;
 8007a80:	e038      	b.n	8007af4 <hidd_control_xfer_cb+0x3c0>

      case HID_REQ_CONTROL_GET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8007a82:	79bb      	ldrb	r3, [r7, #6]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d137      	bne.n	8007af8 <hidd_control_xfer_cb+0x3c4>
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 8007a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a8a:	1dda      	adds	r2, r3, #7
 8007a8c:	79f8      	ldrb	r0, [r7, #7]
 8007a8e:	2301      	movs	r3, #1
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	f002 fcb7 	bl	800a404 <tud_control_xfer>
        }
        break;
 8007a96:	e02f      	b.n	8007af8 <hidd_control_xfer_cb+0x3c4>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8007a98:	79bb      	ldrb	r3, [r7, #6]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d12e      	bne.n	8007afc <hidd_control_xfer_cb+0x3c8>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 8007a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa0:	1d9a      	adds	r2, r3, #6
 8007aa2:	79f8      	ldrb	r0, [r7, #7]
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	f002 fcac 	bl	800a404 <tud_control_xfer>
        }
        break;
 8007aac:	e026      	b.n	8007afc <hidd_control_xfer_cb+0x3c8>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8007aae:	79bb      	ldrb	r3, [r7, #6]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d105      	bne.n	8007ac0 <hidd_control_xfer_cb+0x38c>
          tud_control_status(rhport, request);
 8007ab4:	79fb      	ldrb	r3, [r7, #7]
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f002 fc31 	bl	800a320 <tud_control_status>
        } else if (stage == CONTROL_STAGE_ACK) {
          p_hid->protocol_mode = (uint8_t) request->wValue;
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
        }
        break;
 8007abe:	e01f      	b.n	8007b00 <hidd_control_xfer_cb+0x3cc>
        } else if (stage == CONTROL_STAGE_ACK) {
 8007ac0:	79bb      	ldrb	r3, [r7, #6]
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d11c      	bne.n	8007b00 <hidd_control_xfer_cb+0x3cc>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	885b      	ldrh	r3, [r3, #2]
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ad0:	719a      	strb	r2, [r3, #6]
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 8007ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ad4:	799a      	ldrb	r2, [r3, #6]
 8007ad6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007ada:	4611      	mov	r1, r2
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7f9 fea3 	bl	8001828 <tud_hid_set_protocol_cb>
        break;
 8007ae2:	e00d      	b.n	8007b00 <hidd_control_xfer_cb+0x3cc>

      default:
        return false; // stall unsupported request
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	e00d      	b.n	8007b04 <hidd_control_xfer_cb+0x3d0>
    }
  } else {
    return false; // stall unsupported request
 8007ae8:	2300      	movs	r3, #0
 8007aea:	e00b      	b.n	8007b04 <hidd_control_xfer_cb+0x3d0>
        break;
 8007aec:	bf00      	nop
 8007aee:	e008      	b.n	8007b02 <hidd_control_xfer_cb+0x3ce>
        break;
 8007af0:	bf00      	nop
 8007af2:	e006      	b.n	8007b02 <hidd_control_xfer_cb+0x3ce>
        break;
 8007af4:	bf00      	nop
 8007af6:	e004      	b.n	8007b02 <hidd_control_xfer_cb+0x3ce>
        break;
 8007af8:	bf00      	nop
 8007afa:	e002      	b.n	8007b02 <hidd_control_xfer_cb+0x3ce>
        break;
 8007afc:	bf00      	nop
 8007afe:	e000      	b.n	8007b02 <hidd_control_xfer_cb+0x3ce>
        break;
 8007b00:	bf00      	nop
  }

  return true;
 8007b02:	2301      	movs	r3, #1
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3748      	adds	r7, #72	@ 0x48
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b08a      	sub	sp, #40	@ 0x28
 8007b10:	af02      	add	r7, sp, #8
 8007b12:	603b      	str	r3, [r7, #0]
 8007b14:	4603      	mov	r3, r0
 8007b16:	71fb      	strb	r3, [r7, #7]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	71bb      	strb	r3, [r7, #6]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	717b      	strb	r3, [r7, #5]
  uint8_t instance;
  hidd_interface_t *p_hid;

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8007b20:	2300      	movs	r3, #0
 8007b22:	77fb      	strb	r3, [r7, #31]
 8007b24:	e014      	b.n	8007b50 <hidd_xfer_cb+0x44>
    p_hid = &_hidd_itf[instance];
 8007b26:	7ffa      	ldrb	r2, [r7, #31]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	005b      	lsls	r3, r3, #1
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4a3e      	ldr	r2, [pc, #248]	@ (8007c2c <hidd_xfer_cb+0x120>)
 8007b32:	4413      	add	r3, r2
 8007b34:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in)) {
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	789b      	ldrb	r3, [r3, #2]
 8007b3a:	79ba      	ldrb	r2, [r7, #6]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d00a      	beq.n	8007b56 <hidd_xfer_cb+0x4a>
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	785b      	ldrb	r3, [r3, #1]
 8007b44:	79ba      	ldrb	r2, [r7, #6]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d005      	beq.n	8007b56 <hidd_xfer_cb+0x4a>
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8007b4a:	7ffb      	ldrb	r3, [r7, #31]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	77fb      	strb	r3, [r7, #31]
 8007b50:	7ffb      	ldrb	r3, [r7, #31]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0e7      	beq.n	8007b26 <hidd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 8007b56:	7ffb      	ldrb	r3, [r7, #31]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00a      	beq.n	8007b72 <hidd_xfer_cb+0x66>
 8007b5c:	4b34      	ldr	r3, [pc, #208]	@ (8007c30 <hidd_xfer_cb+0x124>)
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d000      	beq.n	8007b6e <hidd_xfer_cb+0x62>
 8007b6c:	be00      	bkpt	0x0000
 8007b6e:	2300      	movs	r3, #0
 8007b70:	e057      	b.n	8007c22 <hidd_xfer_cb+0x116>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8007b72:	7ffa      	ldrb	r2, [r7, #31]
 8007b74:	4613      	mov	r3, r2
 8007b76:	005b      	lsls	r3, r3, #1
 8007b78:	4413      	add	r3, r2
 8007b7a:	011b      	lsls	r3, r3, #4
 8007b7c:	4a2d      	ldr	r2, [pc, #180]	@ (8007c34 <hidd_xfer_cb+0x128>)
 8007b7e:	4413      	add	r3, r2
 8007b80:	617b      	str	r3, [r7, #20]

  if (ep_addr == p_hid->ep_in) {
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	785b      	ldrb	r3, [r3, #1]
 8007b86:	79ba      	ldrb	r2, [r7, #6]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d116      	bne.n	8007bba <hidd_xfer_cb+0xae>
    // Input report
    if (XFER_RESULT_SUCCESS == result) {
 8007b8c:	797b      	ldrb	r3, [r7, #5]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d109      	bne.n	8007ba6 <hidd_xfer_cb+0x9a>
      tud_hid_report_complete_cb(instance, p_epbuf->epin, (uint16_t) xferred_bytes);
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f103 0110 	add.w	r1, r3, #16
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	7ffb      	ldrb	r3, [r7, #31]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7f9 fe50 	bl	8001844 <tud_hid_report_complete_cb>
 8007ba4:	e03c      	b.n	8007c20 <hidd_xfer_cb+0x114>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_INPUT, p_epbuf->epin, (uint16_t) xferred_bytes);
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	f103 0210 	add.w	r2, r3, #16
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	7ff8      	ldrb	r0, [r7, #31]
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	f7ff fbb1 	bl	800731a <tud_hid_report_failed_cb>
 8007bb8:	e032      	b.n	8007c20 <hidd_xfer_cb+0x114>
    }
  } else {
    // Output report
    if (XFER_RESULT_SUCCESS == result) {
 8007bba:	797b      	ldrb	r3, [r7, #5]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10c      	bne.n	8007bda <hidd_xfer_cb+0xce>
      tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t)xferred_bytes);
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f103 0220 	add.w	r2, r3, #32
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	7ff8      	ldrb	r0, [r7, #31]
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	2202      	movs	r2, #2
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	f7f9 fe55 	bl	8001882 <tud_hid_set_report_cb>
 8007bd8:	e008      	b.n	8007bec <hidd_xfer_cb+0xe0>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t) xferred_bytes);
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	f103 0220 	add.w	r2, r3, #32
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	7ff8      	ldrb	r0, [r7, #31]
 8007be6:	2102      	movs	r1, #2
 8007be8:	f7ff fb97 	bl	800731a <tud_hid_report_failed_cb>
    }

    // prepare for new transfer
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE));
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	7899      	ldrb	r1, [r3, #2]
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	f103 0220 	add.w	r2, r3, #32
 8007bf6:	79f8      	ldrb	r0, [r7, #7]
 8007bf8:	2310      	movs	r3, #16
 8007bfa:	f002 fa1b 	bl	800a034 <usbd_edpt_xfer>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	f083 0301 	eor.w	r3, r3, #1
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00a      	beq.n	8007c20 <hidd_xfer_cb+0x114>
 8007c0a:	4b09      	ldr	r3, [pc, #36]	@ (8007c30 <hidd_xfer_cb+0x124>)
 8007c0c:	613b      	str	r3, [r7, #16]
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d000      	beq.n	8007c1c <hidd_xfer_cb+0x110>
 8007c1a:	be00      	bkpt	0x0000
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	e000      	b.n	8007c22 <hidd_xfer_cb+0x116>
  }

  return true;
 8007c20:	2301      	movs	r3, #1
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3720      	adds	r7, #32
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	200016d8 	.word	0x200016d8
 8007c30:	e000edf0 	.word	0xe000edf0
 8007c34:	200016e4 	.word	0x200016e4

08007c38 <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	4611      	mov	r1, r2
 8007c44:	461a      	mov	r2, r3
 8007c46:	460b      	mov	r3, r1
 8007c48:	80fb      	strh	r3, [r7, #6]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8007c4e:	88fb      	ldrh	r3, [r7, #6]
 8007c50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c54:	d901      	bls.n	8007c5a <tu_fifo_config+0x22>
 8007c56:	2300      	movs	r3, #0
 8007c58:	e01b      	b.n	8007c92 <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	88fa      	ldrh	r2, [r7, #6]
 8007c64:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8007c66:	88bb      	ldrh	r3, [r7, #4]
 8007c68:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007c6c:	b299      	uxth	r1, r3
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	88d3      	ldrh	r3, [r2, #6]
 8007c72:	f361 030e 	bfi	r3, r1, #0, #15
 8007c76:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	79d3      	ldrb	r3, [r2, #7]
 8007c7c:	7e39      	ldrb	r1, [r7, #24]
 8007c7e:	f361 13c7 	bfi	r3, r1, #7, #1
 8007c82:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8007c90:	2301      	movs	r3, #1
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b08a      	sub	sp, #40	@ 0x28
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	60f8      	str	r0, [r7, #12]
 8007ca6:	60b9      	str	r1, [r7, #8]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8007cb0:	88fb      	ldrh	r3, [r7, #6]
 8007cb2:	089b      	lsrs	r3, r3, #2
 8007cb4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8007cb6:	e00b      	b.n	8007cd0 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	61ba      	str	r2, [r7, #24]
 8007cc0:	617b      	str	r3, [r7, #20]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	601a      	str	r2, [r3, #0]
}
 8007cc8:	bf00      	nop
    ff_buf += 4;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3304      	adds	r3, #4
 8007cce:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8007cd0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007cd2:	1e5a      	subs	r2, r3, #1
 8007cd4:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1ee      	bne.n	8007cb8 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8007cda:	88fb      	ldrh	r3, [r7, #6]
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	f003 0303 	and.w	r3, r3, #3
 8007ce2:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8007ce4:	7ffb      	ldrb	r3, [r7, #31]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d009      	beq.n	8007cfe <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8007cf0:	7ffa      	ldrb	r2, [r7, #31]
 8007cf2:	f107 0310 	add.w	r3, r7, #16
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f005 f874 	bl	800cde6 <memcpy>
  }
}
 8007cfe:	bf00      	nop
 8007d00:	3728      	adds	r7, #40	@ 0x28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b08a      	sub	sp, #40	@ 0x28
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	60f8      	str	r0, [r7, #12]
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	4613      	mov	r3, r2
 8007d12:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8007d18:	88fb      	ldrh	r3, [r7, #6]
 8007d1a:	089b      	lsrs	r3, r3, #2
 8007d1c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8007d1e:	e008      	b.n	8007d32 <_ff_pull_const_addr+0x2c>
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	3304      	adds	r3, #4
 8007d30:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8007d32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007d34:	1e5a      	subs	r2, r3, #1
 8007d36:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1f1      	bne.n	8007d20 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8007d3c:	88fb      	ldrh	r3, [r7, #6]
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	f003 0303 	and.w	r3, r3, #3
 8007d44:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8007d46:	7ffb      	ldrb	r3, [r7, #31]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00b      	beq.n	8007d64 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8007d50:	7ffa      	ldrb	r2, [r7, #31]
 8007d52:	f107 0314 	add.w	r3, r7, #20
 8007d56:	68b9      	ldr	r1, [r7, #8]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f005 f844 	bl	800cde6 <memcpy>

    *reg_tx = tmp32;
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	6a3b      	ldr	r3, [r7, #32]
 8007d62:	601a      	str	r2, [r3, #0]
  }
}
 8007d64:	bf00      	nop
 8007d66:	3728      	adds	r7, #40	@ 0x28
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	4613      	mov	r3, r2
 8007d78:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	88fa      	ldrh	r2, [r7, #6]
 8007d80:	68f9      	ldr	r1, [r7, #12]
 8007d82:	88c9      	ldrh	r1, [r1, #6]
 8007d84:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8007d88:	b289      	uxth	r1, r1
 8007d8a:	fb01 f202 	mul.w	r2, r1, r2
 8007d8e:	1898      	adds	r0, r3, r2
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	88db      	ldrh	r3, [r3, #6]
 8007d94:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	68b9      	ldr	r1, [r7, #8]
 8007d9e:	f005 f822 	bl	800cde6 <memcpy>
}
 8007da2:	bf00      	nop
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b08e      	sub	sp, #56	@ 0x38
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	60f8      	str	r0, [r7, #12]
 8007db2:	60b9      	str	r1, [r7, #8]
 8007db4:	4611      	mov	r1, r2
 8007db6:	461a      	mov	r2, r3
 8007db8:	460b      	mov	r3, r1
 8007dba:	80fb      	strh	r3, [r7, #6]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	889a      	ldrh	r2, [r3, #4]
 8007dc4:	88bb      	ldrh	r3, [r7, #4]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 8007dca:	88fa      	ldrh	r2, [r7, #6]
 8007dcc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	88db      	ldrh	r3, [r3, #6]
 8007dd6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	461a      	mov	r2, r3
 8007dde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007de0:	fb13 f302 	smulbb	r3, r3, r2
 8007de4:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	88db      	ldrh	r3, [r3, #6]
 8007dea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	461a      	mov	r2, r3
 8007df2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007df4:	fb13 f302 	smulbb	r3, r3, r2
 8007df8:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	88ba      	ldrh	r2, [r7, #4]
 8007e00:	68f9      	ldr	r1, [r7, #12]
 8007e02:	88c9      	ldrh	r1, [r1, #6]
 8007e04:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8007e08:	b289      	uxth	r1, r1
 8007e0a:	fb01 f202 	mul.w	r2, r1, r2
 8007e0e:	4413      	add	r3, r2
 8007e10:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8007e12:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d002      	beq.n	8007e20 <_ff_push_n+0x76>
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d022      	beq.n	8007e64 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 8007e1e:	e09e      	b.n	8007f5e <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8007e20:	88fa      	ldrh	r2, [r7, #6]
 8007e22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d80d      	bhi.n	8007e44 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8007e28:	88fb      	ldrh	r3, [r7, #6]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	88d2      	ldrh	r2, [r2, #6]
 8007e2e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007e32:	b292      	uxth	r2, r2
 8007e34:	fb02 f303 	mul.w	r3, r2, r3
 8007e38:	461a      	mov	r2, r3
 8007e3a:	68b9      	ldr	r1, [r7, #8]
 8007e3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e3e:	f004 ffd2 	bl	800cde6 <memcpy>
      break;
 8007e42:	e08c      	b.n	8007f5e <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8007e44:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e46:	461a      	mov	r2, r3
 8007e48:	68b9      	ldr	r1, [r7, #8]
 8007e4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e4c:	f004 ffcb 	bl	800cde6 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6818      	ldr	r0, [r3, #0]
 8007e54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	4413      	add	r3, r2
 8007e5a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	f004 ffc2 	bl	800cde6 <memcpy>
      break;
 8007e62:	e07c      	b.n	8007f5e <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8007e64:	88fa      	ldrh	r2, [r7, #6]
 8007e66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d80f      	bhi.n	8007e8c <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	88db      	ldrh	r3, [r3, #6]
 8007e70:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	461a      	mov	r2, r3
 8007e78:	88fb      	ldrh	r3, [r7, #6]
 8007e7a:	fb13 f302 	smulbb	r3, r3, r2
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	68b9      	ldr	r1, [r7, #8]
 8007e84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e86:	f7ff ff0a 	bl	8007c9e <_ff_push_const_addr>
      break;
 8007e8a:	e067      	b.n	8007f5c <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8007e8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e8e:	f023 0303 	bic.w	r3, r3, #3
 8007e92:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8007e94:	8c3b      	ldrh	r3, [r7, #32]
 8007e96:	461a      	mov	r2, r3
 8007e98:	68b9      	ldr	r1, [r7, #8]
 8007e9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e9c:	f7ff feff 	bl	8007c9e <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8007ea0:	8c3b      	ldrh	r3, [r7, #32]
 8007ea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ea4:	4413      	add	r3, r2
 8007ea6:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8007ea8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	f003 0303 	and.w	r3, r3, #3
 8007eb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8007eb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d043      	beq.n	8007f44 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8007ec0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	f1c3 0304 	rsb	r3, r3, #4
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007ece:	837b      	strh	r3, [r7, #26]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007ed4:	8b7a      	ldrh	r2, [r7, #26]
 8007ed6:	8b3b      	ldrh	r3, [r7, #24]
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	bf28      	it	cs
 8007edc:	4613      	movcs	r3, r2
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8007ee4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8007ef6:	f107 0314 	add.w	r3, r7, #20
 8007efa:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8007efc:	e007      	b.n	8007f0e <_ff_push_n+0x164>
 8007efe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f00:	1c53      	adds	r3, r2, #1
 8007f02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f06:	1c59      	adds	r1, r3, #1
 8007f08:	6339      	str	r1, [r7, #48]	@ 0x30
 8007f0a:	7812      	ldrb	r2, [r2, #0]
 8007f0c:	701a      	strb	r2, [r3, #0]
 8007f0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007f12:	1e5a      	subs	r2, r3, #1
 8007f14:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1f0      	bne.n	8007efe <_ff_push_n+0x154>
          ff_buf = f->buffer;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8007f22:	e007      	b.n	8007f34 <_ff_push_n+0x18a>
 8007f24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f26:	1c53      	adds	r3, r2, #1
 8007f28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2c:	1c59      	adds	r1, r3, #1
 8007f2e:	6339      	str	r1, [r7, #48]	@ 0x30
 8007f30:	7812      	ldrb	r2, [r2, #0]
 8007f32:	701a      	strb	r2, [r3, #0]
 8007f34:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007f38:	1e5a      	subs	r2, r3, #1
 8007f3a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1f0      	bne.n	8007f24 <_ff_push_n+0x17a>
 8007f42:	e002      	b.n	8007f4a <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8007f4a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d005      	beq.n	8007f5c <_ff_push_n+0x1b2>
 8007f50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007f52:	461a      	mov	r2, r3
 8007f54:	68b9      	ldr	r1, [r7, #8]
 8007f56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f58:	f7ff fea1 	bl	8007c9e <_ff_push_const_addr>
      break;
 8007f5c:	bf00      	nop
  }
}
 8007f5e:	bf00      	nop
 8007f60:	3738      	adds	r7, #56	@ 0x38
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	4613      	mov	r3, r2
 8007f72:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	88fa      	ldrh	r2, [r7, #6]
 8007f7a:	68f9      	ldr	r1, [r7, #12]
 8007f7c:	88c9      	ldrh	r1, [r1, #6]
 8007f7e:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8007f82:	b289      	uxth	r1, r1
 8007f84:	fb01 f202 	mul.w	r2, r1, r2
 8007f88:	1899      	adds	r1, r3, r2
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	88db      	ldrh	r3, [r3, #6]
 8007f8e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	461a      	mov	r2, r3
 8007f96:	68b8      	ldr	r0, [r7, #8]
 8007f98:	f004 ff25 	bl	800cde6 <memcpy>
}
 8007f9c:	bf00      	nop
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b08e      	sub	sp, #56	@ 0x38
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	4611      	mov	r1, r2
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	80fb      	strh	r3, [r7, #6]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	889a      	ldrh	r2, [r3, #4]
 8007fbe:	88bb      	ldrh	r3, [r7, #4]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8007fc4:	88fa      	ldrh	r2, [r7, #6]
 8007fc6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	88db      	ldrh	r3, [r3, #6]
 8007fd0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007fda:	fb13 f302 	smulbb	r3, r3, r2
 8007fde:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	88db      	ldrh	r3, [r3, #6]
 8007fe4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	461a      	mov	r2, r3
 8007fec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007fee:	fb13 f302 	smulbb	r3, r3, r2
 8007ff2:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	88ba      	ldrh	r2, [r7, #4]
 8007ffa:	68f9      	ldr	r1, [r7, #12]
 8007ffc:	88c9      	ldrh	r1, [r1, #6]
 8007ffe:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8008002:	b289      	uxth	r1, r1
 8008004:	fb01 f202 	mul.w	r2, r1, r2
 8008008:	4413      	add	r3, r2
 800800a:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 800800c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008010:	2b00      	cmp	r3, #0
 8008012:	d002      	beq.n	800801a <_ff_pull_n+0x76>
 8008014:	2b01      	cmp	r3, #1
 8008016:	d022      	beq.n	800805e <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 8008018:	e0a0      	b.n	800815c <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 800801a:	88fa      	ldrh	r2, [r7, #6]
 800801c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800801e:	429a      	cmp	r2, r3
 8008020:	d80d      	bhi.n	800803e <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 8008022:	88fb      	ldrh	r3, [r7, #6]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	88d2      	ldrh	r2, [r2, #6]
 8008028:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800802c:	b292      	uxth	r2, r2
 800802e:	fb02 f303 	mul.w	r3, r2, r3
 8008032:	461a      	mov	r2, r3
 8008034:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008036:	68b8      	ldr	r0, [r7, #8]
 8008038:	f004 fed5 	bl	800cde6 <memcpy>
    break;
 800803c:	e08e      	b.n	800815c <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 800803e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008040:	461a      	mov	r2, r3
 8008042:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008044:	68b8      	ldr	r0, [r7, #8]
 8008046:	f004 fece 	bl	800cde6 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 800804a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	18d0      	adds	r0, r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008056:	4619      	mov	r1, r3
 8008058:	f004 fec5 	bl	800cde6 <memcpy>
    break;
 800805c:	e07e      	b.n	800815c <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 800805e:	88fa      	ldrh	r2, [r7, #6]
 8008060:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008062:	429a      	cmp	r2, r3
 8008064:	d80f      	bhi.n	8008086 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	88db      	ldrh	r3, [r3, #6]
 800806a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800806e:	b29b      	uxth	r3, r3
 8008070:	461a      	mov	r2, r3
 8008072:	88fb      	ldrh	r3, [r7, #6]
 8008074:	fb13 f302 	smulbb	r3, r3, r2
 8008078:	b29b      	uxth	r3, r3
 800807a:	461a      	mov	r2, r3
 800807c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800807e:	68b8      	ldr	r0, [r7, #8]
 8008080:	f7ff fe41 	bl	8007d06 <_ff_pull_const_addr>
    break;
 8008084:	e069      	b.n	800815a <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8008086:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008088:	f023 0303 	bic.w	r3, r3, #3
 800808c:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 800808e:	8c3b      	ldrh	r3, [r7, #32]
 8008090:	461a      	mov	r2, r3
 8008092:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008094:	68b8      	ldr	r0, [r7, #8]
 8008096:	f7ff fe36 	bl	8007d06 <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 800809a:	8c3b      	ldrh	r3, [r7, #32]
 800809c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800809e:	4413      	add	r3, r2
 80080a0:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 80080a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	f003 0303 	and.w	r3, r3, #3
 80080aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 80080ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d045      	beq.n	8008142 <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 80080ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080be:	b29b      	uxth	r3, r3
 80080c0:	f1c3 0304 	rsb	r3, r3, #4
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80080c8:	837b      	strh	r3, [r7, #26]
 80080ca:	4613      	mov	r3, r2
 80080cc:	833b      	strh	r3, [r7, #24]
 80080ce:	8b7a      	ldrh	r2, [r7, #26]
 80080d0:	8b3b      	ldrh	r3, [r7, #24]
 80080d2:	4293      	cmp	r3, r2
 80080d4:	bf28      	it	cs
 80080d6:	4613      	movcs	r3, r2
 80080d8:	b29b      	uxth	r3, r3
 80080da:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 80080de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 80080ea:	2300      	movs	r3, #0
 80080ec:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 80080ee:	f107 0314 	add.w	r3, r7, #20
 80080f2:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 80080f4:	e007      	b.n	8008106 <_ff_pull_n+0x162>
 80080f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080f8:	1c53      	adds	r3, r2, #1
 80080fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80080fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fe:	1c59      	adds	r1, r3, #1
 8008100:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008102:	7812      	ldrb	r2, [r2, #0]
 8008104:	701a      	strb	r2, [r3, #0]
 8008106:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800810a:	1e5a      	subs	r2, r3, #1
 800810c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1f0      	bne.n	80080f6 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 800811a:	e007      	b.n	800812c <_ff_pull_n+0x188>
 800811c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800811e:	1c53      	adds	r3, r2, #1
 8008120:	633b      	str	r3, [r7, #48]	@ 0x30
 8008122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008124:	1c59      	adds	r1, r3, #1
 8008126:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008128:	7812      	ldrb	r2, [r2, #0]
 800812a:	701a      	strb	r2, [r3, #0]
 800812c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008130:	1e5a      	subs	r2, r3, #1
 8008132:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1f0      	bne.n	800811c <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	601a      	str	r2, [r3, #0]
 8008140:	e002      	b.n	8008148 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8008148:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800814a:	2b00      	cmp	r3, #0
 800814c:	d005      	beq.n	800815a <_ff_pull_n+0x1b6>
 800814e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008150:	461a      	mov	r2, r3
 8008152:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008154:	68b8      	ldr	r0, [r7, #8]
 8008156:	f7ff fdd6 	bl	8007d06 <_ff_pull_const_addr>
    break;
 800815a:	bf00      	nop
  }
}
 800815c:	bf00      	nop
 800815e:	3738      	adds	r7, #56	@ 0x38
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	4603      	mov	r3, r0
 800816c:	80fb      	strh	r3, [r7, #6]
 800816e:	460b      	mov	r3, r1
 8008170:	80bb      	strh	r3, [r7, #4]
 8008172:	4613      	mov	r3, r2
 8008174:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8008176:	88ba      	ldrh	r2, [r7, #4]
 8008178:	887b      	ldrh	r3, [r7, #2]
 800817a:	4413      	add	r3, r2
 800817c:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800817e:	88ba      	ldrh	r2, [r7, #4]
 8008180:	89fb      	ldrh	r3, [r7, #14]
 8008182:	429a      	cmp	r2, r3
 8008184:	d804      	bhi.n	8008190 <advance_index+0x2c>
 8008186:	89fa      	ldrh	r2, [r7, #14]
 8008188:	88fb      	ldrh	r3, [r7, #6]
 800818a:	005b      	lsls	r3, r3, #1
 800818c:	429a      	cmp	r2, r3
 800818e:	db08      	blt.n	80081a2 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8008190:	88fb      	ldrh	r3, [r7, #6]
 8008192:	005b      	lsls	r3, r3, #1
 8008194:	b29b      	uxth	r3, r3
 8008196:	425b      	negs	r3, r3
 8008198:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800819a:	89fa      	ldrh	r2, [r7, #14]
 800819c:	89bb      	ldrh	r3, [r7, #12]
 800819e:	4413      	add	r3, r2
 80081a0:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 80081a2:	89fb      	ldrh	r3, [r7, #14]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b08a      	sub	sp, #40	@ 0x28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	4611      	mov	r1, r2
 80081bc:	461a      	mov	r2, r3
 80081be:	460b      	mov	r3, r1
 80081c0:	80fb      	strh	r3, [r7, #6]
 80081c2:	4613      	mov	r3, r2
 80081c4:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	889b      	ldrh	r3, [r3, #4]
 80081ca:	847b      	strh	r3, [r7, #34]	@ 0x22
 80081cc:	88fb      	ldrh	r3, [r7, #6]
 80081ce:	843b      	strh	r3, [r7, #32]
 80081d0:	88bb      	ldrh	r3, [r7, #4]
 80081d2:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80081d4:	8c3a      	ldrh	r2, [r7, #32]
 80081d6:	8bfb      	ldrh	r3, [r7, #30]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d304      	bcc.n	80081e6 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80081dc:	8c3a      	ldrh	r2, [r7, #32]
 80081de:	8bfb      	ldrh	r3, [r7, #30]
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	e008      	b.n	80081f8 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80081e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80081e8:	005b      	lsls	r3, r3, #1
 80081ea:	b29a      	uxth	r2, r3
 80081ec:	8c39      	ldrh	r1, [r7, #32]
 80081ee:	8bfb      	ldrh	r3, [r7, #30]
 80081f0:	1acb      	subs	r3, r1, r3
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	4413      	add	r3, r2
 80081f6:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80081f8:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 80081fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <_tu_fifo_peek+0x54>
 8008200:	2300      	movs	r3, #0
 8008202:	e037      	b.n	8008274 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	889b      	ldrh	r3, [r3, #4]
 8008208:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800820a:	429a      	cmp	r2, r3
 800820c:	d91b      	bls.n	8008246 <_tu_fifo_peek+0x96>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	61bb      	str	r3, [r7, #24]
 8008212:	88fb      	ldrh	r3, [r7, #6]
 8008214:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	889b      	ldrh	r3, [r3, #4]
 800821a:	8afa      	ldrh	r2, [r7, #22]
 800821c:	429a      	cmp	r2, r3
 800821e:	d305      	bcc.n	800822c <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	889b      	ldrh	r3, [r3, #4]
 8008224:	8afa      	ldrh	r2, [r7, #22]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	82bb      	strh	r3, [r7, #20]
 800822a:	e004      	b.n	8008236 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	889a      	ldrh	r2, [r3, #4]
 8008230:	8afb      	ldrh	r3, [r7, #22]
 8008232:	4413      	add	r3, r2
 8008234:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	8aba      	ldrh	r2, [r7, #20]
 800823a:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 800823c:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800823e:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	889b      	ldrh	r3, [r3, #4]
 8008244:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	889b      	ldrh	r3, [r3, #4]
 800824a:	827b      	strh	r3, [r7, #18]
 800824c:	88bb      	ldrh	r3, [r7, #4]
 800824e:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8008250:	e003      	b.n	800825a <_tu_fifo_peek+0xaa>
 8008252:	8a3a      	ldrh	r2, [r7, #16]
 8008254:	8a7b      	ldrh	r3, [r7, #18]
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	823b      	strh	r3, [r7, #16]
 800825a:	8a7a      	ldrh	r2, [r7, #18]
 800825c:	8a3b      	ldrh	r3, [r7, #16]
 800825e:	429a      	cmp	r2, r3
 8008260:	d9f7      	bls.n	8008252 <_tu_fifo_peek+0xa2>
  return idx;
 8008262:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8008264:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 8008266:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008268:	461a      	mov	r2, r3
 800826a:	68b9      	ldr	r1, [r7, #8]
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f7ff fe7a 	bl	8007f66 <_ff_pull>

  return true;
 8008272:	2301      	movs	r3, #1
}
 8008274:	4618      	mov	r0, r3
 8008276:	3728      	adds	r7, #40	@ 0x28
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b08c      	sub	sp, #48	@ 0x30
 8008280:	af02      	add	r7, sp, #8
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	4611      	mov	r1, r2
 8008288:	461a      	mov	r2, r3
 800828a:	460b      	mov	r3, r1
 800828c:	80fb      	strh	r3, [r7, #6]
 800828e:	4613      	mov	r3, r2
 8008290:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	889b      	ldrh	r3, [r3, #4]
 8008296:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008298:	88bb      	ldrh	r3, [r7, #4]
 800829a:	843b      	strh	r3, [r7, #32]
 800829c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800829e:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80082a0:	8c3a      	ldrh	r2, [r7, #32]
 80082a2:	8bfb      	ldrh	r3, [r7, #30]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d304      	bcc.n	80082b2 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80082a8:	8c3a      	ldrh	r2, [r7, #32]
 80082aa:	8bfb      	ldrh	r3, [r7, #30]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	e008      	b.n	80082c4 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80082b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	8c39      	ldrh	r1, [r7, #32]
 80082ba:	8bfb      	ldrh	r3, [r7, #30]
 80082bc:	1acb      	subs	r3, r1, r3
 80082be:	b29b      	uxth	r3, r3
 80082c0:	4413      	add	r3, r2
 80082c2:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80082c4:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 80082c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <_tu_fifo_peek_n+0x54>
 80082cc:	2300      	movs	r3, #0
 80082ce:	e041      	b.n	8008354 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	889b      	ldrh	r3, [r3, #4]
 80082d4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d91b      	bls.n	8008312 <_tu_fifo_peek_n+0x96>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	61bb      	str	r3, [r7, #24]
 80082de:	88bb      	ldrh	r3, [r7, #4]
 80082e0:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	889b      	ldrh	r3, [r3, #4]
 80082e6:	8afa      	ldrh	r2, [r7, #22]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d305      	bcc.n	80082f8 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	889b      	ldrh	r3, [r3, #4]
 80082f0:	8afa      	ldrh	r2, [r7, #22]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	82bb      	strh	r3, [r7, #20]
 80082f6:	e004      	b.n	8008302 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	889a      	ldrh	r2, [r3, #4]
 80082fc:	8afb      	ldrh	r3, [r7, #22]
 80082fe:	4413      	add	r3, r2
 8008300:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	8aba      	ldrh	r2, [r7, #20]
 8008306:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8008308:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800830a:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	889b      	ldrh	r3, [r3, #4]
 8008310:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8008312:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008314:	88fb      	ldrh	r3, [r7, #6]
 8008316:	429a      	cmp	r2, r3
 8008318:	d201      	bcs.n	800831e <_tu_fifo_peek_n+0xa2>
 800831a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800831c:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	889b      	ldrh	r3, [r3, #4]
 8008322:	827b      	strh	r3, [r7, #18]
 8008324:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008326:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8008328:	e003      	b.n	8008332 <_tu_fifo_peek_n+0xb6>
 800832a:	8a3a      	ldrh	r2, [r7, #16]
 800832c:	8a7b      	ldrh	r3, [r7, #18]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	823b      	strh	r3, [r7, #16]
 8008332:	8a7a      	ldrh	r2, [r7, #18]
 8008334:	8a3b      	ldrh	r3, [r7, #16]
 8008336:	429a      	cmp	r2, r3
 8008338:	d9f7      	bls.n	800832a <_tu_fifo_peek_n+0xae>
  return idx;
 800833a:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800833c:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 800833e:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8008340:	88fa      	ldrh	r2, [r7, #6]
 8008342:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	460b      	mov	r3, r1
 800834a:	68b9      	ldr	r1, [r7, #8]
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f7ff fe29 	bl	8007fa4 <_ff_pull_n>

  return n;
 8008352:	88fb      	ldrh	r3, [r7, #6]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3728      	adds	r7, #40	@ 0x28
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b092      	sub	sp, #72	@ 0x48
 8008360:	af02      	add	r7, sp, #8
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	4611      	mov	r1, r2
 8008368:	461a      	mov	r2, r3
 800836a:	460b      	mov	r3, r1
 800836c:	80fb      	strh	r3, [r7, #6]
 800836e:	4613      	mov	r3, r2
 8008370:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8008372:	88fb      	ldrh	r3, [r7, #6]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d101      	bne.n	800837c <_tu_fifo_write_n+0x20>
 8008378:	2300      	movs	r3, #0
 800837a:	e0bc      	b.n	80084f6 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	891b      	ldrh	r3, [r3, #8]
 8008380:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	895b      	ldrh	r3, [r3, #10]
 8008386:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	79db      	ldrb	r3, [r3, #7]
 8008390:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008394:	b2db      	uxtb	r3, r3
 8008396:	f083 0301 	eor.w	r3, r3, #1
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b00      	cmp	r3, #0
 800839e:	d036      	beq.n	800840e <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	889b      	ldrh	r3, [r3, #4]
 80083a4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80083a6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80083a8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80083aa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80083ac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80083ae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80083b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80083b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80083b4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80083b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80083b8:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 80083ba:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80083bc:	8c3b      	ldrh	r3, [r7, #32]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d304      	bcc.n	80083cc <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 80083c2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80083c4:	8c3b      	ldrh	r3, [r7, #32]
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	e008      	b.n	80083de <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80083cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80083d4:	8c3b      	ldrh	r3, [r7, #32]
 80083d6:	1acb      	subs	r3, r1, r3
 80083d8:	b29b      	uxth	r3, r3
 80083da:	4413      	add	r3, r2
 80083dc:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 80083de:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 80083e0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80083e2:	8bfb      	ldrh	r3, [r7, #30]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d904      	bls.n	80083f2 <_tu_fifo_write_n+0x96>
 80083e8:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80083ea:	8bfb      	ldrh	r3, [r7, #30]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	e000      	b.n	80083f4 <_tu_fifo_write_n+0x98>
 80083f2:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 80083f4:	867b      	strh	r3, [r7, #50]	@ 0x32
 80083f6:	88fb      	ldrh	r3, [r7, #6]
 80083f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80083fa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80083fc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80083fe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008400:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008402:	4293      	cmp	r3, r2
 8008404:	bf28      	it	cs
 8008406:	4613      	movcs	r3, r2
 8008408:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 800840a:	80fb      	strh	r3, [r7, #6]
 800840c:	e04b      	b.n	80084a6 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	889b      	ldrh	r3, [r3, #4]
 8008412:	88fa      	ldrh	r2, [r7, #6]
 8008414:	429a      	cmp	r2, r3
 8008416:	d317      	bcc.n	8008448 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8008418:	797b      	ldrb	r3, [r7, #5]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10e      	bne.n	800843c <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 800841e:	88fb      	ldrh	r3, [r7, #6]
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	8892      	ldrh	r2, [r2, #4]
 8008424:	1a9b      	subs	r3, r3, r2
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	88d2      	ldrh	r2, [r2, #6]
 800842a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800842e:	b292      	uxth	r2, r2
 8008430:	fb02 f303 	mul.w	r3, r2, r3
 8008434:	461a      	mov	r2, r3
 8008436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008438:	4413      	add	r3, r2
 800843a:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	889b      	ldrh	r3, [r3, #4]
 8008440:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8008442:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008444:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008446:	e02e      	b.n	80084a6 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	889b      	ldrh	r3, [r3, #4]
 800844c:	83bb      	strh	r3, [r7, #28]
 800844e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008450:	837b      	strh	r3, [r7, #26]
 8008452:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008454:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8008456:	8b7a      	ldrh	r2, [r7, #26]
 8008458:	8b3b      	ldrh	r3, [r7, #24]
 800845a:	429a      	cmp	r2, r3
 800845c:	d304      	bcc.n	8008468 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 800845e:	8b7a      	ldrh	r2, [r7, #26]
 8008460:	8b3b      	ldrh	r3, [r7, #24]
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	b29b      	uxth	r3, r3
 8008466:	e008      	b.n	800847a <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008468:	8bbb      	ldrh	r3, [r7, #28]
 800846a:	005b      	lsls	r3, r3, #1
 800846c:	b29a      	uxth	r2, r3
 800846e:	8b79      	ldrh	r1, [r7, #26]
 8008470:	8b3b      	ldrh	r3, [r7, #24]
 8008472:	1acb      	subs	r3, r1, r3
 8008474:	b29b      	uxth	r3, r3
 8008476:	4413      	add	r3, r2
 8008478:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 800847a:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 800847c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800847e:	88fb      	ldrh	r3, [r7, #6]
 8008480:	441a      	add	r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	889b      	ldrh	r3, [r3, #4]
 8008486:	005b      	lsls	r3, r3, #1
 8008488:	429a      	cmp	r2, r3
 800848a:	db0c      	blt.n	80084a6 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	8898      	ldrh	r0, [r3, #4]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	889a      	ldrh	r2, [r3, #4]
 8008494:	88fb      	ldrh	r3, [r7, #6]
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	b29a      	uxth	r2, r3
 800849a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800849c:	4619      	mov	r1, r3
 800849e:	f7ff fe61 	bl	8008164 <advance_index>
 80084a2:	4603      	mov	r3, r0
 80084a4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 80084a6:	88fb      	ldrh	r3, [r7, #6]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d023      	beq.n	80084f4 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	889b      	ldrh	r3, [r3, #4]
 80084b0:	82fb      	strh	r3, [r7, #22]
 80084b2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80084b4:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 80084b6:	e003      	b.n	80084c0 <_tu_fifo_write_n+0x164>
 80084b8:	8aba      	ldrh	r2, [r7, #20]
 80084ba:	8afb      	ldrh	r3, [r7, #22]
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	82bb      	strh	r3, [r7, #20]
 80084c0:	8afa      	ldrh	r2, [r7, #22]
 80084c2:	8abb      	ldrh	r3, [r7, #20]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d9f7      	bls.n	80084b8 <_tu_fifo_write_n+0x15c>
  return idx;
 80084c8:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80084ca:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 80084cc:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 80084ce:	88fa      	ldrh	r2, [r7, #6]
 80084d0:	797b      	ldrb	r3, [r7, #5]
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	460b      	mov	r3, r1
 80084d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f7ff fc66 	bl	8007daa <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	889b      	ldrh	r3, [r3, #4]
 80084e2:	88fa      	ldrh	r2, [r7, #6]
 80084e4:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7ff fe3c 	bl	8008164 <advance_index>
 80084ec:	4603      	mov	r3, r0
 80084ee:	461a      	mov	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 80084f4:	88fb      	ldrh	r3, [r7, #6]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3740      	adds	r7, #64	@ 0x40
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b086      	sub	sp, #24
 8008502:	af02      	add	r7, sp, #8
 8008504:	60f8      	str	r0, [r7, #12]
 8008506:	60b9      	str	r1, [r7, #8]
 8008508:	4611      	mov	r1, r2
 800850a:	461a      	mov	r2, r3
 800850c:	460b      	mov	r3, r1
 800850e:	80fb      	strh	r3, [r7, #6]
 8008510:	4613      	mov	r3, r2
 8008512:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	891b      	ldrh	r3, [r3, #8]
 8008518:	b298      	uxth	r0, r3
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	895b      	ldrh	r3, [r3, #10]
 800851e:	b29b      	uxth	r3, r3
 8008520:	88f9      	ldrh	r1, [r7, #6]
 8008522:	797a      	ldrb	r2, [r7, #5]
 8008524:	9201      	str	r2, [sp, #4]
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	4603      	mov	r3, r0
 800852a:	460a      	mov	r2, r1
 800852c:	68b9      	ldr	r1, [r7, #8]
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f7ff fea4 	bl	800827c <_tu_fifo_peek_n>
 8008534:	4603      	mov	r3, r0
 8008536:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	8898      	ldrh	r0, [r3, #4]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	895b      	ldrh	r3, [r3, #10]
 8008540:	b29b      	uxth	r3, r3
 8008542:	88fa      	ldrh	r2, [r7, #6]
 8008544:	4619      	mov	r1, r3
 8008546:	f7ff fe0d 	bl	8008164 <advance_index>
 800854a:	4603      	mov	r3, r0
 800854c:	461a      	mov	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8008552:	88fb      	ldrh	r3, [r7, #6]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 800855c:	b480      	push	{r7}
 800855e:	b087      	sub	sp, #28
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	8899      	ldrh	r1, [r3, #4]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	891b      	ldrh	r3, [r3, #8]
 800856c:	b29a      	uxth	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	895b      	ldrh	r3, [r3, #10]
 8008572:	b29b      	uxth	r3, r3
 8008574:	8279      	strh	r1, [r7, #18]
 8008576:	823a      	strh	r2, [r7, #16]
 8008578:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 800857a:	8a3a      	ldrh	r2, [r7, #16]
 800857c:	89fb      	ldrh	r3, [r7, #14]
 800857e:	429a      	cmp	r2, r3
 8008580:	d304      	bcc.n	800858c <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8008582:	8a3a      	ldrh	r2, [r7, #16]
 8008584:	89fb      	ldrh	r3, [r7, #14]
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	b29b      	uxth	r3, r3
 800858a:	e008      	b.n	800859e <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800858c:	8a7b      	ldrh	r3, [r7, #18]
 800858e:	005b      	lsls	r3, r3, #1
 8008590:	b29a      	uxth	r2, r3
 8008592:	8a39      	ldrh	r1, [r7, #16]
 8008594:	89fb      	ldrh	r3, [r7, #14]
 8008596:	1acb      	subs	r3, r1, r3
 8008598:	b29b      	uxth	r3, r3
 800859a:	4413      	add	r3, r2
 800859c:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	8892      	ldrh	r2, [r2, #4]
 80085a2:	82fb      	strh	r3, [r7, #22]
 80085a4:	4613      	mov	r3, r2
 80085a6:	82bb      	strh	r3, [r7, #20]
 80085a8:	8afa      	ldrh	r2, [r7, #22]
 80085aa:	8abb      	ldrh	r3, [r7, #20]
 80085ac:	4293      	cmp	r3, r2
 80085ae:	bf28      	it	cs
 80085b0:	4613      	movcs	r3, r2
 80085b2:	b29b      	uxth	r3, r3
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	371c      	adds	r7, #28
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	891b      	ldrh	r3, [r3, #8]
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	895b      	ldrh	r3, [r3, #10]
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	429a      	cmp	r2, r3
 80085d6:	bf0c      	ite	eq
 80085d8:	2301      	moveq	r3, #1
 80085da:	2300      	movne	r3, #0
 80085dc:	b2db      	uxtb	r3, r3
}
 80085de:	4618      	mov	r0, r3
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b085      	sub	sp, #20
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	8899      	ldrh	r1, [r3, #4]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	891b      	ldrh	r3, [r3, #8]
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	895b      	ldrh	r3, [r3, #10]
 8008600:	b29b      	uxth	r3, r3
 8008602:	81f9      	strh	r1, [r7, #14]
 8008604:	81ba      	strh	r2, [r7, #12]
 8008606:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8008608:	89ba      	ldrh	r2, [r7, #12]
 800860a:	897b      	ldrh	r3, [r7, #10]
 800860c:	429a      	cmp	r2, r3
 800860e:	d304      	bcc.n	800861a <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8008610:	89ba      	ldrh	r2, [r7, #12]
 8008612:	897b      	ldrh	r3, [r7, #10]
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	b29b      	uxth	r3, r3
 8008618:	e008      	b.n	800862c <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800861a:	89fb      	ldrh	r3, [r7, #14]
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	b29a      	uxth	r2, r3
 8008620:	89b9      	ldrh	r1, [r7, #12]
 8008622:	897b      	ldrh	r3, [r7, #10]
 8008624:	1acb      	subs	r3, r1, r3
 8008626:	b29b      	uxth	r3, r3
 8008628:	4413      	add	r3, r2
 800862a:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	8892      	ldrh	r2, [r2, #4]
 8008630:	4293      	cmp	r3, r2
 8008632:	bf2c      	ite	cs
 8008634:	2301      	movcs	r3, #1
 8008636:	2300      	movcc	r3, #0
 8008638:	b2db      	uxtb	r3, r3
}
 800863a:	4618      	mov	r0, r3
 800863c:	3714      	adds	r7, #20
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8008646:	b480      	push	{r7}
 8008648:	b087      	sub	sp, #28
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	8899      	ldrh	r1, [r3, #4]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	891b      	ldrh	r3, [r3, #8]
 8008656:	b29a      	uxth	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	895b      	ldrh	r3, [r3, #10]
 800865c:	b29b      	uxth	r3, r3
 800865e:	82f9      	strh	r1, [r7, #22]
 8008660:	82ba      	strh	r2, [r7, #20]
 8008662:	827b      	strh	r3, [r7, #18]
 8008664:	8afb      	ldrh	r3, [r7, #22]
 8008666:	823b      	strh	r3, [r7, #16]
 8008668:	8abb      	ldrh	r3, [r7, #20]
 800866a:	81fb      	strh	r3, [r7, #14]
 800866c:	8a7b      	ldrh	r3, [r7, #18]
 800866e:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8008670:	89fa      	ldrh	r2, [r7, #14]
 8008672:	89bb      	ldrh	r3, [r7, #12]
 8008674:	429a      	cmp	r2, r3
 8008676:	d304      	bcc.n	8008682 <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8008678:	89fa      	ldrh	r2, [r7, #14]
 800867a:	89bb      	ldrh	r3, [r7, #12]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	b29b      	uxth	r3, r3
 8008680:	e008      	b.n	8008694 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008682:	8a3b      	ldrh	r3, [r7, #16]
 8008684:	005b      	lsls	r3, r3, #1
 8008686:	b29a      	uxth	r2, r3
 8008688:	89f9      	ldrh	r1, [r7, #14]
 800868a:	89bb      	ldrh	r3, [r7, #12]
 800868c:	1acb      	subs	r3, r1, r3
 800868e:	b29b      	uxth	r3, r3
 8008690:	4413      	add	r3, r2
 8008692:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8008694:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8008696:	8afa      	ldrh	r2, [r7, #22]
 8008698:	897b      	ldrh	r3, [r7, #10]
 800869a:	429a      	cmp	r2, r3
 800869c:	d904      	bls.n	80086a8 <tu_fifo_remaining+0x62>
 800869e:	8afa      	ldrh	r2, [r7, #22]
 80086a0:	897b      	ldrh	r3, [r7, #10]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	e000      	b.n	80086aa <tu_fifo_remaining+0x64>
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	371c      	adds	r7, #28
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b084      	sub	sp, #16
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	891b      	ldrh	r3, [r3, #8]
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	895b      	ldrh	r3, [r3, #10]
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7ff fd6e 	bl	80081b0 <_tu_fifo_peek>
 80086d4:	4603      	mov	r3, r0
 80086d6:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	8898      	ldrh	r0, [r3, #4]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	895b      	ldrh	r3, [r3, #10]
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	7bfa      	ldrb	r2, [r7, #15]
 80086e4:	b292      	uxth	r2, r2
 80086e6:	4619      	mov	r1, r3
 80086e8:	f7ff fd3c 	bl	8008164 <advance_index>
 80086ec:	4603      	mov	r3, r0
 80086ee:	461a      	mov	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	60f8      	str	r0, [r7, #12]
 8008706:	60b9      	str	r1, [r7, #8]
 8008708:	4613      	mov	r3, r2
 800870a:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 800870c:	88fa      	ldrh	r2, [r7, #6]
 800870e:	2300      	movs	r3, #0
 8008710:	68b9      	ldr	r1, [r7, #8]
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f7ff fef3 	bl	80084fe <_tu_fifo_read_n>
 8008718:	4603      	mov	r3, r0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b084      	sub	sp, #16
 8008726:	af00      	add	r7, sp, #0
 8008728:	60f8      	str	r0, [r7, #12]
 800872a:	60b9      	str	r1, [r7, #8]
 800872c:	4613      	mov	r3, r2
 800872e:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8008730:	88fa      	ldrh	r2, [r7, #6]
 8008732:	2301      	movs	r3, #1
 8008734:	68b9      	ldr	r1, [r7, #8]
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f7ff fee1 	bl	80084fe <_tu_fifo_read_n>
 800873c:	4603      	mov	r3, r0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b086      	sub	sp, #24
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	891b      	ldrh	r3, [r3, #8]
 8008754:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f7ff ff47 	bl	80085ea <tu_fifo_full>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00c      	beq.n	800877c <tu_fifo_write+0x36>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	79db      	ldrb	r3, [r3, #7]
 8008766:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800876a:	b2db      	uxtb	r3, r3
 800876c:	f083 0301 	eor.w	r3, r3, #1
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d002      	beq.n	800877c <tu_fifo_write+0x36>
  {
    ret = false;
 8008776:	2300      	movs	r3, #0
 8008778:	75fb      	strb	r3, [r7, #23]
 800877a:	e022      	b.n	80087c2 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	889b      	ldrh	r3, [r3, #4]
 8008780:	823b      	strh	r3, [r7, #16]
 8008782:	8abb      	ldrh	r3, [r7, #20]
 8008784:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8008786:	e003      	b.n	8008790 <tu_fifo_write+0x4a>
 8008788:	89fa      	ldrh	r2, [r7, #14]
 800878a:	8a3b      	ldrh	r3, [r7, #16]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	81fb      	strh	r3, [r7, #14]
 8008790:	8a3a      	ldrh	r2, [r7, #16]
 8008792:	89fb      	ldrh	r3, [r7, #14]
 8008794:	429a      	cmp	r2, r3
 8008796:	d9f7      	bls.n	8008788 <tu_fifo_write+0x42>
  return idx;
 8008798:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 800879a:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 800879c:	8a7b      	ldrh	r3, [r7, #18]
 800879e:	461a      	mov	r2, r3
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7ff fae2 	bl	8007d6c <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	889b      	ldrh	r3, [r3, #4]
 80087ac:	8ab9      	ldrh	r1, [r7, #20]
 80087ae:	2201      	movs	r2, #1
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7ff fcd7 	bl	8008164 <advance_index>
 80087b6:	4603      	mov	r3, r0
 80087b8:	461a      	mov	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	811a      	strh	r2, [r3, #8]

    ret = true;
 80087be:	2301      	movs	r3, #1
 80087c0:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 80087c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3718      	adds	r7, #24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	4613      	mov	r3, r2
 80087d8:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 80087da:	88fa      	ldrh	r2, [r7, #6]
 80087dc:	2300      	movs	r3, #0
 80087de:	68b9      	ldr	r1, [r7, #8]
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f7ff fdbb 	bl	800835c <_tu_fifo_write_n>
 80087e6:	4603      	mov	r3, r0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	4613      	mov	r3, r2
 80087fc:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 80087fe:	88fa      	ldrh	r2, [r7, #6]
 8008800:	2301      	movs	r3, #1
 8008802:	68b9      	ldr	r1, [r7, #8]
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f7ff fda9 	bl	800835c <_tu_fifo_write_n>
 800880a:	4603      	mov	r3, r0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8008828:	2301      	movs	r3, #1
}
 800882a:	4618      	mov	r0, r3
 800882c:	370c      	adds	r7, #12
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <tu_fifo_set_overwritable>:
                Pointer to the FIFO buffer to manipulate
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable) {
 8008836:	b480      	push	{r7}
 8008838:	b083      	sub	sp, #12
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	460b      	mov	r3, r1
 8008840:	70fb      	strb	r3, [r7, #3]
  if (f->overwritable == overwritable) {
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	79db      	ldrb	r3, [r3, #7]
 8008846:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800884a:	b2db      	uxtb	r3, r3
 800884c:	78fa      	ldrb	r2, [r7, #3]
 800884e:	429a      	cmp	r2, r3
 8008850:	d101      	bne.n	8008856 <tu_fifo_set_overwritable+0x20>
    return true;
 8008852:	2301      	movs	r3, #1
 8008854:	e006      	b.n	8008864 <tu_fifo_set_overwritable+0x2e>
  }

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	79d3      	ldrb	r3, [r2, #7]
 800885a:	78f9      	ldrb	r1, [r7, #3]
 800885c:	f361 13c7 	bfi	r3, r1, #7, #1
 8008860:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8008862:	2301      	movs	r3, #1
}
 8008864:	4618      	mov	r0, r3
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	4603      	mov	r3, r0
 8008878:	6039      	str	r1, [r7, #0]
 800887a:	71fb      	strb	r3, [r7, #7]
 800887c:	4613      	mov	r3, r2
 800887e:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <tud_descriptor_bos_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
 80088a0:	b480      	push	{r7}
 80088a2:	af00      	add	r7, sp, #0
  return NULL;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 80088b0:	b480      	push	{r7}
 80088b2:	af00      	add	r7, sp, #0
  return NULL;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	4603      	mov	r3, r0
 80088c8:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <tud_mount_cb>:

TU_ATTR_WEAK void tud_mount_cb(void) {
 80088d8:	b480      	push	{r7}
 80088da:	af00      	add	r7, sp, #0
}
 80088dc:	bf00      	nop
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <tud_umount_cb>:

TU_ATTR_WEAK void tud_umount_cb(void) {
 80088e6:	b480      	push	{r7}
 80088e8:	af00      	add	r7, sp, #0
}
 80088ea:	bf00      	nop
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <tud_suspend_cb>:

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	4603      	mov	r3, r0
 80088fc:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 80088fe:	bf00      	nop
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 800890a:	b480      	push	{r7}
 800890c:	af00      	add	r7, sp, #0
}
 800890e:	bf00      	nop
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <tud_vendor_control_xfer_cb>:

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	4603      	mov	r3, r0
 8008920:	603a      	str	r2, [r7, #0]
 8008922:	71fb      	strb	r3, [r7, #7]
 8008924:	460b      	mov	r3, r1
 8008926:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) stage; (void) request;
  return false;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 8008936:	b480      	push	{r7}
 8008938:	b083      	sub	sp, #12
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8008940:	2301      	movs	r3, #1
}
 8008942:	4618      	mov	r0, r3
 8008944:	370c      	adds	r7, #12
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
	...

08008950 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8008950:	b480      	push	{r7}
 8008952:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8008954:	4b06      	ldr	r3, [pc, #24]	@ (8008970 <tud_mounted+0x20>)
 8008956:	785b      	ldrb	r3, [r3, #1]
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b00      	cmp	r3, #0
 800895c:	bf14      	ite	ne
 800895e:	2301      	movne	r3, #1
 8008960:	2300      	moveq	r3, #0
 8008962:	b2db      	uxtb	r3, r3
}
 8008964:	4618      	mov	r0, r3
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	20001714 	.word	0x20001714

08008974 <tud_suspended>:

bool tud_suspended(void) {
 8008974:	b480      	push	{r7}
 8008976:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8008978:	4b07      	ldr	r3, [pc, #28]	@ (8008998 <tud_suspended+0x24>)
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	bf14      	ite	ne
 8008986:	2301      	movne	r3, #1
 8008988:	2300      	moveq	r3, #0
 800898a:	b2db      	uxtb	r3, r3
}
 800898c:	4618      	mov	r0, r3
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	20001714 	.word	0x20001714

0800899c <tud_remote_wakeup>:

bool tud_remote_wakeup(void) {
 800899c:	b580      	push	{r7, lr}
 800899e:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en);
 80089a0:	4b0f      	ldr	r3, [pc, #60]	@ (80089e0 <tud_remote_wakeup+0x44>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00d      	beq.n	80089ca <tud_remote_wakeup+0x2e>
 80089ae:	4b0c      	ldr	r3, [pc, #48]	@ (80089e0 <tud_remote_wakeup+0x44>)
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	f003 0310 	and.w	r3, r3, #16
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d006      	beq.n	80089ca <tud_remote_wakeup+0x2e>
 80089bc:	4b08      	ldr	r3, [pc, #32]	@ (80089e0 <tud_remote_wakeup+0x44>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	f003 0308 	and.w	r3, r3, #8
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d101      	bne.n	80089ce <tud_remote_wakeup+0x32>
 80089ca:	2300      	movs	r3, #0
 80089cc:	e005      	b.n	80089da <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 80089ce:	4b05      	ldr	r3, [pc, #20]	@ (80089e4 <tud_remote_wakeup+0x48>)
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f002 fba4 	bl	800b120 <dcd_remote_wakeup>
  return true;
 80089d8:	2301      	movs	r3, #1
}
 80089da:	4618      	mov	r0, r3
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	20001714 	.word	0x20001714
 80089e4:	2000022d 	.word	0x2000022d

080089e8 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 80089e8:	b480      	push	{r7}
 80089ea:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 80089ec:	4b05      	ldr	r3, [pc, #20]	@ (8008a04 <tud_inited+0x1c>)
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	2bff      	cmp	r3, #255	@ 0xff
 80089f2:	bf14      	ite	ne
 80089f4:	2301      	movne	r3, #1
 80089f6:	2300      	moveq	r3, #0
 80089f8:	b2db      	uxtb	r3, r3
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	2000022d 	.word	0x2000022d

08008a08 <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b08c      	sub	sp, #48	@ 0x30
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	4603      	mov	r3, r0
 8008a10:	6039      	str	r1, [r7, #0]
 8008a12:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 8008a14:	f7ff ffe8 	bl	80089e8 <tud_inited>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e09e      	b.n	8008b60 <tud_rhport_init+0x158>
  }
  TU_ASSERT(rh_init);
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10a      	bne.n	8008a3e <tud_rhport_init+0x36>
 8008a28:	4b4f      	ldr	r3, [pc, #316]	@ (8008b68 <tud_rhport_init+0x160>)
 8008a2a:	61bb      	str	r3, [r7, #24]
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d000      	beq.n	8008a3a <tud_rhport_init+0x32>
 8008a38:	be00      	bkpt	0x0000
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	e090      	b.n	8008b60 <tud_rhport_init+0x158>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8008a3e:	222c      	movs	r2, #44	@ 0x2c
 8008a40:	2100      	movs	r1, #0
 8008a42:	484a      	ldr	r0, [pc, #296]	@ (8008b6c <tud_rhport_init+0x164>)
 8008a44:	f004 f8f7 	bl	800cc36 <memset>
  _usbd_queued_setup = 0;
 8008a48:	4b49      	ldr	r3, [pc, #292]	@ (8008b70 <tud_rhport_init+0x168>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	701a      	strb	r2, [r3, #0]
 8008a4e:	4b49      	ldr	r3, [pc, #292]	@ (8008b74 <tud_rhport_init+0x16c>)
 8008a50:	613b      	str	r3, [r7, #16]
#define OSAL_SPINLOCK_DEF(_name, _int_set) \
  osal_spinlock_t _name = { .interrupt_set = _int_set }

TU_ATTR_ALWAYS_INLINE static inline void osal_spin_init(osal_spinlock_t *ctx) {
  (void) ctx;
}
 8008a52:	bf00      	nop
 8008a54:	4b48      	ldr	r3, [pc, #288]	@ (8008b78 <tud_rhport_init+0x170>)
 8008a56:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	3304      	adds	r3, #4
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7ff fed9 	bl	8008814 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8008a62:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8008a64:	4a45      	ldr	r2, [pc, #276]	@ (8008b7c <tud_rhport_init+0x174>)
 8008a66:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8008a68:	4b44      	ldr	r3, [pc, #272]	@ (8008b7c <tud_rhport_init+0x174>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10a      	bne.n	8008a86 <tud_rhport_init+0x7e>
 8008a70:	4b3d      	ldr	r3, [pc, #244]	@ (8008b68 <tud_rhport_init+0x160>)
 8008a72:	61fb      	str	r3, [r7, #28]
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 0301 	and.w	r3, r3, #1
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d000      	beq.n	8008a82 <tud_rhport_init+0x7a>
 8008a80:	be00      	bkpt	0x0000
 8008a82:	2300      	movs	r3, #0
 8008a84:	e06c      	b.n	8008b60 <tud_rhport_init+0x158>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8008a86:	4b3e      	ldr	r3, [pc, #248]	@ (8008b80 <tud_rhport_init+0x178>)
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d005      	beq.n	8008a98 <tud_rhport_init+0x90>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8008a8c:	483d      	ldr	r0, [pc, #244]	@ (8008b84 <tud_rhport_init+0x17c>)
 8008a8e:	f3af 8000 	nop.w
 8008a92:	4603      	mov	r3, r0
 8008a94:	4a3c      	ldr	r2, [pc, #240]	@ (8008b88 <tud_rhport_init+0x180>)
 8008a96:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008a98:	2300      	movs	r3, #0
 8008a9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008a9e:	e03a      	b.n	8008b16 <tud_rhport_init+0x10e>
 8008aa0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008aa4:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8008aaa:	4b36      	ldr	r3, [pc, #216]	@ (8008b84 <tud_rhport_init+0x17c>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	7bfa      	ldrb	r2, [r7, #15]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d206      	bcs.n	8008ac2 <tud_rhport_init+0xba>
    driver = &_app_driver[drvid];
 8008ab4:	4b34      	ldr	r3, [pc, #208]	@ (8008b88 <tud_rhport_init+0x180>)
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
 8008aba:	015b      	lsls	r3, r3, #5
 8008abc:	4413      	add	r3, r2
 8008abe:	60bb      	str	r3, [r7, #8]
 8008ac0:	e00d      	b.n	8008ade <tud_rhport_init+0xd6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008ac2:	4b30      	ldr	r3, [pc, #192]	@ (8008b84 <tud_rhport_init+0x17c>)
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	1c5a      	adds	r2, r3, #1
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	db07      	blt.n	8008ade <tud_rhport_init+0xd6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	4a2c      	ldr	r2, [pc, #176]	@ (8008b84 <tud_rhport_init+0x17c>)
 8008ad2:	7812      	ldrb	r2, [r2, #0]
 8008ad4:	1a9b      	subs	r3, r3, r2
 8008ad6:	015b      	lsls	r3, r3, #5
 8008ad8:	4a2c      	ldr	r2, [pc, #176]	@ (8008b8c <tud_rhport_init+0x184>)
 8008ada:	4413      	add	r3, r2
 8008adc:	60bb      	str	r3, [r7, #8]
  return driver;
 8008ade:	68bb      	ldr	r3, [r7, #8]
    usbd_class_driver_t const* driver = get_driver(i);
 8008ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d003      	beq.n	8008af0 <tud_rhport_init+0xe8>
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10a      	bne.n	8008b06 <tud_rhport_init+0xfe>
 8008af0:	4b1d      	ldr	r3, [pc, #116]	@ (8008b68 <tud_rhport_init+0x160>)
 8008af2:	623b      	str	r3, [r7, #32]
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0301 	and.w	r3, r3, #1
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d000      	beq.n	8008b02 <tud_rhport_init+0xfa>
 8008b00:	be00      	bkpt	0x0000
 8008b02:	2300      	movs	r3, #0
 8008b04:	e02c      	b.n	8008b60 <tud_rhport_init+0x158>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 8008b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008b0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b10:	3301      	adds	r3, #1
 8008b12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008b16:	4b1b      	ldr	r3, [pc, #108]	@ (8008b84 <tud_rhport_init+0x17c>)
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	1c5a      	adds	r2, r3, #1
 8008b1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b20:	429a      	cmp	r2, r3
 8008b22:	dabd      	bge.n	8008aa0 <tud_rhport_init+0x98>
  }

  _usbd_rhport = rhport;
 8008b24:	4a1a      	ldr	r2, [pc, #104]	@ (8008b90 <tud_rhport_init+0x188>)
 8008b26:	79fb      	ldrb	r3, [r7, #7]
 8008b28:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f002 f9cc 	bl	800aecc <dcd_init>
 8008b34:	4603      	mov	r3, r0
 8008b36:	f083 0301 	eor.w	r3, r3, #1
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00a      	beq.n	8008b56 <tud_rhport_init+0x14e>
 8008b40:	4b09      	ldr	r3, [pc, #36]	@ (8008b68 <tud_rhport_init+0x160>)
 8008b42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 0301 	and.w	r3, r3, #1
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d000      	beq.n	8008b52 <tud_rhport_init+0x14a>
 8008b50:	be00      	bkpt	0x0000
 8008b52:	2300      	movs	r3, #0
 8008b54:	e004      	b.n	8008b60 <tud_rhport_init+0x158>
  dcd_int_enable(rhport);
 8008b56:	79fb      	ldrb	r3, [r7, #7]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f002 fa55 	bl	800b008 <dcd_int_enable>

  return true;
 8008b5e:	2301      	movs	r3, #1
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3730      	adds	r7, #48	@ 0x30
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	e000edf0 	.word	0xe000edf0
 8008b6c:	20001714 	.word	0x20001714
 8008b70:	20001740 	.word	0x20001740
 8008b74:	20000230 	.word	0x20000230
 8008b78:	20000234 	.word	0x20000234
 8008b7c:	2000180c 	.word	0x2000180c
 8008b80:	00000000 	.word	0x00000000
 8008b84:	20001748 	.word	0x20001748
 8008b88:	20001744 	.word	0x20001744
 8008b8c:	0800efa4 	.word	0x0800efa4
 8008b90:	2000022d 	.word	0x2000022d

08008b94 <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b088      	sub	sp, #32
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	77fb      	strb	r3, [r7, #31]
 8008ba2:	e034      	b.n	8008c0e <configuration_reset+0x7a>
 8008ba4:	7ffb      	ldrb	r3, [r7, #31]
 8008ba6:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8008bac:	4b25      	ldr	r3, [pc, #148]	@ (8008c44 <configuration_reset+0xb0>)
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	7cfa      	ldrb	r2, [r7, #19]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d206      	bcs.n	8008bc4 <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 8008bb6:	4b24      	ldr	r3, [pc, #144]	@ (8008c48 <configuration_reset+0xb4>)
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	7cfb      	ldrb	r3, [r7, #19]
 8008bbc:	015b      	lsls	r3, r3, #5
 8008bbe:	4413      	add	r3, r2
 8008bc0:	60fb      	str	r3, [r7, #12]
 8008bc2:	e00d      	b.n	8008be0 <configuration_reset+0x4c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8008c44 <configuration_reset+0xb0>)
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	1c5a      	adds	r2, r3, #1
 8008bca:	7cfb      	ldrb	r3, [r7, #19]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	db07      	blt.n	8008be0 <configuration_reset+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008bd0:	7cfb      	ldrb	r3, [r7, #19]
 8008bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8008c44 <configuration_reset+0xb0>)
 8008bd4:	7812      	ldrb	r2, [r2, #0]
 8008bd6:	1a9b      	subs	r3, r3, r2
 8008bd8:	015b      	lsls	r3, r3, #5
 8008bda:	4a1c      	ldr	r2, [pc, #112]	@ (8008c4c <configuration_reset+0xb8>)
 8008bdc:	4413      	add	r3, r2
 8008bde:	60fb      	str	r3, [r7, #12]
  return driver;
 8008be0:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8008be2:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d109      	bne.n	8008bfe <configuration_reset+0x6a>
 8008bea:	4b19      	ldr	r3, [pc, #100]	@ (8008c50 <configuration_reset+0xbc>)
 8008bec:	617b      	str	r3, [r7, #20]
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 0301 	and.w	r3, r3, #1
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d01f      	beq.n	8008c3a <configuration_reset+0xa6>
 8008bfa:	be00      	bkpt	0x0000
 8008bfc:	e01d      	b.n	8008c3a <configuration_reset+0xa6>
    driver->reset(rhport);
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	79fa      	ldrb	r2, [r7, #7]
 8008c04:	4610      	mov	r0, r2
 8008c06:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008c08:	7ffb      	ldrb	r3, [r7, #31]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	77fb      	strb	r3, [r7, #31]
 8008c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c44 <configuration_reset+0xb0>)
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	1c5a      	adds	r2, r3, #1
 8008c14:	7ffb      	ldrb	r3, [r7, #31]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	dac4      	bge.n	8008ba4 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8008c1a:	222c      	movs	r2, #44	@ 0x2c
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	480d      	ldr	r0, [pc, #52]	@ (8008c54 <configuration_reset+0xc0>)
 8008c20:	f004 f809 	bl	800cc36 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8008c24:	2210      	movs	r2, #16
 8008c26:	21ff      	movs	r1, #255	@ 0xff
 8008c28:	480b      	ldr	r0, [pc, #44]	@ (8008c58 <configuration_reset+0xc4>)
 8008c2a:	f004 f804 	bl	800cc36 <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 8008c2e:	220c      	movs	r2, #12
 8008c30:	21ff      	movs	r1, #255	@ 0xff
 8008c32:	480a      	ldr	r0, [pc, #40]	@ (8008c5c <configuration_reset+0xc8>)
 8008c34:	f003 ffff 	bl	800cc36 <memset>
 8008c38:	e000      	b.n	8008c3c <configuration_reset+0xa8>
    TU_ASSERT(driver,);
 8008c3a:	bf00      	nop
}
 8008c3c:	3720      	adds	r7, #32
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	20001748 	.word	0x20001748
 8008c48:	20001744 	.word	0x20001744
 8008c4c:	0800efa4 	.word	0x0800efa4
 8008c50:	e000edf0 	.word	0xe000edf0
 8008c54:	20001714 	.word	0x20001714
 8008c58:	20001718 	.word	0x20001718
 8008c5c:	20001728 	.word	0x20001728

08008c60 <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	4603      	mov	r3, r0
 8008c68:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8008c6a:	79fb      	ldrb	r3, [r7, #7]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7ff ff91 	bl	8008b94 <configuration_reset>
  usbd_control_reset();
 8008c72:	f001 fc37 	bl	800a4e4 <usbd_control_reset>
}
 8008c76:	bf00      	nop
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
	...

08008c80 <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8008c80:	b590      	push	{r4, r7, lr}
 8008c82:	b093      	sub	sp, #76	@ 0x4c
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 8008c8c:	f7ff feac 	bl	80089e8 <tud_inited>
 8008c90:	4603      	mov	r3, r0
 8008c92:	f083 0301 	eor.w	r3, r3, #1
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f040 8189 	bne.w	8008fb0 <tud_task_ext+0x330>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8008c9e:	4bb1      	ldr	r3, [pc, #708]	@ (8008f64 <tud_task_ext+0x2e4>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ca4:	f107 030c 	add.w	r3, r7, #12
 8008ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 8008cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb8:	3304      	adds	r3, #4
 8008cba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7ff fcfa 	bl	80086b6 <tu_fifo_read>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 8008cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2001      	movs	r0, #1
 8008cce:	4798      	blx	r3

  return success;
 8008cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cd4:	f083 0301 	eor.w	r3, r3, #1
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f040 816a 	bne.w	8008fb4 <tud_task_ext+0x334>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 8008ce0:	7b7b      	ldrb	r3, [r7, #13]
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	2b07      	cmp	r3, #7
 8008ce6:	f200 814b 	bhi.w	8008f80 <tud_task_ext+0x300>
 8008cea:	a201      	add	r2, pc, #4	@ (adr r2, 8008cf0 <tud_task_ext+0x70>)
 8008cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf0:	08008d11 	.word	0x08008d11
 8008cf4:	08008d21 	.word	0x08008d21
 8008cf8:	08008f35 	.word	0x08008f35
 8008cfc:	08008ee7 	.word	0x08008ee7
 8008d00:	08008f11 	.word	0x08008f11
 8008d04:	08008d2f 	.word	0x08008d2f
 8008d08:	08008ddf 	.word	0x08008ddf
 8008d0c:	08008f25 	.word	0x08008f25
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8008d10:	7b3b      	ldrb	r3, [r7, #12]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7ff ffa4 	bl	8008c60 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8008d18:	7c3a      	ldrb	r2, [r7, #16]
 8008d1a:	4b93      	ldr	r3, [pc, #588]	@ (8008f68 <tud_task_ext+0x2e8>)
 8008d1c:	709a      	strb	r2, [r3, #2]
        break;
 8008d1e:	e146      	b.n	8008fae <tud_task_ext+0x32e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 8008d20:	7b3b      	ldrb	r3, [r7, #12]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7ff ff9c 	bl	8008c60 <usbd_reset>
        tud_umount_cb();
 8008d28:	f7ff fddd 	bl	80088e6 <tud_umount_cb>
        break;
 8008d2c:	e13f      	b.n	8008fae <tud_task_ext+0x32e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 8008d2e:	4b8f      	ldr	r3, [pc, #572]	@ (8008f6c <tud_task_ext+0x2ec>)
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10a      	bne.n	8008d4e <tud_task_ext+0xce>
 8008d38:	4b8d      	ldr	r3, [pc, #564]	@ (8008f70 <tud_task_ext+0x2f0>)
 8008d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0301 	and.w	r3, r3, #1
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 8137 	beq.w	8008fb8 <tud_task_ext+0x338>
 8008d4a:	be00      	bkpt	0x0000
 8008d4c:	e134      	b.n	8008fb8 <tud_task_ext+0x338>
        _usbd_queued_setup--;
 8008d4e:	4b87      	ldr	r3, [pc, #540]	@ (8008f6c <tud_task_ext+0x2ec>)
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	3b01      	subs	r3, #1
 8008d56:	b2da      	uxtb	r2, r3
 8008d58:	4b84      	ldr	r3, [pc, #528]	@ (8008f6c <tud_task_ext+0x2ec>)
 8008d5a:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 8008d5c:	4b83      	ldr	r3, [pc, #524]	@ (8008f6c <tud_task_ext+0x2ec>)
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f040 8116 	bne.w	8008f94 <tud_task_ext+0x314>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8008d68:	4a7f      	ldr	r2, [pc, #508]	@ (8008f68 <tud_task_ext+0x2e8>)
 8008d6a:	7813      	ldrb	r3, [r2, #0]
 8008d6c:	f043 0301 	orr.w	r3, r3, #1
 8008d70:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8008d72:	4a7d      	ldr	r2, [pc, #500]	@ (8008f68 <tud_task_ext+0x2e8>)
 8008d74:	f892 3020 	ldrb.w	r3, [r2, #32]
 8008d78:	f023 0301 	bic.w	r3, r3, #1
 8008d7c:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8008d80:	4a79      	ldr	r2, [pc, #484]	@ (8008f68 <tud_task_ext+0x2e8>)
 8008d82:	f892 3020 	ldrb.w	r3, [r2, #32]
 8008d86:	f023 0304 	bic.w	r3, r3, #4
 8008d8a:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 8008d8e:	4a76      	ldr	r2, [pc, #472]	@ (8008f68 <tud_task_ext+0x2e8>)
 8008d90:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8008d94:	f023 0301 	bic.w	r3, r3, #1
 8008d98:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 8008d9c:	4a72      	ldr	r2, [pc, #456]	@ (8008f68 <tud_task_ext+0x2e8>)
 8008d9e:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8008da2:	f023 0304 	bic.w	r3, r3, #4
 8008da6:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 8008daa:	7b3a      	ldrb	r2, [r7, #12]
 8008dac:	f107 030c 	add.w	r3, r7, #12
 8008db0:	3304      	adds	r3, #4
 8008db2:	4619      	mov	r1, r3
 8008db4:	4610      	mov	r0, r2
 8008db6:	f000 f91f 	bl	8008ff8 <process_control_request>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	f083 0301 	eor.w	r3, r3, #1
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f000 80e8 	beq.w	8008f98 <tud_task_ext+0x318>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8008dc8:	7b3b      	ldrb	r3, [r7, #12]
 8008dca:	2100      	movs	r1, #0
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f002 fb7b 	bl	800b4c8 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8008dd2:	7b3b      	ldrb	r3, [r7, #12]
 8008dd4:	2180      	movs	r1, #128	@ 0x80
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f002 fb76 	bl	800b4c8 <dcd_edpt_stall>
        }
        break;
 8008ddc:	e0dc      	b.n	8008f98 <tud_task_ext+0x318>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8008dde:	7c3b      	ldrb	r3, [r7, #16]
 8008de0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008de4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008de8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008dec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008df0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008df4:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 8008df6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8008dfa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008dfe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008e02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008e06:	09db      	lsrs	r3, r3, #7
 8008e08:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 8008e0a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8008e0e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008e12:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8008e16:	4954      	ldr	r1, [pc, #336]	@ (8008f68 <tud_task_ext+0x2e8>)
 8008e18:	0052      	lsls	r2, r2, #1
 8008e1a:	440a      	add	r2, r1
 8008e1c:	4413      	add	r3, r2
 8008e1e:	f103 0220 	add.w	r2, r3, #32
 8008e22:	7813      	ldrb	r3, [r2, #0]
 8008e24:	f023 0301 	bic.w	r3, r3, #1
 8008e28:	7013      	strb	r3, [r2, #0]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8008e2a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008e2e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8008e32:	494d      	ldr	r1, [pc, #308]	@ (8008f68 <tud_task_ext+0x2e8>)
 8008e34:	0052      	lsls	r2, r2, #1
 8008e36:	440a      	add	r2, r1
 8008e38:	4413      	add	r3, r2
 8008e3a:	f103 0220 	add.w	r2, r3, #32
 8008e3e:	7813      	ldrb	r3, [r2, #0]
 8008e40:	f023 0304 	bic.w	r3, r3, #4
 8008e44:	7013      	strb	r3, [r2, #0]

        if (0 == epnum) {
 8008e46:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d107      	bne.n	8008e5e <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 8008e4e:	7b38      	ldrb	r0, [r7, #12]
 8008e50:	7c7a      	ldrb	r2, [r7, #17]
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8008e58:	f001 fb7a 	bl	800a550 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 8008e5c:	e0a7      	b.n	8008fae <tud_task_ext+0x32e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8008e5e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008e62:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8008e66:	4940      	ldr	r1, [pc, #256]	@ (8008f68 <tud_task_ext+0x2e8>)
 8008e68:	0052      	lsls	r2, r2, #1
 8008e6a:	440a      	add	r2, r1
 8008e6c:	4413      	add	r3, r2
 8008e6e:	3314      	adds	r3, #20
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 8008e76:	2300      	movs	r3, #0
 8008e78:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8008e7a:	4b3e      	ldr	r3, [pc, #248]	@ (8008f74 <tud_task_ext+0x2f4>)
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d207      	bcs.n	8008e96 <tud_task_ext+0x216>
    driver = &_app_driver[drvid];
 8008e86:	4b3c      	ldr	r3, [pc, #240]	@ (8008f78 <tud_task_ext+0x2f8>)
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008e8e:	015b      	lsls	r3, r3, #5
 8008e90:	4413      	add	r3, r2
 8008e92:	623b      	str	r3, [r7, #32]
 8008e94:	e00f      	b.n	8008eb6 <tud_task_ext+0x236>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008e96:	4b37      	ldr	r3, [pc, #220]	@ (8008f74 <tud_task_ext+0x2f4>)
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	1c5a      	adds	r2, r3, #1
 8008e9c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	db08      	blt.n	8008eb6 <tud_task_ext+0x236>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008ea4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008ea8:	4a32      	ldr	r2, [pc, #200]	@ (8008f74 <tud_task_ext+0x2f4>)
 8008eaa:	7812      	ldrb	r2, [r2, #0]
 8008eac:	1a9b      	subs	r3, r3, r2
 8008eae:	015b      	lsls	r3, r3, #5
 8008eb0:	4a32      	ldr	r2, [pc, #200]	@ (8008f7c <tud_task_ext+0x2fc>)
 8008eb2:	4413      	add	r3, r2
 8008eb4:	623b      	str	r3, [r7, #32]
  return driver;
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8008eb8:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 8008eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d109      	bne.n	8008ed4 <tud_task_ext+0x254>
 8008ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8008f70 <tud_task_ext+0x2f0>)
 8008ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 0301 	and.w	r3, r3, #1
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d075      	beq.n	8008fbc <tud_task_ext+0x33c>
 8008ed0:	be00      	bkpt	0x0000
 8008ed2:	e073      	b.n	8008fbc <tud_task_ext+0x33c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8008ed4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ed6:	699c      	ldr	r4, [r3, #24]
 8008ed8:	7b38      	ldrb	r0, [r7, #12]
 8008eda:	7c7a      	ldrb	r2, [r7, #17]
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8008ee2:	47a0      	blx	r4
        break;
 8008ee4:	e063      	b.n	8008fae <tud_task_ext+0x32e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 8008ee6:	4b20      	ldr	r3, [pc, #128]	@ (8008f68 <tud_task_ext+0x2e8>)
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d053      	beq.n	8008f9c <tud_task_ext+0x31c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8008ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8008f68 <tud_task_ext+0x2e8>)
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	bf14      	ite	ne
 8008f02:	2301      	movne	r3, #1
 8008f04:	2300      	moveq	r3, #0
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7ff fcf3 	bl	80088f4 <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 8008f0e:	e045      	b.n	8008f9c <tud_task_ext+0x31c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 8008f10:	4b15      	ldr	r3, [pc, #84]	@ (8008f68 <tud_task_ext+0x2e8>)
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d040      	beq.n	8008fa0 <tud_task_ext+0x320>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 8008f1e:	f7ff fcf4 	bl	800890a <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 8008f22:	e03d      	b.n	8008fa0 <tud_task_ext+0x320>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) {
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d03c      	beq.n	8008fa4 <tud_task_ext+0x324>
          event.func_call.func(event.func_call.param);
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	697a      	ldr	r2, [r7, #20]
 8008f2e:	4610      	mov	r0, r2
 8008f30:	4798      	blx	r3
        }
        break;
 8008f32:	e037      	b.n	8008fa4 <tud_task_ext+0x324>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8008f34:	4b0c      	ldr	r3, [pc, #48]	@ (8008f68 <tud_task_ext+0x2e8>)
 8008f36:	78db      	ldrb	r3, [r3, #3]
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	61fb      	str	r3, [r7, #28]
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8008f40:	7efb      	ldrb	r3, [r7, #27]
 8008f42:	69fa      	ldr	r2, [r7, #28]
 8008f44:	fa22 f303 	lsr.w	r3, r2, r3
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	bf14      	ite	ne
 8008f50:	2301      	movne	r3, #1
 8008f52:	2300      	moveq	r3, #0
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d026      	beq.n	8008fa8 <tud_task_ext+0x328>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7ff fc95 	bl	800888c <tud_sof_cb>
        }
      break;
 8008f62:	e021      	b.n	8008fa8 <tud_task_ext+0x328>
 8008f64:	2000180c 	.word	0x2000180c
 8008f68:	20001714 	.word	0x20001714
 8008f6c:	20001740 	.word	0x20001740
 8008f70:	e000edf0 	.word	0xe000edf0
 8008f74:	20001748 	.word	0x20001748
 8008f78:	20001744 	.word	0x20001744
 8008f7c:	0800efa4 	.word	0x0800efa4

      default:
        TU_BREAKPOINT();
 8008f80:	4b10      	ldr	r3, [pc, #64]	@ (8008fc4 <tud_task_ext+0x344>)
 8008f82:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00d      	beq.n	8008fac <tud_task_ext+0x32c>
 8008f90:	be00      	bkpt	0x0000
        break;
 8008f92:	e00b      	b.n	8008fac <tud_task_ext+0x32c>
          break;
 8008f94:	bf00      	nop
 8008f96:	e682      	b.n	8008c9e <tud_task_ext+0x1e>
        break;
 8008f98:	bf00      	nop
 8008f9a:	e680      	b.n	8008c9e <tud_task_ext+0x1e>
        break;
 8008f9c:	bf00      	nop
 8008f9e:	e67e      	b.n	8008c9e <tud_task_ext+0x1e>
        break;
 8008fa0:	bf00      	nop
 8008fa2:	e67c      	b.n	8008c9e <tud_task_ext+0x1e>
        break;
 8008fa4:	bf00      	nop
 8008fa6:	e67a      	b.n	8008c9e <tud_task_ext+0x1e>
      break;
 8008fa8:	bf00      	nop
 8008faa:	e678      	b.n	8008c9e <tud_task_ext+0x1e>
        break;
 8008fac:	bf00      	nop
  while (1) {
 8008fae:	e676      	b.n	8008c9e <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 8008fb0:	bf00      	nop
 8008fb2:	e004      	b.n	8008fbe <tud_task_ext+0x33e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8008fb4:	bf00      	nop
 8008fb6:	e002      	b.n	8008fbe <tud_task_ext+0x33e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8008fb8:	bf00      	nop
 8008fba:	e000      	b.n	8008fbe <tud_task_ext+0x33e>
          TU_ASSERT(driver,);
 8008fbc:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) { return; }
#endif
  }
}
 8008fbe:	374c      	adds	r7, #76	@ 0x4c
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd90      	pop	{r4, r7, pc}
 8008fc4:	e000edf0 	.word	0xe000edf0

08008fc8 <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
 8008fd4:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f001 fa8e 	bl	800a4fc <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	695b      	ldr	r3, [r3, #20]
 8008fe4:	7bf8      	ldrb	r0, [r7, #15]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	2101      	movs	r1, #1
 8008fea:	4798      	blx	r3
 8008fec:	4603      	mov	r3, r0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
	...

08008ff8 <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b09a      	sub	sp, #104	@ 0x68
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	4603      	mov	r3, r0
 8009000:	6039      	str	r1, [r7, #0]
 8009002:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8009004:	2000      	movs	r0, #0
 8009006:	f001 fa79 	bl	800a4fc <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009012:	b2db      	uxtb	r3, r3
 8009014:	2b60      	cmp	r3, #96	@ 0x60
 8009016:	d10a      	bne.n	800902e <process_control_request+0x36>
 8009018:	4ba5      	ldr	r3, [pc, #660]	@ (80092b0 <process_control_request+0x2b8>)
 800901a:	633b      	str	r3, [r7, #48]	@ 0x30
 800901c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0301 	and.w	r3, r3, #1
 8009024:	2b00      	cmp	r3, #0
 8009026:	d000      	beq.n	800902a <process_control_request+0x32>
 8009028:	be00      	bkpt	0x0000
 800902a:	2300      	movs	r3, #0
 800902c:	e2bb      	b.n	80095a6 <process_control_request+0x5ae>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009036:	b2db      	uxtb	r3, r3
 8009038:	2b40      	cmp	r3, #64	@ 0x40
 800903a:	d10a      	bne.n	8009052 <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 800903c:	489d      	ldr	r0, [pc, #628]	@ (80092b4 <process_control_request+0x2bc>)
 800903e:	f001 fa5d 	bl	800a4fc <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	683a      	ldr	r2, [r7, #0]
 8009046:	2101      	movs	r1, #1
 8009048:	4618      	mov	r0, r3
 800904a:	f7ff fc65 	bl	8008918 <tud_vendor_control_xfer_cb>
 800904e:	4603      	mov	r3, r0
 8009050:	e2a9      	b.n	80095a6 <process_control_request+0x5ae>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b02      	cmp	r3, #2
 800905e:	f000 81ca 	beq.w	80093f6 <process_control_request+0x3fe>
 8009062:	2b02      	cmp	r3, #2
 8009064:	f300 8292 	bgt.w	800958c <process_control_request+0x594>
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <process_control_request+0x7c>
 800906c:	2b01      	cmp	r3, #1
 800906e:	f000 8151 	beq.w	8009314 <process_control_request+0x31c>
 8009072:	e28b      	b.n	800958c <process_control_request+0x594>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800907c:	b2db      	uxtb	r3, r3
 800907e:	2b20      	cmp	r3, #32
 8009080:	d143      	bne.n	800910a <process_control_request+0x112>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	889b      	ldrh	r3, [r3, #4]
 8009086:	b29b      	uxth	r3, r3
 8009088:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800908a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800908c:	b2db      	uxtb	r3, r3
 800908e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8009092:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009096:	2b0f      	cmp	r3, #15
 8009098:	d901      	bls.n	800909e <process_control_request+0xa6>
 800909a:	2300      	movs	r3, #0
 800909c:	e283      	b.n	80095a6 <process_control_request+0x5ae>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800909e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80090a2:	4a85      	ldr	r2, [pc, #532]	@ (80092b8 <process_control_request+0x2c0>)
 80090a4:	4413      	add	r3, r2
 80090a6:	791b      	ldrb	r3, [r3, #4]
 80090a8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 80090ac:	2300      	movs	r3, #0
 80090ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 80090b0:	4b82      	ldr	r3, [pc, #520]	@ (80092bc <process_control_request+0x2c4>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d207      	bcs.n	80090cc <process_control_request+0xd4>
    driver = &_app_driver[drvid];
 80090bc:	4b80      	ldr	r3, [pc, #512]	@ (80092c0 <process_control_request+0x2c8>)
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80090c4:	015b      	lsls	r3, r3, #5
 80090c6:	4413      	add	r3, r2
 80090c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090ca:	e00f      	b.n	80090ec <process_control_request+0xf4>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80090cc:	4b7b      	ldr	r3, [pc, #492]	@ (80092bc <process_control_request+0x2c4>)
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	1c5a      	adds	r2, r3, #1
 80090d2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80090d6:	429a      	cmp	r2, r3
 80090d8:	db08      	blt.n	80090ec <process_control_request+0xf4>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80090da:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80090de:	4a77      	ldr	r2, [pc, #476]	@ (80092bc <process_control_request+0x2c4>)
 80090e0:	7812      	ldrb	r2, [r2, #0]
 80090e2:	1a9b      	subs	r3, r3, r2
 80090e4:	015b      	lsls	r3, r3, #5
 80090e6:	4a77      	ldr	r2, [pc, #476]	@ (80092c4 <process_control_request+0x2cc>)
 80090e8:	4413      	add	r3, r2
 80090ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 80090ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80090ee:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 80090f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d101      	bne.n	80090fa <process_control_request+0x102>
 80090f6:	2300      	movs	r3, #0
 80090f8:	e255      	b.n	80095a6 <process_control_request+0x5ae>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 80090fa:	79fb      	ldrb	r3, [r7, #7]
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009100:	4618      	mov	r0, r3
 8009102:	f7ff ff61 	bl	8008fc8 <invoke_class_control>
 8009106:	4603      	mov	r3, r0
 8009108:	e24d      	b.n	80095a6 <process_control_request+0x5ae>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009112:	b2db      	uxtb	r3, r3
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00a      	beq.n	800912e <process_control_request+0x136>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 8009118:	4b65      	ldr	r3, [pc, #404]	@ (80092b0 <process_control_request+0x2b8>)
 800911a:	643b      	str	r3, [r7, #64]	@ 0x40
 800911c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 0301 	and.w	r3, r3, #1
 8009124:	2b00      	cmp	r3, #0
 8009126:	d000      	beq.n	800912a <process_control_request+0x132>
 8009128:	be00      	bkpt	0x0000
        return false;
 800912a:	2300      	movs	r3, #0
 800912c:	e23b      	b.n	80095a6 <process_control_request+0x5ae>
      }

      switch ( p_request->bRequest ) {
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	785b      	ldrb	r3, [r3, #1]
 8009132:	2b09      	cmp	r3, #9
 8009134:	f200 80e1 	bhi.w	80092fa <process_control_request+0x302>
 8009138:	a201      	add	r2, pc, #4	@ (adr r2, 8009140 <process_control_request+0x148>)
 800913a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913e:	bf00      	nop
 8009140:	080092c9 	.word	0x080092c9
 8009144:	0800928d 	.word	0x0800928d
 8009148:	080092fb 	.word	0x080092fb
 800914c:	08009267 	.word	0x08009267
 8009150:	080092fb 	.word	0x080092fb
 8009154:	08009169 	.word	0x08009169
 8009158:	0800924d 	.word	0x0800924d
 800915c:	080092fb 	.word	0x080092fb
 8009160:	0800918d 	.word	0x0800918d
 8009164:	080091a5 	.word	0x080091a5
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8009168:	6838      	ldr	r0, [r7, #0]
 800916a:	f001 f9d7 	bl	800a51c <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	885b      	ldrh	r3, [r3, #2]
 8009172:	b29b      	uxth	r3, r3
 8009174:	b2da      	uxtb	r2, r3
 8009176:	79fb      	ldrb	r3, [r7, #7]
 8009178:	4611      	mov	r1, r2
 800917a:	4618      	mov	r0, r3
 800917c:	f001 ff94 	bl	800b0a8 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8009180:	4a4d      	ldr	r2, [pc, #308]	@ (80092b8 <process_control_request+0x2c0>)
 8009182:	7813      	ldrb	r3, [r2, #0]
 8009184:	f043 0302 	orr.w	r3, r3, #2
 8009188:	7013      	strb	r3, [r2, #0]
        break;
 800918a:	e0c2      	b.n	8009312 <process_control_request+0x31a>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 800918c:	4b4a      	ldr	r3, [pc, #296]	@ (80092b8 <process_control_request+0x2c0>)
 800918e:	785b      	ldrb	r3, [r3, #1]
 8009190:	b2db      	uxtb	r3, r3
 8009192:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8009194:	f107 0213 	add.w	r2, r7, #19
 8009198:	79f8      	ldrb	r0, [r7, #7]
 800919a:	2301      	movs	r3, #1
 800919c:	6839      	ldr	r1, [r7, #0]
 800919e:	f001 f931 	bl	800a404 <tud_control_xfer>
        }
        break;
 80091a2:	e0b6      	b.n	8009312 <process_control_request+0x31a>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	885b      	ldrh	r3, [r3, #2]
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 80091ae:	4b42      	ldr	r3, [pc, #264]	@ (80092b8 <process_control_request+0x2c0>)
 80091b0:	785b      	ldrb	r3, [r3, #1]
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d041      	beq.n	8009240 <process_control_request+0x248>
            if ( _usbd_dev.cfg_num ) {
 80091bc:	4b3e      	ldr	r3, [pc, #248]	@ (80092b8 <process_control_request+0x2c0>)
 80091be:	785b      	ldrb	r3, [r3, #1]
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d014      	beq.n	80091f0 <process_control_request+0x1f8>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 80091c6:	79fb      	ldrb	r3, [r7, #7]
 80091c8:	2100      	movs	r1, #0
 80091ca:	4618      	mov	r0, r3
 80091cc:	f002 f832 	bl	800b234 <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 80091d0:	79fb      	ldrb	r3, [r7, #7]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f002 f896 	bl	800b304 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 80091d8:	4b37      	ldr	r3, [pc, #220]	@ (80092b8 <process_control_request+0x2c0>)
 80091da:	789b      	ldrb	r3, [r3, #2]
 80091dc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 80091e0:	79fb      	ldrb	r3, [r7, #7]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7ff fcd6 	bl	8008b94 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 80091e8:	4a33      	ldr	r2, [pc, #204]	@ (80092b8 <process_control_request+0x2c0>)
 80091ea:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80091ee:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 80091f0:	4a31      	ldr	r2, [pc, #196]	@ (80092b8 <process_control_request+0x2c0>)
 80091f2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80091f6:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 80091f8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d01d      	beq.n	800923c <process_control_request+0x244>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 8009200:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8009204:	79fb      	ldrb	r3, [r7, #7]
 8009206:	4611      	mov	r1, r2
 8009208:	4618      	mov	r0, r3
 800920a:	f000 f9d5 	bl	80095b8 <process_set_config>
 800920e:	4603      	mov	r3, r0
 8009210:	f083 0301 	eor.w	r3, r3, #1
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00d      	beq.n	8009236 <process_control_request+0x23e>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 800921a:	4b25      	ldr	r3, [pc, #148]	@ (80092b0 <process_control_request+0x2b8>)
 800921c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800921e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b00      	cmp	r3, #0
 8009228:	d000      	beq.n	800922c <process_control_request+0x234>
 800922a:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 800922c:	4b22      	ldr	r3, [pc, #136]	@ (80092b8 <process_control_request+0x2c0>)
 800922e:	2200      	movs	r2, #0
 8009230:	705a      	strb	r2, [r3, #1]
                return false;
 8009232:	2300      	movs	r3, #0
 8009234:	e1b7      	b.n	80095a6 <process_control_request+0x5ae>
              }
              tud_mount_cb();
 8009236:	f7ff fb4f 	bl	80088d8 <tud_mount_cb>
 800923a:	e001      	b.n	8009240 <process_control_request+0x248>
            } else {
              tud_umount_cb();
 800923c:	f7ff fb53 	bl	80088e6 <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 8009240:	79fb      	ldrb	r3, [r7, #7]
 8009242:	6839      	ldr	r1, [r7, #0]
 8009244:	4618      	mov	r0, r3
 8009246:	f001 f86b 	bl	800a320 <tud_control_status>
        }
        break;
 800924a:	e062      	b.n	8009312 <process_control_request+0x31a>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 800924c:	79fb      	ldrb	r3, [r7, #7]
 800924e:	6839      	ldr	r1, [r7, #0]
 8009250:	4618      	mov	r0, r3
 8009252:	f000 fae5 	bl	8009820 <process_get_descriptor>
 8009256:	4603      	mov	r3, r0
 8009258:	f083 0301 	eor.w	r3, r3, #1
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d056      	beq.n	8009310 <process_control_request+0x318>
 8009262:	2300      	movs	r3, #0
 8009264:	e19f      	b.n	80095a6 <process_control_request+0x5ae>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	885b      	ldrh	r3, [r3, #2]
 800926a:	b29b      	uxth	r3, r3
 800926c:	2b01      	cmp	r3, #1
 800926e:	d10b      	bne.n	8009288 <process_control_request+0x290>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 8009270:	4a11      	ldr	r2, [pc, #68]	@ (80092b8 <process_control_request+0x2c0>)
 8009272:	7813      	ldrb	r3, [r2, #0]
 8009274:	f043 0308 	orr.w	r3, r3, #8
 8009278:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 800927a:	79fb      	ldrb	r3, [r7, #7]
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	4618      	mov	r0, r3
 8009280:	f001 f84e 	bl	800a320 <tud_control_status>
            break;
 8009284:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 8009286:	e044      	b.n	8009312 <process_control_request+0x31a>
            default: return false;
 8009288:	2300      	movs	r3, #0
 800928a:	e18c      	b.n	80095a6 <process_control_request+0x5ae>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	885b      	ldrh	r3, [r3, #2]
 8009290:	b29b      	uxth	r3, r3
 8009292:	2b01      	cmp	r3, #1
 8009294:	d001      	beq.n	800929a <process_control_request+0x2a2>
 8009296:	2300      	movs	r3, #0
 8009298:	e185      	b.n	80095a6 <process_control_request+0x5ae>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 800929a:	4a07      	ldr	r2, [pc, #28]	@ (80092b8 <process_control_request+0x2c0>)
 800929c:	7813      	ldrb	r3, [r2, #0]
 800929e:	f023 0308 	bic.w	r3, r3, #8
 80092a2:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 80092a4:	79fb      	ldrb	r3, [r7, #7]
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f001 f839 	bl	800a320 <tud_control_status>
        break;
 80092ae:	e030      	b.n	8009312 <process_control_request+0x31a>
 80092b0:	e000edf0 	.word	0xe000edf0
 80092b4:	08008919 	.word	0x08008919
 80092b8:	20001714 	.word	0x20001714
 80092bc:	20001748 	.word	0x20001748
 80092c0:	20001744 	.word	0x20001744
 80092c4:	0800efa4 	.word	0x0800efa4

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 80092c8:	4b94      	ldr	r3, [pc, #592]	@ (800951c <process_control_request+0x524>)
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	095b      	lsrs	r3, r3, #5
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	f003 0301 	and.w	r3, r3, #1
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	4b91      	ldr	r3, [pc, #580]	@ (800951c <process_control_request+0x524>)
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	089b      	lsrs	r3, r3, #2
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	f003 0302 	and.w	r3, r3, #2
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	4313      	orrs	r3, r2
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 80092ea:	f107 0210 	add.w	r2, r7, #16
 80092ee:	79f8      	ldrb	r0, [r7, #7]
 80092f0:	2302      	movs	r3, #2
 80092f2:	6839      	ldr	r1, [r7, #0]
 80092f4:	f001 f886 	bl	800a404 <tud_control_xfer>
          break;
 80092f8:	e00b      	b.n	8009312 <process_control_request+0x31a>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 80092fa:	4b89      	ldr	r3, [pc, #548]	@ (8009520 <process_control_request+0x528>)
 80092fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80092fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b00      	cmp	r3, #0
 8009308:	d000      	beq.n	800930c <process_control_request+0x314>
 800930a:	be00      	bkpt	0x0000
 800930c:	2300      	movs	r3, #0
 800930e:	e14a      	b.n	80095a6 <process_control_request+0x5ae>
        break;
 8009310:	bf00      	nop
      }
    break;
 8009312:	e147      	b.n	80095a4 <process_control_request+0x5ac>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	889b      	ldrh	r3, [r3, #4]
 8009318:	b29b      	uxth	r3, r3
 800931a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800931c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800931e:	b2db      	uxtb	r3, r3
 8009320:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8009324:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009328:	2b0f      	cmp	r3, #15
 800932a:	d901      	bls.n	8009330 <process_control_request+0x338>
 800932c:	2300      	movs	r3, #0
 800932e:	e13a      	b.n	80095a6 <process_control_request+0x5ae>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8009330:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009334:	4a79      	ldr	r2, [pc, #484]	@ (800951c <process_control_request+0x524>)
 8009336:	4413      	add	r3, r2
 8009338:	791b      	ldrb	r3, [r3, #4]
 800933a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 800933e:	2300      	movs	r3, #0
 8009340:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8009342:	4b78      	ldr	r3, [pc, #480]	@ (8009524 <process_control_request+0x52c>)
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800934a:	429a      	cmp	r2, r3
 800934c:	d207      	bcs.n	800935e <process_control_request+0x366>
    driver = &_app_driver[drvid];
 800934e:	4b76      	ldr	r3, [pc, #472]	@ (8009528 <process_control_request+0x530>)
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009356:	015b      	lsls	r3, r3, #5
 8009358:	4413      	add	r3, r2
 800935a:	623b      	str	r3, [r7, #32]
 800935c:	e00f      	b.n	800937e <process_control_request+0x386>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800935e:	4b71      	ldr	r3, [pc, #452]	@ (8009524 <process_control_request+0x52c>)
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009368:	429a      	cmp	r2, r3
 800936a:	db08      	blt.n	800937e <process_control_request+0x386>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800936c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009370:	4a6c      	ldr	r2, [pc, #432]	@ (8009524 <process_control_request+0x52c>)
 8009372:	7812      	ldrb	r2, [r2, #0]
 8009374:	1a9b      	subs	r3, r3, r2
 8009376:	015b      	lsls	r3, r3, #5
 8009378:	4a6c      	ldr	r2, [pc, #432]	@ (800952c <process_control_request+0x534>)
 800937a:	4413      	add	r3, r2
 800937c:	623b      	str	r3, [r7, #32]
  return driver;
 800937e:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8009380:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 8009382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009384:	2b00      	cmp	r3, #0
 8009386:	d101      	bne.n	800938c <process_control_request+0x394>
 8009388:	2300      	movs	r3, #0
 800938a:	e10c      	b.n	80095a6 <process_control_request+0x5ae>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 800938c:	79fb      	ldrb	r3, [r7, #7]
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009392:	4618      	mov	r0, r3
 8009394:	f7ff fe18 	bl	8008fc8 <invoke_class_control>
 8009398:	4603      	mov	r3, r0
 800939a:	f083 0301 	eor.w	r3, r3, #1
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 80fe 	beq.w	80095a2 <process_control_request+0x5aa>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <process_control_request+0x3c0>
 80093b4:	2300      	movs	r3, #0
 80093b6:	e0f6      	b.n	80095a6 <process_control_request+0x5ae>

        switch(p_request->bRequest) {
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	785b      	ldrb	r3, [r3, #1]
 80093bc:	3b0a      	subs	r3, #10
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d816      	bhi.n	80093f0 <process_control_request+0x3f8>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 80093c2:	2000      	movs	r0, #0
 80093c4:	f001 f89a 	bl	800a4fc <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	785b      	ldrb	r3, [r3, #1]
 80093cc:	2b0a      	cmp	r3, #10
 80093ce:	d109      	bne.n	80093e4 <process_control_request+0x3ec>
              uint8_t alternate = 0;
 80093d0:	2300      	movs	r3, #0
 80093d2:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 80093d4:	f107 020f 	add.w	r2, r7, #15
 80093d8:	79f8      	ldrb	r0, [r7, #7]
 80093da:	2301      	movs	r3, #1
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	f001 f811 	bl	800a404 <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 80093e2:	e007      	b.n	80093f4 <process_control_request+0x3fc>
              tud_control_status(rhport, p_request);
 80093e4:	79fb      	ldrb	r3, [r7, #7]
 80093e6:	6839      	ldr	r1, [r7, #0]
 80093e8:	4618      	mov	r0, r3
 80093ea:	f000 ff99 	bl	800a320 <tud_control_status>
          break;
 80093ee:	e001      	b.n	80093f4 <process_control_request+0x3fc>

          default: return false;
 80093f0:	2300      	movs	r3, #0
 80093f2:	e0d8      	b.n	80095a6 <process_control_request+0x5ae>
        }
      }
      break;
 80093f4:	e0d5      	b.n	80095a2 <process_control_request+0x5aa>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	889b      	ldrh	r3, [r3, #4]
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	83bb      	strh	r3, [r7, #28]
 80093fe:	8bbb      	ldrh	r3, [r7, #28]
 8009400:	b2db      	uxtb	r3, r3
 8009402:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009406:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800940a:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800940c:	7fbb      	ldrb	r3, [r7, #30]
 800940e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009412:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8009414:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8009418:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800941c:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800941e:	7ffb      	ldrb	r3, [r7, #31]
 8009420:	09db      	lsrs	r3, r3, #7
 8009422:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8009424:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8009428:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800942c:	2b05      	cmp	r3, #5
 800942e:	d90a      	bls.n	8009446 <process_control_request+0x44e>
 8009430:	4b3b      	ldr	r3, [pc, #236]	@ (8009520 <process_control_request+0x528>)
 8009432:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009434:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 0301 	and.w	r3, r3, #1
 800943c:	2b00      	cmp	r3, #0
 800943e:	d000      	beq.n	8009442 <process_control_request+0x44a>
 8009440:	be00      	bkpt	0x0000
 8009442:	2300      	movs	r3, #0
 8009444:	e0af      	b.n	80095a6 <process_control_request+0x5ae>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8009446:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 800944a:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 800944e:	4933      	ldr	r1, [pc, #204]	@ (800951c <process_control_request+0x524>)
 8009450:	0052      	lsls	r2, r2, #1
 8009452:	440a      	add	r2, r1
 8009454:	4413      	add	r3, r2
 8009456:	3314      	adds	r3, #20
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 800945c:	2300      	movs	r3, #0
 800945e:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 8009460:	4b30      	ldr	r3, [pc, #192]	@ (8009524 <process_control_request+0x52c>)
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	7efa      	ldrb	r2, [r7, #27]
 8009466:	429a      	cmp	r2, r3
 8009468:	d206      	bcs.n	8009478 <process_control_request+0x480>
    driver = &_app_driver[drvid];
 800946a:	4b2f      	ldr	r3, [pc, #188]	@ (8009528 <process_control_request+0x530>)
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	7efb      	ldrb	r3, [r7, #27]
 8009470:	015b      	lsls	r3, r3, #5
 8009472:	4413      	add	r3, r2
 8009474:	617b      	str	r3, [r7, #20]
 8009476:	e00d      	b.n	8009494 <process_control_request+0x49c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009478:	4b2a      	ldr	r3, [pc, #168]	@ (8009524 <process_control_request+0x52c>)
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	1c5a      	adds	r2, r3, #1
 800947e:	7efb      	ldrb	r3, [r7, #27]
 8009480:	429a      	cmp	r2, r3
 8009482:	db07      	blt.n	8009494 <process_control_request+0x49c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8009484:	7efb      	ldrb	r3, [r7, #27]
 8009486:	4a27      	ldr	r2, [pc, #156]	@ (8009524 <process_control_request+0x52c>)
 8009488:	7812      	ldrb	r2, [r2, #0]
 800948a:	1a9b      	subs	r3, r3, r2
 800948c:	015b      	lsls	r3, r3, #5
 800948e:	4a27      	ldr	r2, [pc, #156]	@ (800952c <process_control_request+0x534>)
 8009490:	4413      	add	r3, r2
 8009492:	617b      	str	r3, [r7, #20]
  return driver;
 8009494:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8009496:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00c      	beq.n	80094c0 <process_control_request+0x4c8>
        // Forward class request to its driver
        TU_VERIFY(driver);
 80094a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <process_control_request+0x4b8>
 80094ac:	2300      	movs	r3, #0
 80094ae:	e07a      	b.n	80095a6 <process_control_request+0x5ae>
        return invoke_class_control(rhport, driver, p_request);
 80094b0:	79fb      	ldrb	r3, [r7, #7]
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7ff fd86 	bl	8008fc8 <invoke_class_control>
 80094bc:	4603      	mov	r3, r0
 80094be:	e072      	b.n	80095a6 <process_control_request+0x5ae>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	785b      	ldrb	r3, [r3, #1]
 80094c4:	2b03      	cmp	r3, #3
 80094c6:	d017      	beq.n	80094f8 <process_control_request+0x500>
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	dc52      	bgt.n	8009572 <process_control_request+0x57a>
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d002      	beq.n	80094d6 <process_control_request+0x4de>
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d011      	beq.n	80094f8 <process_control_request+0x500>
 80094d4:	e04d      	b.n	8009572 <process_control_request+0x57a>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 80094d6:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80094da:	79fb      	ldrb	r3, [r7, #7]
 80094dc:	4611      	mov	r1, r2
 80094de:	4618      	mov	r0, r3
 80094e0:	f000 fec8 	bl	800a274 <usbd_edpt_stalled>
 80094e4:	4603      	mov	r3, r0
 80094e6:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 80094e8:	f107 020c 	add.w	r2, r7, #12
 80094ec:	79f8      	ldrb	r0, [r7, #7]
 80094ee:	2302      	movs	r3, #2
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	f000 ff87 	bl	800a404 <tud_control_xfer>
          }
          break;
 80094f6:	e048      	b.n	800958a <process_control_request+0x592>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	885b      	ldrh	r3, [r3, #2]
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d11d      	bne.n	800953e <process_control_request+0x546>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	785b      	ldrb	r3, [r3, #1]
 8009506:	2b01      	cmp	r3, #1
 8009508:	d112      	bne.n	8009530 <process_control_request+0x538>
                usbd_edpt_clear_stall(rhport, ep_addr);
 800950a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800950e:	79fb      	ldrb	r3, [r7, #7]
 8009510:	4611      	mov	r1, r2
 8009512:	4618      	mov	r0, r3
 8009514:	f000 fe70 	bl	800a1f8 <usbd_edpt_clear_stall>
 8009518:	e011      	b.n	800953e <process_control_request+0x546>
 800951a:	bf00      	nop
 800951c:	20001714 	.word	0x20001714
 8009520:	e000edf0 	.word	0xe000edf0
 8009524:	20001748 	.word	0x20001748
 8009528:	20001744 	.word	0x20001744
 800952c:	0800efa4 	.word	0x0800efa4
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 8009530:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8009534:	79fb      	ldrb	r3, [r7, #7]
 8009536:	4611      	mov	r1, r2
 8009538:	4618      	mov	r0, r3
 800953a:	f000 fe1f 	bl	800a17c <usbd_edpt_stall>
              }
            }

            if (driver) {
 800953e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009540:	2b00      	cmp	r3, #0
 8009542:	d021      	beq.n	8009588 <process_control_request+0x590>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8009544:	79fb      	ldrb	r3, [r7, #7]
 8009546:	683a      	ldr	r2, [r7, #0]
 8009548:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800954a:	4618      	mov	r0, r3
 800954c:	f7ff fd3c 	bl	8008fc8 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8009550:	2000      	movs	r0, #0
 8009552:	f000 ffd3 	bl	800a4fc <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8009556:	4b16      	ldr	r3, [pc, #88]	@ (80095b0 <process_control_request+0x5b8>)
 8009558:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800955c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009560:	b2db      	uxtb	r3, r3
 8009562:	2b00      	cmp	r3, #0
 8009564:	d110      	bne.n	8009588 <process_control_request+0x590>
 8009566:	79fb      	ldrb	r3, [r7, #7]
 8009568:	6839      	ldr	r1, [r7, #0]
 800956a:	4618      	mov	r0, r3
 800956c:	f000 fed8 	bl	800a320 <tud_control_status>
            }
          }
          break;
 8009570:	e00a      	b.n	8009588 <process_control_request+0x590>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 8009572:	4b10      	ldr	r3, [pc, #64]	@ (80095b4 <process_control_request+0x5bc>)
 8009574:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009576:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	2b00      	cmp	r3, #0
 8009580:	d000      	beq.n	8009584 <process_control_request+0x58c>
 8009582:	be00      	bkpt	0x0000
            return false;
 8009584:	2300      	movs	r3, #0
 8009586:	e00e      	b.n	80095a6 <process_control_request+0x5ae>
          break;
 8009588:	bf00      	nop
        }
      }
    }
    break;
 800958a:	e00b      	b.n	80095a4 <process_control_request+0x5ac>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 800958c:	4b09      	ldr	r3, [pc, #36]	@ (80095b4 <process_control_request+0x5bc>)
 800958e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f003 0301 	and.w	r3, r3, #1
 8009598:	2b00      	cmp	r3, #0
 800959a:	d000      	beq.n	800959e <process_control_request+0x5a6>
 800959c:	be00      	bkpt	0x0000
      return false;
 800959e:	2300      	movs	r3, #0
 80095a0:	e001      	b.n	80095a6 <process_control_request+0x5ae>
      break;
 80095a2:	bf00      	nop
  }

  return true;
 80095a4:	2301      	movs	r3, #1
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3768      	adds	r7, #104	@ 0x68
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	20001714 	.word	0x20001714
 80095b4:	e000edf0 	.word	0xe000edf0

080095b8 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b096      	sub	sp, #88	@ 0x58
 80095bc:	af00      	add	r7, sp, #0
 80095be:	4603      	mov	r3, r0
 80095c0:	460a      	mov	r2, r1
 80095c2:	71fb      	strb	r3, [r7, #7]
 80095c4:	4613      	mov	r3, r2
 80095c6:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 80095c8:	79bb      	ldrb	r3, [r7, #6]
 80095ca:	3b01      	subs	r3, #1
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fa fa88 	bl	8003ae4 <tud_descriptor_configuration_cb>
 80095d4:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 80095d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d003      	beq.n	80095e4 <process_set_config+0x2c>
 80095dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095de:	785b      	ldrb	r3, [r3, #1]
 80095e0:	2b02      	cmp	r3, #2
 80095e2:	d00a      	beq.n	80095fa <process_set_config+0x42>
 80095e4:	4b87      	ldr	r3, [pc, #540]	@ (8009804 <process_set_config+0x24c>)
 80095e6:	623b      	str	r3, [r7, #32]
 80095e8:	6a3b      	ldr	r3, [r7, #32]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f003 0301 	and.w	r3, r3, #1
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d000      	beq.n	80095f6 <process_set_config+0x3e>
 80095f4:	be00      	bkpt	0x0000
 80095f6:	2300      	movs	r3, #0
 80095f8:	e100      	b.n	80097fc <process_set_config+0x244>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 80095fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095fc:	79db      	ldrb	r3, [r3, #7]
 80095fe:	115b      	asrs	r3, r3, #5
 8009600:	f003 0301 	and.w	r3, r3, #1
 8009604:	b2d9      	uxtb	r1, r3
 8009606:	4a80      	ldr	r2, [pc, #512]	@ (8009808 <process_set_config+0x250>)
 8009608:	7813      	ldrb	r3, [r2, #0]
 800960a:	f361 1304 	bfi	r3, r1, #4, #1
 800960e:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8009610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009612:	79db      	ldrb	r3, [r3, #7]
 8009614:	119b      	asrs	r3, r3, #6
 8009616:	f003 0301 	and.w	r3, r3, #1
 800961a:	b2d9      	uxtb	r1, r3
 800961c:	4a7a      	ldr	r2, [pc, #488]	@ (8009808 <process_set_config+0x250>)
 800961e:	7813      	ldrb	r3, [r2, #0]
 8009620:	f361 1345 	bfi	r3, r1, #5, #1
 8009624:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8009626:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009628:	3309      	adds	r3, #9
 800962a:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 800962c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800962e:	885b      	ldrh	r3, [r3, #2]
 8009630:	b29b      	uxth	r3, r3
 8009632:	461a      	mov	r2, r3
 8009634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009636:	4413      	add	r3, r2
 8009638:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 800963a:	e0d9      	b.n	80097f0 <process_set_config+0x238>
  {
    uint8_t assoc_itf_count = 1;
 800963c:	2301      	movs	r3, #1
 800963e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8009642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009644:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	3301      	adds	r3, #1
 800964a:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 800964c:	2b0b      	cmp	r3, #11
 800964e:	d10f      	bne.n	8009670 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8009650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009652:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 8009654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009656:	78db      	ldrb	r3, [r3, #3]
 8009658:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800965c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800965e:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	461a      	mov	r2, r3
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 800966e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009672:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	3301      	adds	r3, #1
 8009678:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 800967a:	2b04      	cmp	r3, #4
 800967c:	d00a      	beq.n	8009694 <process_set_config+0xdc>
 800967e:	4b61      	ldr	r3, [pc, #388]	@ (8009804 <process_set_config+0x24c>)
 8009680:	627b      	str	r3, [r7, #36]	@ 0x24
 8009682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 0301 	and.w	r3, r3, #1
 800968a:	2b00      	cmp	r3, #0
 800968c:	d000      	beq.n	8009690 <process_set_config+0xd8>
 800968e:	be00      	bkpt	0x0000
 8009690:	2300      	movs	r3, #0
 8009692:	e0b3      	b.n	80097fc <process_set_config+0x244>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8009694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009696:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8009698:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800969a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80096a0:	2300      	movs	r3, #0
 80096a2:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 80096a6:	e089      	b.n	80097bc <process_set_config+0x204>
 80096a8:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80096ac:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 80096ae:	2300      	movs	r3, #0
 80096b0:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 80096b2:	4b56      	ldr	r3, [pc, #344]	@ (800980c <process_set_config+0x254>)
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	7bfa      	ldrb	r2, [r7, #15]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d206      	bcs.n	80096ca <process_set_config+0x112>
    driver = &_app_driver[drvid];
 80096bc:	4b54      	ldr	r3, [pc, #336]	@ (8009810 <process_set_config+0x258>)
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	7bfb      	ldrb	r3, [r7, #15]
 80096c2:	015b      	lsls	r3, r3, #5
 80096c4:	4413      	add	r3, r2
 80096c6:	60bb      	str	r3, [r7, #8]
 80096c8:	e00d      	b.n	80096e6 <process_set_config+0x12e>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80096ca:	4b50      	ldr	r3, [pc, #320]	@ (800980c <process_set_config+0x254>)
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	1c5a      	adds	r2, r3, #1
 80096d0:	7bfb      	ldrb	r3, [r7, #15]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	db07      	blt.n	80096e6 <process_set_config+0x12e>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80096d6:	7bfb      	ldrb	r3, [r7, #15]
 80096d8:	4a4c      	ldr	r2, [pc, #304]	@ (800980c <process_set_config+0x254>)
 80096da:	7812      	ldrb	r2, [r2, #0]
 80096dc:	1a9b      	subs	r3, r3, r2
 80096de:	015b      	lsls	r3, r3, #5
 80096e0:	4a4c      	ldr	r2, [pc, #304]	@ (8009814 <process_set_config+0x25c>)
 80096e2:	4413      	add	r3, r2
 80096e4:	60bb      	str	r3, [r7, #8]
  return driver;
 80096e6:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 80096e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 80096ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d10a      	bne.n	8009706 <process_set_config+0x14e>
 80096f0:	4b44      	ldr	r3, [pc, #272]	@ (8009804 <process_set_config+0x24c>)
 80096f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0301 	and.w	r3, r3, #1
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d000      	beq.n	8009702 <process_set_config+0x14a>
 8009700:	be00      	bkpt	0x0000
 8009702:	2300      	movs	r3, #0
 8009704:	e07a      	b.n	80097fc <process_set_config+0x244>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8009706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800970c:	79f8      	ldrb	r0, [r7, #7]
 800970e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009710:	4798      	blx	r3
 8009712:	4603      	mov	r3, r0
 8009714:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8009716:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009718:	2b08      	cmp	r3, #8
 800971a:	d94a      	bls.n	80097b2 <process_set_config+0x1fa>
 800971c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800971e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009720:	429a      	cmp	r2, r3
 8009722:	d846      	bhi.n	80097b2 <process_set_config+0x1fa>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 8009724:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8009728:	2b01      	cmp	r3, #1
 800972a:	d107      	bne.n	800973c <process_set_config+0x184>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 800972c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	4a39      	ldr	r2, [pc, #228]	@ (8009818 <process_set_config+0x260>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d102      	bne.n	800973c <process_set_config+0x184>
 8009736:	2302      	movs	r3, #2
 8009738:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 800973c:	2300      	movs	r3, #0
 800973e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8009742:	e024      	b.n	800978e <process_set_config+0x1d6>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8009744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009746:	789a      	ldrb	r2, [r3, #2]
 8009748:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800974c:	4413      	add	r3, r2
 800974e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8009752:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009756:	4a2c      	ldr	r2, [pc, #176]	@ (8009808 <process_set_config+0x250>)
 8009758:	4413      	add	r3, r2
 800975a:	791b      	ldrb	r3, [r3, #4]
 800975c:	2bff      	cmp	r3, #255	@ 0xff
 800975e:	d00a      	beq.n	8009776 <process_set_config+0x1be>
 8009760:	4b28      	ldr	r3, [pc, #160]	@ (8009804 <process_set_config+0x24c>)
 8009762:	633b      	str	r3, [r7, #48]	@ 0x30
 8009764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 0301 	and.w	r3, r3, #1
 800976c:	2b00      	cmp	r3, #0
 800976e:	d000      	beq.n	8009772 <process_set_config+0x1ba>
 8009770:	be00      	bkpt	0x0000
 8009772:	2300      	movs	r3, #0
 8009774:	e042      	b.n	80097fc <process_set_config+0x244>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8009776:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800977a:	4a23      	ldr	r2, [pc, #140]	@ (8009808 <process_set_config+0x250>)
 800977c:	4413      	add	r3, r2
 800977e:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8009782:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8009784:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8009788:	3301      	adds	r3, #1
 800978a:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 800978e:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8009792:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8009796:	429a      	cmp	r2, r3
 8009798:	d3d4      	bcc.n	8009744 <process_set_config+0x18c>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 800979a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800979e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80097a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80097a2:	481e      	ldr	r0, [pc, #120]	@ (800981c <process_set_config+0x264>)
 80097a4:	f003 f81c 	bl	800c7e0 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 80097a8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80097aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80097ac:	4413      	add	r3, r2
 80097ae:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 80097b0:	e00c      	b.n	80097cc <process_set_config+0x214>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80097b2:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80097b6:	3301      	adds	r3, #1
 80097b8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 80097bc:	4b13      	ldr	r3, [pc, #76]	@ (800980c <process_set_config+0x254>)
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	1c5a      	adds	r2, r3, #1
 80097c2:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80097c6:	429a      	cmp	r2, r3
 80097c8:	f6bf af6e 	bge.w	80096a8 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 80097cc:	4b0f      	ldr	r3, [pc, #60]	@ (800980c <process_set_config+0x254>)
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	1c5a      	adds	r2, r3, #1
 80097d2:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80097d6:	429a      	cmp	r2, r3
 80097d8:	da0a      	bge.n	80097f0 <process_set_config+0x238>
 80097da:	4b0a      	ldr	r3, [pc, #40]	@ (8009804 <process_set_config+0x24c>)
 80097dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d000      	beq.n	80097ec <process_set_config+0x234>
 80097ea:	be00      	bkpt	0x0000
 80097ec:	2300      	movs	r3, #0
 80097ee:	e005      	b.n	80097fc <process_set_config+0x244>
  while( p_desc < desc_end )
 80097f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80097f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097f4:	429a      	cmp	r2, r3
 80097f6:	f4ff af21 	bcc.w	800963c <process_set_config+0x84>
  }

  return true;
 80097fa:	2301      	movs	r3, #1
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3758      	adds	r7, #88	@ 0x58
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	e000edf0 	.word	0xe000edf0
 8009808:	20001714 	.word	0x20001714
 800980c:	20001748 	.word	0x20001748
 8009810:	20001744 	.word	0x20001744
 8009814:	0800efa4 	.word	0x0800efa4
 8009818:	08006d4d 	.word	0x08006d4d
 800981c:	20001728 	.word	0x20001728

08009820 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b094      	sub	sp, #80	@ 0x50
 8009824:	af00      	add	r7, sp, #0
 8009826:	4603      	mov	r3, r0
 8009828:	6039      	str	r1, [r7, #0]
 800982a:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	885b      	ldrh	r3, [r3, #2]
 8009830:	b29b      	uxth	r3, r3
 8009832:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8009834:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009836:	0a1b      	lsrs	r3, r3, #8
 8009838:	b29b      	uxth	r3, r3
 800983a:	b2db      	uxtb	r3, r3
 800983c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	885b      	ldrh	r3, [r3, #2]
 8009844:	b29b      	uxth	r3, r3
 8009846:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8009848:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800984a:	b2db      	uxtb	r3, r3
 800984c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 8009850:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009854:	3b01      	subs	r3, #1
 8009856:	2b0e      	cmp	r3, #14
 8009858:	f200 80b4 	bhi.w	80099c4 <process_get_descriptor+0x1a4>
 800985c:	a201      	add	r2, pc, #4	@ (adr r2, 8009864 <process_get_descriptor+0x44>)
 800985e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009862:	bf00      	nop
 8009864:	080098a1 	.word	0x080098a1
 8009868:	08009905 	.word	0x08009905
 800986c:	0800996b 	.word	0x0800996b
 8009870:	080099c5 	.word	0x080099c5
 8009874:	080099c5 	.word	0x080099c5
 8009878:	0800999f 	.word	0x0800999f
 800987c:	08009905 	.word	0x08009905
 8009880:	080099c5 	.word	0x080099c5
 8009884:	080099c5 	.word	0x080099c5
 8009888:	080099c5 	.word	0x080099c5
 800988c:	080099c5 	.word	0x080099c5
 8009890:	080099c5 	.word	0x080099c5
 8009894:	080099c5 	.word	0x080099c5
 8009898:	080099c5 	.word	0x080099c5
 800989c:	080098d3 	.word	0x080098d3
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 80098a0:	f7fa f908 	bl	8003ab4 <tud_descriptor_device_cb>
 80098a4:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 80098a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d10a      	bne.n	80098c2 <process_get_descriptor+0xa2>
 80098ac:	4b48      	ldr	r3, [pc, #288]	@ (80099d0 <process_get_descriptor+0x1b0>)
 80098ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d000      	beq.n	80098be <process_get_descriptor+0x9e>
 80098bc:	be00      	bkpt	0x0000
 80098be:	2300      	movs	r3, #0
 80098c0:	e081      	b.n	80099c6 <process_get_descriptor+0x1a6>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 80098c2:	79f8      	ldrb	r0, [r7, #7]
 80098c4:	2312      	movs	r3, #18
 80098c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	f000 fd9b 	bl	800a404 <tud_control_xfer>
 80098ce:	4603      	mov	r3, r0
 80098d0:	e079      	b.n	80099c6 <process_get_descriptor+0x1a6>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 80098d2:	f7fe ffe5 	bl	80088a0 <tud_descriptor_bos_cb>
 80098d6:	4603      	mov	r3, r0
 80098d8:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 80098da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <process_get_descriptor+0xc4>
 80098e0:	2300      	movs	r3, #0
 80098e2:	e070      	b.n	80099c6 <process_get_descriptor+0x1a6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 80098e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098e6:	3302      	adds	r3, #2
 80098e8:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 80098ea:	6a3b      	ldr	r3, [r7, #32]
 80098ec:	881b      	ldrh	r3, [r3, #0]
 80098ee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 80098f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80098f8:	79f8      	ldrb	r0, [r7, #7]
 80098fa:	6839      	ldr	r1, [r7, #0]
 80098fc:	f000 fd82 	bl	800a404 <tud_control_xfer>
 8009900:	4603      	mov	r3, r0
 8009902:	e060      	b.n	80099c6 <process_get_descriptor+0x1a6>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 8009904:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009908:	2b02      	cmp	r3, #2
 800990a:	d114      	bne.n	8009936 <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 800990c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8009910:	4618      	mov	r0, r3
 8009912:	f7fa f8e7 	bl	8003ae4 <tud_descriptor_configuration_cb>
 8009916:	4603      	mov	r3, r0
 8009918:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 800991a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800991c:	2b00      	cmp	r3, #0
 800991e:	d116      	bne.n	800994e <process_get_descriptor+0x12e>
 8009920:	4b2b      	ldr	r3, [pc, #172]	@ (80099d0 <process_get_descriptor+0x1b0>)
 8009922:	637b      	str	r3, [r7, #52]	@ 0x34
 8009924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 0301 	and.w	r3, r3, #1
 800992c:	2b00      	cmp	r3, #0
 800992e:	d000      	beq.n	8009932 <process_get_descriptor+0x112>
 8009930:	be00      	bkpt	0x0000
 8009932:	2300      	movs	r3, #0
 8009934:	e047      	b.n	80099c6 <process_get_descriptor+0x1a6>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8009936:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800993a:	4618      	mov	r0, r3
 800993c:	f7fe ffc0 	bl	80088c0 <tud_descriptor_other_speed_configuration_cb>
 8009940:	4603      	mov	r3, r0
 8009942:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 8009944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009946:	2b00      	cmp	r3, #0
 8009948:	d101      	bne.n	800994e <process_get_descriptor+0x12e>
 800994a:	2300      	movs	r3, #0
 800994c:	e03b      	b.n	80099c6 <process_get_descriptor+0x1a6>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 800994e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009950:	3302      	adds	r3, #2
 8009952:	61fb      	str	r3, [r7, #28]
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	881b      	ldrh	r3, [r3, #0]
 8009958:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 800995a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800995c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800995e:	79f8      	ldrb	r0, [r7, #7]
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	f000 fd4f 	bl	800a404 <tud_control_xfer>
 8009966:	4603      	mov	r3, r0
 8009968:	e02d      	b.n	80099c6 <process_get_descriptor+0x1a6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	889b      	ldrh	r3, [r3, #4]
 800996e:	b29a      	uxth	r2, r3
 8009970:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8009974:	4611      	mov	r1, r2
 8009976:	4618      	mov	r0, r3
 8009978:	f7fa f8c2 	bl	8003b00 <tud_descriptor_string_cb>
 800997c:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 800997e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009980:	2b00      	cmp	r3, #0
 8009982:	d101      	bne.n	8009988 <process_get_descriptor+0x168>
 8009984:	2300      	movs	r3, #0
 8009986:	e01e      	b.n	80099c6 <process_get_descriptor+0x1a6>
 8009988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800998a:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8009990:	79f8      	ldrb	r0, [r7, #7]
 8009992:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009994:	6839      	ldr	r1, [r7, #0]
 8009996:	f000 fd35 	bl	800a404 <tud_control_xfer>
 800999a:	4603      	mov	r3, r0
 800999c:	e013      	b.n	80099c6 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 800999e:	f7fe ff87 	bl	80088b0 <tud_descriptor_device_qualifier_cb>
 80099a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 80099a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d101      	bne.n	80099ae <process_get_descriptor+0x18e>
 80099aa:	2300      	movs	r3, #0
 80099ac:	e00b      	b.n	80099c6 <process_get_descriptor+0x1a6>
 80099ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099b0:	617b      	str	r3, [r7, #20]
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 80099b6:	79f8      	ldrb	r0, [r7, #7]
 80099b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	f000 fd22 	bl	800a404 <tud_control_xfer>
 80099c0:	4603      	mov	r3, r0
 80099c2:	e000      	b.n	80099c6 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    default: return false;
 80099c4:	2300      	movs	r3, #0
  }
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3750      	adds	r7, #80	@ 0x50
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	e000edf0 	.word	0xe000edf0

080099d4 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b0a0      	sub	sp, #128	@ 0x80
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	460b      	mov	r3, r1
 80099de:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 80099e0:	2300      	movs	r3, #0
 80099e2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	785b      	ldrb	r3, [r3, #1]
 80099ea:	3b02      	subs	r3, #2
 80099ec:	2b04      	cmp	r3, #4
 80099ee:	f200 8175 	bhi.w	8009cdc <dcd_event_handler+0x308>
 80099f2:	a201      	add	r2, pc, #4	@ (adr r2, 80099f8 <dcd_event_handler+0x24>)
 80099f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f8:	08009a0d 	.word	0x08009a0d
 80099fc:	08009a7d 	.word	0x08009a7d
 8009a00:	08009a39 	.word	0x08009a39
 8009a04:	08009a5b 	.word	0x08009a5b
 8009a08:	08009ca9 	.word	0x08009ca9
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8009a0c:	4aac      	ldr	r2, [pc, #688]	@ (8009cc0 <dcd_event_handler+0x2ec>)
 8009a0e:	7813      	ldrb	r3, [r2, #0]
 8009a10:	f023 0301 	bic.w	r3, r3, #1
 8009a14:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8009a16:	4aaa      	ldr	r2, [pc, #680]	@ (8009cc0 <dcd_event_handler+0x2ec>)
 8009a18:	7813      	ldrb	r3, [r2, #0]
 8009a1a:	f023 0302 	bic.w	r3, r3, #2
 8009a1e:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8009a20:	4ba7      	ldr	r3, [pc, #668]	@ (8009cc0 <dcd_event_handler+0x2ec>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8009a26:	4aa6      	ldr	r2, [pc, #664]	@ (8009cc0 <dcd_event_handler+0x2ec>)
 8009a28:	7813      	ldrb	r3, [r2, #0]
 8009a2a:	f023 0304 	bic.w	r3, r3, #4
 8009a2e:	7013      	strb	r3, [r2, #0]
      send = true;
 8009a30:	2301      	movs	r3, #1
 8009a32:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8009a36:	e15a      	b.n	8009cee <dcd_event_handler+0x31a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8009a38:	4ba1      	ldr	r3, [pc, #644]	@ (8009cc0 <dcd_event_handler+0x2ec>)
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f000 814e 	beq.w	8009ce4 <dcd_event_handler+0x310>
        _usbd_dev.suspended = 1;
 8009a48:	4a9d      	ldr	r2, [pc, #628]	@ (8009cc0 <dcd_event_handler+0x2ec>)
 8009a4a:	7813      	ldrb	r3, [r2, #0]
 8009a4c:	f043 0304 	orr.w	r3, r3, #4
 8009a50:	7013      	strb	r3, [r2, #0]
        send = true;
 8009a52:	2301      	movs	r3, #1
 8009a54:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8009a58:	e144      	b.n	8009ce4 <dcd_event_handler+0x310>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8009a5a:	4b99      	ldr	r3, [pc, #612]	@ (8009cc0 <dcd_event_handler+0x2ec>)
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 813f 	beq.w	8009ce8 <dcd_event_handler+0x314>
        _usbd_dev.suspended = 0;
 8009a6a:	4a95      	ldr	r2, [pc, #596]	@ (8009cc0 <dcd_event_handler+0x2ec>)
 8009a6c:	7813      	ldrb	r3, [r2, #0]
 8009a6e:	f023 0304 	bic.w	r3, r3, #4
 8009a72:	7013      	strb	r3, [r2, #0]
        send = true;
 8009a74:	2301      	movs	r3, #1
 8009a76:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8009a7a:	e135      	b.n	8009ce8 <dcd_event_handler+0x314>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8009a82:	e039      	b.n	8009af8 <dcd_event_handler+0x124>
 8009a84:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8009a88:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 8009a90:	4b8c      	ldr	r3, [pc, #560]	@ (8009cc4 <dcd_event_handler+0x2f0>)
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d207      	bcs.n	8009aac <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 8009a9c:	4b8a      	ldr	r3, [pc, #552]	@ (8009cc8 <dcd_event_handler+0x2f4>)
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009aa4:	015b      	lsls	r3, r3, #5
 8009aa6:	4413      	add	r3, r2
 8009aa8:	673b      	str	r3, [r7, #112]	@ 0x70
 8009aaa:	e00f      	b.n	8009acc <dcd_event_handler+0xf8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009aac:	4b85      	ldr	r3, [pc, #532]	@ (8009cc4 <dcd_event_handler+0x2f0>)
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	1c5a      	adds	r2, r3, #1
 8009ab2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	db08      	blt.n	8009acc <dcd_event_handler+0xf8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8009aba:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009abe:	4a81      	ldr	r2, [pc, #516]	@ (8009cc4 <dcd_event_handler+0x2f0>)
 8009ac0:	7812      	ldrb	r2, [r2, #0]
 8009ac2:	1a9b      	subs	r3, r3, r2
 8009ac4:	015b      	lsls	r3, r3, #5
 8009ac6:	4a81      	ldr	r2, [pc, #516]	@ (8009ccc <dcd_event_handler+0x2f8>)
 8009ac8:	4413      	add	r3, r2
 8009aca:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 8009acc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 8009ace:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 8009ad0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00b      	beq.n	8009aee <dcd_event_handler+0x11a>
 8009ad6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ad8:	69db      	ldr	r3, [r3, #28]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d007      	beq.n	8009aee <dcd_event_handler+0x11a>
          driver->sof(event->rhport, event->sof.frame_count);
 8009ade:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ae0:	69db      	ldr	r3, [r3, #28]
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	7810      	ldrb	r0, [r2, #0]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	6852      	ldr	r2, [r2, #4]
 8009aea:	4611      	mov	r1, r2
 8009aec:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8009aee:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8009af2:	3301      	adds	r3, #1
 8009af4:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8009af8:	4b72      	ldr	r3, [pc, #456]	@ (8009cc4 <dcd_event_handler+0x2f0>)
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	1c5a      	adds	r2, r3, #1
 8009afe:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8009b02:	429a      	cmp	r2, r3
 8009b04:	dabe      	bge.n	8009a84 <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8009b06:	4b6e      	ldr	r3, [pc, #440]	@ (8009cc0 <dcd_event_handler+0x2ec>)
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d05a      	beq.n	8009bca <dcd_event_handler+0x1f6>
        _usbd_dev.suspended = 0;
 8009b14:	4a6a      	ldr	r2, [pc, #424]	@ (8009cc0 <dcd_event_handler+0x2ec>)
 8009b16:	7813      	ldrb	r3, [r2, #0]
 8009b18:	f023 0304 	bic.w	r3, r3, #4
 8009b1c:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8009b1e:	f107 0314 	add.w	r3, r7, #20
 8009b22:	2200      	movs	r2, #0
 8009b24:	601a      	str	r2, [r3, #0]
 8009b26:	605a      	str	r2, [r3, #4]
 8009b28:	609a      	str	r2, [r3, #8]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	753b      	strb	r3, [r7, #20]
 8009b30:	2305      	movs	r3, #5
 8009b32:	757b      	strb	r3, [r7, #21]
 8009b34:	f107 0314 	add.w	r3, r7, #20
 8009b38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009b3a:	78fb      	ldrb	r3, [r7, #3]
 8009b3c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009b40:	4b63      	ldr	r3, [pc, #396]	@ (8009cd0 <dcd_event_handler+0x2fc>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b48:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b4a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009b4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8009b52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b56:	f083 0301 	eor.w	r3, r3, #1
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d003      	beq.n	8009b68 <dcd_event_handler+0x194>
    qhdl->interrupt_set(false);
 8009b60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2000      	movs	r0, #0
 8009b66:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 8009b68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b6a:	3304      	adds	r3, #4
 8009b6c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7fe fde9 	bl	8008746 <tu_fifo_write>
 8009b74:	4603      	mov	r3, r0
 8009b76:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 8009b7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b7e:	f083 0301 	eor.w	r3, r3, #1
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d003      	beq.n	8009b90 <dcd_event_handler+0x1bc>
    qhdl->interrupt_set(true);
 8009b88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2001      	movs	r0, #1
 8009b8e:	4798      	blx	r3
  }

  return success;
 8009b90:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8009b94:	f083 0301 	eor.w	r3, r3, #1
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d009      	beq.n	8009bb2 <dcd_event_handler+0x1de>
 8009b9e:	4b4d      	ldr	r3, [pc, #308]	@ (8009cd4 <dcd_event_handler+0x300>)
 8009ba0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ba2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 0301 	and.w	r3, r3, #1
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00c      	beq.n	8009bc8 <dcd_event_handler+0x1f4>
 8009bae:	be00      	bkpt	0x0000
 8009bb0:	e00a      	b.n	8009bc8 <dcd_event_handler+0x1f4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8009bb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bb4:	7818      	ldrb	r0, [r3, #0]
 8009bb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bb8:	785b      	ldrb	r3, [r3, #1]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	f7fe fe55 	bl	8008870 <tud_event_hook_cb>
  return true;
 8009bc6:	e000      	b.n	8009bca <dcd_event_handler+0x1f6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009bc8:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8009bca:	4b3d      	ldr	r3, [pc, #244]	@ (8009cc0 <dcd_event_handler+0x2ec>)
 8009bcc:	78db      	ldrb	r3, [r3, #3]
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8009bd8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8009bdc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009bde:	fa22 f303 	lsr.w	r3, r2, r3
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	bf14      	ite	ne
 8009bea:	2301      	movne	r3, #1
 8009bec:	2300      	moveq	r3, #0
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d07b      	beq.n	8009cec <dcd_event_handler+0x318>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 8009bf4:	f107 0308 	add.w	r3, r7, #8
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	601a      	str	r2, [r3, #0]
 8009bfc:	605a      	str	r2, [r3, #4]
 8009bfe:	609a      	str	r2, [r3, #8]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	723b      	strb	r3, [r7, #8]
 8009c06:	2303      	movs	r3, #3
 8009c08:	727b      	strb	r3, [r7, #9]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	60fb      	str	r3, [r7, #12]
 8009c10:	f107 0308 	add.w	r3, r7, #8
 8009c14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c16:	78fb      	ldrb	r3, [r7, #3]
 8009c18:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8009cd0 <dcd_event_handler+0x2fc>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c24:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c26:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009c2a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 8009c2e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009c32:	f083 0301 	eor.w	r3, r3, #1
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d003      	beq.n	8009c44 <dcd_event_handler+0x270>
    qhdl->interrupt_set(false);
 8009c3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2000      	movs	r0, #0
 8009c42:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8009c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c46:	3304      	adds	r3, #4
 8009c48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fe fd7b 	bl	8008746 <tu_fifo_write>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 8009c56:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009c5a:	f083 0301 	eor.w	r3, r3, #1
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d003      	beq.n	8009c6c <dcd_event_handler+0x298>
    qhdl->interrupt_set(true);
 8009c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2001      	movs	r0, #1
 8009c6a:	4798      	blx	r3
  return success;
 8009c6c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009c70:	f083 0301 	eor.w	r3, r3, #1
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d009      	beq.n	8009c8e <dcd_event_handler+0x2ba>
 8009c7a:	4b16      	ldr	r3, [pc, #88]	@ (8009cd4 <dcd_event_handler+0x300>)
 8009c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f003 0301 	and.w	r3, r3, #1
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00c      	beq.n	8009ca4 <dcd_event_handler+0x2d0>
 8009c8a:	be00      	bkpt	0x0000
 8009c8c:	e00a      	b.n	8009ca4 <dcd_event_handler+0x2d0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8009c8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c90:	7818      	ldrb	r0, [r3, #0]
 8009c92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c94:	785b      	ldrb	r3, [r3, #1]
 8009c96:	4619      	mov	r1, r3
 8009c98:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	f7fe fde7 	bl	8008870 <tud_event_hook_cb>
  return true;
 8009ca2:	e000      	b.n	8009ca6 <dcd_event_handler+0x2d2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009ca4:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 8009ca6:	e021      	b.n	8009cec <dcd_event_handler+0x318>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 8009ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8009cd8 <dcd_event_handler+0x304>)
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	3301      	adds	r3, #1
 8009cb0:	b2da      	uxtb	r2, r3
 8009cb2:	4b09      	ldr	r3, [pc, #36]	@ (8009cd8 <dcd_event_handler+0x304>)
 8009cb4:	701a      	strb	r2, [r3, #0]
      send = true;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8009cbc:	e017      	b.n	8009cee <dcd_event_handler+0x31a>
 8009cbe:	bf00      	nop
 8009cc0:	20001714 	.word	0x20001714
 8009cc4:	20001748 	.word	0x20001748
 8009cc8:	20001744 	.word	0x20001744
 8009ccc:	0800efa4 	.word	0x0800efa4
 8009cd0:	2000180c 	.word	0x2000180c
 8009cd4:	e000edf0 	.word	0xe000edf0
 8009cd8:	20001740 	.word	0x20001740

    default:
      send = true;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8009ce2:	e004      	b.n	8009cee <dcd_event_handler+0x31a>
      break;
 8009ce4:	bf00      	nop
 8009ce6:	e002      	b.n	8009cee <dcd_event_handler+0x31a>
      break;
 8009ce8:	bf00      	nop
 8009cea:	e000      	b.n	8009cee <dcd_event_handler+0x31a>
      break;
 8009cec:	bf00      	nop
  }

  if (send) {
 8009cee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d049      	beq.n	8009d8a <dcd_event_handler+0x3b6>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cfa:	78fb      	ldrb	r3, [r7, #3]
 8009cfc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009d00:	4b24      	ldr	r3, [pc, #144]	@ (8009d94 <dcd_event_handler+0x3c0>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d0a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009d0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 8009d12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d16:	f083 0301 	eor.w	r3, r3, #1
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d003      	beq.n	8009d28 <dcd_event_handler+0x354>
    qhdl->interrupt_set(false);
 8009d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2000      	movs	r0, #0
 8009d26:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8009d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d2a:	3304      	adds	r3, #4
 8009d2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fe fd09 	bl	8008746 <tu_fifo_write>
 8009d34:	4603      	mov	r3, r0
 8009d36:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 8009d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d3e:	f083 0301 	eor.w	r3, r3, #1
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d003      	beq.n	8009d50 <dcd_event_handler+0x37c>
    qhdl->interrupt_set(true);
 8009d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2001      	movs	r0, #1
 8009d4e:	4798      	blx	r3
  return success;
 8009d50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009d54:	f083 0301 	eor.w	r3, r3, #1
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d009      	beq.n	8009d72 <dcd_event_handler+0x39e>
 8009d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8009d98 <dcd_event_handler+0x3c4>)
 8009d60:	623b      	str	r3, [r7, #32]
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f003 0301 	and.w	r3, r3, #1
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00c      	beq.n	8009d88 <dcd_event_handler+0x3b4>
 8009d6e:	be00      	bkpt	0x0000
 8009d70:	e00a      	b.n	8009d88 <dcd_event_handler+0x3b4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8009d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d74:	7818      	ldrb	r0, [r3, #0]
 8009d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d78:	785b      	ldrb	r3, [r3, #1]
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009d80:	461a      	mov	r2, r3
 8009d82:	f7fe fd75 	bl	8008870 <tud_event_hook_cb>
  return true;
 8009d86:	e000      	b.n	8009d8a <dcd_event_handler+0x3b6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009d88:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 8009d8a:	bf00      	nop
 8009d8c:	3780      	adds	r7, #128	@ 0x80
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	2000180c 	.word	0x2000180c
 8009d98:	e000edf0 	.word	0xe000edf0

08009d9c <usbd_int_set>:

//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled) {
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	4603      	mov	r3, r0
 8009da4:	71fb      	strb	r3, [r7, #7]
  if (enabled) {
 8009da6:	79fb      	ldrb	r3, [r7, #7]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d005      	beq.n	8009db8 <usbd_int_set+0x1c>
    dcd_int_enable(_usbd_rhport);
 8009dac:	4b07      	ldr	r3, [pc, #28]	@ (8009dcc <usbd_int_set+0x30>)
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	4618      	mov	r0, r3
 8009db2:	f001 f929 	bl	800b008 <dcd_int_enable>
  } else {
    dcd_int_disable(_usbd_rhport);
  }
}
 8009db6:	e004      	b.n	8009dc2 <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8009db8:	4b04      	ldr	r3, [pc, #16]	@ (8009dcc <usbd_int_set+0x30>)
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f001 f94b 	bl	800b058 <dcd_int_disable>
}
 8009dc2:	bf00      	nop
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	2000022d 	.word	0x2000022d

08009dd0 <usbd_spin_lock>:

void usbd_spin_lock(bool in_isr) {
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	71fb      	strb	r3, [r7, #7]
 8009dda:	4b09      	ldr	r3, [pc, #36]	@ (8009e00 <usbd_spin_lock+0x30>)
 8009ddc:	60fb      	str	r3, [r7, #12]
 8009dde:	79fb      	ldrb	r3, [r7, #7]
 8009de0:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 8009de2:	7afb      	ldrb	r3, [r7, #11]
 8009de4:	f083 0301 	eor.w	r3, r3, #1
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d003      	beq.n	8009df6 <usbd_spin_lock+0x26>
    ctx->interrupt_set(false);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2000      	movs	r0, #0
 8009df4:	4798      	blx	r3
}
 8009df6:	bf00      	nop
  osal_spin_lock(&_usbd_spin, in_isr);
}
 8009df8:	bf00      	nop
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	20000230 	.word	0x20000230

08009e04 <usbd_spin_unlock>:
void usbd_spin_unlock(bool in_isr) {
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	71fb      	strb	r3, [r7, #7]
 8009e0e:	4b09      	ldr	r3, [pc, #36]	@ (8009e34 <usbd_spin_unlock+0x30>)
 8009e10:	60fb      	str	r3, [r7, #12]
 8009e12:	79fb      	ldrb	r3, [r7, #7]
 8009e14:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 8009e16:	7afb      	ldrb	r3, [r7, #11]
 8009e18:	f083 0301 	eor.w	r3, r3, #1
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d003      	beq.n	8009e2a <usbd_spin_unlock+0x26>
    ctx->interrupt_set(true);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2001      	movs	r0, #1
 8009e28:	4798      	blx	r3
}
 8009e2a:	bf00      	nop
  osal_spin_unlock(&_usbd_spin, in_isr);
}
 8009e2c:	bf00      	nop
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	20000230 	.word	0x20000230

08009e38 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b08a      	sub	sp, #40	@ 0x28
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6039      	str	r1, [r7, #0]
 8009e40:	4611      	mov	r1, r2
 8009e42:	461a      	mov	r2, r3
 8009e44:	4603      	mov	r3, r0
 8009e46:	71fb      	strb	r3, [r7, #7]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	71bb      	strb	r3, [r7, #6]
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8009e50:	2300      	movs	r3, #0
 8009e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e54:	e04d      	b.n	8009ef2 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8009e5a:	6a3b      	ldr	r3, [r7, #32]
 8009e5c:	785b      	ldrb	r3, [r3, #1]
 8009e5e:	2b05      	cmp	r3, #5
 8009e60:	d108      	bne.n	8009e74 <usbd_open_edpt_pair+0x3c>
 8009e62:	6a3b      	ldr	r3, [r7, #32]
 8009e64:	78db      	ldrb	r3, [r3, #3]
 8009e66:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	797b      	ldrb	r3, [r7, #5]
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d00a      	beq.n	8009e8a <usbd_open_edpt_pair+0x52>
 8009e74:	4b23      	ldr	r3, [pc, #140]	@ (8009f04 <usbd_open_edpt_pair+0xcc>)
 8009e76:	61bb      	str	r3, [r7, #24]
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f003 0301 	and.w	r3, r3, #1
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d000      	beq.n	8009e86 <usbd_open_edpt_pair+0x4e>
 8009e84:	be00      	bkpt	0x0000
 8009e86:	2300      	movs	r3, #0
 8009e88:	e038      	b.n	8009efc <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8009e8a:	79fb      	ldrb	r3, [r7, #7]
 8009e8c:	6a39      	ldr	r1, [r7, #32]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 f83a 	bl	8009f08 <usbd_edpt_open>
 8009e94:	4603      	mov	r3, r0
 8009e96:	f083 0301 	eor.w	r3, r3, #1
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00a      	beq.n	8009eb6 <usbd_open_edpt_pair+0x7e>
 8009ea0:	4b18      	ldr	r3, [pc, #96]	@ (8009f04 <usbd_open_edpt_pair+0xcc>)
 8009ea2:	61fb      	str	r3, [r7, #28]
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 0301 	and.w	r3, r3, #1
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d000      	beq.n	8009eb2 <usbd_open_edpt_pair+0x7a>
 8009eb0:	be00      	bkpt	0x0000
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	e022      	b.n	8009efc <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8009eb6:	6a3b      	ldr	r3, [r7, #32]
 8009eb8:	789b      	ldrb	r3, [r3, #2]
 8009eba:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009ebc:	7dfb      	ldrb	r3, [r7, #23]
 8009ebe:	09db      	lsrs	r3, r3, #7
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d104      	bne.n	8009ed0 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8009ec6:	6a3b      	ldr	r3, [r7, #32]
 8009ec8:	789a      	ldrb	r2, [r3, #2]
 8009eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ecc:	701a      	strb	r2, [r3, #0]
 8009ece:	e003      	b.n	8009ed8 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8009ed0:	6a3b      	ldr	r3, [r7, #32]
 8009ed2:	789a      	ldrb	r2, [r3, #2]
 8009ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed6:	701a      	strb	r2, [r3, #0]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8009eea:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8009eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eee:	3301      	adds	r3, #1
 8009ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ef2:	79bb      	ldrb	r3, [r7, #6]
 8009ef4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	dbad      	blt.n	8009e56 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 8009efa:	2301      	movs	r3, #1
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3728      	adds	r7, #40	@ 0x28
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	e000edf0 	.word	0xe000edf0

08009f08 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	4603      	mov	r3, r0
 8009f10:	6039      	str	r1, [r7, #0]
 8009f12:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8009f14:	4b1c      	ldr	r3, [pc, #112]	@ (8009f88 <usbd_edpt_open+0x80>)
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	789b      	ldrb	r3, [r3, #2]
 8009f1e:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009f20:	7bfb      	ldrb	r3, [r7, #15]
 8009f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	2b05      	cmp	r3, #5
 8009f2a:	d90a      	bls.n	8009f42 <usbd_edpt_open+0x3a>
 8009f2c:	4b17      	ldr	r3, [pc, #92]	@ (8009f8c <usbd_edpt_open+0x84>)
 8009f2e:	613b      	str	r3, [r7, #16]
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f003 0301 	and.w	r3, r3, #1
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d000      	beq.n	8009f3e <usbd_edpt_open+0x36>
 8009f3c:	be00      	bkpt	0x0000
 8009f3e:	2300      	movs	r3, #0
 8009f40:	e01d      	b.n	8009f7e <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 8009f42:	4b13      	ldr	r3, [pc, #76]	@ (8009f90 <usbd_edpt_open+0x88>)
 8009f44:	789b      	ldrb	r3, [r3, #2]
 8009f46:	2200      	movs	r2, #0
 8009f48:	4619      	mov	r1, r3
 8009f4a:	6838      	ldr	r0, [r7, #0]
 8009f4c:	f002 fbae 	bl	800c6ac <tu_edpt_validate>
 8009f50:	4603      	mov	r3, r0
 8009f52:	f083 0301 	eor.w	r3, r3, #1
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00a      	beq.n	8009f72 <usbd_edpt_open+0x6a>
 8009f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8009f8c <usbd_edpt_open+0x84>)
 8009f5e:	617b      	str	r3, [r7, #20]
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f003 0301 	and.w	r3, r3, #1
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d000      	beq.n	8009f6e <usbd_edpt_open+0x66>
 8009f6c:	be00      	bkpt	0x0000
 8009f6e:	2300      	movs	r3, #0
 8009f70:	e005      	b.n	8009f7e <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 8009f72:	79fb      	ldrb	r3, [r7, #7]
 8009f74:	6839      	ldr	r1, [r7, #0]
 8009f76:	4618      	mov	r0, r3
 8009f78:	f001 f992 	bl	800b2a0 <dcd_edpt_open>
 8009f7c:	4603      	mov	r3, r0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3718      	adds	r7, #24
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	2000022d 	.word	0x2000022d
 8009f8c:	e000edf0 	.word	0xe000edf0
 8009f90:	20001714 	.word	0x20001714

08009f94 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b086      	sub	sp, #24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	460a      	mov	r2, r1
 8009f9e:	71fb      	strb	r3, [r7, #7]
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	71bb      	strb	r3, [r7, #6]
 8009fa4:	79bb      	ldrb	r3, [r7, #6]
 8009fa6:	73bb      	strb	r3, [r7, #14]
 8009fa8:	7bbb      	ldrb	r3, [r7, #14]
 8009faa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fae:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009fb0:	75fb      	strb	r3, [r7, #23]
 8009fb2:	79bb      	ldrb	r3, [r7, #6]
 8009fb4:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009fb6:	7bfb      	ldrb	r3, [r7, #15]
 8009fb8:	09db      	lsrs	r3, r3, #7
 8009fba:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009fbc:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8009fbe:	7dfa      	ldrb	r2, [r7, #23]
 8009fc0:	7dbb      	ldrb	r3, [r7, #22]
 8009fc2:	0052      	lsls	r2, r2, #1
 8009fc4:	4413      	add	r3, r2
 8009fc6:	3320      	adds	r3, #32
 8009fc8:	4a05      	ldr	r2, [pc, #20]	@ (8009fe0 <usbd_edpt_claim+0x4c>)
 8009fca:	4413      	add	r3, r2
 8009fcc:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 8009fce:	2100      	movs	r1, #0
 8009fd0:	6938      	ldr	r0, [r7, #16]
 8009fd2:	f002 fb07 	bl	800c5e4 <tu_edpt_claim>
 8009fd6:	4603      	mov	r3, r0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3718      	adds	r7, #24
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	20001714 	.word	0x20001714

08009fe4 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	4603      	mov	r3, r0
 8009fec:	460a      	mov	r2, r1
 8009fee:	71fb      	strb	r3, [r7, #7]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	71bb      	strb	r3, [r7, #6]
 8009ff4:	79bb      	ldrb	r3, [r7, #6]
 8009ff6:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009ff8:	7bbb      	ldrb	r3, [r7, #14]
 8009ffa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ffe:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a000:	75fb      	strb	r3, [r7, #23]
 800a002:	79bb      	ldrb	r3, [r7, #6]
 800a004:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a006:	7bfb      	ldrb	r3, [r7, #15]
 800a008:	09db      	lsrs	r3, r3, #7
 800a00a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a00c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800a00e:	7dfa      	ldrb	r2, [r7, #23]
 800a010:	7dbb      	ldrb	r3, [r7, #22]
 800a012:	0052      	lsls	r2, r2, #1
 800a014:	4413      	add	r3, r2
 800a016:	3320      	adds	r3, #32
 800a018:	4a05      	ldr	r2, [pc, #20]	@ (800a030 <usbd_edpt_release+0x4c>)
 800a01a:	4413      	add	r3, r2
 800a01c:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 800a01e:	2100      	movs	r1, #0
 800a020:	6938      	ldr	r0, [r7, #16]
 800a022:	f002 fb19 	bl	800c658 <tu_edpt_release>
 800a026:	4603      	mov	r3, r0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3718      	adds	r7, #24
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	20001714 	.word	0x20001714

0800a034 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 800a034:	b580      	push	{r7, lr}
 800a036:	b086      	sub	sp, #24
 800a038:	af00      	add	r7, sp, #0
 800a03a:	603a      	str	r2, [r7, #0]
 800a03c:	461a      	mov	r2, r3
 800a03e:	4603      	mov	r3, r0
 800a040:	71fb      	strb	r3, [r7, #7]
 800a042:	460b      	mov	r3, r1
 800a044:	71bb      	strb	r3, [r7, #6]
 800a046:	4613      	mov	r3, r2
 800a048:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 800a04a:	4b32      	ldr	r3, [pc, #200]	@ (800a114 <usbd_edpt_xfer+0xe0>)
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	71fb      	strb	r3, [r7, #7]
 800a050:	79bb      	ldrb	r3, [r7, #6]
 800a052:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a054:	7abb      	ldrb	r3, [r7, #10]
 800a056:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a05a:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a05c:	75fb      	strb	r3, [r7, #23]
 800a05e:	79bb      	ldrb	r3, [r7, #6]
 800a060:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a062:	7afb      	ldrb	r3, [r7, #11]
 800a064:	09db      	lsrs	r3, r3, #7
 800a066:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a068:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 800a06a:	7dfa      	ldrb	r2, [r7, #23]
 800a06c:	7dbb      	ldrb	r3, [r7, #22]
 800a06e:	492a      	ldr	r1, [pc, #168]	@ (800a118 <usbd_edpt_xfer+0xe4>)
 800a070:	0052      	lsls	r2, r2, #1
 800a072:	440a      	add	r2, r1
 800a074:	4413      	add	r3, r2
 800a076:	3320      	adds	r3, #32
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00a      	beq.n	800a09a <usbd_edpt_xfer+0x66>
 800a084:	4b25      	ldr	r3, [pc, #148]	@ (800a11c <usbd_edpt_xfer+0xe8>)
 800a086:	60fb      	str	r3, [r7, #12]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f003 0301 	and.w	r3, r3, #1
 800a090:	2b00      	cmp	r3, #0
 800a092:	d000      	beq.n	800a096 <usbd_edpt_xfer+0x62>
 800a094:	be00      	bkpt	0x0000
 800a096:	2300      	movs	r3, #0
 800a098:	e038      	b.n	800a10c <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800a09a:	7dfa      	ldrb	r2, [r7, #23]
 800a09c:	7dbb      	ldrb	r3, [r7, #22]
 800a09e:	491e      	ldr	r1, [pc, #120]	@ (800a118 <usbd_edpt_xfer+0xe4>)
 800a0a0:	0052      	lsls	r2, r2, #1
 800a0a2:	440a      	add	r2, r1
 800a0a4:	4413      	add	r3, r2
 800a0a6:	f103 0220 	add.w	r2, r3, #32
 800a0aa:	7813      	ldrb	r3, [r2, #0]
 800a0ac:	f043 0301 	orr.w	r3, r3, #1
 800a0b0:	7013      	strb	r3, [r2, #0]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 800a0b2:	88bb      	ldrh	r3, [r7, #4]
 800a0b4:	79b9      	ldrb	r1, [r7, #6]
 800a0b6:	79f8      	ldrb	r0, [r7, #7]
 800a0b8:	683a      	ldr	r2, [r7, #0]
 800a0ba:	f001 f9b5 	bl	800b428 <dcd_edpt_xfer>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d001      	beq.n	800a0c8 <usbd_edpt_xfer+0x94>
    return true;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e021      	b.n	800a10c <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 800a0c8:	7dfa      	ldrb	r2, [r7, #23]
 800a0ca:	7dbb      	ldrb	r3, [r7, #22]
 800a0cc:	4912      	ldr	r1, [pc, #72]	@ (800a118 <usbd_edpt_xfer+0xe4>)
 800a0ce:	0052      	lsls	r2, r2, #1
 800a0d0:	440a      	add	r2, r1
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f103 0220 	add.w	r2, r3, #32
 800a0d8:	7813      	ldrb	r3, [r2, #0]
 800a0da:	f023 0301 	bic.w	r3, r3, #1
 800a0de:	7013      	strb	r3, [r2, #0]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 800a0e0:	7dfa      	ldrb	r2, [r7, #23]
 800a0e2:	7dbb      	ldrb	r3, [r7, #22]
 800a0e4:	490c      	ldr	r1, [pc, #48]	@ (800a118 <usbd_edpt_xfer+0xe4>)
 800a0e6:	0052      	lsls	r2, r2, #1
 800a0e8:	440a      	add	r2, r1
 800a0ea:	4413      	add	r3, r2
 800a0ec:	f103 0220 	add.w	r2, r3, #32
 800a0f0:	7813      	ldrb	r3, [r2, #0]
 800a0f2:	f023 0304 	bic.w	r3, r3, #4
 800a0f6:	7013      	strb	r3, [r2, #0]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 800a0f8:	4b08      	ldr	r3, [pc, #32]	@ (800a11c <usbd_edpt_xfer+0xe8>)
 800a0fa:	613b      	str	r3, [r7, #16]
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f003 0301 	and.w	r3, r3, #1
 800a104:	2b00      	cmp	r3, #0
 800a106:	d000      	beq.n	800a10a <usbd_edpt_xfer+0xd6>
 800a108:	be00      	bkpt	0x0000
    return false;
 800a10a:	2300      	movs	r3, #0
  }
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3718      	adds	r7, #24
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	2000022d 	.word	0x2000022d
 800a118:	20001714 	.word	0x20001714
 800a11c:	e000edf0 	.word	0xe000edf0

0800a120 <usbd_edpt_busy>:
    TU_BREAKPOINT();
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr) {
 800a120:	b480      	push	{r7}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	4603      	mov	r3, r0
 800a128:	460a      	mov	r2, r1
 800a12a:	71fb      	strb	r3, [r7, #7]
 800a12c:	4613      	mov	r3, r2
 800a12e:	71bb      	strb	r3, [r7, #6]
 800a130:	79bb      	ldrb	r3, [r7, #6]
 800a132:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a134:	7b3b      	ldrb	r3, [r7, #12]
 800a136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a13a:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a13c:	73fb      	strb	r3, [r7, #15]
 800a13e:	79bb      	ldrb	r3, [r7, #6]
 800a140:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a142:	7b7b      	ldrb	r3, [r7, #13]
 800a144:	09db      	lsrs	r3, r3, #7
 800a146:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a148:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 800a14a:	7bfa      	ldrb	r2, [r7, #15]
 800a14c:	7bbb      	ldrb	r3, [r7, #14]
 800a14e:	490a      	ldr	r1, [pc, #40]	@ (800a178 <usbd_edpt_busy+0x58>)
 800a150:	0052      	lsls	r2, r2, #1
 800a152:	440a      	add	r2, r1
 800a154:	4413      	add	r3, r2
 800a156:	3320      	adds	r3, #32
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	2b00      	cmp	r3, #0
 800a162:	bf14      	ite	ne
 800a164:	2301      	movne	r3, #1
 800a166:	2300      	moveq	r3, #0
 800a168:	b2db      	uxtb	r3, r3
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3714      	adds	r7, #20
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	20001714 	.word	0x20001714

0800a17c <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	4603      	mov	r3, r0
 800a184:	460a      	mov	r2, r1
 800a186:	71fb      	strb	r3, [r7, #7]
 800a188:	4613      	mov	r3, r2
 800a18a:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 800a18c:	4b18      	ldr	r3, [pc, #96]	@ (800a1f0 <usbd_edpt_stall+0x74>)
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	71fb      	strb	r3, [r7, #7]
 800a192:	79bb      	ldrb	r3, [r7, #6]
 800a194:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a196:	7b3b      	ldrb	r3, [r7, #12]
 800a198:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a19c:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a19e:	73fb      	strb	r3, [r7, #15]
 800a1a0:	79bb      	ldrb	r3, [r7, #6]
 800a1a2:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a1a4:	7b7b      	ldrb	r3, [r7, #13]
 800a1a6:	09db      	lsrs	r3, r3, #7
 800a1a8:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a1aa:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 800a1ac:	79ba      	ldrb	r2, [r7, #6]
 800a1ae:	79fb      	ldrb	r3, [r7, #7]
 800a1b0:	4611      	mov	r1, r2
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f001 f988 	bl	800b4c8 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 800a1b8:	7bfa      	ldrb	r2, [r7, #15]
 800a1ba:	7bbb      	ldrb	r3, [r7, #14]
 800a1bc:	490d      	ldr	r1, [pc, #52]	@ (800a1f4 <usbd_edpt_stall+0x78>)
 800a1be:	0052      	lsls	r2, r2, #1
 800a1c0:	440a      	add	r2, r1
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f103 0220 	add.w	r2, r3, #32
 800a1c8:	7813      	ldrb	r3, [r2, #0]
 800a1ca:	f043 0302 	orr.w	r3, r3, #2
 800a1ce:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800a1d0:	7bfa      	ldrb	r2, [r7, #15]
 800a1d2:	7bbb      	ldrb	r3, [r7, #14]
 800a1d4:	4907      	ldr	r1, [pc, #28]	@ (800a1f4 <usbd_edpt_stall+0x78>)
 800a1d6:	0052      	lsls	r2, r2, #1
 800a1d8:	440a      	add	r2, r1
 800a1da:	4413      	add	r3, r2
 800a1dc:	f103 0220 	add.w	r2, r3, #32
 800a1e0:	7813      	ldrb	r3, [r2, #0]
 800a1e2:	f043 0301 	orr.w	r3, r3, #1
 800a1e6:	7013      	strb	r3, [r2, #0]
}
 800a1e8:	bf00      	nop
 800a1ea:	3710      	adds	r7, #16
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	2000022d 	.word	0x2000022d
 800a1f4:	20001714 	.word	0x20001714

0800a1f8 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	4603      	mov	r3, r0
 800a200:	460a      	mov	r2, r1
 800a202:	71fb      	strb	r3, [r7, #7]
 800a204:	4613      	mov	r3, r2
 800a206:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 800a208:	4b18      	ldr	r3, [pc, #96]	@ (800a26c <usbd_edpt_clear_stall+0x74>)
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	71fb      	strb	r3, [r7, #7]
 800a20e:	79bb      	ldrb	r3, [r7, #6]
 800a210:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a212:	7b3b      	ldrb	r3, [r7, #12]
 800a214:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a218:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a21a:	73fb      	strb	r3, [r7, #15]
 800a21c:	79bb      	ldrb	r3, [r7, #6]
 800a21e:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a220:	7b7b      	ldrb	r3, [r7, #13]
 800a222:	09db      	lsrs	r3, r3, #7
 800a224:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a226:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 800a228:	79ba      	ldrb	r2, [r7, #6]
 800a22a:	79fb      	ldrb	r3, [r7, #7]
 800a22c:	4611      	mov	r1, r2
 800a22e:	4618      	mov	r0, r3
 800a230:	f001 f980 	bl	800b534 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 800a234:	7bfa      	ldrb	r2, [r7, #15]
 800a236:	7bbb      	ldrb	r3, [r7, #14]
 800a238:	490d      	ldr	r1, [pc, #52]	@ (800a270 <usbd_edpt_clear_stall+0x78>)
 800a23a:	0052      	lsls	r2, r2, #1
 800a23c:	440a      	add	r2, r1
 800a23e:	4413      	add	r3, r2
 800a240:	f103 0220 	add.w	r2, r3, #32
 800a244:	7813      	ldrb	r3, [r2, #0]
 800a246:	f023 0302 	bic.w	r3, r3, #2
 800a24a:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 800a24c:	7bfa      	ldrb	r2, [r7, #15]
 800a24e:	7bbb      	ldrb	r3, [r7, #14]
 800a250:	4907      	ldr	r1, [pc, #28]	@ (800a270 <usbd_edpt_clear_stall+0x78>)
 800a252:	0052      	lsls	r2, r2, #1
 800a254:	440a      	add	r2, r1
 800a256:	4413      	add	r3, r2
 800a258:	f103 0220 	add.w	r2, r3, #32
 800a25c:	7813      	ldrb	r3, [r2, #0]
 800a25e:	f023 0301 	bic.w	r3, r3, #1
 800a262:	7013      	strb	r3, [r2, #0]
}
 800a264:	bf00      	nop
 800a266:	3710      	adds	r7, #16
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	2000022d 	.word	0x2000022d
 800a270:	20001714 	.word	0x20001714

0800a274 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	4603      	mov	r3, r0
 800a27c:	460a      	mov	r2, r1
 800a27e:	71fb      	strb	r3, [r7, #7]
 800a280:	4613      	mov	r3, r2
 800a282:	71bb      	strb	r3, [r7, #6]
 800a284:	79bb      	ldrb	r3, [r7, #6]
 800a286:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a288:	7b3b      	ldrb	r3, [r7, #12]
 800a28a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a28e:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a290:	73fb      	strb	r3, [r7, #15]
 800a292:	79bb      	ldrb	r3, [r7, #6]
 800a294:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a296:	7b7b      	ldrb	r3, [r7, #13]
 800a298:	09db      	lsrs	r3, r3, #7
 800a29a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a29c:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 800a29e:	7bfa      	ldrb	r2, [r7, #15]
 800a2a0:	7bbb      	ldrb	r3, [r7, #14]
 800a2a2:	490a      	ldr	r1, [pc, #40]	@ (800a2cc <usbd_edpt_stalled+0x58>)
 800a2a4:	0052      	lsls	r2, r2, #1
 800a2a6:	440a      	add	r2, r1
 800a2a8:	4413      	add	r3, r2
 800a2aa:	3320      	adds	r3, #32
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	bf14      	ite	ne
 800a2b8:	2301      	movne	r3, #1
 800a2ba:	2300      	moveq	r3, #0
 800a2bc:	b2db      	uxtb	r3, r3
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3714      	adds	r7, #20
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	20001714 	.word	0x20001714

0800a2d0 <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, const tusb_control_request_t* request) {
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	6039      	str	r1, [r7, #0]
 800a2da:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 800a2dc:	bf00      	nop
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	6039      	str	r1, [r7, #0]
 800a2f2:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d001      	beq.n	800a306 <status_stage_xact+0x1e>
 800a302:	2300      	movs	r3, #0
 800a304:	e000      	b.n	800a308 <status_stage_xact+0x20>
 800a306:	2380      	movs	r3, #128	@ 0x80
 800a308:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 800a30a:	7bf9      	ldrb	r1, [r7, #15]
 800a30c:	79f8      	ldrb	r0, [r7, #7]
 800a30e:	2300      	movs	r3, #0
 800a310:	2200      	movs	r2, #0
 800a312:	f7ff fe8f 	bl	800a034 <usbd_edpt_xfer>
 800a316:	4603      	mov	r3, r0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	4603      	mov	r3, r0
 800a328:	6039      	str	r1, [r7, #0]
 800a32a:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 800a32c:	4b0b      	ldr	r3, [pc, #44]	@ (800a35c <tud_control_status+0x3c>)
 800a32e:	683a      	ldr	r2, [r7, #0]
 800a330:	6810      	ldr	r0, [r2, #0]
 800a332:	6851      	ldr	r1, [r2, #4]
 800a334:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800a336:	4b09      	ldr	r3, [pc, #36]	@ (800a35c <tud_control_status+0x3c>)
 800a338:	2200      	movs	r2, #0
 800a33a:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800a33c:	4b07      	ldr	r3, [pc, #28]	@ (800a35c <tud_control_status+0x3c>)
 800a33e:	2200      	movs	r2, #0
 800a340:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800a342:	4b06      	ldr	r3, [pc, #24]	@ (800a35c <tud_control_status+0x3c>)
 800a344:	2200      	movs	r2, #0
 800a346:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 800a348:	79fb      	ldrb	r3, [r7, #7]
 800a34a:	6839      	ldr	r1, [r7, #0]
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7ff ffcb 	bl	800a2e8 <status_stage_xact>
 800a352:	4603      	mov	r3, r0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	20001810 	.word	0x20001810

0800a360 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 800a360:	b580      	push	{r7, lr}
 800a362:	b088      	sub	sp, #32
 800a364:	af00      	add	r7, sp, #0
 800a366:	4603      	mov	r3, r0
 800a368:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 800a36a:	4b24      	ldr	r3, [pc, #144]	@ (800a3fc <data_stage_xact+0x9c>)
 800a36c:	899a      	ldrh	r2, [r3, #12]
 800a36e:	4b23      	ldr	r3, [pc, #140]	@ (800a3fc <data_stage_xact+0x9c>)
 800a370:	89db      	ldrh	r3, [r3, #14]
 800a372:	1ad3      	subs	r3, r2, r3
 800a374:	b29b      	uxth	r3, r3
 800a376:	837b      	strh	r3, [r7, #26]
 800a378:	2340      	movs	r3, #64	@ 0x40
 800a37a:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a37c:	8b7a      	ldrh	r2, [r7, #26]
 800a37e:	8b3b      	ldrh	r3, [r7, #24]
 800a380:	4293      	cmp	r3, r2
 800a382:	bf28      	it	cs
 800a384:	4613      	movcs	r3, r2
 800a386:	b29b      	uxth	r3, r3
 800a388:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 800a38a:	2300      	movs	r3, #0
 800a38c:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 800a38e:	4b1b      	ldr	r3, [pc, #108]	@ (800a3fc <data_stage_xact+0x9c>)
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a396:	b2db      	uxtb	r3, r3
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d01e      	beq.n	800a3da <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 800a39c:	2380      	movs	r3, #128	@ 0x80
 800a39e:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 800a3a0:	8bbb      	ldrh	r3, [r7, #28]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d019      	beq.n	800a3da <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 800a3a6:	4b15      	ldr	r3, [pc, #84]	@ (800a3fc <data_stage_xact+0x9c>)
 800a3a8:	689a      	ldr	r2, [r3, #8]
 800a3aa:	8bbb      	ldrh	r3, [r7, #28]
 800a3ac:	4914      	ldr	r1, [pc, #80]	@ (800a400 <data_stage_xact+0xa0>)
 800a3ae:	6179      	str	r1, [r7, #20]
 800a3b0:	2140      	movs	r1, #64	@ 0x40
 800a3b2:	6139      	str	r1, [r7, #16]
 800a3b4:	60fa      	str	r2, [r7, #12]
 800a3b6:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d202      	bcs.n	800a3c6 <data_stage_xact+0x66>
    return -1;
 800a3c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3c4:	e005      	b.n	800a3d2 <data_stage_xact+0x72>
  memcpy(dest, src, count);
 800a3c6:	68ba      	ldr	r2, [r7, #8]
 800a3c8:	68f9      	ldr	r1, [r7, #12]
 800a3ca:	6978      	ldr	r0, [r7, #20]
 800a3cc:	f002 fd0b 	bl	800cde6 <memcpy>
  return 0;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d001      	beq.n	800a3da <data_stage_xact+0x7a>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	e00b      	b.n	800a3f2 <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 800a3da:	8bbb      	ldrh	r3, [r7, #28]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d001      	beq.n	800a3e4 <data_stage_xact+0x84>
 800a3e0:	4a07      	ldr	r2, [pc, #28]	@ (800a400 <data_stage_xact+0xa0>)
 800a3e2:	e000      	b.n	800a3e6 <data_stage_xact+0x86>
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	8bbb      	ldrh	r3, [r7, #28]
 800a3e8:	7ff9      	ldrb	r1, [r7, #31]
 800a3ea:	79f8      	ldrb	r0, [r7, #7]
 800a3ec:	f7ff fe22 	bl	800a034 <usbd_edpt_xfer>
 800a3f0:	4603      	mov	r3, r0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3720      	adds	r7, #32
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20001810 	.word	0x20001810
 800a400:	20001824 	.word	0x20001824

0800a404 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 800a404:	b580      	push	{r7, lr}
 800a406:	b088      	sub	sp, #32
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60b9      	str	r1, [r7, #8]
 800a40c:	607a      	str	r2, [r7, #4]
 800a40e:	461a      	mov	r2, r3
 800a410:	4603      	mov	r3, r0
 800a412:	73fb      	strb	r3, [r7, #15]
 800a414:	4613      	mov	r3, r2
 800a416:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 800a418:	4b30      	ldr	r3, [pc, #192]	@ (800a4dc <tud_control_xfer+0xd8>)
 800a41a:	68ba      	ldr	r2, [r7, #8]
 800a41c:	6810      	ldr	r0, [r2, #0]
 800a41e:	6851      	ldr	r1, [r2, #4]
 800a420:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 800a422:	4a2e      	ldr	r2, [pc, #184]	@ (800a4dc <tud_control_xfer+0xd8>)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 800a428:	4b2c      	ldr	r3, [pc, #176]	@ (800a4dc <tud_control_xfer+0xd8>)
 800a42a:	2200      	movs	r2, #0
 800a42c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	88db      	ldrh	r3, [r3, #6]
 800a432:	b29a      	uxth	r2, r3
 800a434:	89bb      	ldrh	r3, [r7, #12]
 800a436:	827b      	strh	r3, [r7, #18]
 800a438:	4613      	mov	r3, r2
 800a43a:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a43c:	8a7a      	ldrh	r2, [r7, #18]
 800a43e:	8a3b      	ldrh	r3, [r7, #16]
 800a440:	4293      	cmp	r3, r2
 800a442:	bf28      	it	cs
 800a444:	4613      	movcs	r3, r2
 800a446:	b29a      	uxth	r2, r3
 800a448:	4b24      	ldr	r3, [pc, #144]	@ (800a4dc <tud_control_xfer+0xd8>)
 800a44a:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	88db      	ldrh	r3, [r3, #6]
 800a450:	b29b      	uxth	r3, r3
 800a452:	2b00      	cmp	r3, #0
 800a454:	d026      	beq.n	800a4a4 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 800a456:	4b21      	ldr	r3, [pc, #132]	@ (800a4dc <tud_control_xfer+0xd8>)
 800a458:	899b      	ldrh	r3, [r3, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00d      	beq.n	800a47a <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10a      	bne.n	800a47a <tud_control_xfer+0x76>
 800a464:	4b1e      	ldr	r3, [pc, #120]	@ (800a4e0 <tud_control_xfer+0xdc>)
 800a466:	61bb      	str	r3, [r7, #24]
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f003 0301 	and.w	r3, r3, #1
 800a470:	2b00      	cmp	r3, #0
 800a472:	d000      	beq.n	800a476 <tud_control_xfer+0x72>
 800a474:	be00      	bkpt	0x0000
 800a476:	2300      	movs	r3, #0
 800a478:	e02b      	b.n	800a4d2 <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 800a47a:	7bfb      	ldrb	r3, [r7, #15]
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7ff ff6f 	bl	800a360 <data_stage_xact>
 800a482:	4603      	mov	r3, r0
 800a484:	f083 0301 	eor.w	r3, r3, #1
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d020      	beq.n	800a4d0 <tud_control_xfer+0xcc>
 800a48e:	4b14      	ldr	r3, [pc, #80]	@ (800a4e0 <tud_control_xfer+0xdc>)
 800a490:	617b      	str	r3, [r7, #20]
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f003 0301 	and.w	r3, r3, #1
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d000      	beq.n	800a4a0 <tud_control_xfer+0x9c>
 800a49e:	be00      	bkpt	0x0000
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	e016      	b.n	800a4d2 <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 800a4a4:	7bfb      	ldrb	r3, [r7, #15]
 800a4a6:	68b9      	ldr	r1, [r7, #8]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7ff ff1d 	bl	800a2e8 <status_stage_xact>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	f083 0301 	eor.w	r3, r3, #1
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00a      	beq.n	800a4d0 <tud_control_xfer+0xcc>
 800a4ba:	4b09      	ldr	r3, [pc, #36]	@ (800a4e0 <tud_control_xfer+0xdc>)
 800a4bc:	61fb      	str	r3, [r7, #28]
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f003 0301 	and.w	r3, r3, #1
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d000      	beq.n	800a4cc <tud_control_xfer+0xc8>
 800a4ca:	be00      	bkpt	0x0000
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	e000      	b.n	800a4d2 <tud_control_xfer+0xce>
  }

  return true;
 800a4d0:	2301      	movs	r3, #1
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3720      	adds	r7, #32
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	20001810 	.word	0x20001810
 800a4e0:	e000edf0 	.word	0xe000edf0

0800a4e4 <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 800a4e8:	2214      	movs	r2, #20
 800a4ea:	2100      	movs	r1, #0
 800a4ec:	4802      	ldr	r0, [pc, #8]	@ (800a4f8 <usbd_control_reset+0x14>)
 800a4ee:	f002 fba2 	bl	800cc36 <memset>
}
 800a4f2:	bf00      	nop
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	20001810 	.word	0x20001810

0800a4fc <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 800a504:	4a04      	ldr	r2, [pc, #16]	@ (800a518 <usbd_control_set_complete_callback+0x1c>)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6113      	str	r3, [r2, #16]
}
 800a50a:	bf00      	nop
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	20001810 	.word	0x20001810

0800a51c <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 800a524:	4b09      	ldr	r3, [pc, #36]	@ (800a54c <usbd_control_set_request+0x30>)
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	6810      	ldr	r0, [r2, #0]
 800a52a:	6851      	ldr	r1, [r2, #4]
 800a52c:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800a52e:	4b07      	ldr	r3, [pc, #28]	@ (800a54c <usbd_control_set_request+0x30>)
 800a530:	2200      	movs	r2, #0
 800a532:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800a534:	4b05      	ldr	r3, [pc, #20]	@ (800a54c <usbd_control_set_request+0x30>)
 800a536:	2200      	movs	r2, #0
 800a538:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800a53a:	4b04      	ldr	r3, [pc, #16]	@ (800a54c <usbd_control_set_request+0x30>)
 800a53c:	2200      	movs	r2, #0
 800a53e:	819a      	strh	r2, [r3, #12]
}
 800a540:	bf00      	nop
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr
 800a54c:	20001810 	.word	0x20001810

0800a550 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 800a550:	b580      	push	{r7, lr}
 800a552:	b088      	sub	sp, #32
 800a554:	af00      	add	r7, sp, #0
 800a556:	603b      	str	r3, [r7, #0]
 800a558:	4603      	mov	r3, r0
 800a55a:	71fb      	strb	r3, [r7, #7]
 800a55c:	460b      	mov	r3, r1
 800a55e:	71bb      	strb	r3, [r7, #6]
 800a560:	4613      	mov	r3, r2
 800a562:	717b      	strb	r3, [r7, #5]
 800a564:	79bb      	ldrb	r3, [r7, #6]
 800a566:	73fb      	strb	r3, [r7, #15]
 800a568:	7bfb      	ldrb	r3, [r7, #15]
 800a56a:	09db      	lsrs	r3, r3, #7
 800a56c:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 800a56e:	4a4f      	ldr	r2, [pc, #316]	@ (800a6ac <usbd_control_xfer_cb+0x15c>)
 800a570:	7812      	ldrb	r2, [r2, #0]
 800a572:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 800a576:	b2d2      	uxtb	r2, r2
 800a578:	4293      	cmp	r3, r2
 800a57a:	d01e      	beq.n	800a5ba <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00a      	beq.n	800a598 <usbd_control_xfer_cb+0x48>
 800a582:	4b4b      	ldr	r3, [pc, #300]	@ (800a6b0 <usbd_control_xfer_cb+0x160>)
 800a584:	613b      	str	r3, [r7, #16]
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f003 0301 	and.w	r3, r3, #1
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d000      	beq.n	800a594 <usbd_control_xfer_cb+0x44>
 800a592:	be00      	bkpt	0x0000
 800a594:	2300      	movs	r3, #0
 800a596:	e084      	b.n	800a6a2 <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 800a598:	79fb      	ldrb	r3, [r7, #7]
 800a59a:	4944      	ldr	r1, [pc, #272]	@ (800a6ac <usbd_control_xfer_cb+0x15c>)
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7ff fe97 	bl	800a2d0 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 800a5a2:	4b42      	ldr	r3, [pc, #264]	@ (800a6ac <usbd_control_xfer_cb+0x15c>)
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d005      	beq.n	800a5b6 <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 800a5aa:	4b40      	ldr	r3, [pc, #256]	@ (800a6ac <usbd_control_xfer_cb+0x15c>)
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	79f8      	ldrb	r0, [r7, #7]
 800a5b0:	4a3e      	ldr	r2, [pc, #248]	@ (800a6ac <usbd_control_xfer_cb+0x15c>)
 800a5b2:	2103      	movs	r1, #3
 800a5b4:	4798      	blx	r3
    }

    return true;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e073      	b.n	800a6a2 <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 800a5ba:	4b3c      	ldr	r3, [pc, #240]	@ (800a6ac <usbd_control_xfer_cb+0x15c>)
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10c      	bne.n	800a5e2 <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 800a5c8:	4b38      	ldr	r3, [pc, #224]	@ (800a6ac <usbd_control_xfer_cb+0x15c>)
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <usbd_control_xfer_cb+0x84>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	e066      	b.n	800a6a2 <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 800a5d4:	4b35      	ldr	r3, [pc, #212]	@ (800a6ac <usbd_control_xfer_cb+0x15c>)
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	683a      	ldr	r2, [r7, #0]
 800a5da:	4936      	ldr	r1, [pc, #216]	@ (800a6b4 <usbd_control_xfer_cb+0x164>)
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f002 fc02 	bl	800cde6 <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 800a5e2:	4b32      	ldr	r3, [pc, #200]	@ (800a6ac <usbd_control_xfer_cb+0x15c>)
 800a5e4:	89da      	ldrh	r2, [r3, #14]
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	4413      	add	r3, r2
 800a5ec:	b29a      	uxth	r2, r3
 800a5ee:	4b2f      	ldr	r3, [pc, #188]	@ (800a6ac <usbd_control_xfer_cb+0x15c>)
 800a5f0:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 800a5f2:	4b2e      	ldr	r3, [pc, #184]	@ (800a6ac <usbd_control_xfer_cb+0x15c>)
 800a5f4:	689a      	ldr	r2, [r3, #8]
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	4a2c      	ldr	r2, [pc, #176]	@ (800a6ac <usbd_control_xfer_cb+0x15c>)
 800a5fc:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 800a5fe:	4b2b      	ldr	r3, [pc, #172]	@ (800a6ac <usbd_control_xfer_cb+0x15c>)
 800a600:	88da      	ldrh	r2, [r3, #6]
 800a602:	4b2a      	ldr	r3, [pc, #168]	@ (800a6ac <usbd_control_xfer_cb+0x15c>)
 800a604:	89db      	ldrh	r3, [r3, #14]
 800a606:	429a      	cmp	r2, r3
 800a608:	d002      	beq.n	800a610 <usbd_control_xfer_cb+0xc0>
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	2b3f      	cmp	r3, #63	@ 0x3f
 800a60e:	d831      	bhi.n	800a674 <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 800a610:	2301      	movs	r3, #1
 800a612:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 800a614:	4b25      	ldr	r3, [pc, #148]	@ (800a6ac <usbd_control_xfer_cb+0x15c>)
 800a616:	691b      	ldr	r3, [r3, #16]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d007      	beq.n	800a62c <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 800a61c:	4b23      	ldr	r3, [pc, #140]	@ (800a6ac <usbd_control_xfer_cb+0x15c>)
 800a61e:	691b      	ldr	r3, [r3, #16]
 800a620:	79f8      	ldrb	r0, [r7, #7]
 800a622:	4a22      	ldr	r2, [pc, #136]	@ (800a6ac <usbd_control_xfer_cb+0x15c>)
 800a624:	2102      	movs	r1, #2
 800a626:	4798      	blx	r3
 800a628:	4603      	mov	r3, r0
 800a62a:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 800a62c:	7ffb      	ldrb	r3, [r7, #31]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d015      	beq.n	800a65e <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 800a632:	79fb      	ldrb	r3, [r7, #7]
 800a634:	491d      	ldr	r1, [pc, #116]	@ (800a6ac <usbd_control_xfer_cb+0x15c>)
 800a636:	4618      	mov	r0, r3
 800a638:	f7ff fe56 	bl	800a2e8 <status_stage_xact>
 800a63c:	4603      	mov	r3, r0
 800a63e:	f083 0301 	eor.w	r3, r3, #1
 800a642:	b2db      	uxtb	r3, r3
 800a644:	2b00      	cmp	r3, #0
 800a646:	d02a      	beq.n	800a69e <usbd_control_xfer_cb+0x14e>
 800a648:	4b19      	ldr	r3, [pc, #100]	@ (800a6b0 <usbd_control_xfer_cb+0x160>)
 800a64a:	617b      	str	r3, [r7, #20]
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f003 0301 	and.w	r3, r3, #1
 800a654:	2b00      	cmp	r3, #0
 800a656:	d000      	beq.n	800a65a <usbd_control_xfer_cb+0x10a>
 800a658:	be00      	bkpt	0x0000
 800a65a:	2300      	movs	r3, #0
 800a65c:	e021      	b.n	800a6a2 <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 800a65e:	79fb      	ldrb	r3, [r7, #7]
 800a660:	2100      	movs	r1, #0
 800a662:	4618      	mov	r0, r3
 800a664:	f000 ff30 	bl	800b4c8 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 800a668:	79fb      	ldrb	r3, [r7, #7]
 800a66a:	2180      	movs	r1, #128	@ 0x80
 800a66c:	4618      	mov	r0, r3
 800a66e:	f000 ff2b 	bl	800b4c8 <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 800a672:	e014      	b.n	800a69e <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 800a674:	79fb      	ldrb	r3, [r7, #7]
 800a676:	4618      	mov	r0, r3
 800a678:	f7ff fe72 	bl	800a360 <data_stage_xact>
 800a67c:	4603      	mov	r3, r0
 800a67e:	f083 0301 	eor.w	r3, r3, #1
 800a682:	b2db      	uxtb	r3, r3
 800a684:	2b00      	cmp	r3, #0
 800a686:	d00b      	beq.n	800a6a0 <usbd_control_xfer_cb+0x150>
 800a688:	4b09      	ldr	r3, [pc, #36]	@ (800a6b0 <usbd_control_xfer_cb+0x160>)
 800a68a:	61bb      	str	r3, [r7, #24]
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f003 0301 	and.w	r3, r3, #1
 800a694:	2b00      	cmp	r3, #0
 800a696:	d000      	beq.n	800a69a <usbd_control_xfer_cb+0x14a>
 800a698:	be00      	bkpt	0x0000
 800a69a:	2300      	movs	r3, #0
 800a69c:	e001      	b.n	800a6a2 <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 800a69e:	bf00      	nop
  }

  return true;
 800a6a0:	2301      	movs	r3, #1
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3720      	adds	r7, #32
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	20001810 	.word	0x20001810
 800a6b0:	e000edf0 	.word	0xe000edf0
 800a6b4:	20001824 	.word	0x20001824

0800a6b8 <__NVIC_EnableIRQ>:
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	4603      	mov	r3, r0
 800a6c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a6c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	db0b      	blt.n	800a6e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a6ca:	79fb      	ldrb	r3, [r7, #7]
 800a6cc:	f003 021f 	and.w	r2, r3, #31
 800a6d0:	4907      	ldr	r1, [pc, #28]	@ (800a6f0 <__NVIC_EnableIRQ+0x38>)
 800a6d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6d6:	095b      	lsrs	r3, r3, #5
 800a6d8:	2001      	movs	r0, #1
 800a6da:	fa00 f202 	lsl.w	r2, r0, r2
 800a6de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a6e2:	bf00      	nop
 800a6e4:	370c      	adds	r7, #12
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	e000e100 	.word	0xe000e100

0800a6f4 <__NVIC_DisableIRQ>:
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a6fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a702:	2b00      	cmp	r3, #0
 800a704:	db12      	blt.n	800a72c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a706:	79fb      	ldrb	r3, [r7, #7]
 800a708:	f003 021f 	and.w	r2, r3, #31
 800a70c:	490a      	ldr	r1, [pc, #40]	@ (800a738 <__NVIC_DisableIRQ+0x44>)
 800a70e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a712:	095b      	lsrs	r3, r3, #5
 800a714:	2001      	movs	r0, #1
 800a716:	fa00 f202 	lsl.w	r2, r0, r2
 800a71a:	3320      	adds	r3, #32
 800a71c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a720:	f3bf 8f4f 	dsb	sy
}
 800a724:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a726:	f3bf 8f6f 	isb	sy
}
 800a72a:	bf00      	nop
}
 800a72c:	bf00      	nop
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr
 800a738:	e000e100 	.word	0xe000e100

0800a73c <dma_setup_prepare>:
  // Internal DMA only
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	4603      	mov	r3, r0
 800a744:	71fb      	strb	r3, [r7, #7]
 800a746:	79fb      	ldrb	r3, [r7, #7]
 800a748:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a74a:	7afb      	ldrb	r3, [r7, #11]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d001      	beq.n	800a754 <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 800a750:	2300      	movs	r3, #0
 800a752:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a754:	7afb      	ldrb	r3, [r7, #11]
 800a756:	4a13      	ldr	r2, [pc, #76]	@ (800a7a4 <dma_setup_prepare+0x68>)
 800a758:	011b      	lsls	r3, r3, #4
 800a75a:	4413      	add	r3, r2
 800a75c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a75e:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a764:	4a10      	ldr	r2, [pc, #64]	@ (800a7a8 <dma_setup_prepare+0x6c>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d904      	bls.n	800a774 <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800a770:	2b00      	cmp	r3, #0
 800a772:	db10      	blt.n	800a796 <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	4a0d      	ldr	r2, [pc, #52]	@ (800a7ac <dma_setup_prepare+0x70>)
 800a778:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 800a77c:	4a0c      	ldr	r2, [pc, #48]	@ (800a7b0 <dma_setup_prepare+0x74>)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800a78a:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 800a794:	e000      	b.n	800a798 <dma_setup_prepare+0x5c>
      return;
 800a796:	bf00      	nop
}
 800a798:	3714      	adds	r7, #20
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	0800efe4 	.word	0x0800efe4
 800a7a8:	4f543009 	.word	0x4f543009
 800a7ac:	20080008 	.word	0x20080008
 800a7b0:	200018ec 	.word	0x200018ec

0800a7b4 <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 800a7b4:	b480      	push	{r7}
 800a7b6:	b091      	sub	sp, #68	@ 0x44
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	71fb      	strb	r3, [r7, #7]
 800a7be:	460b      	mov	r3, r1
 800a7c0:	71bb      	strb	r3, [r7, #6]
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	80bb      	strh	r3, [r7, #4]
 800a7c6:	79fb      	ldrb	r3, [r7, #7]
 800a7c8:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a7ca:	7e7b      	ldrb	r3, [r7, #25]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d001      	beq.n	800a7d4 <dfifo_alloc+0x20>
    rhport = 0;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a7d4:	7e7b      	ldrb	r3, [r7, #25]
 800a7d6:	4a65      	ldr	r2, [pc, #404]	@ (800a96c <dfifo_alloc+0x1b8>)
 800a7d8:	011b      	lsls	r3, r3, #4
 800a7da:	4413      	add	r3, r2
 800a7dc:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a7de:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 800a7e0:	79fb      	ldrb	r3, [r7, #7]
 800a7e2:	011b      	lsls	r3, r3, #4
 800a7e4:	4a61      	ldr	r2, [pc, #388]	@ (800a96c <dfifo_alloc+0x1b8>)
 800a7e6:	4413      	add	r3, r2
 800a7e8:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 800a7ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7ec:	7a1b      	ldrb	r3, [r3, #8]
 800a7ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800a7f2:	79bb      	ldrb	r3, [r7, #6]
 800a7f4:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a7f6:	7ebb      	ldrb	r3, [r7, #26]
 800a7f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7fc:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 800a7fe:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800a802:	79bb      	ldrb	r3, [r7, #6]
 800a804:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a806:	7efb      	ldrb	r3, [r7, #27]
 800a808:	09db      	lsrs	r3, r3, #7
 800a80a:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 800a80c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 800a810:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800a814:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a818:	429a      	cmp	r2, r3
 800a81a:	d30a      	bcc.n	800a832 <dfifo_alloc+0x7e>
 800a81c:	4b54      	ldr	r3, [pc, #336]	@ (800a970 <dfifo_alloc+0x1bc>)
 800a81e:	61fb      	str	r3, [r7, #28]
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 0301 	and.w	r3, r3, #1
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d000      	beq.n	800a82e <dfifo_alloc+0x7a>
 800a82c:	be00      	bkpt	0x0000
 800a82e:	2300      	movs	r3, #0
 800a830:	e095      	b.n	800a95e <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 800a832:	88bb      	ldrh	r3, [r7, #4]
 800a834:	617b      	str	r3, [r7, #20]
 800a836:	2304      	movs	r3, #4
 800a838:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800a83a:	697a      	ldr	r2, [r7, #20]
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	4413      	add	r3, r2
 800a840:	1e5a      	subs	r2, r3, #1
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	fbb2 f3f3 	udiv	r3, r2, r3
 800a848:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 800a84a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d12a      	bne.n	800a8a8 <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 800a852:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	b29b      	uxth	r3, r3
 800a858:	81fb      	strh	r3, [r7, #14]
 800a85a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a85e:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 800a860:	89fb      	ldrh	r3, [r7, #14]
 800a862:	089b      	lsrs	r3, r3, #2
 800a864:	b29b      	uxth	r3, r3
 800a866:	f103 0208 	add.w	r2, r3, #8
 800a86a:	7b7b      	ldrb	r3, [r7, #13]
 800a86c:	4413      	add	r3, r2
 800a86e:	b29b      	uxth	r3, r3
 800a870:	005b      	lsls	r3, r3, #1
 800a872:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 800a874:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 800a876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a878:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a87a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d26d      	bcs.n	800a95c <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 800a880:	4b3c      	ldr	r3, [pc, #240]	@ (800a974 <dfifo_alloc+0x1c0>)
 800a882:	889b      	ldrh	r3, [r3, #4]
 800a884:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a886:	429a      	cmp	r2, r3
 800a888:	d90a      	bls.n	800a8a0 <dfifo_alloc+0xec>
 800a88a:	4b39      	ldr	r3, [pc, #228]	@ (800a970 <dfifo_alloc+0x1bc>)
 800a88c:	623b      	str	r3, [r7, #32]
 800a88e:	6a3b      	ldr	r3, [r7, #32]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f003 0301 	and.w	r3, r3, #1
 800a896:	2b00      	cmp	r3, #0
 800a898:	d000      	beq.n	800a89c <dfifo_alloc+0xe8>
 800a89a:	be00      	bkpt	0x0000
 800a89c:	2300      	movs	r3, #0
 800a89e:	e05e      	b.n	800a95e <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 800a8a0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a4:	625a      	str	r2, [r3, #36]	@ 0x24
 800a8a6:	e059      	b.n	800a95c <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 800a8a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8aa:	7a5b      	ldrb	r3, [r3, #9]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d016      	beq.n	800a8de <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 800a8b0:	4b30      	ldr	r3, [pc, #192]	@ (800a974 <dfifo_alloc+0x1c0>)
 800a8b2:	799a      	ldrb	r2, [r3, #6]
 800a8b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8b6:	7a5b      	ldrb	r3, [r3, #9]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d30a      	bcc.n	800a8d2 <dfifo_alloc+0x11e>
 800a8bc:	4b2c      	ldr	r3, [pc, #176]	@ (800a970 <dfifo_alloc+0x1bc>)
 800a8be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f003 0301 	and.w	r3, r3, #1
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d000      	beq.n	800a8ce <dfifo_alloc+0x11a>
 800a8cc:	be00      	bkpt	0x0000
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	e045      	b.n	800a95e <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 800a8d2:	4b28      	ldr	r3, [pc, #160]	@ (800a974 <dfifo_alloc+0x1c0>)
 800a8d4:	799b      	ldrb	r3, [r3, #6]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	4b26      	ldr	r3, [pc, #152]	@ (800a974 <dfifo_alloc+0x1c0>)
 800a8dc:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 800a8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d102      	bne.n	800a8f0 <dfifo_alloc+0x13c>
      fifo_size *= 2;
 800a8ea:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a8ec:	005b      	lsls	r3, r3, #1
 800a8ee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 800a8f0:	4b20      	ldr	r3, [pc, #128]	@ (800a974 <dfifo_alloc+0x1c0>)
 800a8f2:	889b      	ldrh	r3, [r3, #4]
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800a8f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8fc:	4413      	add	r3, r2
 800a8fe:	4299      	cmp	r1, r3
 800a900:	d20a      	bcs.n	800a918 <dfifo_alloc+0x164>
 800a902:	4b1b      	ldr	r3, [pc, #108]	@ (800a970 <dfifo_alloc+0x1bc>)
 800a904:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f003 0301 	and.w	r3, r3, #1
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d000      	beq.n	800a914 <dfifo_alloc+0x160>
 800a912:	be00      	bkpt	0x0000
 800a914:	2300      	movs	r3, #0
 800a916:	e022      	b.n	800a95e <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 800a918:	4b16      	ldr	r3, [pc, #88]	@ (800a974 <dfifo_alloc+0x1c0>)
 800a91a:	889a      	ldrh	r2, [r3, #4]
 800a91c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	b29a      	uxth	r2, r3
 800a922:	4b14      	ldr	r3, [pc, #80]	@ (800a974 <dfifo_alloc+0x1c0>)
 800a924:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 800a926:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d108      	bne.n	800a940 <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 800a92e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a930:	041b      	lsls	r3, r3, #16
 800a932:	4a10      	ldr	r2, [pc, #64]	@ (800a974 <dfifo_alloc+0x1c0>)
 800a934:	8892      	ldrh	r2, [r2, #4]
 800a936:	4313      	orrs	r3, r2
 800a938:	461a      	mov	r2, r3
 800a93a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a93c:	629a      	str	r2, [r3, #40]	@ 0x28
 800a93e:	e00d      	b.n	800a95c <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 800a940:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a942:	041b      	lsls	r3, r3, #16
 800a944:	4a0b      	ldr	r2, [pc, #44]	@ (800a974 <dfifo_alloc+0x1c0>)
 800a946:	8892      	ldrh	r2, [r2, #4]
 800a948:	431a      	orrs	r2, r3
 800a94a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800a94e:	3b01      	subs	r3, #1
 800a950:	4611      	mov	r1, r2
 800a952:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a954:	3340      	adds	r3, #64	@ 0x40
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	4413      	add	r3, r2
 800a95a:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 800a95c:	2301      	movs	r3, #1
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3744      	adds	r7, #68	@ 0x44
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	0800efe4 	.word	0x0800efe4
 800a970:	e000edf0 	.word	0xe000edf0
 800a974:	200018e4 	.word	0x200018e4

0800a978 <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 800a978:	b580      	push	{r7, lr}
 800a97a:	b088      	sub	sp, #32
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	4603      	mov	r3, r0
 800a980:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 800a982:	79fb      	ldrb	r3, [r7, #7]
 800a984:	011b      	lsls	r3, r3, #4
 800a986:	4a27      	ldr	r2, [pc, #156]	@ (800aa24 <dfifo_device_init+0xac>)
 800a988:	4413      	add	r3, r2
 800a98a:	61fb      	str	r3, [r7, #28]
 800a98c:	79fb      	ldrb	r3, [r7, #7]
 800a98e:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a990:	7b3b      	ldrb	r3, [r7, #12]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d001      	beq.n	800a99a <dfifo_device_init+0x22>
    rhport = 0;
 800a996:	2300      	movs	r3, #0
 800a998:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a99a:	7b3b      	ldrb	r3, [r7, #12]
 800a99c:	4a21      	ldr	r2, [pc, #132]	@ (800aa24 <dfifo_device_init+0xac>)
 800a99e:	011b      	lsls	r3, r3, #4
 800a9a0:	4413      	add	r3, r2
 800a9a2:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a9a4:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	7a1b      	ldrb	r3, [r3, #8]
 800a9aa:	2240      	movs	r2, #64	@ 0x40
 800a9ac:	81fa      	strh	r2, [r7, #14]
 800a9ae:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 800a9b0:	89fb      	ldrh	r3, [r7, #14]
 800a9b2:	089b      	lsrs	r3, r3, #2
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	f103 0208 	add.w	r2, r3, #8
 800a9ba:	7b7b      	ldrb	r3, [r7, #13]
 800a9bc:	4413      	add	r3, r2
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	005b      	lsls	r3, r3, #1
 800a9c2:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	625a      	str	r2, [r3, #36]	@ 0x24
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9d2:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800a9d4:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 800a9d6:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	089b      	lsrs	r3, r3, #2
 800a9de:	b29a      	uxth	r2, r3
 800a9e0:	4b11      	ldr	r3, [pc, #68]	@ (800aa28 <dfifo_device_init+0xb0>)
 800a9e2:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 800a9e4:	7dfb      	ldrb	r3, [r7, #23]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d009      	beq.n	800a9fe <dfifo_device_init+0x86>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 800a9ea:	4b0f      	ldr	r3, [pc, #60]	@ (800aa28 <dfifo_device_init+0xb0>)
 800a9ec:	889a      	ldrh	r2, [r3, #4]
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	7a1b      	ldrb	r3, [r3, #8]
 800a9f2:	005b      	lsls	r3, r3, #1
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	1ad3      	subs	r3, r2, r3
 800a9f8:	b29a      	uxth	r2, r3
 800a9fa:	4b0b      	ldr	r3, [pc, #44]	@ (800aa28 <dfifo_device_init+0xb0>)
 800a9fc:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 800a9fe:	4b0a      	ldr	r3, [pc, #40]	@ (800aa28 <dfifo_device_init+0xb0>)
 800aa00:	889b      	ldrh	r3, [r3, #4]
 800aa02:	461a      	mov	r2, r3
 800aa04:	4613      	mov	r3, r2
 800aa06:	041b      	lsls	r3, r3, #16
 800aa08:	441a      	add	r2, r3
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 800aa0e:	79fb      	ldrb	r3, [r7, #7]
 800aa10:	2240      	movs	r2, #64	@ 0x40
 800aa12:	2180      	movs	r1, #128	@ 0x80
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7ff fecd 	bl	800a7b4 <dfifo_alloc>
}
 800aa1a:	bf00      	nop
 800aa1c:	3720      	adds	r7, #32
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	0800efe4 	.word	0x0800efe4
 800aa28:	200018e4 	.word	0x200018e4

0800aa2c <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 800aa2c:	b480      	push	{r7}
 800aa2e:	b08b      	sub	sp, #44	@ 0x2c
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	4603      	mov	r3, r0
 800aa34:	6039      	str	r1, [r7, #0]
 800aa36:	71fb      	strb	r3, [r7, #7]
 800aa38:	79fb      	ldrb	r3, [r7, #7]
 800aa3a:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800aa3c:	7c7b      	ldrb	r3, [r7, #17]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d001      	beq.n	800aa46 <edpt_activate+0x1a>
    rhport = 0;
 800aa42:	2300      	movs	r3, #0
 800aa44:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800aa46:	7c7b      	ldrb	r3, [r7, #17]
 800aa48:	4a45      	ldr	r2, [pc, #276]	@ (800ab60 <edpt_activate+0x134>)
 800aa4a:	011b      	lsls	r3, r3, #4
 800aa4c:	4413      	add	r3, r2
 800aa4e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800aa50:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	789b      	ldrb	r3, [r3, #2]
 800aa56:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800aa58:	7cbb      	ldrb	r3, [r7, #18]
 800aa5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	789b      	ldrb	r3, [r3, #2]
 800aa68:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800aa6a:	7cfb      	ldrb	r3, [r7, #19]
 800aa6c:	09db      	lsrs	r3, r3, #7
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 800aa74:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800aa78:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800aa7c:	0052      	lsls	r2, r2, #1
 800aa7e:	4413      	add	r3, r2
 800aa80:	011b      	lsls	r3, r3, #4
 800aa82:	4a38      	ldr	r2, [pc, #224]	@ (800ab64 <edpt_activate+0x138>)
 800aa84:	4413      	add	r3, r2
 800aa86:	61fb      	str	r3, [r7, #28]
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	889b      	ldrh	r3, [r3, #4]
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa96:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	799a      	ldrb	r2, [r3, #6]
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	731a      	strb	r2, [r3, #12]

  // Endpoint control
  dwc2_depctl_t depctl = {.value = 0};
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	60fb      	str	r3, [r7, #12]
  depctl.mps = xfer->max_size;
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	895b      	ldrh	r3, [r3, #10]
 800aaac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	89bb      	ldrh	r3, [r7, #12]
 800aab4:	f362 030a 	bfi	r3, r2, #0, #11
 800aab8:	81bb      	strh	r3, [r7, #12]
  depctl.active = 1;
 800aaba:	7b7b      	ldrb	r3, [r7, #13]
 800aabc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aac0:	737b      	strb	r3, [r7, #13]
  depctl.type = p_endpoint_desc->bmAttributes.xfer;
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	78db      	ldrb	r3, [r3, #3]
 800aac6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800aaca:	b2da      	uxtb	r2, r3
 800aacc:	7bbb      	ldrb	r3, [r7, #14]
 800aace:	f362 0383 	bfi	r3, r2, #2, #2
 800aad2:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	78db      	ldrb	r3, [r3, #3]
 800aad8:	f003 0303 	and.w	r3, r3, #3
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d003      	beq.n	800aaea <edpt_activate+0xbe>
    depctl.set_data0_iso_even = 1;
 800aae2:	7bfb      	ldrb	r3, [r7, #15]
 800aae4:	f043 0310 	orr.w	r3, r3, #16
 800aae8:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 800aaea:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d108      	bne.n	800ab04 <edpt_activate+0xd8>
    depctl.tx_fifo_num = epnum;
 800aaf2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aaf6:	f003 030f 	and.w	r3, r3, #15
 800aafa:	b2da      	uxtb	r2, r3
 800aafc:	89fb      	ldrh	r3, [r7, #14]
 800aafe:	f362 1389 	bfi	r3, r2, #6, #4
 800ab02:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800ab04:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	bf14      	ite	ne
 800ab0c:	2301      	movne	r3, #1
 800ab0e:	2300      	moveq	r3, #0
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	461a      	mov	r2, r3
 800ab14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ab18:	0112      	lsls	r2, r2, #4
 800ab1a:	4413      	add	r3, r2
 800ab1c:	3348      	adds	r3, #72	@ 0x48
 800ab1e:	015b      	lsls	r3, r3, #5
 800ab20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab22:	4413      	add	r3, r2
 800ab24:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 800ab2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2e:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 800ab32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ab36:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 800ab3a:	2901      	cmp	r1, #1
 800ab3c:	d101      	bne.n	800ab42 <edpt_activate+0x116>
 800ab3e:	2100      	movs	r1, #0
 800ab40:	e000      	b.n	800ab44 <edpt_activate+0x118>
 800ab42:	2110      	movs	r1, #16
 800ab44:	440b      	add	r3, r1
 800ab46:	2101      	movs	r1, #1
 800ab48:	fa01 f303 	lsl.w	r3, r1, r3
 800ab4c:	431a      	orrs	r2, r3
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab50:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 800ab54:	bf00      	nop
 800ab56:	372c      	adds	r7, #44	@ 0x2c
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr
 800ab60:	0800efe4 	.word	0x0800efe4
 800ab64:	20001864 	.word	0x20001864

0800ab68 <edpt_disable>:

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 800ab68:	b480      	push	{r7}
 800ab6a:	b089      	sub	sp, #36	@ 0x24
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	4603      	mov	r3, r0
 800ab70:	71fb      	strb	r3, [r7, #7]
 800ab72:	460b      	mov	r3, r1
 800ab74:	71bb      	strb	r3, [r7, #6]
 800ab76:	4613      	mov	r3, r2
 800ab78:	717b      	strb	r3, [r7, #5]
 800ab7a:	79fb      	ldrb	r3, [r7, #7]
 800ab7c:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ab7e:	7c7b      	ldrb	r3, [r7, #17]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d001      	beq.n	800ab88 <edpt_disable+0x20>
    rhport = 0;
 800ab84:	2300      	movs	r3, #0
 800ab86:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800ab88:	7c7b      	ldrb	r3, [r7, #17]
 800ab8a:	4a5b      	ldr	r2, [pc, #364]	@ (800acf8 <edpt_disable+0x190>)
 800ab8c:	011b      	lsls	r3, r3, #4
 800ab8e:	4413      	add	r3, r2
 800ab90:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800ab92:	61fb      	str	r3, [r7, #28]
 800ab94:	79bb      	ldrb	r3, [r7, #6]
 800ab96:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800ab98:	7cbb      	ldrb	r3, [r7, #18]
 800ab9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab9e:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 800aba0:	76fb      	strb	r3, [r7, #27]
 800aba2:	79bb      	ldrb	r3, [r7, #6]
 800aba4:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800aba6:	7cfb      	ldrb	r3, [r7, #19]
 800aba8:	09db      	lsrs	r3, r3, #7
 800abaa:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 800abac:	76bb      	strb	r3, [r7, #26]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800abae:	7ebb      	ldrb	r3, [r7, #26]
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	bf14      	ite	ne
 800abb4:	2301      	movne	r3, #1
 800abb6:	2300      	moveq	r3, #0
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	461a      	mov	r2, r3
 800abbc:	7efb      	ldrb	r3, [r7, #27]
 800abbe:	0112      	lsls	r2, r2, #4
 800abc0:	4413      	add	r3, r2
 800abc2:	3348      	adds	r3, #72	@ 0x48
 800abc4:	015b      	lsls	r3, r3, #5
 800abc6:	69fa      	ldr	r2, [r7, #28]
 800abc8:	4413      	add	r3, r2
 800abca:	617b      	str	r3, [r7, #20]

  if (dir == TUSB_DIR_IN) {
 800abcc:	7ebb      	ldrb	r3, [r7, #26]
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d149      	bne.n	800ac66 <edpt_disable+0xfe>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 800abd2:	7efb      	ldrb	r3, [r7, #27]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d003      	beq.n	800abe0 <edpt_disable+0x78>
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	db0d      	blt.n	800abfc <edpt_disable+0x94>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	797a      	ldrb	r2, [r7, #5]
 800abe6:	2a00      	cmp	r2, #0
 800abe8:	d002      	beq.n	800abf0 <edpt_disable+0x88>
 800abea:	f04f 6202 	mov.w	r2, #136314880	@ 0x8200000
 800abee:	e001      	b.n	800abf4 <edpt_disable+0x8c>
 800abf0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800abf4:	431a      	orrs	r2, r3
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	601a      	str	r2, [r3, #0]
 800abfa:	e022      	b.n	800ac42 <edpt_disable+0xda>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      dep->diepctl |= DIEPCTL_SNAK;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 800ac08:	bf00      	nop
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d0f9      	beq.n	800ac0a <edpt_disable+0xa2>

      // Disable the endpoint.
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	797a      	ldrb	r2, [r7, #5]
 800ac1c:	2a00      	cmp	r2, #0
 800ac1e:	d001      	beq.n	800ac24 <edpt_disable+0xbc>
 800ac20:	4a36      	ldr	r2, [pc, #216]	@ (800acfc <edpt_disable+0x194>)
 800ac22:	e001      	b.n	800ac28 <edpt_disable+0xc0>
 800ac24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800ac28:	431a      	orrs	r2, r3
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 800ac2e:	bf00      	nop
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	f003 0302 	and.w	r3, r3, #2
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d0f9      	beq.n	800ac30 <edpt_disable+0xc8>

      dep->diepint = DIEPINT_EPDISD;
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	2202      	movs	r2, #2
 800ac40:	609a      	str	r2, [r3, #8]
 800ac42:	69fb      	ldr	r3, [r7, #28]
 800ac44:	60fb      	str	r3, [r7, #12]
 800ac46:	7efb      	ldrb	r3, [r7, #27]
 800ac48:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800ac4a:	7afb      	ldrb	r3, [r7, #11]
 800ac4c:	019b      	lsls	r3, r3, #6
 800ac4e:	f043 0220 	orr.w	r2, r3, #32
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800ac56:	bf00      	nop
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	f003 0320 	and.w	r3, r3, #32
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1f9      	bne.n	800ac58 <edpt_disable+0xf0>
}
 800ac64:	e041      	b.n	800acea <edpt_disable+0x182>

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dfifo_flush_tx(dwc2, epnum);
  } else {
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 800ac66:	7efb      	ldrb	r3, [r7, #27]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d003      	beq.n	800ac74 <edpt_disable+0x10c>
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	db0c      	blt.n	800ac8e <edpt_disable+0x126>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	797a      	ldrb	r2, [r7, #5]
 800ac7a:	2a00      	cmp	r2, #0
 800ac7c:	d002      	beq.n	800ac84 <edpt_disable+0x11c>
 800ac7e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800ac82:	e000      	b.n	800ac86 <edpt_disable+0x11e>
 800ac84:	2200      	movs	r2, #0
 800ac86:	431a      	orrs	r2, r3
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	601a      	str	r2, [r3, #0]
 800ac8c:	e02d      	b.n	800acea <edpt_disable+0x182>
    } else {
      // Asserting GONAK is required to STALL an OUT endpoint.
      // Simpler to use polling here, we don't use the "B"OUTNAKEFF interrupt
      // anyway, and it can't be cleared by user code. If this while loop never
      // finishes, we have bigger problems than just the stack.
      dwc2->dctl |= DCTL_SGONAK;
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800ac94:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 800ac9e:	bf00      	nop
 800aca0:	69fb      	ldr	r3, [r7, #28]
 800aca2:	695b      	ldr	r3, [r3, #20]
 800aca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d0f9      	beq.n	800aca0 <edpt_disable+0x138>

      // Ditto here disable the endpoint.
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	797a      	ldrb	r2, [r7, #5]
 800acb2:	2a00      	cmp	r2, #0
 800acb4:	d001      	beq.n	800acba <edpt_disable+0x152>
 800acb6:	4a11      	ldr	r2, [pc, #68]	@ (800acfc <edpt_disable+0x194>)
 800acb8:	e001      	b.n	800acbe <edpt_disable+0x156>
 800acba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800acbe:	431a      	orrs	r2, r3
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	601a      	str	r2, [r3, #0]
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 800acc4:	bf00      	nop
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	f003 0302 	and.w	r3, r3, #2
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d0f9      	beq.n	800acc6 <edpt_disable+0x15e>

      dep->doepint = DOEPINT_EPDISD;
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2202      	movs	r2, #2
 800acd6:	609a      	str	r2, [r3, #8]

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
 800acd8:	69fb      	ldr	r3, [r7, #28]
 800acda:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800acde:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
  }
}
 800ace8:	bf00      	nop
 800acea:	bf00      	nop
 800acec:	3724      	adds	r7, #36	@ 0x24
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	0800efe4 	.word	0x0800efe4
 800acfc:	40200000 	.word	0x40200000

0800ad00 <edpt_schedule_packets>:

// Since this function returns void, it is not possible to return a boolean success message
// We must make sure that this function is not called when the EP is disabled
// Must be called from critical section
static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b090      	sub	sp, #64	@ 0x40
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	4603      	mov	r3, r0
 800ad08:	71fb      	strb	r3, [r7, #7]
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	71bb      	strb	r3, [r7, #6]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	717b      	strb	r3, [r7, #5]
 800ad12:	79fb      	ldrb	r3, [r7, #7]
 800ad14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ad18:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d002      	beq.n	800ad26 <edpt_schedule_packets+0x26>
    rhport = 0;
 800ad20:	2300      	movs	r3, #0
 800ad22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800ad26:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ad2a:	4a65      	ldr	r2, [pc, #404]	@ (800aec0 <edpt_schedule_packets+0x1c0>)
 800ad2c:	011b      	lsls	r3, r3, #4
 800ad2e:	4413      	add	r3, r2
 800ad30:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800ad32:	63bb      	str	r3, [r7, #56]	@ 0x38
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 800ad34:	79ba      	ldrb	r2, [r7, #6]
 800ad36:	797b      	ldrb	r3, [r7, #5]
 800ad38:	0052      	lsls	r2, r2, #1
 800ad3a:	4413      	add	r3, r2
 800ad3c:	011b      	lsls	r3, r3, #4
 800ad3e:	4a61      	ldr	r2, [pc, #388]	@ (800aec4 <edpt_schedule_packets+0x1c4>)
 800ad40:	4413      	add	r3, r2
 800ad42:	637b      	str	r3, [r7, #52]	@ 0x34
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800ad44:	797b      	ldrb	r3, [r7, #5]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	bf14      	ite	ne
 800ad4a:	2301      	movne	r3, #1
 800ad4c:	2300      	moveq	r3, #0
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	461a      	mov	r2, r3
 800ad52:	79bb      	ldrb	r3, [r7, #6]
 800ad54:	0112      	lsls	r2, r2, #4
 800ad56:	4413      	add	r3, r2
 800ad58:	3348      	adds	r3, #72	@ 0x48
 800ad5a:	015b      	lsls	r3, r3, #5
 800ad5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ad5e:	4413      	add	r3, r2
 800ad60:	633b      	str	r3, [r7, #48]	@ 0x30

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 800ad62:	79bb      	ldrb	r3, [r7, #6]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d11c      	bne.n	800ada2 <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 800ad68:	797b      	ldrb	r3, [r7, #5]
 800ad6a:	4a57      	ldr	r2, [pc, #348]	@ (800aec8 <edpt_schedule_packets+0x1c8>)
 800ad6c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800ad70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad72:	895b      	ldrh	r3, [r3, #10]
 800ad74:	853a      	strh	r2, [r7, #40]	@ 0x28
 800ad76:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800ad78:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ad7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	bf28      	it	cs
 800ad80:	4613      	movcs	r3, r2
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    _dcd_data.ep0_pending[dir] -= total_bytes;
 800ad86:	797b      	ldrb	r3, [r7, #5]
 800ad88:	4a4f      	ldr	r2, [pc, #316]	@ (800aec8 <edpt_schedule_packets+0x1c8>)
 800ad8a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800ad8e:	797b      	ldrb	r3, [r7, #5]
 800ad90:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800ad92:	1a8a      	subs	r2, r1, r2
 800ad94:	b291      	uxth	r1, r2
 800ad96:	4a4c      	ldr	r2, [pc, #304]	@ (800aec8 <edpt_schedule_packets+0x1c8>)
 800ad98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ada0:	e014      	b.n	800adcc <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 800ada2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ada4:	891b      	ldrh	r3, [r3, #8]
 800ada6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 800ada8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800adaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800adac:	8952      	ldrh	r2, [r2, #10]
 800adae:	623b      	str	r3, [r7, #32]
 800adb0:	61fa      	str	r2, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800adb2:	6a3a      	ldr	r2, [r7, #32]
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	4413      	add	r3, r2
 800adb8:	1e5a      	subs	r2, r3, #1
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800adc0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if (num_packets == 0) {
 800adc2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d101      	bne.n	800adcc <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 800adc8:	2301      	movs	r3, #1
 800adca:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }
  }

  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  dwc2_ep_tsize_t deptsiz = {.value = 0};
 800adcc:	2300      	movs	r3, #0
 800adce:	617b      	str	r3, [r7, #20]
  deptsiz.xfer_size = total_bytes;
 800add0:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800add2:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	f362 0312 	bfi	r3, r2, #0, #19
 800addc:	617b      	str	r3, [r7, #20]
  deptsiz.packet_count = num_packets;
 800adde:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ade0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ade4:	b29a      	uxth	r2, r3
 800ade6:	8afb      	ldrh	r3, [r7, #22]
 800ade8:	f362 03cc 	bfi	r3, r2, #3, #10
 800adec:	82fb      	strh	r3, [r7, #22]
  dep->tsiz = deptsiz.value;
 800adee:	697a      	ldr	r2, [r7, #20]
 800adf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf2:	611a      	str	r2, [r3, #16]

  // control
  dwc2_depctl_t depctl = {.value = dep->ctl};
 800adf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	613b      	str	r3, [r7, #16]
  depctl.clear_nak = 1;
 800adfa:	7cfb      	ldrb	r3, [r7, #19]
 800adfc:	f043 0304 	orr.w	r3, r3, #4
 800ae00:	74fb      	strb	r3, [r7, #19]
  depctl.enable = 1;
 800ae02:	7cfb      	ldrb	r3, [r7, #19]
 800ae04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae08:	74fb      	strb	r3, [r7, #19]
  if (depctl.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 800ae0a:	7cbb      	ldrb	r3, [r7, #18]
 800ae0c:	f003 030c 	and.w	r3, r3, #12
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	2b04      	cmp	r3, #4
 800ae14:	d11a      	bne.n	800ae4c <edpt_schedule_packets+0x14c>
 800ae16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae18:	7b1b      	ldrb	r3, [r3, #12]
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d116      	bne.n	800ae4c <edpt_schedule_packets+0x14c>
    const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 800ae1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae20:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800ae24:	60bb      	str	r3, [r7, #8]
    const uint32_t odd_now = dsts.frame_number & 1u;
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	f003 0301 	and.w	r3, r3, #1
 800ae32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (odd_now) {
 800ae34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d004      	beq.n	800ae44 <edpt_schedule_packets+0x144>
      depctl.set_data0_iso_even = 1;
 800ae3a:	7cfb      	ldrb	r3, [r7, #19]
 800ae3c:	f043 0310 	orr.w	r3, r3, #16
 800ae40:	74fb      	strb	r3, [r7, #19]
 800ae42:	e003      	b.n	800ae4c <edpt_schedule_packets+0x14c>
    } else {
      depctl.set_data1_iso_odd = 1;
 800ae44:	7cfb      	ldrb	r3, [r7, #19]
 800ae46:	f043 0320 	orr.w	r3, r3, #32
 800ae4a:	74fb      	strb	r3, [r7, #19]
 800ae4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae4e:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae54:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800ae56:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 800ae58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if(is_dma) {
 800ae5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d015      	beq.n	800ae90 <edpt_schedule_packets+0x190>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 800ae64:	797b      	ldrb	r3, [r7, #5]
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d109      	bne.n	800ae7e <edpt_schedule_packets+0x17e>
 800ae6a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d006      	beq.n	800ae7e <edpt_schedule_packets+0x17e>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 800ae70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800ae76:	4611      	mov	r1, r2
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7fd fd5c 	bl	8008936 <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 800ae7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	461a      	mov	r2, r3
 800ae84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae86:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 800ae88:	693a      	ldr	r2, [r7, #16]
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae8c:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 800ae8e:	e013      	b.n	800aeb8 <edpt_schedule_packets+0x1b8>
    dep->diepctl = depctl.value; // enable endpoint
 800ae90:	693a      	ldr	r2, [r7, #16]
 800ae92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae94:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 800ae96:	797b      	ldrb	r3, [r7, #5]
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d10d      	bne.n	800aeb8 <edpt_schedule_packets+0x1b8>
 800ae9c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d00a      	beq.n	800aeb8 <edpt_schedule_packets+0x1b8>
      dwc2->diepempmsk |= (1 << epnum);
 800aea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea4:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800aea8:	79ba      	ldrb	r2, [r7, #6]
 800aeaa:	2101      	movs	r1, #1
 800aeac:	fa01 f202 	lsl.w	r2, r1, r2
 800aeb0:	431a      	orrs	r2, r3
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb4:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 800aeb8:	bf00      	nop
 800aeba:	3740      	adds	r7, #64	@ 0x40
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	0800efe4 	.word	0x0800efe4
 800aec4:	20001864 	.word	0x20001864
 800aec8:	200018e4 	.word	0x200018e4

0800aecc <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800aecc:	b580      	push	{r7, lr}
 800aece:	b08c      	sub	sp, #48	@ 0x30
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	4603      	mov	r3, r0
 800aed4:	6039      	str	r1, [r7, #0]
 800aed6:	71fb      	strb	r3, [r7, #7]
 800aed8:	79fb      	ldrb	r3, [r7, #7]
 800aeda:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800aedc:	7dfb      	ldrb	r3, [r7, #23]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d001      	beq.n	800aee6 <dcd_init+0x1a>
    rhport = 0;
 800aee2:	2300      	movs	r3, #0
 800aee4:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800aee6:	7dfb      	ldrb	r3, [r7, #23]
 800aee8:	4a43      	ldr	r2, [pc, #268]	@ (800aff8 <dcd_init+0x12c>)
 800aeea:	011b      	lsls	r3, r3, #4
 800aeec:	4413      	add	r3, r2
 800aeee:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800aef0:	62bb      	str	r3, [r7, #40]	@ 0x28

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 800aef2:	2208      	movs	r2, #8
 800aef4:	2100      	movs	r1, #0
 800aef6:	4841      	ldr	r0, [pc, #260]	@ (800affc <dcd_init+0x130>)
 800aef8:	f001 fe9d 	bl	800cc36 <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 800aefc:	2101      	movs	r1, #1
 800aefe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af00:	f001 f9c6 	bl	800c290 <dwc2_core_is_highspeed>
 800af04:	4603      	mov	r3, r0
 800af06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800af0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af0c:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af12:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800af14:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800af16:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 800af1a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800af1e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800af22:	79fb      	ldrb	r3, [r7, #7]
 800af24:	4618      	mov	r0, r3
 800af26:	f001 f9d1 	bl	800c2cc <dwc2_core_init>
 800af2a:	4603      	mov	r3, r0
 800af2c:	f083 0301 	eor.w	r3, r3, #1
 800af30:	b2db      	uxtb	r3, r3
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00a      	beq.n	800af4c <dcd_init+0x80>
 800af36:	4b32      	ldr	r3, [pc, #200]	@ (800b000 <dcd_init+0x134>)
 800af38:	61fb      	str	r3, [r7, #28]
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f003 0301 	and.w	r3, r3, #1
 800af42:	2b00      	cmp	r3, #0
 800af44:	d000      	beq.n	800af48 <dcd_init+0x7c>
 800af46:	be00      	bkpt	0x0000
 800af48:	2300      	movs	r3, #0
 800af4a:	e050      	b.n	800afee <dcd_init+0x122>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 800af4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af4e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800af52:	f023 0303 	bic.w	r3, r3, #3
 800af56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (is_highspeed) {
 800af58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00d      	beq.n	800af7c <dcd_init+0xb0>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800af60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af64:	60fb      	str	r3, [r7, #12]
    if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800af66:	7b3b      	ldrb	r3, [r7, #12]
 800af68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	2b80      	cmp	r3, #128	@ 0x80
 800af70:	d108      	bne.n	800af84 <dcd_init+0xb8>
      dcfg |= DCFG_XCVRDLY;
 800af72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800af78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af7a:	e003      	b.n	800af84 <dcd_init+0xb8>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 800af7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af7e:	f043 0303 	orr.w	r3, r3, #3
 800af82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 800af84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af86:	f043 0304 	orr.w	r3, r3, #4
 800af8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2->dcfg = dcfg;
 800af8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af90:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 800af94:	79fb      	ldrb	r3, [r7, #7]
 800af96:	4618      	mov	r0, r3
 800af98:	f000 f92a 	bl	800b1f0 <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 800af9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800afa4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800afa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afaa:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 800afac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 800afb4:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 800afb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afba:	601a      	str	r2, [r3, #0]
  // No hardware detection of Vbus B-session is available on the STM32N6
  dwc2->stm32_gccfg |= STM32_GCCFG_VBVALOVAL;
#endif

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 800afbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afbe:	699a      	ldr	r2, [r3, #24]
 800afc0:	4b10      	ldr	r3, [pc, #64]	@ (800b004 <dcd_init+0x138>)
 800afc2:	4313      	orrs	r3, r2
 800afc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afc6:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 800afc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 800afce:	6a3b      	ldr	r3, [r7, #32]
 800afd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afd4:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 800afd6:	6a3b      	ldr	r3, [r7, #32]
 800afd8:	f043 0301 	orr.w	r3, r3, #1
 800afdc:	623b      	str	r3, [r7, #32]
  dwc2->gahbcfg = gahbcfg;
 800afde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe0:	6a3a      	ldr	r2, [r7, #32]
 800afe2:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 800afe4:	79fb      	ldrb	r3, [r7, #7]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f000 f8e0 	bl	800b1ac <dcd_connect>
  return true;
 800afec:	2301      	movs	r3, #1
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3730      	adds	r7, #48	@ 0x30
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	0800efe4 	.word	0x0800efe4
 800affc:	200018e4 	.word	0x200018e4
 800b000:	e000edf0 	.word	0xe000edf0
 800b004:	80003804 	.word	0x80003804

0800b008 <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	4603      	mov	r3, r0
 800b010:	71fb      	strb	r3, [r7, #7]
 800b012:	79fb      	ldrb	r3, [r7, #7]
 800b014:	73fb      	strb	r3, [r7, #15]
 800b016:	2301      	movs	r3, #1
 800b018:	73bb      	strb	r3, [r7, #14]
 800b01a:	2301      	movs	r3, #1
 800b01c:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800b01e:	7bfb      	ldrb	r3, [r7, #15]
 800b020:	4a0c      	ldr	r2, [pc, #48]	@ (800b054 <dcd_int_enable+0x4c>)
 800b022:	011b      	lsls	r3, r3, #4
 800b024:	4413      	add	r3, r2
 800b026:	3304      	adds	r3, #4
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800b02c:	7b7b      	ldrb	r3, [r7, #13]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d005      	beq.n	800b03e <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 800b032:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b036:	4618      	mov	r0, r3
 800b038:	f7ff fb3e 	bl	800a6b8 <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 800b03c:	e004      	b.n	800b048 <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 800b03e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b042:	4618      	mov	r0, r3
 800b044:	f7ff fb56 	bl	800a6f4 <__NVIC_DisableIRQ>
}
 800b048:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 800b04a:	bf00      	nop
 800b04c:	3710      	adds	r7, #16
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	0800efe4 	.word	0x0800efe4

0800b058 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	4603      	mov	r3, r0
 800b060:	71fb      	strb	r3, [r7, #7]
 800b062:	79fb      	ldrb	r3, [r7, #7]
 800b064:	73fb      	strb	r3, [r7, #15]
 800b066:	2301      	movs	r3, #1
 800b068:	73bb      	strb	r3, [r7, #14]
 800b06a:	2300      	movs	r3, #0
 800b06c:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800b06e:	7bfb      	ldrb	r3, [r7, #15]
 800b070:	4a0c      	ldr	r2, [pc, #48]	@ (800b0a4 <dcd_int_disable+0x4c>)
 800b072:	011b      	lsls	r3, r3, #4
 800b074:	4413      	add	r3, r2
 800b076:	3304      	adds	r3, #4
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800b07c:	7b7b      	ldrb	r3, [r7, #13]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d005      	beq.n	800b08e <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 800b082:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b086:	4618      	mov	r0, r3
 800b088:	f7ff fb16 	bl	800a6b8 <__NVIC_EnableIRQ>
}
 800b08c:	e004      	b.n	800b098 <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 800b08e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b092:	4618      	mov	r0, r3
 800b094:	f7ff fb2e 	bl	800a6f4 <__NVIC_DisableIRQ>
}
 800b098:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 800b09a:	bf00      	nop
 800b09c:	3710      	adds	r7, #16
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	0800efe4 	.word	0x0800efe4

0800b0a8 <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	460a      	mov	r2, r1
 800b0b2:	71fb      	strb	r3, [r7, #7]
 800b0b4:	4613      	mov	r3, r2
 800b0b6:	71bb      	strb	r3, [r7, #6]
 800b0b8:	79fb      	ldrb	r3, [r7, #7]
 800b0ba:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b0bc:	7a7b      	ldrb	r3, [r7, #9]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d001      	beq.n	800b0c6 <dcd_set_address+0x1e>
    rhport = 0;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b0c6:	7a7b      	ldrb	r3, [r7, #9]
 800b0c8:	4a14      	ldr	r2, [pc, #80]	@ (800b11c <dcd_set_address+0x74>)
 800b0ca:	011b      	lsls	r3, r3, #4
 800b0cc:	4413      	add	r3, r2
 800b0ce:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b0d0:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b0d8:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 800b0dc:	79bb      	ldrb	r3, [r7, #6]
 800b0de:	011b      	lsls	r3, r3, #4
 800b0e0:	431a      	orrs	r2, r3
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	72fb      	strb	r3, [r7, #11]
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 800b0f0:	7abb      	ldrb	r3, [r7, #10]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d002      	beq.n	800b0fc <dcd_set_address+0x54>
 800b0f6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800b0fa:	e000      	b.n	800b0fe <dcd_set_address+0x56>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800b102:	4313      	orrs	r3, r2
 800b104:	b25b      	sxtb	r3, r3
 800b106:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 800b108:	79f8      	ldrb	r0, [r7, #7]
 800b10a:	2300      	movs	r3, #0
 800b10c:	2200      	movs	r2, #0
 800b10e:	f000 f98b 	bl	800b428 <dcd_edpt_xfer>
}
 800b112:	bf00      	nop
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	0800efe4 	.word	0x0800efe4

0800b120 <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 800b120:	b480      	push	{r7}
 800b122:	b087      	sub	sp, #28
 800b124:	af00      	add	r7, sp, #0
 800b126:	4603      	mov	r3, r0
 800b128:	71fb      	strb	r3, [r7, #7]
 800b12a:	79fb      	ldrb	r3, [r7, #7]
 800b12c:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b12e:	7bfb      	ldrb	r3, [r7, #15]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d001      	beq.n	800b138 <dcd_remote_wakeup+0x18>
    rhport = 0;
 800b134:	2300      	movs	r3, #0
 800b136:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b138:	7bfb      	ldrb	r3, [r7, #15]
 800b13a:	4a19      	ldr	r2, [pc, #100]	@ (800b1a0 <dcd_remote_wakeup+0x80>)
 800b13c:	011b      	lsls	r3, r3, #4
 800b13e:	4413      	add	r3, r2
 800b140:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b142:	617b      	str	r3, [r7, #20]

  // set remote wakeup
  dwc2->dctl |= DCTL_RWUSIG;
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b14a:	f043 0201 	orr.w	r2, r3, #1
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  // enable SOF to detect bus resume
  dwc2->gintsts = GINTSTS_SOF;
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	2208      	movs	r2, #8
 800b158:	615a      	str	r2, [r3, #20]
  dwc2->gintmsk |= GINTMSK_SOFM;
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	699b      	ldr	r3, [r3, #24]
 800b15e:	f043 0208 	orr.w	r2, r3, #8
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	619a      	str	r2, [r3, #24]
#define dwc2_dcd_int_disable(_rhport) dwc2_int_set(_rhport, TUSB_ROLE_DEVICE, false)


TU_ATTR_ALWAYS_INLINE static inline void dwc2_remote_wakeup_delay(void) {
  // try to delay for 1 ms
  uint32_t count = SystemCoreClock / 1000;
 800b166:	4b0f      	ldr	r3, [pc, #60]	@ (800b1a4 <dcd_remote_wakeup+0x84>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a0f      	ldr	r2, [pc, #60]	@ (800b1a8 <dcd_remote_wakeup+0x88>)
 800b16c:	fba2 2303 	umull	r2, r3, r2, r3
 800b170:	099b      	lsrs	r3, r3, #6
 800b172:	613b      	str	r3, [r7, #16]
  while (count--) __NOP();
 800b174:	e000      	b.n	800b178 <dcd_remote_wakeup+0x58>
 800b176:	bf00      	nop
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	1e5a      	subs	r2, r3, #1
 800b17c:	613a      	str	r2, [r7, #16]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1f9      	bne.n	800b176 <dcd_remote_wakeup+0x56>
}
 800b182:	bf00      	nop

  // Per specs: remote wakeup signal bit must be clear within 1-15ms
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b18a:	f023 0201 	bic.w	r2, r3, #1
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800b194:	bf00      	nop
 800b196:	371c      	adds	r7, #28
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr
 800b1a0:	0800efe4 	.word	0x0800efe4
 800b1a4:	20000208 	.word	0x20000208
 800b1a8:	10624dd3 	.word	0x10624dd3

0800b1ac <dcd_connect>:

void dcd_connect(uint8_t rhport) {
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	71fb      	strb	r3, [r7, #7]
 800b1b6:	79fb      	ldrb	r3, [r7, #7]
 800b1b8:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b1ba:	7afb      	ldrb	r3, [r7, #11]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d001      	beq.n	800b1c4 <dcd_connect+0x18>
    rhport = 0;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b1c4:	7afb      	ldrb	r3, [r7, #11]
 800b1c6:	4a09      	ldr	r2, [pc, #36]	@ (800b1ec <dcd_connect+0x40>)
 800b1c8:	011b      	lsls	r3, r3, #4
 800b1ca:	4413      	add	r3, r2
 800b1cc:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b1ce:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b1d6:	f023 0202 	bic.w	r2, r3, #2
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800b1e0:	bf00      	nop
 800b1e2:	3714      	adds	r7, #20
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr
 800b1ec:	0800efe4 	.word	0x0800efe4

0800b1f0 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	71fb      	strb	r3, [r7, #7]
 800b1fa:	79fb      	ldrb	r3, [r7, #7]
 800b1fc:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b1fe:	7afb      	ldrb	r3, [r7, #11]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d001      	beq.n	800b208 <dcd_disconnect+0x18>
    rhport = 0;
 800b204:	2300      	movs	r3, #0
 800b206:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b208:	7afb      	ldrb	r3, [r7, #11]
 800b20a:	4a09      	ldr	r2, [pc, #36]	@ (800b230 <dcd_disconnect+0x40>)
 800b20c:	011b      	lsls	r3, r3, #4
 800b20e:	4413      	add	r3, r2
 800b210:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b212:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b21a:	f043 0202 	orr.w	r2, r3, #2
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800b224:	bf00      	nop
 800b226:	3714      	adds	r7, #20
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	0800efe4 	.word	0x0800efe4

0800b234 <dcd_sof_enable>:

// Be advised: audio, video and possibly other iso-ep classes use dcd_sof_enable() to enable/disable its corresponding ISR on purpose!
void dcd_sof_enable(uint8_t rhport, bool en) {
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
 800b23a:	4603      	mov	r3, r0
 800b23c:	460a      	mov	r2, r1
 800b23e:	71fb      	strb	r3, [r7, #7]
 800b240:	4613      	mov	r3, r2
 800b242:	71bb      	strb	r3, [r7, #6]
 800b244:	79fb      	ldrb	r3, [r7, #7]
 800b246:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b248:	7afb      	ldrb	r3, [r7, #11]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d001      	beq.n	800b252 <dcd_sof_enable+0x1e>
    rhport = 0;
 800b24e:	2300      	movs	r3, #0
 800b250:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b252:	7afb      	ldrb	r3, [r7, #11]
 800b254:	4a10      	ldr	r2, [pc, #64]	@ (800b298 <dcd_sof_enable+0x64>)
 800b256:	011b      	lsls	r3, r3, #4
 800b258:	4413      	add	r3, r2
 800b25a:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b25c:	60fb      	str	r3, [r7, #12]

  _dcd_data.sof_en = en;
 800b25e:	4a0f      	ldr	r2, [pc, #60]	@ (800b29c <dcd_sof_enable+0x68>)
 800b260:	79bb      	ldrb	r3, [r7, #6]
 800b262:	71d3      	strb	r3, [r2, #7]

  if (en) {
 800b264:	79bb      	ldrb	r3, [r7, #6]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d009      	beq.n	800b27e <dcd_sof_enable+0x4a>
    dwc2->gintsts = GINTSTS_SOF;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2208      	movs	r2, #8
 800b26e:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	699b      	ldr	r3, [r3, #24]
 800b274:	f043 0208 	orr.w	r2, r3, #8
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	619a      	str	r2, [r3, #24]
  } else {
    dwc2->gintmsk &= ~GINTMSK_SOFM;
  }
}
 800b27c:	e005      	b.n	800b28a <dcd_sof_enable+0x56>
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	699b      	ldr	r3, [r3, #24]
 800b282:	f023 0208 	bic.w	r2, r3, #8
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	619a      	str	r2, [r3, #24]
}
 800b28a:	bf00      	nop
 800b28c:	3714      	adds	r7, #20
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr
 800b296:	bf00      	nop
 800b298:	0800efe4 	.word	0x0800efe4
 800b29c:	200018e4 	.word	0x200018e4

0800b2a0 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	6039      	str	r1, [r7, #0]
 800b2aa:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	7899      	ldrb	r1, [r3, #2]
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	889b      	ldrh	r3, [r3, #4]
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	79fb      	ldrb	r3, [r7, #7]
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7ff fa76 	bl	800a7b4 <dfifo_alloc>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	f083 0301 	eor.w	r3, r3, #1
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00a      	beq.n	800b2ea <dcd_edpt_open+0x4a>
 800b2d4:	4b0a      	ldr	r3, [pc, #40]	@ (800b300 <dcd_edpt_open+0x60>)
 800b2d6:	60fb      	str	r3, [r7, #12]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f003 0301 	and.w	r3, r3, #1
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d000      	beq.n	800b2e6 <dcd_edpt_open+0x46>
 800b2e4:	be00      	bkpt	0x0000
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	e005      	b.n	800b2f6 <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 800b2ea:	79fb      	ldrb	r3, [r7, #7]
 800b2ec:	6839      	ldr	r1, [r7, #0]
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7ff fb9c 	bl	800aa2c <edpt_activate>
  return true;
 800b2f4:	2301      	movs	r3, #1
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3710      	adds	r7, #16
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	e000edf0 	.word	0xe000edf0

0800b304 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 800b304:	b580      	push	{r7, lr}
 800b306:	b08a      	sub	sp, #40	@ 0x28
 800b308:	af00      	add	r7, sp, #0
 800b30a:	4603      	mov	r3, r0
 800b30c:	71fb      	strb	r3, [r7, #7]
 800b30e:	79fb      	ldrb	r3, [r7, #7]
 800b310:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b312:	7dfb      	ldrb	r3, [r7, #23]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d001      	beq.n	800b31c <dcd_edpt_close_all+0x18>
    rhport = 0;
 800b318:	2300      	movs	r3, #0
 800b31a:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b31c:	7dfb      	ldrb	r3, [r7, #23]
 800b31e:	4a3f      	ldr	r2, [pc, #252]	@ (800b41c <dcd_edpt_close_all+0x118>)
 800b320:	011b      	lsls	r3, r3, #4
 800b322:	4413      	add	r3, r2
 800b324:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b326:	623b      	str	r3, [r7, #32]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800b328:	79fb      	ldrb	r3, [r7, #7]
 800b32a:	4a3c      	ldr	r2, [pc, #240]	@ (800b41c <dcd_edpt_close_all+0x118>)
 800b32c:	011b      	lsls	r3, r3, #4
 800b32e:	4413      	add	r3, r2
 800b330:	3308      	adds	r3, #8
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	77fb      	strb	r3, [r7, #31]

  usbd_spin_lock(false);
 800b336:	2000      	movs	r0, #0
 800b338:	f7fe fd4a 	bl	8009dd0 <usbd_spin_lock>

  _dcd_data.allocated_epin_count = 0;
 800b33c:	4b38      	ldr	r3, [pc, #224]	@ (800b420 <dcd_edpt_close_all+0x11c>)
 800b33e:	2200      	movs	r2, #0
 800b340:	719a      	strb	r2, [r3, #6]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 800b342:	6a3b      	ldr	r3, [r7, #32]
 800b344:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800b348:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 800b34c:	2301      	movs	r3, #1
 800b34e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b352:	e034      	b.n	800b3be <dcd_edpt_close_all+0xba>
    for (uint8_t d = 0; d < 2; d++) {
 800b354:	2300      	movs	r3, #0
 800b356:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b35a:	e027      	b.n	800b3ac <dcd_edpt_close_all+0xa8>
      dwc2_dep_t* dep = &dwc2->ep[d][n];
 800b35c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b364:	0112      	lsls	r2, r2, #4
 800b366:	4413      	add	r3, r2
 800b368:	3348      	adds	r3, #72	@ 0x48
 800b36a:	015b      	lsls	r3, r3, #5
 800b36c:	6a3a      	ldr	r2, [r7, #32]
 800b36e:	4413      	add	r3, r2
 800b370:	61bb      	str	r3, [r7, #24]
      if (dep->ctl & EPCTL_EPENA) {
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	da05      	bge.n	800b386 <dcd_edpt_close_all+0x82>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f043 4290 	orr.w	r2, r3, #1207959552	@ 0x48000000
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	601a      	str	r2, [r3, #0]
      }
      xfer_status[n][1-d].max_size = 0;
 800b386:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b38a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b38e:	f1c3 0301 	rsb	r3, r3, #1
 800b392:	4924      	ldr	r1, [pc, #144]	@ (800b424 <dcd_edpt_close_all+0x120>)
 800b394:	0052      	lsls	r2, r2, #1
 800b396:	4413      	add	r3, r2
 800b398:	011b      	lsls	r3, r3, #4
 800b39a:	440b      	add	r3, r1
 800b39c:	330a      	adds	r3, #10
 800b39e:	2200      	movs	r2, #0
 800b3a0:	801a      	strh	r2, [r3, #0]
    for (uint8_t d = 0; d < 2; d++) {
 800b3a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b3ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d9d3      	bls.n	800b35c <dcd_edpt_close_all+0x58>
  for (uint8_t n = 1; n < ep_count; n++) {
 800b3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b3be:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b3c2:	7ffb      	ldrb	r3, [r7, #31]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d3c5      	bcc.n	800b354 <dcd_edpt_close_all+0x50>
 800b3c8:	6a3b      	ldr	r3, [r7, #32]
 800b3ca:	60fb      	str	r3, [r7, #12]
 800b3cc:	2310      	movs	r3, #16
 800b3ce:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800b3d0:	7afb      	ldrb	r3, [r7, #11]
 800b3d2:	019b      	lsls	r3, r3, #6
 800b3d4:	f043 0220 	orr.w	r2, r3, #32
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800b3dc:	bf00      	nop
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	691b      	ldr	r3, [r3, #16]
 800b3e2:	f003 0320 	and.w	r3, r3, #32
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d1f9      	bne.n	800b3de <dcd_edpt_close_all+0xda>
}
 800b3ea:	bf00      	nop
 800b3ec:	6a3b      	ldr	r3, [r7, #32]
 800b3ee:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	2210      	movs	r2, #16
 800b3f4:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800b3f6:	bf00      	nop
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	f003 0310 	and.w	r3, r3, #16
 800b400:	2b00      	cmp	r3, #0
 800b402:	d1f9      	bne.n	800b3f8 <dcd_edpt_close_all+0xf4>
}
 800b404:	bf00      	nop
    }
  }

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport); // re-init dfifo
 800b406:	79fb      	ldrb	r3, [r7, #7]
 800b408:	4618      	mov	r0, r3
 800b40a:	f7ff fab5 	bl	800a978 <dfifo_device_init>

  usbd_spin_unlock(false);
 800b40e:	2000      	movs	r0, #0
 800b410:	f7fe fcf8 	bl	8009e04 <usbd_spin_unlock>
}
 800b414:	bf00      	nop
 800b416:	3728      	adds	r7, #40	@ 0x28
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	0800efe4 	.word	0x0800efe4
 800b420:	200018e4 	.word	0x200018e4
 800b424:	20001864 	.word	0x20001864

0800b428 <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 800b428:	b580      	push	{r7, lr}
 800b42a:	b086      	sub	sp, #24
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	603a      	str	r2, [r7, #0]
 800b430:	461a      	mov	r2, r3
 800b432:	4603      	mov	r3, r0
 800b434:	71fb      	strb	r3, [r7, #7]
 800b436:	460b      	mov	r3, r1
 800b438:	71bb      	strb	r3, [r7, #6]
 800b43a:	4613      	mov	r3, r2
 800b43c:	80bb      	strh	r3, [r7, #4]
 800b43e:	79bb      	ldrb	r3, [r7, #6]
 800b440:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800b442:	7bbb      	ldrb	r3, [r7, #14]
 800b444:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b448:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800b44a:	75bb      	strb	r3, [r7, #22]
 800b44c:	79bb      	ldrb	r3, [r7, #6]
 800b44e:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800b450:	7bfb      	ldrb	r3, [r7, #15]
 800b452:	09db      	lsrs	r3, r3, #7
 800b454:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800b456:	757b      	strb	r3, [r7, #21]
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 800b458:	7dba      	ldrb	r2, [r7, #22]
 800b45a:	7d7b      	ldrb	r3, [r7, #21]
 800b45c:	0052      	lsls	r2, r2, #1
 800b45e:	4413      	add	r3, r2
 800b460:	011b      	lsls	r3, r3, #4
 800b462:	4a17      	ldr	r2, [pc, #92]	@ (800b4c0 <dcd_edpt_xfer+0x98>)
 800b464:	4413      	add	r3, r2
 800b466:	613b      	str	r3, [r7, #16]
  bool ret;

  usbd_spin_lock(false);
 800b468:	2000      	movs	r0, #0
 800b46a:	f7fe fcb1 	bl	8009dd0 <usbd_spin_lock>

  if (xfer->max_size == 0) {
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	895b      	ldrh	r3, [r3, #10]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d102      	bne.n	800b47c <dcd_edpt_xfer+0x54>
    ret = false;  // Endpoint is closed
 800b476:	2300      	movs	r3, #0
 800b478:	75fb      	strb	r3, [r7, #23]
 800b47a:	e018      	b.n	800b4ae <dcd_edpt_xfer+0x86>
  } else {
    xfer->buffer = buffer;
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	683a      	ldr	r2, [r7, #0]
 800b480:	601a      	str	r2, [r3, #0]
    xfer->ff = NULL;
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	2200      	movs	r2, #0
 800b486:	605a      	str	r2, [r3, #4]
    xfer->total_len = total_bytes;
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	88ba      	ldrh	r2, [r7, #4]
 800b48c:	811a      	strh	r2, [r3, #8]

    // EP0 can only handle one packet
    if (epnum == 0) {
 800b48e:	7dbb      	ldrb	r3, [r7, #22]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d104      	bne.n	800b49e <dcd_edpt_xfer+0x76>
      _dcd_data.ep0_pending[dir] = total_bytes;
 800b494:	7d7b      	ldrb	r3, [r7, #21]
 800b496:	490b      	ldr	r1, [pc, #44]	@ (800b4c4 <dcd_edpt_xfer+0x9c>)
 800b498:	88ba      	ldrh	r2, [r7, #4]
 800b49a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir);
 800b49e:	7d7a      	ldrb	r2, [r7, #21]
 800b4a0:	7db9      	ldrb	r1, [r7, #22]
 800b4a2:	79fb      	ldrb	r3, [r7, #7]
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7ff fc2b 	bl	800ad00 <edpt_schedule_packets>
    ret = true;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	75fb      	strb	r3, [r7, #23]
  }

  usbd_spin_unlock(false);
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	f7fe fca8 	bl	8009e04 <usbd_spin_unlock>

  return ret;
 800b4b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3718      	adds	r7, #24
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	20001864 	.word	0x20001864
 800b4c4:	200018e4 	.word	0x200018e4

0800b4c8 <dcd_edpt_stall>:
  usbd_spin_unlock(false);

  return ret;
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b086      	sub	sp, #24
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	460a      	mov	r2, r1
 800b4d2:	71fb      	strb	r3, [r7, #7]
 800b4d4:	4613      	mov	r3, r2
 800b4d6:	71bb      	strb	r3, [r7, #6]
 800b4d8:	79fb      	ldrb	r3, [r7, #7]
 800b4da:	74bb      	strb	r3, [r7, #18]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b4dc:	7cbb      	ldrb	r3, [r7, #18]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d001      	beq.n	800b4e6 <dcd_edpt_stall+0x1e>
    rhport = 0;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	74bb      	strb	r3, [r7, #18]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b4e6:	7cbb      	ldrb	r3, [r7, #18]
 800b4e8:	4a11      	ldr	r2, [pc, #68]	@ (800b530 <dcd_edpt_stall+0x68>)
 800b4ea:	011b      	lsls	r3, r3, #4
 800b4ec:	4413      	add	r3, r2
 800b4ee:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b4f0:	617b      	str	r3, [r7, #20]
  edpt_disable(rhport, ep_addr, true);
 800b4f2:	79b9      	ldrb	r1, [r7, #6]
 800b4f4:	79fb      	ldrb	r3, [r7, #7]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7ff fb35 	bl	800ab68 <edpt_disable>
 800b4fe:	79bb      	ldrb	r3, [r7, #6]
 800b500:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800b502:	7cfb      	ldrb	r3, [r7, #19]
 800b504:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b508:	b2db      	uxtb	r3, r3
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d10b      	bne.n	800b526 <dcd_edpt_stall+0x5e>
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	60fb      	str	r3, [r7, #12]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b516:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800b518:	2300      	movs	r3, #0
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d003      	beq.n	800b526 <dcd_edpt_stall+0x5e>
    dma_setup_prepare(rhport);
 800b51e:	79fb      	ldrb	r3, [r7, #7]
 800b520:	4618      	mov	r0, r3
 800b522:	f7ff f90b 	bl	800a73c <dma_setup_prepare>
  }
}
 800b526:	bf00      	nop
 800b528:	3718      	adds	r7, #24
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	0800efe4 	.word	0x0800efe4

0800b534 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800b534:	b480      	push	{r7}
 800b536:	b087      	sub	sp, #28
 800b538:	af00      	add	r7, sp, #0
 800b53a:	4603      	mov	r3, r0
 800b53c:	460a      	mov	r2, r1
 800b53e:	71fb      	strb	r3, [r7, #7]
 800b540:	4613      	mov	r3, r2
 800b542:	71bb      	strb	r3, [r7, #6]
 800b544:	79fb      	ldrb	r3, [r7, #7]
 800b546:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b548:	7a7b      	ldrb	r3, [r7, #9]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d001      	beq.n	800b552 <dcd_edpt_clear_stall+0x1e>
    rhport = 0;
 800b54e:	2300      	movs	r3, #0
 800b550:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b552:	7a7b      	ldrb	r3, [r7, #9]
 800b554:	4a19      	ldr	r2, [pc, #100]	@ (800b5bc <dcd_edpt_clear_stall+0x88>)
 800b556:	011b      	lsls	r3, r3, #4
 800b558:	4413      	add	r3, r2
 800b55a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b55c:	617b      	str	r3, [r7, #20]
 800b55e:	79bb      	ldrb	r3, [r7, #6]
 800b560:	72bb      	strb	r3, [r7, #10]
 800b562:	7abb      	ldrb	r3, [r7, #10]
 800b564:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b568:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800b56a:	74fb      	strb	r3, [r7, #19]
 800b56c:	79bb      	ldrb	r3, [r7, #6]
 800b56e:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800b570:	7afb      	ldrb	r3, [r7, #11]
 800b572:	09db      	lsrs	r3, r3, #7
 800b574:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800b576:	74bb      	strb	r3, [r7, #18]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800b578:	7cbb      	ldrb	r3, [r7, #18]
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	bf14      	ite	ne
 800b57e:	2301      	movne	r3, #1
 800b580:	2300      	moveq	r3, #0
 800b582:	b2db      	uxtb	r3, r3
 800b584:	461a      	mov	r2, r3
 800b586:	7cfb      	ldrb	r3, [r7, #19]
 800b588:	0112      	lsls	r2, r2, #4
 800b58a:	4413      	add	r3, r2
 800b58c:	3348      	adds	r3, #72	@ 0x48
 800b58e:	015b      	lsls	r3, r3, #5
 800b590:	697a      	ldr	r2, [r7, #20]
 800b592:	4413      	add	r3, r2
 800b594:	60fb      	str	r3, [r7, #12]

  // Clear stall and reset data toggle
  dep->ctl &= ~EPCTL_STALL;;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	601a      	str	r2, [r3, #0]
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	601a      	str	r2, [r3, #0]
}
 800b5ae:	bf00      	nop
 800b5b0:	371c      	adds	r7, #28
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr
 800b5ba:	bf00      	nop
 800b5bc:	0800efe4 	.word	0x0800efe4

0800b5c0 <handle_bus_reset>:
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
// Must be called from critical section
static void handle_bus_reset(uint8_t rhport) {
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b08e      	sub	sp, #56	@ 0x38
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	71fb      	strb	r3, [r7, #7]
 800b5ca:	79fb      	ldrb	r3, [r7, #7]
 800b5cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b5d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d002      	beq.n	800b5de <handle_bus_reset+0x1e>
    rhport = 0;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b5de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5e2:	4a6a      	ldr	r2, [pc, #424]	@ (800b78c <handle_bus_reset+0x1cc>)
 800b5e4:	011b      	lsls	r3, r3, #4
 800b5e6:	4413      	add	r3, r2
 800b5e8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800b5ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b5f4:	60bb      	str	r3, [r7, #8]
  return ghwcfg2.num_dev_ep + 1;
 800b5f6:	7a7b      	ldrb	r3, [r7, #9]
 800b5f8:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	3301      	adds	r3, #1
 800b600:	b2db      	uxtb	r3, r3
  const uint8_t ep_count =  dwc2_ep_count(dwc2);
 800b602:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  tu_memclr(xfer_status, sizeof(xfer_status));
 800b606:	2280      	movs	r2, #128	@ 0x80
 800b608:	2100      	movs	r1, #0
 800b60a:	4861      	ldr	r0, [pc, #388]	@ (800b790 <handle_bus_reset+0x1d0>)
 800b60c:	f001 fb13 	bl	800cc36 <memset>

  _dcd_data.sof_en = false;
 800b610:	4b60      	ldr	r3, [pc, #384]	@ (800b794 <handle_bus_reset+0x1d4>)
 800b612:	2200      	movs	r2, #0
 800b614:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 800b616:	4b5f      	ldr	r3, [pc, #380]	@ (800b794 <handle_bus_reset+0x1d4>)
 800b618:	2200      	movs	r2, #0
 800b61a:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800b61c:	2300      	movs	r3, #0
 800b61e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b622:	e014      	b.n	800b64e <handle_bus_reset+0x8e>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 800b624:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b62a:	3358      	adds	r3, #88	@ 0x58
 800b62c:	015b      	lsls	r3, r3, #5
 800b62e:	4413      	add	r3, r2
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b636:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800b63a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b63c:	3358      	adds	r3, #88	@ 0x58
 800b63e:	015b      	lsls	r3, r3, #5
 800b640:	440b      	add	r3, r1
 800b642:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 800b644:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b648:	3301      	adds	r3, #1
 800b64a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b64e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800b652:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b656:	429a      	cmp	r2, r3
 800b658:	d3e4      	bcc.n	800b624 <handle_bus_reset+0x64>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800b65a:	2300      	movs	r3, #0
 800b65c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800b660:	e01d      	b.n	800b69e <handle_bus_reset+0xde>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 800b662:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b668:	3348      	adds	r3, #72	@ 0x48
 800b66a:	015b      	lsls	r3, r3, #5
 800b66c:	4413      	add	r3, r2
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	da0f      	bge.n	800b694 <handle_bus_reset+0xd4>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 800b674:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b67a:	3348      	adds	r3, #72	@ 0x48
 800b67c:	015b      	lsls	r3, r3, #5
 800b67e:	4413      	add	r3, r2
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b686:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 800b68a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b68c:	3348      	adds	r3, #72	@ 0x48
 800b68e:	015b      	lsls	r3, r3, #5
 800b690:	440b      	add	r3, r1
 800b692:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 800b694:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b698:	3301      	adds	r3, #1
 800b69a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800b69e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800b6a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d3db      	bcc.n	800b662 <handle_bus_reset+0xa2>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 800b6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ac:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800b6b0:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 800b6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b6:	2209      	movs	r2, #9
 800b6b8:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 800b6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6be:	2209      	movs	r2, #9
 800b6c0:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 800b6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c6:	61bb      	str	r3, [r7, #24]
 800b6c8:	2310      	movs	r3, #16
 800b6ca:	75fb      	strb	r3, [r7, #23]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800b6cc:	7dfb      	ldrb	r3, [r7, #23]
 800b6ce:	019b      	lsls	r3, r3, #6
 800b6d0:	f043 0220 	orr.w	r2, r3, #32
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800b6d8:	bf00      	nop
 800b6da:	69bb      	ldr	r3, [r7, #24]
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	f003 0320 	and.w	r3, r3, #32
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1f9      	bne.n	800b6da <handle_bus_reset+0x11a>
}
 800b6e6:	bf00      	nop
 800b6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ea:	61fb      	str	r3, [r7, #28]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	2210      	movs	r2, #16
 800b6f0:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800b6f2:	bf00      	nop
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	691b      	ldr	r3, [r3, #16]
 800b6f8:	f003 0310 	and.w	r3, r3, #16
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1f9      	bne.n	800b6f4 <handle_bus_reset+0x134>
}
 800b700:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 800b702:	79fb      	ldrb	r3, [r7, #7]
 800b704:	4618      	mov	r0, r3
 800b706:	f7ff f937 	bl	800a978 <dfifo_device_init>

  // 5. Reset device address
  dwc2_dcfg_t dcfg = {.value = dwc2->dcfg};
 800b70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b70c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b710:	613b      	str	r3, [r7, #16]
  dcfg.address = 0;
 800b712:	8a3b      	ldrh	r3, [r7, #16]
 800b714:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b718:	823b      	strh	r3, [r7, #16]
  dwc2->dcfg = dcfg.value;
 800b71a:	693a      	ldr	r2, [r7, #16]
 800b71c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b71e:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 800b722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b724:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 800b728:	f023 0203 	bic.w	r2, r3, #3
 800b72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b72e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 800b732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b734:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800b738:	f023 0203 	bic.w	r2, r3, #3
 800b73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b73e:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 800b742:	4b13      	ldr	r3, [pc, #76]	@ (800b790 <handle_bus_reset+0x1d0>)
 800b744:	2240      	movs	r2, #64	@ 0x40
 800b746:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 800b748:	4b11      	ldr	r3, [pc, #68]	@ (800b790 <handle_bus_reset+0x1d0>)
 800b74a:	2240      	movs	r2, #64	@ 0x40
 800b74c:	835a      	strh	r2, [r3, #26]
 800b74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b750:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b752:	6a3b      	ldr	r3, [r7, #32]
 800b754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b756:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800b758:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d004      	beq.n	800b768 <handle_bus_reset+0x1a8>
    dma_setup_prepare(rhport);
 800b75e:	79fb      	ldrb	r3, [r7, #7]
 800b760:	4618      	mov	r0, r3
 800b762:	f7fe ffeb 	bl	800a73c <dma_setup_prepare>
 800b766:	e007      	b.n	800b778 <handle_bus_reset+0x1b8>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800b768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b76a:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 800b76e:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800b772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b774:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 800b778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b77a:	699b      	ldr	r3, [r3, #24]
 800b77c:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 800b780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b782:	619a      	str	r2, [r3, #24]
}
 800b784:	bf00      	nop
 800b786:	3738      	adds	r7, #56	@ 0x38
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	0800efe4 	.word	0x0800efe4
 800b790:	20001864 	.word	0x20001864
 800b794:	200018e4 	.word	0x200018e4

0800b798 <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 800b798:	b580      	push	{r7, lr}
 800b79a:	b08a      	sub	sp, #40	@ 0x28
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	4603      	mov	r3, r0
 800b7a0:	71fb      	strb	r3, [r7, #7]
 800b7a2:	79fb      	ldrb	r3, [r7, #7]
 800b7a4:	77fb      	strb	r3, [r7, #31]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b7a6:	7ffb      	ldrb	r3, [r7, #31]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d001      	beq.n	800b7b0 <handle_enum_done+0x18>
    rhport = 0;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	77fb      	strb	r3, [r7, #31]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b7b0:	7ffb      	ldrb	r3, [r7, #31]
 800b7b2:	4a1b      	ldr	r2, [pc, #108]	@ (800b820 <handle_enum_done+0x88>)
 800b7b4:	011b      	lsls	r3, r3, #4
 800b7b6:	4413      	add	r3, r2
 800b7b8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800b7ba:	623b      	str	r3, [r7, #32]
  const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 800b7bc:	6a3b      	ldr	r3, [r7, #32]
 800b7be:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800b7c2:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dsts.enum_speed) {
 800b7c4:	7e3b      	ldrb	r3, [r7, #24]
 800b7c6:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d002      	beq.n	800b7d6 <handle_enum_done+0x3e>
 800b7d0:	2b02      	cmp	r3, #2
 800b7d2:	d004      	beq.n	800b7de <handle_enum_done+0x46>
 800b7d4:	e007      	b.n	800b7e6 <handle_enum_done+0x4e>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 800b7d6:	2302      	movs	r3, #2
 800b7d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800b7dc:	e007      	b.n	800b7ee <handle_enum_done+0x56>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800b7e4:	e003      	b.n	800b7ee <handle_enum_done+0x56>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800b7ec:	bf00      	nop
 800b7ee:	79fb      	ldrb	r3, [r7, #7]
 800b7f0:	77bb      	strb	r3, [r7, #30]
 800b7f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b7f6:	777b      	strb	r3, [r7, #29]
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	773b      	strb	r3, [r7, #28]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800b7fc:	7fbb      	ldrb	r3, [r7, #30]
 800b7fe:	733b      	strb	r3, [r7, #12]
  event.event_id = DCD_EVENT_BUS_RESET;
 800b800:	2301      	movs	r3, #1
 800b802:	737b      	strb	r3, [r7, #13]
  event.bus_reset.speed = speed;
 800b804:	7f7b      	ldrb	r3, [r7, #29]
 800b806:	743b      	strb	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 800b808:	7f3a      	ldrb	r2, [r7, #28]
 800b80a:	f107 030c 	add.w	r3, r7, #12
 800b80e:	4611      	mov	r1, r2
 800b810:	4618      	mov	r0, r3
 800b812:	f7fe f8df 	bl	80099d4 <dcd_event_handler>
}
 800b816:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 800b818:	bf00      	nop
 800b81a:	3728      	adds	r7, #40	@ 0x28
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	0800efe4 	.word	0x0800efe4

0800b824 <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 800b824:	b580      	push	{r7, lr}
 800b826:	b08c      	sub	sp, #48	@ 0x30
 800b828:	af00      	add	r7, sp, #0
 800b82a:	4603      	mov	r3, r0
 800b82c:	71fb      	strb	r3, [r7, #7]
 800b82e:	79fb      	ldrb	r3, [r7, #7]
 800b830:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b832:	7cfb      	ldrb	r3, [r7, #19]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d001      	beq.n	800b83c <handle_rxflvl_irq+0x18>
    rhport = 0;
 800b838:	2300      	movs	r3, #0
 800b83a:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b83c:	7cfb      	ldrb	r3, [r7, #19]
 800b83e:	4a49      	ldr	r2, [pc, #292]	@ (800b964 <handle_rxflvl_irq+0x140>)
 800b840:	011b      	lsls	r3, r3, #4
 800b842:	4413      	add	r3, r2
 800b844:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b846:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800b848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b84a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b84e:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp = {.value = dwc2->grxstsp};
 800b850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b852:	6a1b      	ldr	r3, [r3, #32]
 800b854:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp.ep_ch_num;
 800b856:	7b3b      	ldrb	r3, [r7, #12]
 800b858:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 800b862:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b866:	3358      	adds	r3, #88	@ 0x58
 800b868:	015b      	lsls	r3, r3, #5
 800b86a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b86c:	4413      	add	r3, r2
 800b86e:	623b      	str	r3, [r7, #32]

  switch (grxstsp.packet_status) {
 800b870:	7bbb      	ldrb	r3, [r7, #14]
 800b872:	f3c3 0343 	ubfx	r3, r3, #1, #4
 800b876:	b2db      	uxtb	r3, r3
 800b878:	3b01      	subs	r3, #1
 800b87a:	2b05      	cmp	r3, #5
 800b87c:	d86a      	bhi.n	800b954 <handle_rxflvl_irq+0x130>
 800b87e:	a201      	add	r2, pc, #4	@ (adr r2, 800b884 <handle_rxflvl_irq+0x60>)
 800b880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b884:	0800b955 	.word	0x0800b955
 800b888:	0800b8c3 	.word	0x0800b8c3
 800b88c:	0800b955 	.word	0x0800b955
 800b890:	0800b8b5 	.word	0x0800b8b5
 800b894:	0800b955 	.word	0x0800b955
 800b898:	0800b89d 	.word	0x0800b89d
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 800b89c:	4b32      	ldr	r3, [pc, #200]	@ (800b968 <handle_rxflvl_irq+0x144>)
 800b89e:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 800b8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	3304      	adds	r3, #4
 800b8ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8ae:	6812      	ldr	r2, [r2, #0]
 800b8b0:	601a      	str	r2, [r3, #0]
      break;
 800b8b2:	e052      	b.n	800b95a <handle_rxflvl_irq+0x136>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800b8b4:	6a3b      	ldr	r3, [r7, #32]
 800b8b6:	691b      	ldr	r3, [r3, #16]
 800b8b8:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800b8bc:	6a3b      	ldr	r3, [r7, #32]
 800b8be:	611a      	str	r2, [r3, #16]
      break;
 800b8c0:	e04b      	b.n	800b95a <handle_rxflvl_irq+0x136>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp.byte_count;
 800b8c2:	89bb      	ldrh	r3, [r7, #12]
 800b8c4:	f3c3 130a 	ubfx	r3, r3, #4, #11
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800b8cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b8d0:	015b      	lsls	r3, r3, #5
 800b8d2:	4a26      	ldr	r2, [pc, #152]	@ (800b96c <handle_rxflvl_irq+0x148>)
 800b8d4:	4413      	add	r3, r2
 800b8d6:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 800b8d8:	8b7b      	ldrh	r3, [r7, #26]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d03c      	beq.n	800b958 <handle_rxflvl_irq+0x134>
        // Read packet off RxFIFO
        if (xfer->ff) {
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d007      	beq.n	800b8f6 <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	8b7a      	ldrh	r2, [r7, #26]
 800b8ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7fc ff7e 	bl	80087f0 <tu_fifo_write_n_const_addr_full_words>
 800b8f4:	e00c      	b.n	800b910 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	8b7a      	ldrh	r2, [r7, #26]
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b900:	f000 fd70 	bl	800c3e4 <dfifo_read_packet>
          xfer->buffer += byte_count;
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	8b7b      	ldrh	r3, [r7, #26]
 800b90a:	441a      	add	r2, r3
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	895b      	ldrh	r3, [r3, #10]
 800b914:	8b7a      	ldrh	r2, [r7, #26]
 800b916:	429a      	cmp	r2, r3
 800b918:	d21e      	bcs.n	800b958 <handle_rxflvl_irq+0x134>
          const dwc2_ep_tsize_t tsiz = {.value = epout->tsiz};
 800b91a:	6a3b      	ldr	r3, [r7, #32]
 800b91c:	691b      	ldr	r3, [r3, #16]
 800b91e:	60bb      	str	r3, [r7, #8]
          xfer->total_len -= tsiz.xfer_size;
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	891a      	ldrh	r2, [r3, #8]
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	1ad3      	subs	r3, r2, r3
 800b92e:	b29a      	uxth	r2, r3
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 800b934:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d10d      	bne.n	800b958 <handle_rxflvl_irq+0x134>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	891a      	ldrh	r2, [r3, #8]
 800b940:	4b0b      	ldr	r3, [pc, #44]	@ (800b970 <handle_rxflvl_irq+0x14c>)
 800b942:	881b      	ldrh	r3, [r3, #0]
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	b29a      	uxth	r2, r3
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 800b94c:	4b08      	ldr	r3, [pc, #32]	@ (800b970 <handle_rxflvl_irq+0x14c>)
 800b94e:	2200      	movs	r2, #0
 800b950:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 800b952:	e001      	b.n	800b958 <handle_rxflvl_irq+0x134>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 800b954:	bf00      	nop
 800b956:	e000      	b.n	800b95a <handle_rxflvl_irq+0x136>
      break;
 800b958:	bf00      	nop
  }
}
 800b95a:	bf00      	nop
 800b95c:	3730      	adds	r7, #48	@ 0x30
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	0800efe4 	.word	0x0800efe4
 800b968:	200018ec 	.word	0x200018ec
 800b96c:	20001864 	.word	0x20001864
 800b970:	200018e4 	.word	0x200018e4

0800b974 <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 800b974:	b580      	push	{r7, lr}
 800b976:	b08e      	sub	sp, #56	@ 0x38
 800b978:	af00      	add	r7, sp, #0
 800b97a:	4603      	mov	r3, r0
 800b97c:	603a      	str	r2, [r7, #0]
 800b97e:	71fb      	strb	r3, [r7, #7]
 800b980:	460b      	mov	r3, r1
 800b982:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 800b984:	783b      	ldrb	r3, [r7, #0]
 800b986:	f003 0308 	and.w	r3, r3, #8
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d01c      	beq.n	800b9ca <handle_epout_slave+0x56>
 800b990:	79fb      	ldrb	r3, [r7, #7]
 800b992:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800b996:	4b34      	ldr	r3, [pc, #208]	@ (800ba68 <handle_epout_slave+0xf4>)
 800b998:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b99a:	2301      	movs	r3, #1
 800b99c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800b9a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b9a4:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 800b9a6:	2306      	movs	r3, #6
 800b9a8:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 800b9aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9ac:	f107 0318 	add.w	r3, r7, #24
 800b9b0:	6810      	ldr	r0, [r2, #0]
 800b9b2:	6851      	ldr	r1, [r2, #4]
 800b9b4:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 800b9b6:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800b9ba:	f107 0314 	add.w	r3, r7, #20
 800b9be:	4611      	mov	r1, r2
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7fe f807 	bl	80099d4 <dcd_event_handler>
}
 800b9c6:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 800b9c8:	e04a      	b.n	800ba60 <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 800b9ca:	783b      	ldrb	r3, [r7, #0]
 800b9cc:	f003 0301 	and.w	r3, r3, #1
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d044      	beq.n	800ba60 <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 800b9d6:	783b      	ldrb	r3, [r7, #0]
 800b9d8:	f003 0320 	and.w	r3, r3, #32
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d13e      	bne.n	800ba60 <handle_epout_slave+0xec>
 800b9e2:	787b      	ldrb	r3, [r7, #1]
 800b9e4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b9e8:	b2db      	uxtb	r3, r3
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d138      	bne.n	800ba60 <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800b9ee:	79bb      	ldrb	r3, [r7, #6]
 800b9f0:	015b      	lsls	r3, r3, #5
 800b9f2:	4a1e      	ldr	r2, [pc, #120]	@ (800ba6c <handle_epout_slave+0xf8>)
 800b9f4:	4413      	add	r3, r2
 800b9f6:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 800b9f8:	79bb      	ldrb	r3, [r7, #6]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d10a      	bne.n	800ba14 <handle_epout_slave+0xa0>
 800b9fe:	4b1c      	ldr	r3, [pc, #112]	@ (800ba70 <handle_epout_slave+0xfc>)
 800ba00:	881b      	ldrh	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d006      	beq.n	800ba14 <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 800ba06:	79b9      	ldrb	r1, [r7, #6]
 800ba08:	79fb      	ldrb	r3, [r7, #7]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7ff f977 	bl	800ad00 <edpt_schedule_packets>
 800ba12:	e025      	b.n	800ba60 <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800ba14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba16:	891b      	ldrh	r3, [r3, #8]
 800ba18:	461a      	mov	r2, r3
 800ba1a:	79fb      	ldrb	r3, [r7, #7]
 800ba1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ba20:	79bb      	ldrb	r3, [r7, #6]
 800ba22:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800ba26:	627a      	str	r2, [r7, #36]	@ 0x24
 800ba28:	2300      	movs	r3, #0
 800ba2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ba2e:	2301      	movs	r3, #1
 800ba30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800ba34:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ba38:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800ba3a:	2307      	movs	r3, #7
 800ba3c:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 800ba3e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ba42:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 800ba44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba46:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 800ba48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ba4c:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 800ba4e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800ba52:	f107 0308 	add.w	r3, r7, #8
 800ba56:	4611      	mov	r1, r2
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7fd ffbb 	bl	80099d4 <dcd_event_handler>
}
 800ba5e:	bf00      	nop
      }
    }
  }
}
 800ba60:	3738      	adds	r7, #56	@ 0x38
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	200018ec 	.word	0x200018ec
 800ba6c:	20001864 	.word	0x20001864
 800ba70:	200018e4 	.word	0x200018e4

0800ba74 <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b092      	sub	sp, #72	@ 0x48
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	603a      	str	r2, [r7, #0]
 800ba7e:	71fb      	strb	r3, [r7, #7]
 800ba80:	460b      	mov	r3, r1
 800ba82:	71bb      	strb	r3, [r7, #6]
 800ba84:	79fb      	ldrb	r3, [r7, #7]
 800ba86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ba8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d002      	beq.n	800ba98 <handle_epin_slave+0x24>
    rhport = 0;
 800ba92:	2300      	movs	r3, #0
 800ba94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800ba98:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba9c:	4a64      	ldr	r2, [pc, #400]	@ (800bc30 <handle_epin_slave+0x1bc>)
 800ba9e:	011b      	lsls	r3, r3, #4
 800baa0:	4413      	add	r3, r2
 800baa2:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800baa4:	643b      	str	r3, [r7, #64]	@ 0x40
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 800baa6:	79bb      	ldrb	r3, [r7, #6]
 800baa8:	3348      	adds	r3, #72	@ 0x48
 800baaa:	015b      	lsls	r3, r3, #5
 800baac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800baae:	4413      	add	r3, r2
 800bab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 800bab2:	79bb      	ldrb	r3, [r7, #6]
 800bab4:	015b      	lsls	r3, r3, #5
 800bab6:	3310      	adds	r3, #16
 800bab8:	4a5e      	ldr	r2, [pc, #376]	@ (800bc34 <handle_epin_slave+0x1c0>)
 800baba:	4413      	add	r3, r2
 800babc:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (diepint_bm.xfer_complete) {
 800babe:	783b      	ldrb	r3, [r7, #0]
 800bac0:	f003 0301 	and.w	r3, r3, #1
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d037      	beq.n	800bb3a <handle_epin_slave+0xc6>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 800baca:	79bb      	ldrb	r3, [r7, #6]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d10a      	bne.n	800bae6 <handle_epin_slave+0x72>
 800bad0:	4b59      	ldr	r3, [pc, #356]	@ (800bc38 <handle_epin_slave+0x1c4>)
 800bad2:	885b      	ldrh	r3, [r3, #2]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d006      	beq.n	800bae6 <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 800bad8:	79b9      	ldrb	r1, [r7, #6]
 800bada:	79fb      	ldrb	r3, [r7, #7]
 800badc:	2201      	movs	r2, #1
 800bade:	4618      	mov	r0, r3
 800bae0:	f7ff f90e 	bl	800ad00 <edpt_schedule_packets>
 800bae4:	e029      	b.n	800bb3a <handle_epin_slave+0xc6>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800bae6:	79bb      	ldrb	r3, [r7, #6]
 800bae8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800baec:	b2d9      	uxtb	r1, r3
 800baee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf0:	891b      	ldrh	r3, [r3, #8]
 800baf2:	461a      	mov	r2, r3
 800baf4:	79fb      	ldrb	r3, [r7, #7]
 800baf6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bafa:	460b      	mov	r3, r1
 800bafc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800bb00:	627a      	str	r2, [r7, #36]	@ 0x24
 800bb02:	2300      	movs	r3, #0
 800bb04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bb08:	2301      	movs	r3, #1
 800bb0a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  event.rhport = rhport;
 800bb0e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bb12:	743b      	strb	r3, [r7, #16]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800bb14:	2307      	movs	r3, #7
 800bb16:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 800bb18:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bb1c:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 800bb1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb20:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 800bb22:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bb26:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800bb28:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800bb2c:	f107 0310 	add.w	r3, r7, #16
 800bb30:	4611      	mov	r1, r2
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7fd ff4e 	bl	80099d4 <dcd_event_handler>
}
 800bb38:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 800bb3a:	783b      	ldrb	r3, [r7, #0]
 800bb3c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d070      	beq.n	800bc28 <handle_epin_slave+0x1b4>
 800bb46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb48:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800bb4c:	79ba      	ldrb	r2, [r7, #6]
 800bb4e:	2101      	movs	r1, #1
 800bb50:	fa01 f202 	lsl.w	r2, r1, r2
 800bb54:	4013      	ands	r3, r2
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d066      	beq.n	800bc28 <handle_epin_slave+0x1b4>
    dwc2_ep_tsize_t tsiz = {.value = epin->tsiz};
 800bb5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	60fb      	str	r3, [r7, #12]
    const uint16_t remain_packets = tsiz.packet_count;
 800bb60:	89fb      	ldrh	r3, [r7, #14]
 800bb62:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800bb70:	e03f      	b.n	800bbf2 <handle_epin_slave+0x17e>
      tsiz.value = epin->tsiz;
 800bb72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	60fb      	str	r3, [r7, #12]
      const uint16_t remain_bytes = (uint16_t) tsiz.xfer_size;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb7e:	86bb      	strh	r3, [r7, #52]	@ 0x34
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 800bb80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb82:	895a      	ldrh	r2, [r3, #10]
 800bb84:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bb86:	843b      	strh	r3, [r7, #32]
 800bb88:	4613      	mov	r3, r2
 800bb8a:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800bb8c:	8c3a      	ldrh	r2, [r7, #32]
 800bb8e:	8bfb      	ldrh	r3, [r7, #30]
 800bb90:	4293      	cmp	r3, r2
 800bb92:	bf28      	it	cs
 800bb94:	4613      	movcs	r3, r2
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	867b      	strh	r3, [r7, #50]	@ 0x32

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 800bb9a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800bb9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb9e:	699b      	ldr	r3, [r3, #24]
 800bba0:	0099      	lsls	r1, r3, #2
 800bba2:	4b26      	ldr	r3, [pc, #152]	@ (800bc3c <handle_epin_slave+0x1c8>)
 800bba4:	400b      	ands	r3, r1
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d829      	bhi.n	800bbfe <handle_epin_slave+0x18a>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 800bbaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d00d      	beq.n	800bbce <handle_epin_slave+0x15a>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 800bbb2:	79bb      	ldrb	r3, [r7, #6]
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	031b      	lsls	r3, r3, #12
 800bbb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bbba:	4413      	add	r3, r2
 800bbbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 800bbbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800bbc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7fc fdab 	bl	8008722 <tu_fifo_read_n_const_addr_full_words>
 800bbcc:	e00c      	b.n	800bbe8 <handle_epin_slave+0x174>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 800bbce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800bbd4:	79b9      	ldrb	r1, [r7, #6]
 800bbd6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800bbd8:	f000 fc55 	bl	800c486 <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 800bbdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800bbe2:	441a      	add	r2, r3
 800bbe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe6:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 800bbe8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bbec:	3301      	adds	r3, #1
 800bbee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800bbf2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800bbf6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d3ba      	bcc.n	800bb72 <handle_epin_slave+0xfe>
 800bbfc:	e000      	b.n	800bc00 <handle_epin_slave+0x18c>
        break;
 800bbfe:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    tsiz.value = epin->tsiz;
 800bc00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc02:	691b      	ldr	r3, [r3, #16]
 800bc04:	60fb      	str	r3, [r7, #12]
    if (tsiz.xfer_size == 0) {
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d10b      	bne.n	800bc28 <handle_epin_slave+0x1b4>
      dwc2->diepempmsk &= ~(1 << epnum);
 800bc10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc12:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800bc16:	79ba      	ldrb	r2, [r7, #6]
 800bc18:	2101      	movs	r1, #1
 800bc1a:	fa01 f202 	lsl.w	r2, r1, r2
 800bc1e:	43d2      	mvns	r2, r2
 800bc20:	401a      	ands	r2, r3
 800bc22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc24:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 800bc28:	bf00      	nop
 800bc2a:	3748      	adds	r7, #72	@ 0x48
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	0800efe4 	.word	0x0800efe4
 800bc34:	20001864 	.word	0x20001864
 800bc38:	200018e4 	.word	0x200018e4
 800bc3c:	0003fffc 	.word	0x0003fffc

0800bc40 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b08e      	sub	sp, #56	@ 0x38
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	4603      	mov	r3, r0
 800bc48:	460a      	mov	r2, r1
 800bc4a:	71fb      	strb	r3, [r7, #7]
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	71bb      	strb	r3, [r7, #6]
 800bc50:	79fb      	ldrb	r3, [r7, #7]
 800bc52:	76fb      	strb	r3, [r7, #27]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800bc54:	7efb      	ldrb	r3, [r7, #27]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d001      	beq.n	800bc5e <handle_ep_irq+0x1e>
    rhport = 0;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	76fb      	strb	r3, [r7, #27]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800bc5e:	7efb      	ldrb	r3, [r7, #27]
 800bc60:	4a38      	ldr	r2, [pc, #224]	@ (800bd44 <handle_ep_irq+0x104>)
 800bc62:	011b      	lsls	r3, r3, #4
 800bc64:	4413      	add	r3, r2
 800bc66:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800bc68:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc6c:	61fb      	str	r3, [r7, #28]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc72:	617b      	str	r3, [r7, #20]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800bc74:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800bc76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bc7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc7c:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800bc7e:	6a3b      	ldr	r3, [r7, #32]
 800bc80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc82:	613b      	str	r3, [r7, #16]
  return ghwcfg2.num_dev_ep + 1;
 800bc84:	7c7b      	ldrb	r3, [r7, #17]
 800bc86:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	b2db      	uxtb	r3, r3
  const uint8_t ep_count = dwc2_ep_count(dwc2);
 800bc90:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 800bc94:	79bb      	ldrb	r3, [r7, #6]
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d101      	bne.n	800bc9e <handle_ep_irq+0x5e>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	e000      	b.n	800bca0 <handle_ep_irq+0x60>
 800bc9e:	2310      	movs	r3, #16
 800bca0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 800bca4:	79bb      	ldrb	r3, [r7, #6]
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	bf14      	ite	ne
 800bcaa:	2301      	movne	r3, #1
 800bcac:	2300      	moveq	r3, #0
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	025b      	lsls	r3, r3, #9
 800bcb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcb8:	4413      	add	r3, r2
 800bcba:	62bb      	str	r3, [r7, #40]	@ 0x28

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bcc2:	e034      	b.n	800bd2e <handle_ep_irq+0xee>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 800bcc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc6:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800bcca:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800bcce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bcd2:	440b      	add	r3, r1
 800bcd4:	fa22 f303 	lsr.w	r3, r2, r3
 800bcd8:	f003 0301 	and.w	r3, r3, #1
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d021      	beq.n	800bd24 <handle_ep_irq+0xe4>
      dwc2_dep_t* epout = &ep_base[epnum];
 800bce0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bce4:	015b      	lsls	r3, r3, #5
 800bce6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bce8:	4413      	add	r3, r2
 800bcea:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 800bcec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcee:	689b      	ldr	r3, [r3, #8]
 800bcf0:	60fb      	str	r3, [r7, #12]

      epout->intr = intr.value; // Clear interrupt
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf6:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 800bcf8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d111      	bne.n	800bd24 <handle_ep_irq+0xe4>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 800bd00:	79bb      	ldrb	r3, [r7, #6]
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d107      	bne.n	800bd16 <handle_ep_irq+0xd6>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 800bd06:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800bd0a:	79fb      	ldrb	r3, [r7, #7]
 800bd0c:	68fa      	ldr	r2, [r7, #12]
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7ff feb0 	bl	800ba74 <handle_epin_slave>
 800bd14:	e006      	b.n	800bd24 <handle_ep_irq+0xe4>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 800bd16:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800bd1a:	79fb      	ldrb	r3, [r7, #7]
 800bd1c:	68fa      	ldr	r2, [r7, #12]
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7ff fe28 	bl	800b974 <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800bd24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bd28:	3301      	adds	r3, #1
 800bd2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bd2e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800bd32:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d3c4      	bcc.n	800bcc4 <handle_ep_irq+0x84>
        }
        #endif
      }
    }
  }
}
 800bd3a:	bf00      	nop
 800bd3c:	bf00      	nop
 800bd3e:	3738      	adds	r7, #56	@ 0x38
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	0800efe4 	.word	0x0800efe4

0800bd48 <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b098      	sub	sp, #96	@ 0x60
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	4603      	mov	r3, r0
 800bd50:	71fb      	strb	r3, [r7, #7]
 800bd52:	79fb      	ldrb	r3, [r7, #7]
 800bd54:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800bd58:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d002      	beq.n	800bd66 <dcd_int_handler+0x1e>
    rhport = 0;
 800bd60:	2300      	movs	r3, #0
 800bd62:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800bd66:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800bd6a:	4a80      	ldr	r2, [pc, #512]	@ (800bf6c <dcd_int_handler+0x224>)
 800bd6c:	011b      	lsls	r3, r3, #4
 800bd6e:	4413      	add	r3, r2
 800bd70:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800bd72:	65fb      	str	r3, [r7, #92]	@ 0x5c
  const uint32_t gintmask = dwc2->gintmsk;
 800bd74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd76:	699b      	ldr	r3, [r3, #24]
 800bd78:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 800bd7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd80:	4013      	ands	r3, r2
 800bd82:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 800bd84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00d      	beq.n	800bdaa <dcd_int_handler+0x62>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 800bd8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd90:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800bd94:	615a      	str	r2, [r3, #20]

    usbd_spin_lock(true);
 800bd96:	2001      	movs	r0, #1
 800bd98:	f7fe f81a 	bl	8009dd0 <usbd_spin_lock>
    handle_bus_reset(rhport);
 800bd9c:	79fb      	ldrb	r3, [r7, #7]
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7ff fc0e 	bl	800b5c0 <handle_bus_reset>
    usbd_spin_unlock(true);
 800bda4:	2001      	movs	r0, #1
 800bda6:	f7fe f82d 	bl	8009e04 <usbd_spin_unlock>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 800bdaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d007      	beq.n	800bdc4 <dcd_int_handler+0x7c>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 800bdb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bdb6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800bdba:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 800bdbc:	79fb      	ldrb	r3, [r7, #7]
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7ff fcea 	bl	800b798 <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 800bdc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d01d      	beq.n	800be0a <dcd_int_handler+0xc2>
    dwc2->gintsts = GINTSTS_USBSUSP;
 800bdce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bdd0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bdd4:	615a      	str	r2, [r3, #20]
 800bdd6:	79fb      	ldrb	r3, [r7, #7]
 800bdd8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800bddc:	2304      	movs	r3, #4
 800bdde:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 800bde2:	2301      	movs	r3, #1
 800bde4:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 800bde8:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800bdec:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 800bdf0:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800bdf4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 800bdf8:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800bdfc:	f107 0320 	add.w	r3, r7, #32
 800be00:	4611      	mov	r1, r2
 800be02:	4618      	mov	r0, r3
 800be04:	f7fd fde6 	bl	80099d4 <dcd_event_handler>
}
 800be08:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 800be0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	da1d      	bge.n	800be4c <dcd_int_handler+0x104>
    dwc2->gintsts = GINTSTS_WKUINT;
 800be10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be12:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800be16:	615a      	str	r2, [r3, #20]
 800be18:	79fb      	ldrb	r3, [r7, #7]
 800be1a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800be1e:	2305      	movs	r3, #5
 800be20:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800be24:	2301      	movs	r3, #1
 800be26:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 800be2a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800be2e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 800be32:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800be36:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 800be3a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800be3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800be42:	4611      	mov	r1, r2
 800be44:	4618      	mov	r0, r3
 800be46:	f7fd fdc5 	bl	80099d4 <dcd_event_handler>
}
 800be4a:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 800be4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be4e:	f003 0304 	and.w	r3, r3, #4
 800be52:	2b00      	cmp	r3, #0
 800be54:	d022      	beq.n	800be9c <dcd_int_handler+0x154>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 800be56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 800be5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be5e:	f003 0304 	and.w	r3, r3, #4
 800be62:	2b00      	cmp	r3, #0
 800be64:	d017      	beq.n	800be96 <dcd_int_handler+0x14e>
 800be66:	79fb      	ldrb	r3, [r7, #7]
 800be68:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800be6c:	2302      	movs	r3, #2
 800be6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be72:	2301      	movs	r3, #1
 800be74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 800be78:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800be7c:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 800be7e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800be82:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800be84:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 800be88:	f107 0314 	add.w	r3, r7, #20
 800be8c:	4611      	mov	r1, r2
 800be8e:	4618      	mov	r0, r3
 800be90:	f7fd fda0 	bl	80099d4 <dcd_event_handler>
}
 800be94:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 800be96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be98:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be9a:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 800be9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be9e:	f003 0308 	and.w	r3, r3, #8
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d02e      	beq.n	800bf04 <dcd_int_handler+0x1bc>
    dwc2->gintsts = GINTSTS_SOF;
 800bea6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bea8:	2208      	movs	r2, #8
 800beaa:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 800beac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800beae:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800beb2:	0a1b      	lsrs	r3, r3, #8
 800beb4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800beb8:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 800beba:	4b2d      	ldr	r3, [pc, #180]	@ (800bf70 <dcd_int_handler+0x228>)
 800bebc:	79db      	ldrb	r3, [r3, #7]
 800bebe:	f083 0301 	eor.w	r3, r3, #1
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d005      	beq.n	800bed4 <dcd_int_handler+0x18c>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 800bec8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	f023 0208 	bic.w	r2, r3, #8
 800bed0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bed2:	619a      	str	r2, [r3, #24]
 800bed4:	79fb      	ldrb	r3, [r7, #7]
 800bed6:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800beda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bedc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bede:	2301      	movs	r3, #1
 800bee0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800bee4:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800bee8:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 800beea:	2303      	movs	r3, #3
 800beec:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 800beee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bef0:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 800bef2:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800bef6:	f107 0308 	add.w	r3, r7, #8
 800befa:	4611      	mov	r1, r2
 800befc:	4618      	mov	r0, r3
 800befe:	f7fd fd69 	bl	80099d4 <dcd_event_handler>
}
 800bf02:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 800bf04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf06:	f003 0310 	and.w	r3, r3, #16
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d015      	beq.n	800bf3a <dcd_int_handler+0x1f2>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 800bf0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf10:	699b      	ldr	r3, [r3, #24]
 800bf12:	f023 0210 	bic.w	r2, r3, #16
 800bf16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf18:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 800bf1a:	79fb      	ldrb	r3, [r7, #7]
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7ff fc81 	bl	800b824 <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 800bf22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf24:	695b      	ldr	r3, [r3, #20]
 800bf26:	f003 0310 	and.w	r3, r3, #16
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d1f5      	bne.n	800bf1a <dcd_int_handler+0x1d2>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 800bf2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf30:	699b      	ldr	r3, [r3, #24]
 800bf32:	f043 0210 	orr.w	r2, r3, #16
 800bf36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf38:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 800bf3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d004      	beq.n	800bf4e <dcd_int_handler+0x206>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 800bf44:	79fb      	ldrb	r3, [r7, #7]
 800bf46:	2100      	movs	r1, #0
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7ff fe79 	bl	800bc40 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 800bf4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d004      	beq.n	800bf62 <dcd_int_handler+0x21a>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 800bf58:	79fb      	ldrb	r3, [r7, #7]
 800bf5a:	2101      	movs	r1, #1
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7ff fe6f 	bl	800bc40 <handle_ep_irq>
  }
}
 800bf62:	bf00      	nop
 800bf64:	3760      	adds	r7, #96	@ 0x60
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	0800efe4 	.word	0x0800efe4
 800bf70:	200018e4 	.word	0x200018e4

0800bf74 <dwc2_phy_init>:

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800bf80:	78fb      	ldrb	r3, [r7, #3]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d106      	bne.n	800bf94 <dwc2_phy_init+0x20>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf8a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	639a      	str	r2, [r3, #56]	@ 0x38
      #else

      #endif
    }
  }
}
 800bf92:	e005      	b.n	800bfa0 <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf98:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800bfa0:	bf00      	nop
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800bfac:	b480      	push	{r7}
 800bfae:	b085      	sub	sp, #20
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800bfb8:	78fb      	ldrb	r3, [r7, #3]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d152      	bne.n	800c064 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 800bfbe:	4b2c      	ldr	r3, [pc, #176]	@ (800c070 <dwc2_phy_update+0xc4>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4a2c      	ldr	r2, [pc, #176]	@ (800c074 <dwc2_phy_update+0xc8>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d302      	bcc.n	800bfce <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 800bfc8:	2306      	movs	r3, #6
 800bfca:	60fb      	str	r3, [r7, #12]
 800bfcc:	e041      	b.n	800c052 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 800bfce:	4b28      	ldr	r3, [pc, #160]	@ (800c070 <dwc2_phy_update+0xc4>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a29      	ldr	r2, [pc, #164]	@ (800c078 <dwc2_phy_update+0xcc>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d902      	bls.n	800bfde <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 800bfd8:	2307      	movs	r3, #7
 800bfda:	60fb      	str	r3, [r7, #12]
 800bfdc:	e039      	b.n	800c052 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 800bfde:	4b24      	ldr	r3, [pc, #144]	@ (800c070 <dwc2_phy_update+0xc4>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4a26      	ldr	r2, [pc, #152]	@ (800c07c <dwc2_phy_update+0xd0>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d302      	bcc.n	800bfee <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 800bfe8:	2308      	movs	r3, #8
 800bfea:	60fb      	str	r3, [r7, #12]
 800bfec:	e031      	b.n	800c052 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 800bfee:	4b20      	ldr	r3, [pc, #128]	@ (800c070 <dwc2_phy_update+0xc4>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4a23      	ldr	r2, [pc, #140]	@ (800c080 <dwc2_phy_update+0xd4>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d902      	bls.n	800bffe <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 800bff8:	2309      	movs	r3, #9
 800bffa:	60fb      	str	r3, [r7, #12]
 800bffc:	e029      	b.n	800c052 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 800bffe:	4b1c      	ldr	r3, [pc, #112]	@ (800c070 <dwc2_phy_update+0xc4>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	4a20      	ldr	r2, [pc, #128]	@ (800c084 <dwc2_phy_update+0xd8>)
 800c004:	4293      	cmp	r3, r2
 800c006:	d902      	bls.n	800c00e <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 800c008:	230a      	movs	r3, #10
 800c00a:	60fb      	str	r3, [r7, #12]
 800c00c:	e021      	b.n	800c052 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 800c00e:	4b18      	ldr	r3, [pc, #96]	@ (800c070 <dwc2_phy_update+0xc4>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	4a1d      	ldr	r2, [pc, #116]	@ (800c088 <dwc2_phy_update+0xdc>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d902      	bls.n	800c01e <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 800c018:	230b      	movs	r3, #11
 800c01a:	60fb      	str	r3, [r7, #12]
 800c01c:	e019      	b.n	800c052 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 800c01e:	4b14      	ldr	r3, [pc, #80]	@ (800c070 <dwc2_phy_update+0xc4>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4a1a      	ldr	r2, [pc, #104]	@ (800c08c <dwc2_phy_update+0xe0>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d302      	bcc.n	800c02e <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 800c028:	230c      	movs	r3, #12
 800c02a:	60fb      	str	r3, [r7, #12]
 800c02c:	e011      	b.n	800c052 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 800c02e:	4b10      	ldr	r3, [pc, #64]	@ (800c070 <dwc2_phy_update+0xc4>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a17      	ldr	r2, [pc, #92]	@ (800c090 <dwc2_phy_update+0xe4>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d302      	bcc.n	800c03e <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 800c038:	230d      	movs	r3, #13
 800c03a:	60fb      	str	r3, [r7, #12]
 800c03c:	e009      	b.n	800c052 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 800c03e:	4b0c      	ldr	r3, [pc, #48]	@ (800c070 <dwc2_phy_update+0xc4>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4a14      	ldr	r2, [pc, #80]	@ (800c094 <dwc2_phy_update+0xe8>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d302      	bcc.n	800c04e <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 800c048:	230e      	movs	r3, #14
 800c04a:	60fb      	str	r3, [r7, #12]
 800c04c:	e001      	b.n	800c052 <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 800c04e:	230f      	movs	r3, #15
 800c050:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	029b      	lsls	r3, r3, #10
 800c05e:	431a      	orrs	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	60da      	str	r2, [r3, #12]
  }
}
 800c064:	bf00      	nop
 800c066:	3714      	adds	r7, #20
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr
 800c070:	20000208 	.word	0x20000208
 800c074:	01e84800 	.word	0x01e84800
 800c078:	01a39ddf 	.word	0x01a39ddf
 800c07c:	016e3600 	.word	0x016e3600
 800c080:	014ca43f 	.word	0x014ca43f
 800c084:	01312cff 	.word	0x01312cff
 800c088:	011a499f 	.word	0x011a499f
 800c08c:	01067380 	.word	0x01067380
 800c090:	00f42400 	.word	0x00f42400
 800c094:	00e4e1c0 	.word	0x00e4e1c0

0800c098 <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 800c098:	b480      	push	{r7}
 800c09a:	b083      	sub	sp, #12
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	f043 0201 	orr.w	r2, r3, #1
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	f244 2209 	movw	r2, #16905	@ 0x4209
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d807      	bhi.n	800c0ca <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 800c0ba:	bf00      	nop
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	f003 0301 	and.w	r3, r3, #1
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d1f9      	bne.n	800c0bc <reset_core+0x24>
 800c0c8:	e010      	b.n	800c0ec <reset_core+0x54>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 800c0ca:	bf00      	nop
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	691b      	ldr	r3, [r3, #16]
 800c0d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d0f9      	beq.n	800c0cc <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	691b      	ldr	r3, [r3, #16]
 800c0dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c0e0:	f023 0301 	bic.w	r3, r3, #1
 800c0e4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 800c0ec:	bf00      	nop
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	691b      	ldr	r3, [r3, #16]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	dafb      	bge.n	800c0ee <reset_core+0x56>
}
 800c0f6:	bf00      	nop
 800c0f8:	bf00      	nop
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c118:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	68fa      	ldr	r2, [r7, #12]
 800c11e:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800c120:	2100      	movs	r1, #0
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f7ff ff26 	bl	800bf74 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f7ff ffb5 	bl	800c098 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800c134:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800c13c:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	68fa      	ldr	r2, [r7, #12]
 800c142:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800c144:	2100      	movs	r1, #0
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f7ff ff30 	bl	800bfac <dwc2_phy_update>
}
 800c14c:	bf00      	nop
 800c14e:	3710      	adds	r7, #16
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 800c154:	b580      	push	{r7, lr}
 800c156:	b086      	sub	sp, #24
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	617b      	str	r3, [r7, #20]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c166:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg4_t ghwcfg4 = {.value = dwc2->ghwcfg4};
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c16c:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c174:	617b      	str	r3, [r7, #20]

  if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800c176:	7c3b      	ldrb	r3, [r7, #16]
 800c178:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	2b80      	cmp	r3, #128	@ 0x80
 800c180:	d114      	bne.n	800c1ac <phy_hs_init+0x58>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	f043 0310 	orr.w	r3, r3, #16
 800c188:	617b      	str	r3, [r7, #20]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	f023 0308 	bic.w	r3, r3, #8
 800c190:	617b      	str	r3, [r7, #20]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c198:	617b      	str	r3, [r7, #20]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c1a0:	617b      	str	r3, [r7, #20]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 800c1a8:	617b      	str	r3, [r7, #20]
 800c1aa:	e012      	b.n	800c1d2 <phy_hs_init+0x7e>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	f023 0310 	bic.w	r3, r3, #16
 800c1b2:	617b      	str	r3, [r7, #20]

    // Set 16-bit interface if supported
    if (ghwcfg4.phy_data_width) {
 800c1b4:	7b7b      	ldrb	r3, [r7, #13]
 800c1b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d004      	beq.n	800c1ca <phy_hs_init+0x76>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	f043 0308 	orr.w	r3, r3, #8
 800c1c6:	617b      	str	r3, [r7, #20]
 800c1c8:	e003      	b.n	800c1d2 <phy_hs_init+0x7e>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	f023 0308 	bic.w	r3, r3, #8
 800c1d0:	617b      	str	r3, [r7, #20]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	697a      	ldr	r2, [r7, #20]
 800c1d6:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, ghwcfg2.hs_phy_type);
 800c1d8:	7c3b      	ldrb	r3, [r7, #16]
 800c1da:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c1de:	b2db      	uxtb	r3, r3
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f7ff fec6 	bl	800bf74 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f7ff ff55 	bl	800c098 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800c1f4:	617b      	str	r3, [r7, #20]
  gusbcfg |= (ghwcfg4.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 800c1f6:	7b7b      	ldrb	r3, [r7, #13]
 800c1f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d002      	beq.n	800c208 <phy_hs_init+0xb4>
 800c202:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800c206:	e001      	b.n	800c20c <phy_hs_init+0xb8>
 800c208:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800c20c:	697a      	ldr	r2, [r7, #20]
 800c20e:	4313      	orrs	r3, r2
 800c210:	617b      	str	r3, [r7, #20]
  dwc2->gusbcfg = gusbcfg;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	697a      	ldr	r2, [r7, #20]
 800c216:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, ghwcfg2.hs_phy_type);
 800c218:	7c3b      	ldrb	r3, [r7, #16]
 800c21a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	4619      	mov	r1, r3
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f7ff fec2 	bl	800bfac <dwc2_phy_update>
}
 800c228:	bf00      	nop
 800c22a:	3718      	adds	r7, #24
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 800c230:	b480      	push	{r7}
 800c232:	b085      	sub	sp, #20
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c23c:	0c1b      	lsrs	r3, r3, #16
 800c23e:	041b      	lsls	r3, r3, #16
 800c240:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	4a0e      	ldr	r2, [pc, #56]	@ (800c280 <check_dwc2+0x50>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d012      	beq.n	800c270 <check_dwc2+0x40>
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	4a0d      	ldr	r2, [pc, #52]	@ (800c284 <check_dwc2+0x54>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d00e      	beq.n	800c270 <check_dwc2+0x40>
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	4a0c      	ldr	r2, [pc, #48]	@ (800c288 <check_dwc2+0x58>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d00a      	beq.n	800c270 <check_dwc2+0x40>
 800c25a:	4b0c      	ldr	r3, [pc, #48]	@ (800c28c <check_dwc2+0x5c>)
 800c25c:	60bb      	str	r3, [r7, #8]
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f003 0301 	and.w	r3, r3, #1
 800c266:	2b00      	cmp	r3, #0
 800c268:	d000      	beq.n	800c26c <check_dwc2+0x3c>
 800c26a:	be00      	bkpt	0x0000
 800c26c:	2300      	movs	r3, #0
 800c26e:	e000      	b.n	800c272 <check_dwc2+0x42>
#endif

  return true;
 800c270:	2301      	movs	r3, #1
}
 800c272:	4618      	mov	r0, r3
 800c274:	3714      	adds	r7, #20
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop
 800c280:	4f540000 	.word	0x4f540000
 800c284:	55310000 	.word	0x55310000
 800c288:	55320000 	.word	0x55320000
 800c28c:	e000edf0 	.word	0xe000edf0

0800c290 <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	460b      	mov	r3, r1
 800c29a:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;
#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 800c29c:	78fb      	ldrb	r3, [r7, #3]
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d101      	bne.n	800c2a6 <dwc2_core_is_highspeed+0x16>
    return false;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	e00b      	b.n	800c2be <dwc2_core_is_highspeed+0x2e>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2aa:	60fb      	str	r3, [r7, #12]
  return ghwcfg2.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 800c2ac:	7b3b      	ldrb	r3, [r7, #12]
 800c2ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	bf14      	ite	ne
 800c2b8:	2301      	movne	r3, #1
 800c2ba:	2300      	moveq	r3, #0
 800c2bc:	b2db      	uxtb	r3, r3
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3714      	adds	r7, #20
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr
	...

0800c2cc <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b088      	sub	sp, #32
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	71fb      	strb	r3, [r7, #7]
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	71bb      	strb	r3, [r7, #6]
 800c2da:	4613      	mov	r3, r2
 800c2dc:	717b      	strb	r3, [r7, #5]
 800c2de:	79fb      	ldrb	r3, [r7, #7]
 800c2e0:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800c2e2:	7dfb      	ldrb	r3, [r7, #23]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d001      	beq.n	800c2ec <dwc2_core_init+0x20>
    rhport = 0;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800c2ec:	7dfb      	ldrb	r3, [r7, #23]
 800c2ee:	4a3b      	ldr	r2, [pc, #236]	@ (800c3dc <dwc2_core_init+0x110>)
 800c2f0:	011b      	lsls	r3, r3, #4
 800c2f2:	4413      	add	r3, r2
 800c2f4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800c2f6:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 800c2f8:	69f8      	ldr	r0, [r7, #28]
 800c2fa:	f7ff ff99 	bl	800c230 <check_dwc2>
 800c2fe:	4603      	mov	r3, r0
 800c300:	f083 0301 	eor.w	r3, r3, #1
 800c304:	b2db      	uxtb	r3, r3
 800c306:	2b00      	cmp	r3, #0
 800c308:	d00a      	beq.n	800c320 <dwc2_core_init+0x54>
 800c30a:	4b35      	ldr	r3, [pc, #212]	@ (800c3e0 <dwc2_core_init+0x114>)
 800c30c:	61bb      	str	r3, [r7, #24]
 800c30e:	69bb      	ldr	r3, [r7, #24]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f003 0301 	and.w	r3, r3, #1
 800c316:	2b00      	cmp	r3, #0
 800c318:	d000      	beq.n	800c31c <dwc2_core_init+0x50>
 800c31a:	be00      	bkpt	0x0000
 800c31c:	2300      	movs	r3, #0
 800c31e:	e058      	b.n	800c3d2 <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	f023 0201 	bic.w	r2, r3, #1
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 800c32c:	79bb      	ldrb	r3, [r7, #6]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d003      	beq.n	800c33a <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 800c332:	69f8      	ldr	r0, [r7, #28]
 800c334:	f7ff ff0e 	bl	800c154 <phy_hs_init>
 800c338:	e002      	b.n	800c340 <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 800c33a:	69f8      	ldr	r0, [r7, #28]
 800c33c:	f7ff fee2 	bl	800c104 <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 800c340:	69fb      	ldr	r3, [r7, #28]
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	f043 0207 	orr.w	r2, r3, #7
 800c348:	69fb      	ldr	r3, [r7, #28]
 800c34a:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 800c34c:	69fb      	ldr	r3, [r7, #28]
 800c34e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800c352:	f023 020f 	bic.w	r2, r3, #15
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	60fb      	str	r3, [r7, #12]
 800c360:	2310      	movs	r3, #16
 800c362:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800c364:	7afb      	ldrb	r3, [r7, #11]
 800c366:	019b      	lsls	r3, r3, #6
 800c368:	f043 0220 	orr.w	r2, r3, #32
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800c370:	bf00      	nop
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	691b      	ldr	r3, [r3, #16]
 800c376:	f003 0320 	and.w	r3, r3, #32
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d1f9      	bne.n	800c372 <dwc2_core_init+0xa6>
}
 800c37e:	bf00      	nop
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	2210      	movs	r2, #16
 800c388:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800c38a:	bf00      	nop
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	691b      	ldr	r3, [r3, #16]
 800c390:	f003 0310 	and.w	r3, r3, #16
 800c394:	2b00      	cmp	r3, #0
 800c396:	d1f9      	bne.n	800c38c <dwc2_core_init+0xc0>
}
 800c398:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	f04f 32ff 	mov.w	r2, #4294967295
 800c3a0:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c3a8:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 800c3aa:	69fb      	ldr	r3, [r7, #28]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 800c3b0:	797b      	ldrb	r3, [r7, #5]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d006      	beq.n	800c3c4 <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 800c3b6:	69fb      	ldr	r3, [r7, #28]
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	609a      	str	r2, [r3, #8]
 800c3c2:	e005      	b.n	800c3d0 <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 800c3c4:	69fb      	ldr	r3, [r7, #28]
 800c3c6:	699b      	ldr	r3, [r3, #24]
 800c3c8:	f043 0210 	orr.w	r2, r3, #16
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	619a      	str	r2, [r3, #24]
  }

  return true;
 800c3d0:	2301      	movs	r3, #1
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3720      	adds	r7, #32
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	0800eff4 	.word	0x0800eff4
 800c3e0:	e000edf0 	.word	0xe000edf0

0800c3e4 <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 800c3e4:	b480      	push	{r7}
 800c3e6:	b08f      	sub	sp, #60	@ 0x3c
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	4613      	mov	r3, r2
 800c3f0:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c3f8:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 800c3fa:	88fb      	ldrh	r3, [r7, #6]
 800c3fc:	089b      	lsrs	r3, r3, #2
 800c3fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 800c400:	e00b      	b.n	800c41a <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 800c402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	68ba      	ldr	r2, [r7, #8]
 800c408:	627a      	str	r2, [r7, #36]	@ 0x24
 800c40a:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 800c40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40e:	6a3a      	ldr	r2, [r7, #32]
 800c410:	601a      	str	r2, [r3, #0]
}
 800c412:	bf00      	nop
    dst += 4;
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	3304      	adds	r3, #4
 800c418:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 800c41a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c41c:	1e5a      	subs	r2, r3, #1
 800c41e:	86fa      	strh	r2, [r7, #54]	@ 0x36
 800c420:	2b00      	cmp	r3, #0
 800c422:	d1ee      	bne.n	800c402 <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 800c424:	88fb      	ldrh	r3, [r7, #6]
 800c426:	b2db      	uxtb	r3, r3
 800c428:	f003 0303 	and.w	r3, r3, #3
 800c42c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 800c430:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c434:	2b00      	cmp	r3, #0
 800c436:	d020      	beq.n	800c47a <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 800c438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c440:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 800c442:	69fb      	ldr	r3, [r7, #28]
 800c444:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 800c44a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d907      	bls.n	800c462 <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	3301      	adds	r3, #1
 800c456:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c458:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 800c45a:	69ba      	ldr	r2, [r7, #24]
 800c45c:	0a12      	lsrs	r2, r2, #8
 800c45e:	b2d2      	uxtb	r2, r2
 800c460:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 800c462:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c466:	2b02      	cmp	r3, #2
 800c468:	d907      	bls.n	800c47a <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	3302      	adds	r3, #2
 800c46e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c470:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 800c472:	697a      	ldr	r2, [r7, #20]
 800c474:	0c12      	lsrs	r2, r2, #16
 800c476:	b2d2      	uxtb	r2, r2
 800c478:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800c47a:	bf00      	nop
 800c47c:	373c      	adds	r7, #60	@ 0x3c
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr

0800c486 <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 800c486:	b480      	push	{r7}
 800c488:	b08b      	sub	sp, #44	@ 0x2c
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	60f8      	str	r0, [r7, #12]
 800c48e:	607a      	str	r2, [r7, #4]
 800c490:	461a      	mov	r2, r3
 800c492:	460b      	mov	r3, r1
 800c494:	72fb      	strb	r3, [r7, #11]
 800c496:	4613      	mov	r3, r2
 800c498:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 800c49a:	7afb      	ldrb	r3, [r7, #11]
 800c49c:	3301      	adds	r3, #1
 800c49e:	031b      	lsls	r3, r3, #12
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	4413      	add	r3, r2
 800c4a4:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 800c4a6:	893b      	ldrh	r3, [r7, #8]
 800c4a8:	089b      	lsrs	r3, r3, #2
 800c4aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 800c4ac:	e008      	b.n	800c4c0 <dfifo_write_packet+0x3a>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 800c4b6:	69fb      	ldr	r3, [r7, #28]
 800c4b8:	601a      	str	r2, [r3, #0]
    src += 4;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	3304      	adds	r3, #4
 800c4be:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 800c4c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c4c2:	1e5a      	subs	r2, r3, #1
 800c4c4:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d1f1      	bne.n	800c4ae <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 800c4ca:	893b      	ldrh	r3, [r7, #8]
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	f003 0303 	and.w	r3, r3, #3
 800c4d2:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 800c4d4:	7efb      	ldrb	r3, [r7, #27]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d019      	beq.n	800c50e <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 800c4e0:	7efb      	ldrb	r3, [r7, #27]
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	d906      	bls.n	800c4f4 <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	021b      	lsls	r3, r3, #8
 800c4ee:	6a3a      	ldr	r2, [r7, #32]
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 800c4f4:	7efb      	ldrb	r3, [r7, #27]
 800c4f6:	2b02      	cmp	r3, #2
 800c4f8:	d906      	bls.n	800c508 <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	3302      	adds	r3, #2
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	041b      	lsls	r3, r3, #16
 800c502:	6a3a      	ldr	r2, [r7, #32]
 800c504:	4313      	orrs	r3, r2
 800c506:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	6a3a      	ldr	r2, [r7, #32]
 800c50c:	601a      	str	r2, [r3, #0]
  }
}
 800c50e:	bf00      	nop
 800c510:	372c      	adds	r7, #44	@ 0x2c
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr
	...

0800c51c <tusb_rhport_init>:
}

//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+
bool tusb_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b086      	sub	sp, #24
 800c520:	af00      	add	r7, sp, #0
 800c522:	4603      	mov	r3, r0
 800c524:	6039      	str	r1, [r7, #0]
 800c526:	71fb      	strb	r3, [r7, #7]
  //  backward compatible called with tusb_init(void)
  #if defined(TUD_OPT_RHPORT) || defined(TUH_OPT_RHPORT)
  if (rh_init == NULL) {
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d11f      	bne.n	800c56e <tusb_rhport_init+0x52>
    #if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
    // init device stack CFG_TUSB_RHPORTx_MODE must be defined
    const tusb_rhport_init_t dev_init = {
 800c52e:	2301      	movs	r3, #1
 800c530:	723b      	strb	r3, [r7, #8]
 800c532:	2300      	movs	r3, #0
 800c534:	727b      	strb	r3, [r7, #9]
      .role = TUSB_ROLE_DEVICE,
      .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
    };
    TU_ASSERT ( tud_rhport_init(TUD_OPT_RHPORT, &dev_init) );
 800c536:	f107 0308 	add.w	r3, r7, #8
 800c53a:	4619      	mov	r1, r3
 800c53c:	2000      	movs	r0, #0
 800c53e:	f7fc fa63 	bl	8008a08 <tud_rhport_init>
 800c542:	4603      	mov	r3, r0
 800c544:	f083 0301 	eor.w	r3, r3, #1
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d00a      	beq.n	800c564 <tusb_rhport_init+0x48>
 800c54e:	4b23      	ldr	r3, [pc, #140]	@ (800c5dc <tusb_rhport_init+0xc0>)
 800c550:	60fb      	str	r3, [r7, #12]
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f003 0301 	and.w	r3, r3, #1
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d000      	beq.n	800c560 <tusb_rhport_init+0x44>
 800c55e:	be00      	bkpt	0x0000
 800c560:	2300      	movs	r3, #0
 800c562:	e036      	b.n	800c5d2 <tusb_rhport_init+0xb6>
    _tusb_rhport_role[TUD_OPT_RHPORT] = TUSB_ROLE_DEVICE;
 800c564:	4b1e      	ldr	r3, [pc, #120]	@ (800c5e0 <tusb_rhport_init+0xc4>)
 800c566:	2201      	movs	r2, #1
 800c568:	701a      	strb	r2, [r3, #0]
    };
    TU_ASSERT( tuh_rhport_init(TUH_OPT_RHPORT, &host_init) );
    _tusb_rhport_role[TUH_OPT_RHPORT] = TUSB_ROLE_HOST;
    #endif

    return true;
 800c56a:	2301      	movs	r3, #1
 800c56c:	e031      	b.n	800c5d2 <tusb_rhport_init+0xb6>
  }
  #endif

  // new API with explicit rhport and role
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 800c56e:	79fb      	ldrb	r3, [r7, #7]
 800c570:	2b01      	cmp	r3, #1
 800c572:	d803      	bhi.n	800c57c <tusb_rhport_init+0x60>
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d10a      	bne.n	800c592 <tusb_rhport_init+0x76>
 800c57c:	4b17      	ldr	r3, [pc, #92]	@ (800c5dc <tusb_rhport_init+0xc0>)
 800c57e:	613b      	str	r3, [r7, #16]
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f003 0301 	and.w	r3, r3, #1
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d000      	beq.n	800c58e <tusb_rhport_init+0x72>
 800c58c:	be00      	bkpt	0x0000
 800c58e:	2300      	movs	r3, #0
 800c590:	e01f      	b.n	800c5d2 <tusb_rhport_init+0xb6>
  _tusb_rhport_role[rhport] = rh_init->role;
 800c592:	79fb      	ldrb	r3, [r7, #7]
 800c594:	683a      	ldr	r2, [r7, #0]
 800c596:	7811      	ldrb	r1, [r2, #0]
 800c598:	4a11      	ldr	r2, [pc, #68]	@ (800c5e0 <tusb_rhport_init+0xc4>)
 800c59a:	54d1      	strb	r1, [r2, r3]

  #if CFG_TUD_ENABLED
  if (rh_init->role == TUSB_ROLE_DEVICE) {
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d115      	bne.n	800c5d0 <tusb_rhport_init+0xb4>
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
 800c5a4:	79fb      	ldrb	r3, [r7, #7]
 800c5a6:	6839      	ldr	r1, [r7, #0]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7fc fa2d 	bl	8008a08 <tud_rhport_init>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	f083 0301 	eor.w	r3, r3, #1
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d00a      	beq.n	800c5d0 <tusb_rhport_init+0xb4>
 800c5ba:	4b08      	ldr	r3, [pc, #32]	@ (800c5dc <tusb_rhport_init+0xc0>)
 800c5bc:	617b      	str	r3, [r7, #20]
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f003 0301 	and.w	r3, r3, #1
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d000      	beq.n	800c5cc <tusb_rhport_init+0xb0>
 800c5ca:	be00      	bkpt	0x0000
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	e000      	b.n	800c5d2 <tusb_rhport_init+0xb6>
  if (rh_init->role == TUSB_ROLE_HOST) {
    TU_ASSERT(tuh_rhport_init(rhport, rh_init));
  }
  #endif

  return true;
 800c5d0:	2301      	movs	r3, #1
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3718      	adds	r7, #24
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	e000edf0 	.word	0xe000edf0
 800c5e0:	200018f4 	.word	0x200018f4

0800c5e4 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800c5e4:	b480      	push	{r7}
 800c5e6:	b085      	sub	sp, #20
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d106      	bne.n	800c60a <tu_edpt_claim+0x26>
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c604:	b2db      	uxtb	r3, r3
 800c606:	2b00      	cmp	r3, #0
 800c608:	d001      	beq.n	800c60e <tu_edpt_claim+0x2a>
 800c60a:	2300      	movs	r3, #0
 800c60c:	e01e      	b.n	800c64c <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c616:	b2db      	uxtb	r3, r3
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d108      	bne.n	800c62e <tu_edpt_claim+0x4a>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c624:	b2db      	uxtb	r3, r3
 800c626:	2b00      	cmp	r3, #0
 800c628:	d101      	bne.n	800c62e <tu_edpt_claim+0x4a>
 800c62a:	2301      	movs	r3, #1
 800c62c:	e000      	b.n	800c630 <tu_edpt_claim+0x4c>
 800c62e:	2300      	movs	r3, #0
 800c630:	73fb      	strb	r3, [r7, #15]
 800c632:	7bfb      	ldrb	r3, [r7, #15]
 800c634:	f003 0301 	and.w	r3, r3, #1
 800c638:	73fb      	strb	r3, [r7, #15]
  if (available) {
 800c63a:	7bfb      	ldrb	r3, [r7, #15]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d004      	beq.n	800c64a <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	7813      	ldrb	r3, [r2, #0]
 800c644:	f043 0304 	orr.w	r3, r3, #4
 800c648:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 800c64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3714      	adds	r7, #20
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800c658:	b480      	push	{r7}
 800c65a:	b085      	sub	sp, #20
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d108      	bne.n	800c682 <tu_edpt_release+0x2a>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d101      	bne.n	800c682 <tu_edpt_release+0x2a>
 800c67e:	2301      	movs	r3, #1
 800c680:	e000      	b.n	800c684 <tu_edpt_release+0x2c>
 800c682:	2300      	movs	r3, #0
 800c684:	73fb      	strb	r3, [r7, #15]
 800c686:	7bfb      	ldrb	r3, [r7, #15]
 800c688:	f003 0301 	and.w	r3, r3, #1
 800c68c:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 800c68e:	7bfb      	ldrb	r3, [r7, #15]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d004      	beq.n	800c69e <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	7813      	ldrb	r3, [r2, #0]
 800c698:	f023 0304 	bic.w	r3, r3, #4
 800c69c:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 800c69e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3714      	adds	r7, #20
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 800c6ac:	b480      	push	{r7}
 800c6ae:	b08b      	sub	sp, #44	@ 0x2c
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	70fb      	strb	r3, [r7, #3]
 800c6b8:	4613      	mov	r3, r2
 800c6ba:	70bb      	strb	r3, [r7, #2]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	889b      	ldrh	r3, [r3, #4]
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6ca:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800c6cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	78db      	ldrb	r3, [r3, #3]
 800c6d2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	2b03      	cmp	r3, #3
 800c6da:	d059      	beq.n	800c790 <tu_edpt_validate+0xe4>
 800c6dc:	2b03      	cmp	r3, #3
 800c6de:	dc6e      	bgt.n	800c7be <tu_edpt_validate+0x112>
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d002      	beq.n	800c6ea <tu_edpt_validate+0x3e>
 800c6e4:	2b02      	cmp	r3, #2
 800c6e6:	d018      	beq.n	800c71a <tu_edpt_validate+0x6e>
 800c6e8:	e069      	b.n	800c7be <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800c6ea:	78fb      	ldrb	r3, [r7, #3]
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	d102      	bne.n	800c6f6 <tu_edpt_validate+0x4a>
 800c6f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6f4:	e001      	b.n	800c6fa <tu_edpt_validate+0x4e>
 800c6f6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800c6fa:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 800c6fc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c6fe:	8a7b      	ldrh	r3, [r7, #18]
 800c700:	429a      	cmp	r2, r3
 800c702:	d95e      	bls.n	800c7c2 <tu_edpt_validate+0x116>
 800c704:	4b35      	ldr	r3, [pc, #212]	@ (800c7dc <tu_edpt_validate+0x130>)
 800c706:	60fb      	str	r3, [r7, #12]
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f003 0301 	and.w	r3, r3, #1
 800c710:	2b00      	cmp	r3, #0
 800c712:	d000      	beq.n	800c716 <tu_edpt_validate+0x6a>
 800c714:	be00      	bkpt	0x0000
 800c716:	2300      	movs	r3, #0
 800c718:	e059      	b.n	800c7ce <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 800c71a:	78fb      	ldrb	r3, [r7, #3]
 800c71c:	2b02      	cmp	r3, #2
 800c71e:	d10e      	bne.n	800c73e <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 800c720:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c722:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c726:	d04e      	beq.n	800c7c6 <tu_edpt_validate+0x11a>
 800c728:	4b2c      	ldr	r3, [pc, #176]	@ (800c7dc <tu_edpt_validate+0x130>)
 800c72a:	617b      	str	r3, [r7, #20]
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f003 0301 	and.w	r3, r3, #1
 800c734:	2b00      	cmp	r3, #0
 800c736:	d000      	beq.n	800c73a <tu_edpt_validate+0x8e>
 800c738:	be00      	bkpt	0x0000
 800c73a:	2300      	movs	r3, #0
 800c73c:	e047      	b.n	800c7ce <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 800c73e:	78bb      	ldrb	r3, [r7, #2]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d00e      	beq.n	800c762 <tu_edpt_validate+0xb6>
 800c744:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c74a:	d10a      	bne.n	800c762 <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	2200      	movs	r2, #0
 800c754:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c758:	711a      	strb	r2, [r3, #4]
 800c75a:	2200      	movs	r2, #0
 800c75c:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 800c75e:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 800c760:	e031      	b.n	800c7c6 <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 800c762:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c764:	2b08      	cmp	r3, #8
 800c766:	d02e      	beq.n	800c7c6 <tu_edpt_validate+0x11a>
 800c768:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c76a:	2b10      	cmp	r3, #16
 800c76c:	d02b      	beq.n	800c7c6 <tu_edpt_validate+0x11a>
 800c76e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c770:	2b20      	cmp	r3, #32
 800c772:	d028      	beq.n	800c7c6 <tu_edpt_validate+0x11a>
 800c774:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c776:	2b40      	cmp	r3, #64	@ 0x40
 800c778:	d025      	beq.n	800c7c6 <tu_edpt_validate+0x11a>
 800c77a:	4b18      	ldr	r3, [pc, #96]	@ (800c7dc <tu_edpt_validate+0x130>)
 800c77c:	61bb      	str	r3, [r7, #24]
 800c77e:	69bb      	ldr	r3, [r7, #24]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f003 0301 	and.w	r3, r3, #1
 800c786:	2b00      	cmp	r3, #0
 800c788:	d000      	beq.n	800c78c <tu_edpt_validate+0xe0>
 800c78a:	be00      	bkpt	0x0000
 800c78c:	2300      	movs	r3, #0
 800c78e:	e01e      	b.n	800c7ce <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800c790:	78fb      	ldrb	r3, [r7, #3]
 800c792:	2b02      	cmp	r3, #2
 800c794:	d102      	bne.n	800c79c <tu_edpt_validate+0xf0>
 800c796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c79a:	e000      	b.n	800c79e <tu_edpt_validate+0xf2>
 800c79c:	2340      	movs	r3, #64	@ 0x40
 800c79e:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800c7a0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c7a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d910      	bls.n	800c7ca <tu_edpt_validate+0x11e>
 800c7a8:	4b0c      	ldr	r3, [pc, #48]	@ (800c7dc <tu_edpt_validate+0x130>)
 800c7aa:	623b      	str	r3, [r7, #32]
 800c7ac:	6a3b      	ldr	r3, [r7, #32]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f003 0301 	and.w	r3, r3, #1
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d000      	beq.n	800c7ba <tu_edpt_validate+0x10e>
 800c7b8:	be00      	bkpt	0x0000
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	e007      	b.n	800c7ce <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	e005      	b.n	800c7ce <tu_edpt_validate+0x122>
      break;
 800c7c2:	bf00      	nop
 800c7c4:	e002      	b.n	800c7cc <tu_edpt_validate+0x120>
      break;
 800c7c6:	bf00      	nop
 800c7c8:	e000      	b.n	800c7cc <tu_edpt_validate+0x120>
      break;
 800c7ca:	bf00      	nop
  }

  return true;
 800c7cc:	2301      	movs	r3, #1
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	372c      	adds	r7, #44	@ 0x2c
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop
 800c7dc:	e000edf0 	.word	0xe000edf0

0800c7e0 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 800c7e0:	b480      	push	{r7}
 800c7e2:	b08d      	sub	sp, #52	@ 0x34
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	4611      	mov	r1, r2
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	80fb      	strh	r3, [r7, #6]
 800c7f2:	4613      	mov	r3, r2
 800c7f4:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800c7fa:	88fb      	ldrh	r3, [r7, #6]
 800c7fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7fe:	4413      	add	r3, r2
 800c800:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 800c802:	e027      	b.n	800c854 <tu_edpt_bind_driver+0x74>
 800c804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c806:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800c808:	6a3b      	ldr	r3, [r7, #32]
 800c80a:	3301      	adds	r3, #1
 800c80c:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 800c80e:	2b05      	cmp	r3, #5
 800c810:	d116      	bne.n	800c840 <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800c812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c814:	789b      	ldrb	r3, [r3, #2]
 800c816:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c81a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c81e:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800c820:	7fbb      	ldrb	r3, [r7, #30]
 800c822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c826:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800c828:	005b      	lsls	r3, r3, #1
 800c82a:	68fa      	ldr	r2, [r7, #12]
 800c82c:	4413      	add	r3, r2
 800c82e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c832:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800c834:	7ffa      	ldrb	r2, [r7, #31]
 800c836:	09d2      	lsrs	r2, r2, #7
 800c838:	b2d2      	uxtb	r2, r2
 800c83a:	4611      	mov	r1, r2
 800c83c:	797a      	ldrb	r2, [r7, #5]
 800c83e:	545a      	strb	r2, [r3, r1]
 800c840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c842:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800c844:	69bb      	ldr	r3, [r7, #24]
 800c846:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	461a      	mov	r2, r3
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 800c852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 800c854:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c858:	429a      	cmp	r2, r3
 800c85a:	d3d3      	bcc.n	800c804 <tu_edpt_bind_driver+0x24>
  }
}
 800c85c:	bf00      	nop
 800c85e:	bf00      	nop
 800c860:	3734      	adds	r7, #52	@ 0x34
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr

0800c86a <atoi>:
 800c86a:	220a      	movs	r2, #10
 800c86c:	2100      	movs	r1, #0
 800c86e:	f000 b87b 	b.w	800c968 <strtol>
	...

0800c874 <_strtol_l.isra.0>:
 800c874:	2b24      	cmp	r3, #36	@ 0x24
 800c876:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c87a:	4686      	mov	lr, r0
 800c87c:	4690      	mov	r8, r2
 800c87e:	d801      	bhi.n	800c884 <_strtol_l.isra.0+0x10>
 800c880:	2b01      	cmp	r3, #1
 800c882:	d106      	bne.n	800c892 <_strtol_l.isra.0+0x1e>
 800c884:	f000 fa82 	bl	800cd8c <__errno>
 800c888:	2316      	movs	r3, #22
 800c88a:	6003      	str	r3, [r0, #0]
 800c88c:	2000      	movs	r0, #0
 800c88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c892:	4834      	ldr	r0, [pc, #208]	@ (800c964 <_strtol_l.isra.0+0xf0>)
 800c894:	460d      	mov	r5, r1
 800c896:	462a      	mov	r2, r5
 800c898:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c89c:	5d06      	ldrb	r6, [r0, r4]
 800c89e:	f016 0608 	ands.w	r6, r6, #8
 800c8a2:	d1f8      	bne.n	800c896 <_strtol_l.isra.0+0x22>
 800c8a4:	2c2d      	cmp	r4, #45	@ 0x2d
 800c8a6:	d110      	bne.n	800c8ca <_strtol_l.isra.0+0x56>
 800c8a8:	782c      	ldrb	r4, [r5, #0]
 800c8aa:	2601      	movs	r6, #1
 800c8ac:	1c95      	adds	r5, r2, #2
 800c8ae:	f033 0210 	bics.w	r2, r3, #16
 800c8b2:	d115      	bne.n	800c8e0 <_strtol_l.isra.0+0x6c>
 800c8b4:	2c30      	cmp	r4, #48	@ 0x30
 800c8b6:	d10d      	bne.n	800c8d4 <_strtol_l.isra.0+0x60>
 800c8b8:	782a      	ldrb	r2, [r5, #0]
 800c8ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c8be:	2a58      	cmp	r2, #88	@ 0x58
 800c8c0:	d108      	bne.n	800c8d4 <_strtol_l.isra.0+0x60>
 800c8c2:	786c      	ldrb	r4, [r5, #1]
 800c8c4:	3502      	adds	r5, #2
 800c8c6:	2310      	movs	r3, #16
 800c8c8:	e00a      	b.n	800c8e0 <_strtol_l.isra.0+0x6c>
 800c8ca:	2c2b      	cmp	r4, #43	@ 0x2b
 800c8cc:	bf04      	itt	eq
 800c8ce:	782c      	ldrbeq	r4, [r5, #0]
 800c8d0:	1c95      	addeq	r5, r2, #2
 800c8d2:	e7ec      	b.n	800c8ae <_strtol_l.isra.0+0x3a>
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d1f6      	bne.n	800c8c6 <_strtol_l.isra.0+0x52>
 800c8d8:	2c30      	cmp	r4, #48	@ 0x30
 800c8da:	bf14      	ite	ne
 800c8dc:	230a      	movne	r3, #10
 800c8de:	2308      	moveq	r3, #8
 800c8e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c8e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	fbbc f9f3 	udiv	r9, ip, r3
 800c8ee:	4610      	mov	r0, r2
 800c8f0:	fb03 ca19 	mls	sl, r3, r9, ip
 800c8f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c8f8:	2f09      	cmp	r7, #9
 800c8fa:	d80f      	bhi.n	800c91c <_strtol_l.isra.0+0xa8>
 800c8fc:	463c      	mov	r4, r7
 800c8fe:	42a3      	cmp	r3, r4
 800c900:	dd1b      	ble.n	800c93a <_strtol_l.isra.0+0xc6>
 800c902:	1c57      	adds	r7, r2, #1
 800c904:	d007      	beq.n	800c916 <_strtol_l.isra.0+0xa2>
 800c906:	4581      	cmp	r9, r0
 800c908:	d314      	bcc.n	800c934 <_strtol_l.isra.0+0xc0>
 800c90a:	d101      	bne.n	800c910 <_strtol_l.isra.0+0x9c>
 800c90c:	45a2      	cmp	sl, r4
 800c90e:	db11      	blt.n	800c934 <_strtol_l.isra.0+0xc0>
 800c910:	fb00 4003 	mla	r0, r0, r3, r4
 800c914:	2201      	movs	r2, #1
 800c916:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c91a:	e7eb      	b.n	800c8f4 <_strtol_l.isra.0+0x80>
 800c91c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c920:	2f19      	cmp	r7, #25
 800c922:	d801      	bhi.n	800c928 <_strtol_l.isra.0+0xb4>
 800c924:	3c37      	subs	r4, #55	@ 0x37
 800c926:	e7ea      	b.n	800c8fe <_strtol_l.isra.0+0x8a>
 800c928:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c92c:	2f19      	cmp	r7, #25
 800c92e:	d804      	bhi.n	800c93a <_strtol_l.isra.0+0xc6>
 800c930:	3c57      	subs	r4, #87	@ 0x57
 800c932:	e7e4      	b.n	800c8fe <_strtol_l.isra.0+0x8a>
 800c934:	f04f 32ff 	mov.w	r2, #4294967295
 800c938:	e7ed      	b.n	800c916 <_strtol_l.isra.0+0xa2>
 800c93a:	1c53      	adds	r3, r2, #1
 800c93c:	d108      	bne.n	800c950 <_strtol_l.isra.0+0xdc>
 800c93e:	2322      	movs	r3, #34	@ 0x22
 800c940:	f8ce 3000 	str.w	r3, [lr]
 800c944:	4660      	mov	r0, ip
 800c946:	f1b8 0f00 	cmp.w	r8, #0
 800c94a:	d0a0      	beq.n	800c88e <_strtol_l.isra.0+0x1a>
 800c94c:	1e69      	subs	r1, r5, #1
 800c94e:	e006      	b.n	800c95e <_strtol_l.isra.0+0xea>
 800c950:	b106      	cbz	r6, 800c954 <_strtol_l.isra.0+0xe0>
 800c952:	4240      	negs	r0, r0
 800c954:	f1b8 0f00 	cmp.w	r8, #0
 800c958:	d099      	beq.n	800c88e <_strtol_l.isra.0+0x1a>
 800c95a:	2a00      	cmp	r2, #0
 800c95c:	d1f6      	bne.n	800c94c <_strtol_l.isra.0+0xd8>
 800c95e:	f8c8 1000 	str.w	r1, [r8]
 800c962:	e794      	b.n	800c88e <_strtol_l.isra.0+0x1a>
 800c964:	0800f005 	.word	0x0800f005

0800c968 <strtol>:
 800c968:	4613      	mov	r3, r2
 800c96a:	460a      	mov	r2, r1
 800c96c:	4601      	mov	r1, r0
 800c96e:	4802      	ldr	r0, [pc, #8]	@ (800c978 <strtol+0x10>)
 800c970:	6800      	ldr	r0, [r0, #0]
 800c972:	f7ff bf7f 	b.w	800c874 <_strtol_l.isra.0>
 800c976:	bf00      	nop
 800c978:	20000250 	.word	0x20000250

0800c97c <std>:
 800c97c:	2300      	movs	r3, #0
 800c97e:	b510      	push	{r4, lr}
 800c980:	4604      	mov	r4, r0
 800c982:	e9c0 3300 	strd	r3, r3, [r0]
 800c986:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c98a:	6083      	str	r3, [r0, #8]
 800c98c:	8181      	strh	r1, [r0, #12]
 800c98e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c990:	81c2      	strh	r2, [r0, #14]
 800c992:	6183      	str	r3, [r0, #24]
 800c994:	4619      	mov	r1, r3
 800c996:	2208      	movs	r2, #8
 800c998:	305c      	adds	r0, #92	@ 0x5c
 800c99a:	f000 f94c 	bl	800cc36 <memset>
 800c99e:	4b0d      	ldr	r3, [pc, #52]	@ (800c9d4 <std+0x58>)
 800c9a0:	6263      	str	r3, [r4, #36]	@ 0x24
 800c9a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c9d8 <std+0x5c>)
 800c9a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c9a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c9dc <std+0x60>)
 800c9a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c9aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c9e0 <std+0x64>)
 800c9ac:	6323      	str	r3, [r4, #48]	@ 0x30
 800c9ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c9e4 <std+0x68>)
 800c9b0:	6224      	str	r4, [r4, #32]
 800c9b2:	429c      	cmp	r4, r3
 800c9b4:	d006      	beq.n	800c9c4 <std+0x48>
 800c9b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c9ba:	4294      	cmp	r4, r2
 800c9bc:	d002      	beq.n	800c9c4 <std+0x48>
 800c9be:	33d0      	adds	r3, #208	@ 0xd0
 800c9c0:	429c      	cmp	r4, r3
 800c9c2:	d105      	bne.n	800c9d0 <std+0x54>
 800c9c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9cc:	f000 ba08 	b.w	800cde0 <__retarget_lock_init_recursive>
 800c9d0:	bd10      	pop	{r4, pc}
 800c9d2:	bf00      	nop
 800c9d4:	0800cbb1 	.word	0x0800cbb1
 800c9d8:	0800cbd3 	.word	0x0800cbd3
 800c9dc:	0800cc0b 	.word	0x0800cc0b
 800c9e0:	0800cc2f 	.word	0x0800cc2f
 800c9e4:	200018f8 	.word	0x200018f8

0800c9e8 <stdio_exit_handler>:
 800c9e8:	4a02      	ldr	r2, [pc, #8]	@ (800c9f4 <stdio_exit_handler+0xc>)
 800c9ea:	4903      	ldr	r1, [pc, #12]	@ (800c9f8 <stdio_exit_handler+0x10>)
 800c9ec:	4803      	ldr	r0, [pc, #12]	@ (800c9fc <stdio_exit_handler+0x14>)
 800c9ee:	f000 b869 	b.w	800cac4 <_fwalk_sglue>
 800c9f2:	bf00      	nop
 800c9f4:	20000244 	.word	0x20000244
 800c9f8:	0800d995 	.word	0x0800d995
 800c9fc:	20000254 	.word	0x20000254

0800ca00 <cleanup_stdio>:
 800ca00:	6841      	ldr	r1, [r0, #4]
 800ca02:	4b0c      	ldr	r3, [pc, #48]	@ (800ca34 <cleanup_stdio+0x34>)
 800ca04:	4299      	cmp	r1, r3
 800ca06:	b510      	push	{r4, lr}
 800ca08:	4604      	mov	r4, r0
 800ca0a:	d001      	beq.n	800ca10 <cleanup_stdio+0x10>
 800ca0c:	f000 ffc2 	bl	800d994 <_fflush_r>
 800ca10:	68a1      	ldr	r1, [r4, #8]
 800ca12:	4b09      	ldr	r3, [pc, #36]	@ (800ca38 <cleanup_stdio+0x38>)
 800ca14:	4299      	cmp	r1, r3
 800ca16:	d002      	beq.n	800ca1e <cleanup_stdio+0x1e>
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f000 ffbb 	bl	800d994 <_fflush_r>
 800ca1e:	68e1      	ldr	r1, [r4, #12]
 800ca20:	4b06      	ldr	r3, [pc, #24]	@ (800ca3c <cleanup_stdio+0x3c>)
 800ca22:	4299      	cmp	r1, r3
 800ca24:	d004      	beq.n	800ca30 <cleanup_stdio+0x30>
 800ca26:	4620      	mov	r0, r4
 800ca28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca2c:	f000 bfb2 	b.w	800d994 <_fflush_r>
 800ca30:	bd10      	pop	{r4, pc}
 800ca32:	bf00      	nop
 800ca34:	200018f8 	.word	0x200018f8
 800ca38:	20001960 	.word	0x20001960
 800ca3c:	200019c8 	.word	0x200019c8

0800ca40 <global_stdio_init.part.0>:
 800ca40:	b510      	push	{r4, lr}
 800ca42:	4b0b      	ldr	r3, [pc, #44]	@ (800ca70 <global_stdio_init.part.0+0x30>)
 800ca44:	4c0b      	ldr	r4, [pc, #44]	@ (800ca74 <global_stdio_init.part.0+0x34>)
 800ca46:	4a0c      	ldr	r2, [pc, #48]	@ (800ca78 <global_stdio_init.part.0+0x38>)
 800ca48:	601a      	str	r2, [r3, #0]
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	2104      	movs	r1, #4
 800ca50:	f7ff ff94 	bl	800c97c <std>
 800ca54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ca58:	2201      	movs	r2, #1
 800ca5a:	2109      	movs	r1, #9
 800ca5c:	f7ff ff8e 	bl	800c97c <std>
 800ca60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ca64:	2202      	movs	r2, #2
 800ca66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca6a:	2112      	movs	r1, #18
 800ca6c:	f7ff bf86 	b.w	800c97c <std>
 800ca70:	20001a30 	.word	0x20001a30
 800ca74:	200018f8 	.word	0x200018f8
 800ca78:	0800c9e9 	.word	0x0800c9e9

0800ca7c <__sfp_lock_acquire>:
 800ca7c:	4801      	ldr	r0, [pc, #4]	@ (800ca84 <__sfp_lock_acquire+0x8>)
 800ca7e:	f000 b9b0 	b.w	800cde2 <__retarget_lock_acquire_recursive>
 800ca82:	bf00      	nop
 800ca84:	20001a39 	.word	0x20001a39

0800ca88 <__sfp_lock_release>:
 800ca88:	4801      	ldr	r0, [pc, #4]	@ (800ca90 <__sfp_lock_release+0x8>)
 800ca8a:	f000 b9ab 	b.w	800cde4 <__retarget_lock_release_recursive>
 800ca8e:	bf00      	nop
 800ca90:	20001a39 	.word	0x20001a39

0800ca94 <__sinit>:
 800ca94:	b510      	push	{r4, lr}
 800ca96:	4604      	mov	r4, r0
 800ca98:	f7ff fff0 	bl	800ca7c <__sfp_lock_acquire>
 800ca9c:	6a23      	ldr	r3, [r4, #32]
 800ca9e:	b11b      	cbz	r3, 800caa8 <__sinit+0x14>
 800caa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800caa4:	f7ff bff0 	b.w	800ca88 <__sfp_lock_release>
 800caa8:	4b04      	ldr	r3, [pc, #16]	@ (800cabc <__sinit+0x28>)
 800caaa:	6223      	str	r3, [r4, #32]
 800caac:	4b04      	ldr	r3, [pc, #16]	@ (800cac0 <__sinit+0x2c>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d1f5      	bne.n	800caa0 <__sinit+0xc>
 800cab4:	f7ff ffc4 	bl	800ca40 <global_stdio_init.part.0>
 800cab8:	e7f2      	b.n	800caa0 <__sinit+0xc>
 800caba:	bf00      	nop
 800cabc:	0800ca01 	.word	0x0800ca01
 800cac0:	20001a30 	.word	0x20001a30

0800cac4 <_fwalk_sglue>:
 800cac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cac8:	4607      	mov	r7, r0
 800caca:	4688      	mov	r8, r1
 800cacc:	4614      	mov	r4, r2
 800cace:	2600      	movs	r6, #0
 800cad0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cad4:	f1b9 0901 	subs.w	r9, r9, #1
 800cad8:	d505      	bpl.n	800cae6 <_fwalk_sglue+0x22>
 800cada:	6824      	ldr	r4, [r4, #0]
 800cadc:	2c00      	cmp	r4, #0
 800cade:	d1f7      	bne.n	800cad0 <_fwalk_sglue+0xc>
 800cae0:	4630      	mov	r0, r6
 800cae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cae6:	89ab      	ldrh	r3, [r5, #12]
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d907      	bls.n	800cafc <_fwalk_sglue+0x38>
 800caec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800caf0:	3301      	adds	r3, #1
 800caf2:	d003      	beq.n	800cafc <_fwalk_sglue+0x38>
 800caf4:	4629      	mov	r1, r5
 800caf6:	4638      	mov	r0, r7
 800caf8:	47c0      	blx	r8
 800cafa:	4306      	orrs	r6, r0
 800cafc:	3568      	adds	r5, #104	@ 0x68
 800cafe:	e7e9      	b.n	800cad4 <_fwalk_sglue+0x10>

0800cb00 <sniprintf>:
 800cb00:	b40c      	push	{r2, r3}
 800cb02:	b530      	push	{r4, r5, lr}
 800cb04:	4b18      	ldr	r3, [pc, #96]	@ (800cb68 <sniprintf+0x68>)
 800cb06:	1e0c      	subs	r4, r1, #0
 800cb08:	681d      	ldr	r5, [r3, #0]
 800cb0a:	b09d      	sub	sp, #116	@ 0x74
 800cb0c:	da08      	bge.n	800cb20 <sniprintf+0x20>
 800cb0e:	238b      	movs	r3, #139	@ 0x8b
 800cb10:	602b      	str	r3, [r5, #0]
 800cb12:	f04f 30ff 	mov.w	r0, #4294967295
 800cb16:	b01d      	add	sp, #116	@ 0x74
 800cb18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb1c:	b002      	add	sp, #8
 800cb1e:	4770      	bx	lr
 800cb20:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cb24:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cb28:	f04f 0300 	mov.w	r3, #0
 800cb2c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cb2e:	bf14      	ite	ne
 800cb30:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cb34:	4623      	moveq	r3, r4
 800cb36:	9304      	str	r3, [sp, #16]
 800cb38:	9307      	str	r3, [sp, #28]
 800cb3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cb3e:	9002      	str	r0, [sp, #8]
 800cb40:	9006      	str	r0, [sp, #24]
 800cb42:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cb46:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cb48:	ab21      	add	r3, sp, #132	@ 0x84
 800cb4a:	a902      	add	r1, sp, #8
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	9301      	str	r3, [sp, #4]
 800cb50:	f000 fad2 	bl	800d0f8 <_svfiprintf_r>
 800cb54:	1c43      	adds	r3, r0, #1
 800cb56:	bfbc      	itt	lt
 800cb58:	238b      	movlt	r3, #139	@ 0x8b
 800cb5a:	602b      	strlt	r3, [r5, #0]
 800cb5c:	2c00      	cmp	r4, #0
 800cb5e:	d0da      	beq.n	800cb16 <sniprintf+0x16>
 800cb60:	9b02      	ldr	r3, [sp, #8]
 800cb62:	2200      	movs	r2, #0
 800cb64:	701a      	strb	r2, [r3, #0]
 800cb66:	e7d6      	b.n	800cb16 <sniprintf+0x16>
 800cb68:	20000250 	.word	0x20000250

0800cb6c <siprintf>:
 800cb6c:	b40e      	push	{r1, r2, r3}
 800cb6e:	b510      	push	{r4, lr}
 800cb70:	b09d      	sub	sp, #116	@ 0x74
 800cb72:	ab1f      	add	r3, sp, #124	@ 0x7c
 800cb74:	9002      	str	r0, [sp, #8]
 800cb76:	9006      	str	r0, [sp, #24]
 800cb78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cb7c:	480a      	ldr	r0, [pc, #40]	@ (800cba8 <siprintf+0x3c>)
 800cb7e:	9107      	str	r1, [sp, #28]
 800cb80:	9104      	str	r1, [sp, #16]
 800cb82:	490a      	ldr	r1, [pc, #40]	@ (800cbac <siprintf+0x40>)
 800cb84:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb88:	9105      	str	r1, [sp, #20]
 800cb8a:	2400      	movs	r4, #0
 800cb8c:	a902      	add	r1, sp, #8
 800cb8e:	6800      	ldr	r0, [r0, #0]
 800cb90:	9301      	str	r3, [sp, #4]
 800cb92:	941b      	str	r4, [sp, #108]	@ 0x6c
 800cb94:	f000 fab0 	bl	800d0f8 <_svfiprintf_r>
 800cb98:	9b02      	ldr	r3, [sp, #8]
 800cb9a:	701c      	strb	r4, [r3, #0]
 800cb9c:	b01d      	add	sp, #116	@ 0x74
 800cb9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cba2:	b003      	add	sp, #12
 800cba4:	4770      	bx	lr
 800cba6:	bf00      	nop
 800cba8:	20000250 	.word	0x20000250
 800cbac:	ffff0208 	.word	0xffff0208

0800cbb0 <__sread>:
 800cbb0:	b510      	push	{r4, lr}
 800cbb2:	460c      	mov	r4, r1
 800cbb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbb8:	f000 f8c4 	bl	800cd44 <_read_r>
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	bfab      	itete	ge
 800cbc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cbc2:	89a3      	ldrhlt	r3, [r4, #12]
 800cbc4:	181b      	addge	r3, r3, r0
 800cbc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cbca:	bfac      	ite	ge
 800cbcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cbce:	81a3      	strhlt	r3, [r4, #12]
 800cbd0:	bd10      	pop	{r4, pc}

0800cbd2 <__swrite>:
 800cbd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd6:	461f      	mov	r7, r3
 800cbd8:	898b      	ldrh	r3, [r1, #12]
 800cbda:	05db      	lsls	r3, r3, #23
 800cbdc:	4605      	mov	r5, r0
 800cbde:	460c      	mov	r4, r1
 800cbe0:	4616      	mov	r6, r2
 800cbe2:	d505      	bpl.n	800cbf0 <__swrite+0x1e>
 800cbe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbe8:	2302      	movs	r3, #2
 800cbea:	2200      	movs	r2, #0
 800cbec:	f000 f898 	bl	800cd20 <_lseek_r>
 800cbf0:	89a3      	ldrh	r3, [r4, #12]
 800cbf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cbfa:	81a3      	strh	r3, [r4, #12]
 800cbfc:	4632      	mov	r2, r6
 800cbfe:	463b      	mov	r3, r7
 800cc00:	4628      	mov	r0, r5
 800cc02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc06:	f000 b8af 	b.w	800cd68 <_write_r>

0800cc0a <__sseek>:
 800cc0a:	b510      	push	{r4, lr}
 800cc0c:	460c      	mov	r4, r1
 800cc0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc12:	f000 f885 	bl	800cd20 <_lseek_r>
 800cc16:	1c43      	adds	r3, r0, #1
 800cc18:	89a3      	ldrh	r3, [r4, #12]
 800cc1a:	bf15      	itete	ne
 800cc1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cc1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cc22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cc26:	81a3      	strheq	r3, [r4, #12]
 800cc28:	bf18      	it	ne
 800cc2a:	81a3      	strhne	r3, [r4, #12]
 800cc2c:	bd10      	pop	{r4, pc}

0800cc2e <__sclose>:
 800cc2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc32:	f000 b865 	b.w	800cd00 <_close_r>

0800cc36 <memset>:
 800cc36:	4402      	add	r2, r0
 800cc38:	4603      	mov	r3, r0
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d100      	bne.n	800cc40 <memset+0xa>
 800cc3e:	4770      	bx	lr
 800cc40:	f803 1b01 	strb.w	r1, [r3], #1
 800cc44:	e7f9      	b.n	800cc3a <memset+0x4>
	...

0800cc48 <strtok>:
 800cc48:	4b16      	ldr	r3, [pc, #88]	@ (800cca4 <strtok+0x5c>)
 800cc4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc4e:	681f      	ldr	r7, [r3, #0]
 800cc50:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800cc52:	4605      	mov	r5, r0
 800cc54:	460e      	mov	r6, r1
 800cc56:	b9ec      	cbnz	r4, 800cc94 <strtok+0x4c>
 800cc58:	2050      	movs	r0, #80	@ 0x50
 800cc5a:	f000 f93b 	bl	800ced4 <malloc>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	6478      	str	r0, [r7, #68]	@ 0x44
 800cc62:	b920      	cbnz	r0, 800cc6e <strtok+0x26>
 800cc64:	4b10      	ldr	r3, [pc, #64]	@ (800cca8 <strtok+0x60>)
 800cc66:	4811      	ldr	r0, [pc, #68]	@ (800ccac <strtok+0x64>)
 800cc68:	215b      	movs	r1, #91	@ 0x5b
 800cc6a:	f000 f8cb 	bl	800ce04 <__assert_func>
 800cc6e:	e9c0 4400 	strd	r4, r4, [r0]
 800cc72:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800cc76:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800cc7a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800cc7e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800cc82:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800cc86:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800cc8a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800cc8e:	6184      	str	r4, [r0, #24]
 800cc90:	7704      	strb	r4, [r0, #28]
 800cc92:	6244      	str	r4, [r0, #36]	@ 0x24
 800cc94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc96:	4631      	mov	r1, r6
 800cc98:	4628      	mov	r0, r5
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cca0:	f000 b806 	b.w	800ccb0 <__strtok_r>
 800cca4:	20000250 	.word	0x20000250
 800cca8:	0800f105 	.word	0x0800f105
 800ccac:	0800f11c 	.word	0x0800f11c

0800ccb0 <__strtok_r>:
 800ccb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	b908      	cbnz	r0, 800ccba <__strtok_r+0xa>
 800ccb6:	6814      	ldr	r4, [r2, #0]
 800ccb8:	b144      	cbz	r4, 800cccc <__strtok_r+0x1c>
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ccc0:	460f      	mov	r7, r1
 800ccc2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ccc6:	b91e      	cbnz	r6, 800ccd0 <__strtok_r+0x20>
 800ccc8:	b965      	cbnz	r5, 800cce4 <__strtok_r+0x34>
 800ccca:	6015      	str	r5, [r2, #0]
 800cccc:	2000      	movs	r0, #0
 800ccce:	e005      	b.n	800ccdc <__strtok_r+0x2c>
 800ccd0:	42b5      	cmp	r5, r6
 800ccd2:	d1f6      	bne.n	800ccc2 <__strtok_r+0x12>
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d1f0      	bne.n	800ccba <__strtok_r+0xa>
 800ccd8:	6014      	str	r4, [r2, #0]
 800ccda:	7003      	strb	r3, [r0, #0]
 800ccdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccde:	461c      	mov	r4, r3
 800cce0:	e00c      	b.n	800ccfc <__strtok_r+0x4c>
 800cce2:	b91d      	cbnz	r5, 800ccec <__strtok_r+0x3c>
 800cce4:	4627      	mov	r7, r4
 800cce6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ccea:	460e      	mov	r6, r1
 800ccec:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ccf0:	42ab      	cmp	r3, r5
 800ccf2:	d1f6      	bne.n	800cce2 <__strtok_r+0x32>
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d0f2      	beq.n	800ccde <__strtok_r+0x2e>
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	703b      	strb	r3, [r7, #0]
 800ccfc:	6014      	str	r4, [r2, #0]
 800ccfe:	e7ed      	b.n	800ccdc <__strtok_r+0x2c>

0800cd00 <_close_r>:
 800cd00:	b538      	push	{r3, r4, r5, lr}
 800cd02:	4d06      	ldr	r5, [pc, #24]	@ (800cd1c <_close_r+0x1c>)
 800cd04:	2300      	movs	r3, #0
 800cd06:	4604      	mov	r4, r0
 800cd08:	4608      	mov	r0, r1
 800cd0a:	602b      	str	r3, [r5, #0]
 800cd0c:	f7f6 fe55 	bl	80039ba <_close>
 800cd10:	1c43      	adds	r3, r0, #1
 800cd12:	d102      	bne.n	800cd1a <_close_r+0x1a>
 800cd14:	682b      	ldr	r3, [r5, #0]
 800cd16:	b103      	cbz	r3, 800cd1a <_close_r+0x1a>
 800cd18:	6023      	str	r3, [r4, #0]
 800cd1a:	bd38      	pop	{r3, r4, r5, pc}
 800cd1c:	20001a34 	.word	0x20001a34

0800cd20 <_lseek_r>:
 800cd20:	b538      	push	{r3, r4, r5, lr}
 800cd22:	4d07      	ldr	r5, [pc, #28]	@ (800cd40 <_lseek_r+0x20>)
 800cd24:	4604      	mov	r4, r0
 800cd26:	4608      	mov	r0, r1
 800cd28:	4611      	mov	r1, r2
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	602a      	str	r2, [r5, #0]
 800cd2e:	461a      	mov	r2, r3
 800cd30:	f7f6 fe6a 	bl	8003a08 <_lseek>
 800cd34:	1c43      	adds	r3, r0, #1
 800cd36:	d102      	bne.n	800cd3e <_lseek_r+0x1e>
 800cd38:	682b      	ldr	r3, [r5, #0]
 800cd3a:	b103      	cbz	r3, 800cd3e <_lseek_r+0x1e>
 800cd3c:	6023      	str	r3, [r4, #0]
 800cd3e:	bd38      	pop	{r3, r4, r5, pc}
 800cd40:	20001a34 	.word	0x20001a34

0800cd44 <_read_r>:
 800cd44:	b538      	push	{r3, r4, r5, lr}
 800cd46:	4d07      	ldr	r5, [pc, #28]	@ (800cd64 <_read_r+0x20>)
 800cd48:	4604      	mov	r4, r0
 800cd4a:	4608      	mov	r0, r1
 800cd4c:	4611      	mov	r1, r2
 800cd4e:	2200      	movs	r2, #0
 800cd50:	602a      	str	r2, [r5, #0]
 800cd52:	461a      	mov	r2, r3
 800cd54:	f7f6 fdf8 	bl	8003948 <_read>
 800cd58:	1c43      	adds	r3, r0, #1
 800cd5a:	d102      	bne.n	800cd62 <_read_r+0x1e>
 800cd5c:	682b      	ldr	r3, [r5, #0]
 800cd5e:	b103      	cbz	r3, 800cd62 <_read_r+0x1e>
 800cd60:	6023      	str	r3, [r4, #0]
 800cd62:	bd38      	pop	{r3, r4, r5, pc}
 800cd64:	20001a34 	.word	0x20001a34

0800cd68 <_write_r>:
 800cd68:	b538      	push	{r3, r4, r5, lr}
 800cd6a:	4d07      	ldr	r5, [pc, #28]	@ (800cd88 <_write_r+0x20>)
 800cd6c:	4604      	mov	r4, r0
 800cd6e:	4608      	mov	r0, r1
 800cd70:	4611      	mov	r1, r2
 800cd72:	2200      	movs	r2, #0
 800cd74:	602a      	str	r2, [r5, #0]
 800cd76:	461a      	mov	r2, r3
 800cd78:	f7f6 fe03 	bl	8003982 <_write>
 800cd7c:	1c43      	adds	r3, r0, #1
 800cd7e:	d102      	bne.n	800cd86 <_write_r+0x1e>
 800cd80:	682b      	ldr	r3, [r5, #0]
 800cd82:	b103      	cbz	r3, 800cd86 <_write_r+0x1e>
 800cd84:	6023      	str	r3, [r4, #0]
 800cd86:	bd38      	pop	{r3, r4, r5, pc}
 800cd88:	20001a34 	.word	0x20001a34

0800cd8c <__errno>:
 800cd8c:	4b01      	ldr	r3, [pc, #4]	@ (800cd94 <__errno+0x8>)
 800cd8e:	6818      	ldr	r0, [r3, #0]
 800cd90:	4770      	bx	lr
 800cd92:	bf00      	nop
 800cd94:	20000250 	.word	0x20000250

0800cd98 <__libc_init_array>:
 800cd98:	b570      	push	{r4, r5, r6, lr}
 800cd9a:	4d0d      	ldr	r5, [pc, #52]	@ (800cdd0 <__libc_init_array+0x38>)
 800cd9c:	4c0d      	ldr	r4, [pc, #52]	@ (800cdd4 <__libc_init_array+0x3c>)
 800cd9e:	1b64      	subs	r4, r4, r5
 800cda0:	10a4      	asrs	r4, r4, #2
 800cda2:	2600      	movs	r6, #0
 800cda4:	42a6      	cmp	r6, r4
 800cda6:	d109      	bne.n	800cdbc <__libc_init_array+0x24>
 800cda8:	4d0b      	ldr	r5, [pc, #44]	@ (800cdd8 <__libc_init_array+0x40>)
 800cdaa:	4c0c      	ldr	r4, [pc, #48]	@ (800cddc <__libc_init_array+0x44>)
 800cdac:	f000 fff0 	bl	800dd90 <_init>
 800cdb0:	1b64      	subs	r4, r4, r5
 800cdb2:	10a4      	asrs	r4, r4, #2
 800cdb4:	2600      	movs	r6, #0
 800cdb6:	42a6      	cmp	r6, r4
 800cdb8:	d105      	bne.n	800cdc6 <__libc_init_array+0x2e>
 800cdba:	bd70      	pop	{r4, r5, r6, pc}
 800cdbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdc0:	4798      	blx	r3
 800cdc2:	3601      	adds	r6, #1
 800cdc4:	e7ee      	b.n	800cda4 <__libc_init_array+0xc>
 800cdc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdca:	4798      	blx	r3
 800cdcc:	3601      	adds	r6, #1
 800cdce:	e7f2      	b.n	800cdb6 <__libc_init_array+0x1e>
 800cdd0:	0800f1f0 	.word	0x0800f1f0
 800cdd4:	0800f1f0 	.word	0x0800f1f0
 800cdd8:	0800f1f0 	.word	0x0800f1f0
 800cddc:	0800f1f4 	.word	0x0800f1f4

0800cde0 <__retarget_lock_init_recursive>:
 800cde0:	4770      	bx	lr

0800cde2 <__retarget_lock_acquire_recursive>:
 800cde2:	4770      	bx	lr

0800cde4 <__retarget_lock_release_recursive>:
 800cde4:	4770      	bx	lr

0800cde6 <memcpy>:
 800cde6:	440a      	add	r2, r1
 800cde8:	4291      	cmp	r1, r2
 800cdea:	f100 33ff 	add.w	r3, r0, #4294967295
 800cdee:	d100      	bne.n	800cdf2 <memcpy+0xc>
 800cdf0:	4770      	bx	lr
 800cdf2:	b510      	push	{r4, lr}
 800cdf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdfc:	4291      	cmp	r1, r2
 800cdfe:	d1f9      	bne.n	800cdf4 <memcpy+0xe>
 800ce00:	bd10      	pop	{r4, pc}
	...

0800ce04 <__assert_func>:
 800ce04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce06:	4614      	mov	r4, r2
 800ce08:	461a      	mov	r2, r3
 800ce0a:	4b09      	ldr	r3, [pc, #36]	@ (800ce30 <__assert_func+0x2c>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4605      	mov	r5, r0
 800ce10:	68d8      	ldr	r0, [r3, #12]
 800ce12:	b14c      	cbz	r4, 800ce28 <__assert_func+0x24>
 800ce14:	4b07      	ldr	r3, [pc, #28]	@ (800ce34 <__assert_func+0x30>)
 800ce16:	9100      	str	r1, [sp, #0]
 800ce18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce1c:	4906      	ldr	r1, [pc, #24]	@ (800ce38 <__assert_func+0x34>)
 800ce1e:	462b      	mov	r3, r5
 800ce20:	f000 fde0 	bl	800d9e4 <fiprintf>
 800ce24:	f000 feae 	bl	800db84 <abort>
 800ce28:	4b04      	ldr	r3, [pc, #16]	@ (800ce3c <__assert_func+0x38>)
 800ce2a:	461c      	mov	r4, r3
 800ce2c:	e7f3      	b.n	800ce16 <__assert_func+0x12>
 800ce2e:	bf00      	nop
 800ce30:	20000250 	.word	0x20000250
 800ce34:	0800f176 	.word	0x0800f176
 800ce38:	0800f183 	.word	0x0800f183
 800ce3c:	0800f1b1 	.word	0x0800f1b1

0800ce40 <_free_r>:
 800ce40:	b538      	push	{r3, r4, r5, lr}
 800ce42:	4605      	mov	r5, r0
 800ce44:	2900      	cmp	r1, #0
 800ce46:	d041      	beq.n	800cecc <_free_r+0x8c>
 800ce48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce4c:	1f0c      	subs	r4, r1, #4
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	bfb8      	it	lt
 800ce52:	18e4      	addlt	r4, r4, r3
 800ce54:	f000 f8e8 	bl	800d028 <__malloc_lock>
 800ce58:	4a1d      	ldr	r2, [pc, #116]	@ (800ced0 <_free_r+0x90>)
 800ce5a:	6813      	ldr	r3, [r2, #0]
 800ce5c:	b933      	cbnz	r3, 800ce6c <_free_r+0x2c>
 800ce5e:	6063      	str	r3, [r4, #4]
 800ce60:	6014      	str	r4, [r2, #0]
 800ce62:	4628      	mov	r0, r5
 800ce64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce68:	f000 b8e4 	b.w	800d034 <__malloc_unlock>
 800ce6c:	42a3      	cmp	r3, r4
 800ce6e:	d908      	bls.n	800ce82 <_free_r+0x42>
 800ce70:	6820      	ldr	r0, [r4, #0]
 800ce72:	1821      	adds	r1, r4, r0
 800ce74:	428b      	cmp	r3, r1
 800ce76:	bf01      	itttt	eq
 800ce78:	6819      	ldreq	r1, [r3, #0]
 800ce7a:	685b      	ldreq	r3, [r3, #4]
 800ce7c:	1809      	addeq	r1, r1, r0
 800ce7e:	6021      	streq	r1, [r4, #0]
 800ce80:	e7ed      	b.n	800ce5e <_free_r+0x1e>
 800ce82:	461a      	mov	r2, r3
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	b10b      	cbz	r3, 800ce8c <_free_r+0x4c>
 800ce88:	42a3      	cmp	r3, r4
 800ce8a:	d9fa      	bls.n	800ce82 <_free_r+0x42>
 800ce8c:	6811      	ldr	r1, [r2, #0]
 800ce8e:	1850      	adds	r0, r2, r1
 800ce90:	42a0      	cmp	r0, r4
 800ce92:	d10b      	bne.n	800ceac <_free_r+0x6c>
 800ce94:	6820      	ldr	r0, [r4, #0]
 800ce96:	4401      	add	r1, r0
 800ce98:	1850      	adds	r0, r2, r1
 800ce9a:	4283      	cmp	r3, r0
 800ce9c:	6011      	str	r1, [r2, #0]
 800ce9e:	d1e0      	bne.n	800ce62 <_free_r+0x22>
 800cea0:	6818      	ldr	r0, [r3, #0]
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	6053      	str	r3, [r2, #4]
 800cea6:	4408      	add	r0, r1
 800cea8:	6010      	str	r0, [r2, #0]
 800ceaa:	e7da      	b.n	800ce62 <_free_r+0x22>
 800ceac:	d902      	bls.n	800ceb4 <_free_r+0x74>
 800ceae:	230c      	movs	r3, #12
 800ceb0:	602b      	str	r3, [r5, #0]
 800ceb2:	e7d6      	b.n	800ce62 <_free_r+0x22>
 800ceb4:	6820      	ldr	r0, [r4, #0]
 800ceb6:	1821      	adds	r1, r4, r0
 800ceb8:	428b      	cmp	r3, r1
 800ceba:	bf04      	itt	eq
 800cebc:	6819      	ldreq	r1, [r3, #0]
 800cebe:	685b      	ldreq	r3, [r3, #4]
 800cec0:	6063      	str	r3, [r4, #4]
 800cec2:	bf04      	itt	eq
 800cec4:	1809      	addeq	r1, r1, r0
 800cec6:	6021      	streq	r1, [r4, #0]
 800cec8:	6054      	str	r4, [r2, #4]
 800ceca:	e7ca      	b.n	800ce62 <_free_r+0x22>
 800cecc:	bd38      	pop	{r3, r4, r5, pc}
 800cece:	bf00      	nop
 800ced0:	20001a40 	.word	0x20001a40

0800ced4 <malloc>:
 800ced4:	4b02      	ldr	r3, [pc, #8]	@ (800cee0 <malloc+0xc>)
 800ced6:	4601      	mov	r1, r0
 800ced8:	6818      	ldr	r0, [r3, #0]
 800ceda:	f000 b825 	b.w	800cf28 <_malloc_r>
 800cede:	bf00      	nop
 800cee0:	20000250 	.word	0x20000250

0800cee4 <sbrk_aligned>:
 800cee4:	b570      	push	{r4, r5, r6, lr}
 800cee6:	4e0f      	ldr	r6, [pc, #60]	@ (800cf24 <sbrk_aligned+0x40>)
 800cee8:	460c      	mov	r4, r1
 800ceea:	6831      	ldr	r1, [r6, #0]
 800ceec:	4605      	mov	r5, r0
 800ceee:	b911      	cbnz	r1, 800cef6 <sbrk_aligned+0x12>
 800cef0:	f000 fe38 	bl	800db64 <_sbrk_r>
 800cef4:	6030      	str	r0, [r6, #0]
 800cef6:	4621      	mov	r1, r4
 800cef8:	4628      	mov	r0, r5
 800cefa:	f000 fe33 	bl	800db64 <_sbrk_r>
 800cefe:	1c43      	adds	r3, r0, #1
 800cf00:	d103      	bne.n	800cf0a <sbrk_aligned+0x26>
 800cf02:	f04f 34ff 	mov.w	r4, #4294967295
 800cf06:	4620      	mov	r0, r4
 800cf08:	bd70      	pop	{r4, r5, r6, pc}
 800cf0a:	1cc4      	adds	r4, r0, #3
 800cf0c:	f024 0403 	bic.w	r4, r4, #3
 800cf10:	42a0      	cmp	r0, r4
 800cf12:	d0f8      	beq.n	800cf06 <sbrk_aligned+0x22>
 800cf14:	1a21      	subs	r1, r4, r0
 800cf16:	4628      	mov	r0, r5
 800cf18:	f000 fe24 	bl	800db64 <_sbrk_r>
 800cf1c:	3001      	adds	r0, #1
 800cf1e:	d1f2      	bne.n	800cf06 <sbrk_aligned+0x22>
 800cf20:	e7ef      	b.n	800cf02 <sbrk_aligned+0x1e>
 800cf22:	bf00      	nop
 800cf24:	20001a3c 	.word	0x20001a3c

0800cf28 <_malloc_r>:
 800cf28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf2c:	1ccd      	adds	r5, r1, #3
 800cf2e:	f025 0503 	bic.w	r5, r5, #3
 800cf32:	3508      	adds	r5, #8
 800cf34:	2d0c      	cmp	r5, #12
 800cf36:	bf38      	it	cc
 800cf38:	250c      	movcc	r5, #12
 800cf3a:	2d00      	cmp	r5, #0
 800cf3c:	4606      	mov	r6, r0
 800cf3e:	db01      	blt.n	800cf44 <_malloc_r+0x1c>
 800cf40:	42a9      	cmp	r1, r5
 800cf42:	d904      	bls.n	800cf4e <_malloc_r+0x26>
 800cf44:	230c      	movs	r3, #12
 800cf46:	6033      	str	r3, [r6, #0]
 800cf48:	2000      	movs	r0, #0
 800cf4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d024 <_malloc_r+0xfc>
 800cf52:	f000 f869 	bl	800d028 <__malloc_lock>
 800cf56:	f8d8 3000 	ldr.w	r3, [r8]
 800cf5a:	461c      	mov	r4, r3
 800cf5c:	bb44      	cbnz	r4, 800cfb0 <_malloc_r+0x88>
 800cf5e:	4629      	mov	r1, r5
 800cf60:	4630      	mov	r0, r6
 800cf62:	f7ff ffbf 	bl	800cee4 <sbrk_aligned>
 800cf66:	1c43      	adds	r3, r0, #1
 800cf68:	4604      	mov	r4, r0
 800cf6a:	d158      	bne.n	800d01e <_malloc_r+0xf6>
 800cf6c:	f8d8 4000 	ldr.w	r4, [r8]
 800cf70:	4627      	mov	r7, r4
 800cf72:	2f00      	cmp	r7, #0
 800cf74:	d143      	bne.n	800cffe <_malloc_r+0xd6>
 800cf76:	2c00      	cmp	r4, #0
 800cf78:	d04b      	beq.n	800d012 <_malloc_r+0xea>
 800cf7a:	6823      	ldr	r3, [r4, #0]
 800cf7c:	4639      	mov	r1, r7
 800cf7e:	4630      	mov	r0, r6
 800cf80:	eb04 0903 	add.w	r9, r4, r3
 800cf84:	f000 fdee 	bl	800db64 <_sbrk_r>
 800cf88:	4581      	cmp	r9, r0
 800cf8a:	d142      	bne.n	800d012 <_malloc_r+0xea>
 800cf8c:	6821      	ldr	r1, [r4, #0]
 800cf8e:	1a6d      	subs	r5, r5, r1
 800cf90:	4629      	mov	r1, r5
 800cf92:	4630      	mov	r0, r6
 800cf94:	f7ff ffa6 	bl	800cee4 <sbrk_aligned>
 800cf98:	3001      	adds	r0, #1
 800cf9a:	d03a      	beq.n	800d012 <_malloc_r+0xea>
 800cf9c:	6823      	ldr	r3, [r4, #0]
 800cf9e:	442b      	add	r3, r5
 800cfa0:	6023      	str	r3, [r4, #0]
 800cfa2:	f8d8 3000 	ldr.w	r3, [r8]
 800cfa6:	685a      	ldr	r2, [r3, #4]
 800cfa8:	bb62      	cbnz	r2, 800d004 <_malloc_r+0xdc>
 800cfaa:	f8c8 7000 	str.w	r7, [r8]
 800cfae:	e00f      	b.n	800cfd0 <_malloc_r+0xa8>
 800cfb0:	6822      	ldr	r2, [r4, #0]
 800cfb2:	1b52      	subs	r2, r2, r5
 800cfb4:	d420      	bmi.n	800cff8 <_malloc_r+0xd0>
 800cfb6:	2a0b      	cmp	r2, #11
 800cfb8:	d917      	bls.n	800cfea <_malloc_r+0xc2>
 800cfba:	1961      	adds	r1, r4, r5
 800cfbc:	42a3      	cmp	r3, r4
 800cfbe:	6025      	str	r5, [r4, #0]
 800cfc0:	bf18      	it	ne
 800cfc2:	6059      	strne	r1, [r3, #4]
 800cfc4:	6863      	ldr	r3, [r4, #4]
 800cfc6:	bf08      	it	eq
 800cfc8:	f8c8 1000 	streq.w	r1, [r8]
 800cfcc:	5162      	str	r2, [r4, r5]
 800cfce:	604b      	str	r3, [r1, #4]
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	f000 f82f 	bl	800d034 <__malloc_unlock>
 800cfd6:	f104 000b 	add.w	r0, r4, #11
 800cfda:	1d23      	adds	r3, r4, #4
 800cfdc:	f020 0007 	bic.w	r0, r0, #7
 800cfe0:	1ac2      	subs	r2, r0, r3
 800cfe2:	bf1c      	itt	ne
 800cfe4:	1a1b      	subne	r3, r3, r0
 800cfe6:	50a3      	strne	r3, [r4, r2]
 800cfe8:	e7af      	b.n	800cf4a <_malloc_r+0x22>
 800cfea:	6862      	ldr	r2, [r4, #4]
 800cfec:	42a3      	cmp	r3, r4
 800cfee:	bf0c      	ite	eq
 800cff0:	f8c8 2000 	streq.w	r2, [r8]
 800cff4:	605a      	strne	r2, [r3, #4]
 800cff6:	e7eb      	b.n	800cfd0 <_malloc_r+0xa8>
 800cff8:	4623      	mov	r3, r4
 800cffa:	6864      	ldr	r4, [r4, #4]
 800cffc:	e7ae      	b.n	800cf5c <_malloc_r+0x34>
 800cffe:	463c      	mov	r4, r7
 800d000:	687f      	ldr	r7, [r7, #4]
 800d002:	e7b6      	b.n	800cf72 <_malloc_r+0x4a>
 800d004:	461a      	mov	r2, r3
 800d006:	685b      	ldr	r3, [r3, #4]
 800d008:	42a3      	cmp	r3, r4
 800d00a:	d1fb      	bne.n	800d004 <_malloc_r+0xdc>
 800d00c:	2300      	movs	r3, #0
 800d00e:	6053      	str	r3, [r2, #4]
 800d010:	e7de      	b.n	800cfd0 <_malloc_r+0xa8>
 800d012:	230c      	movs	r3, #12
 800d014:	6033      	str	r3, [r6, #0]
 800d016:	4630      	mov	r0, r6
 800d018:	f000 f80c 	bl	800d034 <__malloc_unlock>
 800d01c:	e794      	b.n	800cf48 <_malloc_r+0x20>
 800d01e:	6005      	str	r5, [r0, #0]
 800d020:	e7d6      	b.n	800cfd0 <_malloc_r+0xa8>
 800d022:	bf00      	nop
 800d024:	20001a40 	.word	0x20001a40

0800d028 <__malloc_lock>:
 800d028:	4801      	ldr	r0, [pc, #4]	@ (800d030 <__malloc_lock+0x8>)
 800d02a:	f7ff beda 	b.w	800cde2 <__retarget_lock_acquire_recursive>
 800d02e:	bf00      	nop
 800d030:	20001a38 	.word	0x20001a38

0800d034 <__malloc_unlock>:
 800d034:	4801      	ldr	r0, [pc, #4]	@ (800d03c <__malloc_unlock+0x8>)
 800d036:	f7ff bed5 	b.w	800cde4 <__retarget_lock_release_recursive>
 800d03a:	bf00      	nop
 800d03c:	20001a38 	.word	0x20001a38

0800d040 <__ssputs_r>:
 800d040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d044:	688e      	ldr	r6, [r1, #8]
 800d046:	461f      	mov	r7, r3
 800d048:	42be      	cmp	r6, r7
 800d04a:	680b      	ldr	r3, [r1, #0]
 800d04c:	4682      	mov	sl, r0
 800d04e:	460c      	mov	r4, r1
 800d050:	4690      	mov	r8, r2
 800d052:	d82d      	bhi.n	800d0b0 <__ssputs_r+0x70>
 800d054:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d058:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d05c:	d026      	beq.n	800d0ac <__ssputs_r+0x6c>
 800d05e:	6965      	ldr	r5, [r4, #20]
 800d060:	6909      	ldr	r1, [r1, #16]
 800d062:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d066:	eba3 0901 	sub.w	r9, r3, r1
 800d06a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d06e:	1c7b      	adds	r3, r7, #1
 800d070:	444b      	add	r3, r9
 800d072:	106d      	asrs	r5, r5, #1
 800d074:	429d      	cmp	r5, r3
 800d076:	bf38      	it	cc
 800d078:	461d      	movcc	r5, r3
 800d07a:	0553      	lsls	r3, r2, #21
 800d07c:	d527      	bpl.n	800d0ce <__ssputs_r+0x8e>
 800d07e:	4629      	mov	r1, r5
 800d080:	f7ff ff52 	bl	800cf28 <_malloc_r>
 800d084:	4606      	mov	r6, r0
 800d086:	b360      	cbz	r0, 800d0e2 <__ssputs_r+0xa2>
 800d088:	6921      	ldr	r1, [r4, #16]
 800d08a:	464a      	mov	r2, r9
 800d08c:	f7ff feab 	bl	800cde6 <memcpy>
 800d090:	89a3      	ldrh	r3, [r4, #12]
 800d092:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d09a:	81a3      	strh	r3, [r4, #12]
 800d09c:	6126      	str	r6, [r4, #16]
 800d09e:	6165      	str	r5, [r4, #20]
 800d0a0:	444e      	add	r6, r9
 800d0a2:	eba5 0509 	sub.w	r5, r5, r9
 800d0a6:	6026      	str	r6, [r4, #0]
 800d0a8:	60a5      	str	r5, [r4, #8]
 800d0aa:	463e      	mov	r6, r7
 800d0ac:	42be      	cmp	r6, r7
 800d0ae:	d900      	bls.n	800d0b2 <__ssputs_r+0x72>
 800d0b0:	463e      	mov	r6, r7
 800d0b2:	6820      	ldr	r0, [r4, #0]
 800d0b4:	4632      	mov	r2, r6
 800d0b6:	4641      	mov	r1, r8
 800d0b8:	f000 fd3a 	bl	800db30 <memmove>
 800d0bc:	68a3      	ldr	r3, [r4, #8]
 800d0be:	1b9b      	subs	r3, r3, r6
 800d0c0:	60a3      	str	r3, [r4, #8]
 800d0c2:	6823      	ldr	r3, [r4, #0]
 800d0c4:	4433      	add	r3, r6
 800d0c6:	6023      	str	r3, [r4, #0]
 800d0c8:	2000      	movs	r0, #0
 800d0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0ce:	462a      	mov	r2, r5
 800d0d0:	f000 fd5f 	bl	800db92 <_realloc_r>
 800d0d4:	4606      	mov	r6, r0
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	d1e0      	bne.n	800d09c <__ssputs_r+0x5c>
 800d0da:	6921      	ldr	r1, [r4, #16]
 800d0dc:	4650      	mov	r0, sl
 800d0de:	f7ff feaf 	bl	800ce40 <_free_r>
 800d0e2:	230c      	movs	r3, #12
 800d0e4:	f8ca 3000 	str.w	r3, [sl]
 800d0e8:	89a3      	ldrh	r3, [r4, #12]
 800d0ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0ee:	81a3      	strh	r3, [r4, #12]
 800d0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f4:	e7e9      	b.n	800d0ca <__ssputs_r+0x8a>
	...

0800d0f8 <_svfiprintf_r>:
 800d0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0fc:	4698      	mov	r8, r3
 800d0fe:	898b      	ldrh	r3, [r1, #12]
 800d100:	061b      	lsls	r3, r3, #24
 800d102:	b09d      	sub	sp, #116	@ 0x74
 800d104:	4607      	mov	r7, r0
 800d106:	460d      	mov	r5, r1
 800d108:	4614      	mov	r4, r2
 800d10a:	d510      	bpl.n	800d12e <_svfiprintf_r+0x36>
 800d10c:	690b      	ldr	r3, [r1, #16]
 800d10e:	b973      	cbnz	r3, 800d12e <_svfiprintf_r+0x36>
 800d110:	2140      	movs	r1, #64	@ 0x40
 800d112:	f7ff ff09 	bl	800cf28 <_malloc_r>
 800d116:	6028      	str	r0, [r5, #0]
 800d118:	6128      	str	r0, [r5, #16]
 800d11a:	b930      	cbnz	r0, 800d12a <_svfiprintf_r+0x32>
 800d11c:	230c      	movs	r3, #12
 800d11e:	603b      	str	r3, [r7, #0]
 800d120:	f04f 30ff 	mov.w	r0, #4294967295
 800d124:	b01d      	add	sp, #116	@ 0x74
 800d126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d12a:	2340      	movs	r3, #64	@ 0x40
 800d12c:	616b      	str	r3, [r5, #20]
 800d12e:	2300      	movs	r3, #0
 800d130:	9309      	str	r3, [sp, #36]	@ 0x24
 800d132:	2320      	movs	r3, #32
 800d134:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d138:	f8cd 800c 	str.w	r8, [sp, #12]
 800d13c:	2330      	movs	r3, #48	@ 0x30
 800d13e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d2dc <_svfiprintf_r+0x1e4>
 800d142:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d146:	f04f 0901 	mov.w	r9, #1
 800d14a:	4623      	mov	r3, r4
 800d14c:	469a      	mov	sl, r3
 800d14e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d152:	b10a      	cbz	r2, 800d158 <_svfiprintf_r+0x60>
 800d154:	2a25      	cmp	r2, #37	@ 0x25
 800d156:	d1f9      	bne.n	800d14c <_svfiprintf_r+0x54>
 800d158:	ebba 0b04 	subs.w	fp, sl, r4
 800d15c:	d00b      	beq.n	800d176 <_svfiprintf_r+0x7e>
 800d15e:	465b      	mov	r3, fp
 800d160:	4622      	mov	r2, r4
 800d162:	4629      	mov	r1, r5
 800d164:	4638      	mov	r0, r7
 800d166:	f7ff ff6b 	bl	800d040 <__ssputs_r>
 800d16a:	3001      	adds	r0, #1
 800d16c:	f000 80a7 	beq.w	800d2be <_svfiprintf_r+0x1c6>
 800d170:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d172:	445a      	add	r2, fp
 800d174:	9209      	str	r2, [sp, #36]	@ 0x24
 800d176:	f89a 3000 	ldrb.w	r3, [sl]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	f000 809f 	beq.w	800d2be <_svfiprintf_r+0x1c6>
 800d180:	2300      	movs	r3, #0
 800d182:	f04f 32ff 	mov.w	r2, #4294967295
 800d186:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d18a:	f10a 0a01 	add.w	sl, sl, #1
 800d18e:	9304      	str	r3, [sp, #16]
 800d190:	9307      	str	r3, [sp, #28]
 800d192:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d196:	931a      	str	r3, [sp, #104]	@ 0x68
 800d198:	4654      	mov	r4, sl
 800d19a:	2205      	movs	r2, #5
 800d19c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1a0:	484e      	ldr	r0, [pc, #312]	@ (800d2dc <_svfiprintf_r+0x1e4>)
 800d1a2:	f7f3 f835 	bl	8000210 <memchr>
 800d1a6:	9a04      	ldr	r2, [sp, #16]
 800d1a8:	b9d8      	cbnz	r0, 800d1e2 <_svfiprintf_r+0xea>
 800d1aa:	06d0      	lsls	r0, r2, #27
 800d1ac:	bf44      	itt	mi
 800d1ae:	2320      	movmi	r3, #32
 800d1b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1b4:	0711      	lsls	r1, r2, #28
 800d1b6:	bf44      	itt	mi
 800d1b8:	232b      	movmi	r3, #43	@ 0x2b
 800d1ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1be:	f89a 3000 	ldrb.w	r3, [sl]
 800d1c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1c4:	d015      	beq.n	800d1f2 <_svfiprintf_r+0xfa>
 800d1c6:	9a07      	ldr	r2, [sp, #28]
 800d1c8:	4654      	mov	r4, sl
 800d1ca:	2000      	movs	r0, #0
 800d1cc:	f04f 0c0a 	mov.w	ip, #10
 800d1d0:	4621      	mov	r1, r4
 800d1d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1d6:	3b30      	subs	r3, #48	@ 0x30
 800d1d8:	2b09      	cmp	r3, #9
 800d1da:	d94b      	bls.n	800d274 <_svfiprintf_r+0x17c>
 800d1dc:	b1b0      	cbz	r0, 800d20c <_svfiprintf_r+0x114>
 800d1de:	9207      	str	r2, [sp, #28]
 800d1e0:	e014      	b.n	800d20c <_svfiprintf_r+0x114>
 800d1e2:	eba0 0308 	sub.w	r3, r0, r8
 800d1e6:	fa09 f303 	lsl.w	r3, r9, r3
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	9304      	str	r3, [sp, #16]
 800d1ee:	46a2      	mov	sl, r4
 800d1f0:	e7d2      	b.n	800d198 <_svfiprintf_r+0xa0>
 800d1f2:	9b03      	ldr	r3, [sp, #12]
 800d1f4:	1d19      	adds	r1, r3, #4
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	9103      	str	r1, [sp, #12]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	bfbb      	ittet	lt
 800d1fe:	425b      	neglt	r3, r3
 800d200:	f042 0202 	orrlt.w	r2, r2, #2
 800d204:	9307      	strge	r3, [sp, #28]
 800d206:	9307      	strlt	r3, [sp, #28]
 800d208:	bfb8      	it	lt
 800d20a:	9204      	strlt	r2, [sp, #16]
 800d20c:	7823      	ldrb	r3, [r4, #0]
 800d20e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d210:	d10a      	bne.n	800d228 <_svfiprintf_r+0x130>
 800d212:	7863      	ldrb	r3, [r4, #1]
 800d214:	2b2a      	cmp	r3, #42	@ 0x2a
 800d216:	d132      	bne.n	800d27e <_svfiprintf_r+0x186>
 800d218:	9b03      	ldr	r3, [sp, #12]
 800d21a:	1d1a      	adds	r2, r3, #4
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	9203      	str	r2, [sp, #12]
 800d220:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d224:	3402      	adds	r4, #2
 800d226:	9305      	str	r3, [sp, #20]
 800d228:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d2ec <_svfiprintf_r+0x1f4>
 800d22c:	7821      	ldrb	r1, [r4, #0]
 800d22e:	2203      	movs	r2, #3
 800d230:	4650      	mov	r0, sl
 800d232:	f7f2 ffed 	bl	8000210 <memchr>
 800d236:	b138      	cbz	r0, 800d248 <_svfiprintf_r+0x150>
 800d238:	9b04      	ldr	r3, [sp, #16]
 800d23a:	eba0 000a 	sub.w	r0, r0, sl
 800d23e:	2240      	movs	r2, #64	@ 0x40
 800d240:	4082      	lsls	r2, r0
 800d242:	4313      	orrs	r3, r2
 800d244:	3401      	adds	r4, #1
 800d246:	9304      	str	r3, [sp, #16]
 800d248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d24c:	4824      	ldr	r0, [pc, #144]	@ (800d2e0 <_svfiprintf_r+0x1e8>)
 800d24e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d252:	2206      	movs	r2, #6
 800d254:	f7f2 ffdc 	bl	8000210 <memchr>
 800d258:	2800      	cmp	r0, #0
 800d25a:	d036      	beq.n	800d2ca <_svfiprintf_r+0x1d2>
 800d25c:	4b21      	ldr	r3, [pc, #132]	@ (800d2e4 <_svfiprintf_r+0x1ec>)
 800d25e:	bb1b      	cbnz	r3, 800d2a8 <_svfiprintf_r+0x1b0>
 800d260:	9b03      	ldr	r3, [sp, #12]
 800d262:	3307      	adds	r3, #7
 800d264:	f023 0307 	bic.w	r3, r3, #7
 800d268:	3308      	adds	r3, #8
 800d26a:	9303      	str	r3, [sp, #12]
 800d26c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d26e:	4433      	add	r3, r6
 800d270:	9309      	str	r3, [sp, #36]	@ 0x24
 800d272:	e76a      	b.n	800d14a <_svfiprintf_r+0x52>
 800d274:	fb0c 3202 	mla	r2, ip, r2, r3
 800d278:	460c      	mov	r4, r1
 800d27a:	2001      	movs	r0, #1
 800d27c:	e7a8      	b.n	800d1d0 <_svfiprintf_r+0xd8>
 800d27e:	2300      	movs	r3, #0
 800d280:	3401      	adds	r4, #1
 800d282:	9305      	str	r3, [sp, #20]
 800d284:	4619      	mov	r1, r3
 800d286:	f04f 0c0a 	mov.w	ip, #10
 800d28a:	4620      	mov	r0, r4
 800d28c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d290:	3a30      	subs	r2, #48	@ 0x30
 800d292:	2a09      	cmp	r2, #9
 800d294:	d903      	bls.n	800d29e <_svfiprintf_r+0x1a6>
 800d296:	2b00      	cmp	r3, #0
 800d298:	d0c6      	beq.n	800d228 <_svfiprintf_r+0x130>
 800d29a:	9105      	str	r1, [sp, #20]
 800d29c:	e7c4      	b.n	800d228 <_svfiprintf_r+0x130>
 800d29e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2a2:	4604      	mov	r4, r0
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	e7f0      	b.n	800d28a <_svfiprintf_r+0x192>
 800d2a8:	ab03      	add	r3, sp, #12
 800d2aa:	9300      	str	r3, [sp, #0]
 800d2ac:	462a      	mov	r2, r5
 800d2ae:	4b0e      	ldr	r3, [pc, #56]	@ (800d2e8 <_svfiprintf_r+0x1f0>)
 800d2b0:	a904      	add	r1, sp, #16
 800d2b2:	4638      	mov	r0, r7
 800d2b4:	f3af 8000 	nop.w
 800d2b8:	1c42      	adds	r2, r0, #1
 800d2ba:	4606      	mov	r6, r0
 800d2bc:	d1d6      	bne.n	800d26c <_svfiprintf_r+0x174>
 800d2be:	89ab      	ldrh	r3, [r5, #12]
 800d2c0:	065b      	lsls	r3, r3, #25
 800d2c2:	f53f af2d 	bmi.w	800d120 <_svfiprintf_r+0x28>
 800d2c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2c8:	e72c      	b.n	800d124 <_svfiprintf_r+0x2c>
 800d2ca:	ab03      	add	r3, sp, #12
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	462a      	mov	r2, r5
 800d2d0:	4b05      	ldr	r3, [pc, #20]	@ (800d2e8 <_svfiprintf_r+0x1f0>)
 800d2d2:	a904      	add	r1, sp, #16
 800d2d4:	4638      	mov	r0, r7
 800d2d6:	f000 f9bb 	bl	800d650 <_printf_i>
 800d2da:	e7ed      	b.n	800d2b8 <_svfiprintf_r+0x1c0>
 800d2dc:	0800f1b2 	.word	0x0800f1b2
 800d2e0:	0800f1bc 	.word	0x0800f1bc
 800d2e4:	00000000 	.word	0x00000000
 800d2e8:	0800d041 	.word	0x0800d041
 800d2ec:	0800f1b8 	.word	0x0800f1b8

0800d2f0 <__sfputc_r>:
 800d2f0:	6893      	ldr	r3, [r2, #8]
 800d2f2:	3b01      	subs	r3, #1
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	b410      	push	{r4}
 800d2f8:	6093      	str	r3, [r2, #8]
 800d2fa:	da08      	bge.n	800d30e <__sfputc_r+0x1e>
 800d2fc:	6994      	ldr	r4, [r2, #24]
 800d2fe:	42a3      	cmp	r3, r4
 800d300:	db01      	blt.n	800d306 <__sfputc_r+0x16>
 800d302:	290a      	cmp	r1, #10
 800d304:	d103      	bne.n	800d30e <__sfputc_r+0x1e>
 800d306:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d30a:	f000 bb7d 	b.w	800da08 <__swbuf_r>
 800d30e:	6813      	ldr	r3, [r2, #0]
 800d310:	1c58      	adds	r0, r3, #1
 800d312:	6010      	str	r0, [r2, #0]
 800d314:	7019      	strb	r1, [r3, #0]
 800d316:	4608      	mov	r0, r1
 800d318:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d31c:	4770      	bx	lr

0800d31e <__sfputs_r>:
 800d31e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d320:	4606      	mov	r6, r0
 800d322:	460f      	mov	r7, r1
 800d324:	4614      	mov	r4, r2
 800d326:	18d5      	adds	r5, r2, r3
 800d328:	42ac      	cmp	r4, r5
 800d32a:	d101      	bne.n	800d330 <__sfputs_r+0x12>
 800d32c:	2000      	movs	r0, #0
 800d32e:	e007      	b.n	800d340 <__sfputs_r+0x22>
 800d330:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d334:	463a      	mov	r2, r7
 800d336:	4630      	mov	r0, r6
 800d338:	f7ff ffda 	bl	800d2f0 <__sfputc_r>
 800d33c:	1c43      	adds	r3, r0, #1
 800d33e:	d1f3      	bne.n	800d328 <__sfputs_r+0xa>
 800d340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d344 <_vfiprintf_r>:
 800d344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d348:	460d      	mov	r5, r1
 800d34a:	b09d      	sub	sp, #116	@ 0x74
 800d34c:	4614      	mov	r4, r2
 800d34e:	4698      	mov	r8, r3
 800d350:	4606      	mov	r6, r0
 800d352:	b118      	cbz	r0, 800d35c <_vfiprintf_r+0x18>
 800d354:	6a03      	ldr	r3, [r0, #32]
 800d356:	b90b      	cbnz	r3, 800d35c <_vfiprintf_r+0x18>
 800d358:	f7ff fb9c 	bl	800ca94 <__sinit>
 800d35c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d35e:	07d9      	lsls	r1, r3, #31
 800d360:	d405      	bmi.n	800d36e <_vfiprintf_r+0x2a>
 800d362:	89ab      	ldrh	r3, [r5, #12]
 800d364:	059a      	lsls	r2, r3, #22
 800d366:	d402      	bmi.n	800d36e <_vfiprintf_r+0x2a>
 800d368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d36a:	f7ff fd3a 	bl	800cde2 <__retarget_lock_acquire_recursive>
 800d36e:	89ab      	ldrh	r3, [r5, #12]
 800d370:	071b      	lsls	r3, r3, #28
 800d372:	d501      	bpl.n	800d378 <_vfiprintf_r+0x34>
 800d374:	692b      	ldr	r3, [r5, #16]
 800d376:	b99b      	cbnz	r3, 800d3a0 <_vfiprintf_r+0x5c>
 800d378:	4629      	mov	r1, r5
 800d37a:	4630      	mov	r0, r6
 800d37c:	f000 fb82 	bl	800da84 <__swsetup_r>
 800d380:	b170      	cbz	r0, 800d3a0 <_vfiprintf_r+0x5c>
 800d382:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d384:	07dc      	lsls	r4, r3, #31
 800d386:	d504      	bpl.n	800d392 <_vfiprintf_r+0x4e>
 800d388:	f04f 30ff 	mov.w	r0, #4294967295
 800d38c:	b01d      	add	sp, #116	@ 0x74
 800d38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d392:	89ab      	ldrh	r3, [r5, #12]
 800d394:	0598      	lsls	r0, r3, #22
 800d396:	d4f7      	bmi.n	800d388 <_vfiprintf_r+0x44>
 800d398:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d39a:	f7ff fd23 	bl	800cde4 <__retarget_lock_release_recursive>
 800d39e:	e7f3      	b.n	800d388 <_vfiprintf_r+0x44>
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3a4:	2320      	movs	r3, #32
 800d3a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d3aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3ae:	2330      	movs	r3, #48	@ 0x30
 800d3b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d560 <_vfiprintf_r+0x21c>
 800d3b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3b8:	f04f 0901 	mov.w	r9, #1
 800d3bc:	4623      	mov	r3, r4
 800d3be:	469a      	mov	sl, r3
 800d3c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3c4:	b10a      	cbz	r2, 800d3ca <_vfiprintf_r+0x86>
 800d3c6:	2a25      	cmp	r2, #37	@ 0x25
 800d3c8:	d1f9      	bne.n	800d3be <_vfiprintf_r+0x7a>
 800d3ca:	ebba 0b04 	subs.w	fp, sl, r4
 800d3ce:	d00b      	beq.n	800d3e8 <_vfiprintf_r+0xa4>
 800d3d0:	465b      	mov	r3, fp
 800d3d2:	4622      	mov	r2, r4
 800d3d4:	4629      	mov	r1, r5
 800d3d6:	4630      	mov	r0, r6
 800d3d8:	f7ff ffa1 	bl	800d31e <__sfputs_r>
 800d3dc:	3001      	adds	r0, #1
 800d3de:	f000 80a7 	beq.w	800d530 <_vfiprintf_r+0x1ec>
 800d3e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3e4:	445a      	add	r2, fp
 800d3e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d3e8:	f89a 3000 	ldrb.w	r3, [sl]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f000 809f 	beq.w	800d530 <_vfiprintf_r+0x1ec>
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3fc:	f10a 0a01 	add.w	sl, sl, #1
 800d400:	9304      	str	r3, [sp, #16]
 800d402:	9307      	str	r3, [sp, #28]
 800d404:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d408:	931a      	str	r3, [sp, #104]	@ 0x68
 800d40a:	4654      	mov	r4, sl
 800d40c:	2205      	movs	r2, #5
 800d40e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d412:	4853      	ldr	r0, [pc, #332]	@ (800d560 <_vfiprintf_r+0x21c>)
 800d414:	f7f2 fefc 	bl	8000210 <memchr>
 800d418:	9a04      	ldr	r2, [sp, #16]
 800d41a:	b9d8      	cbnz	r0, 800d454 <_vfiprintf_r+0x110>
 800d41c:	06d1      	lsls	r1, r2, #27
 800d41e:	bf44      	itt	mi
 800d420:	2320      	movmi	r3, #32
 800d422:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d426:	0713      	lsls	r3, r2, #28
 800d428:	bf44      	itt	mi
 800d42a:	232b      	movmi	r3, #43	@ 0x2b
 800d42c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d430:	f89a 3000 	ldrb.w	r3, [sl]
 800d434:	2b2a      	cmp	r3, #42	@ 0x2a
 800d436:	d015      	beq.n	800d464 <_vfiprintf_r+0x120>
 800d438:	9a07      	ldr	r2, [sp, #28]
 800d43a:	4654      	mov	r4, sl
 800d43c:	2000      	movs	r0, #0
 800d43e:	f04f 0c0a 	mov.w	ip, #10
 800d442:	4621      	mov	r1, r4
 800d444:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d448:	3b30      	subs	r3, #48	@ 0x30
 800d44a:	2b09      	cmp	r3, #9
 800d44c:	d94b      	bls.n	800d4e6 <_vfiprintf_r+0x1a2>
 800d44e:	b1b0      	cbz	r0, 800d47e <_vfiprintf_r+0x13a>
 800d450:	9207      	str	r2, [sp, #28]
 800d452:	e014      	b.n	800d47e <_vfiprintf_r+0x13a>
 800d454:	eba0 0308 	sub.w	r3, r0, r8
 800d458:	fa09 f303 	lsl.w	r3, r9, r3
 800d45c:	4313      	orrs	r3, r2
 800d45e:	9304      	str	r3, [sp, #16]
 800d460:	46a2      	mov	sl, r4
 800d462:	e7d2      	b.n	800d40a <_vfiprintf_r+0xc6>
 800d464:	9b03      	ldr	r3, [sp, #12]
 800d466:	1d19      	adds	r1, r3, #4
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	9103      	str	r1, [sp, #12]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	bfbb      	ittet	lt
 800d470:	425b      	neglt	r3, r3
 800d472:	f042 0202 	orrlt.w	r2, r2, #2
 800d476:	9307      	strge	r3, [sp, #28]
 800d478:	9307      	strlt	r3, [sp, #28]
 800d47a:	bfb8      	it	lt
 800d47c:	9204      	strlt	r2, [sp, #16]
 800d47e:	7823      	ldrb	r3, [r4, #0]
 800d480:	2b2e      	cmp	r3, #46	@ 0x2e
 800d482:	d10a      	bne.n	800d49a <_vfiprintf_r+0x156>
 800d484:	7863      	ldrb	r3, [r4, #1]
 800d486:	2b2a      	cmp	r3, #42	@ 0x2a
 800d488:	d132      	bne.n	800d4f0 <_vfiprintf_r+0x1ac>
 800d48a:	9b03      	ldr	r3, [sp, #12]
 800d48c:	1d1a      	adds	r2, r3, #4
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	9203      	str	r2, [sp, #12]
 800d492:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d496:	3402      	adds	r4, #2
 800d498:	9305      	str	r3, [sp, #20]
 800d49a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d570 <_vfiprintf_r+0x22c>
 800d49e:	7821      	ldrb	r1, [r4, #0]
 800d4a0:	2203      	movs	r2, #3
 800d4a2:	4650      	mov	r0, sl
 800d4a4:	f7f2 feb4 	bl	8000210 <memchr>
 800d4a8:	b138      	cbz	r0, 800d4ba <_vfiprintf_r+0x176>
 800d4aa:	9b04      	ldr	r3, [sp, #16]
 800d4ac:	eba0 000a 	sub.w	r0, r0, sl
 800d4b0:	2240      	movs	r2, #64	@ 0x40
 800d4b2:	4082      	lsls	r2, r0
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	3401      	adds	r4, #1
 800d4b8:	9304      	str	r3, [sp, #16]
 800d4ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4be:	4829      	ldr	r0, [pc, #164]	@ (800d564 <_vfiprintf_r+0x220>)
 800d4c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4c4:	2206      	movs	r2, #6
 800d4c6:	f7f2 fea3 	bl	8000210 <memchr>
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	d03f      	beq.n	800d54e <_vfiprintf_r+0x20a>
 800d4ce:	4b26      	ldr	r3, [pc, #152]	@ (800d568 <_vfiprintf_r+0x224>)
 800d4d0:	bb1b      	cbnz	r3, 800d51a <_vfiprintf_r+0x1d6>
 800d4d2:	9b03      	ldr	r3, [sp, #12]
 800d4d4:	3307      	adds	r3, #7
 800d4d6:	f023 0307 	bic.w	r3, r3, #7
 800d4da:	3308      	adds	r3, #8
 800d4dc:	9303      	str	r3, [sp, #12]
 800d4de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4e0:	443b      	add	r3, r7
 800d4e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4e4:	e76a      	b.n	800d3bc <_vfiprintf_r+0x78>
 800d4e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4ea:	460c      	mov	r4, r1
 800d4ec:	2001      	movs	r0, #1
 800d4ee:	e7a8      	b.n	800d442 <_vfiprintf_r+0xfe>
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	3401      	adds	r4, #1
 800d4f4:	9305      	str	r3, [sp, #20]
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	f04f 0c0a 	mov.w	ip, #10
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d502:	3a30      	subs	r2, #48	@ 0x30
 800d504:	2a09      	cmp	r2, #9
 800d506:	d903      	bls.n	800d510 <_vfiprintf_r+0x1cc>
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d0c6      	beq.n	800d49a <_vfiprintf_r+0x156>
 800d50c:	9105      	str	r1, [sp, #20]
 800d50e:	e7c4      	b.n	800d49a <_vfiprintf_r+0x156>
 800d510:	fb0c 2101 	mla	r1, ip, r1, r2
 800d514:	4604      	mov	r4, r0
 800d516:	2301      	movs	r3, #1
 800d518:	e7f0      	b.n	800d4fc <_vfiprintf_r+0x1b8>
 800d51a:	ab03      	add	r3, sp, #12
 800d51c:	9300      	str	r3, [sp, #0]
 800d51e:	462a      	mov	r2, r5
 800d520:	4b12      	ldr	r3, [pc, #72]	@ (800d56c <_vfiprintf_r+0x228>)
 800d522:	a904      	add	r1, sp, #16
 800d524:	4630      	mov	r0, r6
 800d526:	f3af 8000 	nop.w
 800d52a:	4607      	mov	r7, r0
 800d52c:	1c78      	adds	r0, r7, #1
 800d52e:	d1d6      	bne.n	800d4de <_vfiprintf_r+0x19a>
 800d530:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d532:	07d9      	lsls	r1, r3, #31
 800d534:	d405      	bmi.n	800d542 <_vfiprintf_r+0x1fe>
 800d536:	89ab      	ldrh	r3, [r5, #12]
 800d538:	059a      	lsls	r2, r3, #22
 800d53a:	d402      	bmi.n	800d542 <_vfiprintf_r+0x1fe>
 800d53c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d53e:	f7ff fc51 	bl	800cde4 <__retarget_lock_release_recursive>
 800d542:	89ab      	ldrh	r3, [r5, #12]
 800d544:	065b      	lsls	r3, r3, #25
 800d546:	f53f af1f 	bmi.w	800d388 <_vfiprintf_r+0x44>
 800d54a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d54c:	e71e      	b.n	800d38c <_vfiprintf_r+0x48>
 800d54e:	ab03      	add	r3, sp, #12
 800d550:	9300      	str	r3, [sp, #0]
 800d552:	462a      	mov	r2, r5
 800d554:	4b05      	ldr	r3, [pc, #20]	@ (800d56c <_vfiprintf_r+0x228>)
 800d556:	a904      	add	r1, sp, #16
 800d558:	4630      	mov	r0, r6
 800d55a:	f000 f879 	bl	800d650 <_printf_i>
 800d55e:	e7e4      	b.n	800d52a <_vfiprintf_r+0x1e6>
 800d560:	0800f1b2 	.word	0x0800f1b2
 800d564:	0800f1bc 	.word	0x0800f1bc
 800d568:	00000000 	.word	0x00000000
 800d56c:	0800d31f 	.word	0x0800d31f
 800d570:	0800f1b8 	.word	0x0800f1b8

0800d574 <_printf_common>:
 800d574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d578:	4616      	mov	r6, r2
 800d57a:	4698      	mov	r8, r3
 800d57c:	688a      	ldr	r2, [r1, #8]
 800d57e:	690b      	ldr	r3, [r1, #16]
 800d580:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d584:	4293      	cmp	r3, r2
 800d586:	bfb8      	it	lt
 800d588:	4613      	movlt	r3, r2
 800d58a:	6033      	str	r3, [r6, #0]
 800d58c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d590:	4607      	mov	r7, r0
 800d592:	460c      	mov	r4, r1
 800d594:	b10a      	cbz	r2, 800d59a <_printf_common+0x26>
 800d596:	3301      	adds	r3, #1
 800d598:	6033      	str	r3, [r6, #0]
 800d59a:	6823      	ldr	r3, [r4, #0]
 800d59c:	0699      	lsls	r1, r3, #26
 800d59e:	bf42      	ittt	mi
 800d5a0:	6833      	ldrmi	r3, [r6, #0]
 800d5a2:	3302      	addmi	r3, #2
 800d5a4:	6033      	strmi	r3, [r6, #0]
 800d5a6:	6825      	ldr	r5, [r4, #0]
 800d5a8:	f015 0506 	ands.w	r5, r5, #6
 800d5ac:	d106      	bne.n	800d5bc <_printf_common+0x48>
 800d5ae:	f104 0a19 	add.w	sl, r4, #25
 800d5b2:	68e3      	ldr	r3, [r4, #12]
 800d5b4:	6832      	ldr	r2, [r6, #0]
 800d5b6:	1a9b      	subs	r3, r3, r2
 800d5b8:	42ab      	cmp	r3, r5
 800d5ba:	dc26      	bgt.n	800d60a <_printf_common+0x96>
 800d5bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d5c0:	6822      	ldr	r2, [r4, #0]
 800d5c2:	3b00      	subs	r3, #0
 800d5c4:	bf18      	it	ne
 800d5c6:	2301      	movne	r3, #1
 800d5c8:	0692      	lsls	r2, r2, #26
 800d5ca:	d42b      	bmi.n	800d624 <_printf_common+0xb0>
 800d5cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d5d0:	4641      	mov	r1, r8
 800d5d2:	4638      	mov	r0, r7
 800d5d4:	47c8      	blx	r9
 800d5d6:	3001      	adds	r0, #1
 800d5d8:	d01e      	beq.n	800d618 <_printf_common+0xa4>
 800d5da:	6823      	ldr	r3, [r4, #0]
 800d5dc:	6922      	ldr	r2, [r4, #16]
 800d5de:	f003 0306 	and.w	r3, r3, #6
 800d5e2:	2b04      	cmp	r3, #4
 800d5e4:	bf02      	ittt	eq
 800d5e6:	68e5      	ldreq	r5, [r4, #12]
 800d5e8:	6833      	ldreq	r3, [r6, #0]
 800d5ea:	1aed      	subeq	r5, r5, r3
 800d5ec:	68a3      	ldr	r3, [r4, #8]
 800d5ee:	bf0c      	ite	eq
 800d5f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5f4:	2500      	movne	r5, #0
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	bfc4      	itt	gt
 800d5fa:	1a9b      	subgt	r3, r3, r2
 800d5fc:	18ed      	addgt	r5, r5, r3
 800d5fe:	2600      	movs	r6, #0
 800d600:	341a      	adds	r4, #26
 800d602:	42b5      	cmp	r5, r6
 800d604:	d11a      	bne.n	800d63c <_printf_common+0xc8>
 800d606:	2000      	movs	r0, #0
 800d608:	e008      	b.n	800d61c <_printf_common+0xa8>
 800d60a:	2301      	movs	r3, #1
 800d60c:	4652      	mov	r2, sl
 800d60e:	4641      	mov	r1, r8
 800d610:	4638      	mov	r0, r7
 800d612:	47c8      	blx	r9
 800d614:	3001      	adds	r0, #1
 800d616:	d103      	bne.n	800d620 <_printf_common+0xac>
 800d618:	f04f 30ff 	mov.w	r0, #4294967295
 800d61c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d620:	3501      	adds	r5, #1
 800d622:	e7c6      	b.n	800d5b2 <_printf_common+0x3e>
 800d624:	18e1      	adds	r1, r4, r3
 800d626:	1c5a      	adds	r2, r3, #1
 800d628:	2030      	movs	r0, #48	@ 0x30
 800d62a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d62e:	4422      	add	r2, r4
 800d630:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d634:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d638:	3302      	adds	r3, #2
 800d63a:	e7c7      	b.n	800d5cc <_printf_common+0x58>
 800d63c:	2301      	movs	r3, #1
 800d63e:	4622      	mov	r2, r4
 800d640:	4641      	mov	r1, r8
 800d642:	4638      	mov	r0, r7
 800d644:	47c8      	blx	r9
 800d646:	3001      	adds	r0, #1
 800d648:	d0e6      	beq.n	800d618 <_printf_common+0xa4>
 800d64a:	3601      	adds	r6, #1
 800d64c:	e7d9      	b.n	800d602 <_printf_common+0x8e>
	...

0800d650 <_printf_i>:
 800d650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d654:	7e0f      	ldrb	r7, [r1, #24]
 800d656:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d658:	2f78      	cmp	r7, #120	@ 0x78
 800d65a:	4691      	mov	r9, r2
 800d65c:	4680      	mov	r8, r0
 800d65e:	460c      	mov	r4, r1
 800d660:	469a      	mov	sl, r3
 800d662:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d666:	d807      	bhi.n	800d678 <_printf_i+0x28>
 800d668:	2f62      	cmp	r7, #98	@ 0x62
 800d66a:	d80a      	bhi.n	800d682 <_printf_i+0x32>
 800d66c:	2f00      	cmp	r7, #0
 800d66e:	f000 80d1 	beq.w	800d814 <_printf_i+0x1c4>
 800d672:	2f58      	cmp	r7, #88	@ 0x58
 800d674:	f000 80b8 	beq.w	800d7e8 <_printf_i+0x198>
 800d678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d67c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d680:	e03a      	b.n	800d6f8 <_printf_i+0xa8>
 800d682:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d686:	2b15      	cmp	r3, #21
 800d688:	d8f6      	bhi.n	800d678 <_printf_i+0x28>
 800d68a:	a101      	add	r1, pc, #4	@ (adr r1, 800d690 <_printf_i+0x40>)
 800d68c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d690:	0800d6e9 	.word	0x0800d6e9
 800d694:	0800d6fd 	.word	0x0800d6fd
 800d698:	0800d679 	.word	0x0800d679
 800d69c:	0800d679 	.word	0x0800d679
 800d6a0:	0800d679 	.word	0x0800d679
 800d6a4:	0800d679 	.word	0x0800d679
 800d6a8:	0800d6fd 	.word	0x0800d6fd
 800d6ac:	0800d679 	.word	0x0800d679
 800d6b0:	0800d679 	.word	0x0800d679
 800d6b4:	0800d679 	.word	0x0800d679
 800d6b8:	0800d679 	.word	0x0800d679
 800d6bc:	0800d7fb 	.word	0x0800d7fb
 800d6c0:	0800d727 	.word	0x0800d727
 800d6c4:	0800d7b5 	.word	0x0800d7b5
 800d6c8:	0800d679 	.word	0x0800d679
 800d6cc:	0800d679 	.word	0x0800d679
 800d6d0:	0800d81d 	.word	0x0800d81d
 800d6d4:	0800d679 	.word	0x0800d679
 800d6d8:	0800d727 	.word	0x0800d727
 800d6dc:	0800d679 	.word	0x0800d679
 800d6e0:	0800d679 	.word	0x0800d679
 800d6e4:	0800d7bd 	.word	0x0800d7bd
 800d6e8:	6833      	ldr	r3, [r6, #0]
 800d6ea:	1d1a      	adds	r2, r3, #4
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	6032      	str	r2, [r6, #0]
 800d6f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d6f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	e09c      	b.n	800d836 <_printf_i+0x1e6>
 800d6fc:	6833      	ldr	r3, [r6, #0]
 800d6fe:	6820      	ldr	r0, [r4, #0]
 800d700:	1d19      	adds	r1, r3, #4
 800d702:	6031      	str	r1, [r6, #0]
 800d704:	0606      	lsls	r6, r0, #24
 800d706:	d501      	bpl.n	800d70c <_printf_i+0xbc>
 800d708:	681d      	ldr	r5, [r3, #0]
 800d70a:	e003      	b.n	800d714 <_printf_i+0xc4>
 800d70c:	0645      	lsls	r5, r0, #25
 800d70e:	d5fb      	bpl.n	800d708 <_printf_i+0xb8>
 800d710:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d714:	2d00      	cmp	r5, #0
 800d716:	da03      	bge.n	800d720 <_printf_i+0xd0>
 800d718:	232d      	movs	r3, #45	@ 0x2d
 800d71a:	426d      	negs	r5, r5
 800d71c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d720:	4858      	ldr	r0, [pc, #352]	@ (800d884 <_printf_i+0x234>)
 800d722:	230a      	movs	r3, #10
 800d724:	e011      	b.n	800d74a <_printf_i+0xfa>
 800d726:	6821      	ldr	r1, [r4, #0]
 800d728:	6833      	ldr	r3, [r6, #0]
 800d72a:	0608      	lsls	r0, r1, #24
 800d72c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d730:	d402      	bmi.n	800d738 <_printf_i+0xe8>
 800d732:	0649      	lsls	r1, r1, #25
 800d734:	bf48      	it	mi
 800d736:	b2ad      	uxthmi	r5, r5
 800d738:	2f6f      	cmp	r7, #111	@ 0x6f
 800d73a:	4852      	ldr	r0, [pc, #328]	@ (800d884 <_printf_i+0x234>)
 800d73c:	6033      	str	r3, [r6, #0]
 800d73e:	bf14      	ite	ne
 800d740:	230a      	movne	r3, #10
 800d742:	2308      	moveq	r3, #8
 800d744:	2100      	movs	r1, #0
 800d746:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d74a:	6866      	ldr	r6, [r4, #4]
 800d74c:	60a6      	str	r6, [r4, #8]
 800d74e:	2e00      	cmp	r6, #0
 800d750:	db05      	blt.n	800d75e <_printf_i+0x10e>
 800d752:	6821      	ldr	r1, [r4, #0]
 800d754:	432e      	orrs	r6, r5
 800d756:	f021 0104 	bic.w	r1, r1, #4
 800d75a:	6021      	str	r1, [r4, #0]
 800d75c:	d04b      	beq.n	800d7f6 <_printf_i+0x1a6>
 800d75e:	4616      	mov	r6, r2
 800d760:	fbb5 f1f3 	udiv	r1, r5, r3
 800d764:	fb03 5711 	mls	r7, r3, r1, r5
 800d768:	5dc7      	ldrb	r7, [r0, r7]
 800d76a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d76e:	462f      	mov	r7, r5
 800d770:	42bb      	cmp	r3, r7
 800d772:	460d      	mov	r5, r1
 800d774:	d9f4      	bls.n	800d760 <_printf_i+0x110>
 800d776:	2b08      	cmp	r3, #8
 800d778:	d10b      	bne.n	800d792 <_printf_i+0x142>
 800d77a:	6823      	ldr	r3, [r4, #0]
 800d77c:	07df      	lsls	r7, r3, #31
 800d77e:	d508      	bpl.n	800d792 <_printf_i+0x142>
 800d780:	6923      	ldr	r3, [r4, #16]
 800d782:	6861      	ldr	r1, [r4, #4]
 800d784:	4299      	cmp	r1, r3
 800d786:	bfde      	ittt	le
 800d788:	2330      	movle	r3, #48	@ 0x30
 800d78a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d78e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d792:	1b92      	subs	r2, r2, r6
 800d794:	6122      	str	r2, [r4, #16]
 800d796:	f8cd a000 	str.w	sl, [sp]
 800d79a:	464b      	mov	r3, r9
 800d79c:	aa03      	add	r2, sp, #12
 800d79e:	4621      	mov	r1, r4
 800d7a0:	4640      	mov	r0, r8
 800d7a2:	f7ff fee7 	bl	800d574 <_printf_common>
 800d7a6:	3001      	adds	r0, #1
 800d7a8:	d14a      	bne.n	800d840 <_printf_i+0x1f0>
 800d7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ae:	b004      	add	sp, #16
 800d7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7b4:	6823      	ldr	r3, [r4, #0]
 800d7b6:	f043 0320 	orr.w	r3, r3, #32
 800d7ba:	6023      	str	r3, [r4, #0]
 800d7bc:	4832      	ldr	r0, [pc, #200]	@ (800d888 <_printf_i+0x238>)
 800d7be:	2778      	movs	r7, #120	@ 0x78
 800d7c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d7c4:	6823      	ldr	r3, [r4, #0]
 800d7c6:	6831      	ldr	r1, [r6, #0]
 800d7c8:	061f      	lsls	r7, r3, #24
 800d7ca:	f851 5b04 	ldr.w	r5, [r1], #4
 800d7ce:	d402      	bmi.n	800d7d6 <_printf_i+0x186>
 800d7d0:	065f      	lsls	r7, r3, #25
 800d7d2:	bf48      	it	mi
 800d7d4:	b2ad      	uxthmi	r5, r5
 800d7d6:	6031      	str	r1, [r6, #0]
 800d7d8:	07d9      	lsls	r1, r3, #31
 800d7da:	bf44      	itt	mi
 800d7dc:	f043 0320 	orrmi.w	r3, r3, #32
 800d7e0:	6023      	strmi	r3, [r4, #0]
 800d7e2:	b11d      	cbz	r5, 800d7ec <_printf_i+0x19c>
 800d7e4:	2310      	movs	r3, #16
 800d7e6:	e7ad      	b.n	800d744 <_printf_i+0xf4>
 800d7e8:	4826      	ldr	r0, [pc, #152]	@ (800d884 <_printf_i+0x234>)
 800d7ea:	e7e9      	b.n	800d7c0 <_printf_i+0x170>
 800d7ec:	6823      	ldr	r3, [r4, #0]
 800d7ee:	f023 0320 	bic.w	r3, r3, #32
 800d7f2:	6023      	str	r3, [r4, #0]
 800d7f4:	e7f6      	b.n	800d7e4 <_printf_i+0x194>
 800d7f6:	4616      	mov	r6, r2
 800d7f8:	e7bd      	b.n	800d776 <_printf_i+0x126>
 800d7fa:	6833      	ldr	r3, [r6, #0]
 800d7fc:	6825      	ldr	r5, [r4, #0]
 800d7fe:	6961      	ldr	r1, [r4, #20]
 800d800:	1d18      	adds	r0, r3, #4
 800d802:	6030      	str	r0, [r6, #0]
 800d804:	062e      	lsls	r6, r5, #24
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	d501      	bpl.n	800d80e <_printf_i+0x1be>
 800d80a:	6019      	str	r1, [r3, #0]
 800d80c:	e002      	b.n	800d814 <_printf_i+0x1c4>
 800d80e:	0668      	lsls	r0, r5, #25
 800d810:	d5fb      	bpl.n	800d80a <_printf_i+0x1ba>
 800d812:	8019      	strh	r1, [r3, #0]
 800d814:	2300      	movs	r3, #0
 800d816:	6123      	str	r3, [r4, #16]
 800d818:	4616      	mov	r6, r2
 800d81a:	e7bc      	b.n	800d796 <_printf_i+0x146>
 800d81c:	6833      	ldr	r3, [r6, #0]
 800d81e:	1d1a      	adds	r2, r3, #4
 800d820:	6032      	str	r2, [r6, #0]
 800d822:	681e      	ldr	r6, [r3, #0]
 800d824:	6862      	ldr	r2, [r4, #4]
 800d826:	2100      	movs	r1, #0
 800d828:	4630      	mov	r0, r6
 800d82a:	f7f2 fcf1 	bl	8000210 <memchr>
 800d82e:	b108      	cbz	r0, 800d834 <_printf_i+0x1e4>
 800d830:	1b80      	subs	r0, r0, r6
 800d832:	6060      	str	r0, [r4, #4]
 800d834:	6863      	ldr	r3, [r4, #4]
 800d836:	6123      	str	r3, [r4, #16]
 800d838:	2300      	movs	r3, #0
 800d83a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d83e:	e7aa      	b.n	800d796 <_printf_i+0x146>
 800d840:	6923      	ldr	r3, [r4, #16]
 800d842:	4632      	mov	r2, r6
 800d844:	4649      	mov	r1, r9
 800d846:	4640      	mov	r0, r8
 800d848:	47d0      	blx	sl
 800d84a:	3001      	adds	r0, #1
 800d84c:	d0ad      	beq.n	800d7aa <_printf_i+0x15a>
 800d84e:	6823      	ldr	r3, [r4, #0]
 800d850:	079b      	lsls	r3, r3, #30
 800d852:	d413      	bmi.n	800d87c <_printf_i+0x22c>
 800d854:	68e0      	ldr	r0, [r4, #12]
 800d856:	9b03      	ldr	r3, [sp, #12]
 800d858:	4298      	cmp	r0, r3
 800d85a:	bfb8      	it	lt
 800d85c:	4618      	movlt	r0, r3
 800d85e:	e7a6      	b.n	800d7ae <_printf_i+0x15e>
 800d860:	2301      	movs	r3, #1
 800d862:	4632      	mov	r2, r6
 800d864:	4649      	mov	r1, r9
 800d866:	4640      	mov	r0, r8
 800d868:	47d0      	blx	sl
 800d86a:	3001      	adds	r0, #1
 800d86c:	d09d      	beq.n	800d7aa <_printf_i+0x15a>
 800d86e:	3501      	adds	r5, #1
 800d870:	68e3      	ldr	r3, [r4, #12]
 800d872:	9903      	ldr	r1, [sp, #12]
 800d874:	1a5b      	subs	r3, r3, r1
 800d876:	42ab      	cmp	r3, r5
 800d878:	dcf2      	bgt.n	800d860 <_printf_i+0x210>
 800d87a:	e7eb      	b.n	800d854 <_printf_i+0x204>
 800d87c:	2500      	movs	r5, #0
 800d87e:	f104 0619 	add.w	r6, r4, #25
 800d882:	e7f5      	b.n	800d870 <_printf_i+0x220>
 800d884:	0800f1c3 	.word	0x0800f1c3
 800d888:	0800f1d4 	.word	0x0800f1d4

0800d88c <__sflush_r>:
 800d88c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d894:	0716      	lsls	r6, r2, #28
 800d896:	4605      	mov	r5, r0
 800d898:	460c      	mov	r4, r1
 800d89a:	d454      	bmi.n	800d946 <__sflush_r+0xba>
 800d89c:	684b      	ldr	r3, [r1, #4]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	dc02      	bgt.n	800d8a8 <__sflush_r+0x1c>
 800d8a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	dd48      	ble.n	800d93a <__sflush_r+0xae>
 800d8a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8aa:	2e00      	cmp	r6, #0
 800d8ac:	d045      	beq.n	800d93a <__sflush_r+0xae>
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d8b4:	682f      	ldr	r7, [r5, #0]
 800d8b6:	6a21      	ldr	r1, [r4, #32]
 800d8b8:	602b      	str	r3, [r5, #0]
 800d8ba:	d030      	beq.n	800d91e <__sflush_r+0x92>
 800d8bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d8be:	89a3      	ldrh	r3, [r4, #12]
 800d8c0:	0759      	lsls	r1, r3, #29
 800d8c2:	d505      	bpl.n	800d8d0 <__sflush_r+0x44>
 800d8c4:	6863      	ldr	r3, [r4, #4]
 800d8c6:	1ad2      	subs	r2, r2, r3
 800d8c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d8ca:	b10b      	cbz	r3, 800d8d0 <__sflush_r+0x44>
 800d8cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d8ce:	1ad2      	subs	r2, r2, r3
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8d4:	6a21      	ldr	r1, [r4, #32]
 800d8d6:	4628      	mov	r0, r5
 800d8d8:	47b0      	blx	r6
 800d8da:	1c43      	adds	r3, r0, #1
 800d8dc:	89a3      	ldrh	r3, [r4, #12]
 800d8de:	d106      	bne.n	800d8ee <__sflush_r+0x62>
 800d8e0:	6829      	ldr	r1, [r5, #0]
 800d8e2:	291d      	cmp	r1, #29
 800d8e4:	d82b      	bhi.n	800d93e <__sflush_r+0xb2>
 800d8e6:	4a2a      	ldr	r2, [pc, #168]	@ (800d990 <__sflush_r+0x104>)
 800d8e8:	40ca      	lsrs	r2, r1
 800d8ea:	07d6      	lsls	r6, r2, #31
 800d8ec:	d527      	bpl.n	800d93e <__sflush_r+0xb2>
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	6062      	str	r2, [r4, #4]
 800d8f2:	04d9      	lsls	r1, r3, #19
 800d8f4:	6922      	ldr	r2, [r4, #16]
 800d8f6:	6022      	str	r2, [r4, #0]
 800d8f8:	d504      	bpl.n	800d904 <__sflush_r+0x78>
 800d8fa:	1c42      	adds	r2, r0, #1
 800d8fc:	d101      	bne.n	800d902 <__sflush_r+0x76>
 800d8fe:	682b      	ldr	r3, [r5, #0]
 800d900:	b903      	cbnz	r3, 800d904 <__sflush_r+0x78>
 800d902:	6560      	str	r0, [r4, #84]	@ 0x54
 800d904:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d906:	602f      	str	r7, [r5, #0]
 800d908:	b1b9      	cbz	r1, 800d93a <__sflush_r+0xae>
 800d90a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d90e:	4299      	cmp	r1, r3
 800d910:	d002      	beq.n	800d918 <__sflush_r+0x8c>
 800d912:	4628      	mov	r0, r5
 800d914:	f7ff fa94 	bl	800ce40 <_free_r>
 800d918:	2300      	movs	r3, #0
 800d91a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d91c:	e00d      	b.n	800d93a <__sflush_r+0xae>
 800d91e:	2301      	movs	r3, #1
 800d920:	4628      	mov	r0, r5
 800d922:	47b0      	blx	r6
 800d924:	4602      	mov	r2, r0
 800d926:	1c50      	adds	r0, r2, #1
 800d928:	d1c9      	bne.n	800d8be <__sflush_r+0x32>
 800d92a:	682b      	ldr	r3, [r5, #0]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d0c6      	beq.n	800d8be <__sflush_r+0x32>
 800d930:	2b1d      	cmp	r3, #29
 800d932:	d001      	beq.n	800d938 <__sflush_r+0xac>
 800d934:	2b16      	cmp	r3, #22
 800d936:	d11e      	bne.n	800d976 <__sflush_r+0xea>
 800d938:	602f      	str	r7, [r5, #0]
 800d93a:	2000      	movs	r0, #0
 800d93c:	e022      	b.n	800d984 <__sflush_r+0xf8>
 800d93e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d942:	b21b      	sxth	r3, r3
 800d944:	e01b      	b.n	800d97e <__sflush_r+0xf2>
 800d946:	690f      	ldr	r7, [r1, #16]
 800d948:	2f00      	cmp	r7, #0
 800d94a:	d0f6      	beq.n	800d93a <__sflush_r+0xae>
 800d94c:	0793      	lsls	r3, r2, #30
 800d94e:	680e      	ldr	r6, [r1, #0]
 800d950:	bf08      	it	eq
 800d952:	694b      	ldreq	r3, [r1, #20]
 800d954:	600f      	str	r7, [r1, #0]
 800d956:	bf18      	it	ne
 800d958:	2300      	movne	r3, #0
 800d95a:	eba6 0807 	sub.w	r8, r6, r7
 800d95e:	608b      	str	r3, [r1, #8]
 800d960:	f1b8 0f00 	cmp.w	r8, #0
 800d964:	dde9      	ble.n	800d93a <__sflush_r+0xae>
 800d966:	6a21      	ldr	r1, [r4, #32]
 800d968:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d96a:	4643      	mov	r3, r8
 800d96c:	463a      	mov	r2, r7
 800d96e:	4628      	mov	r0, r5
 800d970:	47b0      	blx	r6
 800d972:	2800      	cmp	r0, #0
 800d974:	dc08      	bgt.n	800d988 <__sflush_r+0xfc>
 800d976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d97a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d97e:	81a3      	strh	r3, [r4, #12]
 800d980:	f04f 30ff 	mov.w	r0, #4294967295
 800d984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d988:	4407      	add	r7, r0
 800d98a:	eba8 0800 	sub.w	r8, r8, r0
 800d98e:	e7e7      	b.n	800d960 <__sflush_r+0xd4>
 800d990:	20400001 	.word	0x20400001

0800d994 <_fflush_r>:
 800d994:	b538      	push	{r3, r4, r5, lr}
 800d996:	690b      	ldr	r3, [r1, #16]
 800d998:	4605      	mov	r5, r0
 800d99a:	460c      	mov	r4, r1
 800d99c:	b913      	cbnz	r3, 800d9a4 <_fflush_r+0x10>
 800d99e:	2500      	movs	r5, #0
 800d9a0:	4628      	mov	r0, r5
 800d9a2:	bd38      	pop	{r3, r4, r5, pc}
 800d9a4:	b118      	cbz	r0, 800d9ae <_fflush_r+0x1a>
 800d9a6:	6a03      	ldr	r3, [r0, #32]
 800d9a8:	b90b      	cbnz	r3, 800d9ae <_fflush_r+0x1a>
 800d9aa:	f7ff f873 	bl	800ca94 <__sinit>
 800d9ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d0f3      	beq.n	800d99e <_fflush_r+0xa>
 800d9b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d9b8:	07d0      	lsls	r0, r2, #31
 800d9ba:	d404      	bmi.n	800d9c6 <_fflush_r+0x32>
 800d9bc:	0599      	lsls	r1, r3, #22
 800d9be:	d402      	bmi.n	800d9c6 <_fflush_r+0x32>
 800d9c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9c2:	f7ff fa0e 	bl	800cde2 <__retarget_lock_acquire_recursive>
 800d9c6:	4628      	mov	r0, r5
 800d9c8:	4621      	mov	r1, r4
 800d9ca:	f7ff ff5f 	bl	800d88c <__sflush_r>
 800d9ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9d0:	07da      	lsls	r2, r3, #31
 800d9d2:	4605      	mov	r5, r0
 800d9d4:	d4e4      	bmi.n	800d9a0 <_fflush_r+0xc>
 800d9d6:	89a3      	ldrh	r3, [r4, #12]
 800d9d8:	059b      	lsls	r3, r3, #22
 800d9da:	d4e1      	bmi.n	800d9a0 <_fflush_r+0xc>
 800d9dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9de:	f7ff fa01 	bl	800cde4 <__retarget_lock_release_recursive>
 800d9e2:	e7dd      	b.n	800d9a0 <_fflush_r+0xc>

0800d9e4 <fiprintf>:
 800d9e4:	b40e      	push	{r1, r2, r3}
 800d9e6:	b503      	push	{r0, r1, lr}
 800d9e8:	4601      	mov	r1, r0
 800d9ea:	ab03      	add	r3, sp, #12
 800d9ec:	4805      	ldr	r0, [pc, #20]	@ (800da04 <fiprintf+0x20>)
 800d9ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9f2:	6800      	ldr	r0, [r0, #0]
 800d9f4:	9301      	str	r3, [sp, #4]
 800d9f6:	f7ff fca5 	bl	800d344 <_vfiprintf_r>
 800d9fa:	b002      	add	sp, #8
 800d9fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800da00:	b003      	add	sp, #12
 800da02:	4770      	bx	lr
 800da04:	20000250 	.word	0x20000250

0800da08 <__swbuf_r>:
 800da08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da0a:	460e      	mov	r6, r1
 800da0c:	4614      	mov	r4, r2
 800da0e:	4605      	mov	r5, r0
 800da10:	b118      	cbz	r0, 800da1a <__swbuf_r+0x12>
 800da12:	6a03      	ldr	r3, [r0, #32]
 800da14:	b90b      	cbnz	r3, 800da1a <__swbuf_r+0x12>
 800da16:	f7ff f83d 	bl	800ca94 <__sinit>
 800da1a:	69a3      	ldr	r3, [r4, #24]
 800da1c:	60a3      	str	r3, [r4, #8]
 800da1e:	89a3      	ldrh	r3, [r4, #12]
 800da20:	071a      	lsls	r2, r3, #28
 800da22:	d501      	bpl.n	800da28 <__swbuf_r+0x20>
 800da24:	6923      	ldr	r3, [r4, #16]
 800da26:	b943      	cbnz	r3, 800da3a <__swbuf_r+0x32>
 800da28:	4621      	mov	r1, r4
 800da2a:	4628      	mov	r0, r5
 800da2c:	f000 f82a 	bl	800da84 <__swsetup_r>
 800da30:	b118      	cbz	r0, 800da3a <__swbuf_r+0x32>
 800da32:	f04f 37ff 	mov.w	r7, #4294967295
 800da36:	4638      	mov	r0, r7
 800da38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da3a:	6823      	ldr	r3, [r4, #0]
 800da3c:	6922      	ldr	r2, [r4, #16]
 800da3e:	1a98      	subs	r0, r3, r2
 800da40:	6963      	ldr	r3, [r4, #20]
 800da42:	b2f6      	uxtb	r6, r6
 800da44:	4283      	cmp	r3, r0
 800da46:	4637      	mov	r7, r6
 800da48:	dc05      	bgt.n	800da56 <__swbuf_r+0x4e>
 800da4a:	4621      	mov	r1, r4
 800da4c:	4628      	mov	r0, r5
 800da4e:	f7ff ffa1 	bl	800d994 <_fflush_r>
 800da52:	2800      	cmp	r0, #0
 800da54:	d1ed      	bne.n	800da32 <__swbuf_r+0x2a>
 800da56:	68a3      	ldr	r3, [r4, #8]
 800da58:	3b01      	subs	r3, #1
 800da5a:	60a3      	str	r3, [r4, #8]
 800da5c:	6823      	ldr	r3, [r4, #0]
 800da5e:	1c5a      	adds	r2, r3, #1
 800da60:	6022      	str	r2, [r4, #0]
 800da62:	701e      	strb	r6, [r3, #0]
 800da64:	6962      	ldr	r2, [r4, #20]
 800da66:	1c43      	adds	r3, r0, #1
 800da68:	429a      	cmp	r2, r3
 800da6a:	d004      	beq.n	800da76 <__swbuf_r+0x6e>
 800da6c:	89a3      	ldrh	r3, [r4, #12]
 800da6e:	07db      	lsls	r3, r3, #31
 800da70:	d5e1      	bpl.n	800da36 <__swbuf_r+0x2e>
 800da72:	2e0a      	cmp	r6, #10
 800da74:	d1df      	bne.n	800da36 <__swbuf_r+0x2e>
 800da76:	4621      	mov	r1, r4
 800da78:	4628      	mov	r0, r5
 800da7a:	f7ff ff8b 	bl	800d994 <_fflush_r>
 800da7e:	2800      	cmp	r0, #0
 800da80:	d0d9      	beq.n	800da36 <__swbuf_r+0x2e>
 800da82:	e7d6      	b.n	800da32 <__swbuf_r+0x2a>

0800da84 <__swsetup_r>:
 800da84:	b538      	push	{r3, r4, r5, lr}
 800da86:	4b29      	ldr	r3, [pc, #164]	@ (800db2c <__swsetup_r+0xa8>)
 800da88:	4605      	mov	r5, r0
 800da8a:	6818      	ldr	r0, [r3, #0]
 800da8c:	460c      	mov	r4, r1
 800da8e:	b118      	cbz	r0, 800da98 <__swsetup_r+0x14>
 800da90:	6a03      	ldr	r3, [r0, #32]
 800da92:	b90b      	cbnz	r3, 800da98 <__swsetup_r+0x14>
 800da94:	f7fe fffe 	bl	800ca94 <__sinit>
 800da98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da9c:	0719      	lsls	r1, r3, #28
 800da9e:	d422      	bmi.n	800dae6 <__swsetup_r+0x62>
 800daa0:	06da      	lsls	r2, r3, #27
 800daa2:	d407      	bmi.n	800dab4 <__swsetup_r+0x30>
 800daa4:	2209      	movs	r2, #9
 800daa6:	602a      	str	r2, [r5, #0]
 800daa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800daac:	81a3      	strh	r3, [r4, #12]
 800daae:	f04f 30ff 	mov.w	r0, #4294967295
 800dab2:	e033      	b.n	800db1c <__swsetup_r+0x98>
 800dab4:	0758      	lsls	r0, r3, #29
 800dab6:	d512      	bpl.n	800dade <__swsetup_r+0x5a>
 800dab8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800daba:	b141      	cbz	r1, 800dace <__swsetup_r+0x4a>
 800dabc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dac0:	4299      	cmp	r1, r3
 800dac2:	d002      	beq.n	800daca <__swsetup_r+0x46>
 800dac4:	4628      	mov	r0, r5
 800dac6:	f7ff f9bb 	bl	800ce40 <_free_r>
 800daca:	2300      	movs	r3, #0
 800dacc:	6363      	str	r3, [r4, #52]	@ 0x34
 800dace:	89a3      	ldrh	r3, [r4, #12]
 800dad0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dad4:	81a3      	strh	r3, [r4, #12]
 800dad6:	2300      	movs	r3, #0
 800dad8:	6063      	str	r3, [r4, #4]
 800dada:	6923      	ldr	r3, [r4, #16]
 800dadc:	6023      	str	r3, [r4, #0]
 800dade:	89a3      	ldrh	r3, [r4, #12]
 800dae0:	f043 0308 	orr.w	r3, r3, #8
 800dae4:	81a3      	strh	r3, [r4, #12]
 800dae6:	6923      	ldr	r3, [r4, #16]
 800dae8:	b94b      	cbnz	r3, 800dafe <__swsetup_r+0x7a>
 800daea:	89a3      	ldrh	r3, [r4, #12]
 800daec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800daf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800daf4:	d003      	beq.n	800dafe <__swsetup_r+0x7a>
 800daf6:	4621      	mov	r1, r4
 800daf8:	4628      	mov	r0, r5
 800dafa:	f000 f89e 	bl	800dc3a <__smakebuf_r>
 800dafe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db02:	f013 0201 	ands.w	r2, r3, #1
 800db06:	d00a      	beq.n	800db1e <__swsetup_r+0x9a>
 800db08:	2200      	movs	r2, #0
 800db0a:	60a2      	str	r2, [r4, #8]
 800db0c:	6962      	ldr	r2, [r4, #20]
 800db0e:	4252      	negs	r2, r2
 800db10:	61a2      	str	r2, [r4, #24]
 800db12:	6922      	ldr	r2, [r4, #16]
 800db14:	b942      	cbnz	r2, 800db28 <__swsetup_r+0xa4>
 800db16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800db1a:	d1c5      	bne.n	800daa8 <__swsetup_r+0x24>
 800db1c:	bd38      	pop	{r3, r4, r5, pc}
 800db1e:	0799      	lsls	r1, r3, #30
 800db20:	bf58      	it	pl
 800db22:	6962      	ldrpl	r2, [r4, #20]
 800db24:	60a2      	str	r2, [r4, #8]
 800db26:	e7f4      	b.n	800db12 <__swsetup_r+0x8e>
 800db28:	2000      	movs	r0, #0
 800db2a:	e7f7      	b.n	800db1c <__swsetup_r+0x98>
 800db2c:	20000250 	.word	0x20000250

0800db30 <memmove>:
 800db30:	4288      	cmp	r0, r1
 800db32:	b510      	push	{r4, lr}
 800db34:	eb01 0402 	add.w	r4, r1, r2
 800db38:	d902      	bls.n	800db40 <memmove+0x10>
 800db3a:	4284      	cmp	r4, r0
 800db3c:	4623      	mov	r3, r4
 800db3e:	d807      	bhi.n	800db50 <memmove+0x20>
 800db40:	1e43      	subs	r3, r0, #1
 800db42:	42a1      	cmp	r1, r4
 800db44:	d008      	beq.n	800db58 <memmove+0x28>
 800db46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db4e:	e7f8      	b.n	800db42 <memmove+0x12>
 800db50:	4402      	add	r2, r0
 800db52:	4601      	mov	r1, r0
 800db54:	428a      	cmp	r2, r1
 800db56:	d100      	bne.n	800db5a <memmove+0x2a>
 800db58:	bd10      	pop	{r4, pc}
 800db5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db62:	e7f7      	b.n	800db54 <memmove+0x24>

0800db64 <_sbrk_r>:
 800db64:	b538      	push	{r3, r4, r5, lr}
 800db66:	4d06      	ldr	r5, [pc, #24]	@ (800db80 <_sbrk_r+0x1c>)
 800db68:	2300      	movs	r3, #0
 800db6a:	4604      	mov	r4, r0
 800db6c:	4608      	mov	r0, r1
 800db6e:	602b      	str	r3, [r5, #0]
 800db70:	f7f5 ff58 	bl	8003a24 <_sbrk>
 800db74:	1c43      	adds	r3, r0, #1
 800db76:	d102      	bne.n	800db7e <_sbrk_r+0x1a>
 800db78:	682b      	ldr	r3, [r5, #0]
 800db7a:	b103      	cbz	r3, 800db7e <_sbrk_r+0x1a>
 800db7c:	6023      	str	r3, [r4, #0]
 800db7e:	bd38      	pop	{r3, r4, r5, pc}
 800db80:	20001a34 	.word	0x20001a34

0800db84 <abort>:
 800db84:	b508      	push	{r3, lr}
 800db86:	2006      	movs	r0, #6
 800db88:	f000 f8bc 	bl	800dd04 <raise>
 800db8c:	2001      	movs	r0, #1
 800db8e:	f7f5 fed0 	bl	8003932 <_exit>

0800db92 <_realloc_r>:
 800db92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db96:	4607      	mov	r7, r0
 800db98:	4614      	mov	r4, r2
 800db9a:	460d      	mov	r5, r1
 800db9c:	b921      	cbnz	r1, 800dba8 <_realloc_r+0x16>
 800db9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dba2:	4611      	mov	r1, r2
 800dba4:	f7ff b9c0 	b.w	800cf28 <_malloc_r>
 800dba8:	b92a      	cbnz	r2, 800dbb6 <_realloc_r+0x24>
 800dbaa:	f7ff f949 	bl	800ce40 <_free_r>
 800dbae:	4625      	mov	r5, r4
 800dbb0:	4628      	mov	r0, r5
 800dbb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbb6:	f000 f8e3 	bl	800dd80 <_malloc_usable_size_r>
 800dbba:	4284      	cmp	r4, r0
 800dbbc:	4606      	mov	r6, r0
 800dbbe:	d802      	bhi.n	800dbc6 <_realloc_r+0x34>
 800dbc0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dbc4:	d8f4      	bhi.n	800dbb0 <_realloc_r+0x1e>
 800dbc6:	4621      	mov	r1, r4
 800dbc8:	4638      	mov	r0, r7
 800dbca:	f7ff f9ad 	bl	800cf28 <_malloc_r>
 800dbce:	4680      	mov	r8, r0
 800dbd0:	b908      	cbnz	r0, 800dbd6 <_realloc_r+0x44>
 800dbd2:	4645      	mov	r5, r8
 800dbd4:	e7ec      	b.n	800dbb0 <_realloc_r+0x1e>
 800dbd6:	42b4      	cmp	r4, r6
 800dbd8:	4622      	mov	r2, r4
 800dbda:	4629      	mov	r1, r5
 800dbdc:	bf28      	it	cs
 800dbde:	4632      	movcs	r2, r6
 800dbe0:	f7ff f901 	bl	800cde6 <memcpy>
 800dbe4:	4629      	mov	r1, r5
 800dbe6:	4638      	mov	r0, r7
 800dbe8:	f7ff f92a 	bl	800ce40 <_free_r>
 800dbec:	e7f1      	b.n	800dbd2 <_realloc_r+0x40>

0800dbee <__swhatbuf_r>:
 800dbee:	b570      	push	{r4, r5, r6, lr}
 800dbf0:	460c      	mov	r4, r1
 800dbf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbf6:	2900      	cmp	r1, #0
 800dbf8:	b096      	sub	sp, #88	@ 0x58
 800dbfa:	4615      	mov	r5, r2
 800dbfc:	461e      	mov	r6, r3
 800dbfe:	da0d      	bge.n	800dc1c <__swhatbuf_r+0x2e>
 800dc00:	89a3      	ldrh	r3, [r4, #12]
 800dc02:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dc06:	f04f 0100 	mov.w	r1, #0
 800dc0a:	bf14      	ite	ne
 800dc0c:	2340      	movne	r3, #64	@ 0x40
 800dc0e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dc12:	2000      	movs	r0, #0
 800dc14:	6031      	str	r1, [r6, #0]
 800dc16:	602b      	str	r3, [r5, #0]
 800dc18:	b016      	add	sp, #88	@ 0x58
 800dc1a:	bd70      	pop	{r4, r5, r6, pc}
 800dc1c:	466a      	mov	r2, sp
 800dc1e:	f000 f879 	bl	800dd14 <_fstat_r>
 800dc22:	2800      	cmp	r0, #0
 800dc24:	dbec      	blt.n	800dc00 <__swhatbuf_r+0x12>
 800dc26:	9901      	ldr	r1, [sp, #4]
 800dc28:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dc2c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dc30:	4259      	negs	r1, r3
 800dc32:	4159      	adcs	r1, r3
 800dc34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc38:	e7eb      	b.n	800dc12 <__swhatbuf_r+0x24>

0800dc3a <__smakebuf_r>:
 800dc3a:	898b      	ldrh	r3, [r1, #12]
 800dc3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc3e:	079d      	lsls	r5, r3, #30
 800dc40:	4606      	mov	r6, r0
 800dc42:	460c      	mov	r4, r1
 800dc44:	d507      	bpl.n	800dc56 <__smakebuf_r+0x1c>
 800dc46:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dc4a:	6023      	str	r3, [r4, #0]
 800dc4c:	6123      	str	r3, [r4, #16]
 800dc4e:	2301      	movs	r3, #1
 800dc50:	6163      	str	r3, [r4, #20]
 800dc52:	b003      	add	sp, #12
 800dc54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc56:	ab01      	add	r3, sp, #4
 800dc58:	466a      	mov	r2, sp
 800dc5a:	f7ff ffc8 	bl	800dbee <__swhatbuf_r>
 800dc5e:	9f00      	ldr	r7, [sp, #0]
 800dc60:	4605      	mov	r5, r0
 800dc62:	4639      	mov	r1, r7
 800dc64:	4630      	mov	r0, r6
 800dc66:	f7ff f95f 	bl	800cf28 <_malloc_r>
 800dc6a:	b948      	cbnz	r0, 800dc80 <__smakebuf_r+0x46>
 800dc6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc70:	059a      	lsls	r2, r3, #22
 800dc72:	d4ee      	bmi.n	800dc52 <__smakebuf_r+0x18>
 800dc74:	f023 0303 	bic.w	r3, r3, #3
 800dc78:	f043 0302 	orr.w	r3, r3, #2
 800dc7c:	81a3      	strh	r3, [r4, #12]
 800dc7e:	e7e2      	b.n	800dc46 <__smakebuf_r+0xc>
 800dc80:	89a3      	ldrh	r3, [r4, #12]
 800dc82:	6020      	str	r0, [r4, #0]
 800dc84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc88:	81a3      	strh	r3, [r4, #12]
 800dc8a:	9b01      	ldr	r3, [sp, #4]
 800dc8c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dc90:	b15b      	cbz	r3, 800dcaa <__smakebuf_r+0x70>
 800dc92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc96:	4630      	mov	r0, r6
 800dc98:	f000 f84e 	bl	800dd38 <_isatty_r>
 800dc9c:	b128      	cbz	r0, 800dcaa <__smakebuf_r+0x70>
 800dc9e:	89a3      	ldrh	r3, [r4, #12]
 800dca0:	f023 0303 	bic.w	r3, r3, #3
 800dca4:	f043 0301 	orr.w	r3, r3, #1
 800dca8:	81a3      	strh	r3, [r4, #12]
 800dcaa:	89a3      	ldrh	r3, [r4, #12]
 800dcac:	431d      	orrs	r5, r3
 800dcae:	81a5      	strh	r5, [r4, #12]
 800dcb0:	e7cf      	b.n	800dc52 <__smakebuf_r+0x18>

0800dcb2 <_raise_r>:
 800dcb2:	291f      	cmp	r1, #31
 800dcb4:	b538      	push	{r3, r4, r5, lr}
 800dcb6:	4605      	mov	r5, r0
 800dcb8:	460c      	mov	r4, r1
 800dcba:	d904      	bls.n	800dcc6 <_raise_r+0x14>
 800dcbc:	2316      	movs	r3, #22
 800dcbe:	6003      	str	r3, [r0, #0]
 800dcc0:	f04f 30ff 	mov.w	r0, #4294967295
 800dcc4:	bd38      	pop	{r3, r4, r5, pc}
 800dcc6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dcc8:	b112      	cbz	r2, 800dcd0 <_raise_r+0x1e>
 800dcca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dcce:	b94b      	cbnz	r3, 800dce4 <_raise_r+0x32>
 800dcd0:	4628      	mov	r0, r5
 800dcd2:	f000 f853 	bl	800dd7c <_getpid_r>
 800dcd6:	4622      	mov	r2, r4
 800dcd8:	4601      	mov	r1, r0
 800dcda:	4628      	mov	r0, r5
 800dcdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dce0:	f000 b83a 	b.w	800dd58 <_kill_r>
 800dce4:	2b01      	cmp	r3, #1
 800dce6:	d00a      	beq.n	800dcfe <_raise_r+0x4c>
 800dce8:	1c59      	adds	r1, r3, #1
 800dcea:	d103      	bne.n	800dcf4 <_raise_r+0x42>
 800dcec:	2316      	movs	r3, #22
 800dcee:	6003      	str	r3, [r0, #0]
 800dcf0:	2001      	movs	r0, #1
 800dcf2:	e7e7      	b.n	800dcc4 <_raise_r+0x12>
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	4798      	blx	r3
 800dcfe:	2000      	movs	r0, #0
 800dd00:	e7e0      	b.n	800dcc4 <_raise_r+0x12>
	...

0800dd04 <raise>:
 800dd04:	4b02      	ldr	r3, [pc, #8]	@ (800dd10 <raise+0xc>)
 800dd06:	4601      	mov	r1, r0
 800dd08:	6818      	ldr	r0, [r3, #0]
 800dd0a:	f7ff bfd2 	b.w	800dcb2 <_raise_r>
 800dd0e:	bf00      	nop
 800dd10:	20000250 	.word	0x20000250

0800dd14 <_fstat_r>:
 800dd14:	b538      	push	{r3, r4, r5, lr}
 800dd16:	4d07      	ldr	r5, [pc, #28]	@ (800dd34 <_fstat_r+0x20>)
 800dd18:	2300      	movs	r3, #0
 800dd1a:	4604      	mov	r4, r0
 800dd1c:	4608      	mov	r0, r1
 800dd1e:	4611      	mov	r1, r2
 800dd20:	602b      	str	r3, [r5, #0]
 800dd22:	f7f5 fe56 	bl	80039d2 <_fstat>
 800dd26:	1c43      	adds	r3, r0, #1
 800dd28:	d102      	bne.n	800dd30 <_fstat_r+0x1c>
 800dd2a:	682b      	ldr	r3, [r5, #0]
 800dd2c:	b103      	cbz	r3, 800dd30 <_fstat_r+0x1c>
 800dd2e:	6023      	str	r3, [r4, #0]
 800dd30:	bd38      	pop	{r3, r4, r5, pc}
 800dd32:	bf00      	nop
 800dd34:	20001a34 	.word	0x20001a34

0800dd38 <_isatty_r>:
 800dd38:	b538      	push	{r3, r4, r5, lr}
 800dd3a:	4d06      	ldr	r5, [pc, #24]	@ (800dd54 <_isatty_r+0x1c>)
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	4604      	mov	r4, r0
 800dd40:	4608      	mov	r0, r1
 800dd42:	602b      	str	r3, [r5, #0]
 800dd44:	f7f5 fe55 	bl	80039f2 <_isatty>
 800dd48:	1c43      	adds	r3, r0, #1
 800dd4a:	d102      	bne.n	800dd52 <_isatty_r+0x1a>
 800dd4c:	682b      	ldr	r3, [r5, #0]
 800dd4e:	b103      	cbz	r3, 800dd52 <_isatty_r+0x1a>
 800dd50:	6023      	str	r3, [r4, #0]
 800dd52:	bd38      	pop	{r3, r4, r5, pc}
 800dd54:	20001a34 	.word	0x20001a34

0800dd58 <_kill_r>:
 800dd58:	b538      	push	{r3, r4, r5, lr}
 800dd5a:	4d07      	ldr	r5, [pc, #28]	@ (800dd78 <_kill_r+0x20>)
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	4604      	mov	r4, r0
 800dd60:	4608      	mov	r0, r1
 800dd62:	4611      	mov	r1, r2
 800dd64:	602b      	str	r3, [r5, #0]
 800dd66:	f7f5 fdd4 	bl	8003912 <_kill>
 800dd6a:	1c43      	adds	r3, r0, #1
 800dd6c:	d102      	bne.n	800dd74 <_kill_r+0x1c>
 800dd6e:	682b      	ldr	r3, [r5, #0]
 800dd70:	b103      	cbz	r3, 800dd74 <_kill_r+0x1c>
 800dd72:	6023      	str	r3, [r4, #0]
 800dd74:	bd38      	pop	{r3, r4, r5, pc}
 800dd76:	bf00      	nop
 800dd78:	20001a34 	.word	0x20001a34

0800dd7c <_getpid_r>:
 800dd7c:	f7f5 bdc1 	b.w	8003902 <_getpid>

0800dd80 <_malloc_usable_size_r>:
 800dd80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd84:	1f18      	subs	r0, r3, #4
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	bfbc      	itt	lt
 800dd8a:	580b      	ldrlt	r3, [r1, r0]
 800dd8c:	18c0      	addlt	r0, r0, r3
 800dd8e:	4770      	bx	lr

0800dd90 <_init>:
 800dd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd92:	bf00      	nop
 800dd94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd96:	bc08      	pop	{r3}
 800dd98:	469e      	mov	lr, r3
 800dd9a:	4770      	bx	lr

0800dd9c <_fini>:
 800dd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd9e:	bf00      	nop
 800dda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dda2:	bc08      	pop	{r3}
 800dda4:	469e      	mov	lr, r3
 800dda6:	4770      	bx	lr
