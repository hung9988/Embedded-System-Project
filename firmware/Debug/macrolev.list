
macrolev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08040000  08040000  0000c080  2**0
                  CONTENTS
  1 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009f50  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002d4  0800a0e8  0800a0e8  0000b0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800a3bc  0800a3bc  0000c080  2**0
                  CONTENTS
  5 .ARM          00000008  0800a3bc  0800a3bc  0000b3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800a3c4  0800a3c4  0000c080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800a3c4  0800a3c4  0000b3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800a3c8  0800a3c8  0000b3c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000080  20000000  0800a3cc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000d74  20000080  0800a44c  0000c080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000df4  0800a44c  0000cdf4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b58f  00000000  00000000  0000c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a7c  00000000  00000000  0002763f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  0002c0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e76f  00000000  00000000  0002d500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1b5  00000000  00000000  0004bc6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5b68  00000000  00000000  00066e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c98c  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00001016  00000000  00000000  0011c9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000544c  00000000  00000000  0011d9e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00122e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a0d0 	.word	0x0800a0d0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	0800a0d0 	.word	0x0800a0d0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b988 	b.w	8000510 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	468e      	mov	lr, r1
 8000220:	4604      	mov	r4, r0
 8000222:	4688      	mov	r8, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d962      	bls.n	80002f4 <__udivmoddi4+0xdc>
 800022e:	fab2 f682 	clz	r6, r2
 8000232:	b14e      	cbz	r6, 8000248 <__udivmoddi4+0x30>
 8000234:	f1c6 0320 	rsb	r3, r6, #32
 8000238:	fa01 f806 	lsl.w	r8, r1, r6
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	40b7      	lsls	r7, r6
 8000242:	ea43 0808 	orr.w	r8, r3, r8
 8000246:	40b4      	lsls	r4, r6
 8000248:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800024c:	fa1f fc87 	uxth.w	ip, r7
 8000250:	fbb8 f1fe 	udiv	r1, r8, lr
 8000254:	0c23      	lsrs	r3, r4, #16
 8000256:	fb0e 8811 	mls	r8, lr, r1, r8
 800025a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025e:	fb01 f20c 	mul.w	r2, r1, ip
 8000262:	429a      	cmp	r2, r3
 8000264:	d909      	bls.n	800027a <__udivmoddi4+0x62>
 8000266:	18fb      	adds	r3, r7, r3
 8000268:	f101 30ff 	add.w	r0, r1, #4294967295
 800026c:	f080 80ea 	bcs.w	8000444 <__udivmoddi4+0x22c>
 8000270:	429a      	cmp	r2, r3
 8000272:	f240 80e7 	bls.w	8000444 <__udivmoddi4+0x22c>
 8000276:	3902      	subs	r1, #2
 8000278:	443b      	add	r3, r7
 800027a:	1a9a      	subs	r2, r3, r2
 800027c:	b2a3      	uxth	r3, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028a:	fb00 fc0c 	mul.w	ip, r0, ip
 800028e:	459c      	cmp	ip, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x8e>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f100 32ff 	add.w	r2, r0, #4294967295
 8000298:	f080 80d6 	bcs.w	8000448 <__udivmoddi4+0x230>
 800029c:	459c      	cmp	ip, r3
 800029e:	f240 80d3 	bls.w	8000448 <__udivmoddi4+0x230>
 80002a2:	443b      	add	r3, r7
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002aa:	eba3 030c 	sub.w	r3, r3, ip
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11d      	cbz	r5, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40f3      	lsrs	r3, r6
 80002b4:	2200      	movs	r2, #0
 80002b6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d905      	bls.n	80002ce <__udivmoddi4+0xb6>
 80002c2:	b10d      	cbz	r5, 80002c8 <__udivmoddi4+0xb0>
 80002c4:	e9c5 0100 	strd	r0, r1, [r5]
 80002c8:	2100      	movs	r1, #0
 80002ca:	4608      	mov	r0, r1
 80002cc:	e7f5      	b.n	80002ba <__udivmoddi4+0xa2>
 80002ce:	fab3 f183 	clz	r1, r3
 80002d2:	2900      	cmp	r1, #0
 80002d4:	d146      	bne.n	8000364 <__udivmoddi4+0x14c>
 80002d6:	4573      	cmp	r3, lr
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xc8>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 8105 	bhi.w	80004ea <__udivmoddi4+0x2d2>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4690      	mov	r8, r2
 80002ea:	2d00      	cmp	r5, #0
 80002ec:	d0e5      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002ee:	e9c5 4800 	strd	r4, r8, [r5]
 80002f2:	e7e2      	b.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f000 8090 	beq.w	800041a <__udivmoddi4+0x202>
 80002fa:	fab2 f682 	clz	r6, r2
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f040 80a4 	bne.w	800044c <__udivmoddi4+0x234>
 8000304:	1a8a      	subs	r2, r1, r2
 8000306:	0c03      	lsrs	r3, r0, #16
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	b280      	uxth	r0, r0
 800030e:	b2bc      	uxth	r4, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb2 fcfe 	udiv	ip, r2, lr
 8000316:	fb0e 221c 	mls	r2, lr, ip, r2
 800031a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800031e:	fb04 f20c 	mul.w	r2, r4, ip
 8000322:	429a      	cmp	r2, r3
 8000324:	d907      	bls.n	8000336 <__udivmoddi4+0x11e>
 8000326:	18fb      	adds	r3, r7, r3
 8000328:	f10c 38ff 	add.w	r8, ip, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x11c>
 800032e:	429a      	cmp	r2, r3
 8000330:	f200 80e0 	bhi.w	80004f4 <__udivmoddi4+0x2dc>
 8000334:	46c4      	mov	ip, r8
 8000336:	1a9b      	subs	r3, r3, r2
 8000338:	fbb3 f2fe 	udiv	r2, r3, lr
 800033c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000340:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000344:	fb02 f404 	mul.w	r4, r2, r4
 8000348:	429c      	cmp	r4, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x144>
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x142>
 8000354:	429c      	cmp	r4, r3
 8000356:	f200 80ca 	bhi.w	80004ee <__udivmoddi4+0x2d6>
 800035a:	4602      	mov	r2, r0
 800035c:	1b1b      	subs	r3, r3, r4
 800035e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0x98>
 8000364:	f1c1 0620 	rsb	r6, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 f706 	lsr.w	r7, r2, r6
 800036e:	431f      	orrs	r7, r3
 8000370:	fa0e f401 	lsl.w	r4, lr, r1
 8000374:	fa20 f306 	lsr.w	r3, r0, r6
 8000378:	fa2e fe06 	lsr.w	lr, lr, r6
 800037c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	fa1f fc87 	uxth.w	ip, r7
 800038a:	fbbe f0f9 	udiv	r0, lr, r9
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	fb09 ee10 	mls	lr, r9, r0, lr
 8000394:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000398:	fb00 fe0c 	mul.w	lr, r0, ip
 800039c:	45a6      	cmp	lr, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x1a0>
 80003a4:	193c      	adds	r4, r7, r4
 80003a6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003aa:	f080 809c 	bcs.w	80004e6 <__udivmoddi4+0x2ce>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f240 8099 	bls.w	80004e6 <__udivmoddi4+0x2ce>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 040e 	sub.w	r4, r4, lr
 80003bc:	fa1f fe83 	uxth.w	lr, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003cc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d0:	45a4      	cmp	ip, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1ce>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003da:	f080 8082 	bcs.w	80004e2 <__udivmoddi4+0x2ca>
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d97f      	bls.n	80004e2 <__udivmoddi4+0x2ca>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f2:	4564      	cmp	r4, ip
 80003f4:	4673      	mov	r3, lr
 80003f6:	46e1      	mov	r9, ip
 80003f8:	d362      	bcc.n	80004c0 <__udivmoddi4+0x2a8>
 80003fa:	d05f      	beq.n	80004bc <__udivmoddi4+0x2a4>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x1fe>
 80003fe:	ebb8 0203 	subs.w	r2, r8, r3
 8000402:	eb64 0409 	sbc.w	r4, r4, r9
 8000406:	fa04 f606 	lsl.w	r6, r4, r6
 800040a:	fa22 f301 	lsr.w	r3, r2, r1
 800040e:	431e      	orrs	r6, r3
 8000410:	40cc      	lsrs	r4, r1
 8000412:	e9c5 6400 	strd	r6, r4, [r5]
 8000416:	2100      	movs	r1, #0
 8000418:	e74f      	b.n	80002ba <__udivmoddi4+0xa2>
 800041a:	fbb1 fcf2 	udiv	ip, r1, r2
 800041e:	0c01      	lsrs	r1, r0, #16
 8000420:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000424:	b280      	uxth	r0, r0
 8000426:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042a:	463b      	mov	r3, r7
 800042c:	4638      	mov	r0, r7
 800042e:	463c      	mov	r4, r7
 8000430:	46b8      	mov	r8, r7
 8000432:	46be      	mov	lr, r7
 8000434:	2620      	movs	r6, #32
 8000436:	fbb1 f1f7 	udiv	r1, r1, r7
 800043a:	eba2 0208 	sub.w	r2, r2, r8
 800043e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000442:	e766      	b.n	8000312 <__udivmoddi4+0xfa>
 8000444:	4601      	mov	r1, r0
 8000446:	e718      	b.n	800027a <__udivmoddi4+0x62>
 8000448:	4610      	mov	r0, r2
 800044a:	e72c      	b.n	80002a6 <__udivmoddi4+0x8e>
 800044c:	f1c6 0220 	rsb	r2, r6, #32
 8000450:	fa2e f302 	lsr.w	r3, lr, r2
 8000454:	40b7      	lsls	r7, r6
 8000456:	40b1      	lsls	r1, r6
 8000458:	fa20 f202 	lsr.w	r2, r0, r2
 800045c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000460:	430a      	orrs	r2, r1
 8000462:	fbb3 f8fe 	udiv	r8, r3, lr
 8000466:	b2bc      	uxth	r4, r7
 8000468:	fb0e 3318 	mls	r3, lr, r8, r3
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb08 f904 	mul.w	r9, r8, r4
 8000476:	40b0      	lsls	r0, r6
 8000478:	4589      	cmp	r9, r1
 800047a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800047e:	b280      	uxth	r0, r0
 8000480:	d93e      	bls.n	8000500 <__udivmoddi4+0x2e8>
 8000482:	1879      	adds	r1, r7, r1
 8000484:	f108 3cff 	add.w	ip, r8, #4294967295
 8000488:	d201      	bcs.n	800048e <__udivmoddi4+0x276>
 800048a:	4589      	cmp	r9, r1
 800048c:	d81f      	bhi.n	80004ce <__udivmoddi4+0x2b6>
 800048e:	eba1 0109 	sub.w	r1, r1, r9
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fb09 f804 	mul.w	r8, r9, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	b292      	uxth	r2, r2
 80004a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a4:	4542      	cmp	r2, r8
 80004a6:	d229      	bcs.n	80004fc <__udivmoddi4+0x2e4>
 80004a8:	18ba      	adds	r2, r7, r2
 80004aa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ae:	d2c4      	bcs.n	800043a <__udivmoddi4+0x222>
 80004b0:	4542      	cmp	r2, r8
 80004b2:	d2c2      	bcs.n	800043a <__udivmoddi4+0x222>
 80004b4:	f1a9 0102 	sub.w	r1, r9, #2
 80004b8:	443a      	add	r2, r7
 80004ba:	e7be      	b.n	800043a <__udivmoddi4+0x222>
 80004bc:	45f0      	cmp	r8, lr
 80004be:	d29d      	bcs.n	80003fc <__udivmoddi4+0x1e4>
 80004c0:	ebbe 0302 	subs.w	r3, lr, r2
 80004c4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c8:	3801      	subs	r0, #1
 80004ca:	46e1      	mov	r9, ip
 80004cc:	e796      	b.n	80003fc <__udivmoddi4+0x1e4>
 80004ce:	eba7 0909 	sub.w	r9, r7, r9
 80004d2:	4449      	add	r1, r9
 80004d4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004dc:	fb09 f804 	mul.w	r8, r9, r4
 80004e0:	e7db      	b.n	800049a <__udivmoddi4+0x282>
 80004e2:	4673      	mov	r3, lr
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1ce>
 80004e6:	4650      	mov	r0, sl
 80004e8:	e766      	b.n	80003b8 <__udivmoddi4+0x1a0>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e6fd      	b.n	80002ea <__udivmoddi4+0xd2>
 80004ee:	443b      	add	r3, r7
 80004f0:	3a02      	subs	r2, #2
 80004f2:	e733      	b.n	800035c <__udivmoddi4+0x144>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	443b      	add	r3, r7
 80004fa:	e71c      	b.n	8000336 <__udivmoddi4+0x11e>
 80004fc:	4649      	mov	r1, r9
 80004fe:	e79c      	b.n	800043a <__udivmoddi4+0x222>
 8000500:	eba1 0109 	sub.w	r1, r1, r9
 8000504:	46c4      	mov	ip, r8
 8000506:	fbb1 f9fe 	udiv	r9, r1, lr
 800050a:	fb09 f804 	mul.w	r8, r9, r4
 800050e:	e7c4      	b.n	800049a <__udivmoddi4+0x282>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <hid_init>:
// static uint8_t is_screaming = 0;
static uint8_t consumer_report = 0;

CFG_TUSB_MEM_SECTION CFG_TUSB_MEM_ALIGN static uint8_t usb_vendor_control_buffer[400];

void hid_init() {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	2300      	movs	r3, #0
 800051c:	71fb      	strb	r3, [r7, #7]
// Init device stack on roothub port
#if TUSB_VERSION_NUMBER > 2000  // 0.20.0
TU_ATTR_DEPRECATED("Please use tusb_init(rhport, rh_init) instead")
#endif
TU_ATTR_ALWAYS_INLINE static inline bool tud_init (uint8_t rhport) {
  const tusb_rhport_init_t rh_init = {
 800051e:	2301      	movs	r3, #1
 8000520:	713b      	strb	r3, [r7, #4]
 8000522:	2300      	movs	r3, #0
 8000524:	717b      	strb	r3, [r7, #5]
    .role = TUSB_ROLE_DEVICE,
    .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
  };
  return tud_rhport_init(rhport, &rh_init);
 8000526:	1d3a      	adds	r2, r7, #4
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	4611      	mov	r1, r2
 800052c:	4618      	mov	r0, r3
 800052e:	f005 fc95 	bl	8005e5c <tud_rhport_init>
  tud_init(BOARD_TUD_RHPORT);
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <hid_task>:

void hid_task() {
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 8000542:	2100      	movs	r1, #0
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f005 fdc4 	bl	80060d4 <tud_task_ext>
}
 800054c:	bf00      	nop
  tud_task();

  if ((should_send_consumer_report || should_send_keyboard_report) && tud_hid_ready()) {
 800054e:	4b21      	ldr	r3, [pc, #132]	@ (80005d4 <hid_task+0x98>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d103      	bne.n	800055e <hid_task+0x22>
 8000556:	4b20      	ldr	r3, [pc, #128]	@ (80005d8 <hid_task+0x9c>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d035      	beq.n	80005ca <hid_task+0x8e>

//--------------------------------------------------------------------+
// Application API (Single Port)
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_ready(void) {
  return tud_hid_n_ready(0);
 800055e:	2000      	movs	r0, #0
 8000560:	f003 feac 	bl	80042bc <tud_hid_n_ready>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d02f      	beq.n	80005ca <hid_task+0x8e>
    if (tud_suspended()) {
 800056a:	f005 fc2d 	bl	8005dc8 <tud_suspended>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d002      	beq.n	800057a <hid_task+0x3e>
      tud_remote_wakeup();
 8000574:	f005 fc3c 	bl	8005df0 <tud_remote_wakeup>
        should_send_keyboard_report = 0;
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
      }
    }
  }
}
 8000578:	e027      	b.n	80005ca <hid_task+0x8e>
      if (should_send_consumer_report) {
 800057a:	4b16      	ldr	r3, [pc, #88]	@ (80005d4 <hid_task+0x98>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d00f      	beq.n	80005a2 <hid_task+0x66>
        should_send_consumer_report = 0;
 8000582:	4b14      	ldr	r3, [pc, #80]	@ (80005d4 <hid_task+0x98>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
 8000588:	2302      	movs	r3, #2
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	4b13      	ldr	r3, [pc, #76]	@ (80005dc <hid_task+0xa0>)
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	2302      	movs	r3, #2
 8000592:	80fb      	strh	r3, [r7, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tud_hid_get_protocol(void) {
  return tud_hid_n_get_protocol(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_report(uint8_t report_id, void const* report, uint16_t len) {
  return tud_hid_n_report(0, report_id, report, len);
 8000594:	88fb      	ldrh	r3, [r7, #6]
 8000596:	7bf9      	ldrb	r1, [r7, #15]
 8000598:	68ba      	ldr	r2, [r7, #8]
 800059a:	2000      	movs	r0, #0
 800059c:	f003 fed0 	bl	8004340 <tud_hid_n_report>
 80005a0:	e013      	b.n	80005ca <hid_task+0x8e>
      } else if (should_send_keyboard_report) {
 80005a2:	4b0d      	ldr	r3, [pc, #52]	@ (80005d8 <hid_task+0x9c>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d00f      	beq.n	80005ca <hid_task+0x8e>
        should_send_keyboard_report = 0;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <hid_task+0x9c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
 80005b0:	4b0b      	ldr	r3, [pc, #44]	@ (80005e0 <hid_task+0xa4>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2201      	movs	r2, #1
 80005b6:	717a      	strb	r2, [r7, #5]
 80005b8:	713b      	strb	r3, [r7, #4]
 80005ba:	4b0a      	ldr	r3, [pc, #40]	@ (80005e4 <hid_task+0xa8>)
 80005bc:	603b      	str	r3, [r7, #0]
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
  return tud_hid_n_keyboard_report(0, report_id, modifier, keycode);
 80005be:	793a      	ldrb	r2, [r7, #4]
 80005c0:	7979      	ldrb	r1, [r7, #5]
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	2000      	movs	r0, #0
 80005c6:	f003 ff41 	bl	800444c <tud_hid_n_keyboard_report>
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000009c 	.word	0x2000009c
 80005d8:	2000009d 	.word	0x2000009d
 80005dc:	200000a6 	.word	0x200000a6
 80005e0:	2000009e 	.word	0x2000009e
 80005e4:	200000a0 	.word	0x200000a0

080005e8 <hid_press_key>:

void hid_press_key(struct key *key, uint8_t layer) {
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 80005f4:	78fa      	ldrb	r2, [r7, #3]
 80005f6:	6879      	ldr	r1, [r7, #4]
 80005f8:	4613      	mov	r3, r2
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	4413      	add	r3, r2
 80005fe:	440b      	add	r3, r1
 8000600:	3305      	adds	r3, #5
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b03      	cmp	r3, #3
 8000606:	d038      	beq.n	800067a <hid_press_key+0x92>
 8000608:	2b03      	cmp	r3, #3
 800060a:	dc45      	bgt.n	8000698 <hid_press_key+0xb0>
 800060c:	2b01      	cmp	r3, #1
 800060e:	d014      	beq.n	800063a <hid_press_key+0x52>
 8000610:	2b02      	cmp	r3, #2
 8000612:	d141      	bne.n	8000698 <hid_press_key+0xb0>
  case KEY_TYPE_MODIFIER:
    modifiers |= key->layers[layer].value;
 8000614:	78fa      	ldrb	r2, [r7, #3]
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	4613      	mov	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	4413      	add	r3, r2
 800061e:	440b      	add	r3, r1
 8000620:	88db      	ldrh	r3, [r3, #6]
 8000622:	b29b      	uxth	r3, r3
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b20      	ldr	r3, [pc, #128]	@ (80006a8 <hid_press_key+0xc0>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4313      	orrs	r3, r2
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b1e      	ldr	r3, [pc, #120]	@ (80006a8 <hid_press_key+0xc0>)
 8000630:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 8000632:	4b1e      	ldr	r3, [pc, #120]	@ (80006ac <hid_press_key+0xc4>)
 8000634:	2201      	movs	r2, #1
 8000636:	701a      	strb	r2, [r3, #0]
    break;
 8000638:	e02f      	b.n	800069a <hid_press_key+0xb2>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 800063a:	2300      	movs	r3, #0
 800063c:	73fb      	strb	r3, [r7, #15]
 800063e:	e018      	b.n	8000672 <hid_press_key+0x8a>
      if (keycodes[i] == 0) {
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	4a1b      	ldr	r2, [pc, #108]	@ (80006b0 <hid_press_key+0xc8>)
 8000644:	5cd3      	ldrb	r3, [r2, r3]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d110      	bne.n	800066c <hid_press_key+0x84>
        keycodes[i] = key->layers[layer].value;
 800064a:	78fa      	ldrb	r2, [r7, #3]
 800064c:	6879      	ldr	r1, [r7, #4]
 800064e:	4613      	mov	r3, r2
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	4413      	add	r3, r2
 8000654:	440b      	add	r3, r1
 8000656:	88db      	ldrh	r3, [r3, #6]
 8000658:	b29a      	uxth	r2, r3
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	b2d1      	uxtb	r1, r2
 800065e:	4a14      	ldr	r2, [pc, #80]	@ (80006b0 <hid_press_key+0xc8>)
 8000660:	54d1      	strb	r1, [r2, r3]
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // } else if (i == 0 && key->state.velocity > keyboard_user_config.screaming_velocity_trigger) {
        //   is_screaming = 1;
        //   modifiers |= get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 8000662:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <hid_press_key+0xc4>)
 8000664:	2201      	movs	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]
        break;
 8000668:	bf00      	nop
      }
    }
    break;
 800066a:	e016      	b.n	800069a <hid_press_key+0xb2>
    for (uint8_t i = 0; i < 6; i++) {
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	3301      	adds	r3, #1
 8000670:	73fb      	strb	r3, [r7, #15]
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	2b05      	cmp	r3, #5
 8000676:	d9e3      	bls.n	8000640 <hid_press_key+0x58>
    break;
 8000678:	e00f      	b.n	800069a <hid_press_key+0xb2>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = key->layers[layer].value;
 800067a:	78fa      	ldrb	r2, [r7, #3]
 800067c:	6879      	ldr	r1, [r7, #4]
 800067e:	4613      	mov	r3, r2
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	4413      	add	r3, r2
 8000684:	440b      	add	r3, r1
 8000686:	88db      	ldrh	r3, [r3, #6]
 8000688:	b29b      	uxth	r3, r3
 800068a:	b2da      	uxtb	r2, r3
 800068c:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <hid_press_key+0xcc>)
 800068e:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 8000690:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <hid_press_key+0xd0>)
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
    break;
 8000696:	e000      	b.n	800069a <hid_press_key+0xb2>

  default:
    break;
 8000698:	bf00      	nop
  }
}
 800069a:	bf00      	nop
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	2000009e 	.word	0x2000009e
 80006ac:	2000009d 	.word	0x2000009d
 80006b0:	200000a0 	.word	0x200000a0
 80006b4:	200000a6 	.word	0x200000a6
 80006b8:	2000009c 	.word	0x2000009c

080006bc <hid_release_key>:

void hid_release_key(struct key *key, uint8_t layer) {
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	460b      	mov	r3, r1
 80006c6:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 80006c8:	78fa      	ldrb	r2, [r7, #3]
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	4613      	mov	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	440b      	add	r3, r1
 80006d4:	3305      	adds	r3, #5
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d03d      	beq.n	8000758 <hid_release_key+0x9c>
 80006dc:	2b03      	cmp	r3, #3
 80006de:	dc42      	bgt.n	8000766 <hid_release_key+0xaa>
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d018      	beq.n	8000716 <hid_release_key+0x5a>
 80006e4:	2b02      	cmp	r3, #2
 80006e6:	d13e      	bne.n	8000766 <hid_release_key+0xaa>
  case KEY_TYPE_MODIFIER:
    modifiers &= ~key->layers[layer].value;
 80006e8:	78fa      	ldrb	r2, [r7, #3]
 80006ea:	6879      	ldr	r1, [r7, #4]
 80006ec:	4613      	mov	r3, r2
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	4413      	add	r3, r2
 80006f2:	440b      	add	r3, r1
 80006f4:	88db      	ldrh	r3, [r3, #6]
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	43db      	mvns	r3, r3
 80006fc:	b25a      	sxtb	r2, r3
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <hid_release_key+0xb8>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b25b      	sxtb	r3, r3
 8000704:	4013      	ands	r3, r2
 8000706:	b25b      	sxtb	r3, r3
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <hid_release_key+0xb8>)
 800070c:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 800070e:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <hid_release_key+0xbc>)
 8000710:	2201      	movs	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]
    break;
 8000714:	e028      	b.n	8000768 <hid_release_key+0xac>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 8000716:	2300      	movs	r3, #0
 8000718:	73fb      	strb	r3, [r7, #15]
 800071a:	e019      	b.n	8000750 <hid_release_key+0x94>
      if (keycodes[i] == key->layers[layer].value) {
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	4a17      	ldr	r2, [pc, #92]	@ (800077c <hid_release_key+0xc0>)
 8000720:	5cd3      	ldrb	r3, [r2, r3]
 8000722:	4618      	mov	r0, r3
 8000724:	78fa      	ldrb	r2, [r7, #3]
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	4613      	mov	r3, r2
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	4413      	add	r3, r2
 800072e:	440b      	add	r3, r1
 8000730:	88db      	ldrh	r3, [r3, #6]
 8000732:	b29b      	uxth	r3, r3
 8000734:	4298      	cmp	r0, r3
 8000736:	d108      	bne.n	800074a <hid_release_key+0x8e>
        keycodes[i] = 0;
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	4a10      	ldr	r2, [pc, #64]	@ (800077c <hid_release_key+0xc0>)
 800073c:	2100      	movs	r1, #0
 800073e:	54d1      	strb	r1, [r2, r3]
        // if (is_screaming) {
        //   is_screaming = 0;
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 8000740:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <hid_release_key+0xbc>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
        break;
 8000746:	bf00      	nop
      }
    }
    break;
 8000748:	e00e      	b.n	8000768 <hid_release_key+0xac>
    for (uint8_t i = 0; i < 6; i++) {
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	3301      	adds	r3, #1
 800074e:	73fb      	strb	r3, [r7, #15]
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	2b05      	cmp	r3, #5
 8000754:	d9e2      	bls.n	800071c <hid_release_key+0x60>
    break;
 8000756:	e007      	b.n	8000768 <hid_release_key+0xac>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = 0;
 8000758:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <hid_release_key+0xc4>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <hid_release_key+0xc8>)
 8000760:	2201      	movs	r2, #1
 8000762:	701a      	strb	r2, [r3, #0]
    break;
 8000764:	e000      	b.n	8000768 <hid_release_key+0xac>

  default:
    break;
 8000766:	bf00      	nop
  }
}
 8000768:	bf00      	nop
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	2000009e 	.word	0x2000009e
 8000778:	2000009d 	.word	0x2000009d
 800077c:	200000a0 	.word	0x200000a0
 8000780:	200000a6 	.word	0x200000a6
 8000784:	2000009c 	.word	0x2000009c

08000788 <tud_hid_set_protocol_cb>:

// Invoked when received SET_PROTOCOL request
// protocol is either HID_PROTOCOL_BOOT (0) or HID_PROTOCOL_REPORT (1)
void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]
  (void)instance;
  (void)protocol;

  // nothing to do since we use the same compatible boot report for both Boot and Report mode.
  // TODO set a indicator for user
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <tud_hid_report_complete_cb>:

// Invoked when sent REPORT successfully to host
// Application can use this to send the next report
// Note: For composite reports, report[0] is report ID
void tud_hid_report_complete_cb(uint8_t instance, uint8_t const *report, uint16_t len) {
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	71fb      	strb	r3, [r7, #7]
 80007b0:	4613      	mov	r3, r2
 80007b2:	80bb      	strh	r3, [r7, #4]
  (void)instance;
  (void)report;
  (void)len;
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <tud_hid_get_report_cb>:

// Invoked when received GET_REPORT control request
// Application must fill buffer report's content and return its length.
// Return zero will cause the stack to STALL request
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t *buffer, uint16_t reqlen) {
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	4603      	mov	r3, r0
 80007ca:	71fb      	strb	r3, [r7, #7]
 80007cc:	460b      	mov	r3, r1
 80007ce:	71bb      	strb	r3, [r7, #6]
 80007d0:	4613      	mov	r3, r2
 80007d2:	717b      	strb	r3, [r7, #5]
  (void)report_id;
  (void)report_type;
  (void)buffer;
  (void)reqlen;

  return 0;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const *buffer, uint16_t bufsize) {
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
 80007ee:	460b      	mov	r3, r1
 80007f0:	71bb      	strb	r3, [r7, #6]
 80007f2:	4613      	mov	r3, r2
 80007f4:	717b      	strb	r3, [r7, #5]
  // if (instance == 1 && report_id == 0) {
  //   keyboard_write_config(buffer, bufsize);

  //   keyboard_init_keys();
  // }
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
	...

08000804 <tud_vendor_control_xfer_cb>:
// }

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	603a      	str	r2, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
 8000810:	460b      	mov	r3, r1
 8000812:	71bb      	strb	r3, [r7, #6]
  switch (request->bmRequestType_bit.type) {
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800081c:	b2db      	uxtb	r3, r3
 800081e:	2b01      	cmp	r3, #1
 8000820:	f000 811b 	beq.w	8000a5a <tud_vendor_control_xfer_cb+0x256>
 8000824:	2b02      	cmp	r3, #2
 8000826:	f040 8128 	bne.w	8000a7a <tud_vendor_control_xfer_cb+0x276>
  case TUSB_REQ_TYPE_VENDOR: {
    switch (request->bRequest) {
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	785b      	ldrb	r3, [r3, #1]
 800082e:	2bff      	cmp	r3, #255	@ 0xff
 8000830:	f300 810a 	bgt.w	8000a48 <tud_vendor_control_xfer_cb+0x244>
 8000834:	2bfb      	cmp	r3, #251	@ 0xfb
 8000836:	da06      	bge.n	8000846 <tud_vendor_control_xfer_cb+0x42>
 8000838:	2b01      	cmp	r3, #1
 800083a:	f000 80e5 	beq.w	8000a08 <tud_vendor_control_xfer_cb+0x204>
 800083e:	2b02      	cmp	r3, #2
 8000840:	f000 80ec 	beq.w	8000a1c <tud_vendor_control_xfer_cb+0x218>

      break;
    }

    default:
      break;
 8000844:	e100      	b.n	8000a48 <tud_vendor_control_xfer_cb+0x244>
    switch (request->bRequest) {
 8000846:	3bfb      	subs	r3, #251	@ 0xfb
 8000848:	2b04      	cmp	r3, #4
 800084a:	f200 80fd 	bhi.w	8000a48 <tud_vendor_control_xfer_cb+0x244>
 800084e:	a201      	add	r2, pc, #4	@ (adr r2, 8000854 <tud_vendor_control_xfer_cb+0x50>)
 8000850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000854:	080009b9 	.word	0x080009b9
 8000858:	08000949 	.word	0x08000949
 800085c:	0800090d 	.word	0x0800090d
 8000860:	08000967 	.word	0x08000967
 8000864:	08000869 	.word	0x08000869
      switch (request->wValue) {
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	885b      	ldrh	r3, [r3, #2]
 800086c:	b29b      	uxth	r3, r3
 800086e:	2b02      	cmp	r3, #2
 8000870:	d023      	beq.n	80008ba <tud_vendor_control_xfer_cb+0xb6>
 8000872:	2b02      	cmp	r3, #2
 8000874:	dc43      	bgt.n	80008fe <tud_vendor_control_xfer_cb+0xfa>
 8000876:	2b00      	cmp	r3, #0
 8000878:	d002      	beq.n	8000880 <tud_vendor_control_xfer_cb+0x7c>
 800087a:	2b01      	cmp	r3, #1
 800087c:	d010      	beq.n	80008a0 <tud_vendor_control_xfer_cb+0x9c>
        break;
 800087e:	e03e      	b.n	80008fe <tud_vendor_control_xfer_cb+0xfa>
        if (stage == CONTROL_STAGE_SETUP) {
 8000880:	79bb      	ldrb	r3, [r7, #6]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d13d      	bne.n	8000902 <tud_vendor_control_xfer_cb+0xfe>
          uint16_t size = sizeof(keyboard_user_config);
 8000886:	2348      	movs	r3, #72	@ 0x48
 8000888:	81fb      	strh	r3, [r7, #14]
          return tud_control_xfer(rhport, request, &size, request->wLength);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	88db      	ldrh	r3, [r3, #6]
 800088e:	b29b      	uxth	r3, r3
 8000890:	f107 020e 	add.w	r2, r7, #14
 8000894:	79f8      	ldrb	r0, [r7, #7]
 8000896:	6839      	ldr	r1, [r7, #0]
 8000898:	f006 ffd0 	bl	800783c <tud_control_xfer>
 800089c:	4603      	mov	r3, r0
 800089e:	e0f5      	b.n	8000a8c <tud_vendor_control_xfer_cb+0x288>
        if (stage == CONTROL_STAGE_SETUP) {
 80008a0:	79bb      	ldrb	r3, [r7, #6]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d12f      	bne.n	8000906 <tud_vendor_control_xfer_cb+0x102>
          return tud_control_xfer(rhport, request, &keyboard_user_config, request->wLength);
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	88db      	ldrh	r3, [r3, #6]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	79f8      	ldrb	r0, [r7, #7]
 80008ae:	4a79      	ldr	r2, [pc, #484]	@ (8000a94 <tud_vendor_control_xfer_cb+0x290>)
 80008b0:	6839      	ldr	r1, [r7, #0]
 80008b2:	f006 ffc3 	bl	800783c <tud_control_xfer>
 80008b6:	4603      	mov	r3, r0
 80008b8:	e0e8      	b.n	8000a8c <tud_vendor_control_xfer_cb+0x288>
        if (stage == CONTROL_STAGE_SETUP) {
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d109      	bne.n	80008d4 <tud_vendor_control_xfer_cb+0xd0>
          return tud_control_xfer(rhport, request, usb_vendor_control_buffer, request->wLength);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	88db      	ldrh	r3, [r3, #6]
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	79f8      	ldrb	r0, [r7, #7]
 80008c8:	4a73      	ldr	r2, [pc, #460]	@ (8000a98 <tud_vendor_control_xfer_cb+0x294>)
 80008ca:	6839      	ldr	r1, [r7, #0]
 80008cc:	f006 ffb6 	bl	800783c <tud_control_xfer>
 80008d0:	4603      	mov	r3, r0
 80008d2:	e0db      	b.n	8000a8c <tud_vendor_control_xfer_cb+0x288>
        } else if (stage == CONTROL_STAGE_DATA) {
 80008d4:	79bb      	ldrb	r3, [r7, #6]
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d117      	bne.n	800090a <tud_vendor_control_xfer_cb+0x106>
          if (!keyboard_write_config(&usb_vendor_control_buffer, 0, request->wLength)) {
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	88db      	ldrh	r3, [r3, #6]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	461a      	mov	r2, r3
 80008e2:	2100      	movs	r1, #0
 80008e4:	486c      	ldr	r0, [pc, #432]	@ (8000a98 <tud_vendor_control_xfer_cb+0x294>)
 80008e6:	f000 fefb 	bl	80016e0 <keyboard_write_config>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d101      	bne.n	80008f4 <tud_vendor_control_xfer_cb+0xf0>
            return false;
 80008f0:	2300      	movs	r3, #0
 80008f2:	e0cb      	b.n	8000a8c <tud_vendor_control_xfer_cb+0x288>
          keyboard_read_config();
 80008f4:	f000 fee4 	bl	80016c0 <keyboard_read_config>
          keyboard_init_keys();
 80008f8:	f000 fc48 	bl	800118c <keyboard_init_keys>
        break;
 80008fc:	e005      	b.n	800090a <tud_vendor_control_xfer_cb+0x106>
        break;
 80008fe:	bf00      	nop
 8000900:	e004      	b.n	800090c <tud_vendor_control_xfer_cb+0x108>
        break;
 8000902:	bf00      	nop
 8000904:	e002      	b.n	800090c <tud_vendor_control_xfer_cb+0x108>
        break;
 8000906:	bf00      	nop
 8000908:	e000      	b.n	800090c <tud_vendor_control_xfer_cb+0x108>
        break;
 800090a:	bf00      	nop
      if (request->wValue == VENDOR_VALUE_SET) {
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	885b      	ldrh	r3, [r3, #2]
 8000910:	b29b      	uxth	r3, r3
 8000912:	2b02      	cmp	r3, #2
 8000914:	d118      	bne.n	8000948 <tud_vendor_control_xfer_cb+0x144>
        if (stage == CONTROL_STAGE_SETUP) {
 8000916:	79bb      	ldrb	r3, [r7, #6]
 8000918:	2b01      	cmp	r3, #1
 800091a:	f040 8097 	bne.w	8000a4c <tud_vendor_control_xfer_cb+0x248>
          if (!keyboard_write_config(&keyboard_default_user_config, 0, sizeof keyboard_default_user_config)) {
 800091e:	2248      	movs	r2, #72	@ 0x48
 8000920:	2100      	movs	r1, #0
 8000922:	485e      	ldr	r0, [pc, #376]	@ (8000a9c <tud_vendor_control_xfer_cb+0x298>)
 8000924:	f000 fedc 	bl	80016e0 <keyboard_write_config>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d101      	bne.n	8000932 <tud_vendor_control_xfer_cb+0x12e>
            return false;
 800092e:	2300      	movs	r3, #0
 8000930:	e0ac      	b.n	8000a8c <tud_vendor_control_xfer_cb+0x288>
          keyboard_read_config();
 8000932:	f000 fec5 	bl	80016c0 <keyboard_read_config>
          keyboard_init_keys();
 8000936:	f000 fc29 	bl	800118c <keyboard_init_keys>
          return tud_control_status(rhport, request);
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	6839      	ldr	r1, [r7, #0]
 800093e:	4618      	mov	r0, r3
 8000940:	f006 ff0a 	bl	8007758 <tud_control_status>
 8000944:	4603      	mov	r3, r0
 8000946:	e0a1      	b.n	8000a8c <tud_vendor_control_xfer_cb+0x288>
      if (request->wValue == VENDOR_VALUE_SET) {
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	885b      	ldrh	r3, [r3, #2]
 800094c:	b29b      	uxth	r3, r3
 800094e:	2b02      	cmp	r3, #2
 8000950:	d109      	bne.n	8000966 <tud_vendor_control_xfer_cb+0x162>
        if (stage == CONTROL_STAGE_SETUP) {
 8000952:	79bb      	ldrb	r3, [r7, #6]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d17b      	bne.n	8000a50 <tud_vendor_control_xfer_cb+0x24c>
          return tud_control_status(rhport, request);
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	6839      	ldr	r1, [r7, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f006 fefb 	bl	8007758 <tud_control_status>
 8000962:	4603      	mov	r3, r0
 8000964:	e092      	b.n	8000a8c <tud_vendor_control_xfer_cb+0x288>
      switch (request->wValue) {
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	885b      	ldrh	r3, [r3, #2]
 800096a:	b29b      	uxth	r3, r3
 800096c:	2b00      	cmp	r3, #0
 800096e:	d002      	beq.n	8000976 <tud_vendor_control_xfer_cb+0x172>
 8000970:	2b01      	cmp	r3, #1
 8000972:	d011      	beq.n	8000998 <tud_vendor_control_xfer_cb+0x194>
        break;
 8000974:	e020      	b.n	80009b8 <tud_vendor_control_xfer_cb+0x1b4>
        if (stage == CONTROL_STAGE_SETUP) {
 8000976:	79bb      	ldrb	r3, [r7, #6]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d11a      	bne.n	80009b2 <tud_vendor_control_xfer_cb+0x1ae>
          uint16_t size = sizeof(keyboard_keys);
 800097c:	f44f 731c 	mov.w	r3, #624	@ 0x270
 8000980:	81bb      	strh	r3, [r7, #12]
          return tud_control_xfer(rhport, request, &size, request->wLength);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	88db      	ldrh	r3, [r3, #6]
 8000986:	b29b      	uxth	r3, r3
 8000988:	f107 020c 	add.w	r2, r7, #12
 800098c:	79f8      	ldrb	r0, [r7, #7]
 800098e:	6839      	ldr	r1, [r7, #0]
 8000990:	f006 ff54 	bl	800783c <tud_control_xfer>
 8000994:	4603      	mov	r3, r0
 8000996:	e079      	b.n	8000a8c <tud_vendor_control_xfer_cb+0x288>
        if (stage == CONTROL_STAGE_SETUP) {
 8000998:	79bb      	ldrb	r3, [r7, #6]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d10b      	bne.n	80009b6 <tud_vendor_control_xfer_cb+0x1b2>
          return tud_control_xfer(rhport, request, &keyboard_keys, request->wLength);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	88db      	ldrh	r3, [r3, #6]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	79f8      	ldrb	r0, [r7, #7]
 80009a6:	4a3e      	ldr	r2, [pc, #248]	@ (8000aa0 <tud_vendor_control_xfer_cb+0x29c>)
 80009a8:	6839      	ldr	r1, [r7, #0]
 80009aa:	f006 ff47 	bl	800783c <tud_control_xfer>
 80009ae:	4603      	mov	r3, r0
 80009b0:	e06c      	b.n	8000a8c <tud_vendor_control_xfer_cb+0x288>
        break;
 80009b2:	bf00      	nop
 80009b4:	e000      	b.n	80009b8 <tud_vendor_control_xfer_cb+0x1b4>
        break;
 80009b6:	bf00      	nop
      switch (request->wValue) {
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	885b      	ldrh	r3, [r3, #2]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d002      	beq.n	80009c8 <tud_vendor_control_xfer_cb+0x1c4>
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d010      	beq.n	80009e8 <tud_vendor_control_xfer_cb+0x1e4>
        break;
 80009c6:	e01f      	b.n	8000a08 <tud_vendor_control_xfer_cb+0x204>
        if (stage == CONTROL_STAGE_SETUP) {
 80009c8:	79bb      	ldrb	r3, [r7, #6]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d119      	bne.n	8000a02 <tud_vendor_control_xfer_cb+0x1fe>
          uint16_t size = sizeof(keyboard_last_cycle_duration);
 80009ce:	2304      	movs	r3, #4
 80009d0:	817b      	strh	r3, [r7, #10]
          return tud_control_xfer(rhport, request, &size, request->wLength);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	88db      	ldrh	r3, [r3, #6]
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	f107 020a 	add.w	r2, r7, #10
 80009dc:	79f8      	ldrb	r0, [r7, #7]
 80009de:	6839      	ldr	r1, [r7, #0]
 80009e0:	f006 ff2c 	bl	800783c <tud_control_xfer>
 80009e4:	4603      	mov	r3, r0
 80009e6:	e051      	b.n	8000a8c <tud_vendor_control_xfer_cb+0x288>
        if (stage == CONTROL_STAGE_SETUP) {
 80009e8:	79bb      	ldrb	r3, [r7, #6]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d10b      	bne.n	8000a06 <tud_vendor_control_xfer_cb+0x202>
          return tud_control_xfer(rhport, request, &keyboard_last_cycle_duration, request->wLength);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	88db      	ldrh	r3, [r3, #6]
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	79f8      	ldrb	r0, [r7, #7]
 80009f6:	4a2b      	ldr	r2, [pc, #172]	@ (8000aa4 <tud_vendor_control_xfer_cb+0x2a0>)
 80009f8:	6839      	ldr	r1, [r7, #0]
 80009fa:	f006 ff1f 	bl	800783c <tud_control_xfer>
 80009fe:	4603      	mov	r3, r0
 8000a00:	e044      	b.n	8000a8c <tud_vendor_control_xfer_cb+0x288>
        break;
 8000a02:	bf00      	nop
 8000a04:	e000      	b.n	8000a08 <tud_vendor_control_xfer_cb+0x204>
        break;
 8000a06:	bf00      	nop
      if (stage == CONTROL_STAGE_SETUP) {
 8000a08:	79bb      	ldrb	r3, [r7, #6]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d122      	bne.n	8000a54 <tud_vendor_control_xfer_cb+0x250>
        return tud_control_status(rhport, request);
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	6839      	ldr	r1, [r7, #0]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f006 fea0 	bl	8007758 <tud_control_status>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	e037      	b.n	8000a8c <tud_vendor_control_xfer_cb+0x288>
      if (stage == CONTROL_STAGE_SETUP) {
 8000a1c:	79bb      	ldrb	r3, [r7, #6]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d11a      	bne.n	8000a58 <tud_vendor_control_xfer_cb+0x254>
        if (request->wIndex == 7) {
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	889b      	ldrh	r3, [r3, #4]
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	2b07      	cmp	r3, #7
 8000a2a:	d10b      	bne.n	8000a44 <tud_vendor_control_xfer_cb+0x240>
          memcpy(&total_len, desc_ms_os_20 + 8, 2);
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa8 <tud_vendor_control_xfer_cb+0x2a4>)
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	813b      	strh	r3, [r7, #8]
          return tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_ms_os_20, total_len);
 8000a34:	893b      	ldrh	r3, [r7, #8]
 8000a36:	79f8      	ldrb	r0, [r7, #7]
 8000a38:	4a1c      	ldr	r2, [pc, #112]	@ (8000aac <tud_vendor_control_xfer_cb+0x2a8>)
 8000a3a:	6839      	ldr	r1, [r7, #0]
 8000a3c:	f006 fefe 	bl	800783c <tud_control_xfer>
 8000a40:	4603      	mov	r3, r0
 8000a42:	e023      	b.n	8000a8c <tud_vendor_control_xfer_cb+0x288>
        return false;
 8000a44:	2300      	movs	r3, #0
 8000a46:	e021      	b.n	8000a8c <tud_vendor_control_xfer_cb+0x288>
      break;
 8000a48:	bf00      	nop
 8000a4a:	e006      	b.n	8000a5a <tud_vendor_control_xfer_cb+0x256>
        break;
 8000a4c:	bf00      	nop
 8000a4e:	e004      	b.n	8000a5a <tud_vendor_control_xfer_cb+0x256>
        break;
 8000a50:	bf00      	nop
 8000a52:	e002      	b.n	8000a5a <tud_vendor_control_xfer_cb+0x256>
      break;
 8000a54:	bf00      	nop
 8000a56:	e000      	b.n	8000a5a <tud_vendor_control_xfer_cb+0x256>
      break;
 8000a58:	bf00      	nop
    }
  }

  case TUSB_REQ_TYPE_CLASS: {
    if (stage == CONTROL_STAGE_SETUP) {
 8000a5a:	79bb      	ldrb	r3, [r7, #6]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d10e      	bne.n	8000a7e <tud_vendor_control_xfer_cb+0x27a>
      if (request->bRequest == 0x22) {
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	785b      	ldrb	r3, [r3, #1]
 8000a64:	2b22      	cmp	r3, #34	@ 0x22
 8000a66:	d106      	bne.n	8000a76 <tud_vendor_control_xfer_cb+0x272>
        // response with status OK
        return tud_control_status(rhport, request);
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	6839      	ldr	r1, [r7, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f006 fe73 	bl	8007758 <tud_control_status>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e00a      	b.n	8000a8c <tud_vendor_control_xfer_cb+0x288>
      }

      return false;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e008      	b.n	8000a8c <tud_vendor_control_xfer_cb+0x288>

    break;
  }

  default:
    break;
 8000a7a:	bf00      	nop
 8000a7c:	e000      	b.n	8000a80 <tud_vendor_control_xfer_cb+0x27c>
    break;
 8000a7e:	bf00      	nop
  }

  if (stage != CONTROL_STAGE_SETUP) {
 8000a80:	79bb      	ldrb	r3, [r7, #6]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d001      	beq.n	8000a8a <tud_vendor_control_xfer_cb+0x286>
    return true;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e000      	b.n	8000a8c <tud_vendor_control_xfer_cb+0x288>
  }
  return false;
 8000a8a:	2300      	movs	r3, #0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000000 	.word	0x20000000
 8000a98:	200000a8 	.word	0x200000a8
 8000a9c:	0800a12c 	.word	0x0800a12c
 8000aa0:	20000238 	.word	0x20000238
 8000aa4:	200004a8 	.word	0x200004a8
 8000aa8:	0800a2ac 	.word	0x0800a2ac
 8000aac:	0800a2a4 	.word	0x0800a2a4

08000ab0 <get_bitmask_for_modifier>:

static uint8_t key_triggered = 0;

struct key* current_pressed_key = NULL;

uint8_t get_bitmask_for_modifier(uint8_t keycode) {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
  switch (keycode) {
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	3be0      	subs	r3, #224	@ 0xe0
 8000abe:	2b07      	cmp	r3, #7
 8000ac0:	d822      	bhi.n	8000b08 <get_bitmask_for_modifier+0x58>
 8000ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ac8 <get_bitmask_for_modifier+0x18>)
 8000ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac8:	08000ae9 	.word	0x08000ae9
 8000acc:	08000aed 	.word	0x08000aed
 8000ad0:	08000af1 	.word	0x08000af1
 8000ad4:	08000af5 	.word	0x08000af5
 8000ad8:	08000af9 	.word	0x08000af9
 8000adc:	08000afd 	.word	0x08000afd
 8000ae0:	08000b01 	.word	0x08000b01
 8000ae4:	08000b05 	.word	0x08000b05
  case HID_KEY_CONTROL_LEFT:
    return 0b00000001;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e00e      	b.n	8000b0a <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_LEFT:
    return 0b00000010;
 8000aec:	2302      	movs	r3, #2
 8000aee:	e00c      	b.n	8000b0a <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_LEFT:
    return 0b00000100;
 8000af0:	2304      	movs	r3, #4
 8000af2:	e00a      	b.n	8000b0a <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_LEFT:
    return 0b00001000;
 8000af4:	2308      	movs	r3, #8
 8000af6:	e008      	b.n	8000b0a <get_bitmask_for_modifier+0x5a>
  case HID_KEY_CONTROL_RIGHT:
    return 0b00010000;
 8000af8:	2310      	movs	r3, #16
 8000afa:	e006      	b.n	8000b0a <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_RIGHT:
    return 0b00100000;
 8000afc:	2320      	movs	r3, #32
 8000afe:	e004      	b.n	8000b0a <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_RIGHT:
    return 0b01000000;
 8000b00:	2340      	movs	r3, #64	@ 0x40
 8000b02:	e002      	b.n	8000b0a <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_RIGHT:
    return 0b10000000;
 8000b04:	2380      	movs	r3, #128	@ 0x80
 8000b06:	e000      	b.n	8000b0a <get_bitmask_for_modifier+0x5a>
  default:
    return 0b00000000;
 8000b08:	2300      	movs	r3, #0
  }
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <get_usage_consumer_control>:

uint16_t get_usage_consumer_control(uint16_t value) {
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	80fb      	strh	r3, [r7, #6]
  if (value > 0xFF) {
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	2bff      	cmp	r3, #255	@ 0xff
 8000b26:	d904      	bls.n	8000b32 <get_usage_consumer_control+0x1a>
    return value & 0b0111111111111111;
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	e000      	b.n	8000b34 <get_usage_consumer_control+0x1c>
  } else {
    return 0;
 8000b32:	2300      	movs	r3, #0
  }
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <init_key>:

void init_key(uint8_t adc_channel, uint8_t amux_channel, uint8_t row, uint8_t column) {
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4604      	mov	r4, r0
 8000b48:	4608      	mov	r0, r1
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4623      	mov	r3, r4
 8000b50:	71fb      	strb	r3, [r7, #7]
 8000b52:	4603      	mov	r3, r0
 8000b54:	71bb      	strb	r3, [r7, #6]
 8000b56:	460b      	mov	r3, r1
 8000b58:	717b      	strb	r3, [r7, #5]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	713b      	strb	r3, [r7, #4]
  struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8000b5e:	79f9      	ldrb	r1, [r7, #7]
 8000b60:	79ba      	ldrb	r2, [r7, #6]
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	1a9b      	subs	r3, r3, r2
 8000b6c:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8000b70:	fb01 f202 	mul.w	r2, r1, r2
 8000b74:	4413      	add	r3, r2
 8000b76:	4a61      	ldr	r2, [pc, #388]	@ (8000cfc <init_key+0x1bc>)
 8000b78:	4413      	add	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]

  key->is_enabled = 1;
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
  key->is_idle = 0;
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	2200      	movs	r2, #0
 8000b86:	711a      	strb	r2, [r3, #4]
  key->row = row;
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	797a      	ldrb	r2, [r7, #5]
 8000b8c:	705a      	strb	r2, [r3, #1]
  key->column = column;
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	793a      	ldrb	r2, [r7, #4]
 8000b92:	709a      	strb	r2, [r3, #2]

  key->calibration.cycles_count = 0;
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	2200      	movs	r2, #0
 8000b98:	72da      	strb	r2, [r3, #11]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	731a      	strb	r2, [r3, #12]
  key->calibration.idle_value = IDLE_VALUE_APPROX;
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f042 0208 	orr.w	r2, r2, #8
 8000ba6:	735a      	strb	r2, [r3, #13]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f042 0207 	orr.w	r2, r2, #7
 8000bae:	739a      	strb	r2, [r3, #14]
  key->calibration.max_distance = MAX_DISTANCE_APPROX;
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f062 020b 	orn	r2, r2, #11
 8000bb8:	73da      	strb	r2, [r3, #15]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f042 0201 	orr.w	r2, r2, #1
 8000bc0:	741a      	strb	r2, [r3, #16]

  key->actuation.status = STATUS_RESET;
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	779a      	strb	r2, [r3, #30]
  key->actuation.trigger_offset = keyboard_user_config.trigger_offset;
 8000bc8:	4b4d      	ldr	r3, [pc, #308]	@ (8000d00 <init_key+0x1c0>)
 8000bca:	785a      	ldrb	r2, [r3, #1]
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	f883 2020 	strb.w	r2, [r3, #32]
  key->actuation.reset_offset = keyboard_user_config.trigger_offset - keyboard_user_config.reset_threshold;
 8000bd2:	4b4b      	ldr	r3, [pc, #300]	@ (8000d00 <init_key+0x1c0>)
 8000bd4:	785a      	ldrb	r2, [r3, #1]
 8000bd6:	4b4a      	ldr	r3, [pc, #296]	@ (8000d00 <init_key+0x1c0>)
 8000bd8:	789b      	ldrb	r3, [r3, #2]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	77da      	strb	r2, [r3, #31]
  key->actuation.rapid_trigger_offset = keyboard_user_config.rapid_trigger_offset;
 8000be2:	4b47      	ldr	r3, [pc, #284]	@ (8000d00 <init_key+0x1c0>)
 8000be4:	78da      	ldrb	r2, [r3, #3]
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  key->actuation.is_continuous_rapid_trigger_enabled = 0;
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	75fb      	strb	r3, [r7, #23]
 8000bf8:	e078      	b.n	8000cec <init_key+0x1ac>
    if (keyboard_user_config.keymaps[i][row][column] != ____) {
 8000bfa:	7df9      	ldrb	r1, [r7, #23]
 8000bfc:	797a      	ldrb	r2, [r7, #5]
 8000bfe:	793b      	ldrb	r3, [r7, #4]
 8000c00:	483f      	ldr	r0, [pc, #252]	@ (8000d00 <init_key+0x1c0>)
 8000c02:	0089      	lsls	r1, r1, #2
 8000c04:	440a      	add	r2, r1
 8000c06:	0092      	lsls	r2, r2, #2
 8000c08:	4413      	add	r3, r2
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d068      	beq.n	8000ce6 <init_key+0x1a6>
      uint16_t usage_consumer_control = get_usage_consumer_control(keyboard_user_config.keymaps[i][row][column]);
 8000c14:	7df9      	ldrb	r1, [r7, #23]
 8000c16:	797a      	ldrb	r2, [r7, #5]
 8000c18:	793b      	ldrb	r3, [r7, #4]
 8000c1a:	4839      	ldr	r0, [pc, #228]	@ (8000d00 <init_key+0x1c0>)
 8000c1c:	0089      	lsls	r1, r1, #2
 8000c1e:	440a      	add	r2, r1
 8000c20:	0092      	lsls	r2, r2, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	3304      	adds	r3, #4
 8000c26:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff74 	bl	8000b18 <get_usage_consumer_control>
 8000c30:	4603      	mov	r3, r0
 8000c32:	81fb      	strh	r3, [r7, #14]
      if (usage_consumer_control) {
 8000c34:	89fb      	ldrh	r3, [r7, #14]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d011      	beq.n	8000c5e <init_key+0x11e>
        key->layers[i].type = KEY_TYPE_CONSUMER_CONTROL;
 8000c3a:	7dfa      	ldrb	r2, [r7, #23]
 8000c3c:	6939      	ldr	r1, [r7, #16]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4413      	add	r3, r2
 8000c44:	440b      	add	r3, r1
 8000c46:	3305      	adds	r3, #5
 8000c48:	2203      	movs	r2, #3
 8000c4a:	701a      	strb	r2, [r3, #0]
        key->layers[i].value = usage_consumer_control;
 8000c4c:	7dfa      	ldrb	r2, [r7, #23]
 8000c4e:	6939      	ldr	r1, [r7, #16]
 8000c50:	4613      	mov	r3, r2
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	4413      	add	r3, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	89fa      	ldrh	r2, [r7, #14]
 8000c5a:	80da      	strh	r2, [r3, #6]
 8000c5c:	e043      	b.n	8000ce6 <init_key+0x1a6>
      } else {
        uint8_t bitmask = get_bitmask_for_modifier(keyboard_user_config.keymaps[i][row][column]);
 8000c5e:	7df9      	ldrb	r1, [r7, #23]
 8000c60:	797a      	ldrb	r2, [r7, #5]
 8000c62:	793b      	ldrb	r3, [r7, #4]
 8000c64:	4826      	ldr	r0, [pc, #152]	@ (8000d00 <init_key+0x1c0>)
 8000c66:	0089      	lsls	r1, r1, #2
 8000c68:	440a      	add	r2, r1
 8000c6a:	0092      	lsls	r2, r2, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3304      	adds	r3, #4
 8000c70:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff1a 	bl	8000ab0 <get_bitmask_for_modifier>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	737b      	strb	r3, [r7, #13]
        if (bitmask) {
 8000c80:	7b7b      	ldrb	r3, [r7, #13]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d013      	beq.n	8000cae <init_key+0x16e>
          key->layers[i].type = KEY_TYPE_MODIFIER;
 8000c86:	7dfa      	ldrb	r2, [r7, #23]
 8000c88:	6939      	ldr	r1, [r7, #16]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	4413      	add	r3, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	3305      	adds	r3, #5
 8000c94:	2202      	movs	r2, #2
 8000c96:	701a      	strb	r2, [r3, #0]
          key->layers[i].value = bitmask;
 8000c98:	7dfa      	ldrb	r2, [r7, #23]
 8000c9a:	7b7b      	ldrb	r3, [r7, #13]
 8000c9c:	b298      	uxth	r0, r3
 8000c9e:	6939      	ldr	r1, [r7, #16]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	4413      	add	r3, r2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	4602      	mov	r2, r0
 8000caa:	80da      	strh	r2, [r3, #6]
 8000cac:	e01b      	b.n	8000ce6 <init_key+0x1a6>
        } else {
          key->layers[i].type = KEY_TYPE_NORMAL;
 8000cae:	7dfa      	ldrb	r2, [r7, #23]
 8000cb0:	6939      	ldr	r1, [r7, #16]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	4413      	add	r3, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	3305      	adds	r3, #5
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
          key->layers[i].value = keyboard_user_config.keymaps[i][row][column];
 8000cc0:	7df8      	ldrb	r0, [r7, #23]
 8000cc2:	7979      	ldrb	r1, [r7, #5]
 8000cc4:	793b      	ldrb	r3, [r7, #4]
 8000cc6:	7dfa      	ldrb	r2, [r7, #23]
 8000cc8:	4c0d      	ldr	r4, [pc, #52]	@ (8000d00 <init_key+0x1c0>)
 8000cca:	0080      	lsls	r0, r0, #2
 8000ccc:	4401      	add	r1, r0
 8000cce:	0089      	lsls	r1, r1, #2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
 8000cd8:	6939      	ldr	r1, [r7, #16]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	4413      	add	r3, r2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	80da      	strh	r2, [r3, #6]
  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8000ce6:	7dfb      	ldrb	r3, [r7, #23]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	75fb      	strb	r3, [r7, #23]
 8000cec:	7dfb      	ldrb	r3, [r7, #23]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d983      	bls.n	8000bfa <init_key+0xba>
        }
      }
    }
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	bf00      	nop
 8000cf6:	371c      	adds	r7, #28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd90      	pop	{r4, r7, pc}
 8000cfc:	20000238 	.word	0x20000238
 8000d00:	20000000 	.word	0x20000000

08000d04 <update_key_state>:

uint8_t update_key_state(struct key *key) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  struct state state;

  // Get a reading
  state.value = keyboard_user_config.reverse_magnet_pole ? 4095 - keyboard_read_adc() : keyboard_read_adc();
 8000d0c:	4ba5      	ldr	r3, [pc, #660]	@ (8000fa4 <update_key_state+0x2a0>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d007      	beq.n	8000d24 <update_key_state+0x20>
 8000d14:	f000 fd6a 	bl	80017ec <keyboard_read_adc>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8000d1e:	330f      	adds	r3, #15
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	e002      	b.n	8000d2a <update_key_state+0x26>
 8000d24:	f000 fd62 	bl	80017ec <keyboard_read_adc>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	813b      	strh	r3, [r7, #8]

  if (key->calibration.cycles_count < CALIBRATION_CYCLES) {
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	2b13      	cmp	r3, #19
 8000d36:	d82f      	bhi.n	8000d98 <update_key_state+0x94>
    // Calibrate idle value
    float delta = 0.6;
 8000d38:	4b9b      	ldr	r3, [pc, #620]	@ (8000fa8 <update_key_state+0x2a4>)
 8000d3a:	617b      	str	r3, [r7, #20]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8000d3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000d40:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d48:	893b      	ldrh	r3, [r7, #8]
 8000d4a:	ee07 3a90 	vmov	s15, r3
 8000d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	ee07 3a90 	vmov	s15, r3
 8000d62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d76:	ee17 3a90 	vmov	r3, s15
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f8a3 200d 	strh.w	r2, [r3, #13]
    key->calibration.cycles_count++;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f8a3 200b 	strh.w	r2, [r3, #11]

    return 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	e101      	b.n	8000f9c <update_key_state+0x298>
  }

  // Calibrate idle value
  if (state.value > key->calibration.idle_value) {
 8000d98:	893a      	ldrh	r2, [r7, #8]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d929      	bls.n	8000dfa <update_key_state+0xf6>
    // opti possible sur float
    float delta = 0.8;
 8000da6:	4b81      	ldr	r3, [pc, #516]	@ (8000fac <update_key_state+0x2a8>)
 8000da8:	61fb      	str	r3, [r7, #28]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8000daa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000dae:	edd7 7a07 	vldr	s15, [r7, #28]
 8000db2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000db6:	893b      	ldrh	r3, [r7, #8]
 8000db8:	ee07 3a90 	vmov	s15, r3
 8000dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	ee07 3a90 	vmov	s15, r3
 8000dd0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dd4:	edd7 7a07 	vldr	s15, [r7, #28]
 8000dd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000de4:	ee17 3a90 	vmov	r3, s15
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f8a3 200d 	strh.w	r2, [r3, #13]
    state.value = key->calibration.idle_value;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	813b      	strh	r3, [r7, #8]
  }

  // Do nothing if key is idle
  if (key->state.distance == 0 && state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f8b3 3013 	ldrh.w	r3, [r3, #19]
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d117      	bne.n	8000e36 <update_key_state+0x132>
 8000e06:	893b      	ldrh	r3, [r7, #8]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	3b0a      	subs	r3, #10
 8000e14:	429a      	cmp	r2, r3
 8000e16:	db0e      	blt.n	8000e36 <update_key_state+0x132>
    if (key->idle_counter >= IDLE_CYCLES_UNTIL_SLEEP) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	78db      	ldrb	r3, [r3, #3]
 8000e1c:	2b0e      	cmp	r3, #14
 8000e1e:	d904      	bls.n	8000e2a <update_key_state+0x126>
      key->is_idle = 1;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2201      	movs	r2, #1
 8000e24:	711a      	strb	r2, [r3, #4]
      return 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e0b8      	b.n	8000f9c <update_key_state+0x298>
    }
    key->idle_counter++;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	78db      	ldrb	r3, [r3, #3]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	70da      	strb	r2, [r3, #3]
  }

  // Get distance from top
  if (state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8000e36:	893b      	ldrh	r3, [r7, #8]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	3b0a      	subs	r3, #10
 8000e44:	429a      	cmp	r2, r3
 8000e46:	db05      	blt.n	8000e54 <update_key_state+0x150>
    state.distance = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	817b      	strh	r3, [r7, #10]
    key->actuation.direction_changed_point = 0;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	775a      	strb	r2, [r3, #29]
 8000e52:	e00f      	b.n	8000e74 <update_key_state+0x170>
  } else {
    state.distance = key->calibration.idle_value - IDLE_VALUE_OFFSET - state.value;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	893b      	ldrh	r3, [r7, #8]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	3b0a      	subs	r3, #10
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	817b      	strh	r3, [r7, #10]
    key->is_idle = 0;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	711a      	strb	r2, [r3, #4]
    key->idle_counter = 0;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	70da      	strb	r2, [r3, #3]
  }

  // Calibrate max distance value
  if (state.distance > key->calibration.max_distance) {
 8000e74:	897a      	ldrh	r2, [r7, #10]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d903      	bls.n	8000e8a <update_key_state+0x186>
    key->calibration.max_distance = state.distance;
 8000e82:	897a      	ldrh	r2, [r7, #10]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f8a3 200f 	strh.w	r2, [r3, #15]
  }

  // Limit max distance
  if (state.distance >= key->calibration.max_distance - MAX_DISTANCE_OFFSET) {
 8000e8a:	897b      	ldrh	r3, [r7, #10]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	3b3c      	subs	r3, #60	@ 0x3c
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	db04      	blt.n	8000ea6 <update_key_state+0x1a2>
    state.distance = key->calibration.max_distance;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	817b      	strh	r3, [r7, #10]
  }

  // Map distance in percentages
  state.distance_8bits = (state.distance * 0xff) / key->calibration.max_distance;
 8000ea6:	897b      	ldrh	r3, [r7, #10]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4613      	mov	r3, r2
 8000eac:	021b      	lsls	r3, r3, #8
 8000eae:	1a9b      	subs	r3, r3, r2
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	f8b2 200f 	ldrh.w	r2, [r2, #15]
 8000eb6:	b292      	uxth	r2, r2
 8000eb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	733b      	strb	r3, [r7, #12]

  float delta = 0.8;
 8000ec0:	4b3a      	ldr	r3, [pc, #232]	@ (8000fac <update_key_state+0x2a8>)
 8000ec2:	61bb      	str	r3, [r7, #24]
  state.filtered_distance = (1 - delta) * state.distance_8bits + delta * key->state.filtered_distance;
 8000ec4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ec8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ecc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ed0:	7b3b      	ldrb	r3, [r7, #12]
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000ee4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ee8:	ee06 3a90 	vmov	s13, r3
 8000eec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef4:	ee17 3a90 	vmov	r3, s15
 8000ef8:	f8c7 300d 	str.w	r3, [r7, #13]
  state.filtered_distance_8bits = state.filtered_distance;
 8000efc:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8000f00:	ee07 3a90 	vmov	s15, r3
 8000f04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f08:	edc7 7a00 	vstr	s15, [r7]
 8000f0c:	783b      	ldrb	r3, [r7, #0]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	74bb      	strb	r3, [r7, #18]

  // Update velocity
  state.velocity = state.filtered_distance_8bits - key->state.filtered_distance_8bits;
 8000f12:	7cba      	ldrb	r2, [r7, #18]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	7edb      	ldrb	r3, [r3, #27]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	747b      	strb	r3, [r7, #17]

  // Update direction
  if (key->state.velocity > 0 && state.velocity > 0 && key->actuation.direction != GOING_DOWN) {
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	dd13      	ble.n	8000f52 <update_key_state+0x24e>
 8000f2a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	dd0f      	ble.n	8000f52 <update_key_state+0x24e>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	7f1b      	ldrb	r3, [r3, #28]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d00b      	beq.n	8000f52 <update_key_state+0x24e>
    key->actuation.direction = GOING_DOWN;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	771a      	strb	r2, [r3, #28]
    if (key->actuation.direction_changed_point != 0) {
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	7f5b      	ldrb	r3, [r3, #29]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d01c      	beq.n	8000f82 <update_key_state+0x27e>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	7eda      	ldrb	r2, [r3, #27]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	775a      	strb	r2, [r3, #29]
    if (key->actuation.direction_changed_point != 0) {
 8000f50:	e017      	b.n	8000f82 <update_key_state+0x27e>
    }
  } else if (key->state.velocity < 0 && state.velocity < 0 && key->actuation.direction != GOING_UP) {
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	da12      	bge.n	8000f82 <update_key_state+0x27e>
 8000f5c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	da0e      	bge.n	8000f82 <update_key_state+0x27e>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	7f1b      	ldrb	r3, [r3, #28]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00a      	beq.n	8000f82 <update_key_state+0x27e>
    key->actuation.direction = GOING_UP;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	771a      	strb	r2, [r3, #28]
    if (key->actuation.direction_changed_point != 255) {
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	7f5b      	ldrb	r3, [r3, #29]
 8000f76:	2bff      	cmp	r3, #255	@ 0xff
 8000f78:	d003      	beq.n	8000f82 <update_key_state+0x27e>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	7eda      	ldrb	r2, [r3, #27]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	775a      	strb	r2, [r3, #29]
    }
  }

  key->state = state;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f103 0211 	add.w	r2, r3, #17
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	cb03      	ldmia	r3!, {r0, r1}
 8000f8e:	6010      	str	r0, [r2, #0]
 8000f90:	6051      	str	r1, [r2, #4]
 8000f92:	8819      	ldrh	r1, [r3, #0]
 8000f94:	789b      	ldrb	r3, [r3, #2]
 8000f96:	8111      	strh	r1, [r2, #8]
 8000f98:	7293      	strb	r3, [r2, #10]
  return 1;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3720      	adds	r7, #32
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	3f19999a 	.word	0x3f19999a
 8000fac:	3f4ccccd 	.word	0x3f4ccccd

08000fb0 <update_key_actuation>:

void update_key_actuation(struct key *key) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
   *
   */

  // if rapid trigger enable, move trigger and reset offsets according to the distance taht began the trigger

  uint32_t now = keyboard_get_time();
 8000fb8:	f000 fc2e 	bl	8001818 <keyboard_get_time>
 8000fbc:	6178      	str	r0, [r7, #20]
  uint8_t is_after_trigger_offset = key->state.distance_8bits > key->actuation.trigger_offset;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7d5a      	ldrb	r2, [r3, #21]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	bf8c      	ite	hi
 8000fcc:	2301      	movhi	r3, #1
 8000fce:	2300      	movls	r3, #0
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	74fb      	strb	r3, [r7, #19]
  uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7d5a      	ldrb	r2, [r3, #21]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7fdb      	ldrb	r3, [r3, #31]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	bf34      	ite	cc
 8000fe0:	2301      	movcc	r3, #1
 8000fe2:	2300      	movcs	r3, #0
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	74bb      	strb	r3, [r7, #18]
  uint8_t has_rapid_trigger = key->actuation.rapid_trigger_offset != 0;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	bf14      	ite	ne
 8000ff2:	2301      	movne	r3, #1
 8000ff4:	2300      	moveq	r3, #0
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	747b      	strb	r3, [r7, #17]
  uint8_t is_after_rapid_trigger_offset = key->state.distance_8bits > key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset + keyboard_user_config.reset_threshold;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7d5b      	ldrb	r3, [r3, #21]
 8000ffe:	4619      	mov	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	7f5b      	ldrb	r3, [r3, #29]
 8001004:	461a      	mov	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	4a54      	ldr	r2, [pc, #336]	@ (8001160 <update_key_actuation+0x1b0>)
 8001010:	7892      	ldrb	r2, [r2, #2]
 8001012:	4413      	add	r3, r2
 8001014:	4299      	cmp	r1, r3
 8001016:	bfcc      	ite	gt
 8001018:	2301      	movgt	r3, #1
 800101a:	2300      	movle	r3, #0
 800101c:	b2db      	uxtb	r3, r3
 800101e:	743b      	strb	r3, [r7, #16]
  uint8_t is_before_rapid_reset_offset = key->state.distance_8bits < key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7d5b      	ldrb	r3, [r3, #21]
 8001024:	461a      	mov	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7f5b      	ldrb	r3, [r3, #29]
 800102a:	4619      	mov	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001032:	1acb      	subs	r3, r1, r3
 8001034:	429a      	cmp	r2, r3
 8001036:	bfb4      	ite	lt
 8001038:	2301      	movlt	r3, #1
 800103a:	2300      	movge	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	73fb      	strb	r3, [r7, #15]

  switch (key->actuation.status) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	7f9b      	ldrb	r3, [r3, #30]
 8001044:	3b01      	subs	r3, #1
 8001046:	2b03      	cmp	r3, #3
 8001048:	d87f      	bhi.n	800114a <update_key_actuation+0x19a>
 800104a:	a201      	add	r2, pc, #4	@ (adr r2, 8001050 <update_key_actuation+0xa0>)
 800104c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001050:	08001101 	.word	0x08001101
 8001054:	08001111 	.word	0x08001111
 8001058:	08001061 	.word	0x08001061
 800105c:	08001099 	.word	0x08001099

  case STATUS_RESET:
    // if reset, can be triggered or tap
    if (is_after_trigger_offset) {
 8001060:	7cfb      	ldrb	r3, [r7, #19]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d073      	beq.n	800114e <update_key_actuation+0x19e>
      if (key->layers[_TAP_LAYER].value) {
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800106c:	b29b      	uxth	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <update_key_actuation+0xca>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	779a      	strb	r2, [r3, #30]
 8001078:	e009      	b.n	800108e <update_key_actuation+0xde>
        // key_triggered = 1;
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2202      	movs	r2, #2
 800107e:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 8001080:	4b38      	ldr	r3, [pc, #224]	@ (8001164 <update_key_actuation+0x1b4>)
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, _BASE_LAYER);
 8001086:	2100      	movs	r1, #0
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff faad 	bl	80005e8 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	f8c3 2023 	str.w	r2, [r3, #35]	@ 0x23
    }
    break;
 8001096:	e05a      	b.n	800114e <update_key_actuation+0x19e>

  case STATUS_RAPID_TRIGGER_RESET:
    if (!has_rapid_trigger) {
 8001098:	7c7b      	ldrb	r3, [r7, #17]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d103      	bne.n	80010a6 <update_key_actuation+0xf6>
      key->actuation.status = STATUS_RESET;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2203      	movs	r2, #3
 80010a2:	779a      	strb	r2, [r3, #30]
      break;
 80010a4:	e058      	b.n	8001158 <update_key_actuation+0x1a8>
    }
    // if reset, can be triggered or tap
    if (is_after_trigger_offset && key->actuation.direction == GOING_DOWN && is_after_rapid_trigger_offset) {
 80010a6:	7cfb      	ldrb	r3, [r7, #19]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d022      	beq.n	80010f2 <update_key_actuation+0x142>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7f1b      	ldrb	r3, [r3, #28]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d11e      	bne.n	80010f2 <update_key_actuation+0x142>
 80010b4:	7c3b      	ldrb	r3, [r7, #16]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d01b      	beq.n	80010f2 <update_key_actuation+0x142>
      if (key->layers[_TAP_LAYER].value) {
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d006      	beq.n	80010d4 <update_key_actuation+0x124>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 80010cc:	4b25      	ldr	r3, [pc, #148]	@ (8001164 <update_key_actuation+0x1b4>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]
 80010d2:	e009      	b.n	80010e8 <update_key_actuation+0x138>
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2202      	movs	r2, #2
 80010d8:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 80010da:	4b22      	ldr	r3, [pc, #136]	@ (8001164 <update_key_actuation+0x1b4>)
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, _BASE_LAYER);
 80010e0:	2100      	movs	r1, #0
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff fa80 	bl	80005e8 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	f8c3 2023 	str.w	r2, [r3, #35]	@ 0x23
    } else if (is_before_reset_offset) {
      key->actuation.status = STATUS_RESET;
    }
    break;
 80010f0:	e02f      	b.n	8001152 <update_key_actuation+0x1a2>
    } else if (is_before_reset_offset) {
 80010f2:	7cbb      	ldrb	r3, [r7, #18]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d02c      	beq.n	8001152 <update_key_actuation+0x1a2>
      key->actuation.status = STATUS_RESET;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2203      	movs	r2, #3
 80010fc:	779a      	strb	r2, [r3, #30]
    break;
 80010fe:	e028      	b.n	8001152 <update_key_actuation+0x1a2>

  case STATUS_TAP:
    // if tap, can be reset
    key->actuation.status = STATUS_RESET;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2203      	movs	r2, #3
 8001104:	779a      	strb	r2, [r3, #30]
    hid_release_key(key, _TAP_LAYER);
 8001106:	2101      	movs	r1, #1
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff fad7 	bl	80006bc <hid_release_key>
    break;
 800110e:	e023      	b.n	8001158 <update_key_actuation+0x1a8>

  case STATUS_TRIGGERED:
    // if triggered, can be reset
    if (is_before_reset_offset) {
 8001110:	7cbb      	ldrb	r3, [r7, #18]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d007      	beq.n	8001126 <update_key_actuation+0x176>
      key->actuation.status = STATUS_RESET;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2203      	movs	r2, #3
 800111a:	779a      	strb	r2, [r3, #30]
      hid_release_key(key, _BASE_LAYER);
 800111c:	2100      	movs	r1, #0
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff facc 	bl	80006bc <hid_release_key>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
      hid_release_key(key, _BASE_LAYER);
    }
    break;
 8001124:	e017      	b.n	8001156 <update_key_actuation+0x1a6>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
 8001126:	7c7b      	ldrb	r3, [r7, #17]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d014      	beq.n	8001156 <update_key_actuation+0x1a6>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7f1b      	ldrb	r3, [r3, #28]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d110      	bne.n	8001156 <update_key_actuation+0x1a6>
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00d      	beq.n	8001156 <update_key_actuation+0x1a6>
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2204      	movs	r2, #4
 800113e:	779a      	strb	r2, [r3, #30]
      hid_release_key(key, _BASE_LAYER);
 8001140:	2100      	movs	r1, #0
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff faba 	bl	80006bc <hid_release_key>
    break;
 8001148:	e005      	b.n	8001156 <update_key_actuation+0x1a6>

  default:
    break;
 800114a:	bf00      	nop
 800114c:	e004      	b.n	8001158 <update_key_actuation+0x1a8>
    break;
 800114e:	bf00      	nop
 8001150:	e002      	b.n	8001158 <update_key_actuation+0x1a8>
    break;
 8001152:	bf00      	nop
 8001154:	e000      	b.n	8001158 <update_key_actuation+0x1a8>
    break;
 8001156:	bf00      	nop
  }
}
 8001158:	bf00      	nop
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000000 	.word	0x20000000
 8001164:	200004ac 	.word	0x200004ac

08001168 <update_key>:

void update_key(struct key *key) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if (!update_key_state(key)) {
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff fdc7 	bl	8000d04 <update_key_state>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <update_key+0x1c>
    return;
  }

  update_key_actuation(key);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff17 	bl	8000fb0 <update_key_actuation>
 8001182:	e000      	b.n	8001186 <update_key+0x1e>
    return;
 8001184:	bf00      	nop
}
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <keyboard_init_keys>:

void keyboard_init_keys() {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8001192:	2300      	movs	r3, #0
 8001194:	71fb      	strb	r3, [r7, #7]
 8001196:	e027      	b.n	80011e8 <keyboard_init_keys+0x5c>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8001198:	2300      	movs	r3, #0
 800119a:	71bb      	strb	r3, [r7, #6]
 800119c:	e01e      	b.n	80011dc <keyboard_init_keys+0x50>
      if (channels_by_row_col[row][col][0] != XXXX) {
 800119e:	79fa      	ldrb	r2, [r7, #7]
 80011a0:	79bb      	ldrb	r3, [r7, #6]
 80011a2:	4915      	ldr	r1, [pc, #84]	@ (80011f8 <keyboard_init_keys+0x6c>)
 80011a4:	0092      	lsls	r2, r2, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80011ac:	2bff      	cmp	r3, #255	@ 0xff
 80011ae:	d012      	beq.n	80011d6 <keyboard_init_keys+0x4a>
        init_key(channels_by_row_col[row][col][0], channels_by_row_col[row][col][1], row, col);
 80011b0:	79fa      	ldrb	r2, [r7, #7]
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	4910      	ldr	r1, [pc, #64]	@ (80011f8 <keyboard_init_keys+0x6c>)
 80011b6:	0092      	lsls	r2, r2, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 80011be:	79fa      	ldrb	r2, [r7, #7]
 80011c0:	79bb      	ldrb	r3, [r7, #6]
 80011c2:	490d      	ldr	r1, [pc, #52]	@ (80011f8 <keyboard_init_keys+0x6c>)
 80011c4:	0092      	lsls	r2, r2, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	440b      	add	r3, r1
 80011cc:	7859      	ldrb	r1, [r3, #1]
 80011ce:	79bb      	ldrb	r3, [r7, #6]
 80011d0:	79fa      	ldrb	r2, [r7, #7]
 80011d2:	f7ff fcb5 	bl	8000b40 <init_key>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 80011d6:	79bb      	ldrb	r3, [r7, #6]
 80011d8:	3301      	adds	r3, #1
 80011da:	71bb      	strb	r3, [r7, #6]
 80011dc:	79bb      	ldrb	r3, [r7, #6]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d9dd      	bls.n	800119e <keyboard_init_keys+0x12>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	3301      	adds	r3, #1
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d9d4      	bls.n	8001198 <keyboard_init_keys+0xc>
      }
    }
  }
}
 80011ee:	bf00      	nop
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	0800a174 	.word	0x0800a174

080011fc <keyboard_task>:

void keyboard_task() {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 8001202:	f000 fb09 	bl	8001818 <keyboard_get_time>
 8001206:	60b8      	str	r0, [r7, #8]
  key_triggered = 0;
 8001208:	4b64      	ldr	r3, [pc, #400]	@ (800139c <keyboard_task+0x1a0>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800120e:	2300      	movs	r3, #0
 8001210:	73fb      	strb	r3, [r7, #15]
 8001212:	e039      	b.n	8001288 <keyboard_task+0x8c>
    keyboard_select_amux(amux_channel);
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	4618      	mov	r0, r3
 8001218:	f000 faa4 	bl	8001764 <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800121c:	2300      	movs	r3, #0
 800121e:	73bb      	strb	r3, [r7, #14]
 8001220:	e02c      	b.n	800127c <keyboard_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 8001222:	7bb9      	ldrb	r1, [r7, #14]
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	485e      	ldr	r0, [pc, #376]	@ (80013a0 <keyboard_task+0x1a4>)
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	1a9b      	subs	r3, r3, r2
 8001232:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001236:	fb01 f202 	mul.w	r2, r1, r2
 800123a:	4413      	add	r3, r2
 800123c:	4403      	add	r3, r0
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d017      	beq.n	8001274 <keyboard_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 8001244:	7bbb      	ldrb	r3, [r7, #14]
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fab4 	bl	80017b4 <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 800124c:	7bb9      	ldrb	r1, [r7, #14]
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	1a9b      	subs	r3, r3, r2
 800125a:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800125e:	fb01 f202 	mul.w	r2, r1, r2
 8001262:	4413      	add	r3, r2
 8001264:	4a4e      	ldr	r2, [pc, #312]	@ (80013a0 <keyboard_task+0x1a4>)
 8001266:	4413      	add	r3, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff7d 	bl	8001168 <update_key>

      keyboard_close_adc();
 800126e:	f000 fac9 	bl	8001804 <keyboard_close_adc>
 8001272:	e000      	b.n	8001276 <keyboard_task+0x7a>
        continue;
 8001274:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8001276:	7bbb      	ldrb	r3, [r7, #14]
 8001278:	3301      	adds	r3, #1
 800127a:	73bb      	strb	r3, [r7, #14]
 800127c:	7bbb      	ldrb	r3, [r7, #14]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0cf      	beq.n	8001222 <keyboard_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	3301      	adds	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	2b0f      	cmp	r3, #15
 800128c:	d9c2      	bls.n	8001214 <keyboard_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800128e:	2300      	movs	r3, #0
 8001290:	737b      	strb	r3, [r7, #13]
 8001292:	e074      	b.n	800137e <keyboard_task+0x182>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8001294:	2300      	movs	r3, #0
 8001296:	733b      	strb	r3, [r7, #12]
 8001298:	e06b      	b.n	8001372 <keyboard_task+0x176>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 800129a:	7b39      	ldrb	r1, [r7, #12]
 800129c:	7b7a      	ldrb	r2, [r7, #13]
 800129e:	4840      	ldr	r0, [pc, #256]	@ (80013a0 <keyboard_task+0x1a4>)
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	1a9b      	subs	r3, r3, r2
 80012aa:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80012ae:	fb01 f202 	mul.w	r2, r1, r2
 80012b2:	4413      	add	r3, r2
 80012b4:	4403      	add	r3, r0
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d056      	beq.n	800136a <keyboard_task+0x16e>
 80012bc:	7b39      	ldrb	r1, [r7, #12]
 80012be:	7b7a      	ldrb	r2, [r7, #13]
 80012c0:	4837      	ldr	r0, [pc, #220]	@ (80013a0 <keyboard_task+0x1a4>)
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	1a9b      	subs	r3, r3, r2
 80012cc:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80012d0:	fb01 f202 	mul.w	r2, r1, r2
 80012d4:	4413      	add	r3, r2
 80012d6:	4403      	add	r3, r0
 80012d8:	331e      	adds	r3, #30
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d144      	bne.n	800136a <keyboard_task+0x16e>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 80012e0:	7b39      	ldrb	r1, [r7, #12]
 80012e2:	7b7a      	ldrb	r2, [r7, #13]
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	1a9b      	subs	r3, r3, r2
 80012ee:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80012f2:	fb01 f202 	mul.w	r2, r1, r2
 80012f6:	4413      	add	r3, r2
 80012f8:	4a29      	ldr	r2, [pc, #164]	@ (80013a0 <keyboard_task+0x1a4>)
 80012fa:	4413      	add	r3, r2
 80012fc:	607b      	str	r3, [r7, #4]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7d5a      	ldrb	r2, [r3, #21]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	7fdb      	ldrb	r3, [r3, #31]
 8001306:	429a      	cmp	r2, r3
 8001308:	bf34      	ite	cc
 800130a:	2301      	movcc	r3, #1
 800130c:	2300      	movcs	r3, #0
 800130e:	b2db      	uxtb	r3, r3
 8001310:	70fb      	strb	r3, [r7, #3]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 8001312:	f000 fa81 	bl	8001818 <keyboard_get_time>
 8001316:	4602      	mov	r2, r0
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f8d3 3023 	ldr.w	r3, [r3, #35]	@ 0x23
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	4a20      	ldr	r2, [pc, #128]	@ (80013a4 <keyboard_task+0x1a8>)
 8001322:	88d2      	ldrh	r2, [r2, #6]
 8001324:	4293      	cmp	r3, r2
 8001326:	bf94      	ite	ls
 8001328:	2301      	movls	r3, #1
 800132a:	2300      	movhi	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	70bb      	strb	r3, [r7, #2]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00a      	beq.n	800134c <keyboard_task+0x150>
 8001336:	78bb      	ldrb	r3, [r7, #2]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d007      	beq.n	800134c <keyboard_task+0x150>
        key->actuation.status = STATUS_TAP;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	779a      	strb	r2, [r3, #30]
        hid_press_key(key, _TAP_LAYER);
 8001342:	2101      	movs	r1, #1
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff f94f 	bl	80005e8 <hid_press_key>
 800134a:	e00f      	b.n	800136c <keyboard_task+0x170>
      } else if (!is_before_timeout || key_triggered) {
 800134c:	78bb      	ldrb	r3, [r7, #2]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <keyboard_task+0x15e>
 8001352:	4b12      	ldr	r3, [pc, #72]	@ (800139c <keyboard_task+0x1a0>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d008      	beq.n	800136c <keyboard_task+0x170>
        key->actuation.status = STATUS_TRIGGERED;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2202      	movs	r2, #2
 800135e:	779a      	strb	r2, [r3, #30]
        hid_press_key(key, _BASE_LAYER);
 8001360:	2100      	movs	r1, #0
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff f940 	bl	80005e8 <hid_press_key>
 8001368:	e000      	b.n	800136c <keyboard_task+0x170>
        continue;
 800136a:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800136c:	7b3b      	ldrb	r3, [r7, #12]
 800136e:	3301      	adds	r3, #1
 8001370:	733b      	strb	r3, [r7, #12]
 8001372:	7b3b      	ldrb	r3, [r7, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d090      	beq.n	800129a <keyboard_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8001378:	7b7b      	ldrb	r3, [r7, #13]
 800137a:	3301      	adds	r3, #1
 800137c:	737b      	strb	r3, [r7, #13]
 800137e:	7b7b      	ldrb	r3, [r7, #13]
 8001380:	2b0f      	cmp	r3, #15
 8001382:	d987      	bls.n	8001294 <keyboard_task+0x98>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 8001384:	f000 fa48 	bl	8001818 <keyboard_get_time>
 8001388:	4602      	mov	r2, r0
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	4a06      	ldr	r2, [pc, #24]	@ (80013a8 <keyboard_task+0x1ac>)
 8001390:	6013      	str	r3, [r2, #0]
}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200004ac 	.word	0x200004ac
 80013a0:	20000238 	.word	0x20000238
 80013a4:	20000000 	.word	0x20000000
 80013a8:	200004a8 	.word	0x200004a8

080013ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b0:	f000 fc86 	bl	8001cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b4:	f000 f81a 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b8:	f000 f930 	bl	800161c <MX_GPIO_Init>
  MX_ADC1_Init();
 80013bc:	f000 f880 	bl	80014c0 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80013c0:	f000 f8fe 	bl	80015c0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80013c4:	f000 f8ce 	bl	8001564 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ADC_channel_Config.Rank = 1;
 80013c8:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <main+0x3c>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	605a      	str	r2, [r3, #4]
  ADC_channel_Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013ce:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <main+0x3c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  keyboard_init_keys();
 80013d4:	f7ff feda 	bl	800118c <keyboard_init_keys>

  hid_init();
 80013d8:	f7ff f89c 	bl	8000514 <hid_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    // MARK: Main loop
    keyboard_task();
 80013dc:	f7ff ff0e 	bl	80011fc <keyboard_task>

    hid_task();
 80013e0:	f7ff f8ac 	bl	800053c <hid_task>
    keyboard_task();
 80013e4:	bf00      	nop
 80013e6:	e7f9      	b.n	80013dc <main+0x30>
 80013e8:	20000a30 	.word	0x20000a30

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b094      	sub	sp, #80	@ 0x50
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0320 	add.w	r3, r7, #32
 80013f6:	2230      	movs	r2, #48	@ 0x30
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f008 fe2e 	bl	800a05c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	4b28      	ldr	r3, [pc, #160]	@ (80014b8 <SystemClock_Config+0xcc>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	4a27      	ldr	r2, [pc, #156]	@ (80014b8 <SystemClock_Config+0xcc>)
 800141a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800141e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001420:	4b25      	ldr	r3, [pc, #148]	@ (80014b8 <SystemClock_Config+0xcc>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	4b22      	ldr	r3, [pc, #136]	@ (80014bc <SystemClock_Config+0xd0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a21      	ldr	r2, [pc, #132]	@ (80014bc <SystemClock_Config+0xd0>)
 8001436:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b1f      	ldr	r3, [pc, #124]	@ (80014bc <SystemClock_Config+0xd0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001448:	2301      	movs	r3, #1
 800144a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800144c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001456:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800145a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800145c:	2319      	movs	r3, #25
 800145e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001460:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001464:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001466:	2304      	movs	r3, #4
 8001468:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800146a:	2307      	movs	r3, #7
 800146c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146e:	f107 0320 	add.w	r3, r7, #32
 8001472:	4618      	mov	r0, r3
 8001474:	f001 ffbe 	bl	80033f4 <HAL_RCC_OscConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800147e:	f000 f9d2 	bl	8001826 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001482:	230f      	movs	r3, #15
 8001484:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001486:	2302      	movs	r3, #2
 8001488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800148e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001492:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	2102      	movs	r1, #2
 800149e:	4618      	mov	r0, r3
 80014a0:	f002 fa20 	bl	80038e4 <HAL_RCC_ClockConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014aa:	f000 f9bc 	bl	8001826 <Error_Handler>
  }
}
 80014ae:	bf00      	nop
 80014b0:	3750      	adds	r7, #80	@ 0x50
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40007000 	.word	0x40007000

080014c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014c6:	463b      	mov	r3, r7
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014d2:	4b21      	ldr	r3, [pc, #132]	@ (8001558 <MX_ADC1_Init+0x98>)
 80014d4:	4a21      	ldr	r2, [pc, #132]	@ (800155c <MX_ADC1_Init+0x9c>)
 80014d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <MX_ADC1_Init+0x98>)
 80014da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <MX_ADC1_Init+0x98>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001558 <MX_ADC1_Init+0x98>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <MX_ADC1_Init+0x98>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014f2:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <MX_ADC1_Init+0x98>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014fa:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <MX_ADC1_Init+0x98>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001500:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <MX_ADC1_Init+0x98>)
 8001502:	4a17      	ldr	r2, [pc, #92]	@ (8001560 <MX_ADC1_Init+0xa0>)
 8001504:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001506:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <MX_ADC1_Init+0x98>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800150c:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <MX_ADC1_Init+0x98>)
 800150e:	2201      	movs	r2, #1
 8001510:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001512:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <MX_ADC1_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800151a:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <MX_ADC1_Init+0x98>)
 800151c:	2201      	movs	r2, #1
 800151e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001520:	480d      	ldr	r0, [pc, #52]	@ (8001558 <MX_ADC1_Init+0x98>)
 8001522:	f000 fc63 	bl	8001dec <HAL_ADC_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800152c:	f000 f97b 	bl	8001826 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001530:	2309      	movs	r3, #9
 8001532:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001534:	2301      	movs	r3, #1
 8001536:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800153c:	463b      	mov	r3, r7
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	@ (8001558 <MX_ADC1_Init+0x98>)
 8001542:	f000 fe17 	bl	8002174 <HAL_ADC_ConfigChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800154c:	f000 f96b 	bl	8001826 <Error_Handler>

  // memcpy(&ADC_channel_Config, &sConfig, sizeof(ADC_ChannelConfTypeDef));

  /* USER CODE END ADC1_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200004b0 	.word	0x200004b0
 800155c:	40012000 	.word	0x40012000
 8001560:	0f000001 	.word	0x0f000001

08001564 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001568:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <MX_I2C1_Init+0x50>)
 800156a:	4a13      	ldr	r2, [pc, #76]	@ (80015b8 <MX_I2C1_Init+0x54>)
 800156c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800156e:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <MX_I2C1_Init+0x50>)
 8001570:	4a12      	ldr	r2, [pc, #72]	@ (80015bc <MX_I2C1_Init+0x58>)
 8001572:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001574:	4b0f      	ldr	r3, [pc, #60]	@ (80015b4 <MX_I2C1_Init+0x50>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800157a:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <MX_I2C1_Init+0x50>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <MX_I2C1_Init+0x50>)
 8001582:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001586:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001588:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <MX_I2C1_Init+0x50>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800158e:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <MX_I2C1_Init+0x50>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001594:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <MX_I2C1_Init+0x50>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159a:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <MX_I2C1_Init+0x50>)
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a0:	4804      	ldr	r0, [pc, #16]	@ (80015b4 <MX_I2C1_Init+0x50>)
 80015a2:	f001 fcd3 	bl	8002f4c <HAL_I2C_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015ac:	f000 f93b 	bl	8001826 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200004f8 	.word	0x200004f8
 80015b8:	40005400 	.word	0x40005400
 80015bc:	000186a0 	.word	0x000186a0

080015c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015c4:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80015ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80015cc:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ce:	2204      	movs	r2, #4
 80015d0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80015d2:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015d4:	2202      	movs	r2, #2
 80015d6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015da:	2200      	movs	r2, #0
 80015dc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015de:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015e0:	2202      	movs	r2, #2
 80015e2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015f0:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015fe:	2200      	movs	r2, #0
 8001600:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	@ (8001618 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001604:	f001 fde6 	bl	80031d4 <HAL_PCD_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800160e:	f000 f90a 	bl	8001826 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	2000054c 	.word	0x2000054c

0800161c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <MX_GPIO_Init+0x9c>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	4a1f      	ldr	r2, [pc, #124]	@ (80016b8 <MX_GPIO_Init+0x9c>)
 800163c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001640:	6313      	str	r3, [r2, #48]	@ 0x30
 8001642:	4b1d      	ldr	r3, [pc, #116]	@ (80016b8 <MX_GPIO_Init+0x9c>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	4b19      	ldr	r3, [pc, #100]	@ (80016b8 <MX_GPIO_Init+0x9c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a18      	ldr	r2, [pc, #96]	@ (80016b8 <MX_GPIO_Init+0x9c>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b16      	ldr	r3, [pc, #88]	@ (80016b8 <MX_GPIO_Init+0x9c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <MX_GPIO_Init+0x9c>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a11      	ldr	r2, [pc, #68]	@ (80016b8 <MX_GPIO_Init+0x9c>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b0f      	ldr	r3, [pc, #60]	@ (80016b8 <MX_GPIO_Init+0x9c>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800168c:	480b      	ldr	r0, [pc, #44]	@ (80016bc <MX_GPIO_Init+0xa0>)
 800168e:	f001 fc43 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001692:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	4619      	mov	r1, r3
 80016aa:	4804      	ldr	r0, [pc, #16]	@ (80016bc <MX_GPIO_Init+0xa0>)
 80016ac:	f001 fab0 	bl	8002c10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016b0:	bf00      	nop
 80016b2:	3720      	adds	r7, #32
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40020400 	.word	0x40020400

080016c0 <keyboard_read_config>:

/* USER CODE BEGIN 4 */

// MARK: keyboard_* functions

void keyboard_read_config() {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  memcpy(&keyboard_user_config, (uint32_t *)CONFIG_ADDRESS, sizeof(keyboard_user_config));
 80016c4:	4a04      	ldr	r2, [pc, #16]	@ (80016d8 <keyboard_read_config+0x18>)
 80016c6:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <keyboard_read_config+0x1c>)
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	2348      	movs	r3, #72	@ 0x48
 80016ce:	461a      	mov	r2, r3
 80016d0:	f008 fcf0 	bl	800a0b4 <memcpy>
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000000 	.word	0x20000000
 80016dc:	08040000 	.word	0x08040000

080016e0 <keyboard_write_config>:

uint8_t keyboard_write_config(uint8_t *buffer, uint16_t offset, uint16_t size) {
 80016e0:	b5b0      	push	{r4, r5, r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
 80016ec:	4613      	mov	r3, r2
 80016ee:	803b      	strh	r3, [r7, #0]
  if (offset >= sizeof(keyboard_user_config)) {
 80016f0:	887b      	ldrh	r3, [r7, #2]
 80016f2:	2b47      	cmp	r3, #71	@ 0x47
 80016f4:	d901      	bls.n	80016fa <keyboard_write_config+0x1a>
    return 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e02d      	b.n	8001756 <keyboard_write_config+0x76>
  }

  HAL_FLASH_Unlock();
 80016fa:	f001 f8cf 	bl	800289c <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 80016fe:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <keyboard_write_config+0x80>)
 8001700:	22b3      	movs	r2, #179	@ 0xb3
 8001702:	60da      	str	r2, [r3, #12]
  FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 8001704:	2102      	movs	r1, #2
 8001706:	2006      	movs	r0, #6
 8001708:	f001 fa3a 	bl	8002b80 <FLASH_Erase_Sector>
  for (uint16_t i = offset; i < size; i++) {
 800170c:	887b      	ldrh	r3, [r7, #2]
 800170e:	81fb      	strh	r3, [r7, #14]
 8001710:	e01a      	b.n	8001748 <keyboard_write_config+0x68>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, CONFIG_ADDRESS + i, buffer[i]) != HAL_OK) {
 8001712:	89fb      	ldrh	r3, [r7, #14]
 8001714:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001718:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 800171c:	4619      	mov	r1, r3
 800171e:	89fb      	ldrh	r3, [r7, #14]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2200      	movs	r2, #0
 800172a:	461c      	mov	r4, r3
 800172c:	4615      	mov	r5, r2
 800172e:	4622      	mov	r2, r4
 8001730:	462b      	mov	r3, r5
 8001732:	2000      	movs	r0, #0
 8001734:	f001 f85e 	bl	80027f4 <HAL_FLASH_Program>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <keyboard_write_config+0x62>
      HAL_FLASH_Lock();
 800173e:	f001 f8cf 	bl	80028e0 <HAL_FLASH_Lock>
  for (uint16_t i = offset; i < size; i++) {
 8001742:	89fb      	ldrh	r3, [r7, #14]
 8001744:	3301      	adds	r3, #1
 8001746:	81fb      	strh	r3, [r7, #14]
 8001748:	89fa      	ldrh	r2, [r7, #14]
 800174a:	883b      	ldrh	r3, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d3e0      	bcc.n	8001712 <keyboard_write_config+0x32>
    };
  }
  HAL_FLASH_Lock();
 8001750:	f001 f8c6 	bl	80028e0 <HAL_FLASH_Lock>
  return 1;
 8001754:	2301      	movs	r3, #1
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bdb0      	pop	{r4, r5, r7, pc}
 800175e:	bf00      	nop
 8001760:	40023c00 	.word	0x40023c00

08001764 <keyboard_select_amux>:

void keyboard_select_amux(uint8_t amux_channel) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  // TODO: set GPIOs at the same time using bitmap on register
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 800176e:	2300      	movs	r3, #0
 8001770:	73fb      	strb	r3, [r7, #15]
 8001772:	e013      	b.n	800179c <keyboard_select_amux+0x38>
    HAL_GPIO_WritePin(GPIOB, amux_select_pins[i], (amux_channel >> i) & 1);
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	4a0d      	ldr	r2, [pc, #52]	@ (80017ac <keyboard_select_amux+0x48>)
 8001778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177c:	b299      	uxth	r1, r3
 800177e:	79fa      	ldrb	r2, [r7, #7]
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	fa42 f303 	asr.w	r3, r2, r3
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	b2db      	uxtb	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	4807      	ldr	r0, [pc, #28]	@ (80017b0 <keyboard_select_amux+0x4c>)
 8001792:	f001 fbc1 	bl	8002f18 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	3301      	adds	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d9e8      	bls.n	8001774 <keyboard_select_amux+0x10>
  }
}
 80017a2:	bf00      	nop
 80017a4:	bf00      	nop
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	0800a194 	.word	0x0800a194
 80017b0:	40020400 	.word	0x40020400

080017b4 <keyboard_select_adc>:

void keyboard_select_adc(uint8_t adc_channel) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  ADC_channel_Config.Channel = adc_channels[adc_channel];
 80017be:	2209      	movs	r2, #9
 80017c0:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <keyboard_select_adc+0x30>)
 80017c2:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &ADC_channel_Config);
 80017c4:	4907      	ldr	r1, [pc, #28]	@ (80017e4 <keyboard_select_adc+0x30>)
 80017c6:	4808      	ldr	r0, [pc, #32]	@ (80017e8 <keyboard_select_adc+0x34>)
 80017c8:	f000 fcd4 	bl	8002174 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 80017cc:	4806      	ldr	r0, [pc, #24]	@ (80017e8 <keyboard_select_adc+0x34>)
 80017ce:	f000 fb51 	bl	8001e74 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 80017d2:	2101      	movs	r1, #1
 80017d4:	4804      	ldr	r0, [pc, #16]	@ (80017e8 <keyboard_select_adc+0x34>)
 80017d6:	f000 fc34 	bl	8002042 <HAL_ADC_PollForConversion>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000a30 	.word	0x20000a30
 80017e8:	200004b0 	.word	0x200004b0

080017ec <keyboard_read_adc>:

uint16_t keyboard_read_adc() {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 80017f0:	4803      	ldr	r0, [pc, #12]	@ (8001800 <keyboard_read_adc+0x14>)
 80017f2:	f000 fcb1 	bl	8002158 <HAL_ADC_GetValue>
 80017f6:	4603      	mov	r3, r0
 80017f8:	b29b      	uxth	r3, r3
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200004b0 	.word	0x200004b0

08001804 <keyboard_close_adc>:

void keyboard_close_adc() {
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  HAL_ADC_Stop(&hadc1);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <keyboard_close_adc+0x10>)
 800180a:	f000 fbe7 	bl	8001fdc <HAL_ADC_Stop>
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200004b0 	.word	0x200004b0

08001818 <keyboard_get_time>:

uint32_t keyboard_get_time() {
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800181c:	f000 fab6 	bl	8001d8c <HAL_GetTick>
 8001820:	4603      	mov	r3, r0
}
 8001822:	4618      	mov	r0, r3
 8001824:	bd80      	pop	{r7, pc}

08001826 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182a:	b672      	cpsid	i
}
 800182c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800182e:	bf00      	nop
 8001830:	e7fd      	b.n	800182e <Error_Handler+0x8>
	...

08001834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <HAL_MspInit+0x4c>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001842:	4a0f      	ldr	r2, [pc, #60]	@ (8001880 <HAL_MspInit+0x4c>)
 8001844:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001848:	6453      	str	r3, [r2, #68]	@ 0x44
 800184a:	4b0d      	ldr	r3, [pc, #52]	@ (8001880 <HAL_MspInit+0x4c>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <HAL_MspInit+0x4c>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	4a08      	ldr	r2, [pc, #32]	@ (8001880 <HAL_MspInit+0x4c>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001864:	6413      	str	r3, [r2, #64]	@ 0x40
 8001866:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <HAL_MspInit+0x4c>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800

08001884 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	@ 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a17      	ldr	r2, [pc, #92]	@ (8001900 <HAL_ADC_MspInit+0x7c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d127      	bne.n	80018f6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	4b16      	ldr	r3, [pc, #88]	@ (8001904 <HAL_ADC_MspInit+0x80>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ae:	4a15      	ldr	r2, [pc, #84]	@ (8001904 <HAL_ADC_MspInit+0x80>)
 80018b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018b6:	4b13      	ldr	r3, [pc, #76]	@ (8001904 <HAL_ADC_MspInit+0x80>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001904 <HAL_ADC_MspInit+0x80>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001904 <HAL_ADC_MspInit+0x80>)
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <HAL_ADC_MspInit+0x80>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018de:	2302      	movs	r3, #2
 80018e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e2:	2303      	movs	r3, #3
 80018e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4805      	ldr	r0, [pc, #20]	@ (8001908 <HAL_ADC_MspInit+0x84>)
 80018f2:	f001 f98d 	bl	8002c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	@ 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40012000 	.word	0x40012000
 8001904:	40023800 	.word	0x40023800
 8001908:	40020400 	.word	0x40020400

0800190c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	@ 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a19      	ldr	r2, [pc, #100]	@ (8001990 <HAL_I2C_MspInit+0x84>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d12b      	bne.n	8001986 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	4b18      	ldr	r3, [pc, #96]	@ (8001994 <HAL_I2C_MspInit+0x88>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a17      	ldr	r2, [pc, #92]	@ (8001994 <HAL_I2C_MspInit+0x88>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <HAL_I2C_MspInit+0x88>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800194a:	23c0      	movs	r3, #192	@ 0xc0
 800194c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800194e:	2312      	movs	r3, #18
 8001950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001952:	2301      	movs	r3, #1
 8001954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001956:	2303      	movs	r3, #3
 8001958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800195a:	2304      	movs	r3, #4
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	480c      	ldr	r0, [pc, #48]	@ (8001998 <HAL_I2C_MspInit+0x8c>)
 8001966:	f001 f953 	bl	8002c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <HAL_I2C_MspInit+0x88>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	4a08      	ldr	r2, [pc, #32]	@ (8001994 <HAL_I2C_MspInit+0x88>)
 8001974:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001978:	6413      	str	r3, [r2, #64]	@ 0x40
 800197a:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <HAL_I2C_MspInit+0x88>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	@ 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40005400 	.word	0x40005400
 8001994:	40023800 	.word	0x40023800
 8001998:	40020400 	.word	0x40020400

0800199c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	@ 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019bc:	d13a      	bne.n	8001a34 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a3c <HAL_PCD_MspInit+0xa0>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a3c <HAL_PCD_MspInit+0xa0>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ce:	4b1b      	ldr	r3, [pc, #108]	@ (8001a3c <HAL_PCD_MspInit+0xa0>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80019da:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80019de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019ec:	230a      	movs	r3, #10
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4619      	mov	r1, r3
 80019f6:	4812      	ldr	r0, [pc, #72]	@ (8001a40 <HAL_PCD_MspInit+0xa4>)
 80019f8:	f001 f90a 	bl	8002c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019fc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <HAL_PCD_MspInit+0xa0>)
 80019fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a00:	4a0e      	ldr	r2, [pc, #56]	@ (8001a3c <HAL_PCD_MspInit+0xa0>)
 8001a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a06:	6353      	str	r3, [r2, #52]	@ 0x34
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <HAL_PCD_MspInit+0xa0>)
 8001a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a10:	4a0a      	ldr	r2, [pc, #40]	@ (8001a3c <HAL_PCD_MspInit+0xa0>)
 8001a12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a16:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a18:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <HAL_PCD_MspInit+0xa0>)
 8001a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2100      	movs	r1, #0
 8001a28:	2043      	movs	r0, #67	@ 0x43
 8001a2a:	f000 feac 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001a2e:	2043      	movs	r0, #67	@ 0x43
 8001a30:	f000 fec5 	bl	80027be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a34:	bf00      	nop
 8001a36:	3728      	adds	r7, #40	@ 0x28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020000 	.word	0x40020000

08001a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <NMI_Handler+0x4>

08001a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm("BKPT #0\n");
 8001a50:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a52:	bf00      	nop
 8001a54:	e7fd      	b.n	8001a52 <HardFault_Handler+0x6>

08001a56 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a5a:	bf00      	nop
 8001a5c:	e7fd      	b.n	8001a5a <MemManage_Handler+0x4>

08001a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a62:	bf00      	nop
 8001a64:	e7fd      	b.n	8001a62 <BusFault_Handler+0x4>

08001a66 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a6a:	bf00      	nop
 8001a6c:	e7fd      	b.n	8001a6a <UsageFault_Handler+0x4>

08001a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9c:	f000 f962 	bl	8001d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  system_ticks++;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	@ (8001ab0 <SysTick_Handler+0x18>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	4a02      	ldr	r2, [pc, #8]	@ (8001ab0 <SysTick_Handler+0x18>)
 8001aa8:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000a40 	.word	0x20000a40

08001ab4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(0);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f007 fb61 	bl	8009180 <dcd_int_handler>
	return;
 8001abe:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ac8:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <SystemInit+0x20>)
 8001aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ace:	4a05      	ldr	r2, [pc, #20]	@ (8001ae4 <SystemInit+0x20>)
 8001ad0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ad4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <tud_descriptor_device_cb>:
        .bNumConfigurations = 0x01,
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const *tud_descriptor_device_cb(void) {
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return (uint8_t const *)&desc_device;
 8001aec:	4b02      	ldr	r3, [pc, #8]	@ (8001af8 <tud_descriptor_device_cb+0x10>)
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	0800a1bc 	.word	0x0800a1bc

08001afc <tud_hid_descriptor_report_cb>:
};

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const *tud_hid_descriptor_report_cb(uint8_t instance) {
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
  if (instance == ITF_NUM_KEYBOARD) {
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <tud_hid_descriptor_report_cb+0x14>
    return desc_hid_keyboard_report;
 8001b0c:	4b04      	ldr	r3, [pc, #16]	@ (8001b20 <tud_hid_descriptor_report_cb+0x24>)
 8001b0e:	e000      	b.n	8001b12 <tud_hid_descriptor_report_cb+0x16>
  }

  return NULL;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	0800a1d0 	.word	0x0800a1d0

08001b24 <tud_descriptor_configuration_cb>:
};

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const *tud_descriptor_configuration_cb(uint8_t index) {
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  (void)index; // for multiple configurations
  return desc_configuration;
 8001b2e:	4b03      	ldr	r3, [pc, #12]	@ (8001b3c <tud_descriptor_configuration_cb+0x18>)
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	0800a22c 	.word	0x0800a22c

08001b40 <tud_descriptor_bos_cb>:
        TUD_BOS_WEBUSB_DESCRIPTOR(VENDOR_REQUEST_WEBUSB, 1),

        // Microsoft OS 2.0 descriptor
        TUD_BOS_MS_OS_20_DESCRIPTOR(MS_OS_20_DESC_LEN, VENDOR_REQUEST_MICROSOFT)};

uint8_t const *tud_descriptor_bos_cb(void) {
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return desc_bos;
 8001b44:	4b02      	ldr	r3, [pc, #8]	@ (8001b50 <tud_descriptor_bos_cb+0x10>)
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	0800a268 	.word	0x0800a268

08001b54 <tud_descriptor_string_cb>:

static uint16_t _desc_str[32 + 1];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	460a      	mov	r2, r1
 8001b5e:	71fb      	strb	r3, [r7, #7]
 8001b60:	4613      	mov	r3, r2
 8001b62:	80bb      	strh	r3, [r7, #4]
  (void)langid;
  size_t chr_count;

  if (index == 0) {
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d108      	bne.n	8001b7c <tud_descriptor_string_cb+0x28>
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8001b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c64 <tud_descriptor_string_cb+0x110>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	4b3d      	ldr	r3, [pc, #244]	@ (8001c68 <tud_descriptor_string_cb+0x114>)
 8001b74:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 8001b76:	2301      	movs	r3, #1
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	e026      	b.n	8001bca <tud_descriptor_string_cb+0x76>
  } else {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if (!(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])))
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	2b05      	cmp	r3, #5
 8001b80:	d901      	bls.n	8001b86 <tud_descriptor_string_cb+0x32>
      return NULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e06a      	b.n	8001c5c <tud_descriptor_string_cb+0x108>

    const char *str = string_desc_arr[index];
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	4a36      	ldr	r2, [pc, #216]	@ (8001c64 <tud_descriptor_string_cb+0x110>)
 8001b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8e:	613b      	str	r3, [r7, #16]

    // Cap at max char
    chr_count = strlen(str);
 8001b90:	6938      	ldr	r0, [r7, #16]
 8001b92:	f7fe fb21 	bl	80001d8 <strlen>
 8001b96:	61f8      	str	r0, [r7, #28]
    if (chr_count > 31)
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	2b1f      	cmp	r3, #31
 8001b9c:	d901      	bls.n	8001ba2 <tud_descriptor_string_cb+0x4e>
      chr_count = 31;
 8001b9e:	231f      	movs	r3, #31
 8001ba0:	61fb      	str	r3, [r7, #28]

    // Convert ASCII string into UTF-16
    for (uint8_t i = 0; i < chr_count; i++) {
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	76fb      	strb	r3, [r7, #27]
 8001ba6:	e00c      	b.n	8001bc2 <tud_descriptor_string_cb+0x6e>
      _desc_str[1 + i] = str[i];
 8001ba8:	7efb      	ldrb	r3, [r7, #27]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4413      	add	r3, r2
 8001bae:	781a      	ldrb	r2, [r3, #0]
 8001bb0:	7efb      	ldrb	r3, [r7, #27]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	4a2c      	ldr	r2, [pc, #176]	@ (8001c68 <tud_descriptor_string_cb+0x114>)
 8001bb8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < chr_count; i++) {
 8001bbc:	7efb      	ldrb	r3, [r7, #27]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	76fb      	strb	r3, [r7, #27]
 8001bc2:	7efb      	ldrb	r3, [r7, #27]
 8001bc4:	69fa      	ldr	r2, [r7, #28]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d8ee      	bhi.n	8001ba8 <tud_descriptor_string_cb+0x54>
    }
  }

  switch (index) {
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <tud_descriptor_string_cb+0x82>
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d009      	beq.n	8001be8 <tud_descriptor_string_cb+0x94>
 8001bd4:	e00b      	b.n	8001bee <tud_descriptor_string_cb+0x9a>
  case STRID_LANGID:
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8001bd6:	4b23      	ldr	r3, [pc, #140]	@ (8001c64 <tud_descriptor_string_cb+0x110>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	4b22      	ldr	r3, [pc, #136]	@ (8001c68 <tud_descriptor_string_cb+0x114>)
 8001be0:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 8001be2:	2301      	movs	r3, #1
 8001be4:	61fb      	str	r3, [r7, #28]
    break;
 8001be6:	e02d      	b.n	8001c44 <tud_descriptor_string_cb+0xf0>

  case STRID_SERIAL:
    chr_count = 10;
 8001be8:	230a      	movs	r3, #10
 8001bea:	61fb      	str	r3, [r7, #28]
    break;
 8001bec:	e02a      	b.n	8001c44 <tud_descriptor_string_cb+0xf0>

  default:
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if (!(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])))
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	d901      	bls.n	8001bf8 <tud_descriptor_string_cb+0xa4>
      return NULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e031      	b.n	8001c5c <tud_descriptor_string_cb+0x108>

    const char *str = string_desc_arr[index];
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	4a1a      	ldr	r2, [pc, #104]	@ (8001c64 <tud_descriptor_string_cb+0x110>)
 8001bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c00:	60fb      	str	r3, [r7, #12]

    // Cap at max char
    chr_count = strlen(str);
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f7fe fae8 	bl	80001d8 <strlen>
 8001c08:	61f8      	str	r0, [r7, #28]
    size_t const max_count = sizeof(_desc_str) / sizeof(_desc_str[0]) - 1; // -1 for string type
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	60bb      	str	r3, [r7, #8]
    if (chr_count > max_count)
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d901      	bls.n	8001c1a <tud_descriptor_string_cb+0xc6>
      chr_count = max_count;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	61fb      	str	r3, [r7, #28]

    // Convert ASCII string into UTF-16
    for (size_t i = 0; i < chr_count; i++) {
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	e00c      	b.n	8001c3a <tud_descriptor_string_cb+0xe6>
      _desc_str[1 + i] = str[i];
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	4413      	add	r3, r2
 8001c26:	781a      	ldrb	r2, [r3, #0]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c68 <tud_descriptor_string_cb+0x114>)
 8001c30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (size_t i = 0; i < chr_count; i++) {
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3301      	adds	r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d3ee      	bcc.n	8001c20 <tud_descriptor_string_cb+0xcc>
    }
    break;
 8001c42:	bf00      	nop
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t)((TUSB_DESC_STRING << 8) | (2 * chr_count + 2));
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	3301      	adds	r3, #1
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <tud_descriptor_string_cb+0x114>)
 8001c58:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8001c5a:	4b03      	ldr	r3, [pc, #12]	@ (8001c68 <tud_descriptor_string_cb+0x114>)
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3720      	adds	r7, #32
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	2000004c 	.word	0x2000004c
 8001c68:	20000a44 	.word	0x20000a44

08001c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ca4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c70:	f7ff ff28 	bl	8001ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c74:	480c      	ldr	r0, [pc, #48]	@ (8001ca8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c76:	490d      	ldr	r1, [pc, #52]	@ (8001cac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c78:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c7c:	e002      	b.n	8001c84 <LoopCopyDataInit>

08001c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c82:	3304      	adds	r3, #4

08001c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c88:	d3f9      	bcc.n	8001c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001cb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c90:	e001      	b.n	8001c96 <LoopFillZerobss>

08001c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c94:	3204      	adds	r2, #4

08001c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c98:	d3fb      	bcc.n	8001c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c9a:	f008 f9e7 	bl	800a06c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c9e:	f7ff fb85 	bl	80013ac <main>
  bx  lr    
 8001ca2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ca4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cac:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001cb0:	0800a3cc 	.word	0x0800a3cc
  ldr r2, =_sbss
 8001cb4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001cb8:	20000df4 	.word	0x20000df4

08001cbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cbc:	e7fe      	b.n	8001cbc <ADC_IRQHandler>
	...

08001cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d00 <HAL_Init+0x40>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d00 <HAL_Init+0x40>)
 8001cca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <HAL_Init+0x40>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001d00 <HAL_Init+0x40>)
 8001cd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cdc:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <HAL_Init+0x40>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a07      	ldr	r2, [pc, #28]	@ (8001d00 <HAL_Init+0x40>)
 8001ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce8:	2003      	movs	r0, #3
 8001cea:	f000 fd41 	bl	8002770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cee:	200f      	movs	r0, #15
 8001cf0:	f000 f808 	bl	8001d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf4:	f7ff fd9e 	bl	8001834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023c00 	.word	0x40023c00

08001d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d0c:	4b12      	ldr	r3, [pc, #72]	@ (8001d58 <HAL_InitTick+0x54>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_InitTick+0x58>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fd59 	bl	80027da <HAL_SYSTICK_Config>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00e      	b.n	8001d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b0f      	cmp	r3, #15
 8001d36:	d80a      	bhi.n	8001d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	f000 fd21 	bl	8002786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d44:	4a06      	ldr	r2, [pc, #24]	@ (8001d60 <HAL_InitTick+0x5c>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e000      	b.n	8001d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000048 	.word	0x20000048
 8001d5c:	20000068 	.word	0x20000068
 8001d60:	20000064 	.word	0x20000064

08001d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_IncTick+0x20>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_IncTick+0x24>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <HAL_IncTick+0x24>)
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000068 	.word	0x20000068
 8001d88:	20000a88 	.word	0x20000a88

08001d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d90:	4b03      	ldr	r3, [pc, #12]	@ (8001da0 <HAL_GetTick+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000a88 	.word	0x20000a88

08001da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff ffee 	bl	8001d8c <HAL_GetTick>
 8001db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d005      	beq.n	8001dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <HAL_Delay+0x44>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dca:	bf00      	nop
 8001dcc:	f7ff ffde 	bl	8001d8c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d8f7      	bhi.n	8001dcc <HAL_Delay+0x28>
  {
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000068 	.word	0x20000068

08001dec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e033      	b.n	8001e6a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff fd3a 	bl	8001884 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d118      	bne.n	8001e5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e32:	f023 0302 	bic.w	r3, r3, #2
 8001e36:	f043 0202 	orr.w	r2, r3, #2
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 faca 	bl	80023d8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	f023 0303 	bic.w	r3, r3, #3
 8001e52:	f043 0201 	orr.w	r2, r3, #1
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e5a:	e001      	b.n	8001e60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_ADC_Start+0x1a>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e097      	b.n	8001fbe <HAL_ADC_Start+0x14a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d018      	beq.n	8001ed6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001eb4:	4b45      	ldr	r3, [pc, #276]	@ (8001fcc <HAL_ADC_Start+0x158>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a45      	ldr	r2, [pc, #276]	@ (8001fd0 <HAL_ADC_Start+0x15c>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	0c9a      	lsrs	r2, r3, #18
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ec8:	e002      	b.n	8001ed0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f9      	bne.n	8001eca <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d15f      	bne.n	8001fa4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d007      	beq.n	8001f16 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f0e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f22:	d106      	bne.n	8001f32 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f28:	f023 0206 	bic.w	r2, r3, #6
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f30:	e002      	b.n	8001f38 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f40:	4b24      	ldr	r3, [pc, #144]	@ (8001fd4 <HAL_ADC_Start+0x160>)
 8001f42:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f4c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10f      	bne.n	8001f7a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d129      	bne.n	8001fbc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	e020      	b.n	8001fbc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a16      	ldr	r2, [pc, #88]	@ (8001fd8 <HAL_ADC_Start+0x164>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d11b      	bne.n	8001fbc <HAL_ADC_Start+0x148>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d114      	bne.n	8001fbc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	e00b      	b.n	8001fbc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa8:	f043 0210 	orr.w	r2, r3, #16
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb4:	f043 0201 	orr.w	r2, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000048 	.word	0x20000048
 8001fd0:	431bde83 	.word	0x431bde83
 8001fd4:	40012300 	.word	0x40012300
 8001fd8:	40012000 	.word	0x40012000

08001fdc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_ADC_Stop+0x16>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e021      	b.n	8002036 <HAL_ADC_Stop+0x5a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0201 	bic.w	r2, r2, #1
 8002008:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d109      	bne.n	800202c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002020:	f023 0301 	bic.w	r3, r3, #1
 8002024:	f043 0201 	orr.w	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800205e:	d113      	bne.n	8002088 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800206a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800206e:	d10b      	bne.n	8002088 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	f043 0220 	orr.w	r2, r3, #32
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e063      	b.n	8002150 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002088:	f7ff fe80 	bl	8001d8c <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800208e:	e021      	b.n	80020d4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002096:	d01d      	beq.n	80020d4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <HAL_ADC_PollForConversion+0x6c>
 800209e:	f7ff fe75 	bl	8001d8c <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d212      	bcs.n	80020d4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d00b      	beq.n	80020d4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c0:	f043 0204 	orr.w	r2, r3, #4
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e03d      	b.n	8002150 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d1d6      	bne.n	8002090 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f06f 0212 	mvn.w	r2, #18
 80020ea:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d123      	bne.n	800214e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800210a:	2b00      	cmp	r3, #0
 800210c:	d11f      	bne.n	800214e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002114:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002126:	2b00      	cmp	r3, #0
 8002128:	d111      	bne.n	800214e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d105      	bne.n	800214e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	f043 0201 	orr.w	r2, r3, #1
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x1c>
 800218c:	2302      	movs	r3, #2
 800218e:	e113      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x244>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b09      	cmp	r3, #9
 800219e:	d925      	bls.n	80021ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68d9      	ldr	r1, [r3, #12]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	3b1e      	subs	r3, #30
 80021b6:	2207      	movs	r2, #7
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43da      	mvns	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	400a      	ands	r2, r1
 80021c4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68d9      	ldr	r1, [r3, #12]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	4618      	mov	r0, r3
 80021d8:	4603      	mov	r3, r0
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4403      	add	r3, r0
 80021de:	3b1e      	subs	r3, #30
 80021e0:	409a      	lsls	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	e022      	b.n	8002232 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6919      	ldr	r1, [r3, #16]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	461a      	mov	r2, r3
 80021fa:	4613      	mov	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	2207      	movs	r2, #7
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	400a      	ands	r2, r1
 800220e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6919      	ldr	r1, [r3, #16]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	4618      	mov	r0, r3
 8002222:	4603      	mov	r3, r0
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4403      	add	r3, r0
 8002228:	409a      	lsls	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b06      	cmp	r3, #6
 8002238:	d824      	bhi.n	8002284 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	3b05      	subs	r3, #5
 800224c:	221f      	movs	r2, #31
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43da      	mvns	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	400a      	ands	r2, r1
 800225a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	4618      	mov	r0, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	3b05      	subs	r3, #5
 8002276:	fa00 f203 	lsl.w	r2, r0, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	635a      	str	r2, [r3, #52]	@ 0x34
 8002282:	e04c      	b.n	800231e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b0c      	cmp	r3, #12
 800228a:	d824      	bhi.n	80022d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	3b23      	subs	r3, #35	@ 0x23
 800229e:	221f      	movs	r2, #31
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43da      	mvns	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	400a      	ands	r2, r1
 80022ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	4618      	mov	r0, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	3b23      	subs	r3, #35	@ 0x23
 80022c8:	fa00 f203 	lsl.w	r2, r0, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80022d4:	e023      	b.n	800231e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	3b41      	subs	r3, #65	@ 0x41
 80022e8:	221f      	movs	r2, #31
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43da      	mvns	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	400a      	ands	r2, r1
 80022f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	b29b      	uxth	r3, r3
 8002304:	4618      	mov	r0, r3
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	3b41      	subs	r3, #65	@ 0x41
 8002312:	fa00 f203 	lsl.w	r2, r0, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800231e:	4b29      	ldr	r3, [pc, #164]	@ (80023c4 <HAL_ADC_ConfigChannel+0x250>)
 8002320:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a28      	ldr	r2, [pc, #160]	@ (80023c8 <HAL_ADC_ConfigChannel+0x254>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d10f      	bne.n	800234c <HAL_ADC_ConfigChannel+0x1d8>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b12      	cmp	r3, #18
 8002332:	d10b      	bne.n	800234c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1d      	ldr	r2, [pc, #116]	@ (80023c8 <HAL_ADC_ConfigChannel+0x254>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d12b      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x23a>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a1c      	ldr	r2, [pc, #112]	@ (80023cc <HAL_ADC_ConfigChannel+0x258>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d003      	beq.n	8002368 <HAL_ADC_ConfigChannel+0x1f4>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b11      	cmp	r3, #17
 8002366:	d122      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a11      	ldr	r2, [pc, #68]	@ (80023cc <HAL_ADC_ConfigChannel+0x258>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d111      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800238a:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <HAL_ADC_ConfigChannel+0x25c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a11      	ldr	r2, [pc, #68]	@ (80023d4 <HAL_ADC_ConfigChannel+0x260>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	0c9a      	lsrs	r2, r3, #18
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023a0:	e002      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f9      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	40012300 	.word	0x40012300
 80023c8:	40012000 	.word	0x40012000
 80023cc:	10000012 	.word	0x10000012
 80023d0:	20000048 	.word	0x20000048
 80023d4:	431bde83 	.word	0x431bde83

080023d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023e0:	4b79      	ldr	r3, [pc, #484]	@ (80025c8 <ADC_Init+0x1f0>)
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	431a      	orrs	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800240c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	021a      	lsls	r2, r3, #8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002430:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002452:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6899      	ldr	r1, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246a:	4a58      	ldr	r2, [pc, #352]	@ (80025cc <ADC_Init+0x1f4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d022      	beq.n	80024b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800247e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6899      	ldr	r1, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6899      	ldr	r1, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	e00f      	b.n	80024d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0202 	bic.w	r2, r2, #2
 80024e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6899      	ldr	r1, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7e1b      	ldrb	r3, [r3, #24]
 80024f0:	005a      	lsls	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01b      	beq.n	800253c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002512:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002522:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	3b01      	subs	r3, #1
 8002530:	035a      	lsls	r2, r3, #13
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	e007      	b.n	800254c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800254a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800255a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	3b01      	subs	r3, #1
 8002568:	051a      	lsls	r2, r3, #20
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002580:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6899      	ldr	r1, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800258e:	025a      	lsls	r2, r3, #9
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6899      	ldr	r1, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	029a      	lsls	r2, r3, #10
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	609a      	str	r2, [r3, #8]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40012300 	.word	0x40012300
 80025cc:	0f000001 	.word	0x0f000001

080025d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025ec:	4013      	ands	r3, r2
 80025ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002602:	4a04      	ldr	r2, [pc, #16]	@ (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	60d3      	str	r3, [r2, #12]
}
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800261c:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <__NVIC_GetPriorityGrouping+0x18>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	f003 0307 	and.w	r3, r3, #7
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	2b00      	cmp	r3, #0
 8002644:	db0b      	blt.n	800265e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	4907      	ldr	r1, [pc, #28]	@ (800266c <__NVIC_EnableIRQ+0x38>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2001      	movs	r0, #1
 8002656:	fa00 f202 	lsl.w	r2, r0, r2
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000e100 	.word	0xe000e100

08002670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	2b00      	cmp	r3, #0
 8002682:	db0a      	blt.n	800269a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	490c      	ldr	r1, [pc, #48]	@ (80026bc <__NVIC_SetPriority+0x4c>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	440b      	add	r3, r1
 8002694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002698:	e00a      	b.n	80026b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4908      	ldr	r1, [pc, #32]	@ (80026c0 <__NVIC_SetPriority+0x50>)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	3b04      	subs	r3, #4
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	440b      	add	r3, r1
 80026ae:	761a      	strb	r2, [r3, #24]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000e100 	.word	0xe000e100
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	@ 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f1c3 0307 	rsb	r3, r3, #7
 80026de:	2b04      	cmp	r3, #4
 80026e0:	bf28      	it	cs
 80026e2:	2304      	movcs	r3, #4
 80026e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d902      	bls.n	80026f4 <NVIC_EncodePriority+0x30>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3b03      	subs	r3, #3
 80026f2:	e000      	b.n	80026f6 <NVIC_EncodePriority+0x32>
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	401a      	ands	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43d9      	mvns	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	4313      	orrs	r3, r2
         );
}
 800271e:	4618      	mov	r0, r3
 8002720:	3724      	adds	r7, #36	@ 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800273c:	d301      	bcc.n	8002742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273e:	2301      	movs	r3, #1
 8002740:	e00f      	b.n	8002762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002742:	4a0a      	ldr	r2, [pc, #40]	@ (800276c <SysTick_Config+0x40>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274a:	210f      	movs	r1, #15
 800274c:	f04f 30ff 	mov.w	r0, #4294967295
 8002750:	f7ff ff8e 	bl	8002670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002754:	4b05      	ldr	r3, [pc, #20]	@ (800276c <SysTick_Config+0x40>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275a:	4b04      	ldr	r3, [pc, #16]	@ (800276c <SysTick_Config+0x40>)
 800275c:	2207      	movs	r2, #7
 800275e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	e000e010 	.word	0xe000e010

08002770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ff29 	bl	80025d0 <__NVIC_SetPriorityGrouping>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002786:	b580      	push	{r7, lr}
 8002788:	b086      	sub	sp, #24
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002798:	f7ff ff3e 	bl	8002618 <__NVIC_GetPriorityGrouping>
 800279c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	6978      	ldr	r0, [r7, #20]
 80027a4:	f7ff ff8e 	bl	80026c4 <NVIC_EncodePriority>
 80027a8:	4602      	mov	r2, r0
 80027aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff5d 	bl	8002670 <__NVIC_SetPriority>
}
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff31 	bl	8002634 <__NVIC_EnableIRQ>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ffa2 	bl	800272c <SysTick_Config>
 80027e8:	4603      	mov	r3, r0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002806:	4b23      	ldr	r3, [pc, #140]	@ (8002894 <HAL_FLASH_Program+0xa0>)
 8002808:	7e1b      	ldrb	r3, [r3, #24]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d101      	bne.n	8002812 <HAL_FLASH_Program+0x1e>
 800280e:	2302      	movs	r3, #2
 8002810:	e03b      	b.n	800288a <HAL_FLASH_Program+0x96>
 8002812:	4b20      	ldr	r3, [pc, #128]	@ (8002894 <HAL_FLASH_Program+0xa0>)
 8002814:	2201      	movs	r2, #1
 8002816:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002818:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800281c:	f000 f870 	bl	8002900 <FLASH_WaitForLastOperation>
 8002820:	4603      	mov	r3, r0
 8002822:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002824:	7dfb      	ldrb	r3, [r7, #23]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d12b      	bne.n	8002882 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d105      	bne.n	800283c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002830:	783b      	ldrb	r3, [r7, #0]
 8002832:	4619      	mov	r1, r3
 8002834:	68b8      	ldr	r0, [r7, #8]
 8002836:	f000 f91b 	bl	8002a70 <FLASH_Program_Byte>
 800283a:	e016      	b.n	800286a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d105      	bne.n	800284e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002842:	883b      	ldrh	r3, [r7, #0]
 8002844:	4619      	mov	r1, r3
 8002846:	68b8      	ldr	r0, [r7, #8]
 8002848:	f000 f8ee 	bl	8002a28 <FLASH_Program_HalfWord>
 800284c:	e00d      	b.n	800286a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d105      	bne.n	8002860 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	4619      	mov	r1, r3
 8002858:	68b8      	ldr	r0, [r7, #8]
 800285a:	f000 f8c3 	bl	80029e4 <FLASH_Program_Word>
 800285e:	e004      	b.n	800286a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002864:	68b8      	ldr	r0, [r7, #8]
 8002866:	f000 f88b 	bl	8002980 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800286a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800286e:	f000 f847 	bl	8002900 <FLASH_WaitForLastOperation>
 8002872:	4603      	mov	r3, r0
 8002874:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002876:	4b08      	ldr	r3, [pc, #32]	@ (8002898 <HAL_FLASH_Program+0xa4>)
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	4a07      	ldr	r2, [pc, #28]	@ (8002898 <HAL_FLASH_Program+0xa4>)
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002882:	4b04      	ldr	r3, [pc, #16]	@ (8002894 <HAL_FLASH_Program+0xa0>)
 8002884:	2200      	movs	r2, #0
 8002886:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002888:	7dfb      	ldrb	r3, [r7, #23]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000a8c 	.word	0x20000a8c
 8002898:	40023c00 	.word	0x40023c00

0800289c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80028a6:	4b0b      	ldr	r3, [pc, #44]	@ (80028d4 <HAL_FLASH_Unlock+0x38>)
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	da0b      	bge.n	80028c6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80028ae:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <HAL_FLASH_Unlock+0x38>)
 80028b0:	4a09      	ldr	r2, [pc, #36]	@ (80028d8 <HAL_FLASH_Unlock+0x3c>)
 80028b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80028b4:	4b07      	ldr	r3, [pc, #28]	@ (80028d4 <HAL_FLASH_Unlock+0x38>)
 80028b6:	4a09      	ldr	r2, [pc, #36]	@ (80028dc <HAL_FLASH_Unlock+0x40>)
 80028b8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80028ba:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <HAL_FLASH_Unlock+0x38>)
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	da01      	bge.n	80028c6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80028c6:	79fb      	ldrb	r3, [r7, #7]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	40023c00 	.word	0x40023c00
 80028d8:	45670123 	.word	0x45670123
 80028dc:	cdef89ab 	.word	0xcdef89ab

080028e0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80028e4:	4b05      	ldr	r3, [pc, #20]	@ (80028fc <HAL_FLASH_Lock+0x1c>)
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	4a04      	ldr	r2, [pc, #16]	@ (80028fc <HAL_FLASH_Lock+0x1c>)
 80028ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028ee:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	40023c00 	.word	0x40023c00

08002900 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800290c:	4b1a      	ldr	r3, [pc, #104]	@ (8002978 <FLASH_WaitForLastOperation+0x78>)
 800290e:	2200      	movs	r2, #0
 8002910:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002912:	f7ff fa3b 	bl	8001d8c <HAL_GetTick>
 8002916:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002918:	e010      	b.n	800293c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d00c      	beq.n	800293c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d007      	beq.n	8002938 <FLASH_WaitForLastOperation+0x38>
 8002928:	f7ff fa30 	bl	8001d8c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	d201      	bcs.n	800293c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e019      	b.n	8002970 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800293c:	4b0f      	ldr	r3, [pc, #60]	@ (800297c <FLASH_WaitForLastOperation+0x7c>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1e8      	bne.n	800291a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002948:	4b0c      	ldr	r3, [pc, #48]	@ (800297c <FLASH_WaitForLastOperation+0x7c>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002954:	4b09      	ldr	r3, [pc, #36]	@ (800297c <FLASH_WaitForLastOperation+0x7c>)
 8002956:	2201      	movs	r2, #1
 8002958:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800295a:	4b08      	ldr	r3, [pc, #32]	@ (800297c <FLASH_WaitForLastOperation+0x7c>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002966:	f000 f8a5 	bl	8002ab4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
  
}  
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000a8c 	.word	0x20000a8c
 800297c:	40023c00 	.word	0x40023c00

08002980 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800298c:	4b14      	ldr	r3, [pc, #80]	@ (80029e0 <FLASH_Program_DoubleWord+0x60>)
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	4a13      	ldr	r2, [pc, #76]	@ (80029e0 <FLASH_Program_DoubleWord+0x60>)
 8002992:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002996:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002998:	4b11      	ldr	r3, [pc, #68]	@ (80029e0 <FLASH_Program_DoubleWord+0x60>)
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	4a10      	ldr	r2, [pc, #64]	@ (80029e0 <FLASH_Program_DoubleWord+0x60>)
 800299e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80029a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80029a4:	4b0e      	ldr	r3, [pc, #56]	@ (80029e0 <FLASH_Program_DoubleWord+0x60>)
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	4a0d      	ldr	r2, [pc, #52]	@ (80029e0 <FLASH_Program_DoubleWord+0x60>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80029b6:	f3bf 8f6f 	isb	sy
}
 80029ba:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80029bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	000a      	movs	r2, r1
 80029ca:	2300      	movs	r3, #0
 80029cc:	68f9      	ldr	r1, [r7, #12]
 80029ce:	3104      	adds	r1, #4
 80029d0:	4613      	mov	r3, r2
 80029d2:	600b      	str	r3, [r1, #0]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	40023c00 	.word	0x40023c00

080029e4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002a24 <FLASH_Program_Word+0x40>)
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002a24 <FLASH_Program_Word+0x40>)
 80029f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80029fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002a24 <FLASH_Program_Word+0x40>)
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	4a09      	ldr	r2, [pc, #36]	@ (8002a24 <FLASH_Program_Word+0x40>)
 8002a00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a06:	4b07      	ldr	r3, [pc, #28]	@ (8002a24 <FLASH_Program_Word+0x40>)
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	4a06      	ldr	r2, [pc, #24]	@ (8002a24 <FLASH_Program_Word+0x40>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	601a      	str	r2, [r3, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	40023c00 	.word	0x40023c00

08002a28 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a34:	4b0d      	ldr	r3, [pc, #52]	@ (8002a6c <FLASH_Program_HalfWord+0x44>)
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	4a0c      	ldr	r2, [pc, #48]	@ (8002a6c <FLASH_Program_HalfWord+0x44>)
 8002a3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002a40:	4b0a      	ldr	r3, [pc, #40]	@ (8002a6c <FLASH_Program_HalfWord+0x44>)
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	4a09      	ldr	r2, [pc, #36]	@ (8002a6c <FLASH_Program_HalfWord+0x44>)
 8002a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a4c:	4b07      	ldr	r3, [pc, #28]	@ (8002a6c <FLASH_Program_HalfWord+0x44>)
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	4a06      	ldr	r2, [pc, #24]	@ (8002a6c <FLASH_Program_HalfWord+0x44>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	887a      	ldrh	r2, [r7, #2]
 8002a5c:	801a      	strh	r2, [r3, #0]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40023c00 	.word	0x40023c00

08002a70 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab0 <FLASH_Program_Byte+0x40>)
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab0 <FLASH_Program_Byte+0x40>)
 8002a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002a88:	4b09      	ldr	r3, [pc, #36]	@ (8002ab0 <FLASH_Program_Byte+0x40>)
 8002a8a:	4a09      	ldr	r2, [pc, #36]	@ (8002ab0 <FLASH_Program_Byte+0x40>)
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a90:	4b07      	ldr	r3, [pc, #28]	@ (8002ab0 <FLASH_Program_Byte+0x40>)
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	4a06      	ldr	r2, [pc, #24]	@ (8002ab0 <FLASH_Program_Byte+0x40>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	701a      	strb	r2, [r3, #0]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40023c00 	.word	0x40023c00

08002ab4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002ab8:	4b2f      	ldr	r3, [pc, #188]	@ (8002b78 <FLASH_SetErrorCode+0xc4>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8002b7c <FLASH_SetErrorCode+0xc8>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	f043 0310 	orr.w	r3, r3, #16
 8002acc:	4a2b      	ldr	r2, [pc, #172]	@ (8002b7c <FLASH_SetErrorCode+0xc8>)
 8002ace:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002ad0:	4b29      	ldr	r3, [pc, #164]	@ (8002b78 <FLASH_SetErrorCode+0xc4>)
 8002ad2:	2210      	movs	r2, #16
 8002ad4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002ad6:	4b28      	ldr	r3, [pc, #160]	@ (8002b78 <FLASH_SetErrorCode+0xc4>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d008      	beq.n	8002af4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002ae2:	4b26      	ldr	r3, [pc, #152]	@ (8002b7c <FLASH_SetErrorCode+0xc8>)
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	f043 0308 	orr.w	r3, r3, #8
 8002aea:	4a24      	ldr	r2, [pc, #144]	@ (8002b7c <FLASH_SetErrorCode+0xc8>)
 8002aec:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002aee:	4b22      	ldr	r3, [pc, #136]	@ (8002b78 <FLASH_SetErrorCode+0xc4>)
 8002af0:	2220      	movs	r2, #32
 8002af2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002af4:	4b20      	ldr	r3, [pc, #128]	@ (8002b78 <FLASH_SetErrorCode+0xc4>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002b00:	4b1e      	ldr	r3, [pc, #120]	@ (8002b7c <FLASH_SetErrorCode+0xc8>)
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	f043 0304 	orr.w	r3, r3, #4
 8002b08:	4a1c      	ldr	r2, [pc, #112]	@ (8002b7c <FLASH_SetErrorCode+0xc8>)
 8002b0a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002b78 <FLASH_SetErrorCode+0xc4>)
 8002b0e:	2240      	movs	r2, #64	@ 0x40
 8002b10:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002b12:	4b19      	ldr	r3, [pc, #100]	@ (8002b78 <FLASH_SetErrorCode+0xc4>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002b1e:	4b17      	ldr	r3, [pc, #92]	@ (8002b7c <FLASH_SetErrorCode+0xc8>)
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f043 0302 	orr.w	r3, r3, #2
 8002b26:	4a15      	ldr	r2, [pc, #84]	@ (8002b7c <FLASH_SetErrorCode+0xc8>)
 8002b28:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002b2a:	4b13      	ldr	r3, [pc, #76]	@ (8002b78 <FLASH_SetErrorCode+0xc4>)
 8002b2c:	2280      	movs	r2, #128	@ 0x80
 8002b2e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002b30:	4b11      	ldr	r3, [pc, #68]	@ (8002b78 <FLASH_SetErrorCode+0xc4>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d009      	beq.n	8002b50 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b7c <FLASH_SetErrorCode+0xc8>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	4a0d      	ldr	r2, [pc, #52]	@ (8002b7c <FLASH_SetErrorCode+0xc8>)
 8002b46:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002b48:	4b0b      	ldr	r3, [pc, #44]	@ (8002b78 <FLASH_SetErrorCode+0xc4>)
 8002b4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b4e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002b50:	4b09      	ldr	r3, [pc, #36]	@ (8002b78 <FLASH_SetErrorCode+0xc4>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002b5c:	4b07      	ldr	r3, [pc, #28]	@ (8002b7c <FLASH_SetErrorCode+0xc8>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	f043 0320 	orr.w	r3, r3, #32
 8002b64:	4a05      	ldr	r2, [pc, #20]	@ (8002b7c <FLASH_SetErrorCode+0xc8>)
 8002b66:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002b68:	4b03      	ldr	r3, [pc, #12]	@ (8002b78 <FLASH_SetErrorCode+0xc4>)
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	60da      	str	r2, [r3, #12]
  }
}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	40023c00 	.word	0x40023c00
 8002b7c:	20000a8c 	.word	0x20000a8c

08002b80 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d102      	bne.n	8002b9c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	e010      	b.n	8002bbe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d103      	bne.n	8002baa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002ba2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	e009      	b.n	8002bbe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d103      	bne.n	8002bb8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002bb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	e002      	b.n	8002bbe <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002bb8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bbc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002bbe:	4b13      	ldr	r3, [pc, #76]	@ (8002c0c <FLASH_Erase_Sector+0x8c>)
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	4a12      	ldr	r2, [pc, #72]	@ (8002c0c <FLASH_Erase_Sector+0x8c>)
 8002bc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bc8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002bca:	4b10      	ldr	r3, [pc, #64]	@ (8002c0c <FLASH_Erase_Sector+0x8c>)
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	490f      	ldr	r1, [pc, #60]	@ (8002c0c <FLASH_Erase_Sector+0x8c>)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c0c <FLASH_Erase_Sector+0x8c>)
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	4a0c      	ldr	r2, [pc, #48]	@ (8002c0c <FLASH_Erase_Sector+0x8c>)
 8002bdc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002be0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002be2:	4b0a      	ldr	r3, [pc, #40]	@ (8002c0c <FLASH_Erase_Sector+0x8c>)
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4313      	orrs	r3, r2
 8002bec:	4a07      	ldr	r2, [pc, #28]	@ (8002c0c <FLASH_Erase_Sector+0x8c>)
 8002bee:	f043 0302 	orr.w	r3, r3, #2
 8002bf2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002bf4:	4b05      	ldr	r3, [pc, #20]	@ (8002c0c <FLASH_Erase_Sector+0x8c>)
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	4a04      	ldr	r2, [pc, #16]	@ (8002c0c <FLASH_Erase_Sector+0x8c>)
 8002bfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bfe:	6113      	str	r3, [r2, #16]
}
 8002c00:	bf00      	nop
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	40023c00 	.word	0x40023c00

08002c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b089      	sub	sp, #36	@ 0x24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	e159      	b.n	8002ee0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	f040 8148 	bne.w	8002eda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d005      	beq.n	8002c62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d130      	bne.n	8002cc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c98:	2201      	movs	r2, #1
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 0201 	and.w	r2, r3, #1
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d017      	beq.n	8002d00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	2203      	movs	r2, #3
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d123      	bne.n	8002d54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	08da      	lsrs	r2, r3, #3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3208      	adds	r2, #8
 8002d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	220f      	movs	r2, #15
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	08da      	lsrs	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3208      	adds	r2, #8
 8002d4e:	69b9      	ldr	r1, [r7, #24]
 8002d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	2203      	movs	r2, #3
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0203 	and.w	r2, r3, #3
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80a2 	beq.w	8002eda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	4b57      	ldr	r3, [pc, #348]	@ (8002ef8 <HAL_GPIO_Init+0x2e8>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9e:	4a56      	ldr	r2, [pc, #344]	@ (8002ef8 <HAL_GPIO_Init+0x2e8>)
 8002da0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002da6:	4b54      	ldr	r3, [pc, #336]	@ (8002ef8 <HAL_GPIO_Init+0x2e8>)
 8002da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002db2:	4a52      	ldr	r2, [pc, #328]	@ (8002efc <HAL_GPIO_Init+0x2ec>)
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	089b      	lsrs	r3, r3, #2
 8002db8:	3302      	adds	r3, #2
 8002dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	220f      	movs	r2, #15
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a49      	ldr	r2, [pc, #292]	@ (8002f00 <HAL_GPIO_Init+0x2f0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d019      	beq.n	8002e12 <HAL_GPIO_Init+0x202>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a48      	ldr	r2, [pc, #288]	@ (8002f04 <HAL_GPIO_Init+0x2f4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d013      	beq.n	8002e0e <HAL_GPIO_Init+0x1fe>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a47      	ldr	r2, [pc, #284]	@ (8002f08 <HAL_GPIO_Init+0x2f8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00d      	beq.n	8002e0a <HAL_GPIO_Init+0x1fa>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a46      	ldr	r2, [pc, #280]	@ (8002f0c <HAL_GPIO_Init+0x2fc>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d007      	beq.n	8002e06 <HAL_GPIO_Init+0x1f6>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a45      	ldr	r2, [pc, #276]	@ (8002f10 <HAL_GPIO_Init+0x300>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d101      	bne.n	8002e02 <HAL_GPIO_Init+0x1f2>
 8002dfe:	2304      	movs	r3, #4
 8002e00:	e008      	b.n	8002e14 <HAL_GPIO_Init+0x204>
 8002e02:	2307      	movs	r3, #7
 8002e04:	e006      	b.n	8002e14 <HAL_GPIO_Init+0x204>
 8002e06:	2303      	movs	r3, #3
 8002e08:	e004      	b.n	8002e14 <HAL_GPIO_Init+0x204>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e002      	b.n	8002e14 <HAL_GPIO_Init+0x204>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_GPIO_Init+0x204>
 8002e12:	2300      	movs	r3, #0
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	f002 0203 	and.w	r2, r2, #3
 8002e1a:	0092      	lsls	r2, r2, #2
 8002e1c:	4093      	lsls	r3, r2
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e24:	4935      	ldr	r1, [pc, #212]	@ (8002efc <HAL_GPIO_Init+0x2ec>)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	089b      	lsrs	r3, r3, #2
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e32:	4b38      	ldr	r3, [pc, #224]	@ (8002f14 <HAL_GPIO_Init+0x304>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e56:	4a2f      	ldr	r2, [pc, #188]	@ (8002f14 <HAL_GPIO_Init+0x304>)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f14 <HAL_GPIO_Init+0x304>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e80:	4a24      	ldr	r2, [pc, #144]	@ (8002f14 <HAL_GPIO_Init+0x304>)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e86:	4b23      	ldr	r3, [pc, #140]	@ (8002f14 <HAL_GPIO_Init+0x304>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8002f14 <HAL_GPIO_Init+0x304>)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eb0:	4b18      	ldr	r3, [pc, #96]	@ (8002f14 <HAL_GPIO_Init+0x304>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ed4:	4a0f      	ldr	r2, [pc, #60]	@ (8002f14 <HAL_GPIO_Init+0x304>)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3301      	adds	r3, #1
 8002ede:	61fb      	str	r3, [r7, #28]
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	2b0f      	cmp	r3, #15
 8002ee4:	f67f aea2 	bls.w	8002c2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	3724      	adds	r7, #36	@ 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40013800 	.word	0x40013800
 8002f00:	40020000 	.word	0x40020000
 8002f04:	40020400 	.word	0x40020400
 8002f08:	40020800 	.word	0x40020800
 8002f0c:	40020c00 	.word	0x40020c00
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40013c00 	.word	0x40013c00

08002f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
 8002f24:	4613      	mov	r3, r2
 8002f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f28:	787b      	ldrb	r3, [r7, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f2e:	887a      	ldrh	r2, [r7, #2]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f34:	e003      	b.n	8002f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f36:	887b      	ldrh	r3, [r7, #2]
 8002f38:	041a      	lsls	r2, r3, #16
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	619a      	str	r2, [r3, #24]
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e12b      	b.n	80031b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fe fcca 	bl	800190c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2224      	movs	r2, #36	@ 0x24
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fb0:	f000 fe50 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 8002fb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4a81      	ldr	r2, [pc, #516]	@ (80031c0 <HAL_I2C_Init+0x274>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d807      	bhi.n	8002fd0 <HAL_I2C_Init+0x84>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4a80      	ldr	r2, [pc, #512]	@ (80031c4 <HAL_I2C_Init+0x278>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	bf94      	ite	ls
 8002fc8:	2301      	movls	r3, #1
 8002fca:	2300      	movhi	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	e006      	b.n	8002fde <HAL_I2C_Init+0x92>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4a7d      	ldr	r2, [pc, #500]	@ (80031c8 <HAL_I2C_Init+0x27c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	bf94      	ite	ls
 8002fd8:	2301      	movls	r3, #1
 8002fda:	2300      	movhi	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e0e7      	b.n	80031b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4a78      	ldr	r2, [pc, #480]	@ (80031cc <HAL_I2C_Init+0x280>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	0c9b      	lsrs	r3, r3, #18
 8002ff0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	430a      	orrs	r2, r1
 8003004:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4a6a      	ldr	r2, [pc, #424]	@ (80031c0 <HAL_I2C_Init+0x274>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d802      	bhi.n	8003020 <HAL_I2C_Init+0xd4>
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	3301      	adds	r3, #1
 800301e:	e009      	b.n	8003034 <HAL_I2C_Init+0xe8>
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003026:	fb02 f303 	mul.w	r3, r2, r3
 800302a:	4a69      	ldr	r2, [pc, #420]	@ (80031d0 <HAL_I2C_Init+0x284>)
 800302c:	fba2 2303 	umull	r2, r3, r2, r3
 8003030:	099b      	lsrs	r3, r3, #6
 8003032:	3301      	adds	r3, #1
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	430b      	orrs	r3, r1
 800303a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003046:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	495c      	ldr	r1, [pc, #368]	@ (80031c0 <HAL_I2C_Init+0x274>)
 8003050:	428b      	cmp	r3, r1
 8003052:	d819      	bhi.n	8003088 <HAL_I2C_Init+0x13c>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1e59      	subs	r1, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003062:	1c59      	adds	r1, r3, #1
 8003064:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003068:	400b      	ands	r3, r1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_I2C_Init+0x138>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1e59      	subs	r1, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	fbb1 f3f3 	udiv	r3, r1, r3
 800307c:	3301      	adds	r3, #1
 800307e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003082:	e051      	b.n	8003128 <HAL_I2C_Init+0x1dc>
 8003084:	2304      	movs	r3, #4
 8003086:	e04f      	b.n	8003128 <HAL_I2C_Init+0x1dc>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d111      	bne.n	80030b4 <HAL_I2C_Init+0x168>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1e58      	subs	r0, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6859      	ldr	r1, [r3, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	440b      	add	r3, r1
 800309e:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a2:	3301      	adds	r3, #1
 80030a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bf0c      	ite	eq
 80030ac:	2301      	moveq	r3, #1
 80030ae:	2300      	movne	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	e012      	b.n	80030da <HAL_I2C_Init+0x18e>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1e58      	subs	r0, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6859      	ldr	r1, [r3, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	0099      	lsls	r1, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ca:	3301      	adds	r3, #1
 80030cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_I2C_Init+0x196>
 80030de:	2301      	movs	r3, #1
 80030e0:	e022      	b.n	8003128 <HAL_I2C_Init+0x1dc>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10e      	bne.n	8003108 <HAL_I2C_Init+0x1bc>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1e58      	subs	r0, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6859      	ldr	r1, [r3, #4]
 80030f2:	460b      	mov	r3, r1
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	440b      	add	r3, r1
 80030f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030fc:	3301      	adds	r3, #1
 80030fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003102:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003106:	e00f      	b.n	8003128 <HAL_I2C_Init+0x1dc>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	1e58      	subs	r0, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6859      	ldr	r1, [r3, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	0099      	lsls	r1, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	fbb0 f3f3 	udiv	r3, r0, r3
 800311e:	3301      	adds	r3, #1
 8003120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003124:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	6809      	ldr	r1, [r1, #0]
 800312c:	4313      	orrs	r3, r2
 800312e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69da      	ldr	r2, [r3, #28]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003156:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6911      	ldr	r1, [r2, #16]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68d2      	ldr	r2, [r2, #12]
 8003162:	4311      	orrs	r1, r2
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	430b      	orrs	r3, r1
 800316a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0201 	orr.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	000186a0 	.word	0x000186a0
 80031c4:	001e847f 	.word	0x001e847f
 80031c8:	003d08ff 	.word	0x003d08ff
 80031cc:	431bde83 	.word	0x431bde83
 80031d0:	10624dd3 	.word	0x10624dd3

080031d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af02      	add	r7, sp, #8
 80031da:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e101      	b.n	80033ea <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d106      	bne.n	8003206 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7fe fbcb 	bl	800199c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2203      	movs	r2, #3
 800320a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003214:	d102      	bne.n	800321c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fd8f 	bl	8003d44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	7c1a      	ldrb	r2, [r3, #16]
 800322e:	f88d 2000 	strb.w	r2, [sp]
 8003232:	3304      	adds	r3, #4
 8003234:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003236:	f000 fd21 	bl	8003c7c <USB_CoreInit>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0ce      	b.n	80033ea <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2100      	movs	r1, #0
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fd87 	bl	8003d66 <USB_SetCurrentMode>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2202      	movs	r2, #2
 8003262:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0bf      	b.n	80033ea <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800326a:	2300      	movs	r3, #0
 800326c:	73fb      	strb	r3, [r7, #15]
 800326e:	e04a      	b.n	8003306 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003270:	7bfa      	ldrb	r2, [r7, #15]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	3315      	adds	r3, #21
 8003280:	2201      	movs	r2, #1
 8003282:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	3314      	adds	r3, #20
 8003294:	7bfa      	ldrb	r2, [r7, #15]
 8003296:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003298:	7bfa      	ldrb	r2, [r7, #15]
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	b298      	uxth	r0, r3
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	332e      	adds	r3, #46	@ 0x2e
 80032ac:	4602      	mov	r2, r0
 80032ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032b0:	7bfa      	ldrb	r2, [r7, #15]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	3318      	adds	r3, #24
 80032c0:	2200      	movs	r2, #0
 80032c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032c4:	7bfa      	ldrb	r2, [r7, #15]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	331c      	adds	r3, #28
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032d8:	7bfa      	ldrb	r2, [r7, #15]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	3320      	adds	r3, #32
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032ec:	7bfa      	ldrb	r2, [r7, #15]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	3324      	adds	r3, #36	@ 0x24
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	3301      	adds	r3, #1
 8003304:	73fb      	strb	r3, [r7, #15]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	791b      	ldrb	r3, [r3, #4]
 800330a:	7bfa      	ldrb	r2, [r7, #15]
 800330c:	429a      	cmp	r2, r3
 800330e:	d3af      	bcc.n	8003270 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003310:	2300      	movs	r3, #0
 8003312:	73fb      	strb	r3, [r7, #15]
 8003314:	e044      	b.n	80033a0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003328:	2200      	movs	r2, #0
 800332a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800332c:	7bfa      	ldrb	r2, [r7, #15]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003342:	7bfa      	ldrb	r2, [r7, #15]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800336e:	7bfa      	ldrb	r2, [r7, #15]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003384:	7bfa      	ldrb	r2, [r7, #15]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	3301      	adds	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	791b      	ldrb	r3, [r3, #4]
 80033a4:	7bfa      	ldrb	r2, [r7, #15]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d3b5      	bcc.n	8003316 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	7c1a      	ldrb	r2, [r3, #16]
 80033b2:	f88d 2000 	strb.w	r2, [sp]
 80033b6:	3304      	adds	r3, #4
 80033b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033ba:	f000 fd21 	bl	8003e00 <USB_DevInit>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e00c      	b.n	80033ea <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fee9 	bl	80041ba <USB_DevDisconnect>

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e267      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d075      	beq.n	80034fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003412:	4b88      	ldr	r3, [pc, #544]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b04      	cmp	r3, #4
 800341c:	d00c      	beq.n	8003438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800341e:	4b85      	ldr	r3, [pc, #532]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003426:	2b08      	cmp	r3, #8
 8003428:	d112      	bne.n	8003450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800342a:	4b82      	ldr	r3, [pc, #520]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003432:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003436:	d10b      	bne.n	8003450 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003438:	4b7e      	ldr	r3, [pc, #504]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d05b      	beq.n	80034fc <HAL_RCC_OscConfig+0x108>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d157      	bne.n	80034fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e242      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003458:	d106      	bne.n	8003468 <HAL_RCC_OscConfig+0x74>
 800345a:	4b76      	ldr	r3, [pc, #472]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a75      	ldr	r2, [pc, #468]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e01d      	b.n	80034a4 <HAL_RCC_OscConfig+0xb0>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003470:	d10c      	bne.n	800348c <HAL_RCC_OscConfig+0x98>
 8003472:	4b70      	ldr	r3, [pc, #448]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a6f      	ldr	r2, [pc, #444]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003478:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	4b6d      	ldr	r3, [pc, #436]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a6c      	ldr	r2, [pc, #432]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	e00b      	b.n	80034a4 <HAL_RCC_OscConfig+0xb0>
 800348c:	4b69      	ldr	r3, [pc, #420]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a68      	ldr	r2, [pc, #416]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	4b66      	ldr	r3, [pc, #408]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a65      	ldr	r2, [pc, #404]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800349e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d013      	beq.n	80034d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7fe fc6e 	bl	8001d8c <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b4:	f7fe fc6a 	bl	8001d8c <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	@ 0x64
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e207      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0xc0>
 80034d2:	e014      	b.n	80034fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7fe fc5a 	bl	8001d8c <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034dc:	f7fe fc56 	bl	8001d8c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	@ 0x64
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e1f3      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ee:	4b51      	ldr	r3, [pc, #324]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0xe8>
 80034fa:	e000      	b.n	80034fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d063      	beq.n	80035d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800350a:	4b4a      	ldr	r3, [pc, #296]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00b      	beq.n	800352e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003516:	4b47      	ldr	r3, [pc, #284]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800351e:	2b08      	cmp	r3, #8
 8003520:	d11c      	bne.n	800355c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003522:	4b44      	ldr	r3, [pc, #272]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d116      	bne.n	800355c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352e:	4b41      	ldr	r3, [pc, #260]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_RCC_OscConfig+0x152>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d001      	beq.n	8003546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e1c7      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003546:	4b3b      	ldr	r3, [pc, #236]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4937      	ldr	r1, [pc, #220]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003556:	4313      	orrs	r3, r2
 8003558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355a:	e03a      	b.n	80035d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d020      	beq.n	80035a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003564:	4b34      	ldr	r3, [pc, #208]	@ (8003638 <HAL_RCC_OscConfig+0x244>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7fe fc0f 	bl	8001d8c <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003572:	f7fe fc0b 	bl	8001d8c <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e1a8      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003584:	4b2b      	ldr	r3, [pc, #172]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003590:	4b28      	ldr	r3, [pc, #160]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4925      	ldr	r1, [pc, #148]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	600b      	str	r3, [r1, #0]
 80035a4:	e015      	b.n	80035d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a6:	4b24      	ldr	r3, [pc, #144]	@ (8003638 <HAL_RCC_OscConfig+0x244>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fe fbee 	bl	8001d8c <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b4:	f7fe fbea 	bl	8001d8c <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e187      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d036      	beq.n	800364c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d016      	beq.n	8003614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035e6:	4b15      	ldr	r3, [pc, #84]	@ (800363c <HAL_RCC_OscConfig+0x248>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ec:	f7fe fbce 	bl	8001d8c <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f4:	f7fe fbca 	bl	8001d8c <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e167      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003606:	4b0b      	ldr	r3, [pc, #44]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0x200>
 8003612:	e01b      	b.n	800364c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003614:	4b09      	ldr	r3, [pc, #36]	@ (800363c <HAL_RCC_OscConfig+0x248>)
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361a:	f7fe fbb7 	bl	8001d8c <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003620:	e00e      	b.n	8003640 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003622:	f7fe fbb3 	bl	8001d8c <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d907      	bls.n	8003640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e150      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
 8003634:	40023800 	.word	0x40023800
 8003638:	42470000 	.word	0x42470000
 800363c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003640:	4b88      	ldr	r3, [pc, #544]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1ea      	bne.n	8003622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8097 	beq.w	8003788 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800365a:	2300      	movs	r3, #0
 800365c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800365e:	4b81      	ldr	r3, [pc, #516]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10f      	bne.n	800368a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	4b7d      	ldr	r3, [pc, #500]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	4a7c      	ldr	r2, [pc, #496]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003678:	6413      	str	r3, [r2, #64]	@ 0x40
 800367a:	4b7a      	ldr	r3, [pc, #488]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003686:	2301      	movs	r3, #1
 8003688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368a:	4b77      	ldr	r3, [pc, #476]	@ (8003868 <HAL_RCC_OscConfig+0x474>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d118      	bne.n	80036c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003696:	4b74      	ldr	r3, [pc, #464]	@ (8003868 <HAL_RCC_OscConfig+0x474>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a73      	ldr	r2, [pc, #460]	@ (8003868 <HAL_RCC_OscConfig+0x474>)
 800369c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a2:	f7fe fb73 	bl	8001d8c <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036aa:	f7fe fb6f 	bl	8001d8c <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e10c      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003868 <HAL_RCC_OscConfig+0x474>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d106      	bne.n	80036de <HAL_RCC_OscConfig+0x2ea>
 80036d0:	4b64      	ldr	r3, [pc, #400]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d4:	4a63      	ldr	r2, [pc, #396]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6713      	str	r3, [r2, #112]	@ 0x70
 80036dc:	e01c      	b.n	8003718 <HAL_RCC_OscConfig+0x324>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b05      	cmp	r3, #5
 80036e4:	d10c      	bne.n	8003700 <HAL_RCC_OscConfig+0x30c>
 80036e6:	4b5f      	ldr	r3, [pc, #380]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ea:	4a5e      	ldr	r2, [pc, #376]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036ec:	f043 0304 	orr.w	r3, r3, #4
 80036f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f2:	4b5c      	ldr	r3, [pc, #368]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80036fe:	e00b      	b.n	8003718 <HAL_RCC_OscConfig+0x324>
 8003700:	4b58      	ldr	r3, [pc, #352]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003704:	4a57      	ldr	r2, [pc, #348]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003706:	f023 0301 	bic.w	r3, r3, #1
 800370a:	6713      	str	r3, [r2, #112]	@ 0x70
 800370c:	4b55      	ldr	r3, [pc, #340]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003710:	4a54      	ldr	r2, [pc, #336]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003712:	f023 0304 	bic.w	r3, r3, #4
 8003716:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d015      	beq.n	800374c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003720:	f7fe fb34 	bl	8001d8c <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003726:	e00a      	b.n	800373e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003728:	f7fe fb30 	bl	8001d8c <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003736:	4293      	cmp	r3, r2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e0cb      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373e:	4b49      	ldr	r3, [pc, #292]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0ee      	beq.n	8003728 <HAL_RCC_OscConfig+0x334>
 800374a:	e014      	b.n	8003776 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374c:	f7fe fb1e 	bl	8001d8c <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003752:	e00a      	b.n	800376a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003754:	f7fe fb1a 	bl	8001d8c <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003762:	4293      	cmp	r3, r2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e0b5      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376a:	4b3e      	ldr	r3, [pc, #248]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800376c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1ee      	bne.n	8003754 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003776:	7dfb      	ldrb	r3, [r7, #23]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d105      	bne.n	8003788 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377c:	4b39      	ldr	r3, [pc, #228]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800377e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003780:	4a38      	ldr	r2, [pc, #224]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003782:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003786:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 80a1 	beq.w	80038d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003792:	4b34      	ldr	r3, [pc, #208]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b08      	cmp	r3, #8
 800379c:	d05c      	beq.n	8003858 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d141      	bne.n	800382a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	4b31      	ldr	r3, [pc, #196]	@ (800386c <HAL_RCC_OscConfig+0x478>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ac:	f7fe faee 	bl	8001d8c <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fe faea 	bl	8001d8c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e087      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c6:	4b27      	ldr	r3, [pc, #156]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	019b      	lsls	r3, r3, #6
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e8:	085b      	lsrs	r3, r3, #1
 80037ea:	3b01      	subs	r3, #1
 80037ec:	041b      	lsls	r3, r3, #16
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f4:	061b      	lsls	r3, r3, #24
 80037f6:	491b      	ldr	r1, [pc, #108]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037fc:	4b1b      	ldr	r3, [pc, #108]	@ (800386c <HAL_RCC_OscConfig+0x478>)
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003802:	f7fe fac3 	bl	8001d8c <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800380a:	f7fe fabf 	bl	8001d8c <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e05c      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381c:	4b11      	ldr	r3, [pc, #68]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCC_OscConfig+0x416>
 8003828:	e054      	b.n	80038d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382a:	4b10      	ldr	r3, [pc, #64]	@ (800386c <HAL_RCC_OscConfig+0x478>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003830:	f7fe faac 	bl	8001d8c <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003838:	f7fe faa8 	bl	8001d8c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e045      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x444>
 8003856:	e03d      	b.n	80038d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d107      	bne.n	8003870 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e038      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
 8003864:	40023800 	.word	0x40023800
 8003868:	40007000 	.word	0x40007000
 800386c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003870:	4b1b      	ldr	r3, [pc, #108]	@ (80038e0 <HAL_RCC_OscConfig+0x4ec>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d028      	beq.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003888:	429a      	cmp	r2, r3
 800388a:	d121      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003896:	429a      	cmp	r2, r3
 8003898:	d11a      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038a0:	4013      	ands	r3, r2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d111      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b6:	085b      	lsrs	r3, r3, #1
 80038b8:	3b01      	subs	r3, #1
 80038ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038bc:	429a      	cmp	r2, r3
 80038be:	d107      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e000      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800

080038e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0cc      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f8:	4b68      	ldr	r3, [pc, #416]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d90c      	bls.n	8003920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b65      	ldr	r3, [pc, #404]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800390e:	4b63      	ldr	r3, [pc, #396]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d001      	beq.n	8003920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0b8      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d020      	beq.n	800396e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003938:	4b59      	ldr	r3, [pc, #356]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	4a58      	ldr	r2, [pc, #352]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003950:	4b53      	ldr	r3, [pc, #332]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	4a52      	ldr	r2, [pc, #328]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800395a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800395c:	4b50      	ldr	r3, [pc, #320]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	494d      	ldr	r1, [pc, #308]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d044      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d107      	bne.n	8003992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	4b47      	ldr	r3, [pc, #284]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d119      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e07f      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d003      	beq.n	80039a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d107      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a2:	4b3f      	ldr	r3, [pc, #252]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d109      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e06f      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b2:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e067      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039c2:	4b37      	ldr	r3, [pc, #220]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f023 0203 	bic.w	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4934      	ldr	r1, [pc, #208]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d4:	f7fe f9da 	bl	8001d8c <HAL_GetTick>
 80039d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039dc:	f7fe f9d6 	bl	8001d8c <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e04f      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f2:	4b2b      	ldr	r3, [pc, #172]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 020c 	and.w	r2, r3, #12
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d1eb      	bne.n	80039dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a04:	4b25      	ldr	r3, [pc, #148]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d20c      	bcs.n	8003a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b22      	ldr	r3, [pc, #136]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b20      	ldr	r3, [pc, #128]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e032      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a38:	4b19      	ldr	r3, [pc, #100]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4916      	ldr	r1, [pc, #88]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a56:	4b12      	ldr	r3, [pc, #72]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	490e      	ldr	r1, [pc, #56]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a6a:	f000 f821 	bl	8003ab0 <HAL_RCC_GetSysClockFreq>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	490a      	ldr	r1, [pc, #40]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a7c:	5ccb      	ldrb	r3, [r1, r3]
 8003a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a82:	4a09      	ldr	r2, [pc, #36]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a86:	4b09      	ldr	r3, [pc, #36]	@ (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe f93a 	bl	8001d04 <HAL_InitTick>

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40023c00 	.word	0x40023c00
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	0800a1a4 	.word	0x0800a1a4
 8003aa8:	20000048 	.word	0x20000048
 8003aac:	20000064 	.word	0x20000064

08003ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ab4:	b090      	sub	sp, #64	@ 0x40
 8003ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	637b      	str	r3, [r7, #52]	@ 0x34
 8003abc:	2300      	movs	r3, #0
 8003abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ac8:	4b59      	ldr	r3, [pc, #356]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 030c 	and.w	r3, r3, #12
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d00d      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	f200 80a1 	bhi.w	8003c1c <HAL_RCC_GetSysClockFreq+0x16c>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d003      	beq.n	8003aea <HAL_RCC_GetSysClockFreq+0x3a>
 8003ae2:	e09b      	b.n	8003c1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ae4:	4b53      	ldr	r3, [pc, #332]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003ae8:	e09b      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aea:	4b53      	ldr	r3, [pc, #332]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x188>)
 8003aec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003aee:	e098      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003af0:	4b4f      	ldr	r3, [pc, #316]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003af8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003afa:	4b4d      	ldr	r3, [pc, #308]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d028      	beq.n	8003b58 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b06:	4b4a      	ldr	r3, [pc, #296]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	099b      	lsrs	r3, r3, #6
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	623b      	str	r3, [r7, #32]
 8003b10:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4b47      	ldr	r3, [pc, #284]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b1c:	fb03 f201 	mul.w	r2, r3, r1
 8003b20:	2300      	movs	r3, #0
 8003b22:	fb00 f303 	mul.w	r3, r0, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	4a43      	ldr	r2, [pc, #268]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b2a:	fba0 1202 	umull	r1, r2, r0, r2
 8003b2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b30:	460a      	mov	r2, r1
 8003b32:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b36:	4413      	add	r3, r2
 8003b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	61fa      	str	r2, [r7, #28]
 8003b42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b4a:	f7fc fb4d 	bl	80001e8 <__aeabi_uldivmod>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4613      	mov	r3, r2
 8003b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b56:	e053      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b58:	4b35      	ldr	r3, [pc, #212]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	099b      	lsrs	r3, r3, #6
 8003b5e:	2200      	movs	r2, #0
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	617a      	str	r2, [r7, #20]
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b6a:	f04f 0b00 	mov.w	fp, #0
 8003b6e:	4652      	mov	r2, sl
 8003b70:	465b      	mov	r3, fp
 8003b72:	f04f 0000 	mov.w	r0, #0
 8003b76:	f04f 0100 	mov.w	r1, #0
 8003b7a:	0159      	lsls	r1, r3, #5
 8003b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b80:	0150      	lsls	r0, r2, #5
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	ebb2 080a 	subs.w	r8, r2, sl
 8003b8a:	eb63 090b 	sbc.w	r9, r3, fp
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b9a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b9e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ba2:	ebb2 0408 	subs.w	r4, r2, r8
 8003ba6:	eb63 0509 	sbc.w	r5, r3, r9
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	00eb      	lsls	r3, r5, #3
 8003bb4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bb8:	00e2      	lsls	r2, r4, #3
 8003bba:	4614      	mov	r4, r2
 8003bbc:	461d      	mov	r5, r3
 8003bbe:	eb14 030a 	adds.w	r3, r4, sl
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	eb45 030b 	adc.w	r3, r5, fp
 8003bc8:	607b      	str	r3, [r7, #4]
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	028b      	lsls	r3, r1, #10
 8003bda:	4621      	mov	r1, r4
 8003bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003be0:	4621      	mov	r1, r4
 8003be2:	028a      	lsls	r2, r1, #10
 8003be4:	4610      	mov	r0, r2
 8003be6:	4619      	mov	r1, r3
 8003be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bea:	2200      	movs	r2, #0
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	60fa      	str	r2, [r7, #12]
 8003bf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bf4:	f7fc faf8 	bl	80001e8 <__aeabi_uldivmod>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c00:	4b0b      	ldr	r3, [pc, #44]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	0c1b      	lsrs	r3, r3, #16
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003c10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c1a:	e002      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c1c:	4b05      	ldr	r3, [pc, #20]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3740      	adds	r7, #64	@ 0x40
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c2e:	bf00      	nop
 8003c30:	40023800 	.word	0x40023800
 8003c34:	00f42400 	.word	0x00f42400
 8003c38:	017d7840 	.word	0x017d7840

08003c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c40:	4b03      	ldr	r3, [pc, #12]	@ (8003c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c42:	681b      	ldr	r3, [r3, #0]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20000048 	.word	0x20000048

08003c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c58:	f7ff fff0 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	4b05      	ldr	r3, [pc, #20]	@ (8003c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	0a9b      	lsrs	r3, r3, #10
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	4903      	ldr	r1, [pc, #12]	@ (8003c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c6a:	5ccb      	ldrb	r3, [r1, r3]
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40023800 	.word	0x40023800
 8003c78:	0800a1b4 	.word	0x0800a1b4

08003c7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	f107 001c 	add.w	r0, r7, #28
 8003c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d123      	bne.n	8003cde <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003caa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003cbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d105      	bne.n	8003cd2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 faa0 	bl	8004218 <USB_CoreReset>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	73fb      	strb	r3, [r7, #15]
 8003cdc:	e01b      	b.n	8003d16 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fa94 	bl	8004218 <USB_CoreReset>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003cf4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d106      	bne.n	8003d0a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d08:	e005      	b.n	8003d16 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003d16:	7fbb      	ldrb	r3, [r7, #30]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d10b      	bne.n	8003d34 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f043 0206 	orr.w	r2, r3, #6
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f043 0220 	orr.w	r2, r3, #32
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d40:	b004      	add	sp, #16
 8003d42:	4770      	bx	lr

08003d44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f023 0201 	bic.w	r2, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d115      	bne.n	8003db4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003d94:	200a      	movs	r0, #10
 8003d96:	f7fe f805 	bl	8001da4 <HAL_Delay>
      ms += 10U;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	330a      	adds	r3, #10
 8003d9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fa2b 	bl	80041fc <USB_GetMode>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d01e      	beq.n	8003dea <USB_SetCurrentMode+0x84>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2bc7      	cmp	r3, #199	@ 0xc7
 8003db0:	d9f0      	bls.n	8003d94 <USB_SetCurrentMode+0x2e>
 8003db2:	e01a      	b.n	8003dea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d115      	bne.n	8003de6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003dc6:	200a      	movs	r0, #10
 8003dc8:	f7fd ffec 	bl	8001da4 <HAL_Delay>
      ms += 10U;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	330a      	adds	r3, #10
 8003dd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fa12 	bl	80041fc <USB_GetMode>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <USB_SetCurrentMode+0x84>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2bc7      	cmp	r3, #199	@ 0xc7
 8003de2:	d9f0      	bls.n	8003dc6 <USB_SetCurrentMode+0x60>
 8003de4:	e001      	b.n	8003dea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e005      	b.n	8003df6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2bc8      	cmp	r3, #200	@ 0xc8
 8003dee:	d101      	bne.n	8003df4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e000      	b.n	8003df6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e00:	b084      	sub	sp, #16
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b086      	sub	sp, #24
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	e009      	b.n	8003e34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	3340      	adds	r3, #64	@ 0x40
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	3301      	adds	r3, #1
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	2b0e      	cmp	r3, #14
 8003e38:	d9f2      	bls.n	8003e20 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e3a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d11c      	bne.n	8003e7c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e50:	f043 0302 	orr.w	r3, r3, #2
 8003e54:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e66:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e72:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e7a:	e00b      	b.n	8003e94 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e80:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ea0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d10d      	bne.n	8003ec4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d104      	bne.n	8003eba <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f968 	bl	8004188 <USB_SetDevSpeed>
 8003eb8:	e008      	b.n	8003ecc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003eba:	2101      	movs	r1, #1
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f963 	bl	8004188 <USB_SetDevSpeed>
 8003ec2:	e003      	b.n	8003ecc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ec4:	2103      	movs	r1, #3
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f95e 	bl	8004188 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ecc:	2110      	movs	r1, #16
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f8fa 	bl	80040c8 <USB_FlushTxFifo>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f924 	bl	800412c <USB_FlushRxFifo>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f00:	461a      	mov	r2, r3
 8003f02:	2300      	movs	r3, #0
 8003f04:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f12:	2300      	movs	r3, #0
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	e043      	b.n	8003fa0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f2e:	d118      	bne.n	8003f62 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10a      	bne.n	8003f4c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f42:	461a      	mov	r2, r3
 8003f44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	e013      	b.n	8003f74 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	e008      	b.n	8003f74 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f6e:	461a      	mov	r2, r3
 8003f70:	2300      	movs	r3, #0
 8003f72:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f80:	461a      	mov	r2, r3
 8003f82:	2300      	movs	r3, #0
 8003f84:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f92:	461a      	mov	r2, r3
 8003f94:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d3b5      	bcc.n	8003f18 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fac:	2300      	movs	r3, #0
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	e043      	b.n	800403a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fc8:	d118      	bne.n	8003ffc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10a      	bne.n	8003fe6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fdc:	461a      	mov	r2, r3
 8003fde:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	e013      	b.n	800400e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	e008      	b.n	800400e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004008:	461a      	mov	r2, r3
 800400a:	2300      	movs	r3, #0
 800400c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800401a:	461a      	mov	r2, r3
 800401c:	2300      	movs	r3, #0
 800401e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800402c:	461a      	mov	r2, r3
 800402e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004032:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	3301      	adds	r3, #1
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800403e:	461a      	mov	r2, r3
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4293      	cmp	r3, r2
 8004044:	d3b5      	bcc.n	8003fb2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004054:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004058:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004066:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004068:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800406c:	2b00      	cmp	r3, #0
 800406e:	d105      	bne.n	800407c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	f043 0210 	orr.w	r2, r3, #16
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699a      	ldr	r2, [r3, #24]
 8004080:	4b10      	ldr	r3, [pc, #64]	@ (80040c4 <USB_DevInit+0x2c4>)
 8004082:	4313      	orrs	r3, r2
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004088:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800408c:	2b00      	cmp	r3, #0
 800408e:	d005      	beq.n	800409c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	f043 0208 	orr.w	r2, r3, #8
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800409c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d107      	bne.n	80040b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80040ac:	f043 0304 	orr.w	r3, r3, #4
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040c0:	b004      	add	sp, #16
 80040c2:	4770      	bx	lr
 80040c4:	803c3800 	.word	0x803c3800

080040c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3301      	adds	r3, #1
 80040da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80040e2:	d901      	bls.n	80040e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e01b      	b.n	8004120 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	daf2      	bge.n	80040d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	019b      	lsls	r3, r3, #6
 80040f8:	f043 0220 	orr.w	r2, r3, #32
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3301      	adds	r3, #1
 8004104:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800410c:	d901      	bls.n	8004112 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e006      	b.n	8004120 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b20      	cmp	r3, #32
 800411c:	d0f0      	beq.n	8004100 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3301      	adds	r3, #1
 800413c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004144:	d901      	bls.n	800414a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e018      	b.n	800417c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	2b00      	cmp	r3, #0
 8004150:	daf2      	bge.n	8004138 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2210      	movs	r2, #16
 800415a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3301      	adds	r3, #1
 8004160:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004168:	d901      	bls.n	800416e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e006      	b.n	800417c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0310 	and.w	r3, r3, #16
 8004176:	2b10      	cmp	r3, #16
 8004178:	d0f0      	beq.n	800415c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	68f9      	ldr	r1, [r7, #12]
 80041a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041a8:	4313      	orrs	r3, r2
 80041aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b085      	sub	sp, #20
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80041d4:	f023 0303 	bic.w	r3, r3, #3
 80041d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041e8:	f043 0302 	orr.w	r3, r3, #2
 80041ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f003 0301 	and.w	r3, r3, #1
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3301      	adds	r3, #1
 8004228:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004230:	d901      	bls.n	8004236 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e01b      	b.n	800426e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	daf2      	bge.n	8004224 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f043 0201 	orr.w	r2, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3301      	adds	r3, #1
 8004252:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800425a:	d901      	bls.n	8004260 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e006      	b.n	800426e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b01      	cmp	r3, #1
 800426a:	d0f0      	beq.n	800424e <USB_CoreReset+0x36>

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <tud_hid_set_idle_cb>:
TU_ATTR_WEAK void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
  (void) instance;
  (void) protocol;
}

TU_ATTR_WEAK bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate) {
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	4603      	mov	r3, r0
 8004282:	460a      	mov	r2, r1
 8004284:	71fb      	strb	r3, [r7, #7]
 8004286:	4613      	mov	r3, r2
 8004288:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) idle_rate;
  return true;
 800428a:	2301      	movs	r3, #1
}
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <tud_hid_report_failed_cb>:
  (void) report;
  (void) len;
}

// Invoked when a transfer wasn't successful
TU_ATTR_WEAK void tud_hid_report_failed_cb(uint8_t instance, hid_report_type_t report_type, uint8_t const* report, uint16_t xferred_bytes) {
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	603a      	str	r2, [r7, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	4603      	mov	r3, r0
 80042a4:	71fb      	strb	r3, [r7, #7]
 80042a6:	460b      	mov	r3, r1
 80042a8:	71bb      	strb	r3, [r7, #6]
 80042aa:	4613      	mov	r3, r2
 80042ac:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report_type;
  (void) report;
  (void) xferred_bytes;
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
	...

080042bc <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance) {
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 80042ca:	79fa      	ldrb	r2, [r7, #7]
 80042cc:	491b      	ldr	r1, [pc, #108]	@ (800433c <tud_hid_n_ready+0x80>)
 80042ce:	4613      	mov	r3, r2
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	3301      	adds	r3, #1
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	73bb      	strb	r3, [r7, #14]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 80042de:	f001 fd61 	bl	8005da4 <tud_mounted>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d009      	beq.n	80042fc <tud_hid_n_ready+0x40>
 80042e8:	f001 fd6e 	bl	8005dc8 <tud_suspended>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f083 0301 	eor.w	r3, r3, #1
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <tud_hid_n_ready+0x40>
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <tud_hid_n_ready+0x42>
 80042fc:	2300      	movs	r3, #0
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 8004304:	2b00      	cmp	r3, #0
 8004306:	d010      	beq.n	800432a <tud_hid_n_ready+0x6e>
 8004308:	7bbb      	ldrb	r3, [r7, #14]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00d      	beq.n	800432a <tud_hid_n_ready+0x6e>
 800430e:	7bba      	ldrb	r2, [r7, #14]
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	4611      	mov	r1, r2
 8004314:	4618      	mov	r0, r3
 8004316:	f003 f91f 	bl	8007558 <usbd_edpt_busy>
 800431a:	4603      	mov	r3, r0
 800431c:	f083 0301 	eor.w	r3, r3, #1
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <tud_hid_n_ready+0x6e>
 8004326:	2301      	movs	r3, #1
 8004328:	e000      	b.n	800432c <tud_hid_n_ready+0x70>
 800432a:	2300      	movs	r3, #0
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	b2db      	uxtb	r3, r3
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20000aac 	.word	0x20000aac

08004340 <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const *report, uint16_t len) {
 8004340:	b580      	push	{r7, lr}
 8004342:	b08e      	sub	sp, #56	@ 0x38
 8004344:	af00      	add	r7, sp, #0
 8004346:	603a      	str	r2, [r7, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	4603      	mov	r3, r0
 800434c:	71fb      	strb	r3, [r7, #7]
 800434e:	460b      	mov	r3, r1
 8004350:	71bb      	strb	r3, [r7, #6]
 8004352:	4613      	mov	r3, r2
 8004354:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(instance < CFG_TUD_HID);
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <tud_hid_n_report+0x20>
 800435c:	2300      	movs	r3, #0
 800435e:	e06d      	b.n	800443c <tud_hid_n_report+0xfc>
  const uint8_t rhport = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  hidd_interface_t *p_hid = &_hidd_itf[instance];
 8004366:	79fa      	ldrb	r2, [r7, #7]
 8004368:	4613      	mov	r3, r2
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4a34      	ldr	r2, [pc, #208]	@ (8004444 <tud_hid_n_report+0x104>)
 8004372:	4413      	add	r3, r2
 8004374:	633b      	str	r3, [r7, #48]	@ 0x30
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8004376:	79fa      	ldrb	r2, [r7, #7]
 8004378:	4613      	mov	r3, r2
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	4413      	add	r3, r2
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	4a31      	ldr	r2, [pc, #196]	@ (8004448 <tud_hid_n_report+0x108>)
 8004382:	4413      	add	r3, r2
 8004384:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_hid->ep_in));
 8004386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004388:	785a      	ldrb	r2, [r3, #1]
 800438a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800438e:	4611      	mov	r1, r2
 8004390:	4618      	mov	r0, r3
 8004392:	f003 f81b 	bl	80073cc <usbd_edpt_claim>
 8004396:	4603      	mov	r3, r0
 8004398:	f083 0301 	eor.w	r3, r3, #1
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <tud_hid_n_report+0x66>
 80043a2:	2300      	movs	r3, #0
 80043a4:	e04a      	b.n	800443c <tud_hid_n_report+0xfc>

  // prepare data
  if (report_id) {
 80043a6:	79bb      	ldrb	r3, [r7, #6]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d021      	beq.n	80043f0 <tud_hid_n_report+0xb0>
    p_epbuf->epin[0] = report_id;
 80043ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ae:	79ba      	ldrb	r2, [r7, #6]
 80043b0:	741a      	strb	r2, [r3, #16]
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin + 1, CFG_TUD_HID_EP_BUFSIZE - 1, report, len));
 80043b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b4:	3310      	adds	r3, #16
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	88bb      	ldrh	r3, [r7, #4]
 80043ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80043bc:	220f      	movs	r2, #15
 80043be:	627a      	str	r2, [r7, #36]	@ 0x24
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	623a      	str	r2, [r7, #32]
 80043c4:	61fb      	str	r3, [r7, #28]
}

// This is a backport of memcpy_s from c11
TU_ATTR_ALWAYS_INLINE static inline int tu_memcpy_s(void *dest, size_t destsz, const void *src, size_t count) {
  // TODO may check if desst and src is not NULL
  if ( count > destsz ) {
 80043c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d202      	bcs.n	80043d4 <tud_hid_n_report+0x94>
    return -1;
 80043ce:	f04f 33ff 	mov.w	r3, #4294967295
 80043d2:	e005      	b.n	80043e0 <tud_hid_n_report+0xa0>
  }
  memcpy(dest, src, count);
 80043d4:	69fa      	ldr	r2, [r7, #28]
 80043d6:	6a39      	ldr	r1, [r7, #32]
 80043d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043da:	f005 fe6b 	bl	800a0b4 <memcpy>
  return 0;
 80043de:	2300      	movs	r3, #0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <tud_hid_n_report+0xa8>
 80043e4:	2300      	movs	r3, #0
 80043e6:	e029      	b.n	800443c <tud_hid_n_report+0xfc>
    len++;
 80043e8:	88bb      	ldrh	r3, [r7, #4]
 80043ea:	3301      	adds	r3, #1
 80043ec:	80bb      	strh	r3, [r7, #4]
 80043ee:	e01a      	b.n	8004426 <tud_hid_n_report+0xe6>
  } else {
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin, CFG_TUD_HID_EP_BUFSIZE, report, len));
 80043f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f2:	f103 0210 	add.w	r2, r3, #16
 80043f6:	88bb      	ldrh	r3, [r7, #4]
 80043f8:	61ba      	str	r2, [r7, #24]
 80043fa:	2210      	movs	r2, #16
 80043fc:	617a      	str	r2, [r7, #20]
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	613a      	str	r2, [r7, #16]
 8004402:	60fb      	str	r3, [r7, #12]
  if ( count > destsz ) {
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	429a      	cmp	r2, r3
 800440a:	d202      	bcs.n	8004412 <tud_hid_n_report+0xd2>
    return -1;
 800440c:	f04f 33ff 	mov.w	r3, #4294967295
 8004410:	e005      	b.n	800441e <tud_hid_n_report+0xde>
  memcpy(dest, src, count);
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	6939      	ldr	r1, [r7, #16]
 8004416:	69b8      	ldr	r0, [r7, #24]
 8004418:	f005 fe4c 	bl	800a0b4 <memcpy>
  return 0;
 800441c:	2300      	movs	r3, #0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <tud_hid_n_report+0xe6>
 8004422:	2300      	movs	r3, #0
 8004424:	e00a      	b.n	800443c <tud_hid_n_report+0xfc>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_epbuf->epin, len);
 8004426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004428:	7859      	ldrb	r1, [r3, #1]
 800442a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442c:	f103 0210 	add.w	r2, r3, #16
 8004430:	88bb      	ldrh	r3, [r7, #4]
 8004432:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8004436:	f003 f819 	bl	800746c <usbd_edpt_xfer>
 800443a:	4603      	mov	r3, r0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3738      	adds	r7, #56	@ 0x38
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20000aac 	.word	0x20000aac
 8004448:	20000ab8 	.word	0x20000ab8

0800444c <tud_hid_n_keyboard_report>:

uint8_t tud_hid_n_get_protocol(uint8_t instance) {
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	4603      	mov	r3, r0
 8004456:	71fb      	strb	r3, [r7, #7]
 8004458:	460b      	mov	r3, r1
 800445a:	71bb      	strb	r3, [r7, #6]
 800445c:	4613      	mov	r3, r2
 800445e:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;
  report.modifier = modifier;
 8004460:	797b      	ldrb	r3, [r7, #5]
 8004462:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	727b      	strb	r3, [r7, #9]

  if (keycode) {
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d007      	beq.n	800447e <tud_hid_n_keyboard_report+0x32>
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	f107 030a 	add.w	r3, r7, #10
 8004474:	6811      	ldr	r1, [r2, #0]
 8004476:	6019      	str	r1, [r3, #0]
 8004478:	8892      	ldrh	r2, [r2, #4]
 800447a:	809a      	strh	r2, [r3, #4]
 800447c:	e007      	b.n	800448e <tud_hid_n_keyboard_report+0x42>
  } else {
    tu_memclr(report.keycode, 6);
 800447e:	f107 0308 	add.w	r3, r7, #8
 8004482:	3302      	adds	r3, #2
 8004484:	2206      	movs	r2, #6
 8004486:	2100      	movs	r1, #0
 8004488:	4618      	mov	r0, r3
 800448a:	f005 fde7 	bl	800a05c <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 800448e:	f107 0208 	add.w	r2, r7, #8
 8004492:	79b9      	ldrb	r1, [r7, #6]
 8004494:	79f8      	ldrb	r0, [r7, #7]
 8004496:	2308      	movs	r3, #8
 8004498:	f7ff ff52 	bl	8004340 <tud_hid_n_report>
 800449c:	4603      	mov	r3, r0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <hidd_init>:
}

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void) {
 80044a6:	b580      	push	{r7, lr}
 80044a8:	af00      	add	r7, sp, #0
  hidd_reset(0);
 80044aa:	2000      	movs	r0, #0
 80044ac:	f000 f80a 	bl	80044c4 <hidd_reset>
}
 80044b0:	bf00      	nop
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <hidd_deinit>:

bool hidd_deinit(void) {
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  return true;
 80044b8:	2301      	movs	r3, #1
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <hidd_reset>:

void hidd_reset(uint8_t rhport) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	4603      	mov	r3, r0
 80044cc:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 80044ce:	220c      	movs	r2, #12
 80044d0:	2100      	movs	r1, #0
 80044d2:	4803      	ldr	r0, [pc, #12]	@ (80044e0 <hidd_reset+0x1c>)
 80044d4:	f005 fdc2 	bl	800a05c <memset>
}
 80044d8:	bf00      	nop
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20000aac 	.word	0x20000aac

080044e4 <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const *desc_itf, uint16_t max_len) {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b094      	sub	sp, #80	@ 0x50
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	4603      	mov	r3, r0
 80044ec:	6039      	str	r1, [r7, #0]
 80044ee:	71fb      	strb	r3, [r7, #7]
 80044f0:	4613      	mov	r3, r2
 80044f2:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	795b      	ldrb	r3, [r3, #5]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d001      	beq.n	8004500 <hidd_open+0x1c>
 80044fc:	2300      	movs	r3, #0
 80044fe:	e0ce      	b.n	800469e <hidd_open+0x1ba>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	791b      	ldrb	r3, [r3, #4]
 8004504:	461a      	mov	r2, r3
 8004506:	00d2      	lsls	r2, r2, #3
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 800450c:	3312      	adds	r3, #18
 800450e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  TU_ASSERT(max_len >= drv_len, 0);
 8004512:	88ba      	ldrh	r2, [r7, #4]
 8004514:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004518:	429a      	cmp	r2, r3
 800451a:	d20a      	bcs.n	8004532 <hidd_open+0x4e>
 800451c:	4b62      	ldr	r3, [pc, #392]	@ (80046a8 <hidd_open+0x1c4>)
 800451e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d000      	beq.n	800452e <hidd_open+0x4a>
 800452c:	be00      	bkpt	0x0000
 800452e:	2300      	movs	r3, #0
 8004530:	e0b5      	b.n	800469e <hidd_open+0x1ba>

  // Find available interface
  hidd_interface_t *p_hid;
  uint8_t hid_id;
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8004532:	2300      	movs	r3, #0
 8004534:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004538:	e011      	b.n	800455e <hidd_open+0x7a>
    p_hid = &_hidd_itf[hid_id];
 800453a:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800453e:	4613      	mov	r3, r2
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4a59      	ldr	r2, [pc, #356]	@ (80046ac <hidd_open+0x1c8>)
 8004548:	4413      	add	r3, r2
 800454a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (p_hid->ep_in == 0) {
 800454c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800454e:	785b      	ldrb	r3, [r3, #1]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d009      	beq.n	8004568 <hidd_open+0x84>
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8004554:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004558:	3301      	adds	r3, #1
 800455a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800455e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0e9      	beq.n	800453a <hidd_open+0x56>
 8004566:	e000      	b.n	800456a <hidd_open+0x86>
      break;
 8004568:	bf00      	nop
    }
  }
  TU_ASSERT(hid_id < CFG_TUD_HID, 0);
 800456a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <hidd_open+0xa4>
 8004572:	4b4d      	ldr	r3, [pc, #308]	@ (80046a8 <hidd_open+0x1c4>)
 8004574:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d000      	beq.n	8004584 <hidd_open+0xa0>
 8004582:	be00      	bkpt	0x0000
 8004584:	2300      	movs	r3, #0
 8004586:	e08a      	b.n	800469e <hidd_open+0x1ba>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_id];
 8004588:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800458c:	4613      	mov	r3, r2
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	4413      	add	r3, r2
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	4a46      	ldr	r2, [pc, #280]	@ (80046b0 <hidd_open+0x1cc>)
 8004596:	4413      	add	r3, r2
 8004598:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint8_t const *p_desc = (uint8_t const *)desc_itf;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800459e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a0:	61fb      	str	r3, [r7, #28]
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 80045b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b4:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	3301      	adds	r3, #1
 80045ba:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 80045bc:	2b21      	cmp	r3, #33	@ 0x21
 80045be:	d00a      	beq.n	80045d6 <hidd_open+0xf2>
 80045c0:	4b39      	ldr	r3, [pc, #228]	@ (80046a8 <hidd_open+0x1c4>)
 80045c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d000      	beq.n	80045d2 <hidd_open+0xee>
 80045d0:	be00      	bkpt	0x0000
 80045d2:	2300      	movs	r3, #0
 80045d4:	e063      	b.n	800469e <hidd_open+0x1ba>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *)p_desc;
 80045d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80045da:	609a      	str	r2, [r3, #8]
 80045dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045de:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	461a      	mov	r2, r3
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 80045ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	7919      	ldrb	r1, [r3, #4]
 80045f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045f6:	3302      	adds	r3, #2
 80045f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045fa:	3201      	adds	r2, #1
 80045fc:	79f8      	ldrb	r0, [r7, #7]
 80045fe:	9201      	str	r2, [sp, #4]
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	2303      	movs	r3, #3
 8004604:	460a      	mov	r2, r1
 8004606:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004608:	f002 fe32 	bl	8007270 <usbd_open_edpt_pair>
 800460c:	4603      	mov	r3, r0
 800460e:	f083 0301 	eor.w	r3, r3, #1
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <hidd_open+0x14a>
 8004618:	4b23      	ldr	r3, [pc, #140]	@ (80046a8 <hidd_open+0x1c4>)
 800461a:	633b      	str	r3, [r7, #48]	@ 0x30
 800461c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d000      	beq.n	800462a <hidd_open+0x146>
 8004628:	be00      	bkpt	0x0000
 800462a:	2300      	movs	r3, #0
 800462c:	e037      	b.n	800469e <hidd_open+0x1ba>

  if (desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT) {
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	799b      	ldrb	r3, [r3, #6]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d103      	bne.n	800463e <hidd_open+0x15a>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	79da      	ldrb	r2, [r3, #7]
 800463a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800463c:	70da      	strb	r2, [r3, #3]
  }

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 800463e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004640:	2201      	movs	r2, #1
 8004642:	719a      	strb	r2, [r3, #6]
  p_hid->itf_num = desc_itf->bInterfaceNumber;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	789a      	ldrb	r2, [r3, #2]
 8004648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800464a:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const *)p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 800464c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	3307      	adds	r3, #7
 8004652:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	881a      	ldrh	r2, [r3, #0]
 8004658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800465a:	809a      	strh	r2, [r3, #4]

  // Prepare for output endpoint
  if (p_hid->ep_out) {
 800465c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800465e:	789b      	ldrb	r3, [r3, #2]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01a      	beq.n	800469a <hidd_open+0x1b6>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE), drv_len);
 8004664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004666:	7899      	ldrb	r1, [r3, #2]
 8004668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800466a:	f103 0220 	add.w	r2, r3, #32
 800466e:	79f8      	ldrb	r0, [r7, #7]
 8004670:	2310      	movs	r3, #16
 8004672:	f002 fefb 	bl	800746c <usbd_edpt_xfer>
 8004676:	4603      	mov	r3, r0
 8004678:	f083 0301 	eor.w	r3, r3, #1
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00b      	beq.n	800469a <hidd_open+0x1b6>
 8004682:	4b09      	ldr	r3, [pc, #36]	@ (80046a8 <hidd_open+0x1c4>)
 8004684:	637b      	str	r3, [r7, #52]	@ 0x34
 8004686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d000      	beq.n	8004694 <hidd_open+0x1b0>
 8004692:	be00      	bkpt	0x0000
 8004694:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004698:	e001      	b.n	800469e <hidd_open+0x1ba>
  }

  return drv_len;
 800469a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3748      	adds	r7, #72	@ 0x48
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	e000edf0 	.word	0xe000edf0
 80046ac:	20000aac 	.word	0x20000aac
 80046b0:	20000ab8 	.word	0x20000ab8

080046b4 <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b094      	sub	sp, #80	@ 0x50
 80046b8:	af02      	add	r7, sp, #8
 80046ba:	4603      	mov	r3, r0
 80046bc:	603a      	str	r2, [r7, #0]
 80046be:	71fb      	strb	r3, [r7, #7]
 80046c0:	460b      	mov	r3, r1
 80046c2:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	f003 031f 	and.w	r3, r3, #31
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d001      	beq.n	80046d6 <hidd_control_xfer_cb+0x22>
 80046d2:	2300      	movs	r3, #0
 80046d4:	e1d6      	b.n	8004a84 <hidd_control_xfer_cb+0x3d0>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	889b      	ldrh	r3, [r3, #4]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 80046e0:	2300      	movs	r3, #0
 80046e2:	77bb      	strb	r3, [r7, #30]
 80046e4:	e00f      	b.n	8004706 <hidd_control_xfer_cb+0x52>
    if (itf_num == _hidd_itf[i].itf_num) {
 80046e6:	7fba      	ldrb	r2, [r7, #30]
 80046e8:	498f      	ldr	r1, [pc, #572]	@ (8004928 <hidd_control_xfer_cb+0x274>)
 80046ea:	4613      	mov	r3, r2
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	4413      	add	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	440b      	add	r3, r1
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	7ffa      	ldrb	r2, [r7, #31]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d101      	bne.n	8004700 <hidd_control_xfer_cb+0x4c>
      return i;
 80046fc:	7fbb      	ldrb	r3, [r7, #30]
 80046fe:	e006      	b.n	800470e <hidd_control_xfer_cb+0x5a>
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8004700:	7fbb      	ldrb	r3, [r7, #30]
 8004702:	3301      	adds	r3, #1
 8004704:	77bb      	strb	r3, [r7, #30]
 8004706:	7fbb      	ldrb	r3, [r7, #30]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0ec      	beq.n	80046e6 <hidd_control_xfer_cb+0x32>
  return 0xFF;
 800470c:	23ff      	movs	r3, #255	@ 0xff
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 800470e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 8004712:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <hidd_control_xfer_cb+0x6a>
 800471a:	2300      	movs	r3, #0
 800471c:	e1b2      	b.n	8004a84 <hidd_control_xfer_cb+0x3d0>
  hidd_interface_t *p_hid = &_hidd_itf[hid_itf];
 800471e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004722:	4613      	mov	r3, r2
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4a7f      	ldr	r2, [pc, #508]	@ (8004928 <hidd_control_xfer_cb+0x274>)
 800472c:	4413      	add	r3, r2
 800472e:	637b      	str	r3, [r7, #52]	@ 0x34
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_itf];
 8004730:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004734:	4613      	mov	r3, r2
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	4413      	add	r3, r2
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	4a7b      	ldr	r2, [pc, #492]	@ (800492c <hidd_control_xfer_cb+0x278>)
 800473e:	4413      	add	r3, r2
 8004740:	633b      	str	r3, [r7, #48]	@ 0x30

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) {
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d145      	bne.n	80047dc <hidd_control_xfer_cb+0x128>
    //------------- STD Request -------------//
    if (stage == CONTROL_STAGE_SETUP) {
 8004750:	79bb      	ldrb	r3, [r7, #6]
 8004752:	2b01      	cmp	r3, #1
 8004754:	f040 8195 	bne.w	8004a82 <hidd_control_xfer_cb+0x3ce>
      uint8_t const desc_type = tu_u16_high(request->wValue);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	885b      	ldrh	r3, [r3, #2]
 800475c:	b29b      	uxth	r3, r3
 800475e:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8004760:	8bbb      	ldrh	r3, [r7, #28]
 8004762:	0a1b      	lsrs	r3, r3, #8
 8004764:	b29b      	uxth	r3, r3
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID) {
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	785b      	ldrb	r3, [r3, #1]
 8004770:	2b06      	cmp	r3, #6
 8004772:	d11b      	bne.n	80047ac <hidd_control_xfer_cb+0xf8>
 8004774:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004778:	2b21      	cmp	r3, #33	@ 0x21
 800477a:	d117      	bne.n	80047ac <hidd_control_xfer_cb+0xf8>
        TU_VERIFY(p_hid->hid_descriptor);
 800477c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <hidd_control_xfer_cb+0xd4>
 8004784:	2300      	movs	r3, #0
 8004786:	e17d      	b.n	8004a84 <hidd_control_xfer_cb+0x3d0>
        TU_VERIFY(tud_control_xfer(rhport, request, (void *)(uintptr_t)p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 8004788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	79f8      	ldrb	r0, [r7, #7]
 8004794:	6839      	ldr	r1, [r7, #0]
 8004796:	f003 f851 	bl	800783c <tud_control_xfer>
 800479a:	4603      	mov	r3, r0
 800479c:	f083 0301 	eor.w	r3, r3, #1
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 816d 	beq.w	8004a82 <hidd_control_xfer_cb+0x3ce>
 80047a8:	2300      	movs	r3, #0
 80047aa:	e16b      	b.n	8004a84 <hidd_control_xfer_cb+0x3d0>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	785b      	ldrb	r3, [r3, #1]
 80047b0:	2b06      	cmp	r3, #6
 80047b2:	d111      	bne.n	80047d8 <hidd_control_xfer_cb+0x124>
 80047b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047b8:	2b22      	cmp	r3, #34	@ 0x22
 80047ba:	d10d      	bne.n	80047d8 <hidd_control_xfer_cb+0x124>
        uint8_t const *desc_report = tud_hid_descriptor_report_cb(hid_itf);
 80047bc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fd f99b 	bl	8001afc <tud_hid_descriptor_report_cb>
 80047c6:	6238      	str	r0, [r7, #32]
        tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_report, p_hid->report_desc_len);
 80047c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ca:	889b      	ldrh	r3, [r3, #4]
 80047cc:	79f8      	ldrb	r0, [r7, #7]
 80047ce:	6a3a      	ldr	r2, [r7, #32]
 80047d0:	6839      	ldr	r1, [r7, #0]
 80047d2:	f003 f833 	bl	800783c <tud_control_xfer>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 80047d6:	e154      	b.n	8004a82 <hidd_control_xfer_cb+0x3ce>
      } else {
        return false; // stall unsupported request
 80047d8:	2300      	movs	r3, #0
 80047da:	e153      	b.n	8004a84 <hidd_control_xfer_cb+0x3d0>
      }
    }
  } else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS) {
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	f040 813e 	bne.w	8004a68 <hidd_control_xfer_cb+0x3b4>
    //------------- Class Specific Request -------------//
    switch (request->bRequest) {
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	785b      	ldrb	r3, [r3, #1]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	2b0a      	cmp	r3, #10
 80047f4:	f200 8136 	bhi.w	8004a64 <hidd_control_xfer_cb+0x3b0>
 80047f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004800 <hidd_control_xfer_cb+0x14c>)
 80047fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fe:	bf00      	nop
 8004800:	0800482d 	.word	0x0800482d
 8004804:	08004a03 	.word	0x08004a03
 8004808:	08004a19 	.word	0x08004a19
 800480c:	08004a65 	.word	0x08004a65
 8004810:	08004a65 	.word	0x08004a65
 8004814:	08004a65 	.word	0x08004a65
 8004818:	08004a65 	.word	0x08004a65
 800481c:	08004a65 	.word	0x08004a65
 8004820:	08004903 	.word	0x08004903
 8004824:	080049bd 	.word	0x080049bd
 8004828:	08004a2f 	.word	0x08004a2f
      case HID_REQ_CONTROL_GET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 800482c:	79bb      	ldrb	r3, [r7, #6]
 800482e:	2b01      	cmp	r3, #1
 8004830:	f040 811c 	bne.w	8004a6c <hidd_control_xfer_cb+0x3b8>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	885b      	ldrh	r3, [r3, #2]
 8004838:	b29b      	uxth	r3, r3
 800483a:	82bb      	strh	r3, [r7, #20]
 800483c:	8abb      	ldrh	r3, [r7, #20]
 800483e:	0a1b      	lsrs	r3, r3, #8
 8004840:	b29b      	uxth	r3, r3
 8004842:	b2db      	uxtb	r3, r3
 8004844:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          uint8_t const report_id = tu_u16_low(request->wValue);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	885b      	ldrh	r3, [r3, #2]
 800484c:	b29b      	uxth	r3, r3
 800484e:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8004850:	8afb      	ldrh	r3, [r7, #22]
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

          uint8_t* report_buf = p_epbuf->ctrl;
 8004858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485a:	647b      	str	r3, [r7, #68]	@ 0x44
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	88db      	ldrh	r3, [r3, #6]
 8004860:	b29b      	uxth	r3, r3
 8004862:	837b      	strh	r3, [r7, #26]
 8004864:	2310      	movs	r3, #16
 8004866:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8004868:	8b7a      	ldrh	r2, [r7, #26]
 800486a:	8b3b      	ldrh	r3, [r7, #24]
 800486c:	4293      	cmp	r3, r2
 800486e:	bf28      	it	cs
 8004870:	4613      	movcs	r3, r2
 8004872:	b29b      	uxth	r3, r3
 8004874:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          uint16_t xferlen = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ((report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1)) {
 800487e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004882:	2b00      	cmp	r3, #0
 8004884:	d013      	beq.n	80048ae <hidd_control_xfer_cb+0x1fa>
 8004886:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800488a:	2b01      	cmp	r3, #1
 800488c:	d90f      	bls.n	80048ae <hidd_control_xfer_cb+0x1fa>
            *report_buf++ = report_id;
 800488e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	647a      	str	r2, [r7, #68]	@ 0x44
 8004894:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004898:	701a      	strb	r2, [r3, #0]
            req_len--;
 800489a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800489e:	3b01      	subs	r3, #1
 80048a0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            xferlen++;
 80048a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80048a8:	3301      	adds	r3, #1
 80048aa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 80048ae:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80048b2:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80048b6:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 80048ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048c2:	f7fb ff7d 	bl	80007c0 <tud_hid_get_report_cb>
 80048c6:	4603      	mov	r3, r0
 80048c8:	461a      	mov	r2, r3
 80048ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80048ce:	4413      	add	r3, r2
 80048d0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          TU_ASSERT(xferlen > 0);
 80048d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10a      	bne.n	80048f2 <hidd_control_xfer_cb+0x23e>
 80048dc:	4b14      	ldr	r3, [pc, #80]	@ (8004930 <hidd_control_xfer_cb+0x27c>)
 80048de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d000      	beq.n	80048ee <hidd_control_xfer_cb+0x23a>
 80048ec:	be00      	bkpt	0x0000
 80048ee:	2300      	movs	r3, #0
 80048f0:	e0c8      	b.n	8004a84 <hidd_control_xfer_cb+0x3d0>

          tud_control_xfer(rhport, request, p_epbuf->ctrl, xferlen);
 80048f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80048f8:	79f8      	ldrb	r0, [r7, #7]
 80048fa:	6839      	ldr	r1, [r7, #0]
 80048fc:	f002 ff9e 	bl	800783c <tud_control_xfer>
        }
        break;
 8004900:	e0b4      	b.n	8004a6c <hidd_control_xfer_cb+0x3b8>

      case HID_REQ_CONTROL_SET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8004902:	79bb      	ldrb	r3, [r7, #6]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d115      	bne.n	8004934 <hidd_control_xfer_cb+0x280>
          TU_VERIFY(request->wLength <= CFG_TUD_HID_EP_BUFSIZE);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	88db      	ldrh	r3, [r3, #6]
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b10      	cmp	r3, #16
 8004910:	d901      	bls.n	8004916 <hidd_control_xfer_cb+0x262>
 8004912:	2300      	movs	r3, #0
 8004914:	e0b6      	b.n	8004a84 <hidd_control_xfer_cb+0x3d0>
          tud_control_xfer(rhport, request, p_epbuf->ctrl, request->wLength);
 8004916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	88db      	ldrh	r3, [r3, #6]
 800491c:	b29b      	uxth	r3, r3
 800491e:	79f8      	ldrb	r0, [r7, #7]
 8004920:	6839      	ldr	r1, [r7, #0]
 8004922:	f002 ff8b 	bl	800783c <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
        break;
 8004926:	e0a3      	b.n	8004a70 <hidd_control_xfer_cb+0x3bc>
 8004928:	20000aac 	.word	0x20000aac
 800492c:	20000ab8 	.word	0x20000ab8
 8004930:	e000edf0 	.word	0xe000edf0
        } else if (stage == CONTROL_STAGE_ACK) {
 8004934:	79bb      	ldrb	r3, [r7, #6]
 8004936:	2b03      	cmp	r3, #3
 8004938:	f040 809a 	bne.w	8004a70 <hidd_control_xfer_cb+0x3bc>
          uint8_t const report_type = tu_u16_high(request->wValue);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	885b      	ldrh	r3, [r3, #2]
 8004940:	b29b      	uxth	r3, r3
 8004942:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8004944:	89bb      	ldrh	r3, [r7, #12]
 8004946:	0a1b      	lsrs	r3, r3, #8
 8004948:	b29b      	uxth	r3, r3
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          uint8_t const report_id = tu_u16_low(request->wValue);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	885b      	ldrh	r3, [r3, #2]
 8004954:	b29b      	uxth	r3, r3
 8004956:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8004958:	89fb      	ldrh	r3, [r7, #14]
 800495a:	b2db      	uxtb	r3, r3
 800495c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          uint8_t const* report_buf = p_epbuf->ctrl;
 8004960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004962:	63fb      	str	r3, [r7, #60]	@ 0x3c
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	88db      	ldrh	r3, [r3, #6]
 8004968:	b29b      	uxth	r3, r3
 800496a:	827b      	strh	r3, [r7, #18]
 800496c:	2310      	movs	r3, #16
 800496e:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8004970:	8a7a      	ldrh	r2, [r7, #18]
 8004972:	8a3b      	ldrh	r3, [r7, #16]
 8004974:	4293      	cmp	r3, r2
 8004976:	bf28      	it	cs
 8004978:	4613      	movcs	r3, r2
 800497a:	b29b      	uxth	r3, r3
 800497c:	877b      	strh	r3, [r7, #58]	@ 0x3a
          if ((report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0])) {
 800497e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00e      	beq.n	80049a4 <hidd_control_xfer_cb+0x2f0>
 8004986:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004988:	2b01      	cmp	r3, #1
 800498a:	d90b      	bls.n	80049a4 <hidd_control_xfer_cb+0x2f0>
 800498c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8004994:	429a      	cmp	r2, r3
 8004996:	d105      	bne.n	80049a4 <hidd_control_xfer_cb+0x2f0>
            report_buf++;
 8004998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800499a:	3301      	adds	r3, #1
 800499c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            report_len--;
 800499e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80049a0:	3b01      	subs	r3, #1
 80049a2:	877b      	strh	r3, [r7, #58]	@ 0x3a
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 80049a4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80049a8:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 80049ac:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 80049b0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049b6:	f7fb ff14 	bl	80007e2 <tud_hid_set_report_cb>
        break;
 80049ba:	e059      	b.n	8004a70 <hidd_control_xfer_cb+0x3bc>

      case HID_REQ_CONTROL_SET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 80049bc:	79bb      	ldrb	r3, [r7, #6]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d158      	bne.n	8004a74 <hidd_control_xfer_cb+0x3c0>
          p_hid->idle_rate = tu_u16_high(request->wValue);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	885b      	ldrh	r3, [r3, #2]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80049ca:	897b      	ldrh	r3, [r7, #10]
 80049cc:	0a1b      	lsrs	r3, r3, #8
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049d4:	71da      	strb	r2, [r3, #7]
          TU_VERIFY(tud_hid_set_idle_cb(hid_itf, p_hid->idle_rate)); // stall if false
 80049d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049d8:	79da      	ldrb	r2, [r3, #7]
 80049da:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80049de:	4611      	mov	r1, r2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fc4a 	bl	800427a <tud_hid_set_idle_cb>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f083 0301 	eor.w	r3, r3, #1
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <hidd_control_xfer_cb+0x342>
 80049f2:	2300      	movs	r3, #0
 80049f4:	e046      	b.n	8004a84 <hidd_control_xfer_cb+0x3d0>
          tud_control_status(rhport, request);
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	6839      	ldr	r1, [r7, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f002 feac 	bl	8007758 <tud_control_status>
        }
        break;
 8004a00:	e038      	b.n	8004a74 <hidd_control_xfer_cb+0x3c0>

      case HID_REQ_CONTROL_GET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8004a02:	79bb      	ldrb	r3, [r7, #6]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d137      	bne.n	8004a78 <hidd_control_xfer_cb+0x3c4>
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 8004a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a0a:	1dda      	adds	r2, r3, #7
 8004a0c:	79f8      	ldrb	r0, [r7, #7]
 8004a0e:	2301      	movs	r3, #1
 8004a10:	6839      	ldr	r1, [r7, #0]
 8004a12:	f002 ff13 	bl	800783c <tud_control_xfer>
        }
        break;
 8004a16:	e02f      	b.n	8004a78 <hidd_control_xfer_cb+0x3c4>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8004a18:	79bb      	ldrb	r3, [r7, #6]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d12e      	bne.n	8004a7c <hidd_control_xfer_cb+0x3c8>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 8004a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a20:	1d9a      	adds	r2, r3, #6
 8004a22:	79f8      	ldrb	r0, [r7, #7]
 8004a24:	2301      	movs	r3, #1
 8004a26:	6839      	ldr	r1, [r7, #0]
 8004a28:	f002 ff08 	bl	800783c <tud_control_xfer>
        }
        break;
 8004a2c:	e026      	b.n	8004a7c <hidd_control_xfer_cb+0x3c8>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8004a2e:	79bb      	ldrb	r3, [r7, #6]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d105      	bne.n	8004a40 <hidd_control_xfer_cb+0x38c>
          tud_control_status(rhport, request);
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	6839      	ldr	r1, [r7, #0]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f002 fe8d 	bl	8007758 <tud_control_status>
        } else if (stage == CONTROL_STAGE_ACK) {
          p_hid->protocol_mode = (uint8_t) request->wValue;
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
        }
        break;
 8004a3e:	e01f      	b.n	8004a80 <hidd_control_xfer_cb+0x3cc>
        } else if (stage == CONTROL_STAGE_ACK) {
 8004a40:	79bb      	ldrb	r3, [r7, #6]
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d11c      	bne.n	8004a80 <hidd_control_xfer_cb+0x3cc>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	885b      	ldrh	r3, [r3, #2]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a50:	719a      	strb	r2, [r3, #6]
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 8004a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a54:	799a      	ldrb	r2, [r3, #6]
 8004a56:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fb fe93 	bl	8000788 <tud_hid_set_protocol_cb>
        break;
 8004a62:	e00d      	b.n	8004a80 <hidd_control_xfer_cb+0x3cc>

      default:
        return false; // stall unsupported request
 8004a64:	2300      	movs	r3, #0
 8004a66:	e00d      	b.n	8004a84 <hidd_control_xfer_cb+0x3d0>
    }
  } else {
    return false; // stall unsupported request
 8004a68:	2300      	movs	r3, #0
 8004a6a:	e00b      	b.n	8004a84 <hidd_control_xfer_cb+0x3d0>
        break;
 8004a6c:	bf00      	nop
 8004a6e:	e008      	b.n	8004a82 <hidd_control_xfer_cb+0x3ce>
        break;
 8004a70:	bf00      	nop
 8004a72:	e006      	b.n	8004a82 <hidd_control_xfer_cb+0x3ce>
        break;
 8004a74:	bf00      	nop
 8004a76:	e004      	b.n	8004a82 <hidd_control_xfer_cb+0x3ce>
        break;
 8004a78:	bf00      	nop
 8004a7a:	e002      	b.n	8004a82 <hidd_control_xfer_cb+0x3ce>
        break;
 8004a7c:	bf00      	nop
 8004a7e:	e000      	b.n	8004a82 <hidd_control_xfer_cb+0x3ce>
        break;
 8004a80:	bf00      	nop
  }

  return true;
 8004a82:	2301      	movs	r3, #1
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3748      	adds	r7, #72	@ 0x48
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08a      	sub	sp, #40	@ 0x28
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	4603      	mov	r3, r0
 8004a96:	71fb      	strb	r3, [r7, #7]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	71bb      	strb	r3, [r7, #6]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	717b      	strb	r3, [r7, #5]
  uint8_t instance;
  hidd_interface_t *p_hid;

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	77fb      	strb	r3, [r7, #31]
 8004aa4:	e014      	b.n	8004ad0 <hidd_xfer_cb+0x44>
    p_hid = &_hidd_itf[instance];
 8004aa6:	7ffa      	ldrb	r2, [r7, #31]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	4413      	add	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4a3e      	ldr	r2, [pc, #248]	@ (8004bac <hidd_xfer_cb+0x120>)
 8004ab2:	4413      	add	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in)) {
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	789b      	ldrb	r3, [r3, #2]
 8004aba:	79ba      	ldrb	r2, [r7, #6]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d00a      	beq.n	8004ad6 <hidd_xfer_cb+0x4a>
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	785b      	ldrb	r3, [r3, #1]
 8004ac4:	79ba      	ldrb	r2, [r7, #6]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d005      	beq.n	8004ad6 <hidd_xfer_cb+0x4a>
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8004aca:	7ffb      	ldrb	r3, [r7, #31]
 8004acc:	3301      	adds	r3, #1
 8004ace:	77fb      	strb	r3, [r7, #31]
 8004ad0:	7ffb      	ldrb	r3, [r7, #31]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0e7      	beq.n	8004aa6 <hidd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 8004ad6:	7ffb      	ldrb	r3, [r7, #31]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <hidd_xfer_cb+0x66>
 8004adc:	4b34      	ldr	r3, [pc, #208]	@ (8004bb0 <hidd_xfer_cb+0x124>)
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d000      	beq.n	8004aee <hidd_xfer_cb+0x62>
 8004aec:	be00      	bkpt	0x0000
 8004aee:	2300      	movs	r3, #0
 8004af0:	e057      	b.n	8004ba2 <hidd_xfer_cb+0x116>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8004af2:	7ffa      	ldrb	r2, [r7, #31]
 8004af4:	4613      	mov	r3, r2
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	4413      	add	r3, r2
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	4a2d      	ldr	r2, [pc, #180]	@ (8004bb4 <hidd_xfer_cb+0x128>)
 8004afe:	4413      	add	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

  if (ep_addr == p_hid->ep_in) {
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	785b      	ldrb	r3, [r3, #1]
 8004b06:	79ba      	ldrb	r2, [r7, #6]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d116      	bne.n	8004b3a <hidd_xfer_cb+0xae>
    // Input report
    if (XFER_RESULT_SUCCESS == result) {
 8004b0c:	797b      	ldrb	r3, [r7, #5]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d109      	bne.n	8004b26 <hidd_xfer_cb+0x9a>
      tud_hid_report_complete_cb(instance, p_epbuf->epin, (uint16_t) xferred_bytes);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f103 0110 	add.w	r1, r3, #16
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	7ffb      	ldrb	r3, [r7, #31]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fb fe40 	bl	80007a4 <tud_hid_report_complete_cb>
 8004b24:	e03c      	b.n	8004ba0 <hidd_xfer_cb+0x114>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_INPUT, p_epbuf->epin, (uint16_t) xferred_bytes);
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f103 0210 	add.w	r2, r3, #16
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	7ff8      	ldrb	r0, [r7, #31]
 8004b32:	2101      	movs	r1, #1
 8004b34:	f7ff fbb0 	bl	8004298 <tud_hid_report_failed_cb>
 8004b38:	e032      	b.n	8004ba0 <hidd_xfer_cb+0x114>
    }
  } else {
    // Output report
    if (XFER_RESULT_SUCCESS == result) {
 8004b3a:	797b      	ldrb	r3, [r7, #5]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10c      	bne.n	8004b5a <hidd_xfer_cb+0xce>
      tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t)xferred_bytes);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f103 0220 	add.w	r2, r3, #32
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	7ff8      	ldrb	r0, [r7, #31]
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	2202      	movs	r2, #2
 8004b52:	2100      	movs	r1, #0
 8004b54:	f7fb fe45 	bl	80007e2 <tud_hid_set_report_cb>
 8004b58:	e008      	b.n	8004b6c <hidd_xfer_cb+0xe0>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t) xferred_bytes);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f103 0220 	add.w	r2, r3, #32
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	7ff8      	ldrb	r0, [r7, #31]
 8004b66:	2102      	movs	r1, #2
 8004b68:	f7ff fb96 	bl	8004298 <tud_hid_report_failed_cb>
    }

    // prepare for new transfer
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE));
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	7899      	ldrb	r1, [r3, #2]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f103 0220 	add.w	r2, r3, #32
 8004b76:	79f8      	ldrb	r0, [r7, #7]
 8004b78:	2310      	movs	r3, #16
 8004b7a:	f002 fc77 	bl	800746c <usbd_edpt_xfer>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	f083 0301 	eor.w	r3, r3, #1
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <hidd_xfer_cb+0x114>
 8004b8a:	4b09      	ldr	r3, [pc, #36]	@ (8004bb0 <hidd_xfer_cb+0x124>)
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d000      	beq.n	8004b9c <hidd_xfer_cb+0x110>
 8004b9a:	be00      	bkpt	0x0000
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	e000      	b.n	8004ba2 <hidd_xfer_cb+0x116>
  }

  return true;
 8004ba0:	2301      	movs	r3, #1
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3720      	adds	r7, #32
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000aac 	.word	0x20000aac
 8004bb0:	e000edf0 	.word	0xe000edf0
 8004bb4:	20000ab8 	.word	0x20000ab8

08004bb8 <tud_vendor_n_mounted>:

//--------------------------------------------------------------------
// Application API
//--------------------------------------------------------------------

bool tud_vendor_n_mounted(uint8_t itf) {
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	71fb      	strb	r3, [r7, #7]
  TU_VERIFY(itf < CFG_TUD_VENDOR);
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <tud_vendor_n_mounted+0x14>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	e015      	b.n	8004bf8 <tud_vendor_n_mounted+0x40>
  vendord_interface_t* p_itf = &_vendord_itf[itf];
 8004bcc:	79fb      	ldrb	r3, [r7, #7]
 8004bce:	22ac      	movs	r2, #172	@ 0xac
 8004bd0:	fb02 f303 	mul.w	r3, r2, r3
 8004bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8004c04 <tud_vendor_n_mounted+0x4c>)
 8004bd6:	4413      	add	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]
  return p_itf->rx.stream.ep_addr || p_itf->tx.stream.ep_addr;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d103      	bne.n	8004bec <tud_vendor_n_mounted+0x34>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	795b      	ldrb	r3, [r3, #5]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <tud_vendor_n_mounted+0x38>
 8004bec:	2301      	movs	r3, #1
 8004bee:	e000      	b.n	8004bf2 <tud_vendor_n_mounted+0x3a>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	b2db      	uxtb	r3, r3
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	20000ae8 	.word	0x20000ae8

08004c08 <tud_vendor_n_write_flush>:
  const uint8_t rhport = 0;

  return tu_edpt_stream_write(rhport, &p_itf->tx.stream, buffer, (uint16_t) bufsize);
}

uint32_t tud_vendor_n_write_flush (uint8_t itf) {
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	71fb      	strb	r3, [r7, #7]
  TU_VERIFY(itf < CFG_TUD_VENDOR, 0);
 8004c12:	79fb      	ldrb	r3, [r7, #7]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <tud_vendor_n_write_flush+0x14>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	e010      	b.n	8004c3e <tud_vendor_n_write_flush+0x36>
  vendord_interface_t* p_itf = &_vendord_itf[itf];
 8004c1c:	79fb      	ldrb	r3, [r7, #7]
 8004c1e:	22ac      	movs	r2, #172	@ 0xac
 8004c20:	fb02 f303 	mul.w	r3, r2, r3
 8004c24:	4a08      	ldr	r2, [pc, #32]	@ (8004c48 <tud_vendor_n_write_flush+0x40>)
 8004c26:	4413      	add	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]
  const uint8_t rhport = 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	72fb      	strb	r3, [r7, #11]

  return tu_edpt_stream_write_xfer(rhport, &p_itf->tx.stream);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1d1a      	adds	r2, r3, #4
 8004c32:	7afb      	ldrb	r3, [r7, #11]
 8004c34:	4611      	mov	r1, r2
 8004c36:	4618      	mov	r0, r3
 8004c38:	f005 f87c 	bl	8009d34 <tu_edpt_stream_write_xfer>
 8004c3c:	4603      	mov	r3, r0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20000ae8 	.word	0x20000ae8

08004c4c <vendord_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void vendord_init(void) {
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08a      	sub	sp, #40	@ 0x28
 8004c50:	af04      	add	r7, sp, #16
  tu_memclr(_vendord_itf, sizeof(_vendord_itf));
 8004c52:	22ac      	movs	r2, #172	@ 0xac
 8004c54:	2100      	movs	r1, #0
 8004c56:	4821      	ldr	r0, [pc, #132]	@ (8004cdc <vendord_init+0x90>)
 8004c58:	f005 fa00 	bl	800a05c <memset>

  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	75fb      	strb	r3, [r7, #23]
 8004c60:	e034      	b.n	8004ccc <vendord_init+0x80>
    vendord_interface_t* p_itf = &_vendord_itf[i];
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
 8004c64:	22ac      	movs	r2, #172	@ 0xac
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8004cdc <vendord_init+0x90>)
 8004c6c:	4413      	add	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
    vendord_epbuf_t* p_epbuf = &_vendord_epbuf[i];
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
 8004c72:	01db      	lsls	r3, r3, #7
 8004c74:	4a1a      	ldr	r2, [pc, #104]	@ (8004ce0 <vendord_init+0x94>)
 8004c76:	4413      	add	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]

    uint8_t* rx_ff_buf =
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	336c      	adds	r3, #108	@ 0x6c
 8004c7e:	60bb      	str	r3, [r7, #8]
                          p_itf->rx.ff_buf;
                        #else
                          NULL;
                        #endif

    tu_edpt_stream_init(&p_itf->rx.stream, false, false, false,
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f103 0058 	add.w	r0, r3, #88	@ 0x58
                        rx_ff_buf, CFG_TUD_VENDOR_RX_BUFSIZE,
                        p_epbuf->epout, CFG_TUD_VENDOR_EPSIZE);
 8004c86:	68fb      	ldr	r3, [r7, #12]
    tu_edpt_stream_init(&p_itf->rx.stream, false, false, false,
 8004c88:	2240      	movs	r2, #64	@ 0x40
 8004c8a:	9203      	str	r2, [sp, #12]
 8004c8c:	9302      	str	r3, [sp, #8]
 8004c8e:	2340      	movs	r3, #64	@ 0x40
 8004c90:	9301      	str	r3, [sp, #4]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	2300      	movs	r3, #0
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	f004 ff9d 	bl	8009bda <tu_edpt_stream_init>

    uint8_t* tx_ff_buf =
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	3318      	adds	r3, #24
 8004ca4:	607b      	str	r3, [r7, #4]
                          p_itf->tx.ff_buf;
                        #else
                          NULL;
                        #endif

    tu_edpt_stream_init(&p_itf->tx.stream, false, true, false,
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1d18      	adds	r0, r3, #4
                        tx_ff_buf, CFG_TUD_VENDOR_TX_BUFSIZE,
                        p_epbuf->epin, CFG_TUD_VENDOR_EPSIZE);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3340      	adds	r3, #64	@ 0x40
    tu_edpt_stream_init(&p_itf->tx.stream, false, true, false,
 8004cae:	2240      	movs	r2, #64	@ 0x40
 8004cb0:	9203      	str	r2, [sp, #12]
 8004cb2:	9302      	str	r3, [sp, #8]
 8004cb4:	2340      	movs	r3, #64	@ 0x40
 8004cb6:	9301      	str	r3, [sp, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	f004 ff8a 	bl	8009bda <tu_edpt_stream_init>
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8004cc6:	7dfb      	ldrb	r3, [r7, #23]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	75fb      	strb	r3, [r7, #23]
 8004ccc:	7dfb      	ldrb	r3, [r7, #23]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0c7      	beq.n	8004c62 <vendord_init+0x16>
  }
}
 8004cd2:	bf00      	nop
 8004cd4:	bf00      	nop
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20000ae8 	.word	0x20000ae8
 8004ce0:	20000b94 	.word	0x20000b94

08004ce4 <vendord_deinit>:

bool vendord_deinit(void) {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8004cea:	2300      	movs	r3, #0
 8004cec:	71fb      	strb	r3, [r7, #7]
 8004cee:	e013      	b.n	8004d18 <vendord_deinit+0x34>
    vendord_interface_t* p_itf = &_vendord_itf[i];
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
 8004cf2:	22ac      	movs	r2, #172	@ 0xac
 8004cf4:	fb02 f303 	mul.w	r3, r2, r3
 8004cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8004d28 <vendord_deinit+0x44>)
 8004cfa:	4413      	add	r3, r2
 8004cfc:	603b      	str	r3, [r7, #0]
    tu_edpt_stream_deinit(&p_itf->rx.stream);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	3358      	adds	r3, #88	@ 0x58
 8004d02:	4618      	mov	r0, r3
 8004d04:	f004 ff91 	bl	8009c2a <tu_edpt_stream_deinit>
    tu_edpt_stream_deinit(&p_itf->tx.stream);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f004 ff8c 	bl	8009c2a <tu_edpt_stream_deinit>
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8004d12:	79fb      	ldrb	r3, [r7, #7]
 8004d14:	3301      	adds	r3, #1
 8004d16:	71fb      	strb	r3, [r7, #7]
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0e8      	beq.n	8004cf0 <vendord_deinit+0xc>
  }
  return true;
 8004d1e:	2301      	movs	r3, #1
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	20000ae8 	.word	0x20000ae8

08004d2c <vendord_reset>:

void vendord_reset(uint8_t rhport) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4603      	mov	r3, r0
 8004d34:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8004d36:	2300      	movs	r3, #0
 8004d38:	77fb      	strb	r3, [r7, #31]
 8004d3a:	e02c      	b.n	8004d96 <vendord_reset+0x6a>
    vendord_interface_t* p_itf = &_vendord_itf[i];
 8004d3c:	7ffb      	ldrb	r3, [r7, #31]
 8004d3e:	22ac      	movs	r2, #172	@ 0xac
 8004d40:	fb02 f303 	mul.w	r3, r2, r3
 8004d44:	4a18      	ldr	r2, [pc, #96]	@ (8004da8 <vendord_reset+0x7c>)
 8004d46:	4413      	add	r3, r2
 8004d48:	61bb      	str	r3, [r7, #24]
    tu_memclr(p_itf, ITF_MEM_RESET_SIZE);
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	69b8      	ldr	r0, [r7, #24]
 8004d50:	f005 f984 	bl	800a05c <memset>
    tu_edpt_stream_clear(&p_itf->rx.stream);
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	3358      	adds	r3, #88	@ 0x58
 8004d58:	60bb      	str	r3, [r7, #8]
}

// Clear fifo
TU_ATTR_ALWAYS_INLINE static inline
bool tu_edpt_stream_clear(tu_edpt_stream_t* s) {
  return tu_fifo_clear(&s->ff);
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 ffb7 	bl	8005cd2 <tu_fifo_clear>
    tu_edpt_stream_clear(&p_itf->tx.stream);
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	3304      	adds	r3, #4
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3308      	adds	r3, #8
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 ffaf 	bl	8005cd2 <tu_fifo_clear>
    tu_edpt_stream_close(&p_itf->rx.stream);
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	3358      	adds	r3, #88	@ 0x58
 8004d78:	613b      	str	r3, [r7, #16]
  s->ep_addr = 0;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	705a      	strb	r2, [r3, #1]
}
 8004d80:	bf00      	nop
    tu_edpt_stream_close(&p_itf->tx.stream);
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	3304      	adds	r3, #4
 8004d86:	617b      	str	r3, [r7, #20]
  s->ep_addr = 0;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	705a      	strb	r2, [r3, #1]
}
 8004d8e:	bf00      	nop
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8004d90:	7ffb      	ldrb	r3, [r7, #31]
 8004d92:	3301      	adds	r3, #1
 8004d94:	77fb      	strb	r3, [r7, #31]
 8004d96:	7ffb      	ldrb	r3, [r7, #31]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0cf      	beq.n	8004d3c <vendord_reset+0x10>
  }
}
 8004d9c:	bf00      	nop
 8004d9e:	bf00      	nop
 8004da0:	3720      	adds	r7, #32
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20000ae8 	.word	0x20000ae8

08004dac <vendord_open>:

uint16_t vendord_open(uint8_t rhport, const tusb_desc_interface_t* desc_itf, uint16_t max_len) {
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b09c      	sub	sp, #112	@ 0x70
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	4603      	mov	r3, r0
 8004db4:	6039      	str	r1, [r7, #0]
 8004db6:	71fb      	strb	r3, [r7, #7]
 8004db8:	4613      	mov	r3, r2
 8004dba:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_VENDOR_SPECIFIC == desc_itf->bInterfaceClass, 0);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	795b      	ldrb	r3, [r3, #5]
 8004dc0:	2bff      	cmp	r3, #255	@ 0xff
 8004dc2:	d001      	beq.n	8004dc8 <vendord_open+0x1c>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e114      	b.n	8004ff2 <vendord_open+0x246>
  const uint8_t* desc_end = (const uint8_t*)desc_itf + max_len;
 8004dc8:	88bb      	ldrh	r3, [r7, #4]
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	4413      	add	r3, r2
 8004dce:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004dd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004de0:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(desc_itf);
 8004de2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  // Find available interface
  vendord_interface_t* p_vendor = NULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	66bb      	str	r3, [r7, #104]	@ 0x68
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8004de8:	2300      	movs	r3, #0
 8004dea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004dee:	e018      	b.n	8004e22 <vendord_open+0x76>
    if (!tud_vendor_n_mounted(i)) {
 8004df0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff fedf 	bl	8004bb8 <tud_vendor_n_mounted>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	f083 0301 	eor.w	r3, r3, #1
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d008      	beq.n	8004e18 <vendord_open+0x6c>
      p_vendor = &_vendord_itf[i];
 8004e06:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004e0a:	22ac      	movs	r2, #172	@ 0xac
 8004e0c:	fb02 f303 	mul.w	r3, r2, r3
 8004e10:	4a7a      	ldr	r2, [pc, #488]	@ (8004ffc <vendord_open+0x250>)
 8004e12:	4413      	add	r3, r2
 8004e14:	66bb      	str	r3, [r7, #104]	@ 0x68
      break;
 8004e16:	e008      	b.n	8004e2a <vendord_open+0x7e>
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8004e18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004e22:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0e2      	beq.n	8004df0 <vendord_open+0x44>
    }
  }
  TU_VERIFY(p_vendor, 0);
 8004e2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <vendord_open+0x88>
 8004e30:	2300      	movs	r3, #0
 8004e32:	e0de      	b.n	8004ff2 <vendord_open+0x246>

  p_vendor->itf_num = desc_itf->bInterfaceNumber;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	789a      	ldrb	r2, [r3, #2]
 8004e38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e3a:	701a      	strb	r2, [r3, #0]
  while (tu_desc_is_valid(p_desc, desc_end)) {
 8004e3c:	e0b8      	b.n	8004fb0 <vendord_open+0x204>
 8004e3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e40:	647b      	str	r3, [r7, #68]	@ 0x44
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004e42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e44:	3301      	adds	r3, #1
 8004e46:	781b      	ldrb	r3, [r3, #0]
    const uint8_t desc_type = tu_desc_type(p_desc);
 8004e48:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (desc_type == TUSB_DESC_INTERFACE || desc_type == TUSB_DESC_INTERFACE_ASSOCIATION) {
 8004e4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	f000 80ca 	beq.w	8004fea <vendord_open+0x23e>
 8004e56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004e5a:	2b0b      	cmp	r3, #11
 8004e5c:	f000 80c5 	beq.w	8004fea <vendord_open+0x23e>
      break; // end of this interface
    } else if (desc_type == TUSB_DESC_ENDPOINT) {
 8004e60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004e64:	2b05      	cmp	r3, #5
 8004e66:	f040 8099 	bne.w	8004f9c <vendord_open+0x1f0>
      const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 8004e6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e6c:	65bb      	str	r3, [r7, #88]	@ 0x58
      TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004e72:	4618      	mov	r0, r3
 8004e74:	f002 fa64 	bl	8007340 <usbd_edpt_open>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f083 0301 	eor.w	r3, r3, #1
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00a      	beq.n	8004e9a <vendord_open+0xee>
 8004e84:	4b5e      	ldr	r3, [pc, #376]	@ (8005000 <vendord_open+0x254>)
 8004e86:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d000      	beq.n	8004e96 <vendord_open+0xea>
 8004e94:	be00      	bkpt	0x0000
 8004e96:	2300      	movs	r3, #0
 8004e98:	e0ab      	b.n	8004ff2 <vendord_open+0x246>

      // open endpoint stream, skip if already opened
      if (tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN) {
 8004e9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e9c:	789b      	ldrb	r3, [r3, #2]
 8004e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004ea2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004ea6:	09db      	lsrs	r3, r3, #7
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d139      	bne.n	8004f22 <vendord_open+0x176>
        if (p_vendor->tx.stream.ep_addr == 0) {
 8004eae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004eb0:	795b      	ldrb	r3, [r3, #5]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d172      	bne.n	8004f9c <vendord_open+0x1f0>
          tu_edpt_stream_open(&p_vendor->tx.stream, desc_ep);
 8004eb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004eb8:	3304      	adds	r3, #4
 8004eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ebc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
  tu_fifo_clear(&s->ff);
 8004ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 ff04 	bl	8005cd2 <tu_fifo_clear>
  s->ep_addr = desc_ep->bEndpointAddress;
 8004eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ecc:	789a      	ldrb	r2, [r3, #2]
 8004ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ed0:	705a      	strb	r2, [r3, #1]
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed4:	637b      	str	r3, [r7, #52]	@ 0x34
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8004ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed8:	889b      	ldrh	r3, [r3, #4]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ee0:	b29b      	uxth	r3, r3
  s->is_mps512 = (tu_edpt_packet_size(desc_ep) == 512) ? 1 : 0;
 8004ee2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ee6:	bf0c      	ite	eq
 8004ee8:	2301      	moveq	r3, #1
 8004eea:	2300      	movne	r3, #0
 8004eec:	b2d9      	uxtb	r1, r3
 8004eee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ef0:	7813      	ldrb	r3, [r2, #0]
 8004ef2:	f361 0341 	bfi	r3, r1, #1, #1
 8004ef6:	7013      	strb	r3, [r2, #0]
}
 8004ef8:	bf00      	nop
          tud_vendor_n_write_flush((uint8_t)(p_vendor - _vendord_itf));
 8004efa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004efc:	4a3f      	ldr	r2, [pc, #252]	@ (8004ffc <vendord_open+0x250>)
 8004efe:	1a9b      	subs	r3, r3, r2
 8004f00:	1099      	asrs	r1, r3, #2
 8004f02:	460a      	mov	r2, r1
 8004f04:	0052      	lsls	r2, r2, #1
 8004f06:	440a      	add	r2, r1
 8004f08:	01d3      	lsls	r3, r2, #7
 8004f0a:	1a9b      	subs	r3, r3, r2
 8004f0c:	039a      	lsls	r2, r3, #14
 8004f0e:	4413      	add	r3, r2
 8004f10:	019b      	lsls	r3, r3, #6
 8004f12:	440b      	add	r3, r1
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	440b      	add	r3, r1
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff fe74 	bl	8004c08 <tud_vendor_n_write_flush>
 8004f20:	e03c      	b.n	8004f9c <vendord_open+0x1f0>
        }
      } else {
        if (p_vendor->rx.stream.ep_addr == 0) {
 8004f22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f24:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d137      	bne.n	8004f9c <vendord_open+0x1f0>
          tu_edpt_stream_open(&p_vendor->rx.stream, desc_ep);
 8004f2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f2e:	3358      	adds	r3, #88	@ 0x58
 8004f30:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tu_fifo_clear(&s->ff);
 8004f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f38:	3308      	adds	r3, #8
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fec9 	bl	8005cd2 <tu_fifo_clear>
  s->ep_addr = desc_ep->bEndpointAddress;
 8004f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f42:	789a      	ldrb	r2, [r3, #2]
 8004f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f46:	705a      	strb	r2, [r3, #1]
 8004f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4e:	889b      	ldrh	r3, [r3, #4]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f56:	b29b      	uxth	r3, r3
  s->is_mps512 = (tu_edpt_packet_size(desc_ep) == 512) ? 1 : 0;
 8004f58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f5c:	bf0c      	ite	eq
 8004f5e:	2301      	moveq	r3, #1
 8004f60:	2300      	movne	r3, #0
 8004f62:	b2d9      	uxtb	r1, r3
 8004f64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f66:	7813      	ldrb	r3, [r2, #0]
 8004f68:	f361 0341 	bfi	r3, r1, #1, #1
 8004f6c:	7013      	strb	r3, [r2, #0]
}
 8004f6e:	bf00      	nop
          TU_ASSERT(tu_edpt_stream_read_xfer(rhport, &p_vendor->rx.stream) > 0, 0); // prepare for incoming data
 8004f70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f72:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8004f76:	79fb      	ldrb	r3, [r7, #7]
 8004f78:	4611      	mov	r1, r2
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f004 ff60 	bl	8009e40 <tu_edpt_stream_read_xfer>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10a      	bne.n	8004f9c <vendord_open+0x1f0>
 8004f86:	4b1e      	ldr	r3, [pc, #120]	@ (8005000 <vendord_open+0x254>)
 8004f88:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d000      	beq.n	8004f98 <vendord_open+0x1ec>
 8004f96:	be00      	bkpt	0x0000
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e02a      	b.n	8004ff2 <vendord_open+0x246>
 8004f9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa2:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	4413      	add	r3, r2
        }
      }
    }

    p_desc = tu_desc_next(p_desc);
 8004fae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fb6:	61bb      	str	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_subtype(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_SUBTYPE];
}

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_is_valid(void const* desc, uint8_t const* desc_end) {
  const uint8_t* desc8 = (uint8_t const*) desc;
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	617b      	str	r3, [r7, #20]
  return (desc8 < desc_end) && (tu_desc_next(desc) <= desc_end);
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d90d      	bls.n	8004fe0 <vendord_open+0x234>
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4413      	add	r3, r2
  return (desc8 < desc_end) && (tu_desc_next(desc) <= desc_end);
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d301      	bcc.n	8004fe0 <vendord_open+0x234>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <vendord_open+0x236>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	b2db      	uxtb	r3, r3
  while (tu_desc_is_valid(p_desc, desc_end)) {
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f47f af2a 	bne.w	8004e3e <vendord_open+0x92>
  }

  return (uint16_t) ((uintptr_t) p_desc - (uintptr_t) desc_itf);
 8004fea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	b29b      	uxth	r3, r3
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3770      	adds	r7, #112	@ 0x70
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000ae8 	.word	0x20000ae8
 8005000:	e000edf0 	.word	0xe000edf0

08005004 <vendord_xfer_cb>:

bool vendord_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af00      	add	r7, sp, #0
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	4603      	mov	r3, r0
 800500e:	71fb      	strb	r3, [r7, #7]
 8005010:	460b      	mov	r3, r1
 8005012:	71bb      	strb	r3, [r7, #6]
 8005014:	4613      	mov	r3, r2
 8005016:	717b      	strb	r3, [r7, #5]
  (void) result;

  uint8_t itf;
  vendord_interface_t* p_vendor;

  for (itf = 0; itf < CFG_TUD_VENDOR; itf++) {
 8005018:	2300      	movs	r3, #0
 800501a:	77fb      	strb	r3, [r7, #31]
 800501c:	e014      	b.n	8005048 <vendord_xfer_cb+0x44>
    p_vendor = &_vendord_itf[itf];
 800501e:	7ffb      	ldrb	r3, [r7, #31]
 8005020:	22ac      	movs	r2, #172	@ 0xac
 8005022:	fb02 f303 	mul.w	r3, r2, r3
 8005026:	4a3a      	ldr	r2, [pc, #232]	@ (8005110 <vendord_xfer_cb+0x10c>)
 8005028:	4413      	add	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_vendor->rx.stream.ep_addr) || (ep_addr == p_vendor->tx.stream.ep_addr)) {
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005032:	79ba      	ldrb	r2, [r7, #6]
 8005034:	429a      	cmp	r2, r3
 8005036:	d00a      	beq.n	800504e <vendord_xfer_cb+0x4a>
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	795b      	ldrb	r3, [r3, #5]
 800503c:	79ba      	ldrb	r2, [r7, #6]
 800503e:	429a      	cmp	r2, r3
 8005040:	d005      	beq.n	800504e <vendord_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_VENDOR; itf++) {
 8005042:	7ffb      	ldrb	r3, [r7, #31]
 8005044:	3301      	adds	r3, #1
 8005046:	77fb      	strb	r3, [r7, #31]
 8005048:	7ffb      	ldrb	r3, [r7, #31]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0e7      	beq.n	800501e <vendord_xfer_cb+0x1a>
      break;
    }
  }
  TU_VERIFY(itf < CFG_TUD_VENDOR);
 800504e:	7ffb      	ldrb	r3, [r7, #31]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <vendord_xfer_cb+0x54>
 8005054:	2300      	movs	r3, #0
 8005056:	e056      	b.n	8005106 <vendord_xfer_cb+0x102>
  vendord_epbuf_t* p_epbuf = &_vendord_epbuf[itf];
 8005058:	7ffb      	ldrb	r3, [r7, #31]
 800505a:	01db      	lsls	r3, r3, #7
 800505c:	4a2d      	ldr	r2, [pc, #180]	@ (8005114 <vendord_xfer_cb+0x110>)
 800505e:	4413      	add	r3, r2
 8005060:	617b      	str	r3, [r7, #20]

  if ( ep_addr == p_vendor->rx.stream.ep_addr ) {
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005068:	79ba      	ldrb	r2, [r7, #6]
 800506a:	429a      	cmp	r2, r3
 800506c:	d129      	bne.n	80050c2 <vendord_xfer_cb+0xbe>
    // Received new data: put into stream's fifo
    tu_edpt_stream_read_xfer_complete(&p_vendor->rx.stream, xferred_bytes);
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	3358      	adds	r3, #88	@ 0x58
 8005072:	613b      	str	r3, [r7, #16]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	60fb      	str	r3, [r7, #12]
uint32_t tu_edpt_stream_read_xfer(uint8_t hwid, tu_edpt_stream_t* s);

// Complete read transfer by writing EP -> FIFO. Must be called in the transfer complete callback
TU_ATTR_ALWAYS_INLINE static inline
void tu_edpt_stream_read_xfer_complete(tu_edpt_stream_t* s, uint32_t xferred_bytes) {
  if (tu_fifo_depth(&s->ff)) {
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	3308      	adds	r3, #8
 800507c:	60bb      	str	r3, [r7, #8]
bool     tu_fifo_overflowed             (tu_fifo_t* f);
void     tu_fifo_correct_read_pointer   (tu_fifo_t* f);

TU_ATTR_ALWAYS_INLINE static inline
uint16_t tu_fifo_depth(tu_fifo_t* f) {
  return f->depth;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	889b      	ldrh	r3, [r3, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d009      	beq.n	800509a <vendord_xfer_cb+0x96>
    tu_fifo_write_n(&s->ff, s->ep_buf, (uint16_t) xferred_bytes);
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f103 0008 	add.w	r0, r3, #8
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	b292      	uxth	r2, r2
 8005094:	4619      	mov	r1, r3
 8005096:	f000 fdf8 	bl	8005c8a <tu_fifo_write_n>
  }
}
 800509a:	bf00      	nop

    // Invoked callback if any
    if (tud_vendor_rx_cb) {
 800509c:	4b1e      	ldr	r3, [pc, #120]	@ (8005118 <vendord_xfer_cb+0x114>)
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d006      	beq.n	80050b0 <vendord_xfer_cb+0xac>
      tud_vendor_rx_cb(itf, p_epbuf->epout, (uint16_t) xferred_bytes);
 80050a2:	6979      	ldr	r1, [r7, #20]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	7ffb      	ldrb	r3, [r7, #31]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f3af 8000 	nop.w
    }

    tu_edpt_stream_read_xfer(rhport, &p_vendor->rx.stream);
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 80050b6:	79fb      	ldrb	r3, [r7, #7]
 80050b8:	4611      	mov	r1, r2
 80050ba:	4618      	mov	r0, r3
 80050bc:	f004 fec0 	bl	8009e40 <tu_edpt_stream_read_xfer>
 80050c0:	e020      	b.n	8005104 <vendord_xfer_cb+0x100>
  } else if ( ep_addr == p_vendor->tx.stream.ep_addr ) {
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	795b      	ldrb	r3, [r3, #5]
 80050c6:	79ba      	ldrb	r2, [r7, #6]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d11b      	bne.n	8005104 <vendord_xfer_cb+0x100>
    // Send complete
    if (tud_vendor_tx_cb) {
 80050cc:	4b13      	ldr	r3, [pc, #76]	@ (800511c <vendord_xfer_cb+0x118>)
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d007      	beq.n	80050e2 <vendord_xfer_cb+0xde>
      tud_vendor_tx_cb(itf, (uint16_t) xferred_bytes);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	461a      	mov	r2, r3
 80050d8:	7ffb      	ldrb	r3, [r7, #31]
 80050da:	4611      	mov	r1, r2
 80050dc:	4618      	mov	r0, r3
 80050de:	f3af 8000 	nop.w
    }

    #if CFG_TUD_VENDOR_TX_BUFSIZE > 0
    // try to send more if possible
    if ( 0 == tu_edpt_stream_write_xfer(rhport, &p_vendor->tx.stream) ) {
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	1d1a      	adds	r2, r3, #4
 80050e6:	79fb      	ldrb	r3, [r7, #7]
 80050e8:	4611      	mov	r1, r2
 80050ea:	4618      	mov	r0, r3
 80050ec:	f004 fe22 	bl	8009d34 <tu_edpt_stream_write_xfer>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <vendord_xfer_cb+0x100>
      // If there is no data left, a ZLP should be sent if xferred_bytes is multiple of EP Packet size and not zero
      tu_edpt_stream_write_zlp_if_needed(rhport, &p_vendor->tx.stream, xferred_bytes);
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	1d19      	adds	r1, r3, #4
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f004 fd9e 	bl	8009c40 <tu_edpt_stream_write_zlp_if_needed>
    }
    #endif
  }

  return true;
 8005104:	2301      	movs	r3, #1
}
 8005106:	4618      	mov	r0, r3
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000ae8 	.word	0x20000ae8
 8005114:	20000b94 	.word	0x20000b94
	...

08005120 <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	4611      	mov	r1, r2
 800512c:	461a      	mov	r2, r3
 800512e:	460b      	mov	r3, r1
 8005130:	80fb      	strh	r3, [r7, #6]
 8005132:	4613      	mov	r3, r2
 8005134:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8005136:	88fb      	ldrh	r3, [r7, #6]
 8005138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800513c:	d901      	bls.n	8005142 <tu_fifo_config+0x22>
 800513e:	2300      	movs	r3, #0
 8005140:	e01b      	b.n	800517a <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	88fa      	ldrh	r2, [r7, #6]
 800514c:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800514e:	88bb      	ldrh	r3, [r7, #4]
 8005150:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005154:	b299      	uxth	r1, r3
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	88d3      	ldrh	r3, [r2, #6]
 800515a:	f361 030e 	bfi	r3, r1, #0, #15
 800515e:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	79d3      	ldrb	r3, [r2, #7]
 8005164:	7e39      	ldrb	r1, [r7, #24]
 8005166:	f361 13c7 	bfi	r3, r1, #7, #1
 800516a:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8005178:	2301      	movs	r3, #1
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b08a      	sub	sp, #40	@ 0x28
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	4613      	mov	r3, r2
 8005192:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8005198:	88fb      	ldrh	r3, [r7, #6]
 800519a:	089b      	lsrs	r3, r3, #2
 800519c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 800519e:	e00b      	b.n	80051b8 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	61ba      	str	r2, [r7, #24]
 80051a8:	617b      	str	r3, [r7, #20]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	601a      	str	r2, [r3, #0]
}
 80051b0:	bf00      	nop
    ff_buf += 4;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3304      	adds	r3, #4
 80051b6:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 80051b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80051ba:	1e5a      	subs	r2, r3, #1
 80051bc:	84fa      	strh	r2, [r7, #38]	@ 0x26
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1ee      	bne.n	80051a0 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 80051c2:	88fb      	ldrh	r3, [r7, #6]
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80051cc:	7ffb      	ldrb	r3, [r7, #31]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d009      	beq.n	80051e6 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 80051d8:	7ffa      	ldrb	r2, [r7, #31]
 80051da:	f107 0310 	add.w	r3, r7, #16
 80051de:	4619      	mov	r1, r3
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f004 ff67 	bl	800a0b4 <memcpy>
  }
}
 80051e6:	bf00      	nop
 80051e8:	3728      	adds	r7, #40	@ 0x28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b08a      	sub	sp, #40	@ 0x28
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	4613      	mov	r3, r2
 80051fa:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8005200:	88fb      	ldrh	r3, [r7, #6]
 8005202:	089b      	lsrs	r3, r3, #2
 8005204:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8005206:	e008      	b.n	800521a <_ff_pull_const_addr+0x2c>
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	3304      	adds	r3, #4
 8005218:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 800521a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800521c:	1e5a      	subs	r2, r3, #1
 800521e:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1f1      	bne.n	8005208 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8005224:	88fb      	ldrh	r3, [r7, #6]
 8005226:	b2db      	uxtb	r3, r3
 8005228:	f003 0303 	and.w	r3, r3, #3
 800522c:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 800522e:	7ffb      	ldrb	r3, [r7, #31]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00b      	beq.n	800524c <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8005238:	7ffa      	ldrb	r2, [r7, #31]
 800523a:	f107 0314 	add.w	r3, r7, #20
 800523e:	68b9      	ldr	r1, [r7, #8]
 8005240:	4618      	mov	r0, r3
 8005242:	f004 ff37 	bl	800a0b4 <memcpy>

    *reg_tx = tmp32;
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	601a      	str	r2, [r3, #0]
  }
}
 800524c:	bf00      	nop
 800524e:	3728      	adds	r7, #40	@ 0x28
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	4613      	mov	r3, r2
 8005260:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	88fa      	ldrh	r2, [r7, #6]
 8005268:	68f9      	ldr	r1, [r7, #12]
 800526a:	88c9      	ldrh	r1, [r1, #6]
 800526c:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8005270:	b289      	uxth	r1, r1
 8005272:	fb01 f202 	mul.w	r2, r1, r2
 8005276:	1898      	adds	r0, r3, r2
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	88db      	ldrh	r3, [r3, #6]
 800527c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005280:	b29b      	uxth	r3, r3
 8005282:	461a      	mov	r2, r3
 8005284:	68b9      	ldr	r1, [r7, #8]
 8005286:	f004 ff15 	bl	800a0b4 <memcpy>
}
 800528a:	bf00      	nop
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b08e      	sub	sp, #56	@ 0x38
 8005296:	af00      	add	r7, sp, #0
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	4611      	mov	r1, r2
 800529e:	461a      	mov	r2, r3
 80052a0:	460b      	mov	r3, r1
 80052a2:	80fb      	strh	r3, [r7, #6]
 80052a4:	4613      	mov	r3, r2
 80052a6:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	889a      	ldrh	r2, [r3, #4]
 80052ac:	88bb      	ldrh	r3, [r7, #4]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 80052b2:	88fa      	ldrh	r2, [r7, #6]
 80052b4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	88db      	ldrh	r3, [r3, #6]
 80052be:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	461a      	mov	r2, r3
 80052c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80052c8:	fb13 f302 	smulbb	r3, r3, r2
 80052cc:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	88db      	ldrh	r3, [r3, #6]
 80052d2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	461a      	mov	r2, r3
 80052da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052dc:	fb13 f302 	smulbb	r3, r3, r2
 80052e0:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	88ba      	ldrh	r2, [r7, #4]
 80052e8:	68f9      	ldr	r1, [r7, #12]
 80052ea:	88c9      	ldrh	r1, [r1, #6]
 80052ec:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80052f0:	b289      	uxth	r1, r1
 80052f2:	fb01 f202 	mul.w	r2, r1, r2
 80052f6:	4413      	add	r3, r2
 80052f8:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 80052fa:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <_ff_push_n+0x76>
 8005302:	2b01      	cmp	r3, #1
 8005304:	d022      	beq.n	800534c <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 8005306:	e09e      	b.n	8005446 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8005308:	88fa      	ldrh	r2, [r7, #6]
 800530a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800530c:	429a      	cmp	r2, r3
 800530e:	d80d      	bhi.n	800532c <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	88d2      	ldrh	r2, [r2, #6]
 8005316:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800531a:	b292      	uxth	r2, r2
 800531c:	fb02 f303 	mul.w	r3, r2, r3
 8005320:	461a      	mov	r2, r3
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005326:	f004 fec5 	bl	800a0b4 <memcpy>
      break;
 800532a:	e08c      	b.n	8005446 <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 800532c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800532e:	461a      	mov	r2, r3
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005334:	f004 febe 	bl	800a0b4 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	4413      	add	r3, r2
 8005342:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005344:	4619      	mov	r1, r3
 8005346:	f004 feb5 	bl	800a0b4 <memcpy>
      break;
 800534a:	e07c      	b.n	8005446 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 800534c:	88fa      	ldrh	r2, [r7, #6]
 800534e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005350:	429a      	cmp	r2, r3
 8005352:	d80f      	bhi.n	8005374 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	88db      	ldrh	r3, [r3, #6]
 8005358:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800535c:	b29b      	uxth	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	fb13 f302 	smulbb	r3, r3, r2
 8005366:	b29b      	uxth	r3, r3
 8005368:	461a      	mov	r2, r3
 800536a:	68b9      	ldr	r1, [r7, #8]
 800536c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800536e:	f7ff ff0a 	bl	8005186 <_ff_push_const_addr>
      break;
 8005372:	e067      	b.n	8005444 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8005374:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005376:	f023 0303 	bic.w	r3, r3, #3
 800537a:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 800537c:	8c3b      	ldrh	r3, [r7, #32]
 800537e:	461a      	mov	r2, r3
 8005380:	68b9      	ldr	r1, [r7, #8]
 8005382:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005384:	f7ff feff 	bl	8005186 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8005388:	8c3b      	ldrh	r3, [r7, #32]
 800538a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800538c:	4413      	add	r3, r2
 800538e:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8005390:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005392:	b2db      	uxtb	r3, r3
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 800539c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d043      	beq.n	800542c <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 80053a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f1c3 0304 	rsb	r3, r3, #4
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80053b6:	837b      	strh	r3, [r7, #26]
 80053b8:	4613      	mov	r3, r2
 80053ba:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80053bc:	8b7a      	ldrh	r2, [r7, #26]
 80053be:	8b3b      	ldrh	r3, [r7, #24]
 80053c0:	4293      	cmp	r3, r2
 80053c2:	bf28      	it	cs
 80053c4:	4613      	movcs	r3, r2
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 80053cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 80053de:	f107 0314 	add.w	r3, r7, #20
 80053e2:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 80053e4:	e007      	b.n	80053f6 <_ff_push_n+0x164>
 80053e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053e8:	1c53      	adds	r3, r2, #1
 80053ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ee:	1c59      	adds	r1, r3, #1
 80053f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80053f2:	7812      	ldrb	r2, [r2, #0]
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80053fa:	1e5a      	subs	r2, r3, #1
 80053fc:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1f0      	bne.n	80053e6 <_ff_push_n+0x154>
          ff_buf = f->buffer;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 800540a:	e007      	b.n	800541c <_ff_push_n+0x18a>
 800540c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800540e:	1c53      	adds	r3, r2, #1
 8005410:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005414:	1c59      	adds	r1, r3, #1
 8005416:	6339      	str	r1, [r7, #48]	@ 0x30
 8005418:	7812      	ldrb	r2, [r2, #0]
 800541a:	701a      	strb	r2, [r3, #0]
 800541c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005420:	1e5a      	subs	r2, r3, #1
 8005422:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1f0      	bne.n	800540c <_ff_push_n+0x17a>
 800542a:	e002      	b.n	8005432 <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8005432:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <_ff_push_n+0x1b2>
 8005438:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800543a:	461a      	mov	r2, r3
 800543c:	68b9      	ldr	r1, [r7, #8]
 800543e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005440:	f7ff fea1 	bl	8005186 <_ff_push_const_addr>
      break;
 8005444:	bf00      	nop
  }
}
 8005446:	bf00      	nop
 8005448:	3738      	adds	r7, #56	@ 0x38
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b084      	sub	sp, #16
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	4613      	mov	r3, r2
 800545a:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	88fa      	ldrh	r2, [r7, #6]
 8005462:	68f9      	ldr	r1, [r7, #12]
 8005464:	88c9      	ldrh	r1, [r1, #6]
 8005466:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800546a:	b289      	uxth	r1, r1
 800546c:	fb01 f202 	mul.w	r2, r1, r2
 8005470:	1899      	adds	r1, r3, r2
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	88db      	ldrh	r3, [r3, #6]
 8005476:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800547a:	b29b      	uxth	r3, r3
 800547c:	461a      	mov	r2, r3
 800547e:	68b8      	ldr	r0, [r7, #8]
 8005480:	f004 fe18 	bl	800a0b4 <memcpy>
}
 8005484:	bf00      	nop
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08e      	sub	sp, #56	@ 0x38
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	4611      	mov	r1, r2
 8005498:	461a      	mov	r2, r3
 800549a:	460b      	mov	r3, r1
 800549c:	80fb      	strh	r3, [r7, #6]
 800549e:	4613      	mov	r3, r2
 80054a0:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	889a      	ldrh	r2, [r3, #4]
 80054a6:	88bb      	ldrh	r3, [r7, #4]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 80054ac:	88fa      	ldrh	r2, [r7, #6]
 80054ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	88db      	ldrh	r3, [r3, #6]
 80054b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80054bc:	b29b      	uxth	r3, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80054c2:	fb13 f302 	smulbb	r3, r3, r2
 80054c6:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	88db      	ldrh	r3, [r3, #6]
 80054cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	461a      	mov	r2, r3
 80054d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80054d6:	fb13 f302 	smulbb	r3, r3, r2
 80054da:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	88ba      	ldrh	r2, [r7, #4]
 80054e2:	68f9      	ldr	r1, [r7, #12]
 80054e4:	88c9      	ldrh	r1, [r1, #6]
 80054e6:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80054ea:	b289      	uxth	r1, r1
 80054ec:	fb01 f202 	mul.w	r2, r1, r2
 80054f0:	4413      	add	r3, r2
 80054f2:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 80054f4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <_ff_pull_n+0x76>
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d022      	beq.n	8005546 <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 8005500:	e0a0      	b.n	8005644 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8005502:	88fa      	ldrh	r2, [r7, #6]
 8005504:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005506:	429a      	cmp	r2, r3
 8005508:	d80d      	bhi.n	8005526 <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 800550a:	88fb      	ldrh	r3, [r7, #6]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	88d2      	ldrh	r2, [r2, #6]
 8005510:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8005514:	b292      	uxth	r2, r2
 8005516:	fb02 f303 	mul.w	r3, r2, r3
 800551a:	461a      	mov	r2, r3
 800551c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800551e:	68b8      	ldr	r0, [r7, #8]
 8005520:	f004 fdc8 	bl	800a0b4 <memcpy>
    break;
 8005524:	e08e      	b.n	8005644 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 8005526:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005528:	461a      	mov	r2, r3
 800552a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800552c:	68b8      	ldr	r0, [r7, #8]
 800552e:	f004 fdc1 	bl	800a0b4 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8005532:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	18d0      	adds	r0, r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800553e:	4619      	mov	r1, r3
 8005540:	f004 fdb8 	bl	800a0b4 <memcpy>
    break;
 8005544:	e07e      	b.n	8005644 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8005546:	88fa      	ldrh	r2, [r7, #6]
 8005548:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800554a:	429a      	cmp	r2, r3
 800554c:	d80f      	bhi.n	800556e <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	88db      	ldrh	r3, [r3, #6]
 8005552:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005556:	b29b      	uxth	r3, r3
 8005558:	461a      	mov	r2, r3
 800555a:	88fb      	ldrh	r3, [r7, #6]
 800555c:	fb13 f302 	smulbb	r3, r3, r2
 8005560:	b29b      	uxth	r3, r3
 8005562:	461a      	mov	r2, r3
 8005564:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005566:	68b8      	ldr	r0, [r7, #8]
 8005568:	f7ff fe41 	bl	80051ee <_ff_pull_const_addr>
    break;
 800556c:	e069      	b.n	8005642 <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 800556e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005570:	f023 0303 	bic.w	r3, r3, #3
 8005574:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 8005576:	8c3b      	ldrh	r3, [r7, #32]
 8005578:	461a      	mov	r2, r3
 800557a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800557c:	68b8      	ldr	r0, [r7, #8]
 800557e:	f7ff fe36 	bl	80051ee <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 8005582:	8c3b      	ldrh	r3, [r7, #32]
 8005584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005586:	4413      	add	r3, r2
 8005588:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 800558a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800558c:	b2db      	uxtb	r3, r3
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8005596:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800559a:	2b00      	cmp	r3, #0
 800559c:	d045      	beq.n	800562a <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 80055a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	f1c3 0304 	rsb	r3, r3, #4
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80055b0:	837b      	strh	r3, [r7, #26]
 80055b2:	4613      	mov	r3, r2
 80055b4:	833b      	strh	r3, [r7, #24]
 80055b6:	8b7a      	ldrh	r2, [r7, #26]
 80055b8:	8b3b      	ldrh	r3, [r7, #24]
 80055ba:	4293      	cmp	r3, r2
 80055bc:	bf28      	it	cs
 80055be:	4613      	movcs	r3, r2
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 80055c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 80055d6:	f107 0314 	add.w	r3, r7, #20
 80055da:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 80055dc:	e007      	b.n	80055ee <_ff_pull_n+0x162>
 80055de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055e0:	1c53      	adds	r3, r2, #1
 80055e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80055e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e6:	1c59      	adds	r1, r3, #1
 80055e8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80055ea:	7812      	ldrb	r2, [r2, #0]
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80055f2:	1e5a      	subs	r2, r3, #1
 80055f4:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1f0      	bne.n	80055de <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 8005602:	e007      	b.n	8005614 <_ff_pull_n+0x188>
 8005604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005606:	1c53      	adds	r3, r2, #1
 8005608:	633b      	str	r3, [r7, #48]	@ 0x30
 800560a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560c:	1c59      	adds	r1, r3, #1
 800560e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005610:	7812      	ldrb	r2, [r2, #0]
 8005612:	701a      	strb	r2, [r3, #0]
 8005614:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005618:	1e5a      	subs	r2, r3, #1
 800561a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f0      	bne.n	8005604 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	e002      	b.n	8005630 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8005630:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005632:	2b00      	cmp	r3, #0
 8005634:	d005      	beq.n	8005642 <_ff_pull_n+0x1b6>
 8005636:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005638:	461a      	mov	r2, r3
 800563a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800563c:	68b8      	ldr	r0, [r7, #8]
 800563e:	f7ff fdd6 	bl	80051ee <_ff_pull_const_addr>
    break;
 8005642:	bf00      	nop
  }
}
 8005644:	bf00      	nop
 8005646:	3738      	adds	r7, #56	@ 0x38
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	80fb      	strh	r3, [r7, #6]
 8005656:	460b      	mov	r3, r1
 8005658:	80bb      	strh	r3, [r7, #4]
 800565a:	4613      	mov	r3, r2
 800565c:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 800565e:	88ba      	ldrh	r2, [r7, #4]
 8005660:	887b      	ldrh	r3, [r7, #2]
 8005662:	4413      	add	r3, r2
 8005664:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8005666:	88ba      	ldrh	r2, [r7, #4]
 8005668:	89fb      	ldrh	r3, [r7, #14]
 800566a:	429a      	cmp	r2, r3
 800566c:	d804      	bhi.n	8005678 <advance_index+0x2c>
 800566e:	89fa      	ldrh	r2, [r7, #14]
 8005670:	88fb      	ldrh	r3, [r7, #6]
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	429a      	cmp	r2, r3
 8005676:	db08      	blt.n	800568a <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8005678:	88fb      	ldrh	r3, [r7, #6]
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	b29b      	uxth	r3, r3
 800567e:	425b      	negs	r3, r3
 8005680:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8005682:	89fa      	ldrh	r2, [r7, #14]
 8005684:	89bb      	ldrh	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 800568a:	89fb      	ldrh	r3, [r7, #14]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08a      	sub	sp, #40	@ 0x28
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	4611      	mov	r1, r2
 80056a4:	461a      	mov	r2, r3
 80056a6:	460b      	mov	r3, r1
 80056a8:	80fb      	strh	r3, [r7, #6]
 80056aa:	4613      	mov	r3, r2
 80056ac:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	889b      	ldrh	r3, [r3, #4]
 80056b2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80056b4:	88fb      	ldrh	r3, [r7, #6]
 80056b6:	843b      	strh	r3, [r7, #32]
 80056b8:	88bb      	ldrh	r3, [r7, #4]
 80056ba:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80056bc:	8c3a      	ldrh	r2, [r7, #32]
 80056be:	8bfb      	ldrh	r3, [r7, #30]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d304      	bcc.n	80056ce <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80056c4:	8c3a      	ldrh	r2, [r7, #32]
 80056c6:	8bfb      	ldrh	r3, [r7, #30]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	e008      	b.n	80056e0 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80056ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	8c39      	ldrh	r1, [r7, #32]
 80056d6:	8bfb      	ldrh	r3, [r7, #30]
 80056d8:	1acb      	subs	r3, r1, r3
 80056da:	b29b      	uxth	r3, r3
 80056dc:	4413      	add	r3, r2
 80056de:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80056e0:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 80056e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <_tu_fifo_peek+0x54>
 80056e8:	2300      	movs	r3, #0
 80056ea:	e037      	b.n	800575c <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	889b      	ldrh	r3, [r3, #4]
 80056f0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d91b      	bls.n	800572e <_tu_fifo_peek+0x96>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	61bb      	str	r3, [r7, #24]
 80056fa:	88fb      	ldrh	r3, [r7, #6]
 80056fc:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	889b      	ldrh	r3, [r3, #4]
 8005702:	8afa      	ldrh	r2, [r7, #22]
 8005704:	429a      	cmp	r2, r3
 8005706:	d305      	bcc.n	8005714 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	889b      	ldrh	r3, [r3, #4]
 800570c:	8afa      	ldrh	r2, [r7, #22]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	82bb      	strh	r3, [r7, #20]
 8005712:	e004      	b.n	800571e <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	889a      	ldrh	r2, [r3, #4]
 8005718:	8afb      	ldrh	r3, [r7, #22]
 800571a:	4413      	add	r3, r2
 800571c:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	8aba      	ldrh	r2, [r7, #20]
 8005722:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8005724:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8005726:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	889b      	ldrh	r3, [r3, #4]
 800572c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	889b      	ldrh	r3, [r3, #4]
 8005732:	827b      	strh	r3, [r7, #18]
 8005734:	88bb      	ldrh	r3, [r7, #4]
 8005736:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8005738:	e003      	b.n	8005742 <_tu_fifo_peek+0xaa>
 800573a:	8a3a      	ldrh	r2, [r7, #16]
 800573c:	8a7b      	ldrh	r3, [r7, #18]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	823b      	strh	r3, [r7, #16]
 8005742:	8a7a      	ldrh	r2, [r7, #18]
 8005744:	8a3b      	ldrh	r3, [r7, #16]
 8005746:	429a      	cmp	r2, r3
 8005748:	d9f7      	bls.n	800573a <_tu_fifo_peek+0xa2>
  return idx;
 800574a:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800574c:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 800574e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005750:	461a      	mov	r2, r3
 8005752:	68b9      	ldr	r1, [r7, #8]
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff fe7a 	bl	800544e <_ff_pull>

  return true;
 800575a:	2301      	movs	r3, #1
}
 800575c:	4618      	mov	r0, r3
 800575e:	3728      	adds	r7, #40	@ 0x28
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08c      	sub	sp, #48	@ 0x30
 8005768:	af02      	add	r7, sp, #8
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	4611      	mov	r1, r2
 8005770:	461a      	mov	r2, r3
 8005772:	460b      	mov	r3, r1
 8005774:	80fb      	strh	r3, [r7, #6]
 8005776:	4613      	mov	r3, r2
 8005778:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	889b      	ldrh	r3, [r3, #4]
 800577e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005780:	88bb      	ldrh	r3, [r7, #4]
 8005782:	843b      	strh	r3, [r7, #32]
 8005784:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005786:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8005788:	8c3a      	ldrh	r2, [r7, #32]
 800578a:	8bfb      	ldrh	r3, [r7, #30]
 800578c:	429a      	cmp	r2, r3
 800578e:	d304      	bcc.n	800579a <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8005790:	8c3a      	ldrh	r2, [r7, #32]
 8005792:	8bfb      	ldrh	r3, [r7, #30]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	b29b      	uxth	r3, r3
 8005798:	e008      	b.n	80057ac <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800579a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	8c39      	ldrh	r1, [r7, #32]
 80057a2:	8bfb      	ldrh	r3, [r7, #30]
 80057a4:	1acb      	subs	r3, r1, r3
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	4413      	add	r3, r2
 80057aa:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80057ac:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 80057ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <_tu_fifo_peek_n+0x54>
 80057b4:	2300      	movs	r3, #0
 80057b6:	e041      	b.n	800583c <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	889b      	ldrh	r3, [r3, #4]
 80057bc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80057be:	429a      	cmp	r2, r3
 80057c0:	d91b      	bls.n	80057fa <_tu_fifo_peek_n+0x96>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	61bb      	str	r3, [r7, #24]
 80057c6:	88bb      	ldrh	r3, [r7, #4]
 80057c8:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	889b      	ldrh	r3, [r3, #4]
 80057ce:	8afa      	ldrh	r2, [r7, #22]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d305      	bcc.n	80057e0 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	889b      	ldrh	r3, [r3, #4]
 80057d8:	8afa      	ldrh	r2, [r7, #22]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	82bb      	strh	r3, [r7, #20]
 80057de:	e004      	b.n	80057ea <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	889a      	ldrh	r2, [r3, #4]
 80057e4:	8afb      	ldrh	r3, [r7, #22]
 80057e6:	4413      	add	r3, r2
 80057e8:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	8aba      	ldrh	r2, [r7, #20]
 80057ee:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 80057f0:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 80057f2:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	889b      	ldrh	r3, [r3, #4]
 80057f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 80057fa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80057fc:	88fb      	ldrh	r3, [r7, #6]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d201      	bcs.n	8005806 <_tu_fifo_peek_n+0xa2>
 8005802:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005804:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	889b      	ldrh	r3, [r3, #4]
 800580a:	827b      	strh	r3, [r7, #18]
 800580c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800580e:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8005810:	e003      	b.n	800581a <_tu_fifo_peek_n+0xb6>
 8005812:	8a3a      	ldrh	r2, [r7, #16]
 8005814:	8a7b      	ldrh	r3, [r7, #18]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	823b      	strh	r3, [r7, #16]
 800581a:	8a7a      	ldrh	r2, [r7, #18]
 800581c:	8a3b      	ldrh	r3, [r7, #16]
 800581e:	429a      	cmp	r2, r3
 8005820:	d9f7      	bls.n	8005812 <_tu_fifo_peek_n+0xae>
  return idx;
 8005822:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8005824:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8005826:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8005828:	88fa      	ldrh	r2, [r7, #6]
 800582a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	460b      	mov	r3, r1
 8005832:	68b9      	ldr	r1, [r7, #8]
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f7ff fe29 	bl	800548c <_ff_pull_n>

  return n;
 800583a:	88fb      	ldrh	r3, [r7, #6]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3728      	adds	r7, #40	@ 0x28
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b092      	sub	sp, #72	@ 0x48
 8005848:	af02      	add	r7, sp, #8
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	4611      	mov	r1, r2
 8005850:	461a      	mov	r2, r3
 8005852:	460b      	mov	r3, r1
 8005854:	80fb      	strh	r3, [r7, #6]
 8005856:	4613      	mov	r3, r2
 8005858:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 800585a:	88fb      	ldrh	r3, [r7, #6]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <_tu_fifo_write_n+0x20>
 8005860:	2300      	movs	r3, #0
 8005862:	e0bc      	b.n	80059de <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	891b      	ldrh	r3, [r3, #8]
 8005868:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	895b      	ldrh	r3, [r3, #10]
 800586e:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	79db      	ldrb	r3, [r3, #7]
 8005878:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800587c:	b2db      	uxtb	r3, r3
 800587e:	f083 0301 	eor.w	r3, r3, #1
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d036      	beq.n	80058f6 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	889b      	ldrh	r3, [r3, #4]
 800588c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800588e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005890:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005892:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005894:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005896:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005898:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800589a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800589c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800589e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80058a0:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 80058a2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80058a4:	8c3b      	ldrh	r3, [r7, #32]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d304      	bcc.n	80058b4 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 80058aa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80058ac:	8c3b      	ldrh	r3, [r7, #32]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	e008      	b.n	80058c6 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80058b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80058bc:	8c3b      	ldrh	r3, [r7, #32]
 80058be:	1acb      	subs	r3, r1, r3
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	4413      	add	r3, r2
 80058c4:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 80058c6:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 80058c8:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80058ca:	8bfb      	ldrh	r3, [r7, #30]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d904      	bls.n	80058da <_tu_fifo_write_n+0x96>
 80058d0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80058d2:	8bfb      	ldrh	r3, [r7, #30]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	e000      	b.n	80058dc <_tu_fifo_write_n+0x98>
 80058da:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 80058dc:	867b      	strh	r3, [r7, #50]	@ 0x32
 80058de:	88fb      	ldrh	r3, [r7, #6]
 80058e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80058e2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80058e4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80058e6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80058e8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80058ea:	4293      	cmp	r3, r2
 80058ec:	bf28      	it	cs
 80058ee:	4613      	movcs	r3, r2
 80058f0:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 80058f2:	80fb      	strh	r3, [r7, #6]
 80058f4:	e04b      	b.n	800598e <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	889b      	ldrh	r3, [r3, #4]
 80058fa:	88fa      	ldrh	r2, [r7, #6]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d317      	bcc.n	8005930 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8005900:	797b      	ldrb	r3, [r7, #5]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10e      	bne.n	8005924 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	8892      	ldrh	r2, [r2, #4]
 800590c:	1a9b      	subs	r3, r3, r2
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	88d2      	ldrh	r2, [r2, #6]
 8005912:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8005916:	b292      	uxth	r2, r2
 8005918:	fb02 f303 	mul.w	r3, r2, r3
 800591c:	461a      	mov	r2, r3
 800591e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005920:	4413      	add	r3, r2
 8005922:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	889b      	ldrh	r3, [r3, #4]
 8005928:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 800592a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800592c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800592e:	e02e      	b.n	800598e <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	889b      	ldrh	r3, [r3, #4]
 8005934:	83bb      	strh	r3, [r7, #28]
 8005936:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005938:	837b      	strh	r3, [r7, #26]
 800593a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800593c:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 800593e:	8b7a      	ldrh	r2, [r7, #26]
 8005940:	8b3b      	ldrh	r3, [r7, #24]
 8005942:	429a      	cmp	r2, r3
 8005944:	d304      	bcc.n	8005950 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8005946:	8b7a      	ldrh	r2, [r7, #26]
 8005948:	8b3b      	ldrh	r3, [r7, #24]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	b29b      	uxth	r3, r3
 800594e:	e008      	b.n	8005962 <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8005950:	8bbb      	ldrh	r3, [r7, #28]
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	8b79      	ldrh	r1, [r7, #26]
 8005958:	8b3b      	ldrh	r3, [r7, #24]
 800595a:	1acb      	subs	r3, r1, r3
 800595c:	b29b      	uxth	r3, r3
 800595e:	4413      	add	r3, r2
 8005960:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8005962:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 8005964:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005966:	88fb      	ldrh	r3, [r7, #6]
 8005968:	441a      	add	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	889b      	ldrh	r3, [r3, #4]
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	429a      	cmp	r2, r3
 8005972:	db0c      	blt.n	800598e <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8898      	ldrh	r0, [r3, #4]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	889a      	ldrh	r2, [r3, #4]
 800597c:	88fb      	ldrh	r3, [r7, #6]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	b29a      	uxth	r2, r3
 8005982:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005984:	4619      	mov	r1, r3
 8005986:	f7ff fe61 	bl	800564c <advance_index>
 800598a:	4603      	mov	r3, r0
 800598c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 800598e:	88fb      	ldrh	r3, [r7, #6]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d023      	beq.n	80059dc <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	889b      	ldrh	r3, [r3, #4]
 8005998:	82fb      	strh	r3, [r7, #22]
 800599a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800599c:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 800599e:	e003      	b.n	80059a8 <_tu_fifo_write_n+0x164>
 80059a0:	8aba      	ldrh	r2, [r7, #20]
 80059a2:	8afb      	ldrh	r3, [r7, #22]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	82bb      	strh	r3, [r7, #20]
 80059a8:	8afa      	ldrh	r2, [r7, #22]
 80059aa:	8abb      	ldrh	r3, [r7, #20]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d9f7      	bls.n	80059a0 <_tu_fifo_write_n+0x15c>
  return idx;
 80059b0:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80059b2:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 80059b4:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 80059b6:	88fa      	ldrh	r2, [r7, #6]
 80059b8:	797b      	ldrb	r3, [r7, #5]
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	460b      	mov	r3, r1
 80059be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f7ff fc66 	bl	8005292 <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	889b      	ldrh	r3, [r3, #4]
 80059ca:	88fa      	ldrh	r2, [r7, #6]
 80059cc:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7ff fe3c 	bl	800564c <advance_index>
 80059d4:	4603      	mov	r3, r0
 80059d6:	461a      	mov	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 80059dc:	88fb      	ldrh	r3, [r7, #6]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3740      	adds	r7, #64	@ 0x40
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b086      	sub	sp, #24
 80059ea:	af02      	add	r7, sp, #8
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	4611      	mov	r1, r2
 80059f2:	461a      	mov	r2, r3
 80059f4:	460b      	mov	r3, r1
 80059f6:	80fb      	strh	r3, [r7, #6]
 80059f8:	4613      	mov	r3, r2
 80059fa:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	891b      	ldrh	r3, [r3, #8]
 8005a00:	b298      	uxth	r0, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	895b      	ldrh	r3, [r3, #10]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	88f9      	ldrh	r1, [r7, #6]
 8005a0a:	797a      	ldrb	r2, [r7, #5]
 8005a0c:	9201      	str	r2, [sp, #4]
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	4603      	mov	r3, r0
 8005a12:	460a      	mov	r2, r1
 8005a14:	68b9      	ldr	r1, [r7, #8]
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f7ff fea4 	bl	8005764 <_tu_fifo_peek_n>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8898      	ldrh	r0, [r3, #4]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	895b      	ldrh	r3, [r3, #10]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	88fa      	ldrh	r2, [r7, #6]
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	f7ff fe0d 	bl	800564c <advance_index>
 8005a32:	4603      	mov	r3, r0
 8005a34:	461a      	mov	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	8899      	ldrh	r1, [r3, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	891b      	ldrh	r3, [r3, #8]
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	895b      	ldrh	r3, [r3, #10]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	8279      	strh	r1, [r7, #18]
 8005a5e:	823a      	strh	r2, [r7, #16]
 8005a60:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 8005a62:	8a3a      	ldrh	r2, [r7, #16]
 8005a64:	89fb      	ldrh	r3, [r7, #14]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d304      	bcc.n	8005a74 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8005a6a:	8a3a      	ldrh	r2, [r7, #16]
 8005a6c:	89fb      	ldrh	r3, [r7, #14]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	e008      	b.n	8005a86 <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8005a74:	8a7b      	ldrh	r3, [r7, #18]
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	8a39      	ldrh	r1, [r7, #16]
 8005a7c:	89fb      	ldrh	r3, [r7, #14]
 8005a7e:	1acb      	subs	r3, r1, r3
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	4413      	add	r3, r2
 8005a84:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	8892      	ldrh	r2, [r2, #4]
 8005a8a:	82fb      	strh	r3, [r7, #22]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	82bb      	strh	r3, [r7, #20]
 8005a90:	8afa      	ldrh	r2, [r7, #22]
 8005a92:	8abb      	ldrh	r3, [r7, #20]
 8005a94:	4293      	cmp	r3, r2
 8005a96:	bf28      	it	cs
 8005a98:	4613      	movcs	r3, r2
 8005a9a:	b29b      	uxth	r3, r3
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	371c      	adds	r7, #28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	8899      	ldrh	r1, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	891b      	ldrh	r3, [r3, #8]
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	895b      	ldrh	r3, [r3, #10]
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	81f9      	strh	r1, [r7, #14]
 8005ac2:	81ba      	strh	r2, [r7, #12]
 8005ac4:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8005ac6:	89ba      	ldrh	r2, [r7, #12]
 8005ac8:	897b      	ldrh	r3, [r7, #10]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d304      	bcc.n	8005ad8 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8005ace:	89ba      	ldrh	r2, [r7, #12]
 8005ad0:	897b      	ldrh	r3, [r7, #10]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	e008      	b.n	8005aea <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8005ad8:	89fb      	ldrh	r3, [r7, #14]
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	89b9      	ldrh	r1, [r7, #12]
 8005ae0:	897b      	ldrh	r3, [r7, #10]
 8005ae2:	1acb      	subs	r3, r1, r3
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	4413      	add	r3, r2
 8005ae8:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	8892      	ldrh	r2, [r2, #4]
 8005aee:	4293      	cmp	r3, r2
 8005af0:	bf2c      	ite	cs
 8005af2:	2301      	movcs	r3, #1
 8005af4:	2300      	movcc	r3, #0
 8005af6:	b2db      	uxtb	r3, r3
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	8899      	ldrh	r1, [r3, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	891b      	ldrh	r3, [r3, #8]
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	895b      	ldrh	r3, [r3, #10]
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	82f9      	strh	r1, [r7, #22]
 8005b1e:	82ba      	strh	r2, [r7, #20]
 8005b20:	827b      	strh	r3, [r7, #18]
 8005b22:	8afb      	ldrh	r3, [r7, #22]
 8005b24:	823b      	strh	r3, [r7, #16]
 8005b26:	8abb      	ldrh	r3, [r7, #20]
 8005b28:	81fb      	strh	r3, [r7, #14]
 8005b2a:	8a7b      	ldrh	r3, [r7, #18]
 8005b2c:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8005b2e:	89fa      	ldrh	r2, [r7, #14]
 8005b30:	89bb      	ldrh	r3, [r7, #12]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d304      	bcc.n	8005b40 <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8005b36:	89fa      	ldrh	r2, [r7, #14]
 8005b38:	89bb      	ldrh	r3, [r7, #12]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	e008      	b.n	8005b52 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8005b40:	8a3b      	ldrh	r3, [r7, #16]
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	89f9      	ldrh	r1, [r7, #14]
 8005b48:	89bb      	ldrh	r3, [r7, #12]
 8005b4a:	1acb      	subs	r3, r1, r3
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	4413      	add	r3, r2
 8005b50:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8005b52:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8005b54:	8afa      	ldrh	r2, [r7, #22]
 8005b56:	897b      	ldrh	r3, [r7, #10]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d904      	bls.n	8005b66 <tu_fifo_remaining+0x62>
 8005b5c:	8afa      	ldrh	r2, [r7, #22]
 8005b5e:	897b      	ldrh	r3, [r7, #10]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	e000      	b.n	8005b68 <tu_fifo_remaining+0x64>
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	891b      	ldrh	r3, [r3, #8]
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	895b      	ldrh	r3, [r3, #10]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	6839      	ldr	r1, [r7, #0]
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7ff fd83 	bl	8005698 <_tu_fifo_peek>
 8005b92:	4603      	mov	r3, r0
 8005b94:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	8898      	ldrh	r0, [r3, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	895b      	ldrh	r3, [r3, #10]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	7bfa      	ldrb	r2, [r7, #15]
 8005ba2:	b292      	uxth	r2, r2
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	f7ff fd51 	bl	800564c <advance_index>
 8005baa:	4603      	mov	r3, r0
 8005bac:	461a      	mov	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8005bca:	88fa      	ldrh	r2, [r7, #6]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f7ff ff08 	bl	80059e6 <_tu_fifo_read_n>
 8005bd6:	4603      	mov	r3, r0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	4613      	mov	r3, r2
 8005bec:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8005bee:	88fa      	ldrh	r2, [r7, #6]
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	68b9      	ldr	r1, [r7, #8]
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f7ff fef6 	bl	80059e6 <_tu_fifo_read_n>
 8005bfa:	4603      	mov	r3, r0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	891b      	ldrh	r3, [r3, #8]
 8005c12:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7ff ff47 	bl	8005aa8 <tu_fifo_full>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00c      	beq.n	8005c3a <tu_fifo_write+0x36>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	79db      	ldrb	r3, [r3, #7]
 8005c24:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	f083 0301 	eor.w	r3, r3, #1
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <tu_fifo_write+0x36>
  {
    ret = false;
 8005c34:	2300      	movs	r3, #0
 8005c36:	75fb      	strb	r3, [r7, #23]
 8005c38:	e022      	b.n	8005c80 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	889b      	ldrh	r3, [r3, #4]
 8005c3e:	823b      	strh	r3, [r7, #16]
 8005c40:	8abb      	ldrh	r3, [r7, #20]
 8005c42:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8005c44:	e003      	b.n	8005c4e <tu_fifo_write+0x4a>
 8005c46:	89fa      	ldrh	r2, [r7, #14]
 8005c48:	8a3b      	ldrh	r3, [r7, #16]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	81fb      	strh	r3, [r7, #14]
 8005c4e:	8a3a      	ldrh	r2, [r7, #16]
 8005c50:	89fb      	ldrh	r3, [r7, #14]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d9f7      	bls.n	8005c46 <tu_fifo_write+0x42>
  return idx;
 8005c56:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8005c58:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8005c5a:	8a7b      	ldrh	r3, [r7, #18]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	6839      	ldr	r1, [r7, #0]
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7ff faf7 	bl	8005254 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	889b      	ldrh	r3, [r3, #4]
 8005c6a:	8ab9      	ldrh	r1, [r7, #20]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7ff fcec 	bl	800564c <advance_index>
 8005c74:	4603      	mov	r3, r0
 8005c76:	461a      	mov	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	811a      	strh	r2, [r3, #8]

    ret = true;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8005c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3718      	adds	r7, #24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b084      	sub	sp, #16
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	60f8      	str	r0, [r7, #12]
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	4613      	mov	r3, r2
 8005c96:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8005c98:	88fa      	ldrh	r2, [r7, #6]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	68b9      	ldr	r1, [r7, #8]
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f7ff fdd0 	bl	8005844 <_tu_fifo_write_n>
 8005ca4:	4603      	mov	r3, r0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	60f8      	str	r0, [r7, #12]
 8005cb6:	60b9      	str	r1, [r7, #8]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8005cbc:	88fa      	ldrh	r2, [r7, #6]
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	68b9      	ldr	r1, [r7, #8]
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f7ff fdbe 	bl	8005844 <_tu_fifo_write_n>
 8005cc8:	4603      	mov	r3, r0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8005ce6:	2301      	movs	r3, #1
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	6039      	str	r1, [r7, #0]
 8005cfe:	71fb      	strb	r3, [r7, #7]
 8005d00:	4613      	mov	r3, r2
 8005d02:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
  return NULL;
}

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
  return NULL;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <tud_mount_cb>:

TU_ATTR_WEAK void tud_mount_cb(void) {
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
}
 8005d50:	bf00      	nop
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <tud_umount_cb>:

TU_ATTR_WEAK void tud_umount_cb(void) {
 8005d5a:	b480      	push	{r7}
 8005d5c:	af00      	add	r7, sp, #0
}
 8005d5e:	bf00      	nop
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <tud_suspend_cb>:

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	4603      	mov	r3, r0
 8005d70:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 8005d7e:	b480      	push	{r7}
 8005d80:	af00      	add	r7, sp, #0
}
 8005d82:	bf00      	nop
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8005d96:	2301      	movs	r3, #1
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8005da8:	4b06      	ldr	r3, [pc, #24]	@ (8005dc4 <tud_mounted+0x20>)
 8005daa:	785b      	ldrb	r3, [r3, #1]
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	bf14      	ite	ne
 8005db2:	2301      	movne	r3, #1
 8005db4:	2300      	moveq	r3, #0
 8005db6:	b2db      	uxtb	r3, r3
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	20000c14 	.word	0x20000c14

08005dc8 <tud_suspended>:

bool tud_suspended(void) {
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8005dcc:	4b07      	ldr	r3, [pc, #28]	@ (8005dec <tud_suspended+0x24>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	bf14      	ite	ne
 8005dda:	2301      	movne	r3, #1
 8005ddc:	2300      	moveq	r3, #0
 8005dde:	b2db      	uxtb	r3, r3
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	20000c14 	.word	0x20000c14

08005df0 <tud_remote_wakeup>:

bool tud_remote_wakeup(void) {
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en);
 8005df4:	4b0f      	ldr	r3, [pc, #60]	@ (8005e34 <tud_remote_wakeup+0x44>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00d      	beq.n	8005e1e <tud_remote_wakeup+0x2e>
 8005e02:	4b0c      	ldr	r3, [pc, #48]	@ (8005e34 <tud_remote_wakeup+0x44>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	f003 0310 	and.w	r3, r3, #16
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d006      	beq.n	8005e1e <tud_remote_wakeup+0x2e>
 8005e10:	4b08      	ldr	r3, [pc, #32]	@ (8005e34 <tud_remote_wakeup+0x44>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	f003 0308 	and.w	r3, r3, #8
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <tud_remote_wakeup+0x32>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e005      	b.n	8005e2e <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 8005e22:	4b05      	ldr	r3, [pc, #20]	@ (8005e38 <tud_remote_wakeup+0x48>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f002 fb96 	bl	8008558 <dcd_remote_wakeup>
  return true;
 8005e2c:	2301      	movs	r3, #1
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20000c14 	.word	0x20000c14
 8005e38:	20000069 	.word	0x20000069

08005e3c <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8005e40:	4b05      	ldr	r3, [pc, #20]	@ (8005e58 <tud_inited+0x1c>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2bff      	cmp	r3, #255	@ 0xff
 8005e46:	bf14      	ite	ne
 8005e48:	2301      	movne	r3, #1
 8005e4a:	2300      	moveq	r3, #0
 8005e4c:	b2db      	uxtb	r3, r3
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	20000069 	.word	0x20000069

08005e5c <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08c      	sub	sp, #48	@ 0x30
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	4603      	mov	r3, r0
 8005e64:	6039      	str	r1, [r7, #0]
 8005e66:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 8005e68:	f7ff ffe8 	bl	8005e3c <tud_inited>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 8005e72:	2301      	movs	r3, #1
 8005e74:	e09e      	b.n	8005fb4 <tud_rhport_init+0x158>
  }
  TU_ASSERT(rh_init);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10a      	bne.n	8005e92 <tud_rhport_init+0x36>
 8005e7c:	4b4f      	ldr	r3, [pc, #316]	@ (8005fbc <tud_rhport_init+0x160>)
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d000      	beq.n	8005e8e <tud_rhport_init+0x32>
 8005e8c:	be00      	bkpt	0x0000
 8005e8e:	2300      	movs	r3, #0
 8005e90:	e090      	b.n	8005fb4 <tud_rhport_init+0x158>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8005e92:	222c      	movs	r2, #44	@ 0x2c
 8005e94:	2100      	movs	r1, #0
 8005e96:	484a      	ldr	r0, [pc, #296]	@ (8005fc0 <tud_rhport_init+0x164>)
 8005e98:	f004 f8e0 	bl	800a05c <memset>
  _usbd_queued_setup = 0;
 8005e9c:	4b49      	ldr	r3, [pc, #292]	@ (8005fc4 <tud_rhport_init+0x168>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	4b49      	ldr	r3, [pc, #292]	@ (8005fc8 <tud_rhport_init+0x16c>)
 8005ea4:	613b      	str	r3, [r7, #16]
#define OSAL_SPINLOCK_DEF(_name, _int_set) \
  osal_spinlock_t _name = { .interrupt_set = _int_set }

TU_ATTR_ALWAYS_INLINE static inline void osal_spin_init(osal_spinlock_t *ctx) {
  (void) ctx;
}
 8005ea6:	bf00      	nop
 8005ea8:	4b48      	ldr	r3, [pc, #288]	@ (8005fcc <tud_rhport_init+0x170>)
 8005eaa:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	3304      	adds	r3, #4
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7ff ff0e 	bl	8005cd2 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8005eb6:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8005eb8:	4a45      	ldr	r2, [pc, #276]	@ (8005fd0 <tud_rhport_init+0x174>)
 8005eba:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8005ebc:	4b44      	ldr	r3, [pc, #272]	@ (8005fd0 <tud_rhport_init+0x174>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10a      	bne.n	8005eda <tud_rhport_init+0x7e>
 8005ec4:	4b3d      	ldr	r3, [pc, #244]	@ (8005fbc <tud_rhport_init+0x160>)
 8005ec6:	61fb      	str	r3, [r7, #28]
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d000      	beq.n	8005ed6 <tud_rhport_init+0x7a>
 8005ed4:	be00      	bkpt	0x0000
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	e06c      	b.n	8005fb4 <tud_rhport_init+0x158>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8005eda:	4b3e      	ldr	r3, [pc, #248]	@ (8005fd4 <tud_rhport_init+0x178>)
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d005      	beq.n	8005eec <tud_rhport_init+0x90>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8005ee0:	483d      	ldr	r0, [pc, #244]	@ (8005fd8 <tud_rhport_init+0x17c>)
 8005ee2:	f3af 8000 	nop.w
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	4a3c      	ldr	r2, [pc, #240]	@ (8005fdc <tud_rhport_init+0x180>)
 8005eea:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8005eec:	2300      	movs	r3, #0
 8005eee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005ef2:	e03a      	b.n	8005f6a <tud_rhport_init+0x10e>
 8005ef4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ef8:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8005efe:	4b36      	ldr	r3, [pc, #216]	@ (8005fd8 <tud_rhport_init+0x17c>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	7bfa      	ldrb	r2, [r7, #15]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d206      	bcs.n	8005f16 <tud_rhport_init+0xba>
    driver = &_app_driver[drvid];
 8005f08:	4b34      	ldr	r3, [pc, #208]	@ (8005fdc <tud_rhport_init+0x180>)
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
 8005f0e:	015b      	lsls	r3, r3, #5
 8005f10:	4413      	add	r3, r2
 8005f12:	60bb      	str	r3, [r7, #8]
 8005f14:	e00d      	b.n	8005f32 <tud_rhport_init+0xd6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8005f16:	4b30      	ldr	r3, [pc, #192]	@ (8005fd8 <tud_rhport_init+0x17c>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	db07      	blt.n	8005f32 <tud_rhport_init+0xd6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
 8005f24:	4a2c      	ldr	r2, [pc, #176]	@ (8005fd8 <tud_rhport_init+0x17c>)
 8005f26:	7812      	ldrb	r2, [r2, #0]
 8005f28:	1a9b      	subs	r3, r3, r2
 8005f2a:	015b      	lsls	r3, r3, #5
 8005f2c:	4a2c      	ldr	r2, [pc, #176]	@ (8005fe0 <tud_rhport_init+0x184>)
 8005f2e:	4413      	add	r3, r2
 8005f30:	60bb      	str	r3, [r7, #8]
  return driver;
 8005f32:	68bb      	ldr	r3, [r7, #8]
    usbd_class_driver_t const* driver = get_driver(i);
 8005f34:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 8005f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <tud_rhport_init+0xe8>
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10a      	bne.n	8005f5a <tud_rhport_init+0xfe>
 8005f44:	4b1d      	ldr	r3, [pc, #116]	@ (8005fbc <tud_rhport_init+0x160>)
 8005f46:	623b      	str	r3, [r7, #32]
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d000      	beq.n	8005f56 <tud_rhport_init+0xfa>
 8005f54:	be00      	bkpt	0x0000
 8005f56:	2300      	movs	r3, #0
 8005f58:	e02c      	b.n	8005fb4 <tud_rhport_init+0x158>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8005f60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f64:	3301      	adds	r3, #1
 8005f66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8005fd8 <tud_rhport_init+0x17c>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f74:	429a      	cmp	r2, r3
 8005f76:	dabd      	bge.n	8005ef4 <tud_rhport_init+0x98>
  }

  _usbd_rhport = rhport;
 8005f78:	4a1a      	ldr	r2, [pc, #104]	@ (8005fe4 <tud_rhport_init+0x188>)
 8005f7a:	79fb      	ldrb	r3, [r7, #7]
 8005f7c:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 8005f7e:	79fb      	ldrb	r3, [r7, #7]
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f002 f9be 	bl	8008304 <dcd_init>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	f083 0301 	eor.w	r3, r3, #1
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00a      	beq.n	8005faa <tud_rhport_init+0x14e>
 8005f94:	4b09      	ldr	r3, [pc, #36]	@ (8005fbc <tud_rhport_init+0x160>)
 8005f96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d000      	beq.n	8005fa6 <tud_rhport_init+0x14a>
 8005fa4:	be00      	bkpt	0x0000
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	e004      	b.n	8005fb4 <tud_rhport_init+0x158>
  dcd_int_enable(rhport);
 8005faa:	79fb      	ldrb	r3, [r7, #7]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f002 fa47 	bl	8008440 <dcd_int_enable>

  return true;
 8005fb2:	2301      	movs	r3, #1
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3730      	adds	r7, #48	@ 0x30
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	e000edf0 	.word	0xe000edf0
 8005fc0:	20000c14 	.word	0x20000c14
 8005fc4:	20000c40 	.word	0x20000c40
 8005fc8:	2000006c 	.word	0x2000006c
 8005fcc:	20000070 	.word	0x20000070
 8005fd0:	20000d0c 	.word	0x20000d0c
 8005fd4:	00000000 	.word	0x00000000
 8005fd8:	20000c48 	.word	0x20000c48
 8005fdc:	20000c44 	.word	0x20000c44
 8005fe0:	0800a35c 	.word	0x0800a35c
 8005fe4:	20000069 	.word	0x20000069

08005fe8 <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	4603      	mov	r3, r0
 8005ff0:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	77fb      	strb	r3, [r7, #31]
 8005ff6:	e034      	b.n	8006062 <configuration_reset+0x7a>
 8005ff8:	7ffb      	ldrb	r3, [r7, #31]
 8005ffa:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8006000:	4b25      	ldr	r3, [pc, #148]	@ (8006098 <configuration_reset+0xb0>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	7cfa      	ldrb	r2, [r7, #19]
 8006006:	429a      	cmp	r2, r3
 8006008:	d206      	bcs.n	8006018 <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 800600a:	4b24      	ldr	r3, [pc, #144]	@ (800609c <configuration_reset+0xb4>)
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	7cfb      	ldrb	r3, [r7, #19]
 8006010:	015b      	lsls	r3, r3, #5
 8006012:	4413      	add	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	e00d      	b.n	8006034 <configuration_reset+0x4c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006018:	4b1f      	ldr	r3, [pc, #124]	@ (8006098 <configuration_reset+0xb0>)
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	7cfb      	ldrb	r3, [r7, #19]
 8006020:	429a      	cmp	r2, r3
 8006022:	db07      	blt.n	8006034 <configuration_reset+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006024:	7cfb      	ldrb	r3, [r7, #19]
 8006026:	4a1c      	ldr	r2, [pc, #112]	@ (8006098 <configuration_reset+0xb0>)
 8006028:	7812      	ldrb	r2, [r2, #0]
 800602a:	1a9b      	subs	r3, r3, r2
 800602c:	015b      	lsls	r3, r3, #5
 800602e:	4a1c      	ldr	r2, [pc, #112]	@ (80060a0 <configuration_reset+0xb8>)
 8006030:	4413      	add	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]
  return driver;
 8006034:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8006036:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d109      	bne.n	8006052 <configuration_reset+0x6a>
 800603e:	4b19      	ldr	r3, [pc, #100]	@ (80060a4 <configuration_reset+0xbc>)
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d01f      	beq.n	800608e <configuration_reset+0xa6>
 800604e:	be00      	bkpt	0x0000
 8006050:	e01d      	b.n	800608e <configuration_reset+0xa6>
    driver->reset(rhport);
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	79fa      	ldrb	r2, [r7, #7]
 8006058:	4610      	mov	r0, r2
 800605a:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 800605c:	7ffb      	ldrb	r3, [r7, #31]
 800605e:	3301      	adds	r3, #1
 8006060:	77fb      	strb	r3, [r7, #31]
 8006062:	4b0d      	ldr	r3, [pc, #52]	@ (8006098 <configuration_reset+0xb0>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	7ffb      	ldrb	r3, [r7, #31]
 800606a:	429a      	cmp	r2, r3
 800606c:	dac4      	bge.n	8005ff8 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 800606e:	222c      	movs	r2, #44	@ 0x2c
 8006070:	2100      	movs	r1, #0
 8006072:	480d      	ldr	r0, [pc, #52]	@ (80060a8 <configuration_reset+0xc0>)
 8006074:	f003 fff2 	bl	800a05c <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8006078:	2210      	movs	r2, #16
 800607a:	21ff      	movs	r1, #255	@ 0xff
 800607c:	480b      	ldr	r0, [pc, #44]	@ (80060ac <configuration_reset+0xc4>)
 800607e:	f003 ffed 	bl	800a05c <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 8006082:	220c      	movs	r2, #12
 8006084:	21ff      	movs	r1, #255	@ 0xff
 8006086:	480a      	ldr	r0, [pc, #40]	@ (80060b0 <configuration_reset+0xc8>)
 8006088:	f003 ffe8 	bl	800a05c <memset>
 800608c:	e000      	b.n	8006090 <configuration_reset+0xa8>
    TU_ASSERT(driver,);
 800608e:	bf00      	nop
}
 8006090:	3720      	adds	r7, #32
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000c48 	.word	0x20000c48
 800609c:	20000c44 	.word	0x20000c44
 80060a0:	0800a35c 	.word	0x0800a35c
 80060a4:	e000edf0 	.word	0xe000edf0
 80060a8:	20000c14 	.word	0x20000c14
 80060ac:	20000c18 	.word	0x20000c18
 80060b0:	20000c28 	.word	0x20000c28

080060b4 <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	4603      	mov	r3, r0
 80060bc:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 80060be:	79fb      	ldrb	r3, [r7, #7]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff ff91 	bl	8005fe8 <configuration_reset>
  usbd_control_reset();
 80060c6:	f001 fc29 	bl	800791c <usbd_control_reset>
}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 80060d4:	b590      	push	{r4, r7, lr}
 80060d6:	b093      	sub	sp, #76	@ 0x4c
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	460b      	mov	r3, r1
 80060de:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 80060e0:	f7ff feac 	bl	8005e3c <tud_inited>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f083 0301 	eor.w	r3, r3, #1
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f040 8189 	bne.w	8006404 <tud_task_ext+0x330>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 80060f2:	4bb1      	ldr	r3, [pc, #708]	@ (80063b8 <tud_task_ext+0x2e4>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80060f8:	f107 030c 	add.w	r3, r7, #12
 80060fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 8006102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2000      	movs	r0, #0
 8006108:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 800610a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610c:	3304      	adds	r3, #4
 800610e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff fd2f 	bl	8005b74 <tu_fifo_read>
 8006116:	4603      	mov	r3, r0
 8006118:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 800611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2001      	movs	r0, #1
 8006122:	4798      	blx	r3

  return success;
 8006124:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006128:	f083 0301 	eor.w	r3, r3, #1
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	f040 816a 	bne.w	8006408 <tud_task_ext+0x334>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 8006134:	7b7b      	ldrb	r3, [r7, #13]
 8006136:	3b01      	subs	r3, #1
 8006138:	2b07      	cmp	r3, #7
 800613a:	f200 814b 	bhi.w	80063d4 <tud_task_ext+0x300>
 800613e:	a201      	add	r2, pc, #4	@ (adr r2, 8006144 <tud_task_ext+0x70>)
 8006140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006144:	08006165 	.word	0x08006165
 8006148:	08006175 	.word	0x08006175
 800614c:	08006389 	.word	0x08006389
 8006150:	0800633b 	.word	0x0800633b
 8006154:	08006365 	.word	0x08006365
 8006158:	08006183 	.word	0x08006183
 800615c:	08006233 	.word	0x08006233
 8006160:	08006379 	.word	0x08006379
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8006164:	7b3b      	ldrb	r3, [r7, #12]
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff ffa4 	bl	80060b4 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 800616c:	7c3a      	ldrb	r2, [r7, #16]
 800616e:	4b93      	ldr	r3, [pc, #588]	@ (80063bc <tud_task_ext+0x2e8>)
 8006170:	709a      	strb	r2, [r3, #2]
        break;
 8006172:	e146      	b.n	8006402 <tud_task_ext+0x32e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 8006174:	7b3b      	ldrb	r3, [r7, #12]
 8006176:	4618      	mov	r0, r3
 8006178:	f7ff ff9c 	bl	80060b4 <usbd_reset>
        tud_umount_cb();
 800617c:	f7ff fded 	bl	8005d5a <tud_umount_cb>
        break;
 8006180:	e13f      	b.n	8006402 <tud_task_ext+0x32e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 8006182:	4b8f      	ldr	r3, [pc, #572]	@ (80063c0 <tud_task_ext+0x2ec>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10a      	bne.n	80061a2 <tud_task_ext+0xce>
 800618c:	4b8d      	ldr	r3, [pc, #564]	@ (80063c4 <tud_task_ext+0x2f0>)
 800618e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 8137 	beq.w	800640c <tud_task_ext+0x338>
 800619e:	be00      	bkpt	0x0000
 80061a0:	e134      	b.n	800640c <tud_task_ext+0x338>
        _usbd_queued_setup--;
 80061a2:	4b87      	ldr	r3, [pc, #540]	@ (80063c0 <tud_task_ext+0x2ec>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	4b84      	ldr	r3, [pc, #528]	@ (80063c0 <tud_task_ext+0x2ec>)
 80061ae:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 80061b0:	4b83      	ldr	r3, [pc, #524]	@ (80063c0 <tud_task_ext+0x2ec>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f040 8116 	bne.w	80063e8 <tud_task_ext+0x314>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 80061bc:	4a7f      	ldr	r2, [pc, #508]	@ (80063bc <tud_task_ext+0x2e8>)
 80061be:	7813      	ldrb	r3, [r2, #0]
 80061c0:	f043 0301 	orr.w	r3, r3, #1
 80061c4:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 80061c6:	4a7d      	ldr	r2, [pc, #500]	@ (80063bc <tud_task_ext+0x2e8>)
 80061c8:	f892 3020 	ldrb.w	r3, [r2, #32]
 80061cc:	f023 0301 	bic.w	r3, r3, #1
 80061d0:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 80061d4:	4a79      	ldr	r2, [pc, #484]	@ (80063bc <tud_task_ext+0x2e8>)
 80061d6:	f892 3020 	ldrb.w	r3, [r2, #32]
 80061da:	f023 0304 	bic.w	r3, r3, #4
 80061de:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 80061e2:	4a76      	ldr	r2, [pc, #472]	@ (80063bc <tud_task_ext+0x2e8>)
 80061e4:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 80061e8:	f023 0301 	bic.w	r3, r3, #1
 80061ec:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 80061f0:	4a72      	ldr	r2, [pc, #456]	@ (80063bc <tud_task_ext+0x2e8>)
 80061f2:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 80061f6:	f023 0304 	bic.w	r3, r3, #4
 80061fa:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 80061fe:	7b3a      	ldrb	r2, [r7, #12]
 8006200:	f107 030c 	add.w	r3, r7, #12
 8006204:	3304      	adds	r3, #4
 8006206:	4619      	mov	r1, r3
 8006208:	4610      	mov	r0, r2
 800620a:	f000 f91f 	bl	800644c <process_control_request>
 800620e:	4603      	mov	r3, r0
 8006210:	f083 0301 	eor.w	r3, r3, #1
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 80e8 	beq.w	80063ec <tud_task_ext+0x318>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 800621c:	7b3b      	ldrb	r3, [r7, #12]
 800621e:	2100      	movs	r1, #0
 8006220:	4618      	mov	r0, r3
 8006222:	f002 fb6d 	bl	8008900 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8006226:	7b3b      	ldrb	r3, [r7, #12]
 8006228:	2180      	movs	r1, #128	@ 0x80
 800622a:	4618      	mov	r0, r3
 800622c:	f002 fb68 	bl	8008900 <dcd_edpt_stall>
        }
        break;
 8006230:	e0dc      	b.n	80063ec <tud_task_ext+0x318>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8006232:	7c3b      	ldrb	r3, [r7, #16]
 8006234:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006238:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800623c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006240:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006244:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006248:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 800624a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800624e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006252:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006256:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800625a:	09db      	lsrs	r3, r3, #7
 800625c:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 800625e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8006262:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8006266:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800626a:	4954      	ldr	r1, [pc, #336]	@ (80063bc <tud_task_ext+0x2e8>)
 800626c:	0052      	lsls	r2, r2, #1
 800626e:	440a      	add	r2, r1
 8006270:	4413      	add	r3, r2
 8006272:	f103 0220 	add.w	r2, r3, #32
 8006276:	7813      	ldrb	r3, [r2, #0]
 8006278:	f023 0301 	bic.w	r3, r3, #1
 800627c:	7013      	strb	r3, [r2, #0]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 800627e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8006282:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8006286:	494d      	ldr	r1, [pc, #308]	@ (80063bc <tud_task_ext+0x2e8>)
 8006288:	0052      	lsls	r2, r2, #1
 800628a:	440a      	add	r2, r1
 800628c:	4413      	add	r3, r2
 800628e:	f103 0220 	add.w	r2, r3, #32
 8006292:	7813      	ldrb	r3, [r2, #0]
 8006294:	f023 0304 	bic.w	r3, r3, #4
 8006298:	7013      	strb	r3, [r2, #0]

        if (0 == epnum) {
 800629a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d107      	bne.n	80062b2 <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 80062a2:	7b38      	ldrb	r0, [r7, #12]
 80062a4:	7c7a      	ldrb	r2, [r7, #17]
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80062ac:	f001 fb6c 	bl	8007988 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 80062b0:	e0a7      	b.n	8006402 <tud_task_ext+0x32e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 80062b2:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80062b6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80062ba:	4940      	ldr	r1, [pc, #256]	@ (80063bc <tud_task_ext+0x2e8>)
 80062bc:	0052      	lsls	r2, r2, #1
 80062be:	440a      	add	r2, r1
 80062c0:	4413      	add	r3, r2
 80062c2:	3314      	adds	r3, #20
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 80062ce:	4b3e      	ldr	r3, [pc, #248]	@ (80063c8 <tud_task_ext+0x2f4>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d207      	bcs.n	80062ea <tud_task_ext+0x216>
    driver = &_app_driver[drvid];
 80062da:	4b3c      	ldr	r3, [pc, #240]	@ (80063cc <tud_task_ext+0x2f8>)
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80062e2:	015b      	lsls	r3, r3, #5
 80062e4:	4413      	add	r3, r2
 80062e6:	623b      	str	r3, [r7, #32]
 80062e8:	e00f      	b.n	800630a <tud_task_ext+0x236>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80062ea:	4b37      	ldr	r3, [pc, #220]	@ (80063c8 <tud_task_ext+0x2f4>)
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80062f4:	429a      	cmp	r2, r3
 80062f6:	db08      	blt.n	800630a <tud_task_ext+0x236>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80062f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80062fc:	4a32      	ldr	r2, [pc, #200]	@ (80063c8 <tud_task_ext+0x2f4>)
 80062fe:	7812      	ldrb	r2, [r2, #0]
 8006300:	1a9b      	subs	r3, r3, r2
 8006302:	015b      	lsls	r3, r3, #5
 8006304:	4a32      	ldr	r2, [pc, #200]	@ (80063d0 <tud_task_ext+0x2fc>)
 8006306:	4413      	add	r3, r2
 8006308:	623b      	str	r3, [r7, #32]
  return driver;
 800630a:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 800630c:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 800630e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006310:	2b00      	cmp	r3, #0
 8006312:	d109      	bne.n	8006328 <tud_task_ext+0x254>
 8006314:	4b2b      	ldr	r3, [pc, #172]	@ (80063c4 <tud_task_ext+0x2f0>)
 8006316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d075      	beq.n	8006410 <tud_task_ext+0x33c>
 8006324:	be00      	bkpt	0x0000
 8006326:	e073      	b.n	8006410 <tud_task_ext+0x33c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8006328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800632a:	699c      	ldr	r4, [r3, #24]
 800632c:	7b38      	ldrb	r0, [r7, #12]
 800632e:	7c7a      	ldrb	r2, [r7, #17]
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8006336:	47a0      	blx	r4
        break;
 8006338:	e063      	b.n	8006402 <tud_task_ext+0x32e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 800633a:	4b20      	ldr	r3, [pc, #128]	@ (80063bc <tud_task_ext+0x2e8>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b00      	cmp	r3, #0
 8006346:	d053      	beq.n	80063f0 <tud_task_ext+0x31c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8006348:	4b1c      	ldr	r3, [pc, #112]	@ (80063bc <tud_task_ext+0x2e8>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	bf14      	ite	ne
 8006356:	2301      	movne	r3, #1
 8006358:	2300      	moveq	r3, #0
 800635a:	b2db      	uxtb	r3, r3
 800635c:	4618      	mov	r0, r3
 800635e:	f7ff fd03 	bl	8005d68 <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 8006362:	e045      	b.n	80063f0 <tud_task_ext+0x31c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 8006364:	4b15      	ldr	r3, [pc, #84]	@ (80063bc <tud_task_ext+0x2e8>)
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d040      	beq.n	80063f4 <tud_task_ext+0x320>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 8006372:	f7ff fd04 	bl	8005d7e <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 8006376:	e03d      	b.n	80063f4 <tud_task_ext+0x320>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) {
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d03c      	beq.n	80063f8 <tud_task_ext+0x324>
          event.func_call.func(event.func_call.param);
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	4610      	mov	r0, r2
 8006384:	4798      	blx	r3
        }
        break;
 8006386:	e037      	b.n	80063f8 <tud_task_ext+0x324>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8006388:	4b0c      	ldr	r3, [pc, #48]	@ (80063bc <tud_task_ext+0x2e8>)
 800638a:	78db      	ldrb	r3, [r3, #3]
 800638c:	b2db      	uxtb	r3, r3
 800638e:	61fb      	str	r3, [r7, #28]
 8006390:	2300      	movs	r3, #0
 8006392:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8006394:	7efb      	ldrb	r3, [r7, #27]
 8006396:	69fa      	ldr	r2, [r7, #28]
 8006398:	fa22 f303 	lsr.w	r3, r2, r3
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	bf14      	ite	ne
 80063a4:	2301      	movne	r3, #1
 80063a6:	2300      	moveq	r3, #0
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d026      	beq.n	80063fc <tud_task_ext+0x328>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff fcad 	bl	8005d10 <tud_sof_cb>
        }
      break;
 80063b6:	e021      	b.n	80063fc <tud_task_ext+0x328>
 80063b8:	20000d0c 	.word	0x20000d0c
 80063bc:	20000c14 	.word	0x20000c14
 80063c0:	20000c40 	.word	0x20000c40
 80063c4:	e000edf0 	.word	0xe000edf0
 80063c8:	20000c48 	.word	0x20000c48
 80063cc:	20000c44 	.word	0x20000c44
 80063d0:	0800a35c 	.word	0x0800a35c

      default:
        TU_BREAKPOINT();
 80063d4:	4b10      	ldr	r3, [pc, #64]	@ (8006418 <tud_task_ext+0x344>)
 80063d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80063d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00d      	beq.n	8006400 <tud_task_ext+0x32c>
 80063e4:	be00      	bkpt	0x0000
        break;
 80063e6:	e00b      	b.n	8006400 <tud_task_ext+0x32c>
          break;
 80063e8:	bf00      	nop
 80063ea:	e682      	b.n	80060f2 <tud_task_ext+0x1e>
        break;
 80063ec:	bf00      	nop
 80063ee:	e680      	b.n	80060f2 <tud_task_ext+0x1e>
        break;
 80063f0:	bf00      	nop
 80063f2:	e67e      	b.n	80060f2 <tud_task_ext+0x1e>
        break;
 80063f4:	bf00      	nop
 80063f6:	e67c      	b.n	80060f2 <tud_task_ext+0x1e>
        break;
 80063f8:	bf00      	nop
 80063fa:	e67a      	b.n	80060f2 <tud_task_ext+0x1e>
      break;
 80063fc:	bf00      	nop
 80063fe:	e678      	b.n	80060f2 <tud_task_ext+0x1e>
        break;
 8006400:	bf00      	nop
  while (1) {
 8006402:	e676      	b.n	80060f2 <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 8006404:	bf00      	nop
 8006406:	e004      	b.n	8006412 <tud_task_ext+0x33e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8006408:	bf00      	nop
 800640a:	e002      	b.n	8006412 <tud_task_ext+0x33e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 800640c:	bf00      	nop
 800640e:	e000      	b.n	8006412 <tud_task_ext+0x33e>
          TU_ASSERT(driver,);
 8006410:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) { return; }
#endif
  }
}
 8006412:	374c      	adds	r7, #76	@ 0x4c
 8006414:	46bd      	mov	sp, r7
 8006416:	bd90      	pop	{r4, r7, pc}
 8006418:	e000edf0 	.word	0xe000edf0

0800641c <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	4603      	mov	r3, r0
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	4618      	mov	r0, r3
 8006430:	f001 fa80 	bl	8007934 <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	7bf8      	ldrb	r0, [r7, #15]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	2101      	movs	r1, #1
 800643e:	4798      	blx	r3
 8006440:	4603      	mov	r3, r0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
	...

0800644c <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 800644c:	b580      	push	{r7, lr}
 800644e:	b09a      	sub	sp, #104	@ 0x68
 8006450:	af00      	add	r7, sp, #0
 8006452:	4603      	mov	r3, r0
 8006454:	6039      	str	r1, [r7, #0]
 8006456:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8006458:	2000      	movs	r0, #0
 800645a:	f001 fa6b 	bl	8007934 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b60      	cmp	r3, #96	@ 0x60
 800646a:	d10a      	bne.n	8006482 <process_control_request+0x36>
 800646c:	4ba5      	ldr	r3, [pc, #660]	@ (8006704 <process_control_request+0x2b8>)
 800646e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d000      	beq.n	800647e <process_control_request+0x32>
 800647c:	be00      	bkpt	0x0000
 800647e:	2300      	movs	r3, #0
 8006480:	e2bb      	b.n	80069fa <process_control_request+0x5ae>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b40      	cmp	r3, #64	@ 0x40
 800648e:	d10a      	bne.n	80064a6 <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8006490:	489d      	ldr	r0, [pc, #628]	@ (8006708 <process_control_request+0x2bc>)
 8006492:	f001 fa4f 	bl	8007934 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8006496:	79fb      	ldrb	r3, [r7, #7]
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	2101      	movs	r1, #1
 800649c:	4618      	mov	r0, r3
 800649e:	f7fa f9b1 	bl	8000804 <tud_vendor_control_xfer_cb>
 80064a2:	4603      	mov	r3, r0
 80064a4:	e2a9      	b.n	80069fa <process_control_request+0x5ae>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	f000 81ca 	beq.w	800684a <process_control_request+0x3fe>
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	f300 8292 	bgt.w	80069e0 <process_control_request+0x594>
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <process_control_request+0x7c>
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	f000 8151 	beq.w	8006768 <process_control_request+0x31c>
 80064c6:	e28b      	b.n	80069e0 <process_control_request+0x594>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b20      	cmp	r3, #32
 80064d4:	d143      	bne.n	800655e <process_control_request+0x112>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	889b      	ldrh	r3, [r3, #4]
 80064da:	b29b      	uxth	r3, r3
 80064dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80064de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80064e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80064ea:	2b0f      	cmp	r3, #15
 80064ec:	d901      	bls.n	80064f2 <process_control_request+0xa6>
 80064ee:	2300      	movs	r3, #0
 80064f0:	e283      	b.n	80069fa <process_control_request+0x5ae>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80064f2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80064f6:	4a85      	ldr	r2, [pc, #532]	@ (800670c <process_control_request+0x2c0>)
 80064f8:	4413      	add	r3, r2
 80064fa:	791b      	ldrb	r3, [r3, #4]
 80064fc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 8006500:	2300      	movs	r3, #0
 8006502:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 8006504:	4b82      	ldr	r3, [pc, #520]	@ (8006710 <process_control_request+0x2c4>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800650c:	429a      	cmp	r2, r3
 800650e:	d207      	bcs.n	8006520 <process_control_request+0xd4>
    driver = &_app_driver[drvid];
 8006510:	4b80      	ldr	r3, [pc, #512]	@ (8006714 <process_control_request+0x2c8>)
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006518:	015b      	lsls	r3, r3, #5
 800651a:	4413      	add	r3, r2
 800651c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800651e:	e00f      	b.n	8006540 <process_control_request+0xf4>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006520:	4b7b      	ldr	r3, [pc, #492]	@ (8006710 <process_control_request+0x2c4>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	1c5a      	adds	r2, r3, #1
 8006526:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800652a:	429a      	cmp	r2, r3
 800652c:	db08      	blt.n	8006540 <process_control_request+0xf4>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800652e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006532:	4a77      	ldr	r2, [pc, #476]	@ (8006710 <process_control_request+0x2c4>)
 8006534:	7812      	ldrb	r2, [r2, #0]
 8006536:	1a9b      	subs	r3, r3, r2
 8006538:	015b      	lsls	r3, r3, #5
 800653a:	4a77      	ldr	r2, [pc, #476]	@ (8006718 <process_control_request+0x2cc>)
 800653c:	4413      	add	r3, r2
 800653e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 8006540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8006542:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 8006544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <process_control_request+0x102>
 800654a:	2300      	movs	r3, #0
 800654c:	e255      	b.n	80069fa <process_control_request+0x5ae>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 800654e:	79fb      	ldrb	r3, [r7, #7]
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006554:	4618      	mov	r0, r3
 8006556:	f7ff ff61 	bl	800641c <invoke_class_control>
 800655a:	4603      	mov	r3, r0
 800655c:	e24d      	b.n	80069fa <process_control_request+0x5ae>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00a      	beq.n	8006582 <process_control_request+0x136>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 800656c:	4b65      	ldr	r3, [pc, #404]	@ (8006704 <process_control_request+0x2b8>)
 800656e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b00      	cmp	r3, #0
 800657a:	d000      	beq.n	800657e <process_control_request+0x132>
 800657c:	be00      	bkpt	0x0000
        return false;
 800657e:	2300      	movs	r3, #0
 8006580:	e23b      	b.n	80069fa <process_control_request+0x5ae>
      }

      switch ( p_request->bRequest ) {
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	785b      	ldrb	r3, [r3, #1]
 8006586:	2b09      	cmp	r3, #9
 8006588:	f200 80e1 	bhi.w	800674e <process_control_request+0x302>
 800658c:	a201      	add	r2, pc, #4	@ (adr r2, 8006594 <process_control_request+0x148>)
 800658e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006592:	bf00      	nop
 8006594:	0800671d 	.word	0x0800671d
 8006598:	080066e1 	.word	0x080066e1
 800659c:	0800674f 	.word	0x0800674f
 80065a0:	080066bb 	.word	0x080066bb
 80065a4:	0800674f 	.word	0x0800674f
 80065a8:	080065bd 	.word	0x080065bd
 80065ac:	080066a1 	.word	0x080066a1
 80065b0:	0800674f 	.word	0x0800674f
 80065b4:	080065e1 	.word	0x080065e1
 80065b8:	080065f9 	.word	0x080065f9
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 80065bc:	6838      	ldr	r0, [r7, #0]
 80065be:	f001 f9c9 	bl	8007954 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	885b      	ldrh	r3, [r3, #2]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	79fb      	ldrb	r3, [r7, #7]
 80065cc:	4611      	mov	r1, r2
 80065ce:	4618      	mov	r0, r3
 80065d0:	f001 ff86 	bl	80084e0 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 80065d4:	4a4d      	ldr	r2, [pc, #308]	@ (800670c <process_control_request+0x2c0>)
 80065d6:	7813      	ldrb	r3, [r2, #0]
 80065d8:	f043 0302 	orr.w	r3, r3, #2
 80065dc:	7013      	strb	r3, [r2, #0]
        break;
 80065de:	e0c2      	b.n	8006766 <process_control_request+0x31a>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 80065e0:	4b4a      	ldr	r3, [pc, #296]	@ (800670c <process_control_request+0x2c0>)
 80065e2:	785b      	ldrb	r3, [r3, #1]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 80065e8:	f107 0213 	add.w	r2, r7, #19
 80065ec:	79f8      	ldrb	r0, [r7, #7]
 80065ee:	2301      	movs	r3, #1
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	f001 f923 	bl	800783c <tud_control_xfer>
        }
        break;
 80065f6:	e0b6      	b.n	8006766 <process_control_request+0x31a>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	885b      	ldrh	r3, [r3, #2]
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 8006602:	4b42      	ldr	r3, [pc, #264]	@ (800670c <process_control_request+0x2c0>)
 8006604:	785b      	ldrb	r3, [r3, #1]
 8006606:	b2db      	uxtb	r3, r3
 8006608:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800660c:	429a      	cmp	r2, r3
 800660e:	d041      	beq.n	8006694 <process_control_request+0x248>
            if ( _usbd_dev.cfg_num ) {
 8006610:	4b3e      	ldr	r3, [pc, #248]	@ (800670c <process_control_request+0x2c0>)
 8006612:	785b      	ldrb	r3, [r3, #1]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d014      	beq.n	8006644 <process_control_request+0x1f8>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 800661a:	79fb      	ldrb	r3, [r7, #7]
 800661c:	2100      	movs	r1, #0
 800661e:	4618      	mov	r0, r3
 8006620:	f002 f824 	bl	800866c <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8006624:	79fb      	ldrb	r3, [r7, #7]
 8006626:	4618      	mov	r0, r3
 8006628:	f002 f888 	bl	800873c <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 800662c:	4b37      	ldr	r3, [pc, #220]	@ (800670c <process_control_request+0x2c0>)
 800662e:	789b      	ldrb	r3, [r3, #2]
 8006630:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 8006634:	79fb      	ldrb	r3, [r7, #7]
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff fcd6 	bl	8005fe8 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 800663c:	4a33      	ldr	r2, [pc, #204]	@ (800670c <process_control_request+0x2c0>)
 800663e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8006642:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 8006644:	4a31      	ldr	r2, [pc, #196]	@ (800670c <process_control_request+0x2c0>)
 8006646:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800664a:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 800664c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006650:	2b00      	cmp	r3, #0
 8006652:	d01d      	beq.n	8006690 <process_control_request+0x244>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 8006654:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8006658:	79fb      	ldrb	r3, [r7, #7]
 800665a:	4611      	mov	r1, r2
 800665c:	4618      	mov	r0, r3
 800665e:	f000 f9d5 	bl	8006a0c <process_set_config>
 8006662:	4603      	mov	r3, r0
 8006664:	f083 0301 	eor.w	r3, r3, #1
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00d      	beq.n	800668a <process_control_request+0x23e>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 800666e:	4b25      	ldr	r3, [pc, #148]	@ (8006704 <process_control_request+0x2b8>)
 8006670:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d000      	beq.n	8006680 <process_control_request+0x234>
 800667e:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 8006680:	4b22      	ldr	r3, [pc, #136]	@ (800670c <process_control_request+0x2c0>)
 8006682:	2200      	movs	r2, #0
 8006684:	705a      	strb	r2, [r3, #1]
                return false;
 8006686:	2300      	movs	r3, #0
 8006688:	e1b7      	b.n	80069fa <process_control_request+0x5ae>
              }
              tud_mount_cb();
 800668a:	f7ff fb5f 	bl	8005d4c <tud_mount_cb>
 800668e:	e001      	b.n	8006694 <process_control_request+0x248>
            } else {
              tud_umount_cb();
 8006690:	f7ff fb63 	bl	8005d5a <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 8006694:	79fb      	ldrb	r3, [r7, #7]
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	4618      	mov	r0, r3
 800669a:	f001 f85d 	bl	8007758 <tud_control_status>
        }
        break;
 800669e:	e062      	b.n	8006766 <process_control_request+0x31a>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	6839      	ldr	r1, [r7, #0]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 fad7 	bl	8006c58 <process_get_descriptor>
 80066aa:	4603      	mov	r3, r0
 80066ac:	f083 0301 	eor.w	r3, r3, #1
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d056      	beq.n	8006764 <process_control_request+0x318>
 80066b6:	2300      	movs	r3, #0
 80066b8:	e19f      	b.n	80069fa <process_control_request+0x5ae>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	885b      	ldrh	r3, [r3, #2]
 80066be:	b29b      	uxth	r3, r3
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d10b      	bne.n	80066dc <process_control_request+0x290>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 80066c4:	4a11      	ldr	r2, [pc, #68]	@ (800670c <process_control_request+0x2c0>)
 80066c6:	7813      	ldrb	r3, [r2, #0]
 80066c8:	f043 0308 	orr.w	r3, r3, #8
 80066cc:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 80066ce:	79fb      	ldrb	r3, [r7, #7]
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f001 f840 	bl	8007758 <tud_control_status>
            break;
 80066d8:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 80066da:	e044      	b.n	8006766 <process_control_request+0x31a>
            default: return false;
 80066dc:	2300      	movs	r3, #0
 80066de:	e18c      	b.n	80069fa <process_control_request+0x5ae>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	885b      	ldrh	r3, [r3, #2]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d001      	beq.n	80066ee <process_control_request+0x2a2>
 80066ea:	2300      	movs	r3, #0
 80066ec:	e185      	b.n	80069fa <process_control_request+0x5ae>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 80066ee:	4a07      	ldr	r2, [pc, #28]	@ (800670c <process_control_request+0x2c0>)
 80066f0:	7813      	ldrb	r3, [r2, #0]
 80066f2:	f023 0308 	bic.w	r3, r3, #8
 80066f6:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 80066f8:	79fb      	ldrb	r3, [r7, #7]
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f001 f82b 	bl	8007758 <tud_control_status>
        break;
 8006702:	e030      	b.n	8006766 <process_control_request+0x31a>
 8006704:	e000edf0 	.word	0xe000edf0
 8006708:	08000805 	.word	0x08000805
 800670c:	20000c14 	.word	0x20000c14
 8006710:	20000c48 	.word	0x20000c48
 8006714:	20000c44 	.word	0x20000c44
 8006718:	0800a35c 	.word	0x0800a35c

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 800671c:	4b94      	ldr	r3, [pc, #592]	@ (8006970 <process_control_request+0x524>)
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	095b      	lsrs	r3, r3, #5
 8006722:	b2db      	uxtb	r3, r3
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	b29a      	uxth	r2, r3
 800672a:	4b91      	ldr	r3, [pc, #580]	@ (8006970 <process_control_request+0x524>)
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	089b      	lsrs	r3, r3, #2
 8006730:	b2db      	uxtb	r3, r3
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	b29b      	uxth	r3, r3
 8006738:	4313      	orrs	r3, r2
 800673a:	b29b      	uxth	r3, r3
 800673c:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 800673e:	f107 0210 	add.w	r2, r7, #16
 8006742:	79f8      	ldrb	r0, [r7, #7]
 8006744:	2302      	movs	r3, #2
 8006746:	6839      	ldr	r1, [r7, #0]
 8006748:	f001 f878 	bl	800783c <tud_control_xfer>
          break;
 800674c:	e00b      	b.n	8006766 <process_control_request+0x31a>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 800674e:	4b89      	ldr	r3, [pc, #548]	@ (8006974 <process_control_request+0x528>)
 8006750:	647b      	str	r3, [r7, #68]	@ 0x44
 8006752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d000      	beq.n	8006760 <process_control_request+0x314>
 800675e:	be00      	bkpt	0x0000
 8006760:	2300      	movs	r3, #0
 8006762:	e14a      	b.n	80069fa <process_control_request+0x5ae>
        break;
 8006764:	bf00      	nop
      }
    break;
 8006766:	e147      	b.n	80069f8 <process_control_request+0x5ac>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	889b      	ldrh	r3, [r3, #4]
 800676c:	b29b      	uxth	r3, r3
 800676e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006770:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006772:	b2db      	uxtb	r3, r3
 8006774:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8006778:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800677c:	2b0f      	cmp	r3, #15
 800677e:	d901      	bls.n	8006784 <process_control_request+0x338>
 8006780:	2300      	movs	r3, #0
 8006782:	e13a      	b.n	80069fa <process_control_request+0x5ae>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8006784:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006788:	4a79      	ldr	r2, [pc, #484]	@ (8006970 <process_control_request+0x524>)
 800678a:	4413      	add	r3, r2
 800678c:	791b      	ldrb	r3, [r3, #4]
 800678e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 8006792:	2300      	movs	r3, #0
 8006794:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8006796:	4b78      	ldr	r3, [pc, #480]	@ (8006978 <process_control_request+0x52c>)
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800679e:	429a      	cmp	r2, r3
 80067a0:	d207      	bcs.n	80067b2 <process_control_request+0x366>
    driver = &_app_driver[drvid];
 80067a2:	4b76      	ldr	r3, [pc, #472]	@ (800697c <process_control_request+0x530>)
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80067aa:	015b      	lsls	r3, r3, #5
 80067ac:	4413      	add	r3, r2
 80067ae:	623b      	str	r3, [r7, #32]
 80067b0:	e00f      	b.n	80067d2 <process_control_request+0x386>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80067b2:	4b71      	ldr	r3, [pc, #452]	@ (8006978 <process_control_request+0x52c>)
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80067bc:	429a      	cmp	r2, r3
 80067be:	db08      	blt.n	80067d2 <process_control_request+0x386>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80067c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80067c4:	4a6c      	ldr	r2, [pc, #432]	@ (8006978 <process_control_request+0x52c>)
 80067c6:	7812      	ldrb	r2, [r2, #0]
 80067c8:	1a9b      	subs	r3, r3, r2
 80067ca:	015b      	lsls	r3, r3, #5
 80067cc:	4a6c      	ldr	r2, [pc, #432]	@ (8006980 <process_control_request+0x534>)
 80067ce:	4413      	add	r3, r2
 80067d0:	623b      	str	r3, [r7, #32]
  return driver;
 80067d2:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80067d4:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 80067d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <process_control_request+0x394>
 80067dc:	2300      	movs	r3, #0
 80067de:	e10c      	b.n	80069fa <process_control_request+0x5ae>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 80067e0:	79fb      	ldrb	r3, [r7, #7]
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff fe18 	bl	800641c <invoke_class_control>
 80067ec:	4603      	mov	r3, r0
 80067ee:	f083 0301 	eor.w	r3, r3, #1
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 80fe 	beq.w	80069f6 <process_control_request+0x5aa>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <process_control_request+0x3c0>
 8006808:	2300      	movs	r3, #0
 800680a:	e0f6      	b.n	80069fa <process_control_request+0x5ae>

        switch(p_request->bRequest) {
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	785b      	ldrb	r3, [r3, #1]
 8006810:	3b0a      	subs	r3, #10
 8006812:	2b01      	cmp	r3, #1
 8006814:	d816      	bhi.n	8006844 <process_control_request+0x3f8>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8006816:	2000      	movs	r0, #0
 8006818:	f001 f88c 	bl	8007934 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	785b      	ldrb	r3, [r3, #1]
 8006820:	2b0a      	cmp	r3, #10
 8006822:	d109      	bne.n	8006838 <process_control_request+0x3ec>
              uint8_t alternate = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8006828:	f107 020f 	add.w	r2, r7, #15
 800682c:	79f8      	ldrb	r0, [r7, #7]
 800682e:	2301      	movs	r3, #1
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	f001 f803 	bl	800783c <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 8006836:	e007      	b.n	8006848 <process_control_request+0x3fc>
              tud_control_status(rhport, p_request);
 8006838:	79fb      	ldrb	r3, [r7, #7]
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	4618      	mov	r0, r3
 800683e:	f000 ff8b 	bl	8007758 <tud_control_status>
          break;
 8006842:	e001      	b.n	8006848 <process_control_request+0x3fc>

          default: return false;
 8006844:	2300      	movs	r3, #0
 8006846:	e0d8      	b.n	80069fa <process_control_request+0x5ae>
        }
      }
      break;
 8006848:	e0d5      	b.n	80069f6 <process_control_request+0x5aa>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	889b      	ldrh	r3, [r3, #4]
 800684e:	b29b      	uxth	r3, r3
 8006850:	83bb      	strh	r3, [r7, #28]
 8006852:	8bbb      	ldrh	r3, [r7, #28]
 8006854:	b2db      	uxtb	r3, r3
 8006856:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800685a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800685e:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006860:	7fbb      	ldrb	r3, [r7, #30]
 8006862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006866:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8006868:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 800686c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006870:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006872:	7ffb      	ldrb	r3, [r7, #31]
 8006874:	09db      	lsrs	r3, r3, #7
 8006876:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8006878:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 800687c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8006880:	2b05      	cmp	r3, #5
 8006882:	d90a      	bls.n	800689a <process_control_request+0x44e>
 8006884:	4b3b      	ldr	r3, [pc, #236]	@ (8006974 <process_control_request+0x528>)
 8006886:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006888:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d000      	beq.n	8006896 <process_control_request+0x44a>
 8006894:	be00      	bkpt	0x0000
 8006896:	2300      	movs	r3, #0
 8006898:	e0af      	b.n	80069fa <process_control_request+0x5ae>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 800689a:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 800689e:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80068a2:	4933      	ldr	r1, [pc, #204]	@ (8006970 <process_control_request+0x524>)
 80068a4:	0052      	lsls	r2, r2, #1
 80068a6:	440a      	add	r2, r1
 80068a8:	4413      	add	r3, r2
 80068aa:	3314      	adds	r3, #20
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 80068b0:	2300      	movs	r3, #0
 80068b2:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 80068b4:	4b30      	ldr	r3, [pc, #192]	@ (8006978 <process_control_request+0x52c>)
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	7efa      	ldrb	r2, [r7, #27]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d206      	bcs.n	80068cc <process_control_request+0x480>
    driver = &_app_driver[drvid];
 80068be:	4b2f      	ldr	r3, [pc, #188]	@ (800697c <process_control_request+0x530>)
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	7efb      	ldrb	r3, [r7, #27]
 80068c4:	015b      	lsls	r3, r3, #5
 80068c6:	4413      	add	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]
 80068ca:	e00d      	b.n	80068e8 <process_control_request+0x49c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80068cc:	4b2a      	ldr	r3, [pc, #168]	@ (8006978 <process_control_request+0x52c>)
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	1c5a      	adds	r2, r3, #1
 80068d2:	7efb      	ldrb	r3, [r7, #27]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	db07      	blt.n	80068e8 <process_control_request+0x49c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80068d8:	7efb      	ldrb	r3, [r7, #27]
 80068da:	4a27      	ldr	r2, [pc, #156]	@ (8006978 <process_control_request+0x52c>)
 80068dc:	7812      	ldrb	r2, [r2, #0]
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	015b      	lsls	r3, r3, #5
 80068e2:	4a27      	ldr	r2, [pc, #156]	@ (8006980 <process_control_request+0x534>)
 80068e4:	4413      	add	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]
  return driver;
 80068e8:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80068ea:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00c      	beq.n	8006914 <process_control_request+0x4c8>
        // Forward class request to its driver
        TU_VERIFY(driver);
 80068fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <process_control_request+0x4b8>
 8006900:	2300      	movs	r3, #0
 8006902:	e07a      	b.n	80069fa <process_control_request+0x5ae>
        return invoke_class_control(rhport, driver, p_request);
 8006904:	79fb      	ldrb	r3, [r7, #7]
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800690a:	4618      	mov	r0, r3
 800690c:	f7ff fd86 	bl	800641c <invoke_class_control>
 8006910:	4603      	mov	r3, r0
 8006912:	e072      	b.n	80069fa <process_control_request+0x5ae>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	785b      	ldrb	r3, [r3, #1]
 8006918:	2b03      	cmp	r3, #3
 800691a:	d017      	beq.n	800694c <process_control_request+0x500>
 800691c:	2b03      	cmp	r3, #3
 800691e:	dc52      	bgt.n	80069c6 <process_control_request+0x57a>
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <process_control_request+0x4de>
 8006924:	2b01      	cmp	r3, #1
 8006926:	d011      	beq.n	800694c <process_control_request+0x500>
 8006928:	e04d      	b.n	80069c6 <process_control_request+0x57a>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 800692a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800692e:	79fb      	ldrb	r3, [r7, #7]
 8006930:	4611      	mov	r1, r2
 8006932:	4618      	mov	r0, r3
 8006934:	f000 feba 	bl	80076ac <usbd_edpt_stalled>
 8006938:	4603      	mov	r3, r0
 800693a:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 800693c:	f107 020c 	add.w	r2, r7, #12
 8006940:	79f8      	ldrb	r0, [r7, #7]
 8006942:	2302      	movs	r3, #2
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	f000 ff79 	bl	800783c <tud_control_xfer>
          }
          break;
 800694a:	e048      	b.n	80069de <process_control_request+0x592>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	885b      	ldrh	r3, [r3, #2]
 8006950:	b29b      	uxth	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d11d      	bne.n	8006992 <process_control_request+0x546>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	785b      	ldrb	r3, [r3, #1]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d112      	bne.n	8006984 <process_control_request+0x538>
                usbd_edpt_clear_stall(rhport, ep_addr);
 800695e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8006962:	79fb      	ldrb	r3, [r7, #7]
 8006964:	4611      	mov	r1, r2
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fe62 	bl	8007630 <usbd_edpt_clear_stall>
 800696c:	e011      	b.n	8006992 <process_control_request+0x546>
 800696e:	bf00      	nop
 8006970:	20000c14 	.word	0x20000c14
 8006974:	e000edf0 	.word	0xe000edf0
 8006978:	20000c48 	.word	0x20000c48
 800697c:	20000c44 	.word	0x20000c44
 8006980:	0800a35c 	.word	0x0800a35c
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 8006984:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8006988:	79fb      	ldrb	r3, [r7, #7]
 800698a:	4611      	mov	r1, r2
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fe11 	bl	80075b4 <usbd_edpt_stall>
              }
            }

            if (driver) {
 8006992:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006994:	2b00      	cmp	r3, #0
 8006996:	d021      	beq.n	80069dc <process_control_request+0x590>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8006998:	79fb      	ldrb	r3, [r7, #7]
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff fd3c 	bl	800641c <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 80069a4:	2000      	movs	r0, #0
 80069a6:	f000 ffc5 	bl	8007934 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 80069aa:	4b16      	ldr	r3, [pc, #88]	@ (8006a04 <process_control_request+0x5b8>)
 80069ac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80069b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d110      	bne.n	80069dc <process_control_request+0x590>
 80069ba:	79fb      	ldrb	r3, [r7, #7]
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 feca 	bl	8007758 <tud_control_status>
            }
          }
          break;
 80069c4:	e00a      	b.n	80069dc <process_control_request+0x590>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 80069c6:	4b10      	ldr	r3, [pc, #64]	@ (8006a08 <process_control_request+0x5bc>)
 80069c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d000      	beq.n	80069d8 <process_control_request+0x58c>
 80069d6:	be00      	bkpt	0x0000
            return false;
 80069d8:	2300      	movs	r3, #0
 80069da:	e00e      	b.n	80069fa <process_control_request+0x5ae>
          break;
 80069dc:	bf00      	nop
        }
      }
    }
    break;
 80069de:	e00b      	b.n	80069f8 <process_control_request+0x5ac>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 80069e0:	4b09      	ldr	r3, [pc, #36]	@ (8006a08 <process_control_request+0x5bc>)
 80069e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80069e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d000      	beq.n	80069f2 <process_control_request+0x5a6>
 80069f0:	be00      	bkpt	0x0000
      return false;
 80069f2:	2300      	movs	r3, #0
 80069f4:	e001      	b.n	80069fa <process_control_request+0x5ae>
      break;
 80069f6:	bf00      	nop
  }

  return true;
 80069f8:	2301      	movs	r3, #1
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3768      	adds	r7, #104	@ 0x68
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000c14 	.word	0x20000c14
 8006a08:	e000edf0 	.word	0xe000edf0

08006a0c <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b096      	sub	sp, #88	@ 0x58
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	4603      	mov	r3, r0
 8006a14:	460a      	mov	r2, r1
 8006a16:	71fb      	strb	r3, [r7, #7]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8006a1c:	79bb      	ldrb	r3, [r7, #6]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fb f87e 	bl	8001b24 <tud_descriptor_configuration_cb>
 8006a28:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8006a2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <process_set_config+0x2c>
 8006a30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a32:	785b      	ldrb	r3, [r3, #1]
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d00a      	beq.n	8006a4e <process_set_config+0x42>
 8006a38:	4b81      	ldr	r3, [pc, #516]	@ (8006c40 <process_set_config+0x234>)
 8006a3a:	623b      	str	r3, [r7, #32]
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d000      	beq.n	8006a4a <process_set_config+0x3e>
 8006a48:	be00      	bkpt	0x0000
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	e0f4      	b.n	8006c38 <process_set_config+0x22c>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8006a4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a50:	79db      	ldrb	r3, [r3, #7]
 8006a52:	115b      	asrs	r3, r3, #5
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	b2d9      	uxtb	r1, r3
 8006a5a:	4a7a      	ldr	r2, [pc, #488]	@ (8006c44 <process_set_config+0x238>)
 8006a5c:	7813      	ldrb	r3, [r2, #0]
 8006a5e:	f361 1304 	bfi	r3, r1, #4, #1
 8006a62:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8006a64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a66:	79db      	ldrb	r3, [r3, #7]
 8006a68:	119b      	asrs	r3, r3, #6
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	b2d9      	uxtb	r1, r3
 8006a70:	4a74      	ldr	r2, [pc, #464]	@ (8006c44 <process_set_config+0x238>)
 8006a72:	7813      	ldrb	r3, [r2, #0]
 8006a74:	f361 1345 	bfi	r3, r1, #5, #1
 8006a78:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8006a7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a7c:	3309      	adds	r3, #9
 8006a7e:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8006a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a82:	885b      	ldrh	r3, [r3, #2]
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	461a      	mov	r2, r3
 8006a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a8a:	4413      	add	r3, r2
 8006a8c:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 8006a8e:	e0cd      	b.n	8006c2c <process_set_config+0x220>
  {
    uint8_t assoc_itf_count = 1;
 8006a90:	2301      	movs	r3, #1
 8006a92:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8006a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a98:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8006aa0:	2b0b      	cmp	r3, #11
 8006aa2:	d10f      	bne.n	8006ac4 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8006aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aa6:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 8006aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aaa:	78db      	ldrb	r3, [r3, #3]
 8006aac:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8006ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ab2:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8006ac2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ac6:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	3301      	adds	r3, #1
 8006acc:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	d00a      	beq.n	8006ae8 <process_set_config+0xdc>
 8006ad2:	4b5b      	ldr	r3, [pc, #364]	@ (8006c40 <process_set_config+0x234>)
 8006ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d000      	beq.n	8006ae4 <process_set_config+0xd8>
 8006ae2:	be00      	bkpt	0x0000
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	e0a7      	b.n	8006c38 <process_set_config+0x22c>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8006ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aea:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8006aec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8006af4:	2300      	movs	r3, #0
 8006af6:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8006afa:	e07d      	b.n	8006bf8 <process_set_config+0x1ec>
 8006afc:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8006b00:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8006b06:	4b50      	ldr	r3, [pc, #320]	@ (8006c48 <process_set_config+0x23c>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	7bfa      	ldrb	r2, [r7, #15]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d206      	bcs.n	8006b1e <process_set_config+0x112>
    driver = &_app_driver[drvid];
 8006b10:	4b4e      	ldr	r3, [pc, #312]	@ (8006c4c <process_set_config+0x240>)
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
 8006b16:	015b      	lsls	r3, r3, #5
 8006b18:	4413      	add	r3, r2
 8006b1a:	60bb      	str	r3, [r7, #8]
 8006b1c:	e00d      	b.n	8006b3a <process_set_config+0x12e>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006b1e:	4b4a      	ldr	r3, [pc, #296]	@ (8006c48 <process_set_config+0x23c>)
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	db07      	blt.n	8006b3a <process_set_config+0x12e>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
 8006b2c:	4a46      	ldr	r2, [pc, #280]	@ (8006c48 <process_set_config+0x23c>)
 8006b2e:	7812      	ldrb	r2, [r2, #0]
 8006b30:	1a9b      	subs	r3, r3, r2
 8006b32:	015b      	lsls	r3, r3, #5
 8006b34:	4a46      	ldr	r2, [pc, #280]	@ (8006c50 <process_set_config+0x244>)
 8006b36:	4413      	add	r3, r2
 8006b38:	60bb      	str	r3, [r7, #8]
  return driver;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8006b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10a      	bne.n	8006b5a <process_set_config+0x14e>
 8006b44:	4b3e      	ldr	r3, [pc, #248]	@ (8006c40 <process_set_config+0x234>)
 8006b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d000      	beq.n	8006b56 <process_set_config+0x14a>
 8006b54:	be00      	bkpt	0x0000
 8006b56:	2300      	movs	r3, #0
 8006b58:	e06e      	b.n	8006c38 <process_set_config+0x22c>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8006b60:	79f8      	ldrb	r0, [r7, #7]
 8006b62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b64:	4798      	blx	r3
 8006b66:	4603      	mov	r3, r0
 8006b68:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8006b6a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	d93e      	bls.n	8006bee <process_set_config+0x1e2>
 8006b70:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006b72:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d83a      	bhi.n	8006bee <process_set_config+0x1e2>
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8006b7e:	e024      	b.n	8006bca <process_set_config+0x1be>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8006b80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b82:	789a      	ldrb	r2, [r3, #2]
 8006b84:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8006b88:	4413      	add	r3, r2
 8006b8a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8006b8e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006b92:	4a2c      	ldr	r2, [pc, #176]	@ (8006c44 <process_set_config+0x238>)
 8006b94:	4413      	add	r3, r2
 8006b96:	791b      	ldrb	r3, [r3, #4]
 8006b98:	2bff      	cmp	r3, #255	@ 0xff
 8006b9a:	d00a      	beq.n	8006bb2 <process_set_config+0x1a6>
 8006b9c:	4b28      	ldr	r3, [pc, #160]	@ (8006c40 <process_set_config+0x234>)
 8006b9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d000      	beq.n	8006bae <process_set_config+0x1a2>
 8006bac:	be00      	bkpt	0x0000
 8006bae:	2300      	movs	r3, #0
 8006bb0:	e042      	b.n	8006c38 <process_set_config+0x22c>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8006bb2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006bb6:	4a23      	ldr	r2, [pc, #140]	@ (8006c44 <process_set_config+0x238>)
 8006bb8:	4413      	add	r3, r2
 8006bba:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8006bbe:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8006bc0:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8006bca:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8006bce:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d3d4      	bcc.n	8006b80 <process_set_config+0x174>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8006bd6:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8006bda:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006bdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006bde:	481d      	ldr	r0, [pc, #116]	@ (8006c54 <process_set_config+0x248>)
 8006be0:	f002 ffb6 	bl	8009b50 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8006be4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006be6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006be8:	4413      	add	r3, r2
 8006bea:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 8006bec:	e00c      	b.n	8006c08 <process_set_config+0x1fc>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8006bee:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8006bf8:	4b13      	ldr	r3, [pc, #76]	@ (8006c48 <process_set_config+0x23c>)
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8006c02:	429a      	cmp	r2, r3
 8006c04:	f6bf af7a 	bge.w	8006afc <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8006c08:	4b0f      	ldr	r3, [pc, #60]	@ (8006c48 <process_set_config+0x23c>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8006c12:	429a      	cmp	r2, r3
 8006c14:	da0a      	bge.n	8006c2c <process_set_config+0x220>
 8006c16:	4b0a      	ldr	r3, [pc, #40]	@ (8006c40 <process_set_config+0x234>)
 8006c18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d000      	beq.n	8006c28 <process_set_config+0x21c>
 8006c26:	be00      	bkpt	0x0000
 8006c28:	2300      	movs	r3, #0
 8006c2a:	e005      	b.n	8006c38 <process_set_config+0x22c>
  while( p_desc < desc_end )
 8006c2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c30:	429a      	cmp	r2, r3
 8006c32:	f4ff af2d 	bcc.w	8006a90 <process_set_config+0x84>
  }

  return true;
 8006c36:	2301      	movs	r3, #1
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3758      	adds	r7, #88	@ 0x58
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	e000edf0 	.word	0xe000edf0
 8006c44:	20000c14 	.word	0x20000c14
 8006c48:	20000c48 	.word	0x20000c48
 8006c4c:	20000c44 	.word	0x20000c44
 8006c50:	0800a35c 	.word	0x0800a35c
 8006c54:	20000c28 	.word	0x20000c28

08006c58 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b094      	sub	sp, #80	@ 0x50
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	4603      	mov	r3, r0
 8006c60:	6039      	str	r1, [r7, #0]
 8006c62:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	885b      	ldrh	r3, [r3, #2]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8006c6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c6e:	0a1b      	lsrs	r3, r3, #8
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	885b      	ldrh	r3, [r3, #2]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8006c80:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 8006c88:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	2b0e      	cmp	r3, #14
 8006c90:	f200 80b4 	bhi.w	8006dfc <process_get_descriptor+0x1a4>
 8006c94:	a201      	add	r2, pc, #4	@ (adr r2, 8006c9c <process_get_descriptor+0x44>)
 8006c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9a:	bf00      	nop
 8006c9c:	08006cd9 	.word	0x08006cd9
 8006ca0:	08006d3d 	.word	0x08006d3d
 8006ca4:	08006da3 	.word	0x08006da3
 8006ca8:	08006dfd 	.word	0x08006dfd
 8006cac:	08006dfd 	.word	0x08006dfd
 8006cb0:	08006dd7 	.word	0x08006dd7
 8006cb4:	08006d3d 	.word	0x08006d3d
 8006cb8:	08006dfd 	.word	0x08006dfd
 8006cbc:	08006dfd 	.word	0x08006dfd
 8006cc0:	08006dfd 	.word	0x08006dfd
 8006cc4:	08006dfd 	.word	0x08006dfd
 8006cc8:	08006dfd 	.word	0x08006dfd
 8006ccc:	08006dfd 	.word	0x08006dfd
 8006cd0:	08006dfd 	.word	0x08006dfd
 8006cd4:	08006d0b 	.word	0x08006d0b
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8006cd8:	f7fa ff06 	bl	8001ae8 <tud_descriptor_device_cb>
 8006cdc:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 8006cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10a      	bne.n	8006cfa <process_get_descriptor+0xa2>
 8006ce4:	4b48      	ldr	r3, [pc, #288]	@ (8006e08 <process_get_descriptor+0x1b0>)
 8006ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d000      	beq.n	8006cf6 <process_get_descriptor+0x9e>
 8006cf4:	be00      	bkpt	0x0000
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	e081      	b.n	8006dfe <process_get_descriptor+0x1a6>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8006cfa:	79f8      	ldrb	r0, [r7, #7]
 8006cfc:	2312      	movs	r3, #18
 8006cfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	f000 fd9b 	bl	800783c <tud_control_xfer>
 8006d06:	4603      	mov	r3, r0
 8006d08:	e079      	b.n	8006dfe <process_get_descriptor+0x1a6>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8006d0a:	f7fa ff19 	bl	8001b40 <tud_descriptor_bos_cb>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 8006d12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <process_get_descriptor+0xc4>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e070      	b.n	8006dfe <process_get_descriptor+0x1a6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8006d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d1e:	3302      	adds	r3, #2
 8006d20:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 8006d22:	6a3b      	ldr	r3, [r7, #32]
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8006d2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006d30:	79f8      	ldrb	r0, [r7, #7]
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	f000 fd82 	bl	800783c <tud_control_xfer>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	e060      	b.n	8006dfe <process_get_descriptor+0x1a6>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 8006d3c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d114      	bne.n	8006d6e <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8006d44:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fa feeb 	bl	8001b24 <tud_descriptor_configuration_cb>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 8006d52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d116      	bne.n	8006d86 <process_get_descriptor+0x12e>
 8006d58:	4b2b      	ldr	r3, [pc, #172]	@ (8006e08 <process_get_descriptor+0x1b0>)
 8006d5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d000      	beq.n	8006d6a <process_get_descriptor+0x112>
 8006d68:	be00      	bkpt	0x0000
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	e047      	b.n	8006dfe <process_get_descriptor+0x1a6>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8006d6e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe ffde 	bl	8005d34 <tud_descriptor_other_speed_configuration_cb>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 8006d7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <process_get_descriptor+0x12e>
 8006d82:	2300      	movs	r3, #0
 8006d84:	e03b      	b.n	8006dfe <process_get_descriptor+0x1a6>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8006d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d88:	3302      	adds	r3, #2
 8006d8a:	61fb      	str	r3, [r7, #28]
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8006d92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d94:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006d96:	79f8      	ldrb	r0, [r7, #7]
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	f000 fd4f 	bl	800783c <tud_control_xfer>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	e02d      	b.n	8006dfe <process_get_descriptor+0x1a6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	889b      	ldrh	r3, [r3, #4]
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8006dac:	4611      	mov	r1, r2
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fa fed0 	bl	8001b54 <tud_descriptor_string_cb>
 8006db4:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 8006db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <process_get_descriptor+0x168>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e01e      	b.n	8006dfe <process_get_descriptor+0x1a6>
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc2:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8006dc8:	79f8      	ldrb	r0, [r7, #7]
 8006dca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	f000 fd35 	bl	800783c <tud_control_xfer>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	e013      	b.n	8006dfe <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8006dd6:	f7fe ffa5 	bl	8005d24 <tud_descriptor_device_qualifier_cb>
 8006dda:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 8006ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <process_get_descriptor+0x18e>
 8006de2:	2300      	movs	r3, #0
 8006de4:	e00b      	b.n	8006dfe <process_get_descriptor+0x1a6>
 8006de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8006dee:	79f8      	ldrb	r0, [r7, #7]
 8006df0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	f000 fd22 	bl	800783c <tud_control_xfer>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	e000      	b.n	8006dfe <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    default: return false;
 8006dfc:	2300      	movs	r3, #0
  }
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3750      	adds	r7, #80	@ 0x50
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	e000edf0 	.word	0xe000edf0

08006e0c <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b0a0      	sub	sp, #128	@ 0x80
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	785b      	ldrb	r3, [r3, #1]
 8006e22:	3b02      	subs	r3, #2
 8006e24:	2b04      	cmp	r3, #4
 8006e26:	f200 8175 	bhi.w	8007114 <dcd_event_handler+0x308>
 8006e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e30 <dcd_event_handler+0x24>)
 8006e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e30:	08006e45 	.word	0x08006e45
 8006e34:	08006eb5 	.word	0x08006eb5
 8006e38:	08006e71 	.word	0x08006e71
 8006e3c:	08006e93 	.word	0x08006e93
 8006e40:	080070e1 	.word	0x080070e1
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8006e44:	4aac      	ldr	r2, [pc, #688]	@ (80070f8 <dcd_event_handler+0x2ec>)
 8006e46:	7813      	ldrb	r3, [r2, #0]
 8006e48:	f023 0301 	bic.w	r3, r3, #1
 8006e4c:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8006e4e:	4aaa      	ldr	r2, [pc, #680]	@ (80070f8 <dcd_event_handler+0x2ec>)
 8006e50:	7813      	ldrb	r3, [r2, #0]
 8006e52:	f023 0302 	bic.w	r3, r3, #2
 8006e56:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8006e58:	4ba7      	ldr	r3, [pc, #668]	@ (80070f8 <dcd_event_handler+0x2ec>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8006e5e:	4aa6      	ldr	r2, [pc, #664]	@ (80070f8 <dcd_event_handler+0x2ec>)
 8006e60:	7813      	ldrb	r3, [r2, #0]
 8006e62:	f023 0304 	bic.w	r3, r3, #4
 8006e66:	7013      	strb	r3, [r2, #0]
      send = true;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8006e6e:	e15a      	b.n	8007126 <dcd_event_handler+0x31a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8006e70:	4ba1      	ldr	r3, [pc, #644]	@ (80070f8 <dcd_event_handler+0x2ec>)
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 814e 	beq.w	800711c <dcd_event_handler+0x310>
        _usbd_dev.suspended = 1;
 8006e80:	4a9d      	ldr	r2, [pc, #628]	@ (80070f8 <dcd_event_handler+0x2ec>)
 8006e82:	7813      	ldrb	r3, [r2, #0]
 8006e84:	f043 0304 	orr.w	r3, r3, #4
 8006e88:	7013      	strb	r3, [r2, #0]
        send = true;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8006e90:	e144      	b.n	800711c <dcd_event_handler+0x310>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8006e92:	4b99      	ldr	r3, [pc, #612]	@ (80070f8 <dcd_event_handler+0x2ec>)
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 813f 	beq.w	8007120 <dcd_event_handler+0x314>
        _usbd_dev.suspended = 0;
 8006ea2:	4a95      	ldr	r2, [pc, #596]	@ (80070f8 <dcd_event_handler+0x2ec>)
 8006ea4:	7813      	ldrb	r3, [r2, #0]
 8006ea6:	f023 0304 	bic.w	r3, r3, #4
 8006eaa:	7013      	strb	r3, [r2, #0]
        send = true;
 8006eac:	2301      	movs	r3, #1
 8006eae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8006eb2:	e135      	b.n	8007120 <dcd_event_handler+0x314>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8006eba:	e039      	b.n	8006f30 <dcd_event_handler+0x124>
 8006ebc:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006ec0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 8006ec8:	4b8c      	ldr	r3, [pc, #560]	@ (80070fc <dcd_event_handler+0x2f0>)
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d207      	bcs.n	8006ee4 <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 8006ed4:	4b8a      	ldr	r3, [pc, #552]	@ (8007100 <dcd_event_handler+0x2f4>)
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006edc:	015b      	lsls	r3, r3, #5
 8006ede:	4413      	add	r3, r2
 8006ee0:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ee2:	e00f      	b.n	8006f04 <dcd_event_handler+0xf8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006ee4:	4b85      	ldr	r3, [pc, #532]	@ (80070fc <dcd_event_handler+0x2f0>)
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	db08      	blt.n	8006f04 <dcd_event_handler+0xf8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006ef2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006ef6:	4a81      	ldr	r2, [pc, #516]	@ (80070fc <dcd_event_handler+0x2f0>)
 8006ef8:	7812      	ldrb	r2, [r2, #0]
 8006efa:	1a9b      	subs	r3, r3, r2
 8006efc:	015b      	lsls	r3, r3, #5
 8006efe:	4a81      	ldr	r2, [pc, #516]	@ (8007104 <dcd_event_handler+0x2f8>)
 8006f00:	4413      	add	r3, r2
 8006f02:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 8006f04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 8006f06:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 8006f08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00b      	beq.n	8006f26 <dcd_event_handler+0x11a>
 8006f0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d007      	beq.n	8006f26 <dcd_event_handler+0x11a>
          driver->sof(event->rhport, event->sof.frame_count);
 8006f16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	7810      	ldrb	r0, [r2, #0]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	6852      	ldr	r2, [r2, #4]
 8006f22:	4611      	mov	r1, r2
 8006f24:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006f26:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8006f30:	4b72      	ldr	r3, [pc, #456]	@ (80070fc <dcd_event_handler+0x2f0>)
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	dabe      	bge.n	8006ebc <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8006f3e:	4b6e      	ldr	r3, [pc, #440]	@ (80070f8 <dcd_event_handler+0x2ec>)
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d05a      	beq.n	8007002 <dcd_event_handler+0x1f6>
        _usbd_dev.suspended = 0;
 8006f4c:	4a6a      	ldr	r2, [pc, #424]	@ (80070f8 <dcd_event_handler+0x2ec>)
 8006f4e:	7813      	ldrb	r3, [r2, #0]
 8006f50:	f023 0304 	bic.w	r3, r3, #4
 8006f54:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8006f56:	f107 0314 	add.w	r3, r7, #20
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	605a      	str	r2, [r3, #4]
 8006f60:	609a      	str	r2, [r3, #8]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	753b      	strb	r3, [r7, #20]
 8006f68:	2305      	movs	r3, #5
 8006f6a:	757b      	strb	r3, [r7, #21]
 8006f6c:	f107 0314 	add.w	r3, r7, #20
 8006f70:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f72:	78fb      	ldrb	r3, [r7, #3]
 8006f74:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8006f78:	4b63      	ldr	r3, [pc, #396]	@ (8007108 <dcd_event_handler+0x2fc>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f80:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f82:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8006f86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8006f8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f8e:	f083 0301 	eor.w	r3, r3, #1
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d003      	beq.n	8006fa0 <dcd_event_handler+0x194>
    qhdl->interrupt_set(false);
 8006f98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 8006fa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fe fe2c 	bl	8005c04 <tu_fifo_write>
 8006fac:	4603      	mov	r3, r0
 8006fae:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 8006fb2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006fb6:	f083 0301 	eor.w	r3, r3, #1
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d003      	beq.n	8006fc8 <dcd_event_handler+0x1bc>
    qhdl->interrupt_set(true);
 8006fc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2001      	movs	r0, #1
 8006fc6:	4798      	blx	r3
  }

  return success;
 8006fc8:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8006fcc:	f083 0301 	eor.w	r3, r3, #1
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d009      	beq.n	8006fea <dcd_event_handler+0x1de>
 8006fd6:	4b4d      	ldr	r3, [pc, #308]	@ (800710c <dcd_event_handler+0x300>)
 8006fd8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00c      	beq.n	8007000 <dcd_event_handler+0x1f4>
 8006fe6:	be00      	bkpt	0x0000
 8006fe8:	e00a      	b.n	8007000 <dcd_event_handler+0x1f4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8006fea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fec:	7818      	ldrb	r0, [r3, #0]
 8006fee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ff0:	785b      	ldrb	r3, [r3, #1]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	f7fe fe7b 	bl	8005cf4 <tud_event_hook_cb>
  return true;
 8006ffe:	e000      	b.n	8007002 <dcd_event_handler+0x1f6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8007000:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8007002:	4b3d      	ldr	r3, [pc, #244]	@ (80070f8 <dcd_event_handler+0x2ec>)
 8007004:	78db      	ldrb	r3, [r3, #3]
 8007006:	b2db      	uxtb	r3, r3
 8007008:	657b      	str	r3, [r7, #84]	@ 0x54
 800700a:	2300      	movs	r3, #0
 800700c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8007010:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8007014:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007016:	fa22 f303 	lsr.w	r3, r2, r3
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	bf14      	ite	ne
 8007022:	2301      	movne	r3, #1
 8007024:	2300      	moveq	r3, #0
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	d07b      	beq.n	8007124 <dcd_event_handler+0x318>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 800702c:	f107 0308 	add.w	r3, r7, #8
 8007030:	2200      	movs	r2, #0
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	605a      	str	r2, [r3, #4]
 8007036:	609a      	str	r2, [r3, #8]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	723b      	strb	r3, [r7, #8]
 800703e:	2303      	movs	r3, #3
 8007040:	727b      	strb	r3, [r7, #9]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	f107 0308 	add.w	r3, r7, #8
 800704c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800704e:	78fb      	ldrb	r3, [r7, #3]
 8007050:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8007054:	4b2c      	ldr	r3, [pc, #176]	@ (8007108 <dcd_event_handler+0x2fc>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	647b      	str	r3, [r7, #68]	@ 0x44
 800705a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800705c:	643b      	str	r3, [r7, #64]	@ 0x40
 800705e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007062:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 8007066:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800706a:	f083 0301 	eor.w	r3, r3, #1
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	d003      	beq.n	800707c <dcd_event_handler+0x270>
    qhdl->interrupt_set(false);
 8007074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2000      	movs	r0, #0
 800707a:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 800707c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800707e:	3304      	adds	r3, #4
 8007080:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007082:	4618      	mov	r0, r3
 8007084:	f7fe fdbe 	bl	8005c04 <tu_fifo_write>
 8007088:	4603      	mov	r3, r0
 800708a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 800708e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007092:	f083 0301 	eor.w	r3, r3, #1
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <dcd_event_handler+0x298>
    qhdl->interrupt_set(true);
 800709c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2001      	movs	r0, #1
 80070a2:	4798      	blx	r3
  return success;
 80070a4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80070a8:	f083 0301 	eor.w	r3, r3, #1
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d009      	beq.n	80070c6 <dcd_event_handler+0x2ba>
 80070b2:	4b16      	ldr	r3, [pc, #88]	@ (800710c <dcd_event_handler+0x300>)
 80070b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00c      	beq.n	80070dc <dcd_event_handler+0x2d0>
 80070c2:	be00      	bkpt	0x0000
 80070c4:	e00a      	b.n	80070dc <dcd_event_handler+0x2d0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 80070c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070c8:	7818      	ldrb	r0, [r3, #0]
 80070ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070cc:	785b      	ldrb	r3, [r3, #1]
 80070ce:	4619      	mov	r1, r3
 80070d0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80070d4:	461a      	mov	r2, r3
 80070d6:	f7fe fe0d 	bl	8005cf4 <tud_event_hook_cb>
  return true;
 80070da:	e000      	b.n	80070de <dcd_event_handler+0x2d2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80070dc:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 80070de:	e021      	b.n	8007124 <dcd_event_handler+0x318>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 80070e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007110 <dcd_event_handler+0x304>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	3301      	adds	r3, #1
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	4b09      	ldr	r3, [pc, #36]	@ (8007110 <dcd_event_handler+0x304>)
 80070ec:	701a      	strb	r2, [r3, #0]
      send = true;
 80070ee:	2301      	movs	r3, #1
 80070f0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 80070f4:	e017      	b.n	8007126 <dcd_event_handler+0x31a>
 80070f6:	bf00      	nop
 80070f8:	20000c14 	.word	0x20000c14
 80070fc:	20000c48 	.word	0x20000c48
 8007100:	20000c44 	.word	0x20000c44
 8007104:	0800a35c 	.word	0x0800a35c
 8007108:	20000d0c 	.word	0x20000d0c
 800710c:	e000edf0 	.word	0xe000edf0
 8007110:	20000c40 	.word	0x20000c40

    default:
      send = true;
 8007114:	2301      	movs	r3, #1
 8007116:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 800711a:	e004      	b.n	8007126 <dcd_event_handler+0x31a>
      break;
 800711c:	bf00      	nop
 800711e:	e002      	b.n	8007126 <dcd_event_handler+0x31a>
      break;
 8007120:	bf00      	nop
 8007122:	e000      	b.n	8007126 <dcd_event_handler+0x31a>
      break;
 8007124:	bf00      	nop
  }

  if (send) {
 8007126:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800712a:	2b00      	cmp	r3, #0
 800712c:	d049      	beq.n	80071c2 <dcd_event_handler+0x3b6>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	637b      	str	r3, [r7, #52]	@ 0x34
 8007132:	78fb      	ldrb	r3, [r7, #3]
 8007134:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8007138:	4b24      	ldr	r3, [pc, #144]	@ (80071cc <dcd_event_handler+0x3c0>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800713e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007140:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007142:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 800714a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800714e:	f083 0301 	eor.w	r3, r3, #1
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	d003      	beq.n	8007160 <dcd_event_handler+0x354>
    qhdl->interrupt_set(false);
 8007158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2000      	movs	r0, #0
 800715e:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8007160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007162:	3304      	adds	r3, #4
 8007164:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007166:	4618      	mov	r0, r3
 8007168:	f7fe fd4c 	bl	8005c04 <tu_fifo_write>
 800716c:	4603      	mov	r3, r0
 800716e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 8007172:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007176:	f083 0301 	eor.w	r3, r3, #1
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <dcd_event_handler+0x37c>
    qhdl->interrupt_set(true);
 8007180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2001      	movs	r0, #1
 8007186:	4798      	blx	r3
  return success;
 8007188:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800718c:	f083 0301 	eor.w	r3, r3, #1
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d009      	beq.n	80071aa <dcd_event_handler+0x39e>
 8007196:	4b0e      	ldr	r3, [pc, #56]	@ (80071d0 <dcd_event_handler+0x3c4>)
 8007198:	623b      	str	r3, [r7, #32]
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0301 	and.w	r3, r3, #1
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00c      	beq.n	80071c0 <dcd_event_handler+0x3b4>
 80071a6:	be00      	bkpt	0x0000
 80071a8:	e00a      	b.n	80071c0 <dcd_event_handler+0x3b4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 80071aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ac:	7818      	ldrb	r0, [r3, #0]
 80071ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b0:	785b      	ldrb	r3, [r3, #1]
 80071b2:	4619      	mov	r1, r3
 80071b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80071b8:	461a      	mov	r2, r3
 80071ba:	f7fe fd9b 	bl	8005cf4 <tud_event_hook_cb>
  return true;
 80071be:	e000      	b.n	80071c2 <dcd_event_handler+0x3b6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80071c0:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 80071c2:	bf00      	nop
 80071c4:	3780      	adds	r7, #128	@ 0x80
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	20000d0c 	.word	0x20000d0c
 80071d0:	e000edf0 	.word	0xe000edf0

080071d4 <usbd_int_set>:

//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled) {
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	4603      	mov	r3, r0
 80071dc:	71fb      	strb	r3, [r7, #7]
  if (enabled) {
 80071de:	79fb      	ldrb	r3, [r7, #7]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d005      	beq.n	80071f0 <usbd_int_set+0x1c>
    dcd_int_enable(_usbd_rhport);
 80071e4:	4b07      	ldr	r3, [pc, #28]	@ (8007204 <usbd_int_set+0x30>)
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f001 f929 	bl	8008440 <dcd_int_enable>
  } else {
    dcd_int_disable(_usbd_rhport);
  }
}
 80071ee:	e004      	b.n	80071fa <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 80071f0:	4b04      	ldr	r3, [pc, #16]	@ (8007204 <usbd_int_set+0x30>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f001 f94b 	bl	8008490 <dcd_int_disable>
}
 80071fa:	bf00      	nop
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	20000069 	.word	0x20000069

08007208 <usbd_spin_lock>:

void usbd_spin_lock(bool in_isr) {
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	4603      	mov	r3, r0
 8007210:	71fb      	strb	r3, [r7, #7]
 8007212:	4b09      	ldr	r3, [pc, #36]	@ (8007238 <usbd_spin_lock+0x30>)
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	79fb      	ldrb	r3, [r7, #7]
 8007218:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 800721a:	7afb      	ldrb	r3, [r7, #11]
 800721c:	f083 0301 	eor.w	r3, r3, #1
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <usbd_spin_lock+0x26>
    ctx->interrupt_set(false);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2000      	movs	r0, #0
 800722c:	4798      	blx	r3
}
 800722e:	bf00      	nop
  osal_spin_lock(&_usbd_spin, in_isr);
}
 8007230:	bf00      	nop
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	2000006c 	.word	0x2000006c

0800723c <usbd_spin_unlock>:
void usbd_spin_unlock(bool in_isr) {
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	4603      	mov	r3, r0
 8007244:	71fb      	strb	r3, [r7, #7]
 8007246:	4b09      	ldr	r3, [pc, #36]	@ (800726c <usbd_spin_unlock+0x30>)
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	79fb      	ldrb	r3, [r7, #7]
 800724c:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 800724e:	7afb      	ldrb	r3, [r7, #11]
 8007250:	f083 0301 	eor.w	r3, r3, #1
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <usbd_spin_unlock+0x26>
    ctx->interrupt_set(true);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2001      	movs	r0, #1
 8007260:	4798      	blx	r3
}
 8007262:	bf00      	nop
  osal_spin_unlock(&_usbd_spin, in_isr);
}
 8007264:	bf00      	nop
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	2000006c 	.word	0x2000006c

08007270 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b08a      	sub	sp, #40	@ 0x28
 8007274:	af00      	add	r7, sp, #0
 8007276:	6039      	str	r1, [r7, #0]
 8007278:	4611      	mov	r1, r2
 800727a:	461a      	mov	r2, r3
 800727c:	4603      	mov	r3, r0
 800727e:	71fb      	strb	r3, [r7, #7]
 8007280:	460b      	mov	r3, r1
 8007282:	71bb      	strb	r3, [r7, #6]
 8007284:	4613      	mov	r3, r2
 8007286:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8007288:	2300      	movs	r3, #0
 800728a:	627b      	str	r3, [r7, #36]	@ 0x24
 800728c:	e04d      	b.n	800732a <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	785b      	ldrb	r3, [r3, #1]
 8007296:	2b05      	cmp	r3, #5
 8007298:	d108      	bne.n	80072ac <usbd_open_edpt_pair+0x3c>
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	78db      	ldrb	r3, [r3, #3]
 800729e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	461a      	mov	r2, r3
 80072a6:	797b      	ldrb	r3, [r7, #5]
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d00a      	beq.n	80072c2 <usbd_open_edpt_pair+0x52>
 80072ac:	4b23      	ldr	r3, [pc, #140]	@ (800733c <usbd_open_edpt_pair+0xcc>)
 80072ae:	61bb      	str	r3, [r7, #24]
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d000      	beq.n	80072be <usbd_open_edpt_pair+0x4e>
 80072bc:	be00      	bkpt	0x0000
 80072be:	2300      	movs	r3, #0
 80072c0:	e038      	b.n	8007334 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 80072c2:	79fb      	ldrb	r3, [r7, #7]
 80072c4:	6a39      	ldr	r1, [r7, #32]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 f83a 	bl	8007340 <usbd_edpt_open>
 80072cc:	4603      	mov	r3, r0
 80072ce:	f083 0301 	eor.w	r3, r3, #1
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00a      	beq.n	80072ee <usbd_open_edpt_pair+0x7e>
 80072d8:	4b18      	ldr	r3, [pc, #96]	@ (800733c <usbd_open_edpt_pair+0xcc>)
 80072da:	61fb      	str	r3, [r7, #28]
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d000      	beq.n	80072ea <usbd_open_edpt_pair+0x7a>
 80072e8:	be00      	bkpt	0x0000
 80072ea:	2300      	movs	r3, #0
 80072ec:	e022      	b.n	8007334 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	789b      	ldrb	r3, [r3, #2]
 80072f2:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
 80072f6:	09db      	lsrs	r3, r3, #7
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d104      	bne.n	8007308 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	789a      	ldrb	r2, [r3, #2]
 8007302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007304:	701a      	strb	r2, [r3, #0]
 8007306:	e003      	b.n	8007310 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	789a      	ldrb	r2, [r3, #2]
 800730c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730e:	701a      	strb	r2, [r3, #0]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	461a      	mov	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8007322:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8007324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007326:	3301      	adds	r3, #1
 8007328:	627b      	str	r3, [r7, #36]	@ 0x24
 800732a:	79bb      	ldrb	r3, [r7, #6]
 800732c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800732e:	429a      	cmp	r2, r3
 8007330:	dbad      	blt.n	800728e <usbd_open_edpt_pair+0x1e>
  }

  return true;
 8007332:	2301      	movs	r3, #1
}
 8007334:	4618      	mov	r0, r3
 8007336:	3728      	adds	r7, #40	@ 0x28
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	e000edf0 	.word	0xe000edf0

08007340 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	4603      	mov	r3, r0
 8007348:	6039      	str	r1, [r7, #0]
 800734a:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 800734c:	4b1c      	ldr	r3, [pc, #112]	@ (80073c0 <usbd_edpt_open+0x80>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	789b      	ldrb	r3, [r3, #2]
 8007356:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007358:	7bfb      	ldrb	r3, [r7, #15]
 800735a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b05      	cmp	r3, #5
 8007362:	d90a      	bls.n	800737a <usbd_edpt_open+0x3a>
 8007364:	4b17      	ldr	r3, [pc, #92]	@ (80073c4 <usbd_edpt_open+0x84>)
 8007366:	613b      	str	r3, [r7, #16]
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b00      	cmp	r3, #0
 8007372:	d000      	beq.n	8007376 <usbd_edpt_open+0x36>
 8007374:	be00      	bkpt	0x0000
 8007376:	2300      	movs	r3, #0
 8007378:	e01d      	b.n	80073b6 <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 800737a:	4b13      	ldr	r3, [pc, #76]	@ (80073c8 <usbd_edpt_open+0x88>)
 800737c:	789b      	ldrb	r3, [r3, #2]
 800737e:	2200      	movs	r2, #0
 8007380:	4619      	mov	r1, r3
 8007382:	6838      	ldr	r0, [r7, #0]
 8007384:	f002 fb4a 	bl	8009a1c <tu_edpt_validate>
 8007388:	4603      	mov	r3, r0
 800738a:	f083 0301 	eor.w	r3, r3, #1
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00a      	beq.n	80073aa <usbd_edpt_open+0x6a>
 8007394:	4b0b      	ldr	r3, [pc, #44]	@ (80073c4 <usbd_edpt_open+0x84>)
 8007396:	617b      	str	r3, [r7, #20]
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d000      	beq.n	80073a6 <usbd_edpt_open+0x66>
 80073a4:	be00      	bkpt	0x0000
 80073a6:	2300      	movs	r3, #0
 80073a8:	e005      	b.n	80073b6 <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 80073aa:	79fb      	ldrb	r3, [r7, #7]
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f001 f992 	bl	80086d8 <dcd_edpt_open>
 80073b4:	4603      	mov	r3, r0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20000069 	.word	0x20000069
 80073c4:	e000edf0 	.word	0xe000edf0
 80073c8:	20000c14 	.word	0x20000c14

080073cc <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	4603      	mov	r3, r0
 80073d4:	460a      	mov	r2, r1
 80073d6:	71fb      	strb	r3, [r7, #7]
 80073d8:	4613      	mov	r3, r2
 80073da:	71bb      	strb	r3, [r7, #6]
 80073dc:	79bb      	ldrb	r3, [r7, #6]
 80073de:	73bb      	strb	r3, [r7, #14]
 80073e0:	7bbb      	ldrb	r3, [r7, #14]
 80073e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073e6:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80073e8:	75fb      	strb	r3, [r7, #23]
 80073ea:	79bb      	ldrb	r3, [r7, #6]
 80073ec:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	09db      	lsrs	r3, r3, #7
 80073f2:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80073f4:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80073f6:	7dfa      	ldrb	r2, [r7, #23]
 80073f8:	7dbb      	ldrb	r3, [r7, #22]
 80073fa:	0052      	lsls	r2, r2, #1
 80073fc:	4413      	add	r3, r2
 80073fe:	3320      	adds	r3, #32
 8007400:	4a05      	ldr	r2, [pc, #20]	@ (8007418 <usbd_edpt_claim+0x4c>)
 8007402:	4413      	add	r3, r2
 8007404:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 8007406:	2100      	movs	r1, #0
 8007408:	6938      	ldr	r0, [r7, #16]
 800740a:	f002 faa2 	bl	8009952 <tu_edpt_claim>
 800740e:	4603      	mov	r3, r0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	20000c14 	.word	0x20000c14

0800741c <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	460a      	mov	r2, r1
 8007426:	71fb      	strb	r3, [r7, #7]
 8007428:	4613      	mov	r3, r2
 800742a:	71bb      	strb	r3, [r7, #6]
 800742c:	79bb      	ldrb	r3, [r7, #6]
 800742e:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007436:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007438:	75fb      	strb	r3, [r7, #23]
 800743a:	79bb      	ldrb	r3, [r7, #6]
 800743c:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	09db      	lsrs	r3, r3, #7
 8007442:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8007444:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8007446:	7dfa      	ldrb	r2, [r7, #23]
 8007448:	7dbb      	ldrb	r3, [r7, #22]
 800744a:	0052      	lsls	r2, r2, #1
 800744c:	4413      	add	r3, r2
 800744e:	3320      	adds	r3, #32
 8007450:	4a05      	ldr	r2, [pc, #20]	@ (8007468 <usbd_edpt_release+0x4c>)
 8007452:	4413      	add	r3, r2
 8007454:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 8007456:	2100      	movs	r1, #0
 8007458:	6938      	ldr	r0, [r7, #16]
 800745a:	f002 fab4 	bl	80099c6 <tu_edpt_release>
 800745e:	4603      	mov	r3, r0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	20000c14 	.word	0x20000c14

0800746c <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	603a      	str	r2, [r7, #0]
 8007474:	461a      	mov	r2, r3
 8007476:	4603      	mov	r3, r0
 8007478:	71fb      	strb	r3, [r7, #7]
 800747a:	460b      	mov	r3, r1
 800747c:	71bb      	strb	r3, [r7, #6]
 800747e:	4613      	mov	r3, r2
 8007480:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 8007482:	4b32      	ldr	r3, [pc, #200]	@ (800754c <usbd_edpt_xfer+0xe0>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	71fb      	strb	r3, [r7, #7]
 8007488:	79bb      	ldrb	r3, [r7, #6]
 800748a:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800748c:	7abb      	ldrb	r3, [r7, #10]
 800748e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007492:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007494:	75fb      	strb	r3, [r7, #23]
 8007496:	79bb      	ldrb	r3, [r7, #6]
 8007498:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800749a:	7afb      	ldrb	r3, [r7, #11]
 800749c:	09db      	lsrs	r3, r3, #7
 800749e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80074a0:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80074a2:	7dfa      	ldrb	r2, [r7, #23]
 80074a4:	7dbb      	ldrb	r3, [r7, #22]
 80074a6:	492a      	ldr	r1, [pc, #168]	@ (8007550 <usbd_edpt_xfer+0xe4>)
 80074a8:	0052      	lsls	r2, r2, #1
 80074aa:	440a      	add	r2, r1
 80074ac:	4413      	add	r3, r2
 80074ae:	3320      	adds	r3, #32
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00a      	beq.n	80074d2 <usbd_edpt_xfer+0x66>
 80074bc:	4b25      	ldr	r3, [pc, #148]	@ (8007554 <usbd_edpt_xfer+0xe8>)
 80074be:	60fb      	str	r3, [r7, #12]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0301 	and.w	r3, r3, #1
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d000      	beq.n	80074ce <usbd_edpt_xfer+0x62>
 80074cc:	be00      	bkpt	0x0000
 80074ce:	2300      	movs	r3, #0
 80074d0:	e038      	b.n	8007544 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 80074d2:	7dfa      	ldrb	r2, [r7, #23]
 80074d4:	7dbb      	ldrb	r3, [r7, #22]
 80074d6:	491e      	ldr	r1, [pc, #120]	@ (8007550 <usbd_edpt_xfer+0xe4>)
 80074d8:	0052      	lsls	r2, r2, #1
 80074da:	440a      	add	r2, r1
 80074dc:	4413      	add	r3, r2
 80074de:	f103 0220 	add.w	r2, r3, #32
 80074e2:	7813      	ldrb	r3, [r2, #0]
 80074e4:	f043 0301 	orr.w	r3, r3, #1
 80074e8:	7013      	strb	r3, [r2, #0]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 80074ea:	88bb      	ldrh	r3, [r7, #4]
 80074ec:	79b9      	ldrb	r1, [r7, #6]
 80074ee:	79f8      	ldrb	r0, [r7, #7]
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	f001 f9b5 	bl	8008860 <dcd_edpt_xfer>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <usbd_edpt_xfer+0x94>
    return true;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e021      	b.n	8007544 <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8007500:	7dfa      	ldrb	r2, [r7, #23]
 8007502:	7dbb      	ldrb	r3, [r7, #22]
 8007504:	4912      	ldr	r1, [pc, #72]	@ (8007550 <usbd_edpt_xfer+0xe4>)
 8007506:	0052      	lsls	r2, r2, #1
 8007508:	440a      	add	r2, r1
 800750a:	4413      	add	r3, r2
 800750c:	f103 0220 	add.w	r2, r3, #32
 8007510:	7813      	ldrb	r3, [r2, #0]
 8007512:	f023 0301 	bic.w	r3, r3, #1
 8007516:	7013      	strb	r3, [r2, #0]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8007518:	7dfa      	ldrb	r2, [r7, #23]
 800751a:	7dbb      	ldrb	r3, [r7, #22]
 800751c:	490c      	ldr	r1, [pc, #48]	@ (8007550 <usbd_edpt_xfer+0xe4>)
 800751e:	0052      	lsls	r2, r2, #1
 8007520:	440a      	add	r2, r1
 8007522:	4413      	add	r3, r2
 8007524:	f103 0220 	add.w	r2, r3, #32
 8007528:	7813      	ldrb	r3, [r2, #0]
 800752a:	f023 0304 	bic.w	r3, r3, #4
 800752e:	7013      	strb	r3, [r2, #0]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 8007530:	4b08      	ldr	r3, [pc, #32]	@ (8007554 <usbd_edpt_xfer+0xe8>)
 8007532:	613b      	str	r3, [r7, #16]
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d000      	beq.n	8007542 <usbd_edpt_xfer+0xd6>
 8007540:	be00      	bkpt	0x0000
    return false;
 8007542:	2300      	movs	r3, #0
  }
}
 8007544:	4618      	mov	r0, r3
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	20000069 	.word	0x20000069
 8007550:	20000c14 	.word	0x20000c14
 8007554:	e000edf0 	.word	0xe000edf0

08007558 <usbd_edpt_busy>:
    TU_BREAKPOINT();
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr) {
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	4603      	mov	r3, r0
 8007560:	460a      	mov	r2, r1
 8007562:	71fb      	strb	r3, [r7, #7]
 8007564:	4613      	mov	r3, r2
 8007566:	71bb      	strb	r3, [r7, #6]
 8007568:	79bb      	ldrb	r3, [r7, #6]
 800756a:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800756c:	7b3b      	ldrb	r3, [r7, #12]
 800756e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007572:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007574:	73fb      	strb	r3, [r7, #15]
 8007576:	79bb      	ldrb	r3, [r7, #6]
 8007578:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800757a:	7b7b      	ldrb	r3, [r7, #13]
 800757c:	09db      	lsrs	r3, r3, #7
 800757e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8007580:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 8007582:	7bfa      	ldrb	r2, [r7, #15]
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	490a      	ldr	r1, [pc, #40]	@ (80075b0 <usbd_edpt_busy+0x58>)
 8007588:	0052      	lsls	r2, r2, #1
 800758a:	440a      	add	r2, r1
 800758c:	4413      	add	r3, r2
 800758e:	3320      	adds	r3, #32
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	bf14      	ite	ne
 800759c:	2301      	movne	r3, #1
 800759e:	2300      	moveq	r3, #0
 80075a0:	b2db      	uxtb	r3, r3
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	20000c14 	.word	0x20000c14

080075b4 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	4603      	mov	r3, r0
 80075bc:	460a      	mov	r2, r1
 80075be:	71fb      	strb	r3, [r7, #7]
 80075c0:	4613      	mov	r3, r2
 80075c2:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80075c4:	4b18      	ldr	r3, [pc, #96]	@ (8007628 <usbd_edpt_stall+0x74>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	71fb      	strb	r3, [r7, #7]
 80075ca:	79bb      	ldrb	r3, [r7, #6]
 80075cc:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80075ce:	7b3b      	ldrb	r3, [r7, #12]
 80075d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075d4:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80075d6:	73fb      	strb	r3, [r7, #15]
 80075d8:	79bb      	ldrb	r3, [r7, #6]
 80075da:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80075dc:	7b7b      	ldrb	r3, [r7, #13]
 80075de:	09db      	lsrs	r3, r3, #7
 80075e0:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80075e2:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 80075e4:	79ba      	ldrb	r2, [r7, #6]
 80075e6:	79fb      	ldrb	r3, [r7, #7]
 80075e8:	4611      	mov	r1, r2
 80075ea:	4618      	mov	r0, r3
 80075ec:	f001 f988 	bl	8008900 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 80075f0:	7bfa      	ldrb	r2, [r7, #15]
 80075f2:	7bbb      	ldrb	r3, [r7, #14]
 80075f4:	490d      	ldr	r1, [pc, #52]	@ (800762c <usbd_edpt_stall+0x78>)
 80075f6:	0052      	lsls	r2, r2, #1
 80075f8:	440a      	add	r2, r1
 80075fa:	4413      	add	r3, r2
 80075fc:	f103 0220 	add.w	r2, r3, #32
 8007600:	7813      	ldrb	r3, [r2, #0]
 8007602:	f043 0302 	orr.w	r3, r3, #2
 8007606:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8007608:	7bfa      	ldrb	r2, [r7, #15]
 800760a:	7bbb      	ldrb	r3, [r7, #14]
 800760c:	4907      	ldr	r1, [pc, #28]	@ (800762c <usbd_edpt_stall+0x78>)
 800760e:	0052      	lsls	r2, r2, #1
 8007610:	440a      	add	r2, r1
 8007612:	4413      	add	r3, r2
 8007614:	f103 0220 	add.w	r2, r3, #32
 8007618:	7813      	ldrb	r3, [r2, #0]
 800761a:	f043 0301 	orr.w	r3, r3, #1
 800761e:	7013      	strb	r3, [r2, #0]
}
 8007620:	bf00      	nop
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	20000069 	.word	0x20000069
 800762c:	20000c14 	.word	0x20000c14

08007630 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	4603      	mov	r3, r0
 8007638:	460a      	mov	r2, r1
 800763a:	71fb      	strb	r3, [r7, #7]
 800763c:	4613      	mov	r3, r2
 800763e:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8007640:	4b18      	ldr	r3, [pc, #96]	@ (80076a4 <usbd_edpt_clear_stall+0x74>)
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	71fb      	strb	r3, [r7, #7]
 8007646:	79bb      	ldrb	r3, [r7, #6]
 8007648:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800764a:	7b3b      	ldrb	r3, [r7, #12]
 800764c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007650:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007652:	73fb      	strb	r3, [r7, #15]
 8007654:	79bb      	ldrb	r3, [r7, #6]
 8007656:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007658:	7b7b      	ldrb	r3, [r7, #13]
 800765a:	09db      	lsrs	r3, r3, #7
 800765c:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800765e:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 8007660:	79ba      	ldrb	r2, [r7, #6]
 8007662:	79fb      	ldrb	r3, [r7, #7]
 8007664:	4611      	mov	r1, r2
 8007666:	4618      	mov	r0, r3
 8007668:	f001 f980 	bl	800896c <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 800766c:	7bfa      	ldrb	r2, [r7, #15]
 800766e:	7bbb      	ldrb	r3, [r7, #14]
 8007670:	490d      	ldr	r1, [pc, #52]	@ (80076a8 <usbd_edpt_clear_stall+0x78>)
 8007672:	0052      	lsls	r2, r2, #1
 8007674:	440a      	add	r2, r1
 8007676:	4413      	add	r3, r2
 8007678:	f103 0220 	add.w	r2, r3, #32
 800767c:	7813      	ldrb	r3, [r2, #0]
 800767e:	f023 0302 	bic.w	r3, r3, #2
 8007682:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 8007684:	7bfa      	ldrb	r2, [r7, #15]
 8007686:	7bbb      	ldrb	r3, [r7, #14]
 8007688:	4907      	ldr	r1, [pc, #28]	@ (80076a8 <usbd_edpt_clear_stall+0x78>)
 800768a:	0052      	lsls	r2, r2, #1
 800768c:	440a      	add	r2, r1
 800768e:	4413      	add	r3, r2
 8007690:	f103 0220 	add.w	r2, r3, #32
 8007694:	7813      	ldrb	r3, [r2, #0]
 8007696:	f023 0301 	bic.w	r3, r3, #1
 800769a:	7013      	strb	r3, [r2, #0]
}
 800769c:	bf00      	nop
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	20000069 	.word	0x20000069
 80076a8:	20000c14 	.word	0x20000c14

080076ac <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	4603      	mov	r3, r0
 80076b4:	460a      	mov	r2, r1
 80076b6:	71fb      	strb	r3, [r7, #7]
 80076b8:	4613      	mov	r3, r2
 80076ba:	71bb      	strb	r3, [r7, #6]
 80076bc:	79bb      	ldrb	r3, [r7, #6]
 80076be:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80076c0:	7b3b      	ldrb	r3, [r7, #12]
 80076c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076c6:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80076c8:	73fb      	strb	r3, [r7, #15]
 80076ca:	79bb      	ldrb	r3, [r7, #6]
 80076cc:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80076ce:	7b7b      	ldrb	r3, [r7, #13]
 80076d0:	09db      	lsrs	r3, r3, #7
 80076d2:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80076d4:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 80076d6:	7bfa      	ldrb	r2, [r7, #15]
 80076d8:	7bbb      	ldrb	r3, [r7, #14]
 80076da:	490a      	ldr	r1, [pc, #40]	@ (8007704 <usbd_edpt_stalled+0x58>)
 80076dc:	0052      	lsls	r2, r2, #1
 80076de:	440a      	add	r2, r1
 80076e0:	4413      	add	r3, r2
 80076e2:	3320      	adds	r3, #32
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	bf14      	ite	ne
 80076f0:	2301      	movne	r3, #1
 80076f2:	2300      	moveq	r3, #0
 80076f4:	b2db      	uxtb	r3, r3
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	20000c14 	.word	0x20000c14

08007708 <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, const tusb_control_request_t* request) {
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	4603      	mov	r3, r0
 8007710:	6039      	str	r1, [r7, #0]
 8007712:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	4603      	mov	r3, r0
 8007728:	6039      	str	r1, [r7, #0]
 800772a:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <status_stage_xact+0x1e>
 800773a:	2300      	movs	r3, #0
 800773c:	e000      	b.n	8007740 <status_stage_xact+0x20>
 800773e:	2380      	movs	r3, #128	@ 0x80
 8007740:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8007742:	7bf9      	ldrb	r1, [r7, #15]
 8007744:	79f8      	ldrb	r0, [r7, #7]
 8007746:	2300      	movs	r3, #0
 8007748:	2200      	movs	r2, #0
 800774a:	f7ff fe8f 	bl	800746c <usbd_edpt_xfer>
 800774e:	4603      	mov	r3, r0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	4603      	mov	r3, r0
 8007760:	6039      	str	r1, [r7, #0]
 8007762:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 8007764:	4b0b      	ldr	r3, [pc, #44]	@ (8007794 <tud_control_status+0x3c>)
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	6810      	ldr	r0, [r2, #0]
 800776a:	6851      	ldr	r1, [r2, #4]
 800776c:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800776e:	4b09      	ldr	r3, [pc, #36]	@ (8007794 <tud_control_status+0x3c>)
 8007770:	2200      	movs	r2, #0
 8007772:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8007774:	4b07      	ldr	r3, [pc, #28]	@ (8007794 <tud_control_status+0x3c>)
 8007776:	2200      	movs	r2, #0
 8007778:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800777a:	4b06      	ldr	r3, [pc, #24]	@ (8007794 <tud_control_status+0x3c>)
 800777c:	2200      	movs	r2, #0
 800777e:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	4618      	mov	r0, r3
 8007786:	f7ff ffcb 	bl	8007720 <status_stage_xact>
 800778a:	4603      	mov	r3, r0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	20000d10 	.word	0x20000d10

08007798 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 8007798:	b580      	push	{r7, lr}
 800779a:	b088      	sub	sp, #32
 800779c:	af00      	add	r7, sp, #0
 800779e:	4603      	mov	r3, r0
 80077a0:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 80077a2:	4b24      	ldr	r3, [pc, #144]	@ (8007834 <data_stage_xact+0x9c>)
 80077a4:	899a      	ldrh	r2, [r3, #12]
 80077a6:	4b23      	ldr	r3, [pc, #140]	@ (8007834 <data_stage_xact+0x9c>)
 80077a8:	89db      	ldrh	r3, [r3, #14]
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	837b      	strh	r3, [r7, #26]
 80077b0:	2340      	movs	r3, #64	@ 0x40
 80077b2:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80077b4:	8b7a      	ldrh	r2, [r7, #26]
 80077b6:	8b3b      	ldrh	r3, [r7, #24]
 80077b8:	4293      	cmp	r3, r2
 80077ba:	bf28      	it	cs
 80077bc:	4613      	movcs	r3, r2
 80077be:	b29b      	uxth	r3, r3
 80077c0:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 80077c2:	2300      	movs	r3, #0
 80077c4:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 80077c6:	4b1b      	ldr	r3, [pc, #108]	@ (8007834 <data_stage_xact+0x9c>)
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d01e      	beq.n	8007812 <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 80077d4:	2380      	movs	r3, #128	@ 0x80
 80077d6:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 80077d8:	8bbb      	ldrh	r3, [r7, #28]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d019      	beq.n	8007812 <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 80077de:	4b15      	ldr	r3, [pc, #84]	@ (8007834 <data_stage_xact+0x9c>)
 80077e0:	689a      	ldr	r2, [r3, #8]
 80077e2:	8bbb      	ldrh	r3, [r7, #28]
 80077e4:	4914      	ldr	r1, [pc, #80]	@ (8007838 <data_stage_xact+0xa0>)
 80077e6:	6179      	str	r1, [r7, #20]
 80077e8:	2140      	movs	r1, #64	@ 0x40
 80077ea:	6139      	str	r1, [r7, #16]
 80077ec:	60fa      	str	r2, [r7, #12]
 80077ee:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d202      	bcs.n	80077fe <data_stage_xact+0x66>
    return -1;
 80077f8:	f04f 33ff 	mov.w	r3, #4294967295
 80077fc:	e005      	b.n	800780a <data_stage_xact+0x72>
  memcpy(dest, src, count);
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	68f9      	ldr	r1, [r7, #12]
 8007802:	6978      	ldr	r0, [r7, #20]
 8007804:	f002 fc56 	bl	800a0b4 <memcpy>
  return 0;
 8007808:	2300      	movs	r3, #0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <data_stage_xact+0x7a>
 800780e:	2300      	movs	r3, #0
 8007810:	e00b      	b.n	800782a <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 8007812:	8bbb      	ldrh	r3, [r7, #28]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <data_stage_xact+0x84>
 8007818:	4a07      	ldr	r2, [pc, #28]	@ (8007838 <data_stage_xact+0xa0>)
 800781a:	e000      	b.n	800781e <data_stage_xact+0x86>
 800781c:	2200      	movs	r2, #0
 800781e:	8bbb      	ldrh	r3, [r7, #28]
 8007820:	7ff9      	ldrb	r1, [r7, #31]
 8007822:	79f8      	ldrb	r0, [r7, #7]
 8007824:	f7ff fe22 	bl	800746c <usbd_edpt_xfer>
 8007828:	4603      	mov	r3, r0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3720      	adds	r7, #32
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	20000d10 	.word	0x20000d10
 8007838:	20000d24 	.word	0x20000d24

0800783c <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 800783c:	b580      	push	{r7, lr}
 800783e:	b088      	sub	sp, #32
 8007840:	af00      	add	r7, sp, #0
 8007842:	60b9      	str	r1, [r7, #8]
 8007844:	607a      	str	r2, [r7, #4]
 8007846:	461a      	mov	r2, r3
 8007848:	4603      	mov	r3, r0
 800784a:	73fb      	strb	r3, [r7, #15]
 800784c:	4613      	mov	r3, r2
 800784e:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 8007850:	4b30      	ldr	r3, [pc, #192]	@ (8007914 <tud_control_xfer+0xd8>)
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	6810      	ldr	r0, [r2, #0]
 8007856:	6851      	ldr	r1, [r2, #4]
 8007858:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 800785a:	4a2e      	ldr	r2, [pc, #184]	@ (8007914 <tud_control_xfer+0xd8>)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8007860:	4b2c      	ldr	r3, [pc, #176]	@ (8007914 <tud_control_xfer+0xd8>)
 8007862:	2200      	movs	r2, #0
 8007864:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	88db      	ldrh	r3, [r3, #6]
 800786a:	b29a      	uxth	r2, r3
 800786c:	89bb      	ldrh	r3, [r7, #12]
 800786e:	827b      	strh	r3, [r7, #18]
 8007870:	4613      	mov	r3, r2
 8007872:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007874:	8a7a      	ldrh	r2, [r7, #18]
 8007876:	8a3b      	ldrh	r3, [r7, #16]
 8007878:	4293      	cmp	r3, r2
 800787a:	bf28      	it	cs
 800787c:	4613      	movcs	r3, r2
 800787e:	b29a      	uxth	r2, r3
 8007880:	4b24      	ldr	r3, [pc, #144]	@ (8007914 <tud_control_xfer+0xd8>)
 8007882:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	88db      	ldrh	r3, [r3, #6]
 8007888:	b29b      	uxth	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	d026      	beq.n	80078dc <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 800788e:	4b21      	ldr	r3, [pc, #132]	@ (8007914 <tud_control_xfer+0xd8>)
 8007890:	899b      	ldrh	r3, [r3, #12]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00d      	beq.n	80078b2 <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10a      	bne.n	80078b2 <tud_control_xfer+0x76>
 800789c:	4b1e      	ldr	r3, [pc, #120]	@ (8007918 <tud_control_xfer+0xdc>)
 800789e:	61bb      	str	r3, [r7, #24]
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0301 	and.w	r3, r3, #1
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d000      	beq.n	80078ae <tud_control_xfer+0x72>
 80078ac:	be00      	bkpt	0x0000
 80078ae:	2300      	movs	r3, #0
 80078b0:	e02b      	b.n	800790a <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7ff ff6f 	bl	8007798 <data_stage_xact>
 80078ba:	4603      	mov	r3, r0
 80078bc:	f083 0301 	eor.w	r3, r3, #1
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d020      	beq.n	8007908 <tud_control_xfer+0xcc>
 80078c6:	4b14      	ldr	r3, [pc, #80]	@ (8007918 <tud_control_xfer+0xdc>)
 80078c8:	617b      	str	r3, [r7, #20]
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d000      	beq.n	80078d8 <tud_control_xfer+0x9c>
 80078d6:	be00      	bkpt	0x0000
 80078d8:	2300      	movs	r3, #0
 80078da:	e016      	b.n	800790a <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
 80078de:	68b9      	ldr	r1, [r7, #8]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7ff ff1d 	bl	8007720 <status_stage_xact>
 80078e6:	4603      	mov	r3, r0
 80078e8:	f083 0301 	eor.w	r3, r3, #1
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00a      	beq.n	8007908 <tud_control_xfer+0xcc>
 80078f2:	4b09      	ldr	r3, [pc, #36]	@ (8007918 <tud_control_xfer+0xdc>)
 80078f4:	61fb      	str	r3, [r7, #28]
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d000      	beq.n	8007904 <tud_control_xfer+0xc8>
 8007902:	be00      	bkpt	0x0000
 8007904:	2300      	movs	r3, #0
 8007906:	e000      	b.n	800790a <tud_control_xfer+0xce>
  }

  return true;
 8007908:	2301      	movs	r3, #1
}
 800790a:	4618      	mov	r0, r3
 800790c:	3720      	adds	r7, #32
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	20000d10 	.word	0x20000d10
 8007918:	e000edf0 	.word	0xe000edf0

0800791c <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 800791c:	b580      	push	{r7, lr}
 800791e:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8007920:	2214      	movs	r2, #20
 8007922:	2100      	movs	r1, #0
 8007924:	4802      	ldr	r0, [pc, #8]	@ (8007930 <usbd_control_reset+0x14>)
 8007926:	f002 fb99 	bl	800a05c <memset>
}
 800792a:	bf00      	nop
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	20000d10 	.word	0x20000d10

08007934 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 800793c:	4a04      	ldr	r2, [pc, #16]	@ (8007950 <usbd_control_set_complete_callback+0x1c>)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6113      	str	r3, [r2, #16]
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	20000d10 	.word	0x20000d10

08007954 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 800795c:	4b09      	ldr	r3, [pc, #36]	@ (8007984 <usbd_control_set_request+0x30>)
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	6810      	ldr	r0, [r2, #0]
 8007962:	6851      	ldr	r1, [r2, #4]
 8007964:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 8007966:	4b07      	ldr	r3, [pc, #28]	@ (8007984 <usbd_control_set_request+0x30>)
 8007968:	2200      	movs	r2, #0
 800796a:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800796c:	4b05      	ldr	r3, [pc, #20]	@ (8007984 <usbd_control_set_request+0x30>)
 800796e:	2200      	movs	r2, #0
 8007970:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 8007972:	4b04      	ldr	r3, [pc, #16]	@ (8007984 <usbd_control_set_request+0x30>)
 8007974:	2200      	movs	r2, #0
 8007976:	819a      	strh	r2, [r3, #12]
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	20000d10 	.word	0x20000d10

08007988 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8007988:	b580      	push	{r7, lr}
 800798a:	b088      	sub	sp, #32
 800798c:	af00      	add	r7, sp, #0
 800798e:	603b      	str	r3, [r7, #0]
 8007990:	4603      	mov	r3, r0
 8007992:	71fb      	strb	r3, [r7, #7]
 8007994:	460b      	mov	r3, r1
 8007996:	71bb      	strb	r3, [r7, #6]
 8007998:	4613      	mov	r3, r2
 800799a:	717b      	strb	r3, [r7, #5]
 800799c:	79bb      	ldrb	r3, [r7, #6]
 800799e:	73fb      	strb	r3, [r7, #15]
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
 80079a2:	09db      	lsrs	r3, r3, #7
 80079a4:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 80079a6:	4a4f      	ldr	r2, [pc, #316]	@ (8007ae4 <usbd_control_xfer_cb+0x15c>)
 80079a8:	7812      	ldrb	r2, [r2, #0]
 80079aa:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80079ae:	b2d2      	uxtb	r2, r2
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d01e      	beq.n	80079f2 <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00a      	beq.n	80079d0 <usbd_control_xfer_cb+0x48>
 80079ba:	4b4b      	ldr	r3, [pc, #300]	@ (8007ae8 <usbd_control_xfer_cb+0x160>)
 80079bc:	613b      	str	r3, [r7, #16]
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d000      	beq.n	80079cc <usbd_control_xfer_cb+0x44>
 80079ca:	be00      	bkpt	0x0000
 80079cc:	2300      	movs	r3, #0
 80079ce:	e084      	b.n	8007ada <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 80079d0:	79fb      	ldrb	r3, [r7, #7]
 80079d2:	4944      	ldr	r1, [pc, #272]	@ (8007ae4 <usbd_control_xfer_cb+0x15c>)
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7ff fe97 	bl	8007708 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 80079da:	4b42      	ldr	r3, [pc, #264]	@ (8007ae4 <usbd_control_xfer_cb+0x15c>)
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d005      	beq.n	80079ee <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 80079e2:	4b40      	ldr	r3, [pc, #256]	@ (8007ae4 <usbd_control_xfer_cb+0x15c>)
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	79f8      	ldrb	r0, [r7, #7]
 80079e8:	4a3e      	ldr	r2, [pc, #248]	@ (8007ae4 <usbd_control_xfer_cb+0x15c>)
 80079ea:	2103      	movs	r1, #3
 80079ec:	4798      	blx	r3
    }

    return true;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e073      	b.n	8007ada <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 80079f2:	4b3c      	ldr	r3, [pc, #240]	@ (8007ae4 <usbd_control_xfer_cb+0x15c>)
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10c      	bne.n	8007a1a <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 8007a00:	4b38      	ldr	r3, [pc, #224]	@ (8007ae4 <usbd_control_xfer_cb+0x15c>)
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <usbd_control_xfer_cb+0x84>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	e066      	b.n	8007ada <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 8007a0c:	4b35      	ldr	r3, [pc, #212]	@ (8007ae4 <usbd_control_xfer_cb+0x15c>)
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	4936      	ldr	r1, [pc, #216]	@ (8007aec <usbd_control_xfer_cb+0x164>)
 8007a14:	4618      	mov	r0, r3
 8007a16:	f002 fb4d 	bl	800a0b4 <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8007a1a:	4b32      	ldr	r3, [pc, #200]	@ (8007ae4 <usbd_control_xfer_cb+0x15c>)
 8007a1c:	89da      	ldrh	r2, [r3, #14]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	4413      	add	r3, r2
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	4b2f      	ldr	r3, [pc, #188]	@ (8007ae4 <usbd_control_xfer_cb+0x15c>)
 8007a28:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8007a2a:	4b2e      	ldr	r3, [pc, #184]	@ (8007ae4 <usbd_control_xfer_cb+0x15c>)
 8007a2c:	689a      	ldr	r2, [r3, #8]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	4413      	add	r3, r2
 8007a32:	4a2c      	ldr	r2, [pc, #176]	@ (8007ae4 <usbd_control_xfer_cb+0x15c>)
 8007a34:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 8007a36:	4b2b      	ldr	r3, [pc, #172]	@ (8007ae4 <usbd_control_xfer_cb+0x15c>)
 8007a38:	88da      	ldrh	r2, [r3, #6]
 8007a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8007ae4 <usbd_control_xfer_cb+0x15c>)
 8007a3c:	89db      	ldrh	r3, [r3, #14]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d002      	beq.n	8007a48 <usbd_control_xfer_cb+0xc0>
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b3f      	cmp	r3, #63	@ 0x3f
 8007a46:	d831      	bhi.n	8007aac <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 8007a4c:	4b25      	ldr	r3, [pc, #148]	@ (8007ae4 <usbd_control_xfer_cb+0x15c>)
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d007      	beq.n	8007a64 <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8007a54:	4b23      	ldr	r3, [pc, #140]	@ (8007ae4 <usbd_control_xfer_cb+0x15c>)
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	79f8      	ldrb	r0, [r7, #7]
 8007a5a:	4a22      	ldr	r2, [pc, #136]	@ (8007ae4 <usbd_control_xfer_cb+0x15c>)
 8007a5c:	2102      	movs	r1, #2
 8007a5e:	4798      	blx	r3
 8007a60:	4603      	mov	r3, r0
 8007a62:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 8007a64:	7ffb      	ldrb	r3, [r7, #31]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d015      	beq.n	8007a96 <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 8007a6a:	79fb      	ldrb	r3, [r7, #7]
 8007a6c:	491d      	ldr	r1, [pc, #116]	@ (8007ae4 <usbd_control_xfer_cb+0x15c>)
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff fe56 	bl	8007720 <status_stage_xact>
 8007a74:	4603      	mov	r3, r0
 8007a76:	f083 0301 	eor.w	r3, r3, #1
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d02a      	beq.n	8007ad6 <usbd_control_xfer_cb+0x14e>
 8007a80:	4b19      	ldr	r3, [pc, #100]	@ (8007ae8 <usbd_control_xfer_cb+0x160>)
 8007a82:	617b      	str	r3, [r7, #20]
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0301 	and.w	r3, r3, #1
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d000      	beq.n	8007a92 <usbd_control_xfer_cb+0x10a>
 8007a90:	be00      	bkpt	0x0000
 8007a92:	2300      	movs	r3, #0
 8007a94:	e021      	b.n	8007ada <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8007a96:	79fb      	ldrb	r3, [r7, #7]
 8007a98:	2100      	movs	r1, #0
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 ff30 	bl	8008900 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8007aa0:	79fb      	ldrb	r3, [r7, #7]
 8007aa2:	2180      	movs	r1, #128	@ 0x80
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 ff2b 	bl	8008900 <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8007aaa:	e014      	b.n	8007ad6 <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 8007aac:	79fb      	ldrb	r3, [r7, #7]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff fe72 	bl	8007798 <data_stage_xact>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	f083 0301 	eor.w	r3, r3, #1
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00b      	beq.n	8007ad8 <usbd_control_xfer_cb+0x150>
 8007ac0:	4b09      	ldr	r3, [pc, #36]	@ (8007ae8 <usbd_control_xfer_cb+0x160>)
 8007ac2:	61bb      	str	r3, [r7, #24]
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d000      	beq.n	8007ad2 <usbd_control_xfer_cb+0x14a>
 8007ad0:	be00      	bkpt	0x0000
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	e001      	b.n	8007ada <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8007ad6:	bf00      	nop
  }

  return true;
 8007ad8:	2301      	movs	r3, #1
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3720      	adds	r7, #32
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20000d10 	.word	0x20000d10
 8007ae8:	e000edf0 	.word	0xe000edf0
 8007aec:	20000d24 	.word	0x20000d24

08007af0 <__NVIC_EnableIRQ>:
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	db0b      	blt.n	8007b1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b02:	79fb      	ldrb	r3, [r7, #7]
 8007b04:	f003 021f 	and.w	r2, r3, #31
 8007b08:	4907      	ldr	r1, [pc, #28]	@ (8007b28 <__NVIC_EnableIRQ+0x38>)
 8007b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b0e:	095b      	lsrs	r3, r3, #5
 8007b10:	2001      	movs	r0, #1
 8007b12:	fa00 f202 	lsl.w	r2, r0, r2
 8007b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	e000e100 	.word	0xe000e100

08007b2c <__NVIC_DisableIRQ>:
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	4603      	mov	r3, r0
 8007b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	db12      	blt.n	8007b64 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b3e:	79fb      	ldrb	r3, [r7, #7]
 8007b40:	f003 021f 	and.w	r2, r3, #31
 8007b44:	490a      	ldr	r1, [pc, #40]	@ (8007b70 <__NVIC_DisableIRQ+0x44>)
 8007b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b4a:	095b      	lsrs	r3, r3, #5
 8007b4c:	2001      	movs	r0, #1
 8007b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8007b52:	3320      	adds	r3, #32
 8007b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007b58:	f3bf 8f4f 	dsb	sy
}
 8007b5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007b5e:	f3bf 8f6f 	isb	sy
}
 8007b62:	bf00      	nop
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	e000e100 	.word	0xe000e100

08007b74 <dma_setup_prepare>:
  // Internal DMA only
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	71fb      	strb	r3, [r7, #7]
 8007b7e:	79fb      	ldrb	r3, [r7, #7]
 8007b80:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007b82:	7afb      	ldrb	r3, [r7, #11]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d001      	beq.n	8007b8c <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007b8c:	7afb      	ldrb	r3, [r7, #11]
 8007b8e:	4a13      	ldr	r2, [pc, #76]	@ (8007bdc <dma_setup_prepare+0x68>)
 8007b90:	011b      	lsls	r3, r3, #4
 8007b92:	4413      	add	r3, r2
 8007b94:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007b96:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b9c:	4a10      	ldr	r2, [pc, #64]	@ (8007be0 <dma_setup_prepare+0x6c>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d904      	bls.n	8007bac <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	db10      	blt.n	8007bce <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4a0d      	ldr	r2, [pc, #52]	@ (8007be4 <dma_setup_prepare+0x70>)
 8007bb0:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 8007bb4:	4a0c      	ldr	r2, [pc, #48]	@ (8007be8 <dma_setup_prepare+0x74>)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8007bc2:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8007bcc:	e000      	b.n	8007bd0 <dma_setup_prepare+0x5c>
      return;
 8007bce:	bf00      	nop
}
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	0800a39c 	.word	0x0800a39c
 8007be0:	4f543009 	.word	0x4f543009
 8007be4:	20080008 	.word	0x20080008
 8007be8:	20000dec 	.word	0x20000dec

08007bec <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 8007bec:	b480      	push	{r7}
 8007bee:	b091      	sub	sp, #68	@ 0x44
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	71fb      	strb	r3, [r7, #7]
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	71bb      	strb	r3, [r7, #6]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	80bb      	strh	r3, [r7, #4]
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
 8007c00:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007c02:	7e7b      	ldrb	r3, [r7, #25]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <dfifo_alloc+0x20>
    rhport = 0;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007c0c:	7e7b      	ldrb	r3, [r7, #25]
 8007c0e:	4a65      	ldr	r2, [pc, #404]	@ (8007da4 <dfifo_alloc+0x1b8>)
 8007c10:	011b      	lsls	r3, r3, #4
 8007c12:	4413      	add	r3, r2
 8007c14:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007c16:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8007c18:	79fb      	ldrb	r3, [r7, #7]
 8007c1a:	011b      	lsls	r3, r3, #4
 8007c1c:	4a61      	ldr	r2, [pc, #388]	@ (8007da4 <dfifo_alloc+0x1b8>)
 8007c1e:	4413      	add	r3, r2
 8007c20:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 8007c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c24:	7a1b      	ldrb	r3, [r3, #8]
 8007c26:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8007c2a:	79bb      	ldrb	r3, [r7, #6]
 8007c2c:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007c2e:	7ebb      	ldrb	r3, [r7, #26]
 8007c30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c34:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8007c36:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8007c3a:	79bb      	ldrb	r3, [r7, #6]
 8007c3c:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007c3e:	7efb      	ldrb	r3, [r7, #27]
 8007c40:	09db      	lsrs	r3, r3, #7
 8007c42:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8007c44:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 8007c48:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8007c4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d30a      	bcc.n	8007c6a <dfifo_alloc+0x7e>
 8007c54:	4b54      	ldr	r3, [pc, #336]	@ (8007da8 <dfifo_alloc+0x1bc>)
 8007c56:	61fb      	str	r3, [r7, #28]
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d000      	beq.n	8007c66 <dfifo_alloc+0x7a>
 8007c64:	be00      	bkpt	0x0000
 8007c66:	2300      	movs	r3, #0
 8007c68:	e095      	b.n	8007d96 <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 8007c6a:	88bb      	ldrh	r3, [r7, #4]
 8007c6c:	617b      	str	r3, [r7, #20]
 8007c6e:	2304      	movs	r3, #4
 8007c70:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	4413      	add	r3, r2
 8007c78:	1e5a      	subs	r2, r3, #1
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c80:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 8007c82:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d12a      	bne.n	8007ce0 <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8007c8a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	81fb      	strh	r3, [r7, #14]
 8007c92:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007c96:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8007c98:	89fb      	ldrh	r3, [r7, #14]
 8007c9a:	089b      	lsrs	r3, r3, #2
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	f103 0208 	add.w	r2, r3, #8
 8007ca2:	7b7b      	ldrb	r3, [r7, #13]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8007cac:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 8007cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007cb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d26d      	bcs.n	8007d94 <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 8007cb8:	4b3c      	ldr	r3, [pc, #240]	@ (8007dac <dfifo_alloc+0x1c0>)
 8007cba:	889b      	ldrh	r3, [r3, #4]
 8007cbc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d90a      	bls.n	8007cd8 <dfifo_alloc+0xec>
 8007cc2:	4b39      	ldr	r3, [pc, #228]	@ (8007da8 <dfifo_alloc+0x1bc>)
 8007cc4:	623b      	str	r3, [r7, #32]
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d000      	beq.n	8007cd4 <dfifo_alloc+0xe8>
 8007cd2:	be00      	bkpt	0x0000
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	e05e      	b.n	8007d96 <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 8007cd8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cdc:	625a      	str	r2, [r3, #36]	@ 0x24
 8007cde:	e059      	b.n	8007d94 <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 8007ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ce2:	7a5b      	ldrb	r3, [r3, #9]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d016      	beq.n	8007d16 <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 8007ce8:	4b30      	ldr	r3, [pc, #192]	@ (8007dac <dfifo_alloc+0x1c0>)
 8007cea:	799a      	ldrb	r2, [r3, #6]
 8007cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cee:	7a5b      	ldrb	r3, [r3, #9]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d30a      	bcc.n	8007d0a <dfifo_alloc+0x11e>
 8007cf4:	4b2c      	ldr	r3, [pc, #176]	@ (8007da8 <dfifo_alloc+0x1bc>)
 8007cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d000      	beq.n	8007d06 <dfifo_alloc+0x11a>
 8007d04:	be00      	bkpt	0x0000
 8007d06:	2300      	movs	r3, #0
 8007d08:	e045      	b.n	8007d96 <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 8007d0a:	4b28      	ldr	r3, [pc, #160]	@ (8007dac <dfifo_alloc+0x1c0>)
 8007d0c:	799b      	ldrb	r3, [r3, #6]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	4b26      	ldr	r3, [pc, #152]	@ (8007dac <dfifo_alloc+0x1c0>)
 8007d14:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 8007d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d102      	bne.n	8007d28 <dfifo_alloc+0x13c>
      fifo_size *= 2;
 8007d22:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 8007d28:	4b20      	ldr	r3, [pc, #128]	@ (8007dac <dfifo_alloc+0x1c0>)
 8007d2a:	889b      	ldrh	r3, [r3, #4]
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d34:	4413      	add	r3, r2
 8007d36:	4299      	cmp	r1, r3
 8007d38:	d20a      	bcs.n	8007d50 <dfifo_alloc+0x164>
 8007d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8007da8 <dfifo_alloc+0x1bc>)
 8007d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d000      	beq.n	8007d4c <dfifo_alloc+0x160>
 8007d4a:	be00      	bkpt	0x0000
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	e022      	b.n	8007d96 <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 8007d50:	4b16      	ldr	r3, [pc, #88]	@ (8007dac <dfifo_alloc+0x1c0>)
 8007d52:	889a      	ldrh	r2, [r3, #4]
 8007d54:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	4b14      	ldr	r3, [pc, #80]	@ (8007dac <dfifo_alloc+0x1c0>)
 8007d5c:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 8007d5e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d108      	bne.n	8007d78 <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 8007d66:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007d68:	041b      	lsls	r3, r3, #16
 8007d6a:	4a10      	ldr	r2, [pc, #64]	@ (8007dac <dfifo_alloc+0x1c0>)
 8007d6c:	8892      	ldrh	r2, [r2, #4]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	461a      	mov	r2, r3
 8007d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d74:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d76:	e00d      	b.n	8007d94 <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 8007d78:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007d7a:	041b      	lsls	r3, r3, #16
 8007d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8007dac <dfifo_alloc+0x1c0>)
 8007d7e:	8892      	ldrh	r2, [r2, #4]
 8007d80:	431a      	orrs	r2, r3
 8007d82:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007d86:	3b01      	subs	r3, #1
 8007d88:	4611      	mov	r1, r2
 8007d8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d8c:	3340      	adds	r3, #64	@ 0x40
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 8007d94:	2301      	movs	r3, #1
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3744      	adds	r7, #68	@ 0x44
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	0800a39c 	.word	0x0800a39c
 8007da8:	e000edf0 	.word	0xe000edf0
 8007dac:	20000de4 	.word	0x20000de4

08007db0 <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b088      	sub	sp, #32
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	4603      	mov	r3, r0
 8007db8:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8007dba:	79fb      	ldrb	r3, [r7, #7]
 8007dbc:	011b      	lsls	r3, r3, #4
 8007dbe:	4a27      	ldr	r2, [pc, #156]	@ (8007e5c <dfifo_device_init+0xac>)
 8007dc0:	4413      	add	r3, r2
 8007dc2:	61fb      	str	r3, [r7, #28]
 8007dc4:	79fb      	ldrb	r3, [r7, #7]
 8007dc6:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007dc8:	7b3b      	ldrb	r3, [r7, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <dfifo_device_init+0x22>
    rhport = 0;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007dd2:	7b3b      	ldrb	r3, [r7, #12]
 8007dd4:	4a21      	ldr	r2, [pc, #132]	@ (8007e5c <dfifo_device_init+0xac>)
 8007dd6:	011b      	lsls	r3, r3, #4
 8007dd8:	4413      	add	r3, r2
 8007dda:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007ddc:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	7a1b      	ldrb	r3, [r3, #8]
 8007de2:	2240      	movs	r2, #64	@ 0x40
 8007de4:	81fa      	strh	r2, [r7, #14]
 8007de6:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8007de8:	89fb      	ldrh	r3, [r7, #14]
 8007dea:	089b      	lsrs	r3, r3, #2
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	f103 0208 	add.w	r2, r3, #8
 8007df2:	7b7b      	ldrb	r3, [r7, #13]
 8007df4:	4413      	add	r3, r2
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	005b      	lsls	r3, r3, #1
 8007dfa:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	625a      	str	r2, [r3, #36]	@ 0x24
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e0a:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8007e0c:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 8007e0e:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	089b      	lsrs	r3, r3, #2
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	4b11      	ldr	r3, [pc, #68]	@ (8007e60 <dfifo_device_init+0xb0>)
 8007e1a:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d009      	beq.n	8007e36 <dfifo_device_init+0x86>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 8007e22:	4b0f      	ldr	r3, [pc, #60]	@ (8007e60 <dfifo_device_init+0xb0>)
 8007e24:	889a      	ldrh	r2, [r3, #4]
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	7a1b      	ldrb	r3, [r3, #8]
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	4b0b      	ldr	r3, [pc, #44]	@ (8007e60 <dfifo_device_init+0xb0>)
 8007e34:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 8007e36:	4b0a      	ldr	r3, [pc, #40]	@ (8007e60 <dfifo_device_init+0xb0>)
 8007e38:	889b      	ldrh	r3, [r3, #4]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	041b      	lsls	r3, r3, #16
 8007e40:	441a      	add	r2, r3
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 8007e46:	79fb      	ldrb	r3, [r7, #7]
 8007e48:	2240      	movs	r2, #64	@ 0x40
 8007e4a:	2180      	movs	r1, #128	@ 0x80
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7ff fecd 	bl	8007bec <dfifo_alloc>
}
 8007e52:	bf00      	nop
 8007e54:	3720      	adds	r7, #32
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	0800a39c 	.word	0x0800a39c
 8007e60:	20000de4 	.word	0x20000de4

08007e64 <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 8007e64:	b480      	push	{r7}
 8007e66:	b08b      	sub	sp, #44	@ 0x2c
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	6039      	str	r1, [r7, #0]
 8007e6e:	71fb      	strb	r3, [r7, #7]
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007e74:	7c7b      	ldrb	r3, [r7, #17]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <edpt_activate+0x1a>
    rhport = 0;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007e7e:	7c7b      	ldrb	r3, [r7, #17]
 8007e80:	4a45      	ldr	r2, [pc, #276]	@ (8007f98 <edpt_activate+0x134>)
 8007e82:	011b      	lsls	r3, r3, #4
 8007e84:	4413      	add	r3, r2
 8007e86:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007e88:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	789b      	ldrb	r3, [r3, #2]
 8007e8e:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007e90:	7cbb      	ldrb	r3, [r7, #18]
 8007e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	789b      	ldrb	r3, [r3, #2]
 8007ea0:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007ea2:	7cfb      	ldrb	r3, [r7, #19]
 8007ea4:	09db      	lsrs	r3, r3, #7
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8007eac:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8007eb0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8007eb4:	0052      	lsls	r2, r2, #1
 8007eb6:	4413      	add	r3, r2
 8007eb8:	011b      	lsls	r3, r3, #4
 8007eba:	4a38      	ldr	r2, [pc, #224]	@ (8007f9c <edpt_activate+0x138>)
 8007ebc:	4413      	add	r3, r2
 8007ebe:	61fb      	str	r3, [r7, #28]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	889b      	ldrh	r3, [r3, #4]
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ece:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	799a      	ldrb	r2, [r3, #6]
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	731a      	strb	r2, [r3, #12]

  // Endpoint control
  dwc2_depctl_t depctl = {.value = 0};
 8007edc:	2300      	movs	r3, #0
 8007ede:	60fb      	str	r3, [r7, #12]
  depctl.mps = xfer->max_size;
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	895b      	ldrh	r3, [r3, #10]
 8007ee4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	89bb      	ldrh	r3, [r7, #12]
 8007eec:	f362 030a 	bfi	r3, r2, #0, #11
 8007ef0:	81bb      	strh	r3, [r7, #12]
  depctl.active = 1;
 8007ef2:	7b7b      	ldrb	r3, [r7, #13]
 8007ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ef8:	737b      	strb	r3, [r7, #13]
  depctl.type = p_endpoint_desc->bmAttributes.xfer;
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	78db      	ldrb	r3, [r3, #3]
 8007efe:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	f362 0383 	bfi	r3, r2, #2, #2
 8007f0a:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	78db      	ldrb	r3, [r3, #3]
 8007f10:	f003 0303 	and.w	r3, r3, #3
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d003      	beq.n	8007f22 <edpt_activate+0xbe>
    depctl.set_data0_iso_even = 1;
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
 8007f1c:	f043 0310 	orr.w	r3, r3, #16
 8007f20:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 8007f22:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d108      	bne.n	8007f3c <edpt_activate+0xd8>
    depctl.tx_fifo_num = epnum;
 8007f2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007f2e:	f003 030f 	and.w	r3, r3, #15
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	89fb      	ldrh	r3, [r7, #14]
 8007f36:	f362 1389 	bfi	r3, r2, #6, #4
 8007f3a:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8007f3c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	bf14      	ite	ne
 8007f44:	2301      	movne	r3, #1
 8007f46:	2300      	moveq	r3, #0
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007f50:	0112      	lsls	r2, r2, #4
 8007f52:	4413      	add	r3, r2
 8007f54:	3348      	adds	r3, #72	@ 0x48
 8007f56:	015b      	lsls	r3, r3, #5
 8007f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f5a:	4413      	add	r3, r2
 8007f5c:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 8007f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f66:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 8007f6a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007f6e:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8007f72:	2901      	cmp	r1, #1
 8007f74:	d101      	bne.n	8007f7a <edpt_activate+0x116>
 8007f76:	2100      	movs	r1, #0
 8007f78:	e000      	b.n	8007f7c <edpt_activate+0x118>
 8007f7a:	2110      	movs	r1, #16
 8007f7c:	440b      	add	r3, r1
 8007f7e:	2101      	movs	r1, #1
 8007f80:	fa01 f303 	lsl.w	r3, r1, r3
 8007f84:	431a      	orrs	r2, r3
 8007f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f88:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 8007f8c:	bf00      	nop
 8007f8e:	372c      	adds	r7, #44	@ 0x2c
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	0800a39c 	.word	0x0800a39c
 8007f9c:	20000d64 	.word	0x20000d64

08007fa0 <edpt_disable>:

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 8007fa0:	b480      	push	{r7}
 8007fa2:	b089      	sub	sp, #36	@ 0x24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	71fb      	strb	r3, [r7, #7]
 8007faa:	460b      	mov	r3, r1
 8007fac:	71bb      	strb	r3, [r7, #6]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	717b      	strb	r3, [r7, #5]
 8007fb2:	79fb      	ldrb	r3, [r7, #7]
 8007fb4:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007fb6:	7c7b      	ldrb	r3, [r7, #17]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <edpt_disable+0x20>
    rhport = 0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007fc0:	7c7b      	ldrb	r3, [r7, #17]
 8007fc2:	4a5b      	ldr	r2, [pc, #364]	@ (8008130 <edpt_disable+0x190>)
 8007fc4:	011b      	lsls	r3, r3, #4
 8007fc6:	4413      	add	r3, r2
 8007fc8:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007fca:	61fb      	str	r3, [r7, #28]
 8007fcc:	79bb      	ldrb	r3, [r7, #6]
 8007fce:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007fd0:	7cbb      	ldrb	r3, [r7, #18]
 8007fd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fd6:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8007fd8:	76fb      	strb	r3, [r7, #27]
 8007fda:	79bb      	ldrb	r3, [r7, #6]
 8007fdc:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007fde:	7cfb      	ldrb	r3, [r7, #19]
 8007fe0:	09db      	lsrs	r3, r3, #7
 8007fe2:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8007fe4:	76bb      	strb	r3, [r7, #26]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8007fe6:	7ebb      	ldrb	r3, [r7, #26]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	bf14      	ite	ne
 8007fec:	2301      	movne	r3, #1
 8007fee:	2300      	moveq	r3, #0
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	7efb      	ldrb	r3, [r7, #27]
 8007ff6:	0112      	lsls	r2, r2, #4
 8007ff8:	4413      	add	r3, r2
 8007ffa:	3348      	adds	r3, #72	@ 0x48
 8007ffc:	015b      	lsls	r3, r3, #5
 8007ffe:	69fa      	ldr	r2, [r7, #28]
 8008000:	4413      	add	r3, r2
 8008002:	617b      	str	r3, [r7, #20]

  if (dir == TUSB_DIR_IN) {
 8008004:	7ebb      	ldrb	r3, [r7, #26]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d149      	bne.n	800809e <edpt_disable+0xfe>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 800800a:	7efb      	ldrb	r3, [r7, #27]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d003      	beq.n	8008018 <edpt_disable+0x78>
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	db0d      	blt.n	8008034 <edpt_disable+0x94>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	797a      	ldrb	r2, [r7, #5]
 800801e:	2a00      	cmp	r2, #0
 8008020:	d002      	beq.n	8008028 <edpt_disable+0x88>
 8008022:	f04f 6202 	mov.w	r2, #136314880	@ 0x8200000
 8008026:	e001      	b.n	800802c <edpt_disable+0x8c>
 8008028:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800802c:	431a      	orrs	r2, r3
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	e022      	b.n	800807a <edpt_disable+0xda>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      dep->diepctl |= DIEPCTL_SNAK;
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 8008040:	bf00      	nop
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800804a:	2b00      	cmp	r3, #0
 800804c:	d0f9      	beq.n	8008042 <edpt_disable+0xa2>

      // Disable the endpoint.
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	797a      	ldrb	r2, [r7, #5]
 8008054:	2a00      	cmp	r2, #0
 8008056:	d001      	beq.n	800805c <edpt_disable+0xbc>
 8008058:	4a36      	ldr	r2, [pc, #216]	@ (8008134 <edpt_disable+0x194>)
 800805a:	e001      	b.n	8008060 <edpt_disable+0xc0>
 800805c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008060:	431a      	orrs	r2, r3
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 8008066:	bf00      	nop
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f003 0302 	and.w	r3, r3, #2
 8008070:	2b00      	cmp	r3, #0
 8008072:	d0f9      	beq.n	8008068 <edpt_disable+0xc8>

      dep->diepint = DIEPINT_EPDISD;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	2202      	movs	r2, #2
 8008078:	609a      	str	r2, [r3, #8]
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	60fb      	str	r3, [r7, #12]
 800807e:	7efb      	ldrb	r3, [r7, #27]
 8008080:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8008082:	7afb      	ldrb	r3, [r7, #11]
 8008084:	019b      	lsls	r3, r3, #6
 8008086:	f043 0220 	orr.w	r2, r3, #32
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800808e:	bf00      	nop
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	f003 0320 	and.w	r3, r3, #32
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1f9      	bne.n	8008090 <edpt_disable+0xf0>
}
 800809c:	e041      	b.n	8008122 <edpt_disable+0x182>

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dfifo_flush_tx(dwc2, epnum);
  } else {
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 800809e:	7efb      	ldrb	r3, [r7, #27]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <edpt_disable+0x10c>
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	db0c      	blt.n	80080c6 <edpt_disable+0x126>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	797a      	ldrb	r2, [r7, #5]
 80080b2:	2a00      	cmp	r2, #0
 80080b4:	d002      	beq.n	80080bc <edpt_disable+0x11c>
 80080b6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80080ba:	e000      	b.n	80080be <edpt_disable+0x11e>
 80080bc:	2200      	movs	r2, #0
 80080be:	431a      	orrs	r2, r3
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	e02d      	b.n	8008122 <edpt_disable+0x182>
    } else {
      // Asserting GONAK is required to STALL an OUT endpoint.
      // Simpler to use polling here, we don't use the "B"OUTNAKEFF interrupt
      // anyway, and it can't be cleared by user code. If this while loop never
      // finishes, we have bigger problems than just the stack.
      dwc2->dctl |= DCTL_SGONAK;
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80080cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 80080d6:	bf00      	nop
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	695b      	ldr	r3, [r3, #20]
 80080dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d0f9      	beq.n	80080d8 <edpt_disable+0x138>

      // Ditto here disable the endpoint.
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	797a      	ldrb	r2, [r7, #5]
 80080ea:	2a00      	cmp	r2, #0
 80080ec:	d001      	beq.n	80080f2 <edpt_disable+0x152>
 80080ee:	4a11      	ldr	r2, [pc, #68]	@ (8008134 <edpt_disable+0x194>)
 80080f0:	e001      	b.n	80080f6 <edpt_disable+0x156>
 80080f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80080f6:	431a      	orrs	r2, r3
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	601a      	str	r2, [r3, #0]
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 80080fc:	bf00      	nop
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f003 0302 	and.w	r3, r3, #2
 8008106:	2b00      	cmp	r3, #0
 8008108:	d0f9      	beq.n	80080fe <edpt_disable+0x15e>

      dep->doepint = DOEPINT_EPDISD;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	2202      	movs	r2, #2
 800810e:	609a      	str	r2, [r3, #8]

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8008116:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
  }
}
 8008120:	bf00      	nop
 8008122:	bf00      	nop
 8008124:	3724      	adds	r7, #36	@ 0x24
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	0800a39c 	.word	0x0800a39c
 8008134:	40200000 	.word	0x40200000

08008138 <edpt_schedule_packets>:

// Since this function returns void, it is not possible to return a boolean success message
// We must make sure that this function is not called when the EP is disabled
// Must be called from critical section
static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 8008138:	b580      	push	{r7, lr}
 800813a:	b090      	sub	sp, #64	@ 0x40
 800813c:	af00      	add	r7, sp, #0
 800813e:	4603      	mov	r3, r0
 8008140:	71fb      	strb	r3, [r7, #7]
 8008142:	460b      	mov	r3, r1
 8008144:	71bb      	strb	r3, [r7, #6]
 8008146:	4613      	mov	r3, r2
 8008148:	717b      	strb	r3, [r7, #5]
 800814a:	79fb      	ldrb	r3, [r7, #7]
 800814c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008150:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008154:	2b00      	cmp	r3, #0
 8008156:	d002      	beq.n	800815e <edpt_schedule_packets+0x26>
    rhport = 0;
 8008158:	2300      	movs	r3, #0
 800815a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800815e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008162:	4a65      	ldr	r2, [pc, #404]	@ (80082f8 <edpt_schedule_packets+0x1c0>)
 8008164:	011b      	lsls	r3, r3, #4
 8008166:	4413      	add	r3, r2
 8008168:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800816a:	63bb      	str	r3, [r7, #56]	@ 0x38
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 800816c:	79ba      	ldrb	r2, [r7, #6]
 800816e:	797b      	ldrb	r3, [r7, #5]
 8008170:	0052      	lsls	r2, r2, #1
 8008172:	4413      	add	r3, r2
 8008174:	011b      	lsls	r3, r3, #4
 8008176:	4a61      	ldr	r2, [pc, #388]	@ (80082fc <edpt_schedule_packets+0x1c4>)
 8008178:	4413      	add	r3, r2
 800817a:	637b      	str	r3, [r7, #52]	@ 0x34
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800817c:	797b      	ldrb	r3, [r7, #5]
 800817e:	2b01      	cmp	r3, #1
 8008180:	bf14      	ite	ne
 8008182:	2301      	movne	r3, #1
 8008184:	2300      	moveq	r3, #0
 8008186:	b2db      	uxtb	r3, r3
 8008188:	461a      	mov	r2, r3
 800818a:	79bb      	ldrb	r3, [r7, #6]
 800818c:	0112      	lsls	r2, r2, #4
 800818e:	4413      	add	r3, r2
 8008190:	3348      	adds	r3, #72	@ 0x48
 8008192:	015b      	lsls	r3, r3, #5
 8008194:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008196:	4413      	add	r3, r2
 8008198:	633b      	str	r3, [r7, #48]	@ 0x30

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 800819a:	79bb      	ldrb	r3, [r7, #6]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d11c      	bne.n	80081da <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 80081a0:	797b      	ldrb	r3, [r7, #5]
 80081a2:	4a57      	ldr	r2, [pc, #348]	@ (8008300 <edpt_schedule_packets+0x1c8>)
 80081a4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80081a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081aa:	895b      	ldrh	r3, [r3, #10]
 80081ac:	853a      	strh	r2, [r7, #40]	@ 0x28
 80081ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80081b0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80081b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80081b4:	4293      	cmp	r3, r2
 80081b6:	bf28      	it	cs
 80081b8:	4613      	movcs	r3, r2
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    _dcd_data.ep0_pending[dir] -= total_bytes;
 80081be:	797b      	ldrb	r3, [r7, #5]
 80081c0:	4a4f      	ldr	r2, [pc, #316]	@ (8008300 <edpt_schedule_packets+0x1c8>)
 80081c2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80081c6:	797b      	ldrb	r3, [r7, #5]
 80081c8:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80081ca:	1a8a      	subs	r2, r1, r2
 80081cc:	b291      	uxth	r1, r2
 80081ce:	4a4c      	ldr	r2, [pc, #304]	@ (8008300 <edpt_schedule_packets+0x1c8>)
 80081d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 80081d4:	2301      	movs	r3, #1
 80081d6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80081d8:	e014      	b.n	8008204 <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 80081da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081dc:	891b      	ldrh	r3, [r3, #8]
 80081de:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 80081e0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80081e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80081e4:	8952      	ldrh	r2, [r2, #10]
 80081e6:	623b      	str	r3, [r7, #32]
 80081e8:	61fa      	str	r2, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 80081ea:	6a3a      	ldr	r2, [r7, #32]
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	4413      	add	r3, r2
 80081f0:	1e5a      	subs	r2, r3, #1
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if (num_packets == 0) {
 80081fa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 8008200:	2301      	movs	r3, #1
 8008202:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }
  }

  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  dwc2_ep_tsize_t deptsiz = {.value = 0};
 8008204:	2300      	movs	r3, #0
 8008206:	617b      	str	r3, [r7, #20]
  deptsiz.xfer_size = total_bytes;
 8008208:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800820a:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	f362 0312 	bfi	r3, r2, #0, #19
 8008214:	617b      	str	r3, [r7, #20]
  deptsiz.packet_count = num_packets;
 8008216:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800821c:	b29a      	uxth	r2, r3
 800821e:	8afb      	ldrh	r3, [r7, #22]
 8008220:	f362 03cc 	bfi	r3, r2, #3, #10
 8008224:	82fb      	strh	r3, [r7, #22]
  dep->tsiz = deptsiz.value;
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822a:	611a      	str	r2, [r3, #16]

  // control
  dwc2_depctl_t depctl = {.value = dep->ctl};
 800822c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	613b      	str	r3, [r7, #16]
  depctl.clear_nak = 1;
 8008232:	7cfb      	ldrb	r3, [r7, #19]
 8008234:	f043 0304 	orr.w	r3, r3, #4
 8008238:	74fb      	strb	r3, [r7, #19]
  depctl.enable = 1;
 800823a:	7cfb      	ldrb	r3, [r7, #19]
 800823c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008240:	74fb      	strb	r3, [r7, #19]
  if (depctl.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 8008242:	7cbb      	ldrb	r3, [r7, #18]
 8008244:	f003 030c 	and.w	r3, r3, #12
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b04      	cmp	r3, #4
 800824c:	d11a      	bne.n	8008284 <edpt_schedule_packets+0x14c>
 800824e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008250:	7b1b      	ldrb	r3, [r3, #12]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d116      	bne.n	8008284 <edpt_schedule_packets+0x14c>
    const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 8008256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008258:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800825c:	60bb      	str	r3, [r7, #8]
    const uint32_t odd_now = dsts.frame_number & 1u;
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8008264:	b29b      	uxth	r3, r3
 8008266:	f003 0301 	and.w	r3, r3, #1
 800826a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (odd_now) {
 800826c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800826e:	2b00      	cmp	r3, #0
 8008270:	d004      	beq.n	800827c <edpt_schedule_packets+0x144>
      depctl.set_data0_iso_even = 1;
 8008272:	7cfb      	ldrb	r3, [r7, #19]
 8008274:	f043 0310 	orr.w	r3, r3, #16
 8008278:	74fb      	strb	r3, [r7, #19]
 800827a:	e003      	b.n	8008284 <edpt_schedule_packets+0x14c>
    } else {
      depctl.set_data1_iso_odd = 1;
 800827c:	7cfb      	ldrb	r3, [r7, #19]
 800827e:	f043 0320 	orr.w	r3, r3, #32
 8008282:	74fb      	strb	r3, [r7, #19]
 8008284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008286:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800828c:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800828e:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 8008290:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if(is_dma) {
 8008294:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008298:	2b00      	cmp	r3, #0
 800829a:	d015      	beq.n	80082c8 <edpt_schedule_packets+0x190>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 800829c:	797b      	ldrb	r3, [r7, #5]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d109      	bne.n	80082b6 <edpt_schedule_packets+0x17e>
 80082a2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d006      	beq.n	80082b6 <edpt_schedule_packets+0x17e>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 80082a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80082ae:	4611      	mov	r1, r2
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fd fd6b 	bl	8005d8c <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 80082b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	461a      	mov	r2, r3
 80082bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082be:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c4:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 80082c6:	e013      	b.n	80082f0 <edpt_schedule_packets+0x1b8>
    dep->diepctl = depctl.value; // enable endpoint
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082cc:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 80082ce:	797b      	ldrb	r3, [r7, #5]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d10d      	bne.n	80082f0 <edpt_schedule_packets+0x1b8>
 80082d4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00a      	beq.n	80082f0 <edpt_schedule_packets+0x1b8>
      dwc2->diepempmsk |= (1 << epnum);
 80082da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082dc:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 80082e0:	79ba      	ldrb	r2, [r7, #6]
 80082e2:	2101      	movs	r1, #1
 80082e4:	fa01 f202 	lsl.w	r2, r1, r2
 80082e8:	431a      	orrs	r2, r3
 80082ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ec:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 80082f0:	bf00      	nop
 80082f2:	3740      	adds	r7, #64	@ 0x40
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	0800a39c 	.word	0x0800a39c
 80082fc:	20000d64 	.word	0x20000d64
 8008300:	20000de4 	.word	0x20000de4

08008304 <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8008304:	b580      	push	{r7, lr}
 8008306:	b08c      	sub	sp, #48	@ 0x30
 8008308:	af00      	add	r7, sp, #0
 800830a:	4603      	mov	r3, r0
 800830c:	6039      	str	r1, [r7, #0]
 800830e:	71fb      	strb	r3, [r7, #7]
 8008310:	79fb      	ldrb	r3, [r7, #7]
 8008312:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008314:	7dfb      	ldrb	r3, [r7, #23]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <dcd_init+0x1a>
    rhport = 0;
 800831a:	2300      	movs	r3, #0
 800831c:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800831e:	7dfb      	ldrb	r3, [r7, #23]
 8008320:	4a43      	ldr	r2, [pc, #268]	@ (8008430 <dcd_init+0x12c>)
 8008322:	011b      	lsls	r3, r3, #4
 8008324:	4413      	add	r3, r2
 8008326:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008328:	62bb      	str	r3, [r7, #40]	@ 0x28

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 800832a:	2208      	movs	r2, #8
 800832c:	2100      	movs	r1, #0
 800832e:	4841      	ldr	r0, [pc, #260]	@ (8008434 <dcd_init+0x130>)
 8008330:	f001 fe94 	bl	800a05c <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 8008334:	2101      	movs	r1, #1
 8008336:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008338:	f001 f9c6 	bl	80096c8 <dwc2_core_is_highspeed>
 800833c:	4603      	mov	r3, r0
 800833e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008344:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800834a:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800834c:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800834e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 8008352:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008356:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800835a:	79fb      	ldrb	r3, [r7, #7]
 800835c:	4618      	mov	r0, r3
 800835e:	f001 f9d1 	bl	8009704 <dwc2_core_init>
 8008362:	4603      	mov	r3, r0
 8008364:	f083 0301 	eor.w	r3, r3, #1
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00a      	beq.n	8008384 <dcd_init+0x80>
 800836e:	4b32      	ldr	r3, [pc, #200]	@ (8008438 <dcd_init+0x134>)
 8008370:	61fb      	str	r3, [r7, #28]
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	2b00      	cmp	r3, #0
 800837c:	d000      	beq.n	8008380 <dcd_init+0x7c>
 800837e:	be00      	bkpt	0x0000
 8008380:	2300      	movs	r3, #0
 8008382:	e050      	b.n	8008426 <dcd_init+0x122>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 8008384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008386:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800838a:	f023 0303 	bic.w	r3, r3, #3
 800838e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (is_highspeed) {
 8008390:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00d      	beq.n	80083b4 <dcd_init+0xb0>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8008398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800839c:	60fb      	str	r3, [r7, #12]
    if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800839e:	7b3b      	ldrb	r3, [r7, #12]
 80083a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b80      	cmp	r3, #128	@ 0x80
 80083a8:	d108      	bne.n	80083bc <dcd_init+0xb8>
      dcfg |= DCFG_XCVRDLY;
 80083aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80083b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083b2:	e003      	b.n	80083bc <dcd_init+0xb8>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 80083b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b6:	f043 0303 	orr.w	r3, r3, #3
 80083ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 80083bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083be:	f043 0304 	orr.w	r3, r3, #4
 80083c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2->dcfg = dcfg;
 80083c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083c8:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 f92a 	bl	8008628 <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 80083d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80083dc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80083e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e2:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 80083e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 80083ec:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 80083f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f2:	601a      	str	r2, [r3, #0]
  // No hardware detection of Vbus B-session is available on the STM32N6
  dwc2->stm32_gccfg |= STM32_GCCFG_VBVALOVAL;
#endif

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 80083f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f6:	699a      	ldr	r2, [r3, #24]
 80083f8:	4b10      	ldr	r3, [pc, #64]	@ (800843c <dcd_init+0x138>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083fe:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 8008400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800840c:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 800840e:	6a3b      	ldr	r3, [r7, #32]
 8008410:	f043 0301 	orr.w	r3, r3, #1
 8008414:	623b      	str	r3, [r7, #32]
  dwc2->gahbcfg = gahbcfg;
 8008416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008418:	6a3a      	ldr	r2, [r7, #32]
 800841a:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 800841c:	79fb      	ldrb	r3, [r7, #7]
 800841e:	4618      	mov	r0, r3
 8008420:	f000 f8e0 	bl	80085e4 <dcd_connect>
  return true;
 8008424:	2301      	movs	r3, #1
}
 8008426:	4618      	mov	r0, r3
 8008428:	3730      	adds	r7, #48	@ 0x30
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	0800a39c 	.word	0x0800a39c
 8008434:	20000de4 	.word	0x20000de4
 8008438:	e000edf0 	.word	0xe000edf0
 800843c:	80003804 	.word	0x80003804

08008440 <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	4603      	mov	r3, r0
 8008448:	71fb      	strb	r3, [r7, #7]
 800844a:	79fb      	ldrb	r3, [r7, #7]
 800844c:	73fb      	strb	r3, [r7, #15]
 800844e:	2301      	movs	r3, #1
 8008450:	73bb      	strb	r3, [r7, #14]
 8008452:	2301      	movs	r3, #1
 8008454:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 8008456:	7bfb      	ldrb	r3, [r7, #15]
 8008458:	4a0c      	ldr	r2, [pc, #48]	@ (800848c <dcd_int_enable+0x4c>)
 800845a:	011b      	lsls	r3, r3, #4
 800845c:	4413      	add	r3, r2
 800845e:	3304      	adds	r3, #4
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 8008464:	7b7b      	ldrb	r3, [r7, #13]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d005      	beq.n	8008476 <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 800846a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800846e:	4618      	mov	r0, r3
 8008470:	f7ff fb3e 	bl	8007af0 <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 8008474:	e004      	b.n	8008480 <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 8008476:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800847a:	4618      	mov	r0, r3
 800847c:	f7ff fb56 	bl	8007b2c <__NVIC_DisableIRQ>
}
 8008480:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 8008482:	bf00      	nop
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	0800a39c 	.word	0x0800a39c

08008490 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	4603      	mov	r3, r0
 8008498:	71fb      	strb	r3, [r7, #7]
 800849a:	79fb      	ldrb	r3, [r7, #7]
 800849c:	73fb      	strb	r3, [r7, #15]
 800849e:	2301      	movs	r3, #1
 80084a0:	73bb      	strb	r3, [r7, #14]
 80084a2:	2300      	movs	r3, #0
 80084a4:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 80084a6:	7bfb      	ldrb	r3, [r7, #15]
 80084a8:	4a0c      	ldr	r2, [pc, #48]	@ (80084dc <dcd_int_disable+0x4c>)
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	4413      	add	r3, r2
 80084ae:	3304      	adds	r3, #4
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 80084b4:	7b7b      	ldrb	r3, [r7, #13]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d005      	beq.n	80084c6 <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 80084ba:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80084be:	4618      	mov	r0, r3
 80084c0:	f7ff fb16 	bl	8007af0 <__NVIC_EnableIRQ>
}
 80084c4:	e004      	b.n	80084d0 <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 80084c6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7ff fb2e 	bl	8007b2c <__NVIC_DisableIRQ>
}
 80084d0:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 80084d2:	bf00      	nop
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	0800a39c 	.word	0x0800a39c

080084e0 <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	4603      	mov	r3, r0
 80084e8:	460a      	mov	r2, r1
 80084ea:	71fb      	strb	r3, [r7, #7]
 80084ec:	4613      	mov	r3, r2
 80084ee:	71bb      	strb	r3, [r7, #6]
 80084f0:	79fb      	ldrb	r3, [r7, #7]
 80084f2:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80084f4:	7a7b      	ldrb	r3, [r7, #9]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d001      	beq.n	80084fe <dcd_set_address+0x1e>
    rhport = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80084fe:	7a7b      	ldrb	r3, [r7, #9]
 8008500:	4a14      	ldr	r2, [pc, #80]	@ (8008554 <dcd_set_address+0x74>)
 8008502:	011b      	lsls	r3, r3, #4
 8008504:	4413      	add	r3, r2
 8008506:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008508:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8008510:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 8008514:	79bb      	ldrb	r3, [r7, #6]
 8008516:	011b      	lsls	r3, r3, #4
 8008518:	431a      	orrs	r2, r3
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 8008520:	2300      	movs	r3, #0
 8008522:	72fb      	strb	r3, [r7, #11]
 8008524:	2301      	movs	r3, #1
 8008526:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8008528:	7abb      	ldrb	r3, [r7, #10]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d002      	beq.n	8008534 <dcd_set_address+0x54>
 800852e:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8008532:	e000      	b.n	8008536 <dcd_set_address+0x56>
 8008534:	2300      	movs	r3, #0
 8008536:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800853a:	4313      	orrs	r3, r2
 800853c:	b25b      	sxtb	r3, r3
 800853e:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8008540:	79f8      	ldrb	r0, [r7, #7]
 8008542:	2300      	movs	r3, #0
 8008544:	2200      	movs	r2, #0
 8008546:	f000 f98b 	bl	8008860 <dcd_edpt_xfer>
}
 800854a:	bf00      	nop
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	0800a39c 	.word	0x0800a39c

08008558 <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	4603      	mov	r3, r0
 8008560:	71fb      	strb	r3, [r7, #7]
 8008562:	79fb      	ldrb	r3, [r7, #7]
 8008564:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <dcd_remote_wakeup+0x18>
    rhport = 0;
 800856c:	2300      	movs	r3, #0
 800856e:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008570:	7bfb      	ldrb	r3, [r7, #15]
 8008572:	4a19      	ldr	r2, [pc, #100]	@ (80085d8 <dcd_remote_wakeup+0x80>)
 8008574:	011b      	lsls	r3, r3, #4
 8008576:	4413      	add	r3, r2
 8008578:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800857a:	617b      	str	r3, [r7, #20]

  // set remote wakeup
  dwc2->dctl |= DCTL_RWUSIG;
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8008582:	f043 0201 	orr.w	r2, r3, #1
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  // enable SOF to detect bus resume
  dwc2->gintsts = GINTSTS_SOF;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	2208      	movs	r2, #8
 8008590:	615a      	str	r2, [r3, #20]
  dwc2->gintmsk |= GINTMSK_SOFM;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	f043 0208 	orr.w	r2, r3, #8
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	619a      	str	r2, [r3, #24]
#define dwc2_dcd_int_disable(_rhport) dwc2_int_set(_rhport, TUSB_ROLE_DEVICE, false)


TU_ATTR_ALWAYS_INLINE static inline void dwc2_remote_wakeup_delay(void) {
  // try to delay for 1 ms
  uint32_t count = SystemCoreClock / 1000;
 800859e:	4b0f      	ldr	r3, [pc, #60]	@ (80085dc <dcd_remote_wakeup+0x84>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a0f      	ldr	r2, [pc, #60]	@ (80085e0 <dcd_remote_wakeup+0x88>)
 80085a4:	fba2 2303 	umull	r2, r3, r2, r3
 80085a8:	099b      	lsrs	r3, r3, #6
 80085aa:	613b      	str	r3, [r7, #16]
  while (count--) __NOP();
 80085ac:	e000      	b.n	80085b0 <dcd_remote_wakeup+0x58>
 80085ae:	bf00      	nop
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	1e5a      	subs	r2, r3, #1
 80085b4:	613a      	str	r2, [r7, #16]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1f9      	bne.n	80085ae <dcd_remote_wakeup+0x56>
}
 80085ba:	bf00      	nop

  // Per specs: remote wakeup signal bit must be clear within 1-15ms
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80085c2:	f023 0201 	bic.w	r2, r3, #1
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 80085cc:	bf00      	nop
 80085ce:	371c      	adds	r7, #28
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr
 80085d8:	0800a39c 	.word	0x0800a39c
 80085dc:	20000048 	.word	0x20000048
 80085e0:	10624dd3 	.word	0x10624dd3

080085e4 <dcd_connect>:

void dcd_connect(uint8_t rhport) {
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	4603      	mov	r3, r0
 80085ec:	71fb      	strb	r3, [r7, #7]
 80085ee:	79fb      	ldrb	r3, [r7, #7]
 80085f0:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80085f2:	7afb      	ldrb	r3, [r7, #11]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d001      	beq.n	80085fc <dcd_connect+0x18>
    rhport = 0;
 80085f8:	2300      	movs	r3, #0
 80085fa:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80085fc:	7afb      	ldrb	r3, [r7, #11]
 80085fe:	4a09      	ldr	r2, [pc, #36]	@ (8008624 <dcd_connect+0x40>)
 8008600:	011b      	lsls	r3, r3, #4
 8008602:	4413      	add	r3, r2
 8008604:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008606:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800860e:	f023 0202 	bic.w	r2, r3, #2
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8008618:	bf00      	nop
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	0800a39c 	.word	0x0800a39c

08008628 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	4603      	mov	r3, r0
 8008630:	71fb      	strb	r3, [r7, #7]
 8008632:	79fb      	ldrb	r3, [r7, #7]
 8008634:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008636:	7afb      	ldrb	r3, [r7, #11]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d001      	beq.n	8008640 <dcd_disconnect+0x18>
    rhport = 0;
 800863c:	2300      	movs	r3, #0
 800863e:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008640:	7afb      	ldrb	r3, [r7, #11]
 8008642:	4a09      	ldr	r2, [pc, #36]	@ (8008668 <dcd_disconnect+0x40>)
 8008644:	011b      	lsls	r3, r3, #4
 8008646:	4413      	add	r3, r2
 8008648:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800864a:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8008652:	f043 0202 	orr.w	r2, r3, #2
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800865c:	bf00      	nop
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	0800a39c 	.word	0x0800a39c

0800866c <dcd_sof_enable>:

// Be advised: audio, video and possibly other iso-ep classes use dcd_sof_enable() to enable/disable its corresponding ISR on purpose!
void dcd_sof_enable(uint8_t rhport, bool en) {
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	4603      	mov	r3, r0
 8008674:	460a      	mov	r2, r1
 8008676:	71fb      	strb	r3, [r7, #7]
 8008678:	4613      	mov	r3, r2
 800867a:	71bb      	strb	r3, [r7, #6]
 800867c:	79fb      	ldrb	r3, [r7, #7]
 800867e:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008680:	7afb      	ldrb	r3, [r7, #11]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d001      	beq.n	800868a <dcd_sof_enable+0x1e>
    rhport = 0;
 8008686:	2300      	movs	r3, #0
 8008688:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800868a:	7afb      	ldrb	r3, [r7, #11]
 800868c:	4a10      	ldr	r2, [pc, #64]	@ (80086d0 <dcd_sof_enable+0x64>)
 800868e:	011b      	lsls	r3, r3, #4
 8008690:	4413      	add	r3, r2
 8008692:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008694:	60fb      	str	r3, [r7, #12]

  _dcd_data.sof_en = en;
 8008696:	4a0f      	ldr	r2, [pc, #60]	@ (80086d4 <dcd_sof_enable+0x68>)
 8008698:	79bb      	ldrb	r3, [r7, #6]
 800869a:	71d3      	strb	r3, [r2, #7]

  if (en) {
 800869c:	79bb      	ldrb	r3, [r7, #6]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d009      	beq.n	80086b6 <dcd_sof_enable+0x4a>
    dwc2->gintsts = GINTSTS_SOF;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2208      	movs	r2, #8
 80086a6:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	f043 0208 	orr.w	r2, r3, #8
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	619a      	str	r2, [r3, #24]
  } else {
    dwc2->gintmsk &= ~GINTMSK_SOFM;
  }
}
 80086b4:	e005      	b.n	80086c2 <dcd_sof_enable+0x56>
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	f023 0208 	bic.w	r2, r3, #8
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	619a      	str	r2, [r3, #24]
}
 80086c2:	bf00      	nop
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	0800a39c 	.word	0x0800a39c
 80086d4:	20000de4 	.word	0x20000de4

080086d8 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	4603      	mov	r3, r0
 80086e0:	6039      	str	r1, [r7, #0]
 80086e2:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	7899      	ldrb	r1, [r3, #2]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	889b      	ldrh	r3, [r3, #4]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	79fb      	ldrb	r3, [r7, #7]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7ff fa76 	bl	8007bec <dfifo_alloc>
 8008700:	4603      	mov	r3, r0
 8008702:	f083 0301 	eor.w	r3, r3, #1
 8008706:	b2db      	uxtb	r3, r3
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00a      	beq.n	8008722 <dcd_edpt_open+0x4a>
 800870c:	4b0a      	ldr	r3, [pc, #40]	@ (8008738 <dcd_edpt_open+0x60>)
 800870e:	60fb      	str	r3, [r7, #12]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0301 	and.w	r3, r3, #1
 8008718:	2b00      	cmp	r3, #0
 800871a:	d000      	beq.n	800871e <dcd_edpt_open+0x46>
 800871c:	be00      	bkpt	0x0000
 800871e:	2300      	movs	r3, #0
 8008720:	e005      	b.n	800872e <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 8008722:	79fb      	ldrb	r3, [r7, #7]
 8008724:	6839      	ldr	r1, [r7, #0]
 8008726:	4618      	mov	r0, r3
 8008728:	f7ff fb9c 	bl	8007e64 <edpt_activate>
  return true;
 800872c:	2301      	movs	r3, #1
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	e000edf0 	.word	0xe000edf0

0800873c <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 800873c:	b580      	push	{r7, lr}
 800873e:	b08a      	sub	sp, #40	@ 0x28
 8008740:	af00      	add	r7, sp, #0
 8008742:	4603      	mov	r3, r0
 8008744:	71fb      	strb	r3, [r7, #7]
 8008746:	79fb      	ldrb	r3, [r7, #7]
 8008748:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800874a:	7dfb      	ldrb	r3, [r7, #23]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d001      	beq.n	8008754 <dcd_edpt_close_all+0x18>
    rhport = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008754:	7dfb      	ldrb	r3, [r7, #23]
 8008756:	4a3f      	ldr	r2, [pc, #252]	@ (8008854 <dcd_edpt_close_all+0x118>)
 8008758:	011b      	lsls	r3, r3, #4
 800875a:	4413      	add	r3, r2
 800875c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800875e:	623b      	str	r3, [r7, #32]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8008760:	79fb      	ldrb	r3, [r7, #7]
 8008762:	4a3c      	ldr	r2, [pc, #240]	@ (8008854 <dcd_edpt_close_all+0x118>)
 8008764:	011b      	lsls	r3, r3, #4
 8008766:	4413      	add	r3, r2
 8008768:	3308      	adds	r3, #8
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	77fb      	strb	r3, [r7, #31]

  usbd_spin_lock(false);
 800876e:	2000      	movs	r0, #0
 8008770:	f7fe fd4a 	bl	8007208 <usbd_spin_lock>

  _dcd_data.allocated_epin_count = 0;
 8008774:	4b38      	ldr	r3, [pc, #224]	@ (8008858 <dcd_edpt_close_all+0x11c>)
 8008776:	2200      	movs	r2, #0
 8008778:	719a      	strb	r2, [r3, #6]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8008780:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 8008784:	2301      	movs	r3, #1
 8008786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800878a:	e034      	b.n	80087f6 <dcd_edpt_close_all+0xba>
    for (uint8_t d = 0; d < 2; d++) {
 800878c:	2300      	movs	r3, #0
 800878e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008792:	e027      	b.n	80087e4 <dcd_edpt_close_all+0xa8>
      dwc2_dep_t* dep = &dwc2->ep[d][n];
 8008794:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008798:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800879c:	0112      	lsls	r2, r2, #4
 800879e:	4413      	add	r3, r2
 80087a0:	3348      	adds	r3, #72	@ 0x48
 80087a2:	015b      	lsls	r3, r3, #5
 80087a4:	6a3a      	ldr	r2, [r7, #32]
 80087a6:	4413      	add	r3, r2
 80087a8:	61bb      	str	r3, [r7, #24]
      if (dep->ctl & EPCTL_EPENA) {
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	da05      	bge.n	80087be <dcd_edpt_close_all+0x82>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f043 4290 	orr.w	r2, r3, #1207959552	@ 0x48000000
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	601a      	str	r2, [r3, #0]
      }
      xfer_status[n][1-d].max_size = 0;
 80087be:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80087c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80087c6:	f1c3 0301 	rsb	r3, r3, #1
 80087ca:	4924      	ldr	r1, [pc, #144]	@ (800885c <dcd_edpt_close_all+0x120>)
 80087cc:	0052      	lsls	r2, r2, #1
 80087ce:	4413      	add	r3, r2
 80087d0:	011b      	lsls	r3, r3, #4
 80087d2:	440b      	add	r3, r1
 80087d4:	330a      	adds	r3, #10
 80087d6:	2200      	movs	r2, #0
 80087d8:	801a      	strh	r2, [r3, #0]
    for (uint8_t d = 0; d < 2; d++) {
 80087da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80087de:	3301      	adds	r3, #1
 80087e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80087e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d9d3      	bls.n	8008794 <dcd_edpt_close_all+0x58>
  for (uint8_t n = 1; n < ep_count; n++) {
 80087ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087f0:	3301      	adds	r3, #1
 80087f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80087f6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80087fa:	7ffb      	ldrb	r3, [r7, #31]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d3c5      	bcc.n	800878c <dcd_edpt_close_all+0x50>
 8008800:	6a3b      	ldr	r3, [r7, #32]
 8008802:	60fb      	str	r3, [r7, #12]
 8008804:	2310      	movs	r3, #16
 8008806:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8008808:	7afb      	ldrb	r3, [r7, #11]
 800880a:	019b      	lsls	r3, r3, #6
 800880c:	f043 0220 	orr.w	r2, r3, #32
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8008814:	bf00      	nop
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	f003 0320 	and.w	r3, r3, #32
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1f9      	bne.n	8008816 <dcd_edpt_close_all+0xda>
}
 8008822:	bf00      	nop
 8008824:	6a3b      	ldr	r3, [r7, #32]
 8008826:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	2210      	movs	r2, #16
 800882c:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800882e:	bf00      	nop
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	f003 0310 	and.w	r3, r3, #16
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1f9      	bne.n	8008830 <dcd_edpt_close_all+0xf4>
}
 800883c:	bf00      	nop
    }
  }

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport); // re-init dfifo
 800883e:	79fb      	ldrb	r3, [r7, #7]
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff fab5 	bl	8007db0 <dfifo_device_init>

  usbd_spin_unlock(false);
 8008846:	2000      	movs	r0, #0
 8008848:	f7fe fcf8 	bl	800723c <usbd_spin_unlock>
}
 800884c:	bf00      	nop
 800884e:	3728      	adds	r7, #40	@ 0x28
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	0800a39c 	.word	0x0800a39c
 8008858:	20000de4 	.word	0x20000de4
 800885c:	20000d64 	.word	0x20000d64

08008860 <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af00      	add	r7, sp, #0
 8008866:	603a      	str	r2, [r7, #0]
 8008868:	461a      	mov	r2, r3
 800886a:	4603      	mov	r3, r0
 800886c:	71fb      	strb	r3, [r7, #7]
 800886e:	460b      	mov	r3, r1
 8008870:	71bb      	strb	r3, [r7, #6]
 8008872:	4613      	mov	r3, r2
 8008874:	80bb      	strh	r3, [r7, #4]
 8008876:	79bb      	ldrb	r3, [r7, #6]
 8008878:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800887a:	7bbb      	ldrb	r3, [r7, #14]
 800887c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008880:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008882:	75bb      	strb	r3, [r7, #22]
 8008884:	79bb      	ldrb	r3, [r7, #6]
 8008886:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008888:	7bfb      	ldrb	r3, [r7, #15]
 800888a:	09db      	lsrs	r3, r3, #7
 800888c:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800888e:	757b      	strb	r3, [r7, #21]
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8008890:	7dba      	ldrb	r2, [r7, #22]
 8008892:	7d7b      	ldrb	r3, [r7, #21]
 8008894:	0052      	lsls	r2, r2, #1
 8008896:	4413      	add	r3, r2
 8008898:	011b      	lsls	r3, r3, #4
 800889a:	4a17      	ldr	r2, [pc, #92]	@ (80088f8 <dcd_edpt_xfer+0x98>)
 800889c:	4413      	add	r3, r2
 800889e:	613b      	str	r3, [r7, #16]
  bool ret;

  usbd_spin_lock(false);
 80088a0:	2000      	movs	r0, #0
 80088a2:	f7fe fcb1 	bl	8007208 <usbd_spin_lock>

  if (xfer->max_size == 0) {
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	895b      	ldrh	r3, [r3, #10]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d102      	bne.n	80088b4 <dcd_edpt_xfer+0x54>
    ret = false;  // Endpoint is closed
 80088ae:	2300      	movs	r3, #0
 80088b0:	75fb      	strb	r3, [r7, #23]
 80088b2:	e018      	b.n	80088e6 <dcd_edpt_xfer+0x86>
  } else {
    xfer->buffer = buffer;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	683a      	ldr	r2, [r7, #0]
 80088b8:	601a      	str	r2, [r3, #0]
    xfer->ff = NULL;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	2200      	movs	r2, #0
 80088be:	605a      	str	r2, [r3, #4]
    xfer->total_len = total_bytes;
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	88ba      	ldrh	r2, [r7, #4]
 80088c4:	811a      	strh	r2, [r3, #8]

    // EP0 can only handle one packet
    if (epnum == 0) {
 80088c6:	7dbb      	ldrb	r3, [r7, #22]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d104      	bne.n	80088d6 <dcd_edpt_xfer+0x76>
      _dcd_data.ep0_pending[dir] = total_bytes;
 80088cc:	7d7b      	ldrb	r3, [r7, #21]
 80088ce:	490b      	ldr	r1, [pc, #44]	@ (80088fc <dcd_edpt_xfer+0x9c>)
 80088d0:	88ba      	ldrh	r2, [r7, #4]
 80088d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir);
 80088d6:	7d7a      	ldrb	r2, [r7, #21]
 80088d8:	7db9      	ldrb	r1, [r7, #22]
 80088da:	79fb      	ldrb	r3, [r7, #7]
 80088dc:	4618      	mov	r0, r3
 80088de:	f7ff fc2b 	bl	8008138 <edpt_schedule_packets>
    ret = true;
 80088e2:	2301      	movs	r3, #1
 80088e4:	75fb      	strb	r3, [r7, #23]
  }

  usbd_spin_unlock(false);
 80088e6:	2000      	movs	r0, #0
 80088e8:	f7fe fca8 	bl	800723c <usbd_spin_unlock>

  return ret;
 80088ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	20000d64 	.word	0x20000d64
 80088fc:	20000de4 	.word	0x20000de4

08008900 <dcd_edpt_stall>:
  usbd_spin_unlock(false);

  return ret;
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8008900:	b580      	push	{r7, lr}
 8008902:	b086      	sub	sp, #24
 8008904:	af00      	add	r7, sp, #0
 8008906:	4603      	mov	r3, r0
 8008908:	460a      	mov	r2, r1
 800890a:	71fb      	strb	r3, [r7, #7]
 800890c:	4613      	mov	r3, r2
 800890e:	71bb      	strb	r3, [r7, #6]
 8008910:	79fb      	ldrb	r3, [r7, #7]
 8008912:	74bb      	strb	r3, [r7, #18]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008914:	7cbb      	ldrb	r3, [r7, #18]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <dcd_edpt_stall+0x1e>
    rhport = 0;
 800891a:	2300      	movs	r3, #0
 800891c:	74bb      	strb	r3, [r7, #18]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800891e:	7cbb      	ldrb	r3, [r7, #18]
 8008920:	4a11      	ldr	r2, [pc, #68]	@ (8008968 <dcd_edpt_stall+0x68>)
 8008922:	011b      	lsls	r3, r3, #4
 8008924:	4413      	add	r3, r2
 8008926:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008928:	617b      	str	r3, [r7, #20]
  edpt_disable(rhport, ep_addr, true);
 800892a:	79b9      	ldrb	r1, [r7, #6]
 800892c:	79fb      	ldrb	r3, [r7, #7]
 800892e:	2201      	movs	r2, #1
 8008930:	4618      	mov	r0, r3
 8008932:	f7ff fb35 	bl	8007fa0 <edpt_disable>
 8008936:	79bb      	ldrb	r3, [r7, #6]
 8008938:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800893a:	7cfb      	ldrb	r3, [r7, #19]
 800893c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008940:	b2db      	uxtb	r3, r3
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10b      	bne.n	800895e <dcd_edpt_stall+0x5e>
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	60fb      	str	r3, [r7, #12]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800894e:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8008950:	2300      	movs	r3, #0
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 8008952:	2b00      	cmp	r3, #0
 8008954:	d003      	beq.n	800895e <dcd_edpt_stall+0x5e>
    dma_setup_prepare(rhport);
 8008956:	79fb      	ldrb	r3, [r7, #7]
 8008958:	4618      	mov	r0, r3
 800895a:	f7ff f90b 	bl	8007b74 <dma_setup_prepare>
  }
}
 800895e:	bf00      	nop
 8008960:	3718      	adds	r7, #24
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	0800a39c 	.word	0x0800a39c

0800896c <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
 8008972:	4603      	mov	r3, r0
 8008974:	460a      	mov	r2, r1
 8008976:	71fb      	strb	r3, [r7, #7]
 8008978:	4613      	mov	r3, r2
 800897a:	71bb      	strb	r3, [r7, #6]
 800897c:	79fb      	ldrb	r3, [r7, #7]
 800897e:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008980:	7a7b      	ldrb	r3, [r7, #9]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <dcd_edpt_clear_stall+0x1e>
    rhport = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800898a:	7a7b      	ldrb	r3, [r7, #9]
 800898c:	4a19      	ldr	r2, [pc, #100]	@ (80089f4 <dcd_edpt_clear_stall+0x88>)
 800898e:	011b      	lsls	r3, r3, #4
 8008990:	4413      	add	r3, r2
 8008992:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008994:	617b      	str	r3, [r7, #20]
 8008996:	79bb      	ldrb	r3, [r7, #6]
 8008998:	72bb      	strb	r3, [r7, #10]
 800899a:	7abb      	ldrb	r3, [r7, #10]
 800899c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089a0:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 80089a2:	74fb      	strb	r3, [r7, #19]
 80089a4:	79bb      	ldrb	r3, [r7, #6]
 80089a6:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80089a8:	7afb      	ldrb	r3, [r7, #11]
 80089aa:	09db      	lsrs	r3, r3, #7
 80089ac:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80089ae:	74bb      	strb	r3, [r7, #18]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 80089b0:	7cbb      	ldrb	r3, [r7, #18]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	bf14      	ite	ne
 80089b6:	2301      	movne	r3, #1
 80089b8:	2300      	moveq	r3, #0
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	461a      	mov	r2, r3
 80089be:	7cfb      	ldrb	r3, [r7, #19]
 80089c0:	0112      	lsls	r2, r2, #4
 80089c2:	4413      	add	r3, r2
 80089c4:	3348      	adds	r3, #72	@ 0x48
 80089c6:	015b      	lsls	r3, r3, #5
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	4413      	add	r3, r2
 80089cc:	60fb      	str	r3, [r7, #12]

  // Clear stall and reset data toggle
  dep->ctl &= ~EPCTL_STALL;;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	601a      	str	r2, [r3, #0]
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	601a      	str	r2, [r3, #0]
}
 80089e6:	bf00      	nop
 80089e8:	371c      	adds	r7, #28
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	0800a39c 	.word	0x0800a39c

080089f8 <handle_bus_reset>:
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
// Must be called from critical section
static void handle_bus_reset(uint8_t rhport) {
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b08e      	sub	sp, #56	@ 0x38
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	4603      	mov	r3, r0
 8008a00:	71fb      	strb	r3, [r7, #7]
 8008a02:	79fb      	ldrb	r3, [r7, #7]
 8008a04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008a08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <handle_bus_reset+0x1e>
    rhport = 0;
 8008a10:	2300      	movs	r3, #0
 8008a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008a16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a1a:	4a6a      	ldr	r2, [pc, #424]	@ (8008bc4 <handle_bus_reset+0x1cc>)
 8008a1c:	011b      	lsls	r3, r3, #4
 8008a1e:	4413      	add	r3, r2
 8008a20:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8008a22:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a26:	62bb      	str	r3, [r7, #40]	@ 0x28
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8008a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a2c:	60bb      	str	r3, [r7, #8]
  return ghwcfg2.num_dev_ep + 1;
 8008a2e:	7a7b      	ldrb	r3, [r7, #9]
 8008a30:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	3301      	adds	r3, #1
 8008a38:	b2db      	uxtb	r3, r3
  const uint8_t ep_count =  dwc2_ep_count(dwc2);
 8008a3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  tu_memclr(xfer_status, sizeof(xfer_status));
 8008a3e:	2280      	movs	r2, #128	@ 0x80
 8008a40:	2100      	movs	r1, #0
 8008a42:	4861      	ldr	r0, [pc, #388]	@ (8008bc8 <handle_bus_reset+0x1d0>)
 8008a44:	f001 fb0a 	bl	800a05c <memset>

  _dcd_data.sof_en = false;
 8008a48:	4b60      	ldr	r3, [pc, #384]	@ (8008bcc <handle_bus_reset+0x1d4>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 8008a4e:	4b5f      	ldr	r3, [pc, #380]	@ (8008bcc <handle_bus_reset+0x1d4>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 8008a54:	2300      	movs	r3, #0
 8008a56:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008a5a:	e014      	b.n	8008a86 <handle_bus_reset+0x8e>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8008a5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008a60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a62:	3358      	adds	r3, #88	@ 0x58
 8008a64:	015b      	lsls	r3, r3, #5
 8008a66:	4413      	add	r3, r2
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008a6e:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8008a72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a74:	3358      	adds	r3, #88	@ 0x58
 8008a76:	015b      	lsls	r3, r3, #5
 8008a78:	440b      	add	r3, r1
 8008a7a:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 8008a7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008a80:	3301      	adds	r3, #1
 8008a82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008a86:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8008a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d3e4      	bcc.n	8008a5c <handle_bus_reset+0x64>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 8008a92:	2300      	movs	r3, #0
 8008a94:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8008a98:	e01d      	b.n	8008ad6 <handle_bus_reset+0xde>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 8008a9a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008a9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aa0:	3348      	adds	r3, #72	@ 0x48
 8008aa2:	015b      	lsls	r3, r3, #5
 8008aa4:	4413      	add	r3, r2
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	da0f      	bge.n	8008acc <handle_bus_reset+0xd4>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 8008aac:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008ab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ab2:	3348      	adds	r3, #72	@ 0x48
 8008ab4:	015b      	lsls	r3, r3, #5
 8008ab6:	4413      	add	r3, r2
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008abe:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 8008ac2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ac4:	3348      	adds	r3, #72	@ 0x48
 8008ac6:	015b      	lsls	r3, r3, #5
 8008ac8:	440b      	add	r3, r1
 8008aca:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 8008acc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8008ad6:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8008ada:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d3db      	bcc.n	8008a9a <handle_bus_reset+0xa2>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae4:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8008ae8:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8008aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aee:	2209      	movs	r2, #9
 8008af0:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 8008af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af6:	2209      	movs	r2, #9
 8008af8:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 8008afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afe:	61bb      	str	r3, [r7, #24]
 8008b00:	2310      	movs	r3, #16
 8008b02:	75fb      	strb	r3, [r7, #23]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8008b04:	7dfb      	ldrb	r3, [r7, #23]
 8008b06:	019b      	lsls	r3, r3, #6
 8008b08:	f043 0220 	orr.w	r2, r3, #32
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8008b10:	bf00      	nop
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	f003 0320 	and.w	r3, r3, #32
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1f9      	bne.n	8008b12 <handle_bus_reset+0x11a>
}
 8008b1e:	bf00      	nop
 8008b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b22:	61fb      	str	r3, [r7, #28]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	2210      	movs	r2, #16
 8008b28:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8008b2a:	bf00      	nop
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	f003 0310 	and.w	r3, r3, #16
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1f9      	bne.n	8008b2c <handle_bus_reset+0x134>
}
 8008b38:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 8008b3a:	79fb      	ldrb	r3, [r7, #7]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7ff f937 	bl	8007db0 <dfifo_device_init>

  // 5. Reset device address
  dwc2_dcfg_t dcfg = {.value = dwc2->dcfg};
 8008b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b44:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8008b48:	613b      	str	r3, [r7, #16]
  dcfg.address = 0;
 8008b4a:	8a3b      	ldrh	r3, [r7, #16]
 8008b4c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008b50:	823b      	strh	r3, [r7, #16]
  dwc2->dcfg = dcfg.value;
 8008b52:	693a      	ldr	r2, [r7, #16]
 8008b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b56:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5c:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8008b60:	f023 0203 	bic.w	r2, r3, #3
 8008b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b66:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b6c:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8008b70:	f023 0203 	bic.w	r2, r3, #3
 8008b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b76:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8008b7a:	4b13      	ldr	r3, [pc, #76]	@ (8008bc8 <handle_bus_reset+0x1d0>)
 8008b7c:	2240      	movs	r2, #64	@ 0x40
 8008b7e:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8008b80:	4b11      	ldr	r3, [pc, #68]	@ (8008bc8 <handle_bus_reset+0x1d0>)
 8008b82:	2240      	movs	r2, #64	@ 0x40
 8008b84:	835a      	strh	r2, [r3, #26]
 8008b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b88:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b8e:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8008b90:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d004      	beq.n	8008ba0 <handle_bus_reset+0x1a8>
    dma_setup_prepare(rhport);
 8008b96:	79fb      	ldrb	r3, [r7, #7]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7fe ffeb 	bl	8007b74 <dma_setup_prepare>
 8008b9e:	e007      	b.n	8008bb0 <handle_bus_reset+0x1b8>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba2:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 8008ba6:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 8008baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bac:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bba:	619a      	str	r2, [r3, #24]
}
 8008bbc:	bf00      	nop
 8008bbe:	3738      	adds	r7, #56	@ 0x38
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	0800a39c 	.word	0x0800a39c
 8008bc8:	20000d64 	.word	0x20000d64
 8008bcc:	20000de4 	.word	0x20000de4

08008bd0 <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b08a      	sub	sp, #40	@ 0x28
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	71fb      	strb	r3, [r7, #7]
 8008bda:	79fb      	ldrb	r3, [r7, #7]
 8008bdc:	77fb      	strb	r3, [r7, #31]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008bde:	7ffb      	ldrb	r3, [r7, #31]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <handle_enum_done+0x18>
    rhport = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	77fb      	strb	r3, [r7, #31]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008be8:	7ffb      	ldrb	r3, [r7, #31]
 8008bea:	4a1b      	ldr	r2, [pc, #108]	@ (8008c58 <handle_enum_done+0x88>)
 8008bec:	011b      	lsls	r3, r3, #4
 8008bee:	4413      	add	r3, r2
 8008bf0:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8008bf2:	623b      	str	r3, [r7, #32]
  const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 8008bf4:	6a3b      	ldr	r3, [r7, #32]
 8008bf6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8008bfa:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dsts.enum_speed) {
 8008bfc:	7e3b      	ldrb	r3, [r7, #24]
 8008bfe:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d002      	beq.n	8008c0e <handle_enum_done+0x3e>
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	d004      	beq.n	8008c16 <handle_enum_done+0x46>
 8008c0c:	e007      	b.n	8008c1e <handle_enum_done+0x4e>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 8008c0e:	2302      	movs	r3, #2
 8008c10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8008c14:	e007      	b.n	8008c26 <handle_enum_done+0x56>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 8008c16:	2301      	movs	r3, #1
 8008c18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8008c1c:	e003      	b.n	8008c26 <handle_enum_done+0x56>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8008c24:	bf00      	nop
 8008c26:	79fb      	ldrb	r3, [r7, #7]
 8008c28:	77bb      	strb	r3, [r7, #30]
 8008c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c2e:	777b      	strb	r3, [r7, #29]
 8008c30:	2301      	movs	r3, #1
 8008c32:	773b      	strb	r3, [r7, #28]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8008c34:	7fbb      	ldrb	r3, [r7, #30]
 8008c36:	733b      	strb	r3, [r7, #12]
  event.event_id = DCD_EVENT_BUS_RESET;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	737b      	strb	r3, [r7, #13]
  event.bus_reset.speed = speed;
 8008c3c:	7f7b      	ldrb	r3, [r7, #29]
 8008c3e:	743b      	strb	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 8008c40:	7f3a      	ldrb	r2, [r7, #28]
 8008c42:	f107 030c 	add.w	r3, r7, #12
 8008c46:	4611      	mov	r1, r2
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7fe f8df 	bl	8006e0c <dcd_event_handler>
}
 8008c4e:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 8008c50:	bf00      	nop
 8008c52:	3728      	adds	r7, #40	@ 0x28
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	0800a39c 	.word	0x0800a39c

08008c5c <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b08c      	sub	sp, #48	@ 0x30
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	4603      	mov	r3, r0
 8008c64:	71fb      	strb	r3, [r7, #7]
 8008c66:	79fb      	ldrb	r3, [r7, #7]
 8008c68:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008c6a:	7cfb      	ldrb	r3, [r7, #19]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <handle_rxflvl_irq+0x18>
    rhport = 0;
 8008c70:	2300      	movs	r3, #0
 8008c72:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008c74:	7cfb      	ldrb	r3, [r7, #19]
 8008c76:	4a49      	ldr	r2, [pc, #292]	@ (8008d9c <handle_rxflvl_irq+0x140>)
 8008c78:	011b      	lsls	r3, r3, #4
 8008c7a:	4413      	add	r3, r2
 8008c7c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 8008c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c86:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp = {.value = dwc2->grxstsp};
 8008c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c8a:	6a1b      	ldr	r3, [r3, #32]
 8008c8c:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp.ep_ch_num;
 8008c8e:	7b3b      	ldrb	r3, [r7, #12]
 8008c90:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 8008c9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c9e:	3358      	adds	r3, #88	@ 0x58
 8008ca0:	015b      	lsls	r3, r3, #5
 8008ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ca4:	4413      	add	r3, r2
 8008ca6:	623b      	str	r3, [r7, #32]

  switch (grxstsp.packet_status) {
 8008ca8:	7bbb      	ldrb	r3, [r7, #14]
 8008caa:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	2b05      	cmp	r3, #5
 8008cb4:	d86a      	bhi.n	8008d8c <handle_rxflvl_irq+0x130>
 8008cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8008cbc <handle_rxflvl_irq+0x60>)
 8008cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cbc:	08008d8d 	.word	0x08008d8d
 8008cc0:	08008cfb 	.word	0x08008cfb
 8008cc4:	08008d8d 	.word	0x08008d8d
 8008cc8:	08008ced 	.word	0x08008ced
 8008ccc:	08008d8d 	.word	0x08008d8d
 8008cd0:	08008cd5 	.word	0x08008cd5
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 8008cd4:	4b32      	ldr	r3, [pc, #200]	@ (8008da0 <handle_rxflvl_irq+0x144>)
 8008cd6:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 8008cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ce6:	6812      	ldr	r2, [r2, #0]
 8008ce8:	601a      	str	r2, [r3, #0]
      break;
 8008cea:	e052      	b.n	8008d92 <handle_rxflvl_irq+0x136>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8008cec:	6a3b      	ldr	r3, [r7, #32]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 8008cf4:	6a3b      	ldr	r3, [r7, #32]
 8008cf6:	611a      	str	r2, [r3, #16]
      break;
 8008cf8:	e04b      	b.n	8008d92 <handle_rxflvl_irq+0x136>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp.byte_count;
 8008cfa:	89bb      	ldrh	r3, [r7, #12]
 8008cfc:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8008d04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d08:	015b      	lsls	r3, r3, #5
 8008d0a:	4a26      	ldr	r2, [pc, #152]	@ (8008da4 <handle_rxflvl_irq+0x148>)
 8008d0c:	4413      	add	r3, r2
 8008d0e:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 8008d10:	8b7b      	ldrh	r3, [r7, #26]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d03c      	beq.n	8008d90 <handle_rxflvl_irq+0x134>
        // Read packet off RxFIFO
        if (xfer->ff) {
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d007      	beq.n	8008d2e <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	8b7a      	ldrh	r2, [r7, #26]
 8008d24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fc ffc1 	bl	8005cae <tu_fifo_write_n_const_addr_full_words>
 8008d2c:	e00c      	b.n	8008d48 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	8b7a      	ldrh	r2, [r7, #26]
 8008d34:	4619      	mov	r1, r3
 8008d36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d38:	f000 fd70 	bl	800981c <dfifo_read_packet>
          xfer->buffer += byte_count;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	8b7b      	ldrh	r3, [r7, #26]
 8008d42:	441a      	add	r2, r3
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	895b      	ldrh	r3, [r3, #10]
 8008d4c:	8b7a      	ldrh	r2, [r7, #26]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d21e      	bcs.n	8008d90 <handle_rxflvl_irq+0x134>
          const dwc2_ep_tsize_t tsiz = {.value = epout->tsiz};
 8008d52:	6a3b      	ldr	r3, [r7, #32]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	60bb      	str	r3, [r7, #8]
          xfer->total_len -= tsiz.xfer_size;
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	891a      	ldrh	r2, [r3, #8]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 8008d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10d      	bne.n	8008d90 <handle_rxflvl_irq+0x134>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	891a      	ldrh	r2, [r3, #8]
 8008d78:	4b0b      	ldr	r3, [pc, #44]	@ (8008da8 <handle_rxflvl_irq+0x14c>)
 8008d7a:	881b      	ldrh	r3, [r3, #0]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 8008d84:	4b08      	ldr	r3, [pc, #32]	@ (8008da8 <handle_rxflvl_irq+0x14c>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 8008d8a:	e001      	b.n	8008d90 <handle_rxflvl_irq+0x134>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 8008d8c:	bf00      	nop
 8008d8e:	e000      	b.n	8008d92 <handle_rxflvl_irq+0x136>
      break;
 8008d90:	bf00      	nop
  }
}
 8008d92:	bf00      	nop
 8008d94:	3730      	adds	r7, #48	@ 0x30
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	0800a39c 	.word	0x0800a39c
 8008da0:	20000dec 	.word	0x20000dec
 8008da4:	20000d64 	.word	0x20000d64
 8008da8:	20000de4 	.word	0x20000de4

08008dac <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b08e      	sub	sp, #56	@ 0x38
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	4603      	mov	r3, r0
 8008db4:	603a      	str	r2, [r7, #0]
 8008db6:	71fb      	strb	r3, [r7, #7]
 8008db8:	460b      	mov	r3, r1
 8008dba:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 8008dbc:	783b      	ldrb	r3, [r7, #0]
 8008dbe:	f003 0308 	and.w	r3, r3, #8
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d01c      	beq.n	8008e02 <handle_epout_slave+0x56>
 8008dc8:	79fb      	ldrb	r3, [r7, #7]
 8008dca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008dce:	4b34      	ldr	r3, [pc, #208]	@ (8008ea0 <handle_epout_slave+0xf4>)
 8008dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8008dd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008ddc:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 8008dde:	2306      	movs	r3, #6
 8008de0:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8008de2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008de4:	f107 0318 	add.w	r3, r7, #24
 8008de8:	6810      	ldr	r0, [r2, #0]
 8008dea:	6851      	ldr	r1, [r2, #4]
 8008dec:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 8008dee:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8008df2:	f107 0314 	add.w	r3, r7, #20
 8008df6:	4611      	mov	r1, r2
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fe f807 	bl	8006e0c <dcd_event_handler>
}
 8008dfe:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 8008e00:	e04a      	b.n	8008e98 <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 8008e02:	783b      	ldrb	r3, [r7, #0]
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d044      	beq.n	8008e98 <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 8008e0e:	783b      	ldrb	r3, [r7, #0]
 8008e10:	f003 0320 	and.w	r3, r3, #32
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d13e      	bne.n	8008e98 <handle_epout_slave+0xec>
 8008e1a:	787b      	ldrb	r3, [r7, #1]
 8008e1c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d138      	bne.n	8008e98 <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8008e26:	79bb      	ldrb	r3, [r7, #6]
 8008e28:	015b      	lsls	r3, r3, #5
 8008e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8008ea4 <handle_epout_slave+0xf8>)
 8008e2c:	4413      	add	r3, r2
 8008e2e:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 8008e30:	79bb      	ldrb	r3, [r7, #6]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d10a      	bne.n	8008e4c <handle_epout_slave+0xa0>
 8008e36:	4b1c      	ldr	r3, [pc, #112]	@ (8008ea8 <handle_epout_slave+0xfc>)
 8008e38:	881b      	ldrh	r3, [r3, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d006      	beq.n	8008e4c <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 8008e3e:	79b9      	ldrb	r1, [r7, #6]
 8008e40:	79fb      	ldrb	r3, [r7, #7]
 8008e42:	2200      	movs	r2, #0
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7ff f977 	bl	8008138 <edpt_schedule_packets>
 8008e4a:	e025      	b.n	8008e98 <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8008e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e4e:	891b      	ldrh	r3, [r3, #8]
 8008e50:	461a      	mov	r2, r3
 8008e52:	79fb      	ldrb	r3, [r7, #7]
 8008e54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008e58:	79bb      	ldrb	r3, [r7, #6]
 8008e5a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8008e5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e60:	2300      	movs	r3, #0
 8008e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e66:	2301      	movs	r3, #1
 8008e68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8008e6c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008e70:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8008e72:	2307      	movs	r3, #7
 8008e74:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 8008e76:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008e7a:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7e:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8008e80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008e84:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 8008e86:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8008e8a:	f107 0308 	add.w	r3, r7, #8
 8008e8e:	4611      	mov	r1, r2
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fd ffbb 	bl	8006e0c <dcd_event_handler>
}
 8008e96:	bf00      	nop
      }
    }
  }
}
 8008e98:	3738      	adds	r7, #56	@ 0x38
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20000dec 	.word	0x20000dec
 8008ea4:	20000d64 	.word	0x20000d64
 8008ea8:	20000de4 	.word	0x20000de4

08008eac <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b092      	sub	sp, #72	@ 0x48
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	603a      	str	r2, [r7, #0]
 8008eb6:	71fb      	strb	r3, [r7, #7]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	71bb      	strb	r3, [r7, #6]
 8008ebc:	79fb      	ldrb	r3, [r7, #7]
 8008ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008ec2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d002      	beq.n	8008ed0 <handle_epin_slave+0x24>
    rhport = 0;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008ed0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008ed4:	4a64      	ldr	r2, [pc, #400]	@ (8009068 <handle_epin_slave+0x1bc>)
 8008ed6:	011b      	lsls	r3, r3, #4
 8008ed8:	4413      	add	r3, r2
 8008eda:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008edc:	643b      	str	r3, [r7, #64]	@ 0x40
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 8008ede:	79bb      	ldrb	r3, [r7, #6]
 8008ee0:	3348      	adds	r3, #72	@ 0x48
 8008ee2:	015b      	lsls	r3, r3, #5
 8008ee4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ee6:	4413      	add	r3, r2
 8008ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 8008eea:	79bb      	ldrb	r3, [r7, #6]
 8008eec:	015b      	lsls	r3, r3, #5
 8008eee:	3310      	adds	r3, #16
 8008ef0:	4a5e      	ldr	r2, [pc, #376]	@ (800906c <handle_epin_slave+0x1c0>)
 8008ef2:	4413      	add	r3, r2
 8008ef4:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (diepint_bm.xfer_complete) {
 8008ef6:	783b      	ldrb	r3, [r7, #0]
 8008ef8:	f003 0301 	and.w	r3, r3, #1
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d037      	beq.n	8008f72 <handle_epin_slave+0xc6>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 8008f02:	79bb      	ldrb	r3, [r7, #6]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10a      	bne.n	8008f1e <handle_epin_slave+0x72>
 8008f08:	4b59      	ldr	r3, [pc, #356]	@ (8009070 <handle_epin_slave+0x1c4>)
 8008f0a:	885b      	ldrh	r3, [r3, #2]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d006      	beq.n	8008f1e <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 8008f10:	79b9      	ldrb	r1, [r7, #6]
 8008f12:	79fb      	ldrb	r3, [r7, #7]
 8008f14:	2201      	movs	r2, #1
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7ff f90e 	bl	8008138 <edpt_schedule_packets>
 8008f1c:	e029      	b.n	8008f72 <handle_epin_slave+0xc6>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8008f1e:	79bb      	ldrb	r3, [r7, #6]
 8008f20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008f24:	b2d9      	uxtb	r1, r3
 8008f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f28:	891b      	ldrh	r3, [r3, #8]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	79fb      	ldrb	r3, [r7, #7]
 8008f2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008f32:	460b      	mov	r3, r1
 8008f34:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8008f38:	627a      	str	r2, [r7, #36]	@ 0x24
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f40:	2301      	movs	r3, #1
 8008f42:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  event.rhport = rhport;
 8008f46:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008f4a:	743b      	strb	r3, [r7, #16]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8008f4c:	2307      	movs	r3, #7
 8008f4e:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 8008f50:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008f54:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 8008f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f58:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 8008f5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008f5e:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8008f60:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8008f64:	f107 0310 	add.w	r3, r7, #16
 8008f68:	4611      	mov	r1, r2
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fd ff4e 	bl	8006e0c <dcd_event_handler>
}
 8008f70:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 8008f72:	783b      	ldrb	r3, [r7, #0]
 8008f74:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d070      	beq.n	8009060 <handle_epin_slave+0x1b4>
 8008f7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f80:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8008f84:	79ba      	ldrb	r2, [r7, #6]
 8008f86:	2101      	movs	r1, #1
 8008f88:	fa01 f202 	lsl.w	r2, r1, r2
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d066      	beq.n	8009060 <handle_epin_slave+0x1b4>
    dwc2_ep_tsize_t tsiz = {.value = epin->tsiz};
 8008f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	60fb      	str	r3, [r7, #12]
    const uint16_t remain_packets = tsiz.packet_count;
 8008f98:	89fb      	ldrh	r3, [r7, #14]
 8008f9a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008fa8:	e03f      	b.n	800902a <handle_epin_slave+0x17e>
      tsiz.value = epin->tsiz;
 8008faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	60fb      	str	r3, [r7, #12]
      const uint16_t remain_bytes = (uint16_t) tsiz.xfer_size;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fb6:	86bb      	strh	r3, [r7, #52]	@ 0x34
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fba:	895a      	ldrh	r2, [r3, #10]
 8008fbc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008fbe:	843b      	strh	r3, [r7, #32]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008fc4:	8c3a      	ldrh	r2, [r7, #32]
 8008fc6:	8bfb      	ldrh	r3, [r7, #30]
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	bf28      	it	cs
 8008fcc:	4613      	movcs	r3, r2
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	867b      	strh	r3, [r7, #50]	@ 0x32

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 8008fd2:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8008fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	0099      	lsls	r1, r3, #2
 8008fda:	4b26      	ldr	r3, [pc, #152]	@ (8009074 <handle_epin_slave+0x1c8>)
 8008fdc:	400b      	ands	r3, r1
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d829      	bhi.n	8009036 <handle_epin_slave+0x18a>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 8008fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00d      	beq.n	8009006 <handle_epin_slave+0x15a>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 8008fea:	79bb      	ldrb	r3, [r7, #6]
 8008fec:	3301      	adds	r3, #1
 8008fee:	031b      	lsls	r3, r3, #12
 8008ff0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ff2:	4413      	add	r3, r2
 8008ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 8008ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8008ffc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fc fdee 	bl	8005be0 <tu_fifo_read_n_const_addr_full_words>
 8009004:	e00c      	b.n	8009020 <handle_epin_slave+0x174>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 8009006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800900c:	79b9      	ldrb	r1, [r7, #6]
 800900e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8009010:	f000 fc55 	bl	80098be <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 8009014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800901a:	441a      	add	r2, r3
 800901c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800901e:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 8009020:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009024:	3301      	adds	r3, #1
 8009026:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800902a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800902e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009030:	429a      	cmp	r2, r3
 8009032:	d3ba      	bcc.n	8008faa <handle_epin_slave+0xfe>
 8009034:	e000      	b.n	8009038 <handle_epin_slave+0x18c>
        break;
 8009036:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    tsiz.value = epin->tsiz;
 8009038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	60fb      	str	r3, [r7, #12]
    if (tsiz.xfer_size == 0) {
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10b      	bne.n	8009060 <handle_epin_slave+0x1b4>
      dwc2->diepempmsk &= ~(1 << epnum);
 8009048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800904a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800904e:	79ba      	ldrb	r2, [r7, #6]
 8009050:	2101      	movs	r1, #1
 8009052:	fa01 f202 	lsl.w	r2, r1, r2
 8009056:	43d2      	mvns	r2, r2
 8009058:	401a      	ands	r2, r3
 800905a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800905c:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 8009060:	bf00      	nop
 8009062:	3748      	adds	r7, #72	@ 0x48
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	0800a39c 	.word	0x0800a39c
 800906c:	20000d64 	.word	0x20000d64
 8009070:	20000de4 	.word	0x20000de4
 8009074:	0003fffc 	.word	0x0003fffc

08009078 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 8009078:	b580      	push	{r7, lr}
 800907a:	b08e      	sub	sp, #56	@ 0x38
 800907c:	af00      	add	r7, sp, #0
 800907e:	4603      	mov	r3, r0
 8009080:	460a      	mov	r2, r1
 8009082:	71fb      	strb	r3, [r7, #7]
 8009084:	4613      	mov	r3, r2
 8009086:	71bb      	strb	r3, [r7, #6]
 8009088:	79fb      	ldrb	r3, [r7, #7]
 800908a:	76fb      	strb	r3, [r7, #27]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800908c:	7efb      	ldrb	r3, [r7, #27]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d001      	beq.n	8009096 <handle_ep_irq+0x1e>
    rhport = 0;
 8009092:	2300      	movs	r3, #0
 8009094:	76fb      	strb	r3, [r7, #27]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009096:	7efb      	ldrb	r3, [r7, #27]
 8009098:	4a38      	ldr	r2, [pc, #224]	@ (800917c <handle_ep_irq+0x104>)
 800909a:	011b      	lsls	r3, r3, #4
 800909c:	4413      	add	r3, r2
 800909e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80090a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80090a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a4:	61fb      	str	r3, [r7, #28]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090aa:	617b      	str	r3, [r7, #20]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 80090ac:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 80090ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80090b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b4:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090ba:	613b      	str	r3, [r7, #16]
  return ghwcfg2.num_dev_ep + 1;
 80090bc:	7c7b      	ldrb	r3, [r7, #17]
 80090be:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	3301      	adds	r3, #1
 80090c6:	b2db      	uxtb	r3, r3
  const uint8_t ep_count = dwc2_ep_count(dwc2);
 80090c8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 80090cc:	79bb      	ldrb	r3, [r7, #6]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d101      	bne.n	80090d6 <handle_ep_irq+0x5e>
 80090d2:	2300      	movs	r3, #0
 80090d4:	e000      	b.n	80090d8 <handle_ep_irq+0x60>
 80090d6:	2310      	movs	r3, #16
 80090d8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 80090dc:	79bb      	ldrb	r3, [r7, #6]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	bf14      	ite	ne
 80090e2:	2301      	movne	r3, #1
 80090e4:	2300      	moveq	r3, #0
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	025b      	lsls	r3, r3, #9
 80090ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090f0:	4413      	add	r3, r2
 80090f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 80090f4:	2300      	movs	r3, #0
 80090f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80090fa:	e034      	b.n	8009166 <handle_ep_irq+0xee>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 80090fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fe:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8009102:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8009106:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800910a:	440b      	add	r3, r1
 800910c:	fa22 f303 	lsr.w	r3, r2, r3
 8009110:	f003 0301 	and.w	r3, r3, #1
 8009114:	2b00      	cmp	r3, #0
 8009116:	d021      	beq.n	800915c <handle_ep_irq+0xe4>
      dwc2_dep_t* epout = &ep_base[epnum];
 8009118:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800911c:	015b      	lsls	r3, r3, #5
 800911e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009120:	4413      	add	r3, r2
 8009122:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 8009124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	60fb      	str	r3, [r7, #12]

      epout->intr = intr.value; // Clear interrupt
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912e:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 8009130:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009134:	2b00      	cmp	r3, #0
 8009136:	d111      	bne.n	800915c <handle_ep_irq+0xe4>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 8009138:	79bb      	ldrb	r3, [r7, #6]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d107      	bne.n	800914e <handle_ep_irq+0xd6>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 800913e:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8009142:	79fb      	ldrb	r3, [r7, #7]
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff feb0 	bl	8008eac <handle_epin_slave>
 800914c:	e006      	b.n	800915c <handle_ep_irq+0xe4>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 800914e:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8009152:	79fb      	ldrb	r3, [r7, #7]
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	4618      	mov	r0, r3
 8009158:	f7ff fe28 	bl	8008dac <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800915c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009160:	3301      	adds	r3, #1
 8009162:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009166:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800916a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800916e:	429a      	cmp	r2, r3
 8009170:	d3c4      	bcc.n	80090fc <handle_ep_irq+0x84>
        }
        #endif
      }
    }
  }
}
 8009172:	bf00      	nop
 8009174:	bf00      	nop
 8009176:	3738      	adds	r7, #56	@ 0x38
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	0800a39c 	.word	0x0800a39c

08009180 <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 8009180:	b580      	push	{r7, lr}
 8009182:	b098      	sub	sp, #96	@ 0x60
 8009184:	af00      	add	r7, sp, #0
 8009186:	4603      	mov	r3, r0
 8009188:	71fb      	strb	r3, [r7, #7]
 800918a:	79fb      	ldrb	r3, [r7, #7]
 800918c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009190:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <dcd_int_handler+0x1e>
    rhport = 0;
 8009198:	2300      	movs	r3, #0
 800919a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800919e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80091a2:	4a80      	ldr	r2, [pc, #512]	@ (80093a4 <dcd_int_handler+0x224>)
 80091a4:	011b      	lsls	r3, r3, #4
 80091a6:	4413      	add	r3, r2
 80091a8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80091aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  const uint32_t gintmask = dwc2->gintmsk;
 80091ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091ae:	699b      	ldr	r3, [r3, #24]
 80091b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 80091b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091b4:	695b      	ldr	r3, [r3, #20]
 80091b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091b8:	4013      	ands	r3, r2
 80091ba:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 80091bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00d      	beq.n	80091e2 <dcd_int_handler+0x62>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 80091c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80091cc:	615a      	str	r2, [r3, #20]

    usbd_spin_lock(true);
 80091ce:	2001      	movs	r0, #1
 80091d0:	f7fe f81a 	bl	8007208 <usbd_spin_lock>
    handle_bus_reset(rhport);
 80091d4:	79fb      	ldrb	r3, [r7, #7]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7ff fc0e 	bl	80089f8 <handle_bus_reset>
    usbd_spin_unlock(true);
 80091dc:	2001      	movs	r0, #1
 80091de:	f7fe f82d 	bl	800723c <usbd_spin_unlock>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 80091e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d007      	beq.n	80091fc <dcd_int_handler+0x7c>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 80091ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80091f2:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 80091f4:	79fb      	ldrb	r3, [r7, #7]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7ff fcea 	bl	8008bd0 <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 80091fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009202:	2b00      	cmp	r3, #0
 8009204:	d01d      	beq.n	8009242 <dcd_int_handler+0xc2>
    dwc2->gintsts = GINTSTS_USBSUSP;
 8009206:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009208:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800920c:	615a      	str	r2, [r3, #20]
 800920e:	79fb      	ldrb	r3, [r7, #7]
 8009210:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8009214:	2304      	movs	r3, #4
 8009216:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 800921a:	2301      	movs	r3, #1
 800921c:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 8009220:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8009224:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 8009228:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800922c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 8009230:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8009234:	f107 0320 	add.w	r3, r7, #32
 8009238:	4611      	mov	r1, r2
 800923a:	4618      	mov	r0, r3
 800923c:	f7fd fde6 	bl	8006e0c <dcd_event_handler>
}
 8009240:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 8009242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009244:	2b00      	cmp	r3, #0
 8009246:	da1d      	bge.n	8009284 <dcd_int_handler+0x104>
    dwc2->gintsts = GINTSTS_WKUINT;
 8009248:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800924a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800924e:	615a      	str	r2, [r3, #20]
 8009250:	79fb      	ldrb	r3, [r7, #7]
 8009252:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009256:	2305      	movs	r3, #5
 8009258:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800925c:	2301      	movs	r3, #1
 800925e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 8009262:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009266:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 800926a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800926e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 8009272:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009276:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800927a:	4611      	mov	r1, r2
 800927c:	4618      	mov	r0, r3
 800927e:	f7fd fdc5 	bl	8006e0c <dcd_event_handler>
}
 8009282:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 8009284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009286:	f003 0304 	and.w	r3, r3, #4
 800928a:	2b00      	cmp	r3, #0
 800928c:	d022      	beq.n	80092d4 <dcd_int_handler+0x154>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 800928e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 8009294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009296:	f003 0304 	and.w	r3, r3, #4
 800929a:	2b00      	cmp	r3, #0
 800929c:	d017      	beq.n	80092ce <dcd_int_handler+0x14e>
 800929e:	79fb      	ldrb	r3, [r7, #7]
 80092a0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 80092a4:	2302      	movs	r3, #2
 80092a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092aa:	2301      	movs	r3, #1
 80092ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 80092b0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80092b4:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 80092b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80092ba:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 80092bc:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 80092c0:	f107 0314 	add.w	r3, r7, #20
 80092c4:	4611      	mov	r1, r2
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fd fda0 	bl	8006e0c <dcd_event_handler>
}
 80092cc:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 80092ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80092d2:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 80092d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092d6:	f003 0308 	and.w	r3, r3, #8
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d02e      	beq.n	800933c <dcd_int_handler+0x1bc>
    dwc2->gintsts = GINTSTS_SOF;
 80092de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092e0:	2208      	movs	r2, #8
 80092e2:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 80092e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092e6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80092ea:	0a1b      	lsrs	r3, r3, #8
 80092ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80092f0:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 80092f2:	4b2d      	ldr	r3, [pc, #180]	@ (80093a8 <dcd_int_handler+0x228>)
 80092f4:	79db      	ldrb	r3, [r3, #7]
 80092f6:	f083 0301 	eor.w	r3, r3, #1
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d005      	beq.n	800930c <dcd_int_handler+0x18c>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 8009300:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	f023 0208 	bic.w	r2, r3, #8
 8009308:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800930a:	619a      	str	r2, [r3, #24]
 800930c:	79fb      	ldrb	r3, [r7, #7]
 800930e:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8009312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009314:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009316:	2301      	movs	r3, #1
 8009318:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800931c:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8009320:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 8009322:	2303      	movs	r3, #3
 8009324:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 8009326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009328:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 800932a:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800932e:	f107 0308 	add.w	r3, r7, #8
 8009332:	4611      	mov	r1, r2
 8009334:	4618      	mov	r0, r3
 8009336:	f7fd fd69 	bl	8006e0c <dcd_event_handler>
}
 800933a:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 800933c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800933e:	f003 0310 	and.w	r3, r3, #16
 8009342:	2b00      	cmp	r3, #0
 8009344:	d015      	beq.n	8009372 <dcd_int_handler+0x1f2>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 8009346:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009348:	699b      	ldr	r3, [r3, #24]
 800934a:	f023 0210 	bic.w	r2, r3, #16
 800934e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009350:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 8009352:	79fb      	ldrb	r3, [r7, #7]
 8009354:	4618      	mov	r0, r3
 8009356:	f7ff fc81 	bl	8008c5c <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 800935a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800935c:	695b      	ldr	r3, [r3, #20]
 800935e:	f003 0310 	and.w	r3, r3, #16
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1f5      	bne.n	8009352 <dcd_int_handler+0x1d2>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 8009366:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	f043 0210 	orr.w	r2, r3, #16
 800936e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009370:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 8009372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009374:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009378:	2b00      	cmp	r3, #0
 800937a:	d004      	beq.n	8009386 <dcd_int_handler+0x206>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 800937c:	79fb      	ldrb	r3, [r7, #7]
 800937e:	2100      	movs	r1, #0
 8009380:	4618      	mov	r0, r3
 8009382:	f7ff fe79 	bl	8009078 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 8009386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009388:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800938c:	2b00      	cmp	r3, #0
 800938e:	d004      	beq.n	800939a <dcd_int_handler+0x21a>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 8009390:	79fb      	ldrb	r3, [r7, #7]
 8009392:	2101      	movs	r1, #1
 8009394:	4618      	mov	r0, r3
 8009396:	f7ff fe6f 	bl	8009078 <handle_ep_irq>
  }
}
 800939a:	bf00      	nop
 800939c:	3760      	adds	r7, #96	@ 0x60
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	0800a39c 	.word	0x0800a39c
 80093a8:	20000de4 	.word	0x20000de4

080093ac <dwc2_phy_init>:

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	460b      	mov	r3, r1
 80093b6:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 80093b8:	78fb      	ldrb	r3, [r7, #3]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d106      	bne.n	80093cc <dwc2_phy_init+0x20>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	639a      	str	r2, [r3, #56]	@ 0x38
      #else

      #endif
    }
  }
}
 80093ca:	e005      	b.n	80093d8 <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	460b      	mov	r3, r1
 80093ee:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 80093f0:	78fb      	ldrb	r3, [r7, #3]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d152      	bne.n	800949c <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 80093f6:	4b2c      	ldr	r3, [pc, #176]	@ (80094a8 <dwc2_phy_update+0xc4>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a2c      	ldr	r2, [pc, #176]	@ (80094ac <dwc2_phy_update+0xc8>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d302      	bcc.n	8009406 <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 8009400:	2306      	movs	r3, #6
 8009402:	60fb      	str	r3, [r7, #12]
 8009404:	e041      	b.n	800948a <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 8009406:	4b28      	ldr	r3, [pc, #160]	@ (80094a8 <dwc2_phy_update+0xc4>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a29      	ldr	r2, [pc, #164]	@ (80094b0 <dwc2_phy_update+0xcc>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d902      	bls.n	8009416 <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 8009410:	2307      	movs	r3, #7
 8009412:	60fb      	str	r3, [r7, #12]
 8009414:	e039      	b.n	800948a <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 8009416:	4b24      	ldr	r3, [pc, #144]	@ (80094a8 <dwc2_phy_update+0xc4>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a26      	ldr	r2, [pc, #152]	@ (80094b4 <dwc2_phy_update+0xd0>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d302      	bcc.n	8009426 <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 8009420:	2308      	movs	r3, #8
 8009422:	60fb      	str	r3, [r7, #12]
 8009424:	e031      	b.n	800948a <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 8009426:	4b20      	ldr	r3, [pc, #128]	@ (80094a8 <dwc2_phy_update+0xc4>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a23      	ldr	r2, [pc, #140]	@ (80094b8 <dwc2_phy_update+0xd4>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d902      	bls.n	8009436 <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 8009430:	2309      	movs	r3, #9
 8009432:	60fb      	str	r3, [r7, #12]
 8009434:	e029      	b.n	800948a <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 8009436:	4b1c      	ldr	r3, [pc, #112]	@ (80094a8 <dwc2_phy_update+0xc4>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a20      	ldr	r2, [pc, #128]	@ (80094bc <dwc2_phy_update+0xd8>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d902      	bls.n	8009446 <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 8009440:	230a      	movs	r3, #10
 8009442:	60fb      	str	r3, [r7, #12]
 8009444:	e021      	b.n	800948a <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 8009446:	4b18      	ldr	r3, [pc, #96]	@ (80094a8 <dwc2_phy_update+0xc4>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a1d      	ldr	r2, [pc, #116]	@ (80094c0 <dwc2_phy_update+0xdc>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d902      	bls.n	8009456 <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 8009450:	230b      	movs	r3, #11
 8009452:	60fb      	str	r3, [r7, #12]
 8009454:	e019      	b.n	800948a <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 8009456:	4b14      	ldr	r3, [pc, #80]	@ (80094a8 <dwc2_phy_update+0xc4>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a1a      	ldr	r2, [pc, #104]	@ (80094c4 <dwc2_phy_update+0xe0>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d302      	bcc.n	8009466 <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 8009460:	230c      	movs	r3, #12
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	e011      	b.n	800948a <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 8009466:	4b10      	ldr	r3, [pc, #64]	@ (80094a8 <dwc2_phy_update+0xc4>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a17      	ldr	r2, [pc, #92]	@ (80094c8 <dwc2_phy_update+0xe4>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d302      	bcc.n	8009476 <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 8009470:	230d      	movs	r3, #13
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	e009      	b.n	800948a <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 8009476:	4b0c      	ldr	r3, [pc, #48]	@ (80094a8 <dwc2_phy_update+0xc4>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a14      	ldr	r2, [pc, #80]	@ (80094cc <dwc2_phy_update+0xe8>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d302      	bcc.n	8009486 <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 8009480:	230e      	movs	r3, #14
 8009482:	60fb      	str	r3, [r7, #12]
 8009484:	e001      	b.n	800948a <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 8009486:	230f      	movs	r3, #15
 8009488:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	029b      	lsls	r3, r3, #10
 8009496:	431a      	orrs	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	60da      	str	r2, [r3, #12]
  }
}
 800949c:	bf00      	nop
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr
 80094a8:	20000048 	.word	0x20000048
 80094ac:	01e84800 	.word	0x01e84800
 80094b0:	01a39ddf 	.word	0x01a39ddf
 80094b4:	016e3600 	.word	0x016e3600
 80094b8:	014ca43f 	.word	0x014ca43f
 80094bc:	01312cff 	.word	0x01312cff
 80094c0:	011a499f 	.word	0x011a499f
 80094c4:	01067380 	.word	0x01067380
 80094c8:	00f42400 	.word	0x00f42400
 80094cc:	00e4e1c0 	.word	0x00e4e1c0

080094d0 <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	f043 0201 	orr.w	r2, r3, #1
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	f244 2209 	movw	r2, #16905	@ 0x4209
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d807      	bhi.n	8009502 <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 80094f2:	bf00      	nop
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	f003 0301 	and.w	r3, r3, #1
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1f9      	bne.n	80094f4 <reset_core+0x24>
 8009500:	e010      	b.n	8009524 <reset_core+0x54>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 8009502:	bf00      	nop
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d0f9      	beq.n	8009504 <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009518:	f023 0301 	bic.w	r3, r3, #1
 800951c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 8009524:	bf00      	nop
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	2b00      	cmp	r3, #0
 800952c:	dafb      	bge.n	8009526 <reset_core+0x56>
}
 800952e:	bf00      	nop
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009550:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 8009558:	2100      	movs	r1, #0
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7ff ff26 	bl	80093ac <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f7ff ffb5 	bl	80094d0 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800956c:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8009574:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800957c:	2100      	movs	r1, #0
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7ff ff30 	bl	80093e4 <dwc2_phy_update>
}
 8009584:	bf00      	nop
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	617b      	str	r3, [r7, #20]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800959e:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg4_t ghwcfg4 = {.value = dwc2->ghwcfg4};
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095a4:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095ac:	617b      	str	r3, [r7, #20]

  if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 80095ae:	7c3b      	ldrb	r3, [r7, #16]
 80095b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	2b80      	cmp	r3, #128	@ 0x80
 80095b8:	d114      	bne.n	80095e4 <phy_hs_init+0x58>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	f043 0310 	orr.w	r3, r3, #16
 80095c0:	617b      	str	r3, [r7, #20]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f023 0308 	bic.w	r3, r3, #8
 80095c8:	617b      	str	r3, [r7, #20]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095d0:	617b      	str	r3, [r7, #20]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80095d8:	617b      	str	r3, [r7, #20]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 80095e0:	617b      	str	r3, [r7, #20]
 80095e2:	e012      	b.n	800960a <phy_hs_init+0x7e>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	f023 0310 	bic.w	r3, r3, #16
 80095ea:	617b      	str	r3, [r7, #20]

    // Set 16-bit interface if supported
    if (ghwcfg4.phy_data_width) {
 80095ec:	7b7b      	ldrb	r3, [r7, #13]
 80095ee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d004      	beq.n	8009602 <phy_hs_init+0x76>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	f043 0308 	orr.w	r3, r3, #8
 80095fe:	617b      	str	r3, [r7, #20]
 8009600:	e003      	b.n	800960a <phy_hs_init+0x7e>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	f023 0308 	bic.w	r3, r3, #8
 8009608:	617b      	str	r3, [r7, #20]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, ghwcfg2.hs_phy_type);
 8009610:	7c3b      	ldrb	r3, [r7, #16]
 8009612:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009616:	b2db      	uxtb	r3, r3
 8009618:	4619      	mov	r1, r3
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7ff fec6 	bl	80093ac <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7ff ff55 	bl	80094d0 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800962c:	617b      	str	r3, [r7, #20]
  gusbcfg |= (ghwcfg4.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 800962e:	7b7b      	ldrb	r3, [r7, #13]
 8009630:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009634:	b2db      	uxtb	r3, r3
 8009636:	2b00      	cmp	r3, #0
 8009638:	d002      	beq.n	8009640 <phy_hs_init+0xb4>
 800963a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800963e:	e001      	b.n	8009644 <phy_hs_init+0xb8>
 8009640:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8009644:	697a      	ldr	r2, [r7, #20]
 8009646:	4313      	orrs	r3, r2
 8009648:	617b      	str	r3, [r7, #20]
  dwc2->gusbcfg = gusbcfg;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, ghwcfg2.hs_phy_type);
 8009650:	7c3b      	ldrb	r3, [r7, #16]
 8009652:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009656:	b2db      	uxtb	r3, r3
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7ff fec2 	bl	80093e4 <dwc2_phy_update>
}
 8009660:	bf00      	nop
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009674:	0c1b      	lsrs	r3, r3, #16
 8009676:	041b      	lsls	r3, r3, #16
 8009678:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	4a0e      	ldr	r2, [pc, #56]	@ (80096b8 <check_dwc2+0x50>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d012      	beq.n	80096a8 <check_dwc2+0x40>
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	4a0d      	ldr	r2, [pc, #52]	@ (80096bc <check_dwc2+0x54>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d00e      	beq.n	80096a8 <check_dwc2+0x40>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	4a0c      	ldr	r2, [pc, #48]	@ (80096c0 <check_dwc2+0x58>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d00a      	beq.n	80096a8 <check_dwc2+0x40>
 8009692:	4b0c      	ldr	r3, [pc, #48]	@ (80096c4 <check_dwc2+0x5c>)
 8009694:	60bb      	str	r3, [r7, #8]
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d000      	beq.n	80096a4 <check_dwc2+0x3c>
 80096a2:	be00      	bkpt	0x0000
 80096a4:	2300      	movs	r3, #0
 80096a6:	e000      	b.n	80096aa <check_dwc2+0x42>
#endif

  return true;
 80096a8:	2301      	movs	r3, #1
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3714      	adds	r7, #20
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	4f540000 	.word	0x4f540000
 80096bc:	55310000 	.word	0x55310000
 80096c0:	55320000 	.word	0x55320000
 80096c4:	e000edf0 	.word	0xe000edf0

080096c8 <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	460b      	mov	r3, r1
 80096d2:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;
#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 80096d4:	78fb      	ldrb	r3, [r7, #3]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d101      	bne.n	80096de <dwc2_core_is_highspeed+0x16>
    return false;
 80096da:	2300      	movs	r3, #0
 80096dc:	e00b      	b.n	80096f6 <dwc2_core_is_highspeed+0x2e>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096e2:	60fb      	str	r3, [r7, #12]
  return ghwcfg2.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 80096e4:	7b3b      	ldrb	r3, [r7, #12]
 80096e6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	bf14      	ite	ne
 80096f0:	2301      	movne	r3, #1
 80096f2:	2300      	moveq	r3, #0
 80096f4:	b2db      	uxtb	r3, r3
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3714      	adds	r7, #20
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
	...

08009704 <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 8009704:	b580      	push	{r7, lr}
 8009706:	b088      	sub	sp, #32
 8009708:	af00      	add	r7, sp, #0
 800970a:	4603      	mov	r3, r0
 800970c:	71fb      	strb	r3, [r7, #7]
 800970e:	460b      	mov	r3, r1
 8009710:	71bb      	strb	r3, [r7, #6]
 8009712:	4613      	mov	r3, r2
 8009714:	717b      	strb	r3, [r7, #5]
 8009716:	79fb      	ldrb	r3, [r7, #7]
 8009718:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800971a:	7dfb      	ldrb	r3, [r7, #23]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <dwc2_core_init+0x20>
    rhport = 0;
 8009720:	2300      	movs	r3, #0
 8009722:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009724:	7dfb      	ldrb	r3, [r7, #23]
 8009726:	4a3b      	ldr	r2, [pc, #236]	@ (8009814 <dwc2_core_init+0x110>)
 8009728:	011b      	lsls	r3, r3, #4
 800972a:	4413      	add	r3, r2
 800972c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800972e:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 8009730:	69f8      	ldr	r0, [r7, #28]
 8009732:	f7ff ff99 	bl	8009668 <check_dwc2>
 8009736:	4603      	mov	r3, r0
 8009738:	f083 0301 	eor.w	r3, r3, #1
 800973c:	b2db      	uxtb	r3, r3
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00a      	beq.n	8009758 <dwc2_core_init+0x54>
 8009742:	4b35      	ldr	r3, [pc, #212]	@ (8009818 <dwc2_core_init+0x114>)
 8009744:	61bb      	str	r3, [r7, #24]
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 0301 	and.w	r3, r3, #1
 800974e:	2b00      	cmp	r3, #0
 8009750:	d000      	beq.n	8009754 <dwc2_core_init+0x50>
 8009752:	be00      	bkpt	0x0000
 8009754:	2300      	movs	r3, #0
 8009756:	e058      	b.n	800980a <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	f023 0201 	bic.w	r2, r3, #1
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 8009764:	79bb      	ldrb	r3, [r7, #6]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 800976a:	69f8      	ldr	r0, [r7, #28]
 800976c:	f7ff ff0e 	bl	800958c <phy_hs_init>
 8009770:	e002      	b.n	8009778 <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 8009772:	69f8      	ldr	r0, [r7, #28]
 8009774:	f7ff fee2 	bl	800953c <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	f043 0207 	orr.w	r2, r3, #7
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800978a:	f023 020f 	bic.w	r2, r3, #15
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	60fb      	str	r3, [r7, #12]
 8009798:	2310      	movs	r3, #16
 800979a:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800979c:	7afb      	ldrb	r3, [r7, #11]
 800979e:	019b      	lsls	r3, r3, #6
 80097a0:	f043 0220 	orr.w	r2, r3, #32
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 80097a8:	bf00      	nop
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	f003 0320 	and.w	r3, r3, #32
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1f9      	bne.n	80097aa <dwc2_core_init+0xa6>
}
 80097b6:	bf00      	nop
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	2210      	movs	r2, #16
 80097c0:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 80097c2:	bf00      	nop
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	691b      	ldr	r3, [r3, #16]
 80097c8:	f003 0310 	and.w	r3, r3, #16
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1f9      	bne.n	80097c4 <dwc2_core_init+0xc0>
}
 80097d0:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	f04f 32ff 	mov.w	r2, #4294967295
 80097d8:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	f04f 32ff 	mov.w	r2, #4294967295
 80097e0:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	2200      	movs	r2, #0
 80097e6:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 80097e8:	797b      	ldrb	r3, [r7, #5]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d006      	beq.n	80097fc <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	609a      	str	r2, [r3, #8]
 80097fa:	e005      	b.n	8009808 <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	f043 0210 	orr.w	r2, r3, #16
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	619a      	str	r2, [r3, #24]
  }

  return true;
 8009808:	2301      	movs	r3, #1
}
 800980a:	4618      	mov	r0, r3
 800980c:	3720      	adds	r7, #32
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	0800a3ac 	.word	0x0800a3ac
 8009818:	e000edf0 	.word	0xe000edf0

0800981c <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 800981c:	b480      	push	{r7}
 800981e:	b08f      	sub	sp, #60	@ 0x3c
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	4613      	mov	r3, r2
 8009828:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009830:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 8009832:	88fb      	ldrh	r3, [r7, #6]
 8009834:	089b      	lsrs	r3, r3, #2
 8009836:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 8009838:	e00b      	b.n	8009852 <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 800983a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	627a      	str	r2, [r7, #36]	@ 0x24
 8009842:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 8009844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009846:	6a3a      	ldr	r2, [r7, #32]
 8009848:	601a      	str	r2, [r3, #0]
}
 800984a:	bf00      	nop
    dst += 4;
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	3304      	adds	r3, #4
 8009850:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 8009852:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009854:	1e5a      	subs	r2, r3, #1
 8009856:	86fa      	strh	r2, [r7, #54]	@ 0x36
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1ee      	bne.n	800983a <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 800985c:	88fb      	ldrh	r3, [r7, #6]
 800985e:	b2db      	uxtb	r3, r3
 8009860:	f003 0303 	and.w	r3, r3, #3
 8009864:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 8009868:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800986c:	2b00      	cmp	r3, #0
 800986e:	d020      	beq.n	80098b2 <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 8009870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009878:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 8009882:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009886:	2b01      	cmp	r3, #1
 8009888:	d907      	bls.n	800989a <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	3301      	adds	r3, #1
 800988e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009890:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 8009892:	69ba      	ldr	r2, [r7, #24]
 8009894:	0a12      	lsrs	r2, r2, #8
 8009896:	b2d2      	uxtb	r2, r2
 8009898:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 800989a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800989e:	2b02      	cmp	r3, #2
 80098a0:	d907      	bls.n	80098b2 <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	3302      	adds	r3, #2
 80098a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098a8:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	0c12      	lsrs	r2, r2, #16
 80098ae:	b2d2      	uxtb	r2, r2
 80098b0:	701a      	strb	r2, [r3, #0]
    }
  }
}
 80098b2:	bf00      	nop
 80098b4:	373c      	adds	r7, #60	@ 0x3c
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 80098be:	b480      	push	{r7}
 80098c0:	b08b      	sub	sp, #44	@ 0x2c
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	60f8      	str	r0, [r7, #12]
 80098c6:	607a      	str	r2, [r7, #4]
 80098c8:	461a      	mov	r2, r3
 80098ca:	460b      	mov	r3, r1
 80098cc:	72fb      	strb	r3, [r7, #11]
 80098ce:	4613      	mov	r3, r2
 80098d0:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 80098d2:	7afb      	ldrb	r3, [r7, #11]
 80098d4:	3301      	adds	r3, #1
 80098d6:	031b      	lsls	r3, r3, #12
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	4413      	add	r3, r2
 80098dc:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 80098de:	893b      	ldrh	r3, [r7, #8]
 80098e0:	089b      	lsrs	r3, r3, #2
 80098e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 80098e4:	e008      	b.n	80098f8 <dfifo_write_packet+0x3a>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	601a      	str	r2, [r3, #0]
    src += 4;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	3304      	adds	r3, #4
 80098f6:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 80098f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80098fa:	1e5a      	subs	r2, r3, #1
 80098fc:	84fa      	strh	r2, [r7, #38]	@ 0x26
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1f1      	bne.n	80098e6 <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 8009902:	893b      	ldrh	r3, [r7, #8]
 8009904:	b2db      	uxtb	r3, r3
 8009906:	f003 0303 	and.w	r3, r3, #3
 800990a:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 800990c:	7efb      	ldrb	r3, [r7, #27]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d019      	beq.n	8009946 <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 8009918:	7efb      	ldrb	r3, [r7, #27]
 800991a:	2b01      	cmp	r3, #1
 800991c:	d906      	bls.n	800992c <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	3301      	adds	r3, #1
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	021b      	lsls	r3, r3, #8
 8009926:	6a3a      	ldr	r2, [r7, #32]
 8009928:	4313      	orrs	r3, r2
 800992a:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 800992c:	7efb      	ldrb	r3, [r7, #27]
 800992e:	2b02      	cmp	r3, #2
 8009930:	d906      	bls.n	8009940 <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	3302      	adds	r3, #2
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	041b      	lsls	r3, r3, #16
 800993a:	6a3a      	ldr	r2, [r7, #32]
 800993c:	4313      	orrs	r3, r2
 800993e:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	6a3a      	ldr	r2, [r7, #32]
 8009944:	601a      	str	r2, [r3, #0]
  }
}
 8009946:	bf00      	nop
 8009948:	372c      	adds	r7, #44	@ 0x2c
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr

08009952 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 8009952:	b480      	push	{r7}
 8009954:	b085      	sub	sp, #20
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009964:	b2db      	uxtb	r3, r3
 8009966:	2b00      	cmp	r3, #0
 8009968:	d106      	bne.n	8009978 <tu_edpt_claim+0x26>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009972:	b2db      	uxtb	r3, r3
 8009974:	2b00      	cmp	r3, #0
 8009976:	d001      	beq.n	800997c <tu_edpt_claim+0x2a>
 8009978:	2300      	movs	r3, #0
 800997a:	e01e      	b.n	80099ba <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009984:	b2db      	uxtb	r3, r3
 8009986:	2b00      	cmp	r3, #0
 8009988:	d108      	bne.n	800999c <tu_edpt_claim+0x4a>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009992:	b2db      	uxtb	r3, r3
 8009994:	2b00      	cmp	r3, #0
 8009996:	d101      	bne.n	800999c <tu_edpt_claim+0x4a>
 8009998:	2301      	movs	r3, #1
 800999a:	e000      	b.n	800999e <tu_edpt_claim+0x4c>
 800999c:	2300      	movs	r3, #0
 800999e:	73fb      	strb	r3, [r7, #15]
 80099a0:	7bfb      	ldrb	r3, [r7, #15]
 80099a2:	f003 0301 	and.w	r3, r3, #1
 80099a6:	73fb      	strb	r3, [r7, #15]
  if (available) {
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d004      	beq.n	80099b8 <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	7813      	ldrb	r3, [r2, #0]
 80099b2:	f043 0304 	orr.w	r3, r3, #4
 80099b6:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr

080099c6 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 80099c6:	b480      	push	{r7}
 80099c8:	b085      	sub	sp, #20
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
 80099ce:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d108      	bne.n	80099f0 <tu_edpt_release+0x2a>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d101      	bne.n	80099f0 <tu_edpt_release+0x2a>
 80099ec:	2301      	movs	r3, #1
 80099ee:	e000      	b.n	80099f2 <tu_edpt_release+0x2c>
 80099f0:	2300      	movs	r3, #0
 80099f2:	73fb      	strb	r3, [r7, #15]
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
 80099f6:	f003 0301 	and.w	r3, r3, #1
 80099fa:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 80099fc:	7bfb      	ldrb	r3, [r7, #15]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d004      	beq.n	8009a0c <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	7813      	ldrb	r3, [r2, #0]
 8009a06:	f023 0304 	bic.w	r3, r3, #4
 8009a0a:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3714      	adds	r7, #20
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr
	...

08009a1c <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 8009a1c:	b480      	push	{r7}
 8009a1e:	b08b      	sub	sp, #44	@ 0x2c
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	70fb      	strb	r3, [r7, #3]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	70bb      	strb	r3, [r7, #2]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	889b      	ldrh	r3, [r3, #4]
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a3a:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 8009a3c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	78db      	ldrb	r3, [r3, #3]
 8009a42:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b03      	cmp	r3, #3
 8009a4a:	d059      	beq.n	8009b00 <tu_edpt_validate+0xe4>
 8009a4c:	2b03      	cmp	r3, #3
 8009a4e:	dc6e      	bgt.n	8009b2e <tu_edpt_validate+0x112>
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d002      	beq.n	8009a5a <tu_edpt_validate+0x3e>
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	d018      	beq.n	8009a8a <tu_edpt_validate+0x6e>
 8009a58:	e069      	b.n	8009b2e <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8009a5a:	78fb      	ldrb	r3, [r7, #3]
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d102      	bne.n	8009a66 <tu_edpt_validate+0x4a>
 8009a60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a64:	e001      	b.n	8009a6a <tu_edpt_validate+0x4e>
 8009a66:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8009a6a:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 8009a6c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009a6e:	8a7b      	ldrh	r3, [r7, #18]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d95e      	bls.n	8009b32 <tu_edpt_validate+0x116>
 8009a74:	4b35      	ldr	r3, [pc, #212]	@ (8009b4c <tu_edpt_validate+0x130>)
 8009a76:	60fb      	str	r3, [r7, #12]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 0301 	and.w	r3, r3, #1
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d000      	beq.n	8009a86 <tu_edpt_validate+0x6a>
 8009a84:	be00      	bkpt	0x0000
 8009a86:	2300      	movs	r3, #0
 8009a88:	e059      	b.n	8009b3e <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 8009a8a:	78fb      	ldrb	r3, [r7, #3]
 8009a8c:	2b02      	cmp	r3, #2
 8009a8e:	d10e      	bne.n	8009aae <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8009a90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009a92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a96:	d04e      	beq.n	8009b36 <tu_edpt_validate+0x11a>
 8009a98:	4b2c      	ldr	r3, [pc, #176]	@ (8009b4c <tu_edpt_validate+0x130>)
 8009a9a:	617b      	str	r3, [r7, #20]
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 0301 	and.w	r3, r3, #1
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d000      	beq.n	8009aaa <tu_edpt_validate+0x8e>
 8009aa8:	be00      	bkpt	0x0000
 8009aaa:	2300      	movs	r3, #0
 8009aac:	e047      	b.n	8009b3e <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 8009aae:	78bb      	ldrb	r3, [r7, #2]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d00e      	beq.n	8009ad2 <tu_edpt_validate+0xb6>
 8009ab4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009ab6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009aba:	d10a      	bne.n	8009ad2 <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ac8:	711a      	strb	r2, [r3, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 8009ace:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 8009ad0:	e031      	b.n	8009b36 <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 8009ad2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009ad4:	2b08      	cmp	r3, #8
 8009ad6:	d02e      	beq.n	8009b36 <tu_edpt_validate+0x11a>
 8009ad8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009ada:	2b10      	cmp	r3, #16
 8009adc:	d02b      	beq.n	8009b36 <tu_edpt_validate+0x11a>
 8009ade:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009ae0:	2b20      	cmp	r3, #32
 8009ae2:	d028      	beq.n	8009b36 <tu_edpt_validate+0x11a>
 8009ae4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009ae6:	2b40      	cmp	r3, #64	@ 0x40
 8009ae8:	d025      	beq.n	8009b36 <tu_edpt_validate+0x11a>
 8009aea:	4b18      	ldr	r3, [pc, #96]	@ (8009b4c <tu_edpt_validate+0x130>)
 8009aec:	61bb      	str	r3, [r7, #24]
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f003 0301 	and.w	r3, r3, #1
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d000      	beq.n	8009afc <tu_edpt_validate+0xe0>
 8009afa:	be00      	bkpt	0x0000
 8009afc:	2300      	movs	r3, #0
 8009afe:	e01e      	b.n	8009b3e <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8009b00:	78fb      	ldrb	r3, [r7, #3]
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d102      	bne.n	8009b0c <tu_edpt_validate+0xf0>
 8009b06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b0a:	e000      	b.n	8009b0e <tu_edpt_validate+0xf2>
 8009b0c:	2340      	movs	r3, #64	@ 0x40
 8009b0e:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 8009b10:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009b12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d910      	bls.n	8009b3a <tu_edpt_validate+0x11e>
 8009b18:	4b0c      	ldr	r3, [pc, #48]	@ (8009b4c <tu_edpt_validate+0x130>)
 8009b1a:	623b      	str	r3, [r7, #32]
 8009b1c:	6a3b      	ldr	r3, [r7, #32]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f003 0301 	and.w	r3, r3, #1
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d000      	beq.n	8009b2a <tu_edpt_validate+0x10e>
 8009b28:	be00      	bkpt	0x0000
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	e007      	b.n	8009b3e <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	e005      	b.n	8009b3e <tu_edpt_validate+0x122>
      break;
 8009b32:	bf00      	nop
 8009b34:	e002      	b.n	8009b3c <tu_edpt_validate+0x120>
      break;
 8009b36:	bf00      	nop
 8009b38:	e000      	b.n	8009b3c <tu_edpt_validate+0x120>
      break;
 8009b3a:	bf00      	nop
  }

  return true;
 8009b3c:	2301      	movs	r3, #1
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	372c      	adds	r7, #44	@ 0x2c
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr
 8009b4a:	bf00      	nop
 8009b4c:	e000edf0 	.word	0xe000edf0

08009b50 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 8009b50:	b480      	push	{r7}
 8009b52:	b08d      	sub	sp, #52	@ 0x34
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	4611      	mov	r1, r2
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	460b      	mov	r3, r1
 8009b60:	80fb      	strh	r3, [r7, #6]
 8009b62:	4613      	mov	r3, r2
 8009b64:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 8009b6a:	88fb      	ldrh	r3, [r7, #6]
 8009b6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b6e:	4413      	add	r3, r2
 8009b70:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 8009b72:	e027      	b.n	8009bc4 <tu_edpt_bind_driver+0x74>
 8009b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b76:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8009b78:	6a3b      	ldr	r3, [r7, #32]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 8009b7e:	2b05      	cmp	r3, #5
 8009b80:	d116      	bne.n	8009bb0 <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8009b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b84:	789b      	ldrb	r3, [r3, #2]
 8009b86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b8e:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009b90:	7fbb      	ldrb	r3, [r7, #30]
 8009b92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b96:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8009b98:	005b      	lsls	r3, r3, #1
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009ba2:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009ba4:	7ffa      	ldrb	r2, [r7, #31]
 8009ba6:	09d2      	lsrs	r2, r2, #7
 8009ba8:	b2d2      	uxtb	r2, r2
 8009baa:	4611      	mov	r1, r2
 8009bac:	797a      	ldrb	r2, [r7, #5]
 8009bae:	545a      	strb	r2, [r3, r1]
 8009bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb2:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 8009bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 8009bc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d3d3      	bcc.n	8009b74 <tu_edpt_bind_driver+0x24>
  }
}
 8009bcc:	bf00      	nop
 8009bce:	bf00      	nop
 8009bd0:	3734      	adds	r7, #52	@ 0x34
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr

08009bda <tu_edpt_stream_init>:
//--------------------------------------------------------------------+
// Endpoint Stream Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_stream_init(tu_edpt_stream_t* s, bool is_host, bool is_tx, bool overwritable,
                         void* ff_buf, uint16_t ff_bufsize, uint8_t* ep_buf, uint16_t ep_bufsize) {
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b084      	sub	sp, #16
 8009bde:	af02      	add	r7, sp, #8
 8009be0:	6078      	str	r0, [r7, #4]
 8009be2:	4608      	mov	r0, r1
 8009be4:	4611      	mov	r1, r2
 8009be6:	461a      	mov	r2, r3
 8009be8:	4603      	mov	r3, r0
 8009bea:	70fb      	strb	r3, [r7, #3]
 8009bec:	460b      	mov	r3, r1
 8009bee:	70bb      	strb	r3, [r7, #2]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	707b      	strb	r3, [r7, #1]
  (void) is_tx;

  s->is_host = is_host;
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	7813      	ldrb	r3, [r2, #0]
 8009bf8:	78f9      	ldrb	r1, [r7, #3]
 8009bfa:	f361 0300 	bfi	r3, r1, #0, #1
 8009bfe:	7013      	strb	r3, [r2, #0]
  tu_fifo_config(&s->ff, ff_buf, ff_bufsize, 1, overwritable);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f103 0008 	add.w	r0, r3, #8
 8009c06:	8aba      	ldrh	r2, [r7, #20]
 8009c08:	787b      	ldrb	r3, [r7, #1]
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	6939      	ldr	r1, [r7, #16]
 8009c10:	f7fb fa86 	bl	8005120 <tu_fifo_config>
    osal_mutex_t new_mutex = osal_mutex_create(&s->ff_mutexdef);
    tu_fifo_config_mutex(&s->ff, is_tx ? new_mutex : NULL, is_tx ? NULL : new_mutex);
  }
  #endif

  s->ep_buf = ep_buf;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	69ba      	ldr	r2, [r7, #24]
 8009c18:	605a      	str	r2, [r3, #4]
  s->ep_bufsize = ep_bufsize;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	8bba      	ldrh	r2, [r7, #28]
 8009c1e:	805a      	strh	r2, [r3, #2]

  return true;
 8009c20:	2301      	movs	r3, #1
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <tu_edpt_stream_deinit>:

bool tu_edpt_stream_deinit(tu_edpt_stream_t* s) {
 8009c2a:	b480      	push	{r7}
 8009c2c:	b083      	sub	sp, #12
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
  (void) s;
  #if OSAL_MUTEX_REQUIRED
  if (s->ff.mutex_wr) osal_mutex_delete(s->ff.mutex_wr);
  if (s->ff.mutex_rd) osal_mutex_delete(s->ff.mutex_rd);
  #endif
  return true;
 8009c32:	2301      	movs	r3, #1
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <tu_edpt_stream_write_zlp_if_needed>:
}

//--------------------------------------------------------------------+
// Stream Write
//--------------------------------------------------------------------+
bool tu_edpt_stream_write_zlp_if_needed(uint8_t hwid, tu_edpt_stream_t* s, uint32_t last_xferred_bytes) {
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b08c      	sub	sp, #48	@ 0x30
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	4603      	mov	r3, r0
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
 8009c4c:	73fb      	strb	r3, [r7, #15]
  // ZLP condition: no pending data, last transferred bytes is multiple of packet size
  const uint16_t mps = s->is_mps512 ? TUSB_EPSIZE_BULK_HS : TUSB_EPSIZE_BULK_FS;
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	f003 0302 	and.w	r3, r3, #2
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d002      	beq.n	8009c62 <tu_edpt_stream_write_zlp_if_needed+0x22>
 8009c5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c60:	e000      	b.n	8009c64 <tu_edpt_stream_write_zlp_if_needed+0x24>
 8009c62:	2340      	movs	r3, #64	@ 0x40
 8009c64:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  TU_VERIFY(!tu_fifo_count(&s->ff) && last_xferred_bytes && (0 == (last_xferred_bytes & (mps - 1))));
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	3308      	adds	r3, #8
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fb feea 	bl	8005a44 <tu_fifo_count>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d109      	bne.n	8009c8a <tu_edpt_stream_write_zlp_if_needed+0x4a>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d006      	beq.n	8009c8a <tu_edpt_stream_write_zlp_if_needed+0x4a>
 8009c7c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	461a      	mov	r2, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4013      	ands	r3, r2
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d001      	beq.n	8009c8e <tu_edpt_stream_write_zlp_if_needed+0x4e>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	e04b      	b.n	8009d26 <tu_edpt_stream_write_zlp_if_needed+0xe6>
 8009c8e:	7bfb      	ldrb	r3, [r7, #15]
 8009c90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	623b      	str	r3, [r7, #32]
  if (s->is_host) {
 8009c98:	6a3b      	ldr	r3, [r7, #32]
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	f003 0301 	and.w	r3, r3, #1
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d109      	bne.n	8009cba <tu_edpt_stream_write_zlp_if_needed+0x7a>
    return usbd_edpt_claim(hwid, s->ep_addr);
 8009ca6:	6a3b      	ldr	r3, [r7, #32]
 8009ca8:	785a      	ldrb	r2, [r3, #1]
 8009caa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cae:	4611      	mov	r1, r2
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7fd fb8b 	bl	80073cc <usbd_edpt_claim>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	e000      	b.n	8009cbc <tu_edpt_stream_write_zlp_if_needed+0x7c>
  return false;
 8009cba:	2300      	movs	r3, #0
  TU_VERIFY(stream_claim(hwid, s));
 8009cbc:	f083 0301 	eor.w	r3, r3, #1
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d001      	beq.n	8009cca <tu_edpt_stream_write_zlp_if_needed+0x8a>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	e02d      	b.n	8009d26 <tu_edpt_stream_write_zlp_if_needed+0xe6>
 8009cca:	7bfb      	ldrb	r3, [r7, #15]
 8009ccc:	77fb      	strb	r3, [r7, #31]
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	61bb      	str	r3, [r7, #24]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	82fb      	strh	r3, [r7, #22]
  if (s->is_host) {
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	f003 0301 	and.w	r3, r3, #1
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10e      	bne.n	8009d02 <tu_edpt_stream_write_zlp_if_needed+0xc2>
    return usbd_edpt_xfer(hwid, s->ep_addr, count ? s->ep_buf : NULL, count);
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	7859      	ldrb	r1, [r3, #1]
 8009ce8:	8afb      	ldrh	r3, [r7, #22]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d002      	beq.n	8009cf4 <tu_edpt_stream_write_zlp_if_needed+0xb4>
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	685a      	ldr	r2, [r3, #4]
 8009cf2:	e000      	b.n	8009cf6 <tu_edpt_stream_write_zlp_if_needed+0xb6>
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	8afb      	ldrh	r3, [r7, #22]
 8009cf8:	7ff8      	ldrb	r0, [r7, #31]
 8009cfa:	f7fd fbb7 	bl	800746c <usbd_edpt_xfer>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	e000      	b.n	8009d04 <tu_edpt_stream_write_zlp_if_needed+0xc4>
  return false;
 8009d02:	2300      	movs	r3, #0
  TU_ASSERT(stream_xfer(hwid, s, 0));
 8009d04:	f083 0301 	eor.w	r3, r3, #1
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00a      	beq.n	8009d24 <tu_edpt_stream_write_zlp_if_needed+0xe4>
 8009d0e:	4b08      	ldr	r3, [pc, #32]	@ (8009d30 <tu_edpt_stream_write_zlp_if_needed+0xf0>)
 8009d10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 0301 	and.w	r3, r3, #1
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d000      	beq.n	8009d20 <tu_edpt_stream_write_zlp_if_needed+0xe0>
 8009d1e:	be00      	bkpt	0x0000
 8009d20:	2300      	movs	r3, #0
 8009d22:	e000      	b.n	8009d26 <tu_edpt_stream_write_zlp_if_needed+0xe6>
  return true;
 8009d24:	2301      	movs	r3, #1
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3730      	adds	r7, #48	@ 0x30
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	e000edf0 	.word	0xe000edf0

08009d34 <tu_edpt_stream_write_xfer>:

uint32_t tu_edpt_stream_write_xfer(uint8_t hwid, tu_edpt_stream_t* s) {
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b08a      	sub	sp, #40	@ 0x28
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	6039      	str	r1, [r7, #0]
 8009d3e:	71fb      	strb	r3, [r7, #7]
  // skip if no data
  TU_VERIFY(tu_fifo_count(&s->ff), 0);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	3308      	adds	r3, #8
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7fb fe7d 	bl	8005a44 <tu_fifo_count>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <tu_edpt_stream_write_xfer+0x20>
 8009d50:	2300      	movs	r3, #0
 8009d52:	e06e      	b.n	8009e32 <tu_edpt_stream_write_xfer+0xfe>
 8009d54:	79fb      	ldrb	r3, [r7, #7]
 8009d56:	77fb      	strb	r3, [r7, #31]
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	61bb      	str	r3, [r7, #24]
  if (s->is_host) {
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	f003 0301 	and.w	r3, r3, #1
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d108      	bne.n	8009d7c <tu_edpt_stream_write_xfer+0x48>
    return usbd_edpt_claim(hwid, s->ep_addr);
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	785a      	ldrb	r2, [r3, #1]
 8009d6e:	7ffb      	ldrb	r3, [r7, #31]
 8009d70:	4611      	mov	r1, r2
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fd fb2a 	bl	80073cc <usbd_edpt_claim>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	e000      	b.n	8009d7e <tu_edpt_stream_write_xfer+0x4a>
  return false;
 8009d7c:	2300      	movs	r3, #0

  TU_VERIFY(stream_claim(hwid, s), 0);
 8009d7e:	f083 0301 	eor.w	r3, r3, #1
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d001      	beq.n	8009d8c <tu_edpt_stream_write_xfer+0x58>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	e052      	b.n	8009e32 <tu_edpt_stream_write_xfer+0xfe>

  // Pull data from FIFO -> EP buf
  uint16_t const count = tu_fifo_read_n(&s->ff, s->ep_buf, s->ep_bufsize);
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	f103 0008 	add.w	r0, r3, #8
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	6859      	ldr	r1, [r3, #4]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	885b      	ldrh	r3, [r3, #2]
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	f7fb ff0e 	bl	8005bbc <tu_fifo_read_n>
 8009da0:	4603      	mov	r3, r0
 8009da2:	84fb      	strh	r3, [r7, #38]	@ 0x26

  if (count) {
 8009da4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d02e      	beq.n	8009e08 <tu_edpt_stream_write_xfer+0xd4>
 8009daa:	79fb      	ldrb	r3, [r7, #7]
 8009dac:	75fb      	strb	r3, [r7, #23]
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	613b      	str	r3, [r7, #16]
 8009db2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009db4:	81fb      	strh	r3, [r7, #14]
  if (s->is_host) {
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	f003 0301 	and.w	r3, r3, #1
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10e      	bne.n	8009de2 <tu_edpt_stream_write_xfer+0xae>
    return usbd_edpt_xfer(hwid, s->ep_addr, count ? s->ep_buf : NULL, count);
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	7859      	ldrb	r1, [r3, #1]
 8009dc8:	89fb      	ldrh	r3, [r7, #14]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d002      	beq.n	8009dd4 <tu_edpt_stream_write_xfer+0xa0>
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	685a      	ldr	r2, [r3, #4]
 8009dd2:	e000      	b.n	8009dd6 <tu_edpt_stream_write_xfer+0xa2>
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	89fb      	ldrh	r3, [r7, #14]
 8009dd8:	7df8      	ldrb	r0, [r7, #23]
 8009dda:	f7fd fb47 	bl	800746c <usbd_edpt_xfer>
 8009dde:	4603      	mov	r3, r0
 8009de0:	e000      	b.n	8009de4 <tu_edpt_stream_write_xfer+0xb0>
  return false;
 8009de2:	2300      	movs	r3, #0
    TU_ASSERT(stream_xfer(hwid, s, count), 0);
 8009de4:	f083 0301 	eor.w	r3, r3, #1
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00a      	beq.n	8009e04 <tu_edpt_stream_write_xfer+0xd0>
 8009dee:	4b13      	ldr	r3, [pc, #76]	@ (8009e3c <tu_edpt_stream_write_xfer+0x108>)
 8009df0:	623b      	str	r3, [r7, #32]
 8009df2:	6a3b      	ldr	r3, [r7, #32]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 0301 	and.w	r3, r3, #1
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d000      	beq.n	8009e00 <tu_edpt_stream_write_xfer+0xcc>
 8009dfe:	be00      	bkpt	0x0000
 8009e00:	2300      	movs	r3, #0
 8009e02:	e016      	b.n	8009e32 <tu_edpt_stream_write_xfer+0xfe>
    return count;
 8009e04:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009e06:	e014      	b.n	8009e32 <tu_edpt_stream_write_xfer+0xfe>
 8009e08:	79fb      	ldrb	r3, [r7, #7]
 8009e0a:	737b      	strb	r3, [r7, #13]
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	60bb      	str	r3, [r7, #8]
  if (s->is_host) {
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	f003 0301 	and.w	r3, r3, #1
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d107      	bne.n	8009e2e <tu_edpt_stream_write_xfer+0xfa>
    return usbd_edpt_release(hwid, s->ep_addr);
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	785a      	ldrb	r2, [r3, #1]
 8009e22:	7b7b      	ldrb	r3, [r7, #13]
 8009e24:	4611      	mov	r1, r2
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7fd faf8 	bl	800741c <usbd_edpt_release>
 8009e2c:	e000      	b.n	8009e30 <tu_edpt_stream_write_xfer+0xfc>
  return false;
 8009e2e:	bf00      	nop
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    stream_release(hwid, s);
    return 0;
 8009e30:	2300      	movs	r3, #0
  }
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3728      	adds	r7, #40	@ 0x28
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	e000edf0 	.word	0xe000edf0

08009e40 <tu_edpt_stream_read_xfer>:
}

//--------------------------------------------------------------------+
// Stream Read
//--------------------------------------------------------------------+
uint32_t tu_edpt_stream_read_xfer(uint8_t hwid, tu_edpt_stream_t* s) {
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b092      	sub	sp, #72	@ 0x48
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	4603      	mov	r3, r0
 8009e48:	6039      	str	r1, [r7, #0]
 8009e4a:	71fb      	strb	r3, [r7, #7]
  if (0 == tu_fifo_depth(&s->ff)) {
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	3308      	adds	r3, #8
 8009e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e54:	889b      	ldrh	r3, [r3, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d151      	bne.n	8009efe <tu_edpt_stream_read_xfer+0xbe>
 8009e5a:	79fb      	ldrb	r3, [r7, #7]
 8009e5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (s->is_host) {
 8009e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	f003 0301 	and.w	r3, r3, #1
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d109      	bne.n	8009e86 <tu_edpt_stream_read_xfer+0x46>
    return usbd_edpt_claim(hwid, s->ep_addr);
 8009e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e74:	785a      	ldrb	r2, [r3, #1]
 8009e76:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009e7a:	4611      	mov	r1, r2
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7fd faa5 	bl	80073cc <usbd_edpt_claim>
 8009e82:	4603      	mov	r3, r0
 8009e84:	e000      	b.n	8009e88 <tu_edpt_stream_read_xfer+0x48>
  return false;
 8009e86:	2300      	movs	r3, #0
    // no fifo for buffered
    TU_VERIFY(stream_claim(hwid, s), 0);
 8009e88:	f083 0301 	eor.w	r3, r3, #1
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d001      	beq.n	8009e96 <tu_edpt_stream_read_xfer+0x56>
 8009e92:	2300      	movs	r3, #0
 8009e94:	e0dc      	b.n	800a050 <tu_edpt_stream_read_xfer+0x210>
    TU_ASSERT(stream_xfer(hwid, s, s->ep_bufsize), 0);
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	885a      	ldrh	r2, [r3, #2]
 8009e9a:	79fb      	ldrb	r3, [r7, #7]
 8009e9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (s->is_host) {
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	f003 0301 	and.w	r3, r3, #1
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d10f      	bne.n	8009ed6 <tu_edpt_stream_read_xfer+0x96>
    return usbd_edpt_xfer(hwid, s->ep_addr, count ? s->ep_buf : NULL, count);
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb8:	7859      	ldrb	r1, [r3, #1]
 8009eba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d002      	beq.n	8009ec6 <tu_edpt_stream_read_xfer+0x86>
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec2:	685a      	ldr	r2, [r3, #4]
 8009ec4:	e000      	b.n	8009ec8 <tu_edpt_stream_read_xfer+0x88>
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009eca:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 8009ece:	f7fd facd 	bl	800746c <usbd_edpt_xfer>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	e000      	b.n	8009ed8 <tu_edpt_stream_read_xfer+0x98>
  return false;
 8009ed6:	2300      	movs	r3, #0
    TU_ASSERT(stream_xfer(hwid, s, s->ep_bufsize), 0);
 8009ed8:	f083 0301 	eor.w	r3, r3, #1
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00a      	beq.n	8009ef8 <tu_edpt_stream_read_xfer+0xb8>
 8009ee2:	4b5d      	ldr	r3, [pc, #372]	@ (800a058 <tu_edpt_stream_read_xfer+0x218>)
 8009ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 0301 	and.w	r3, r3, #1
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d000      	beq.n	8009ef4 <tu_edpt_stream_read_xfer+0xb4>
 8009ef2:	be00      	bkpt	0x0000
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	e0ab      	b.n	800a050 <tu_edpt_stream_read_xfer+0x210>
    return s->ep_bufsize;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	885b      	ldrh	r3, [r3, #2]
 8009efc:	e0a8      	b.n	800a050 <tu_edpt_stream_read_xfer+0x210>
  } else {
    const uint16_t mps = s->is_mps512 ? TUSB_EPSIZE_BULK_HS : TUSB_EPSIZE_BULK_FS;
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	f003 0302 	and.w	r3, r3, #2
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d002      	beq.n	8009f12 <tu_edpt_stream_read_xfer+0xd2>
 8009f0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f10:	e000      	b.n	8009f14 <tu_edpt_stream_read_xfer+0xd4>
 8009f12:	2340      	movs	r3, #64	@ 0x40
 8009f14:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint16_t available = tu_fifo_remaining(&s->ff);
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	3308      	adds	r3, #8
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fb fdf1 	bl	8005b04 <tu_fifo_remaining>
 8009f22:	4603      	mov	r3, r0
 8009f24:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

    // Prepare for incoming data but only allow what we can store in the ring buffer.
    // TODO Actually we can still carry out the transfer, keeping count of received bytes
    // and slowly move it to the FIFO when read().
    // This pre-check reduces endpoint claiming
    TU_VERIFY(available >= mps);
 8009f28:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8009f2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d201      	bcs.n	8009f38 <tu_edpt_stream_read_xfer+0xf8>
 8009f34:	2300      	movs	r3, #0
 8009f36:	e08b      	b.n	800a050 <tu_edpt_stream_read_xfer+0x210>
 8009f38:	79fb      	ldrb	r3, [r7, #7]
 8009f3a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	61fb      	str	r3, [r7, #28]
  if (s->is_host) {
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	f003 0301 	and.w	r3, r3, #1
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d109      	bne.n	8009f64 <tu_edpt_stream_read_xfer+0x124>
    return usbd_edpt_claim(hwid, s->ep_addr);
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	785a      	ldrb	r2, [r3, #1]
 8009f54:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009f58:	4611      	mov	r1, r2
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7fd fa36 	bl	80073cc <usbd_edpt_claim>
 8009f60:	4603      	mov	r3, r0
 8009f62:	e000      	b.n	8009f66 <tu_edpt_stream_read_xfer+0x126>
  return false;
 8009f64:	2300      	movs	r3, #0

    TU_VERIFY(stream_claim(hwid, s), 0);
 8009f66:	f083 0301 	eor.w	r3, r3, #1
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <tu_edpt_stream_read_xfer+0x134>
 8009f70:	2300      	movs	r3, #0
 8009f72:	e06d      	b.n	800a050 <tu_edpt_stream_read_xfer+0x210>

    // get available again since fifo can be changed before endpoint is claimed
    available = tu_fifo_remaining(&s->ff);
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	3308      	adds	r3, #8
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7fb fdc3 	bl	8005b04 <tu_fifo_remaining>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

    if (available >= mps) {
 8009f84:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8009f88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d34a      	bcc.n	800a026 <tu_edpt_stream_read_xfer+0x1e6>
      // multiple of packet size limit by ep bufsize
      uint16_t count = (uint16_t) (available & ~(mps - 1));
 8009f90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009f94:	425b      	negs	r3, r3
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	b21a      	sxth	r2, r3
 8009f9a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	b21b      	sxth	r3, r3
 8009fa2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      count = tu_min16(count, s->ep_bufsize);
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	885a      	ldrh	r2, [r3, #2]
 8009faa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009fae:	823b      	strh	r3, [r7, #16]
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8009fb4:	8a3a      	ldrh	r2, [r7, #16]
 8009fb6:	89fb      	ldrh	r3, [r7, #14]
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	bf28      	it	cs
 8009fbc:	4613      	movcs	r3, r2
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009fc4:	79fb      	ldrb	r3, [r7, #7]
 8009fc6:	76fb      	strb	r3, [r7, #27]
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	617b      	str	r3, [r7, #20]
 8009fcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009fd0:	827b      	strh	r3, [r7, #18]
  if (s->is_host) {
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10e      	bne.n	8009ffe <tu_edpt_stream_read_xfer+0x1be>
    return usbd_edpt_xfer(hwid, s->ep_addr, count ? s->ep_buf : NULL, count);
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	7859      	ldrb	r1, [r3, #1]
 8009fe4:	8a7b      	ldrh	r3, [r7, #18]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d002      	beq.n	8009ff0 <tu_edpt_stream_read_xfer+0x1b0>
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	685a      	ldr	r2, [r3, #4]
 8009fee:	e000      	b.n	8009ff2 <tu_edpt_stream_read_xfer+0x1b2>
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	8a7b      	ldrh	r3, [r7, #18]
 8009ff4:	7ef8      	ldrb	r0, [r7, #27]
 8009ff6:	f7fd fa39 	bl	800746c <usbd_edpt_xfer>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	e000      	b.n	800a000 <tu_edpt_stream_read_xfer+0x1c0>
  return false;
 8009ffe:	2300      	movs	r3, #0
      TU_ASSERT(stream_xfer(hwid, s, count), 0);
 800a000:	f083 0301 	eor.w	r3, r3, #1
 800a004:	b2db      	uxtb	r3, r3
 800a006:	2b00      	cmp	r3, #0
 800a008:	d00a      	beq.n	800a020 <tu_edpt_stream_read_xfer+0x1e0>
 800a00a:	4b13      	ldr	r3, [pc, #76]	@ (800a058 <tu_edpt_stream_read_xfer+0x218>)
 800a00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a00e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f003 0301 	and.w	r3, r3, #1
 800a016:	2b00      	cmp	r3, #0
 800a018:	d000      	beq.n	800a01c <tu_edpt_stream_read_xfer+0x1dc>
 800a01a:	be00      	bkpt	0x0000
 800a01c:	2300      	movs	r3, #0
 800a01e:	e017      	b.n	800a050 <tu_edpt_stream_read_xfer+0x210>
      return count;
 800a020:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a024:	e014      	b.n	800a050 <tu_edpt_stream_read_xfer+0x210>
 800a026:	79fb      	ldrb	r3, [r7, #7]
 800a028:	737b      	strb	r3, [r7, #13]
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	60bb      	str	r3, [r7, #8]
  if (s->is_host) {
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	b2db      	uxtb	r3, r3
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d107      	bne.n	800a04c <tu_edpt_stream_read_xfer+0x20c>
    return usbd_edpt_release(hwid, s->ep_addr);
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	785a      	ldrb	r2, [r3, #1]
 800a040:	7b7b      	ldrb	r3, [r7, #13]
 800a042:	4611      	mov	r1, r2
 800a044:	4618      	mov	r0, r3
 800a046:	f7fd f9e9 	bl	800741c <usbd_edpt_release>
 800a04a:	e000      	b.n	800a04e <tu_edpt_stream_read_xfer+0x20e>
  return false;
 800a04c:	bf00      	nop
    } else {
      // Release endpoint since we don't make any transfer
      stream_release(hwid, s);
      return 0;
 800a04e:	2300      	movs	r3, #0
    }
  }
}
 800a050:	4618      	mov	r0, r3
 800a052:	3748      	adds	r7, #72	@ 0x48
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	e000edf0 	.word	0xe000edf0

0800a05c <memset>:
 800a05c:	4402      	add	r2, r0
 800a05e:	4603      	mov	r3, r0
 800a060:	4293      	cmp	r3, r2
 800a062:	d100      	bne.n	800a066 <memset+0xa>
 800a064:	4770      	bx	lr
 800a066:	f803 1b01 	strb.w	r1, [r3], #1
 800a06a:	e7f9      	b.n	800a060 <memset+0x4>

0800a06c <__libc_init_array>:
 800a06c:	b570      	push	{r4, r5, r6, lr}
 800a06e:	4d0d      	ldr	r5, [pc, #52]	@ (800a0a4 <__libc_init_array+0x38>)
 800a070:	4c0d      	ldr	r4, [pc, #52]	@ (800a0a8 <__libc_init_array+0x3c>)
 800a072:	1b64      	subs	r4, r4, r5
 800a074:	10a4      	asrs	r4, r4, #2
 800a076:	2600      	movs	r6, #0
 800a078:	42a6      	cmp	r6, r4
 800a07a:	d109      	bne.n	800a090 <__libc_init_array+0x24>
 800a07c:	4d0b      	ldr	r5, [pc, #44]	@ (800a0ac <__libc_init_array+0x40>)
 800a07e:	4c0c      	ldr	r4, [pc, #48]	@ (800a0b0 <__libc_init_array+0x44>)
 800a080:	f000 f826 	bl	800a0d0 <_init>
 800a084:	1b64      	subs	r4, r4, r5
 800a086:	10a4      	asrs	r4, r4, #2
 800a088:	2600      	movs	r6, #0
 800a08a:	42a6      	cmp	r6, r4
 800a08c:	d105      	bne.n	800a09a <__libc_init_array+0x2e>
 800a08e:	bd70      	pop	{r4, r5, r6, pc}
 800a090:	f855 3b04 	ldr.w	r3, [r5], #4
 800a094:	4798      	blx	r3
 800a096:	3601      	adds	r6, #1
 800a098:	e7ee      	b.n	800a078 <__libc_init_array+0xc>
 800a09a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a09e:	4798      	blx	r3
 800a0a0:	3601      	adds	r6, #1
 800a0a2:	e7f2      	b.n	800a08a <__libc_init_array+0x1e>
 800a0a4:	0800a3c4 	.word	0x0800a3c4
 800a0a8:	0800a3c4 	.word	0x0800a3c4
 800a0ac:	0800a3c4 	.word	0x0800a3c4
 800a0b0:	0800a3c8 	.word	0x0800a3c8

0800a0b4 <memcpy>:
 800a0b4:	440a      	add	r2, r1
 800a0b6:	4291      	cmp	r1, r2
 800a0b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0bc:	d100      	bne.n	800a0c0 <memcpy+0xc>
 800a0be:	4770      	bx	lr
 800a0c0:	b510      	push	{r4, lr}
 800a0c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0ca:	4291      	cmp	r1, r2
 800a0cc:	d1f9      	bne.n	800a0c2 <memcpy+0xe>
 800a0ce:	bd10      	pop	{r4, pc}

0800a0d0 <_init>:
 800a0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d2:	bf00      	nop
 800a0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0d6:	bc08      	pop	{r3}
 800a0d8:	469e      	mov	lr, r3
 800a0da:	4770      	bx	lr

0800a0dc <_fini>:
 800a0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0de:	bf00      	nop
 800a0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0e2:	bc08      	pop	{r3}
 800a0e4:	469e      	mov	lr, r3
 800a0e6:	4770      	bx	lr
