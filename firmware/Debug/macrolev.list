
macrolev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08040000  08040000  0000b084  2**0
                  CONTENTS
  1 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000098c0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000200  08009a58  08009a58  0000aa58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08009c58  08009c58  0000b084  2**0
                  CONTENTS
  5 .ARM          00000008  08009c58  08009c58  0000ac58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08009c60  08009c60  0000b084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08009c60  08009c60  0000ac60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08009c64  08009c64  0000ac64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000084  20000000  08009c68  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000bbc  20000084  08009cec  0000b084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c40  08009cec  0000bc40  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001adc1  00000000  00000000  0000b0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000465a  00000000  00000000  00025e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  0002a4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e621  00000000  00000000  0002b7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019da9  00000000  00000000  00049e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b638b  00000000  00000000  00063bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119f45  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000f41  00000000  00000000  00119f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005004  00000000  00000000  0011aecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0011fed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000084 	.word	0x20000084
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009a40 	.word	0x08009a40

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000088 	.word	0x20000088
 80001d4:	08009a40 	.word	0x08009a40

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b988 	b.w	8000510 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	468e      	mov	lr, r1
 8000220:	4604      	mov	r4, r0
 8000222:	4688      	mov	r8, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d962      	bls.n	80002f4 <__udivmoddi4+0xdc>
 800022e:	fab2 f682 	clz	r6, r2
 8000232:	b14e      	cbz	r6, 8000248 <__udivmoddi4+0x30>
 8000234:	f1c6 0320 	rsb	r3, r6, #32
 8000238:	fa01 f806 	lsl.w	r8, r1, r6
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	40b7      	lsls	r7, r6
 8000242:	ea43 0808 	orr.w	r8, r3, r8
 8000246:	40b4      	lsls	r4, r6
 8000248:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800024c:	fa1f fc87 	uxth.w	ip, r7
 8000250:	fbb8 f1fe 	udiv	r1, r8, lr
 8000254:	0c23      	lsrs	r3, r4, #16
 8000256:	fb0e 8811 	mls	r8, lr, r1, r8
 800025a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025e:	fb01 f20c 	mul.w	r2, r1, ip
 8000262:	429a      	cmp	r2, r3
 8000264:	d909      	bls.n	800027a <__udivmoddi4+0x62>
 8000266:	18fb      	adds	r3, r7, r3
 8000268:	f101 30ff 	add.w	r0, r1, #4294967295
 800026c:	f080 80ea 	bcs.w	8000444 <__udivmoddi4+0x22c>
 8000270:	429a      	cmp	r2, r3
 8000272:	f240 80e7 	bls.w	8000444 <__udivmoddi4+0x22c>
 8000276:	3902      	subs	r1, #2
 8000278:	443b      	add	r3, r7
 800027a:	1a9a      	subs	r2, r3, r2
 800027c:	b2a3      	uxth	r3, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028a:	fb00 fc0c 	mul.w	ip, r0, ip
 800028e:	459c      	cmp	ip, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x8e>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f100 32ff 	add.w	r2, r0, #4294967295
 8000298:	f080 80d6 	bcs.w	8000448 <__udivmoddi4+0x230>
 800029c:	459c      	cmp	ip, r3
 800029e:	f240 80d3 	bls.w	8000448 <__udivmoddi4+0x230>
 80002a2:	443b      	add	r3, r7
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002aa:	eba3 030c 	sub.w	r3, r3, ip
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11d      	cbz	r5, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40f3      	lsrs	r3, r6
 80002b4:	2200      	movs	r2, #0
 80002b6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d905      	bls.n	80002ce <__udivmoddi4+0xb6>
 80002c2:	b10d      	cbz	r5, 80002c8 <__udivmoddi4+0xb0>
 80002c4:	e9c5 0100 	strd	r0, r1, [r5]
 80002c8:	2100      	movs	r1, #0
 80002ca:	4608      	mov	r0, r1
 80002cc:	e7f5      	b.n	80002ba <__udivmoddi4+0xa2>
 80002ce:	fab3 f183 	clz	r1, r3
 80002d2:	2900      	cmp	r1, #0
 80002d4:	d146      	bne.n	8000364 <__udivmoddi4+0x14c>
 80002d6:	4573      	cmp	r3, lr
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xc8>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 8105 	bhi.w	80004ea <__udivmoddi4+0x2d2>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4690      	mov	r8, r2
 80002ea:	2d00      	cmp	r5, #0
 80002ec:	d0e5      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002ee:	e9c5 4800 	strd	r4, r8, [r5]
 80002f2:	e7e2      	b.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f000 8090 	beq.w	800041a <__udivmoddi4+0x202>
 80002fa:	fab2 f682 	clz	r6, r2
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f040 80a4 	bne.w	800044c <__udivmoddi4+0x234>
 8000304:	1a8a      	subs	r2, r1, r2
 8000306:	0c03      	lsrs	r3, r0, #16
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	b280      	uxth	r0, r0
 800030e:	b2bc      	uxth	r4, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb2 fcfe 	udiv	ip, r2, lr
 8000316:	fb0e 221c 	mls	r2, lr, ip, r2
 800031a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800031e:	fb04 f20c 	mul.w	r2, r4, ip
 8000322:	429a      	cmp	r2, r3
 8000324:	d907      	bls.n	8000336 <__udivmoddi4+0x11e>
 8000326:	18fb      	adds	r3, r7, r3
 8000328:	f10c 38ff 	add.w	r8, ip, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x11c>
 800032e:	429a      	cmp	r2, r3
 8000330:	f200 80e0 	bhi.w	80004f4 <__udivmoddi4+0x2dc>
 8000334:	46c4      	mov	ip, r8
 8000336:	1a9b      	subs	r3, r3, r2
 8000338:	fbb3 f2fe 	udiv	r2, r3, lr
 800033c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000340:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000344:	fb02 f404 	mul.w	r4, r2, r4
 8000348:	429c      	cmp	r4, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x144>
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x142>
 8000354:	429c      	cmp	r4, r3
 8000356:	f200 80ca 	bhi.w	80004ee <__udivmoddi4+0x2d6>
 800035a:	4602      	mov	r2, r0
 800035c:	1b1b      	subs	r3, r3, r4
 800035e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0x98>
 8000364:	f1c1 0620 	rsb	r6, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 f706 	lsr.w	r7, r2, r6
 800036e:	431f      	orrs	r7, r3
 8000370:	fa0e f401 	lsl.w	r4, lr, r1
 8000374:	fa20 f306 	lsr.w	r3, r0, r6
 8000378:	fa2e fe06 	lsr.w	lr, lr, r6
 800037c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	fa1f fc87 	uxth.w	ip, r7
 800038a:	fbbe f0f9 	udiv	r0, lr, r9
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	fb09 ee10 	mls	lr, r9, r0, lr
 8000394:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000398:	fb00 fe0c 	mul.w	lr, r0, ip
 800039c:	45a6      	cmp	lr, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x1a0>
 80003a4:	193c      	adds	r4, r7, r4
 80003a6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003aa:	f080 809c 	bcs.w	80004e6 <__udivmoddi4+0x2ce>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f240 8099 	bls.w	80004e6 <__udivmoddi4+0x2ce>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 040e 	sub.w	r4, r4, lr
 80003bc:	fa1f fe83 	uxth.w	lr, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003cc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d0:	45a4      	cmp	ip, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1ce>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003da:	f080 8082 	bcs.w	80004e2 <__udivmoddi4+0x2ca>
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d97f      	bls.n	80004e2 <__udivmoddi4+0x2ca>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f2:	4564      	cmp	r4, ip
 80003f4:	4673      	mov	r3, lr
 80003f6:	46e1      	mov	r9, ip
 80003f8:	d362      	bcc.n	80004c0 <__udivmoddi4+0x2a8>
 80003fa:	d05f      	beq.n	80004bc <__udivmoddi4+0x2a4>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x1fe>
 80003fe:	ebb8 0203 	subs.w	r2, r8, r3
 8000402:	eb64 0409 	sbc.w	r4, r4, r9
 8000406:	fa04 f606 	lsl.w	r6, r4, r6
 800040a:	fa22 f301 	lsr.w	r3, r2, r1
 800040e:	431e      	orrs	r6, r3
 8000410:	40cc      	lsrs	r4, r1
 8000412:	e9c5 6400 	strd	r6, r4, [r5]
 8000416:	2100      	movs	r1, #0
 8000418:	e74f      	b.n	80002ba <__udivmoddi4+0xa2>
 800041a:	fbb1 fcf2 	udiv	ip, r1, r2
 800041e:	0c01      	lsrs	r1, r0, #16
 8000420:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000424:	b280      	uxth	r0, r0
 8000426:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042a:	463b      	mov	r3, r7
 800042c:	4638      	mov	r0, r7
 800042e:	463c      	mov	r4, r7
 8000430:	46b8      	mov	r8, r7
 8000432:	46be      	mov	lr, r7
 8000434:	2620      	movs	r6, #32
 8000436:	fbb1 f1f7 	udiv	r1, r1, r7
 800043a:	eba2 0208 	sub.w	r2, r2, r8
 800043e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000442:	e766      	b.n	8000312 <__udivmoddi4+0xfa>
 8000444:	4601      	mov	r1, r0
 8000446:	e718      	b.n	800027a <__udivmoddi4+0x62>
 8000448:	4610      	mov	r0, r2
 800044a:	e72c      	b.n	80002a6 <__udivmoddi4+0x8e>
 800044c:	f1c6 0220 	rsb	r2, r6, #32
 8000450:	fa2e f302 	lsr.w	r3, lr, r2
 8000454:	40b7      	lsls	r7, r6
 8000456:	40b1      	lsls	r1, r6
 8000458:	fa20 f202 	lsr.w	r2, r0, r2
 800045c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000460:	430a      	orrs	r2, r1
 8000462:	fbb3 f8fe 	udiv	r8, r3, lr
 8000466:	b2bc      	uxth	r4, r7
 8000468:	fb0e 3318 	mls	r3, lr, r8, r3
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb08 f904 	mul.w	r9, r8, r4
 8000476:	40b0      	lsls	r0, r6
 8000478:	4589      	cmp	r9, r1
 800047a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800047e:	b280      	uxth	r0, r0
 8000480:	d93e      	bls.n	8000500 <__udivmoddi4+0x2e8>
 8000482:	1879      	adds	r1, r7, r1
 8000484:	f108 3cff 	add.w	ip, r8, #4294967295
 8000488:	d201      	bcs.n	800048e <__udivmoddi4+0x276>
 800048a:	4589      	cmp	r9, r1
 800048c:	d81f      	bhi.n	80004ce <__udivmoddi4+0x2b6>
 800048e:	eba1 0109 	sub.w	r1, r1, r9
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fb09 f804 	mul.w	r8, r9, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	b292      	uxth	r2, r2
 80004a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a4:	4542      	cmp	r2, r8
 80004a6:	d229      	bcs.n	80004fc <__udivmoddi4+0x2e4>
 80004a8:	18ba      	adds	r2, r7, r2
 80004aa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ae:	d2c4      	bcs.n	800043a <__udivmoddi4+0x222>
 80004b0:	4542      	cmp	r2, r8
 80004b2:	d2c2      	bcs.n	800043a <__udivmoddi4+0x222>
 80004b4:	f1a9 0102 	sub.w	r1, r9, #2
 80004b8:	443a      	add	r2, r7
 80004ba:	e7be      	b.n	800043a <__udivmoddi4+0x222>
 80004bc:	45f0      	cmp	r8, lr
 80004be:	d29d      	bcs.n	80003fc <__udivmoddi4+0x1e4>
 80004c0:	ebbe 0302 	subs.w	r3, lr, r2
 80004c4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c8:	3801      	subs	r0, #1
 80004ca:	46e1      	mov	r9, ip
 80004cc:	e796      	b.n	80003fc <__udivmoddi4+0x1e4>
 80004ce:	eba7 0909 	sub.w	r9, r7, r9
 80004d2:	4449      	add	r1, r9
 80004d4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004dc:	fb09 f804 	mul.w	r8, r9, r4
 80004e0:	e7db      	b.n	800049a <__udivmoddi4+0x282>
 80004e2:	4673      	mov	r3, lr
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1ce>
 80004e6:	4650      	mov	r0, sl
 80004e8:	e766      	b.n	80003b8 <__udivmoddi4+0x1a0>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e6fd      	b.n	80002ea <__udivmoddi4+0xd2>
 80004ee:	443b      	add	r3, r7
 80004f0:	3a02      	subs	r2, #2
 80004f2:	e733      	b.n	800035c <__udivmoddi4+0x144>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	443b      	add	r3, r7
 80004fa:	e71c      	b.n	8000336 <__udivmoddi4+0x11e>
 80004fc:	4649      	mov	r1, r9
 80004fe:	e79c      	b.n	800043a <__udivmoddi4+0x222>
 8000500:	eba1 0109 	sub.w	r1, r1, r9
 8000504:	46c4      	mov	ip, r8
 8000506:	fbb1 f9fe 	udiv	r9, r1, lr
 800050a:	fb09 f804 	mul.w	r8, r9, r4
 800050e:	e7c4      	b.n	800049a <__udivmoddi4+0x282>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <hid_init>:
static uint8_t keycodes[6] = {0};
// static uint8_t is_screaming = 0;
static uint8_t consumer_report = 0;


void hid_init() {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
	 tusb_rhport_init_t dev_init = {
 800051a:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <hid_init+0x20>)
 800051c:	881b      	ldrh	r3, [r3, #0]
 800051e:	80bb      	strh	r3, [r7, #4]
	     .role = TUSB_ROLE_DEVICE,
	     .speed = TUSB_SPEED_AUTO
	  };
	  tusb_init(0, &dev_init); // initialize device stack on roothub port 0
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	4619      	mov	r1, r3
 8000524:	2000      	movs	r0, #0
 8000526:	f009 f8a9 	bl	800967c <tusb_rhport_init>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	08009a58 	.word	0x08009a58

08000538 <hid_task>:

void hid_task() {
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0

  if ((should_send_consumer_report || should_send_keyboard_report) && tud_hid_ready()) {
 800053e:	4b21      	ldr	r3, [pc, #132]	@ (80005c4 <hid_task+0x8c>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d103      	bne.n	800054e <hid_task+0x16>
 8000546:	4b20      	ldr	r3, [pc, #128]	@ (80005c8 <hid_task+0x90>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d035      	beq.n	80005ba <hid_task+0x82>

//--------------------------------------------------------------------+
// Application API (Single Port)
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_ready(void) {
  return tud_hid_n_ready(0);
 800054e:	2000      	movs	r0, #0
 8000550:	f003 ffa4 	bl	800449c <tud_hid_n_ready>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d02f      	beq.n	80005ba <hid_task+0x82>
    if (tud_suspended()) {
 800055a:	f005 fabb 	bl	8005ad4 <tud_suspended>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d002      	beq.n	800056a <hid_task+0x32>
      tud_remote_wakeup();
 8000564:	f005 faca 	bl	8005afc <tud_remote_wakeup>
        should_send_keyboard_report = 0;
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
      }
    }
  }
}
 8000568:	e027      	b.n	80005ba <hid_task+0x82>
      if (should_send_consumer_report) {
 800056a:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <hid_task+0x8c>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d00f      	beq.n	8000592 <hid_task+0x5a>
        should_send_consumer_report = 0;
 8000572:	4b14      	ldr	r3, [pc, #80]	@ (80005c4 <hid_task+0x8c>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
 8000578:	2302      	movs	r3, #2
 800057a:	73fb      	strb	r3, [r7, #15]
 800057c:	4b13      	ldr	r3, [pc, #76]	@ (80005cc <hid_task+0x94>)
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	2302      	movs	r3, #2
 8000582:	80fb      	strh	r3, [r7, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tud_hid_get_protocol(void) {
  return tud_hid_n_get_protocol(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_report(uint8_t report_id, void const* report, uint16_t len) {
  return tud_hid_n_report(0, report_id, report, len);
 8000584:	88fb      	ldrh	r3, [r7, #6]
 8000586:	7bf9      	ldrb	r1, [r7, #15]
 8000588:	68ba      	ldr	r2, [r7, #8]
 800058a:	2000      	movs	r0, #0
 800058c:	f003 ffc8 	bl	8004520 <tud_hid_n_report>
 8000590:	e013      	b.n	80005ba <hid_task+0x82>
      } else if (should_send_keyboard_report) {
 8000592:	4b0d      	ldr	r3, [pc, #52]	@ (80005c8 <hid_task+0x90>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00f      	beq.n	80005ba <hid_task+0x82>
        should_send_keyboard_report = 0;
 800059a:	4b0b      	ldr	r3, [pc, #44]	@ (80005c8 <hid_task+0x90>)
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
 80005a0:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <hid_task+0x98>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2201      	movs	r2, #1
 80005a6:	717a      	strb	r2, [r7, #5]
 80005a8:	713b      	strb	r3, [r7, #4]
 80005aa:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <hid_task+0x9c>)
 80005ac:	603b      	str	r3, [r7, #0]
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
  return tud_hid_n_keyboard_report(0, report_id, modifier, keycode);
 80005ae:	793a      	ldrb	r2, [r7, #4]
 80005b0:	7979      	ldrb	r1, [r7, #5]
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	2000      	movs	r0, #0
 80005b6:	f004 f839 	bl	800462c <tud_hid_n_keyboard_report>
}
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200000a0 	.word	0x200000a0
 80005c8:	200000a1 	.word	0x200000a1
 80005cc:	200000aa 	.word	0x200000aa
 80005d0:	200000a2 	.word	0x200000a2
 80005d4:	200000a4 	.word	0x200000a4

080005d8 <hid_press_key>:

void hid_press_key(struct key *key, uint8_t layer) {
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 80005e4:	78fa      	ldrb	r2, [r7, #3]
 80005e6:	6879      	ldr	r1, [r7, #4]
 80005e8:	4613      	mov	r3, r2
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4413      	add	r3, r2
 80005ee:	440b      	add	r3, r1
 80005f0:	3305      	adds	r3, #5
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d038      	beq.n	800066a <hid_press_key+0x92>
 80005f8:	2b03      	cmp	r3, #3
 80005fa:	dc45      	bgt.n	8000688 <hid_press_key+0xb0>
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d014      	beq.n	800062a <hid_press_key+0x52>
 8000600:	2b02      	cmp	r3, #2
 8000602:	d141      	bne.n	8000688 <hid_press_key+0xb0>
  case KEY_TYPE_MODIFIER:
    modifiers |= key->layers[layer].value;
 8000604:	78fa      	ldrb	r2, [r7, #3]
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	4613      	mov	r3, r2
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	4413      	add	r3, r2
 800060e:	440b      	add	r3, r1
 8000610:	88db      	ldrh	r3, [r3, #6]
 8000612:	b29b      	uxth	r3, r3
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <hid_press_key+0xc0>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	4313      	orrs	r3, r2
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <hid_press_key+0xc0>)
 8000620:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 8000622:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <hid_press_key+0xc4>)
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
    break;
 8000628:	e02f      	b.n	800068a <hid_press_key+0xb2>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 800062a:	2300      	movs	r3, #0
 800062c:	73fb      	strb	r3, [r7, #15]
 800062e:	e018      	b.n	8000662 <hid_press_key+0x8a>
      if (keycodes[i] == 0) {
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	4a1b      	ldr	r2, [pc, #108]	@ (80006a0 <hid_press_key+0xc8>)
 8000634:	5cd3      	ldrb	r3, [r2, r3]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d110      	bne.n	800065c <hid_press_key+0x84>
        keycodes[i] = key->layers[layer].value;
 800063a:	78fa      	ldrb	r2, [r7, #3]
 800063c:	6879      	ldr	r1, [r7, #4]
 800063e:	4613      	mov	r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4413      	add	r3, r2
 8000644:	440b      	add	r3, r1
 8000646:	88db      	ldrh	r3, [r3, #6]
 8000648:	b29a      	uxth	r2, r3
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	b2d1      	uxtb	r1, r2
 800064e:	4a14      	ldr	r2, [pc, #80]	@ (80006a0 <hid_press_key+0xc8>)
 8000650:	54d1      	strb	r1, [r2, r3]
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // } else if (i == 0 && key->state.velocity > keyboard_user_config.screaming_velocity_trigger) {
        //   is_screaming = 1;
        //   modifiers |= get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 8000652:	4b12      	ldr	r3, [pc, #72]	@ (800069c <hid_press_key+0xc4>)
 8000654:	2201      	movs	r2, #1
 8000656:	701a      	strb	r2, [r3, #0]
        break;
 8000658:	bf00      	nop
      }
    }
    break;
 800065a:	e016      	b.n	800068a <hid_press_key+0xb2>
    for (uint8_t i = 0; i < 6; i++) {
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	3301      	adds	r3, #1
 8000660:	73fb      	strb	r3, [r7, #15]
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	2b05      	cmp	r3, #5
 8000666:	d9e3      	bls.n	8000630 <hid_press_key+0x58>
    break;
 8000668:	e00f      	b.n	800068a <hid_press_key+0xb2>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = key->layers[layer].value;
 800066a:	78fa      	ldrb	r2, [r7, #3]
 800066c:	6879      	ldr	r1, [r7, #4]
 800066e:	4613      	mov	r3, r2
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	4413      	add	r3, r2
 8000674:	440b      	add	r3, r1
 8000676:	88db      	ldrh	r3, [r3, #6]
 8000678:	b29b      	uxth	r3, r3
 800067a:	b2da      	uxtb	r2, r3
 800067c:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <hid_press_key+0xcc>)
 800067e:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 8000680:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <hid_press_key+0xd0>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
    break;
 8000686:	e000      	b.n	800068a <hid_press_key+0xb2>

  default:
    break;
 8000688:	bf00      	nop
  }
}
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	200000a2 	.word	0x200000a2
 800069c:	200000a1 	.word	0x200000a1
 80006a0:	200000a4 	.word	0x200000a4
 80006a4:	200000aa 	.word	0x200000aa
 80006a8:	200000a0 	.word	0x200000a0

080006ac <hid_release_key>:

void hid_release_key(struct key *key, uint8_t layer) {
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 80006b8:	78fa      	ldrb	r2, [r7, #3]
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	4613      	mov	r3, r2
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	4413      	add	r3, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	3305      	adds	r3, #5
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b03      	cmp	r3, #3
 80006ca:	d03d      	beq.n	8000748 <hid_release_key+0x9c>
 80006cc:	2b03      	cmp	r3, #3
 80006ce:	dc42      	bgt.n	8000756 <hid_release_key+0xaa>
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d018      	beq.n	8000706 <hid_release_key+0x5a>
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d13e      	bne.n	8000756 <hid_release_key+0xaa>
  case KEY_TYPE_MODIFIER:
    modifiers &= ~key->layers[layer].value;
 80006d8:	78fa      	ldrb	r2, [r7, #3]
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	4613      	mov	r3, r2
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	4413      	add	r3, r2
 80006e2:	440b      	add	r3, r1
 80006e4:	88db      	ldrh	r3, [r3, #6]
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	43db      	mvns	r3, r3
 80006ec:	b25a      	sxtb	r2, r3
 80006ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <hid_release_key+0xb8>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	4013      	ands	r3, r2
 80006f6:	b25b      	sxtb	r3, r3
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000764 <hid_release_key+0xb8>)
 80006fc:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000768 <hid_release_key+0xbc>)
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
    break;
 8000704:	e028      	b.n	8000758 <hid_release_key+0xac>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	73fb      	strb	r3, [r7, #15]
 800070a:	e019      	b.n	8000740 <hid_release_key+0x94>
      if (keycodes[i] == key->layers[layer].value) {
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	4a17      	ldr	r2, [pc, #92]	@ (800076c <hid_release_key+0xc0>)
 8000710:	5cd3      	ldrb	r3, [r2, r3]
 8000712:	4618      	mov	r0, r3
 8000714:	78fa      	ldrb	r2, [r7, #3]
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	4613      	mov	r3, r2
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	4413      	add	r3, r2
 800071e:	440b      	add	r3, r1
 8000720:	88db      	ldrh	r3, [r3, #6]
 8000722:	b29b      	uxth	r3, r3
 8000724:	4298      	cmp	r0, r3
 8000726:	d108      	bne.n	800073a <hid_release_key+0x8e>
        keycodes[i] = 0;
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	4a10      	ldr	r2, [pc, #64]	@ (800076c <hid_release_key+0xc0>)
 800072c:	2100      	movs	r1, #0
 800072e:	54d1      	strb	r1, [r2, r3]
        // if (is_screaming) {
        //   is_screaming = 0;
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 8000730:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <hid_release_key+0xbc>)
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]
        break;
 8000736:	bf00      	nop
      }
    }
    break;
 8000738:	e00e      	b.n	8000758 <hid_release_key+0xac>
    for (uint8_t i = 0; i < 6; i++) {
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	3301      	adds	r3, #1
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	2b05      	cmp	r3, #5
 8000744:	d9e2      	bls.n	800070c <hid_release_key+0x60>
    break;
 8000746:	e007      	b.n	8000758 <hid_release_key+0xac>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = 0;
 8000748:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <hid_release_key+0xc4>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <hid_release_key+0xc8>)
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
    break;
 8000754:	e000      	b.n	8000758 <hid_release_key+0xac>

  default:
    break;
 8000756:	bf00      	nop
  }
}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	200000a2 	.word	0x200000a2
 8000768:	200000a1 	.word	0x200000a1
 800076c:	200000a4 	.word	0x200000a4
 8000770:	200000aa 	.word	0x200000aa
 8000774:	200000a0 	.word	0x200000a0

08000778 <tud_hid_set_protocol_cb>:

// Invoked when received SET_PROTOCOL request
// protocol is either HID_PROTOCOL_BOOT (0) or HID_PROTOCOL_REPORT (1)
void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	460a      	mov	r2, r1
 8000782:	71fb      	strb	r3, [r7, #7]
 8000784:	4613      	mov	r3, r2
 8000786:	71bb      	strb	r3, [r7, #6]
  (void)instance;
  (void)protocol;

  // nothing to do since we use the same compatible boot report for both Boot and Report mode.
  // TOOD set a indicator for user
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <tud_hid_report_complete_cb>:
//    }
//  }
//}

void tud_hid_report_complete_cb(uint8_t instance, uint8_t const* report, uint16_t len)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	71fb      	strb	r3, [r7, #7]
 80007a0:	4613      	mov	r3, r2
 80007a2:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) len;

  uint8_t report_id = report[0];
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	73fb      	strb	r3, [r7, #15]

  switch (report_id)
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d002      	beq.n	80007b6 <tud_hid_report_complete_cb+0x22>
 80007b0:	2b02      	cmp	r3, #2
 80007b2:	d002      	beq.n	80007ba <tud_hid_report_complete_cb+0x26>
    case REPORT_ID_CONSUMER_CONTROL:
      // Consumer control report sent successfully
      break;

    default:
      break;
 80007b4:	e002      	b.n	80007bc <tud_hid_report_complete_cb+0x28>
      break;
 80007b6:	bf00      	nop
 80007b8:	e000      	b.n	80007bc <tud_hid_report_complete_cb+0x28>
      break;
 80007ba:	bf00      	nop
  }
}
 80007bc:	bf00      	nop
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <tud_cdc_line_state_cb>:

// CDC

// Invoked when cdc when line state changed e.g connected/disconnected
void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
 80007d2:	460b      	mov	r3, r1
 80007d4:	71bb      	strb	r3, [r7, #6]
 80007d6:	4613      	mov	r3, r2
 80007d8:	717b      	strb	r3, [r7, #5]
  (void)itf;

  // connected
  if (dtr && rts)
 80007da:	79bb      	ldrb	r3, [r7, #6]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d00f      	beq.n	8000800 <tud_cdc_line_state_cb+0x38>
 80007e0:	797b      	ldrb	r3, [r7, #5]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d00c      	beq.n	8000800 <tud_cdc_line_state_cb+0x38>
 80007e6:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <tud_cdc_line_state_cb+0x40>)
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	2300      	movs	r3, #0
 80007ec:	74fb      	strb	r3, [r7, #19]
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	60fb      	str	r3, [r7, #12]
  return tud_cdc_n_write(itf, &ch, 1);
}

// Write a null-terminated string
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_n_write_str(uint8_t itf, char const* str) {
  return tud_cdc_n_write(itf, str, strlen(str));
 80007f2:	2221      	movs	r2, #33	@ 0x21
 80007f4:	7cfb      	ldrb	r3, [r7, #19]
 80007f6:	68f9      	ldr	r1, [r7, #12]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f003 f9fb 	bl	8003bf4 <tud_cdc_n_write>
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write(void const* buffer, uint32_t bufsize) {
  return tud_cdc_n_write(0, buffer, bufsize);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_str(char const* str) {
  return tud_cdc_n_write_str(0, str);
 80007fe:	bf00      	nop
  {
    // print initial message when connected
    tud_cdc_write_str("\r\nTinyUSB WebUSB device example\r\n");
  }
}
 8000800:	bf00      	nop
 8000802:	3718      	adds	r7, #24
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	08009a5c 	.word	0x08009a5c

0800080c <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  (void)itf;
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <get_bitmask_for_modifier>:

static uint8_t key_triggered = 0;

struct key* current_pressed_key = NULL;

uint8_t get_bitmask_for_modifier(uint8_t keycode) {
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
  switch (keycode) {
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	3be0      	subs	r3, #224	@ 0xe0
 8000832:	2b07      	cmp	r3, #7
 8000834:	d822      	bhi.n	800087c <get_bitmask_for_modifier+0x58>
 8000836:	a201      	add	r2, pc, #4	@ (adr r2, 800083c <get_bitmask_for_modifier+0x18>)
 8000838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083c:	0800085d 	.word	0x0800085d
 8000840:	08000861 	.word	0x08000861
 8000844:	08000865 	.word	0x08000865
 8000848:	08000869 	.word	0x08000869
 800084c:	0800086d 	.word	0x0800086d
 8000850:	08000871 	.word	0x08000871
 8000854:	08000875 	.word	0x08000875
 8000858:	08000879 	.word	0x08000879
  case HID_KEY_CONTROL_LEFT:
    return 0b00000001;
 800085c:	2301      	movs	r3, #1
 800085e:	e00e      	b.n	800087e <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_LEFT:
    return 0b00000010;
 8000860:	2302      	movs	r3, #2
 8000862:	e00c      	b.n	800087e <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_LEFT:
    return 0b00000100;
 8000864:	2304      	movs	r3, #4
 8000866:	e00a      	b.n	800087e <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_LEFT:
    return 0b00001000;
 8000868:	2308      	movs	r3, #8
 800086a:	e008      	b.n	800087e <get_bitmask_for_modifier+0x5a>
  case HID_KEY_CONTROL_RIGHT:
    return 0b00010000;
 800086c:	2310      	movs	r3, #16
 800086e:	e006      	b.n	800087e <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_RIGHT:
    return 0b00100000;
 8000870:	2320      	movs	r3, #32
 8000872:	e004      	b.n	800087e <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_RIGHT:
    return 0b01000000;
 8000874:	2340      	movs	r3, #64	@ 0x40
 8000876:	e002      	b.n	800087e <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_RIGHT:
    return 0b10000000;
 8000878:	2380      	movs	r3, #128	@ 0x80
 800087a:	e000      	b.n	800087e <get_bitmask_for_modifier+0x5a>
  default:
    return 0b00000000;
 800087c:	2300      	movs	r3, #0
  }
}
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop

0800088c <get_usage_consumer_control>:

uint16_t get_usage_consumer_control(uint16_t value) {
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	80fb      	strh	r3, [r7, #6]
  if (value > 0xFF) {
 8000896:	88fb      	ldrh	r3, [r7, #6]
 8000898:	2bff      	cmp	r3, #255	@ 0xff
 800089a:	d904      	bls.n	80008a6 <get_usage_consumer_control+0x1a>
    return value & 0b0111111111111111;
 800089c:	88fb      	ldrh	r3, [r7, #6]
 800089e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	e000      	b.n	80008a8 <get_usage_consumer_control+0x1c>
  } else {
    return 0;
 80008a6:	2300      	movs	r3, #0
  }
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <init_key>:

void init_key(uint8_t adc_channel, uint8_t amux_channel, uint8_t row, uint8_t column) {
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b087      	sub	sp, #28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4604      	mov	r4, r0
 80008bc:	4608      	mov	r0, r1
 80008be:	4611      	mov	r1, r2
 80008c0:	461a      	mov	r2, r3
 80008c2:	4623      	mov	r3, r4
 80008c4:	71fb      	strb	r3, [r7, #7]
 80008c6:	4603      	mov	r3, r0
 80008c8:	71bb      	strb	r3, [r7, #6]
 80008ca:	460b      	mov	r3, r1
 80008cc:	717b      	strb	r3, [r7, #5]
 80008ce:	4613      	mov	r3, r2
 80008d0:	713b      	strb	r3, [r7, #4]
  struct key *key = &keyboard_keys[adc_channel][amux_channel];
 80008d2:	79f9      	ldrb	r1, [r7, #7]
 80008d4:	79ba      	ldrb	r2, [r7, #6]
 80008d6:	4613      	mov	r3, r2
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	4413      	add	r3, r2
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	1a9b      	subs	r3, r3, r2
 80008e0:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80008e4:	fb01 f202 	mul.w	r2, r1, r2
 80008e8:	4413      	add	r3, r2
 80008ea:	4a61      	ldr	r2, [pc, #388]	@ (8000a70 <init_key+0x1bc>)
 80008ec:	4413      	add	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]

  key->is_enabled = 1;
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
  key->is_idle = 0;
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	2200      	movs	r2, #0
 80008fa:	711a      	strb	r2, [r3, #4]
  key->row = row;
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	797a      	ldrb	r2, [r7, #5]
 8000900:	705a      	strb	r2, [r3, #1]
  key->column = column;
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	793a      	ldrb	r2, [r7, #4]
 8000906:	709a      	strb	r2, [r3, #2]

  key->calibration.cycles_count = 0;
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	2200      	movs	r2, #0
 800090c:	72da      	strb	r2, [r3, #11]
 800090e:	2200      	movs	r2, #0
 8000910:	731a      	strb	r2, [r3, #12]
  key->calibration.idle_value = IDLE_VALUE_APPROX;
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	2200      	movs	r2, #0
 8000916:	f042 0208 	orr.w	r2, r2, #8
 800091a:	735a      	strb	r2, [r3, #13]
 800091c:	2200      	movs	r2, #0
 800091e:	f042 0207 	orr.w	r2, r2, #7
 8000922:	739a      	strb	r2, [r3, #14]
  key->calibration.max_distance = MAX_DISTANCE_APPROX;
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	2200      	movs	r2, #0
 8000928:	f062 020b 	orn	r2, r2, #11
 800092c:	73da      	strb	r2, [r3, #15]
 800092e:	2200      	movs	r2, #0
 8000930:	f042 0201 	orr.w	r2, r2, #1
 8000934:	741a      	strb	r2, [r3, #16]

  key->actuation.status = STATUS_RESET;
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	2203      	movs	r2, #3
 800093a:	779a      	strb	r2, [r3, #30]
  key->actuation.trigger_offset = keyboard_user_config.trigger_offset;
 800093c:	4b4d      	ldr	r3, [pc, #308]	@ (8000a74 <init_key+0x1c0>)
 800093e:	785a      	ldrb	r2, [r3, #1]
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	f883 2020 	strb.w	r2, [r3, #32]
  key->actuation.reset_offset = keyboard_user_config.trigger_offset - keyboard_user_config.reset_threshold;
 8000946:	4b4b      	ldr	r3, [pc, #300]	@ (8000a74 <init_key+0x1c0>)
 8000948:	785a      	ldrb	r2, [r3, #1]
 800094a:	4b4a      	ldr	r3, [pc, #296]	@ (8000a74 <init_key+0x1c0>)
 800094c:	789b      	ldrb	r3, [r3, #2]
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	b2da      	uxtb	r2, r3
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	77da      	strb	r2, [r3, #31]
  key->actuation.rapid_trigger_offset = keyboard_user_config.rapid_trigger_offset;
 8000956:	4b47      	ldr	r3, [pc, #284]	@ (8000a74 <init_key+0x1c0>)
 8000958:	78da      	ldrb	r2, [r3, #3]
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  key->actuation.is_continuous_rapid_trigger_enabled = 0;
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	2200      	movs	r2, #0
 8000964:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8000968:	2300      	movs	r3, #0
 800096a:	75fb      	strb	r3, [r7, #23]
 800096c:	e078      	b.n	8000a60 <init_key+0x1ac>
    if (keyboard_user_config.keymaps[i][row][column] != ____) {
 800096e:	7df9      	ldrb	r1, [r7, #23]
 8000970:	797a      	ldrb	r2, [r7, #5]
 8000972:	793b      	ldrb	r3, [r7, #4]
 8000974:	483f      	ldr	r0, [pc, #252]	@ (8000a74 <init_key+0x1c0>)
 8000976:	0089      	lsls	r1, r1, #2
 8000978:	440a      	add	r2, r1
 800097a:	0092      	lsls	r2, r2, #2
 800097c:	4413      	add	r3, r2
 800097e:	3304      	adds	r3, #4
 8000980:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d068      	beq.n	8000a5a <init_key+0x1a6>
      uint16_t usage_consumer_control = get_usage_consumer_control(keyboard_user_config.keymaps[i][row][column]);
 8000988:	7df9      	ldrb	r1, [r7, #23]
 800098a:	797a      	ldrb	r2, [r7, #5]
 800098c:	793b      	ldrb	r3, [r7, #4]
 800098e:	4839      	ldr	r0, [pc, #228]	@ (8000a74 <init_key+0x1c0>)
 8000990:	0089      	lsls	r1, r1, #2
 8000992:	440a      	add	r2, r1
 8000994:	0092      	lsls	r2, r2, #2
 8000996:	4413      	add	r3, r2
 8000998:	3304      	adds	r3, #4
 800099a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff74 	bl	800088c <get_usage_consumer_control>
 80009a4:	4603      	mov	r3, r0
 80009a6:	81fb      	strh	r3, [r7, #14]
      if (usage_consumer_control) {
 80009a8:	89fb      	ldrh	r3, [r7, #14]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d011      	beq.n	80009d2 <init_key+0x11e>
        key->layers[i].type = KEY_TYPE_CONSUMER_CONTROL;
 80009ae:	7dfa      	ldrb	r2, [r7, #23]
 80009b0:	6939      	ldr	r1, [r7, #16]
 80009b2:	4613      	mov	r3, r2
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	4413      	add	r3, r2
 80009b8:	440b      	add	r3, r1
 80009ba:	3305      	adds	r3, #5
 80009bc:	2203      	movs	r2, #3
 80009be:	701a      	strb	r2, [r3, #0]
        key->layers[i].value = usage_consumer_control;
 80009c0:	7dfa      	ldrb	r2, [r7, #23]
 80009c2:	6939      	ldr	r1, [r7, #16]
 80009c4:	4613      	mov	r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	440b      	add	r3, r1
 80009cc:	89fa      	ldrh	r2, [r7, #14]
 80009ce:	80da      	strh	r2, [r3, #6]
 80009d0:	e043      	b.n	8000a5a <init_key+0x1a6>
      } else {
        uint8_t bitmask = get_bitmask_for_modifier(keyboard_user_config.keymaps[i][row][column]);
 80009d2:	7df9      	ldrb	r1, [r7, #23]
 80009d4:	797a      	ldrb	r2, [r7, #5]
 80009d6:	793b      	ldrb	r3, [r7, #4]
 80009d8:	4826      	ldr	r0, [pc, #152]	@ (8000a74 <init_key+0x1c0>)
 80009da:	0089      	lsls	r1, r1, #2
 80009dc:	440a      	add	r2, r1
 80009de:	0092      	lsls	r2, r2, #2
 80009e0:	4413      	add	r3, r2
 80009e2:	3304      	adds	r3, #4
 80009e4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ff1a 	bl	8000824 <get_bitmask_for_modifier>
 80009f0:	4603      	mov	r3, r0
 80009f2:	737b      	strb	r3, [r7, #13]
        if (bitmask) {
 80009f4:	7b7b      	ldrb	r3, [r7, #13]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d013      	beq.n	8000a22 <init_key+0x16e>
          key->layers[i].type = KEY_TYPE_MODIFIER;
 80009fa:	7dfa      	ldrb	r2, [r7, #23]
 80009fc:	6939      	ldr	r1, [r7, #16]
 80009fe:	4613      	mov	r3, r2
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	4413      	add	r3, r2
 8000a04:	440b      	add	r3, r1
 8000a06:	3305      	adds	r3, #5
 8000a08:	2202      	movs	r2, #2
 8000a0a:	701a      	strb	r2, [r3, #0]
          key->layers[i].value = bitmask;
 8000a0c:	7dfa      	ldrb	r2, [r7, #23]
 8000a0e:	7b7b      	ldrb	r3, [r7, #13]
 8000a10:	b298      	uxth	r0, r3
 8000a12:	6939      	ldr	r1, [r7, #16]
 8000a14:	4613      	mov	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4413      	add	r3, r2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	80da      	strh	r2, [r3, #6]
 8000a20:	e01b      	b.n	8000a5a <init_key+0x1a6>
        } else {
          key->layers[i].type = KEY_TYPE_NORMAL;
 8000a22:	7dfa      	ldrb	r2, [r7, #23]
 8000a24:	6939      	ldr	r1, [r7, #16]
 8000a26:	4613      	mov	r3, r2
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	4413      	add	r3, r2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	3305      	adds	r3, #5
 8000a30:	2201      	movs	r2, #1
 8000a32:	701a      	strb	r2, [r3, #0]
          key->layers[i].value = keyboard_user_config.keymaps[i][row][column];
 8000a34:	7df8      	ldrb	r0, [r7, #23]
 8000a36:	7979      	ldrb	r1, [r7, #5]
 8000a38:	793b      	ldrb	r3, [r7, #4]
 8000a3a:	7dfa      	ldrb	r2, [r7, #23]
 8000a3c:	4c0d      	ldr	r4, [pc, #52]	@ (8000a74 <init_key+0x1c0>)
 8000a3e:	0080      	lsls	r0, r0, #2
 8000a40:	4401      	add	r1, r0
 8000a42:	0089      	lsls	r1, r1, #2
 8000a44:	440b      	add	r3, r1
 8000a46:	3304      	adds	r3, #4
 8000a48:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
 8000a4c:	6939      	ldr	r1, [r7, #16]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	4413      	add	r3, r2
 8000a54:	440b      	add	r3, r1
 8000a56:	4602      	mov	r2, r0
 8000a58:	80da      	strh	r2, [r3, #6]
  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8000a5a:	7dfb      	ldrb	r3, [r7, #23]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	75fb      	strb	r3, [r7, #23]
 8000a60:	7dfb      	ldrb	r3, [r7, #23]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d983      	bls.n	800096e <init_key+0xba>
        }
      }
    }
  }
}
 8000a66:	bf00      	nop
 8000a68:	bf00      	nop
 8000a6a:	371c      	adds	r7, #28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd90      	pop	{r4, r7, pc}
 8000a70:	200000ac 	.word	0x200000ac
 8000a74:	20000000 	.word	0x20000000

08000a78 <update_key_state>:

uint8_t update_key_state(struct key *key) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  struct state state;

  // Get a reading
  state.value = keyboard_user_config.reverse_magnet_pole ? 4095 - keyboard_read_adc() : keyboard_read_adc();
 8000a80:	4ba5      	ldr	r3, [pc, #660]	@ (8000d18 <update_key_state+0x2a0>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d007      	beq.n	8000a98 <update_key_state+0x20>
 8000a88:	f000 fd14 	bl	80014b4 <keyboard_read_adc>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8000a92:	330f      	adds	r3, #15
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	e002      	b.n	8000a9e <update_key_state+0x26>
 8000a98:	f000 fd0c 	bl	80014b4 <keyboard_read_adc>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	813b      	strh	r3, [r7, #8]

  if (key->calibration.cycles_count < CALIBRATION_CYCLES) {
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	2b13      	cmp	r3, #19
 8000aaa:	d82f      	bhi.n	8000b0c <update_key_state+0x94>
    // Calibrate idle value
    float delta = 0.6;
 8000aac:	4b9b      	ldr	r3, [pc, #620]	@ (8000d1c <update_key_state+0x2a4>)
 8000aae:	617b      	str	r3, [r7, #20]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8000ab0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ab4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ab8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000abc:	893b      	ldrh	r3, [r7, #8]
 8000abe:	ee07 3a90 	vmov	s15, r3
 8000ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ac6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	ee07 3a90 	vmov	s15, r3
 8000ad6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ada:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ade:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aea:	ee17 3a90 	vmov	r3, s15
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f8a3 200d 	strh.w	r2, [r3, #13]
    key->calibration.cycles_count++;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	3301      	adds	r3, #1
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f8a3 200b 	strh.w	r2, [r3, #11]

    return 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	e101      	b.n	8000d10 <update_key_state+0x298>
  }

  // Calibrate idle value
  if (state.value > key->calibration.idle_value) {
 8000b0c:	893a      	ldrh	r2, [r7, #8]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d929      	bls.n	8000b6e <update_key_state+0xf6>
    // opti possible sur float
    float delta = 0.8;
 8000b1a:	4b81      	ldr	r3, [pc, #516]	@ (8000d20 <update_key_state+0x2a8>)
 8000b1c:	61fb      	str	r3, [r7, #28]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8000b1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000b22:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b2a:	893b      	ldrh	r3, [r7, #8]
 8000b2c:	ee07 3a90 	vmov	s15, r3
 8000b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	ee07 3a90 	vmov	s15, r3
 8000b44:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b48:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b58:	ee17 3a90 	vmov	r3, s15
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f8a3 200d 	strh.w	r2, [r3, #13]
    state.value = key->calibration.idle_value;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	813b      	strh	r3, [r7, #8]
  }

  // Do nothing if key is idle
  if (key->state.distance == 0 && state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f8b3 3013 	ldrh.w	r3, [r3, #19]
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d117      	bne.n	8000baa <update_key_state+0x132>
 8000b7a:	893b      	ldrh	r3, [r7, #8]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	3b0a      	subs	r3, #10
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	db0e      	blt.n	8000baa <update_key_state+0x132>
    if (key->idle_counter >= IDLE_CYCLES_UNTIL_SLEEP) {
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	78db      	ldrb	r3, [r3, #3]
 8000b90:	2b0e      	cmp	r3, #14
 8000b92:	d904      	bls.n	8000b9e <update_key_state+0x126>
      key->is_idle = 1;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2201      	movs	r2, #1
 8000b98:	711a      	strb	r2, [r3, #4]
      return 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e0b8      	b.n	8000d10 <update_key_state+0x298>
    }
    key->idle_counter++;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	78db      	ldrb	r3, [r3, #3]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	70da      	strb	r2, [r3, #3]
  }

  // Get distance from top
  if (state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8000baa:	893b      	ldrh	r3, [r7, #8]
 8000bac:	461a      	mov	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	3b0a      	subs	r3, #10
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	db05      	blt.n	8000bc8 <update_key_state+0x150>
    state.distance = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	817b      	strh	r3, [r7, #10]
    key->actuation.direction_changed_point = 0;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	775a      	strb	r2, [r3, #29]
 8000bc6:	e00f      	b.n	8000be8 <update_key_state+0x170>
  } else {
    state.distance = key->calibration.idle_value - IDLE_VALUE_OFFSET - state.value;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	893b      	ldrh	r3, [r7, #8]
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	3b0a      	subs	r3, #10
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	817b      	strh	r3, [r7, #10]
    key->is_idle = 0;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	711a      	strb	r2, [r3, #4]
    key->idle_counter = 0;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	70da      	strb	r2, [r3, #3]
  }

  // Calibrate max distance value
  if (state.distance > key->calibration.max_distance) {
 8000be8:	897a      	ldrh	r2, [r7, #10]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d903      	bls.n	8000bfe <update_key_state+0x186>
    key->calibration.max_distance = state.distance;
 8000bf6:	897a      	ldrh	r2, [r7, #10]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f8a3 200f 	strh.w	r2, [r3, #15]
  }

  // Limit max distance
  if (state.distance >= key->calibration.max_distance - MAX_DISTANCE_OFFSET) {
 8000bfe:	897b      	ldrh	r3, [r7, #10]
 8000c00:	461a      	mov	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	3b3c      	subs	r3, #60	@ 0x3c
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	db04      	blt.n	8000c1a <update_key_state+0x1a2>
    state.distance = key->calibration.max_distance;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	817b      	strh	r3, [r7, #10]
  }

  // Map distance in percentages
  state.distance_8bits = (state.distance * 0xff) / key->calibration.max_distance;
 8000c1a:	897b      	ldrh	r3, [r7, #10]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4613      	mov	r3, r2
 8000c20:	021b      	lsls	r3, r3, #8
 8000c22:	1a9b      	subs	r3, r3, r2
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	f8b2 200f 	ldrh.w	r2, [r2, #15]
 8000c2a:	b292      	uxth	r2, r2
 8000c2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	733b      	strb	r3, [r7, #12]

  float delta = 0.8;
 8000c34:	4b3a      	ldr	r3, [pc, #232]	@ (8000d20 <update_key_state+0x2a8>)
 8000c36:	61bb      	str	r3, [r7, #24]
  state.filtered_distance = (1 - delta) * state.distance_8bits + delta * key->state.filtered_distance;
 8000c38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000c3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c44:	7b3b      	ldrb	r3, [r7, #12]
 8000c46:	ee07 3a90 	vmov	s15, r3
 8000c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000c58:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c5c:	ee06 3a90 	vmov	s13, r3
 8000c60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c68:	ee17 3a90 	vmov	r3, s15
 8000c6c:	f8c7 300d 	str.w	r3, [r7, #13]
  state.filtered_distance_8bits = state.filtered_distance;
 8000c70:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8000c74:	ee07 3a90 	vmov	s15, r3
 8000c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c7c:	edc7 7a00 	vstr	s15, [r7]
 8000c80:	783b      	ldrb	r3, [r7, #0]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	74bb      	strb	r3, [r7, #18]

  // Update velocity
  state.velocity = state.filtered_distance_8bits - key->state.filtered_distance_8bits;
 8000c86:	7cba      	ldrb	r2, [r7, #18]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	7edb      	ldrb	r3, [r3, #27]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	747b      	strb	r3, [r7, #17]

  // Update direction
  if (key->state.velocity > 0 && state.velocity > 0 && key->actuation.direction != GOING_DOWN) {
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	dd13      	ble.n	8000cc6 <update_key_state+0x24e>
 8000c9e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	dd0f      	ble.n	8000cc6 <update_key_state+0x24e>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	7f1b      	ldrb	r3, [r3, #28]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d00b      	beq.n	8000cc6 <update_key_state+0x24e>
    key->actuation.direction = GOING_DOWN;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	771a      	strb	r2, [r3, #28]
    if (key->actuation.direction_changed_point != 0) {
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	7f5b      	ldrb	r3, [r3, #29]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d01c      	beq.n	8000cf6 <update_key_state+0x27e>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	7eda      	ldrb	r2, [r3, #27]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	775a      	strb	r2, [r3, #29]
    if (key->actuation.direction_changed_point != 0) {
 8000cc4:	e017      	b.n	8000cf6 <update_key_state+0x27e>
    }
  } else if (key->state.velocity < 0 && state.velocity < 0 && key->actuation.direction != GOING_UP) {
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	da12      	bge.n	8000cf6 <update_key_state+0x27e>
 8000cd0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	da0e      	bge.n	8000cf6 <update_key_state+0x27e>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	7f1b      	ldrb	r3, [r3, #28]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d00a      	beq.n	8000cf6 <update_key_state+0x27e>
    key->actuation.direction = GOING_UP;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	771a      	strb	r2, [r3, #28]
    if (key->actuation.direction_changed_point != 255) {
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	7f5b      	ldrb	r3, [r3, #29]
 8000cea:	2bff      	cmp	r3, #255	@ 0xff
 8000cec:	d003      	beq.n	8000cf6 <update_key_state+0x27e>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	7eda      	ldrb	r2, [r3, #27]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	775a      	strb	r2, [r3, #29]
    }
  }

  key->state = state;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f103 0211 	add.w	r2, r3, #17
 8000cfc:	f107 0308 	add.w	r3, r7, #8
 8000d00:	cb03      	ldmia	r3!, {r0, r1}
 8000d02:	6010      	str	r0, [r2, #0]
 8000d04:	6051      	str	r1, [r2, #4]
 8000d06:	8819      	ldrh	r1, [r3, #0]
 8000d08:	789b      	ldrb	r3, [r3, #2]
 8000d0a:	8111      	strh	r1, [r2, #8]
 8000d0c:	7293      	strb	r3, [r2, #10]
  return 1;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3720      	adds	r7, #32
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	3f19999a 	.word	0x3f19999a
 8000d20:	3f4ccccd 	.word	0x3f4ccccd

08000d24 <update_key_actuation>:

void update_key_actuation(struct key *key) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
   *
   */

  // if rapid trigger enable, move trigger and reset offsets according to the distance taht began the trigger

  uint32_t now = keyboard_get_time();
 8000d2c:	f000 fbd8 	bl	80014e0 <keyboard_get_time>
 8000d30:	6178      	str	r0, [r7, #20]
  uint8_t is_after_trigger_offset = key->state.distance_8bits > key->actuation.trigger_offset;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7d5a      	ldrb	r2, [r3, #21]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	bf8c      	ite	hi
 8000d40:	2301      	movhi	r3, #1
 8000d42:	2300      	movls	r3, #0
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	74fb      	strb	r3, [r7, #19]
  uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	7d5a      	ldrb	r2, [r3, #21]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	7fdb      	ldrb	r3, [r3, #31]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	bf34      	ite	cc
 8000d54:	2301      	movcc	r3, #1
 8000d56:	2300      	movcs	r3, #0
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	74bb      	strb	r3, [r7, #18]
  uint8_t has_rapid_trigger = key->actuation.rapid_trigger_offset != 0;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	bf14      	ite	ne
 8000d66:	2301      	movne	r3, #1
 8000d68:	2300      	moveq	r3, #0
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	747b      	strb	r3, [r7, #17]
  uint8_t is_after_rapid_trigger_offset = key->state.distance_8bits > key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset + keyboard_user_config.reset_threshold;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	7d5b      	ldrb	r3, [r3, #21]
 8000d72:	4619      	mov	r1, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7f5b      	ldrb	r3, [r3, #29]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	4a54      	ldr	r2, [pc, #336]	@ (8000ed4 <update_key_actuation+0x1b0>)
 8000d84:	7892      	ldrb	r2, [r2, #2]
 8000d86:	4413      	add	r3, r2
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	bfcc      	ite	gt
 8000d8c:	2301      	movgt	r3, #1
 8000d8e:	2300      	movle	r3, #0
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	743b      	strb	r3, [r7, #16]
  uint8_t is_before_rapid_reset_offset = key->state.distance_8bits < key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	7d5b      	ldrb	r3, [r3, #21]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7f5b      	ldrb	r3, [r3, #29]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000da6:	1acb      	subs	r3, r1, r3
 8000da8:	429a      	cmp	r2, r3
 8000daa:	bfb4      	ite	lt
 8000dac:	2301      	movlt	r3, #1
 8000dae:	2300      	movge	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	73fb      	strb	r3, [r7, #15]

  switch (key->actuation.status) {
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7f9b      	ldrb	r3, [r3, #30]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d87f      	bhi.n	8000ebe <update_key_actuation+0x19a>
 8000dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc4 <update_key_actuation+0xa0>)
 8000dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc4:	08000e75 	.word	0x08000e75
 8000dc8:	08000e85 	.word	0x08000e85
 8000dcc:	08000dd5 	.word	0x08000dd5
 8000dd0:	08000e0d 	.word	0x08000e0d

  case STATUS_RESET:
    // if reset, can be triggered or tap
    if (is_after_trigger_offset) {
 8000dd4:	7cfb      	ldrb	r3, [r7, #19]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d073      	beq.n	8000ec2 <update_key_actuation+0x19e>
      if (key->layers[_TAP_LAYER].value) {
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <update_key_actuation+0xca>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	779a      	strb	r2, [r3, #30]
 8000dec:	e009      	b.n	8000e02 <update_key_actuation+0xde>
        // key_triggered = 1;
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2202      	movs	r2, #2
 8000df2:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 8000df4:	4b38      	ldr	r3, [pc, #224]	@ (8000ed8 <update_key_actuation+0x1b4>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, _BASE_LAYER);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff fbeb 	bl	80005d8 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	f8c3 2023 	str.w	r2, [r3, #35]	@ 0x23
    }
    break;
 8000e0a:	e05a      	b.n	8000ec2 <update_key_actuation+0x19e>

  case STATUS_RAPID_TRIGGER_RESET:
    if (!has_rapid_trigger) {
 8000e0c:	7c7b      	ldrb	r3, [r7, #17]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d103      	bne.n	8000e1a <update_key_actuation+0xf6>
      key->actuation.status = STATUS_RESET;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2203      	movs	r2, #3
 8000e16:	779a      	strb	r2, [r3, #30]
      break;
 8000e18:	e058      	b.n	8000ecc <update_key_actuation+0x1a8>
    }
    // if reset, can be triggered or tap
    if (is_after_trigger_offset && key->actuation.direction == GOING_DOWN && is_after_rapid_trigger_offset) {
 8000e1a:	7cfb      	ldrb	r3, [r7, #19]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d022      	beq.n	8000e66 <update_key_actuation+0x142>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	7f1b      	ldrb	r3, [r3, #28]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d11e      	bne.n	8000e66 <update_key_actuation+0x142>
 8000e28:	7c3b      	ldrb	r3, [r7, #16]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d01b      	beq.n	8000e66 <update_key_actuation+0x142>
      if (key->layers[_TAP_LAYER].value) {
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d006      	beq.n	8000e48 <update_key_actuation+0x124>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 8000e40:	4b25      	ldr	r3, [pc, #148]	@ (8000ed8 <update_key_actuation+0x1b4>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
 8000e46:	e009      	b.n	8000e5c <update_key_actuation+0x138>
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 8000e4e:	4b22      	ldr	r3, [pc, #136]	@ (8000ed8 <update_key_actuation+0x1b4>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, _BASE_LAYER);
 8000e54:	2100      	movs	r1, #0
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff fbbe 	bl	80005d8 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	f8c3 2023 	str.w	r2, [r3, #35]	@ 0x23
    } else if (is_before_reset_offset) {
      key->actuation.status = STATUS_RESET;
    }
    break;
 8000e64:	e02f      	b.n	8000ec6 <update_key_actuation+0x1a2>
    } else if (is_before_reset_offset) {
 8000e66:	7cbb      	ldrb	r3, [r7, #18]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d02c      	beq.n	8000ec6 <update_key_actuation+0x1a2>
      key->actuation.status = STATUS_RESET;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2203      	movs	r2, #3
 8000e70:	779a      	strb	r2, [r3, #30]
    break;
 8000e72:	e028      	b.n	8000ec6 <update_key_actuation+0x1a2>

  case STATUS_TAP:
    // if tap, can be reset
    key->actuation.status = STATUS_RESET;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2203      	movs	r2, #3
 8000e78:	779a      	strb	r2, [r3, #30]
    hid_release_key(key, _TAP_LAYER);
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff fc15 	bl	80006ac <hid_release_key>
    break;
 8000e82:	e023      	b.n	8000ecc <update_key_actuation+0x1a8>

  case STATUS_TRIGGERED:
    // if triggered, can be reset
    if (is_before_reset_offset) {
 8000e84:	7cbb      	ldrb	r3, [r7, #18]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d007      	beq.n	8000e9a <update_key_actuation+0x176>
      key->actuation.status = STATUS_RESET;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	779a      	strb	r2, [r3, #30]
      hid_release_key(key, _BASE_LAYER);
 8000e90:	2100      	movs	r1, #0
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff fc0a 	bl	80006ac <hid_release_key>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
      hid_release_key(key, _BASE_LAYER);
    }
    break;
 8000e98:	e017      	b.n	8000eca <update_key_actuation+0x1a6>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
 8000e9a:	7c7b      	ldrb	r3, [r7, #17]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d014      	beq.n	8000eca <update_key_actuation+0x1a6>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	7f1b      	ldrb	r3, [r3, #28]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d110      	bne.n	8000eca <update_key_actuation+0x1a6>
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d00d      	beq.n	8000eca <update_key_actuation+0x1a6>
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	779a      	strb	r2, [r3, #30]
      hid_release_key(key, _BASE_LAYER);
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff fbf8 	bl	80006ac <hid_release_key>
    break;
 8000ebc:	e005      	b.n	8000eca <update_key_actuation+0x1a6>

  default:
    break;
 8000ebe:	bf00      	nop
 8000ec0:	e004      	b.n	8000ecc <update_key_actuation+0x1a8>
    break;
 8000ec2:	bf00      	nop
 8000ec4:	e002      	b.n	8000ecc <update_key_actuation+0x1a8>
    break;
 8000ec6:	bf00      	nop
 8000ec8:	e000      	b.n	8000ecc <update_key_actuation+0x1a8>
    break;
 8000eca:	bf00      	nop
  }
}
 8000ecc:	bf00      	nop
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	2000031c 	.word	0x2000031c

08000edc <update_key>:

void update_key(struct key *key) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  if (!update_key_state(key)) {
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fdc7 	bl	8000a78 <update_key_state>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <update_key+0x1c>
    return;
  }

  update_key_actuation(key);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff17 	bl	8000d24 <update_key_actuation>
 8000ef6:	e000      	b.n	8000efa <update_key+0x1e>
    return;
 8000ef8:	bf00      	nop
}
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <keyboard_init_keys>:

void keyboard_init_keys() {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0

  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8000f06:	2300      	movs	r3, #0
 8000f08:	71fb      	strb	r3, [r7, #7]
 8000f0a:	e027      	b.n	8000f5c <keyboard_init_keys+0x5c>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	71bb      	strb	r3, [r7, #6]
 8000f10:	e01e      	b.n	8000f50 <keyboard_init_keys+0x50>
      if (channels_by_row_col[row][col][0] != XXXX) {
 8000f12:	79fa      	ldrb	r2, [r7, #7]
 8000f14:	79bb      	ldrb	r3, [r7, #6]
 8000f16:	4915      	ldr	r1, [pc, #84]	@ (8000f6c <keyboard_init_keys+0x6c>)
 8000f18:	0092      	lsls	r2, r2, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8000f20:	2bff      	cmp	r3, #255	@ 0xff
 8000f22:	d012      	beq.n	8000f4a <keyboard_init_keys+0x4a>
        init_key(channels_by_row_col[row][col][0], channels_by_row_col[row][col][1], row, col);
 8000f24:	79fa      	ldrb	r2, [r7, #7]
 8000f26:	79bb      	ldrb	r3, [r7, #6]
 8000f28:	4910      	ldr	r1, [pc, #64]	@ (8000f6c <keyboard_init_keys+0x6c>)
 8000f2a:	0092      	lsls	r2, r2, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 8000f32:	79fa      	ldrb	r2, [r7, #7]
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	490d      	ldr	r1, [pc, #52]	@ (8000f6c <keyboard_init_keys+0x6c>)
 8000f38:	0092      	lsls	r2, r2, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	440b      	add	r3, r1
 8000f40:	7859      	ldrb	r1, [r3, #1]
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	79fa      	ldrb	r2, [r7, #7]
 8000f46:	f7ff fcb5 	bl	80008b4 <init_key>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8000f4a:	79bb      	ldrb	r3, [r7, #6]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	71bb      	strb	r3, [r7, #6]
 8000f50:	79bb      	ldrb	r3, [r7, #6]
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d9dd      	bls.n	8000f12 <keyboard_init_keys+0x12>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d9d4      	bls.n	8000f0c <keyboard_init_keys+0xc>
      }
    }
  }
}
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	08009ad8 	.word	0x08009ad8

08000f70 <keyboard_task>:
void keyboard_task() {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 8000f76:	f000 fab3 	bl	80014e0 <keyboard_get_time>
 8000f7a:	60b8      	str	r0, [r7, #8]
  key_triggered = 0;
 8000f7c:	4b61      	ldr	r3, [pc, #388]	@ (8001104 <keyboard_task+0x194>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]
 8000f86:	e039      	b.n	8000ffc <keyboard_task+0x8c>
    keyboard_select_amux(amux_channel);
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 fa4e 	bl	800142c <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8000f90:	2300      	movs	r3, #0
 8000f92:	73bb      	strb	r3, [r7, #14]
 8000f94:	e02c      	b.n	8000ff0 <keyboard_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 8000f96:	7bb9      	ldrb	r1, [r7, #14]
 8000f98:	7bfa      	ldrb	r2, [r7, #15]
 8000f9a:	485b      	ldr	r0, [pc, #364]	@ (8001108 <keyboard_task+0x198>)
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	1a9b      	subs	r3, r3, r2
 8000fa6:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8000faa:	fb01 f202 	mul.w	r2, r1, r2
 8000fae:	4413      	add	r3, r2
 8000fb0:	4403      	add	r3, r0
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d017      	beq.n	8000fe8 <keyboard_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 8000fb8:	7bbb      	ldrb	r3, [r7, #14]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fa5e 	bl	800147c <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 8000fc0:	7bb9      	ldrb	r1, [r7, #14]
 8000fc2:	7bfa      	ldrb	r2, [r7, #15]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	1a9b      	subs	r3, r3, r2
 8000fce:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8000fd2:	fb01 f202 	mul.w	r2, r1, r2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a4b      	ldr	r2, [pc, #300]	@ (8001108 <keyboard_task+0x198>)
 8000fda:	4413      	add	r3, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff7d 	bl	8000edc <update_key>

      keyboard_close_adc();
 8000fe2:	f000 fa73 	bl	80014cc <keyboard_close_adc>
 8000fe6:	e000      	b.n	8000fea <keyboard_task+0x7a>
        continue;
 8000fe8:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	3301      	adds	r3, #1
 8000fee:	73bb      	strb	r3, [r7, #14]
 8000ff0:	7bbb      	ldrb	r3, [r7, #14]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0cf      	beq.n	8000f96 <keyboard_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	2b0f      	cmp	r3, #15
 8001000:	d9c2      	bls.n	8000f88 <keyboard_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8001002:	2300      	movs	r3, #0
 8001004:	737b      	strb	r3, [r7, #13]
 8001006:	e074      	b.n	80010f2 <keyboard_task+0x182>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8001008:	2300      	movs	r3, #0
 800100a:	733b      	strb	r3, [r7, #12]
 800100c:	e06b      	b.n	80010e6 <keyboard_task+0x176>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 800100e:	7b39      	ldrb	r1, [r7, #12]
 8001010:	7b7a      	ldrb	r2, [r7, #13]
 8001012:	483d      	ldr	r0, [pc, #244]	@ (8001108 <keyboard_task+0x198>)
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	1a9b      	subs	r3, r3, r2
 800101e:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001022:	fb01 f202 	mul.w	r2, r1, r2
 8001026:	4413      	add	r3, r2
 8001028:	4403      	add	r3, r0
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d056      	beq.n	80010de <keyboard_task+0x16e>
 8001030:	7b39      	ldrb	r1, [r7, #12]
 8001032:	7b7a      	ldrb	r2, [r7, #13]
 8001034:	4834      	ldr	r0, [pc, #208]	@ (8001108 <keyboard_task+0x198>)
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	1a9b      	subs	r3, r3, r2
 8001040:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001044:	fb01 f202 	mul.w	r2, r1, r2
 8001048:	4413      	add	r3, r2
 800104a:	4403      	add	r3, r0
 800104c:	331e      	adds	r3, #30
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d144      	bne.n	80010de <keyboard_task+0x16e>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8001054:	7b39      	ldrb	r1, [r7, #12]
 8001056:	7b7a      	ldrb	r2, [r7, #13]
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	1a9b      	subs	r3, r3, r2
 8001062:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001066:	fb01 f202 	mul.w	r2, r1, r2
 800106a:	4413      	add	r3, r2
 800106c:	4a26      	ldr	r2, [pc, #152]	@ (8001108 <keyboard_task+0x198>)
 800106e:	4413      	add	r3, r2
 8001070:	607b      	str	r3, [r7, #4]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7d5a      	ldrb	r2, [r3, #21]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7fdb      	ldrb	r3, [r3, #31]
 800107a:	429a      	cmp	r2, r3
 800107c:	bf34      	ite	cc
 800107e:	2301      	movcc	r3, #1
 8001080:	2300      	movcs	r3, #0
 8001082:	b2db      	uxtb	r3, r3
 8001084:	70fb      	strb	r3, [r7, #3]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 8001086:	f000 fa2b 	bl	80014e0 <keyboard_get_time>
 800108a:	4602      	mov	r2, r0
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f8d3 3023 	ldr.w	r3, [r3, #35]	@ 0x23
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	4a1d      	ldr	r2, [pc, #116]	@ (800110c <keyboard_task+0x19c>)
 8001096:	88d2      	ldrh	r2, [r2, #6]
 8001098:	4293      	cmp	r3, r2
 800109a:	bf94      	ite	ls
 800109c:	2301      	movls	r3, #1
 800109e:	2300      	movhi	r3, #0
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	70bb      	strb	r3, [r7, #2]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00a      	beq.n	80010c0 <keyboard_task+0x150>
 80010aa:	78bb      	ldrb	r3, [r7, #2]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d007      	beq.n	80010c0 <keyboard_task+0x150>
        key->actuation.status = STATUS_TAP;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	779a      	strb	r2, [r3, #30]
        hid_press_key(key, _TAP_LAYER);
 80010b6:	2101      	movs	r1, #1
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff fa8d 	bl	80005d8 <hid_press_key>
 80010be:	e00f      	b.n	80010e0 <keyboard_task+0x170>
      } else if (!is_before_timeout || key_triggered) {
 80010c0:	78bb      	ldrb	r3, [r7, #2]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <keyboard_task+0x15e>
 80010c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <keyboard_task+0x194>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d008      	beq.n	80010e0 <keyboard_task+0x170>
        key->actuation.status = STATUS_TRIGGERED;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2202      	movs	r2, #2
 80010d2:	779a      	strb	r2, [r3, #30]
        hid_press_key(key, _BASE_LAYER);
 80010d4:	2100      	movs	r1, #0
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fa7e 	bl	80005d8 <hid_press_key>
 80010dc:	e000      	b.n	80010e0 <keyboard_task+0x170>
        continue;
 80010de:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80010e0:	7b3b      	ldrb	r3, [r7, #12]
 80010e2:	3301      	adds	r3, #1
 80010e4:	733b      	strb	r3, [r7, #12]
 80010e6:	7b3b      	ldrb	r3, [r7, #12]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d090      	beq.n	800100e <keyboard_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80010ec:	7b7b      	ldrb	r3, [r7, #13]
 80010ee:	3301      	adds	r3, #1
 80010f0:	737b      	strb	r3, [r7, #13]
 80010f2:	7b7b      	ldrb	r3, [r7, #13]
 80010f4:	2b0f      	cmp	r3, #15
 80010f6:	d987      	bls.n	8001008 <keyboard_task+0x98>
      }
    }
  }
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2000031c 	.word	0x2000031c
 8001108:	200000ac 	.word	0x200000ac
 800110c:	20000000 	.word	0x20000000

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001114:	f000 fc2e 	bl	8001974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001118:	f000 f820 	bl	800115c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111c:	f000 f934 	bl	8001388 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001120:	f000 f884 	bl	800122c <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001124:	f000 f902 	bl	800132c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001128:	f000 f8d2 	bl	80012d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ADC_channel_Config.Rank = 1;
 800112c:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <main+0x48>)
 800112e:	2201      	movs	r2, #1
 8001130:	605a      	str	r2, [r3, #4]
  ADC_channel_Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <main+0x48>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  keyboard_init_keys();
 8001138:	f7ff fee2 	bl	8000f00 <keyboard_init_keys>

  hid_init();
 800113c:	f7ff f9ea 	bl	8000514 <hid_init>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 8001140:	2100      	movs	r1, #0
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	f004 fe4b 	bl	8005de0 <tud_task_ext>
}
 800114a:	bf00      	nop
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    // MARK: Main loop
	  tud_task();
    keyboard_task();
 800114c:	f7ff ff10 	bl	8000f70 <keyboard_task>
    //keyboard_task_snaptap();
    hid_task();
 8001150:	f7ff f9f2 	bl	8000538 <hid_task>
	  tud_task();
 8001154:	bf00      	nop
 8001156:	e7f3      	b.n	8001140 <main+0x30>
 8001158:	200008a0 	.word	0x200008a0

0800115c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b094      	sub	sp, #80	@ 0x50
 8001160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001162:	f107 0320 	add.w	r3, r7, #32
 8001166:	2230      	movs	r2, #48	@ 0x30
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f008 fc2d 	bl	80099ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	4b27      	ldr	r3, [pc, #156]	@ (8001224 <SystemClock_Config+0xc8>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001188:	4a26      	ldr	r2, [pc, #152]	@ (8001224 <SystemClock_Config+0xc8>)
 800118a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800118e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001190:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <SystemClock_Config+0xc8>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800119c:	2300      	movs	r3, #0
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	4b21      	ldr	r3, [pc, #132]	@ (8001228 <SystemClock_Config+0xcc>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a20      	ldr	r2, [pc, #128]	@ (8001228 <SystemClock_Config+0xcc>)
 80011a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001228 <SystemClock_Config+0xcc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011b8:	2301      	movs	r3, #1
 80011ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c2:	2302      	movs	r3, #2
 80011c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 80011cc:	230d      	movs	r3, #13
 80011ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011d0:	23a8      	movs	r3, #168	@ 0xa8
 80011d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011d4:	2304      	movs	r3, #4
 80011d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011d8:	2307      	movs	r3, #7
 80011da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011dc:	f107 0320 	add.w	r3, r7, #32
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 fd53 	bl	8002c8c <HAL_RCC_OscConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011ec:	f000 f97f 	bl	80014ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f0:	230f      	movs	r3, #15
 80011f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f4:	2302      	movs	r3, #2
 80011f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001200:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	2102      	movs	r1, #2
 800120c:	4618      	mov	r0, r3
 800120e:	f001 ffb5 	bl	800317c <HAL_RCC_ClockConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001218:	f000 f969 	bl	80014ee <Error_Handler>
  }
}
 800121c:	bf00      	nop
 800121e:	3750      	adds	r7, #80	@ 0x50
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800
 8001228:	40007000 	.word	0x40007000

0800122c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001232:	463b      	mov	r3, r7
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800123e:	4b21      	ldr	r3, [pc, #132]	@ (80012c4 <MX_ADC1_Init+0x98>)
 8001240:	4a21      	ldr	r2, [pc, #132]	@ (80012c8 <MX_ADC1_Init+0x9c>)
 8001242:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001244:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <MX_ADC1_Init+0x98>)
 8001246:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800124a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800124c:	4b1d      	ldr	r3, [pc, #116]	@ (80012c4 <MX_ADC1_Init+0x98>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001252:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <MX_ADC1_Init+0x98>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001258:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <MX_ADC1_Init+0x98>)
 800125a:	2200      	movs	r2, #0
 800125c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800125e:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <MX_ADC1_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001266:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <MX_ADC1_Init+0x98>)
 8001268:	2200      	movs	r2, #0
 800126a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800126c:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <MX_ADC1_Init+0x98>)
 800126e:	4a17      	ldr	r2, [pc, #92]	@ (80012cc <MX_ADC1_Init+0xa0>)
 8001270:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001272:	4b14      	ldr	r3, [pc, #80]	@ (80012c4 <MX_ADC1_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001278:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <MX_ADC1_Init+0x98>)
 800127a:	2201      	movs	r2, #1
 800127c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800127e:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <MX_ADC1_Init+0x98>)
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001286:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <MX_ADC1_Init+0x98>)
 8001288:	2201      	movs	r2, #1
 800128a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800128c:	480d      	ldr	r0, [pc, #52]	@ (80012c4 <MX_ADC1_Init+0x98>)
 800128e:	f000 fc07 	bl	8001aa0 <HAL_ADC_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001298:	f000 f929 	bl	80014ee <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800129c:	2309      	movs	r3, #9
 800129e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012a0:	2301      	movs	r3, #1
 80012a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a8:	463b      	mov	r3, r7
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <MX_ADC1_Init+0x98>)
 80012ae:	f000 fdbb 	bl	8001e28 <HAL_ADC_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012b8:	f000 f919 	bl	80014ee <Error_Handler>

  // memcpy(&ADC_channel_Config, &sConfig, sizeof(ADC_ChannelConfTypeDef));

  /* USER CODE END ADC1_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000320 	.word	0x20000320
 80012c8:	40012000 	.word	0x40012000
 80012cc:	0f000001 	.word	0x0f000001

080012d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d4:	4b12      	ldr	r3, [pc, #72]	@ (8001320 <MX_I2C1_Init+0x50>)
 80012d6:	4a13      	ldr	r2, [pc, #76]	@ (8001324 <MX_I2C1_Init+0x54>)
 80012d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012da:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <MX_I2C1_Init+0x50>)
 80012dc:	4a12      	ldr	r2, [pc, #72]	@ (8001328 <MX_I2C1_Init+0x58>)
 80012de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <MX_I2C1_Init+0x50>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <MX_I2C1_Init+0x50>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <MX_I2C1_Init+0x50>)
 80012ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <MX_I2C1_Init+0x50>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012fa:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <MX_I2C1_Init+0x50>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001300:	4b07      	ldr	r3, [pc, #28]	@ (8001320 <MX_I2C1_Init+0x50>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001306:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <MX_I2C1_Init+0x50>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800130c:	4804      	ldr	r0, [pc, #16]	@ (8001320 <MX_I2C1_Init+0x50>)
 800130e:	f001 fa69 	bl	80027e4 <HAL_I2C_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001318:	f000 f8e9 	bl	80014ee <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000368 	.word	0x20000368
 8001324:	40005400 	.word	0x40005400
 8001328:	000186a0 	.word	0x000186a0

0800132c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001330:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001332:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001336:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001338:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800133a:	2204      	movs	r2, #4
 800133c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800133e:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001340:	2202      	movs	r2, #2
 8001342:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001344:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001346:	2200      	movs	r2, #0
 8001348:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800134a:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800134c:	2202      	movs	r2, #2
 800134e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001350:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001352:	2200      	movs	r2, #0
 8001354:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001356:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800135c:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001362:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001364:	2200      	movs	r2, #0
 8001366:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800136a:	2200      	movs	r2, #0
 800136c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800136e:	4805      	ldr	r0, [pc, #20]	@ (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001370:	f001 fb7c 	bl	8002a6c <HAL_PCD_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800137a:	f000 f8b8 	bl	80014ee <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200003bc 	.word	0x200003bc

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	4b20      	ldr	r3, [pc, #128]	@ (8001424 <MX_GPIO_Init+0x9c>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001424 <MX_GPIO_Init+0x9c>)
 80013a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <MX_GPIO_Init+0x9c>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <MX_GPIO_Init+0x9c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a18      	ldr	r2, [pc, #96]	@ (8001424 <MX_GPIO_Init+0x9c>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b16      	ldr	r3, [pc, #88]	@ (8001424 <MX_GPIO_Init+0x9c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <MX_GPIO_Init+0x9c>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a11      	ldr	r2, [pc, #68]	@ (8001424 <MX_GPIO_Init+0x9c>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <MX_GPIO_Init+0x9c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80013f8:	480b      	ldr	r0, [pc, #44]	@ (8001428 <MX_GPIO_Init+0xa0>)
 80013fa:	f001 f9d9 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013fe:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	4619      	mov	r1, r3
 8001416:	4804      	ldr	r0, [pc, #16]	@ (8001428 <MX_GPIO_Init+0xa0>)
 8001418:	f001 f846 	bl	80024a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800141c:	bf00      	nop
 800141e:	3720      	adds	r7, #32
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	40020400 	.word	0x40020400

0800142c <keyboard_select_amux>:
  }
  HAL_FLASH_Lock();
  return 1;
}

void keyboard_select_amux(uint8_t amux_channel) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  // TODO: set GPIOs at the same time using bitmap on register
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8001436:	2300      	movs	r3, #0
 8001438:	73fb      	strb	r3, [r7, #15]
 800143a:	e013      	b.n	8001464 <keyboard_select_amux+0x38>
    HAL_GPIO_WritePin(GPIOB, amux_select_pins[i], (amux_channel >> i) & 1);
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	4a0d      	ldr	r2, [pc, #52]	@ (8001474 <keyboard_select_amux+0x48>)
 8001440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001444:	b299      	uxth	r1, r3
 8001446:	79fa      	ldrb	r2, [r7, #7]
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	fa42 f303 	asr.w	r3, r2, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	b2db      	uxtb	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	4807      	ldr	r0, [pc, #28]	@ (8001478 <keyboard_select_amux+0x4c>)
 800145a:	f001 f9a9 	bl	80027b0 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	3301      	adds	r3, #1
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	2b03      	cmp	r3, #3
 8001468:	d9e8      	bls.n	800143c <keyboard_select_amux+0x10>
  }
}
 800146a:	bf00      	nop
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	08009af8 	.word	0x08009af8
 8001478:	40020400 	.word	0x40020400

0800147c <keyboard_select_adc>:

void keyboard_select_adc(uint8_t adc_channel) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  ADC_channel_Config.Channel = adc_channels[adc_channel];
 8001486:	2209      	movs	r2, #9
 8001488:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <keyboard_select_adc+0x30>)
 800148a:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &ADC_channel_Config);
 800148c:	4907      	ldr	r1, [pc, #28]	@ (80014ac <keyboard_select_adc+0x30>)
 800148e:	4808      	ldr	r0, [pc, #32]	@ (80014b0 <keyboard_select_adc+0x34>)
 8001490:	f000 fcca 	bl	8001e28 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 8001494:	4806      	ldr	r0, [pc, #24]	@ (80014b0 <keyboard_select_adc+0x34>)
 8001496:	f000 fb47 	bl	8001b28 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 800149a:	2101      	movs	r1, #1
 800149c:	4804      	ldr	r0, [pc, #16]	@ (80014b0 <keyboard_select_adc+0x34>)
 800149e:	f000 fc2a 	bl	8001cf6 <HAL_ADC_PollForConversion>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200008a0 	.word	0x200008a0
 80014b0:	20000320 	.word	0x20000320

080014b4 <keyboard_read_adc>:

uint16_t keyboard_read_adc() {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 80014b8:	4803      	ldr	r0, [pc, #12]	@ (80014c8 <keyboard_read_adc+0x14>)
 80014ba:	f000 fca7 	bl	8001e0c <HAL_ADC_GetValue>
 80014be:	4603      	mov	r3, r0
 80014c0:	b29b      	uxth	r3, r3
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000320 	.word	0x20000320

080014cc <keyboard_close_adc>:

void keyboard_close_adc() {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  HAL_ADC_Stop(&hadc1);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <keyboard_close_adc+0x10>)
 80014d2:	f000 fbdd 	bl	8001c90 <HAL_ADC_Stop>
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000320 	.word	0x20000320

080014e0 <keyboard_get_time>:

uint32_t keyboard_get_time() {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80014e4:	f000 faac 	bl	8001a40 <HAL_GetTick>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}

080014ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f2:	b672      	cpsid	i
}
 80014f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80014f6:	bf00      	nop
 80014f8:	e7fd      	b.n	80014f6 <Error_Handler+0x8>
	...

080014fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <HAL_MspInit+0x4c>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150a:	4a0f      	ldr	r2, [pc, #60]	@ (8001548 <HAL_MspInit+0x4c>)
 800150c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001510:	6453      	str	r3, [r2, #68]	@ 0x44
 8001512:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <HAL_MspInit+0x4c>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <HAL_MspInit+0x4c>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	4a08      	ldr	r2, [pc, #32]	@ (8001548 <HAL_MspInit+0x4c>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152c:	6413      	str	r3, [r2, #64]	@ 0x40
 800152e:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_MspInit+0x4c>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800

0800154c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	@ 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a17      	ldr	r2, [pc, #92]	@ (80015c8 <HAL_ADC_MspInit+0x7c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d127      	bne.n	80015be <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <HAL_ADC_MspInit+0x80>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	4a15      	ldr	r2, [pc, #84]	@ (80015cc <HAL_ADC_MspInit+0x80>)
 8001578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800157c:	6453      	str	r3, [r2, #68]	@ 0x44
 800157e:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <HAL_ADC_MspInit+0x80>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <HAL_ADC_MspInit+0x80>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a0e      	ldr	r2, [pc, #56]	@ (80015cc <HAL_ADC_MspInit+0x80>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <HAL_ADC_MspInit+0x80>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015a6:	2302      	movs	r3, #2
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015aa:	2303      	movs	r3, #3
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <HAL_ADC_MspInit+0x84>)
 80015ba:	f000 ff75 	bl	80024a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015be:	bf00      	nop
 80015c0:	3728      	adds	r7, #40	@ 0x28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40012000 	.word	0x40012000
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020400 	.word	0x40020400

080015d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	@ 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a19      	ldr	r2, [pc, #100]	@ (8001658 <HAL_I2C_MspInit+0x84>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d12b      	bne.n	800164e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b18      	ldr	r3, [pc, #96]	@ (800165c <HAL_I2C_MspInit+0x88>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	4a17      	ldr	r2, [pc, #92]	@ (800165c <HAL_I2C_MspInit+0x88>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	6313      	str	r3, [r2, #48]	@ 0x30
 8001606:	4b15      	ldr	r3, [pc, #84]	@ (800165c <HAL_I2C_MspInit+0x88>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001612:	23c0      	movs	r3, #192	@ 0xc0
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001616:	2312      	movs	r3, #18
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800161a:	2301      	movs	r3, #1
 800161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001622:	2304      	movs	r3, #4
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	480c      	ldr	r0, [pc, #48]	@ (8001660 <HAL_I2C_MspInit+0x8c>)
 800162e:	f000 ff3b 	bl	80024a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b09      	ldr	r3, [pc, #36]	@ (800165c <HAL_I2C_MspInit+0x88>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	4a08      	ldr	r2, [pc, #32]	@ (800165c <HAL_I2C_MspInit+0x88>)
 800163c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001640:	6413      	str	r3, [r2, #64]	@ 0x40
 8001642:	4b06      	ldr	r3, [pc, #24]	@ (800165c <HAL_I2C_MspInit+0x88>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800164e:	bf00      	nop
 8001650:	3728      	adds	r7, #40	@ 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40005400 	.word	0x40005400
 800165c:	40023800 	.word	0x40023800
 8001660:	40020400 	.word	0x40020400

08001664 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	@ 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001684:	d13a      	bne.n	80016fc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b1e      	ldr	r3, [pc, #120]	@ (8001704 <HAL_PCD_MspInit+0xa0>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a1d      	ldr	r2, [pc, #116]	@ (8001704 <HAL_PCD_MspInit+0xa0>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b1b      	ldr	r3, [pc, #108]	@ (8001704 <HAL_PCD_MspInit+0xa0>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80016a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016b4:	230a      	movs	r3, #10
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	4812      	ldr	r0, [pc, #72]	@ (8001708 <HAL_PCD_MspInit+0xa4>)
 80016c0:	f000 fef2 	bl	80024a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <HAL_PCD_MspInit+0xa0>)
 80016c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001704 <HAL_PCD_MspInit+0xa0>)
 80016ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016ce:	6353      	str	r3, [r2, #52]	@ 0x34
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <HAL_PCD_MspInit+0xa0>)
 80016d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <HAL_PCD_MspInit+0xa0>)
 80016da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016de:	6453      	str	r3, [r2, #68]	@ 0x44
 80016e0:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <HAL_PCD_MspInit+0xa0>)
 80016e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2100      	movs	r1, #0
 80016f0:	2043      	movs	r0, #67	@ 0x43
 80016f2:	f000 fea2 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80016f6:	2043      	movs	r0, #67	@ 0x43
 80016f8:	f000 febb 	bl	8002472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	@ 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800
 8001708:	40020000 	.word	0x40020000

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <NMI_Handler+0x4>

08001714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm("BKPT #0\n");
 8001718:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171a:	bf00      	nop
 800171c:	e7fd      	b.n	800171a <HardFault_Handler+0x6>

0800171e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001722:	bf00      	nop
 8001724:	e7fd      	b.n	8001722 <MemManage_Handler+0x4>

08001726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172a:	bf00      	nop
 800172c:	e7fd      	b.n	800172a <BusFault_Handler+0x4>

0800172e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001732:	bf00      	nop
 8001734:	e7fd      	b.n	8001732 <UsageFault_Handler+0x4>

08001736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001764:	f000 f958 	bl	8001a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  system_ticks++;
 8001768:	4b03      	ldr	r3, [pc, #12]	@ (8001778 <SysTick_Handler+0x18>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	4a02      	ldr	r2, [pc, #8]	@ (8001778 <SysTick_Handler+0x18>)
 8001770:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200008b0 	.word	0x200008b0

0800177c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(0);
 8001780:	2000      	movs	r0, #0
 8001782:	f007 fb91 	bl	8008ea8 <dcd_int_handler>
	return;
 8001786:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <SystemInit+0x20>)
 8001792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001796:	4a05      	ldr	r2, [pc, #20]	@ (80017ac <SystemInit+0x20>)
 8001798:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800179c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 80017b4:	4b02      	ldr	r3, [pc, #8]	@ (80017c0 <tud_descriptor_device_cb+0x10>)
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	08009b20 	.word	0x08009b20

080017c4 <tud_hid_descriptor_report_cb>:

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_hid_descriptor_report_cb(uint8_t instance)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  (void) instance;
  return desc_hid_report;
 80017ce:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <tud_hid_descriptor_report_cb+0x18>)
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	08009b34 	.word	0x08009b34

080017e0 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
  (void) index; // for multiple configurations
  return desc_configuration;
 80017ea:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <tud_descriptor_configuration_cb+0x18>)
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	08009b90 	.word	0x08009b90

080017fc <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	460a      	mov	r2, r1
 8001806:	71fb      	strb	r3, [r7, #7]
 8001808:	4613      	mov	r3, r2
 800180a:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d108      	bne.n	8001824 <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8001812:	4b21      	ldr	r3, [pc, #132]	@ (8001898 <tud_descriptor_string_cb+0x9c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	b29a      	uxth	r2, r3
 800181a:	4b20      	ldr	r3, [pc, #128]	@ (800189c <tud_descriptor_string_cb+0xa0>)
 800181c:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 800181e:	2301      	movs	r3, #1
 8001820:	73fb      	strb	r3, [r7, #15]
 8001822:	e027      	b.n	8001874 <tud_descriptor_string_cb+0x78>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	2b05      	cmp	r3, #5
 8001828:	d901      	bls.n	800182e <tud_descriptor_string_cb+0x32>
 800182a:	2300      	movs	r3, #0
 800182c:	e02f      	b.n	800188e <tud_descriptor_string_cb+0x92>

    const char* str = string_desc_arr[index];
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	4a19      	ldr	r2, [pc, #100]	@ (8001898 <tud_descriptor_string_cb+0x9c>)
 8001832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001836:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = strlen(str);
 8001838:	68b8      	ldr	r0, [r7, #8]
 800183a:	f7fe fccd 	bl	80001d8 <strlen>
 800183e:	4603      	mov	r3, r0
 8001840:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	2b1f      	cmp	r3, #31
 8001846:	d901      	bls.n	800184c <tud_descriptor_string_cb+0x50>
 8001848:	231f      	movs	r3, #31
 800184a:	73fb      	strb	r3, [r7, #15]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 800184c:	2300      	movs	r3, #0
 800184e:	73bb      	strb	r3, [r7, #14]
 8001850:	e00c      	b.n	800186c <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 8001852:	7bbb      	ldrb	r3, [r7, #14]
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	4413      	add	r3, r2
 8001858:	781a      	ldrb	r2, [r3, #0]
 800185a:	7bbb      	ldrb	r3, [r7, #14]
 800185c:	3301      	adds	r3, #1
 800185e:	4611      	mov	r1, r2
 8001860:	4a0e      	ldr	r2, [pc, #56]	@ (800189c <tud_descriptor_string_cb+0xa0>)
 8001862:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 8001866:	7bbb      	ldrb	r3, [r7, #14]
 8001868:	3301      	adds	r3, #1
 800186a:	73bb      	strb	r3, [r7, #14]
 800186c:	7bba      	ldrb	r2, [r7, #14]
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	429a      	cmp	r2, r3
 8001872:	d3ee      	bcc.n	8001852 <tud_descriptor_string_cb+0x56>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	3301      	adds	r3, #1
 8001878:	b29b      	uxth	r3, r3
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	b29b      	uxth	r3, r3
 800187e:	b21b      	sxth	r3, r3
 8001880:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001884:	b21b      	sxth	r3, r3
 8001886:	b29a      	uxth	r2, r3
 8001888:	4b04      	ldr	r3, [pc, #16]	@ (800189c <tud_descriptor_string_cb+0xa0>)
 800188a:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 800188c:	4b03      	ldr	r3, [pc, #12]	@ (800189c <tud_descriptor_string_cb+0xa0>)
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	2000004c 	.word	0x2000004c
 800189c:	200008b4 	.word	0x200008b4

080018a0 <tud_cdc_line_coding_cb>:
  }
}

// Invoked when line coding is change via SET_LINE_CODING
void tud_cdc_line_coding_cb(uint8_t itf, cdc_line_coding_t const* p_line_coding)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
  (void) itf;
  (void) p_line_coding;
  // Handle line coding change if needed
  // The baud rate is already set to 115200 by default
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <tud_hid_get_report_cb>:

// Invoked when received GET_REPORT control request
// Application must fill buffer report's content and return its length.
// Return zero will cause the stack to STALL request
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t* buffer, uint16_t reqlen)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
 80018c4:	460b      	mov	r3, r1
 80018c6:	71bb      	strb	r3, [r7, #6]
 80018c8:	4613      	mov	r3, r2
 80018ca:	717b      	strb	r3, [r7, #5]
  (void) instance;
  (void) report_type;
  (void) buffer;
  (void) reqlen;

  switch (report_id)
 80018cc:	79bb      	ldrb	r3, [r7, #6]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d002      	beq.n	80018d8 <tud_hid_get_report_cb+0x20>
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d002      	beq.n	80018dc <tud_hid_get_report_cb+0x24>
    case REPORT_ID_CONSUMER_CONTROL:
      // TODO: Fill consumer control report if needed
      break;

    default:
      break;
 80018d6:	e002      	b.n	80018de <tud_hid_get_report_cb+0x26>
      break;
 80018d8:	bf00      	nop
 80018da:	e000      	b.n	80018de <tud_hid_get_report_cb+0x26>
      break;
 80018dc:	bf00      	nop
  }

  return 0;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const* buffer, uint16_t bufsize)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	4603      	mov	r3, r0
 80018f6:	71fb      	strb	r3, [r7, #7]
 80018f8:	460b      	mov	r3, r1
 80018fa:	71bb      	strb	r3, [r7, #6]
 80018fc:	4613      	mov	r3, r2
 80018fe:	717b      	strb	r3, [r7, #5]
  (void) instance;
  (void) report_type;
  (void) buffer;
  (void) bufsize;

  switch (report_id)
 8001900:	79bb      	ldrb	r3, [r7, #6]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d002      	beq.n	800190c <tud_hid_set_report_cb+0x20>
 8001906:	2b02      	cmp	r3, #2
 8001908:	d002      	beq.n	8001910 <tud_hid_set_report_cb+0x24>
    case REPORT_ID_CONSUMER_CONTROL:
      // Handle consumer control feedback if needed
      break;

    default:
      break;
 800190a:	e002      	b.n	8001912 <tud_hid_set_report_cb+0x26>
      break;
 800190c:	bf00      	nop
 800190e:	e000      	b.n	8001912 <tud_hid_set_report_cb+0x26>
      break;
 8001910:	bf00      	nop
  }
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <Reset_Handler>:
 8001920:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001958 <LoopFillZerobss+0xe>
 8001924:	f7ff ff32 	bl	800178c <SystemInit>
 8001928:	480c      	ldr	r0, [pc, #48]	@ (800195c <LoopFillZerobss+0x12>)
 800192a:	490d      	ldr	r1, [pc, #52]	@ (8001960 <LoopFillZerobss+0x16>)
 800192c:	4a0d      	ldr	r2, [pc, #52]	@ (8001964 <LoopFillZerobss+0x1a>)
 800192e:	2300      	movs	r3, #0
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:
 8001932:	58d4      	ldr	r4, [r2, r3]
 8001934:	50c4      	str	r4, [r0, r3]
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:
 8001938:	18c4      	adds	r4, r0, r3
 800193a:	428c      	cmp	r4, r1
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>
 800193e:	4a0a      	ldr	r2, [pc, #40]	@ (8001968 <LoopFillZerobss+0x1e>)
 8001940:	4c0a      	ldr	r4, [pc, #40]	@ (800196c <LoopFillZerobss+0x22>)
 8001942:	2300      	movs	r3, #0
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:
 800194a:	42a2      	cmp	r2, r4
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>
 800194e:	f008 f845 	bl	80099dc <__libc_init_array>
 8001952:	f7ff fbdd 	bl	8001110 <main>
 8001956:	4770      	bx	lr
 8001958:	20020000 	.word	0x20020000
 800195c:	20000000 	.word	0x20000000
 8001960:	20000084 	.word	0x20000084
 8001964:	08009c68 	.word	0x08009c68
 8001968:	20000084 	.word	0x20000084
 800196c:	20000c40 	.word	0x20000c40

08001970 <ADC_IRQHandler>:
 8001970:	e7fe      	b.n	8001970 <ADC_IRQHandler>
	...

08001974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001978:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0d      	ldr	r2, [pc, #52]	@ (80019b4 <HAL_Init+0x40>)
 800197e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001984:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0a      	ldr	r2, [pc, #40]	@ (80019b4 <HAL_Init+0x40>)
 800198a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800198e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001990:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a07      	ldr	r2, [pc, #28]	@ (80019b4 <HAL_Init+0x40>)
 8001996:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800199a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199c:	2003      	movs	r0, #3
 800199e:	f000 fd41 	bl	8002424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a2:	200f      	movs	r0, #15
 80019a4:	f000 f808 	bl	80019b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a8:	f7ff fda8 	bl	80014fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023c00 	.word	0x40023c00

080019b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c0:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <HAL_InitTick+0x54>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <HAL_InitTick+0x58>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4619      	mov	r1, r3
 80019ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 fd59 	bl	800248e <HAL_SYSTICK_Config>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00e      	b.n	8001a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b0f      	cmp	r3, #15
 80019ea:	d80a      	bhi.n	8001a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ec:	2200      	movs	r2, #0
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f000 fd21 	bl	800243a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f8:	4a06      	ldr	r2, [pc, #24]	@ (8001a14 <HAL_InitTick+0x5c>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e000      	b.n	8001a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000048 	.word	0x20000048
 8001a10:	20000068 	.word	0x20000068
 8001a14:	20000064 	.word	0x20000064

08001a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <HAL_IncTick+0x20>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_IncTick+0x24>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	4a04      	ldr	r2, [pc, #16]	@ (8001a3c <HAL_IncTick+0x24>)
 8001a2a:	6013      	str	r3, [r2, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000068 	.word	0x20000068
 8001a3c:	200008f4 	.word	0x200008f4

08001a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return uwTick;
 8001a44:	4b03      	ldr	r3, [pc, #12]	@ (8001a54 <HAL_GetTick+0x14>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	200008f4 	.word	0x200008f4

08001a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a60:	f7ff ffee 	bl	8001a40 <HAL_GetTick>
 8001a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a70:	d005      	beq.n	8001a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a72:	4b0a      	ldr	r3, [pc, #40]	@ (8001a9c <HAL_Delay+0x44>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a7e:	bf00      	nop
 8001a80:	f7ff ffde 	bl	8001a40 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d8f7      	bhi.n	8001a80 <HAL_Delay+0x28>
  {
  }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000068 	.word	0x20000068

08001aa0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e033      	b.n	8001b1e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d109      	bne.n	8001ad2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff fd44 	bl	800154c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d118      	bne.n	8001b10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ae6:	f023 0302 	bic.w	r3, r3, #2
 8001aea:	f043 0202 	orr.w	r2, r3, #2
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 faca 	bl	800208c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b02:	f023 0303 	bic.w	r3, r3, #3
 8001b06:	f043 0201 	orr.w	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b0e:	e001      	b.n	8001b14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_Start+0x1a>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e097      	b.n	8001c72 <HAL_ADC_Start+0x14a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d018      	beq.n	8001b8a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b68:	4b45      	ldr	r3, [pc, #276]	@ (8001c80 <HAL_ADC_Start+0x158>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a45      	ldr	r2, [pc, #276]	@ (8001c84 <HAL_ADC_Start+0x15c>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	0c9a      	lsrs	r2, r3, #18
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b7c:	e002      	b.n	8001b84 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f9      	bne.n	8001b7e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d15f      	bne.n	8001c58 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d007      	beq.n	8001bca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bc2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bd6:	d106      	bne.n	8001be6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bdc:	f023 0206 	bic.w	r2, r3, #6
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	645a      	str	r2, [r3, #68]	@ 0x44
 8001be4:	e002      	b.n	8001bec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bf4:	4b24      	ldr	r3, [pc, #144]	@ (8001c88 <HAL_ADC_Start+0x160>)
 8001bf6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001c00:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 031f 	and.w	r3, r3, #31
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10f      	bne.n	8001c2e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d129      	bne.n	8001c70 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	e020      	b.n	8001c70 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a16      	ldr	r2, [pc, #88]	@ (8001c8c <HAL_ADC_Start+0x164>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d11b      	bne.n	8001c70 <HAL_ADC_Start+0x148>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d114      	bne.n	8001c70 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	e00b      	b.n	8001c70 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	f043 0210 	orr.w	r2, r3, #16
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c68:	f043 0201 	orr.w	r2, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000048 	.word	0x20000048
 8001c84:	431bde83 	.word	0x431bde83
 8001c88:	40012300 	.word	0x40012300
 8001c8c:	40012000 	.word	0x40012000

08001c90 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d101      	bne.n	8001ca6 <HAL_ADC_Stop+0x16>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e021      	b.n	8001cea <HAL_ADC_Stop+0x5a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0201 	bic.w	r2, r2, #1
 8001cbc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d109      	bne.n	8001ce0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	f043 0201 	orr.w	r2, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d12:	d113      	bne.n	8001d3c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d22:	d10b      	bne.n	8001d3c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	f043 0220 	orr.w	r2, r3, #32
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e063      	b.n	8001e04 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d3c:	f7ff fe80 	bl	8001a40 <HAL_GetTick>
 8001d40:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d42:	e021      	b.n	8001d88 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4a:	d01d      	beq.n	8001d88 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d007      	beq.n	8001d62 <HAL_ADC_PollForConversion+0x6c>
 8001d52:	f7ff fe75 	bl	8001a40 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d212      	bcs.n	8001d88 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d00b      	beq.n	8001d88 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d74:	f043 0204 	orr.w	r2, r3, #4
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e03d      	b.n	8001e04 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d1d6      	bne.n	8001d44 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f06f 0212 	mvn.w	r2, #18
 8001d9e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d123      	bne.n	8001e02 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d11f      	bne.n	8001e02 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d006      	beq.n	8001dde <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d111      	bne.n	8001e02 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d105      	bne.n	8001e02 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	f043 0201 	orr.w	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x1c>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e113      	b.n	800206c <HAL_ADC_ConfigChannel+0x244>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b09      	cmp	r3, #9
 8001e52:	d925      	bls.n	8001ea0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68d9      	ldr	r1, [r3, #12]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	3b1e      	subs	r3, #30
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43da      	mvns	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	400a      	ands	r2, r1
 8001e78:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68d9      	ldr	r1, [r3, #12]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4403      	add	r3, r0
 8001e92:	3b1e      	subs	r3, #30
 8001e94:	409a      	lsls	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	e022      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6919      	ldr	r1, [r3, #16]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	2207      	movs	r2, #7
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6919      	ldr	r1, [r3, #16]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4403      	add	r3, r0
 8001edc:	409a      	lsls	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d824      	bhi.n	8001f38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	3b05      	subs	r3, #5
 8001f00:	221f      	movs	r2, #31
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	3b05      	subs	r3, #5
 8001f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f36:	e04c      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b0c      	cmp	r3, #12
 8001f3e:	d824      	bhi.n	8001f8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b23      	subs	r3, #35	@ 0x23
 8001f52:	221f      	movs	r2, #31
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43da      	mvns	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	400a      	ands	r2, r1
 8001f60:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	3b23      	subs	r3, #35	@ 0x23
 8001f7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f88:	e023      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	3b41      	subs	r3, #65	@ 0x41
 8001f9c:	221f      	movs	r2, #31
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	400a      	ands	r2, r1
 8001faa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	4618      	mov	r0, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3b41      	subs	r3, #65	@ 0x41
 8001fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd2:	4b29      	ldr	r3, [pc, #164]	@ (8002078 <HAL_ADC_ConfigChannel+0x250>)
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a28      	ldr	r2, [pc, #160]	@ (800207c <HAL_ADC_ConfigChannel+0x254>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d10f      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1d8>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b12      	cmp	r3, #18
 8001fe6:	d10b      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a1d      	ldr	r2, [pc, #116]	@ (800207c <HAL_ADC_ConfigChannel+0x254>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d12b      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x23a>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a1c      	ldr	r2, [pc, #112]	@ (8002080 <HAL_ADC_ConfigChannel+0x258>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d003      	beq.n	800201c <HAL_ADC_ConfigChannel+0x1f4>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b11      	cmp	r3, #17
 800201a:	d122      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a11      	ldr	r2, [pc, #68]	@ (8002080 <HAL_ADC_ConfigChannel+0x258>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d111      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800203e:	4b11      	ldr	r3, [pc, #68]	@ (8002084 <HAL_ADC_ConfigChannel+0x25c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a11      	ldr	r2, [pc, #68]	@ (8002088 <HAL_ADC_ConfigChannel+0x260>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	0c9a      	lsrs	r2, r3, #18
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002054:	e002      	b.n	800205c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	3b01      	subs	r3, #1
 800205a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f9      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	40012300 	.word	0x40012300
 800207c:	40012000 	.word	0x40012000
 8002080:	10000012 	.word	0x10000012
 8002084:	20000048 	.word	0x20000048
 8002088:	431bde83 	.word	0x431bde83

0800208c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002094:	4b79      	ldr	r3, [pc, #484]	@ (800227c <ADC_Init+0x1f0>)
 8002096:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	431a      	orrs	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	021a      	lsls	r2, r3, #8
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80020e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002106:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6899      	ldr	r1, [r3, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211e:	4a58      	ldr	r2, [pc, #352]	@ (8002280 <ADC_Init+0x1f4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d022      	beq.n	800216a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002132:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6899      	ldr	r1, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002154:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6899      	ldr	r1, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	e00f      	b.n	800218a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002178:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002188:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0202 	bic.w	r2, r2, #2
 8002198:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6899      	ldr	r1, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	7e1b      	ldrb	r3, [r3, #24]
 80021a4:	005a      	lsls	r2, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d01b      	beq.n	80021f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021c6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80021d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6859      	ldr	r1, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e2:	3b01      	subs	r3, #1
 80021e4:	035a      	lsls	r2, r3, #13
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	e007      	b.n	8002200 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021fe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800220e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	3b01      	subs	r3, #1
 800221c:	051a      	lsls	r2, r3, #20
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002234:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6899      	ldr	r1, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002242:	025a      	lsls	r2, r3, #9
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800225a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6899      	ldr	r1, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	029a      	lsls	r2, r3, #10
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	609a      	str	r2, [r3, #8]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	40012300 	.word	0x40012300
 8002280:	0f000001 	.word	0x0f000001

08002284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002294:	4b0c      	ldr	r3, [pc, #48]	@ (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022a0:	4013      	ands	r3, r2
 80022a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b6:	4a04      	ldr	r2, [pc, #16]	@ (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	60d3      	str	r3, [r2, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d0:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <__NVIC_GetPriorityGrouping+0x18>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	f003 0307 	and.w	r3, r3, #7
}
 80022da:	4618      	mov	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	db0b      	blt.n	8002312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	f003 021f 	and.w	r2, r3, #31
 8002300:	4907      	ldr	r1, [pc, #28]	@ (8002320 <__NVIC_EnableIRQ+0x38>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2001      	movs	r0, #1
 800230a:	fa00 f202 	lsl.w	r2, r0, r2
 800230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000e100 	.word	0xe000e100

08002324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	2b00      	cmp	r3, #0
 8002336:	db0a      	blt.n	800234e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	490c      	ldr	r1, [pc, #48]	@ (8002370 <__NVIC_SetPriority+0x4c>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	0112      	lsls	r2, r2, #4
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	440b      	add	r3, r1
 8002348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800234c:	e00a      	b.n	8002364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4908      	ldr	r1, [pc, #32]	@ (8002374 <__NVIC_SetPriority+0x50>)
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3b04      	subs	r3, #4
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	440b      	add	r3, r1
 8002362:	761a      	strb	r2, [r3, #24]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000e100 	.word	0xe000e100
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	@ 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f1c3 0307 	rsb	r3, r3, #7
 8002392:	2b04      	cmp	r3, #4
 8002394:	bf28      	it	cs
 8002396:	2304      	movcs	r3, #4
 8002398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3304      	adds	r3, #4
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d902      	bls.n	80023a8 <NVIC_EncodePriority+0x30>
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3b03      	subs	r3, #3
 80023a6:	e000      	b.n	80023aa <NVIC_EncodePriority+0x32>
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	401a      	ands	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	4313      	orrs	r3, r2
         );
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	@ 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023f0:	d301      	bcc.n	80023f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00f      	b.n	8002416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002420 <SysTick_Config+0x40>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fe:	210f      	movs	r1, #15
 8002400:	f04f 30ff 	mov.w	r0, #4294967295
 8002404:	f7ff ff8e 	bl	8002324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002408:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <SysTick_Config+0x40>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240e:	4b04      	ldr	r3, [pc, #16]	@ (8002420 <SysTick_Config+0x40>)
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	e000e010 	.word	0xe000e010

08002424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff29 	bl	8002284 <__NVIC_SetPriorityGrouping>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800244c:	f7ff ff3e 	bl	80022cc <__NVIC_GetPriorityGrouping>
 8002450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	6978      	ldr	r0, [r7, #20]
 8002458:	f7ff ff8e 	bl	8002378 <NVIC_EncodePriority>
 800245c:	4602      	mov	r2, r0
 800245e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff5d 	bl	8002324 <__NVIC_SetPriority>
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800247c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff31 	bl	80022e8 <__NVIC_EnableIRQ>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ffa2 	bl	80023e0 <SysTick_Config>
 800249c:	4603      	mov	r3, r0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	@ 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
 80024c2:	e159      	b.n	8002778 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024c4:	2201      	movs	r2, #1
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	429a      	cmp	r2, r3
 80024de:	f040 8148 	bne.w	8002772 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d005      	beq.n	80024fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d130      	bne.n	800255c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	2203      	movs	r2, #3
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002530:	2201      	movs	r2, #1
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 0201 	and.w	r2, r3, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	2b03      	cmp	r3, #3
 8002566:	d017      	beq.n	8002598 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	2203      	movs	r2, #3
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d123      	bne.n	80025ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	08da      	lsrs	r2, r3, #3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3208      	adds	r2, #8
 80025ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	220f      	movs	r2, #15
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	08da      	lsrs	r2, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3208      	adds	r2, #8
 80025e6:	69b9      	ldr	r1, [r7, #24]
 80025e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	2203      	movs	r2, #3
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0203 	and.w	r2, r3, #3
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80a2 	beq.w	8002772 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	4b57      	ldr	r3, [pc, #348]	@ (8002790 <HAL_GPIO_Init+0x2e8>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002636:	4a56      	ldr	r2, [pc, #344]	@ (8002790 <HAL_GPIO_Init+0x2e8>)
 8002638:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800263c:	6453      	str	r3, [r2, #68]	@ 0x44
 800263e:	4b54      	ldr	r3, [pc, #336]	@ (8002790 <HAL_GPIO_Init+0x2e8>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002642:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800264a:	4a52      	ldr	r2, [pc, #328]	@ (8002794 <HAL_GPIO_Init+0x2ec>)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	089b      	lsrs	r3, r3, #2
 8002650:	3302      	adds	r3, #2
 8002652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	220f      	movs	r2, #15
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a49      	ldr	r2, [pc, #292]	@ (8002798 <HAL_GPIO_Init+0x2f0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d019      	beq.n	80026aa <HAL_GPIO_Init+0x202>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a48      	ldr	r2, [pc, #288]	@ (800279c <HAL_GPIO_Init+0x2f4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d013      	beq.n	80026a6 <HAL_GPIO_Init+0x1fe>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a47      	ldr	r2, [pc, #284]	@ (80027a0 <HAL_GPIO_Init+0x2f8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00d      	beq.n	80026a2 <HAL_GPIO_Init+0x1fa>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a46      	ldr	r2, [pc, #280]	@ (80027a4 <HAL_GPIO_Init+0x2fc>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d007      	beq.n	800269e <HAL_GPIO_Init+0x1f6>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a45      	ldr	r2, [pc, #276]	@ (80027a8 <HAL_GPIO_Init+0x300>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d101      	bne.n	800269a <HAL_GPIO_Init+0x1f2>
 8002696:	2304      	movs	r3, #4
 8002698:	e008      	b.n	80026ac <HAL_GPIO_Init+0x204>
 800269a:	2307      	movs	r3, #7
 800269c:	e006      	b.n	80026ac <HAL_GPIO_Init+0x204>
 800269e:	2303      	movs	r3, #3
 80026a0:	e004      	b.n	80026ac <HAL_GPIO_Init+0x204>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e002      	b.n	80026ac <HAL_GPIO_Init+0x204>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <HAL_GPIO_Init+0x204>
 80026aa:	2300      	movs	r3, #0
 80026ac:	69fa      	ldr	r2, [r7, #28]
 80026ae:	f002 0203 	and.w	r2, r2, #3
 80026b2:	0092      	lsls	r2, r2, #2
 80026b4:	4093      	lsls	r3, r2
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026bc:	4935      	ldr	r1, [pc, #212]	@ (8002794 <HAL_GPIO_Init+0x2ec>)
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	089b      	lsrs	r3, r3, #2
 80026c2:	3302      	adds	r3, #2
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ca:	4b38      	ldr	r3, [pc, #224]	@ (80027ac <HAL_GPIO_Init+0x304>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ee:	4a2f      	ldr	r2, [pc, #188]	@ (80027ac <HAL_GPIO_Init+0x304>)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026f4:	4b2d      	ldr	r3, [pc, #180]	@ (80027ac <HAL_GPIO_Init+0x304>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002718:	4a24      	ldr	r2, [pc, #144]	@ (80027ac <HAL_GPIO_Init+0x304>)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800271e:	4b23      	ldr	r3, [pc, #140]	@ (80027ac <HAL_GPIO_Init+0x304>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002742:	4a1a      	ldr	r2, [pc, #104]	@ (80027ac <HAL_GPIO_Init+0x304>)
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002748:	4b18      	ldr	r3, [pc, #96]	@ (80027ac <HAL_GPIO_Init+0x304>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800276c:	4a0f      	ldr	r2, [pc, #60]	@ (80027ac <HAL_GPIO_Init+0x304>)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3301      	adds	r3, #1
 8002776:	61fb      	str	r3, [r7, #28]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	2b0f      	cmp	r3, #15
 800277c:	f67f aea2 	bls.w	80024c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	3724      	adds	r7, #36	@ 0x24
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800
 8002794:	40013800 	.word	0x40013800
 8002798:	40020000 	.word	0x40020000
 800279c:	40020400 	.word	0x40020400
 80027a0:	40020800 	.word	0x40020800
 80027a4:	40020c00 	.word	0x40020c00
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40013c00 	.word	0x40013c00

080027b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]
 80027bc:	4613      	mov	r3, r2
 80027be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c0:	787b      	ldrb	r3, [r7, #1]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027cc:	e003      	b.n	80027d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ce:	887b      	ldrh	r3, [r7, #2]
 80027d0:	041a      	lsls	r2, r3, #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	619a      	str	r2, [r3, #24]
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e12b      	b.n	8002a4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d106      	bne.n	8002810 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7fe fee2 	bl	80015d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2224      	movs	r2, #36	@ 0x24
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002836:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002846:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002848:	f000 fe50 	bl	80034ec <HAL_RCC_GetPCLK1Freq>
 800284c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4a81      	ldr	r2, [pc, #516]	@ (8002a58 <HAL_I2C_Init+0x274>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d807      	bhi.n	8002868 <HAL_I2C_Init+0x84>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4a80      	ldr	r2, [pc, #512]	@ (8002a5c <HAL_I2C_Init+0x278>)
 800285c:	4293      	cmp	r3, r2
 800285e:	bf94      	ite	ls
 8002860:	2301      	movls	r3, #1
 8002862:	2300      	movhi	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	e006      	b.n	8002876 <HAL_I2C_Init+0x92>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4a7d      	ldr	r2, [pc, #500]	@ (8002a60 <HAL_I2C_Init+0x27c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	bf94      	ite	ls
 8002870:	2301      	movls	r3, #1
 8002872:	2300      	movhi	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e0e7      	b.n	8002a4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	4a78      	ldr	r2, [pc, #480]	@ (8002a64 <HAL_I2C_Init+0x280>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	0c9b      	lsrs	r3, r3, #18
 8002888:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	430a      	orrs	r2, r1
 800289c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002a58 <HAL_I2C_Init+0x274>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d802      	bhi.n	80028b8 <HAL_I2C_Init+0xd4>
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	3301      	adds	r3, #1
 80028b6:	e009      	b.n	80028cc <HAL_I2C_Init+0xe8>
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028be:	fb02 f303 	mul.w	r3, r2, r3
 80028c2:	4a69      	ldr	r2, [pc, #420]	@ (8002a68 <HAL_I2C_Init+0x284>)
 80028c4:	fba2 2303 	umull	r2, r3, r2, r3
 80028c8:	099b      	lsrs	r3, r3, #6
 80028ca:	3301      	adds	r3, #1
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	430b      	orrs	r3, r1
 80028d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	495c      	ldr	r1, [pc, #368]	@ (8002a58 <HAL_I2C_Init+0x274>)
 80028e8:	428b      	cmp	r3, r1
 80028ea:	d819      	bhi.n	8002920 <HAL_I2C_Init+0x13c>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1e59      	subs	r1, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80028fa:	1c59      	adds	r1, r3, #1
 80028fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002900:	400b      	ands	r3, r1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_I2C_Init+0x138>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1e59      	subs	r1, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	fbb1 f3f3 	udiv	r3, r1, r3
 8002914:	3301      	adds	r3, #1
 8002916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800291a:	e051      	b.n	80029c0 <HAL_I2C_Init+0x1dc>
 800291c:	2304      	movs	r3, #4
 800291e:	e04f      	b.n	80029c0 <HAL_I2C_Init+0x1dc>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d111      	bne.n	800294c <HAL_I2C_Init+0x168>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	1e58      	subs	r0, r3, #1
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6859      	ldr	r1, [r3, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	440b      	add	r3, r1
 8002936:	fbb0 f3f3 	udiv	r3, r0, r3
 800293a:	3301      	adds	r3, #1
 800293c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002940:	2b00      	cmp	r3, #0
 8002942:	bf0c      	ite	eq
 8002944:	2301      	moveq	r3, #1
 8002946:	2300      	movne	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	e012      	b.n	8002972 <HAL_I2C_Init+0x18e>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	1e58      	subs	r0, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	0099      	lsls	r1, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002962:	3301      	adds	r3, #1
 8002964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002968:	2b00      	cmp	r3, #0
 800296a:	bf0c      	ite	eq
 800296c:	2301      	moveq	r3, #1
 800296e:	2300      	movne	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_I2C_Init+0x196>
 8002976:	2301      	movs	r3, #1
 8002978:	e022      	b.n	80029c0 <HAL_I2C_Init+0x1dc>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10e      	bne.n	80029a0 <HAL_I2C_Init+0x1bc>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1e58      	subs	r0, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6859      	ldr	r1, [r3, #4]
 800298a:	460b      	mov	r3, r1
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	440b      	add	r3, r1
 8002990:	fbb0 f3f3 	udiv	r3, r0, r3
 8002994:	3301      	adds	r3, #1
 8002996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800299a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800299e:	e00f      	b.n	80029c0 <HAL_I2C_Init+0x1dc>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	1e58      	subs	r0, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6859      	ldr	r1, [r3, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	0099      	lsls	r1, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b6:	3301      	adds	r3, #1
 80029b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	6809      	ldr	r1, [r1, #0]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69da      	ldr	r2, [r3, #28]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6911      	ldr	r1, [r2, #16]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	68d2      	ldr	r2, [r2, #12]
 80029fa:	4311      	orrs	r1, r2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	430b      	orrs	r3, r1
 8002a02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695a      	ldr	r2, [r3, #20]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	000186a0 	.word	0x000186a0
 8002a5c:	001e847f 	.word	0x001e847f
 8002a60:	003d08ff 	.word	0x003d08ff
 8002a64:	431bde83 	.word	0x431bde83
 8002a68:	10624dd3 	.word	0x10624dd3

08002a6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e101      	b.n	8002c82 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d106      	bne.n	8002a9e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7fe fde3 	bl	8001664 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002aac:	d102      	bne.n	8002ab4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 fd8f 	bl	80035dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	7c1a      	ldrb	r2, [r3, #16]
 8002ac6:	f88d 2000 	strb.w	r2, [sp]
 8002aca:	3304      	adds	r3, #4
 8002acc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ace:	f000 fd21 	bl	8003514 <USB_CoreInit>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0ce      	b.n	8002c82 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fd87 	bl	80035fe <USB_SetCurrentMode>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e0bf      	b.n	8002c82 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b02:	2300      	movs	r3, #0
 8002b04:	73fb      	strb	r3, [r7, #15]
 8002b06:	e04a      	b.n	8002b9e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b08:	7bfa      	ldrb	r2, [r7, #15]
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	4413      	add	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	3315      	adds	r3, #21
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b1c:	7bfa      	ldrb	r2, [r7, #15]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	3314      	adds	r3, #20
 8002b2c:	7bfa      	ldrb	r2, [r7, #15]
 8002b2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b30:	7bfa      	ldrb	r2, [r7, #15]
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	b298      	uxth	r0, r3
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	332e      	adds	r3, #46	@ 0x2e
 8002b44:	4602      	mov	r2, r0
 8002b46:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	3318      	adds	r3, #24
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	331c      	adds	r3, #28
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b70:	7bfa      	ldrb	r2, [r7, #15]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	3320      	adds	r3, #32
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	3324      	adds	r3, #36	@ 0x24
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	791b      	ldrb	r3, [r3, #4]
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d3af      	bcc.n	8002b08 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba8:	2300      	movs	r3, #0
 8002baa:	73fb      	strb	r3, [r7, #15]
 8002bac:	e044      	b.n	8002c38 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bda:	7bfa      	ldrb	r2, [r7, #15]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bf0:	7bfa      	ldrb	r2, [r7, #15]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c06:	7bfa      	ldrb	r2, [r7, #15]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c1c:	7bfa      	ldrb	r2, [r7, #15]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	3301      	adds	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	791b      	ldrb	r3, [r3, #4]
 8002c3c:	7bfa      	ldrb	r2, [r7, #15]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d3b5      	bcc.n	8002bae <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7c1a      	ldrb	r2, [r3, #16]
 8002c4a:	f88d 2000 	strb.w	r2, [sp]
 8002c4e:	3304      	adds	r3, #4
 8002c50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c52:	f000 fd21 	bl	8003698 <USB_DevInit>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e00c      	b.n	8002c82 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 fee9 	bl	8003a52 <USB_DevDisconnect>

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e267      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d075      	beq.n	8002d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002caa:	4b88      	ldr	r3, [pc, #544]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d00c      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb6:	4b85      	ldr	r3, [pc, #532]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d112      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc2:	4b82      	ldr	r3, [pc, #520]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cce:	d10b      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	4b7e      	ldr	r3, [pc, #504]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d05b      	beq.n	8002d94 <HAL_RCC_OscConfig+0x108>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d157      	bne.n	8002d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e242      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf0:	d106      	bne.n	8002d00 <HAL_RCC_OscConfig+0x74>
 8002cf2:	4b76      	ldr	r3, [pc, #472]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a75      	ldr	r2, [pc, #468]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e01d      	b.n	8002d3c <HAL_RCC_OscConfig+0xb0>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x98>
 8002d0a:	4b70      	ldr	r3, [pc, #448]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a6f      	ldr	r2, [pc, #444]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4b6d      	ldr	r3, [pc, #436]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a6c      	ldr	r2, [pc, #432]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e00b      	b.n	8002d3c <HAL_RCC_OscConfig+0xb0>
 8002d24:	4b69      	ldr	r3, [pc, #420]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a68      	ldr	r2, [pc, #416]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4b66      	ldr	r3, [pc, #408]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a65      	ldr	r2, [pc, #404]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d013      	beq.n	8002d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe fe7c 	bl	8001a40 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7fe fe78 	bl	8001a40 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	@ 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e207      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	4b5b      	ldr	r3, [pc, #364]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0xc0>
 8002d6a:	e014      	b.n	8002d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fe68 	bl	8001a40 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d74:	f7fe fe64 	bl	8001a40 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	@ 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e1f3      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	4b51      	ldr	r3, [pc, #324]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0xe8>
 8002d92:	e000      	b.n	8002d96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d063      	beq.n	8002e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002da2:	4b4a      	ldr	r3, [pc, #296]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dae:	4b47      	ldr	r3, [pc, #284]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d11c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dba:	4b44      	ldr	r3, [pc, #272]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d116      	bne.n	8002df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc6:	4b41      	ldr	r3, [pc, #260]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_RCC_OscConfig+0x152>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d001      	beq.n	8002dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e1c7      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dde:	4b3b      	ldr	r3, [pc, #236]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4937      	ldr	r1, [pc, #220]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df2:	e03a      	b.n	8002e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d020      	beq.n	8002e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dfc:	4b34      	ldr	r3, [pc, #208]	@ (8002ed0 <HAL_RCC_OscConfig+0x244>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e02:	f7fe fe1d 	bl	8001a40 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e0a:	f7fe fe19 	bl	8001a40 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e1a8      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e28:	4b28      	ldr	r3, [pc, #160]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4925      	ldr	r1, [pc, #148]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]
 8002e3c:	e015      	b.n	8002e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3e:	4b24      	ldr	r3, [pc, #144]	@ (8002ed0 <HAL_RCC_OscConfig+0x244>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe fdfc 	bl	8001a40 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e4c:	f7fe fdf8 	bl	8001a40 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e187      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d036      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d016      	beq.n	8002eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ed4 <HAL_RCC_OscConfig+0x248>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fe fddc 	bl	8001a40 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8c:	f7fe fdd8 	bl	8001a40 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e167      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x200>
 8002eaa:	e01b      	b.n	8002ee4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eac:	4b09      	ldr	r3, [pc, #36]	@ (8002ed4 <HAL_RCC_OscConfig+0x248>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb2:	f7fe fdc5 	bl	8001a40 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb8:	e00e      	b.n	8002ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eba:	f7fe fdc1 	bl	8001a40 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d907      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e150      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	42470000 	.word	0x42470000
 8002ed4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed8:	4b88      	ldr	r3, [pc, #544]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002eda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1ea      	bne.n	8002eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 8097 	beq.w	8003020 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef6:	4b81      	ldr	r3, [pc, #516]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10f      	bne.n	8002f22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	4b7d      	ldr	r3, [pc, #500]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	4a7c      	ldr	r2, [pc, #496]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f12:	4b7a      	ldr	r3, [pc, #488]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f22:	4b77      	ldr	r3, [pc, #476]	@ (8003100 <HAL_RCC_OscConfig+0x474>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d118      	bne.n	8002f60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2e:	4b74      	ldr	r3, [pc, #464]	@ (8003100 <HAL_RCC_OscConfig+0x474>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a73      	ldr	r2, [pc, #460]	@ (8003100 <HAL_RCC_OscConfig+0x474>)
 8002f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fd81 	bl	8001a40 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f42:	f7fe fd7d 	bl	8001a40 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e10c      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	4b6a      	ldr	r3, [pc, #424]	@ (8003100 <HAL_RCC_OscConfig+0x474>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d106      	bne.n	8002f76 <HAL_RCC_OscConfig+0x2ea>
 8002f68:	4b64      	ldr	r3, [pc, #400]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f6c:	4a63      	ldr	r2, [pc, #396]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f74:	e01c      	b.n	8002fb0 <HAL_RCC_OscConfig+0x324>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b05      	cmp	r3, #5
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCC_OscConfig+0x30c>
 8002f7e:	4b5f      	ldr	r3, [pc, #380]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f82:	4a5e      	ldr	r2, [pc, #376]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f8a:	4b5c      	ldr	r3, [pc, #368]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8e:	4a5b      	ldr	r2, [pc, #364]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f96:	e00b      	b.n	8002fb0 <HAL_RCC_OscConfig+0x324>
 8002f98:	4b58      	ldr	r3, [pc, #352]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9c:	4a57      	ldr	r2, [pc, #348]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa4:	4b55      	ldr	r3, [pc, #340]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa8:	4a54      	ldr	r2, [pc, #336]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002faa:	f023 0304 	bic.w	r3, r3, #4
 8002fae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d015      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7fe fd42 	bl	8001a40 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc0:	f7fe fd3e 	bl	8001a40 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e0cb      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd6:	4b49      	ldr	r3, [pc, #292]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0ee      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x334>
 8002fe2:	e014      	b.n	800300e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe4:	f7fe fd2c 	bl	8001a40 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fec:	f7fe fd28 	bl	8001a40 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e0b5      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003002:	4b3e      	ldr	r3, [pc, #248]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1ee      	bne.n	8002fec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800300e:	7dfb      	ldrb	r3, [r7, #23]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d105      	bne.n	8003020 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003014:	4b39      	ldr	r3, [pc, #228]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8003016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003018:	4a38      	ldr	r2, [pc, #224]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 800301a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800301e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80a1 	beq.w	800316c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800302a:	4b34      	ldr	r3, [pc, #208]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b08      	cmp	r3, #8
 8003034:	d05c      	beq.n	80030f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d141      	bne.n	80030c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303e:	4b31      	ldr	r3, [pc, #196]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe fcfc 	bl	8001a40 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304c:	f7fe fcf8 	bl	8001a40 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e087      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305e:	4b27      	ldr	r3, [pc, #156]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69da      	ldr	r2, [r3, #28]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003078:	019b      	lsls	r3, r3, #6
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003080:	085b      	lsrs	r3, r3, #1
 8003082:	3b01      	subs	r3, #1
 8003084:	041b      	lsls	r3, r3, #16
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308c:	061b      	lsls	r3, r3, #24
 800308e:	491b      	ldr	r1, [pc, #108]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003094:	4b1b      	ldr	r3, [pc, #108]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8003096:	2201      	movs	r2, #1
 8003098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309a:	f7fe fcd1 	bl	8001a40 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a2:	f7fe fccd 	bl	8001a40 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e05c      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b4:	4b11      	ldr	r3, [pc, #68]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x416>
 80030c0:	e054      	b.n	800316c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c2:	4b10      	ldr	r3, [pc, #64]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7fe fcba 	bl	8001a40 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d0:	f7fe fcb6 	bl	8001a40 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e045      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x444>
 80030ee:	e03d      	b.n	800316c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d107      	bne.n	8003108 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e038      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
 80030fc:	40023800 	.word	0x40023800
 8003100:	40007000 	.word	0x40007000
 8003104:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003108:	4b1b      	ldr	r3, [pc, #108]	@ (8003178 <HAL_RCC_OscConfig+0x4ec>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d028      	beq.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003120:	429a      	cmp	r2, r3
 8003122:	d121      	bne.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d11a      	bne.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003138:	4013      	ands	r3, r2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800313e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003140:	4293      	cmp	r3, r2
 8003142:	d111      	bne.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314e:	085b      	lsrs	r3, r3, #1
 8003150:	3b01      	subs	r3, #1
 8003152:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003154:	429a      	cmp	r2, r3
 8003156:	d107      	bne.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003162:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d001      	beq.n	800316c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800

0800317c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0cc      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003190:	4b68      	ldr	r3, [pc, #416]	@ (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d90c      	bls.n	80031b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b65      	ldr	r3, [pc, #404]	@ (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a6:	4b63      	ldr	r3, [pc, #396]	@ (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0b8      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d020      	beq.n	8003206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d0:	4b59      	ldr	r3, [pc, #356]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4a58      	ldr	r2, [pc, #352]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031e8:	4b53      	ldr	r3, [pc, #332]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a52      	ldr	r2, [pc, #328]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f4:	4b50      	ldr	r3, [pc, #320]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	494d      	ldr	r1, [pc, #308]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d044      	beq.n	800329c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	4b47      	ldr	r3, [pc, #284]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d119      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e07f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d003      	beq.n	800323a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003236:	2b03      	cmp	r3, #3
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323a:	4b3f      	ldr	r3, [pc, #252]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e06f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324a:	4b3b      	ldr	r3, [pc, #236]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e067      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800325a:	4b37      	ldr	r3, [pc, #220]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f023 0203 	bic.w	r2, r3, #3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4934      	ldr	r1, [pc, #208]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	4313      	orrs	r3, r2
 800326a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800326c:	f7fe fbe8 	bl	8001a40 <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	e00a      	b.n	800328a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003274:	f7fe fbe4 	bl	8001a40 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e04f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	4b2b      	ldr	r3, [pc, #172]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 020c 	and.w	r2, r3, #12
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	429a      	cmp	r2, r3
 800329a:	d1eb      	bne.n	8003274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800329c:	4b25      	ldr	r3, [pc, #148]	@ (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d20c      	bcs.n	80032c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032aa:	4b22      	ldr	r3, [pc, #136]	@ (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b20      	ldr	r3, [pc, #128]	@ (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e032      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d0:	4b19      	ldr	r3, [pc, #100]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4916      	ldr	r1, [pc, #88]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d009      	beq.n	8003302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ee:	4b12      	ldr	r3, [pc, #72]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	490e      	ldr	r1, [pc, #56]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003302:	f000 f821 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 8003306:	4602      	mov	r2, r0
 8003308:	4b0b      	ldr	r3, [pc, #44]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	490a      	ldr	r1, [pc, #40]	@ (800333c <HAL_RCC_ClockConfig+0x1c0>)
 8003314:	5ccb      	ldrb	r3, [r1, r3]
 8003316:	fa22 f303 	lsr.w	r3, r2, r3
 800331a:	4a09      	ldr	r2, [pc, #36]	@ (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 800331c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800331e:	4b09      	ldr	r3, [pc, #36]	@ (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7fe fb48 	bl	80019b8 <HAL_InitTick>

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023c00 	.word	0x40023c00
 8003338:	40023800 	.word	0x40023800
 800333c:	08009b08 	.word	0x08009b08
 8003340:	20000048 	.word	0x20000048
 8003344:	20000064 	.word	0x20000064

08003348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800334c:	b090      	sub	sp, #64	@ 0x40
 800334e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	637b      	str	r3, [r7, #52]	@ 0x34
 8003354:	2300      	movs	r3, #0
 8003356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003358:	2300      	movs	r3, #0
 800335a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003360:	4b59      	ldr	r3, [pc, #356]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b08      	cmp	r3, #8
 800336a:	d00d      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x40>
 800336c:	2b08      	cmp	r3, #8
 800336e:	f200 80a1 	bhi.w	80034b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0x34>
 8003376:	2b04      	cmp	r3, #4
 8003378:	d003      	beq.n	8003382 <HAL_RCC_GetSysClockFreq+0x3a>
 800337a:	e09b      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800337c:	4b53      	ldr	r3, [pc, #332]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x184>)
 800337e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003380:	e09b      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003382:	4b53      	ldr	r3, [pc, #332]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003384:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003386:	e098      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003388:	4b4f      	ldr	r3, [pc, #316]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003390:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003392:	4b4d      	ldr	r3, [pc, #308]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d028      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339e:	4b4a      	ldr	r3, [pc, #296]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	099b      	lsrs	r3, r3, #6
 80033a4:	2200      	movs	r2, #0
 80033a6:	623b      	str	r3, [r7, #32]
 80033a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033b0:	2100      	movs	r1, #0
 80033b2:	4b47      	ldr	r3, [pc, #284]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80033b4:	fb03 f201 	mul.w	r2, r3, r1
 80033b8:	2300      	movs	r3, #0
 80033ba:	fb00 f303 	mul.w	r3, r0, r3
 80033be:	4413      	add	r3, r2
 80033c0:	4a43      	ldr	r2, [pc, #268]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80033c2:	fba0 1202 	umull	r1, r2, r0, r2
 80033c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033c8:	460a      	mov	r2, r1
 80033ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80033cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033ce:	4413      	add	r3, r2
 80033d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033d4:	2200      	movs	r2, #0
 80033d6:	61bb      	str	r3, [r7, #24]
 80033d8:	61fa      	str	r2, [r7, #28]
 80033da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80033e2:	f7fc ff01 	bl	80001e8 <__aeabi_uldivmod>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4613      	mov	r3, r2
 80033ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033ee:	e053      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f0:	4b35      	ldr	r3, [pc, #212]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	099b      	lsrs	r3, r3, #6
 80033f6:	2200      	movs	r2, #0
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	617a      	str	r2, [r7, #20]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003402:	f04f 0b00 	mov.w	fp, #0
 8003406:	4652      	mov	r2, sl
 8003408:	465b      	mov	r3, fp
 800340a:	f04f 0000 	mov.w	r0, #0
 800340e:	f04f 0100 	mov.w	r1, #0
 8003412:	0159      	lsls	r1, r3, #5
 8003414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003418:	0150      	lsls	r0, r2, #5
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	ebb2 080a 	subs.w	r8, r2, sl
 8003422:	eb63 090b 	sbc.w	r9, r3, fp
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003432:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003436:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800343a:	ebb2 0408 	subs.w	r4, r2, r8
 800343e:	eb63 0509 	sbc.w	r5, r3, r9
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	00eb      	lsls	r3, r5, #3
 800344c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003450:	00e2      	lsls	r2, r4, #3
 8003452:	4614      	mov	r4, r2
 8003454:	461d      	mov	r5, r3
 8003456:	eb14 030a 	adds.w	r3, r4, sl
 800345a:	603b      	str	r3, [r7, #0]
 800345c:	eb45 030b 	adc.w	r3, r5, fp
 8003460:	607b      	str	r3, [r7, #4]
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800346e:	4629      	mov	r1, r5
 8003470:	028b      	lsls	r3, r1, #10
 8003472:	4621      	mov	r1, r4
 8003474:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003478:	4621      	mov	r1, r4
 800347a:	028a      	lsls	r2, r1, #10
 800347c:	4610      	mov	r0, r2
 800347e:	4619      	mov	r1, r3
 8003480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003482:	2200      	movs	r2, #0
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	60fa      	str	r2, [r7, #12]
 8003488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800348c:	f7fc feac 	bl	80001e8 <__aeabi_uldivmod>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4613      	mov	r3, r2
 8003496:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003498:	4b0b      	ldr	r3, [pc, #44]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	0c1b      	lsrs	r3, r3, #16
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	3301      	adds	r3, #1
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80034a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034b2:	e002      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034b4:	4b05      	ldr	r3, [pc, #20]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x184>)
 80034b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3740      	adds	r7, #64	@ 0x40
 80034c0:	46bd      	mov	sp, r7
 80034c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034c6:	bf00      	nop
 80034c8:	40023800 	.word	0x40023800
 80034cc:	00f42400 	.word	0x00f42400
 80034d0:	018cba80 	.word	0x018cba80

080034d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034d8:	4b03      	ldr	r3, [pc, #12]	@ (80034e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034da:	681b      	ldr	r3, [r3, #0]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	20000048 	.word	0x20000048

080034ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034f0:	f7ff fff0 	bl	80034d4 <HAL_RCC_GetHCLKFreq>
 80034f4:	4602      	mov	r2, r0
 80034f6:	4b05      	ldr	r3, [pc, #20]	@ (800350c <HAL_RCC_GetPCLK1Freq+0x20>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	0a9b      	lsrs	r3, r3, #10
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	4903      	ldr	r1, [pc, #12]	@ (8003510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003502:	5ccb      	ldrb	r3, [r1, r3]
 8003504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003508:	4618      	mov	r0, r3
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40023800 	.word	0x40023800
 8003510:	08009b18 	.word	0x08009b18

08003514 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003514:	b084      	sub	sp, #16
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	f107 001c 	add.w	r0, r7, #28
 8003522:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003526:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800352a:	2b01      	cmp	r3, #1
 800352c:	d123      	bne.n	8003576 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003532:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003542:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003556:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800355a:	2b01      	cmp	r3, #1
 800355c:	d105      	bne.n	800356a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 faa0 	bl	8003ab0 <USB_CoreReset>
 8003570:	4603      	mov	r3, r0
 8003572:	73fb      	strb	r3, [r7, #15]
 8003574:	e01b      	b.n	80035ae <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fa94 	bl	8003ab0 <USB_CoreReset>
 8003588:	4603      	mov	r3, r0
 800358a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800358c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003590:	2b00      	cmp	r3, #0
 8003592:	d106      	bne.n	80035a2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003598:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	639a      	str	r2, [r3, #56]	@ 0x38
 80035a0:	e005      	b.n	80035ae <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80035ae:	7fbb      	ldrb	r3, [r7, #30]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d10b      	bne.n	80035cc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f043 0206 	orr.w	r2, r3, #6
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f043 0220 	orr.w	r2, r3, #32
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035d8:	b004      	add	sp, #16
 80035da:	4770      	bx	lr

080035dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f023 0201 	bic.w	r2, r3, #1
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	460b      	mov	r3, r1
 8003608:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d115      	bne.n	800364c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800362c:	200a      	movs	r0, #10
 800362e:	f7fe fa13 	bl	8001a58 <HAL_Delay>
      ms += 10U;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	330a      	adds	r3, #10
 8003636:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 fa2b 	bl	8003a94 <USB_GetMode>
 800363e:	4603      	mov	r3, r0
 8003640:	2b01      	cmp	r3, #1
 8003642:	d01e      	beq.n	8003682 <USB_SetCurrentMode+0x84>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2bc7      	cmp	r3, #199	@ 0xc7
 8003648:	d9f0      	bls.n	800362c <USB_SetCurrentMode+0x2e>
 800364a:	e01a      	b.n	8003682 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d115      	bne.n	800367e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800365e:	200a      	movs	r0, #10
 8003660:	f7fe f9fa 	bl	8001a58 <HAL_Delay>
      ms += 10U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	330a      	adds	r3, #10
 8003668:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fa12 	bl	8003a94 <USB_GetMode>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <USB_SetCurrentMode+0x84>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2bc7      	cmp	r3, #199	@ 0xc7
 800367a:	d9f0      	bls.n	800365e <USB_SetCurrentMode+0x60>
 800367c:	e001      	b.n	8003682 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e005      	b.n	800368e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2bc8      	cmp	r3, #200	@ 0xc8
 8003686:	d101      	bne.n	800368c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003698:	b084      	sub	sp, #16
 800369a:	b580      	push	{r7, lr}
 800369c:	b086      	sub	sp, #24
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80036a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80036b2:	2300      	movs	r3, #0
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	e009      	b.n	80036cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	3340      	adds	r3, #64	@ 0x40
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	2200      	movs	r2, #0
 80036c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	3301      	adds	r3, #1
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	2b0e      	cmp	r3, #14
 80036d0:	d9f2      	bls.n	80036b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80036d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d11c      	bne.n	8003714 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036e8:	f043 0302 	orr.w	r3, r3, #2
 80036ec:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fe:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	639a      	str	r2, [r3, #56]	@ 0x38
 8003712:	e00b      	b.n	800372c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003718:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003724:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003732:	461a      	mov	r2, r3
 8003734:	2300      	movs	r3, #0
 8003736:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003738:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800373c:	2b01      	cmp	r3, #1
 800373e:	d10d      	bne.n	800375c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003740:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003744:	2b00      	cmp	r3, #0
 8003746:	d104      	bne.n	8003752 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003748:	2100      	movs	r1, #0
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f968 	bl	8003a20 <USB_SetDevSpeed>
 8003750:	e008      	b.n	8003764 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003752:	2101      	movs	r1, #1
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f963 	bl	8003a20 <USB_SetDevSpeed>
 800375a:	e003      	b.n	8003764 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800375c:	2103      	movs	r1, #3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f95e 	bl	8003a20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003764:	2110      	movs	r1, #16
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f8fa 	bl	8003960 <USB_FlushTxFifo>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f924 	bl	80039c4 <USB_FlushRxFifo>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800378c:	461a      	mov	r2, r3
 800378e:	2300      	movs	r3, #0
 8003790:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003798:	461a      	mov	r2, r3
 800379a:	2300      	movs	r3, #0
 800379c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037a4:	461a      	mov	r2, r3
 80037a6:	2300      	movs	r3, #0
 80037a8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037aa:	2300      	movs	r3, #0
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	e043      	b.n	8003838 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037c6:	d118      	bne.n	80037fa <USB_DevInit+0x162>
    {
      if (i == 0U)
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10a      	bne.n	80037e4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037da:	461a      	mov	r2, r3
 80037dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e013      	b.n	800380c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037f0:	461a      	mov	r2, r3
 80037f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	e008      	b.n	800380c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003806:	461a      	mov	r2, r3
 8003808:	2300      	movs	r3, #0
 800380a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003818:	461a      	mov	r2, r3
 800381a:	2300      	movs	r3, #0
 800381c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800382a:	461a      	mov	r2, r3
 800382c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003830:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	3301      	adds	r3, #1
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800383c:	461a      	mov	r2, r3
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4293      	cmp	r3, r2
 8003842:	d3b5      	bcc.n	80037b0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003844:	2300      	movs	r3, #0
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	e043      	b.n	80038d2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800385c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003860:	d118      	bne.n	8003894 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10a      	bne.n	800387e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003874:	461a      	mov	r2, r3
 8003876:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	e013      	b.n	80038a6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4413      	add	r3, r2
 8003886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800388a:	461a      	mov	r2, r3
 800388c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e008      	b.n	80038a6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038a0:	461a      	mov	r2, r3
 80038a2:	2300      	movs	r3, #0
 80038a4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b2:	461a      	mov	r2, r3
 80038b4:	2300      	movs	r3, #0
 80038b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038c4:	461a      	mov	r2, r3
 80038c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	3301      	adds	r3, #1
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80038d6:	461a      	mov	r2, r3
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4293      	cmp	r3, r2
 80038dc:	d3b5      	bcc.n	800384a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038f0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80038fe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003900:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003904:	2b00      	cmp	r3, #0
 8003906:	d105      	bne.n	8003914 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	f043 0210 	orr.w	r2, r3, #16
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699a      	ldr	r2, [r3, #24]
 8003918:	4b10      	ldr	r3, [pc, #64]	@ (800395c <USB_DevInit+0x2c4>)
 800391a:	4313      	orrs	r3, r2
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003920:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	f043 0208 	orr.w	r2, r3, #8
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003934:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003938:	2b01      	cmp	r3, #1
 800393a:	d107      	bne.n	800394c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003944:	f043 0304 	orr.w	r3, r3, #4
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800394c:	7dfb      	ldrb	r3, [r7, #23]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003958:	b004      	add	sp, #16
 800395a:	4770      	bx	lr
 800395c:	803c3800 	.word	0x803c3800

08003960 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	3301      	adds	r3, #1
 8003972:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800397a:	d901      	bls.n	8003980 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e01b      	b.n	80039b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	daf2      	bge.n	800396e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	019b      	lsls	r3, r3, #6
 8003990:	f043 0220 	orr.w	r2, r3, #32
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3301      	adds	r3, #1
 800399c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80039a4:	d901      	bls.n	80039aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e006      	b.n	80039b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	d0f0      	beq.n	8003998 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	3301      	adds	r3, #1
 80039d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80039dc:	d901      	bls.n	80039e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e018      	b.n	8003a14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	daf2      	bge.n	80039d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2210      	movs	r2, #16
 80039f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	3301      	adds	r3, #1
 80039f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a00:	d901      	bls.n	8003a06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e006      	b.n	8003a14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f003 0310 	and.w	r3, r3, #16
 8003a0e:	2b10      	cmp	r3, #16
 8003a10:	d0f0      	beq.n	80039f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	68f9      	ldr	r1, [r7, #12]
 8003a3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a40:	4313      	orrs	r3, r2
 8003a42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b085      	sub	sp, #20
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003a6c:	f023 0303 	bic.w	r3, r3, #3
 8003a70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a80:	f043 0302 	orr.w	r3, r3, #2
 8003a84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ac8:	d901      	bls.n	8003ace <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e01b      	b.n	8003b06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	daf2      	bge.n	8003abc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f043 0201 	orr.w	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003af2:	d901      	bls.n	8003af8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e006      	b.n	8003b06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d0f0      	beq.n	8003ae6 <USB_CoreReset+0x36>

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_t _cdcd_cfg = TUD_CDC_CONFIGURE_DEFAULT();

static bool _prep_out_transaction(uint8_t itf) {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	22a8      	movs	r2, #168	@ 0xa8
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	4a30      	ldr	r2, [pc, #192]	@ (8003bec <_prep_out_transaction+0xd8>)
 8003b2c:	4413      	add	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	01db      	lsls	r3, r3, #7
 8003b34:	4a2e      	ldr	r2, [pc, #184]	@ (8003bf0 <_prep_out_transaction+0xdc>)
 8003b36:	4413      	add	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 8003b3a:	f001 ffb9 	bl	8005ab0 <tud_mounted>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d009      	beq.n	8003b58 <_prep_out_transaction+0x44>
 8003b44:	f001 ffc6 	bl	8005ad4 <tud_suspended>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f083 0301 	eor.w	r3, r3, #1
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <_prep_out_transaction+0x44>
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <_prep_out_transaction+0x46>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 8003b60:	f083 0301 	eor.w	r3, r3, #1
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d103      	bne.n	8003b72 <_prep_out_transaction+0x5e>
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	78db      	ldrb	r3, [r3, #3]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <_prep_out_transaction+0x62>
 8003b72:	2300      	movs	r3, #0
 8003b74:	e035      	b.n	8003be2 <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	3310      	adds	r3, #16
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f001 fe13 	bl	80057a6 <tu_fifo_remaining>
 8003b80:	4603      	mov	r3, r0
 8003b82:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 8003b84:	897b      	ldrh	r3, [r7, #10]
 8003b86:	2b3f      	cmp	r3, #63	@ 0x3f
 8003b88:	d801      	bhi.n	8003b8e <_prep_out_transaction+0x7a>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e029      	b.n	8003be2 <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	78da      	ldrb	r2, [r3, #3]
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
 8003b94:	4611      	mov	r1, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f003 faac 	bl	80070f4 <usbd_edpt_claim>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f083 0301 	eor.w	r3, r3, #1
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <_prep_out_transaction+0x98>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e01a      	b.n	8003be2 <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	3310      	adds	r3, #16
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f001 fdf8 	bl	80057a6 <tu_fifo_remaining>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 8003bba:	897b      	ldrh	r3, [r7, #10]
 8003bbc:	2b3f      	cmp	r3, #63	@ 0x3f
 8003bbe:	d908      	bls.n	8003bd2 <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	78d9      	ldrb	r1, [r3, #3]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	7df8      	ldrb	r0, [r7, #23]
 8003bc8:	2340      	movs	r3, #64	@ 0x40
 8003bca:	f003 fae3 	bl	8007194 <usbd_edpt_xfer>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	e007      	b.n	8003be2 <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	78da      	ldrb	r2, [r3, #3]
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
 8003bd8:	4611      	mov	r1, r2
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f003 fab2 	bl	8007144 <usbd_edpt_release>
    return false;
 8003be0:	2300      	movs	r3, #0
  }
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	200008f8 	.word	0x200008f8
 8003bf0:	200009a0 	.word	0x200009a0

08003bf4 <tud_cdc_n_write>:
}

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, const void* buffer, uint32_t bufsize) {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
 8003c04:	22a8      	movs	r2, #168	@ 0xa8
 8003c06:	fb02 f303 	mul.w	r3, r2, r3
 8003c0a:	4a13      	ldr	r2, [pc, #76]	@ (8003c58 <tud_cdc_n_write+0x64>)
 8003c0c:	4413      	add	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]
  uint16_t wr_count = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f103 001c 	add.w	r0, r3, #28
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d802      	bhi.n	8003c26 <tud_cdc_n_write+0x32>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	e001      	b.n	8003c2a <tud_cdc_n_write+0x36>
 8003c26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	f001 fe7d 	bl	800592c <tu_fifo_write_n>
 8003c32:	4603      	mov	r3, r0
 8003c34:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	331c      	adds	r3, #28
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f001 fd3e 	bl	80056bc <tu_fifo_count>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b3f      	cmp	r3, #63	@ 0x3f
 8003c44:	d903      	bls.n	8003c4e <tud_cdc_n_write+0x5a>
      #if CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
      || tu_fifo_full(&p_cdc->tx_ff) // check full if fifo size is less than packet size
      #endif
      ) {
    tud_cdc_n_write_flush(itf);
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 f807 	bl	8003c5c <tud_cdc_n_write_flush>
  }

  return wr_count;
 8003c4e:	8a7b      	ldrh	r3, [r7, #18]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	200008f8 	.word	0x200008f8

08003c5c <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	22a8      	movs	r2, #168	@ 0xa8
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
 8003c6e:	4a39      	ldr	r2, [pc, #228]	@ (8003d54 <tud_cdc_n_write_flush+0xf8>)
 8003c70:	4413      	add	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	01db      	lsls	r3, r3, #7
 8003c78:	4a37      	ldr	r2, [pc, #220]	@ (8003d58 <tud_cdc_n_write_flush+0xfc>)
 8003c7a:	4413      	add	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
 8003c7e:	f001 ff17 	bl	8005ab0 <tud_mounted>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d009      	beq.n	8003c9c <tud_cdc_n_write_flush+0x40>
 8003c88:	f001 ff24 	bl	8005ad4 <tud_suspended>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f083 0301 	eor.w	r3, r3, #1
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <tud_cdc_n_write_flush+0x40>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <tud_cdc_n_write_flush+0x42>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 8003ca4:	f083 0301 	eor.w	r3, r3, #1
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <tud_cdc_n_write_flush+0x56>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	e04c      	b.n	8003d4c <tud_cdc_n_write_flush+0xf0>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	331c      	adds	r3, #28
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f001 fd00 	bl	80056bc <tu_fifo_count>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <tud_cdc_n_write_flush+0x6a>
    return 0;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e042      	b.n	8003d4c <tud_cdc_n_write_flush+0xf0>
  }

  const uint8_t rhport = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	789a      	ldrb	r2, [r3, #2]
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f003 fa0e 	bl	80070f4 <usbd_edpt_claim>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f083 0301 	eor.w	r3, r3, #1
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <tud_cdc_n_write_flush+0x8c>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e031      	b.n	8003d4c <tud_cdc_n_write_flush+0xf0>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f103 001c 	add.w	r0, r3, #28
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	3340      	adds	r3, #64	@ 0x40
 8003cf2:	2240      	movs	r2, #64	@ 0x40
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	f001 fdb2 	bl	800585e <tu_fifo_read_n>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	81bb      	strh	r3, [r7, #12]

  if (count) {
 8003cfe:	89bb      	ldrh	r3, [r7, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d01b      	beq.n	8003d3c <tud_cdc_n_write_flush+0xe0>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	7899      	ldrb	r1, [r3, #2]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8003d0e:	89bb      	ldrh	r3, [r7, #12]
 8003d10:	7bf8      	ldrb	r0, [r7, #15]
 8003d12:	f003 fa3f 	bl	8007194 <usbd_edpt_xfer>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f083 0301 	eor.w	r3, r3, #1
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <tud_cdc_n_write_flush+0xdc>
 8003d22:	4b0e      	ldr	r3, [pc, #56]	@ (8003d5c <tud_cdc_n_write_flush+0x100>)
 8003d24:	60bb      	str	r3, [r7, #8]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d000      	beq.n	8003d34 <tud_cdc_n_write_flush+0xd8>
 8003d32:	be00      	bkpt	0x0000
 8003d34:	2300      	movs	r3, #0
 8003d36:	e009      	b.n	8003d4c <tud_cdc_n_write_flush+0xf0>
    return count;
 8003d38:	89bb      	ldrh	r3, [r7, #12]
 8003d3a:	e007      	b.n	8003d4c <tud_cdc_n_write_flush+0xf0>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	789a      	ldrb	r2, [r3, #2]
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f003 f9fd 	bl	8007144 <usbd_edpt_release>
    return 0;
 8003d4a:	2300      	movs	r3, #0
  }
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	200008f8 	.word	0x200008f8
 8003d58:	200009a0 	.word	0x200009a0
 8003d5c:	e000edf0 	.word	0xe000edf0

08003d60 <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8003d66:	22a8      	movs	r2, #168	@ 0xa8
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4824      	ldr	r0, [pc, #144]	@ (8003dfc <cdcd_init+0x9c>)
 8003d6c:	f005 fe2d 	bl	80099ca <memset>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8003d70:	2300      	movs	r3, #0
 8003d72:	71fb      	strb	r3, [r7, #7]
 8003d74:	e03a      	b.n	8003dec <cdcd_init+0x8c>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	22a8      	movs	r2, #168	@ 0xa8
 8003d7a:	fb02 f303 	mul.w	r3, r2, r3
 8003d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8003dfc <cdcd_init+0x9c>)
 8003d80:	4413      	add	r3, r2
 8003d82:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	22ff      	movs	r2, #255	@ 0xff
 8003d88:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003d90:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2200      	movs	r2, #0
 8003d96:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2208      	movs	r2, #8
 8003da2:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	f103 0010 	add.w	r0, r3, #16
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8003db0:	2300      	movs	r3, #0
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	2301      	movs	r3, #1
 8003db6:	2240      	movs	r2, #64	@ 0x40
 8003db8:	f000 ffee 	bl	8004d98 <tu_fifo_config>

    // TX fifo can be configured to change to overwritable if not connected (DTR bit not set). Without DTR we do not
    // know if data is actually polled by terminal. This way the most current data is prioritized.
    // Default: is overwritable
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	f103 001c 	add.w	r0, r3, #28
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8003dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8003e00 <cdcd_init+0xa0>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	bf14      	ite	ne
 8003dd6:	2301      	movne	r3, #1
 8003dd8:	2300      	moveq	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	2301      	movs	r3, #1
 8003de0:	2240      	movs	r2, #64	@ 0x40
 8003de2:	f000 ffd9 	bl	8004d98 <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	3301      	adds	r3, #1
 8003dea:	71fb      	strb	r3, [r7, #7]
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0c1      	beq.n	8003d76 <cdcd_init+0x16>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 8003df2:	bf00      	nop
 8003df4:	bf00      	nop
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	200008f8 	.word	0x200008f8
 8003e00:	2000006c 	.word	0x2000006c

08003e04 <cdcd_deinit>:

bool cdcd_deinit(void) {
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 8003e08:	2301      	movs	r3, #1
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8003e1e:	2300      	movs	r3, #0
 8003e20:	73fb      	strb	r3, [r7, #15]
 8003e22:	e037      	b.n	8003e94 <cdcd_reset+0x80>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	22a8      	movs	r2, #168	@ 0xa8
 8003e28:	fb02 f303 	mul.w	r3, r2, r3
 8003e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea4 <cdcd_reset+0x90>)
 8003e2e:	4413      	add	r3, r2
 8003e30:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8003e32:	2205      	movs	r2, #5
 8003e34:	2100      	movs	r1, #0
 8003e36:	68b8      	ldr	r0, [r7, #8]
 8003e38:	f005 fdc7 	bl	80099ca <memset>
    if (!_cdcd_cfg.rx_persistent) {
 8003e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea8 <cdcd_reset+0x94>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d104      	bne.n	8003e54 <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	3310      	adds	r3, #16
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f001 fd90 	bl	8005974 <tu_fifo_clear>
    }
    if (!_cdcd_cfg.tx_persistent) {
 8003e54:	4b14      	ldr	r3, [pc, #80]	@ (8003ea8 <cdcd_reset+0x94>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d104      	bne.n	8003e6c <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	331c      	adds	r3, #28
 8003e66:	4618      	mov	r0, r3
 8003e68:	f001 fd84 	bl	8005974 <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f103 021c 	add.w	r2, r3, #28
 8003e72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea8 <cdcd_reset+0x94>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	4619      	mov	r1, r3
 8003e88:	4610      	mov	r0, r2
 8003e8a:	f001 fd84 	bl	8005996 <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	3301      	adds	r3, #1
 8003e92:	73fb      	strb	r3, [r7, #15]
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0c4      	beq.n	8003e24 <cdcd_reset+0x10>
  }
}
 8003e9a:	bf00      	nop
 8003e9c:	bf00      	nop
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	200008f8 	.word	0x200008f8
 8003ea8:	2000006c 	.word	0x2000006c

08003eac <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b09a      	sub	sp, #104	@ 0x68
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	6039      	str	r1, [r7, #0]
 8003eb6:	71fb      	strb	r3, [r7, #7]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	795b      	ldrb	r3, [r3, #5]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d103      	bne.n	8003ecc <cdcd_open+0x20>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	799b      	ldrb	r3, [r3, #6]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d001      	beq.n	8003ed0 <cdcd_open+0x24>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e0da      	b.n	8004086 <cdcd_open+0x1da>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8003ed6:	e010      	b.n	8003efa <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 8003ed8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003edc:	22a8      	movs	r2, #168	@ 0xa8
 8003ede:	fb02 f303 	mul.w	r3, r2, r3
 8003ee2:	4a6b      	ldr	r2, [pc, #428]	@ (8004090 <cdcd_open+0x1e4>)
 8003ee4:	4413      	add	r3, r2
 8003ee6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 8003ee8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003eea:	789b      	ldrb	r3, [r3, #2]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d009      	beq.n	8003f04 <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8003ef0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8003efa:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0ea      	beq.n	8003ed8 <cdcd_open+0x2c>
 8003f02:	e000      	b.n	8003f06 <cdcd_open+0x5a>
      break;
 8003f04:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 8003f06:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <cdcd_open+0x78>
 8003f0e:	4b61      	ldr	r3, [pc, #388]	@ (8004094 <cdcd_open+0x1e8>)
 8003f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d000      	beq.n	8003f20 <cdcd_open+0x74>
 8003f1e:	be00      	bkpt	0x0000
 8003f20:	2300      	movs	r3, #0
 8003f22:	e0b0      	b.n	8004086 <cdcd_open+0x1da>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	789a      	ldrb	r2, [r3, #2]
 8003f28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f2a:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8003f2c:	2309      	movs	r3, #9
 8003f2e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003f36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f42:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 8003f44:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8003f46:	e013      	b.n	8003f70 <cdcd_open+0xc4>
 8003f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f4a:	633b      	str	r3, [r7, #48]	@ 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4e:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 8003f50:	461a      	mov	r2, r3
 8003f52:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003f56:	4413      	add	r3, r2
 8003f58:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8003f5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f62:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f6c:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8003f6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8003f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f76:	3301      	adds	r3, #1
 8003f78:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8003f7a:	2b24      	cmp	r3, #36	@ 0x24
 8003f7c:	d104      	bne.n	8003f88 <cdcd_open+0xdc>
 8003f7e:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8003f82:	88bb      	ldrh	r3, [r7, #4]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d9df      	bls.n	8003f48 <cdcd_open+0x9c>
 8003f88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8e:	3301      	adds	r3, #1
 8003f90:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 8003f92:	2b05      	cmp	r3, #5
 8003f94:	d12f      	bne.n	8003ff6 <cdcd_open+0x14a>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 8003f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f98:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f003 f862 	bl	8007068 <usbd_edpt_open>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f083 0301 	eor.w	r3, r3, #1
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <cdcd_open+0x11a>
 8003fb0:	4b38      	ldr	r3, [pc, #224]	@ (8004094 <cdcd_open+0x1e8>)
 8003fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d000      	beq.n	8003fc2 <cdcd_open+0x116>
 8003fc0:	be00      	bkpt	0x0000
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	e05f      	b.n	8004086 <cdcd_open+0x1da>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8003fc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fc8:	789a      	ldrb	r2, [r3, #2]
 8003fca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fcc:	705a      	strb	r2, [r3, #1]
 8003fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd0:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003fdc:	4413      	add	r3, r2
 8003fde:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8003fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe8:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8003ff4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff8:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8004000:	2b04      	cmp	r3, #4
 8004002:	d139      	bne.n	8004078 <cdcd_open+0x1cc>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 8004004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004006:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8004008:	2b0a      	cmp	r3, #10
 800400a:	d135      	bne.n	8004078 <cdcd_open+0x1cc>
 800400c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800400e:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8004014:	461a      	mov	r2, r3
 8004016:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800401a:	4413      	add	r3, r2
 800401c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8004020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004022:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8004032:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 8004034:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004036:	3303      	adds	r3, #3
 8004038:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800403a:	3202      	adds	r2, #2
 800403c:	79f8      	ldrb	r0, [r7, #7]
 800403e:	9201      	str	r2, [sp, #4]
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	2302      	movs	r3, #2
 8004044:	2202      	movs	r2, #2
 8004046:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004048:	f002 ffa6 	bl	8006f98 <usbd_open_edpt_pair>
 800404c:	4603      	mov	r3, r0
 800404e:	f083 0301 	eor.w	r3, r3, #1
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <cdcd_open+0x1c2>
 8004058:	4b0e      	ldr	r3, [pc, #56]	@ (8004094 <cdcd_open+0x1e8>)
 800405a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800405c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d000      	beq.n	800406a <cdcd_open+0x1be>
 8004068:	be00      	bkpt	0x0000
 800406a:	2300      	movs	r3, #0
 800406c:	e00b      	b.n	8004086 <cdcd_open+0x1da>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 800406e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004072:	330e      	adds	r3, #14
 8004074:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 8004078:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff fd49 	bl	8003b14 <_prep_out_transaction>

  return drv_len;
 8004082:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 8004086:	4618      	mov	r0, r3
 8004088:	3760      	adds	r7, #96	@ 0x60
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	200008f8 	.word	0x200008f8
 8004094:	e000edf0 	.word	0xe000edf0

08004098 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	@ 0x28
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	603a      	str	r2, [r7, #0]
 80040a2:	71fb      	strb	r3, [r7, #7]
 80040a4:	460b      	mov	r3, r1
 80040a6:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b20      	cmp	r3, #32
 80040b4:	d001      	beq.n	80040ba <cdcd_control_xfer_cb+0x22>
 80040b6:	2300      	movs	r3, #0
 80040b8:	e0e6      	b.n	8004288 <cdcd_control_xfer_cb+0x1f0>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80040ba:	2300      	movs	r3, #0
 80040bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80040c0:	e014      	b.n	80040ec <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 80040c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040c6:	22a8      	movs	r2, #168	@ 0xa8
 80040c8:	fb02 f303 	mul.w	r3, r2, r3
 80040cc:	4a70      	ldr	r2, [pc, #448]	@ (8004290 <cdcd_control_xfer_cb+0x1f8>)
 80040ce:	4413      	add	r3, r2
 80040d0:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	889b      	ldrh	r3, [r3, #4]
 80040dc:	b29b      	uxth	r3, r3
 80040de:	429a      	cmp	r2, r3
 80040e0:	d009      	beq.n	80040f6 <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80040e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040e6:	3301      	adds	r3, #1
 80040e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80040ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0e6      	beq.n	80040c2 <cdcd_control_xfer_cb+0x2a>
 80040f4:	e000      	b.n	80040f8 <cdcd_control_xfer_cb+0x60>
      break;
 80040f6:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 80040f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <cdcd_control_xfer_cb+0x6c>
 8004100:	2300      	movs	r3, #0
 8004102:	e0c1      	b.n	8004288 <cdcd_control_xfer_cb+0x1f0>

  switch (request->bRequest) {
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	785b      	ldrb	r3, [r3, #1]
 8004108:	3b20      	subs	r3, #32
 800410a:	2b03      	cmp	r3, #3
 800410c:	f200 80b2 	bhi.w	8004274 <cdcd_control_xfer_cb+0x1dc>
 8004110:	a201      	add	r2, pc, #4	@ (adr r2, 8004118 <cdcd_control_xfer_cb+0x80>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	08004129 	.word	0x08004129
 800411c:	08004165 	.word	0x08004165
 8004120:	0800417f 	.word	0x0800417f
 8004124:	08004243 	.word	0x08004243
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8004128:	79bb      	ldrb	r3, [r7, #6]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d108      	bne.n	8004140 <cdcd_control_xfer_cb+0xa8>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	f103 0208 	add.w	r2, r3, #8
 8004134:	79f8      	ldrb	r0, [r7, #7]
 8004136:	2307      	movs	r3, #7
 8004138:	6839      	ldr	r1, [r7, #0]
 800413a:	f003 fa13 	bl	8007564 <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 800413e:	e09b      	b.n	8004278 <cdcd_control_xfer_cb+0x1e0>
      } else if (stage == CONTROL_STAGE_ACK) {
 8004140:	79bb      	ldrb	r3, [r7, #6]
 8004142:	2b03      	cmp	r3, #3
 8004144:	f040 8098 	bne.w	8004278 <cdcd_control_xfer_cb+0x1e0>
        if (tud_cdc_line_coding_cb) {
 8004148:	4b52      	ldr	r3, [pc, #328]	@ (8004294 <cdcd_control_xfer_cb+0x1fc>)
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 8094 	beq.w	8004278 <cdcd_control_xfer_cb+0x1e0>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	f103 0208 	add.w	r2, r3, #8
 8004156:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800415a:	4611      	mov	r1, r2
 800415c:	4618      	mov	r0, r3
 800415e:	f7fd fb9f 	bl	80018a0 <tud_cdc_line_coding_cb>
      break;
 8004162:	e089      	b.n	8004278 <cdcd_control_xfer_cb+0x1e0>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8004164:	79bb      	ldrb	r3, [r7, #6]
 8004166:	2b01      	cmp	r3, #1
 8004168:	f040 8088 	bne.w	800427c <cdcd_control_xfer_cb+0x1e4>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	f103 0208 	add.w	r2, r3, #8
 8004172:	79f8      	ldrb	r0, [r7, #7]
 8004174:	2307      	movs	r3, #7
 8004176:	6839      	ldr	r1, [r7, #0]
 8004178:	f003 f9f4 	bl	8007564 <tud_control_xfer>
      }
      break;
 800417c:	e07e      	b.n	800427c <cdcd_control_xfer_cb+0x1e4>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 800417e:	79bb      	ldrb	r3, [r7, #6]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d105      	bne.n	8004190 <cdcd_control_xfer_cb+0xf8>
        tud_control_status(rhport, request);
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	6839      	ldr	r1, [r7, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f003 f979 	bl	8007480 <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 800418e:	e077      	b.n	8004280 <cdcd_control_xfer_cb+0x1e8>
      } else if (stage == CONTROL_STAGE_ACK) {
 8004190:	79bb      	ldrb	r3, [r7, #6]
 8004192:	2b03      	cmp	r3, #3
 8004194:	d174      	bne.n	8004280 <cdcd_control_xfer_cb+0x1e8>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	885b      	ldrh	r3, [r3, #2]
 800419a:	b29b      	uxth	r3, r3
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	2300      	movs	r3, #0
 80041a0:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	fa22 f303 	lsr.w	r3, r2, r3
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	bf14      	ite	ne
 80041b2:	2301      	movne	r3, #1
 80041b4:	2300      	moveq	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	885b      	ldrh	r3, [r3, #2]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	61bb      	str	r3, [r7, #24]
 80041c2:	2301      	movs	r3, #1
 80041c4:	75fb      	strb	r3, [r7, #23]
 80041c6:	7dfb      	ldrb	r3, [r7, #23]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	fa22 f303 	lsr.w	r3, r2, r3
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bf14      	ite	ne
 80041d6:	2301      	movne	r3, #1
 80041d8:	2300      	moveq	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	885b      	ldrh	r3, [r3, #2]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	711a      	strb	r2, [r3, #4]
        if (_cdcd_cfg.tx_overwritabe_if_not_connected) {
 80041ea:	4b2b      	ldr	r3, [pc, #172]	@ (8004298 <cdcd_control_xfer_cb+0x200>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d013      	beq.n	8004220 <cdcd_control_xfer_cb+0x188>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	f103 021c 	add.w	r2, r3, #28
 80041fe:	7ffb      	ldrb	r3, [r7, #31]
 8004200:	2b00      	cmp	r3, #0
 8004202:	bf14      	ite	ne
 8004204:	2301      	movne	r3, #1
 8004206:	2300      	moveq	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	f083 0301 	eor.w	r3, r3, #1
 800420e:	b2db      	uxtb	r3, r3
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	b2db      	uxtb	r3, r3
 8004216:	4619      	mov	r1, r3
 8004218:	4610      	mov	r0, r2
 800421a:	f001 fbbc 	bl	8005996 <tu_fifo_set_overwritable>
 800421e:	e005      	b.n	800422c <cdcd_control_xfer_cb+0x194>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, false);
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	331c      	adds	r3, #28
 8004224:	2100      	movs	r1, #0
 8004226:	4618      	mov	r0, r3
 8004228:	f001 fbb5 	bl	8005996 <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 800422c:	4b1b      	ldr	r3, [pc, #108]	@ (800429c <cdcd_control_xfer_cb+0x204>)
 800422e:	2b00      	cmp	r3, #0
 8004230:	d026      	beq.n	8004280 <cdcd_control_xfer_cb+0x1e8>
          tud_cdc_line_state_cb(itf, dtr, rts);
 8004232:	7fba      	ldrb	r2, [r7, #30]
 8004234:	7ff9      	ldrb	r1, [r7, #31]
 8004236:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800423a:	4618      	mov	r0, r3
 800423c:	f7fc fac4 	bl	80007c8 <tud_cdc_line_state_cb>
      break;
 8004240:	e01e      	b.n	8004280 <cdcd_control_xfer_cb+0x1e8>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 8004242:	79bb      	ldrb	r3, [r7, #6]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d105      	bne.n	8004254 <cdcd_control_xfer_cb+0x1bc>
        tud_control_status(rhport, request);
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	6839      	ldr	r1, [r7, #0]
 800424c:	4618      	mov	r0, r3
 800424e:	f003 f917 	bl	8007480 <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 8004252:	e017      	b.n	8004284 <cdcd_control_xfer_cb+0x1ec>
      } else if (stage == CONTROL_STAGE_ACK) {
 8004254:	79bb      	ldrb	r3, [r7, #6]
 8004256:	2b03      	cmp	r3, #3
 8004258:	d114      	bne.n	8004284 <cdcd_control_xfer_cb+0x1ec>
        if (tud_cdc_send_break_cb) {
 800425a:	4b11      	ldr	r3, [pc, #68]	@ (80042a0 <cdcd_control_xfer_cb+0x208>)
 800425c:	2b00      	cmp	r3, #0
 800425e:	d011      	beq.n	8004284 <cdcd_control_xfer_cb+0x1ec>
          tud_cdc_send_break_cb(itf, request->wValue);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	885b      	ldrh	r3, [r3, #2]
 8004264:	b29a      	uxth	r2, r3
 8004266:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800426a:	4611      	mov	r1, r2
 800426c:	4618      	mov	r0, r3
 800426e:	f3af 8000 	nop.w
      break;
 8004272:	e007      	b.n	8004284 <cdcd_control_xfer_cb+0x1ec>

    default:
      return false; // stall unsupported request
 8004274:	2300      	movs	r3, #0
 8004276:	e007      	b.n	8004288 <cdcd_control_xfer_cb+0x1f0>
      break;
 8004278:	bf00      	nop
 800427a:	e004      	b.n	8004286 <cdcd_control_xfer_cb+0x1ee>
      break;
 800427c:	bf00      	nop
 800427e:	e002      	b.n	8004286 <cdcd_control_xfer_cb+0x1ee>
      break;
 8004280:	bf00      	nop
 8004282:	e000      	b.n	8004286 <cdcd_control_xfer_cb+0x1ee>
      break;
 8004284:	bf00      	nop
  }

  return true;
 8004286:	2301      	movs	r3, #1
}
 8004288:	4618      	mov	r0, r3
 800428a:	3728      	adds	r7, #40	@ 0x28
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	200008f8 	.word	0x200008f8
 8004294:	080018a1 	.word	0x080018a1
 8004298:	2000006c 	.word	0x2000006c
 800429c:	080007c9 	.word	0x080007c9
 80042a0:	00000000 	.word	0x00000000

080042a4 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	603b      	str	r3, [r7, #0]
 80042ac:	4603      	mov	r3, r0
 80042ae:	71fb      	strb	r3, [r7, #7]
 80042b0:	460b      	mov	r3, r1
 80042b2:	71bb      	strb	r3, [r7, #6]
 80042b4:	4613      	mov	r3, r2
 80042b6:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80042b8:	2300      	movs	r3, #0
 80042ba:	77fb      	strb	r3, [r7, #31]
 80042bc:	e013      	b.n	80042e6 <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 80042be:	7ffb      	ldrb	r3, [r7, #31]
 80042c0:	22a8      	movs	r2, #168	@ 0xa8
 80042c2:	fb02 f303 	mul.w	r3, r2, r3
 80042c6:	4a5f      	ldr	r2, [pc, #380]	@ (8004444 <cdcd_xfer_cb+0x1a0>)
 80042c8:	4413      	add	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	78db      	ldrb	r3, [r3, #3]
 80042d0:	79ba      	ldrb	r2, [r7, #6]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d00a      	beq.n	80042ec <cdcd_xfer_cb+0x48>
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	789b      	ldrb	r3, [r3, #2]
 80042da:	79ba      	ldrb	r2, [r7, #6]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d005      	beq.n	80042ec <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80042e0:	7ffb      	ldrb	r3, [r7, #31]
 80042e2:	3301      	adds	r3, #1
 80042e4:	77fb      	strb	r3, [r7, #31]
 80042e6:	7ffb      	ldrb	r3, [r7, #31]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0e8      	beq.n	80042be <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 80042ec:	7ffb      	ldrb	r3, [r7, #31]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <cdcd_xfer_cb+0x64>
 80042f2:	4b55      	ldr	r3, [pc, #340]	@ (8004448 <cdcd_xfer_cb+0x1a4>)
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d000      	beq.n	8004304 <cdcd_xfer_cb+0x60>
 8004302:	be00      	bkpt	0x0000
 8004304:	2300      	movs	r3, #0
 8004306:	e098      	b.n	800443a <cdcd_xfer_cb+0x196>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8004308:	7ffb      	ldrb	r3, [r7, #31]
 800430a:	01db      	lsls	r3, r3, #7
 800430c:	4a4f      	ldr	r2, [pc, #316]	@ (800444c <cdcd_xfer_cb+0x1a8>)
 800430e:	4413      	add	r3, r2
 8004310:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	78db      	ldrb	r3, [r3, #3]
 8004316:	79ba      	ldrb	r2, [r7, #6]
 8004318:	429a      	cmp	r2, r3
 800431a:	d148      	bne.n	80043ae <cdcd_xfer_cb+0x10a>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	3310      	adds	r3, #16
 8004320:	6939      	ldr	r1, [r7, #16]
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	b292      	uxth	r2, r2
 8004326:	4618      	mov	r0, r3
 8004328:	f001 fb00 	bl	800592c <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 800432c:	4b48      	ldr	r3, [pc, #288]	@ (8004450 <cdcd_xfer_cb+0x1ac>)
 800432e:	2b00      	cmp	r3, #0
 8004330:	d027      	beq.n	8004382 <cdcd_xfer_cb+0xde>
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	795b      	ldrb	r3, [r3, #5]
 8004336:	2bff      	cmp	r3, #255	@ 0xff
 8004338:	d023      	beq.n	8004382 <cdcd_xfer_cb+0xde>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	e01c      	b.n	800437a <cdcd_xfer_cb+0xd6>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	795a      	ldrb	r2, [r3, #5]
 8004344:	6939      	ldr	r1, [r7, #16]
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	440b      	add	r3, r1
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d111      	bne.n	8004374 <cdcd_xfer_cb+0xd0>
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	3310      	adds	r3, #16
 8004354:	4618      	mov	r0, r3
 8004356:	f001 f9e3 	bl	8005720 <tu_fifo_empty>
 800435a:	4603      	mov	r3, r0
 800435c:	f083 0301 	eor.w	r3, r3, #1
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d006      	beq.n	8004374 <cdcd_xfer_cb+0xd0>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	795a      	ldrb	r2, [r3, #5]
 800436a:	7ffb      	ldrb	r3, [r7, #31]
 800436c:	4611      	mov	r1, r2
 800436e:	4618      	mov	r0, r3
 8004370:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	3301      	adds	r3, #1
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d3de      	bcc.n	8004340 <cdcd_xfer_cb+0x9c>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8004382:	4b34      	ldr	r3, [pc, #208]	@ (8004454 <cdcd_xfer_cb+0x1b0>)
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00e      	beq.n	80043a6 <cdcd_xfer_cb+0x102>
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	3310      	adds	r3, #16
 800438c:	4618      	mov	r0, r3
 800438e:	f001 f9c7 	bl	8005720 <tu_fifo_empty>
 8004392:	4603      	mov	r3, r0
 8004394:	f083 0301 	eor.w	r3, r3, #1
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <cdcd_xfer_cb+0x102>
      tud_cdc_rx_cb(itf);
 800439e:	7ffb      	ldrb	r3, [r7, #31]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fc fa33 	bl	800080c <tud_cdc_rx_cb>
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 80043a6:	7ffb      	ldrb	r3, [r7, #31]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff fbb3 	bl	8003b14 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	789b      	ldrb	r3, [r3, #2]
 80043b2:	79ba      	ldrb	r2, [r7, #6]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d13f      	bne.n	8004438 <cdcd_xfer_cb+0x194>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 80043b8:	4b27      	ldr	r3, [pc, #156]	@ (8004458 <cdcd_xfer_cb+0x1b4>)
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <cdcd_xfer_cb+0x122>
      tud_cdc_tx_complete_cb(itf);
 80043be:	7ffb      	ldrb	r3, [r7, #31]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 80043c6:	7ffb      	ldrb	r3, [r7, #31]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff fc47 	bl	8003c5c <tud_cdc_n_write_flush>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d131      	bne.n	8004438 <cdcd_xfer_cb+0x194>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	331c      	adds	r3, #28
 80043d8:	4618      	mov	r0, r3
 80043da:	f001 f96f 	bl	80056bc <tu_fifo_count>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d129      	bne.n	8004438 <cdcd_xfer_cb+0x194>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d026      	beq.n	8004438 <cdcd_xfer_cb+0x194>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d121      	bne.n	8004438 <cdcd_xfer_cb+0x194>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	789a      	ldrb	r2, [r3, #2]
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	4611      	mov	r1, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f002 fe79 	bl	80070f4 <usbd_edpt_claim>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d017      	beq.n	8004438 <cdcd_xfer_cb+0x194>
          TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0));
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	7899      	ldrb	r1, [r3, #2]
 800440c:	79f8      	ldrb	r0, [r7, #7]
 800440e:	2300      	movs	r3, #0
 8004410:	2200      	movs	r2, #0
 8004412:	f002 febf 	bl	8007194 <usbd_edpt_xfer>
 8004416:	4603      	mov	r3, r0
 8004418:	f083 0301 	eor.w	r3, r3, #1
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <cdcd_xfer_cb+0x194>
 8004422:	4b09      	ldr	r3, [pc, #36]	@ (8004448 <cdcd_xfer_cb+0x1a4>)
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d000      	beq.n	8004434 <cdcd_xfer_cb+0x190>
 8004432:	be00      	bkpt	0x0000
 8004434:	2300      	movs	r3, #0
 8004436:	e000      	b.n	800443a <cdcd_xfer_cb+0x196>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 8004438:	2301      	movs	r3, #1
}
 800443a:	4618      	mov	r0, r3
 800443c:	3720      	adds	r7, #32
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	200008f8 	.word	0x200008f8
 8004448:	e000edf0 	.word	0xe000edf0
 800444c:	200009a0 	.word	0x200009a0
 8004450:	00000000 	.word	0x00000000
 8004454:	0800080d 	.word	0x0800080d
 8004458:	00000000 	.word	0x00000000

0800445c <tud_hid_set_idle_cb>:
TU_ATTR_WEAK void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
  (void) instance;
  (void) protocol;
}

TU_ATTR_WEAK bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate) {
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	460a      	mov	r2, r1
 8004466:	71fb      	strb	r3, [r7, #7]
 8004468:	4613      	mov	r3, r2
 800446a:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) idle_rate;
  return true;
 800446c:	2301      	movs	r3, #1
}
 800446e:	4618      	mov	r0, r3
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <tud_hid_report_failed_cb>:
  (void) report;
  (void) len;
}

// Invoked when a transfer wasn't successful
TU_ATTR_WEAK void tud_hid_report_failed_cb(uint8_t instance, hid_report_type_t report_type, uint8_t const* report, uint16_t xferred_bytes) {
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	603a      	str	r2, [r7, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	4603      	mov	r3, r0
 8004486:	71fb      	strb	r3, [r7, #7]
 8004488:	460b      	mov	r3, r1
 800448a:	71bb      	strb	r3, [r7, #6]
 800448c:	4613      	mov	r3, r2
 800448e:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report_type;
  (void) report;
  (void) xferred_bytes;
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance) {
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 80044aa:	79fa      	ldrb	r2, [r7, #7]
 80044ac:	491b      	ldr	r1, [pc, #108]	@ (800451c <tud_hid_n_ready+0x80>)
 80044ae:	4613      	mov	r3, r2
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	4413      	add	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	3301      	adds	r3, #1
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	73bb      	strb	r3, [r7, #14]
 80044be:	f001 faf7 	bl	8005ab0 <tud_mounted>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d009      	beq.n	80044dc <tud_hid_n_ready+0x40>
 80044c8:	f001 fb04 	bl	8005ad4 <tud_suspended>
 80044cc:	4603      	mov	r3, r0
 80044ce:	f083 0301 	eor.w	r3, r3, #1
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <tud_hid_n_ready+0x40>
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <tud_hid_n_ready+0x42>
 80044dc:	2300      	movs	r3, #0
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d010      	beq.n	800450a <tud_hid_n_ready+0x6e>
 80044e8:	7bbb      	ldrb	r3, [r7, #14]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00d      	beq.n	800450a <tud_hid_n_ready+0x6e>
 80044ee:	7bba      	ldrb	r2, [r7, #14]
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	4611      	mov	r1, r2
 80044f4:	4618      	mov	r0, r3
 80044f6:	f002 fec3 	bl	8007280 <usbd_edpt_busy>
 80044fa:	4603      	mov	r3, r0
 80044fc:	f083 0301 	eor.w	r3, r3, #1
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <tud_hid_n_ready+0x6e>
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <tud_hid_n_ready+0x70>
 800450a:	2300      	movs	r3, #0
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	b2db      	uxtb	r3, r3
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20000a20 	.word	0x20000a20

08004520 <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const *report, uint16_t len) {
 8004520:	b580      	push	{r7, lr}
 8004522:	b08e      	sub	sp, #56	@ 0x38
 8004524:	af00      	add	r7, sp, #0
 8004526:	603a      	str	r2, [r7, #0]
 8004528:	461a      	mov	r2, r3
 800452a:	4603      	mov	r3, r0
 800452c:	71fb      	strb	r3, [r7, #7]
 800452e:	460b      	mov	r3, r1
 8004530:	71bb      	strb	r3, [r7, #6]
 8004532:	4613      	mov	r3, r2
 8004534:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(instance < CFG_TUD_HID);
 8004536:	79fb      	ldrb	r3, [r7, #7]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <tud_hid_n_report+0x20>
 800453c:	2300      	movs	r3, #0
 800453e:	e06d      	b.n	800461c <tud_hid_n_report+0xfc>
  const uint8_t rhport = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  hidd_interface_t *p_hid = &_hidd_itf[instance];
 8004546:	79fa      	ldrb	r2, [r7, #7]
 8004548:	4613      	mov	r3, r2
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	4413      	add	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4a34      	ldr	r2, [pc, #208]	@ (8004624 <tud_hid_n_report+0x104>)
 8004552:	4413      	add	r3, r2
 8004554:	633b      	str	r3, [r7, #48]	@ 0x30
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8004556:	79fa      	ldrb	r2, [r7, #7]
 8004558:	4613      	mov	r3, r2
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	4413      	add	r3, r2
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	4a31      	ldr	r2, [pc, #196]	@ (8004628 <tud_hid_n_report+0x108>)
 8004562:	4413      	add	r3, r2
 8004564:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_hid->ep_in));
 8004566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004568:	785a      	ldrb	r2, [r3, #1]
 800456a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800456e:	4611      	mov	r1, r2
 8004570:	4618      	mov	r0, r3
 8004572:	f002 fdbf 	bl	80070f4 <usbd_edpt_claim>
 8004576:	4603      	mov	r3, r0
 8004578:	f083 0301 	eor.w	r3, r3, #1
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <tud_hid_n_report+0x66>
 8004582:	2300      	movs	r3, #0
 8004584:	e04a      	b.n	800461c <tud_hid_n_report+0xfc>

  // prepare data
  if (report_id) {
 8004586:	79bb      	ldrb	r3, [r7, #6]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d021      	beq.n	80045d0 <tud_hid_n_report+0xb0>
    p_epbuf->epin[0] = report_id;
 800458c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800458e:	79ba      	ldrb	r2, [r7, #6]
 8004590:	741a      	strb	r2, [r3, #16]
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin + 1, CFG_TUD_HID_EP_BUFSIZE - 1, report, len));
 8004592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004594:	3310      	adds	r3, #16
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	88bb      	ldrh	r3, [r7, #4]
 800459a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800459c:	220f      	movs	r2, #15
 800459e:	627a      	str	r2, [r7, #36]	@ 0x24
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	623a      	str	r2, [r7, #32]
 80045a4:	61fb      	str	r3, [r7, #28]
  if ( count > destsz ) {
 80045a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d202      	bcs.n	80045b4 <tud_hid_n_report+0x94>
    return -1;
 80045ae:	f04f 33ff 	mov.w	r3, #4294967295
 80045b2:	e005      	b.n	80045c0 <tud_hid_n_report+0xa0>
  memcpy(dest, src, count);
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	6a39      	ldr	r1, [r7, #32]
 80045b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045ba:	f005 fa33 	bl	8009a24 <memcpy>
  return 0;
 80045be:	2300      	movs	r3, #0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <tud_hid_n_report+0xa8>
 80045c4:	2300      	movs	r3, #0
 80045c6:	e029      	b.n	800461c <tud_hid_n_report+0xfc>
    len++;
 80045c8:	88bb      	ldrh	r3, [r7, #4]
 80045ca:	3301      	adds	r3, #1
 80045cc:	80bb      	strh	r3, [r7, #4]
 80045ce:	e01a      	b.n	8004606 <tud_hid_n_report+0xe6>
  } else {
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin, CFG_TUD_HID_EP_BUFSIZE, report, len));
 80045d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d2:	f103 0210 	add.w	r2, r3, #16
 80045d6:	88bb      	ldrh	r3, [r7, #4]
 80045d8:	61ba      	str	r2, [r7, #24]
 80045da:	2210      	movs	r2, #16
 80045dc:	617a      	str	r2, [r7, #20]
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	613a      	str	r2, [r7, #16]
 80045e2:	60fb      	str	r3, [r7, #12]
  if ( count > destsz ) {
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d202      	bcs.n	80045f2 <tud_hid_n_report+0xd2>
    return -1;
 80045ec:	f04f 33ff 	mov.w	r3, #4294967295
 80045f0:	e005      	b.n	80045fe <tud_hid_n_report+0xde>
  memcpy(dest, src, count);
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	6939      	ldr	r1, [r7, #16]
 80045f6:	69b8      	ldr	r0, [r7, #24]
 80045f8:	f005 fa14 	bl	8009a24 <memcpy>
  return 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <tud_hid_n_report+0xe6>
 8004602:	2300      	movs	r3, #0
 8004604:	e00a      	b.n	800461c <tud_hid_n_report+0xfc>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_epbuf->epin, len);
 8004606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004608:	7859      	ldrb	r1, [r3, #1]
 800460a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800460c:	f103 0210 	add.w	r2, r3, #16
 8004610:	88bb      	ldrh	r3, [r7, #4]
 8004612:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8004616:	f002 fdbd 	bl	8007194 <usbd_edpt_xfer>
 800461a:	4603      	mov	r3, r0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3738      	adds	r7, #56	@ 0x38
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	20000a20 	.word	0x20000a20
 8004628:	20000a2c 	.word	0x20000a2c

0800462c <tud_hid_n_keyboard_report>:

uint8_t tud_hid_n_get_protocol(uint8_t instance) {
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	4603      	mov	r3, r0
 8004636:	71fb      	strb	r3, [r7, #7]
 8004638:	460b      	mov	r3, r1
 800463a:	71bb      	strb	r3, [r7, #6]
 800463c:	4613      	mov	r3, r2
 800463e:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;
  report.modifier = modifier;
 8004640:	797b      	ldrb	r3, [r7, #5]
 8004642:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 8004644:	2300      	movs	r3, #0
 8004646:	727b      	strb	r3, [r7, #9]

  if (keycode) {
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d007      	beq.n	800465e <tud_hid_n_keyboard_report+0x32>
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	f107 030a 	add.w	r3, r7, #10
 8004654:	6811      	ldr	r1, [r2, #0]
 8004656:	6019      	str	r1, [r3, #0]
 8004658:	8892      	ldrh	r2, [r2, #4]
 800465a:	809a      	strh	r2, [r3, #4]
 800465c:	e007      	b.n	800466e <tud_hid_n_keyboard_report+0x42>
  } else {
    tu_memclr(report.keycode, 6);
 800465e:	f107 0308 	add.w	r3, r7, #8
 8004662:	3302      	adds	r3, #2
 8004664:	2206      	movs	r2, #6
 8004666:	2100      	movs	r1, #0
 8004668:	4618      	mov	r0, r3
 800466a:	f005 f9ae 	bl	80099ca <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 800466e:	f107 0208 	add.w	r2, r7, #8
 8004672:	79b9      	ldrb	r1, [r7, #6]
 8004674:	79f8      	ldrb	r0, [r7, #7]
 8004676:	2308      	movs	r3, #8
 8004678:	f7ff ff52 	bl	8004520 <tud_hid_n_report>
 800467c:	4603      	mov	r3, r0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <hidd_init>:
}

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void) {
 8004686:	b580      	push	{r7, lr}
 8004688:	af00      	add	r7, sp, #0
  hidd_reset(0);
 800468a:	2000      	movs	r0, #0
 800468c:	f000 f80a 	bl	80046a4 <hidd_reset>
}
 8004690:	bf00      	nop
 8004692:	bd80      	pop	{r7, pc}

08004694 <hidd_deinit>:

bool hidd_deinit(void) {
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  return true;
 8004698:	2301      	movs	r3, #1
}
 800469a:	4618      	mov	r0, r3
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <hidd_reset>:

void hidd_reset(uint8_t rhport) {
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	4603      	mov	r3, r0
 80046ac:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 80046ae:	220c      	movs	r2, #12
 80046b0:	2100      	movs	r1, #0
 80046b2:	4803      	ldr	r0, [pc, #12]	@ (80046c0 <hidd_reset+0x1c>)
 80046b4:	f005 f989 	bl	80099ca <memset>
}
 80046b8:	bf00      	nop
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	20000a20 	.word	0x20000a20

080046c4 <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const *desc_itf, uint16_t max_len) {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b094      	sub	sp, #80	@ 0x50
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	4603      	mov	r3, r0
 80046cc:	6039      	str	r1, [r7, #0]
 80046ce:	71fb      	strb	r3, [r7, #7]
 80046d0:	4613      	mov	r3, r2
 80046d2:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	795b      	ldrb	r3, [r3, #5]
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d001      	beq.n	80046e0 <hidd_open+0x1c>
 80046dc:	2300      	movs	r3, #0
 80046de:	e0ce      	b.n	800487e <hidd_open+0x1ba>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	791b      	ldrb	r3, [r3, #4]
 80046e4:	461a      	mov	r2, r3
 80046e6:	00d2      	lsls	r2, r2, #3
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 80046ec:	3312      	adds	r3, #18
 80046ee:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  TU_ASSERT(max_len >= drv_len, 0);
 80046f2:	88ba      	ldrh	r2, [r7, #4]
 80046f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d20a      	bcs.n	8004712 <hidd_open+0x4e>
 80046fc:	4b62      	ldr	r3, [pc, #392]	@ (8004888 <hidd_open+0x1c4>)
 80046fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d000      	beq.n	800470e <hidd_open+0x4a>
 800470c:	be00      	bkpt	0x0000
 800470e:	2300      	movs	r3, #0
 8004710:	e0b5      	b.n	800487e <hidd_open+0x1ba>

  // Find available interface
  hidd_interface_t *p_hid;
  uint8_t hid_id;
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8004712:	2300      	movs	r3, #0
 8004714:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004718:	e011      	b.n	800473e <hidd_open+0x7a>
    p_hid = &_hidd_itf[hid_id];
 800471a:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800471e:	4613      	mov	r3, r2
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4a59      	ldr	r2, [pc, #356]	@ (800488c <hidd_open+0x1c8>)
 8004728:	4413      	add	r3, r2
 800472a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (p_hid->ep_in == 0) {
 800472c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800472e:	785b      	ldrb	r3, [r3, #1]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d009      	beq.n	8004748 <hidd_open+0x84>
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8004734:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004738:	3301      	adds	r3, #1
 800473a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800473e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0e9      	beq.n	800471a <hidd_open+0x56>
 8004746:	e000      	b.n	800474a <hidd_open+0x86>
      break;
 8004748:	bf00      	nop
    }
  }
  TU_ASSERT(hid_id < CFG_TUD_HID, 0);
 800474a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <hidd_open+0xa4>
 8004752:	4b4d      	ldr	r3, [pc, #308]	@ (8004888 <hidd_open+0x1c4>)
 8004754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d000      	beq.n	8004764 <hidd_open+0xa0>
 8004762:	be00      	bkpt	0x0000
 8004764:	2300      	movs	r3, #0
 8004766:	e08a      	b.n	800487e <hidd_open+0x1ba>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_id];
 8004768:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800476c:	4613      	mov	r3, r2
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	4413      	add	r3, r2
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	4a46      	ldr	r2, [pc, #280]	@ (8004890 <hidd_open+0x1cc>)
 8004776:	4413      	add	r3, r2
 8004778:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint8_t const *p_desc = (uint8_t const *)desc_itf;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800477e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004780:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8004790:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004794:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	3301      	adds	r3, #1
 800479a:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 800479c:	2b21      	cmp	r3, #33	@ 0x21
 800479e:	d00a      	beq.n	80047b6 <hidd_open+0xf2>
 80047a0:	4b39      	ldr	r3, [pc, #228]	@ (8004888 <hidd_open+0x1c4>)
 80047a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d000      	beq.n	80047b2 <hidd_open+0xee>
 80047b0:	be00      	bkpt	0x0000
 80047b2:	2300      	movs	r3, #0
 80047b4:	e063      	b.n	800487e <hidd_open+0x1ba>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *)p_desc;
 80047b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80047ba:	609a      	str	r2, [r3, #8]
 80047bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047be:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 80047ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	7919      	ldrb	r1, [r3, #4]
 80047d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047d6:	3302      	adds	r3, #2
 80047d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047da:	3201      	adds	r2, #1
 80047dc:	79f8      	ldrb	r0, [r7, #7]
 80047de:	9201      	str	r2, [sp, #4]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	2303      	movs	r3, #3
 80047e4:	460a      	mov	r2, r1
 80047e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80047e8:	f002 fbd6 	bl	8006f98 <usbd_open_edpt_pair>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f083 0301 	eor.w	r3, r3, #1
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <hidd_open+0x14a>
 80047f8:	4b23      	ldr	r3, [pc, #140]	@ (8004888 <hidd_open+0x1c4>)
 80047fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80047fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d000      	beq.n	800480a <hidd_open+0x146>
 8004808:	be00      	bkpt	0x0000
 800480a:	2300      	movs	r3, #0
 800480c:	e037      	b.n	800487e <hidd_open+0x1ba>

  if (desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT) {
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	799b      	ldrb	r3, [r3, #6]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d103      	bne.n	800481e <hidd_open+0x15a>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	79da      	ldrb	r2, [r3, #7]
 800481a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800481c:	70da      	strb	r2, [r3, #3]
  }

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 800481e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004820:	2201      	movs	r2, #1
 8004822:	719a      	strb	r2, [r3, #6]
  p_hid->itf_num = desc_itf->bInterfaceNumber;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	789a      	ldrb	r2, [r3, #2]
 8004828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800482a:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const *)p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 800482c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	3307      	adds	r3, #7
 8004832:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	881a      	ldrh	r2, [r3, #0]
 8004838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800483a:	809a      	strh	r2, [r3, #4]

  // Prepare for output endpoint
  if (p_hid->ep_out) {
 800483c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800483e:	789b      	ldrb	r3, [r3, #2]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01a      	beq.n	800487a <hidd_open+0x1b6>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE), drv_len);
 8004844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004846:	7899      	ldrb	r1, [r3, #2]
 8004848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800484a:	f103 0220 	add.w	r2, r3, #32
 800484e:	79f8      	ldrb	r0, [r7, #7]
 8004850:	2310      	movs	r3, #16
 8004852:	f002 fc9f 	bl	8007194 <usbd_edpt_xfer>
 8004856:	4603      	mov	r3, r0
 8004858:	f083 0301 	eor.w	r3, r3, #1
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00b      	beq.n	800487a <hidd_open+0x1b6>
 8004862:	4b09      	ldr	r3, [pc, #36]	@ (8004888 <hidd_open+0x1c4>)
 8004864:	637b      	str	r3, [r7, #52]	@ 0x34
 8004866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d000      	beq.n	8004874 <hidd_open+0x1b0>
 8004872:	be00      	bkpt	0x0000
 8004874:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004878:	e001      	b.n	800487e <hidd_open+0x1ba>
  }

  return drv_len;
 800487a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
}
 800487e:	4618      	mov	r0, r3
 8004880:	3748      	adds	r7, #72	@ 0x48
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	e000edf0 	.word	0xe000edf0
 800488c:	20000a20 	.word	0x20000a20
 8004890:	20000a2c 	.word	0x20000a2c

08004894 <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 8004894:	b580      	push	{r7, lr}
 8004896:	b094      	sub	sp, #80	@ 0x50
 8004898:	af02      	add	r7, sp, #8
 800489a:	4603      	mov	r3, r0
 800489c:	603a      	str	r2, [r7, #0]
 800489e:	71fb      	strb	r3, [r7, #7]
 80048a0:	460b      	mov	r3, r1
 80048a2:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	f003 031f 	and.w	r3, r3, #31
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d001      	beq.n	80048b6 <hidd_control_xfer_cb+0x22>
 80048b2:	2300      	movs	r3, #0
 80048b4:	e1d6      	b.n	8004c64 <hidd_control_xfer_cb+0x3d0>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	889b      	ldrh	r3, [r3, #4]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 80048c0:	2300      	movs	r3, #0
 80048c2:	77bb      	strb	r3, [r7, #30]
 80048c4:	e00f      	b.n	80048e6 <hidd_control_xfer_cb+0x52>
    if (itf_num == _hidd_itf[i].itf_num) {
 80048c6:	7fba      	ldrb	r2, [r7, #30]
 80048c8:	498f      	ldr	r1, [pc, #572]	@ (8004b08 <hidd_control_xfer_cb+0x274>)
 80048ca:	4613      	mov	r3, r2
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	7ffa      	ldrb	r2, [r7, #31]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d101      	bne.n	80048e0 <hidd_control_xfer_cb+0x4c>
      return i;
 80048dc:	7fbb      	ldrb	r3, [r7, #30]
 80048de:	e006      	b.n	80048ee <hidd_control_xfer_cb+0x5a>
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 80048e0:	7fbb      	ldrb	r3, [r7, #30]
 80048e2:	3301      	adds	r3, #1
 80048e4:	77bb      	strb	r3, [r7, #30]
 80048e6:	7fbb      	ldrb	r3, [r7, #30]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0ec      	beq.n	80048c6 <hidd_control_xfer_cb+0x32>
  return 0xFF;
 80048ec:	23ff      	movs	r3, #255	@ 0xff
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 80048ee:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 80048f2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <hidd_control_xfer_cb+0x6a>
 80048fa:	2300      	movs	r3, #0
 80048fc:	e1b2      	b.n	8004c64 <hidd_control_xfer_cb+0x3d0>
  hidd_interface_t *p_hid = &_hidd_itf[hid_itf];
 80048fe:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004902:	4613      	mov	r3, r2
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4a7f      	ldr	r2, [pc, #508]	@ (8004b08 <hidd_control_xfer_cb+0x274>)
 800490c:	4413      	add	r3, r2
 800490e:	637b      	str	r3, [r7, #52]	@ 0x34
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_itf];
 8004910:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004914:	4613      	mov	r3, r2
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	4413      	add	r3, r2
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	4a7b      	ldr	r2, [pc, #492]	@ (8004b0c <hidd_control_xfer_cb+0x278>)
 800491e:	4413      	add	r3, r2
 8004920:	633b      	str	r3, [r7, #48]	@ 0x30

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) {
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d145      	bne.n	80049bc <hidd_control_xfer_cb+0x128>
    //------------- STD Request -------------//
    if (stage == CONTROL_STAGE_SETUP) {
 8004930:	79bb      	ldrb	r3, [r7, #6]
 8004932:	2b01      	cmp	r3, #1
 8004934:	f040 8195 	bne.w	8004c62 <hidd_control_xfer_cb+0x3ce>
      uint8_t const desc_type = tu_u16_high(request->wValue);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	885b      	ldrh	r3, [r3, #2]
 800493c:	b29b      	uxth	r3, r3
 800493e:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8004940:	8bbb      	ldrh	r3, [r7, #28]
 8004942:	0a1b      	lsrs	r3, r3, #8
 8004944:	b29b      	uxth	r3, r3
 8004946:	b2db      	uxtb	r3, r3
 8004948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID) {
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	785b      	ldrb	r3, [r3, #1]
 8004950:	2b06      	cmp	r3, #6
 8004952:	d11b      	bne.n	800498c <hidd_control_xfer_cb+0xf8>
 8004954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004958:	2b21      	cmp	r3, #33	@ 0x21
 800495a:	d117      	bne.n	800498c <hidd_control_xfer_cb+0xf8>
        TU_VERIFY(p_hid->hid_descriptor);
 800495c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <hidd_control_xfer_cb+0xd4>
 8004964:	2300      	movs	r3, #0
 8004966:	e17d      	b.n	8004c64 <hidd_control_xfer_cb+0x3d0>
        TU_VERIFY(tud_control_xfer(rhport, request, (void *)(uintptr_t)p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 8004968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	79f8      	ldrb	r0, [r7, #7]
 8004974:	6839      	ldr	r1, [r7, #0]
 8004976:	f002 fdf5 	bl	8007564 <tud_control_xfer>
 800497a:	4603      	mov	r3, r0
 800497c:	f083 0301 	eor.w	r3, r3, #1
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 816d 	beq.w	8004c62 <hidd_control_xfer_cb+0x3ce>
 8004988:	2300      	movs	r3, #0
 800498a:	e16b      	b.n	8004c64 <hidd_control_xfer_cb+0x3d0>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	785b      	ldrb	r3, [r3, #1]
 8004990:	2b06      	cmp	r3, #6
 8004992:	d111      	bne.n	80049b8 <hidd_control_xfer_cb+0x124>
 8004994:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004998:	2b22      	cmp	r3, #34	@ 0x22
 800499a:	d10d      	bne.n	80049b8 <hidd_control_xfer_cb+0x124>
        uint8_t const *desc_report = tud_hid_descriptor_report_cb(hid_itf);
 800499c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fc ff0f 	bl	80017c4 <tud_hid_descriptor_report_cb>
 80049a6:	6238      	str	r0, [r7, #32]
        tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_report, p_hid->report_desc_len);
 80049a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049aa:	889b      	ldrh	r3, [r3, #4]
 80049ac:	79f8      	ldrb	r0, [r7, #7]
 80049ae:	6a3a      	ldr	r2, [r7, #32]
 80049b0:	6839      	ldr	r1, [r7, #0]
 80049b2:	f002 fdd7 	bl	8007564 <tud_control_xfer>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 80049b6:	e154      	b.n	8004c62 <hidd_control_xfer_cb+0x3ce>
      } else {
        return false; // stall unsupported request
 80049b8:	2300      	movs	r3, #0
 80049ba:	e153      	b.n	8004c64 <hidd_control_xfer_cb+0x3d0>
      }
    }
  } else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS) {
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	f040 813e 	bne.w	8004c48 <hidd_control_xfer_cb+0x3b4>
    //------------- Class Specific Request -------------//
    switch (request->bRequest) {
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	785b      	ldrb	r3, [r3, #1]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	2b0a      	cmp	r3, #10
 80049d4:	f200 8136 	bhi.w	8004c44 <hidd_control_xfer_cb+0x3b0>
 80049d8:	a201      	add	r2, pc, #4	@ (adr r2, 80049e0 <hidd_control_xfer_cb+0x14c>)
 80049da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049de:	bf00      	nop
 80049e0:	08004a0d 	.word	0x08004a0d
 80049e4:	08004be3 	.word	0x08004be3
 80049e8:	08004bf9 	.word	0x08004bf9
 80049ec:	08004c45 	.word	0x08004c45
 80049f0:	08004c45 	.word	0x08004c45
 80049f4:	08004c45 	.word	0x08004c45
 80049f8:	08004c45 	.word	0x08004c45
 80049fc:	08004c45 	.word	0x08004c45
 8004a00:	08004ae3 	.word	0x08004ae3
 8004a04:	08004b9d 	.word	0x08004b9d
 8004a08:	08004c0f 	.word	0x08004c0f
      case HID_REQ_CONTROL_GET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8004a0c:	79bb      	ldrb	r3, [r7, #6]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	f040 811c 	bne.w	8004c4c <hidd_control_xfer_cb+0x3b8>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	885b      	ldrh	r3, [r3, #2]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	82bb      	strh	r3, [r7, #20]
 8004a1c:	8abb      	ldrh	r3, [r7, #20]
 8004a1e:	0a1b      	lsrs	r3, r3, #8
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          uint8_t const report_id = tu_u16_low(request->wValue);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	885b      	ldrh	r3, [r3, #2]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8004a30:	8afb      	ldrh	r3, [r7, #22]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

          uint8_t* report_buf = p_epbuf->ctrl;
 8004a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3a:	647b      	str	r3, [r7, #68]	@ 0x44
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	88db      	ldrh	r3, [r3, #6]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	837b      	strh	r3, [r7, #26]
 8004a44:	2310      	movs	r3, #16
 8004a46:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8004a48:	8b7a      	ldrh	r2, [r7, #26]
 8004a4a:	8b3b      	ldrh	r3, [r7, #24]
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	bf28      	it	cs
 8004a50:	4613      	movcs	r3, r2
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          uint16_t xferlen = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ((report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1)) {
 8004a5e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d013      	beq.n	8004a8e <hidd_control_xfer_cb+0x1fa>
 8004a66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d90f      	bls.n	8004a8e <hidd_control_xfer_cb+0x1fa>
            *report_buf++ = report_id;
 8004a6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a74:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004a78:	701a      	strb	r2, [r3, #0]
            req_len--;
 8004a7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            xferlen++;
 8004a84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004a88:	3301      	adds	r3, #1
 8004a8a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 8004a8e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8004a92:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8004a96:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8004a9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aa2:	f7fc ff09 	bl	80018b8 <tud_hid_get_report_cb>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004aae:	4413      	add	r3, r2
 8004ab0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          TU_ASSERT(xferlen > 0);
 8004ab4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10a      	bne.n	8004ad2 <hidd_control_xfer_cb+0x23e>
 8004abc:	4b14      	ldr	r3, [pc, #80]	@ (8004b10 <hidd_control_xfer_cb+0x27c>)
 8004abe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d000      	beq.n	8004ace <hidd_control_xfer_cb+0x23a>
 8004acc:	be00      	bkpt	0x0000
 8004ace:	2300      	movs	r3, #0
 8004ad0:	e0c8      	b.n	8004c64 <hidd_control_xfer_cb+0x3d0>

          tud_control_xfer(rhport, request, p_epbuf->ctrl, xferlen);
 8004ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ad4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004ad8:	79f8      	ldrb	r0, [r7, #7]
 8004ada:	6839      	ldr	r1, [r7, #0]
 8004adc:	f002 fd42 	bl	8007564 <tud_control_xfer>
        }
        break;
 8004ae0:	e0b4      	b.n	8004c4c <hidd_control_xfer_cb+0x3b8>

      case HID_REQ_CONTROL_SET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8004ae2:	79bb      	ldrb	r3, [r7, #6]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d115      	bne.n	8004b14 <hidd_control_xfer_cb+0x280>
          TU_VERIFY(request->wLength <= CFG_TUD_HID_EP_BUFSIZE);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	88db      	ldrh	r3, [r3, #6]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b10      	cmp	r3, #16
 8004af0:	d901      	bls.n	8004af6 <hidd_control_xfer_cb+0x262>
 8004af2:	2300      	movs	r3, #0
 8004af4:	e0b6      	b.n	8004c64 <hidd_control_xfer_cb+0x3d0>
          tud_control_xfer(rhport, request, p_epbuf->ctrl, request->wLength);
 8004af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	88db      	ldrh	r3, [r3, #6]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	79f8      	ldrb	r0, [r7, #7]
 8004b00:	6839      	ldr	r1, [r7, #0]
 8004b02:	f002 fd2f 	bl	8007564 <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
        break;
 8004b06:	e0a3      	b.n	8004c50 <hidd_control_xfer_cb+0x3bc>
 8004b08:	20000a20 	.word	0x20000a20
 8004b0c:	20000a2c 	.word	0x20000a2c
 8004b10:	e000edf0 	.word	0xe000edf0
        } else if (stage == CONTROL_STAGE_ACK) {
 8004b14:	79bb      	ldrb	r3, [r7, #6]
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	f040 809a 	bne.w	8004c50 <hidd_control_xfer_cb+0x3bc>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	885b      	ldrh	r3, [r3, #2]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8004b24:	89bb      	ldrh	r3, [r7, #12]
 8004b26:	0a1b      	lsrs	r3, r3, #8
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          uint8_t const report_id = tu_u16_low(request->wValue);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	885b      	ldrh	r3, [r3, #2]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8004b38:	89fb      	ldrh	r3, [r7, #14]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          uint8_t const* report_buf = p_epbuf->ctrl;
 8004b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	88db      	ldrh	r3, [r3, #6]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	827b      	strh	r3, [r7, #18]
 8004b4c:	2310      	movs	r3, #16
 8004b4e:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8004b50:	8a7a      	ldrh	r2, [r7, #18]
 8004b52:	8a3b      	ldrh	r3, [r7, #16]
 8004b54:	4293      	cmp	r3, r2
 8004b56:	bf28      	it	cs
 8004b58:	4613      	movcs	r3, r2
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	877b      	strh	r3, [r7, #58]	@ 0x3a
          if ((report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0])) {
 8004b5e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00e      	beq.n	8004b84 <hidd_control_xfer_cb+0x2f0>
 8004b66:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d90b      	bls.n	8004b84 <hidd_control_xfer_cb+0x2f0>
 8004b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d105      	bne.n	8004b84 <hidd_control_xfer_cb+0x2f0>
            report_buf++;
 8004b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            report_len--;
 8004b7e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004b80:	3b01      	subs	r3, #1
 8004b82:	877b      	strh	r3, [r7, #58]	@ 0x3a
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 8004b84:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004b88:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8004b8c:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8004b90:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b96:	f7fc fea9 	bl	80018ec <tud_hid_set_report_cb>
        break;
 8004b9a:	e059      	b.n	8004c50 <hidd_control_xfer_cb+0x3bc>

      case HID_REQ_CONTROL_SET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8004b9c:	79bb      	ldrb	r3, [r7, #6]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d158      	bne.n	8004c54 <hidd_control_xfer_cb+0x3c0>
          p_hid->idle_rate = tu_u16_high(request->wValue);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	885b      	ldrh	r3, [r3, #2]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8004baa:	897b      	ldrh	r3, [r7, #10]
 8004bac:	0a1b      	lsrs	r3, r3, #8
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb4:	71da      	strb	r2, [r3, #7]
          TU_VERIFY(tud_hid_set_idle_cb(hid_itf, p_hid->idle_rate)); // stall if false
 8004bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb8:	79da      	ldrb	r2, [r3, #7]
 8004bba:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff fc4b 	bl	800445c <tud_hid_set_idle_cb>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f083 0301 	eor.w	r3, r3, #1
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <hidd_control_xfer_cb+0x342>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e046      	b.n	8004c64 <hidd_control_xfer_cb+0x3d0>
          tud_control_status(rhport, request);
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	6839      	ldr	r1, [r7, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f002 fc50 	bl	8007480 <tud_control_status>
        }
        break;
 8004be0:	e038      	b.n	8004c54 <hidd_control_xfer_cb+0x3c0>

      case HID_REQ_CONTROL_GET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8004be2:	79bb      	ldrb	r3, [r7, #6]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d137      	bne.n	8004c58 <hidd_control_xfer_cb+0x3c4>
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 8004be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bea:	1dda      	adds	r2, r3, #7
 8004bec:	79f8      	ldrb	r0, [r7, #7]
 8004bee:	2301      	movs	r3, #1
 8004bf0:	6839      	ldr	r1, [r7, #0]
 8004bf2:	f002 fcb7 	bl	8007564 <tud_control_xfer>
        }
        break;
 8004bf6:	e02f      	b.n	8004c58 <hidd_control_xfer_cb+0x3c4>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8004bf8:	79bb      	ldrb	r3, [r7, #6]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d12e      	bne.n	8004c5c <hidd_control_xfer_cb+0x3c8>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 8004bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c00:	1d9a      	adds	r2, r3, #6
 8004c02:	79f8      	ldrb	r0, [r7, #7]
 8004c04:	2301      	movs	r3, #1
 8004c06:	6839      	ldr	r1, [r7, #0]
 8004c08:	f002 fcac 	bl	8007564 <tud_control_xfer>
        }
        break;
 8004c0c:	e026      	b.n	8004c5c <hidd_control_xfer_cb+0x3c8>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8004c0e:	79bb      	ldrb	r3, [r7, #6]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d105      	bne.n	8004c20 <hidd_control_xfer_cb+0x38c>
          tud_control_status(rhport, request);
 8004c14:	79fb      	ldrb	r3, [r7, #7]
 8004c16:	6839      	ldr	r1, [r7, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f002 fc31 	bl	8007480 <tud_control_status>
        } else if (stage == CONTROL_STAGE_ACK) {
          p_hid->protocol_mode = (uint8_t) request->wValue;
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
        }
        break;
 8004c1e:	e01f      	b.n	8004c60 <hidd_control_xfer_cb+0x3cc>
        } else if (stage == CONTROL_STAGE_ACK) {
 8004c20:	79bb      	ldrb	r3, [r7, #6]
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d11c      	bne.n	8004c60 <hidd_control_xfer_cb+0x3cc>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	885b      	ldrh	r3, [r3, #2]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c30:	719a      	strb	r2, [r3, #6]
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 8004c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c34:	799a      	ldrb	r2, [r3, #6]
 8004c36:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fb fd9b 	bl	8000778 <tud_hid_set_protocol_cb>
        break;
 8004c42:	e00d      	b.n	8004c60 <hidd_control_xfer_cb+0x3cc>

      default:
        return false; // stall unsupported request
 8004c44:	2300      	movs	r3, #0
 8004c46:	e00d      	b.n	8004c64 <hidd_control_xfer_cb+0x3d0>
    }
  } else {
    return false; // stall unsupported request
 8004c48:	2300      	movs	r3, #0
 8004c4a:	e00b      	b.n	8004c64 <hidd_control_xfer_cb+0x3d0>
        break;
 8004c4c:	bf00      	nop
 8004c4e:	e008      	b.n	8004c62 <hidd_control_xfer_cb+0x3ce>
        break;
 8004c50:	bf00      	nop
 8004c52:	e006      	b.n	8004c62 <hidd_control_xfer_cb+0x3ce>
        break;
 8004c54:	bf00      	nop
 8004c56:	e004      	b.n	8004c62 <hidd_control_xfer_cb+0x3ce>
        break;
 8004c58:	bf00      	nop
 8004c5a:	e002      	b.n	8004c62 <hidd_control_xfer_cb+0x3ce>
        break;
 8004c5c:	bf00      	nop
 8004c5e:	e000      	b.n	8004c62 <hidd_control_xfer_cb+0x3ce>
        break;
 8004c60:	bf00      	nop
  }

  return true;
 8004c62:	2301      	movs	r3, #1
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3748      	adds	r7, #72	@ 0x48
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b08a      	sub	sp, #40	@ 0x28
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	603b      	str	r3, [r7, #0]
 8004c74:	4603      	mov	r3, r0
 8004c76:	71fb      	strb	r3, [r7, #7]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	71bb      	strb	r3, [r7, #6]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	717b      	strb	r3, [r7, #5]
  uint8_t instance;
  hidd_interface_t *p_hid;

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8004c80:	2300      	movs	r3, #0
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e014      	b.n	8004cb0 <hidd_xfer_cb+0x44>
    p_hid = &_hidd_itf[instance];
 8004c86:	7ffa      	ldrb	r2, [r7, #31]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4a3e      	ldr	r2, [pc, #248]	@ (8004d8c <hidd_xfer_cb+0x120>)
 8004c92:	4413      	add	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in)) {
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	789b      	ldrb	r3, [r3, #2]
 8004c9a:	79ba      	ldrb	r2, [r7, #6]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d00a      	beq.n	8004cb6 <hidd_xfer_cb+0x4a>
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	785b      	ldrb	r3, [r3, #1]
 8004ca4:	79ba      	ldrb	r2, [r7, #6]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d005      	beq.n	8004cb6 <hidd_xfer_cb+0x4a>
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8004caa:	7ffb      	ldrb	r3, [r7, #31]
 8004cac:	3301      	adds	r3, #1
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	7ffb      	ldrb	r3, [r7, #31]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0e7      	beq.n	8004c86 <hidd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 8004cb6:	7ffb      	ldrb	r3, [r7, #31]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00a      	beq.n	8004cd2 <hidd_xfer_cb+0x66>
 8004cbc:	4b34      	ldr	r3, [pc, #208]	@ (8004d90 <hidd_xfer_cb+0x124>)
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d000      	beq.n	8004cce <hidd_xfer_cb+0x62>
 8004ccc:	be00      	bkpt	0x0000
 8004cce:	2300      	movs	r3, #0
 8004cd0:	e057      	b.n	8004d82 <hidd_xfer_cb+0x116>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8004cd2:	7ffa      	ldrb	r2, [r7, #31]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	4413      	add	r3, r2
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	4a2d      	ldr	r2, [pc, #180]	@ (8004d94 <hidd_xfer_cb+0x128>)
 8004cde:	4413      	add	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]

  if (ep_addr == p_hid->ep_in) {
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	785b      	ldrb	r3, [r3, #1]
 8004ce6:	79ba      	ldrb	r2, [r7, #6]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d116      	bne.n	8004d1a <hidd_xfer_cb+0xae>
    // Input report
    if (XFER_RESULT_SUCCESS == result) {
 8004cec:	797b      	ldrb	r3, [r7, #5]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d109      	bne.n	8004d06 <hidd_xfer_cb+0x9a>
      tud_hid_report_complete_cb(instance, p_epbuf->epin, (uint16_t) xferred_bytes);
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f103 0110 	add.w	r1, r3, #16
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	7ffb      	ldrb	r3, [r7, #31]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fb fd48 	bl	8000794 <tud_hid_report_complete_cb>
 8004d04:	e03c      	b.n	8004d80 <hidd_xfer_cb+0x114>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_INPUT, p_epbuf->epin, (uint16_t) xferred_bytes);
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f103 0210 	add.w	r2, r3, #16
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	7ff8      	ldrb	r0, [r7, #31]
 8004d12:	2101      	movs	r1, #1
 8004d14:	f7ff fbb1 	bl	800447a <tud_hid_report_failed_cb>
 8004d18:	e032      	b.n	8004d80 <hidd_xfer_cb+0x114>
    }
  } else {
    // Output report
    if (XFER_RESULT_SUCCESS == result) {
 8004d1a:	797b      	ldrb	r3, [r7, #5]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10c      	bne.n	8004d3a <hidd_xfer_cb+0xce>
      tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t)xferred_bytes);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f103 0220 	add.w	r2, r3, #32
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	7ff8      	ldrb	r0, [r7, #31]
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	2202      	movs	r2, #2
 8004d32:	2100      	movs	r1, #0
 8004d34:	f7fc fdda 	bl	80018ec <tud_hid_set_report_cb>
 8004d38:	e008      	b.n	8004d4c <hidd_xfer_cb+0xe0>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t) xferred_bytes);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f103 0220 	add.w	r2, r3, #32
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	7ff8      	ldrb	r0, [r7, #31]
 8004d46:	2102      	movs	r1, #2
 8004d48:	f7ff fb97 	bl	800447a <tud_hid_report_failed_cb>
    }

    // prepare for new transfer
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE));
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	7899      	ldrb	r1, [r3, #2]
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f103 0220 	add.w	r2, r3, #32
 8004d56:	79f8      	ldrb	r0, [r7, #7]
 8004d58:	2310      	movs	r3, #16
 8004d5a:	f002 fa1b 	bl	8007194 <usbd_edpt_xfer>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	f083 0301 	eor.w	r3, r3, #1
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <hidd_xfer_cb+0x114>
 8004d6a:	4b09      	ldr	r3, [pc, #36]	@ (8004d90 <hidd_xfer_cb+0x124>)
 8004d6c:	613b      	str	r3, [r7, #16]
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d000      	beq.n	8004d7c <hidd_xfer_cb+0x110>
 8004d7a:	be00      	bkpt	0x0000
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e000      	b.n	8004d82 <hidd_xfer_cb+0x116>
  }

  return true;
 8004d80:	2301      	movs	r3, #1
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3720      	adds	r7, #32
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000a20 	.word	0x20000a20
 8004d90:	e000edf0 	.word	0xe000edf0
 8004d94:	20000a2c 	.word	0x20000a2c

08004d98 <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	4611      	mov	r1, r2
 8004da4:	461a      	mov	r2, r3
 8004da6:	460b      	mov	r3, r1
 8004da8:	80fb      	strh	r3, [r7, #6]
 8004daa:	4613      	mov	r3, r2
 8004dac:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004db4:	d901      	bls.n	8004dba <tu_fifo_config+0x22>
 8004db6:	2300      	movs	r3, #0
 8004db8:	e01b      	b.n	8004df2 <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	88fa      	ldrh	r2, [r7, #6]
 8004dc4:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8004dc6:	88bb      	ldrh	r3, [r7, #4]
 8004dc8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004dcc:	b299      	uxth	r1, r3
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	88d3      	ldrh	r3, [r2, #6]
 8004dd2:	f361 030e 	bfi	r3, r1, #0, #15
 8004dd6:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	79d3      	ldrb	r3, [r2, #7]
 8004ddc:	7e39      	ldrb	r1, [r7, #24]
 8004dde:	f361 13c7 	bfi	r3, r1, #7, #1
 8004de2:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8004df0:	2301      	movs	r3, #1
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b08a      	sub	sp, #40	@ 0x28
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	60f8      	str	r0, [r7, #12]
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8004e10:	88fb      	ldrh	r3, [r7, #6]
 8004e12:	089b      	lsrs	r3, r3, #2
 8004e14:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8004e16:	e00b      	b.n	8004e30 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	61ba      	str	r2, [r7, #24]
 8004e20:	617b      	str	r3, [r7, #20]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	601a      	str	r2, [r3, #0]
}
 8004e28:	bf00      	nop
    ff_buf += 4;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8004e30:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004e32:	1e5a      	subs	r2, r3, #1
 8004e34:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1ee      	bne.n	8004e18 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8004e44:	7ffb      	ldrb	r3, [r7, #31]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d009      	beq.n	8004e5e <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8004e50:	7ffa      	ldrb	r2, [r7, #31]
 8004e52:	f107 0310 	add.w	r3, r7, #16
 8004e56:	4619      	mov	r1, r3
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f004 fde3 	bl	8009a24 <memcpy>
  }
}
 8004e5e:	bf00      	nop
 8004e60:	3728      	adds	r7, #40	@ 0x28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b08a      	sub	sp, #40	@ 0x28
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	4613      	mov	r3, r2
 8004e72:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8004e78:	88fb      	ldrh	r3, [r7, #6]
 8004e7a:	089b      	lsrs	r3, r3, #2
 8004e7c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8004e7e:	e008      	b.n	8004e92 <_ff_pull_const_addr+0x2c>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8004e92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004e94:	1e5a      	subs	r2, r3, #1
 8004e96:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1f1      	bne.n	8004e80 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	f003 0303 	and.w	r3, r3, #3
 8004ea4:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8004ea6:	7ffb      	ldrb	r3, [r7, #31]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00b      	beq.n	8004ec4 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8004eb0:	7ffa      	ldrb	r2, [r7, #31]
 8004eb2:	f107 0314 	add.w	r3, r7, #20
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f004 fdb3 	bl	8009a24 <memcpy>

    *reg_tx = tmp32;
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	601a      	str	r2, [r3, #0]
  }
}
 8004ec4:	bf00      	nop
 8004ec6:	3728      	adds	r7, #40	@ 0x28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	88fa      	ldrh	r2, [r7, #6]
 8004ee0:	68f9      	ldr	r1, [r7, #12]
 8004ee2:	88c9      	ldrh	r1, [r1, #6]
 8004ee4:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8004ee8:	b289      	uxth	r1, r1
 8004eea:	fb01 f202 	mul.w	r2, r1, r2
 8004eee:	1898      	adds	r0, r3, r2
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	88db      	ldrh	r3, [r3, #6]
 8004ef4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	461a      	mov	r2, r3
 8004efc:	68b9      	ldr	r1, [r7, #8]
 8004efe:	f004 fd91 	bl	8009a24 <memcpy>
}
 8004f02:	bf00      	nop
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b08e      	sub	sp, #56	@ 0x38
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	4611      	mov	r1, r2
 8004f16:	461a      	mov	r2, r3
 8004f18:	460b      	mov	r3, r1
 8004f1a:	80fb      	strh	r3, [r7, #6]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	889a      	ldrh	r2, [r3, #4]
 8004f24:	88bb      	ldrh	r3, [r7, #4]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 8004f2a:	88fa      	ldrh	r2, [r7, #6]
 8004f2c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	88db      	ldrh	r3, [r3, #6]
 8004f36:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004f40:	fb13 f302 	smulbb	r3, r3, r2
 8004f44:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	88db      	ldrh	r3, [r3, #6]
 8004f4a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	461a      	mov	r2, r3
 8004f52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f54:	fb13 f302 	smulbb	r3, r3, r2
 8004f58:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	88ba      	ldrh	r2, [r7, #4]
 8004f60:	68f9      	ldr	r1, [r7, #12]
 8004f62:	88c9      	ldrh	r1, [r1, #6]
 8004f64:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8004f68:	b289      	uxth	r1, r1
 8004f6a:	fb01 f202 	mul.w	r2, r1, r2
 8004f6e:	4413      	add	r3, r2
 8004f70:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8004f72:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <_ff_push_n+0x76>
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d022      	beq.n	8004fc4 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 8004f7e:	e09e      	b.n	80050be <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8004f80:	88fa      	ldrh	r2, [r7, #6]
 8004f82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d80d      	bhi.n	8004fa4 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8004f88:	88fb      	ldrh	r3, [r7, #6]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	88d2      	ldrh	r2, [r2, #6]
 8004f8e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004f92:	b292      	uxth	r2, r2
 8004f94:	fb02 f303 	mul.w	r3, r2, r3
 8004f98:	461a      	mov	r2, r3
 8004f9a:	68b9      	ldr	r1, [r7, #8]
 8004f9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f9e:	f004 fd41 	bl	8009a24 <memcpy>
      break;
 8004fa2:	e08c      	b.n	80050be <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8004fa4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fac:	f004 fd3a 	bl	8009a24 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6818      	ldr	r0, [r3, #0]
 8004fb4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	4413      	add	r3, r2
 8004fba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	f004 fd31 	bl	8009a24 <memcpy>
      break;
 8004fc2:	e07c      	b.n	80050be <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8004fc4:	88fa      	ldrh	r2, [r7, #6]
 8004fc6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d80f      	bhi.n	8004fec <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	88db      	ldrh	r3, [r3, #6]
 8004fd0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	88fb      	ldrh	r3, [r7, #6]
 8004fda:	fb13 f302 	smulbb	r3, r3, r2
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fe6:	f7ff ff0a 	bl	8004dfe <_ff_push_const_addr>
      break;
 8004fea:	e067      	b.n	80050bc <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8004fec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004fee:	f023 0303 	bic.w	r3, r3, #3
 8004ff2:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8004ff4:	8c3b      	ldrh	r3, [r7, #32]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ffc:	f7ff feff 	bl	8004dfe <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8005000:	8c3b      	ldrh	r3, [r7, #32]
 8005002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005004:	4413      	add	r3, r2
 8005006:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8005008:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800500a:	b2db      	uxtb	r3, r3
 800500c:	f003 0303 	and.w	r3, r3, #3
 8005010:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8005014:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005018:	2b00      	cmp	r3, #0
 800501a:	d043      	beq.n	80050a4 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8005020:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005024:	b29b      	uxth	r3, r3
 8005026:	f1c3 0304 	rsb	r3, r3, #4
 800502a:	b29a      	uxth	r2, r3
 800502c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800502e:	837b      	strh	r3, [r7, #26]
 8005030:	4613      	mov	r3, r2
 8005032:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8005034:	8b7a      	ldrh	r2, [r7, #26]
 8005036:	8b3b      	ldrh	r3, [r7, #24]
 8005038:	4293      	cmp	r3, r2
 800503a:	bf28      	it	cs
 800503c:	4613      	movcs	r3, r2
 800503e:	b29b      	uxth	r3, r3
 8005040:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8005044:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005048:	b29b      	uxth	r3, r3
 800504a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8005056:	f107 0314 	add.w	r3, r7, #20
 800505a:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 800505c:	e007      	b.n	800506e <_ff_push_n+0x164>
 800505e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005060:	1c53      	adds	r3, r2, #1
 8005062:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005066:	1c59      	adds	r1, r3, #1
 8005068:	6339      	str	r1, [r7, #48]	@ 0x30
 800506a:	7812      	ldrb	r2, [r2, #0]
 800506c:	701a      	strb	r2, [r3, #0]
 800506e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005072:	1e5a      	subs	r2, r3, #1
 8005074:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1f0      	bne.n	800505e <_ff_push_n+0x154>
          ff_buf = f->buffer;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8005082:	e007      	b.n	8005094 <_ff_push_n+0x18a>
 8005084:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005086:	1c53      	adds	r3, r2, #1
 8005088:	62bb      	str	r3, [r7, #40]	@ 0x28
 800508a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508c:	1c59      	adds	r1, r3, #1
 800508e:	6339      	str	r1, [r7, #48]	@ 0x30
 8005090:	7812      	ldrb	r2, [r2, #0]
 8005092:	701a      	strb	r2, [r3, #0]
 8005094:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005098:	1e5a      	subs	r2, r3, #1
 800509a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f0      	bne.n	8005084 <_ff_push_n+0x17a>
 80050a2:	e002      	b.n	80050aa <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 80050aa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <_ff_push_n+0x1b2>
 80050b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80050b2:	461a      	mov	r2, r3
 80050b4:	68b9      	ldr	r1, [r7, #8]
 80050b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050b8:	f7ff fea1 	bl	8004dfe <_ff_push_const_addr>
      break;
 80050bc:	bf00      	nop
  }
}
 80050be:	bf00      	nop
 80050c0:	3738      	adds	r7, #56	@ 0x38
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	60f8      	str	r0, [r7, #12]
 80050ce:	60b9      	str	r1, [r7, #8]
 80050d0:	4613      	mov	r3, r2
 80050d2:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	88fa      	ldrh	r2, [r7, #6]
 80050da:	68f9      	ldr	r1, [r7, #12]
 80050dc:	88c9      	ldrh	r1, [r1, #6]
 80050de:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80050e2:	b289      	uxth	r1, r1
 80050e4:	fb01 f202 	mul.w	r2, r1, r2
 80050e8:	1899      	adds	r1, r3, r2
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	88db      	ldrh	r3, [r3, #6]
 80050ee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	68b8      	ldr	r0, [r7, #8]
 80050f8:	f004 fc94 	bl	8009a24 <memcpy>
}
 80050fc:	bf00      	nop
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08e      	sub	sp, #56	@ 0x38
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	4611      	mov	r1, r2
 8005110:	461a      	mov	r2, r3
 8005112:	460b      	mov	r3, r1
 8005114:	80fb      	strh	r3, [r7, #6]
 8005116:	4613      	mov	r3, r2
 8005118:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	889a      	ldrh	r2, [r3, #4]
 800511e:	88bb      	ldrh	r3, [r7, #4]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8005124:	88fa      	ldrh	r2, [r7, #6]
 8005126:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	88db      	ldrh	r3, [r3, #6]
 8005130:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005134:	b29b      	uxth	r3, r3
 8005136:	461a      	mov	r2, r3
 8005138:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800513a:	fb13 f302 	smulbb	r3, r3, r2
 800513e:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	88db      	ldrh	r3, [r3, #6]
 8005144:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005148:	b29b      	uxth	r3, r3
 800514a:	461a      	mov	r2, r3
 800514c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800514e:	fb13 f302 	smulbb	r3, r3, r2
 8005152:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	88ba      	ldrh	r2, [r7, #4]
 800515a:	68f9      	ldr	r1, [r7, #12]
 800515c:	88c9      	ldrh	r1, [r1, #6]
 800515e:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8005162:	b289      	uxth	r1, r1
 8005164:	fb01 f202 	mul.w	r2, r1, r2
 8005168:	4413      	add	r3, r2
 800516a:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 800516c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <_ff_pull_n+0x76>
 8005174:	2b01      	cmp	r3, #1
 8005176:	d022      	beq.n	80051be <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 8005178:	e0a0      	b.n	80052bc <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 800517a:	88fa      	ldrh	r2, [r7, #6]
 800517c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800517e:	429a      	cmp	r2, r3
 8005180:	d80d      	bhi.n	800519e <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	88d2      	ldrh	r2, [r2, #6]
 8005188:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800518c:	b292      	uxth	r2, r2
 800518e:	fb02 f303 	mul.w	r3, r2, r3
 8005192:	461a      	mov	r2, r3
 8005194:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005196:	68b8      	ldr	r0, [r7, #8]
 8005198:	f004 fc44 	bl	8009a24 <memcpy>
    break;
 800519c:	e08e      	b.n	80052bc <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 800519e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80051a0:	461a      	mov	r2, r3
 80051a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051a4:	68b8      	ldr	r0, [r7, #8]
 80051a6:	f004 fc3d 	bl	8009a24 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 80051aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	18d0      	adds	r0, r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80051b6:	4619      	mov	r1, r3
 80051b8:	f004 fc34 	bl	8009a24 <memcpy>
    break;
 80051bc:	e07e      	b.n	80052bc <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 80051be:	88fa      	ldrh	r2, [r7, #6]
 80051c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d80f      	bhi.n	80051e6 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	88db      	ldrh	r3, [r3, #6]
 80051ca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	461a      	mov	r2, r3
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	fb13 f302 	smulbb	r3, r3, r2
 80051d8:	b29b      	uxth	r3, r3
 80051da:	461a      	mov	r2, r3
 80051dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051de:	68b8      	ldr	r0, [r7, #8]
 80051e0:	f7ff fe41 	bl	8004e66 <_ff_pull_const_addr>
    break;
 80051e4:	e069      	b.n	80052ba <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 80051e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80051e8:	f023 0303 	bic.w	r3, r3, #3
 80051ec:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 80051ee:	8c3b      	ldrh	r3, [r7, #32]
 80051f0:	461a      	mov	r2, r3
 80051f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051f4:	68b8      	ldr	r0, [r7, #8]
 80051f6:	f7ff fe36 	bl	8004e66 <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 80051fa:	8c3b      	ldrh	r3, [r7, #32]
 80051fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051fe:	4413      	add	r3, r2
 8005200:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8005202:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005204:	b2db      	uxtb	r3, r3
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 800520e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005212:	2b00      	cmp	r3, #0
 8005214:	d045      	beq.n	80052a2 <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800521a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800521e:	b29b      	uxth	r3, r3
 8005220:	f1c3 0304 	rsb	r3, r3, #4
 8005224:	b29a      	uxth	r2, r3
 8005226:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005228:	837b      	strh	r3, [r7, #26]
 800522a:	4613      	mov	r3, r2
 800522c:	833b      	strh	r3, [r7, #24]
 800522e:	8b7a      	ldrh	r2, [r7, #26]
 8005230:	8b3b      	ldrh	r3, [r7, #24]
 8005232:	4293      	cmp	r3, r2
 8005234:	bf28      	it	cs
 8005236:	4613      	movcs	r3, r2
 8005238:	b29b      	uxth	r3, r3
 800523a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 800523e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005242:	b29b      	uxth	r3, r3
 8005244:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 800524e:	f107 0314 	add.w	r3, r7, #20
 8005252:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8005254:	e007      	b.n	8005266 <_ff_pull_n+0x162>
 8005256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005258:	1c53      	adds	r3, r2, #1
 800525a:	633b      	str	r3, [r7, #48]	@ 0x30
 800525c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525e:	1c59      	adds	r1, r3, #1
 8005260:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005262:	7812      	ldrb	r2, [r2, #0]
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800526a:	1e5a      	subs	r2, r3, #1
 800526c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1f0      	bne.n	8005256 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 800527a:	e007      	b.n	800528c <_ff_pull_n+0x188>
 800527c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800527e:	1c53      	adds	r3, r2, #1
 8005280:	633b      	str	r3, [r7, #48]	@ 0x30
 8005282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005284:	1c59      	adds	r1, r3, #1
 8005286:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005288:	7812      	ldrb	r2, [r2, #0]
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005290:	1e5a      	subs	r2, r3, #1
 8005292:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1f0      	bne.n	800527c <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	e002      	b.n	80052a8 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 80052a8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d005      	beq.n	80052ba <_ff_pull_n+0x1b6>
 80052ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80052b0:	461a      	mov	r2, r3
 80052b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80052b4:	68b8      	ldr	r0, [r7, #8]
 80052b6:	f7ff fdd6 	bl	8004e66 <_ff_pull_const_addr>
    break;
 80052ba:	bf00      	nop
  }
}
 80052bc:	bf00      	nop
 80052be:	3738      	adds	r7, #56	@ 0x38
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	80fb      	strh	r3, [r7, #6]
 80052ce:	460b      	mov	r3, r1
 80052d0:	80bb      	strh	r3, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 80052d6:	88ba      	ldrh	r2, [r7, #4]
 80052d8:	887b      	ldrh	r3, [r7, #2]
 80052da:	4413      	add	r3, r2
 80052dc:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 80052de:	88ba      	ldrh	r2, [r7, #4]
 80052e0:	89fb      	ldrh	r3, [r7, #14]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d804      	bhi.n	80052f0 <advance_index+0x2c>
 80052e6:	89fa      	ldrh	r2, [r7, #14]
 80052e8:	88fb      	ldrh	r3, [r7, #6]
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	429a      	cmp	r2, r3
 80052ee:	db08      	blt.n	8005302 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 80052f0:	88fb      	ldrh	r3, [r7, #6]
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	425b      	negs	r3, r3
 80052f8:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 80052fa:	89fa      	ldrh	r2, [r7, #14]
 80052fc:	89bb      	ldrh	r3, [r7, #12]
 80052fe:	4413      	add	r3, r2
 8005300:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8005302:	89fb      	ldrh	r3, [r7, #14]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b08a      	sub	sp, #40	@ 0x28
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	4611      	mov	r1, r2
 800531c:	461a      	mov	r2, r3
 800531e:	460b      	mov	r3, r1
 8005320:	80fb      	strh	r3, [r7, #6]
 8005322:	4613      	mov	r3, r2
 8005324:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	889b      	ldrh	r3, [r3, #4]
 800532a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800532c:	88fb      	ldrh	r3, [r7, #6]
 800532e:	843b      	strh	r3, [r7, #32]
 8005330:	88bb      	ldrh	r3, [r7, #4]
 8005332:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8005334:	8c3a      	ldrh	r2, [r7, #32]
 8005336:	8bfb      	ldrh	r3, [r7, #30]
 8005338:	429a      	cmp	r2, r3
 800533a:	d304      	bcc.n	8005346 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 800533c:	8c3a      	ldrh	r2, [r7, #32]
 800533e:	8bfb      	ldrh	r3, [r7, #30]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	b29b      	uxth	r3, r3
 8005344:	e008      	b.n	8005358 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8005346:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	8c39      	ldrh	r1, [r7, #32]
 800534e:	8bfb      	ldrh	r3, [r7, #30]
 8005350:	1acb      	subs	r3, r1, r3
 8005352:	b29b      	uxth	r3, r3
 8005354:	4413      	add	r3, r2
 8005356:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8005358:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 800535a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <_tu_fifo_peek+0x54>
 8005360:	2300      	movs	r3, #0
 8005362:	e037      	b.n	80053d4 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	889b      	ldrh	r3, [r3, #4]
 8005368:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800536a:	429a      	cmp	r2, r3
 800536c:	d91b      	bls.n	80053a6 <_tu_fifo_peek+0x96>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	889b      	ldrh	r3, [r3, #4]
 800537a:	8afa      	ldrh	r2, [r7, #22]
 800537c:	429a      	cmp	r2, r3
 800537e:	d305      	bcc.n	800538c <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	889b      	ldrh	r3, [r3, #4]
 8005384:	8afa      	ldrh	r2, [r7, #22]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	82bb      	strh	r3, [r7, #20]
 800538a:	e004      	b.n	8005396 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	889a      	ldrh	r2, [r3, #4]
 8005390:	8afb      	ldrh	r3, [r7, #22]
 8005392:	4413      	add	r3, r2
 8005394:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	8aba      	ldrh	r2, [r7, #20]
 800539a:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 800539c:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800539e:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	889b      	ldrh	r3, [r3, #4]
 80053a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	889b      	ldrh	r3, [r3, #4]
 80053aa:	827b      	strh	r3, [r7, #18]
 80053ac:	88bb      	ldrh	r3, [r7, #4]
 80053ae:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80053b0:	e003      	b.n	80053ba <_tu_fifo_peek+0xaa>
 80053b2:	8a3a      	ldrh	r2, [r7, #16]
 80053b4:	8a7b      	ldrh	r3, [r7, #18]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	823b      	strh	r3, [r7, #16]
 80053ba:	8a7a      	ldrh	r2, [r7, #18]
 80053bc:	8a3b      	ldrh	r3, [r7, #16]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d9f7      	bls.n	80053b2 <_tu_fifo_peek+0xa2>
  return idx;
 80053c2:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80053c4:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 80053c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053c8:	461a      	mov	r2, r3
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f7ff fe7a 	bl	80050c6 <_ff_pull>

  return true;
 80053d2:	2301      	movs	r3, #1
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3728      	adds	r7, #40	@ 0x28
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b08c      	sub	sp, #48	@ 0x30
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	4611      	mov	r1, r2
 80053e8:	461a      	mov	r2, r3
 80053ea:	460b      	mov	r3, r1
 80053ec:	80fb      	strh	r3, [r7, #6]
 80053ee:	4613      	mov	r3, r2
 80053f0:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	889b      	ldrh	r3, [r3, #4]
 80053f6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80053f8:	88bb      	ldrh	r3, [r7, #4]
 80053fa:	843b      	strh	r3, [r7, #32]
 80053fc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80053fe:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8005400:	8c3a      	ldrh	r2, [r7, #32]
 8005402:	8bfb      	ldrh	r3, [r7, #30]
 8005404:	429a      	cmp	r2, r3
 8005406:	d304      	bcc.n	8005412 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8005408:	8c3a      	ldrh	r2, [r7, #32]
 800540a:	8bfb      	ldrh	r3, [r7, #30]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	b29b      	uxth	r3, r3
 8005410:	e008      	b.n	8005424 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8005412:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	b29a      	uxth	r2, r3
 8005418:	8c39      	ldrh	r1, [r7, #32]
 800541a:	8bfb      	ldrh	r3, [r7, #30]
 800541c:	1acb      	subs	r3, r1, r3
 800541e:	b29b      	uxth	r3, r3
 8005420:	4413      	add	r3, r2
 8005422:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8005424:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 8005426:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <_tu_fifo_peek_n+0x54>
 800542c:	2300      	movs	r3, #0
 800542e:	e041      	b.n	80054b4 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	889b      	ldrh	r3, [r3, #4]
 8005434:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005436:	429a      	cmp	r2, r3
 8005438:	d91b      	bls.n	8005472 <_tu_fifo_peek_n+0x96>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	61bb      	str	r3, [r7, #24]
 800543e:	88bb      	ldrh	r3, [r7, #4]
 8005440:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	889b      	ldrh	r3, [r3, #4]
 8005446:	8afa      	ldrh	r2, [r7, #22]
 8005448:	429a      	cmp	r2, r3
 800544a:	d305      	bcc.n	8005458 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	889b      	ldrh	r3, [r3, #4]
 8005450:	8afa      	ldrh	r2, [r7, #22]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	82bb      	strh	r3, [r7, #20]
 8005456:	e004      	b.n	8005462 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	889a      	ldrh	r2, [r3, #4]
 800545c:	8afb      	ldrh	r3, [r7, #22]
 800545e:	4413      	add	r3, r2
 8005460:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	8aba      	ldrh	r2, [r7, #20]
 8005466:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8005468:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800546a:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	889b      	ldrh	r3, [r3, #4]
 8005470:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8005472:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005474:	88fb      	ldrh	r3, [r7, #6]
 8005476:	429a      	cmp	r2, r3
 8005478:	d201      	bcs.n	800547e <_tu_fifo_peek_n+0xa2>
 800547a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800547c:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	889b      	ldrh	r3, [r3, #4]
 8005482:	827b      	strh	r3, [r7, #18]
 8005484:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005486:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8005488:	e003      	b.n	8005492 <_tu_fifo_peek_n+0xb6>
 800548a:	8a3a      	ldrh	r2, [r7, #16]
 800548c:	8a7b      	ldrh	r3, [r7, #18]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	823b      	strh	r3, [r7, #16]
 8005492:	8a7a      	ldrh	r2, [r7, #18]
 8005494:	8a3b      	ldrh	r3, [r7, #16]
 8005496:	429a      	cmp	r2, r3
 8005498:	d9f7      	bls.n	800548a <_tu_fifo_peek_n+0xae>
  return idx;
 800549a:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800549c:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 800549e:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80054a0:	88fa      	ldrh	r2, [r7, #6]
 80054a2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	460b      	mov	r3, r1
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f7ff fe29 	bl	8005104 <_ff_pull_n>

  return n;
 80054b2:	88fb      	ldrh	r3, [r7, #6]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3728      	adds	r7, #40	@ 0x28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b092      	sub	sp, #72	@ 0x48
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	4611      	mov	r1, r2
 80054c8:	461a      	mov	r2, r3
 80054ca:	460b      	mov	r3, r1
 80054cc:	80fb      	strh	r3, [r7, #6]
 80054ce:	4613      	mov	r3, r2
 80054d0:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 80054d2:	88fb      	ldrh	r3, [r7, #6]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <_tu_fifo_write_n+0x20>
 80054d8:	2300      	movs	r3, #0
 80054da:	e0bc      	b.n	8005656 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	891b      	ldrh	r3, [r3, #8]
 80054e0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	895b      	ldrh	r3, [r3, #10]
 80054e6:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	79db      	ldrb	r3, [r3, #7]
 80054f0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	f083 0301 	eor.w	r3, r3, #1
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d036      	beq.n	800556e <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	889b      	ldrh	r3, [r3, #4]
 8005504:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005506:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005508:	853b      	strh	r3, [r7, #40]	@ 0x28
 800550a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800550c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800550e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005510:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005512:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005514:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005516:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005518:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 800551a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800551c:	8c3b      	ldrh	r3, [r7, #32]
 800551e:	429a      	cmp	r2, r3
 8005520:	d304      	bcc.n	800552c <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 8005522:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005524:	8c3b      	ldrh	r3, [r7, #32]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	b29b      	uxth	r3, r3
 800552a:	e008      	b.n	800553e <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800552c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8005534:	8c3b      	ldrh	r3, [r7, #32]
 8005536:	1acb      	subs	r3, r1, r3
 8005538:	b29b      	uxth	r3, r3
 800553a:	4413      	add	r3, r2
 800553c:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 800553e:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8005540:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005542:	8bfb      	ldrh	r3, [r7, #30]
 8005544:	429a      	cmp	r2, r3
 8005546:	d904      	bls.n	8005552 <_tu_fifo_write_n+0x96>
 8005548:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800554a:	8bfb      	ldrh	r3, [r7, #30]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	b29b      	uxth	r3, r3
 8005550:	e000      	b.n	8005554 <_tu_fifo_write_n+0x98>
 8005552:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8005554:	867b      	strh	r3, [r7, #50]	@ 0x32
 8005556:	88fb      	ldrh	r3, [r7, #6]
 8005558:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800555a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800555c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800555e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005560:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005562:	4293      	cmp	r3, r2
 8005564:	bf28      	it	cs
 8005566:	4613      	movcs	r3, r2
 8005568:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 800556a:	80fb      	strh	r3, [r7, #6]
 800556c:	e04b      	b.n	8005606 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	889b      	ldrh	r3, [r3, #4]
 8005572:	88fa      	ldrh	r2, [r7, #6]
 8005574:	429a      	cmp	r2, r3
 8005576:	d317      	bcc.n	80055a8 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8005578:	797b      	ldrb	r3, [r7, #5]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10e      	bne.n	800559c <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 800557e:	88fb      	ldrh	r3, [r7, #6]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	8892      	ldrh	r2, [r2, #4]
 8005584:	1a9b      	subs	r3, r3, r2
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	88d2      	ldrh	r2, [r2, #6]
 800558a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800558e:	b292      	uxth	r2, r2
 8005590:	fb02 f303 	mul.w	r3, r2, r3
 8005594:	461a      	mov	r2, r3
 8005596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005598:	4413      	add	r3, r2
 800559a:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	889b      	ldrh	r3, [r3, #4]
 80055a0:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 80055a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80055a4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80055a6:	e02e      	b.n	8005606 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	889b      	ldrh	r3, [r3, #4]
 80055ac:	83bb      	strh	r3, [r7, #28]
 80055ae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80055b0:	837b      	strh	r3, [r7, #26]
 80055b2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80055b4:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 80055b6:	8b7a      	ldrh	r2, [r7, #26]
 80055b8:	8b3b      	ldrh	r3, [r7, #24]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d304      	bcc.n	80055c8 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 80055be:	8b7a      	ldrh	r2, [r7, #26]
 80055c0:	8b3b      	ldrh	r3, [r7, #24]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	e008      	b.n	80055da <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80055c8:	8bbb      	ldrh	r3, [r7, #28]
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	8b79      	ldrh	r1, [r7, #26]
 80055d0:	8b3b      	ldrh	r3, [r7, #24]
 80055d2:	1acb      	subs	r3, r1, r3
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	4413      	add	r3, r2
 80055d8:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 80055da:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 80055dc:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	441a      	add	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	889b      	ldrh	r3, [r3, #4]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	429a      	cmp	r2, r3
 80055ea:	db0c      	blt.n	8005606 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8898      	ldrh	r0, [r3, #4]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	889a      	ldrh	r2, [r3, #4]
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80055fc:	4619      	mov	r1, r3
 80055fe:	f7ff fe61 	bl	80052c4 <advance_index>
 8005602:	4603      	mov	r3, r0
 8005604:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 8005606:	88fb      	ldrh	r3, [r7, #6]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d023      	beq.n	8005654 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	889b      	ldrh	r3, [r3, #4]
 8005610:	82fb      	strh	r3, [r7, #22]
 8005612:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005614:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8005616:	e003      	b.n	8005620 <_tu_fifo_write_n+0x164>
 8005618:	8aba      	ldrh	r2, [r7, #20]
 800561a:	8afb      	ldrh	r3, [r7, #22]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	82bb      	strh	r3, [r7, #20]
 8005620:	8afa      	ldrh	r2, [r7, #22]
 8005622:	8abb      	ldrh	r3, [r7, #20]
 8005624:	429a      	cmp	r2, r3
 8005626:	d9f7      	bls.n	8005618 <_tu_fifo_write_n+0x15c>
  return idx;
 8005628:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 800562a:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 800562c:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 800562e:	88fa      	ldrh	r2, [r7, #6]
 8005630:	797b      	ldrb	r3, [r7, #5]
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	460b      	mov	r3, r1
 8005636:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f7ff fc66 	bl	8004f0a <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	889b      	ldrh	r3, [r3, #4]
 8005642:	88fa      	ldrh	r2, [r7, #6]
 8005644:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff fe3c 	bl	80052c4 <advance_index>
 800564c:	4603      	mov	r3, r0
 800564e:	461a      	mov	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8005654:	88fb      	ldrh	r3, [r7, #6]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3740      	adds	r7, #64	@ 0x40
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b086      	sub	sp, #24
 8005662:	af02      	add	r7, sp, #8
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	4611      	mov	r1, r2
 800566a:	461a      	mov	r2, r3
 800566c:	460b      	mov	r3, r1
 800566e:	80fb      	strh	r3, [r7, #6]
 8005670:	4613      	mov	r3, r2
 8005672:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	891b      	ldrh	r3, [r3, #8]
 8005678:	b298      	uxth	r0, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	895b      	ldrh	r3, [r3, #10]
 800567e:	b29b      	uxth	r3, r3
 8005680:	88f9      	ldrh	r1, [r7, #6]
 8005682:	797a      	ldrb	r2, [r7, #5]
 8005684:	9201      	str	r2, [sp, #4]
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	4603      	mov	r3, r0
 800568a:	460a      	mov	r2, r1
 800568c:	68b9      	ldr	r1, [r7, #8]
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f7ff fea4 	bl	80053dc <_tu_fifo_peek_n>
 8005694:	4603      	mov	r3, r0
 8005696:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8898      	ldrh	r0, [r3, #4]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	895b      	ldrh	r3, [r3, #10]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	88fa      	ldrh	r2, [r7, #6]
 80056a4:	4619      	mov	r1, r3
 80056a6:	f7ff fe0d 	bl	80052c4 <advance_index>
 80056aa:	4603      	mov	r3, r0
 80056ac:	461a      	mov	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 80056b2:	88fb      	ldrh	r3, [r7, #6]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	8899      	ldrh	r1, [r3, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	891b      	ldrh	r3, [r3, #8]
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	895b      	ldrh	r3, [r3, #10]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	8279      	strh	r1, [r7, #18]
 80056d6:	823a      	strh	r2, [r7, #16]
 80056d8:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 80056da:	8a3a      	ldrh	r2, [r7, #16]
 80056dc:	89fb      	ldrh	r3, [r7, #14]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d304      	bcc.n	80056ec <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 80056e2:	8a3a      	ldrh	r2, [r7, #16]
 80056e4:	89fb      	ldrh	r3, [r7, #14]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	e008      	b.n	80056fe <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80056ec:	8a7b      	ldrh	r3, [r7, #18]
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	8a39      	ldrh	r1, [r7, #16]
 80056f4:	89fb      	ldrh	r3, [r7, #14]
 80056f6:	1acb      	subs	r3, r1, r3
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	4413      	add	r3, r2
 80056fc:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	8892      	ldrh	r2, [r2, #4]
 8005702:	82fb      	strh	r3, [r7, #22]
 8005704:	4613      	mov	r3, r2
 8005706:	82bb      	strh	r3, [r7, #20]
 8005708:	8afa      	ldrh	r2, [r7, #22]
 800570a:	8abb      	ldrh	r3, [r7, #20]
 800570c:	4293      	cmp	r3, r2
 800570e:	bf28      	it	cs
 8005710:	4613      	movcs	r3, r2
 8005712:	b29b      	uxth	r3, r3
}
 8005714:	4618      	mov	r0, r3
 8005716:	371c      	adds	r7, #28
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	891b      	ldrh	r3, [r3, #8]
 800572c:	b29a      	uxth	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	895b      	ldrh	r3, [r3, #10]
 8005732:	b29b      	uxth	r3, r3
 8005734:	429a      	cmp	r2, r3
 8005736:	bf0c      	ite	eq
 8005738:	2301      	moveq	r3, #1
 800573a:	2300      	movne	r3, #0
 800573c:	b2db      	uxtb	r3, r3
}
 800573e:	4618      	mov	r0, r3
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	8899      	ldrh	r1, [r3, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	891b      	ldrh	r3, [r3, #8]
 800575a:	b29a      	uxth	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	895b      	ldrh	r3, [r3, #10]
 8005760:	b29b      	uxth	r3, r3
 8005762:	81f9      	strh	r1, [r7, #14]
 8005764:	81ba      	strh	r2, [r7, #12]
 8005766:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8005768:	89ba      	ldrh	r2, [r7, #12]
 800576a:	897b      	ldrh	r3, [r7, #10]
 800576c:	429a      	cmp	r2, r3
 800576e:	d304      	bcc.n	800577a <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8005770:	89ba      	ldrh	r2, [r7, #12]
 8005772:	897b      	ldrh	r3, [r7, #10]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	b29b      	uxth	r3, r3
 8005778:	e008      	b.n	800578c <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800577a:	89fb      	ldrh	r3, [r7, #14]
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	89b9      	ldrh	r1, [r7, #12]
 8005782:	897b      	ldrh	r3, [r7, #10]
 8005784:	1acb      	subs	r3, r1, r3
 8005786:	b29b      	uxth	r3, r3
 8005788:	4413      	add	r3, r2
 800578a:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	8892      	ldrh	r2, [r2, #4]
 8005790:	4293      	cmp	r3, r2
 8005792:	bf2c      	ite	cs
 8005794:	2301      	movcs	r3, #1
 8005796:	2300      	movcc	r3, #0
 8005798:	b2db      	uxtb	r3, r3
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b087      	sub	sp, #28
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	8899      	ldrh	r1, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	891b      	ldrh	r3, [r3, #8]
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	895b      	ldrh	r3, [r3, #10]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	82f9      	strh	r1, [r7, #22]
 80057c0:	82ba      	strh	r2, [r7, #20]
 80057c2:	827b      	strh	r3, [r7, #18]
 80057c4:	8afb      	ldrh	r3, [r7, #22]
 80057c6:	823b      	strh	r3, [r7, #16]
 80057c8:	8abb      	ldrh	r3, [r7, #20]
 80057ca:	81fb      	strh	r3, [r7, #14]
 80057cc:	8a7b      	ldrh	r3, [r7, #18]
 80057ce:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 80057d0:	89fa      	ldrh	r2, [r7, #14]
 80057d2:	89bb      	ldrh	r3, [r7, #12]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d304      	bcc.n	80057e2 <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 80057d8:	89fa      	ldrh	r2, [r7, #14]
 80057da:	89bb      	ldrh	r3, [r7, #12]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	b29b      	uxth	r3, r3
 80057e0:	e008      	b.n	80057f4 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80057e2:	8a3b      	ldrh	r3, [r7, #16]
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	89f9      	ldrh	r1, [r7, #14]
 80057ea:	89bb      	ldrh	r3, [r7, #12]
 80057ec:	1acb      	subs	r3, r1, r3
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	4413      	add	r3, r2
 80057f2:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 80057f4:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 80057f6:	8afa      	ldrh	r2, [r7, #22]
 80057f8:	897b      	ldrh	r3, [r7, #10]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d904      	bls.n	8005808 <tu_fifo_remaining+0x62>
 80057fe:	8afa      	ldrh	r2, [r7, #22]
 8005800:	897b      	ldrh	r3, [r7, #10]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	b29b      	uxth	r3, r3
 8005806:	e000      	b.n	800580a <tu_fifo_remaining+0x64>
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	891b      	ldrh	r3, [r3, #8]
 8005824:	b29a      	uxth	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	895b      	ldrh	r3, [r3, #10]
 800582a:	b29b      	uxth	r3, r3
 800582c:	6839      	ldr	r1, [r7, #0]
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff fd6e 	bl	8005310 <_tu_fifo_peek>
 8005834:	4603      	mov	r3, r0
 8005836:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	8898      	ldrh	r0, [r3, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	895b      	ldrh	r3, [r3, #10]
 8005840:	b29b      	uxth	r3, r3
 8005842:	7bfa      	ldrb	r2, [r7, #15]
 8005844:	b292      	uxth	r2, r2
 8005846:	4619      	mov	r1, r3
 8005848:	f7ff fd3c 	bl	80052c4 <advance_index>
 800584c:	4603      	mov	r3, r0
 800584e:	461a      	mov	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8005854:	7bfb      	ldrb	r3, [r7, #15]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b084      	sub	sp, #16
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	4613      	mov	r3, r2
 800586a:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 800586c:	88fa      	ldrh	r2, [r7, #6]
 800586e:	2300      	movs	r3, #0
 8005870:	68b9      	ldr	r1, [r7, #8]
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f7ff fef3 	bl	800565e <_tu_fifo_read_n>
 8005878:	4603      	mov	r3, r0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	4613      	mov	r3, r2
 800588e:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8005890:	88fa      	ldrh	r2, [r7, #6]
 8005892:	2301      	movs	r3, #1
 8005894:	68b9      	ldr	r1, [r7, #8]
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f7ff fee1 	bl	800565e <_tu_fifo_read_n>
 800589c:	4603      	mov	r3, r0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b086      	sub	sp, #24
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	891b      	ldrh	r3, [r3, #8]
 80058b4:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7ff ff47 	bl	800574a <tu_fifo_full>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00c      	beq.n	80058dc <tu_fifo_write+0x36>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	79db      	ldrb	r3, [r3, #7]
 80058c6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	f083 0301 	eor.w	r3, r3, #1
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <tu_fifo_write+0x36>
  {
    ret = false;
 80058d6:	2300      	movs	r3, #0
 80058d8:	75fb      	strb	r3, [r7, #23]
 80058da:	e022      	b.n	8005922 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	889b      	ldrh	r3, [r3, #4]
 80058e0:	823b      	strh	r3, [r7, #16]
 80058e2:	8abb      	ldrh	r3, [r7, #20]
 80058e4:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 80058e6:	e003      	b.n	80058f0 <tu_fifo_write+0x4a>
 80058e8:	89fa      	ldrh	r2, [r7, #14]
 80058ea:	8a3b      	ldrh	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	81fb      	strh	r3, [r7, #14]
 80058f0:	8a3a      	ldrh	r2, [r7, #16]
 80058f2:	89fb      	ldrh	r3, [r7, #14]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d9f7      	bls.n	80058e8 <tu_fifo_write+0x42>
  return idx;
 80058f8:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80058fa:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 80058fc:	8a7b      	ldrh	r3, [r7, #18]
 80058fe:	461a      	mov	r2, r3
 8005900:	6839      	ldr	r1, [r7, #0]
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7ff fae2 	bl	8004ecc <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	889b      	ldrh	r3, [r3, #4]
 800590c:	8ab9      	ldrh	r1, [r7, #20]
 800590e:	2201      	movs	r2, #1
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff fcd7 	bl	80052c4 <advance_index>
 8005916:	4603      	mov	r3, r0
 8005918:	461a      	mov	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	811a      	strh	r2, [r3, #8]

    ret = true;
 800591e:	2301      	movs	r3, #1
 8005920:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8005922:	7dfb      	ldrb	r3, [r7, #23]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	4613      	mov	r3, r2
 8005938:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 800593a:	88fa      	ldrh	r2, [r7, #6]
 800593c:	2300      	movs	r3, #0
 800593e:	68b9      	ldr	r1, [r7, #8]
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f7ff fdbb 	bl	80054bc <_tu_fifo_write_n>
 8005946:	4603      	mov	r3, r0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	4613      	mov	r3, r2
 800595c:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 800595e:	88fa      	ldrh	r2, [r7, #6]
 8005960:	2301      	movs	r3, #1
 8005962:	68b9      	ldr	r1, [r7, #8]
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f7ff fda9 	bl	80054bc <_tu_fifo_write_n>
 800596a:	4603      	mov	r3, r0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8005988:	2301      	movs	r3, #1
}
 800598a:	4618      	mov	r0, r3
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <tu_fifo_set_overwritable>:
                Pointer to the FIFO buffer to manipulate
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable) {
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	460b      	mov	r3, r1
 80059a0:	70fb      	strb	r3, [r7, #3]
  if (f->overwritable == overwritable) {
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	79db      	ldrb	r3, [r3, #7]
 80059a6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	78fa      	ldrb	r2, [r7, #3]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d101      	bne.n	80059b6 <tu_fifo_set_overwritable+0x20>
    return true;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e006      	b.n	80059c4 <tu_fifo_set_overwritable+0x2e>
  }

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	79d3      	ldrb	r3, [r2, #7]
 80059ba:	78f9      	ldrb	r1, [r7, #3]
 80059bc:	f361 13c7 	bfi	r3, r1, #7, #1
 80059c0:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 80059c2:	2301      	movs	r3, #1
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	4603      	mov	r3, r0
 80059d8:	6039      	str	r1, [r7, #0]
 80059da:	71fb      	strb	r3, [r7, #7]
 80059dc:	4613      	mov	r3, r2
 80059de:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <tud_descriptor_bos_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
  return NULL;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
  return NULL;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	4603      	mov	r3, r0
 8005a28:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <tud_mount_cb>:

TU_ATTR_WEAK void tud_mount_cb(void) {
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
}
 8005a3c:	bf00      	nop
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <tud_umount_cb>:

TU_ATTR_WEAK void tud_umount_cb(void) {
 8005a46:	b480      	push	{r7}
 8005a48:	af00      	add	r7, sp, #0
}
 8005a4a:	bf00      	nop
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <tud_suspend_cb>:

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 8005a6a:	b480      	push	{r7}
 8005a6c:	af00      	add	r7, sp, #0
}
 8005a6e:	bf00      	nop
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <tud_vendor_control_xfer_cb>:

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	4603      	mov	r3, r0
 8005a80:	603a      	str	r2, [r7, #0]
 8005a82:	71fb      	strb	r3, [r7, #7]
 8005a84:	460b      	mov	r3, r1
 8005a86:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) stage; (void) request;
  return false;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8005aa0:	2301      	movs	r3, #1
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
	...

08005ab0 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8005ab0:	b480      	push	{r7}
 8005ab2:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8005ab4:	4b06      	ldr	r3, [pc, #24]	@ (8005ad0 <tud_mounted+0x20>)
 8005ab6:	785b      	ldrb	r3, [r3, #1]
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	bf14      	ite	ne
 8005abe:	2301      	movne	r3, #1
 8005ac0:	2300      	moveq	r3, #0
 8005ac2:	b2db      	uxtb	r3, r3
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	20000a5c 	.word	0x20000a5c

08005ad4 <tud_suspended>:

bool tud_suspended(void) {
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8005ad8:	4b07      	ldr	r3, [pc, #28]	@ (8005af8 <tud_suspended+0x24>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	bf14      	ite	ne
 8005ae6:	2301      	movne	r3, #1
 8005ae8:	2300      	moveq	r3, #0
 8005aea:	b2db      	uxtb	r3, r3
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	20000a5c 	.word	0x20000a5c

08005afc <tud_remote_wakeup>:

bool tud_remote_wakeup(void) {
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en);
 8005b00:	4b0f      	ldr	r3, [pc, #60]	@ (8005b40 <tud_remote_wakeup+0x44>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00d      	beq.n	8005b2a <tud_remote_wakeup+0x2e>
 8005b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b40 <tud_remote_wakeup+0x44>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d006      	beq.n	8005b2a <tud_remote_wakeup+0x2e>
 8005b1c:	4b08      	ldr	r3, [pc, #32]	@ (8005b40 <tud_remote_wakeup+0x44>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	f003 0308 	and.w	r3, r3, #8
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <tud_remote_wakeup+0x32>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	e005      	b.n	8005b3a <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 8005b2e:	4b05      	ldr	r3, [pc, #20]	@ (8005b44 <tud_remote_wakeup+0x48>)
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f002 fba4 	bl	8008280 <dcd_remote_wakeup>
  return true;
 8005b38:	2301      	movs	r3, #1
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000a5c 	.word	0x20000a5c
 8005b44:	2000006d 	.word	0x2000006d

08005b48 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8005b4c:	4b05      	ldr	r3, [pc, #20]	@ (8005b64 <tud_inited+0x1c>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2bff      	cmp	r3, #255	@ 0xff
 8005b52:	bf14      	ite	ne
 8005b54:	2301      	movne	r3, #1
 8005b56:	2300      	moveq	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	2000006d 	.word	0x2000006d

08005b68 <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08c      	sub	sp, #48	@ 0x30
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	4603      	mov	r3, r0
 8005b70:	6039      	str	r1, [r7, #0]
 8005b72:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 8005b74:	f7ff ffe8 	bl	8005b48 <tud_inited>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e09e      	b.n	8005cc0 <tud_rhport_init+0x158>
  }
  TU_ASSERT(rh_init);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10a      	bne.n	8005b9e <tud_rhport_init+0x36>
 8005b88:	4b4f      	ldr	r3, [pc, #316]	@ (8005cc8 <tud_rhport_init+0x160>)
 8005b8a:	61bb      	str	r3, [r7, #24]
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d000      	beq.n	8005b9a <tud_rhport_init+0x32>
 8005b98:	be00      	bkpt	0x0000
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e090      	b.n	8005cc0 <tud_rhport_init+0x158>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8005b9e:	222c      	movs	r2, #44	@ 0x2c
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	484a      	ldr	r0, [pc, #296]	@ (8005ccc <tud_rhport_init+0x164>)
 8005ba4:	f003 ff11 	bl	80099ca <memset>
  _usbd_queued_setup = 0;
 8005ba8:	4b49      	ldr	r3, [pc, #292]	@ (8005cd0 <tud_rhport_init+0x168>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	701a      	strb	r2, [r3, #0]
 8005bae:	4b49      	ldr	r3, [pc, #292]	@ (8005cd4 <tud_rhport_init+0x16c>)
 8005bb0:	613b      	str	r3, [r7, #16]
#define OSAL_SPINLOCK_DEF(_name, _int_set) \
  osal_spinlock_t _name = { .interrupt_set = _int_set }

TU_ATTR_ALWAYS_INLINE static inline void osal_spin_init(osal_spinlock_t *ctx) {
  (void) ctx;
}
 8005bb2:	bf00      	nop
 8005bb4:	4b48      	ldr	r3, [pc, #288]	@ (8005cd8 <tud_rhport_init+0x170>)
 8005bb6:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	3304      	adds	r3, #4
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff fed9 	bl	8005974 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8005bc2:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8005bc4:	4a45      	ldr	r2, [pc, #276]	@ (8005cdc <tud_rhport_init+0x174>)
 8005bc6:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8005bc8:	4b44      	ldr	r3, [pc, #272]	@ (8005cdc <tud_rhport_init+0x174>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10a      	bne.n	8005be6 <tud_rhport_init+0x7e>
 8005bd0:	4b3d      	ldr	r3, [pc, #244]	@ (8005cc8 <tud_rhport_init+0x160>)
 8005bd2:	61fb      	str	r3, [r7, #28]
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d000      	beq.n	8005be2 <tud_rhport_init+0x7a>
 8005be0:	be00      	bkpt	0x0000
 8005be2:	2300      	movs	r3, #0
 8005be4:	e06c      	b.n	8005cc0 <tud_rhport_init+0x158>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8005be6:	4b3e      	ldr	r3, [pc, #248]	@ (8005ce0 <tud_rhport_init+0x178>)
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <tud_rhport_init+0x90>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8005bec:	483d      	ldr	r0, [pc, #244]	@ (8005ce4 <tud_rhport_init+0x17c>)
 8005bee:	f3af 8000 	nop.w
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	4a3c      	ldr	r2, [pc, #240]	@ (8005ce8 <tud_rhport_init+0x180>)
 8005bf6:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005bfe:	e03a      	b.n	8005c76 <tud_rhport_init+0x10e>
 8005c00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c04:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8005c0a:	4b36      	ldr	r3, [pc, #216]	@ (8005ce4 <tud_rhport_init+0x17c>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	7bfa      	ldrb	r2, [r7, #15]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d206      	bcs.n	8005c22 <tud_rhport_init+0xba>
    driver = &_app_driver[drvid];
 8005c14:	4b34      	ldr	r3, [pc, #208]	@ (8005ce8 <tud_rhport_init+0x180>)
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	015b      	lsls	r3, r3, #5
 8005c1c:	4413      	add	r3, r2
 8005c1e:	60bb      	str	r3, [r7, #8]
 8005c20:	e00d      	b.n	8005c3e <tud_rhport_init+0xd6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8005c22:	4b30      	ldr	r3, [pc, #192]	@ (8005ce4 <tud_rhport_init+0x17c>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	db07      	blt.n	8005c3e <tud_rhport_init+0xd6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
 8005c30:	4a2c      	ldr	r2, [pc, #176]	@ (8005ce4 <tud_rhport_init+0x17c>)
 8005c32:	7812      	ldrb	r2, [r2, #0]
 8005c34:	1a9b      	subs	r3, r3, r2
 8005c36:	015b      	lsls	r3, r3, #5
 8005c38:	4a2c      	ldr	r2, [pc, #176]	@ (8005cec <tud_rhport_init+0x184>)
 8005c3a:	4413      	add	r3, r2
 8005c3c:	60bb      	str	r3, [r7, #8]
  return driver;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
    usbd_class_driver_t const* driver = get_driver(i);
 8005c40:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 8005c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d003      	beq.n	8005c50 <tud_rhport_init+0xe8>
 8005c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10a      	bne.n	8005c66 <tud_rhport_init+0xfe>
 8005c50:	4b1d      	ldr	r3, [pc, #116]	@ (8005cc8 <tud_rhport_init+0x160>)
 8005c52:	623b      	str	r3, [r7, #32]
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d000      	beq.n	8005c62 <tud_rhport_init+0xfa>
 8005c60:	be00      	bkpt	0x0000
 8005c62:	2300      	movs	r3, #0
 8005c64:	e02c      	b.n	8005cc0 <tud_rhport_init+0x158>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 8005c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8005c6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c70:	3301      	adds	r3, #1
 8005c72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005c76:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce4 <tud_rhport_init+0x17c>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c80:	429a      	cmp	r2, r3
 8005c82:	dabd      	bge.n	8005c00 <tud_rhport_init+0x98>
  }

  _usbd_rhport = rhport;
 8005c84:	4a1a      	ldr	r2, [pc, #104]	@ (8005cf0 <tud_rhport_init+0x188>)
 8005c86:	79fb      	ldrb	r3, [r7, #7]
 8005c88:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	6839      	ldr	r1, [r7, #0]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f002 f9cc 	bl	800802c <dcd_init>
 8005c94:	4603      	mov	r3, r0
 8005c96:	f083 0301 	eor.w	r3, r3, #1
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00a      	beq.n	8005cb6 <tud_rhport_init+0x14e>
 8005ca0:	4b09      	ldr	r3, [pc, #36]	@ (8005cc8 <tud_rhport_init+0x160>)
 8005ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d000      	beq.n	8005cb2 <tud_rhport_init+0x14a>
 8005cb0:	be00      	bkpt	0x0000
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	e004      	b.n	8005cc0 <tud_rhport_init+0x158>
  dcd_int_enable(rhport);
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f002 fa55 	bl	8008168 <dcd_int_enable>

  return true;
 8005cbe:	2301      	movs	r3, #1
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3730      	adds	r7, #48	@ 0x30
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	e000edf0 	.word	0xe000edf0
 8005ccc:	20000a5c 	.word	0x20000a5c
 8005cd0:	20000a88 	.word	0x20000a88
 8005cd4:	20000070 	.word	0x20000070
 8005cd8:	20000074 	.word	0x20000074
 8005cdc:	20000b54 	.word	0x20000b54
 8005ce0:	00000000 	.word	0x00000000
 8005ce4:	20000a90 	.word	0x20000a90
 8005ce8:	20000a8c 	.word	0x20000a8c
 8005cec:	08009bf8 	.word	0x08009bf8
 8005cf0:	2000006d 	.word	0x2000006d

08005cf4 <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8005cfe:	2300      	movs	r3, #0
 8005d00:	77fb      	strb	r3, [r7, #31]
 8005d02:	e034      	b.n	8005d6e <configuration_reset+0x7a>
 8005d04:	7ffb      	ldrb	r3, [r7, #31]
 8005d06:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8005d0c:	4b25      	ldr	r3, [pc, #148]	@ (8005da4 <configuration_reset+0xb0>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	7cfa      	ldrb	r2, [r7, #19]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d206      	bcs.n	8005d24 <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 8005d16:	4b24      	ldr	r3, [pc, #144]	@ (8005da8 <configuration_reset+0xb4>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	7cfb      	ldrb	r3, [r7, #19]
 8005d1c:	015b      	lsls	r3, r3, #5
 8005d1e:	4413      	add	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]
 8005d22:	e00d      	b.n	8005d40 <configuration_reset+0x4c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8005d24:	4b1f      	ldr	r3, [pc, #124]	@ (8005da4 <configuration_reset+0xb0>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	7cfb      	ldrb	r3, [r7, #19]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	db07      	blt.n	8005d40 <configuration_reset+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005d30:	7cfb      	ldrb	r3, [r7, #19]
 8005d32:	4a1c      	ldr	r2, [pc, #112]	@ (8005da4 <configuration_reset+0xb0>)
 8005d34:	7812      	ldrb	r2, [r2, #0]
 8005d36:	1a9b      	subs	r3, r3, r2
 8005d38:	015b      	lsls	r3, r3, #5
 8005d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8005dac <configuration_reset+0xb8>)
 8005d3c:	4413      	add	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]
  return driver;
 8005d40:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8005d42:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d109      	bne.n	8005d5e <configuration_reset+0x6a>
 8005d4a:	4b19      	ldr	r3, [pc, #100]	@ (8005db0 <configuration_reset+0xbc>)
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d01f      	beq.n	8005d9a <configuration_reset+0xa6>
 8005d5a:	be00      	bkpt	0x0000
 8005d5c:	e01d      	b.n	8005d9a <configuration_reset+0xa6>
    driver->reset(rhport);
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	79fa      	ldrb	r2, [r7, #7]
 8005d64:	4610      	mov	r0, r2
 8005d66:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8005d68:	7ffb      	ldrb	r3, [r7, #31]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	77fb      	strb	r3, [r7, #31]
 8005d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005da4 <configuration_reset+0xb0>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	7ffb      	ldrb	r3, [r7, #31]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	dac4      	bge.n	8005d04 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8005d7a:	222c      	movs	r2, #44	@ 0x2c
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	480d      	ldr	r0, [pc, #52]	@ (8005db4 <configuration_reset+0xc0>)
 8005d80:	f003 fe23 	bl	80099ca <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8005d84:	2210      	movs	r2, #16
 8005d86:	21ff      	movs	r1, #255	@ 0xff
 8005d88:	480b      	ldr	r0, [pc, #44]	@ (8005db8 <configuration_reset+0xc4>)
 8005d8a:	f003 fe1e 	bl	80099ca <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 8005d8e:	220c      	movs	r2, #12
 8005d90:	21ff      	movs	r1, #255	@ 0xff
 8005d92:	480a      	ldr	r0, [pc, #40]	@ (8005dbc <configuration_reset+0xc8>)
 8005d94:	f003 fe19 	bl	80099ca <memset>
 8005d98:	e000      	b.n	8005d9c <configuration_reset+0xa8>
    TU_ASSERT(driver,);
 8005d9a:	bf00      	nop
}
 8005d9c:	3720      	adds	r7, #32
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	20000a90 	.word	0x20000a90
 8005da8:	20000a8c 	.word	0x20000a8c
 8005dac:	08009bf8 	.word	0x08009bf8
 8005db0:	e000edf0 	.word	0xe000edf0
 8005db4:	20000a5c 	.word	0x20000a5c
 8005db8:	20000a60 	.word	0x20000a60
 8005dbc:	20000a70 	.word	0x20000a70

08005dc0 <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff ff91 	bl	8005cf4 <configuration_reset>
  usbd_control_reset();
 8005dd2:	f001 fc37 	bl	8007644 <usbd_control_reset>
}
 8005dd6:	bf00      	nop
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
	...

08005de0 <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8005de0:	b590      	push	{r4, r7, lr}
 8005de2:	b093      	sub	sp, #76	@ 0x4c
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	460b      	mov	r3, r1
 8005dea:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 8005dec:	f7ff feac 	bl	8005b48 <tud_inited>
 8005df0:	4603      	mov	r3, r0
 8005df2:	f083 0301 	eor.w	r3, r3, #1
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f040 8189 	bne.w	8006110 <tud_task_ext+0x330>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8005dfe:	4bb1      	ldr	r3, [pc, #708]	@ (80060c4 <tud_task_ext+0x2e4>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e04:	f107 030c 	add.w	r3, r7, #12
 8005e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2000      	movs	r0, #0
 8005e14:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 8005e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e18:	3304      	adds	r3, #4
 8005e1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff fcfa 	bl	8005816 <tu_fifo_read>
 8005e22:	4603      	mov	r3, r0
 8005e24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 8005e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2001      	movs	r0, #1
 8005e2e:	4798      	blx	r3

  return success;
 8005e30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e34:	f083 0301 	eor.w	r3, r3, #1
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f040 816a 	bne.w	8006114 <tud_task_ext+0x334>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 8005e40:	7b7b      	ldrb	r3, [r7, #13]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	2b07      	cmp	r3, #7
 8005e46:	f200 814b 	bhi.w	80060e0 <tud_task_ext+0x300>
 8005e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e50 <tud_task_ext+0x70>)
 8005e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e50:	08005e71 	.word	0x08005e71
 8005e54:	08005e81 	.word	0x08005e81
 8005e58:	08006095 	.word	0x08006095
 8005e5c:	08006047 	.word	0x08006047
 8005e60:	08006071 	.word	0x08006071
 8005e64:	08005e8f 	.word	0x08005e8f
 8005e68:	08005f3f 	.word	0x08005f3f
 8005e6c:	08006085 	.word	0x08006085
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8005e70:	7b3b      	ldrb	r3, [r7, #12]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff ffa4 	bl	8005dc0 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8005e78:	7c3a      	ldrb	r2, [r7, #16]
 8005e7a:	4b93      	ldr	r3, [pc, #588]	@ (80060c8 <tud_task_ext+0x2e8>)
 8005e7c:	709a      	strb	r2, [r3, #2]
        break;
 8005e7e:	e146      	b.n	800610e <tud_task_ext+0x32e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 8005e80:	7b3b      	ldrb	r3, [r7, #12]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7ff ff9c 	bl	8005dc0 <usbd_reset>
        tud_umount_cb();
 8005e88:	f7ff fddd 	bl	8005a46 <tud_umount_cb>
        break;
 8005e8c:	e13f      	b.n	800610e <tud_task_ext+0x32e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 8005e8e:	4b8f      	ldr	r3, [pc, #572]	@ (80060cc <tud_task_ext+0x2ec>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10a      	bne.n	8005eae <tud_task_ext+0xce>
 8005e98:	4b8d      	ldr	r3, [pc, #564]	@ (80060d0 <tud_task_ext+0x2f0>)
 8005e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 8137 	beq.w	8006118 <tud_task_ext+0x338>
 8005eaa:	be00      	bkpt	0x0000
 8005eac:	e134      	b.n	8006118 <tud_task_ext+0x338>
        _usbd_queued_setup--;
 8005eae:	4b87      	ldr	r3, [pc, #540]	@ (80060cc <tud_task_ext+0x2ec>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	4b84      	ldr	r3, [pc, #528]	@ (80060cc <tud_task_ext+0x2ec>)
 8005eba:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 8005ebc:	4b83      	ldr	r3, [pc, #524]	@ (80060cc <tud_task_ext+0x2ec>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f040 8116 	bne.w	80060f4 <tud_task_ext+0x314>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8005ec8:	4a7f      	ldr	r2, [pc, #508]	@ (80060c8 <tud_task_ext+0x2e8>)
 8005eca:	7813      	ldrb	r3, [r2, #0]
 8005ecc:	f043 0301 	orr.w	r3, r3, #1
 8005ed0:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8005ed2:	4a7d      	ldr	r2, [pc, #500]	@ (80060c8 <tud_task_ext+0x2e8>)
 8005ed4:	f892 3020 	ldrb.w	r3, [r2, #32]
 8005ed8:	f023 0301 	bic.w	r3, r3, #1
 8005edc:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8005ee0:	4a79      	ldr	r2, [pc, #484]	@ (80060c8 <tud_task_ext+0x2e8>)
 8005ee2:	f892 3020 	ldrb.w	r3, [r2, #32]
 8005ee6:	f023 0304 	bic.w	r3, r3, #4
 8005eea:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 8005eee:	4a76      	ldr	r2, [pc, #472]	@ (80060c8 <tud_task_ext+0x2e8>)
 8005ef0:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8005ef4:	f023 0301 	bic.w	r3, r3, #1
 8005ef8:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 8005efc:	4a72      	ldr	r2, [pc, #456]	@ (80060c8 <tud_task_ext+0x2e8>)
 8005efe:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8005f02:	f023 0304 	bic.w	r3, r3, #4
 8005f06:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 8005f0a:	7b3a      	ldrb	r2, [r7, #12]
 8005f0c:	f107 030c 	add.w	r3, r7, #12
 8005f10:	3304      	adds	r3, #4
 8005f12:	4619      	mov	r1, r3
 8005f14:	4610      	mov	r0, r2
 8005f16:	f000 f91f 	bl	8006158 <process_control_request>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	f083 0301 	eor.w	r3, r3, #1
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 80e8 	beq.w	80060f8 <tud_task_ext+0x318>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8005f28:	7b3b      	ldrb	r3, [r7, #12]
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f002 fb7b 	bl	8008628 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8005f32:	7b3b      	ldrb	r3, [r7, #12]
 8005f34:	2180      	movs	r1, #128	@ 0x80
 8005f36:	4618      	mov	r0, r3
 8005f38:	f002 fb76 	bl	8008628 <dcd_edpt_stall>
        }
        break;
 8005f3c:	e0dc      	b.n	80060f8 <tud_task_ext+0x318>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8005f3e:	7c3b      	ldrb	r3, [r7, #16]
 8005f40:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005f44:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005f48:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005f4c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005f50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f54:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 8005f56:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8005f5a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005f5e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005f62:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f66:	09db      	lsrs	r3, r3, #7
 8005f68:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 8005f6a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8005f6e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8005f72:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005f76:	4954      	ldr	r1, [pc, #336]	@ (80060c8 <tud_task_ext+0x2e8>)
 8005f78:	0052      	lsls	r2, r2, #1
 8005f7a:	440a      	add	r2, r1
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f103 0220 	add.w	r2, r3, #32
 8005f82:	7813      	ldrb	r3, [r2, #0]
 8005f84:	f023 0301 	bic.w	r3, r3, #1
 8005f88:	7013      	strb	r3, [r2, #0]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8005f8a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8005f8e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005f92:	494d      	ldr	r1, [pc, #308]	@ (80060c8 <tud_task_ext+0x2e8>)
 8005f94:	0052      	lsls	r2, r2, #1
 8005f96:	440a      	add	r2, r1
 8005f98:	4413      	add	r3, r2
 8005f9a:	f103 0220 	add.w	r2, r3, #32
 8005f9e:	7813      	ldrb	r3, [r2, #0]
 8005fa0:	f023 0304 	bic.w	r3, r3, #4
 8005fa4:	7013      	strb	r3, [r2, #0]

        if (0 == epnum) {
 8005fa6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d107      	bne.n	8005fbe <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 8005fae:	7b38      	ldrb	r0, [r7, #12]
 8005fb0:	7c7a      	ldrb	r2, [r7, #17]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8005fb8:	f001 fb7a 	bl	80076b0 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 8005fbc:	e0a7      	b.n	800610e <tud_task_ext+0x32e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8005fbe:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8005fc2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005fc6:	4940      	ldr	r1, [pc, #256]	@ (80060c8 <tud_task_ext+0x2e8>)
 8005fc8:	0052      	lsls	r2, r2, #1
 8005fca:	440a      	add	r2, r1
 8005fcc:	4413      	add	r3, r2
 8005fce:	3314      	adds	r3, #20
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8005fda:	4b3e      	ldr	r3, [pc, #248]	@ (80060d4 <tud_task_ext+0x2f4>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d207      	bcs.n	8005ff6 <tud_task_ext+0x216>
    driver = &_app_driver[drvid];
 8005fe6:	4b3c      	ldr	r3, [pc, #240]	@ (80060d8 <tud_task_ext+0x2f8>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005fee:	015b      	lsls	r3, r3, #5
 8005ff0:	4413      	add	r3, r2
 8005ff2:	623b      	str	r3, [r7, #32]
 8005ff4:	e00f      	b.n	8006016 <tud_task_ext+0x236>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8005ff6:	4b37      	ldr	r3, [pc, #220]	@ (80060d4 <tud_task_ext+0x2f4>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006000:	429a      	cmp	r2, r3
 8006002:	db08      	blt.n	8006016 <tud_task_ext+0x236>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006004:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006008:	4a32      	ldr	r2, [pc, #200]	@ (80060d4 <tud_task_ext+0x2f4>)
 800600a:	7812      	ldrb	r2, [r2, #0]
 800600c:	1a9b      	subs	r3, r3, r2
 800600e:	015b      	lsls	r3, r3, #5
 8006010:	4a32      	ldr	r2, [pc, #200]	@ (80060dc <tud_task_ext+0x2fc>)
 8006012:	4413      	add	r3, r2
 8006014:	623b      	str	r3, [r7, #32]
  return driver;
 8006016:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8006018:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 800601a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800601c:	2b00      	cmp	r3, #0
 800601e:	d109      	bne.n	8006034 <tud_task_ext+0x254>
 8006020:	4b2b      	ldr	r3, [pc, #172]	@ (80060d0 <tud_task_ext+0x2f0>)
 8006022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	d075      	beq.n	800611c <tud_task_ext+0x33c>
 8006030:	be00      	bkpt	0x0000
 8006032:	e073      	b.n	800611c <tud_task_ext+0x33c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8006034:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006036:	699c      	ldr	r4, [r3, #24]
 8006038:	7b38      	ldrb	r0, [r7, #12]
 800603a:	7c7a      	ldrb	r2, [r7, #17]
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8006042:	47a0      	blx	r4
        break;
 8006044:	e063      	b.n	800610e <tud_task_ext+0x32e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 8006046:	4b20      	ldr	r3, [pc, #128]	@ (80060c8 <tud_task_ext+0x2e8>)
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	d053      	beq.n	80060fc <tud_task_ext+0x31c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8006054:	4b1c      	ldr	r3, [pc, #112]	@ (80060c8 <tud_task_ext+0x2e8>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	bf14      	ite	ne
 8006062:	2301      	movne	r3, #1
 8006064:	2300      	moveq	r3, #0
 8006066:	b2db      	uxtb	r3, r3
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff fcf3 	bl	8005a54 <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 800606e:	e045      	b.n	80060fc <tud_task_ext+0x31c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 8006070:	4b15      	ldr	r3, [pc, #84]	@ (80060c8 <tud_task_ext+0x2e8>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d040      	beq.n	8006100 <tud_task_ext+0x320>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 800607e:	f7ff fcf4 	bl	8005a6a <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 8006082:	e03d      	b.n	8006100 <tud_task_ext+0x320>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) {
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d03c      	beq.n	8006104 <tud_task_ext+0x324>
          event.func_call.func(event.func_call.param);
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	4610      	mov	r0, r2
 8006090:	4798      	blx	r3
        }
        break;
 8006092:	e037      	b.n	8006104 <tud_task_ext+0x324>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8006094:	4b0c      	ldr	r3, [pc, #48]	@ (80060c8 <tud_task_ext+0x2e8>)
 8006096:	78db      	ldrb	r3, [r3, #3]
 8006098:	b2db      	uxtb	r3, r3
 800609a:	61fb      	str	r3, [r7, #28]
 800609c:	2300      	movs	r3, #0
 800609e:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80060a0:	7efb      	ldrb	r3, [r7, #27]
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	fa22 f303 	lsr.w	r3, r2, r3
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	bf14      	ite	ne
 80060b0:	2301      	movne	r3, #1
 80060b2:	2300      	moveq	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d026      	beq.n	8006108 <tud_task_ext+0x328>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff fc95 	bl	80059ec <tud_sof_cb>
        }
      break;
 80060c2:	e021      	b.n	8006108 <tud_task_ext+0x328>
 80060c4:	20000b54 	.word	0x20000b54
 80060c8:	20000a5c 	.word	0x20000a5c
 80060cc:	20000a88 	.word	0x20000a88
 80060d0:	e000edf0 	.word	0xe000edf0
 80060d4:	20000a90 	.word	0x20000a90
 80060d8:	20000a8c 	.word	0x20000a8c
 80060dc:	08009bf8 	.word	0x08009bf8

      default:
        TU_BREAKPOINT();
 80060e0:	4b10      	ldr	r3, [pc, #64]	@ (8006124 <tud_task_ext+0x344>)
 80060e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80060e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00d      	beq.n	800610c <tud_task_ext+0x32c>
 80060f0:	be00      	bkpt	0x0000
        break;
 80060f2:	e00b      	b.n	800610c <tud_task_ext+0x32c>
          break;
 80060f4:	bf00      	nop
 80060f6:	e682      	b.n	8005dfe <tud_task_ext+0x1e>
        break;
 80060f8:	bf00      	nop
 80060fa:	e680      	b.n	8005dfe <tud_task_ext+0x1e>
        break;
 80060fc:	bf00      	nop
 80060fe:	e67e      	b.n	8005dfe <tud_task_ext+0x1e>
        break;
 8006100:	bf00      	nop
 8006102:	e67c      	b.n	8005dfe <tud_task_ext+0x1e>
        break;
 8006104:	bf00      	nop
 8006106:	e67a      	b.n	8005dfe <tud_task_ext+0x1e>
      break;
 8006108:	bf00      	nop
 800610a:	e678      	b.n	8005dfe <tud_task_ext+0x1e>
        break;
 800610c:	bf00      	nop
  while (1) {
 800610e:	e676      	b.n	8005dfe <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 8006110:	bf00      	nop
 8006112:	e004      	b.n	800611e <tud_task_ext+0x33e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8006114:	bf00      	nop
 8006116:	e002      	b.n	800611e <tud_task_ext+0x33e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8006118:	bf00      	nop
 800611a:	e000      	b.n	800611e <tud_task_ext+0x33e>
          TU_ASSERT(driver,);
 800611c:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) { return; }
#endif
  }
}
 800611e:	374c      	adds	r7, #76	@ 0x4c
 8006120:	46bd      	mov	sp, r7
 8006122:	bd90      	pop	{r4, r7, pc}
 8006124:	e000edf0 	.word	0xe000edf0

08006128 <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	4618      	mov	r0, r3
 800613c:	f001 fa8e 	bl	800765c <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	7bf8      	ldrb	r0, [r7, #15]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	2101      	movs	r1, #1
 800614a:	4798      	blx	r3
 800614c:	4603      	mov	r3, r0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
	...

08006158 <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 8006158:	b580      	push	{r7, lr}
 800615a:	b09a      	sub	sp, #104	@ 0x68
 800615c:	af00      	add	r7, sp, #0
 800615e:	4603      	mov	r3, r0
 8006160:	6039      	str	r1, [r7, #0]
 8006162:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8006164:	2000      	movs	r0, #0
 8006166:	f001 fa79 	bl	800765c <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b60      	cmp	r3, #96	@ 0x60
 8006176:	d10a      	bne.n	800618e <process_control_request+0x36>
 8006178:	4ba5      	ldr	r3, [pc, #660]	@ (8006410 <process_control_request+0x2b8>)
 800617a:	633b      	str	r3, [r7, #48]	@ 0x30
 800617c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d000      	beq.n	800618a <process_control_request+0x32>
 8006188:	be00      	bkpt	0x0000
 800618a:	2300      	movs	r3, #0
 800618c:	e2bb      	b.n	8006706 <process_control_request+0x5ae>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b40      	cmp	r3, #64	@ 0x40
 800619a:	d10a      	bne.n	80061b2 <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 800619c:	489d      	ldr	r0, [pc, #628]	@ (8006414 <process_control_request+0x2bc>)
 800619e:	f001 fa5d 	bl	800765c <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 80061a2:	79fb      	ldrb	r3, [r7, #7]
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	2101      	movs	r1, #1
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff fc65 	bl	8005a78 <tud_vendor_control_xfer_cb>
 80061ae:	4603      	mov	r3, r0
 80061b0:	e2a9      	b.n	8006706 <process_control_request+0x5ae>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	f000 81ca 	beq.w	8006556 <process_control_request+0x3fe>
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	f300 8292 	bgt.w	80066ec <process_control_request+0x594>
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <process_control_request+0x7c>
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	f000 8151 	beq.w	8006474 <process_control_request+0x31c>
 80061d2:	e28b      	b.n	80066ec <process_control_request+0x594>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b20      	cmp	r3, #32
 80061e0:	d143      	bne.n	800626a <process_control_request+0x112>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	889b      	ldrh	r3, [r3, #4]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80061ea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80061f2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80061f6:	2b0f      	cmp	r3, #15
 80061f8:	d901      	bls.n	80061fe <process_control_request+0xa6>
 80061fa:	2300      	movs	r3, #0
 80061fc:	e283      	b.n	8006706 <process_control_request+0x5ae>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80061fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006202:	4a85      	ldr	r2, [pc, #532]	@ (8006418 <process_control_request+0x2c0>)
 8006204:	4413      	add	r3, r2
 8006206:	791b      	ldrb	r3, [r3, #4]
 8006208:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 800620c:	2300      	movs	r3, #0
 800620e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 8006210:	4b82      	ldr	r3, [pc, #520]	@ (800641c <process_control_request+0x2c4>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8006218:	429a      	cmp	r2, r3
 800621a:	d207      	bcs.n	800622c <process_control_request+0xd4>
    driver = &_app_driver[drvid];
 800621c:	4b80      	ldr	r3, [pc, #512]	@ (8006420 <process_control_request+0x2c8>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006224:	015b      	lsls	r3, r3, #5
 8006226:	4413      	add	r3, r2
 8006228:	62bb      	str	r3, [r7, #40]	@ 0x28
 800622a:	e00f      	b.n	800624c <process_control_request+0xf4>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800622c:	4b7b      	ldr	r3, [pc, #492]	@ (800641c <process_control_request+0x2c4>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006236:	429a      	cmp	r2, r3
 8006238:	db08      	blt.n	800624c <process_control_request+0xf4>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800623a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800623e:	4a77      	ldr	r2, [pc, #476]	@ (800641c <process_control_request+0x2c4>)
 8006240:	7812      	ldrb	r2, [r2, #0]
 8006242:	1a9b      	subs	r3, r3, r2
 8006244:	015b      	lsls	r3, r3, #5
 8006246:	4a77      	ldr	r2, [pc, #476]	@ (8006424 <process_control_request+0x2cc>)
 8006248:	4413      	add	r3, r2
 800624a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 800624c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800624e:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 8006250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <process_control_request+0x102>
 8006256:	2300      	movs	r3, #0
 8006258:	e255      	b.n	8006706 <process_control_request+0x5ae>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 800625a:	79fb      	ldrb	r3, [r7, #7]
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff ff61 	bl	8006128 <invoke_class_control>
 8006266:	4603      	mov	r3, r0
 8006268:	e24d      	b.n	8006706 <process_control_request+0x5ae>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00a      	beq.n	800628e <process_control_request+0x136>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 8006278:	4b65      	ldr	r3, [pc, #404]	@ (8006410 <process_control_request+0x2b8>)
 800627a:	643b      	str	r3, [r7, #64]	@ 0x40
 800627c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	d000      	beq.n	800628a <process_control_request+0x132>
 8006288:	be00      	bkpt	0x0000
        return false;
 800628a:	2300      	movs	r3, #0
 800628c:	e23b      	b.n	8006706 <process_control_request+0x5ae>
      }

      switch ( p_request->bRequest ) {
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	785b      	ldrb	r3, [r3, #1]
 8006292:	2b09      	cmp	r3, #9
 8006294:	f200 80e1 	bhi.w	800645a <process_control_request+0x302>
 8006298:	a201      	add	r2, pc, #4	@ (adr r2, 80062a0 <process_control_request+0x148>)
 800629a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629e:	bf00      	nop
 80062a0:	08006429 	.word	0x08006429
 80062a4:	080063ed 	.word	0x080063ed
 80062a8:	0800645b 	.word	0x0800645b
 80062ac:	080063c7 	.word	0x080063c7
 80062b0:	0800645b 	.word	0x0800645b
 80062b4:	080062c9 	.word	0x080062c9
 80062b8:	080063ad 	.word	0x080063ad
 80062bc:	0800645b 	.word	0x0800645b
 80062c0:	080062ed 	.word	0x080062ed
 80062c4:	08006305 	.word	0x08006305
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 80062c8:	6838      	ldr	r0, [r7, #0]
 80062ca:	f001 f9d7 	bl	800767c <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	885b      	ldrh	r3, [r3, #2]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	79fb      	ldrb	r3, [r7, #7]
 80062d8:	4611      	mov	r1, r2
 80062da:	4618      	mov	r0, r3
 80062dc:	f001 ff94 	bl	8008208 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 80062e0:	4a4d      	ldr	r2, [pc, #308]	@ (8006418 <process_control_request+0x2c0>)
 80062e2:	7813      	ldrb	r3, [r2, #0]
 80062e4:	f043 0302 	orr.w	r3, r3, #2
 80062e8:	7013      	strb	r3, [r2, #0]
        break;
 80062ea:	e0c2      	b.n	8006472 <process_control_request+0x31a>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 80062ec:	4b4a      	ldr	r3, [pc, #296]	@ (8006418 <process_control_request+0x2c0>)
 80062ee:	785b      	ldrb	r3, [r3, #1]
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 80062f4:	f107 0213 	add.w	r2, r7, #19
 80062f8:	79f8      	ldrb	r0, [r7, #7]
 80062fa:	2301      	movs	r3, #1
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	f001 f931 	bl	8007564 <tud_control_xfer>
        }
        break;
 8006302:	e0b6      	b.n	8006472 <process_control_request+0x31a>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	885b      	ldrh	r3, [r3, #2]
 8006308:	b29b      	uxth	r3, r3
 800630a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 800630e:	4b42      	ldr	r3, [pc, #264]	@ (8006418 <process_control_request+0x2c0>)
 8006310:	785b      	ldrb	r3, [r3, #1]
 8006312:	b2db      	uxtb	r3, r3
 8006314:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8006318:	429a      	cmp	r2, r3
 800631a:	d041      	beq.n	80063a0 <process_control_request+0x248>
            if ( _usbd_dev.cfg_num ) {
 800631c:	4b3e      	ldr	r3, [pc, #248]	@ (8006418 <process_control_request+0x2c0>)
 800631e:	785b      	ldrb	r3, [r3, #1]
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d014      	beq.n	8006350 <process_control_request+0x1f8>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 8006326:	79fb      	ldrb	r3, [r7, #7]
 8006328:	2100      	movs	r1, #0
 800632a:	4618      	mov	r0, r3
 800632c:	f002 f832 	bl	8008394 <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8006330:	79fb      	ldrb	r3, [r7, #7]
 8006332:	4618      	mov	r0, r3
 8006334:	f002 f896 	bl	8008464 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8006338:	4b37      	ldr	r3, [pc, #220]	@ (8006418 <process_control_request+0x2c0>)
 800633a:	789b      	ldrb	r3, [r3, #2]
 800633c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff fcd6 	bl	8005cf4 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8006348:	4a33      	ldr	r2, [pc, #204]	@ (8006418 <process_control_request+0x2c0>)
 800634a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800634e:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 8006350:	4a31      	ldr	r2, [pc, #196]	@ (8006418 <process_control_request+0x2c0>)
 8006352:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006356:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 8006358:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01d      	beq.n	800639c <process_control_request+0x244>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 8006360:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8006364:	79fb      	ldrb	r3, [r7, #7]
 8006366:	4611      	mov	r1, r2
 8006368:	4618      	mov	r0, r3
 800636a:	f000 f9d5 	bl	8006718 <process_set_config>
 800636e:	4603      	mov	r3, r0
 8006370:	f083 0301 	eor.w	r3, r3, #1
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00d      	beq.n	8006396 <process_control_request+0x23e>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 800637a:	4b25      	ldr	r3, [pc, #148]	@ (8006410 <process_control_request+0x2b8>)
 800637c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800637e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d000      	beq.n	800638c <process_control_request+0x234>
 800638a:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 800638c:	4b22      	ldr	r3, [pc, #136]	@ (8006418 <process_control_request+0x2c0>)
 800638e:	2200      	movs	r2, #0
 8006390:	705a      	strb	r2, [r3, #1]
                return false;
 8006392:	2300      	movs	r3, #0
 8006394:	e1b7      	b.n	8006706 <process_control_request+0x5ae>
              }
              tud_mount_cb();
 8006396:	f7ff fb4f 	bl	8005a38 <tud_mount_cb>
 800639a:	e001      	b.n	80063a0 <process_control_request+0x248>
            } else {
              tud_umount_cb();
 800639c:	f7ff fb53 	bl	8005a46 <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 80063a0:	79fb      	ldrb	r3, [r7, #7]
 80063a2:	6839      	ldr	r1, [r7, #0]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f001 f86b 	bl	8007480 <tud_control_status>
        }
        break;
 80063aa:	e062      	b.n	8006472 <process_control_request+0x31a>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 80063ac:	79fb      	ldrb	r3, [r7, #7]
 80063ae:	6839      	ldr	r1, [r7, #0]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 fae5 	bl	8006980 <process_get_descriptor>
 80063b6:	4603      	mov	r3, r0
 80063b8:	f083 0301 	eor.w	r3, r3, #1
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d056      	beq.n	8006470 <process_control_request+0x318>
 80063c2:	2300      	movs	r3, #0
 80063c4:	e19f      	b.n	8006706 <process_control_request+0x5ae>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	885b      	ldrh	r3, [r3, #2]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d10b      	bne.n	80063e8 <process_control_request+0x290>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 80063d0:	4a11      	ldr	r2, [pc, #68]	@ (8006418 <process_control_request+0x2c0>)
 80063d2:	7813      	ldrb	r3, [r2, #0]
 80063d4:	f043 0308 	orr.w	r3, r3, #8
 80063d8:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 80063da:	79fb      	ldrb	r3, [r7, #7]
 80063dc:	6839      	ldr	r1, [r7, #0]
 80063de:	4618      	mov	r0, r3
 80063e0:	f001 f84e 	bl	8007480 <tud_control_status>
            break;
 80063e4:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 80063e6:	e044      	b.n	8006472 <process_control_request+0x31a>
            default: return false;
 80063e8:	2300      	movs	r3, #0
 80063ea:	e18c      	b.n	8006706 <process_control_request+0x5ae>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	885b      	ldrh	r3, [r3, #2]
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d001      	beq.n	80063fa <process_control_request+0x2a2>
 80063f6:	2300      	movs	r3, #0
 80063f8:	e185      	b.n	8006706 <process_control_request+0x5ae>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 80063fa:	4a07      	ldr	r2, [pc, #28]	@ (8006418 <process_control_request+0x2c0>)
 80063fc:	7813      	ldrb	r3, [r2, #0]
 80063fe:	f023 0308 	bic.w	r3, r3, #8
 8006402:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8006404:	79fb      	ldrb	r3, [r7, #7]
 8006406:	6839      	ldr	r1, [r7, #0]
 8006408:	4618      	mov	r0, r3
 800640a:	f001 f839 	bl	8007480 <tud_control_status>
        break;
 800640e:	e030      	b.n	8006472 <process_control_request+0x31a>
 8006410:	e000edf0 	.word	0xe000edf0
 8006414:	08005a79 	.word	0x08005a79
 8006418:	20000a5c 	.word	0x20000a5c
 800641c:	20000a90 	.word	0x20000a90
 8006420:	20000a8c 	.word	0x20000a8c
 8006424:	08009bf8 	.word	0x08009bf8

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8006428:	4b94      	ldr	r3, [pc, #592]	@ (800667c <process_control_request+0x524>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	095b      	lsrs	r3, r3, #5
 800642e:	b2db      	uxtb	r3, r3
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	b29a      	uxth	r2, r3
 8006436:	4b91      	ldr	r3, [pc, #580]	@ (800667c <process_control_request+0x524>)
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	089b      	lsrs	r3, r3, #2
 800643c:	b2db      	uxtb	r3, r3
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	b29b      	uxth	r3, r3
 8006444:	4313      	orrs	r3, r2
 8006446:	b29b      	uxth	r3, r3
 8006448:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 800644a:	f107 0210 	add.w	r2, r7, #16
 800644e:	79f8      	ldrb	r0, [r7, #7]
 8006450:	2302      	movs	r3, #2
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	f001 f886 	bl	8007564 <tud_control_xfer>
          break;
 8006458:	e00b      	b.n	8006472 <process_control_request+0x31a>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 800645a:	4b89      	ldr	r3, [pc, #548]	@ (8006680 <process_control_request+0x528>)
 800645c:	647b      	str	r3, [r7, #68]	@ 0x44
 800645e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d000      	beq.n	800646c <process_control_request+0x314>
 800646a:	be00      	bkpt	0x0000
 800646c:	2300      	movs	r3, #0
 800646e:	e14a      	b.n	8006706 <process_control_request+0x5ae>
        break;
 8006470:	bf00      	nop
      }
    break;
 8006472:	e147      	b.n	8006704 <process_control_request+0x5ac>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	889b      	ldrh	r3, [r3, #4]
 8006478:	b29b      	uxth	r3, r3
 800647a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800647c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800647e:	b2db      	uxtb	r3, r3
 8006480:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8006484:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006488:	2b0f      	cmp	r3, #15
 800648a:	d901      	bls.n	8006490 <process_control_request+0x338>
 800648c:	2300      	movs	r3, #0
 800648e:	e13a      	b.n	8006706 <process_control_request+0x5ae>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8006490:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006494:	4a79      	ldr	r2, [pc, #484]	@ (800667c <process_control_request+0x524>)
 8006496:	4413      	add	r3, r2
 8006498:	791b      	ldrb	r3, [r3, #4]
 800649a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 80064a2:	4b78      	ldr	r3, [pc, #480]	@ (8006684 <process_control_request+0x52c>)
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d207      	bcs.n	80064be <process_control_request+0x366>
    driver = &_app_driver[drvid];
 80064ae:	4b76      	ldr	r3, [pc, #472]	@ (8006688 <process_control_request+0x530>)
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80064b6:	015b      	lsls	r3, r3, #5
 80064b8:	4413      	add	r3, r2
 80064ba:	623b      	str	r3, [r7, #32]
 80064bc:	e00f      	b.n	80064de <process_control_request+0x386>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80064be:	4b71      	ldr	r3, [pc, #452]	@ (8006684 <process_control_request+0x52c>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80064c8:	429a      	cmp	r2, r3
 80064ca:	db08      	blt.n	80064de <process_control_request+0x386>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80064cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80064d0:	4a6c      	ldr	r2, [pc, #432]	@ (8006684 <process_control_request+0x52c>)
 80064d2:	7812      	ldrb	r2, [r2, #0]
 80064d4:	1a9b      	subs	r3, r3, r2
 80064d6:	015b      	lsls	r3, r3, #5
 80064d8:	4a6c      	ldr	r2, [pc, #432]	@ (800668c <process_control_request+0x534>)
 80064da:	4413      	add	r3, r2
 80064dc:	623b      	str	r3, [r7, #32]
  return driver;
 80064de:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80064e0:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 80064e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <process_control_request+0x394>
 80064e8:	2300      	movs	r3, #0
 80064ea:	e10c      	b.n	8006706 <process_control_request+0x5ae>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 80064ec:	79fb      	ldrb	r3, [r7, #7]
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7ff fe18 	bl	8006128 <invoke_class_control>
 80064f8:	4603      	mov	r3, r0
 80064fa:	f083 0301 	eor.w	r3, r3, #1
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 80fe 	beq.w	8006702 <process_control_request+0x5aa>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <process_control_request+0x3c0>
 8006514:	2300      	movs	r3, #0
 8006516:	e0f6      	b.n	8006706 <process_control_request+0x5ae>

        switch(p_request->bRequest) {
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	785b      	ldrb	r3, [r3, #1]
 800651c:	3b0a      	subs	r3, #10
 800651e:	2b01      	cmp	r3, #1
 8006520:	d816      	bhi.n	8006550 <process_control_request+0x3f8>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8006522:	2000      	movs	r0, #0
 8006524:	f001 f89a 	bl	800765c <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	785b      	ldrb	r3, [r3, #1]
 800652c:	2b0a      	cmp	r3, #10
 800652e:	d109      	bne.n	8006544 <process_control_request+0x3ec>
              uint8_t alternate = 0;
 8006530:	2300      	movs	r3, #0
 8006532:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8006534:	f107 020f 	add.w	r2, r7, #15
 8006538:	79f8      	ldrb	r0, [r7, #7]
 800653a:	2301      	movs	r3, #1
 800653c:	6839      	ldr	r1, [r7, #0]
 800653e:	f001 f811 	bl	8007564 <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 8006542:	e007      	b.n	8006554 <process_control_request+0x3fc>
              tud_control_status(rhport, p_request);
 8006544:	79fb      	ldrb	r3, [r7, #7]
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	4618      	mov	r0, r3
 800654a:	f000 ff99 	bl	8007480 <tud_control_status>
          break;
 800654e:	e001      	b.n	8006554 <process_control_request+0x3fc>

          default: return false;
 8006550:	2300      	movs	r3, #0
 8006552:	e0d8      	b.n	8006706 <process_control_request+0x5ae>
        }
      }
      break;
 8006554:	e0d5      	b.n	8006702 <process_control_request+0x5aa>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	889b      	ldrh	r3, [r3, #4]
 800655a:	b29b      	uxth	r3, r3
 800655c:	83bb      	strh	r3, [r7, #28]
 800655e:	8bbb      	ldrh	r3, [r7, #28]
 8006560:	b2db      	uxtb	r3, r3
 8006562:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006566:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800656a:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800656c:	7fbb      	ldrb	r3, [r7, #30]
 800656e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006572:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8006574:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8006578:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800657c:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800657e:	7ffb      	ldrb	r3, [r7, #31]
 8006580:	09db      	lsrs	r3, r3, #7
 8006582:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8006584:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8006588:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800658c:	2b05      	cmp	r3, #5
 800658e:	d90a      	bls.n	80065a6 <process_control_request+0x44e>
 8006590:	4b3b      	ldr	r3, [pc, #236]	@ (8006680 <process_control_request+0x528>)
 8006592:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006594:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b00      	cmp	r3, #0
 800659e:	d000      	beq.n	80065a2 <process_control_request+0x44a>
 80065a0:	be00      	bkpt	0x0000
 80065a2:	2300      	movs	r3, #0
 80065a4:	e0af      	b.n	8006706 <process_control_request+0x5ae>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80065a6:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 80065aa:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80065ae:	4933      	ldr	r1, [pc, #204]	@ (800667c <process_control_request+0x524>)
 80065b0:	0052      	lsls	r2, r2, #1
 80065b2:	440a      	add	r2, r1
 80065b4:	4413      	add	r3, r2
 80065b6:	3314      	adds	r3, #20
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 80065c0:	4b30      	ldr	r3, [pc, #192]	@ (8006684 <process_control_request+0x52c>)
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	7efa      	ldrb	r2, [r7, #27]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d206      	bcs.n	80065d8 <process_control_request+0x480>
    driver = &_app_driver[drvid];
 80065ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006688 <process_control_request+0x530>)
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	7efb      	ldrb	r3, [r7, #27]
 80065d0:	015b      	lsls	r3, r3, #5
 80065d2:	4413      	add	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]
 80065d6:	e00d      	b.n	80065f4 <process_control_request+0x49c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80065d8:	4b2a      	ldr	r3, [pc, #168]	@ (8006684 <process_control_request+0x52c>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	1c5a      	adds	r2, r3, #1
 80065de:	7efb      	ldrb	r3, [r7, #27]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	db07      	blt.n	80065f4 <process_control_request+0x49c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80065e4:	7efb      	ldrb	r3, [r7, #27]
 80065e6:	4a27      	ldr	r2, [pc, #156]	@ (8006684 <process_control_request+0x52c>)
 80065e8:	7812      	ldrb	r2, [r2, #0]
 80065ea:	1a9b      	subs	r3, r3, r2
 80065ec:	015b      	lsls	r3, r3, #5
 80065ee:	4a27      	ldr	r2, [pc, #156]	@ (800668c <process_control_request+0x534>)
 80065f0:	4413      	add	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]
  return driver;
 80065f4:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80065f6:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00c      	beq.n	8006620 <process_control_request+0x4c8>
        // Forward class request to its driver
        TU_VERIFY(driver);
 8006606:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <process_control_request+0x4b8>
 800660c:	2300      	movs	r3, #0
 800660e:	e07a      	b.n	8006706 <process_control_request+0x5ae>
        return invoke_class_control(rhport, driver, p_request);
 8006610:	79fb      	ldrb	r3, [r7, #7]
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006616:	4618      	mov	r0, r3
 8006618:	f7ff fd86 	bl	8006128 <invoke_class_control>
 800661c:	4603      	mov	r3, r0
 800661e:	e072      	b.n	8006706 <process_control_request+0x5ae>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	785b      	ldrb	r3, [r3, #1]
 8006624:	2b03      	cmp	r3, #3
 8006626:	d017      	beq.n	8006658 <process_control_request+0x500>
 8006628:	2b03      	cmp	r3, #3
 800662a:	dc52      	bgt.n	80066d2 <process_control_request+0x57a>
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <process_control_request+0x4de>
 8006630:	2b01      	cmp	r3, #1
 8006632:	d011      	beq.n	8006658 <process_control_request+0x500>
 8006634:	e04d      	b.n	80066d2 <process_control_request+0x57a>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8006636:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800663a:	79fb      	ldrb	r3, [r7, #7]
 800663c:	4611      	mov	r1, r2
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fec8 	bl	80073d4 <usbd_edpt_stalled>
 8006644:	4603      	mov	r3, r0
 8006646:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 8006648:	f107 020c 	add.w	r2, r7, #12
 800664c:	79f8      	ldrb	r0, [r7, #7]
 800664e:	2302      	movs	r3, #2
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	f000 ff87 	bl	8007564 <tud_control_xfer>
          }
          break;
 8006656:	e048      	b.n	80066ea <process_control_request+0x592>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	885b      	ldrh	r3, [r3, #2]
 800665c:	b29b      	uxth	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d11d      	bne.n	800669e <process_control_request+0x546>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	785b      	ldrb	r3, [r3, #1]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d112      	bne.n	8006690 <process_control_request+0x538>
                usbd_edpt_clear_stall(rhport, ep_addr);
 800666a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800666e:	79fb      	ldrb	r3, [r7, #7]
 8006670:	4611      	mov	r1, r2
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fe70 	bl	8007358 <usbd_edpt_clear_stall>
 8006678:	e011      	b.n	800669e <process_control_request+0x546>
 800667a:	bf00      	nop
 800667c:	20000a5c 	.word	0x20000a5c
 8006680:	e000edf0 	.word	0xe000edf0
 8006684:	20000a90 	.word	0x20000a90
 8006688:	20000a8c 	.word	0x20000a8c
 800668c:	08009bf8 	.word	0x08009bf8
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 8006690:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8006694:	79fb      	ldrb	r3, [r7, #7]
 8006696:	4611      	mov	r1, r2
 8006698:	4618      	mov	r0, r3
 800669a:	f000 fe1f 	bl	80072dc <usbd_edpt_stall>
              }
            }

            if (driver) {
 800669e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d021      	beq.n	80066e8 <process_control_request+0x590>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff fd3c 	bl	8006128 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 80066b0:	2000      	movs	r0, #0
 80066b2:	f000 ffd3 	bl	800765c <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 80066b6:	4b16      	ldr	r3, [pc, #88]	@ (8006710 <process_control_request+0x5b8>)
 80066b8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80066bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d110      	bne.n	80066e8 <process_control_request+0x590>
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 fed8 	bl	8007480 <tud_control_status>
            }
          }
          break;
 80066d0:	e00a      	b.n	80066e8 <process_control_request+0x590>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 80066d2:	4b10      	ldr	r3, [pc, #64]	@ (8006714 <process_control_request+0x5bc>)
 80066d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d000      	beq.n	80066e4 <process_control_request+0x58c>
 80066e2:	be00      	bkpt	0x0000
            return false;
 80066e4:	2300      	movs	r3, #0
 80066e6:	e00e      	b.n	8006706 <process_control_request+0x5ae>
          break;
 80066e8:	bf00      	nop
        }
      }
    }
    break;
 80066ea:	e00b      	b.n	8006704 <process_control_request+0x5ac>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 80066ec:	4b09      	ldr	r3, [pc, #36]	@ (8006714 <process_control_request+0x5bc>)
 80066ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80066f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d000      	beq.n	80066fe <process_control_request+0x5a6>
 80066fc:	be00      	bkpt	0x0000
      return false;
 80066fe:	2300      	movs	r3, #0
 8006700:	e001      	b.n	8006706 <process_control_request+0x5ae>
      break;
 8006702:	bf00      	nop
  }

  return true;
 8006704:	2301      	movs	r3, #1
}
 8006706:	4618      	mov	r0, r3
 8006708:	3768      	adds	r7, #104	@ 0x68
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20000a5c 	.word	0x20000a5c
 8006714:	e000edf0 	.word	0xe000edf0

08006718 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b096      	sub	sp, #88	@ 0x58
 800671c:	af00      	add	r7, sp, #0
 800671e:	4603      	mov	r3, r0
 8006720:	460a      	mov	r2, r1
 8006722:	71fb      	strb	r3, [r7, #7]
 8006724:	4613      	mov	r3, r2
 8006726:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8006728:	79bb      	ldrb	r3, [r7, #6]
 800672a:	3b01      	subs	r3, #1
 800672c:	b2db      	uxtb	r3, r3
 800672e:	4618      	mov	r0, r3
 8006730:	f7fb f856 	bl	80017e0 <tud_descriptor_configuration_cb>
 8006734:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8006736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <process_set_config+0x2c>
 800673c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800673e:	785b      	ldrb	r3, [r3, #1]
 8006740:	2b02      	cmp	r3, #2
 8006742:	d00a      	beq.n	800675a <process_set_config+0x42>
 8006744:	4b87      	ldr	r3, [pc, #540]	@ (8006964 <process_set_config+0x24c>)
 8006746:	623b      	str	r3, [r7, #32]
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d000      	beq.n	8006756 <process_set_config+0x3e>
 8006754:	be00      	bkpt	0x0000
 8006756:	2300      	movs	r3, #0
 8006758:	e100      	b.n	800695c <process_set_config+0x244>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 800675a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800675c:	79db      	ldrb	r3, [r3, #7]
 800675e:	115b      	asrs	r3, r3, #5
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	b2d9      	uxtb	r1, r3
 8006766:	4a80      	ldr	r2, [pc, #512]	@ (8006968 <process_set_config+0x250>)
 8006768:	7813      	ldrb	r3, [r2, #0]
 800676a:	f361 1304 	bfi	r3, r1, #4, #1
 800676e:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8006770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006772:	79db      	ldrb	r3, [r3, #7]
 8006774:	119b      	asrs	r3, r3, #6
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	b2d9      	uxtb	r1, r3
 800677c:	4a7a      	ldr	r2, [pc, #488]	@ (8006968 <process_set_config+0x250>)
 800677e:	7813      	ldrb	r3, [r2, #0]
 8006780:	f361 1345 	bfi	r3, r1, #5, #1
 8006784:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8006786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006788:	3309      	adds	r3, #9
 800678a:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 800678c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800678e:	885b      	ldrh	r3, [r3, #2]
 8006790:	b29b      	uxth	r3, r3
 8006792:	461a      	mov	r2, r3
 8006794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006796:	4413      	add	r3, r2
 8006798:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 800679a:	e0d9      	b.n	8006950 <process_set_config+0x238>
  {
    uint8_t assoc_itf_count = 1;
 800679c:	2301      	movs	r3, #1
 800679e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80067a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067a4:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	3301      	adds	r3, #1
 80067aa:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 80067ac:	2b0b      	cmp	r3, #11
 80067ae:	d10f      	bne.n	80067d0 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 80067b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067b2:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 80067b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067b6:	78db      	ldrb	r3, [r3, #3]
 80067b8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80067bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067be:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	461a      	mov	r2, r3
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 80067ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80067d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067d2:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	3301      	adds	r3, #1
 80067d8:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d00a      	beq.n	80067f4 <process_set_config+0xdc>
 80067de:	4b61      	ldr	r3, [pc, #388]	@ (8006964 <process_set_config+0x24c>)
 80067e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80067e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d000      	beq.n	80067f0 <process_set_config+0xd8>
 80067ee:	be00      	bkpt	0x0000
 80067f0:	2300      	movs	r3, #0
 80067f2:	e0b3      	b.n	800695c <process_set_config+0x244>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 80067f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067f6:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 80067f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8006800:	2300      	movs	r3, #0
 8006802:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8006806:	e089      	b.n	800691c <process_set_config+0x204>
 8006808:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800680c:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 800680e:	2300      	movs	r3, #0
 8006810:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8006812:	4b56      	ldr	r3, [pc, #344]	@ (800696c <process_set_config+0x254>)
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	7bfa      	ldrb	r2, [r7, #15]
 8006818:	429a      	cmp	r2, r3
 800681a:	d206      	bcs.n	800682a <process_set_config+0x112>
    driver = &_app_driver[drvid];
 800681c:	4b54      	ldr	r3, [pc, #336]	@ (8006970 <process_set_config+0x258>)
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	015b      	lsls	r3, r3, #5
 8006824:	4413      	add	r3, r2
 8006826:	60bb      	str	r3, [r7, #8]
 8006828:	e00d      	b.n	8006846 <process_set_config+0x12e>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800682a:	4b50      	ldr	r3, [pc, #320]	@ (800696c <process_set_config+0x254>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	7bfb      	ldrb	r3, [r7, #15]
 8006832:	429a      	cmp	r2, r3
 8006834:	db07      	blt.n	8006846 <process_set_config+0x12e>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006836:	7bfb      	ldrb	r3, [r7, #15]
 8006838:	4a4c      	ldr	r2, [pc, #304]	@ (800696c <process_set_config+0x254>)
 800683a:	7812      	ldrb	r2, [r2, #0]
 800683c:	1a9b      	subs	r3, r3, r2
 800683e:	015b      	lsls	r3, r3, #5
 8006840:	4a4c      	ldr	r2, [pc, #304]	@ (8006974 <process_set_config+0x25c>)
 8006842:	4413      	add	r3, r2
 8006844:	60bb      	str	r3, [r7, #8]
  return driver;
 8006846:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8006848:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 800684a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10a      	bne.n	8006866 <process_set_config+0x14e>
 8006850:	4b44      	ldr	r3, [pc, #272]	@ (8006964 <process_set_config+0x24c>)
 8006852:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d000      	beq.n	8006862 <process_set_config+0x14a>
 8006860:	be00      	bkpt	0x0000
 8006862:	2300      	movs	r3, #0
 8006864:	e07a      	b.n	800695c <process_set_config+0x244>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8006866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800686c:	79f8      	ldrb	r0, [r7, #7]
 800686e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006870:	4798      	blx	r3
 8006872:	4603      	mov	r3, r0
 8006874:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8006876:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006878:	2b08      	cmp	r3, #8
 800687a:	d94a      	bls.n	8006912 <process_set_config+0x1fa>
 800687c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800687e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006880:	429a      	cmp	r2, r3
 8006882:	d846      	bhi.n	8006912 <process_set_config+0x1fa>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 8006884:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8006888:	2b01      	cmp	r3, #1
 800688a:	d107      	bne.n	800689c <process_set_config+0x184>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 800688c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	4a39      	ldr	r2, [pc, #228]	@ (8006978 <process_set_config+0x260>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d102      	bne.n	800689c <process_set_config+0x184>
 8006896:	2302      	movs	r3, #2
 8006898:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 800689c:	2300      	movs	r3, #0
 800689e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 80068a2:	e024      	b.n	80068ee <process_set_config+0x1d6>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 80068a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068a6:	789a      	ldrb	r2, [r3, #2]
 80068a8:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80068ac:	4413      	add	r3, r2
 80068ae:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 80068b2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80068b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006968 <process_set_config+0x250>)
 80068b8:	4413      	add	r3, r2
 80068ba:	791b      	ldrb	r3, [r3, #4]
 80068bc:	2bff      	cmp	r3, #255	@ 0xff
 80068be:	d00a      	beq.n	80068d6 <process_set_config+0x1be>
 80068c0:	4b28      	ldr	r3, [pc, #160]	@ (8006964 <process_set_config+0x24c>)
 80068c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80068c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d000      	beq.n	80068d2 <process_set_config+0x1ba>
 80068d0:	be00      	bkpt	0x0000
 80068d2:	2300      	movs	r3, #0
 80068d4:	e042      	b.n	800695c <process_set_config+0x244>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 80068d6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80068da:	4a23      	ldr	r2, [pc, #140]	@ (8006968 <process_set_config+0x250>)
 80068dc:	4413      	add	r3, r2
 80068de:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 80068e2:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80068e4:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80068e8:	3301      	adds	r3, #1
 80068ea:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 80068ee:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 80068f2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d3d4      	bcc.n	80068a4 <process_set_config+0x18c>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 80068fa:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80068fe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006900:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006902:	481e      	ldr	r0, [pc, #120]	@ (800697c <process_set_config+0x264>)
 8006904:	f003 f81c 	bl	8009940 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8006908:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800690a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800690c:	4413      	add	r3, r2
 800690e:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 8006910:	e00c      	b.n	800692c <process_set_config+0x214>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8006912:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8006916:	3301      	adds	r3, #1
 8006918:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800691c:	4b13      	ldr	r3, [pc, #76]	@ (800696c <process_set_config+0x254>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8006926:	429a      	cmp	r2, r3
 8006928:	f6bf af6e 	bge.w	8006808 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 800692c:	4b0f      	ldr	r3, [pc, #60]	@ (800696c <process_set_config+0x254>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8006936:	429a      	cmp	r2, r3
 8006938:	da0a      	bge.n	8006950 <process_set_config+0x238>
 800693a:	4b0a      	ldr	r3, [pc, #40]	@ (8006964 <process_set_config+0x24c>)
 800693c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800693e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d000      	beq.n	800694c <process_set_config+0x234>
 800694a:	be00      	bkpt	0x0000
 800694c:	2300      	movs	r3, #0
 800694e:	e005      	b.n	800695c <process_set_config+0x244>
  while( p_desc < desc_end )
 8006950:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006954:	429a      	cmp	r2, r3
 8006956:	f4ff af21 	bcc.w	800679c <process_set_config+0x84>
  }

  return true;
 800695a:	2301      	movs	r3, #1
}
 800695c:	4618      	mov	r0, r3
 800695e:	3758      	adds	r7, #88	@ 0x58
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	e000edf0 	.word	0xe000edf0
 8006968:	20000a5c 	.word	0x20000a5c
 800696c:	20000a90 	.word	0x20000a90
 8006970:	20000a8c 	.word	0x20000a8c
 8006974:	08009bf8 	.word	0x08009bf8
 8006978:	08003ead 	.word	0x08003ead
 800697c:	20000a70 	.word	0x20000a70

08006980 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b094      	sub	sp, #80	@ 0x50
 8006984:	af00      	add	r7, sp, #0
 8006986:	4603      	mov	r3, r0
 8006988:	6039      	str	r1, [r7, #0]
 800698a:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	885b      	ldrh	r3, [r3, #2]
 8006990:	b29b      	uxth	r3, r3
 8006992:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8006994:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006996:	0a1b      	lsrs	r3, r3, #8
 8006998:	b29b      	uxth	r3, r3
 800699a:	b2db      	uxtb	r3, r3
 800699c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	885b      	ldrh	r3, [r3, #2]
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80069a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 80069b0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80069b4:	3b01      	subs	r3, #1
 80069b6:	2b0e      	cmp	r3, #14
 80069b8:	f200 80b4 	bhi.w	8006b24 <process_get_descriptor+0x1a4>
 80069bc:	a201      	add	r2, pc, #4	@ (adr r2, 80069c4 <process_get_descriptor+0x44>)
 80069be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c2:	bf00      	nop
 80069c4:	08006a01 	.word	0x08006a01
 80069c8:	08006a65 	.word	0x08006a65
 80069cc:	08006acb 	.word	0x08006acb
 80069d0:	08006b25 	.word	0x08006b25
 80069d4:	08006b25 	.word	0x08006b25
 80069d8:	08006aff 	.word	0x08006aff
 80069dc:	08006a65 	.word	0x08006a65
 80069e0:	08006b25 	.word	0x08006b25
 80069e4:	08006b25 	.word	0x08006b25
 80069e8:	08006b25 	.word	0x08006b25
 80069ec:	08006b25 	.word	0x08006b25
 80069f0:	08006b25 	.word	0x08006b25
 80069f4:	08006b25 	.word	0x08006b25
 80069f8:	08006b25 	.word	0x08006b25
 80069fc:	08006a33 	.word	0x08006a33
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8006a00:	f7fa fed6 	bl	80017b0 <tud_descriptor_device_cb>
 8006a04:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 8006a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10a      	bne.n	8006a22 <process_get_descriptor+0xa2>
 8006a0c:	4b48      	ldr	r3, [pc, #288]	@ (8006b30 <process_get_descriptor+0x1b0>)
 8006a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d000      	beq.n	8006a1e <process_get_descriptor+0x9e>
 8006a1c:	be00      	bkpt	0x0000
 8006a1e:	2300      	movs	r3, #0
 8006a20:	e081      	b.n	8006b26 <process_get_descriptor+0x1a6>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8006a22:	79f8      	ldrb	r0, [r7, #7]
 8006a24:	2312      	movs	r3, #18
 8006a26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	f000 fd9b 	bl	8007564 <tud_control_xfer>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	e079      	b.n	8006b26 <process_get_descriptor+0x1a6>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8006a32:	f7fe ffe5 	bl	8005a00 <tud_descriptor_bos_cb>
 8006a36:	4603      	mov	r3, r0
 8006a38:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 8006a3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <process_get_descriptor+0xc4>
 8006a40:	2300      	movs	r3, #0
 8006a42:	e070      	b.n	8006b26 <process_get_descriptor+0x1a6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8006a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a46:	3302      	adds	r3, #2
 8006a48:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8006a52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006a58:	79f8      	ldrb	r0, [r7, #7]
 8006a5a:	6839      	ldr	r1, [r7, #0]
 8006a5c:	f000 fd82 	bl	8007564 <tud_control_xfer>
 8006a60:	4603      	mov	r3, r0
 8006a62:	e060      	b.n	8006b26 <process_get_descriptor+0x1a6>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 8006a64:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d114      	bne.n	8006a96 <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8006a6c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fa feb5 	bl	80017e0 <tud_descriptor_configuration_cb>
 8006a76:	4603      	mov	r3, r0
 8006a78:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 8006a7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d116      	bne.n	8006aae <process_get_descriptor+0x12e>
 8006a80:	4b2b      	ldr	r3, [pc, #172]	@ (8006b30 <process_get_descriptor+0x1b0>)
 8006a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d000      	beq.n	8006a92 <process_get_descriptor+0x112>
 8006a90:	be00      	bkpt	0x0000
 8006a92:	2300      	movs	r3, #0
 8006a94:	e047      	b.n	8006b26 <process_get_descriptor+0x1a6>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8006a96:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe ffc0 	bl	8005a20 <tud_descriptor_other_speed_configuration_cb>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 8006aa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <process_get_descriptor+0x12e>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e03b      	b.n	8006b26 <process_get_descriptor+0x1a6>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8006aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ab0:	3302      	adds	r3, #2
 8006ab2:	61fb      	str	r3, [r7, #28]
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8006aba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006abc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006abe:	79f8      	ldrb	r0, [r7, #7]
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	f000 fd4f 	bl	8007564 <tud_control_xfer>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	e02d      	b.n	8006b26 <process_get_descriptor+0x1a6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	889b      	ldrh	r3, [r3, #4]
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8006ad4:	4611      	mov	r1, r2
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fa fe90 	bl	80017fc <tud_descriptor_string_cb>
 8006adc:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 8006ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <process_get_descriptor+0x168>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	e01e      	b.n	8006b26 <process_get_descriptor+0x1a6>
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aea:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8006af0:	79f8      	ldrb	r0, [r7, #7]
 8006af2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	f000 fd35 	bl	8007564 <tud_control_xfer>
 8006afa:	4603      	mov	r3, r0
 8006afc:	e013      	b.n	8006b26 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8006afe:	f7fe ff87 	bl	8005a10 <tud_descriptor_device_qualifier_cb>
 8006b02:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 8006b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <process_get_descriptor+0x18e>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	e00b      	b.n	8006b26 <process_get_descriptor+0x1a6>
 8006b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b10:	617b      	str	r3, [r7, #20]
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8006b16:	79f8      	ldrb	r0, [r7, #7]
 8006b18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	f000 fd22 	bl	8007564 <tud_control_xfer>
 8006b20:	4603      	mov	r3, r0
 8006b22:	e000      	b.n	8006b26 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    default: return false;
 8006b24:	2300      	movs	r3, #0
  }
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3750      	adds	r7, #80	@ 0x50
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	e000edf0 	.word	0xe000edf0

08006b34 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b0a0      	sub	sp, #128	@ 0x80
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8006b40:	2300      	movs	r3, #0
 8006b42:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	3b02      	subs	r3, #2
 8006b4c:	2b04      	cmp	r3, #4
 8006b4e:	f200 8175 	bhi.w	8006e3c <dcd_event_handler+0x308>
 8006b52:	a201      	add	r2, pc, #4	@ (adr r2, 8006b58 <dcd_event_handler+0x24>)
 8006b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b58:	08006b6d 	.word	0x08006b6d
 8006b5c:	08006bdd 	.word	0x08006bdd
 8006b60:	08006b99 	.word	0x08006b99
 8006b64:	08006bbb 	.word	0x08006bbb
 8006b68:	08006e09 	.word	0x08006e09
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8006b6c:	4aac      	ldr	r2, [pc, #688]	@ (8006e20 <dcd_event_handler+0x2ec>)
 8006b6e:	7813      	ldrb	r3, [r2, #0]
 8006b70:	f023 0301 	bic.w	r3, r3, #1
 8006b74:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8006b76:	4aaa      	ldr	r2, [pc, #680]	@ (8006e20 <dcd_event_handler+0x2ec>)
 8006b78:	7813      	ldrb	r3, [r2, #0]
 8006b7a:	f023 0302 	bic.w	r3, r3, #2
 8006b7e:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8006b80:	4ba7      	ldr	r3, [pc, #668]	@ (8006e20 <dcd_event_handler+0x2ec>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8006b86:	4aa6      	ldr	r2, [pc, #664]	@ (8006e20 <dcd_event_handler+0x2ec>)
 8006b88:	7813      	ldrb	r3, [r2, #0]
 8006b8a:	f023 0304 	bic.w	r3, r3, #4
 8006b8e:	7013      	strb	r3, [r2, #0]
      send = true;
 8006b90:	2301      	movs	r3, #1
 8006b92:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8006b96:	e15a      	b.n	8006e4e <dcd_event_handler+0x31a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8006b98:	4ba1      	ldr	r3, [pc, #644]	@ (8006e20 <dcd_event_handler+0x2ec>)
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 814e 	beq.w	8006e44 <dcd_event_handler+0x310>
        _usbd_dev.suspended = 1;
 8006ba8:	4a9d      	ldr	r2, [pc, #628]	@ (8006e20 <dcd_event_handler+0x2ec>)
 8006baa:	7813      	ldrb	r3, [r2, #0]
 8006bac:	f043 0304 	orr.w	r3, r3, #4
 8006bb0:	7013      	strb	r3, [r2, #0]
        send = true;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8006bb8:	e144      	b.n	8006e44 <dcd_event_handler+0x310>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8006bba:	4b99      	ldr	r3, [pc, #612]	@ (8006e20 <dcd_event_handler+0x2ec>)
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 813f 	beq.w	8006e48 <dcd_event_handler+0x314>
        _usbd_dev.suspended = 0;
 8006bca:	4a95      	ldr	r2, [pc, #596]	@ (8006e20 <dcd_event_handler+0x2ec>)
 8006bcc:	7813      	ldrb	r3, [r2, #0]
 8006bce:	f023 0304 	bic.w	r3, r3, #4
 8006bd2:	7013      	strb	r3, [r2, #0]
        send = true;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8006bda:	e135      	b.n	8006e48 <dcd_event_handler+0x314>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8006be2:	e039      	b.n	8006c58 <dcd_event_handler+0x124>
 8006be4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006be8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 8006bec:	2300      	movs	r3, #0
 8006bee:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 8006bf0:	4b8c      	ldr	r3, [pc, #560]	@ (8006e24 <dcd_event_handler+0x2f0>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d207      	bcs.n	8006c0c <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 8006bfc:	4b8a      	ldr	r3, [pc, #552]	@ (8006e28 <dcd_event_handler+0x2f4>)
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006c04:	015b      	lsls	r3, r3, #5
 8006c06:	4413      	add	r3, r2
 8006c08:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c0a:	e00f      	b.n	8006c2c <dcd_event_handler+0xf8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006c0c:	4b85      	ldr	r3, [pc, #532]	@ (8006e24 <dcd_event_handler+0x2f0>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006c16:	429a      	cmp	r2, r3
 8006c18:	db08      	blt.n	8006c2c <dcd_event_handler+0xf8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006c1a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006c1e:	4a81      	ldr	r2, [pc, #516]	@ (8006e24 <dcd_event_handler+0x2f0>)
 8006c20:	7812      	ldrb	r2, [r2, #0]
 8006c22:	1a9b      	subs	r3, r3, r2
 8006c24:	015b      	lsls	r3, r3, #5
 8006c26:	4a81      	ldr	r2, [pc, #516]	@ (8006e2c <dcd_event_handler+0x2f8>)
 8006c28:	4413      	add	r3, r2
 8006c2a:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 8006c2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 8006c2e:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 8006c30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00b      	beq.n	8006c4e <dcd_event_handler+0x11a>
 8006c36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d007      	beq.n	8006c4e <dcd_event_handler+0x11a>
          driver->sof(event->rhport, event->sof.frame_count);
 8006c3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	7810      	ldrb	r0, [r2, #0]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	6852      	ldr	r2, [r2, #4]
 8006c4a:	4611      	mov	r1, r2
 8006c4c:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006c4e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006c52:	3301      	adds	r3, #1
 8006c54:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8006c58:	4b72      	ldr	r3, [pc, #456]	@ (8006e24 <dcd_event_handler+0x2f0>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	1c5a      	adds	r2, r3, #1
 8006c5e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006c62:	429a      	cmp	r2, r3
 8006c64:	dabe      	bge.n	8006be4 <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8006c66:	4b6e      	ldr	r3, [pc, #440]	@ (8006e20 <dcd_event_handler+0x2ec>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d05a      	beq.n	8006d2a <dcd_event_handler+0x1f6>
        _usbd_dev.suspended = 0;
 8006c74:	4a6a      	ldr	r2, [pc, #424]	@ (8006e20 <dcd_event_handler+0x2ec>)
 8006c76:	7813      	ldrb	r3, [r2, #0]
 8006c78:	f023 0304 	bic.w	r3, r3, #4
 8006c7c:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8006c7e:	f107 0314 	add.w	r3, r7, #20
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	605a      	str	r2, [r3, #4]
 8006c88:	609a      	str	r2, [r3, #8]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	753b      	strb	r3, [r7, #20]
 8006c90:	2305      	movs	r3, #5
 8006c92:	757b      	strb	r3, [r7, #21]
 8006c94:	f107 0314 	add.w	r3, r7, #20
 8006c98:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c9a:	78fb      	ldrb	r3, [r7, #3]
 8006c9c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8006ca0:	4b63      	ldr	r3, [pc, #396]	@ (8006e30 <dcd_event_handler+0x2fc>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ca6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ca8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006caa:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8006cae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8006cb2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006cb6:	f083 0301 	eor.w	r3, r3, #1
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <dcd_event_handler+0x194>
    qhdl->interrupt_set(false);
 8006cc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 8006cc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cca:	3304      	adds	r3, #4
 8006ccc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fe fde9 	bl	80058a6 <tu_fifo_write>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 8006cda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006cde:	f083 0301 	eor.w	r3, r3, #1
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d003      	beq.n	8006cf0 <dcd_event_handler+0x1bc>
    qhdl->interrupt_set(true);
 8006ce8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2001      	movs	r0, #1
 8006cee:	4798      	blx	r3
  }

  return success;
 8006cf0:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8006cf4:	f083 0301 	eor.w	r3, r3, #1
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d009      	beq.n	8006d12 <dcd_event_handler+0x1de>
 8006cfe:	4b4d      	ldr	r3, [pc, #308]	@ (8006e34 <dcd_event_handler+0x300>)
 8006d00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00c      	beq.n	8006d28 <dcd_event_handler+0x1f4>
 8006d0e:	be00      	bkpt	0x0000
 8006d10:	e00a      	b.n	8006d28 <dcd_event_handler+0x1f4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8006d12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d14:	7818      	ldrb	r0, [r3, #0]
 8006d16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d18:	785b      	ldrb	r3, [r3, #1]
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8006d20:	461a      	mov	r2, r3
 8006d22:	f7fe fe55 	bl	80059d0 <tud_event_hook_cb>
  return true;
 8006d26:	e000      	b.n	8006d2a <dcd_event_handler+0x1f6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8006d28:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8006d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8006e20 <dcd_event_handler+0x2ec>)
 8006d2c:	78db      	ldrb	r3, [r3, #3]
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d32:	2300      	movs	r3, #0
 8006d34:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8006d38:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8006d3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	bf14      	ite	ne
 8006d4a:	2301      	movne	r3, #1
 8006d4c:	2300      	moveq	r3, #0
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d07b      	beq.n	8006e4c <dcd_event_handler+0x318>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 8006d54:	f107 0308 	add.w	r3, r7, #8
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	605a      	str	r2, [r3, #4]
 8006d5e:	609a      	str	r2, [r3, #8]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	723b      	strb	r3, [r7, #8]
 8006d66:	2303      	movs	r3, #3
 8006d68:	727b      	strb	r3, [r7, #9]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	f107 0308 	add.w	r3, r7, #8
 8006d74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d76:	78fb      	ldrb	r3, [r7, #3]
 8006d78:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8006d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8006e30 <dcd_event_handler+0x2fc>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d84:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d86:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8006d8a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 8006d8e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006d92:	f083 0301 	eor.w	r3, r3, #1
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <dcd_event_handler+0x270>
    qhdl->interrupt_set(false);
 8006d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2000      	movs	r0, #0
 8006da2:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8006da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006da6:	3304      	adds	r3, #4
 8006da8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fe fd7b 	bl	80058a6 <tu_fifo_write>
 8006db0:	4603      	mov	r3, r0
 8006db2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 8006db6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006dba:	f083 0301 	eor.w	r3, r3, #1
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <dcd_event_handler+0x298>
    qhdl->interrupt_set(true);
 8006dc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2001      	movs	r0, #1
 8006dca:	4798      	blx	r3
  return success;
 8006dcc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8006dd0:	f083 0301 	eor.w	r3, r3, #1
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d009      	beq.n	8006dee <dcd_event_handler+0x2ba>
 8006dda:	4b16      	ldr	r3, [pc, #88]	@ (8006e34 <dcd_event_handler+0x300>)
 8006ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00c      	beq.n	8006e04 <dcd_event_handler+0x2d0>
 8006dea:	be00      	bkpt	0x0000
 8006dec:	e00a      	b.n	8006e04 <dcd_event_handler+0x2d0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8006dee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006df0:	7818      	ldrb	r0, [r3, #0]
 8006df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006df4:	785b      	ldrb	r3, [r3, #1]
 8006df6:	4619      	mov	r1, r3
 8006df8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	f7fe fde7 	bl	80059d0 <tud_event_hook_cb>
  return true;
 8006e02:	e000      	b.n	8006e06 <dcd_event_handler+0x2d2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8006e04:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 8006e06:	e021      	b.n	8006e4c <dcd_event_handler+0x318>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 8006e08:	4b0b      	ldr	r3, [pc, #44]	@ (8006e38 <dcd_event_handler+0x304>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	3301      	adds	r3, #1
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	4b09      	ldr	r3, [pc, #36]	@ (8006e38 <dcd_event_handler+0x304>)
 8006e14:	701a      	strb	r2, [r3, #0]
      send = true;
 8006e16:	2301      	movs	r3, #1
 8006e18:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8006e1c:	e017      	b.n	8006e4e <dcd_event_handler+0x31a>
 8006e1e:	bf00      	nop
 8006e20:	20000a5c 	.word	0x20000a5c
 8006e24:	20000a90 	.word	0x20000a90
 8006e28:	20000a8c 	.word	0x20000a8c
 8006e2c:	08009bf8 	.word	0x08009bf8
 8006e30:	20000b54 	.word	0x20000b54
 8006e34:	e000edf0 	.word	0xe000edf0
 8006e38:	20000a88 	.word	0x20000a88

    default:
      send = true;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8006e42:	e004      	b.n	8006e4e <dcd_event_handler+0x31a>
      break;
 8006e44:	bf00      	nop
 8006e46:	e002      	b.n	8006e4e <dcd_event_handler+0x31a>
      break;
 8006e48:	bf00      	nop
 8006e4a:	e000      	b.n	8006e4e <dcd_event_handler+0x31a>
      break;
 8006e4c:	bf00      	nop
  }

  if (send) {
 8006e4e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d049      	beq.n	8006eea <dcd_event_handler+0x3b6>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e5a:	78fb      	ldrb	r3, [r7, #3]
 8006e5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8006e60:	4b24      	ldr	r3, [pc, #144]	@ (8006ef4 <dcd_event_handler+0x3c0>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e6a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006e6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 8006e72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e76:	f083 0301 	eor.w	r3, r3, #1
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <dcd_event_handler+0x354>
    qhdl->interrupt_set(false);
 8006e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2000      	movs	r0, #0
 8006e86:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8006e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe fd09 	bl	80058a6 <tu_fifo_write>
 8006e94:	4603      	mov	r3, r0
 8006e96:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 8006e9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e9e:	f083 0301 	eor.w	r3, r3, #1
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <dcd_event_handler+0x37c>
    qhdl->interrupt_set(true);
 8006ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2001      	movs	r0, #1
 8006eae:	4798      	blx	r3
  return success;
 8006eb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006eb4:	f083 0301 	eor.w	r3, r3, #1
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d009      	beq.n	8006ed2 <dcd_event_handler+0x39e>
 8006ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8006ef8 <dcd_event_handler+0x3c4>)
 8006ec0:	623b      	str	r3, [r7, #32]
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00c      	beq.n	8006ee8 <dcd_event_handler+0x3b4>
 8006ece:	be00      	bkpt	0x0000
 8006ed0:	e00a      	b.n	8006ee8 <dcd_event_handler+0x3b4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8006ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed4:	7818      	ldrb	r0, [r3, #0]
 8006ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed8:	785b      	ldrb	r3, [r3, #1]
 8006eda:	4619      	mov	r1, r3
 8006edc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	f7fe fd75 	bl	80059d0 <tud_event_hook_cb>
  return true;
 8006ee6:	e000      	b.n	8006eea <dcd_event_handler+0x3b6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8006ee8:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 8006eea:	bf00      	nop
 8006eec:	3780      	adds	r7, #128	@ 0x80
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20000b54 	.word	0x20000b54
 8006ef8:	e000edf0 	.word	0xe000edf0

08006efc <usbd_int_set>:

//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled) {
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	4603      	mov	r3, r0
 8006f04:	71fb      	strb	r3, [r7, #7]
  if (enabled) {
 8006f06:	79fb      	ldrb	r3, [r7, #7]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d005      	beq.n	8006f18 <usbd_int_set+0x1c>
    dcd_int_enable(_usbd_rhport);
 8006f0c:	4b07      	ldr	r3, [pc, #28]	@ (8006f2c <usbd_int_set+0x30>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f001 f929 	bl	8008168 <dcd_int_enable>
  } else {
    dcd_int_disable(_usbd_rhport);
  }
}
 8006f16:	e004      	b.n	8006f22 <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8006f18:	4b04      	ldr	r3, [pc, #16]	@ (8006f2c <usbd_int_set+0x30>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f001 f94b 	bl	80081b8 <dcd_int_disable>
}
 8006f22:	bf00      	nop
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	2000006d 	.word	0x2000006d

08006f30 <usbd_spin_lock>:

void usbd_spin_lock(bool in_isr) {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	4603      	mov	r3, r0
 8006f38:	71fb      	strb	r3, [r7, #7]
 8006f3a:	4b09      	ldr	r3, [pc, #36]	@ (8006f60 <usbd_spin_lock+0x30>)
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	79fb      	ldrb	r3, [r7, #7]
 8006f40:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 8006f42:	7afb      	ldrb	r3, [r7, #11]
 8006f44:	f083 0301 	eor.w	r3, r3, #1
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <usbd_spin_lock+0x26>
    ctx->interrupt_set(false);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2000      	movs	r0, #0
 8006f54:	4798      	blx	r3
}
 8006f56:	bf00      	nop
  osal_spin_lock(&_usbd_spin, in_isr);
}
 8006f58:	bf00      	nop
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	20000070 	.word	0x20000070

08006f64 <usbd_spin_unlock>:
void usbd_spin_unlock(bool in_isr) {
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	71fb      	strb	r3, [r7, #7]
 8006f6e:	4b09      	ldr	r3, [pc, #36]	@ (8006f94 <usbd_spin_unlock+0x30>)
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	79fb      	ldrb	r3, [r7, #7]
 8006f74:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 8006f76:	7afb      	ldrb	r3, [r7, #11]
 8006f78:	f083 0301 	eor.w	r3, r3, #1
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d003      	beq.n	8006f8a <usbd_spin_unlock+0x26>
    ctx->interrupt_set(true);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2001      	movs	r0, #1
 8006f88:	4798      	blx	r3
}
 8006f8a:	bf00      	nop
  osal_spin_unlock(&_usbd_spin, in_isr);
}
 8006f8c:	bf00      	nop
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	20000070 	.word	0x20000070

08006f98 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08a      	sub	sp, #40	@ 0x28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6039      	str	r1, [r7, #0]
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	71fb      	strb	r3, [r7, #7]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	71bb      	strb	r3, [r7, #6]
 8006fac:	4613      	mov	r3, r2
 8006fae:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fb4:	e04d      	b.n	8007052 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	785b      	ldrb	r3, [r3, #1]
 8006fbe:	2b05      	cmp	r3, #5
 8006fc0:	d108      	bne.n	8006fd4 <usbd_open_edpt_pair+0x3c>
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	78db      	ldrb	r3, [r3, #3]
 8006fc6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	461a      	mov	r2, r3
 8006fce:	797b      	ldrb	r3, [r7, #5]
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d00a      	beq.n	8006fea <usbd_open_edpt_pair+0x52>
 8006fd4:	4b23      	ldr	r3, [pc, #140]	@ (8007064 <usbd_open_edpt_pair+0xcc>)
 8006fd6:	61bb      	str	r3, [r7, #24]
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d000      	beq.n	8006fe6 <usbd_open_edpt_pair+0x4e>
 8006fe4:	be00      	bkpt	0x0000
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	e038      	b.n	800705c <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8006fea:	79fb      	ldrb	r3, [r7, #7]
 8006fec:	6a39      	ldr	r1, [r7, #32]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 f83a 	bl	8007068 <usbd_edpt_open>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	f083 0301 	eor.w	r3, r3, #1
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00a      	beq.n	8007016 <usbd_open_edpt_pair+0x7e>
 8007000:	4b18      	ldr	r3, [pc, #96]	@ (8007064 <usbd_open_edpt_pair+0xcc>)
 8007002:	61fb      	str	r3, [r7, #28]
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b00      	cmp	r3, #0
 800700e:	d000      	beq.n	8007012 <usbd_open_edpt_pair+0x7a>
 8007010:	be00      	bkpt	0x0000
 8007012:	2300      	movs	r3, #0
 8007014:	e022      	b.n	800705c <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	789b      	ldrb	r3, [r3, #2]
 800701a:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800701c:	7dfb      	ldrb	r3, [r7, #23]
 800701e:	09db      	lsrs	r3, r3, #7
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b01      	cmp	r3, #1
 8007024:	d104      	bne.n	8007030 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	789a      	ldrb	r2, [r3, #2]
 800702a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800702c:	701a      	strb	r2, [r3, #0]
 800702e:	e003      	b.n	8007038 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8007030:	6a3b      	ldr	r3, [r7, #32]
 8007032:	789a      	ldrb	r2, [r3, #2]
 8007034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007036:	701a      	strb	r2, [r3, #0]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	461a      	mov	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 800704a:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 800704c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704e:	3301      	adds	r3, #1
 8007050:	627b      	str	r3, [r7, #36]	@ 0x24
 8007052:	79bb      	ldrb	r3, [r7, #6]
 8007054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007056:	429a      	cmp	r2, r3
 8007058:	dbad      	blt.n	8006fb6 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 800705a:	2301      	movs	r3, #1
}
 800705c:	4618      	mov	r0, r3
 800705e:	3728      	adds	r7, #40	@ 0x28
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	e000edf0 	.word	0xe000edf0

08007068 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 8007068:	b580      	push	{r7, lr}
 800706a:	b086      	sub	sp, #24
 800706c:	af00      	add	r7, sp, #0
 800706e:	4603      	mov	r3, r0
 8007070:	6039      	str	r1, [r7, #0]
 8007072:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8007074:	4b1c      	ldr	r3, [pc, #112]	@ (80070e8 <usbd_edpt_open+0x80>)
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	789b      	ldrb	r3, [r3, #2]
 800707e:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007080:	7bfb      	ldrb	r3, [r7, #15]
 8007082:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b05      	cmp	r3, #5
 800708a:	d90a      	bls.n	80070a2 <usbd_edpt_open+0x3a>
 800708c:	4b17      	ldr	r3, [pc, #92]	@ (80070ec <usbd_edpt_open+0x84>)
 800708e:	613b      	str	r3, [r7, #16]
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	2b00      	cmp	r3, #0
 800709a:	d000      	beq.n	800709e <usbd_edpt_open+0x36>
 800709c:	be00      	bkpt	0x0000
 800709e:	2300      	movs	r3, #0
 80070a0:	e01d      	b.n	80070de <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 80070a2:	4b13      	ldr	r3, [pc, #76]	@ (80070f0 <usbd_edpt_open+0x88>)
 80070a4:	789b      	ldrb	r3, [r3, #2]
 80070a6:	2200      	movs	r2, #0
 80070a8:	4619      	mov	r1, r3
 80070aa:	6838      	ldr	r0, [r7, #0]
 80070ac:	f002 fbae 	bl	800980c <tu_edpt_validate>
 80070b0:	4603      	mov	r3, r0
 80070b2:	f083 0301 	eor.w	r3, r3, #1
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00a      	beq.n	80070d2 <usbd_edpt_open+0x6a>
 80070bc:	4b0b      	ldr	r3, [pc, #44]	@ (80070ec <usbd_edpt_open+0x84>)
 80070be:	617b      	str	r3, [r7, #20]
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d000      	beq.n	80070ce <usbd_edpt_open+0x66>
 80070cc:	be00      	bkpt	0x0000
 80070ce:	2300      	movs	r3, #0
 80070d0:	e005      	b.n	80070de <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 80070d2:	79fb      	ldrb	r3, [r7, #7]
 80070d4:	6839      	ldr	r1, [r7, #0]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f001 f992 	bl	8008400 <dcd_edpt_open>
 80070dc:	4603      	mov	r3, r0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	2000006d 	.word	0x2000006d
 80070ec:	e000edf0 	.word	0xe000edf0
 80070f0:	20000a5c 	.word	0x20000a5c

080070f4 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	460a      	mov	r2, r1
 80070fe:	71fb      	strb	r3, [r7, #7]
 8007100:	4613      	mov	r3, r2
 8007102:	71bb      	strb	r3, [r7, #6]
 8007104:	79bb      	ldrb	r3, [r7, #6]
 8007106:	73bb      	strb	r3, [r7, #14]
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800710e:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007110:	75fb      	strb	r3, [r7, #23]
 8007112:	79bb      	ldrb	r3, [r7, #6]
 8007114:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007116:	7bfb      	ldrb	r3, [r7, #15]
 8007118:	09db      	lsrs	r3, r3, #7
 800711a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800711c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800711e:	7dfa      	ldrb	r2, [r7, #23]
 8007120:	7dbb      	ldrb	r3, [r7, #22]
 8007122:	0052      	lsls	r2, r2, #1
 8007124:	4413      	add	r3, r2
 8007126:	3320      	adds	r3, #32
 8007128:	4a05      	ldr	r2, [pc, #20]	@ (8007140 <usbd_edpt_claim+0x4c>)
 800712a:	4413      	add	r3, r2
 800712c:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 800712e:	2100      	movs	r1, #0
 8007130:	6938      	ldr	r0, [r7, #16]
 8007132:	f002 fb07 	bl	8009744 <tu_edpt_claim>
 8007136:	4603      	mov	r3, r0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3718      	adds	r7, #24
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20000a5c 	.word	0x20000a5c

08007144 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	4603      	mov	r3, r0
 800714c:	460a      	mov	r2, r1
 800714e:	71fb      	strb	r3, [r7, #7]
 8007150:	4613      	mov	r3, r2
 8007152:	71bb      	strb	r3, [r7, #6]
 8007154:	79bb      	ldrb	r3, [r7, #6]
 8007156:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007158:	7bbb      	ldrb	r3, [r7, #14]
 800715a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800715e:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007160:	75fb      	strb	r3, [r7, #23]
 8007162:	79bb      	ldrb	r3, [r7, #6]
 8007164:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007166:	7bfb      	ldrb	r3, [r7, #15]
 8007168:	09db      	lsrs	r3, r3, #7
 800716a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800716c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800716e:	7dfa      	ldrb	r2, [r7, #23]
 8007170:	7dbb      	ldrb	r3, [r7, #22]
 8007172:	0052      	lsls	r2, r2, #1
 8007174:	4413      	add	r3, r2
 8007176:	3320      	adds	r3, #32
 8007178:	4a05      	ldr	r2, [pc, #20]	@ (8007190 <usbd_edpt_release+0x4c>)
 800717a:	4413      	add	r3, r2
 800717c:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 800717e:	2100      	movs	r1, #0
 8007180:	6938      	ldr	r0, [r7, #16]
 8007182:	f002 fb19 	bl	80097b8 <tu_edpt_release>
 8007186:	4603      	mov	r3, r0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3718      	adds	r7, #24
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	20000a5c 	.word	0x20000a5c

08007194 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	603a      	str	r2, [r7, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	4603      	mov	r3, r0
 80071a0:	71fb      	strb	r3, [r7, #7]
 80071a2:	460b      	mov	r3, r1
 80071a4:	71bb      	strb	r3, [r7, #6]
 80071a6:	4613      	mov	r3, r2
 80071a8:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 80071aa:	4b32      	ldr	r3, [pc, #200]	@ (8007274 <usbd_edpt_xfer+0xe0>)
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	71fb      	strb	r3, [r7, #7]
 80071b0:	79bb      	ldrb	r3, [r7, #6]
 80071b2:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80071b4:	7abb      	ldrb	r3, [r7, #10]
 80071b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071ba:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80071bc:	75fb      	strb	r3, [r7, #23]
 80071be:	79bb      	ldrb	r3, [r7, #6]
 80071c0:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80071c2:	7afb      	ldrb	r3, [r7, #11]
 80071c4:	09db      	lsrs	r3, r3, #7
 80071c6:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80071c8:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80071ca:	7dfa      	ldrb	r2, [r7, #23]
 80071cc:	7dbb      	ldrb	r3, [r7, #22]
 80071ce:	492a      	ldr	r1, [pc, #168]	@ (8007278 <usbd_edpt_xfer+0xe4>)
 80071d0:	0052      	lsls	r2, r2, #1
 80071d2:	440a      	add	r2, r1
 80071d4:	4413      	add	r3, r2
 80071d6:	3320      	adds	r3, #32
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00a      	beq.n	80071fa <usbd_edpt_xfer+0x66>
 80071e4:	4b25      	ldr	r3, [pc, #148]	@ (800727c <usbd_edpt_xfer+0xe8>)
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0301 	and.w	r3, r3, #1
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d000      	beq.n	80071f6 <usbd_edpt_xfer+0x62>
 80071f4:	be00      	bkpt	0x0000
 80071f6:	2300      	movs	r3, #0
 80071f8:	e038      	b.n	800726c <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 80071fa:	7dfa      	ldrb	r2, [r7, #23]
 80071fc:	7dbb      	ldrb	r3, [r7, #22]
 80071fe:	491e      	ldr	r1, [pc, #120]	@ (8007278 <usbd_edpt_xfer+0xe4>)
 8007200:	0052      	lsls	r2, r2, #1
 8007202:	440a      	add	r2, r1
 8007204:	4413      	add	r3, r2
 8007206:	f103 0220 	add.w	r2, r3, #32
 800720a:	7813      	ldrb	r3, [r2, #0]
 800720c:	f043 0301 	orr.w	r3, r3, #1
 8007210:	7013      	strb	r3, [r2, #0]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 8007212:	88bb      	ldrh	r3, [r7, #4]
 8007214:	79b9      	ldrb	r1, [r7, #6]
 8007216:	79f8      	ldrb	r0, [r7, #7]
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	f001 f9b5 	bl	8008588 <dcd_edpt_xfer>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <usbd_edpt_xfer+0x94>
    return true;
 8007224:	2301      	movs	r3, #1
 8007226:	e021      	b.n	800726c <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8007228:	7dfa      	ldrb	r2, [r7, #23]
 800722a:	7dbb      	ldrb	r3, [r7, #22]
 800722c:	4912      	ldr	r1, [pc, #72]	@ (8007278 <usbd_edpt_xfer+0xe4>)
 800722e:	0052      	lsls	r2, r2, #1
 8007230:	440a      	add	r2, r1
 8007232:	4413      	add	r3, r2
 8007234:	f103 0220 	add.w	r2, r3, #32
 8007238:	7813      	ldrb	r3, [r2, #0]
 800723a:	f023 0301 	bic.w	r3, r3, #1
 800723e:	7013      	strb	r3, [r2, #0]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8007240:	7dfa      	ldrb	r2, [r7, #23]
 8007242:	7dbb      	ldrb	r3, [r7, #22]
 8007244:	490c      	ldr	r1, [pc, #48]	@ (8007278 <usbd_edpt_xfer+0xe4>)
 8007246:	0052      	lsls	r2, r2, #1
 8007248:	440a      	add	r2, r1
 800724a:	4413      	add	r3, r2
 800724c:	f103 0220 	add.w	r2, r3, #32
 8007250:	7813      	ldrb	r3, [r2, #0]
 8007252:	f023 0304 	bic.w	r3, r3, #4
 8007256:	7013      	strb	r3, [r2, #0]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 8007258:	4b08      	ldr	r3, [pc, #32]	@ (800727c <usbd_edpt_xfer+0xe8>)
 800725a:	613b      	str	r3, [r7, #16]
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b00      	cmp	r3, #0
 8007266:	d000      	beq.n	800726a <usbd_edpt_xfer+0xd6>
 8007268:	be00      	bkpt	0x0000
    return false;
 800726a:	2300      	movs	r3, #0
  }
}
 800726c:	4618      	mov	r0, r3
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	2000006d 	.word	0x2000006d
 8007278:	20000a5c 	.word	0x20000a5c
 800727c:	e000edf0 	.word	0xe000edf0

08007280 <usbd_edpt_busy>:
    TU_BREAKPOINT();
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr) {
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	4603      	mov	r3, r0
 8007288:	460a      	mov	r2, r1
 800728a:	71fb      	strb	r3, [r7, #7]
 800728c:	4613      	mov	r3, r2
 800728e:	71bb      	strb	r3, [r7, #6]
 8007290:	79bb      	ldrb	r3, [r7, #6]
 8007292:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007294:	7b3b      	ldrb	r3, [r7, #12]
 8007296:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800729a:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800729c:	73fb      	strb	r3, [r7, #15]
 800729e:	79bb      	ldrb	r3, [r7, #6]
 80072a0:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80072a2:	7b7b      	ldrb	r3, [r7, #13]
 80072a4:	09db      	lsrs	r3, r3, #7
 80072a6:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80072a8:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 80072aa:	7bfa      	ldrb	r2, [r7, #15]
 80072ac:	7bbb      	ldrb	r3, [r7, #14]
 80072ae:	490a      	ldr	r1, [pc, #40]	@ (80072d8 <usbd_edpt_busy+0x58>)
 80072b0:	0052      	lsls	r2, r2, #1
 80072b2:	440a      	add	r2, r1
 80072b4:	4413      	add	r3, r2
 80072b6:	3320      	adds	r3, #32
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	bf14      	ite	ne
 80072c4:	2301      	movne	r3, #1
 80072c6:	2300      	moveq	r3, #0
 80072c8:	b2db      	uxtb	r3, r3
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	20000a5c 	.word	0x20000a5c

080072dc <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	4603      	mov	r3, r0
 80072e4:	460a      	mov	r2, r1
 80072e6:	71fb      	strb	r3, [r7, #7]
 80072e8:	4613      	mov	r3, r2
 80072ea:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80072ec:	4b18      	ldr	r3, [pc, #96]	@ (8007350 <usbd_edpt_stall+0x74>)
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	71fb      	strb	r3, [r7, #7]
 80072f2:	79bb      	ldrb	r3, [r7, #6]
 80072f4:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80072f6:	7b3b      	ldrb	r3, [r7, #12]
 80072f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072fc:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80072fe:	73fb      	strb	r3, [r7, #15]
 8007300:	79bb      	ldrb	r3, [r7, #6]
 8007302:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007304:	7b7b      	ldrb	r3, [r7, #13]
 8007306:	09db      	lsrs	r3, r3, #7
 8007308:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800730a:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 800730c:	79ba      	ldrb	r2, [r7, #6]
 800730e:	79fb      	ldrb	r3, [r7, #7]
 8007310:	4611      	mov	r1, r2
 8007312:	4618      	mov	r0, r3
 8007314:	f001 f988 	bl	8008628 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 8007318:	7bfa      	ldrb	r2, [r7, #15]
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	490d      	ldr	r1, [pc, #52]	@ (8007354 <usbd_edpt_stall+0x78>)
 800731e:	0052      	lsls	r2, r2, #1
 8007320:	440a      	add	r2, r1
 8007322:	4413      	add	r3, r2
 8007324:	f103 0220 	add.w	r2, r3, #32
 8007328:	7813      	ldrb	r3, [r2, #0]
 800732a:	f043 0302 	orr.w	r3, r3, #2
 800732e:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8007330:	7bfa      	ldrb	r2, [r7, #15]
 8007332:	7bbb      	ldrb	r3, [r7, #14]
 8007334:	4907      	ldr	r1, [pc, #28]	@ (8007354 <usbd_edpt_stall+0x78>)
 8007336:	0052      	lsls	r2, r2, #1
 8007338:	440a      	add	r2, r1
 800733a:	4413      	add	r3, r2
 800733c:	f103 0220 	add.w	r2, r3, #32
 8007340:	7813      	ldrb	r3, [r2, #0]
 8007342:	f043 0301 	orr.w	r3, r3, #1
 8007346:	7013      	strb	r3, [r2, #0]
}
 8007348:	bf00      	nop
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	2000006d 	.word	0x2000006d
 8007354:	20000a5c 	.word	0x20000a5c

08007358 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	4603      	mov	r3, r0
 8007360:	460a      	mov	r2, r1
 8007362:	71fb      	strb	r3, [r7, #7]
 8007364:	4613      	mov	r3, r2
 8007366:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8007368:	4b18      	ldr	r3, [pc, #96]	@ (80073cc <usbd_edpt_clear_stall+0x74>)
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	71fb      	strb	r3, [r7, #7]
 800736e:	79bb      	ldrb	r3, [r7, #6]
 8007370:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007372:	7b3b      	ldrb	r3, [r7, #12]
 8007374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007378:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800737a:	73fb      	strb	r3, [r7, #15]
 800737c:	79bb      	ldrb	r3, [r7, #6]
 800737e:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007380:	7b7b      	ldrb	r3, [r7, #13]
 8007382:	09db      	lsrs	r3, r3, #7
 8007384:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8007386:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 8007388:	79ba      	ldrb	r2, [r7, #6]
 800738a:	79fb      	ldrb	r3, [r7, #7]
 800738c:	4611      	mov	r1, r2
 800738e:	4618      	mov	r0, r3
 8007390:	f001 f980 	bl	8008694 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8007394:	7bfa      	ldrb	r2, [r7, #15]
 8007396:	7bbb      	ldrb	r3, [r7, #14]
 8007398:	490d      	ldr	r1, [pc, #52]	@ (80073d0 <usbd_edpt_clear_stall+0x78>)
 800739a:	0052      	lsls	r2, r2, #1
 800739c:	440a      	add	r2, r1
 800739e:	4413      	add	r3, r2
 80073a0:	f103 0220 	add.w	r2, r3, #32
 80073a4:	7813      	ldrb	r3, [r2, #0]
 80073a6:	f023 0302 	bic.w	r3, r3, #2
 80073aa:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 80073ac:	7bfa      	ldrb	r2, [r7, #15]
 80073ae:	7bbb      	ldrb	r3, [r7, #14]
 80073b0:	4907      	ldr	r1, [pc, #28]	@ (80073d0 <usbd_edpt_clear_stall+0x78>)
 80073b2:	0052      	lsls	r2, r2, #1
 80073b4:	440a      	add	r2, r1
 80073b6:	4413      	add	r3, r2
 80073b8:	f103 0220 	add.w	r2, r3, #32
 80073bc:	7813      	ldrb	r3, [r2, #0]
 80073be:	f023 0301 	bic.w	r3, r3, #1
 80073c2:	7013      	strb	r3, [r2, #0]
}
 80073c4:	bf00      	nop
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	2000006d 	.word	0x2000006d
 80073d0:	20000a5c 	.word	0x20000a5c

080073d4 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	4603      	mov	r3, r0
 80073dc:	460a      	mov	r2, r1
 80073de:	71fb      	strb	r3, [r7, #7]
 80073e0:	4613      	mov	r3, r2
 80073e2:	71bb      	strb	r3, [r7, #6]
 80073e4:	79bb      	ldrb	r3, [r7, #6]
 80073e6:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80073e8:	7b3b      	ldrb	r3, [r7, #12]
 80073ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073ee:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80073f0:	73fb      	strb	r3, [r7, #15]
 80073f2:	79bb      	ldrb	r3, [r7, #6]
 80073f4:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80073f6:	7b7b      	ldrb	r3, [r7, #13]
 80073f8:	09db      	lsrs	r3, r3, #7
 80073fa:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80073fc:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 80073fe:	7bfa      	ldrb	r2, [r7, #15]
 8007400:	7bbb      	ldrb	r3, [r7, #14]
 8007402:	490a      	ldr	r1, [pc, #40]	@ (800742c <usbd_edpt_stalled+0x58>)
 8007404:	0052      	lsls	r2, r2, #1
 8007406:	440a      	add	r2, r1
 8007408:	4413      	add	r3, r2
 800740a:	3320      	adds	r3, #32
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	bf14      	ite	ne
 8007418:	2301      	movne	r3, #1
 800741a:	2300      	moveq	r3, #0
 800741c:	b2db      	uxtb	r3, r3
}
 800741e:	4618      	mov	r0, r3
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	20000a5c 	.word	0x20000a5c

08007430 <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, const tusb_control_request_t* request) {
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	4603      	mov	r3, r0
 8007438:	6039      	str	r1, [r7, #0]
 800743a:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	4603      	mov	r3, r0
 8007450:	6039      	str	r1, [r7, #0]
 8007452:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d001      	beq.n	8007466 <status_stage_xact+0x1e>
 8007462:	2300      	movs	r3, #0
 8007464:	e000      	b.n	8007468 <status_stage_xact+0x20>
 8007466:	2380      	movs	r3, #128	@ 0x80
 8007468:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 800746a:	7bf9      	ldrb	r1, [r7, #15]
 800746c:	79f8      	ldrb	r0, [r7, #7]
 800746e:	2300      	movs	r3, #0
 8007470:	2200      	movs	r2, #0
 8007472:	f7ff fe8f 	bl	8007194 <usbd_edpt_xfer>
 8007476:	4603      	mov	r3, r0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	4603      	mov	r3, r0
 8007488:	6039      	str	r1, [r7, #0]
 800748a:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 800748c:	4b0b      	ldr	r3, [pc, #44]	@ (80074bc <tud_control_status+0x3c>)
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	6810      	ldr	r0, [r2, #0]
 8007492:	6851      	ldr	r1, [r2, #4]
 8007494:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 8007496:	4b09      	ldr	r3, [pc, #36]	@ (80074bc <tud_control_status+0x3c>)
 8007498:	2200      	movs	r2, #0
 800749a:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800749c:	4b07      	ldr	r3, [pc, #28]	@ (80074bc <tud_control_status+0x3c>)
 800749e:	2200      	movs	r2, #0
 80074a0:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 80074a2:	4b06      	ldr	r3, [pc, #24]	@ (80074bc <tud_control_status+0x3c>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 80074a8:	79fb      	ldrb	r3, [r7, #7]
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff ffcb 	bl	8007448 <status_stage_xact>
 80074b2:	4603      	mov	r3, r0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	20000b58 	.word	0x20000b58

080074c0 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b088      	sub	sp, #32
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	4603      	mov	r3, r0
 80074c8:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 80074ca:	4b24      	ldr	r3, [pc, #144]	@ (800755c <data_stage_xact+0x9c>)
 80074cc:	899a      	ldrh	r2, [r3, #12]
 80074ce:	4b23      	ldr	r3, [pc, #140]	@ (800755c <data_stage_xact+0x9c>)
 80074d0:	89db      	ldrh	r3, [r3, #14]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	837b      	strh	r3, [r7, #26]
 80074d8:	2340      	movs	r3, #64	@ 0x40
 80074da:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80074dc:	8b7a      	ldrh	r2, [r7, #26]
 80074de:	8b3b      	ldrh	r3, [r7, #24]
 80074e0:	4293      	cmp	r3, r2
 80074e2:	bf28      	it	cs
 80074e4:	4613      	movcs	r3, r2
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 80074ea:	2300      	movs	r3, #0
 80074ec:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 80074ee:	4b1b      	ldr	r3, [pc, #108]	@ (800755c <data_stage_xact+0x9c>)
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d01e      	beq.n	800753a <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 80074fc:	2380      	movs	r3, #128	@ 0x80
 80074fe:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 8007500:	8bbb      	ldrh	r3, [r7, #28]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d019      	beq.n	800753a <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 8007506:	4b15      	ldr	r3, [pc, #84]	@ (800755c <data_stage_xact+0x9c>)
 8007508:	689a      	ldr	r2, [r3, #8]
 800750a:	8bbb      	ldrh	r3, [r7, #28]
 800750c:	4914      	ldr	r1, [pc, #80]	@ (8007560 <data_stage_xact+0xa0>)
 800750e:	6179      	str	r1, [r7, #20]
 8007510:	2140      	movs	r1, #64	@ 0x40
 8007512:	6139      	str	r1, [r7, #16]
 8007514:	60fa      	str	r2, [r7, #12]
 8007516:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	429a      	cmp	r2, r3
 800751e:	d202      	bcs.n	8007526 <data_stage_xact+0x66>
    return -1;
 8007520:	f04f 33ff 	mov.w	r3, #4294967295
 8007524:	e005      	b.n	8007532 <data_stage_xact+0x72>
  memcpy(dest, src, count);
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	68f9      	ldr	r1, [r7, #12]
 800752a:	6978      	ldr	r0, [r7, #20]
 800752c:	f002 fa7a 	bl	8009a24 <memcpy>
  return 0;
 8007530:	2300      	movs	r3, #0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <data_stage_xact+0x7a>
 8007536:	2300      	movs	r3, #0
 8007538:	e00b      	b.n	8007552 <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 800753a:	8bbb      	ldrh	r3, [r7, #28]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <data_stage_xact+0x84>
 8007540:	4a07      	ldr	r2, [pc, #28]	@ (8007560 <data_stage_xact+0xa0>)
 8007542:	e000      	b.n	8007546 <data_stage_xact+0x86>
 8007544:	2200      	movs	r2, #0
 8007546:	8bbb      	ldrh	r3, [r7, #28]
 8007548:	7ff9      	ldrb	r1, [r7, #31]
 800754a:	79f8      	ldrb	r0, [r7, #7]
 800754c:	f7ff fe22 	bl	8007194 <usbd_edpt_xfer>
 8007550:	4603      	mov	r3, r0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3720      	adds	r7, #32
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	20000b58 	.word	0x20000b58
 8007560:	20000b6c 	.word	0x20000b6c

08007564 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 8007564:	b580      	push	{r7, lr}
 8007566:	b088      	sub	sp, #32
 8007568:	af00      	add	r7, sp, #0
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	607a      	str	r2, [r7, #4]
 800756e:	461a      	mov	r2, r3
 8007570:	4603      	mov	r3, r0
 8007572:	73fb      	strb	r3, [r7, #15]
 8007574:	4613      	mov	r3, r2
 8007576:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 8007578:	4b30      	ldr	r3, [pc, #192]	@ (800763c <tud_control_xfer+0xd8>)
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	6810      	ldr	r0, [r2, #0]
 800757e:	6851      	ldr	r1, [r2, #4]
 8007580:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 8007582:	4a2e      	ldr	r2, [pc, #184]	@ (800763c <tud_control_xfer+0xd8>)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8007588:	4b2c      	ldr	r3, [pc, #176]	@ (800763c <tud_control_xfer+0xd8>)
 800758a:	2200      	movs	r2, #0
 800758c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	88db      	ldrh	r3, [r3, #6]
 8007592:	b29a      	uxth	r2, r3
 8007594:	89bb      	ldrh	r3, [r7, #12]
 8007596:	827b      	strh	r3, [r7, #18]
 8007598:	4613      	mov	r3, r2
 800759a:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800759c:	8a7a      	ldrh	r2, [r7, #18]
 800759e:	8a3b      	ldrh	r3, [r7, #16]
 80075a0:	4293      	cmp	r3, r2
 80075a2:	bf28      	it	cs
 80075a4:	4613      	movcs	r3, r2
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	4b24      	ldr	r3, [pc, #144]	@ (800763c <tud_control_xfer+0xd8>)
 80075aa:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	88db      	ldrh	r3, [r3, #6]
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d026      	beq.n	8007604 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 80075b6:	4b21      	ldr	r3, [pc, #132]	@ (800763c <tud_control_xfer+0xd8>)
 80075b8:	899b      	ldrh	r3, [r3, #12]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00d      	beq.n	80075da <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10a      	bne.n	80075da <tud_control_xfer+0x76>
 80075c4:	4b1e      	ldr	r3, [pc, #120]	@ (8007640 <tud_control_xfer+0xdc>)
 80075c6:	61bb      	str	r3, [r7, #24]
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d000      	beq.n	80075d6 <tud_control_xfer+0x72>
 80075d4:	be00      	bkpt	0x0000
 80075d6:	2300      	movs	r3, #0
 80075d8:	e02b      	b.n	8007632 <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 80075da:	7bfb      	ldrb	r3, [r7, #15]
 80075dc:	4618      	mov	r0, r3
 80075de:	f7ff ff6f 	bl	80074c0 <data_stage_xact>
 80075e2:	4603      	mov	r3, r0
 80075e4:	f083 0301 	eor.w	r3, r3, #1
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d020      	beq.n	8007630 <tud_control_xfer+0xcc>
 80075ee:	4b14      	ldr	r3, [pc, #80]	@ (8007640 <tud_control_xfer+0xdc>)
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d000      	beq.n	8007600 <tud_control_xfer+0x9c>
 80075fe:	be00      	bkpt	0x0000
 8007600:	2300      	movs	r3, #0
 8007602:	e016      	b.n	8007632 <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	68b9      	ldr	r1, [r7, #8]
 8007608:	4618      	mov	r0, r3
 800760a:	f7ff ff1d 	bl	8007448 <status_stage_xact>
 800760e:	4603      	mov	r3, r0
 8007610:	f083 0301 	eor.w	r3, r3, #1
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00a      	beq.n	8007630 <tud_control_xfer+0xcc>
 800761a:	4b09      	ldr	r3, [pc, #36]	@ (8007640 <tud_control_xfer+0xdc>)
 800761c:	61fb      	str	r3, [r7, #28]
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	d000      	beq.n	800762c <tud_control_xfer+0xc8>
 800762a:	be00      	bkpt	0x0000
 800762c:	2300      	movs	r3, #0
 800762e:	e000      	b.n	8007632 <tud_control_xfer+0xce>
  }

  return true;
 8007630:	2301      	movs	r3, #1
}
 8007632:	4618      	mov	r0, r3
 8007634:	3720      	adds	r7, #32
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	20000b58 	.word	0x20000b58
 8007640:	e000edf0 	.word	0xe000edf0

08007644 <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 8007644:	b580      	push	{r7, lr}
 8007646:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8007648:	2214      	movs	r2, #20
 800764a:	2100      	movs	r1, #0
 800764c:	4802      	ldr	r0, [pc, #8]	@ (8007658 <usbd_control_reset+0x14>)
 800764e:	f002 f9bc 	bl	80099ca <memset>
}
 8007652:	bf00      	nop
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	20000b58 	.word	0x20000b58

0800765c <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8007664:	4a04      	ldr	r2, [pc, #16]	@ (8007678 <usbd_control_set_complete_callback+0x1c>)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6113      	str	r3, [r2, #16]
}
 800766a:	bf00      	nop
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	20000b58 	.word	0x20000b58

0800767c <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 8007684:	4b09      	ldr	r3, [pc, #36]	@ (80076ac <usbd_control_set_request+0x30>)
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	6810      	ldr	r0, [r2, #0]
 800768a:	6851      	ldr	r1, [r2, #4]
 800768c:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800768e:	4b07      	ldr	r3, [pc, #28]	@ (80076ac <usbd_control_set_request+0x30>)
 8007690:	2200      	movs	r2, #0
 8007692:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8007694:	4b05      	ldr	r3, [pc, #20]	@ (80076ac <usbd_control_set_request+0x30>)
 8007696:	2200      	movs	r2, #0
 8007698:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800769a:	4b04      	ldr	r3, [pc, #16]	@ (80076ac <usbd_control_set_request+0x30>)
 800769c:	2200      	movs	r2, #0
 800769e:	819a      	strh	r2, [r3, #12]
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	20000b58 	.word	0x20000b58

080076b0 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b088      	sub	sp, #32
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	603b      	str	r3, [r7, #0]
 80076b8:	4603      	mov	r3, r0
 80076ba:	71fb      	strb	r3, [r7, #7]
 80076bc:	460b      	mov	r3, r1
 80076be:	71bb      	strb	r3, [r7, #6]
 80076c0:	4613      	mov	r3, r2
 80076c2:	717b      	strb	r3, [r7, #5]
 80076c4:	79bb      	ldrb	r3, [r7, #6]
 80076c6:	73fb      	strb	r3, [r7, #15]
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
 80076ca:	09db      	lsrs	r3, r3, #7
 80076cc:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 80076ce:	4a4f      	ldr	r2, [pc, #316]	@ (800780c <usbd_control_xfer_cb+0x15c>)
 80076d0:	7812      	ldrb	r2, [r2, #0]
 80076d2:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80076d6:	b2d2      	uxtb	r2, r2
 80076d8:	4293      	cmp	r3, r2
 80076da:	d01e      	beq.n	800771a <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00a      	beq.n	80076f8 <usbd_control_xfer_cb+0x48>
 80076e2:	4b4b      	ldr	r3, [pc, #300]	@ (8007810 <usbd_control_xfer_cb+0x160>)
 80076e4:	613b      	str	r3, [r7, #16]
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d000      	beq.n	80076f4 <usbd_control_xfer_cb+0x44>
 80076f2:	be00      	bkpt	0x0000
 80076f4:	2300      	movs	r3, #0
 80076f6:	e084      	b.n	8007802 <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 80076f8:	79fb      	ldrb	r3, [r7, #7]
 80076fa:	4944      	ldr	r1, [pc, #272]	@ (800780c <usbd_control_xfer_cb+0x15c>)
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7ff fe97 	bl	8007430 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 8007702:	4b42      	ldr	r3, [pc, #264]	@ (800780c <usbd_control_xfer_cb+0x15c>)
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d005      	beq.n	8007716 <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 800770a:	4b40      	ldr	r3, [pc, #256]	@ (800780c <usbd_control_xfer_cb+0x15c>)
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	79f8      	ldrb	r0, [r7, #7]
 8007710:	4a3e      	ldr	r2, [pc, #248]	@ (800780c <usbd_control_xfer_cb+0x15c>)
 8007712:	2103      	movs	r1, #3
 8007714:	4798      	blx	r3
    }

    return true;
 8007716:	2301      	movs	r3, #1
 8007718:	e073      	b.n	8007802 <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 800771a:	4b3c      	ldr	r3, [pc, #240]	@ (800780c <usbd_control_xfer_cb+0x15c>)
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10c      	bne.n	8007742 <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 8007728:	4b38      	ldr	r3, [pc, #224]	@ (800780c <usbd_control_xfer_cb+0x15c>)
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <usbd_control_xfer_cb+0x84>
 8007730:	2300      	movs	r3, #0
 8007732:	e066      	b.n	8007802 <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 8007734:	4b35      	ldr	r3, [pc, #212]	@ (800780c <usbd_control_xfer_cb+0x15c>)
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	4936      	ldr	r1, [pc, #216]	@ (8007814 <usbd_control_xfer_cb+0x164>)
 800773c:	4618      	mov	r0, r3
 800773e:	f002 f971 	bl	8009a24 <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8007742:	4b32      	ldr	r3, [pc, #200]	@ (800780c <usbd_control_xfer_cb+0x15c>)
 8007744:	89da      	ldrh	r2, [r3, #14]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	b29b      	uxth	r3, r3
 800774a:	4413      	add	r3, r2
 800774c:	b29a      	uxth	r2, r3
 800774e:	4b2f      	ldr	r3, [pc, #188]	@ (800780c <usbd_control_xfer_cb+0x15c>)
 8007750:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8007752:	4b2e      	ldr	r3, [pc, #184]	@ (800780c <usbd_control_xfer_cb+0x15c>)
 8007754:	689a      	ldr	r2, [r3, #8]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	4413      	add	r3, r2
 800775a:	4a2c      	ldr	r2, [pc, #176]	@ (800780c <usbd_control_xfer_cb+0x15c>)
 800775c:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 800775e:	4b2b      	ldr	r3, [pc, #172]	@ (800780c <usbd_control_xfer_cb+0x15c>)
 8007760:	88da      	ldrh	r2, [r3, #6]
 8007762:	4b2a      	ldr	r3, [pc, #168]	@ (800780c <usbd_control_xfer_cb+0x15c>)
 8007764:	89db      	ldrh	r3, [r3, #14]
 8007766:	429a      	cmp	r2, r3
 8007768:	d002      	beq.n	8007770 <usbd_control_xfer_cb+0xc0>
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2b3f      	cmp	r3, #63	@ 0x3f
 800776e:	d831      	bhi.n	80077d4 <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 8007770:	2301      	movs	r3, #1
 8007772:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 8007774:	4b25      	ldr	r3, [pc, #148]	@ (800780c <usbd_control_xfer_cb+0x15c>)
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d007      	beq.n	800778c <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 800777c:	4b23      	ldr	r3, [pc, #140]	@ (800780c <usbd_control_xfer_cb+0x15c>)
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	79f8      	ldrb	r0, [r7, #7]
 8007782:	4a22      	ldr	r2, [pc, #136]	@ (800780c <usbd_control_xfer_cb+0x15c>)
 8007784:	2102      	movs	r1, #2
 8007786:	4798      	blx	r3
 8007788:	4603      	mov	r3, r0
 800778a:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 800778c:	7ffb      	ldrb	r3, [r7, #31]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d015      	beq.n	80077be <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 8007792:	79fb      	ldrb	r3, [r7, #7]
 8007794:	491d      	ldr	r1, [pc, #116]	@ (800780c <usbd_control_xfer_cb+0x15c>)
 8007796:	4618      	mov	r0, r3
 8007798:	f7ff fe56 	bl	8007448 <status_stage_xact>
 800779c:	4603      	mov	r3, r0
 800779e:	f083 0301 	eor.w	r3, r3, #1
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d02a      	beq.n	80077fe <usbd_control_xfer_cb+0x14e>
 80077a8:	4b19      	ldr	r3, [pc, #100]	@ (8007810 <usbd_control_xfer_cb+0x160>)
 80077aa:	617b      	str	r3, [r7, #20]
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d000      	beq.n	80077ba <usbd_control_xfer_cb+0x10a>
 80077b8:	be00      	bkpt	0x0000
 80077ba:	2300      	movs	r3, #0
 80077bc:	e021      	b.n	8007802 <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	2100      	movs	r1, #0
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 ff30 	bl	8008628 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 80077c8:	79fb      	ldrb	r3, [r7, #7]
 80077ca:	2180      	movs	r1, #128	@ 0x80
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 ff2b 	bl	8008628 <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 80077d2:	e014      	b.n	80077fe <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 80077d4:	79fb      	ldrb	r3, [r7, #7]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7ff fe72 	bl	80074c0 <data_stage_xact>
 80077dc:	4603      	mov	r3, r0
 80077de:	f083 0301 	eor.w	r3, r3, #1
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00b      	beq.n	8007800 <usbd_control_xfer_cb+0x150>
 80077e8:	4b09      	ldr	r3, [pc, #36]	@ (8007810 <usbd_control_xfer_cb+0x160>)
 80077ea:	61bb      	str	r3, [r7, #24]
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d000      	beq.n	80077fa <usbd_control_xfer_cb+0x14a>
 80077f8:	be00      	bkpt	0x0000
 80077fa:	2300      	movs	r3, #0
 80077fc:	e001      	b.n	8007802 <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 80077fe:	bf00      	nop
  }

  return true;
 8007800:	2301      	movs	r3, #1
}
 8007802:	4618      	mov	r0, r3
 8007804:	3720      	adds	r7, #32
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20000b58 	.word	0x20000b58
 8007810:	e000edf0 	.word	0xe000edf0
 8007814:	20000b6c 	.word	0x20000b6c

08007818 <__NVIC_EnableIRQ>:
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	4603      	mov	r3, r0
 8007820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007826:	2b00      	cmp	r3, #0
 8007828:	db0b      	blt.n	8007842 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800782a:	79fb      	ldrb	r3, [r7, #7]
 800782c:	f003 021f 	and.w	r2, r3, #31
 8007830:	4907      	ldr	r1, [pc, #28]	@ (8007850 <__NVIC_EnableIRQ+0x38>)
 8007832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007836:	095b      	lsrs	r3, r3, #5
 8007838:	2001      	movs	r0, #1
 800783a:	fa00 f202 	lsl.w	r2, r0, r2
 800783e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007842:	bf00      	nop
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	e000e100 	.word	0xe000e100

08007854 <__NVIC_DisableIRQ>:
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	4603      	mov	r3, r0
 800785c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800785e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007862:	2b00      	cmp	r3, #0
 8007864:	db12      	blt.n	800788c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007866:	79fb      	ldrb	r3, [r7, #7]
 8007868:	f003 021f 	and.w	r2, r3, #31
 800786c:	490a      	ldr	r1, [pc, #40]	@ (8007898 <__NVIC_DisableIRQ+0x44>)
 800786e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007872:	095b      	lsrs	r3, r3, #5
 8007874:	2001      	movs	r0, #1
 8007876:	fa00 f202 	lsl.w	r2, r0, r2
 800787a:	3320      	adds	r3, #32
 800787c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007880:	f3bf 8f4f 	dsb	sy
}
 8007884:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007886:	f3bf 8f6f 	isb	sy
}
 800788a:	bf00      	nop
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	e000e100 	.word	0xe000e100

0800789c <dma_setup_prepare>:
  // Internal DMA only
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	4603      	mov	r3, r0
 80078a4:	71fb      	strb	r3, [r7, #7]
 80078a6:	79fb      	ldrb	r3, [r7, #7]
 80078a8:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80078aa:	7afb      	ldrb	r3, [r7, #11]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d001      	beq.n	80078b4 <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 80078b0:	2300      	movs	r3, #0
 80078b2:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80078b4:	7afb      	ldrb	r3, [r7, #11]
 80078b6:	4a13      	ldr	r2, [pc, #76]	@ (8007904 <dma_setup_prepare+0x68>)
 80078b8:	011b      	lsls	r3, r3, #4
 80078ba:	4413      	add	r3, r2
 80078bc:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80078be:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c4:	4a10      	ldr	r2, [pc, #64]	@ (8007908 <dma_setup_prepare+0x6c>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d904      	bls.n	80078d4 <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	db10      	blt.n	80078f6 <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	4a0d      	ldr	r2, [pc, #52]	@ (800790c <dma_setup_prepare+0x70>)
 80078d8:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 80078dc:	4a0c      	ldr	r2, [pc, #48]	@ (8007910 <dma_setup_prepare+0x74>)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 80078ea:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 80078f4:	e000      	b.n	80078f8 <dma_setup_prepare+0x5c>
      return;
 80078f6:	bf00      	nop
}
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	08009c38 	.word	0x08009c38
 8007908:	4f543009 	.word	0x4f543009
 800790c:	20080008 	.word	0x20080008
 8007910:	20000c34 	.word	0x20000c34

08007914 <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 8007914:	b480      	push	{r7}
 8007916:	b091      	sub	sp, #68	@ 0x44
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	71fb      	strb	r3, [r7, #7]
 800791e:	460b      	mov	r3, r1
 8007920:	71bb      	strb	r3, [r7, #6]
 8007922:	4613      	mov	r3, r2
 8007924:	80bb      	strh	r3, [r7, #4]
 8007926:	79fb      	ldrb	r3, [r7, #7]
 8007928:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800792a:	7e7b      	ldrb	r3, [r7, #25]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <dfifo_alloc+0x20>
    rhport = 0;
 8007930:	2300      	movs	r3, #0
 8007932:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007934:	7e7b      	ldrb	r3, [r7, #25]
 8007936:	4a65      	ldr	r2, [pc, #404]	@ (8007acc <dfifo_alloc+0x1b8>)
 8007938:	011b      	lsls	r3, r3, #4
 800793a:	4413      	add	r3, r2
 800793c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800793e:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8007940:	79fb      	ldrb	r3, [r7, #7]
 8007942:	011b      	lsls	r3, r3, #4
 8007944:	4a61      	ldr	r2, [pc, #388]	@ (8007acc <dfifo_alloc+0x1b8>)
 8007946:	4413      	add	r3, r2
 8007948:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 800794a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800794c:	7a1b      	ldrb	r3, [r3, #8]
 800794e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8007952:	79bb      	ldrb	r3, [r7, #6]
 8007954:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007956:	7ebb      	ldrb	r3, [r7, #26]
 8007958:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800795c:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 800795e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8007962:	79bb      	ldrb	r3, [r7, #6]
 8007964:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007966:	7efb      	ldrb	r3, [r7, #27]
 8007968:	09db      	lsrs	r3, r3, #7
 800796a:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 800796c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 8007970:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8007974:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007978:	429a      	cmp	r2, r3
 800797a:	d30a      	bcc.n	8007992 <dfifo_alloc+0x7e>
 800797c:	4b54      	ldr	r3, [pc, #336]	@ (8007ad0 <dfifo_alloc+0x1bc>)
 800797e:	61fb      	str	r3, [r7, #28]
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	2b00      	cmp	r3, #0
 800798a:	d000      	beq.n	800798e <dfifo_alloc+0x7a>
 800798c:	be00      	bkpt	0x0000
 800798e:	2300      	movs	r3, #0
 8007990:	e095      	b.n	8007abe <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 8007992:	88bb      	ldrh	r3, [r7, #4]
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	2304      	movs	r3, #4
 8007998:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	4413      	add	r3, r2
 80079a0:	1e5a      	subs	r2, r3, #1
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 80079aa:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d12a      	bne.n	8007a08 <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 80079b2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	81fb      	strh	r3, [r7, #14]
 80079ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80079be:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 80079c0:	89fb      	ldrh	r3, [r7, #14]
 80079c2:	089b      	lsrs	r3, r3, #2
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	f103 0208 	add.w	r2, r3, #8
 80079ca:	7b7b      	ldrb	r3, [r7, #13]
 80079cc:	4413      	add	r3, r2
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	005b      	lsls	r3, r3, #1
 80079d2:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 80079d4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 80079d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80079dc:	429a      	cmp	r2, r3
 80079de:	d26d      	bcs.n	8007abc <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 80079e0:	4b3c      	ldr	r3, [pc, #240]	@ (8007ad4 <dfifo_alloc+0x1c0>)
 80079e2:	889b      	ldrh	r3, [r3, #4]
 80079e4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d90a      	bls.n	8007a00 <dfifo_alloc+0xec>
 80079ea:	4b39      	ldr	r3, [pc, #228]	@ (8007ad0 <dfifo_alloc+0x1bc>)
 80079ec:	623b      	str	r3, [r7, #32]
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d000      	beq.n	80079fc <dfifo_alloc+0xe8>
 80079fa:	be00      	bkpt	0x0000
 80079fc:	2300      	movs	r3, #0
 80079fe:	e05e      	b.n	8007abe <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 8007a00:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a04:	625a      	str	r2, [r3, #36]	@ 0x24
 8007a06:	e059      	b.n	8007abc <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 8007a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a0a:	7a5b      	ldrb	r3, [r3, #9]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d016      	beq.n	8007a3e <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 8007a10:	4b30      	ldr	r3, [pc, #192]	@ (8007ad4 <dfifo_alloc+0x1c0>)
 8007a12:	799a      	ldrb	r2, [r3, #6]
 8007a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a16:	7a5b      	ldrb	r3, [r3, #9]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d30a      	bcc.n	8007a32 <dfifo_alloc+0x11e>
 8007a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8007ad0 <dfifo_alloc+0x1bc>)
 8007a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0301 	and.w	r3, r3, #1
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d000      	beq.n	8007a2e <dfifo_alloc+0x11a>
 8007a2c:	be00      	bkpt	0x0000
 8007a2e:	2300      	movs	r3, #0
 8007a30:	e045      	b.n	8007abe <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 8007a32:	4b28      	ldr	r3, [pc, #160]	@ (8007ad4 <dfifo_alloc+0x1c0>)
 8007a34:	799b      	ldrb	r3, [r3, #6]
 8007a36:	3301      	adds	r3, #1
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	4b26      	ldr	r3, [pc, #152]	@ (8007ad4 <dfifo_alloc+0x1c0>)
 8007a3c:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 8007a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d102      	bne.n	8007a50 <dfifo_alloc+0x13c>
      fifo_size *= 2;
 8007a4a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 8007a50:	4b20      	ldr	r3, [pc, #128]	@ (8007ad4 <dfifo_alloc+0x1c0>)
 8007a52:	889b      	ldrh	r3, [r3, #4]
 8007a54:	4619      	mov	r1, r3
 8007a56:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a5c:	4413      	add	r3, r2
 8007a5e:	4299      	cmp	r1, r3
 8007a60:	d20a      	bcs.n	8007a78 <dfifo_alloc+0x164>
 8007a62:	4b1b      	ldr	r3, [pc, #108]	@ (8007ad0 <dfifo_alloc+0x1bc>)
 8007a64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d000      	beq.n	8007a74 <dfifo_alloc+0x160>
 8007a72:	be00      	bkpt	0x0000
 8007a74:	2300      	movs	r3, #0
 8007a76:	e022      	b.n	8007abe <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 8007a78:	4b16      	ldr	r3, [pc, #88]	@ (8007ad4 <dfifo_alloc+0x1c0>)
 8007a7a:	889a      	ldrh	r2, [r3, #4]
 8007a7c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	4b14      	ldr	r3, [pc, #80]	@ (8007ad4 <dfifo_alloc+0x1c0>)
 8007a84:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 8007a86:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d108      	bne.n	8007aa0 <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 8007a8e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007a90:	041b      	lsls	r3, r3, #16
 8007a92:	4a10      	ldr	r2, [pc, #64]	@ (8007ad4 <dfifo_alloc+0x1c0>)
 8007a94:	8892      	ldrh	r2, [r2, #4]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	461a      	mov	r2, r3
 8007a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a9e:	e00d      	b.n	8007abc <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 8007aa0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007aa2:	041b      	lsls	r3, r3, #16
 8007aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8007ad4 <dfifo_alloc+0x1c0>)
 8007aa6:	8892      	ldrh	r2, [r2, #4]
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	4611      	mov	r1, r2
 8007ab2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ab4:	3340      	adds	r3, #64	@ 0x40
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4413      	add	r3, r2
 8007aba:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 8007abc:	2301      	movs	r3, #1
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3744      	adds	r7, #68	@ 0x44
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	08009c38 	.word	0x08009c38
 8007ad0:	e000edf0 	.word	0xe000edf0
 8007ad4:	20000c2c 	.word	0x20000c2c

08007ad8 <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b088      	sub	sp, #32
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8007ae2:	79fb      	ldrb	r3, [r7, #7]
 8007ae4:	011b      	lsls	r3, r3, #4
 8007ae6:	4a27      	ldr	r2, [pc, #156]	@ (8007b84 <dfifo_device_init+0xac>)
 8007ae8:	4413      	add	r3, r2
 8007aea:	61fb      	str	r3, [r7, #28]
 8007aec:	79fb      	ldrb	r3, [r7, #7]
 8007aee:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007af0:	7b3b      	ldrb	r3, [r7, #12]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <dfifo_device_init+0x22>
    rhport = 0;
 8007af6:	2300      	movs	r3, #0
 8007af8:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007afa:	7b3b      	ldrb	r3, [r7, #12]
 8007afc:	4a21      	ldr	r2, [pc, #132]	@ (8007b84 <dfifo_device_init+0xac>)
 8007afe:	011b      	lsls	r3, r3, #4
 8007b00:	4413      	add	r3, r2
 8007b02:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007b04:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	7a1b      	ldrb	r3, [r3, #8]
 8007b0a:	2240      	movs	r2, #64	@ 0x40
 8007b0c:	81fa      	strh	r2, [r7, #14]
 8007b0e:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8007b10:	89fb      	ldrh	r3, [r7, #14]
 8007b12:	089b      	lsrs	r3, r3, #2
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	f103 0208 	add.w	r2, r3, #8
 8007b1a:	7b7b      	ldrb	r3, [r7, #13]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8007b24:	461a      	mov	r2, r3
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b32:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8007b34:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 8007b36:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	089b      	lsrs	r3, r3, #2
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	4b11      	ldr	r3, [pc, #68]	@ (8007b88 <dfifo_device_init+0xb0>)
 8007b42:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d009      	beq.n	8007b5e <dfifo_device_init+0x86>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 8007b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007b88 <dfifo_device_init+0xb0>)
 8007b4c:	889a      	ldrh	r2, [r3, #4]
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	7a1b      	ldrb	r3, [r3, #8]
 8007b52:	005b      	lsls	r3, r3, #1
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b88 <dfifo_device_init+0xb0>)
 8007b5c:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 8007b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8007b88 <dfifo_device_init+0xb0>)
 8007b60:	889b      	ldrh	r3, [r3, #4]
 8007b62:	461a      	mov	r2, r3
 8007b64:	4613      	mov	r3, r2
 8007b66:	041b      	lsls	r3, r3, #16
 8007b68:	441a      	add	r2, r3
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 8007b6e:	79fb      	ldrb	r3, [r7, #7]
 8007b70:	2240      	movs	r2, #64	@ 0x40
 8007b72:	2180      	movs	r1, #128	@ 0x80
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7ff fecd 	bl	8007914 <dfifo_alloc>
}
 8007b7a:	bf00      	nop
 8007b7c:	3720      	adds	r7, #32
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	08009c38 	.word	0x08009c38
 8007b88:	20000c2c 	.word	0x20000c2c

08007b8c <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 8007b8c:	b480      	push	{r7}
 8007b8e:	b08b      	sub	sp, #44	@ 0x2c
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	4603      	mov	r3, r0
 8007b94:	6039      	str	r1, [r7, #0]
 8007b96:	71fb      	strb	r3, [r7, #7]
 8007b98:	79fb      	ldrb	r3, [r7, #7]
 8007b9a:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007b9c:	7c7b      	ldrb	r3, [r7, #17]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d001      	beq.n	8007ba6 <edpt_activate+0x1a>
    rhport = 0;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007ba6:	7c7b      	ldrb	r3, [r7, #17]
 8007ba8:	4a45      	ldr	r2, [pc, #276]	@ (8007cc0 <edpt_activate+0x134>)
 8007baa:	011b      	lsls	r3, r3, #4
 8007bac:	4413      	add	r3, r2
 8007bae:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	789b      	ldrb	r3, [r3, #2]
 8007bb6:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007bb8:	7cbb      	ldrb	r3, [r7, #18]
 8007bba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	789b      	ldrb	r3, [r3, #2]
 8007bc8:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007bca:	7cfb      	ldrb	r3, [r7, #19]
 8007bcc:	09db      	lsrs	r3, r3, #7
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8007bd4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8007bd8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8007bdc:	0052      	lsls	r2, r2, #1
 8007bde:	4413      	add	r3, r2
 8007be0:	011b      	lsls	r3, r3, #4
 8007be2:	4a38      	ldr	r2, [pc, #224]	@ (8007cc4 <edpt_activate+0x138>)
 8007be4:	4413      	add	r3, r2
 8007be6:	61fb      	str	r3, [r7, #28]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	889b      	ldrh	r3, [r3, #4]
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bf6:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	799a      	ldrb	r2, [r3, #6]
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	731a      	strb	r2, [r3, #12]

  // Endpoint control
  dwc2_depctl_t depctl = {.value = 0};
 8007c04:	2300      	movs	r3, #0
 8007c06:	60fb      	str	r3, [r7, #12]
  depctl.mps = xfer->max_size;
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	895b      	ldrh	r3, [r3, #10]
 8007c0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	89bb      	ldrh	r3, [r7, #12]
 8007c14:	f362 030a 	bfi	r3, r2, #0, #11
 8007c18:	81bb      	strh	r3, [r7, #12]
  depctl.active = 1;
 8007c1a:	7b7b      	ldrb	r3, [r7, #13]
 8007c1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c20:	737b      	strb	r3, [r7, #13]
  depctl.type = p_endpoint_desc->bmAttributes.xfer;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	78db      	ldrb	r3, [r3, #3]
 8007c26:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	f362 0383 	bfi	r3, r2, #2, #2
 8007c32:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	78db      	ldrb	r3, [r3, #3]
 8007c38:	f003 0303 	and.w	r3, r3, #3
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d003      	beq.n	8007c4a <edpt_activate+0xbe>
    depctl.set_data0_iso_even = 1;
 8007c42:	7bfb      	ldrb	r3, [r7, #15]
 8007c44:	f043 0310 	orr.w	r3, r3, #16
 8007c48:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 8007c4a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d108      	bne.n	8007c64 <edpt_activate+0xd8>
    depctl.tx_fifo_num = epnum;
 8007c52:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c56:	f003 030f 	and.w	r3, r3, #15
 8007c5a:	b2da      	uxtb	r2, r3
 8007c5c:	89fb      	ldrh	r3, [r7, #14]
 8007c5e:	f362 1389 	bfi	r3, r2, #6, #4
 8007c62:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8007c64:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	bf14      	ite	ne
 8007c6c:	2301      	movne	r3, #1
 8007c6e:	2300      	moveq	r3, #0
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	461a      	mov	r2, r3
 8007c74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c78:	0112      	lsls	r2, r2, #4
 8007c7a:	4413      	add	r3, r2
 8007c7c:	3348      	adds	r3, #72	@ 0x48
 8007c7e:	015b      	lsls	r3, r3, #5
 8007c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c82:	4413      	add	r3, r2
 8007c84:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8e:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 8007c92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c96:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8007c9a:	2901      	cmp	r1, #1
 8007c9c:	d101      	bne.n	8007ca2 <edpt_activate+0x116>
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	e000      	b.n	8007ca4 <edpt_activate+0x118>
 8007ca2:	2110      	movs	r1, #16
 8007ca4:	440b      	add	r3, r1
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cac:	431a      	orrs	r2, r3
 8007cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb0:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 8007cb4:	bf00      	nop
 8007cb6:	372c      	adds	r7, #44	@ 0x2c
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	08009c38 	.word	0x08009c38
 8007cc4:	20000bac 	.word	0x20000bac

08007cc8 <edpt_disable>:

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 8007cc8:	b480      	push	{r7}
 8007cca:	b089      	sub	sp, #36	@ 0x24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	4603      	mov	r3, r0
 8007cd0:	71fb      	strb	r3, [r7, #7]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	71bb      	strb	r3, [r7, #6]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	717b      	strb	r3, [r7, #5]
 8007cda:	79fb      	ldrb	r3, [r7, #7]
 8007cdc:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007cde:	7c7b      	ldrb	r3, [r7, #17]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <edpt_disable+0x20>
    rhport = 0;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007ce8:	7c7b      	ldrb	r3, [r7, #17]
 8007cea:	4a5b      	ldr	r2, [pc, #364]	@ (8007e58 <edpt_disable+0x190>)
 8007cec:	011b      	lsls	r3, r3, #4
 8007cee:	4413      	add	r3, r2
 8007cf0:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007cf2:	61fb      	str	r3, [r7, #28]
 8007cf4:	79bb      	ldrb	r3, [r7, #6]
 8007cf6:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007cf8:	7cbb      	ldrb	r3, [r7, #18]
 8007cfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cfe:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8007d00:	76fb      	strb	r3, [r7, #27]
 8007d02:	79bb      	ldrb	r3, [r7, #6]
 8007d04:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007d06:	7cfb      	ldrb	r3, [r7, #19]
 8007d08:	09db      	lsrs	r3, r3, #7
 8007d0a:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8007d0c:	76bb      	strb	r3, [r7, #26]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8007d0e:	7ebb      	ldrb	r3, [r7, #26]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	bf14      	ite	ne
 8007d14:	2301      	movne	r3, #1
 8007d16:	2300      	moveq	r3, #0
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	7efb      	ldrb	r3, [r7, #27]
 8007d1e:	0112      	lsls	r2, r2, #4
 8007d20:	4413      	add	r3, r2
 8007d22:	3348      	adds	r3, #72	@ 0x48
 8007d24:	015b      	lsls	r3, r3, #5
 8007d26:	69fa      	ldr	r2, [r7, #28]
 8007d28:	4413      	add	r3, r2
 8007d2a:	617b      	str	r3, [r7, #20]

  if (dir == TUSB_DIR_IN) {
 8007d2c:	7ebb      	ldrb	r3, [r7, #26]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d149      	bne.n	8007dc6 <edpt_disable+0xfe>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 8007d32:	7efb      	ldrb	r3, [r7, #27]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d003      	beq.n	8007d40 <edpt_disable+0x78>
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	db0d      	blt.n	8007d5c <edpt_disable+0x94>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	797a      	ldrb	r2, [r7, #5]
 8007d46:	2a00      	cmp	r2, #0
 8007d48:	d002      	beq.n	8007d50 <edpt_disable+0x88>
 8007d4a:	f04f 6202 	mov.w	r2, #136314880	@ 0x8200000
 8007d4e:	e001      	b.n	8007d54 <edpt_disable+0x8c>
 8007d50:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007d54:	431a      	orrs	r2, r3
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	601a      	str	r2, [r3, #0]
 8007d5a:	e022      	b.n	8007da2 <edpt_disable+0xda>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      dep->diepctl |= DIEPCTL_SNAK;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 8007d68:	bf00      	nop
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d0f9      	beq.n	8007d6a <edpt_disable+0xa2>

      // Disable the endpoint.
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	797a      	ldrb	r2, [r7, #5]
 8007d7c:	2a00      	cmp	r2, #0
 8007d7e:	d001      	beq.n	8007d84 <edpt_disable+0xbc>
 8007d80:	4a36      	ldr	r2, [pc, #216]	@ (8007e5c <edpt_disable+0x194>)
 8007d82:	e001      	b.n	8007d88 <edpt_disable+0xc0>
 8007d84:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007d88:	431a      	orrs	r2, r3
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 8007d8e:	bf00      	nop
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	f003 0302 	and.w	r3, r3, #2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d0f9      	beq.n	8007d90 <edpt_disable+0xc8>

      dep->diepint = DIEPINT_EPDISD;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	609a      	str	r2, [r3, #8]
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	60fb      	str	r3, [r7, #12]
 8007da6:	7efb      	ldrb	r3, [r7, #27]
 8007da8:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8007daa:	7afb      	ldrb	r3, [r7, #11]
 8007dac:	019b      	lsls	r3, r3, #6
 8007dae:	f043 0220 	orr.w	r2, r3, #32
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8007db6:	bf00      	nop
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	f003 0320 	and.w	r3, r3, #32
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1f9      	bne.n	8007db8 <edpt_disable+0xf0>
}
 8007dc4:	e041      	b.n	8007e4a <edpt_disable+0x182>

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dfifo_flush_tx(dwc2, epnum);
  } else {
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 8007dc6:	7efb      	ldrb	r3, [r7, #27]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d003      	beq.n	8007dd4 <edpt_disable+0x10c>
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	db0c      	blt.n	8007dee <edpt_disable+0x126>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	797a      	ldrb	r2, [r7, #5]
 8007dda:	2a00      	cmp	r2, #0
 8007ddc:	d002      	beq.n	8007de4 <edpt_disable+0x11c>
 8007dde:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8007de2:	e000      	b.n	8007de6 <edpt_disable+0x11e>
 8007de4:	2200      	movs	r2, #0
 8007de6:	431a      	orrs	r2, r3
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	601a      	str	r2, [r3, #0]
 8007dec:	e02d      	b.n	8007e4a <edpt_disable+0x182>
    } else {
      // Asserting GONAK is required to STALL an OUT endpoint.
      // Simpler to use polling here, we don't use the "B"OUTNAKEFF interrupt
      // anyway, and it can't be cleared by user code. If this while loop never
      // finishes, we have bigger problems than just the stack.
      dwc2->dctl |= DCTL_SGONAK;
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8007df4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 8007dfe:	bf00      	nop
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d0f9      	beq.n	8007e00 <edpt_disable+0x138>

      // Ditto here disable the endpoint.
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	797a      	ldrb	r2, [r7, #5]
 8007e12:	2a00      	cmp	r2, #0
 8007e14:	d001      	beq.n	8007e1a <edpt_disable+0x152>
 8007e16:	4a11      	ldr	r2, [pc, #68]	@ (8007e5c <edpt_disable+0x194>)
 8007e18:	e001      	b.n	8007e1e <edpt_disable+0x156>
 8007e1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	601a      	str	r2, [r3, #0]
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 8007e24:	bf00      	nop
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	f003 0302 	and.w	r3, r3, #2
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d0f9      	beq.n	8007e26 <edpt_disable+0x15e>

      dep->doepint = DOEPINT_EPDISD;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2202      	movs	r2, #2
 8007e36:	609a      	str	r2, [r3, #8]

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8007e3e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
  }
}
 8007e48:	bf00      	nop
 8007e4a:	bf00      	nop
 8007e4c:	3724      	adds	r7, #36	@ 0x24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	08009c38 	.word	0x08009c38
 8007e5c:	40200000 	.word	0x40200000

08007e60 <edpt_schedule_packets>:

// Since this function returns void, it is not possible to return a boolean success message
// We must make sure that this function is not called when the EP is disabled
// Must be called from critical section
static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b090      	sub	sp, #64	@ 0x40
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	4603      	mov	r3, r0
 8007e68:	71fb      	strb	r3, [r7, #7]
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	71bb      	strb	r3, [r7, #6]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	717b      	strb	r3, [r7, #5]
 8007e72:	79fb      	ldrb	r3, [r7, #7]
 8007e74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007e78:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <edpt_schedule_packets+0x26>
    rhport = 0;
 8007e80:	2300      	movs	r3, #0
 8007e82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007e86:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007e8a:	4a65      	ldr	r2, [pc, #404]	@ (8008020 <edpt_schedule_packets+0x1c0>)
 8007e8c:	011b      	lsls	r3, r3, #4
 8007e8e:	4413      	add	r3, r2
 8007e90:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007e92:	63bb      	str	r3, [r7, #56]	@ 0x38
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 8007e94:	79ba      	ldrb	r2, [r7, #6]
 8007e96:	797b      	ldrb	r3, [r7, #5]
 8007e98:	0052      	lsls	r2, r2, #1
 8007e9a:	4413      	add	r3, r2
 8007e9c:	011b      	lsls	r3, r3, #4
 8007e9e:	4a61      	ldr	r2, [pc, #388]	@ (8008024 <edpt_schedule_packets+0x1c4>)
 8007ea0:	4413      	add	r3, r2
 8007ea2:	637b      	str	r3, [r7, #52]	@ 0x34
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8007ea4:	797b      	ldrb	r3, [r7, #5]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	bf14      	ite	ne
 8007eaa:	2301      	movne	r3, #1
 8007eac:	2300      	moveq	r3, #0
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	79bb      	ldrb	r3, [r7, #6]
 8007eb4:	0112      	lsls	r2, r2, #4
 8007eb6:	4413      	add	r3, r2
 8007eb8:	3348      	adds	r3, #72	@ 0x48
 8007eba:	015b      	lsls	r3, r3, #5
 8007ebc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ebe:	4413      	add	r3, r2
 8007ec0:	633b      	str	r3, [r7, #48]	@ 0x30

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 8007ec2:	79bb      	ldrb	r3, [r7, #6]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d11c      	bne.n	8007f02 <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 8007ec8:	797b      	ldrb	r3, [r7, #5]
 8007eca:	4a57      	ldr	r2, [pc, #348]	@ (8008028 <edpt_schedule_packets+0x1c8>)
 8007ecc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8007ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed2:	895b      	ldrh	r3, [r3, #10]
 8007ed4:	853a      	strh	r2, [r7, #40]	@ 0x28
 8007ed6:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007ed8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007eda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007edc:	4293      	cmp	r3, r2
 8007ede:	bf28      	it	cs
 8007ee0:	4613      	movcs	r3, r2
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    _dcd_data.ep0_pending[dir] -= total_bytes;
 8007ee6:	797b      	ldrb	r3, [r7, #5]
 8007ee8:	4a4f      	ldr	r2, [pc, #316]	@ (8008028 <edpt_schedule_packets+0x1c8>)
 8007eea:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007eee:	797b      	ldrb	r3, [r7, #5]
 8007ef0:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8007ef2:	1a8a      	subs	r2, r1, r2
 8007ef4:	b291      	uxth	r1, r2
 8007ef6:	4a4c      	ldr	r2, [pc, #304]	@ (8008028 <edpt_schedule_packets+0x1c8>)
 8007ef8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 8007efc:	2301      	movs	r3, #1
 8007efe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007f00:	e014      	b.n	8007f2c <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 8007f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f04:	891b      	ldrh	r3, [r3, #8]
 8007f06:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 8007f08:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007f0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f0c:	8952      	ldrh	r2, [r2, #10]
 8007f0e:	623b      	str	r3, [r7, #32]
 8007f10:	61fa      	str	r2, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8007f12:	6a3a      	ldr	r2, [r7, #32]
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	4413      	add	r3, r2
 8007f18:	1e5a      	subs	r2, r3, #1
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f20:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if (num_packets == 0) {
 8007f22:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 8007f28:	2301      	movs	r3, #1
 8007f2a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }
  }

  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  dwc2_ep_tsize_t deptsiz = {.value = 0};
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	617b      	str	r3, [r7, #20]
  deptsiz.xfer_size = total_bytes;
 8007f30:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8007f32:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f362 0312 	bfi	r3, r2, #0, #19
 8007f3c:	617b      	str	r3, [r7, #20]
  deptsiz.packet_count = num_packets;
 8007f3e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	8afb      	ldrh	r3, [r7, #22]
 8007f48:	f362 03cc 	bfi	r3, r2, #3, #10
 8007f4c:	82fb      	strh	r3, [r7, #22]
  dep->tsiz = deptsiz.value;
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f52:	611a      	str	r2, [r3, #16]

  // control
  dwc2_depctl_t depctl = {.value = dep->ctl};
 8007f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	613b      	str	r3, [r7, #16]
  depctl.clear_nak = 1;
 8007f5a:	7cfb      	ldrb	r3, [r7, #19]
 8007f5c:	f043 0304 	orr.w	r3, r3, #4
 8007f60:	74fb      	strb	r3, [r7, #19]
  depctl.enable = 1;
 8007f62:	7cfb      	ldrb	r3, [r7, #19]
 8007f64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f68:	74fb      	strb	r3, [r7, #19]
  if (depctl.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 8007f6a:	7cbb      	ldrb	r3, [r7, #18]
 8007f6c:	f003 030c 	and.w	r3, r3, #12
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	d11a      	bne.n	8007fac <edpt_schedule_packets+0x14c>
 8007f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f78:	7b1b      	ldrb	r3, [r3, #12]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d116      	bne.n	8007fac <edpt_schedule_packets+0x14c>
    const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 8007f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f80:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8007f84:	60bb      	str	r3, [r7, #8]
    const uint32_t odd_now = dsts.frame_number & 1u;
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (odd_now) {
 8007f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d004      	beq.n	8007fa4 <edpt_schedule_packets+0x144>
      depctl.set_data0_iso_even = 1;
 8007f9a:	7cfb      	ldrb	r3, [r7, #19]
 8007f9c:	f043 0310 	orr.w	r3, r3, #16
 8007fa0:	74fb      	strb	r3, [r7, #19]
 8007fa2:	e003      	b.n	8007fac <edpt_schedule_packets+0x14c>
    } else {
      depctl.set_data1_iso_odd = 1;
 8007fa4:	7cfb      	ldrb	r3, [r7, #19]
 8007fa6:	f043 0320 	orr.w	r3, r3, #32
 8007faa:	74fb      	strb	r3, [r7, #19]
 8007fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fae:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fb4:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8007fb6:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 8007fb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if(is_dma) {
 8007fbc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d015      	beq.n	8007ff0 <edpt_schedule_packets+0x190>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 8007fc4:	797b      	ldrb	r3, [r7, #5]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d109      	bne.n	8007fde <edpt_schedule_packets+0x17e>
 8007fca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d006      	beq.n	8007fde <edpt_schedule_packets+0x17e>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 8007fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fd fd5c 	bl	8005a96 <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 8007fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe6:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fec:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 8007fee:	e013      	b.n	8008018 <edpt_schedule_packets+0x1b8>
    dep->diepctl = depctl.value; // enable endpoint
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff4:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 8007ff6:	797b      	ldrb	r3, [r7, #5]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d10d      	bne.n	8008018 <edpt_schedule_packets+0x1b8>
 8007ffc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00a      	beq.n	8008018 <edpt_schedule_packets+0x1b8>
      dwc2->diepempmsk |= (1 << epnum);
 8008002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008004:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8008008:	79ba      	ldrb	r2, [r7, #6]
 800800a:	2101      	movs	r1, #1
 800800c:	fa01 f202 	lsl.w	r2, r1, r2
 8008010:	431a      	orrs	r2, r3
 8008012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008014:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 8008018:	bf00      	nop
 800801a:	3740      	adds	r7, #64	@ 0x40
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	08009c38 	.word	0x08009c38
 8008024:	20000bac 	.word	0x20000bac
 8008028:	20000c2c 	.word	0x20000c2c

0800802c <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800802c:	b580      	push	{r7, lr}
 800802e:	b08c      	sub	sp, #48	@ 0x30
 8008030:	af00      	add	r7, sp, #0
 8008032:	4603      	mov	r3, r0
 8008034:	6039      	str	r1, [r7, #0]
 8008036:	71fb      	strb	r3, [r7, #7]
 8008038:	79fb      	ldrb	r3, [r7, #7]
 800803a:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800803c:	7dfb      	ldrb	r3, [r7, #23]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d001      	beq.n	8008046 <dcd_init+0x1a>
    rhport = 0;
 8008042:	2300      	movs	r3, #0
 8008044:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008046:	7dfb      	ldrb	r3, [r7, #23]
 8008048:	4a43      	ldr	r2, [pc, #268]	@ (8008158 <dcd_init+0x12c>)
 800804a:	011b      	lsls	r3, r3, #4
 800804c:	4413      	add	r3, r2
 800804e:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008050:	62bb      	str	r3, [r7, #40]	@ 0x28

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 8008052:	2208      	movs	r2, #8
 8008054:	2100      	movs	r1, #0
 8008056:	4841      	ldr	r0, [pc, #260]	@ (800815c <dcd_init+0x130>)
 8008058:	f001 fcb7 	bl	80099ca <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 800805c:	2101      	movs	r1, #1
 800805e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008060:	f001 f9c6 	bl	80093f0 <dwc2_core_is_highspeed>
 8008064:	4603      	mov	r3, r0
 8008066:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800806a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800806c:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008072:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8008074:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 8008076:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 800807a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800807e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8008082:	79fb      	ldrb	r3, [r7, #7]
 8008084:	4618      	mov	r0, r3
 8008086:	f001 f9d1 	bl	800942c <dwc2_core_init>
 800808a:	4603      	mov	r3, r0
 800808c:	f083 0301 	eor.w	r3, r3, #1
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00a      	beq.n	80080ac <dcd_init+0x80>
 8008096:	4b32      	ldr	r3, [pc, #200]	@ (8008160 <dcd_init+0x134>)
 8008098:	61fb      	str	r3, [r7, #28]
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d000      	beq.n	80080a8 <dcd_init+0x7c>
 80080a6:	be00      	bkpt	0x0000
 80080a8:	2300      	movs	r3, #0
 80080aa:	e050      	b.n	800814e <dcd_init+0x122>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 80080ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ae:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 80080b2:	f023 0303 	bic.w	r3, r3, #3
 80080b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (is_highspeed) {
 80080b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00d      	beq.n	80080dc <dcd_init+0xb0>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80080c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080c4:	60fb      	str	r3, [r7, #12]
    if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 80080c6:	7b3b      	ldrb	r3, [r7, #12]
 80080c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	2b80      	cmp	r3, #128	@ 0x80
 80080d0:	d108      	bne.n	80080e4 <dcd_init+0xb8>
      dcfg |= DCFG_XCVRDLY;
 80080d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80080d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080da:	e003      	b.n	80080e4 <dcd_init+0xb8>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 80080dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080de:	f043 0303 	orr.w	r3, r3, #3
 80080e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 80080e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e6:	f043 0304 	orr.w	r3, r3, #4
 80080ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2->dcfg = dcfg;
 80080ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080f0:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 80080f4:	79fb      	ldrb	r3, [r7, #7]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 f92a 	bl	8008350 <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 80080fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008104:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810a:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 800810c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8008114:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 8008118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811a:	601a      	str	r2, [r3, #0]
  // No hardware detection of Vbus B-session is available on the STM32N6
  dwc2->stm32_gccfg |= STM32_GCCFG_VBVALOVAL;
#endif

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 800811c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811e:	699a      	ldr	r2, [r3, #24]
 8008120:	4b10      	ldr	r3, [pc, #64]	@ (8008164 <dcd_init+0x138>)
 8008122:	4313      	orrs	r3, r2
 8008124:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008126:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 8008128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008134:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	f043 0301 	orr.w	r3, r3, #1
 800813c:	623b      	str	r3, [r7, #32]
  dwc2->gahbcfg = gahbcfg;
 800813e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008140:	6a3a      	ldr	r2, [r7, #32]
 8008142:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 8008144:	79fb      	ldrb	r3, [r7, #7]
 8008146:	4618      	mov	r0, r3
 8008148:	f000 f8e0 	bl	800830c <dcd_connect>
  return true;
 800814c:	2301      	movs	r3, #1
}
 800814e:	4618      	mov	r0, r3
 8008150:	3730      	adds	r7, #48	@ 0x30
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	08009c38 	.word	0x08009c38
 800815c:	20000c2c 	.word	0x20000c2c
 8008160:	e000edf0 	.word	0xe000edf0
 8008164:	80003804 	.word	0x80003804

08008168 <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	4603      	mov	r3, r0
 8008170:	71fb      	strb	r3, [r7, #7]
 8008172:	79fb      	ldrb	r3, [r7, #7]
 8008174:	73fb      	strb	r3, [r7, #15]
 8008176:	2301      	movs	r3, #1
 8008178:	73bb      	strb	r3, [r7, #14]
 800817a:	2301      	movs	r3, #1
 800817c:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800817e:	7bfb      	ldrb	r3, [r7, #15]
 8008180:	4a0c      	ldr	r2, [pc, #48]	@ (80081b4 <dcd_int_enable+0x4c>)
 8008182:	011b      	lsls	r3, r3, #4
 8008184:	4413      	add	r3, r2
 8008186:	3304      	adds	r3, #4
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800818c:	7b7b      	ldrb	r3, [r7, #13]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d005      	beq.n	800819e <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 8008192:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8008196:	4618      	mov	r0, r3
 8008198:	f7ff fb3e 	bl	8007818 <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 800819c:	e004      	b.n	80081a8 <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 800819e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7ff fb56 	bl	8007854 <__NVIC_DisableIRQ>
}
 80081a8:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 80081aa:	bf00      	nop
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	08009c38 	.word	0x08009c38

080081b8 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	4603      	mov	r3, r0
 80081c0:	71fb      	strb	r3, [r7, #7]
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	73fb      	strb	r3, [r7, #15]
 80081c6:	2301      	movs	r3, #1
 80081c8:	73bb      	strb	r3, [r7, #14]
 80081ca:	2300      	movs	r3, #0
 80081cc:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
 80081d0:	4a0c      	ldr	r2, [pc, #48]	@ (8008204 <dcd_int_disable+0x4c>)
 80081d2:	011b      	lsls	r3, r3, #4
 80081d4:	4413      	add	r3, r2
 80081d6:	3304      	adds	r3, #4
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 80081dc:	7b7b      	ldrb	r3, [r7, #13]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d005      	beq.n	80081ee <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 80081e2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7ff fb16 	bl	8007818 <__NVIC_EnableIRQ>
}
 80081ec:	e004      	b.n	80081f8 <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 80081ee:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7ff fb2e 	bl	8007854 <__NVIC_DisableIRQ>
}
 80081f8:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 80081fa:	bf00      	nop
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	08009c38 	.word	0x08009c38

08008208 <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	4603      	mov	r3, r0
 8008210:	460a      	mov	r2, r1
 8008212:	71fb      	strb	r3, [r7, #7]
 8008214:	4613      	mov	r3, r2
 8008216:	71bb      	strb	r3, [r7, #6]
 8008218:	79fb      	ldrb	r3, [r7, #7]
 800821a:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800821c:	7a7b      	ldrb	r3, [r7, #9]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <dcd_set_address+0x1e>
    rhport = 0;
 8008222:	2300      	movs	r3, #0
 8008224:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008226:	7a7b      	ldrb	r3, [r7, #9]
 8008228:	4a14      	ldr	r2, [pc, #80]	@ (800827c <dcd_set_address+0x74>)
 800822a:	011b      	lsls	r3, r3, #4
 800822c:	4413      	add	r3, r2
 800822e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008230:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8008238:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 800823c:	79bb      	ldrb	r3, [r7, #6]
 800823e:	011b      	lsls	r3, r3, #4
 8008240:	431a      	orrs	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 8008248:	2300      	movs	r3, #0
 800824a:	72fb      	strb	r3, [r7, #11]
 800824c:	2301      	movs	r3, #1
 800824e:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8008250:	7abb      	ldrb	r3, [r7, #10]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d002      	beq.n	800825c <dcd_set_address+0x54>
 8008256:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800825a:	e000      	b.n	800825e <dcd_set_address+0x56>
 800825c:	2300      	movs	r3, #0
 800825e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8008262:	4313      	orrs	r3, r2
 8008264:	b25b      	sxtb	r3, r3
 8008266:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8008268:	79f8      	ldrb	r0, [r7, #7]
 800826a:	2300      	movs	r3, #0
 800826c:	2200      	movs	r2, #0
 800826e:	f000 f98b 	bl	8008588 <dcd_edpt_xfer>
}
 8008272:	bf00      	nop
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	08009c38 	.word	0x08009c38

08008280 <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 8008280:	b480      	push	{r7}
 8008282:	b087      	sub	sp, #28
 8008284:	af00      	add	r7, sp, #0
 8008286:	4603      	mov	r3, r0
 8008288:	71fb      	strb	r3, [r7, #7]
 800828a:	79fb      	ldrb	r3, [r7, #7]
 800828c:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800828e:	7bfb      	ldrb	r3, [r7, #15]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <dcd_remote_wakeup+0x18>
    rhport = 0;
 8008294:	2300      	movs	r3, #0
 8008296:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008298:	7bfb      	ldrb	r3, [r7, #15]
 800829a:	4a19      	ldr	r2, [pc, #100]	@ (8008300 <dcd_remote_wakeup+0x80>)
 800829c:	011b      	lsls	r3, r3, #4
 800829e:	4413      	add	r3, r2
 80082a0:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80082a2:	617b      	str	r3, [r7, #20]

  // set remote wakeup
  dwc2->dctl |= DCTL_RWUSIG;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80082aa:	f043 0201 	orr.w	r2, r3, #1
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  // enable SOF to detect bus resume
  dwc2->gintsts = GINTSTS_SOF;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	2208      	movs	r2, #8
 80082b8:	615a      	str	r2, [r3, #20]
  dwc2->gintmsk |= GINTMSK_SOFM;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	f043 0208 	orr.w	r2, r3, #8
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	619a      	str	r2, [r3, #24]
#define dwc2_dcd_int_disable(_rhport) dwc2_int_set(_rhport, TUSB_ROLE_DEVICE, false)


TU_ATTR_ALWAYS_INLINE static inline void dwc2_remote_wakeup_delay(void) {
  // try to delay for 1 ms
  uint32_t count = SystemCoreClock / 1000;
 80082c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008304 <dcd_remote_wakeup+0x84>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a0f      	ldr	r2, [pc, #60]	@ (8008308 <dcd_remote_wakeup+0x88>)
 80082cc:	fba2 2303 	umull	r2, r3, r2, r3
 80082d0:	099b      	lsrs	r3, r3, #6
 80082d2:	613b      	str	r3, [r7, #16]
  while (count--) __NOP();
 80082d4:	e000      	b.n	80082d8 <dcd_remote_wakeup+0x58>
 80082d6:	bf00      	nop
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	1e5a      	subs	r2, r3, #1
 80082dc:	613a      	str	r2, [r7, #16]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1f9      	bne.n	80082d6 <dcd_remote_wakeup+0x56>
}
 80082e2:	bf00      	nop

  // Per specs: remote wakeup signal bit must be clear within 1-15ms
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80082ea:	f023 0201 	bic.w	r2, r3, #1
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 80082f4:	bf00      	nop
 80082f6:	371c      	adds	r7, #28
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	08009c38 	.word	0x08009c38
 8008304:	20000048 	.word	0x20000048
 8008308:	10624dd3 	.word	0x10624dd3

0800830c <dcd_connect>:

void dcd_connect(uint8_t rhport) {
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	4603      	mov	r3, r0
 8008314:	71fb      	strb	r3, [r7, #7]
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800831a:	7afb      	ldrb	r3, [r7, #11]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <dcd_connect+0x18>
    rhport = 0;
 8008320:	2300      	movs	r3, #0
 8008322:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008324:	7afb      	ldrb	r3, [r7, #11]
 8008326:	4a09      	ldr	r2, [pc, #36]	@ (800834c <dcd_connect+0x40>)
 8008328:	011b      	lsls	r3, r3, #4
 800832a:	4413      	add	r3, r2
 800832c:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800832e:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8008336:	f023 0202 	bic.w	r2, r3, #2
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8008340:	bf00      	nop
 8008342:	3714      	adds	r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	08009c38 	.word	0x08009c38

08008350 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	4603      	mov	r3, r0
 8008358:	71fb      	strb	r3, [r7, #7]
 800835a:	79fb      	ldrb	r3, [r7, #7]
 800835c:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800835e:	7afb      	ldrb	r3, [r7, #11]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <dcd_disconnect+0x18>
    rhport = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008368:	7afb      	ldrb	r3, [r7, #11]
 800836a:	4a09      	ldr	r2, [pc, #36]	@ (8008390 <dcd_disconnect+0x40>)
 800836c:	011b      	lsls	r3, r3, #4
 800836e:	4413      	add	r3, r2
 8008370:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008372:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800837a:	f043 0202 	orr.w	r2, r3, #2
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8008384:	bf00      	nop
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr
 8008390:	08009c38 	.word	0x08009c38

08008394 <dcd_sof_enable>:

// Be advised: audio, video and possibly other iso-ep classes use dcd_sof_enable() to enable/disable its corresponding ISR on purpose!
void dcd_sof_enable(uint8_t rhport, bool en) {
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	4603      	mov	r3, r0
 800839c:	460a      	mov	r2, r1
 800839e:	71fb      	strb	r3, [r7, #7]
 80083a0:	4613      	mov	r3, r2
 80083a2:	71bb      	strb	r3, [r7, #6]
 80083a4:	79fb      	ldrb	r3, [r7, #7]
 80083a6:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80083a8:	7afb      	ldrb	r3, [r7, #11]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <dcd_sof_enable+0x1e>
    rhport = 0;
 80083ae:	2300      	movs	r3, #0
 80083b0:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80083b2:	7afb      	ldrb	r3, [r7, #11]
 80083b4:	4a10      	ldr	r2, [pc, #64]	@ (80083f8 <dcd_sof_enable+0x64>)
 80083b6:	011b      	lsls	r3, r3, #4
 80083b8:	4413      	add	r3, r2
 80083ba:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80083bc:	60fb      	str	r3, [r7, #12]

  _dcd_data.sof_en = en;
 80083be:	4a0f      	ldr	r2, [pc, #60]	@ (80083fc <dcd_sof_enable+0x68>)
 80083c0:	79bb      	ldrb	r3, [r7, #6]
 80083c2:	71d3      	strb	r3, [r2, #7]

  if (en) {
 80083c4:	79bb      	ldrb	r3, [r7, #6]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d009      	beq.n	80083de <dcd_sof_enable+0x4a>
    dwc2->gintsts = GINTSTS_SOF;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2208      	movs	r2, #8
 80083ce:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	f043 0208 	orr.w	r2, r3, #8
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	619a      	str	r2, [r3, #24]
  } else {
    dwc2->gintmsk &= ~GINTMSK_SOFM;
  }
}
 80083dc:	e005      	b.n	80083ea <dcd_sof_enable+0x56>
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	f023 0208 	bic.w	r2, r3, #8
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	619a      	str	r2, [r3, #24]
}
 80083ea:	bf00      	nop
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	08009c38 	.word	0x08009c38
 80083fc:	20000c2c 	.word	0x20000c2c

08008400 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	4603      	mov	r3, r0
 8008408:	6039      	str	r1, [r7, #0]
 800840a:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	7899      	ldrb	r1, [r3, #2]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	889b      	ldrh	r3, [r3, #4]
 8008418:	b29b      	uxth	r3, r3
 800841a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800841e:	b29a      	uxth	r2, r3
 8008420:	79fb      	ldrb	r3, [r7, #7]
 8008422:	4618      	mov	r0, r3
 8008424:	f7ff fa76 	bl	8007914 <dfifo_alloc>
 8008428:	4603      	mov	r3, r0
 800842a:	f083 0301 	eor.w	r3, r3, #1
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00a      	beq.n	800844a <dcd_edpt_open+0x4a>
 8008434:	4b0a      	ldr	r3, [pc, #40]	@ (8008460 <dcd_edpt_open+0x60>)
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b00      	cmp	r3, #0
 8008442:	d000      	beq.n	8008446 <dcd_edpt_open+0x46>
 8008444:	be00      	bkpt	0x0000
 8008446:	2300      	movs	r3, #0
 8008448:	e005      	b.n	8008456 <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 800844a:	79fb      	ldrb	r3, [r7, #7]
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	4618      	mov	r0, r3
 8008450:	f7ff fb9c 	bl	8007b8c <edpt_activate>
  return true;
 8008454:	2301      	movs	r3, #1
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	e000edf0 	.word	0xe000edf0

08008464 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 8008464:	b580      	push	{r7, lr}
 8008466:	b08a      	sub	sp, #40	@ 0x28
 8008468:	af00      	add	r7, sp, #0
 800846a:	4603      	mov	r3, r0
 800846c:	71fb      	strb	r3, [r7, #7]
 800846e:	79fb      	ldrb	r3, [r7, #7]
 8008470:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008472:	7dfb      	ldrb	r3, [r7, #23]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <dcd_edpt_close_all+0x18>
    rhport = 0;
 8008478:	2300      	movs	r3, #0
 800847a:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800847c:	7dfb      	ldrb	r3, [r7, #23]
 800847e:	4a3f      	ldr	r2, [pc, #252]	@ (800857c <dcd_edpt_close_all+0x118>)
 8008480:	011b      	lsls	r3, r3, #4
 8008482:	4413      	add	r3, r2
 8008484:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008486:	623b      	str	r3, [r7, #32]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8008488:	79fb      	ldrb	r3, [r7, #7]
 800848a:	4a3c      	ldr	r2, [pc, #240]	@ (800857c <dcd_edpt_close_all+0x118>)
 800848c:	011b      	lsls	r3, r3, #4
 800848e:	4413      	add	r3, r2
 8008490:	3308      	adds	r3, #8
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	77fb      	strb	r3, [r7, #31]

  usbd_spin_lock(false);
 8008496:	2000      	movs	r0, #0
 8008498:	f7fe fd4a 	bl	8006f30 <usbd_spin_lock>

  _dcd_data.allocated_epin_count = 0;
 800849c:	4b38      	ldr	r3, [pc, #224]	@ (8008580 <dcd_edpt_close_all+0x11c>)
 800849e:	2200      	movs	r2, #0
 80084a0:	719a      	strb	r2, [r3, #6]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 80084a2:	6a3b      	ldr	r3, [r7, #32]
 80084a4:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80084a8:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 80084ac:	2301      	movs	r3, #1
 80084ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80084b2:	e034      	b.n	800851e <dcd_edpt_close_all+0xba>
    for (uint8_t d = 0; d < 2; d++) {
 80084b4:	2300      	movs	r3, #0
 80084b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80084ba:	e027      	b.n	800850c <dcd_edpt_close_all+0xa8>
      dwc2_dep_t* dep = &dwc2->ep[d][n];
 80084bc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80084c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084c4:	0112      	lsls	r2, r2, #4
 80084c6:	4413      	add	r3, r2
 80084c8:	3348      	adds	r3, #72	@ 0x48
 80084ca:	015b      	lsls	r3, r3, #5
 80084cc:	6a3a      	ldr	r2, [r7, #32]
 80084ce:	4413      	add	r3, r2
 80084d0:	61bb      	str	r3, [r7, #24]
      if (dep->ctl & EPCTL_EPENA) {
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	da05      	bge.n	80084e6 <dcd_edpt_close_all+0x82>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f043 4290 	orr.w	r2, r3, #1207959552	@ 0x48000000
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	601a      	str	r2, [r3, #0]
      }
      xfer_status[n][1-d].max_size = 0;
 80084e6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80084ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80084ee:	f1c3 0301 	rsb	r3, r3, #1
 80084f2:	4924      	ldr	r1, [pc, #144]	@ (8008584 <dcd_edpt_close_all+0x120>)
 80084f4:	0052      	lsls	r2, r2, #1
 80084f6:	4413      	add	r3, r2
 80084f8:	011b      	lsls	r3, r3, #4
 80084fa:	440b      	add	r3, r1
 80084fc:	330a      	adds	r3, #10
 80084fe:	2200      	movs	r2, #0
 8008500:	801a      	strh	r2, [r3, #0]
    for (uint8_t d = 0; d < 2; d++) {
 8008502:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008506:	3301      	adds	r3, #1
 8008508:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800850c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008510:	2b01      	cmp	r3, #1
 8008512:	d9d3      	bls.n	80084bc <dcd_edpt_close_all+0x58>
  for (uint8_t n = 1; n < ep_count; n++) {
 8008514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008518:	3301      	adds	r3, #1
 800851a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800851e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008522:	7ffb      	ldrb	r3, [r7, #31]
 8008524:	429a      	cmp	r2, r3
 8008526:	d3c5      	bcc.n	80084b4 <dcd_edpt_close_all+0x50>
 8008528:	6a3b      	ldr	r3, [r7, #32]
 800852a:	60fb      	str	r3, [r7, #12]
 800852c:	2310      	movs	r3, #16
 800852e:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8008530:	7afb      	ldrb	r3, [r7, #11]
 8008532:	019b      	lsls	r3, r3, #6
 8008534:	f043 0220 	orr.w	r2, r3, #32
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800853c:	bf00      	nop
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	f003 0320 	and.w	r3, r3, #32
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1f9      	bne.n	800853e <dcd_edpt_close_all+0xda>
}
 800854a:	bf00      	nop
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	2210      	movs	r2, #16
 8008554:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8008556:	bf00      	nop
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	f003 0310 	and.w	r3, r3, #16
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1f9      	bne.n	8008558 <dcd_edpt_close_all+0xf4>
}
 8008564:	bf00      	nop
    }
  }

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport); // re-init dfifo
 8008566:	79fb      	ldrb	r3, [r7, #7]
 8008568:	4618      	mov	r0, r3
 800856a:	f7ff fab5 	bl	8007ad8 <dfifo_device_init>

  usbd_spin_unlock(false);
 800856e:	2000      	movs	r0, #0
 8008570:	f7fe fcf8 	bl	8006f64 <usbd_spin_unlock>
}
 8008574:	bf00      	nop
 8008576:	3728      	adds	r7, #40	@ 0x28
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	08009c38 	.word	0x08009c38
 8008580:	20000c2c 	.word	0x20000c2c
 8008584:	20000bac 	.word	0x20000bac

08008588 <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	603a      	str	r2, [r7, #0]
 8008590:	461a      	mov	r2, r3
 8008592:	4603      	mov	r3, r0
 8008594:	71fb      	strb	r3, [r7, #7]
 8008596:	460b      	mov	r3, r1
 8008598:	71bb      	strb	r3, [r7, #6]
 800859a:	4613      	mov	r3, r2
 800859c:	80bb      	strh	r3, [r7, #4]
 800859e:	79bb      	ldrb	r3, [r7, #6]
 80085a0:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80085a2:	7bbb      	ldrb	r3, [r7, #14]
 80085a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085a8:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 80085aa:	75bb      	strb	r3, [r7, #22]
 80085ac:	79bb      	ldrb	r3, [r7, #6]
 80085ae:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
 80085b2:	09db      	lsrs	r3, r3, #7
 80085b4:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80085b6:	757b      	strb	r3, [r7, #21]
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 80085b8:	7dba      	ldrb	r2, [r7, #22]
 80085ba:	7d7b      	ldrb	r3, [r7, #21]
 80085bc:	0052      	lsls	r2, r2, #1
 80085be:	4413      	add	r3, r2
 80085c0:	011b      	lsls	r3, r3, #4
 80085c2:	4a17      	ldr	r2, [pc, #92]	@ (8008620 <dcd_edpt_xfer+0x98>)
 80085c4:	4413      	add	r3, r2
 80085c6:	613b      	str	r3, [r7, #16]
  bool ret;

  usbd_spin_lock(false);
 80085c8:	2000      	movs	r0, #0
 80085ca:	f7fe fcb1 	bl	8006f30 <usbd_spin_lock>

  if (xfer->max_size == 0) {
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	895b      	ldrh	r3, [r3, #10]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d102      	bne.n	80085dc <dcd_edpt_xfer+0x54>
    ret = false;  // Endpoint is closed
 80085d6:	2300      	movs	r3, #0
 80085d8:	75fb      	strb	r3, [r7, #23]
 80085da:	e018      	b.n	800860e <dcd_edpt_xfer+0x86>
  } else {
    xfer->buffer = buffer;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	683a      	ldr	r2, [r7, #0]
 80085e0:	601a      	str	r2, [r3, #0]
    xfer->ff = NULL;
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	2200      	movs	r2, #0
 80085e6:	605a      	str	r2, [r3, #4]
    xfer->total_len = total_bytes;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	88ba      	ldrh	r2, [r7, #4]
 80085ec:	811a      	strh	r2, [r3, #8]

    // EP0 can only handle one packet
    if (epnum == 0) {
 80085ee:	7dbb      	ldrb	r3, [r7, #22]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d104      	bne.n	80085fe <dcd_edpt_xfer+0x76>
      _dcd_data.ep0_pending[dir] = total_bytes;
 80085f4:	7d7b      	ldrb	r3, [r7, #21]
 80085f6:	490b      	ldr	r1, [pc, #44]	@ (8008624 <dcd_edpt_xfer+0x9c>)
 80085f8:	88ba      	ldrh	r2, [r7, #4]
 80085fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir);
 80085fe:	7d7a      	ldrb	r2, [r7, #21]
 8008600:	7db9      	ldrb	r1, [r7, #22]
 8008602:	79fb      	ldrb	r3, [r7, #7]
 8008604:	4618      	mov	r0, r3
 8008606:	f7ff fc2b 	bl	8007e60 <edpt_schedule_packets>
    ret = true;
 800860a:	2301      	movs	r3, #1
 800860c:	75fb      	strb	r3, [r7, #23]
  }

  usbd_spin_unlock(false);
 800860e:	2000      	movs	r0, #0
 8008610:	f7fe fca8 	bl	8006f64 <usbd_spin_unlock>

  return ret;
 8008614:	7dfb      	ldrb	r3, [r7, #23]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3718      	adds	r7, #24
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	20000bac 	.word	0x20000bac
 8008624:	20000c2c 	.word	0x20000c2c

08008628 <dcd_edpt_stall>:
  usbd_spin_unlock(false);

  return ret;
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	4603      	mov	r3, r0
 8008630:	460a      	mov	r2, r1
 8008632:	71fb      	strb	r3, [r7, #7]
 8008634:	4613      	mov	r3, r2
 8008636:	71bb      	strb	r3, [r7, #6]
 8008638:	79fb      	ldrb	r3, [r7, #7]
 800863a:	74bb      	strb	r3, [r7, #18]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800863c:	7cbb      	ldrb	r3, [r7, #18]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <dcd_edpt_stall+0x1e>
    rhport = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	74bb      	strb	r3, [r7, #18]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008646:	7cbb      	ldrb	r3, [r7, #18]
 8008648:	4a11      	ldr	r2, [pc, #68]	@ (8008690 <dcd_edpt_stall+0x68>)
 800864a:	011b      	lsls	r3, r3, #4
 800864c:	4413      	add	r3, r2
 800864e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008650:	617b      	str	r3, [r7, #20]
  edpt_disable(rhport, ep_addr, true);
 8008652:	79b9      	ldrb	r1, [r7, #6]
 8008654:	79fb      	ldrb	r3, [r7, #7]
 8008656:	2201      	movs	r2, #1
 8008658:	4618      	mov	r0, r3
 800865a:	f7ff fb35 	bl	8007cc8 <edpt_disable>
 800865e:	79bb      	ldrb	r3, [r7, #6]
 8008660:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008662:	7cfb      	ldrb	r3, [r7, #19]
 8008664:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008668:	b2db      	uxtb	r3, r3
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10b      	bne.n	8008686 <dcd_edpt_stall+0x5e>
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	60fb      	str	r3, [r7, #12]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008676:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8008678:	2300      	movs	r3, #0
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800867a:	2b00      	cmp	r3, #0
 800867c:	d003      	beq.n	8008686 <dcd_edpt_stall+0x5e>
    dma_setup_prepare(rhport);
 800867e:	79fb      	ldrb	r3, [r7, #7]
 8008680:	4618      	mov	r0, r3
 8008682:	f7ff f90b 	bl	800789c <dma_setup_prepare>
  }
}
 8008686:	bf00      	nop
 8008688:	3718      	adds	r7, #24
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	08009c38 	.word	0x08009c38

08008694 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 8008694:	b480      	push	{r7}
 8008696:	b087      	sub	sp, #28
 8008698:	af00      	add	r7, sp, #0
 800869a:	4603      	mov	r3, r0
 800869c:	460a      	mov	r2, r1
 800869e:	71fb      	strb	r3, [r7, #7]
 80086a0:	4613      	mov	r3, r2
 80086a2:	71bb      	strb	r3, [r7, #6]
 80086a4:	79fb      	ldrb	r3, [r7, #7]
 80086a6:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80086a8:	7a7b      	ldrb	r3, [r7, #9]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d001      	beq.n	80086b2 <dcd_edpt_clear_stall+0x1e>
    rhport = 0;
 80086ae:	2300      	movs	r3, #0
 80086b0:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80086b2:	7a7b      	ldrb	r3, [r7, #9]
 80086b4:	4a19      	ldr	r2, [pc, #100]	@ (800871c <dcd_edpt_clear_stall+0x88>)
 80086b6:	011b      	lsls	r3, r3, #4
 80086b8:	4413      	add	r3, r2
 80086ba:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80086bc:	617b      	str	r3, [r7, #20]
 80086be:	79bb      	ldrb	r3, [r7, #6]
 80086c0:	72bb      	strb	r3, [r7, #10]
 80086c2:	7abb      	ldrb	r3, [r7, #10]
 80086c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086c8:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 80086ca:	74fb      	strb	r3, [r7, #19]
 80086cc:	79bb      	ldrb	r3, [r7, #6]
 80086ce:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80086d0:	7afb      	ldrb	r3, [r7, #11]
 80086d2:	09db      	lsrs	r3, r3, #7
 80086d4:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80086d6:	74bb      	strb	r3, [r7, #18]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 80086d8:	7cbb      	ldrb	r3, [r7, #18]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	bf14      	ite	ne
 80086de:	2301      	movne	r3, #1
 80086e0:	2300      	moveq	r3, #0
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	461a      	mov	r2, r3
 80086e6:	7cfb      	ldrb	r3, [r7, #19]
 80086e8:	0112      	lsls	r2, r2, #4
 80086ea:	4413      	add	r3, r2
 80086ec:	3348      	adds	r3, #72	@ 0x48
 80086ee:	015b      	lsls	r3, r3, #5
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	4413      	add	r3, r2
 80086f4:	60fb      	str	r3, [r7, #12]

  // Clear stall and reset data toggle
  dep->ctl &= ~EPCTL_STALL;;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	601a      	str	r2, [r3, #0]
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	601a      	str	r2, [r3, #0]
}
 800870e:	bf00      	nop
 8008710:	371c      	adds	r7, #28
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	08009c38 	.word	0x08009c38

08008720 <handle_bus_reset>:
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
// Must be called from critical section
static void handle_bus_reset(uint8_t rhport) {
 8008720:	b580      	push	{r7, lr}
 8008722:	b08e      	sub	sp, #56	@ 0x38
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	71fb      	strb	r3, [r7, #7]
 800872a:	79fb      	ldrb	r3, [r7, #7]
 800872c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008730:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008734:	2b00      	cmp	r3, #0
 8008736:	d002      	beq.n	800873e <handle_bus_reset+0x1e>
    rhport = 0;
 8008738:	2300      	movs	r3, #0
 800873a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800873e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008742:	4a6a      	ldr	r2, [pc, #424]	@ (80088ec <handle_bus_reset+0x1cc>)
 8008744:	011b      	lsls	r3, r3, #4
 8008746:	4413      	add	r3, r2
 8008748:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800874a:	633b      	str	r3, [r7, #48]	@ 0x30
 800874c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874e:	62bb      	str	r3, [r7, #40]	@ 0x28
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8008750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008754:	60bb      	str	r3, [r7, #8]
  return ghwcfg2.num_dev_ep + 1;
 8008756:	7a7b      	ldrb	r3, [r7, #9]
 8008758:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800875c:	b2db      	uxtb	r3, r3
 800875e:	3301      	adds	r3, #1
 8008760:	b2db      	uxtb	r3, r3
  const uint8_t ep_count =  dwc2_ep_count(dwc2);
 8008762:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  tu_memclr(xfer_status, sizeof(xfer_status));
 8008766:	2280      	movs	r2, #128	@ 0x80
 8008768:	2100      	movs	r1, #0
 800876a:	4861      	ldr	r0, [pc, #388]	@ (80088f0 <handle_bus_reset+0x1d0>)
 800876c:	f001 f92d 	bl	80099ca <memset>

  _dcd_data.sof_en = false;
 8008770:	4b60      	ldr	r3, [pc, #384]	@ (80088f4 <handle_bus_reset+0x1d4>)
 8008772:	2200      	movs	r2, #0
 8008774:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 8008776:	4b5f      	ldr	r3, [pc, #380]	@ (80088f4 <handle_bus_reset+0x1d4>)
 8008778:	2200      	movs	r2, #0
 800877a:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800877c:	2300      	movs	r3, #0
 800877e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008782:	e014      	b.n	80087ae <handle_bus_reset+0x8e>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8008784:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008788:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800878a:	3358      	adds	r3, #88	@ 0x58
 800878c:	015b      	lsls	r3, r3, #5
 800878e:	4413      	add	r3, r2
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008796:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800879a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800879c:	3358      	adds	r3, #88	@ 0x58
 800879e:	015b      	lsls	r3, r3, #5
 80087a0:	440b      	add	r3, r1
 80087a2:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 80087a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80087a8:	3301      	adds	r3, #1
 80087aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80087ae:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80087b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d3e4      	bcc.n	8008784 <handle_bus_reset+0x64>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 80087ba:	2300      	movs	r3, #0
 80087bc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80087c0:	e01d      	b.n	80087fe <handle_bus_reset+0xde>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 80087c2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80087c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087c8:	3348      	adds	r3, #72	@ 0x48
 80087ca:	015b      	lsls	r3, r3, #5
 80087cc:	4413      	add	r3, r2
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	da0f      	bge.n	80087f4 <handle_bus_reset+0xd4>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 80087d4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80087d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087da:	3348      	adds	r3, #72	@ 0x48
 80087dc:	015b      	lsls	r3, r3, #5
 80087de:	4413      	add	r3, r2
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80087e6:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 80087ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80087ec:	3348      	adds	r3, #72	@ 0x48
 80087ee:	015b      	lsls	r3, r3, #5
 80087f0:	440b      	add	r3, r1
 80087f2:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 80087f4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80087f8:	3301      	adds	r3, #1
 80087fa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80087fe:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8008802:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008806:	429a      	cmp	r2, r3
 8008808:	d3db      	bcc.n	80087c2 <handle_bus_reset+0xa2>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 800880a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8008810:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8008814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008816:	2209      	movs	r2, #9
 8008818:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 800881c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881e:	2209      	movs	r2, #9
 8008820:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 8008824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008826:	61bb      	str	r3, [r7, #24]
 8008828:	2310      	movs	r3, #16
 800882a:	75fb      	strb	r3, [r7, #23]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800882c:	7dfb      	ldrb	r3, [r7, #23]
 800882e:	019b      	lsls	r3, r3, #6
 8008830:	f043 0220 	orr.w	r2, r3, #32
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8008838:	bf00      	nop
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	f003 0320 	and.w	r3, r3, #32
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1f9      	bne.n	800883a <handle_bus_reset+0x11a>
}
 8008846:	bf00      	nop
 8008848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884a:	61fb      	str	r3, [r7, #28]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	2210      	movs	r2, #16
 8008850:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8008852:	bf00      	nop
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	f003 0310 	and.w	r3, r3, #16
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1f9      	bne.n	8008854 <handle_bus_reset+0x134>
}
 8008860:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 8008862:	79fb      	ldrb	r3, [r7, #7]
 8008864:	4618      	mov	r0, r3
 8008866:	f7ff f937 	bl	8007ad8 <dfifo_device_init>

  // 5. Reset device address
  dwc2_dcfg_t dcfg = {.value = dwc2->dcfg};
 800886a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8008870:	613b      	str	r3, [r7, #16]
  dcfg.address = 0;
 8008872:	8a3b      	ldrh	r3, [r7, #16]
 8008874:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008878:	823b      	strh	r3, [r7, #16]
  dwc2->dcfg = dcfg.value;
 800887a:	693a      	ldr	r2, [r7, #16]
 800887c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887e:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8008882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008884:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8008888:	f023 0203 	bic.w	r2, r3, #3
 800888c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 8008892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008894:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8008898:	f023 0203 	bic.w	r2, r3, #3
 800889c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889e:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 80088a2:	4b13      	ldr	r3, [pc, #76]	@ (80088f0 <handle_bus_reset+0x1d0>)
 80088a4:	2240      	movs	r2, #64	@ 0x40
 80088a6:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 80088a8:	4b11      	ldr	r3, [pc, #68]	@ (80088f0 <handle_bus_reset+0x1d0>)
 80088aa:	2240      	movs	r2, #64	@ 0x40
 80088ac:	835a      	strh	r2, [r3, #26]
 80088ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b0:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80088b2:	6a3b      	ldr	r3, [r7, #32]
 80088b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088b6:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 80088b8:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d004      	beq.n	80088c8 <handle_bus_reset+0x1a8>
    dma_setup_prepare(rhport);
 80088be:	79fb      	ldrb	r3, [r7, #7]
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fe ffeb 	bl	800789c <dma_setup_prepare>
 80088c6:	e007      	b.n	80088d8 <handle_bus_reset+0x1b8>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 80088c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ca:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 80088ce:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 80088d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d4:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 80088d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 80088e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e2:	619a      	str	r2, [r3, #24]
}
 80088e4:	bf00      	nop
 80088e6:	3738      	adds	r7, #56	@ 0x38
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	08009c38 	.word	0x08009c38
 80088f0:	20000bac 	.word	0x20000bac
 80088f4:	20000c2c 	.word	0x20000c2c

080088f8 <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b08a      	sub	sp, #40	@ 0x28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	4603      	mov	r3, r0
 8008900:	71fb      	strb	r3, [r7, #7]
 8008902:	79fb      	ldrb	r3, [r7, #7]
 8008904:	77fb      	strb	r3, [r7, #31]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008906:	7ffb      	ldrb	r3, [r7, #31]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d001      	beq.n	8008910 <handle_enum_done+0x18>
    rhport = 0;
 800890c:	2300      	movs	r3, #0
 800890e:	77fb      	strb	r3, [r7, #31]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008910:	7ffb      	ldrb	r3, [r7, #31]
 8008912:	4a1b      	ldr	r2, [pc, #108]	@ (8008980 <handle_enum_done+0x88>)
 8008914:	011b      	lsls	r3, r3, #4
 8008916:	4413      	add	r3, r2
 8008918:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800891a:	623b      	str	r3, [r7, #32]
  const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8008922:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dsts.enum_speed) {
 8008924:	7e3b      	ldrb	r3, [r7, #24]
 8008926:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b00      	cmp	r3, #0
 800892e:	d002      	beq.n	8008936 <handle_enum_done+0x3e>
 8008930:	2b02      	cmp	r3, #2
 8008932:	d004      	beq.n	800893e <handle_enum_done+0x46>
 8008934:	e007      	b.n	8008946 <handle_enum_done+0x4e>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 8008936:	2302      	movs	r3, #2
 8008938:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800893c:	e007      	b.n	800894e <handle_enum_done+0x56>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 800893e:	2301      	movs	r3, #1
 8008940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8008944:	e003      	b.n	800894e <handle_enum_done+0x56>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 8008946:	2300      	movs	r3, #0
 8008948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800894c:	bf00      	nop
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	77bb      	strb	r3, [r7, #30]
 8008952:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008956:	777b      	strb	r3, [r7, #29]
 8008958:	2301      	movs	r3, #1
 800895a:	773b      	strb	r3, [r7, #28]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800895c:	7fbb      	ldrb	r3, [r7, #30]
 800895e:	733b      	strb	r3, [r7, #12]
  event.event_id = DCD_EVENT_BUS_RESET;
 8008960:	2301      	movs	r3, #1
 8008962:	737b      	strb	r3, [r7, #13]
  event.bus_reset.speed = speed;
 8008964:	7f7b      	ldrb	r3, [r7, #29]
 8008966:	743b      	strb	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 8008968:	7f3a      	ldrb	r2, [r7, #28]
 800896a:	f107 030c 	add.w	r3, r7, #12
 800896e:	4611      	mov	r1, r2
 8008970:	4618      	mov	r0, r3
 8008972:	f7fe f8df 	bl	8006b34 <dcd_event_handler>
}
 8008976:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 8008978:	bf00      	nop
 800897a:	3728      	adds	r7, #40	@ 0x28
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	08009c38 	.word	0x08009c38

08008984 <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 8008984:	b580      	push	{r7, lr}
 8008986:	b08c      	sub	sp, #48	@ 0x30
 8008988:	af00      	add	r7, sp, #0
 800898a:	4603      	mov	r3, r0
 800898c:	71fb      	strb	r3, [r7, #7]
 800898e:	79fb      	ldrb	r3, [r7, #7]
 8008990:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008992:	7cfb      	ldrb	r3, [r7, #19]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d001      	beq.n	800899c <handle_rxflvl_irq+0x18>
    rhport = 0;
 8008998:	2300      	movs	r3, #0
 800899a:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800899c:	7cfb      	ldrb	r3, [r7, #19]
 800899e:	4a49      	ldr	r2, [pc, #292]	@ (8008ac4 <handle_rxflvl_irq+0x140>)
 80089a0:	011b      	lsls	r3, r3, #4
 80089a2:	4413      	add	r3, r2
 80089a4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80089a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 80089a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089ae:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp = {.value = dwc2->grxstsp};
 80089b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b2:	6a1b      	ldr	r3, [r3, #32]
 80089b4:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp.ep_ch_num;
 80089b6:	7b3b      	ldrb	r3, [r7, #12]
 80089b8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 80089c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089c6:	3358      	adds	r3, #88	@ 0x58
 80089c8:	015b      	lsls	r3, r3, #5
 80089ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089cc:	4413      	add	r3, r2
 80089ce:	623b      	str	r3, [r7, #32]

  switch (grxstsp.packet_status) {
 80089d0:	7bbb      	ldrb	r3, [r7, #14]
 80089d2:	f3c3 0343 	ubfx	r3, r3, #1, #4
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	3b01      	subs	r3, #1
 80089da:	2b05      	cmp	r3, #5
 80089dc:	d86a      	bhi.n	8008ab4 <handle_rxflvl_irq+0x130>
 80089de:	a201      	add	r2, pc, #4	@ (adr r2, 80089e4 <handle_rxflvl_irq+0x60>)
 80089e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e4:	08008ab5 	.word	0x08008ab5
 80089e8:	08008a23 	.word	0x08008a23
 80089ec:	08008ab5 	.word	0x08008ab5
 80089f0:	08008a15 	.word	0x08008a15
 80089f4:	08008ab5 	.word	0x08008ab5
 80089f8:	080089fd 	.word	0x080089fd
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 80089fc:	4b32      	ldr	r3, [pc, #200]	@ (8008ac8 <handle_rxflvl_irq+0x144>)
 80089fe:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 8008a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a0e:	6812      	ldr	r2, [r2, #0]
 8008a10:	601a      	str	r2, [r3, #0]
      break;
 8008a12:	e052      	b.n	8008aba <handle_rxflvl_irq+0x136>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8008a14:	6a3b      	ldr	r3, [r7, #32]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 8008a1c:	6a3b      	ldr	r3, [r7, #32]
 8008a1e:	611a      	str	r2, [r3, #16]
      break;
 8008a20:	e04b      	b.n	8008aba <handle_rxflvl_irq+0x136>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp.byte_count;
 8008a22:	89bb      	ldrh	r3, [r7, #12]
 8008a24:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8008a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a30:	015b      	lsls	r3, r3, #5
 8008a32:	4a26      	ldr	r2, [pc, #152]	@ (8008acc <handle_rxflvl_irq+0x148>)
 8008a34:	4413      	add	r3, r2
 8008a36:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 8008a38:	8b7b      	ldrh	r3, [r7, #26]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d03c      	beq.n	8008ab8 <handle_rxflvl_irq+0x134>
        // Read packet off RxFIFO
        if (xfer->ff) {
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d007      	beq.n	8008a56 <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	8b7a      	ldrh	r2, [r7, #26]
 8008a4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fc ff7e 	bl	8005950 <tu_fifo_write_n_const_addr_full_words>
 8008a54:	e00c      	b.n	8008a70 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	8b7a      	ldrh	r2, [r7, #26]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a60:	f000 fd70 	bl	8009544 <dfifo_read_packet>
          xfer->buffer += byte_count;
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	8b7b      	ldrh	r3, [r7, #26]
 8008a6a:	441a      	add	r2, r3
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	895b      	ldrh	r3, [r3, #10]
 8008a74:	8b7a      	ldrh	r2, [r7, #26]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d21e      	bcs.n	8008ab8 <handle_rxflvl_irq+0x134>
          const dwc2_ep_tsize_t tsiz = {.value = epout->tsiz};
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	60bb      	str	r3, [r7, #8]
          xfer->total_len -= tsiz.xfer_size;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	891a      	ldrh	r2, [r3, #8]
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 8008a94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d10d      	bne.n	8008ab8 <handle_rxflvl_irq+0x134>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	891a      	ldrh	r2, [r3, #8]
 8008aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8008ad0 <handle_rxflvl_irq+0x14c>)
 8008aa2:	881b      	ldrh	r3, [r3, #0]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 8008aac:	4b08      	ldr	r3, [pc, #32]	@ (8008ad0 <handle_rxflvl_irq+0x14c>)
 8008aae:	2200      	movs	r2, #0
 8008ab0:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 8008ab2:	e001      	b.n	8008ab8 <handle_rxflvl_irq+0x134>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 8008ab4:	bf00      	nop
 8008ab6:	e000      	b.n	8008aba <handle_rxflvl_irq+0x136>
      break;
 8008ab8:	bf00      	nop
  }
}
 8008aba:	bf00      	nop
 8008abc:	3730      	adds	r7, #48	@ 0x30
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	08009c38 	.word	0x08009c38
 8008ac8:	20000c34 	.word	0x20000c34
 8008acc:	20000bac 	.word	0x20000bac
 8008ad0:	20000c2c 	.word	0x20000c2c

08008ad4 <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b08e      	sub	sp, #56	@ 0x38
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	4603      	mov	r3, r0
 8008adc:	603a      	str	r2, [r7, #0]
 8008ade:	71fb      	strb	r3, [r7, #7]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 8008ae4:	783b      	ldrb	r3, [r7, #0]
 8008ae6:	f003 0308 	and.w	r3, r3, #8
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d01c      	beq.n	8008b2a <handle_epout_slave+0x56>
 8008af0:	79fb      	ldrb	r3, [r7, #7]
 8008af2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008af6:	4b34      	ldr	r3, [pc, #208]	@ (8008bc8 <handle_epout_slave+0xf4>)
 8008af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008afa:	2301      	movs	r3, #1
 8008afc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8008b00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008b04:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 8008b06:	2306      	movs	r3, #6
 8008b08:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8008b0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b0c:	f107 0318 	add.w	r3, r7, #24
 8008b10:	6810      	ldr	r0, [r2, #0]
 8008b12:	6851      	ldr	r1, [r2, #4]
 8008b14:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 8008b16:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8008b1a:	f107 0314 	add.w	r3, r7, #20
 8008b1e:	4611      	mov	r1, r2
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fe f807 	bl	8006b34 <dcd_event_handler>
}
 8008b26:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 8008b28:	e04a      	b.n	8008bc0 <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 8008b2a:	783b      	ldrb	r3, [r7, #0]
 8008b2c:	f003 0301 	and.w	r3, r3, #1
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d044      	beq.n	8008bc0 <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 8008b36:	783b      	ldrb	r3, [r7, #0]
 8008b38:	f003 0320 	and.w	r3, r3, #32
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d13e      	bne.n	8008bc0 <handle_epout_slave+0xec>
 8008b42:	787b      	ldrb	r3, [r7, #1]
 8008b44:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d138      	bne.n	8008bc0 <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8008b4e:	79bb      	ldrb	r3, [r7, #6]
 8008b50:	015b      	lsls	r3, r3, #5
 8008b52:	4a1e      	ldr	r2, [pc, #120]	@ (8008bcc <handle_epout_slave+0xf8>)
 8008b54:	4413      	add	r3, r2
 8008b56:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 8008b58:	79bb      	ldrb	r3, [r7, #6]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10a      	bne.n	8008b74 <handle_epout_slave+0xa0>
 8008b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8008bd0 <handle_epout_slave+0xfc>)
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d006      	beq.n	8008b74 <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 8008b66:	79b9      	ldrb	r1, [r7, #6]
 8008b68:	79fb      	ldrb	r3, [r7, #7]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7ff f977 	bl	8007e60 <edpt_schedule_packets>
 8008b72:	e025      	b.n	8008bc0 <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8008b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b76:	891b      	ldrh	r3, [r3, #8]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	79fb      	ldrb	r3, [r7, #7]
 8008b7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008b80:	79bb      	ldrb	r3, [r7, #6]
 8008b82:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8008b86:	627a      	str	r2, [r7, #36]	@ 0x24
 8008b88:	2300      	movs	r3, #0
 8008b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b8e:	2301      	movs	r3, #1
 8008b90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8008b94:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008b98:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8008b9a:	2307      	movs	r3, #7
 8008b9c:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 8008b9e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008ba2:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba6:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8008ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008bac:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 8008bae:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8008bb2:	f107 0308 	add.w	r3, r7, #8
 8008bb6:	4611      	mov	r1, r2
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7fd ffbb 	bl	8006b34 <dcd_event_handler>
}
 8008bbe:	bf00      	nop
      }
    }
  }
}
 8008bc0:	3738      	adds	r7, #56	@ 0x38
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20000c34 	.word	0x20000c34
 8008bcc:	20000bac 	.word	0x20000bac
 8008bd0:	20000c2c 	.word	0x20000c2c

08008bd4 <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b092      	sub	sp, #72	@ 0x48
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	4603      	mov	r3, r0
 8008bdc:	603a      	str	r2, [r7, #0]
 8008bde:	71fb      	strb	r3, [r7, #7]
 8008be0:	460b      	mov	r3, r1
 8008be2:	71bb      	strb	r3, [r7, #6]
 8008be4:	79fb      	ldrb	r3, [r7, #7]
 8008be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008bea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d002      	beq.n	8008bf8 <handle_epin_slave+0x24>
    rhport = 0;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008bf8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008bfc:	4a64      	ldr	r2, [pc, #400]	@ (8008d90 <handle_epin_slave+0x1bc>)
 8008bfe:	011b      	lsls	r3, r3, #4
 8008c00:	4413      	add	r3, r2
 8008c02:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008c04:	643b      	str	r3, [r7, #64]	@ 0x40
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 8008c06:	79bb      	ldrb	r3, [r7, #6]
 8008c08:	3348      	adds	r3, #72	@ 0x48
 8008c0a:	015b      	lsls	r3, r3, #5
 8008c0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c0e:	4413      	add	r3, r2
 8008c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 8008c12:	79bb      	ldrb	r3, [r7, #6]
 8008c14:	015b      	lsls	r3, r3, #5
 8008c16:	3310      	adds	r3, #16
 8008c18:	4a5e      	ldr	r2, [pc, #376]	@ (8008d94 <handle_epin_slave+0x1c0>)
 8008c1a:	4413      	add	r3, r2
 8008c1c:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (diepint_bm.xfer_complete) {
 8008c1e:	783b      	ldrb	r3, [r7, #0]
 8008c20:	f003 0301 	and.w	r3, r3, #1
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d037      	beq.n	8008c9a <handle_epin_slave+0xc6>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 8008c2a:	79bb      	ldrb	r3, [r7, #6]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10a      	bne.n	8008c46 <handle_epin_slave+0x72>
 8008c30:	4b59      	ldr	r3, [pc, #356]	@ (8008d98 <handle_epin_slave+0x1c4>)
 8008c32:	885b      	ldrh	r3, [r3, #2]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d006      	beq.n	8008c46 <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 8008c38:	79b9      	ldrb	r1, [r7, #6]
 8008c3a:	79fb      	ldrb	r3, [r7, #7]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7ff f90e 	bl	8007e60 <edpt_schedule_packets>
 8008c44:	e029      	b.n	8008c9a <handle_epin_slave+0xc6>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8008c46:	79bb      	ldrb	r3, [r7, #6]
 8008c48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008c4c:	b2d9      	uxtb	r1, r3
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c50:	891b      	ldrh	r3, [r3, #8]
 8008c52:	461a      	mov	r2, r3
 8008c54:	79fb      	ldrb	r3, [r7, #7]
 8008c56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8008c60:	627a      	str	r2, [r7, #36]	@ 0x24
 8008c62:	2300      	movs	r3, #0
 8008c64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c68:	2301      	movs	r3, #1
 8008c6a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  event.rhport = rhport;
 8008c6e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008c72:	743b      	strb	r3, [r7, #16]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8008c74:	2307      	movs	r3, #7
 8008c76:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 8008c78:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008c7c:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c80:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 8008c82:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008c86:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8008c88:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8008c8c:	f107 0310 	add.w	r3, r7, #16
 8008c90:	4611      	mov	r1, r2
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fd ff4e 	bl	8006b34 <dcd_event_handler>
}
 8008c98:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 8008c9a:	783b      	ldrb	r3, [r7, #0]
 8008c9c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d070      	beq.n	8008d88 <handle_epin_slave+0x1b4>
 8008ca6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ca8:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8008cac:	79ba      	ldrb	r2, [r7, #6]
 8008cae:	2101      	movs	r1, #1
 8008cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8008cb4:	4013      	ands	r3, r2
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d066      	beq.n	8008d88 <handle_epin_slave+0x1b4>
    dwc2_ep_tsize_t tsiz = {.value = epin->tsiz};
 8008cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	60fb      	str	r3, [r7, #12]
    const uint16_t remain_packets = tsiz.packet_count;
 8008cc0:	89fb      	ldrh	r3, [r7, #14]
 8008cc2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 8008cca:	2300      	movs	r3, #0
 8008ccc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008cd0:	e03f      	b.n	8008d52 <handle_epin_slave+0x17e>
      tsiz.value = epin->tsiz;
 8008cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	60fb      	str	r3, [r7, #12]
      const uint16_t remain_bytes = (uint16_t) tsiz.xfer_size;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cde:	86bb      	strh	r3, [r7, #52]	@ 0x34
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 8008ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce2:	895a      	ldrh	r2, [r3, #10]
 8008ce4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008ce6:	843b      	strh	r3, [r7, #32]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008cec:	8c3a      	ldrh	r2, [r7, #32]
 8008cee:	8bfb      	ldrh	r3, [r7, #30]
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	bf28      	it	cs
 8008cf4:	4613      	movcs	r3, r2
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	867b      	strh	r3, [r7, #50]	@ 0x32

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 8008cfa:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8008cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	0099      	lsls	r1, r3, #2
 8008d02:	4b26      	ldr	r3, [pc, #152]	@ (8008d9c <handle_epin_slave+0x1c8>)
 8008d04:	400b      	ands	r3, r1
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d829      	bhi.n	8008d5e <handle_epin_slave+0x18a>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 8008d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00d      	beq.n	8008d2e <handle_epin_slave+0x15a>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 8008d12:	79bb      	ldrb	r3, [r7, #6]
 8008d14:	3301      	adds	r3, #1
 8008d16:	031b      	lsls	r3, r3, #12
 8008d18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d1a:	4413      	add	r3, r2
 8008d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 8008d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8008d24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fc fdab 	bl	8005882 <tu_fifo_read_n_const_addr_full_words>
 8008d2c:	e00c      	b.n	8008d48 <handle_epin_slave+0x174>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 8008d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008d34:	79b9      	ldrb	r1, [r7, #6]
 8008d36:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8008d38:	f000 fc55 	bl	80095e6 <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 8008d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008d42:	441a      	add	r2, r3
 8008d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d46:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 8008d48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008d52:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8008d56:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d3ba      	bcc.n	8008cd2 <handle_epin_slave+0xfe>
 8008d5c:	e000      	b.n	8008d60 <handle_epin_slave+0x18c>
        break;
 8008d5e:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    tsiz.value = epin->tsiz;
 8008d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d62:	691b      	ldr	r3, [r3, #16]
 8008d64:	60fb      	str	r3, [r7, #12]
    if (tsiz.xfer_size == 0) {
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10b      	bne.n	8008d88 <handle_epin_slave+0x1b4>
      dwc2->diepempmsk &= ~(1 << epnum);
 8008d70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d72:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8008d76:	79ba      	ldrb	r2, [r7, #6]
 8008d78:	2101      	movs	r1, #1
 8008d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8008d7e:	43d2      	mvns	r2, r2
 8008d80:	401a      	ands	r2, r3
 8008d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d84:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 8008d88:	bf00      	nop
 8008d8a:	3748      	adds	r7, #72	@ 0x48
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	08009c38 	.word	0x08009c38
 8008d94:	20000bac 	.word	0x20000bac
 8008d98:	20000c2c 	.word	0x20000c2c
 8008d9c:	0003fffc 	.word	0x0003fffc

08008da0 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b08e      	sub	sp, #56	@ 0x38
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	460a      	mov	r2, r1
 8008daa:	71fb      	strb	r3, [r7, #7]
 8008dac:	4613      	mov	r3, r2
 8008dae:	71bb      	strb	r3, [r7, #6]
 8008db0:	79fb      	ldrb	r3, [r7, #7]
 8008db2:	76fb      	strb	r3, [r7, #27]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008db4:	7efb      	ldrb	r3, [r7, #27]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <handle_ep_irq+0x1e>
    rhport = 0;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	76fb      	strb	r3, [r7, #27]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008dbe:	7efb      	ldrb	r3, [r7, #27]
 8008dc0:	4a38      	ldr	r2, [pc, #224]	@ (8008ea4 <handle_ep_irq+0x104>)
 8008dc2:	011b      	lsls	r3, r3, #4
 8008dc4:	4413      	add	r3, r2
 8008dc6:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008dc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dcc:	61fb      	str	r3, [r7, #28]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dd2:	617b      	str	r3, [r7, #20]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8008dd4:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 8008dd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ddc:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8008dde:	6a3b      	ldr	r3, [r7, #32]
 8008de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008de2:	613b      	str	r3, [r7, #16]
  return ghwcfg2.num_dev_ep + 1;
 8008de4:	7c7b      	ldrb	r3, [r7, #17]
 8008de6:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	3301      	adds	r3, #1
 8008dee:	b2db      	uxtb	r3, r3
  const uint8_t ep_count = dwc2_ep_count(dwc2);
 8008df0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 8008df4:	79bb      	ldrb	r3, [r7, #6]
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d101      	bne.n	8008dfe <handle_ep_irq+0x5e>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	e000      	b.n	8008e00 <handle_ep_irq+0x60>
 8008dfe:	2310      	movs	r3, #16
 8008e00:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 8008e04:	79bb      	ldrb	r3, [r7, #6]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	bf14      	ite	ne
 8008e0a:	2301      	movne	r3, #1
 8008e0c:	2300      	moveq	r3, #0
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	025b      	lsls	r3, r3, #9
 8008e12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e18:	4413      	add	r3, r2
 8008e1a:	62bb      	str	r3, [r7, #40]	@ 0x28

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008e22:	e034      	b.n	8008e8e <handle_ep_irq+0xee>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 8008e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e26:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8008e2a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8008e2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008e32:	440b      	add	r3, r1
 8008e34:	fa22 f303 	lsr.w	r3, r2, r3
 8008e38:	f003 0301 	and.w	r3, r3, #1
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d021      	beq.n	8008e84 <handle_ep_irq+0xe4>
      dwc2_dep_t* epout = &ep_base[epnum];
 8008e40:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008e44:	015b      	lsls	r3, r3, #5
 8008e46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e48:	4413      	add	r3, r2
 8008e4a:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	60fb      	str	r3, [r7, #12]

      epout->intr = intr.value; // Clear interrupt
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e56:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 8008e58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d111      	bne.n	8008e84 <handle_ep_irq+0xe4>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 8008e60:	79bb      	ldrb	r3, [r7, #6]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d107      	bne.n	8008e76 <handle_ep_irq+0xd6>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 8008e66:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8008e6a:	79fb      	ldrb	r3, [r7, #7]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7ff feb0 	bl	8008bd4 <handle_epin_slave>
 8008e74:	e006      	b.n	8008e84 <handle_ep_irq+0xe4>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 8008e76:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8008e7a:	79fb      	ldrb	r3, [r7, #7]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7ff fe28 	bl	8008ad4 <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8008e84:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008e88:	3301      	adds	r3, #1
 8008e8a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008e8e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8008e92:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d3c4      	bcc.n	8008e24 <handle_ep_irq+0x84>
        }
        #endif
      }
    }
  }
}
 8008e9a:	bf00      	nop
 8008e9c:	bf00      	nop
 8008e9e:	3738      	adds	r7, #56	@ 0x38
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	08009c38 	.word	0x08009c38

08008ea8 <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b098      	sub	sp, #96	@ 0x60
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	4603      	mov	r3, r0
 8008eb0:	71fb      	strb	r3, [r7, #7]
 8008eb2:	79fb      	ldrb	r3, [r7, #7]
 8008eb4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008eb8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d002      	beq.n	8008ec6 <dcd_int_handler+0x1e>
    rhport = 0;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008ec6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8008eca:	4a80      	ldr	r2, [pc, #512]	@ (80090cc <dcd_int_handler+0x224>)
 8008ecc:	011b      	lsls	r3, r3, #4
 8008ece:	4413      	add	r3, r2
 8008ed0:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008ed2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  const uint32_t gintmask = dwc2->gintmsk;
 8008ed4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 8008eda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008edc:	695b      	ldr	r3, [r3, #20]
 8008ede:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 8008ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ee6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00d      	beq.n	8008f0a <dcd_int_handler+0x62>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 8008eee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ef0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008ef4:	615a      	str	r2, [r3, #20]

    usbd_spin_lock(true);
 8008ef6:	2001      	movs	r0, #1
 8008ef8:	f7fe f81a 	bl	8006f30 <usbd_spin_lock>
    handle_bus_reset(rhport);
 8008efc:	79fb      	ldrb	r3, [r7, #7]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7ff fc0e 	bl	8008720 <handle_bus_reset>
    usbd_spin_unlock(true);
 8008f04:	2001      	movs	r0, #1
 8008f06:	f7fe f82d 	bl	8006f64 <usbd_spin_unlock>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 8008f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d007      	beq.n	8008f24 <dcd_int_handler+0x7c>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 8008f14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008f1a:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 8008f1c:	79fb      	ldrb	r3, [r7, #7]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7ff fcea 	bl	80088f8 <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 8008f24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d01d      	beq.n	8008f6a <dcd_int_handler+0xc2>
    dwc2->gintsts = GINTSTS_USBSUSP;
 8008f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f34:	615a      	str	r2, [r3, #20]
 8008f36:	79fb      	ldrb	r3, [r7, #7]
 8008f38:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8008f3c:	2304      	movs	r3, #4
 8008f3e:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8008f42:	2301      	movs	r3, #1
 8008f44:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 8008f48:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8008f4c:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 8008f50:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8008f54:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 8008f58:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8008f5c:	f107 0320 	add.w	r3, r7, #32
 8008f60:	4611      	mov	r1, r2
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fd fde6 	bl	8006b34 <dcd_event_handler>
}
 8008f68:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 8008f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	da1d      	bge.n	8008fac <dcd_int_handler+0x104>
    dwc2->gintsts = GINTSTS_WKUINT;
 8008f70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f72:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008f76:	615a      	str	r2, [r3, #20]
 8008f78:	79fb      	ldrb	r3, [r7, #7]
 8008f7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008f7e:	2305      	movs	r3, #5
 8008f80:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8008f84:	2301      	movs	r3, #1
 8008f86:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 8008f8a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008f8e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 8008f92:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008f96:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 8008f9a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8008f9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fd fdc5 	bl	8006b34 <dcd_event_handler>
}
 8008faa:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 8008fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fae:	f003 0304 	and.w	r3, r3, #4
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d022      	beq.n	8008ffc <dcd_int_handler+0x154>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 8008fb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 8008fbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fbe:	f003 0304 	and.w	r3, r3, #4
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d017      	beq.n	8008ff6 <dcd_int_handler+0x14e>
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8008fcc:	2302      	movs	r3, #2
 8008fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 8008fd8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8008fdc:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 8008fde:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008fe2:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8008fe4:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8008fe8:	f107 0314 	add.w	r3, r7, #20
 8008fec:	4611      	mov	r1, r2
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fd fda0 	bl	8006b34 <dcd_event_handler>
}
 8008ff4:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 8008ff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ff8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ffa:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 8008ffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ffe:	f003 0308 	and.w	r3, r3, #8
 8009002:	2b00      	cmp	r3, #0
 8009004:	d02e      	beq.n	8009064 <dcd_int_handler+0x1bc>
    dwc2->gintsts = GINTSTS_SOF;
 8009006:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009008:	2208      	movs	r2, #8
 800900a:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 800900c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800900e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8009012:	0a1b      	lsrs	r3, r3, #8
 8009014:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009018:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 800901a:	4b2d      	ldr	r3, [pc, #180]	@ (80090d0 <dcd_int_handler+0x228>)
 800901c:	79db      	ldrb	r3, [r3, #7]
 800901e:	f083 0301 	eor.w	r3, r3, #1
 8009022:	b2db      	uxtb	r3, r3
 8009024:	2b00      	cmp	r3, #0
 8009026:	d005      	beq.n	8009034 <dcd_int_handler+0x18c>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 8009028:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	f023 0208 	bic.w	r2, r3, #8
 8009030:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009032:	619a      	str	r2, [r3, #24]
 8009034:	79fb      	ldrb	r3, [r7, #7]
 8009036:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800903a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800903c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800903e:	2301      	movs	r3, #1
 8009040:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8009044:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8009048:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 800904a:	2303      	movs	r3, #3
 800904c:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 800904e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009050:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 8009052:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8009056:	f107 0308 	add.w	r3, r7, #8
 800905a:	4611      	mov	r1, r2
 800905c:	4618      	mov	r0, r3
 800905e:	f7fd fd69 	bl	8006b34 <dcd_event_handler>
}
 8009062:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 8009064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009066:	f003 0310 	and.w	r3, r3, #16
 800906a:	2b00      	cmp	r3, #0
 800906c:	d015      	beq.n	800909a <dcd_int_handler+0x1f2>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 800906e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	f023 0210 	bic.w	r2, r3, #16
 8009076:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009078:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 800907a:	79fb      	ldrb	r3, [r7, #7]
 800907c:	4618      	mov	r0, r3
 800907e:	f7ff fc81 	bl	8008984 <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 8009082:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009084:	695b      	ldr	r3, [r3, #20]
 8009086:	f003 0310 	and.w	r3, r3, #16
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1f5      	bne.n	800907a <dcd_int_handler+0x1d2>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 800908e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	f043 0210 	orr.w	r2, r3, #16
 8009096:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009098:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 800909a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800909c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d004      	beq.n	80090ae <dcd_int_handler+0x206>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 80090a4:	79fb      	ldrb	r3, [r7, #7]
 80090a6:	2100      	movs	r1, #0
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7ff fe79 	bl	8008da0 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 80090ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d004      	beq.n	80090c2 <dcd_int_handler+0x21a>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 80090b8:	79fb      	ldrb	r3, [r7, #7]
 80090ba:	2101      	movs	r1, #1
 80090bc:	4618      	mov	r0, r3
 80090be:	f7ff fe6f 	bl	8008da0 <handle_ep_irq>
  }
}
 80090c2:	bf00      	nop
 80090c4:	3760      	adds	r7, #96	@ 0x60
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	08009c38 	.word	0x08009c38
 80090d0:	20000c2c 	.word	0x20000c2c

080090d4 <dwc2_phy_init>:

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 80090e0:	78fb      	ldrb	r3, [r7, #3]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d106      	bne.n	80090f4 <dwc2_phy_init+0x20>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	639a      	str	r2, [r3, #56]	@ 0x38
      #else

      #endif
    }
  }
}
 80090f2:	e005      	b.n	8009100 <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	460b      	mov	r3, r1
 8009116:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 8009118:	78fb      	ldrb	r3, [r7, #3]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d152      	bne.n	80091c4 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 800911e:	4b2c      	ldr	r3, [pc, #176]	@ (80091d0 <dwc2_phy_update+0xc4>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a2c      	ldr	r2, [pc, #176]	@ (80091d4 <dwc2_phy_update+0xc8>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d302      	bcc.n	800912e <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 8009128:	2306      	movs	r3, #6
 800912a:	60fb      	str	r3, [r7, #12]
 800912c:	e041      	b.n	80091b2 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 800912e:	4b28      	ldr	r3, [pc, #160]	@ (80091d0 <dwc2_phy_update+0xc4>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a29      	ldr	r2, [pc, #164]	@ (80091d8 <dwc2_phy_update+0xcc>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d902      	bls.n	800913e <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 8009138:	2307      	movs	r3, #7
 800913a:	60fb      	str	r3, [r7, #12]
 800913c:	e039      	b.n	80091b2 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 800913e:	4b24      	ldr	r3, [pc, #144]	@ (80091d0 <dwc2_phy_update+0xc4>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a26      	ldr	r2, [pc, #152]	@ (80091dc <dwc2_phy_update+0xd0>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d302      	bcc.n	800914e <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 8009148:	2308      	movs	r3, #8
 800914a:	60fb      	str	r3, [r7, #12]
 800914c:	e031      	b.n	80091b2 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 800914e:	4b20      	ldr	r3, [pc, #128]	@ (80091d0 <dwc2_phy_update+0xc4>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a23      	ldr	r2, [pc, #140]	@ (80091e0 <dwc2_phy_update+0xd4>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d902      	bls.n	800915e <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 8009158:	2309      	movs	r3, #9
 800915a:	60fb      	str	r3, [r7, #12]
 800915c:	e029      	b.n	80091b2 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 800915e:	4b1c      	ldr	r3, [pc, #112]	@ (80091d0 <dwc2_phy_update+0xc4>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a20      	ldr	r2, [pc, #128]	@ (80091e4 <dwc2_phy_update+0xd8>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d902      	bls.n	800916e <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 8009168:	230a      	movs	r3, #10
 800916a:	60fb      	str	r3, [r7, #12]
 800916c:	e021      	b.n	80091b2 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 800916e:	4b18      	ldr	r3, [pc, #96]	@ (80091d0 <dwc2_phy_update+0xc4>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a1d      	ldr	r2, [pc, #116]	@ (80091e8 <dwc2_phy_update+0xdc>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d902      	bls.n	800917e <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 8009178:	230b      	movs	r3, #11
 800917a:	60fb      	str	r3, [r7, #12]
 800917c:	e019      	b.n	80091b2 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 800917e:	4b14      	ldr	r3, [pc, #80]	@ (80091d0 <dwc2_phy_update+0xc4>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a1a      	ldr	r2, [pc, #104]	@ (80091ec <dwc2_phy_update+0xe0>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d302      	bcc.n	800918e <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 8009188:	230c      	movs	r3, #12
 800918a:	60fb      	str	r3, [r7, #12]
 800918c:	e011      	b.n	80091b2 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 800918e:	4b10      	ldr	r3, [pc, #64]	@ (80091d0 <dwc2_phy_update+0xc4>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a17      	ldr	r2, [pc, #92]	@ (80091f0 <dwc2_phy_update+0xe4>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d302      	bcc.n	800919e <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 8009198:	230d      	movs	r3, #13
 800919a:	60fb      	str	r3, [r7, #12]
 800919c:	e009      	b.n	80091b2 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 800919e:	4b0c      	ldr	r3, [pc, #48]	@ (80091d0 <dwc2_phy_update+0xc4>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a14      	ldr	r2, [pc, #80]	@ (80091f4 <dwc2_phy_update+0xe8>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d302      	bcc.n	80091ae <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 80091a8:	230e      	movs	r3, #14
 80091aa:	60fb      	str	r3, [r7, #12]
 80091ac:	e001      	b.n	80091b2 <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 80091ae:	230f      	movs	r3, #15
 80091b0:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	029b      	lsls	r3, r3, #10
 80091be:	431a      	orrs	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	60da      	str	r2, [r3, #12]
  }
}
 80091c4:	bf00      	nop
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	20000048 	.word	0x20000048
 80091d4:	01e84800 	.word	0x01e84800
 80091d8:	01a39ddf 	.word	0x01a39ddf
 80091dc:	016e3600 	.word	0x016e3600
 80091e0:	014ca43f 	.word	0x014ca43f
 80091e4:	01312cff 	.word	0x01312cff
 80091e8:	011a499f 	.word	0x011a499f
 80091ec:	01067380 	.word	0x01067380
 80091f0:	00f42400 	.word	0x00f42400
 80091f4:	00e4e1c0 	.word	0x00e4e1c0

080091f8 <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	f043 0201 	orr.w	r2, r3, #1
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009210:	b29b      	uxth	r3, r3
 8009212:	f244 2209 	movw	r2, #16905	@ 0x4209
 8009216:	4293      	cmp	r3, r2
 8009218:	d807      	bhi.n	800922a <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 800921a:	bf00      	nop
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	f003 0301 	and.w	r3, r3, #1
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1f9      	bne.n	800921c <reset_core+0x24>
 8009228:	e010      	b.n	800924c <reset_core+0x54>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 800922a:	bf00      	nop
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	691b      	ldr	r3, [r3, #16]
 8009230:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d0f9      	beq.n	800922c <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009240:	f023 0301 	bic.w	r3, r3, #1
 8009244:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 800924c:	bf00      	nop
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	2b00      	cmp	r3, #0
 8009254:	dafb      	bge.n	800924e <reset_core+0x56>
}
 8009256:	bf00      	nop
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009278:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 8009280:	2100      	movs	r1, #0
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7ff ff26 	bl	80090d4 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f7ff ffb5 	bl	80091f8 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8009294:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800929c:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 80092a4:	2100      	movs	r1, #0
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7ff ff30 	bl	800910c <dwc2_phy_update>
}
 80092ac:	bf00      	nop
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	617b      	str	r3, [r7, #20]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092c6:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg4_t ghwcfg4 = {.value = dwc2->ghwcfg4};
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092cc:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092d4:	617b      	str	r3, [r7, #20]

  if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 80092d6:	7c3b      	ldrb	r3, [r7, #16]
 80092d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2b80      	cmp	r3, #128	@ 0x80
 80092e0:	d114      	bne.n	800930c <phy_hs_init+0x58>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f043 0310 	orr.w	r3, r3, #16
 80092e8:	617b      	str	r3, [r7, #20]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f023 0308 	bic.w	r3, r3, #8
 80092f0:	617b      	str	r3, [r7, #20]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092f8:	617b      	str	r3, [r7, #20]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009300:	617b      	str	r3, [r7, #20]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 8009308:	617b      	str	r3, [r7, #20]
 800930a:	e012      	b.n	8009332 <phy_hs_init+0x7e>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	f023 0310 	bic.w	r3, r3, #16
 8009312:	617b      	str	r3, [r7, #20]

    // Set 16-bit interface if supported
    if (ghwcfg4.phy_data_width) {
 8009314:	7b7b      	ldrb	r3, [r7, #13]
 8009316:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b00      	cmp	r3, #0
 800931e:	d004      	beq.n	800932a <phy_hs_init+0x76>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	f043 0308 	orr.w	r3, r3, #8
 8009326:	617b      	str	r3, [r7, #20]
 8009328:	e003      	b.n	8009332 <phy_hs_init+0x7e>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	f023 0308 	bic.w	r3, r3, #8
 8009330:	617b      	str	r3, [r7, #20]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	697a      	ldr	r2, [r7, #20]
 8009336:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, ghwcfg2.hs_phy_type);
 8009338:	7c3b      	ldrb	r3, [r7, #16]
 800933a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800933e:	b2db      	uxtb	r3, r3
 8009340:	4619      	mov	r1, r3
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7ff fec6 	bl	80090d4 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f7ff ff55 	bl	80091f8 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8009354:	617b      	str	r3, [r7, #20]
  gusbcfg |= (ghwcfg4.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 8009356:	7b7b      	ldrb	r3, [r7, #13]
 8009358:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800935c:	b2db      	uxtb	r3, r3
 800935e:	2b00      	cmp	r3, #0
 8009360:	d002      	beq.n	8009368 <phy_hs_init+0xb4>
 8009362:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8009366:	e001      	b.n	800936c <phy_hs_init+0xb8>
 8009368:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800936c:	697a      	ldr	r2, [r7, #20]
 800936e:	4313      	orrs	r3, r2
 8009370:	617b      	str	r3, [r7, #20]
  dwc2->gusbcfg = gusbcfg;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	697a      	ldr	r2, [r7, #20]
 8009376:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, ghwcfg2.hs_phy_type);
 8009378:	7c3b      	ldrb	r3, [r7, #16]
 800937a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800937e:	b2db      	uxtb	r3, r3
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7ff fec2 	bl	800910c <dwc2_phy_update>
}
 8009388:	bf00      	nop
 800938a:	3718      	adds	r7, #24
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800939c:	0c1b      	lsrs	r3, r3, #16
 800939e:	041b      	lsls	r3, r3, #16
 80093a0:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	4a0e      	ldr	r2, [pc, #56]	@ (80093e0 <check_dwc2+0x50>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d012      	beq.n	80093d0 <check_dwc2+0x40>
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	4a0d      	ldr	r2, [pc, #52]	@ (80093e4 <check_dwc2+0x54>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d00e      	beq.n	80093d0 <check_dwc2+0x40>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	4a0c      	ldr	r2, [pc, #48]	@ (80093e8 <check_dwc2+0x58>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d00a      	beq.n	80093d0 <check_dwc2+0x40>
 80093ba:	4b0c      	ldr	r3, [pc, #48]	@ (80093ec <check_dwc2+0x5c>)
 80093bc:	60bb      	str	r3, [r7, #8]
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d000      	beq.n	80093cc <check_dwc2+0x3c>
 80093ca:	be00      	bkpt	0x0000
 80093cc:	2300      	movs	r3, #0
 80093ce:	e000      	b.n	80093d2 <check_dwc2+0x42>
#endif

  return true;
 80093d0:	2301      	movs	r3, #1
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3714      	adds	r7, #20
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	4f540000 	.word	0x4f540000
 80093e4:	55310000 	.word	0x55310000
 80093e8:	55320000 	.word	0x55320000
 80093ec:	e000edf0 	.word	0xe000edf0

080093f0 <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	460b      	mov	r3, r1
 80093fa:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;
#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 80093fc:	78fb      	ldrb	r3, [r7, #3]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d101      	bne.n	8009406 <dwc2_core_is_highspeed+0x16>
    return false;
 8009402:	2300      	movs	r3, #0
 8009404:	e00b      	b.n	800941e <dwc2_core_is_highspeed+0x2e>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800940a:	60fb      	str	r3, [r7, #12]
  return ghwcfg2.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 800940c:	7b3b      	ldrb	r3, [r7, #12]
 800940e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009412:	b2db      	uxtb	r3, r3
 8009414:	2b00      	cmp	r3, #0
 8009416:	bf14      	ite	ne
 8009418:	2301      	movne	r3, #1
 800941a:	2300      	moveq	r3, #0
 800941c:	b2db      	uxtb	r3, r3
}
 800941e:	4618      	mov	r0, r3
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
	...

0800942c <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 800942c:	b580      	push	{r7, lr}
 800942e:	b088      	sub	sp, #32
 8009430:	af00      	add	r7, sp, #0
 8009432:	4603      	mov	r3, r0
 8009434:	71fb      	strb	r3, [r7, #7]
 8009436:	460b      	mov	r3, r1
 8009438:	71bb      	strb	r3, [r7, #6]
 800943a:	4613      	mov	r3, r2
 800943c:	717b      	strb	r3, [r7, #5]
 800943e:	79fb      	ldrb	r3, [r7, #7]
 8009440:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009442:	7dfb      	ldrb	r3, [r7, #23]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <dwc2_core_init+0x20>
    rhport = 0;
 8009448:	2300      	movs	r3, #0
 800944a:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800944c:	7dfb      	ldrb	r3, [r7, #23]
 800944e:	4a3b      	ldr	r2, [pc, #236]	@ (800953c <dwc2_core_init+0x110>)
 8009450:	011b      	lsls	r3, r3, #4
 8009452:	4413      	add	r3, r2
 8009454:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009456:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 8009458:	69f8      	ldr	r0, [r7, #28]
 800945a:	f7ff ff99 	bl	8009390 <check_dwc2>
 800945e:	4603      	mov	r3, r0
 8009460:	f083 0301 	eor.w	r3, r3, #1
 8009464:	b2db      	uxtb	r3, r3
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00a      	beq.n	8009480 <dwc2_core_init+0x54>
 800946a:	4b35      	ldr	r3, [pc, #212]	@ (8009540 <dwc2_core_init+0x114>)
 800946c:	61bb      	str	r3, [r7, #24]
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	2b00      	cmp	r3, #0
 8009478:	d000      	beq.n	800947c <dwc2_core_init+0x50>
 800947a:	be00      	bkpt	0x0000
 800947c:	2300      	movs	r3, #0
 800947e:	e058      	b.n	8009532 <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	f023 0201 	bic.w	r2, r3, #1
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 800948c:	79bb      	ldrb	r3, [r7, #6]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d003      	beq.n	800949a <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 8009492:	69f8      	ldr	r0, [r7, #28]
 8009494:	f7ff ff0e 	bl	80092b4 <phy_hs_init>
 8009498:	e002      	b.n	80094a0 <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 800949a:	69f8      	ldr	r0, [r7, #28]
 800949c:	f7ff fee2 	bl	8009264 <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	f043 0207 	orr.w	r2, r3, #7
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80094b2:	f023 020f 	bic.w	r2, r3, #15
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	60fb      	str	r3, [r7, #12]
 80094c0:	2310      	movs	r3, #16
 80094c2:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 80094c4:	7afb      	ldrb	r3, [r7, #11]
 80094c6:	019b      	lsls	r3, r3, #6
 80094c8:	f043 0220 	orr.w	r2, r3, #32
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 80094d0:	bf00      	nop
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	f003 0320 	and.w	r3, r3, #32
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1f9      	bne.n	80094d2 <dwc2_core_init+0xa6>
}
 80094de:	bf00      	nop
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	2210      	movs	r2, #16
 80094e8:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 80094ea:	bf00      	nop
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	f003 0310 	and.w	r3, r3, #16
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1f9      	bne.n	80094ec <dwc2_core_init+0xc0>
}
 80094f8:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009500:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	f04f 32ff 	mov.w	r2, #4294967295
 8009508:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	2200      	movs	r2, #0
 800950e:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 8009510:	797b      	ldrb	r3, [r7, #5]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d006      	beq.n	8009524 <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	609a      	str	r2, [r3, #8]
 8009522:	e005      	b.n	8009530 <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	f043 0210 	orr.w	r2, r3, #16
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	619a      	str	r2, [r3, #24]
  }

  return true;
 8009530:	2301      	movs	r3, #1
}
 8009532:	4618      	mov	r0, r3
 8009534:	3720      	adds	r7, #32
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	08009c48 	.word	0x08009c48
 8009540:	e000edf0 	.word	0xe000edf0

08009544 <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 8009544:	b480      	push	{r7}
 8009546:	b08f      	sub	sp, #60	@ 0x3c
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	4613      	mov	r3, r2
 8009550:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009558:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 800955a:	88fb      	ldrh	r3, [r7, #6]
 800955c:	089b      	lsrs	r3, r3, #2
 800955e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 8009560:	e00b      	b.n	800957a <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 8009562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	627a      	str	r2, [r7, #36]	@ 0x24
 800956a:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 800956c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956e:	6a3a      	ldr	r2, [r7, #32]
 8009570:	601a      	str	r2, [r3, #0]
}
 8009572:	bf00      	nop
    dst += 4;
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	3304      	adds	r3, #4
 8009578:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 800957a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800957c:	1e5a      	subs	r2, r3, #1
 800957e:	86fa      	strh	r2, [r7, #54]	@ 0x36
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1ee      	bne.n	8009562 <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 8009584:	88fb      	ldrh	r3, [r7, #6]
 8009586:	b2db      	uxtb	r3, r3
 8009588:	f003 0303 	and.w	r3, r3, #3
 800958c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 8009590:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009594:	2b00      	cmp	r3, #0
 8009596:	d020      	beq.n	80095da <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 8009598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800959e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a0:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 80095aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d907      	bls.n	80095c2 <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	3301      	adds	r3, #1
 80095b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095b8:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 80095ba:	69ba      	ldr	r2, [r7, #24]
 80095bc:	0a12      	lsrs	r2, r2, #8
 80095be:	b2d2      	uxtb	r2, r2
 80095c0:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 80095c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d907      	bls.n	80095da <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	3302      	adds	r3, #2
 80095ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095d0:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 80095d2:	697a      	ldr	r2, [r7, #20]
 80095d4:	0c12      	lsrs	r2, r2, #16
 80095d6:	b2d2      	uxtb	r2, r2
 80095d8:	701a      	strb	r2, [r3, #0]
    }
  }
}
 80095da:	bf00      	nop
 80095dc:	373c      	adds	r7, #60	@ 0x3c
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr

080095e6 <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 80095e6:	b480      	push	{r7}
 80095e8:	b08b      	sub	sp, #44	@ 0x2c
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	60f8      	str	r0, [r7, #12]
 80095ee:	607a      	str	r2, [r7, #4]
 80095f0:	461a      	mov	r2, r3
 80095f2:	460b      	mov	r3, r1
 80095f4:	72fb      	strb	r3, [r7, #11]
 80095f6:	4613      	mov	r3, r2
 80095f8:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 80095fa:	7afb      	ldrb	r3, [r7, #11]
 80095fc:	3301      	adds	r3, #1
 80095fe:	031b      	lsls	r3, r3, #12
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	4413      	add	r3, r2
 8009604:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 8009606:	893b      	ldrh	r3, [r7, #8]
 8009608:	089b      	lsrs	r3, r3, #2
 800960a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 800960c:	e008      	b.n	8009620 <dfifo_write_packet+0x3a>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	601a      	str	r2, [r3, #0]
    src += 4;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	3304      	adds	r3, #4
 800961e:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 8009620:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009622:	1e5a      	subs	r2, r3, #1
 8009624:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1f1      	bne.n	800960e <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 800962a:	893b      	ldrh	r3, [r7, #8]
 800962c:	b2db      	uxtb	r3, r3
 800962e:	f003 0303 	and.w	r3, r3, #3
 8009632:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 8009634:	7efb      	ldrb	r3, [r7, #27]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d019      	beq.n	800966e <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 8009640:	7efb      	ldrb	r3, [r7, #27]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d906      	bls.n	8009654 <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	3301      	adds	r3, #1
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	021b      	lsls	r3, r3, #8
 800964e:	6a3a      	ldr	r2, [r7, #32]
 8009650:	4313      	orrs	r3, r2
 8009652:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 8009654:	7efb      	ldrb	r3, [r7, #27]
 8009656:	2b02      	cmp	r3, #2
 8009658:	d906      	bls.n	8009668 <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	3302      	adds	r3, #2
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	041b      	lsls	r3, r3, #16
 8009662:	6a3a      	ldr	r2, [r7, #32]
 8009664:	4313      	orrs	r3, r2
 8009666:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	6a3a      	ldr	r2, [r7, #32]
 800966c:	601a      	str	r2, [r3, #0]
  }
}
 800966e:	bf00      	nop
 8009670:	372c      	adds	r7, #44	@ 0x2c
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr
	...

0800967c <tusb_rhport_init>:
}

//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+
bool tusb_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af00      	add	r7, sp, #0
 8009682:	4603      	mov	r3, r0
 8009684:	6039      	str	r1, [r7, #0]
 8009686:	71fb      	strb	r3, [r7, #7]
  //  backward compatible called with tusb_init(void)
  #if defined(TUD_OPT_RHPORT) || defined(TUH_OPT_RHPORT)
  if (rh_init == NULL) {
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d11f      	bne.n	80096ce <tusb_rhport_init+0x52>
    #if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
    // init device stack CFG_TUSB_RHPORTx_MODE must be defined
    const tusb_rhport_init_t dev_init = {
 800968e:	2301      	movs	r3, #1
 8009690:	723b      	strb	r3, [r7, #8]
 8009692:	2300      	movs	r3, #0
 8009694:	727b      	strb	r3, [r7, #9]
      .role = TUSB_ROLE_DEVICE,
      .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
    };
    TU_ASSERT ( tud_rhport_init(TUD_OPT_RHPORT, &dev_init) );
 8009696:	f107 0308 	add.w	r3, r7, #8
 800969a:	4619      	mov	r1, r3
 800969c:	2000      	movs	r0, #0
 800969e:	f7fc fa63 	bl	8005b68 <tud_rhport_init>
 80096a2:	4603      	mov	r3, r0
 80096a4:	f083 0301 	eor.w	r3, r3, #1
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00a      	beq.n	80096c4 <tusb_rhport_init+0x48>
 80096ae:	4b23      	ldr	r3, [pc, #140]	@ (800973c <tusb_rhport_init+0xc0>)
 80096b0:	60fb      	str	r3, [r7, #12]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 0301 	and.w	r3, r3, #1
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d000      	beq.n	80096c0 <tusb_rhport_init+0x44>
 80096be:	be00      	bkpt	0x0000
 80096c0:	2300      	movs	r3, #0
 80096c2:	e036      	b.n	8009732 <tusb_rhport_init+0xb6>
    _tusb_rhport_role[TUD_OPT_RHPORT] = TUSB_ROLE_DEVICE;
 80096c4:	4b1e      	ldr	r3, [pc, #120]	@ (8009740 <tusb_rhport_init+0xc4>)
 80096c6:	2201      	movs	r2, #1
 80096c8:	701a      	strb	r2, [r3, #0]
    };
    TU_ASSERT( tuh_rhport_init(TUH_OPT_RHPORT, &host_init) );
    _tusb_rhport_role[TUH_OPT_RHPORT] = TUSB_ROLE_HOST;
    #endif

    return true;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e031      	b.n	8009732 <tusb_rhport_init+0xb6>
  }
  #endif

  // new API with explicit rhport and role
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 80096ce:	79fb      	ldrb	r3, [r7, #7]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d803      	bhi.n	80096dc <tusb_rhport_init+0x60>
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10a      	bne.n	80096f2 <tusb_rhport_init+0x76>
 80096dc:	4b17      	ldr	r3, [pc, #92]	@ (800973c <tusb_rhport_init+0xc0>)
 80096de:	613b      	str	r3, [r7, #16]
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 0301 	and.w	r3, r3, #1
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d000      	beq.n	80096ee <tusb_rhport_init+0x72>
 80096ec:	be00      	bkpt	0x0000
 80096ee:	2300      	movs	r3, #0
 80096f0:	e01f      	b.n	8009732 <tusb_rhport_init+0xb6>
  _tusb_rhport_role[rhport] = rh_init->role;
 80096f2:	79fb      	ldrb	r3, [r7, #7]
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	7811      	ldrb	r1, [r2, #0]
 80096f8:	4a11      	ldr	r2, [pc, #68]	@ (8009740 <tusb_rhport_init+0xc4>)
 80096fa:	54d1      	strb	r1, [r2, r3]

  #if CFG_TUD_ENABLED
  if (rh_init->role == TUSB_ROLE_DEVICE) {
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d115      	bne.n	8009730 <tusb_rhport_init+0xb4>
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
 8009704:	79fb      	ldrb	r3, [r7, #7]
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	4618      	mov	r0, r3
 800970a:	f7fc fa2d 	bl	8005b68 <tud_rhport_init>
 800970e:	4603      	mov	r3, r0
 8009710:	f083 0301 	eor.w	r3, r3, #1
 8009714:	b2db      	uxtb	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00a      	beq.n	8009730 <tusb_rhport_init+0xb4>
 800971a:	4b08      	ldr	r3, [pc, #32]	@ (800973c <tusb_rhport_init+0xc0>)
 800971c:	617b      	str	r3, [r7, #20]
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b00      	cmp	r3, #0
 8009728:	d000      	beq.n	800972c <tusb_rhport_init+0xb0>
 800972a:	be00      	bkpt	0x0000
 800972c:	2300      	movs	r3, #0
 800972e:	e000      	b.n	8009732 <tusb_rhport_init+0xb6>
  if (rh_init->role == TUSB_ROLE_HOST) {
    TU_ASSERT(tuh_rhport_init(rhport, rh_init));
  }
  #endif

  return true;
 8009730:	2301      	movs	r3, #1
}
 8009732:	4618      	mov	r0, r3
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	e000edf0 	.word	0xe000edf0
 8009740:	20000c3c 	.word	0x20000c3c

08009744 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009756:	b2db      	uxtb	r3, r3
 8009758:	2b00      	cmp	r3, #0
 800975a:	d106      	bne.n	800976a <tu_edpt_claim+0x26>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009764:	b2db      	uxtb	r3, r3
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <tu_edpt_claim+0x2a>
 800976a:	2300      	movs	r3, #0
 800976c:	e01e      	b.n	80097ac <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009776:	b2db      	uxtb	r3, r3
 8009778:	2b00      	cmp	r3, #0
 800977a:	d108      	bne.n	800978e <tu_edpt_claim+0x4a>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <tu_edpt_claim+0x4a>
 800978a:	2301      	movs	r3, #1
 800978c:	e000      	b.n	8009790 <tu_edpt_claim+0x4c>
 800978e:	2300      	movs	r3, #0
 8009790:	73fb      	strb	r3, [r7, #15]
 8009792:	7bfb      	ldrb	r3, [r7, #15]
 8009794:	f003 0301 	and.w	r3, r3, #1
 8009798:	73fb      	strb	r3, [r7, #15]
  if (available) {
 800979a:	7bfb      	ldrb	r3, [r7, #15]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d004      	beq.n	80097aa <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	7813      	ldrb	r3, [r2, #0]
 80097a4:	f043 0304 	orr.w	r3, r3, #4
 80097a8:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 80097aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d108      	bne.n	80097e2 <tu_edpt_release+0x2a>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d101      	bne.n	80097e2 <tu_edpt_release+0x2a>
 80097de:	2301      	movs	r3, #1
 80097e0:	e000      	b.n	80097e4 <tu_edpt_release+0x2c>
 80097e2:	2300      	movs	r3, #0
 80097e4:	73fb      	strb	r3, [r7, #15]
 80097e6:	7bfb      	ldrb	r3, [r7, #15]
 80097e8:	f003 0301 	and.w	r3, r3, #1
 80097ec:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 80097ee:	7bfb      	ldrb	r3, [r7, #15]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d004      	beq.n	80097fe <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	7813      	ldrb	r3, [r2, #0]
 80097f8:	f023 0304 	bic.w	r3, r3, #4
 80097fc:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 80097fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 800980c:	b480      	push	{r7}
 800980e:	b08b      	sub	sp, #44	@ 0x2c
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	460b      	mov	r3, r1
 8009816:	70fb      	strb	r3, [r7, #3]
 8009818:	4613      	mov	r3, r2
 800981a:	70bb      	strb	r3, [r7, #2]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	889b      	ldrh	r3, [r3, #4]
 8009824:	b29b      	uxth	r3, r3
 8009826:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800982a:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800982c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	78db      	ldrb	r3, [r3, #3]
 8009832:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b03      	cmp	r3, #3
 800983a:	d059      	beq.n	80098f0 <tu_edpt_validate+0xe4>
 800983c:	2b03      	cmp	r3, #3
 800983e:	dc6e      	bgt.n	800991e <tu_edpt_validate+0x112>
 8009840:	2b01      	cmp	r3, #1
 8009842:	d002      	beq.n	800984a <tu_edpt_validate+0x3e>
 8009844:	2b02      	cmp	r3, #2
 8009846:	d018      	beq.n	800987a <tu_edpt_validate+0x6e>
 8009848:	e069      	b.n	800991e <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800984a:	78fb      	ldrb	r3, [r7, #3]
 800984c:	2b02      	cmp	r3, #2
 800984e:	d102      	bne.n	8009856 <tu_edpt_validate+0x4a>
 8009850:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009854:	e001      	b.n	800985a <tu_edpt_validate+0x4e>
 8009856:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800985a:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 800985c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800985e:	8a7b      	ldrh	r3, [r7, #18]
 8009860:	429a      	cmp	r2, r3
 8009862:	d95e      	bls.n	8009922 <tu_edpt_validate+0x116>
 8009864:	4b35      	ldr	r3, [pc, #212]	@ (800993c <tu_edpt_validate+0x130>)
 8009866:	60fb      	str	r3, [r7, #12]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 0301 	and.w	r3, r3, #1
 8009870:	2b00      	cmp	r3, #0
 8009872:	d000      	beq.n	8009876 <tu_edpt_validate+0x6a>
 8009874:	be00      	bkpt	0x0000
 8009876:	2300      	movs	r3, #0
 8009878:	e059      	b.n	800992e <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 800987a:	78fb      	ldrb	r3, [r7, #3]
 800987c:	2b02      	cmp	r3, #2
 800987e:	d10e      	bne.n	800989e <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8009880:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009882:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009886:	d04e      	beq.n	8009926 <tu_edpt_validate+0x11a>
 8009888:	4b2c      	ldr	r3, [pc, #176]	@ (800993c <tu_edpt_validate+0x130>)
 800988a:	617b      	str	r3, [r7, #20]
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 0301 	and.w	r3, r3, #1
 8009894:	2b00      	cmp	r3, #0
 8009896:	d000      	beq.n	800989a <tu_edpt_validate+0x8e>
 8009898:	be00      	bkpt	0x0000
 800989a:	2300      	movs	r3, #0
 800989c:	e047      	b.n	800992e <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 800989e:	78bb      	ldrb	r3, [r7, #2]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00e      	beq.n	80098c2 <tu_edpt_validate+0xb6>
 80098a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80098a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098aa:	d10a      	bne.n	80098c2 <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80098b8:	711a      	strb	r2, [r3, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 80098be:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 80098c0:	e031      	b.n	8009926 <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 80098c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80098c4:	2b08      	cmp	r3, #8
 80098c6:	d02e      	beq.n	8009926 <tu_edpt_validate+0x11a>
 80098c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80098ca:	2b10      	cmp	r3, #16
 80098cc:	d02b      	beq.n	8009926 <tu_edpt_validate+0x11a>
 80098ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80098d0:	2b20      	cmp	r3, #32
 80098d2:	d028      	beq.n	8009926 <tu_edpt_validate+0x11a>
 80098d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80098d6:	2b40      	cmp	r3, #64	@ 0x40
 80098d8:	d025      	beq.n	8009926 <tu_edpt_validate+0x11a>
 80098da:	4b18      	ldr	r3, [pc, #96]	@ (800993c <tu_edpt_validate+0x130>)
 80098dc:	61bb      	str	r3, [r7, #24]
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 0301 	and.w	r3, r3, #1
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d000      	beq.n	80098ec <tu_edpt_validate+0xe0>
 80098ea:	be00      	bkpt	0x0000
 80098ec:	2300      	movs	r3, #0
 80098ee:	e01e      	b.n	800992e <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 80098f0:	78fb      	ldrb	r3, [r7, #3]
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d102      	bne.n	80098fc <tu_edpt_validate+0xf0>
 80098f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098fa:	e000      	b.n	80098fe <tu_edpt_validate+0xf2>
 80098fc:	2340      	movs	r3, #64	@ 0x40
 80098fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 8009900:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009902:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009904:	429a      	cmp	r2, r3
 8009906:	d910      	bls.n	800992a <tu_edpt_validate+0x11e>
 8009908:	4b0c      	ldr	r3, [pc, #48]	@ (800993c <tu_edpt_validate+0x130>)
 800990a:	623b      	str	r3, [r7, #32]
 800990c:	6a3b      	ldr	r3, [r7, #32]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f003 0301 	and.w	r3, r3, #1
 8009914:	2b00      	cmp	r3, #0
 8009916:	d000      	beq.n	800991a <tu_edpt_validate+0x10e>
 8009918:	be00      	bkpt	0x0000
 800991a:	2300      	movs	r3, #0
 800991c:	e007      	b.n	800992e <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 800991e:	2300      	movs	r3, #0
 8009920:	e005      	b.n	800992e <tu_edpt_validate+0x122>
      break;
 8009922:	bf00      	nop
 8009924:	e002      	b.n	800992c <tu_edpt_validate+0x120>
      break;
 8009926:	bf00      	nop
 8009928:	e000      	b.n	800992c <tu_edpt_validate+0x120>
      break;
 800992a:	bf00      	nop
  }

  return true;
 800992c:	2301      	movs	r3, #1
}
 800992e:	4618      	mov	r0, r3
 8009930:	372c      	adds	r7, #44	@ 0x2c
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop
 800993c:	e000edf0 	.word	0xe000edf0

08009940 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 8009940:	b480      	push	{r7}
 8009942:	b08d      	sub	sp, #52	@ 0x34
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	4611      	mov	r1, r2
 800994c:	461a      	mov	r2, r3
 800994e:	460b      	mov	r3, r1
 8009950:	80fb      	strh	r3, [r7, #6]
 8009952:	4613      	mov	r3, r2
 8009954:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800995a:	88fb      	ldrh	r3, [r7, #6]
 800995c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800995e:	4413      	add	r3, r2
 8009960:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 8009962:	e027      	b.n	80099b4 <tu_edpt_bind_driver+0x74>
 8009964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009966:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8009968:	6a3b      	ldr	r3, [r7, #32]
 800996a:	3301      	adds	r3, #1
 800996c:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 800996e:	2b05      	cmp	r3, #5
 8009970:	d116      	bne.n	80099a0 <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8009972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009974:	789b      	ldrb	r3, [r3, #2]
 8009976:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800997a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800997e:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009980:	7fbb      	ldrb	r3, [r7, #30]
 8009982:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009986:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8009988:	005b      	lsls	r3, r3, #1
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	4413      	add	r3, r2
 800998e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009992:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009994:	7ffa      	ldrb	r2, [r7, #31]
 8009996:	09d2      	lsrs	r2, r2, #7
 8009998:	b2d2      	uxtb	r2, r2
 800999a:	4611      	mov	r1, r2
 800999c:	797a      	ldrb	r2, [r7, #5]
 800999e:	545a      	strb	r2, [r3, r1]
 80099a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a2:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	461a      	mov	r2, r3
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 80099b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 80099b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d3d3      	bcc.n	8009964 <tu_edpt_bind_driver+0x24>
  }
}
 80099bc:	bf00      	nop
 80099be:	bf00      	nop
 80099c0:	3734      	adds	r7, #52	@ 0x34
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <memset>:
 80099ca:	4402      	add	r2, r0
 80099cc:	4603      	mov	r3, r0
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d100      	bne.n	80099d4 <memset+0xa>
 80099d2:	4770      	bx	lr
 80099d4:	f803 1b01 	strb.w	r1, [r3], #1
 80099d8:	e7f9      	b.n	80099ce <memset+0x4>
	...

080099dc <__libc_init_array>:
 80099dc:	b570      	push	{r4, r5, r6, lr}
 80099de:	4d0d      	ldr	r5, [pc, #52]	@ (8009a14 <__libc_init_array+0x38>)
 80099e0:	4c0d      	ldr	r4, [pc, #52]	@ (8009a18 <__libc_init_array+0x3c>)
 80099e2:	1b64      	subs	r4, r4, r5
 80099e4:	10a4      	asrs	r4, r4, #2
 80099e6:	2600      	movs	r6, #0
 80099e8:	42a6      	cmp	r6, r4
 80099ea:	d109      	bne.n	8009a00 <__libc_init_array+0x24>
 80099ec:	4d0b      	ldr	r5, [pc, #44]	@ (8009a1c <__libc_init_array+0x40>)
 80099ee:	4c0c      	ldr	r4, [pc, #48]	@ (8009a20 <__libc_init_array+0x44>)
 80099f0:	f000 f826 	bl	8009a40 <_init>
 80099f4:	1b64      	subs	r4, r4, r5
 80099f6:	10a4      	asrs	r4, r4, #2
 80099f8:	2600      	movs	r6, #0
 80099fa:	42a6      	cmp	r6, r4
 80099fc:	d105      	bne.n	8009a0a <__libc_init_array+0x2e>
 80099fe:	bd70      	pop	{r4, r5, r6, pc}
 8009a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a04:	4798      	blx	r3
 8009a06:	3601      	adds	r6, #1
 8009a08:	e7ee      	b.n	80099e8 <__libc_init_array+0xc>
 8009a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a0e:	4798      	blx	r3
 8009a10:	3601      	adds	r6, #1
 8009a12:	e7f2      	b.n	80099fa <__libc_init_array+0x1e>
 8009a14:	08009c60 	.word	0x08009c60
 8009a18:	08009c60 	.word	0x08009c60
 8009a1c:	08009c60 	.word	0x08009c60
 8009a20:	08009c64 	.word	0x08009c64

08009a24 <memcpy>:
 8009a24:	440a      	add	r2, r1
 8009a26:	4291      	cmp	r1, r2
 8009a28:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a2c:	d100      	bne.n	8009a30 <memcpy+0xc>
 8009a2e:	4770      	bx	lr
 8009a30:	b510      	push	{r4, lr}
 8009a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a3a:	4291      	cmp	r1, r2
 8009a3c:	d1f9      	bne.n	8009a32 <memcpy+0xe>
 8009a3e:	bd10      	pop	{r4, pc}

08009a40 <_init>:
 8009a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a42:	bf00      	nop
 8009a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a46:	bc08      	pop	{r3}
 8009a48:	469e      	mov	lr, r3
 8009a4a:	4770      	bx	lr

08009a4c <_fini>:
 8009a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4e:	bf00      	nop
 8009a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a52:	bc08      	pop	{r3}
 8009a54:	469e      	mov	lr, r3
 8009a56:	4770      	bx	lr
