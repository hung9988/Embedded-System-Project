
macrolev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08040000  08040000  000112a0  2**0
                  CONTENTS
  1 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000de94  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000140c  0800e034  0800e034  0000f034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800f440  0800f440  000112a0  2**0
                  CONTENTS
  5 .ARM          00000008  0800f440  0800f440  00010440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800f448  0800f448  000112a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800f448  0800f448  00010448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800f44c  0800f44c  0001044c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000002a0  20000000  0800f450  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000179c  200002a0  0800f6f0  000112a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001a3c  0800f6f0  00011a3c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000112a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ee46  00000000  00000000  000112d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000557c  00000000  00000000  00030116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016d8  00000000  00000000  00035698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001225  00000000  00000000  00036d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000203e0  00000000  00000000  00037f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f71b  00000000  00000000  00058375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9cd9  00000000  00000000  00077a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00131769  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ab8  00000000  00000000  001317ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00138264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002a0 	.word	0x200002a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e01c 	.word	0x0800e01c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002a4 	.word	0x200002a4
 80001dc:	0800e01c 	.word	0x0800e01c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <cdc_task>:

  tud_cdc_write(msg, len);
  tud_cdc_write_flush(); // Make sure data is sent
}

void cdc_task(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b098      	sub	sp, #96	@ 0x60
 80005e0:	af00      	add	r7, sp, #0
TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_ready(void) {
  return tud_cdc_n_ready(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_connected(void) {
  return tud_cdc_n_connected(0);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f006 fb04 	bl	8006bf0 <tud_cdc_n_connected>
 80005e8:	4603      	mov	r3, r0
  if (tud_cdc_connected()) {
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	f000 80b8 	beq.w	8000760 <cdc_task+0x184>
    // Handle streaming if active
    handle_streaming();
 80005f0:	f000 f95c 	bl	80008ac <handle_streaming>
TU_ATTR_ALWAYS_INLINE static inline void tud_cdc_set_wanted_char(char wanted) {
  tud_cdc_n_set_wanted_char(0, wanted);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_available(void) {
  return tud_cdc_n_available(0);
 80005f4:	2000      	movs	r0, #0
 80005f6:	f006 fb39 	bl	8006c6c <tud_cdc_n_available>
 80005fa:	4603      	mov	r3, r0

    if (tud_cdc_available()) {
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	f000 80b5 	beq.w	800076c <cdc_task+0x190>
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	657b      	str	r3, [r7, #84]	@ 0x54
 8000606:	2340      	movs	r3, #64	@ 0x40
 8000608:	653b      	str	r3, [r7, #80]	@ 0x50
TU_ATTR_ALWAYS_INLINE static inline int32_t tud_cdc_read_char(void) {
  return tud_cdc_n_read_char(0);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_read(void* buffer, uint32_t bufsize) {
  return tud_cdc_n_read(0, buffer, bufsize);
 800060a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800060c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800060e:	2000      	movs	r0, #0
 8000610:	f006 fb42 	bl	8006c98 <tud_cdc_n_read>
 8000614:	4603      	mov	r3, r0
      uint8_t buf[CFG_TUD_CDC_RX_BUFSIZE];
      uint32_t count = tud_cdc_read(buf, sizeof(buf));
 8000616:	65bb      	str	r3, [r7, #88]	@ 0x58

      for (uint32_t i = 0; i < count; i++) {
 8000618:	2300      	movs	r3, #0
 800061a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800061c:	e091      	b.n	8000742 <cdc_task+0x166>
        char c = buf[i];
 800061e:	1d3a      	adds	r2, r7, #4
 8000620:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000622:	4413      	add	r3, r2
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Handle Ctrl+C to stop streaming
        if (c == 3) { // Ctrl+C ASCII code
 800062a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800062e:	2b03      	cmp	r3, #3
 8000630:	d10c      	bne.n	800064c <cdc_task+0x70>
          if (streaming_active) {
 8000632:	4b50      	ldr	r3, [pc, #320]	@ (8000774 <cdc_task+0x198>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d07b      	beq.n	8000732 <cdc_task+0x156>
            stop_streaming();
 800063a:	f000 f92b 	bl	8000894 <stop_streaming>
            cdc_write_string_chunked("\r\nStreaming stopped\r\n");
 800063e:	484e      	ldr	r0, [pc, #312]	@ (8000778 <cdc_task+0x19c>)
 8000640:	f000 f8a6 	bl	8000790 <cdc_write_string_chunked>
            cdc_write_string_chunked("Ready> ");
 8000644:	484d      	ldr	r0, [pc, #308]	@ (800077c <cdc_task+0x1a0>)
 8000646:	f000 f8a3 	bl	8000790 <cdc_write_string_chunked>
 800064a:	e077      	b.n	800073c <cdc_task+0x160>
          }
          continue;
        }

        // Handle backspace
        if (c == '\b' || c == 127) {
 800064c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000650:	2b08      	cmp	r3, #8
 8000652:	d003      	beq.n	800065c <cdc_task+0x80>
 8000654:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000658:	2b7f      	cmp	r3, #127	@ 0x7f
 800065a:	d114      	bne.n	8000686 <cdc_task+0xaa>
          if (cmd_index > 0 && !streaming_active) {
 800065c:	4b48      	ldr	r3, [pc, #288]	@ (8000780 <cdc_task+0x1a4>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d068      	beq.n	8000736 <cdc_task+0x15a>
 8000664:	4b43      	ldr	r3, [pc, #268]	@ (8000774 <cdc_task+0x198>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	f083 0301 	eor.w	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d061      	beq.n	8000736 <cdc_task+0x15a>
            cmd_index--;
 8000672:	4b43      	ldr	r3, [pc, #268]	@ (8000780 <cdc_task+0x1a4>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	3b01      	subs	r3, #1
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b41      	ldr	r3, [pc, #260]	@ (8000780 <cdc_task+0x1a4>)
 800067c:	701a      	strb	r2, [r3, #0]
            cdc_write_string_chunked("\b \b"); // Erase character
 800067e:	4841      	ldr	r0, [pc, #260]	@ (8000784 <cdc_task+0x1a8>)
 8000680:	f000 f886 	bl	8000790 <cdc_write_string_chunked>
          if (cmd_index > 0 && !streaming_active) {
 8000684:	e057      	b.n	8000736 <cdc_task+0x15a>
          }
        }
        // Handle enter/newline
        else if (c == '\r' || c == '\n') {
 8000686:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800068a:	2b0d      	cmp	r3, #13
 800068c:	d003      	beq.n	8000696 <cdc_task+0xba>
 800068e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000692:	2b0a      	cmp	r3, #10
 8000694:	d124      	bne.n	80006e0 <cdc_task+0x104>
          if (!streaming_active) {
 8000696:	4b37      	ldr	r3, [pc, #220]	@ (8000774 <cdc_task+0x198>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	f083 0301 	eor.w	r3, r3, #1
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d04a      	beq.n	800073a <cdc_task+0x15e>
            cdc_write_string_chunked("\r\n");
 80006a4:	4838      	ldr	r0, [pc, #224]	@ (8000788 <cdc_task+0x1ac>)
 80006a6:	f000 f873 	bl	8000790 <cdc_write_string_chunked>
            cmd_buffer[cmd_index] = '\0';
 80006aa:	4b35      	ldr	r3, [pc, #212]	@ (8000780 <cdc_task+0x1a4>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b36      	ldr	r3, [pc, #216]	@ (800078c <cdc_task+0x1b0>)
 80006b2:	2100      	movs	r1, #0
 80006b4:	5499      	strb	r1, [r3, r2]

            if (cmd_index > 0) {
 80006b6:	4b32      	ldr	r3, [pc, #200]	@ (8000780 <cdc_task+0x1a4>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d005      	beq.n	80006ca <cdc_task+0xee>
              process_command(cmd_buffer);
 80006be:	4833      	ldr	r0, [pc, #204]	@ (800078c <cdc_task+0x1b0>)
 80006c0:	f000 f9ce 	bl	8000a60 <process_command>
              cmd_index = 0;
 80006c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000780 <cdc_task+0x1a4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
            }

            if (!streaming_active) {
 80006ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000774 <cdc_task+0x198>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	f083 0301 	eor.w	r3, r3, #1
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d030      	beq.n	800073a <cdc_task+0x15e>
              cdc_write_string_chunked("Ready> ");
 80006d8:	4828      	ldr	r0, [pc, #160]	@ (800077c <cdc_task+0x1a0>)
 80006da:	f000 f859 	bl	8000790 <cdc_write_string_chunked>
          if (!streaming_active) {
 80006de:	e02c      	b.n	800073a <cdc_task+0x15e>
            }
          }
        }
        // Handle printable characters
        else if (c >= 32 && c <= 126 && cmd_index < sizeof(cmd_buffer) - 1 && !streaming_active) {
 80006e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006e4:	2b1f      	cmp	r3, #31
 80006e6:	d929      	bls.n	800073c <cdc_task+0x160>
 80006e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006ec:	2b7e      	cmp	r3, #126	@ 0x7e
 80006ee:	d825      	bhi.n	800073c <cdc_task+0x160>
 80006f0:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <cdc_task+0x1a4>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80006f6:	d821      	bhi.n	800073c <cdc_task+0x160>
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <cdc_task+0x198>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	f083 0301 	eor.w	r3, r3, #1
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	d01a      	beq.n	800073c <cdc_task+0x160>
          cmd_buffer[cmd_index++] = c;
 8000706:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <cdc_task+0x1a4>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	1c5a      	adds	r2, r3, #1
 800070c:	b2d1      	uxtb	r1, r2
 800070e:	4a1c      	ldr	r2, [pc, #112]	@ (8000780 <cdc_task+0x1a4>)
 8000710:	7011      	strb	r1, [r2, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8000718:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <cdc_task+0x1b0>)
 800071a:	5499      	strb	r1, [r3, r2]
 800071c:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 8000720:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000722:	2301      	movs	r3, #1
 8000724:	64bb      	str	r3, [r7, #72]	@ 0x48
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_char(char ch) {
  return tud_cdc_n_write_char(0, ch);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write(void const* buffer, uint32_t bufsize) {
  return tud_cdc_n_write(0, buffer, bufsize);
 8000726:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000728:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800072a:	2000      	movs	r0, #0
 800072c:	f006 fae0 	bl	8006cf0 <tud_cdc_n_write>
 8000730:	e004      	b.n	800073c <cdc_task+0x160>
          continue;
 8000732:	bf00      	nop
 8000734:	e002      	b.n	800073c <cdc_task+0x160>
          if (cmd_index > 0 && !streaming_active) {
 8000736:	bf00      	nop
 8000738:	e000      	b.n	800073c <cdc_task+0x160>
          if (!streaming_active) {
 800073a:	bf00      	nop
      for (uint32_t i = 0; i < count; i++) {
 800073c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800073e:	3301      	adds	r3, #1
 8000740:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000742:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000744:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000746:	429a      	cmp	r2, r3
 8000748:	f4ff af69 	bcc.w	800061e <cdc_task+0x42>
          tud_cdc_write(&c, 1); // Echo character
        }
      }

      if (!streaming_active) {
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <cdc_task+0x198>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	f083 0301 	eor.w	r3, r3, #1
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	d008      	beq.n	800076c <cdc_task+0x190>
        cdc_write_flush_wait();
 800075a:	f000 f864 	bl	8000826 <cdc_write_flush_wait>
  } else {
    // Reset flags when disconnected
    cmd_index = 0;
    streaming_active = false;
  }
}
 800075e:	e005      	b.n	800076c <cdc_task+0x190>
    cmd_index = 0;
 8000760:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <cdc_task+0x1a4>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
    streaming_active = false;
 8000766:	4b03      	ldr	r3, [pc, #12]	@ (8000774 <cdc_task+0x198>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
}
 800076c:	bf00      	nop
 800076e:	3760      	adds	r7, #96	@ 0x60
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200002fd 	.word	0x200002fd
 8000778:	0800e050 	.word	0x0800e050
 800077c:	0800e068 	.word	0x0800e068
 8000780:	200002fc 	.word	0x200002fc
 8000784:	0800e070 	.word	0x0800e070
 8000788:	0800e074 	.word	0x0800e074
 800078c:	200002bc 	.word	0x200002bc

08000790 <cdc_write_string_chunked>:

// Write string in chunks to avoid buffer overflow
static void cdc_write_string_chunked(const char *str) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  if (!str)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d03f      	beq.n	800081e <cdc_write_string_chunked+0x8e>
    return;

  size_t len = strlen(str);
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff fd28 	bl	80001f4 <strlen>
 80007a4:	61b8      	str	r0, [r7, #24]
  size_t sent = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
  const size_t chunk_size = CFG_TUD_CDC_EP_BUFSIZE - 8; // Leave some margin
 80007aa:	2338      	movs	r3, #56	@ 0x38
 80007ac:	617b      	str	r3, [r7, #20]

  while (sent < len) {
 80007ae:	e031      	b.n	8000814 <cdc_write_string_chunked+0x84>
    size_t to_send = (len - sent > chunk_size) ? chunk_size : (len - sent);
 80007b0:	69ba      	ldr	r2, [r7, #24]
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	697a      	ldr	r2, [r7, #20]
 80007b8:	4293      	cmp	r3, r2
 80007ba:	bf28      	it	cs
 80007bc:	4613      	movcs	r3, r2
 80007be:	613b      	str	r3, [r7, #16]

    // Wait for space in buffer
    while (tud_cdc_write_available() < to_send) {
 80007c0:	e005      	b.n	80007ce <cdc_write_string_chunked+0x3e>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 80007c2:	2100      	movs	r1, #0
 80007c4:	f04f 30ff 	mov.w	r0, #4294967295
 80007c8:	f008 fba0 	bl	8008f0c <tud_task_ext>
}
 80007cc:	bf00      	nop
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_flush(void) {
  return tud_cdc_n_write_flush(0);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_available(void) {
  return tud_cdc_n_write_available(0);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f006 fb44 	bl	8006e5c <tud_cdc_n_write_available>
 80007d4:	4602      	mov	r2, r0
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	4293      	cmp	r3, r2
 80007da:	d8f2      	bhi.n	80007c2 <cdc_write_string_chunked+0x32>
      tud_task(); // Process USB tasks
    }

    tud_cdc_write(str + sent, to_send);
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	4413      	add	r3, r2
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	60bb      	str	r3, [r7, #8]
  return tud_cdc_n_write(0, buffer, bufsize);
 80007e8:	68ba      	ldr	r2, [r7, #8]
 80007ea:	68f9      	ldr	r1, [r7, #12]
 80007ec:	2000      	movs	r0, #0
 80007ee:	f006 fa7f 	bl	8006cf0 <tud_cdc_n_write>
    sent += to_send;
 80007f2:	69fa      	ldr	r2, [r7, #28]
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	4413      	add	r3, r2
 80007f8:	61fb      	str	r3, [r7, #28]
  return tud_cdc_n_write_available(0);
 80007fa:	2000      	movs	r0, #0
 80007fc:	f006 fb2e 	bl	8006e5c <tud_cdc_n_write_available>
 8000800:	4602      	mov	r2, r0

    // Flush if buffer is getting full or we're done
    if (tud_cdc_write_available() < chunk_size || sent >= len) {
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	4293      	cmp	r3, r2
 8000806:	d803      	bhi.n	8000810 <cdc_write_string_chunked+0x80>
 8000808:	69fa      	ldr	r2, [r7, #28]
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	429a      	cmp	r2, r3
 800080e:	d301      	bcc.n	8000814 <cdc_write_string_chunked+0x84>
      cdc_write_flush_wait();
 8000810:	f000 f809 	bl	8000826 <cdc_write_flush_wait>
  while (sent < len) {
 8000814:	69fa      	ldr	r2, [r7, #28]
 8000816:	69bb      	ldr	r3, [r7, #24]
 8000818:	429a      	cmp	r2, r3
 800081a:	d3c9      	bcc.n	80007b0 <cdc_write_string_chunked+0x20>
 800081c:	e000      	b.n	8000820 <cdc_write_string_chunked+0x90>
    return;
 800081e:	bf00      	nop
    }
  }
}
 8000820:	3720      	adds	r7, #32
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <cdc_write_flush_wait>:

// Wait for flush to complete
static void cdc_write_flush_wait(void) {
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 800082c:	2000      	movs	r0, #0
 800082e:	f006 fa93 	bl	8006d58 <tud_cdc_n_write_flush>
  tud_cdc_write_flush();

  // Wait for data to be sent
  uint32_t timeout = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
  while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 8000836:	e008      	b.n	800084a <cdc_write_flush_wait+0x24>
  tud_task_ext(UINT32_MAX, false);
 8000838:	2100      	movs	r1, #0
 800083a:	f04f 30ff 	mov.w	r0, #4294967295
 800083e:	f008 fb65 	bl	8008f0c <tud_task_ext>
}
 8000842:	bf00      	nop
    tud_task(); // Process USB tasks
    timeout++;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3301      	adds	r3, #1
 8000848:	607b      	str	r3, [r7, #4]
  return tud_cdc_n_write_available(0);
 800084a:	2000      	movs	r0, #0
 800084c:	f006 fb06 	bl	8006e5c <tud_cdc_n_write_available>
 8000850:	4603      	mov	r3, r0
  while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 8000852:	2b7f      	cmp	r3, #127	@ 0x7f
 8000854:	d804      	bhi.n	8000860 <cdc_write_flush_wait+0x3a>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f242 720f 	movw	r2, #9999	@ 0x270f
 800085c:	4293      	cmp	r3, r2
 800085e:	d9eb      	bls.n	8000838 <cdc_write_flush_wait+0x12>
  }
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <start_streaming>:

static void start_streaming(void) {
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  streaming_active = true;
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <start_streaming+0x20>)
 800086e:	2201      	movs	r2, #1
 8000870:	701a      	strb	r2, [r3, #0]
  last_stream_time = HAL_GetTick();
 8000872:	f003 fb6d 	bl	8003f50 <HAL_GetTick>
 8000876:	4603      	mov	r3, r0
 8000878:	461a      	mov	r2, r3
 800087a:	4b04      	ldr	r3, [pc, #16]	@ (800088c <start_streaming+0x24>)
 800087c:	601a      	str	r2, [r3, #0]
  cdc_write_string_chunked("Starting ADC stream (Press Ctrl+C to stop)...\r\n");
 800087e:	4804      	ldr	r0, [pc, #16]	@ (8000890 <start_streaming+0x28>)
 8000880:	f7ff ff86 	bl	8000790 <cdc_write_string_chunked>
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200002fd 	.word	0x200002fd
 800088c:	20000300 	.word	0x20000300
 8000890:	0800e078 	.word	0x0800e078

08000894 <stop_streaming>:

static void stop_streaming(void) {
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  streaming_active = false;
 8000898:	4b03      	ldr	r3, [pc, #12]	@ (80008a8 <stop_streaming+0x14>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	200002fd 	.word	0x200002fd

080008ac <handle_streaming>:

static void handle_streaming(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80008b2:	af00      	add	r7, sp, #0
  if (!streaming_active || !tud_cdc_connected()) {
 80008b4:	4b64      	ldr	r3, [pc, #400]	@ (8000a48 <handle_streaming+0x19c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	f083 0301 	eor.w	r3, r3, #1
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	f040 80bc 	bne.w	8000a3c <handle_streaming+0x190>
  return tud_cdc_n_connected(0);
 80008c4:	2000      	movs	r0, #0
 80008c6:	f006 f993 	bl	8006bf0 <tud_cdc_n_connected>
 80008ca:	4603      	mov	r3, r0
 80008cc:	f083 0301 	eor.w	r3, r3, #1
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	f040 80b2 	bne.w	8000a3c <handle_streaming+0x190>
    return;
  }

  uint32_t current_time = HAL_GetTick();
 80008d8:	f003 fb3a 	bl	8003f50 <HAL_GetTick>
 80008dc:	4603      	mov	r3, r0
 80008de:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

  // Check if it's time to send data (1ms interval for ~1kHz)
  if (current_time - last_stream_time >= STREAM_INTERVAL_MS) {
 80008e2:	4b5a      	ldr	r3, [pc, #360]	@ (8000a4c <handle_streaming+0x1a0>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	2201      	movs	r2, #1
 80008ee:	4293      	cmp	r3, r2
 80008f0:	f0c0 80a5 	bcc.w	8000a3e <handle_streaming+0x192>
    last_stream_time = current_time;
 80008f4:	4a55      	ldr	r2, [pc, #340]	@ (8000a4c <handle_streaming+0x1a0>)
 80008f6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80008fa:	6013      	str	r3, [r2, #0]

    // Build CSV string with all keyboard_keys state.value data
    char csv_buffer[512];
    int pos = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214

    // Iterate through the keyboard_keys array and collect state.value for each key
    bool first = true;
 8000902:	2301      	movs	r3, #1
 8000904:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    for (uint8_t adc_ch = 0; adc_ch < ADC_CHANNEL_COUNT; adc_ch++) {
 8000908:	2300      	movs	r3, #0
 800090a:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
 800090e:	e063      	b.n	80009d8 <handle_streaming+0x12c>
      for (uint8_t amux_ch = 0; amux_ch < AMUX_CHANNEL_COUNT; amux_ch++) {
 8000910:	2300      	movs	r3, #0
 8000912:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
 8000916:	e04f      	b.n	80009b8 <handle_streaming+0x10c>
        if (!first) {
 8000918:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 800091c:	f083 0301 	eor.w	r3, r3, #1
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b00      	cmp	r3, #0
 8000924:	d011      	beq.n	800094a <handle_streaming+0x9e>
          pos += snprintf(csv_buffer + pos, sizeof(csv_buffer) - pos, ",");
 8000926:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800092a:	463a      	mov	r2, r7
 800092c:	18d0      	adds	r0, r2, r3
 800092e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000932:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000936:	4a46      	ldr	r2, [pc, #280]	@ (8000a50 <handle_streaming+0x1a4>)
 8000938:	4619      	mov	r1, r3
 800093a:	f00c fa27 	bl	800cd8c <sniprintf>
 800093e:	4602      	mov	r2, r0
 8000940:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000944:	4413      	add	r3, r2
 8000946:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
        }
        first = false;
 800094a:	2300      	movs	r3, #0
 800094c:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

        // Get the state.value from the current key
        uint16_t value = keyboard_keys[adc_ch][amux_ch].state.value;
 8000950:	f897 1212 	ldrb.w	r1, [r7, #530]	@ 0x212
 8000954:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8000958:	483e      	ldr	r0, [pc, #248]	@ (8000a54 <handle_streaming+0x1a8>)
 800095a:	461a      	mov	r2, r3
 800095c:	0112      	lsls	r2, r2, #4
 800095e:	441a      	add	r2, r3
 8000960:	0093      	lsls	r3, r2, #2
 8000962:	461a      	mov	r2, r3
 8000964:	460b      	mov	r3, r1
 8000966:	011b      	lsls	r3, r3, #4
 8000968:	440b      	add	r3, r1
 800096a:	019b      	lsls	r3, r3, #6
 800096c:	4413      	add	r3, r2
 800096e:	4403      	add	r3, r0
 8000970:	3328      	adds	r3, #40	@ 0x28
 8000972:	79da      	ldrb	r2, [r3, #7]
 8000974:	7a1b      	ldrb	r3, [r3, #8]
 8000976:	021b      	lsls	r3, r3, #8
 8000978:	4313      	orrs	r3, r2
 800097a:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
        pos += snprintf(csv_buffer + pos, sizeof(csv_buffer) - pos, "%u", value);
 800097e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000982:	463a      	mov	r2, r7
 8000984:	18d0      	adds	r0, r2, r3
 8000986:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800098a:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 800098e:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 8000992:	4a31      	ldr	r2, [pc, #196]	@ (8000a58 <handle_streaming+0x1ac>)
 8000994:	f00c f9fa 	bl	800cd8c <sniprintf>
 8000998:	4602      	mov	r2, r0
 800099a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800099e:	4413      	add	r3, r2
 80009a0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214

        // Safety check to prevent buffer overflow
        if (pos >= sizeof(csv_buffer) - 10) {
 80009a4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80009a8:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 80009ac:	d209      	bcs.n	80009c2 <handle_streaming+0x116>
      for (uint8_t amux_ch = 0; amux_ch < AMUX_CHANNEL_COUNT; amux_ch++) {
 80009ae:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 80009b2:	3301      	adds	r3, #1
 80009b4:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
 80009b8:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 80009bc:	2b0f      	cmp	r3, #15
 80009be:	d9ab      	bls.n	8000918 <handle_streaming+0x6c>
 80009c0:	e000      	b.n	80009c4 <handle_streaming+0x118>
          break;
 80009c2:	bf00      	nop
        }
      }
      if (pos >= sizeof(csv_buffer) - 10) {
 80009c4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80009c8:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 80009cc:	d209      	bcs.n	80009e2 <handle_streaming+0x136>
    for (uint8_t adc_ch = 0; adc_ch < ADC_CHANNEL_COUNT; adc_ch++) {
 80009ce:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 80009d2:	3301      	adds	r3, #1
 80009d4:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
 80009d8:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d097      	beq.n	8000910 <handle_streaming+0x64>
 80009e0:	e000      	b.n	80009e4 <handle_streaming+0x138>
        break;
 80009e2:	bf00      	nop
      }
    }

    // Add newline
    pos += snprintf(csv_buffer + pos, sizeof(csv_buffer) - pos, "\r\n");
 80009e4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80009e8:	463a      	mov	r2, r7
 80009ea:	18d0      	adds	r0, r2, r3
 80009ec:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80009f0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80009f4:	4a19      	ldr	r2, [pc, #100]	@ (8000a5c <handle_streaming+0x1b0>)
 80009f6:	4619      	mov	r1, r3
 80009f8:	f00c f9c8 	bl	800cd8c <sniprintf>
 80009fc:	4602      	mov	r2, r0
 80009fe:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a02:	4413      	add	r3, r2
 8000a04:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
  return tud_cdc_n_write_available(0);
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f006 fa27 	bl	8006e5c <tud_cdc_n_write_available>
 8000a0e:	4602      	mov	r2, r0

    // Send the CSV data
    if (tud_cdc_write_available() >= pos) {
 8000a10:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d312      	bcc.n	8000a3e <handle_streaming+0x192>
      tud_cdc_write(csv_buffer, pos);
 8000a18:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000a1c:	463a      	mov	r2, r7
 8000a1e:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 8000a22:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
  return tud_cdc_n_write(0, buffer, bufsize);
 8000a26:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 8000a2a:	f8d7 1204 	ldr.w	r1, [r7, #516]	@ 0x204
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f006 f95e 	bl	8006cf0 <tud_cdc_n_write>
  return tud_cdc_n_write_flush(0);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f006 f98f 	bl	8006d58 <tud_cdc_n_write_flush>
 8000a3a:	e000      	b.n	8000a3e <handle_streaming+0x192>
    return;
 8000a3c:	bf00      	nop
      tud_cdc_write_flush();
    }
  }
}
 8000a3e:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200002fd 	.word	0x200002fd
 8000a4c:	20000300 	.word	0x20000300
 8000a50:	0800e0a8 	.word	0x0800e0a8
 8000a54:	20000310 	.word	0x20000310
 8000a58:	0800e0ac 	.word	0x0800e0ac
 8000a5c:	0800e074 	.word	0x0800e074

08000a60 <process_command>:

static void process_command(char *cmd) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b096      	sub	sp, #88	@ 0x58
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  // Convert to lowercase for case-insensitive commands
  for (int i = 0; cmd[i]; i++) {
 8000a68:	2300      	movs	r3, #0
 8000a6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8000a6c:	e018      	b.n	8000aa0 <process_command+0x40>
    if (cmd[i] >= 'A' && cmd[i] <= 'Z') {
 8000a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	4413      	add	r3, r2
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b40      	cmp	r3, #64	@ 0x40
 8000a78:	d90f      	bls.n	8000a9a <process_command+0x3a>
 8000a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b5a      	cmp	r3, #90	@ 0x5a
 8000a84:	d809      	bhi.n	8000a9a <process_command+0x3a>
      cmd[i] += 32;
 8000a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	781a      	ldrb	r2, [r3, #0]
 8000a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	440b      	add	r3, r1
 8000a94:	3220      	adds	r2, #32
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	701a      	strb	r2, [r3, #0]
  for (int i = 0; cmd[i]; i++) {
 8000a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8000aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d1e0      	bne.n	8000a6e <process_command+0xe>
    }
  }

  char *token = strtok(cmd, " ");
 8000aac:	49ad      	ldr	r1, [pc, #692]	@ (8000d64 <process_command+0x304>)
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f00c fa10 	bl	800ced4 <strtok>
 8000ab4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (!token)
 8000ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	f000 8189 	beq.w	8000dd0 <process_command+0x370>
    return;

  if (strcmp(token, "help") == 0) {
 8000abe:	49aa      	ldr	r1, [pc, #680]	@ (8000d68 <process_command+0x308>)
 8000ac0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000ac2:	f7ff fb8d 	bl	80001e0 <strcmp>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d102      	bne.n	8000ad2 <process_command+0x72>
    print_help();
 8000acc:	f000 f98a 	bl	8000de4 <print_help>
 8000ad0:	e17f      	b.n	8000dd2 <process_command+0x372>
  } else if (strcmp(token, "show") == 0) {
 8000ad2:	49a6      	ldr	r1, [pc, #664]	@ (8000d6c <process_command+0x30c>)
 8000ad4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000ad6:	f7ff fb83 	bl	80001e0 <strcmp>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d102      	bne.n	8000ae6 <process_command+0x86>
    print_config();
 8000ae0:	f000 f9c6 	bl	8000e70 <print_config>
 8000ae4:	e175      	b.n	8000dd2 <process_command+0x372>
  } else if (strcmp(token, "stream") == 0) {
 8000ae6:	49a2      	ldr	r1, [pc, #648]	@ (8000d70 <process_command+0x310>)
 8000ae8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000aea:	f7ff fb79 	bl	80001e0 <strcmp>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d102      	bne.n	8000afa <process_command+0x9a>
    start_streaming();
 8000af4:	f7ff feb8 	bl	8000868 <start_streaming>
 8000af8:	e16b      	b.n	8000dd2 <process_command+0x372>
  } else if (strcmp(token, "set") == 0) {
 8000afa:	499e      	ldr	r1, [pc, #632]	@ (8000d74 <process_command+0x314>)
 8000afc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000afe:	f7ff fb6f 	bl	80001e0 <strcmp>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d118      	bne.n	8000b3a <process_command+0xda>
    char *param = strtok(NULL, " ");
 8000b08:	4996      	ldr	r1, [pc, #600]	@ (8000d64 <process_command+0x304>)
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f00c f9e2 	bl	800ced4 <strtok>
 8000b10:	6178      	str	r0, [r7, #20]
    char *value = strtok(NULL, " ");
 8000b12:	4994      	ldr	r1, [pc, #592]	@ (8000d64 <process_command+0x304>)
 8000b14:	2000      	movs	r0, #0
 8000b16:	f00c f9dd 	bl	800ced4 <strtok>
 8000b1a:	6138      	str	r0, [r7, #16]
    if (param && value) {
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d007      	beq.n	8000b32 <process_command+0xd2>
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d004      	beq.n	8000b32 <process_command+0xd2>
      set_config_value(param, value);
 8000b28:	6939      	ldr	r1, [r7, #16]
 8000b2a:	6978      	ldr	r0, [r7, #20]
 8000b2c:	f000 f9f4 	bl	8000f18 <set_config_value>
 8000b30:	e14f      	b.n	8000dd2 <process_command+0x372>
    } else {
      cdc_write_string_chunked("Usage: set <parameter> <value>\r\n");
 8000b32:	4891      	ldr	r0, [pc, #580]	@ (8000d78 <process_command+0x318>)
 8000b34:	f7ff fe2c 	bl	8000790 <cdc_write_string_chunked>
 8000b38:	e14b      	b.n	8000dd2 <process_command+0x372>
    }
  } else if (strcmp(token, "keymap") == 0) {
 8000b3a:	4990      	ldr	r1, [pc, #576]	@ (8000d7c <process_command+0x31c>)
 8000b3c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b3e:	f7ff fb4f 	bl	80001e0 <strcmp>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d11c      	bne.n	8000b82 <process_command+0x122>
    char *layer_str = strtok(NULL, " ");
 8000b48:	4986      	ldr	r1, [pc, #536]	@ (8000d64 <process_command+0x304>)
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f00c f9c2 	bl	800ced4 <strtok>
 8000b50:	61f8      	str	r0, [r7, #28]
    if (layer_str) {
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d010      	beq.n	8000b7a <process_command+0x11a>
      uint8_t layer = atoi(layer_str);
 8000b58:	69f8      	ldr	r0, [r7, #28]
 8000b5a:	f00b ffcc 	bl	800caf6 <atoi>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	76fb      	strb	r3, [r7, #27]
      if (layer < LAYERS_COUNT) {
 8000b62:	7efb      	ldrb	r3, [r7, #27]
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	d804      	bhi.n	8000b72 <process_command+0x112>
        print_keymap(layer);
 8000b68:	7efb      	ldrb	r3, [r7, #27]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 fa6c 	bl	8001048 <print_keymap>
 8000b70:	e12f      	b.n	8000dd2 <process_command+0x372>
      } else {
        cdc_write_string_chunked("Invalid layer number\r\n");
 8000b72:	4883      	ldr	r0, [pc, #524]	@ (8000d80 <process_command+0x320>)
 8000b74:	f7ff fe0c 	bl	8000790 <cdc_write_string_chunked>
 8000b78:	e12b      	b.n	8000dd2 <process_command+0x372>
      }
    } else {
      cdc_write_string_chunked("Usage: keymap <layer>\r\n");
 8000b7a:	4882      	ldr	r0, [pc, #520]	@ (8000d84 <process_command+0x324>)
 8000b7c:	f7ff fe08 	bl	8000790 <cdc_write_string_chunked>
 8000b80:	e127      	b.n	8000dd2 <process_command+0x372>
    }
  } else if (strcmp(token, "setkey") == 0) {
 8000b82:	4981      	ldr	r1, [pc, #516]	@ (8000d88 <process_command+0x328>)
 8000b84:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b86:	f7ff fb2b 	bl	80001e0 <strcmp>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d154      	bne.n	8000c3a <process_command+0x1da>
    char *layer_str = strtok(NULL, " ");
 8000b90:	4974      	ldr	r1, [pc, #464]	@ (8000d64 <process_command+0x304>)
 8000b92:	2000      	movs	r0, #0
 8000b94:	f00c f99e 	bl	800ced4 <strtok>
 8000b98:	6378      	str	r0, [r7, #52]	@ 0x34
    char *row_str = strtok(NULL, " ");
 8000b9a:	4972      	ldr	r1, [pc, #456]	@ (8000d64 <process_command+0x304>)
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f00c f999 	bl	800ced4 <strtok>
 8000ba2:	6338      	str	r0, [r7, #48]	@ 0x30
    char *col_str = strtok(NULL, " ");
 8000ba4:	496f      	ldr	r1, [pc, #444]	@ (8000d64 <process_command+0x304>)
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f00c f994 	bl	800ced4 <strtok>
 8000bac:	62f8      	str	r0, [r7, #44]	@ 0x2c
    char *value_str = strtok(NULL, " ");
 8000bae:	496d      	ldr	r1, [pc, #436]	@ (8000d64 <process_command+0x304>)
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f00c f98f 	bl	800ced4 <strtok>
 8000bb6:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (layer_str && row_str && col_str && value_str) {
 8000bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d039      	beq.n	8000c32 <process_command+0x1d2>
 8000bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d036      	beq.n	8000c32 <process_command+0x1d2>
 8000bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d033      	beq.n	8000c32 <process_command+0x1d2>
 8000bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d030      	beq.n	8000c32 <process_command+0x1d2>
      uint8_t layer = atoi(layer_str);
 8000bd0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000bd2:	f00b ff90 	bl	800caf6 <atoi>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      uint8_t row = atoi(row_str);
 8000bdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000bde:	f00b ff8a 	bl	800caf6 <atoi>
 8000be2:	4603      	mov	r3, r0
 8000be4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
      uint8_t col = atoi(col_str);
 8000be8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000bea:	f00b ff84 	bl	800caf6 <atoi>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      uint16_t value = atoi(value_str);
 8000bf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000bf6:	f00b ff7e 	bl	800caf6 <atoi>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	847b      	strh	r3, [r7, #34]	@ 0x22

      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d811      	bhi.n	8000c2a <process_command+0x1ca>
 8000c06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d80d      	bhi.n	8000c2a <process_command+0x1ca>
 8000c0e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d809      	bhi.n	8000c2a <process_command+0x1ca>
        set_keymap_value(layer, row, col, value);
 8000c16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000c18:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000c1c:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8000c20:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8000c24:	f000 fb56 	bl	80012d4 <set_keymap_value>
    if (layer_str && row_str && col_str && value_str) {
 8000c28:	e0d3      	b.n	8000dd2 <process_command+0x372>
      } else {
        cdc_write_string_chunked("Invalid layer/row/col values\r\n");
 8000c2a:	4858      	ldr	r0, [pc, #352]	@ (8000d8c <process_command+0x32c>)
 8000c2c:	f7ff fdb0 	bl	8000790 <cdc_write_string_chunked>
    if (layer_str && row_str && col_str && value_str) {
 8000c30:	e0cf      	b.n	8000dd2 <process_command+0x372>
      }
    } else {
      cdc_write_string_chunked("Usage: setkey <layer> <row> <col> <value>\r\n");
 8000c32:	4857      	ldr	r0, [pc, #348]	@ (8000d90 <process_command+0x330>)
 8000c34:	f7ff fdac 	bl	8000790 <cdc_write_string_chunked>
 8000c38:	e0cb      	b.n	8000dd2 <process_command+0x372>
    }
  } else if (strcmp(token, "setmacro") == 0) {
 8000c3a:	4956      	ldr	r1, [pc, #344]	@ (8000d94 <process_command+0x334>)
 8000c3c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000c3e:	f7ff facf 	bl	80001e0 <strcmp>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f040 8082 	bne.w	8000d4e <process_command+0x2ee>
    char *layer_str = strtok(NULL, " ");
 8000c4a:	4946      	ldr	r1, [pc, #280]	@ (8000d64 <process_command+0x304>)
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f00c f941 	bl	800ced4 <strtok>
 8000c52:	6478      	str	r0, [r7, #68]	@ 0x44
    char *row_str = strtok(NULL, " ");
 8000c54:	4943      	ldr	r1, [pc, #268]	@ (8000d64 <process_command+0x304>)
 8000c56:	2000      	movs	r0, #0
 8000c58:	f00c f93c 	bl	800ced4 <strtok>
 8000c5c:	6438      	str	r0, [r7, #64]	@ 0x40
    char *col_str = strtok(NULL, " ");
 8000c5e:	4941      	ldr	r1, [pc, #260]	@ (8000d64 <process_command+0x304>)
 8000c60:	2000      	movs	r0, #0
 8000c62:	f00c f937 	bl	800ced4 <strtok>
 8000c66:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (layer_str && row_str && col_str) {
 8000c68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d06b      	beq.n	8000d46 <process_command+0x2e6>
 8000c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d068      	beq.n	8000d46 <process_command+0x2e6>
 8000c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d065      	beq.n	8000d46 <process_command+0x2e6>
      uint8_t layer = atoi(layer_str);
 8000c7a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000c7c:	f00b ff3b 	bl	800caf6 <atoi>
 8000c80:	4603      	mov	r3, r0
 8000c82:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      uint8_t row = atoi(row_str);
 8000c86:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000c88:	f00b ff35 	bl	800caf6 <atoi>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
      uint8_t col = atoi(col_str);
 8000c92:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000c94:	f00b ff2f 	bl	800caf6 <atoi>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000c9e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d84b      	bhi.n	8000d3e <process_command+0x2de>
 8000ca6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d847      	bhi.n	8000d3e <process_command+0x2de>
 8000cae:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d843      	bhi.n	8000d3e <process_command+0x2de>
        uint16_t values[MAX_MACRO_LEN];
        uint8_t value_count = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        // Parse up to MAX_MACRO_LEN values
        char *value_str = strtok(NULL, " ");
 8000cbc:	4929      	ldr	r1, [pc, #164]	@ (8000d64 <process_command+0x304>)
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f00c f908 	bl	800ced4 <strtok>
 8000cc4:	64f8      	str	r0, [r7, #76]	@ 0x4c
        while (value_str && value_count < MAX_MACRO_LEN) {
 8000cc6:	e015      	b.n	8000cf4 <process_command+0x294>
          values[value_count] = atoi(value_str);
 8000cc8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000cca:	f00b ff14 	bl	800caf6 <atoi>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000cd4:	b292      	uxth	r2, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	3358      	adds	r3, #88	@ 0x58
 8000cda:	443b      	add	r3, r7
 8000cdc:	f823 2c50 	strh.w	r2, [r3, #-80]
          value_count++;
 8000ce0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          value_str = strtok(NULL, " ");
 8000cea:	491e      	ldr	r1, [pc, #120]	@ (8000d64 <process_command+0x304>)
 8000cec:	2000      	movs	r0, #0
 8000cee:	f00c f8f1 	bl	800ced4 <strtok>
 8000cf2:	64f8      	str	r0, [r7, #76]	@ 0x4c
        while (value_str && value_count < MAX_MACRO_LEN) {
 8000cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d011      	beq.n	8000d1e <process_command+0x2be>
 8000cfa:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	d9e2      	bls.n	8000cc8 <process_command+0x268>
        }

        // Fill remaining slots with ____ if not enough values provided
        while (value_count < MAX_MACRO_LEN) {
 8000d02:	e00c      	b.n	8000d1e <process_command+0x2be>
          values[value_count] = ____;
 8000d04:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	3358      	adds	r3, #88	@ 0x58
 8000d0c:	443b      	add	r3, r7
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f823 2c50 	strh.w	r2, [r3, #-80]
          value_count++;
 8000d14:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000d18:	3301      	adds	r3, #1
 8000d1a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        while (value_count < MAX_MACRO_LEN) {
 8000d1e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000d22:	2b03      	cmp	r3, #3
 8000d24:	d9ee      	bls.n	8000d04 <process_command+0x2a4>
        }

        set_macro_keymap_value(layer, row, col, values);
 8000d26:	f107 0308 	add.w	r3, r7, #8
 8000d2a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8000d2e:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8000d32:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8000d36:	f000 fb29 	bl	800138c <set_macro_keymap_value>
      if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000d3a:	bf00      	nop
    if (layer_str && row_str && col_str) {
 8000d3c:	e049      	b.n	8000dd2 <process_command+0x372>
      } else {
        cdc_write_string_chunked("Invalid layer/row/col values\r\n");
 8000d3e:	4813      	ldr	r0, [pc, #76]	@ (8000d8c <process_command+0x32c>)
 8000d40:	f7ff fd26 	bl	8000790 <cdc_write_string_chunked>
    if (layer_str && row_str && col_str) {
 8000d44:	e045      	b.n	8000dd2 <process_command+0x372>
      }
    } else {
      cdc_write_string_chunked("Usage: setmacro <layer> <row> <col> <value1> [value2] [value3] [value4]\r\n");
 8000d46:	4814      	ldr	r0, [pc, #80]	@ (8000d98 <process_command+0x338>)
 8000d48:	f7ff fd22 	bl	8000790 <cdc_write_string_chunked>
 8000d4c:	e041      	b.n	8000dd2 <process_command+0x372>
    }
  } else if (strcmp(token, "save") == 0) {
 8000d4e:	4913      	ldr	r1, [pc, #76]	@ (8000d9c <process_command+0x33c>)
 8000d50:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000d52:	f7ff fa45 	bl	80001e0 <strcmp>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d121      	bne.n	8000da0 <process_command+0x340>
    save_config();
 8000d5c:	f000 fbbc 	bl	80014d8 <save_config>
 8000d60:	e037      	b.n	8000dd2 <process_command+0x372>
 8000d62:	bf00      	nop
 8000d64:	0800e0b0 	.word	0x0800e0b0
 8000d68:	0800e0b4 	.word	0x0800e0b4
 8000d6c:	0800e0bc 	.word	0x0800e0bc
 8000d70:	0800e0c4 	.word	0x0800e0c4
 8000d74:	0800e0cc 	.word	0x0800e0cc
 8000d78:	0800e0d0 	.word	0x0800e0d0
 8000d7c:	0800e0f4 	.word	0x0800e0f4
 8000d80:	0800e0fc 	.word	0x0800e0fc
 8000d84:	0800e114 	.word	0x0800e114
 8000d88:	0800e12c 	.word	0x0800e12c
 8000d8c:	0800e134 	.word	0x0800e134
 8000d90:	0800e154 	.word	0x0800e154
 8000d94:	0800e180 	.word	0x0800e180
 8000d98:	0800e18c 	.word	0x0800e18c
 8000d9c:	0800e1d8 	.word	0x0800e1d8
  } else if (strcmp(token, "load") == 0) {
 8000da0:	490d      	ldr	r1, [pc, #52]	@ (8000dd8 <process_command+0x378>)
 8000da2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000da4:	f7ff fa1c 	bl	80001e0 <strcmp>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d102      	bne.n	8000db4 <process_command+0x354>
    load_config();
 8000dae:	f000 fba7 	bl	8001500 <load_config>
 8000db2:	e00e      	b.n	8000dd2 <process_command+0x372>
  } else if (strcmp(token, "reset") == 0) {
 8000db4:	4909      	ldr	r1, [pc, #36]	@ (8000ddc <process_command+0x37c>)
 8000db6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000db8:	f7ff fa12 	bl	80001e0 <strcmp>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d102      	bne.n	8000dc8 <process_command+0x368>
    reset_config();
 8000dc2:	f000 fba9 	bl	8001518 <reset_config>
 8000dc6:	e004      	b.n	8000dd2 <process_command+0x372>
  } else {
    cdc_write_string_chunked("Unknown command. Type 'help' for available commands\r\n");
 8000dc8:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <process_command+0x380>)
 8000dca:	f7ff fce1 	bl	8000790 <cdc_write_string_chunked>
 8000dce:	e000      	b.n	8000dd2 <process_command+0x372>
    return;
 8000dd0:	bf00      	nop
  }
}
 8000dd2:	3758      	adds	r7, #88	@ 0x58
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	0800e1e0 	.word	0x0800e1e0
 8000ddc:	0800e1e8 	.word	0x0800e1e8
 8000de0:	0800e1f0 	.word	0x0800e1f0

08000de4 <print_help>:

static void print_help(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  cdc_write_string_chunked("Available commands:\r\n");
 8000de8:	4814      	ldr	r0, [pc, #80]	@ (8000e3c <print_help+0x58>)
 8000dea:	f7ff fcd1 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  help                    - Show this help\r\n");
 8000dee:	4814      	ldr	r0, [pc, #80]	@ (8000e40 <print_help+0x5c>)
 8000df0:	f7ff fcce 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  show                    - Show current configuration\r\n");
 8000df4:	4813      	ldr	r0, [pc, #76]	@ (8000e44 <print_help+0x60>)
 8000df6:	f7ff fccb 	bl	8000790 <cdc_write_string_chunked>
//  cdc_write_string_chunked("  stream                  - Start streaming ADC values (Ctrl+C to stop)\r\n");
  cdc_write_string_chunked("  set <param> <value>     - Set configuration parameter\r\n");
 8000dfa:	4813      	ldr	r0, [pc, #76]	@ (8000e48 <print_help+0x64>)
 8000dfc:	f7ff fcc8 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  keymap <layer>          - Show keymap for layer\r\n");
 8000e00:	4812      	ldr	r0, [pc, #72]	@ (8000e4c <print_help+0x68>)
 8000e02:	f7ff fcc5 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  setkey <L> <R> <C> <V>  - Set key value (Layer/Row/Col/Value)\r\n");
 8000e06:	4812      	ldr	r0, [pc, #72]	@ (8000e50 <print_help+0x6c>)
 8000e08:	f7ff fcc2 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  setmacro <L> <R> <C> <V1> [V2] [V3] [V4]  - Set macro key value (Layer/Row/Col/Value1 [Value2] [Value3] [Value4])\r\n");
 8000e0c:	4811      	ldr	r0, [pc, #68]	@ (8000e54 <print_help+0x70>)
 8000e0e:	f7ff fcbf 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  save                    - Save configuration to flash\r\n");
 8000e12:	4811      	ldr	r0, [pc, #68]	@ (8000e58 <print_help+0x74>)
 8000e14:	f7ff fcbc 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  load                    - Load configuration from flash\r\n");
 8000e18:	4810      	ldr	r0, [pc, #64]	@ (8000e5c <print_help+0x78>)
 8000e1a:	f7ff fcb9 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  reset                   - Reset to default values\r\n");
 8000e1e:	4810      	ldr	r0, [pc, #64]	@ (8000e60 <print_help+0x7c>)
 8000e20:	f7ff fcb6 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("\r\nParameters:\r\n");
 8000e24:	480f      	ldr	r0, [pc, #60]	@ (8000e64 <print_help+0x80>)
 8000e26:	f7ff fcb3 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  reverse_magnet_pole, trigger_offset, reset_threshold,\r\n");
 8000e2a:	480f      	ldr	r0, [pc, #60]	@ (8000e68 <print_help+0x84>)
 8000e2c:	f7ff fcb0 	bl	8000790 <cdc_write_string_chunked>
  cdc_write_string_chunked("  rapid_trigger_offset, tap_timeout\r\n");
 8000e30:	480e      	ldr	r0, [pc, #56]	@ (8000e6c <print_help+0x88>)
 8000e32:	f7ff fcad 	bl	8000790 <cdc_write_string_chunked>
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	0800e228 	.word	0x0800e228
 8000e40:	0800e240 	.word	0x0800e240
 8000e44:	0800e270 	.word	0x0800e270
 8000e48:	0800e2ac 	.word	0x0800e2ac
 8000e4c:	0800e2e8 	.word	0x0800e2e8
 8000e50:	0800e31c 	.word	0x0800e31c
 8000e54:	0800e360 	.word	0x0800e360
 8000e58:	0800e3d8 	.word	0x0800e3d8
 8000e5c:	0800e414 	.word	0x0800e414
 8000e60:	0800e450 	.word	0x0800e450
 8000e64:	0800e488 	.word	0x0800e488
 8000e68:	0800e498 	.word	0x0800e498
 8000e6c:	0800e4d4 	.word	0x0800e4d4

08000e70 <print_config>:

static void print_config(void) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b0a0      	sub	sp, #128	@ 0x80
 8000e74:	af00      	add	r7, sp, #0
  char buffer[128];

  cdc_write_string_chunked("Current Configuration:\r\n");
 8000e76:	4820      	ldr	r0, [pc, #128]	@ (8000ef8 <print_config+0x88>)
 8000e78:	f7ff fc8a 	bl	8000790 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  reverse_magnet_pole: %u\r\n", keyboard_user_config.reverse_magnet_pole);
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <print_config+0x8c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4638      	mov	r0, r7
 8000e82:	4a1f      	ldr	r2, [pc, #124]	@ (8000f00 <print_config+0x90>)
 8000e84:	2180      	movs	r1, #128	@ 0x80
 8000e86:	f00b ff81 	bl	800cd8c <sniprintf>
  cdc_write_string_chunked(buffer);
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fc7f 	bl	8000790 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  trigger_offset: %u\r\n", keyboard_user_config.trigger_offset);
 8000e92:	4b1a      	ldr	r3, [pc, #104]	@ (8000efc <print_config+0x8c>)
 8000e94:	785b      	ldrb	r3, [r3, #1]
 8000e96:	4638      	mov	r0, r7
 8000e98:	4a1a      	ldr	r2, [pc, #104]	@ (8000f04 <print_config+0x94>)
 8000e9a:	2180      	movs	r1, #128	@ 0x80
 8000e9c:	f00b ff76 	bl	800cd8c <sniprintf>
  cdc_write_string_chunked(buffer);
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fc74 	bl	8000790 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  reset_threshold: %u\r\n", keyboard_user_config.reset_threshold);
 8000ea8:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <print_config+0x8c>)
 8000eaa:	789b      	ldrb	r3, [r3, #2]
 8000eac:	4638      	mov	r0, r7
 8000eae:	4a16      	ldr	r2, [pc, #88]	@ (8000f08 <print_config+0x98>)
 8000eb0:	2180      	movs	r1, #128	@ 0x80
 8000eb2:	f00b ff6b 	bl	800cd8c <sniprintf>
  cdc_write_string_chunked(buffer);
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fc69 	bl	8000790 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  rapid_trigger_offset: %u\r\n", keyboard_user_config.rapid_trigger_offset);
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8000efc <print_config+0x8c>)
 8000ec0:	78db      	ldrb	r3, [r3, #3]
 8000ec2:	4638      	mov	r0, r7
 8000ec4:	4a11      	ldr	r2, [pc, #68]	@ (8000f0c <print_config+0x9c>)
 8000ec6:	2180      	movs	r1, #128	@ 0x80
 8000ec8:	f00b ff60 	bl	800cd8c <sniprintf>
  cdc_write_string_chunked(buffer);
 8000ecc:	463b      	mov	r3, r7
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fc5e 	bl	8000790 <cdc_write_string_chunked>

  snprintf(buffer, sizeof(buffer), "  tap_timeout: %u\r\n", keyboard_user_config.tap_timeout);
 8000ed4:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <print_config+0x8c>)
 8000ed6:	88db      	ldrh	r3, [r3, #6]
 8000ed8:	4638      	mov	r0, r7
 8000eda:	4a0d      	ldr	r2, [pc, #52]	@ (8000f10 <print_config+0xa0>)
 8000edc:	2180      	movs	r1, #128	@ 0x80
 8000ede:	f00b ff55 	bl	800cd8c <sniprintf>
  cdc_write_string_chunked(buffer);
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fc53 	bl	8000790 <cdc_write_string_chunked>

  cdc_write_string_chunked("Use 'keymap <layer>' to view keymaps\r\n");
 8000eea:	480a      	ldr	r0, [pc, #40]	@ (8000f14 <print_config+0xa4>)
 8000eec:	f7ff fc50 	bl	8000790 <cdc_write_string_chunked>
}
 8000ef0:	bf00      	nop
 8000ef2:	3780      	adds	r7, #128	@ 0x80
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	0800e4fc 	.word	0x0800e4fc
 8000efc:	20000000 	.word	0x20000000
 8000f00:	0800e518 	.word	0x0800e518
 8000f04:	0800e534 	.word	0x0800e534
 8000f08:	0800e54c 	.word	0x0800e54c
 8000f0c:	0800e564 	.word	0x0800e564
 8000f10:	0800e584 	.word	0x0800e584
 8000f14:	0800e598 	.word	0x0800e598

08000f18 <set_config_value>:

static void set_config_value(char *param, char *value) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b094      	sub	sp, #80	@ 0x50
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  char buffer[64];
  uint32_t val = atoi(value);
 8000f22:	6838      	ldr	r0, [r7, #0]
 8000f24:	f00b fde7 	bl	800caf6 <atoi>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (strcmp(param, "reverse_magnet_pole") == 0) {
 8000f2c:	493a      	ldr	r1, [pc, #232]	@ (8001018 <set_config_value+0x100>)
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff f956 	bl	80001e0 <strcmp>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10c      	bne.n	8000f54 <set_config_value+0x3c>
    keyboard_user_config.reverse_magnet_pole = (uint8_t)val;
 8000f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4b37      	ldr	r3, [pc, #220]	@ (800101c <set_config_value+0x104>)
 8000f40:	701a      	strb	r2, [r3, #0]
    snprintf(buffer, sizeof(buffer), "Set reverse_magnet_pole to %u\r\n", keyboard_user_config.reverse_magnet_pole);
 8000f42:	4b36      	ldr	r3, [pc, #216]	@ (800101c <set_config_value+0x104>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	f107 000c 	add.w	r0, r7, #12
 8000f4a:	4a35      	ldr	r2, [pc, #212]	@ (8001020 <set_config_value+0x108>)
 8000f4c:	2140      	movs	r1, #64	@ 0x40
 8000f4e:	f00b ff1d 	bl	800cd8c <sniprintf>
 8000f52:	e058      	b.n	8001006 <set_config_value+0xee>
  } else if (strcmp(param, "trigger_offset") == 0) {
 8000f54:	4933      	ldr	r1, [pc, #204]	@ (8001024 <set_config_value+0x10c>)
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff f942 	bl	80001e0 <strcmp>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10e      	bne.n	8000f80 <set_config_value+0x68>
    keyboard_user_config.trigger_offset = (uint8_t)val;
 8000f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4b2d      	ldr	r3, [pc, #180]	@ (800101c <set_config_value+0x104>)
 8000f68:	705a      	strb	r2, [r3, #1]
    keyboard_init_keys();
 8000f6a:	f001 f981 	bl	8002270 <keyboard_init_keys>
    snprintf(buffer, sizeof(buffer), "Set trigger_offset to %u\r\n", keyboard_user_config.trigger_offset);
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	@ (800101c <set_config_value+0x104>)
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	f107 000c 	add.w	r0, r7, #12
 8000f76:	4a2c      	ldr	r2, [pc, #176]	@ (8001028 <set_config_value+0x110>)
 8000f78:	2140      	movs	r1, #64	@ 0x40
 8000f7a:	f00b ff07 	bl	800cd8c <sniprintf>
 8000f7e:	e042      	b.n	8001006 <set_config_value+0xee>
  } else if (strcmp(param, "reset_threshold") == 0) {
 8000f80:	492a      	ldr	r1, [pc, #168]	@ (800102c <set_config_value+0x114>)
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff f92c 	bl	80001e0 <strcmp>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10c      	bne.n	8000fa8 <set_config_value+0x90>
    keyboard_user_config.reset_threshold = (uint8_t)val;
 8000f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b22      	ldr	r3, [pc, #136]	@ (800101c <set_config_value+0x104>)
 8000f94:	709a      	strb	r2, [r3, #2]
    snprintf(buffer, sizeof(buffer), "Set reset_threshold to %u\r\n", keyboard_user_config.reset_threshold);
 8000f96:	4b21      	ldr	r3, [pc, #132]	@ (800101c <set_config_value+0x104>)
 8000f98:	789b      	ldrb	r3, [r3, #2]
 8000f9a:	f107 000c 	add.w	r0, r7, #12
 8000f9e:	4a24      	ldr	r2, [pc, #144]	@ (8001030 <set_config_value+0x118>)
 8000fa0:	2140      	movs	r1, #64	@ 0x40
 8000fa2:	f00b fef3 	bl	800cd8c <sniprintf>
 8000fa6:	e02e      	b.n	8001006 <set_config_value+0xee>
  } else if (strcmp(param, "rapid_trigger_offset") == 0) {
 8000fa8:	4922      	ldr	r1, [pc, #136]	@ (8001034 <set_config_value+0x11c>)
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff f918 	bl	80001e0 <strcmp>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10c      	bne.n	8000fd0 <set_config_value+0xb8>
    keyboard_user_config.rapid_trigger_offset = (uint8_t)val;
 8000fb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b18      	ldr	r3, [pc, #96]	@ (800101c <set_config_value+0x104>)
 8000fbc:	70da      	strb	r2, [r3, #3]
    snprintf(buffer, sizeof(buffer), "Set rapid_trigger_offset to %u\r\n", keyboard_user_config.rapid_trigger_offset);
 8000fbe:	4b17      	ldr	r3, [pc, #92]	@ (800101c <set_config_value+0x104>)
 8000fc0:	78db      	ldrb	r3, [r3, #3]
 8000fc2:	f107 000c 	add.w	r0, r7, #12
 8000fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8001038 <set_config_value+0x120>)
 8000fc8:	2140      	movs	r1, #64	@ 0x40
 8000fca:	f00b fedf 	bl	800cd8c <sniprintf>
 8000fce:	e01a      	b.n	8001006 <set_config_value+0xee>
  } else if (strcmp(param, "tap_timeout") == 0) {
 8000fd0:	491a      	ldr	r1, [pc, #104]	@ (800103c <set_config_value+0x124>)
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff f904 	bl	80001e0 <strcmp>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10c      	bne.n	8000ff8 <set_config_value+0xe0>
    keyboard_user_config.tap_timeout = (uint16_t)val;
 8000fde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <set_config_value+0x104>)
 8000fe4:	80da      	strh	r2, [r3, #6]
    snprintf(buffer, sizeof(buffer), "Set tap_timeout to %u\r\n", keyboard_user_config.tap_timeout);
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <set_config_value+0x104>)
 8000fe8:	88db      	ldrh	r3, [r3, #6]
 8000fea:	f107 000c 	add.w	r0, r7, #12
 8000fee:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <set_config_value+0x128>)
 8000ff0:	2140      	movs	r1, #64	@ 0x40
 8000ff2:	f00b fecb 	bl	800cd8c <sniprintf>
 8000ff6:	e006      	b.n	8001006 <set_config_value+0xee>
  } else {
    snprintf(buffer, sizeof(buffer), "Unknown parameter: %s\r\n", param);
 8000ff8:	f107 000c 	add.w	r0, r7, #12
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a11      	ldr	r2, [pc, #68]	@ (8001044 <set_config_value+0x12c>)
 8001000:	2140      	movs	r1, #64	@ 0x40
 8001002:	f00b fec3 	bl	800cd8c <sniprintf>
  }

  cdc_write_string_chunked(buffer);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fbc0 	bl	8000790 <cdc_write_string_chunked>
}
 8001010:	bf00      	nop
 8001012:	3750      	adds	r7, #80	@ 0x50
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	0800e5c0 	.word	0x0800e5c0
 800101c:	20000000 	.word	0x20000000
 8001020:	0800e5d4 	.word	0x0800e5d4
 8001024:	0800e5f4 	.word	0x0800e5f4
 8001028:	0800e604 	.word	0x0800e604
 800102c:	0800e620 	.word	0x0800e620
 8001030:	0800e630 	.word	0x0800e630
 8001034:	0800e64c 	.word	0x0800e64c
 8001038:	0800e664 	.word	0x0800e664
 800103c:	0800e688 	.word	0x0800e688
 8001040:	0800e694 	.word	0x0800e694
 8001044:	0800e6ac 	.word	0x0800e6ac

08001048 <print_keymap>:

static void print_keymap(uint8_t layer) {
 8001048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104a:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 800104e:	af00      	add	r7, sp, #0
 8001050:	4602      	mov	r2, r0
 8001052:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001056:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 800105a:	701a      	strb	r2, [r3, #0]
  char buffer[128];

  snprintf(buffer, sizeof(buffer), "Keymap for Layer %u:\r\n", layer);
 800105c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001060:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	f507 7003 	add.w	r0, r7, #524	@ 0x20c
 800106a:	4a91      	ldr	r2, [pc, #580]	@ (80012b0 <print_keymap+0x268>)
 800106c:	2180      	movs	r1, #128	@ 0x80
 800106e:	f00b fe8d 	bl	800cd8c <sniprintf>
  cdc_write_string_chunked(buffer);
 8001072:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fb8a 	bl	8000790 <cdc_write_string_chunked>

  // Print keymap row by row with proper chunking
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 800107c:	2300      	movs	r3, #0
 800107e:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
 8001082:	e109      	b.n	8001298 <print_keymap+0x250>
    // Build the row string first
    char row_buffer[512]; // Larger buffer for macro display
    int pos = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "Row %u: ", row);
 800108a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800108e:	f107 020c 	add.w	r2, r7, #12
 8001092:	18d0      	adds	r0, r2, r3
 8001094:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001098:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 800109c:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 80010a0:	4a84      	ldr	r2, [pc, #528]	@ (80012b4 <print_keymap+0x26c>)
 80010a2:	f00b fe73 	bl	800cd8c <sniprintf>
 80010a6:	4602      	mov	r2, r0
 80010a8:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80010ac:	4413      	add	r3, r2
 80010ae:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 80010b2:	2300      	movs	r3, #0
 80010b4:	f887 328f 	strb.w	r3, [r7, #655]	@ 0x28f
 80010b8:	e0cc      	b.n	8001254 <print_keymap+0x20c>
      // Check if this is a macro (multiple non-zero values)
      uint8_t macro_count = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f887 328e 	strb.w	r3, [r7, #654]	@ 0x28e
      for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	f887 328d 	strb.w	r3, [r7, #653]	@ 0x28d
 80010c6:	e020      	b.n	800110a <print_keymap+0xc2>
        if (keyboard_user_config.keymaps[layer][row][col][i] != ____) {
 80010c8:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80010cc:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 80010d0:	7818      	ldrb	r0, [r3, #0]
 80010d2:	f897 1297 	ldrb.w	r1, [r7, #663]	@ 0x297
 80010d6:	f897 228f 	ldrb.w	r2, [r7, #655]	@ 0x28f
 80010da:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 80010de:	4c76      	ldr	r4, [pc, #472]	@ (80012b8 <print_keymap+0x270>)
 80010e0:	0080      	lsls	r0, r0, #2
 80010e2:	4401      	add	r1, r0
 80010e4:	0089      	lsls	r1, r1, #2
 80010e6:	440a      	add	r2, r1
 80010e8:	0092      	lsls	r2, r2, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	3304      	adds	r3, #4
 80010ee:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d004      	beq.n	8001100 <print_keymap+0xb8>
          macro_count++;
 80010f6:	f897 328e 	ldrb.w	r3, [r7, #654]	@ 0x28e
 80010fa:	3301      	adds	r3, #1
 80010fc:	f887 328e 	strb.w	r3, [r7, #654]	@ 0x28e
      for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001100:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 8001104:	3301      	adds	r3, #1
 8001106:	f887 328d 	strb.w	r3, [r7, #653]	@ 0x28d
 800110a:	f897 328d 	ldrb.w	r3, [r7, #653]	@ 0x28d
 800110e:	2b03      	cmp	r3, #3
 8001110:	d9da      	bls.n	80010c8 <print_keymap+0x80>
        }
      }

      if (macro_count > 1) {
 8001112:	f897 328e 	ldrb.w	r3, [r7, #654]	@ 0x28e
 8001116:	2b01      	cmp	r3, #1
 8001118:	d973      	bls.n	8001202 <print_keymap+0x1ba>
        // This is a macro - show all values in brackets
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "[");
 800111a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800111e:	f107 020c 	add.w	r2, r7, #12
 8001122:	18d0      	adds	r0, r2, r3
 8001124:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001128:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800112c:	4a63      	ldr	r2, [pc, #396]	@ (80012bc <print_keymap+0x274>)
 800112e:	4619      	mov	r1, r3
 8001130:	f00b fe2c 	bl	800cd8c <sniprintf>
 8001134:	4602      	mov	r2, r0
 8001136:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800113a:	4413      	add	r3, r2
 800113c:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
        for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001140:	2300      	movs	r3, #0
 8001142:	f887 328c 	strb.w	r3, [r7, #652]	@ 0x28c
 8001146:	e044      	b.n	80011d2 <print_keymap+0x18a>
          if (i > 0)
 8001148:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 800114c:	2b00      	cmp	r3, #0
 800114e:	d012      	beq.n	8001176 <print_keymap+0x12e>
            pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, ",");
 8001150:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001154:	f107 020c 	add.w	r2, r7, #12
 8001158:	18d0      	adds	r0, r2, r3
 800115a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800115e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001162:	4a57      	ldr	r2, [pc, #348]	@ (80012c0 <print_keymap+0x278>)
 8001164:	4619      	mov	r1, r3
 8001166:	f00b fe11 	bl	800cd8c <sniprintf>
 800116a:	4602      	mov	r2, r0
 800116c:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001170:	4413      	add	r3, r2
 8001172:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
          pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%u",
 8001176:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800117a:	f107 020c 	add.w	r2, r7, #12
 800117e:	18d4      	adds	r4, r2, r3
 8001180:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001184:	f5c3 7500 	rsb	r5, r3, #512	@ 0x200
                          keyboard_user_config.keymaps[layer][row][col][i]);
 8001188:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800118c:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 8001190:	7818      	ldrb	r0, [r3, #0]
 8001192:	f897 1297 	ldrb.w	r1, [r7, #663]	@ 0x297
 8001196:	f897 228f 	ldrb.w	r2, [r7, #655]	@ 0x28f
 800119a:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 800119e:	4e46      	ldr	r6, [pc, #280]	@ (80012b8 <print_keymap+0x270>)
 80011a0:	0080      	lsls	r0, r0, #2
 80011a2:	4401      	add	r1, r0
 80011a4:	0089      	lsls	r1, r1, #2
 80011a6:	440a      	add	r2, r1
 80011a8:	0092      	lsls	r2, r2, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	3304      	adds	r3, #4
 80011ae:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
          pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%u",
 80011b2:	4a44      	ldr	r2, [pc, #272]	@ (80012c4 <print_keymap+0x27c>)
 80011b4:	4629      	mov	r1, r5
 80011b6:	4620      	mov	r0, r4
 80011b8:	f00b fde8 	bl	800cd8c <sniprintf>
 80011bc:	4602      	mov	r2, r0
 80011be:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80011c2:	4413      	add	r3, r2
 80011c4:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
        for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80011c8:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 80011cc:	3301      	adds	r3, #1
 80011ce:	f887 328c 	strb.w	r3, [r7, #652]	@ 0x28c
 80011d2:	f897 328c 	ldrb.w	r3, [r7, #652]	@ 0x28c
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d9b6      	bls.n	8001148 <print_keymap+0x100>
        }
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "] ");
 80011da:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80011de:	f107 020c 	add.w	r2, r7, #12
 80011e2:	18d0      	adds	r0, r2, r3
 80011e4:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80011e8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80011ec:	4a36      	ldr	r2, [pc, #216]	@ (80012c8 <print_keymap+0x280>)
 80011ee:	4619      	mov	r1, r3
 80011f0:	f00b fdcc 	bl	800cd8c <sniprintf>
 80011f4:	4602      	mov	r2, r0
 80011f6:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80011fa:	4413      	add	r3, r2
 80011fc:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001200:	e023      	b.n	800124a <print_keymap+0x202>
      } else {
        // Single key - show just the first value
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%4u ",
 8001202:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001206:	f107 020c 	add.w	r2, r7, #12
 800120a:	18d0      	adds	r0, r2, r3
 800120c:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001210:	f5c3 7400 	rsb	r4, r3, #512	@ 0x200
                        keyboard_user_config.keymaps[layer][row][col][0]);
 8001214:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001218:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 800121c:	7819      	ldrb	r1, [r3, #0]
 800121e:	f897 2297 	ldrb.w	r2, [r7, #663]	@ 0x297
 8001222:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 8001226:	4d24      	ldr	r5, [pc, #144]	@ (80012b8 <print_keymap+0x270>)
 8001228:	0089      	lsls	r1, r1, #2
 800122a:	440a      	add	r2, r1
 800122c:	0092      	lsls	r2, r2, #2
 800122e:	4413      	add	r3, r2
 8001230:	3301      	adds	r3, #1
 8001232:	f835 3033 	ldrh.w	r3, [r5, r3, lsl #3]
        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%4u ",
 8001236:	4a25      	ldr	r2, [pc, #148]	@ (80012cc <print_keymap+0x284>)
 8001238:	4621      	mov	r1, r4
 800123a:	f00b fda7 	bl	800cd8c <sniprintf>
 800123e:	4602      	mov	r2, r0
 8001240:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001244:	4413      	add	r3, r2
 8001246:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 800124a:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 800124e:	3301      	adds	r3, #1
 8001250:	f887 328f 	strb.w	r3, [r7, #655]	@ 0x28f
 8001254:	f897 328f 	ldrb.w	r3, [r7, #655]	@ 0x28f
 8001258:	2b03      	cmp	r3, #3
 800125a:	f67f af2e 	bls.w	80010ba <print_keymap+0x72>
      }
    }

    pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "\r\n");
 800125e:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001262:	f107 020c 	add.w	r2, r7, #12
 8001266:	18d0      	adds	r0, r2, r3
 8001268:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800126c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001270:	4a17      	ldr	r2, [pc, #92]	@ (80012d0 <print_keymap+0x288>)
 8001272:	4619      	mov	r1, r3
 8001274:	f00b fd8a 	bl	800cd8c <sniprintf>
 8001278:	4602      	mov	r2, r0
 800127a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800127e:	4413      	add	r3, r2
 8001280:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

    // Send the complete row
    cdc_write_string_chunked(row_buffer);
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fa81 	bl	8000790 <cdc_write_string_chunked>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 800128e:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8001292:	3301      	adds	r3, #1
 8001294:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
 8001298:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 800129c:	2b03      	cmp	r3, #3
 800129e:	f67f aef1 	bls.w	8001084 <print_keymap+0x3c>
  }
}
 80012a2:	bf00      	nop
 80012a4:	bf00      	nop
 80012a6:	f507 7727 	add.w	r7, r7, #668	@ 0x29c
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ae:	bf00      	nop
 80012b0:	0800e6c4 	.word	0x0800e6c4
 80012b4:	0800e6dc 	.word	0x0800e6dc
 80012b8:	20000000 	.word	0x20000000
 80012bc:	0800e6e8 	.word	0x0800e6e8
 80012c0:	0800e0a8 	.word	0x0800e0a8
 80012c4:	0800e0ac 	.word	0x0800e0ac
 80012c8:	0800e6ec 	.word	0x0800e6ec
 80012cc:	0800e6f0 	.word	0x0800e6f0
 80012d0:	0800e074 	.word	0x0800e074

080012d4 <set_keymap_value>:

static void set_keymap_value(uint8_t layer, uint8_t row, uint8_t col, uint16_t value) {
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b099      	sub	sp, #100	@ 0x64
 80012d8:	af04      	add	r7, sp, #16
 80012da:	4604      	mov	r4, r0
 80012dc:	4608      	mov	r0, r1
 80012de:	4611      	mov	r1, r2
 80012e0:	461a      	mov	r2, r3
 80012e2:	4623      	mov	r3, r4
 80012e4:	71fb      	strb	r3, [r7, #7]
 80012e6:	4603      	mov	r3, r0
 80012e8:	71bb      	strb	r3, [r7, #6]
 80012ea:	460b      	mov	r3, r1
 80012ec:	717b      	strb	r3, [r7, #5]
 80012ee:	4613      	mov	r3, r2
 80012f0:	807b      	strh	r3, [r7, #2]
  char buffer[64];

  keyboard_user_config.keymaps[layer][row][col][0] = value;
 80012f2:	79f9      	ldrb	r1, [r7, #7]
 80012f4:	79ba      	ldrb	r2, [r7, #6]
 80012f6:	797b      	ldrb	r3, [r7, #5]
 80012f8:	4822      	ldr	r0, [pc, #136]	@ (8001384 <set_keymap_value+0xb0>)
 80012fa:	0089      	lsls	r1, r1, #2
 80012fc:	440a      	add	r2, r1
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	4413      	add	r3, r2
 8001302:	3301      	adds	r3, #1
 8001304:	887a      	ldrh	r2, [r7, #2]
 8001306:	f820 2033 	strh.w	r2, [r0, r3, lsl #3]
  // Clear remaining macro slots
  for (uint8_t i = 1; i < MAX_MACRO_LEN; i++) {
 800130a:	2301      	movs	r3, #1
 800130c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001310:	e014      	b.n	800133c <set_keymap_value+0x68>
    keyboard_user_config.keymaps[layer][row][col][i] = ____;
 8001312:	79f8      	ldrb	r0, [r7, #7]
 8001314:	79b9      	ldrb	r1, [r7, #6]
 8001316:	797a      	ldrb	r2, [r7, #5]
 8001318:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800131c:	4c19      	ldr	r4, [pc, #100]	@ (8001384 <set_keymap_value+0xb0>)
 800131e:	0080      	lsls	r0, r0, #2
 8001320:	4401      	add	r1, r0
 8001322:	0089      	lsls	r1, r1, #2
 8001324:	440a      	add	r2, r1
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	4413      	add	r3, r2
 800132a:	3304      	adds	r3, #4
 800132c:	2200      	movs	r2, #0
 800132e:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for (uint8_t i = 1; i < MAX_MACRO_LEN; i++) {
 8001332:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001336:	3301      	adds	r3, #1
 8001338:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800133c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001340:	2b03      	cmp	r3, #3
 8001342:	d9e6      	bls.n	8001312 <set_keymap_value+0x3e>
  }
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 8001344:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8001348:	2100      	movs	r1, #0
 800134a:	480e      	ldr	r0, [pc, #56]	@ (8001384 <set_keymap_value+0xb0>)
 800134c:	f001 fede 	bl	800310c <keyboard_write_config>
  keyboard_init_keys();
 8001350:	f000 ff8e 	bl	8002270 <keyboard_init_keys>

  snprintf(buffer, sizeof(buffer), "Set keymap[%u][%u][%u] to %u\r\n", layer, row, col, value);
 8001354:	79fc      	ldrb	r4, [r7, #7]
 8001356:	79bb      	ldrb	r3, [r7, #6]
 8001358:	797a      	ldrb	r2, [r7, #5]
 800135a:	8879      	ldrh	r1, [r7, #2]
 800135c:	f107 000c 	add.w	r0, r7, #12
 8001360:	9102      	str	r1, [sp, #8]
 8001362:	9201      	str	r2, [sp, #4]
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	4623      	mov	r3, r4
 8001368:	4a07      	ldr	r2, [pc, #28]	@ (8001388 <set_keymap_value+0xb4>)
 800136a:	2140      	movs	r1, #64	@ 0x40
 800136c:	f00b fd0e 	bl	800cd8c <sniprintf>
  cdc_write_string_chunked(buffer);
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fa0b 	bl	8000790 <cdc_write_string_chunked>
}
 800137a:	bf00      	nop
 800137c:	3754      	adds	r7, #84	@ 0x54
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	bf00      	nop
 8001384:	20000000 	.word	0x20000000
 8001388:	0800e6f8 	.word	0x0800e6f8

0800138c <set_macro_keymap_value>:

static void set_macro_keymap_value(uint8_t layer, uint8_t row, uint8_t col, uint16_t values[MAX_MACRO_LEN]) {
 800138c:	b5b0      	push	{r4, r5, r7, lr}
 800138e:	b0a8      	sub	sp, #160	@ 0xa0
 8001390:	af02      	add	r7, sp, #8
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	4603      	mov	r3, r0
 8001396:	71fb      	strb	r3, [r7, #7]
 8001398:	460b      	mov	r3, r1
 800139a:	71bb      	strb	r3, [r7, #6]
 800139c:	4613      	mov	r3, r2
 800139e:	717b      	strb	r3, [r7, #5]
  char buffer[128];

  // Copy all macro values
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80013a0:	2300      	movs	r3, #0
 80013a2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80013a6:	e01a      	b.n	80013de <set_macro_keymap_value+0x52>
    keyboard_user_config.keymaps[layer][row][col][i] = values[i];
 80013a8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	18d4      	adds	r4, r2, r3
 80013b2:	79f8      	ldrb	r0, [r7, #7]
 80013b4:	79b9      	ldrb	r1, [r7, #6]
 80013b6:	797a      	ldrb	r2, [r7, #5]
 80013b8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80013bc:	8825      	ldrh	r5, [r4, #0]
 80013be:	4c41      	ldr	r4, [pc, #260]	@ (80014c4 <set_macro_keymap_value+0x138>)
 80013c0:	0080      	lsls	r0, r0, #2
 80013c2:	4401      	add	r1, r0
 80013c4:	0089      	lsls	r1, r1, #2
 80013c6:	440a      	add	r2, r1
 80013c8:	0092      	lsls	r2, r2, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	3304      	adds	r3, #4
 80013ce:	462a      	mov	r2, r5
 80013d0:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80013d4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80013d8:	3301      	adds	r3, #1
 80013da:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80013de:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d9e0      	bls.n	80013a8 <set_macro_keymap_value+0x1c>
  }
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 80013e6:	f44f 7202 	mov.w	r2, #520	@ 0x208
 80013ea:	2100      	movs	r1, #0
 80013ec:	4835      	ldr	r0, [pc, #212]	@ (80014c4 <set_macro_keymap_value+0x138>)
 80013ee:	f001 fe8d 	bl	800310c <keyboard_write_config>
  keyboard_init_keys();
 80013f2:	f000 ff3d 	bl	8002270 <keyboard_init_keys>

  // Build response message showing all macro values
  int pos = snprintf(buffer, sizeof(buffer), "Set macro keymap[%u][%u][%u] to [", layer, row, col);
 80013f6:	79f9      	ldrb	r1, [r7, #7]
 80013f8:	79bb      	ldrb	r3, [r7, #6]
 80013fa:	797a      	ldrb	r2, [r7, #5]
 80013fc:	f107 000c 	add.w	r0, r7, #12
 8001400:	9201      	str	r2, [sp, #4]
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	460b      	mov	r3, r1
 8001406:	4a30      	ldr	r2, [pc, #192]	@ (80014c8 <set_macro_keymap_value+0x13c>)
 8001408:	2180      	movs	r1, #128	@ 0x80
 800140a:	f00b fcbf 	bl	800cd8c <sniprintf>
 800140e:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001412:	2300      	movs	r3, #0
 8001414:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8001418:	e033      	b.n	8001482 <set_macro_keymap_value+0xf6>
    if (i > 0)
 800141a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800141e:	2b00      	cmp	r3, #0
 8001420:	d012      	beq.n	8001448 <set_macro_keymap_value+0xbc>
      pos += snprintf(buffer + pos, sizeof(buffer) - pos, ", ");
 8001422:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001426:	f107 020c 	add.w	r2, r7, #12
 800142a:	18d0      	adds	r0, r2, r3
 800142c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001430:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001434:	4a25      	ldr	r2, [pc, #148]	@ (80014cc <set_macro_keymap_value+0x140>)
 8001436:	4619      	mov	r1, r3
 8001438:	f00b fca8 	bl	800cd8c <sniprintf>
 800143c:	4602      	mov	r2, r0
 800143e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001442:	4413      	add	r3, r2
 8001444:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    pos += snprintf(buffer + pos, sizeof(buffer) - pos, "%u", values[i]);
 8001448:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800144c:	f107 020c 	add.w	r2, r7, #12
 8001450:	18d0      	adds	r0, r2, r3
 8001452:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001456:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 800145a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	4413      	add	r3, r2
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	4a1a      	ldr	r2, [pc, #104]	@ (80014d0 <set_macro_keymap_value+0x144>)
 8001468:	f00b fc90 	bl	800cd8c <sniprintf>
 800146c:	4602      	mov	r2, r0
 800146e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001472:	4413      	add	r3, r2
 8001474:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001478:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800147c:	3301      	adds	r3, #1
 800147e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8001482:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001486:	2b03      	cmp	r3, #3
 8001488:	d9c7      	bls.n	800141a <set_macro_keymap_value+0x8e>
  }
  pos += snprintf(buffer + pos, sizeof(buffer) - pos, "]\r\n");
 800148a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800148e:	f107 020c 	add.w	r2, r7, #12
 8001492:	18d0      	adds	r0, r2, r3
 8001494:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001498:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800149c:	4a0d      	ldr	r2, [pc, #52]	@ (80014d4 <set_macro_keymap_value+0x148>)
 800149e:	4619      	mov	r1, r3
 80014a0:	f00b fc74 	bl	800cd8c <sniprintf>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014aa:	4413      	add	r3, r2
 80014ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  cdc_write_string_chunked(buffer);
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f96b 	bl	8000790 <cdc_write_string_chunked>
}
 80014ba:	bf00      	nop
 80014bc:	3798      	adds	r7, #152	@ 0x98
 80014be:	46bd      	mov	sp, r7
 80014c0:	bdb0      	pop	{r4, r5, r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000000 	.word	0x20000000
 80014c8:	0800e718 	.word	0x0800e718
 80014cc:	0800e73c 	.word	0x0800e73c
 80014d0:	0800e0ac 	.word	0x0800e0ac
 80014d4:	0800e740 	.word	0x0800e740

080014d8 <save_config>:

static void save_config(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  // TODO: Implement flash save functionality
  // This would typically write the config struct to flash memory
  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 80014dc:	f44f 7202 	mov.w	r2, #520	@ 0x208
 80014e0:	2100      	movs	r1, #0
 80014e2:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <save_config+0x20>)
 80014e4:	f001 fe12 	bl	800310c <keyboard_write_config>
  keyboard_init_keys();
 80014e8:	f000 fec2 	bl	8002270 <keyboard_init_keys>
  cdc_write_string_chunked("Configuration saved to flash\r\n");
 80014ec:	4803      	ldr	r0, [pc, #12]	@ (80014fc <save_config+0x24>)
 80014ee:	f7ff f94f 	bl	8000790 <cdc_write_string_chunked>
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000000 	.word	0x20000000
 80014fc:	0800e744 	.word	0x0800e744

08001500 <load_config>:

static void load_config(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  // TODO: Implement flash load functionality
  // This would typically read the config struct from flash memory
  keyboard_read_config();
 8001504:	f001 fdf0 	bl	80030e8 <keyboard_read_config>
  cdc_write_string_chunked("Configuration loaded from flash\r\n");
 8001508:	4802      	ldr	r0, [pc, #8]	@ (8001514 <load_config+0x14>)
 800150a:	f7ff f941 	bl	8000790 <cdc_write_string_chunked>
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	0800e764 	.word	0x0800e764

08001518 <reset_config>:

static void reset_config(void) {
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  // Reset to default values
  keyboard_write_config(&keyboard_default_user_config, 0, sizeof keyboard_default_user_config);
 800151c:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8001520:	2100      	movs	r1, #0
 8001522:	4806      	ldr	r0, [pc, #24]	@ (800153c <reset_config+0x24>)
 8001524:	f001 fdf2 	bl	800310c <keyboard_write_config>
  keyboard_read_config();
 8001528:	f001 fdde 	bl	80030e8 <keyboard_read_config>
  keyboard_init_keys();
 800152c:	f000 fea0 	bl	8002270 <keyboard_init_keys>

  cdc_write_string_chunked("Configuration reset to defaults\r\n");
 8001530:	4803      	ldr	r0, [pc, #12]	@ (8001540 <reset_config+0x28>)
 8001532:	f7ff f92d 	bl	8000790 <cdc_write_string_chunked>
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	0800e8d8 	.word	0x0800e8d8
 8001540:	0800e788 	.word	0x0800e788

08001544 <tud_cdc_line_state_cb>:
// Getter function for other modules to access configuration
struct user_config *get_user_config(void) {
  return &keyboard_user_config;
}

void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
 800154e:	460b      	mov	r3, r1
 8001550:	71bb      	strb	r3, [r7, #6]
 8001552:	4613      	mov	r3, r2
 8001554:	717b      	strb	r3, [r7, #5]
  (void)itf;

  // Check if terminal is connecting (DTR asserted)
  if (dtr) {
 8001556:	79bb      	ldrb	r3, [r7, #6]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d015      	beq.n	8001588 <tud_cdc_line_state_cb+0x44>
    // Give a small delay to ensure connection is stable
    for (volatile int i = 0; i < 10000; i++)
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	e002      	b.n	8001568 <tud_cdc_line_state_cb+0x24>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3301      	adds	r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800156e:	4293      	cmp	r3, r2
 8001570:	ddf7      	ble.n	8001562 <tud_cdc_line_state_cb+0x1e>
      ;

    cdc_write_string_chunked("\r\n=== HE16 Configuration Interface ===\r\n");
 8001572:	4807      	ldr	r0, [pc, #28]	@ (8001590 <tud_cdc_line_state_cb+0x4c>)
 8001574:	f7ff f90c 	bl	8000790 <cdc_write_string_chunked>
    cdc_write_string_chunked("Type 'help' for available commands\r\n");
 8001578:	4806      	ldr	r0, [pc, #24]	@ (8001594 <tud_cdc_line_state_cb+0x50>)
 800157a:	f7ff f909 	bl	8000790 <cdc_write_string_chunked>
    cdc_write_string_chunked("Ready> ");
 800157e:	4806      	ldr	r0, [pc, #24]	@ (8001598 <tud_cdc_line_state_cb+0x54>)
 8001580:	f7ff f906 	bl	8000790 <cdc_write_string_chunked>
    cdc_write_flush_wait();
 8001584:	f7ff f94f 	bl	8000826 <cdc_write_flush_wait>
  }
}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	0800e7ac 	.word	0x0800e7ac
 8001594:	0800e7d8 	.word	0x0800e7d8
 8001598:	0800e068 	.word	0x0800e068

0800159c <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf) {
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  (void)itf;
  // Data handling is done in cdc_task()
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <hid_task>:
static uint8_t modifiers = 0;
static uint8_t keycodes[6] = {0};
// static uint8_t is_screaming = 0;
static uint8_t consumer_report = 0;

void hid_task() {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0

  if ((should_send_consumer_report || should_send_keyboard_report) && tud_hid_ready()) {
 80015ba:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <hid_task+0x8c>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d103      	bne.n	80015ca <hid_task+0x16>
 80015c2:	4b20      	ldr	r3, [pc, #128]	@ (8001644 <hid_task+0x90>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d035      	beq.n	8001636 <hid_task+0x82>

//--------------------------------------------------------------------+
// Application API (Single Port)
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_ready(void) {
  return tud_hid_n_ready(0);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f005 fffc 	bl	80075c8 <tud_hid_n_ready>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d02f      	beq.n	8001636 <hid_task+0x82>
    if (tud_suspended()) {
 80015d6:	f007 fb13 	bl	8008c00 <tud_suspended>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <hid_task+0x32>
      tud_remote_wakeup();
 80015e0:	f007 fb22 	bl	8008c28 <tud_remote_wakeup>
        should_send_keyboard_report = 0;
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
      }
    }
  }
}
 80015e4:	e027      	b.n	8001636 <hid_task+0x82>
      if (should_send_consumer_report) {
 80015e6:	4b16      	ldr	r3, [pc, #88]	@ (8001640 <hid_task+0x8c>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00f      	beq.n	800160e <hid_task+0x5a>
        should_send_consumer_report = 0;
 80015ee:	4b14      	ldr	r3, [pc, #80]	@ (8001640 <hid_task+0x8c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
 80015f4:	2302      	movs	r3, #2
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	4b13      	ldr	r3, [pc, #76]	@ (8001648 <hid_task+0x94>)
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	2302      	movs	r3, #2
 80015fe:	80fb      	strh	r3, [r7, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tud_hid_get_protocol(void) {
  return tud_hid_n_get_protocol(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_report(uint8_t report_id, void const* report, uint16_t len) {
  return tud_hid_n_report(0, report_id, report, len);
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	7bf9      	ldrb	r1, [r7, #15]
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	2000      	movs	r0, #0
 8001608:	f006 f820 	bl	800764c <tud_hid_n_report>
 800160c:	e013      	b.n	8001636 <hid_task+0x82>
      } else if (should_send_keyboard_report) {
 800160e:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <hid_task+0x90>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00f      	beq.n	8001636 <hid_task+0x82>
        should_send_keyboard_report = 0;
 8001616:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <hid_task+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <hid_task+0x98>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2201      	movs	r2, #1
 8001622:	717a      	strb	r2, [r7, #5]
 8001624:	713b      	strb	r3, [r7, #4]
 8001626:	4b0a      	ldr	r3, [pc, #40]	@ (8001650 <hid_task+0x9c>)
 8001628:	603b      	str	r3, [r7, #0]
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
  return tud_hid_n_keyboard_report(0, report_id, modifier, keycode);
 800162a:	793a      	ldrb	r2, [r7, #4]
 800162c:	7979      	ldrb	r1, [r7, #5]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	2000      	movs	r0, #0
 8001632:	f006 f891 	bl	8007758 <tud_hid_n_keyboard_report>
}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000304 	.word	0x20000304
 8001644:	20000305 	.word	0x20000305
 8001648:	2000030e 	.word	0x2000030e
 800164c:	20000306 	.word	0x20000306
 8001650:	20000308 	.word	0x20000308

08001654 <hid_press_key>:

void hid_press_key(struct key *key, uint8_t layer) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 8001660:	78fa      	ldrb	r2, [r7, #3]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4413      	add	r3, r2
 800166a:	440b      	add	r3, r1
 800166c:	3305      	adds	r3, #5
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	3b01      	subs	r3, #1
 8001672:	2b03      	cmp	r3, #3
 8001674:	f200 80f7 	bhi.w	8001866 <hid_press_key+0x212>
 8001678:	a201      	add	r2, pc, #4	@ (adr r2, 8001680 <hid_press_key+0x2c>)
 800167a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167e:	bf00      	nop
 8001680:	080016b7 	.word	0x080016b7
 8001684:	08001691 	.word	0x08001691
 8001688:	080016f7 	.word	0x080016f7
 800168c:	08001715 	.word	0x08001715
  case KEY_TYPE_MODIFIER:
    modifiers |= key->layers[layer].value[0];
 8001690:	78fa      	ldrb	r2, [r7, #3]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	4413      	add	r3, r2
 800169a:	440b      	add	r3, r1
 800169c:	88db      	ldrh	r3, [r3, #6]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b74      	ldr	r3, [pc, #464]	@ (8001874 <hid_press_key+0x220>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b72      	ldr	r3, [pc, #456]	@ (8001874 <hid_press_key+0x220>)
 80016ac:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80016ae:	4b72      	ldr	r3, [pc, #456]	@ (8001878 <hid_press_key+0x224>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	701a      	strb	r2, [r3, #0]
    break;
 80016b4:	e0da      	b.n	800186c <hid_press_key+0x218>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 80016b6:	2300      	movs	r3, #0
 80016b8:	75fb      	strb	r3, [r7, #23]
 80016ba:	e018      	b.n	80016ee <hid_press_key+0x9a>
      if (keycodes[i] == 0) {
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
 80016be:	4a6f      	ldr	r2, [pc, #444]	@ (800187c <hid_press_key+0x228>)
 80016c0:	5cd3      	ldrb	r3, [r2, r3]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d110      	bne.n	80016e8 <hid_press_key+0x94>
        keycodes[i] = key->layers[layer].value[0];
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4413      	add	r3, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	88db      	ldrh	r3, [r3, #6]
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	7dfb      	ldrb	r3, [r7, #23]
 80016d8:	b2d1      	uxtb	r1, r2
 80016da:	4a68      	ldr	r2, [pc, #416]	@ (800187c <hid_press_key+0x228>)
 80016dc:	54d1      	strb	r1, [r2, r3]
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // } else if (i == 0 && key->state.velocity > keyboard_user_config.screaming_velocity_trigger) {
        //   is_screaming = 1;
        //   modifiers |= get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 80016de:	4b66      	ldr	r3, [pc, #408]	@ (8001878 <hid_press_key+0x224>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	701a      	strb	r2, [r3, #0]
        break;
 80016e4:	bf00      	nop
      }
    }
    break;
 80016e6:	e0c1      	b.n	800186c <hid_press_key+0x218>
    for (uint8_t i = 0; i < 6; i++) {
 80016e8:	7dfb      	ldrb	r3, [r7, #23]
 80016ea:	3301      	adds	r3, #1
 80016ec:	75fb      	strb	r3, [r7, #23]
 80016ee:	7dfb      	ldrb	r3, [r7, #23]
 80016f0:	2b05      	cmp	r3, #5
 80016f2:	d9e3      	bls.n	80016bc <hid_press_key+0x68>
    break;
 80016f4:	e0ba      	b.n	800186c <hid_press_key+0x218>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = key->layers[layer].value[0];
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4413      	add	r3, r2
 8001700:	440b      	add	r3, r1
 8001702:	88db      	ldrh	r3, [r3, #6]
 8001704:	b29b      	uxth	r3, r3
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b5d      	ldr	r3, [pc, #372]	@ (8001880 <hid_press_key+0x22c>)
 800170a:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 800170c:	4b5d      	ldr	r3, [pc, #372]	@ (8001884 <hid_press_key+0x230>)
 800170e:	2201      	movs	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
    break;
 8001712:	e0ab      	b.n	800186c <hid_press_key+0x218>

  case KEY_TYPE_MACRO:
    // Count how many non-zero macro values we have (excluding modifiers)
    uint8_t macro_count = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001718:	2300      	movs	r3, #0
 800171a:	757b      	strb	r3, [r7, #21]
 800171c:	e025      	b.n	800176a <hid_press_key+0x116>
      if (key->layers[layer].value[i] != ____) {
 800171e:	78fa      	ldrb	r2, [r7, #3]
 8001720:	7d7b      	ldrb	r3, [r7, #21]
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	0058      	lsls	r0, r3, #1
 8001726:	4613      	mov	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	4413      	add	r3, r2
 800172c:	4403      	add	r3, r0
 800172e:	440b      	add	r3, r1
 8001730:	88db      	ldrh	r3, [r3, #6]
 8001732:	b29b      	uxth	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d015      	beq.n	8001764 <hid_press_key+0x110>
        // Check if this is a modifier
        uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[i]);
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	7d7b      	ldrb	r3, [r7, #21]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	0058      	lsls	r0, r3, #1
 8001740:	4613      	mov	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4413      	add	r3, r2
 8001746:	4403      	add	r3, r0
 8001748:	440b      	add	r3, r1
 800174a:	88db      	ldrh	r3, [r3, #6]
 800174c:	b29b      	uxth	r3, r3
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f9a0 	bl	8001a94 <get_bitmask_for_modifier>
 8001754:	4603      	mov	r3, r0
 8001756:	737b      	strb	r3, [r7, #13]
        if (!bitmask) {
 8001758:	7b7b      	ldrb	r3, [r7, #13]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <hid_press_key+0x110>
          macro_count++; // Only count non-modifier keys
 800175e:	7dbb      	ldrb	r3, [r7, #22]
 8001760:	3301      	adds	r3, #1
 8001762:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 8001764:	7d7b      	ldrb	r3, [r7, #21]
 8001766:	3301      	adds	r3, #1
 8001768:	757b      	strb	r3, [r7, #21]
 800176a:	7d7b      	ldrb	r3, [r7, #21]
 800176c:	2b03      	cmp	r3, #3
 800176e:	d9d6      	bls.n	800171e <hid_press_key+0xca>
        }
      }
    }

    // Find the first empty slot for the macro
    uint8_t start_slot = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	753b      	strb	r3, [r7, #20]
    for (uint8_t i = 0; i < 6; i++) {
 8001774:	2300      	movs	r3, #0
 8001776:	74fb      	strb	r3, [r7, #19]
 8001778:	e00a      	b.n	8001790 <hid_press_key+0x13c>
      if (keycodes[i] == 0) {
 800177a:	7cfb      	ldrb	r3, [r7, #19]
 800177c:	4a3f      	ldr	r2, [pc, #252]	@ (800187c <hid_press_key+0x228>)
 800177e:	5cd3      	ldrb	r3, [r2, r3]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <hid_press_key+0x136>
        start_slot = i;
 8001784:	7cfb      	ldrb	r3, [r7, #19]
 8001786:	753b      	strb	r3, [r7, #20]
        break;
 8001788:	e005      	b.n	8001796 <hid_press_key+0x142>
    for (uint8_t i = 0; i < 6; i++) {
 800178a:	7cfb      	ldrb	r3, [r7, #19]
 800178c:	3301      	adds	r3, #1
 800178e:	74fb      	strb	r3, [r7, #19]
 8001790:	7cfb      	ldrb	r3, [r7, #19]
 8001792:	2b05      	cmp	r3, #5
 8001794:	d9f1      	bls.n	800177a <hid_press_key+0x126>
      }
    }

    // Check if we have enough consecutive empty slots for the non-modifier keys
    uint8_t available_slots = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	74bb      	strb	r3, [r7, #18]
    for (uint8_t i = start_slot; i < 6; i++) {
 800179a:	7d3b      	ldrb	r3, [r7, #20]
 800179c:	747b      	strb	r3, [r7, #17]
 800179e:	e00a      	b.n	80017b6 <hid_press_key+0x162>
      if (keycodes[i] == 0) {
 80017a0:	7c7b      	ldrb	r3, [r7, #17]
 80017a2:	4a36      	ldr	r2, [pc, #216]	@ (800187c <hid_press_key+0x228>)
 80017a4:	5cd3      	ldrb	r3, [r2, r3]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <hid_press_key+0x16a>
        available_slots++;
 80017aa:	7cbb      	ldrb	r3, [r7, #18]
 80017ac:	3301      	adds	r3, #1
 80017ae:	74bb      	strb	r3, [r7, #18]
    for (uint8_t i = start_slot; i < 6; i++) {
 80017b0:	7c7b      	ldrb	r3, [r7, #17]
 80017b2:	3301      	adds	r3, #1
 80017b4:	747b      	strb	r3, [r7, #17]
 80017b6:	7c7b      	ldrb	r3, [r7, #17]
 80017b8:	2b05      	cmp	r3, #5
 80017ba:	d9f1      	bls.n	80017a0 <hid_press_key+0x14c>
 80017bc:	e000      	b.n	80017c0 <hid_press_key+0x16c>
      } else {
        break; // Stop counting if we hit a non-empty slot
 80017be:	bf00      	nop
      }
    }

    // Only proceed if we have enough slots for the non-modifier keys
    if (available_slots >= macro_count) {
 80017c0:	7cba      	ldrb	r2, [r7, #18]
 80017c2:	7dbb      	ldrb	r3, [r7, #22]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d350      	bcc.n	800186a <hid_press_key+0x216>
      // Process macro values
      uint8_t macro_idx = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	743b      	strb	r3, [r7, #16]
      for (uint8_t i = start_slot; i < 6 && macro_idx < MAX_MACRO_LEN; macro_idx++) {
 80017cc:	7d3b      	ldrb	r3, [r7, #20]
 80017ce:	73fb      	strb	r3, [r7, #15]
 80017d0:	e042      	b.n	8001858 <hid_press_key+0x204>
        if (key->layers[layer].value[macro_idx] != ____) {
 80017d2:	78fa      	ldrb	r2, [r7, #3]
 80017d4:	7c3b      	ldrb	r3, [r7, #16]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	0058      	lsls	r0, r3, #1
 80017da:	4613      	mov	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4413      	add	r3, r2
 80017e0:	4403      	add	r3, r0
 80017e2:	440b      	add	r3, r1
 80017e4:	88db      	ldrh	r3, [r3, #6]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d032      	beq.n	8001852 <hid_press_key+0x1fe>
          // Check if this is a modifier
          uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[macro_idx]);
 80017ec:	78fa      	ldrb	r2, [r7, #3]
 80017ee:	7c3b      	ldrb	r3, [r7, #16]
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	0058      	lsls	r0, r3, #1
 80017f4:	4613      	mov	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4413      	add	r3, r2
 80017fa:	4403      	add	r3, r0
 80017fc:	440b      	add	r3, r1
 80017fe:	88db      	ldrh	r3, [r3, #6]
 8001800:	b29b      	uxth	r3, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f946 	bl	8001a94 <get_bitmask_for_modifier>
 8001808:	4603      	mov	r3, r0
 800180a:	73bb      	strb	r3, [r7, #14]
          if (bitmask) {
 800180c:	7bbb      	ldrb	r3, [r7, #14]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00a      	beq.n	8001828 <hid_press_key+0x1d4>
            // Set modifier bit
            modifiers |= bitmask;
 8001812:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <hid_press_key+0x220>)
 8001814:	781a      	ldrb	r2, [r3, #0]
 8001816:	7bbb      	ldrb	r3, [r7, #14]
 8001818:	4313      	orrs	r3, r2
 800181a:	b2da      	uxtb	r2, r3
 800181c:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <hid_press_key+0x220>)
 800181e:	701a      	strb	r2, [r3, #0]
            should_send_keyboard_report = 1;
 8001820:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <hid_press_key+0x224>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	e014      	b.n	8001852 <hid_press_key+0x1fe>
          } else {
            // Place non-modifier key in keycodes array
            keycodes[i] = key->layers[layer].value[macro_idx];
 8001828:	78fa      	ldrb	r2, [r7, #3]
 800182a:	7c3b      	ldrb	r3, [r7, #16]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	0058      	lsls	r0, r3, #1
 8001830:	4613      	mov	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4413      	add	r3, r2
 8001836:	4403      	add	r3, r0
 8001838:	440b      	add	r3, r1
 800183a:	88db      	ldrh	r3, [r3, #6]
 800183c:	b29a      	uxth	r2, r3
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	b2d1      	uxtb	r1, r2
 8001842:	4a0e      	ldr	r2, [pc, #56]	@ (800187c <hid_press_key+0x228>)
 8001844:	54d1      	strb	r1, [r2, r3]
            i++; // Move to next keycodes slot
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	3301      	adds	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
            should_send_keyboard_report = 1;
 800184c:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <hid_press_key+0x224>)
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
      for (uint8_t i = start_slot; i < 6 && macro_idx < MAX_MACRO_LEN; macro_idx++) {
 8001852:	7c3b      	ldrb	r3, [r7, #16]
 8001854:	3301      	adds	r3, #1
 8001856:	743b      	strb	r3, [r7, #16]
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b05      	cmp	r3, #5
 800185c:	d805      	bhi.n	800186a <hid_press_key+0x216>
 800185e:	7c3b      	ldrb	r3, [r7, #16]
 8001860:	2b03      	cmp	r3, #3
 8001862:	d9b6      	bls.n	80017d2 <hid_press_key+0x17e>
          }
        }
      }
    }
    break;
 8001864:	e001      	b.n	800186a <hid_press_key+0x216>

  default:
    break;
 8001866:	bf00      	nop
 8001868:	e000      	b.n	800186c <hid_press_key+0x218>
    break;
 800186a:	bf00      	nop
  }
}
 800186c:	bf00      	nop
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000306 	.word	0x20000306
 8001878:	20000305 	.word	0x20000305
 800187c:	20000308 	.word	0x20000308
 8001880:	2000030e 	.word	0x2000030e
 8001884:	20000304 	.word	0x20000304

08001888 <hid_release_key>:

void hid_release_key(struct key *key, uint8_t layer) {
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4413      	add	r3, r2
 800189e:	440b      	add	r3, r1
 80018a0:	3305      	adds	r3, #5
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	f200 80a7 	bhi.w	80019fa <hid_release_key+0x172>
 80018ac:	a201      	add	r2, pc, #4	@ (adr r2, 80018b4 <hid_release_key+0x2c>)
 80018ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b2:	bf00      	nop
 80018b4:	080018f3 	.word	0x080018f3
 80018b8:	080018c5 	.word	0x080018c5
 80018bc:	08001935 	.word	0x08001935
 80018c0:	08001943 	.word	0x08001943
  case KEY_TYPE_MODIFIER:
    modifiers &= ~key->layers[layer].value[0];
 80018c4:	78fa      	ldrb	r2, [r7, #3]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	4413      	add	r3, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	88db      	ldrh	r3, [r3, #6]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	b25b      	sxtb	r3, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	b25a      	sxtb	r2, r3
 80018da:	4b4a      	ldr	r3, [pc, #296]	@ (8001a04 <hid_release_key+0x17c>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	4013      	ands	r3, r2
 80018e2:	b25b      	sxtb	r3, r3
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4b47      	ldr	r3, [pc, #284]	@ (8001a04 <hid_release_key+0x17c>)
 80018e8:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80018ea:	4b47      	ldr	r3, [pc, #284]	@ (8001a08 <hid_release_key+0x180>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	701a      	strb	r2, [r3, #0]
    break;
 80018f0:	e084      	b.n	80019fc <hid_release_key+0x174>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 80018f2:	2300      	movs	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	e019      	b.n	800192c <hid_release_key+0xa4>
      if (keycodes[i] == key->layers[layer].value[0]) {
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	4a44      	ldr	r2, [pc, #272]	@ (8001a0c <hid_release_key+0x184>)
 80018fc:	5cd3      	ldrb	r3, [r2, r3]
 80018fe:	4618      	mov	r0, r3
 8001900:	78fa      	ldrb	r2, [r7, #3]
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	4413      	add	r3, r2
 800190a:	440b      	add	r3, r1
 800190c:	88db      	ldrh	r3, [r3, #6]
 800190e:	b29b      	uxth	r3, r3
 8001910:	4298      	cmp	r0, r3
 8001912:	d108      	bne.n	8001926 <hid_release_key+0x9e>
        keycodes[i] = 0;
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	4a3d      	ldr	r2, [pc, #244]	@ (8001a0c <hid_release_key+0x184>)
 8001918:	2100      	movs	r1, #0
 800191a:	54d1      	strb	r1, [r2, r3]
        // if (is_screaming) {
        //   is_screaming = 0;
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 800191c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a08 <hid_release_key+0x180>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
        break;
 8001922:	bf00      	nop
      }
    }
    break;
 8001924:	e06a      	b.n	80019fc <hid_release_key+0x174>
    for (uint8_t i = 0; i < 6; i++) {
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	3301      	adds	r3, #1
 800192a:	73fb      	strb	r3, [r7, #15]
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	2b05      	cmp	r3, #5
 8001930:	d9e2      	bls.n	80018f8 <hid_release_key+0x70>
    break;
 8001932:	e063      	b.n	80019fc <hid_release_key+0x174>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = 0;
 8001934:	4b36      	ldr	r3, [pc, #216]	@ (8001a10 <hid_release_key+0x188>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 800193a:	4b36      	ldr	r3, [pc, #216]	@ (8001a14 <hid_release_key+0x18c>)
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
    break;
 8001940:	e05c      	b.n	80019fc <hid_release_key+0x174>

  case KEY_TYPE_MACRO:
    // Process macro values for release
    for (uint8_t macro_idx = 0; macro_idx < MAX_MACRO_LEN; macro_idx++) {
 8001942:	2300      	movs	r3, #0
 8001944:	73bb      	strb	r3, [r7, #14]
 8001946:	e054      	b.n	80019f2 <hid_release_key+0x16a>
      if (key->layers[layer].value[macro_idx] != ____) {
 8001948:	78fa      	ldrb	r2, [r7, #3]
 800194a:	7bbb      	ldrb	r3, [r7, #14]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	0058      	lsls	r0, r3, #1
 8001950:	4613      	mov	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4413      	add	r3, r2
 8001956:	4403      	add	r3, r0
 8001958:	440b      	add	r3, r1
 800195a:	88db      	ldrh	r3, [r3, #6]
 800195c:	b29b      	uxth	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d044      	beq.n	80019ec <hid_release_key+0x164>
        // Check if this is a modifier
        uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[macro_idx]);
 8001962:	78fa      	ldrb	r2, [r7, #3]
 8001964:	7bbb      	ldrb	r3, [r7, #14]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	0058      	lsls	r0, r3, #1
 800196a:	4613      	mov	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4413      	add	r3, r2
 8001970:	4403      	add	r3, r0
 8001972:	440b      	add	r3, r1
 8001974:	88db      	ldrh	r3, [r3, #6]
 8001976:	b29b      	uxth	r3, r3
 8001978:	4618      	mov	r0, r3
 800197a:	f000 f88b 	bl	8001a94 <get_bitmask_for_modifier>
 800197e:	4603      	mov	r3, r0
 8001980:	733b      	strb	r3, [r7, #12]
        if (bitmask) {
 8001982:	7b3b      	ldrb	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00f      	beq.n	80019a8 <hid_release_key+0x120>
          // Clear modifier bit
          modifiers &= ~bitmask;
 8001988:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800198c:	43db      	mvns	r3, r3
 800198e:	b25a      	sxtb	r2, r3
 8001990:	4b1c      	ldr	r3, [pc, #112]	@ (8001a04 <hid_release_key+0x17c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b25b      	sxtb	r3, r3
 8001996:	4013      	ands	r3, r2
 8001998:	b25b      	sxtb	r3, r3
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b19      	ldr	r3, [pc, #100]	@ (8001a04 <hid_release_key+0x17c>)
 800199e:	701a      	strb	r2, [r3, #0]
          should_send_keyboard_report = 1;
 80019a0:	4b19      	ldr	r3, [pc, #100]	@ (8001a08 <hid_release_key+0x180>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	e021      	b.n	80019ec <hid_release_key+0x164>
        } else {
          // Remove non-modifier key from keycodes array
          for (uint8_t i = 0; i < 6; i++) {
 80019a8:	2300      	movs	r3, #0
 80019aa:	737b      	strb	r3, [r7, #13]
 80019ac:	e01b      	b.n	80019e6 <hid_release_key+0x15e>
            if (keycodes[i] == key->layers[layer].value[macro_idx]) {
 80019ae:	7b7b      	ldrb	r3, [r7, #13]
 80019b0:	4a16      	ldr	r2, [pc, #88]	@ (8001a0c <hid_release_key+0x184>)
 80019b2:	5cd3      	ldrb	r3, [r2, r3]
 80019b4:	461c      	mov	r4, r3
 80019b6:	78fa      	ldrb	r2, [r7, #3]
 80019b8:	7bbb      	ldrb	r3, [r7, #14]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	0058      	lsls	r0, r3, #1
 80019be:	4613      	mov	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4413      	add	r3, r2
 80019c4:	4403      	add	r3, r0
 80019c6:	440b      	add	r3, r1
 80019c8:	88db      	ldrh	r3, [r3, #6]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	429c      	cmp	r4, r3
 80019ce:	d107      	bne.n	80019e0 <hid_release_key+0x158>
              keycodes[i] = 0;
 80019d0:	7b7b      	ldrb	r3, [r7, #13]
 80019d2:	4a0e      	ldr	r2, [pc, #56]	@ (8001a0c <hid_release_key+0x184>)
 80019d4:	2100      	movs	r1, #0
 80019d6:	54d1      	strb	r1, [r2, r3]
              should_send_keyboard_report = 1;
 80019d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <hid_release_key+0x180>)
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]
              break;
 80019de:	e005      	b.n	80019ec <hid_release_key+0x164>
          for (uint8_t i = 0; i < 6; i++) {
 80019e0:	7b7b      	ldrb	r3, [r7, #13]
 80019e2:	3301      	adds	r3, #1
 80019e4:	737b      	strb	r3, [r7, #13]
 80019e6:	7b7b      	ldrb	r3, [r7, #13]
 80019e8:	2b05      	cmp	r3, #5
 80019ea:	d9e0      	bls.n	80019ae <hid_release_key+0x126>
    for (uint8_t macro_idx = 0; macro_idx < MAX_MACRO_LEN; macro_idx++) {
 80019ec:	7bbb      	ldrb	r3, [r7, #14]
 80019ee:	3301      	adds	r3, #1
 80019f0:	73bb      	strb	r3, [r7, #14]
 80019f2:	7bbb      	ldrb	r3, [r7, #14]
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d9a7      	bls.n	8001948 <hid_release_key+0xc0>
            }
          }
        }
      }
    }
    break;
 80019f8:	e000      	b.n	80019fc <hid_release_key+0x174>

  default:
    break;
 80019fa:	bf00      	nop
  }
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd90      	pop	{r4, r7, pc}
 8001a04:	20000306 	.word	0x20000306
 8001a08:	20000305 	.word	0x20000305
 8001a0c:	20000308 	.word	0x20000308
 8001a10:	2000030e 	.word	0x2000030e
 8001a14:	20000304 	.word	0x20000304

08001a18 <tud_hid_set_protocol_cb>:
// Invoked when received SET_PROTOCOL request
// protocol is either HID_PROTOCOL_BOOT (0) or HID_PROTOCOL_REPORT (1)

/// CALLBACKS

void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	460a      	mov	r2, r1
 8001a22:	71fb      	strb	r3, [r7, #7]
 8001a24:	4613      	mov	r3, r2
 8001a26:	71bb      	strb	r3, [r7, #6]
  (void)instance;
  (void)protocol;
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <tud_hid_report_complete_cb>:

void tud_hid_report_complete_cb(uint8_t instance, uint8_t const *report, uint16_t len) {
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	6039      	str	r1, [r7, #0]
 8001a3e:	71fb      	strb	r3, [r7, #7]
 8001a40:	4613      	mov	r3, r2
 8001a42:	80bb      	strh	r3, [r7, #4]
  (void)instance;
  (void)len;
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <tud_hid_get_report_cb>:
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t *buffer, uint16_t reqlen) {
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	4603      	mov	r3, r0
 8001a5a:	71fb      	strb	r3, [r7, #7]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	71bb      	strb	r3, [r7, #6]
 8001a60:	4613      	mov	r3, r2
 8001a62:	717b      	strb	r3, [r7, #5]
  (void)instance;
  (void)report_type;
  (void)buffer;
  (void)reqlen;

  return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const *buffer, uint16_t bufsize) {
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	71bb      	strb	r3, [r7, #6]
 8001a82:	4613      	mov	r3, r2
 8001a84:	717b      	strb	r3, [r7, #5]
  (void)instance;
  (void)report_type;
  (void)buffer;
  (void)bufsize;
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <get_bitmask_for_modifier>:

static uint8_t key_triggered = 0;

struct key *current_pressed_key = NULL;

uint8_t get_bitmask_for_modifier(uint8_t keycode) {
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  switch (keycode) {
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	3be0      	subs	r3, #224	@ 0xe0
 8001aa2:	2b07      	cmp	r3, #7
 8001aa4:	d822      	bhi.n	8001aec <get_bitmask_for_modifier+0x58>
 8001aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8001aac <get_bitmask_for_modifier+0x18>)
 8001aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aac:	08001acd 	.word	0x08001acd
 8001ab0:	08001ad1 	.word	0x08001ad1
 8001ab4:	08001ad5 	.word	0x08001ad5
 8001ab8:	08001ad9 	.word	0x08001ad9
 8001abc:	08001add 	.word	0x08001add
 8001ac0:	08001ae1 	.word	0x08001ae1
 8001ac4:	08001ae5 	.word	0x08001ae5
 8001ac8:	08001ae9 	.word	0x08001ae9
  case HID_KEY_CONTROL_LEFT:
    return 0b00000001;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e00e      	b.n	8001aee <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_LEFT:
    return 0b00000010;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e00c      	b.n	8001aee <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_LEFT:
    return 0b00000100;
 8001ad4:	2304      	movs	r3, #4
 8001ad6:	e00a      	b.n	8001aee <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_LEFT:
    return 0b00001000;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	e008      	b.n	8001aee <get_bitmask_for_modifier+0x5a>
  case HID_KEY_CONTROL_RIGHT:
    return 0b00010000;
 8001adc:	2310      	movs	r3, #16
 8001ade:	e006      	b.n	8001aee <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_RIGHT:
    return 0b00100000;
 8001ae0:	2320      	movs	r3, #32
 8001ae2:	e004      	b.n	8001aee <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_RIGHT:
    return 0b01000000;
 8001ae4:	2340      	movs	r3, #64	@ 0x40
 8001ae6:	e002      	b.n	8001aee <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_RIGHT:
    return 0b10000000;
 8001ae8:	2380      	movs	r3, #128	@ 0x80
 8001aea:	e000      	b.n	8001aee <get_bitmask_for_modifier+0x5a>
  default:
    return 0b00000000;
 8001aec:	2300      	movs	r3, #0
  }
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop

08001afc <get_usage_consumer_control>:

uint16_t get_usage_consumer_control(uint16_t value) {
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	80fb      	strh	r3, [r7, #6]
  if (value > 0xFF) {
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	2bff      	cmp	r3, #255	@ 0xff
 8001b0a:	d904      	bls.n	8001b16 <get_usage_consumer_control+0x1a>
    return value & 0b0111111111111111;
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	e000      	b.n	8001b18 <get_usage_consumer_control+0x1c>
  } else {
    return 0;
 8001b16:	2300      	movs	r3, #0
  }
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <init_key>:

void init_key(uint8_t adc_channel, uint8_t amux_channel, uint8_t row, uint8_t column) {
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4623      	mov	r3, r4
 8001b34:	71fb      	strb	r3, [r7, #7]
 8001b36:	4603      	mov	r3, r0
 8001b38:	71bb      	strb	r3, [r7, #6]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	717b      	strb	r3, [r7, #5]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	713b      	strb	r3, [r7, #4]

  struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8001b42:	79f9      	ldrb	r1, [r7, #7]
 8001b44:	79bb      	ldrb	r3, [r7, #6]
 8001b46:	461a      	mov	r2, r3
 8001b48:	0112      	lsls	r2, r2, #4
 8001b4a:	441a      	add	r2, r3
 8001b4c:	0093      	lsls	r3, r2, #2
 8001b4e:	461a      	mov	r2, r3
 8001b50:	460b      	mov	r3, r1
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	440b      	add	r3, r1
 8001b56:	019b      	lsls	r3, r3, #6
 8001b58:	4413      	add	r3, r2
 8001b5a:	4a8b      	ldr	r2, [pc, #556]	@ (8001d88 <init_key+0x264>)
 8001b5c:	4413      	add	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]

  key->is_enabled = 1;
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
  key->is_idle = 0;
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	711a      	strb	r2, [r3, #4]
  key->row = row;
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	797a      	ldrb	r2, [r7, #5]
 8001b70:	705a      	strb	r2, [r3, #1]
  key->column = column;
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	793a      	ldrb	r2, [r7, #4]
 8001b76:	709a      	strb	r2, [r3, #2]

  key->calibration.cycles_count = 0;
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  key->calibration.idle_value = IDLE_VALUE_APPROX;
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f042 0208 	orr.w	r2, r2, #8
 8001b8e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 8001b92:	2200      	movs	r2, #0
 8001b94:	f042 0207 	orr.w	r2, r2, #7
 8001b98:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  key->calibration.max_distance = MAX_DISTANCE_APPROX;
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f062 020b 	orn	r2, r2, #11
 8001ba4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f042 0201 	orr.w	r2, r2, #1
 8001bae:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  key->actuation.status = STATUS_RESET;
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  key->actuation.trigger_offset = keyboard_user_config.trigger_offset;
 8001bba:	4b74      	ldr	r3, [pc, #464]	@ (8001d8c <init_key+0x268>)
 8001bbc:	785a      	ldrb	r2, [r3, #1]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  key->actuation.reset_offset = keyboard_user_config.trigger_offset - keyboard_user_config.reset_threshold;
 8001bc4:	4b71      	ldr	r3, [pc, #452]	@ (8001d8c <init_key+0x268>)
 8001bc6:	785a      	ldrb	r2, [r3, #1]
 8001bc8:	4b70      	ldr	r3, [pc, #448]	@ (8001d8c <init_key+0x268>)
 8001bca:	789b      	ldrb	r3, [r3, #2]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  key->actuation.rapid_trigger_offset = keyboard_user_config.rapid_trigger_offset;
 8001bd6:	4b6d      	ldr	r3, [pc, #436]	@ (8001d8c <init_key+0x268>)
 8001bd8:	78da      	ldrb	r2, [r3, #3]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8001be0:	2300      	movs	r3, #0
 8001be2:	75fb      	strb	r3, [r7, #23]
 8001be4:	e0c6      	b.n	8001d74 <init_key+0x250>
    if (keyboard_user_config.keymaps[i][row][column][0] != ____) {
 8001be6:	7df9      	ldrb	r1, [r7, #23]
 8001be8:	797a      	ldrb	r2, [r7, #5]
 8001bea:	793b      	ldrb	r3, [r7, #4]
 8001bec:	4867      	ldr	r0, [pc, #412]	@ (8001d8c <init_key+0x268>)
 8001bee:	0089      	lsls	r1, r1, #2
 8001bf0:	440a      	add	r2, r1
 8001bf2:	0092      	lsls	r2, r2, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80b6 	beq.w	8001d6e <init_key+0x24a>
      // Check if this is a macro (multiple non-zero elements)
      uint8_t macro_count = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	75bb      	strb	r3, [r7, #22]
      for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001c06:	2300      	movs	r3, #0
 8001c08:	757b      	strb	r3, [r7, #21]
 8001c0a:	e015      	b.n	8001c38 <init_key+0x114>
        if (keyboard_user_config.keymaps[i][row][column][j] != ____) {
 8001c0c:	7df8      	ldrb	r0, [r7, #23]
 8001c0e:	7979      	ldrb	r1, [r7, #5]
 8001c10:	793a      	ldrb	r2, [r7, #4]
 8001c12:	7d7b      	ldrb	r3, [r7, #21]
 8001c14:	4c5d      	ldr	r4, [pc, #372]	@ (8001d8c <init_key+0x268>)
 8001c16:	0080      	lsls	r0, r0, #2
 8001c18:	4401      	add	r1, r0
 8001c1a:	0089      	lsls	r1, r1, #2
 8001c1c:	440a      	add	r2, r1
 8001c1e:	0092      	lsls	r2, r2, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	3304      	adds	r3, #4
 8001c24:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <init_key+0x10e>
          macro_count++;
 8001c2c:	7dbb      	ldrb	r3, [r7, #22]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	75bb      	strb	r3, [r7, #22]
      for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001c32:	7d7b      	ldrb	r3, [r7, #21]
 8001c34:	3301      	adds	r3, #1
 8001c36:	757b      	strb	r3, [r7, #21]
 8001c38:	7d7b      	ldrb	r3, [r7, #21]
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d9e6      	bls.n	8001c0c <init_key+0xe8>
        }
      }

      if (macro_count > 1) {
 8001c3e:	7dbb      	ldrb	r3, [r7, #22]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d92b      	bls.n	8001c9c <init_key+0x178>
        // This is a macro - copy all values
        key->layers[i].type = KEY_TYPE_MACRO;
 8001c44:	7dfa      	ldrb	r2, [r7, #23]
 8001c46:	6939      	ldr	r1, [r7, #16]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	440b      	add	r3, r1
 8001c50:	3305      	adds	r3, #5
 8001c52:	2204      	movs	r2, #4
 8001c54:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001c56:	2300      	movs	r3, #0
 8001c58:	753b      	strb	r3, [r7, #20]
 8001c5a:	e01b      	b.n	8001c94 <init_key+0x170>
          key->layers[i].value[j] = keyboard_user_config.keymaps[i][row][column][j];
 8001c5c:	7dfd      	ldrb	r5, [r7, #23]
 8001c5e:	797c      	ldrb	r4, [r7, #5]
 8001c60:	7938      	ldrb	r0, [r7, #4]
 8001c62:	7d39      	ldrb	r1, [r7, #20]
 8001c64:	7dfa      	ldrb	r2, [r7, #23]
 8001c66:	7d3b      	ldrb	r3, [r7, #20]
 8001c68:	4e48      	ldr	r6, [pc, #288]	@ (8001d8c <init_key+0x268>)
 8001c6a:	00ad      	lsls	r5, r5, #2
 8001c6c:	442c      	add	r4, r5
 8001c6e:	00a4      	lsls	r4, r4, #2
 8001c70:	4420      	add	r0, r4
 8001c72:	0080      	lsls	r0, r0, #2
 8001c74:	4401      	add	r1, r0
 8001c76:	3104      	adds	r1, #4
 8001c78:	f836 4011 	ldrh.w	r4, [r6, r1, lsl #1]
 8001c7c:	6939      	ldr	r1, [r7, #16]
 8001c7e:	0058      	lsls	r0, r3, #1
 8001c80:	4613      	mov	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	4403      	add	r3, r0
 8001c88:	440b      	add	r3, r1
 8001c8a:	4622      	mov	r2, r4
 8001c8c:	80da      	strh	r2, [r3, #6]
        for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001c8e:	7d3b      	ldrb	r3, [r7, #20]
 8001c90:	3301      	adds	r3, #1
 8001c92:	753b      	strb	r3, [r7, #20]
 8001c94:	7d3b      	ldrb	r3, [r7, #20]
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d9e0      	bls.n	8001c5c <init_key+0x138>
 8001c9a:	e068      	b.n	8001d6e <init_key+0x24a>
        }
      } else {
        // Single key - check type
        uint16_t usage_consumer_control = get_usage_consumer_control(
 8001c9c:	7df9      	ldrb	r1, [r7, #23]
 8001c9e:	797a      	ldrb	r2, [r7, #5]
 8001ca0:	793b      	ldrb	r3, [r7, #4]
 8001ca2:	483a      	ldr	r0, [pc, #232]	@ (8001d8c <init_key+0x268>)
 8001ca4:	0089      	lsls	r1, r1, #2
 8001ca6:	440a      	add	r2, r1
 8001ca8:	0092      	lsls	r2, r2, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	3301      	adds	r3, #1
 8001cae:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ff22 	bl	8001afc <get_usage_consumer_control>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	81fb      	strh	r3, [r7, #14]
            keyboard_user_config.keymaps[i][row][column][0]);
        if (usage_consumer_control) {
 8001cbc:	89fb      	ldrh	r3, [r7, #14]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d011      	beq.n	8001ce6 <init_key+0x1c2>
          key->layers[i].type = KEY_TYPE_CONSUMER_CONTROL;
 8001cc2:	7dfa      	ldrb	r2, [r7, #23]
 8001cc4:	6939      	ldr	r1, [r7, #16]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4413      	add	r3, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	3305      	adds	r3, #5
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	701a      	strb	r2, [r3, #0]
          key->layers[i].value[0] = usage_consumer_control;
 8001cd4:	7dfa      	ldrb	r2, [r7, #23]
 8001cd6:	6939      	ldr	r1, [r7, #16]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	440b      	add	r3, r1
 8001ce0:	89fa      	ldrh	r2, [r7, #14]
 8001ce2:	80da      	strh	r2, [r3, #6]
 8001ce4:	e043      	b.n	8001d6e <init_key+0x24a>
        } else {
          uint8_t bitmask = get_bitmask_for_modifier(
              keyboard_user_config.keymaps[i][row][column][0]);
 8001ce6:	7df9      	ldrb	r1, [r7, #23]
 8001ce8:	797a      	ldrb	r2, [r7, #5]
 8001cea:	793b      	ldrb	r3, [r7, #4]
 8001cec:	4827      	ldr	r0, [pc, #156]	@ (8001d8c <init_key+0x268>)
 8001cee:	0089      	lsls	r1, r1, #2
 8001cf0:	440a      	add	r2, r1
 8001cf2:	0092      	lsls	r2, r2, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
          uint8_t bitmask = get_bitmask_for_modifier(
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fec8 	bl	8001a94 <get_bitmask_for_modifier>
 8001d04:	4603      	mov	r3, r0
 8001d06:	737b      	strb	r3, [r7, #13]
          if (bitmask) {
 8001d08:	7b7b      	ldrb	r3, [r7, #13]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d013      	beq.n	8001d36 <init_key+0x212>
            key->layers[i].type = KEY_TYPE_MODIFIER;
 8001d0e:	7dfa      	ldrb	r2, [r7, #23]
 8001d10:	6939      	ldr	r1, [r7, #16]
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4413      	add	r3, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	3305      	adds	r3, #5
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	701a      	strb	r2, [r3, #0]
            key->layers[i].value[0] = bitmask;
 8001d20:	7dfa      	ldrb	r2, [r7, #23]
 8001d22:	7b7b      	ldrb	r3, [r7, #13]
 8001d24:	b298      	uxth	r0, r3
 8001d26:	6939      	ldr	r1, [r7, #16]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	440b      	add	r3, r1
 8001d30:	4602      	mov	r2, r0
 8001d32:	80da      	strh	r2, [r3, #6]
 8001d34:	e01b      	b.n	8001d6e <init_key+0x24a>
          } else {
            key->layers[i].type = KEY_TYPE_NORMAL;
 8001d36:	7dfa      	ldrb	r2, [r7, #23]
 8001d38:	6939      	ldr	r1, [r7, #16]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4413      	add	r3, r2
 8001d40:	440b      	add	r3, r1
 8001d42:	3305      	adds	r3, #5
 8001d44:	2201      	movs	r2, #1
 8001d46:	701a      	strb	r2, [r3, #0]
            key->layers[i].value[0] =
                keyboard_user_config.keymaps[i][row][column][0];
 8001d48:	7df8      	ldrb	r0, [r7, #23]
 8001d4a:	7979      	ldrb	r1, [r7, #5]
 8001d4c:	793b      	ldrb	r3, [r7, #4]
            key->layers[i].value[0] =
 8001d4e:	7dfa      	ldrb	r2, [r7, #23]
                keyboard_user_config.keymaps[i][row][column][0];
 8001d50:	4c0e      	ldr	r4, [pc, #56]	@ (8001d8c <init_key+0x268>)
 8001d52:	0080      	lsls	r0, r0, #2
 8001d54:	4401      	add	r1, r0
 8001d56:	0089      	lsls	r1, r1, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
            key->layers[i].value[0] =
 8001d60:	6939      	ldr	r1, [r7, #16]
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4413      	add	r3, r2
 8001d68:	440b      	add	r3, r1
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	80da      	strh	r2, [r3, #6]
  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
 8001d70:	3301      	adds	r3, #1
 8001d72:	75fb      	strb	r3, [r7, #23]
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	f67f af35 	bls.w	8001be6 <init_key+0xc2>
          }
        }
      }
    }
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	371c      	adds	r7, #28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000310 	.word	0x20000310
 8001d8c:	20000000 	.word	0x20000000

08001d90 <update_key_state>:

uint8_t update_key_state(struct key *key) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  struct state state;

  // Get a reading
  state.value = keyboard_user_config.reverse_magnet_pole ? 4095 - keyboard_read_adc() : keyboard_read_adc();
 8001d98:	4bab      	ldr	r3, [pc, #684]	@ (8002048 <update_key_state+0x2b8>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d007      	beq.n	8001db0 <update_key_state+0x20>
 8001da0:	f001 fa3a 	bl	8003218 <keyboard_read_adc>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8001daa:	330f      	adds	r3, #15
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	e002      	b.n	8001db6 <update_key_state+0x26>
 8001db0:	f001 fa32 	bl	8003218 <keyboard_read_adc>
 8001db4:	4603      	mov	r3, r0
 8001db6:	813b      	strh	r3, [r7, #8]

  if (key->calibration.cycles_count < CALIBRATION_CYCLES) {
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f8b3 3029 	ldrh.w	r3, [r3, #41]	@ 0x29
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	2b13      	cmp	r3, #19
 8001dc2:	d82f      	bhi.n	8001e24 <update_key_state+0x94>
    // Calibrate idle value
    float delta = 0.6;
 8001dc4:	4ba1      	ldr	r3, [pc, #644]	@ (800204c <update_key_state+0x2bc>)
 8001dc6:	617b      	str	r3, [r7, #20]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8001dc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001dcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dd4:	893b      	ldrh	r3, [r7, #8]
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	ee07 3a90 	vmov	s15, r3
 8001dee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001df2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e02:	ee17 3a90 	vmov	r3, s15
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f8a3 202b 	strh.w	r2, [r3, #43]	@ 0x2b
    key->calibration.cycles_count++;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f8b3 3029 	ldrh.w	r3, [r3, #41]	@ 0x29
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	3301      	adds	r3, #1
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f8a3 2029 	strh.w	r2, [r3, #41]	@ 0x29

    return 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e10c      	b.n	800203e <update_key_state+0x2ae>
  }

  // Calibrate idle value
  if (state.value > key->calibration.idle_value) {
 8001e24:	893a      	ldrh	r2, [r7, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d929      	bls.n	8001e86 <update_key_state+0xf6>
    // opti possible sur float
    float delta = 0.8;
 8001e32:	4b87      	ldr	r3, [pc, #540]	@ (8002050 <update_key_state+0x2c0>)
 8001e34:	61fb      	str	r3, [r7, #28]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8001e36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e3a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e42:	893b      	ldrh	r3, [r7, #8]
 8001e44:	ee07 3a90 	vmov	s15, r3
 8001e48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	ee07 3a90 	vmov	s15, r3
 8001e5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e60:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e70:	ee17 3a90 	vmov	r3, s15
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f8a3 202b 	strh.w	r2, [r3, #43]	@ 0x2b
    state.value = key->calibration.idle_value;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	813b      	strh	r3, [r7, #8]
  }

  // Do nothing if key is idle
  if (key->state.distance == 0 && state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f8b3 3031 	ldrh.w	r3, [r3, #49]	@ 0x31
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d117      	bne.n	8001ec2 <update_key_state+0x132>
 8001e92:	893b      	ldrh	r3, [r7, #8]
 8001e94:	461a      	mov	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	3b0a      	subs	r3, #10
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	db0e      	blt.n	8001ec2 <update_key_state+0x132>
    if (key->idle_counter >= IDLE_CYCLES_UNTIL_SLEEP) {
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	78db      	ldrb	r3, [r3, #3]
 8001ea8:	2b0e      	cmp	r3, #14
 8001eaa:	d904      	bls.n	8001eb6 <update_key_state+0x126>
      key->is_idle = 1;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	711a      	strb	r2, [r3, #4]
      return 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e0c3      	b.n	800203e <update_key_state+0x2ae>
    }
    key->idle_counter++;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	78db      	ldrb	r3, [r3, #3]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	70da      	strb	r2, [r3, #3]
  }

  // Get distance from top
  if (state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8001ec2:	893b      	ldrh	r3, [r7, #8]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	3b0a      	subs	r3, #10
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	db06      	blt.n	8001ee2 <update_key_state+0x152>
    state.distance = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	817b      	strh	r3, [r7, #10]
    key->actuation.direction_changed_point = 0;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8001ee0:	e00f      	b.n	8001f02 <update_key_state+0x172>
  } else {
    state.distance = key->calibration.idle_value - IDLE_VALUE_OFFSET - state.value;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f8b3 302b 	ldrh.w	r3, [r3, #43]	@ 0x2b
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	893b      	ldrh	r3, [r7, #8]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	3b0a      	subs	r3, #10
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	817b      	strh	r3, [r7, #10]
    key->is_idle = 0;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	711a      	strb	r2, [r3, #4]
    key->idle_counter = 0;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	70da      	strb	r2, [r3, #3]
  }

  // Calibrate max distance value
  if (state.distance > key->calibration.max_distance) {
 8001f02:	897a      	ldrh	r2, [r7, #10]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d903      	bls.n	8001f18 <update_key_state+0x188>
    key->calibration.max_distance = state.distance;
 8001f10:	897a      	ldrh	r2, [r7, #10]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f8a3 202d 	strh.w	r2, [r3, #45]	@ 0x2d
  }

  // Limit max distance
  if (state.distance >= key->calibration.max_distance - MAX_DISTANCE_OFFSET) {
 8001f18:	897b      	ldrh	r3, [r7, #10]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b3c      	subs	r3, #60	@ 0x3c
 8001f26:	429a      	cmp	r2, r3
 8001f28:	db04      	blt.n	8001f34 <update_key_state+0x1a4>
    state.distance = key->calibration.max_distance;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	817b      	strh	r3, [r7, #10]
  }

  // Map distance in percentages
  state.distance_8bits = (state.distance * 0xff) / key->calibration.max_distance;
 8001f34:	897b      	ldrh	r3, [r7, #10]
 8001f36:	461a      	mov	r2, r3
 8001f38:	4613      	mov	r3, r2
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	f8b2 202d 	ldrh.w	r2, [r2, #45]	@ 0x2d
 8001f44:	b292      	uxth	r2, r2
 8001f46:	fb93 f3f2 	sdiv	r3, r3, r2
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	733b      	strb	r3, [r7, #12]

  float delta = 0.8;
 8001f4e:	4b40      	ldr	r3, [pc, #256]	@ (8002050 <update_key_state+0x2c0>)
 8001f50:	61bb      	str	r3, [r7, #24]
  state.filtered_distance = (1 - delta) * state.distance_8bits + delta * key->state.filtered_distance;
 8001f52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f56:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f5e:	7b3b      	ldrb	r3, [r7, #12]
 8001f60:	ee07 3a90 	vmov	s15, r3
 8001f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f70:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f74:	ee06 3a90 	vmov	s13, r3
 8001f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f80:	ee17 3a90 	vmov	r3, s15
 8001f84:	f8c7 300d 	str.w	r3, [r7, #13]
  state.filtered_distance_8bits = state.filtered_distance;
 8001f88:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8001f8c:	ee07 3a90 	vmov	s15, r3
 8001f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f94:	edc7 7a00 	vstr	s15, [r7]
 8001f98:	783b      	ldrb	r3, [r7, #0]
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	74bb      	strb	r3, [r7, #18]

  // Update velocity
  state.velocity = state.filtered_distance_8bits - key->state.filtered_distance_8bits;
 8001f9e:	7cba      	ldrb	r2, [r7, #18]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	b25b      	sxtb	r3, r3
 8001fac:	747b      	strb	r3, [r7, #17]

  // Update direction
  if (key->state.velocity > 0 && state.velocity > 0 && key->actuation.direction != GOING_DOWN) {
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	dd18      	ble.n	8001fea <update_key_state+0x25a>
 8001fb8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	dd14      	ble.n	8001fea <update_key_state+0x25a>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d00f      	beq.n	8001fea <update_key_state+0x25a>
    key->actuation.direction = GOING_DOWN;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    if (key->actuation.direction_changed_point != 0) {
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d023      	beq.n	8002024 <update_key_state+0x294>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    if (key->actuation.direction_changed_point != 0) {
 8001fe8:	e01c      	b.n	8002024 <update_key_state+0x294>
    }
  } else if (key->state.velocity < 0 && state.velocity < 0 && key->actuation.direction != GOING_UP) {
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	da17      	bge.n	8002024 <update_key_state+0x294>
 8001ff4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	da13      	bge.n	8002024 <update_key_state+0x294>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00e      	beq.n	8002024 <update_key_state+0x294>
    key->actuation.direction = GOING_UP;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    if (key->actuation.direction_changed_point != 255) {
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8002014:	2bff      	cmp	r3, #255	@ 0xff
 8002016:	d005      	beq.n	8002024 <update_key_state+0x294>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    }
  }

  key->state = state;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 800202a:	f107 0308 	add.w	r3, r7, #8
 800202e:	cb03      	ldmia	r3!, {r0, r1}
 8002030:	6010      	str	r0, [r2, #0]
 8002032:	6051      	str	r1, [r2, #4]
 8002034:	8819      	ldrh	r1, [r3, #0]
 8002036:	789b      	ldrb	r3, [r3, #2]
 8002038:	8111      	strh	r1, [r2, #8]
 800203a:	7293      	strb	r3, [r2, #10]
  return 1;
 800203c:	2301      	movs	r3, #1
}
 800203e:	4618      	mov	r0, r3
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000000 	.word	0x20000000
 800204c:	3f19999a 	.word	0x3f19999a
 8002050:	3f4ccccd 	.word	0x3f4ccccd

08002054 <update_key_actuation>:

void update_key_actuation(struct key *key, uint8_t layer) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	70fb      	strb	r3, [r7, #3]
   *
   */

  // if rapid trigger enable, move trigger and reset offsets according to the distance taht began the trigger

  uint32_t now = keyboard_get_time();
 8002060:	f001 f8f0 	bl	8003244 <keyboard_get_time>
 8002064:	6178      	str	r0, [r7, #20]
  uint8_t is_after_trigger_offset = key->state.distance_8bits > key->actuation.trigger_offset;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002072:	429a      	cmp	r2, r3
 8002074:	bf8c      	ite	hi
 8002076:	2301      	movhi	r3, #1
 8002078:	2300      	movls	r3, #0
 800207a:	b2db      	uxtb	r3, r3
 800207c:	74fb      	strb	r3, [r7, #19]
  uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800208a:	429a      	cmp	r2, r3
 800208c:	bf34      	ite	cc
 800208e:	2301      	movcc	r3, #1
 8002090:	2300      	movcs	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	74bb      	strb	r3, [r7, #18]
  uint8_t has_rapid_trigger = key->actuation.rapid_trigger_offset != 0;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf14      	ite	ne
 80020a0:	2301      	movne	r3, #1
 80020a2:	2300      	moveq	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	747b      	strb	r3, [r7, #17]
  uint8_t is_after_rapid_trigger_offset = key->state.distance_8bits > key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset + keyboard_user_config.reset_threshold;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80020ae:	4619      	mov	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80020b6:	461a      	mov	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	4a5d      	ldr	r2, [pc, #372]	@ (8002238 <update_key_actuation+0x1e4>)
 80020c2:	7892      	ldrb	r2, [r2, #2]
 80020c4:	4413      	add	r3, r2
 80020c6:	4299      	cmp	r1, r3
 80020c8:	bfcc      	ite	gt
 80020ca:	2301      	movgt	r3, #1
 80020cc:	2300      	movle	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	743b      	strb	r3, [r7, #16]
  uint8_t is_before_rapid_reset_offset = key->state.distance_8bits < key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80020d8:	461a      	mov	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80020e0:	4619      	mov	r1, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80020e8:	1acb      	subs	r3, r1, r3
 80020ea:	429a      	cmp	r2, r3
 80020ec:	bfb4      	ite	lt
 80020ee:	2301      	movlt	r3, #1
 80020f0:	2300      	movge	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	73fb      	strb	r3, [r7, #15]

  switch (key->actuation.status) {
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020fc:	3b01      	subs	r3, #1
 80020fe:	2b03      	cmp	r3, #3
 8002100:	f200 808f 	bhi.w	8002222 <update_key_actuation+0x1ce>
 8002104:	a201      	add	r2, pc, #4	@ (adr r2, 800210c <update_key_actuation+0xb8>)
 8002106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210a:	bf00      	nop
 800210c:	080021cd 	.word	0x080021cd
 8002110:	080021df 	.word	0x080021df
 8002114:	0800211d 	.word	0x0800211d
 8002118:	0800215b 	.word	0x0800215b

  case STATUS_RESET:
    // if reset, can be triggered or tap
    if (is_after_trigger_offset) {
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8081 	beq.w	8002226 <update_key_actuation+0x1d2>
      if (key->layers[_TAP_LAYER].value[0]) {
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800212a:	b29b      	uxth	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d004      	beq.n	800213a <update_key_actuation+0xe6>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002138:	e00b      	b.n	8002152 <update_key_actuation+0xfe>
        // key_triggered = 1;
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2202      	movs	r2, #2
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        key_triggered = 1;
 8002142:	4b3e      	ldr	r3, [pc, #248]	@ (800223c <update_key_actuation+0x1e8>)
 8002144:	2201      	movs	r2, #1
 8002146:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, layer);
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	4619      	mov	r1, r3
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff fa81 	bl	8001654 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    break;
 8002158:	e065      	b.n	8002226 <update_key_actuation+0x1d2>

  case STATUS_RAPID_TRIGGER_RESET:
    if (!has_rapid_trigger) {
 800215a:	7c7b      	ldrb	r3, [r7, #17]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d104      	bne.n	800216a <update_key_actuation+0x116>
      key->actuation.status = STATUS_RESET;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2203      	movs	r2, #3
 8002164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      break;
 8002168:	e062      	b.n	8002230 <update_key_actuation+0x1dc>
    }
    // if reset, can be triggered or tap
    if (is_after_trigger_offset && key->actuation.direction == GOING_DOWN && is_after_rapid_trigger_offset) {
 800216a:	7cfb      	ldrb	r3, [r7, #19]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d025      	beq.n	80021bc <update_key_actuation+0x168>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002176:	2b01      	cmp	r3, #1
 8002178:	d120      	bne.n	80021bc <update_key_actuation+0x168>
 800217a:	7c3b      	ldrb	r3, [r7, #16]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d01d      	beq.n	80021bc <update_key_actuation+0x168>
      if (key->layers[_TAP_LAYER].value[0]) {
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <update_key_actuation+0x148>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        key_triggered = 1;
 8002194:	4b29      	ldr	r3, [pc, #164]	@ (800223c <update_key_actuation+0x1e8>)
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
 800219a:	e00b      	b.n	80021b4 <update_key_actuation+0x160>
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        key_triggered = 1;
 80021a4:	4b25      	ldr	r3, [pc, #148]	@ (800223c <update_key_actuation+0x1e8>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, layer);
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	4619      	mov	r1, r3
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff fa50 	bl	8001654 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	641a      	str	r2, [r3, #64]	@ 0x40
    } else if (is_before_reset_offset) {
      key->actuation.status = STATUS_RESET;
    }
    break;
 80021ba:	e036      	b.n	800222a <update_key_actuation+0x1d6>
    } else if (is_before_reset_offset) {
 80021bc:	7cbb      	ldrb	r3, [r7, #18]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d033      	beq.n	800222a <update_key_actuation+0x1d6>
      key->actuation.status = STATUS_RESET;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2203      	movs	r2, #3
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    break;
 80021ca:	e02e      	b.n	800222a <update_key_actuation+0x1d6>

  case STATUS_TAP:
    // if tap, can be reset
    key->actuation.status = STATUS_RESET;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2203      	movs	r2, #3
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    hid_release_key(key, _TAP_LAYER);
 80021d4:	2101      	movs	r1, #1
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff fb56 	bl	8001888 <hid_release_key>
    break;
 80021dc:	e028      	b.n	8002230 <update_key_actuation+0x1dc>

  case STATUS_TRIGGERED:
    // if triggered, can be reset
    if (is_before_reset_offset) {
 80021de:	7cbb      	ldrb	r3, [r7, #18]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d009      	beq.n	80021f8 <update_key_actuation+0x1a4>
      key->actuation.status = STATUS_RESET;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2203      	movs	r2, #3
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      hid_release_key(key, layer);
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	4619      	mov	r1, r3
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff fb49 	bl	8001888 <hid_release_key>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
      hid_release_key(key, layer);
    }
    break;
 80021f6:	e01a      	b.n	800222e <update_key_actuation+0x1da>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
 80021f8:	7c7b      	ldrb	r3, [r7, #17]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d017      	beq.n	800222e <update_key_actuation+0x1da>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002204:	2b00      	cmp	r3, #0
 8002206:	d112      	bne.n	800222e <update_key_actuation+0x1da>
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00f      	beq.n	800222e <update_key_actuation+0x1da>
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2204      	movs	r2, #4
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      hid_release_key(key, layer);
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	4619      	mov	r1, r3
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff fb34 	bl	8001888 <hid_release_key>
    break;
 8002220:	e005      	b.n	800222e <update_key_actuation+0x1da>

  default:
    break;
 8002222:	bf00      	nop
 8002224:	e004      	b.n	8002230 <update_key_actuation+0x1dc>
    break;
 8002226:	bf00      	nop
 8002228:	e002      	b.n	8002230 <update_key_actuation+0x1dc>
    break;
 800222a:	bf00      	nop
 800222c:	e000      	b.n	8002230 <update_key_actuation+0x1dc>
    break;
 800222e:	bf00      	nop
  }
}
 8002230:	bf00      	nop
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000000 	.word	0x20000000
 800223c:	20000754 	.word	0x20000754

08002240 <update_key>:

void update_key(struct key *key) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if (!update_key_state(key)) {
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff fda1 	bl	8001d90 <update_key_state>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d007      	beq.n	8002264 <update_key+0x24>
    return;
  }

  extern int current_layer;
  update_key_actuation(key, current_layer);
 8002254:	4b05      	ldr	r3, [pc, #20]	@ (800226c <update_key+0x2c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	4619      	mov	r1, r3
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff fef9 	bl	8002054 <update_key_actuation>
 8002262:	e000      	b.n	8002266 <update_key+0x26>
    return;
 8002264:	bf00      	nop
}
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000cf0 	.word	0x20000cf0

08002270 <keyboard_init_keys>:

void keyboard_init_keys() {
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
  //	keyboard_read_config();
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8002276:	2300      	movs	r3, #0
 8002278:	71fb      	strb	r3, [r7, #7]
 800227a:	e027      	b.n	80022cc <keyboard_init_keys+0x5c>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 800227c:	2300      	movs	r3, #0
 800227e:	71bb      	strb	r3, [r7, #6]
 8002280:	e01e      	b.n	80022c0 <keyboard_init_keys+0x50>
      if (channels_by_row_col[row][col][0] != XXXX) {
 8002282:	79fa      	ldrb	r2, [r7, #7]
 8002284:	79bb      	ldrb	r3, [r7, #6]
 8002286:	4915      	ldr	r1, [pc, #84]	@ (80022dc <keyboard_init_keys+0x6c>)
 8002288:	0092      	lsls	r2, r2, #2
 800228a:	4413      	add	r3, r2
 800228c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8002290:	2bff      	cmp	r3, #255	@ 0xff
 8002292:	d012      	beq.n	80022ba <keyboard_init_keys+0x4a>
        init_key(channels_by_row_col[row][col][0], channels_by_row_col[row][col][1], row, col);
 8002294:	79fa      	ldrb	r2, [r7, #7]
 8002296:	79bb      	ldrb	r3, [r7, #6]
 8002298:	4910      	ldr	r1, [pc, #64]	@ (80022dc <keyboard_init_keys+0x6c>)
 800229a:	0092      	lsls	r2, r2, #2
 800229c:	4413      	add	r3, r2
 800229e:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 80022a2:	79fa      	ldrb	r2, [r7, #7]
 80022a4:	79bb      	ldrb	r3, [r7, #6]
 80022a6:	490d      	ldr	r1, [pc, #52]	@ (80022dc <keyboard_init_keys+0x6c>)
 80022a8:	0092      	lsls	r2, r2, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	440b      	add	r3, r1
 80022b0:	7859      	ldrb	r1, [r3, #1]
 80022b2:	79bb      	ldrb	r3, [r7, #6]
 80022b4:	79fa      	ldrb	r2, [r7, #7]
 80022b6:	f7ff fc35 	bl	8001b24 <init_key>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 80022ba:	79bb      	ldrb	r3, [r7, #6]
 80022bc:	3301      	adds	r3, #1
 80022be:	71bb      	strb	r3, [r7, #6]
 80022c0:	79bb      	ldrb	r3, [r7, #6]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d9dd      	bls.n	8002282 <keyboard_init_keys+0x12>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	3301      	adds	r3, #1
 80022ca:	71fb      	strb	r3, [r7, #7]
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d9d4      	bls.n	800227c <keyboard_init_keys+0xc>
      }
    }
  }
}
 80022d2:	bf00      	nop
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	0800eae0 	.word	0x0800eae0

080022e0 <keyboard_task>:

void keyboard_task() {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 80022e6:	f000 ffad 	bl	8003244 <keyboard_get_time>
 80022ea:	60b8      	str	r0, [r7, #8]
  key_triggered = 0;
 80022ec:	4b65      	ldr	r3, [pc, #404]	@ (8002484 <keyboard_task+0x1a4>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
 80022f6:	e039      	b.n	800236c <keyboard_task+0x8c>
    keyboard_select_amux(amux_channel);
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 ff48 	bl	8003190 <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002300:	2300      	movs	r3, #0
 8002302:	73bb      	strb	r3, [r7, #14]
 8002304:	e02c      	b.n	8002360 <keyboard_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 8002306:	7bb9      	ldrb	r1, [r7, #14]
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	485f      	ldr	r0, [pc, #380]	@ (8002488 <keyboard_task+0x1a8>)
 800230c:	461a      	mov	r2, r3
 800230e:	0112      	lsls	r2, r2, #4
 8002310:	441a      	add	r2, r3
 8002312:	0093      	lsls	r3, r2, #2
 8002314:	461a      	mov	r2, r3
 8002316:	460b      	mov	r3, r1
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	440b      	add	r3, r1
 800231c:	019b      	lsls	r3, r3, #6
 800231e:	4413      	add	r3, r2
 8002320:	4403      	add	r3, r0
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d017      	beq.n	8002358 <keyboard_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 8002328:	7bbb      	ldrb	r3, [r7, #14]
 800232a:	4618      	mov	r0, r3
 800232c:	f000 ff58 	bl	80031e0 <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 8002330:	7bb9      	ldrb	r1, [r7, #14]
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	461a      	mov	r2, r3
 8002336:	0112      	lsls	r2, r2, #4
 8002338:	441a      	add	r2, r3
 800233a:	0093      	lsls	r3, r2, #2
 800233c:	461a      	mov	r2, r3
 800233e:	460b      	mov	r3, r1
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	440b      	add	r3, r1
 8002344:	019b      	lsls	r3, r3, #6
 8002346:	4413      	add	r3, r2
 8002348:	4a4f      	ldr	r2, [pc, #316]	@ (8002488 <keyboard_task+0x1a8>)
 800234a:	4413      	add	r3, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff77 	bl	8002240 <update_key>

      keyboard_close_adc();
 8002352:	f000 ff6d 	bl	8003230 <keyboard_close_adc>
 8002356:	e000      	b.n	800235a <keyboard_task+0x7a>
        continue;
 8002358:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800235a:	7bbb      	ldrb	r3, [r7, #14]
 800235c:	3301      	adds	r3, #1
 800235e:	73bb      	strb	r3, [r7, #14]
 8002360:	7bbb      	ldrb	r3, [r7, #14]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0cf      	beq.n	8002306 <keyboard_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	3301      	adds	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	2b0f      	cmp	r3, #15
 8002370:	d9c2      	bls.n	80022f8 <keyboard_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002372:	2300      	movs	r3, #0
 8002374:	737b      	strb	r3, [r7, #13]
 8002376:	e077      	b.n	8002468 <keyboard_task+0x188>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002378:	2300      	movs	r3, #0
 800237a:	733b      	strb	r3, [r7, #12]
 800237c:	e06e      	b.n	800245c <keyboard_task+0x17c>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 800237e:	7b39      	ldrb	r1, [r7, #12]
 8002380:	7b7b      	ldrb	r3, [r7, #13]
 8002382:	4841      	ldr	r0, [pc, #260]	@ (8002488 <keyboard_task+0x1a8>)
 8002384:	461a      	mov	r2, r3
 8002386:	0112      	lsls	r2, r2, #4
 8002388:	441a      	add	r2, r3
 800238a:	0093      	lsls	r3, r2, #2
 800238c:	461a      	mov	r2, r3
 800238e:	460b      	mov	r3, r1
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	440b      	add	r3, r1
 8002394:	019b      	lsls	r3, r3, #6
 8002396:	4413      	add	r3, r2
 8002398:	4403      	add	r3, r0
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d059      	beq.n	8002454 <keyboard_task+0x174>
 80023a0:	7b39      	ldrb	r1, [r7, #12]
 80023a2:	7b7b      	ldrb	r3, [r7, #13]
 80023a4:	4838      	ldr	r0, [pc, #224]	@ (8002488 <keyboard_task+0x1a8>)
 80023a6:	461a      	mov	r2, r3
 80023a8:	0112      	lsls	r2, r2, #4
 80023aa:	441a      	add	r2, r3
 80023ac:	0093      	lsls	r3, r2, #2
 80023ae:	461a      	mov	r2, r3
 80023b0:	460b      	mov	r3, r1
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	440b      	add	r3, r1
 80023b6:	019b      	lsls	r3, r3, #6
 80023b8:	4413      	add	r3, r2
 80023ba:	4403      	add	r3, r0
 80023bc:	333c      	adds	r3, #60	@ 0x3c
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d147      	bne.n	8002454 <keyboard_task+0x174>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 80023c4:	7b39      	ldrb	r1, [r7, #12]
 80023c6:	7b7b      	ldrb	r3, [r7, #13]
 80023c8:	461a      	mov	r2, r3
 80023ca:	0112      	lsls	r2, r2, #4
 80023cc:	441a      	add	r2, r3
 80023ce:	0093      	lsls	r3, r2, #2
 80023d0:	461a      	mov	r2, r3
 80023d2:	460b      	mov	r3, r1
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	440b      	add	r3, r1
 80023d8:	019b      	lsls	r3, r3, #6
 80023da:	4413      	add	r3, r2
 80023dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002488 <keyboard_task+0x1a8>)
 80023de:	4413      	add	r3, r2
 80023e0:	607b      	str	r3, [r7, #4]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ee:	429a      	cmp	r2, r3
 80023f0:	bf34      	ite	cc
 80023f2:	2301      	movcc	r3, #1
 80023f4:	2300      	movcs	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	70fb      	strb	r3, [r7, #3]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 80023fa:	f000 ff23 	bl	8003244 <keyboard_get_time>
 80023fe:	4602      	mov	r2, r0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	4a21      	ldr	r2, [pc, #132]	@ (800248c <keyboard_task+0x1ac>)
 8002408:	88d2      	ldrh	r2, [r2, #6]
 800240a:	4293      	cmp	r3, r2
 800240c:	bf94      	ite	ls
 800240e:	2301      	movls	r3, #1
 8002410:	2300      	movhi	r3, #0
 8002412:	b2db      	uxtb	r3, r3
 8002414:	70bb      	strb	r3, [r7, #2]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00b      	beq.n	8002434 <keyboard_task+0x154>
 800241c:	78bb      	ldrb	r3, [r7, #2]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d008      	beq.n	8002434 <keyboard_task+0x154>
        key->actuation.status = STATUS_TAP;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _TAP_LAYER);
 800242a:	2101      	movs	r1, #1
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff f911 	bl	8001654 <hid_press_key>
 8002432:	e010      	b.n	8002456 <keyboard_task+0x176>
      } else if (!is_before_timeout || key_triggered) {
 8002434:	78bb      	ldrb	r3, [r7, #2]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <keyboard_task+0x162>
 800243a:	4b12      	ldr	r3, [pc, #72]	@ (8002484 <keyboard_task+0x1a4>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <keyboard_task+0x176>
        key->actuation.status = STATUS_TRIGGERED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2202      	movs	r2, #2
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _BASE_LAYER);
 800244a:	2100      	movs	r1, #0
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff f901 	bl	8001654 <hid_press_key>
 8002452:	e000      	b.n	8002456 <keyboard_task+0x176>
        continue;
 8002454:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002456:	7b3b      	ldrb	r3, [r7, #12]
 8002458:	3301      	adds	r3, #1
 800245a:	733b      	strb	r3, [r7, #12]
 800245c:	7b3b      	ldrb	r3, [r7, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d08d      	beq.n	800237e <keyboard_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002462:	7b7b      	ldrb	r3, [r7, #13]
 8002464:	3301      	adds	r3, #1
 8002466:	737b      	strb	r3, [r7, #13]
 8002468:	7b7b      	ldrb	r3, [r7, #13]
 800246a:	2b0f      	cmp	r3, #15
 800246c:	d984      	bls.n	8002378 <keyboard_task+0x98>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 800246e:	f000 fee9 	bl	8003244 <keyboard_get_time>
 8002472:	4602      	mov	r2, r0
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	4a05      	ldr	r2, [pc, #20]	@ (8002490 <keyboard_task+0x1b0>)
 800247a:	6013      	str	r3, [r2, #0]
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000754 	.word	0x20000754
 8002488:	20000310 	.word	0x20000310
 800248c:	20000000 	.word	0x20000000
 8002490:	20000750 	.word	0x20000750

08002494 <snaptap_task>:

void snaptap_task() {
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 800249a:	f000 fed3 	bl	8003244 <keyboard_get_time>
 800249e:	6138      	str	r0, [r7, #16]
  key_triggered = 0;
 80024a0:	4b88      	ldr	r3, [pc, #544]	@ (80026c4 <snaptap_task+0x230>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80024a6:	2300      	movs	r3, #0
 80024a8:	77fb      	strb	r3, [r7, #31]
 80024aa:	e039      	b.n	8002520 <snaptap_task+0x8c>
    keyboard_select_amux(amux_channel);
 80024ac:	7ffb      	ldrb	r3, [r7, #31]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fe6e 	bl	8003190 <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80024b4:	2300      	movs	r3, #0
 80024b6:	77bb      	strb	r3, [r7, #30]
 80024b8:	e02c      	b.n	8002514 <snaptap_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 80024ba:	7fb9      	ldrb	r1, [r7, #30]
 80024bc:	7ffb      	ldrb	r3, [r7, #31]
 80024be:	4882      	ldr	r0, [pc, #520]	@ (80026c8 <snaptap_task+0x234>)
 80024c0:	461a      	mov	r2, r3
 80024c2:	0112      	lsls	r2, r2, #4
 80024c4:	441a      	add	r2, r3
 80024c6:	0093      	lsls	r3, r2, #2
 80024c8:	461a      	mov	r2, r3
 80024ca:	460b      	mov	r3, r1
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	440b      	add	r3, r1
 80024d0:	019b      	lsls	r3, r3, #6
 80024d2:	4413      	add	r3, r2
 80024d4:	4403      	add	r3, r0
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d017      	beq.n	800250c <snaptap_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 80024dc:	7fbb      	ldrb	r3, [r7, #30]
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 fe7e 	bl	80031e0 <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 80024e4:	7fb9      	ldrb	r1, [r7, #30]
 80024e6:	7ffb      	ldrb	r3, [r7, #31]
 80024e8:	461a      	mov	r2, r3
 80024ea:	0112      	lsls	r2, r2, #4
 80024ec:	441a      	add	r2, r3
 80024ee:	0093      	lsls	r3, r2, #2
 80024f0:	461a      	mov	r2, r3
 80024f2:	460b      	mov	r3, r1
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	440b      	add	r3, r1
 80024f8:	019b      	lsls	r3, r3, #6
 80024fa:	4413      	add	r3, r2
 80024fc:	4a72      	ldr	r2, [pc, #456]	@ (80026c8 <snaptap_task+0x234>)
 80024fe:	4413      	add	r3, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fe9d 	bl	8002240 <update_key>

      keyboard_close_adc();
 8002506:	f000 fe93 	bl	8003230 <keyboard_close_adc>
 800250a:	e000      	b.n	800250e <snaptap_task+0x7a>
        continue;
 800250c:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800250e:	7fbb      	ldrb	r3, [r7, #30]
 8002510:	3301      	adds	r3, #1
 8002512:	77bb      	strb	r3, [r7, #30]
 8002514:	7fbb      	ldrb	r3, [r7, #30]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0cf      	beq.n	80024ba <snaptap_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800251a:	7ffb      	ldrb	r3, [r7, #31]
 800251c:	3301      	adds	r3, #1
 800251e:	77fb      	strb	r3, [r7, #31]
 8002520:	7ffb      	ldrb	r3, [r7, #31]
 8002522:	2b0f      	cmp	r3, #15
 8002524:	d9c2      	bls.n	80024ac <snaptap_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002526:	2300      	movs	r3, #0
 8002528:	777b      	strb	r3, [r7, #29]
 800252a:	e077      	b.n	800261c <snaptap_task+0x188>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800252c:	2300      	movs	r3, #0
 800252e:	773b      	strb	r3, [r7, #28]
 8002530:	e06e      	b.n	8002610 <snaptap_task+0x17c>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 8002532:	7f39      	ldrb	r1, [r7, #28]
 8002534:	7f7b      	ldrb	r3, [r7, #29]
 8002536:	4864      	ldr	r0, [pc, #400]	@ (80026c8 <snaptap_task+0x234>)
 8002538:	461a      	mov	r2, r3
 800253a:	0112      	lsls	r2, r2, #4
 800253c:	441a      	add	r2, r3
 800253e:	0093      	lsls	r3, r2, #2
 8002540:	461a      	mov	r2, r3
 8002542:	460b      	mov	r3, r1
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	440b      	add	r3, r1
 8002548:	019b      	lsls	r3, r3, #6
 800254a:	4413      	add	r3, r2
 800254c:	4403      	add	r3, r0
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d059      	beq.n	8002608 <snaptap_task+0x174>
 8002554:	7f39      	ldrb	r1, [r7, #28]
 8002556:	7f7b      	ldrb	r3, [r7, #29]
 8002558:	485b      	ldr	r0, [pc, #364]	@ (80026c8 <snaptap_task+0x234>)
 800255a:	461a      	mov	r2, r3
 800255c:	0112      	lsls	r2, r2, #4
 800255e:	441a      	add	r2, r3
 8002560:	0093      	lsls	r3, r2, #2
 8002562:	461a      	mov	r2, r3
 8002564:	460b      	mov	r3, r1
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	440b      	add	r3, r1
 800256a:	019b      	lsls	r3, r3, #6
 800256c:	4413      	add	r3, r2
 800256e:	4403      	add	r3, r0
 8002570:	333c      	adds	r3, #60	@ 0x3c
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d147      	bne.n	8002608 <snaptap_task+0x174>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8002578:	7f39      	ldrb	r1, [r7, #28]
 800257a:	7f7b      	ldrb	r3, [r7, #29]
 800257c:	461a      	mov	r2, r3
 800257e:	0112      	lsls	r2, r2, #4
 8002580:	441a      	add	r2, r3
 8002582:	0093      	lsls	r3, r2, #2
 8002584:	461a      	mov	r2, r3
 8002586:	460b      	mov	r3, r1
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	440b      	add	r3, r1
 800258c:	019b      	lsls	r3, r3, #6
 800258e:	4413      	add	r3, r2
 8002590:	4a4d      	ldr	r2, [pc, #308]	@ (80026c8 <snaptap_task+0x234>)
 8002592:	4413      	add	r3, r2
 8002594:	60bb      	str	r3, [r7, #8]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025a2:	429a      	cmp	r2, r3
 80025a4:	bf34      	ite	cc
 80025a6:	2301      	movcc	r3, #1
 80025a8:	2300      	movcs	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	71fb      	strb	r3, [r7, #7]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 80025ae:	f000 fe49 	bl	8003244 <keyboard_get_time>
 80025b2:	4602      	mov	r2, r0
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	4a44      	ldr	r2, [pc, #272]	@ (80026cc <snaptap_task+0x238>)
 80025bc:	88d2      	ldrh	r2, [r2, #6]
 80025be:	4293      	cmp	r3, r2
 80025c0:	bf94      	ite	ls
 80025c2:	2301      	movls	r3, #1
 80025c4:	2300      	movhi	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	71bb      	strb	r3, [r7, #6]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00b      	beq.n	80025e8 <snaptap_task+0x154>
 80025d0:	79bb      	ldrb	r3, [r7, #6]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d008      	beq.n	80025e8 <snaptap_task+0x154>
        key->actuation.status = STATUS_TAP;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _TAP_LAYER);
 80025de:	2101      	movs	r1, #1
 80025e0:	68b8      	ldr	r0, [r7, #8]
 80025e2:	f7ff f837 	bl	8001654 <hid_press_key>
 80025e6:	e010      	b.n	800260a <snaptap_task+0x176>
      } else if (!is_before_timeout || key_triggered) {
 80025e8:	79bb      	ldrb	r3, [r7, #6]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <snaptap_task+0x162>
 80025ee:	4b35      	ldr	r3, [pc, #212]	@ (80026c4 <snaptap_task+0x230>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d009      	beq.n	800260a <snaptap_task+0x176>
        key->actuation.status = STATUS_TRIGGERED;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2202      	movs	r2, #2
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hid_press_key(key, _BASE_LAYER);
 80025fe:	2100      	movs	r1, #0
 8002600:	68b8      	ldr	r0, [r7, #8]
 8002602:	f7ff f827 	bl	8001654 <hid_press_key>
 8002606:	e000      	b.n	800260a <snaptap_task+0x176>
        continue;
 8002608:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800260a:	7f3b      	ldrb	r3, [r7, #28]
 800260c:	3301      	adds	r3, #1
 800260e:	773b      	strb	r3, [r7, #28]
 8002610:	7f3b      	ldrb	r3, [r7, #28]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d08d      	beq.n	8002532 <snaptap_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002616:	7f7b      	ldrb	r3, [r7, #29]
 8002618:	3301      	adds	r3, #1
 800261a:	777b      	strb	r3, [r7, #29]
 800261c:	7f7b      	ldrb	r3, [r7, #29]
 800261e:	2b0f      	cmp	r3, #15
 8002620:	d984      	bls.n	800252c <snaptap_task+0x98>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 8002622:	f000 fe0f 	bl	8003244 <keyboard_get_time>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	4a28      	ldr	r2, [pc, #160]	@ (80026d0 <snaptap_task+0x23c>)
 800262e:	6013      	str	r3, [r2, #0]

  // Snaptap logic - chỉ xử lý việc thả phím cũ, không nhấn phím mới
  static struct key* current_pressed_key = NULL;
  struct key* new_pressed_key = NULL;
 8002630:	2300      	movs	r3, #0
 8002632:	61bb      	str	r3, [r7, #24]
  
  // Tìm phím đang TRIGGERED
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002634:	2300      	movs	r3, #0
 8002636:	75fb      	strb	r3, [r7, #23]
 8002638:	e029      	b.n	800268e <snaptap_task+0x1fa>
      for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800263a:	2300      	movs	r3, #0
 800263c:	75bb      	strb	r3, [r7, #22]
 800263e:	e01d      	b.n	800267c <snaptap_task+0x1e8>
          struct key* key = &keyboard_keys[adc_channel][amux_channel];
 8002640:	7db9      	ldrb	r1, [r7, #22]
 8002642:	7dfb      	ldrb	r3, [r7, #23]
 8002644:	461a      	mov	r2, r3
 8002646:	0112      	lsls	r2, r2, #4
 8002648:	441a      	add	r2, r3
 800264a:	0093      	lsls	r3, r2, #2
 800264c:	461a      	mov	r2, r3
 800264e:	460b      	mov	r3, r1
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	440b      	add	r3, r1
 8002654:	019b      	lsls	r3, r3, #6
 8002656:	4413      	add	r3, r2
 8002658:	4a1b      	ldr	r2, [pc, #108]	@ (80026c8 <snaptap_task+0x234>)
 800265a:	4413      	add	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
          if (key->is_enabled && key->actuation.status == STATUS_TRIGGERED) {
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <snaptap_task+0x1e2>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800266c:	2b02      	cmp	r3, #2
 800266e:	d102      	bne.n	8002676 <snaptap_task+0x1e2>
              new_pressed_key = key;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	61bb      	str	r3, [r7, #24]
              break;
 8002674:	e005      	b.n	8002682 <snaptap_task+0x1ee>
      for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002676:	7dbb      	ldrb	r3, [r7, #22]
 8002678:	3301      	adds	r3, #1
 800267a:	75bb      	strb	r3, [r7, #22]
 800267c:	7dbb      	ldrb	r3, [r7, #22]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0de      	beq.n	8002640 <snaptap_task+0x1ac>
          }
      }
      if (new_pressed_key) break;
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d106      	bne.n	8002696 <snaptap_task+0x202>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002688:	7dfb      	ldrb	r3, [r7, #23]
 800268a:	3301      	adds	r3, #1
 800268c:	75fb      	strb	r3, [r7, #23]
 800268e:	7dfb      	ldrb	r3, [r7, #23]
 8002690:	2b0f      	cmp	r3, #15
 8002692:	d9d2      	bls.n	800263a <snaptap_task+0x1a6>
 8002694:	e000      	b.n	8002698 <snaptap_task+0x204>
      if (new_pressed_key) break;
 8002696:	bf00      	nop
  }
  
  // Xử lý snaptap - chỉ thả phím cũ, không nhấn phím mới
  if (new_pressed_key != current_pressed_key) {
 8002698:	4b0e      	ldr	r3, [pc, #56]	@ (80026d4 <snaptap_task+0x240>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d00c      	beq.n	80026bc <snaptap_task+0x228>
      if (current_pressed_key) {
 80026a2:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <snaptap_task+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d005      	beq.n	80026b6 <snaptap_task+0x222>
          hid_release_key(current_pressed_key, _BASE_LAYER);
 80026aa:	4b0a      	ldr	r3, [pc, #40]	@ (80026d4 <snaptap_task+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff f8e9 	bl	8001888 <hid_release_key>
      }
      // KHÔNG gọi hid_press_key() ở đây vì phím đã được nhấn trong update_key_actuation()
      current_pressed_key = new_pressed_key;
 80026b6:	4a07      	ldr	r2, [pc, #28]	@ (80026d4 <snaptap_task+0x240>)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	6013      	str	r3, [r2, #0]
  }
}
 80026bc:	bf00      	nop
 80026be:	3720      	adds	r7, #32
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000754 	.word	0x20000754
 80026c8:	20000310 	.word	0x20000310
 80026cc:	20000000 	.word	0x20000000
 80026d0:	20000750 	.word	0x20000750
 80026d4:	20000758 	.word	0x20000758

080026d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b0b6      	sub	sp, #216	@ 0xd8
 80026dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026de:	f001 fbd1 	bl	8003e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026e2:	f000 fb99 	bl	8002e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026e6:	f000 fcad 	bl	8003044 <MX_GPIO_Init>
  MX_ADC1_Init();
 80026ea:	f000 fbfd 	bl	8002ee8 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80026ee:	f000 fc7b 	bl	8002fe8 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80026f2:	f000 fc4b 	bl	8002f8c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ADC_channel_Config.Rank = 1;
 80026f6:	4bbd      	ldr	r3, [pc, #756]	@ (80029ec <main+0x314>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	605a      	str	r2, [r3, #4]
  ADC_channel_Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80026fc:	4bbb      	ldr	r3, [pc, #748]	@ (80029ec <main+0x314>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]

  keyboard_init_keys();
 8002702:	f7ff fdb5 	bl	8002270 <keyboard_init_keys>
  ssd1306_Init();
 8002706:	f000 fde1 	bl	80032cc <ssd1306_Init>
  tusb_rhport_init_t dev_init = {
 800270a:	4bb9      	ldr	r3, [pc, #740]	@ (80029f0 <main+0x318>)
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	863b      	strh	r3, [r7, #48]	@ 0x30
      .role = TUSB_ROLE_DEVICE,
      .speed = TUSB_SPEED_AUTO};
  tusb_init(0, &dev_init); // initialize device stack on roothub port 0
 8002710:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002714:	4619      	mov	r1, r3
 8002716:	2000      	movs	r0, #0
 8002718:	f00a f846 	bl	800c7a8 <tusb_rhport_init>
  /* USER CODE BEGIN WHILE */
  uint32_t start_at;

  while (1) {
    // MARK: Main loop
    start_at=HAL_GetTick();
 800271c:	f001 fc18 	bl	8003f50 <HAL_GetTick>
 8002720:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
  tud_task_ext(UINT32_MAX, false);
 8002724:	2100      	movs	r1, #0
 8002726:	f04f 30ff 	mov.w	r0, #4294967295
 800272a:	f006 fbef 	bl	8008f0c <tud_task_ext>
}
 800272e:	bf00      	nop
    tud_task();
    
    // Detect mode key by HID code
    struct key *mode_key = NULL;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    struct key *layer_key = NULL;
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    for (int adc = 0; adc < ADC_CHANNEL_COUNT; ++adc) {
 800273c:	2300      	movs	r3, #0
 800273e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002742:	e032      	b.n	80027aa <main+0xd2>
        for (int amux = 0; amux < AMUX_CHANNEL_COUNT; ++amux) {
 8002744:	2300      	movs	r3, #0
 8002746:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800274a:	e025      	b.n	8002798 <main+0xc0>
            struct key *k = &keyboard_keys[adc][amux];
 800274c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002750:	461a      	mov	r2, r3
 8002752:	0112      	lsls	r2, r2, #4
 8002754:	441a      	add	r2, r3
 8002756:	0093      	lsls	r3, r2, #2
 8002758:	461a      	mov	r2, r3
 800275a:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800275e:	460b      	mov	r3, r1
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	440b      	add	r3, r1
 8002764:	019b      	lsls	r3, r3, #6
 8002766:	4413      	add	r3, r2
 8002768:	4aa2      	ldr	r2, [pc, #648]	@ (80029f4 <main+0x31c>)
 800276a:	4413      	add	r3, r2
 800276c:	673b      	str	r3, [r7, #112]	@ 0x70
            if (k->layers[_BASE_LAYER].value[0] == HID_MODE_CHANGE) {
 800276e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002770:	88db      	ldrh	r3, [r3, #6]
 8002772:	b29b      	uxth	r3, r3
 8002774:	2bf0      	cmp	r3, #240	@ 0xf0
 8002776:	d102      	bne.n	800277e <main+0xa6>
                mode_key = k;
 8002778:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800277a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            }
            if (k->layers[_BASE_LAYER].value[0] == HID_LAYER_CHANGE) {
 800277e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002780:	88db      	ldrh	r3, [r3, #6]
 8002782:	b29b      	uxth	r3, r3
 8002784:	2bf1      	cmp	r3, #241	@ 0xf1
 8002786:	d102      	bne.n	800278e <main+0xb6>
                layer_key = k;
 8002788:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800278a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        for (int amux = 0; amux < AMUX_CHANNEL_COUNT; ++amux) {
 800278e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002792:	3301      	adds	r3, #1
 8002794:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002798:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800279c:	2b0f      	cmp	r3, #15
 800279e:	ddd5      	ble.n	800274c <main+0x74>
    for (int adc = 0; adc < ADC_CHANNEL_COUNT; ++adc) {
 80027a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027a4:	3301      	adds	r3, #1
 80027a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80027aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	ddc8      	ble.n	8002744 <main+0x6c>
            }
        }
    }
    uint8_t mode_key_pressed = (mode_key && mode_key->actuation.status == STATUS_TRIGGERED);
 80027b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d007      	beq.n	80027ca <main+0xf2>
 80027ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80027be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d101      	bne.n	80027ca <main+0xf2>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <main+0xf4>
 80027ca:	2300      	movs	r3, #0
 80027cc:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    uint8_t layer_key_pressed = (layer_key && layer_key->actuation.status == STATUS_TRIGGERED);
 80027d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <main+0x110>
 80027d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d101      	bne.n	80027e8 <main+0x110>
 80027e4:	2301      	movs	r3, #1
 80027e6:	e000      	b.n	80027ea <main+0x112>
 80027e8:	2300      	movs	r3, #0
 80027ea:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
    if (mode_key_pressed && !last_mode_key_pressed) {
 80027ee:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d033      	beq.n	800285e <main+0x186>
 80027f6:	4b80      	ldr	r3, [pc, #512]	@ (80029f8 <main+0x320>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d12f      	bne.n	800285e <main+0x186>
        g_keyboard_mode = (g_keyboard_mode == MODE_COMBO_KEY) ? MODE_SNAP_TAP : MODE_COMBO_KEY;
 80027fe:	4b7f      	ldr	r3, [pc, #508]	@ (80029fc <main+0x324>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	bf0c      	ite	eq
 8002806:	2301      	moveq	r3, #1
 8002808:	2300      	movne	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	4b7b      	ldr	r3, [pc, #492]	@ (80029fc <main+0x324>)
 8002810:	701a      	strb	r2, [r3, #0]
        if (g_keyboard_mode == MODE_COMBO_KEY) {
 8002812:	4b7a      	ldr	r3, [pc, #488]	@ (80029fc <main+0x324>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10f      	bne.n	800283a <main+0x162>
 800281a:	4b79      	ldr	r3, [pc, #484]	@ (8002a00 <main+0x328>)
 800281c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800281e:	2300      	movs	r3, #0
 8002820:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8002824:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002826:	667b      	str	r3, [r7, #100]	@ 0x64
  return tud_cdc_n_write(itf, str, strlen(str));
 8002828:	2211      	movs	r2, #17
 800282a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800282e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002830:	4618      	mov	r0, r3
 8002832:	f004 fa5d 	bl	8006cf0 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 8002836:	bf00      	nop
 8002838:	e00e      	b.n	8002858 <main+0x180>
 800283a:	4b72      	ldr	r3, [pc, #456]	@ (8002a04 <main+0x32c>)
 800283c:	663b      	str	r3, [r7, #96]	@ 0x60
 800283e:	2300      	movs	r3, #0
 8002840:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002844:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002846:	65bb      	str	r3, [r7, #88]	@ 0x58
  return tud_cdc_n_write(itf, str, strlen(str));
 8002848:	2210      	movs	r2, #16
 800284a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800284e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002850:	4618      	mov	r0, r3
 8002852:	f004 fa4d 	bl	8006cf0 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 8002856:	bf00      	nop
  return tud_cdc_n_write_flush(0);
 8002858:	2000      	movs	r0, #0
 800285a:	f004 fa7d 	bl	8006d58 <tud_cdc_n_write_flush>
        } else {
            tud_cdc_write_str("Mode: SNAP_TAP\r\n");
        }
        tud_cdc_write_flush();
    }
    if (layer_key_pressed && !last_layer_key_pressed) {
 800285e:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8002862:	2b00      	cmp	r3, #0
 8002864:	d046      	beq.n	80028f4 <main+0x21c>
 8002866:	4b68      	ldr	r3, [pc, #416]	@ (8002a08 <main+0x330>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d142      	bne.n	80028f4 <main+0x21c>
        // Toggle tuần tự giữa BASE, ALT, ALT2
        if (current_layer == _BASE_LAYER) {
 800286e:	4b67      	ldr	r3, [pc, #412]	@ (8002a0c <main+0x334>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d112      	bne.n	800289c <main+0x1c4>
            current_layer = _ALT_LAYER;
 8002876:	4b65      	ldr	r3, [pc, #404]	@ (8002a0c <main+0x334>)
 8002878:	2202      	movs	r2, #2
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	4b64      	ldr	r3, [pc, #400]	@ (8002a10 <main+0x338>)
 800287e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002880:	2300      	movs	r3, #0
 8002882:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8002886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002888:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return tud_cdc_n_write(itf, str, strlen(str));
 800288a:	220c      	movs	r2, #12
 800288c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002890:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002892:	4618      	mov	r0, r3
 8002894:	f004 fa2c 	bl	8006cf0 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 8002898:	bf00      	nop
 800289a:	e028      	b.n	80028ee <main+0x216>
            tud_cdc_write_str("Layer: ALT\r\n");
        } else if (current_layer == _ALT_LAYER) {
 800289c:	4b5b      	ldr	r3, [pc, #364]	@ (8002a0c <main+0x334>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d112      	bne.n	80028ca <main+0x1f2>
            current_layer = _ALT_LAYER_2;
 80028a4:	4b59      	ldr	r3, [pc, #356]	@ (8002a0c <main+0x334>)
 80028a6:	2203      	movs	r2, #3
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	4b5a      	ldr	r3, [pc, #360]	@ (8002a14 <main+0x33c>)
 80028ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028ae:	2300      	movs	r3, #0
 80028b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80028b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028b6:	643b      	str	r3, [r7, #64]	@ 0x40
  return tud_cdc_n_write(itf, str, strlen(str));
 80028b8:	220d      	movs	r2, #13
 80028ba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80028be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80028c0:	4618      	mov	r0, r3
 80028c2:	f004 fa15 	bl	8006cf0 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 80028c6:	bf00      	nop
 80028c8:	e011      	b.n	80028ee <main+0x216>
            tud_cdc_write_str("Layer: ALT2\r\n");
        } else {
            current_layer = _BASE_LAYER;
 80028ca:	4b50      	ldr	r3, [pc, #320]	@ (8002a0c <main+0x334>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	4b51      	ldr	r3, [pc, #324]	@ (8002a18 <main+0x340>)
 80028d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028d4:	2300      	movs	r3, #0
 80028d6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80028da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028dc:	637b      	str	r3, [r7, #52]	@ 0x34
  return tud_cdc_n_write(itf, str, strlen(str));
 80028de:	220d      	movs	r2, #13
 80028e0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80028e4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80028e6:	4618      	mov	r0, r3
 80028e8:	f004 fa02 	bl	8006cf0 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
 80028ec:	bf00      	nop
  return tud_cdc_n_write_flush(0);
 80028ee:	2000      	movs	r0, #0
 80028f0:	f004 fa32 	bl	8006d58 <tud_cdc_n_write_flush>
            tud_cdc_write_str("Layer: BASE\r\n");
        }
        tud_cdc_write_flush();
    }
    last_mode_key_pressed = mode_key_pressed;
 80028f4:	4a40      	ldr	r2, [pc, #256]	@ (80029f8 <main+0x320>)
 80028f6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80028fa:	7013      	strb	r3, [r2, #0]
    last_layer_key_pressed = layer_key_pressed;
 80028fc:	4a42      	ldr	r2, [pc, #264]	@ (8002a08 <main+0x330>)
 80028fe:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8002902:	7013      	strb	r3, [r2, #0]

    // Call the appropriate task based on mode
    if (g_keyboard_mode == MODE_COMBO_KEY) {
 8002904:	4b3d      	ldr	r3, [pc, #244]	@ (80029fc <main+0x324>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d102      	bne.n	8002912 <main+0x23a>
        keyboard_task();
 800290c:	f7ff fce8 	bl	80022e0 <keyboard_task>
 8002910:	e001      	b.n	8002916 <main+0x23e>
    } else {
        snaptap_task();
 8002912:	f7ff fdbf 	bl	8002494 <snaptap_task>
    }
    //snaptap_task();
    //keyboard_task();

    hid_task();
 8002916:	f7fe fe4d 	bl	80015b4 <hid_task>
    cdc_task();
 800291a:	f7fd fe5f 	bl	80005dc <cdc_task>
    ssd1306_Fill(White);
 800291e:	2001      	movs	r0, #1
 8002920:	f000 fd3e 	bl	80033a0 <ssd1306_Fill>
    ssd1306_FlipScreen(1, 1);
 8002924:	2101      	movs	r1, #1
 8002926:	2001      	movs	r0, #1
 8002928:	f000 ffca 	bl	80038c0 <ssd1306_FlipScreen>

    ssd1306_DrawRectangle(0, 0, SSD1306_WIDTH - 1, SSD1306_HEIGHT - 1, Black);
 800292c:	2300      	movs	r3, #0
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	233f      	movs	r3, #63	@ 0x3f
 8002932:	227f      	movs	r2, #127	@ 0x7f
 8002934:	2100      	movs	r1, #0
 8002936:	2000      	movs	r0, #0
 8002938:	f000 ff5a 	bl	80037f0 <ssd1306_DrawRectangle>
    ssd1306_Line(MOD_WIDTH, DIVIDER, SSD1306_WIDTH - 1, DIVIDER, Black);
 800293c:	2300      	movs	r3, #0
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	2320      	movs	r3, #32
 8002942:	227f      	movs	r2, #127	@ 0x7f
 8002944:	2120      	movs	r1, #32
 8002946:	2026      	movs	r0, #38	@ 0x26
 8002948:	f000 fee6 	bl	8003718 <ssd1306_Line>
    ssd1306_Line(MOD_WIDTH, 0, MOD_WIDTH, SSD1306_HEIGHT - 1, Black);
 800294c:	2300      	movs	r3, #0
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	233f      	movs	r3, #63	@ 0x3f
 8002952:	2226      	movs	r2, #38	@ 0x26
 8002954:	2100      	movs	r1, #0
 8002956:	2026      	movs	r0, #38	@ 0x26
 8002958:	f000 fede 	bl	8003718 <ssd1306_Line>
    for (int i = 1; i < 3; i++) {
 800295c:	2301      	movs	r3, #1
 800295e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002962:	e016      	b.n	8002992 <main+0x2ba>
      int x = MOD_WIDTH + i * KEY_WIDTH;
 8002964:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	3326      	adds	r3, #38	@ 0x26
 8002972:	677b      	str	r3, [r7, #116]	@ 0x74
      ssd1306_Line(x, 0, x, SSD1306_HEIGHT - 1, Black);
 8002974:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002976:	b2d8      	uxtb	r0, r3
 8002978:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800297a:	b2da      	uxtb	r2, r3
 800297c:	2300      	movs	r3, #0
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	233f      	movs	r3, #63	@ 0x3f
 8002982:	2100      	movs	r1, #0
 8002984:	f000 fec8 	bl	8003718 <ssd1306_Line>
    for (int i = 1; i < 3; i++) {
 8002988:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800298c:	3301      	adds	r3, #1
 800298e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002992:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002996:	2b02      	cmp	r3, #2
 8002998:	dde4      	ble.n	8002964 <main+0x28c>
    }

    int mod_y = 2;
 800299a:	2302      	movs	r3, #2
 800299c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    const int mod_line_height = 10;
 80029a0:	230a      	movs	r3, #10
 80029a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

    int label_row_bot = SSD1306_HEIGHT - DIVIDER + 2;
 80029a6:	2322      	movs	r3, #34	@ 0x22
 80029a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    int percent_row_bot = SSD1306_HEIGHT - 8 - 2;
 80029ac:	2336      	movs	r3, #54	@ 0x36
 80029ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    int label_row_top = 2;
 80029b2:	2302      	movs	r3, #2
 80029b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    int percent_row_top = label_row_bot - 11;
 80029b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029bc:	3b0b      	subs	r3, #11
 80029be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

    char keycodes[6][4] = {0};
 80029c2:	f107 0318 	add.w	r3, r7, #24
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	609a      	str	r2, [r3, #8]
 80029ce:	60da      	str	r2, [r3, #12]
 80029d0:	611a      	str	r2, [r3, #16]
 80029d2:	615a      	str	r2, [r3, #20]
    uint8_t key_percents[6] = {0};
 80029d4:	f107 0310 	add.w	r3, r7, #16
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	809a      	strh	r2, [r3, #4]
    int tracker = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 80029e4:	2300      	movs	r3, #0
 80029e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029ea:	e140      	b.n	8002c6e <main+0x596>
 80029ec:	20000cdc 	.word	0x20000cdc
 80029f0:	0800e8a0 	.word	0x0800e8a0
 80029f4:	20000310 	.word	0x20000310
 80029f8:	20000ced 	.word	0x20000ced
 80029fc:	20000cec 	.word	0x20000cec
 8002a00:	0800e800 	.word	0x0800e800
 8002a04:	0800e814 	.word	0x0800e814
 8002a08:	20000cee 	.word	0x20000cee
 8002a0c:	20000cf0 	.word	0x20000cf0
 8002a10:	0800e828 	.word	0x0800e828
 8002a14:	0800e838 	.word	0x0800e838
 8002a18:	0800e848 	.word	0x0800e848
            struct key* k = &keyboard_keys[0][amux];
 8002a1c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4ac1      	ldr	r2, [pc, #772]	@ (8002d30 <main+0x658>)
 8002a2a:	4413      	add	r3, r2
 8002a2c:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if (k->state.distance_8bits >= 15 && k->layers[current_layer].type == KEY_TYPE_MODIFIER) {
 8002a2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a30:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002a34:	2b0e      	cmp	r3, #14
 8002a36:	d975      	bls.n	8002b24 <main+0x44c>
 8002a38:	4bbe      	ldr	r3, [pc, #760]	@ (8002d34 <main+0x65c>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002a3e:	4613      	mov	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4413      	add	r3, r2
 8002a44:	440b      	add	r3, r1
 8002a46:	3305      	adds	r3, #5
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d16a      	bne.n	8002b24 <main+0x44c>
            	uint16_t bitmask = *(uint16_t *)k->layers[current_layer].value;
 8002a4e:	4bb9      	ldr	r3, [pc, #740]	@ (8002d34 <main+0x65c>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	799a      	ldrb	r2, [r3, #6]
 8002a5e:	79db      	ldrb	r3, [r3, #7]
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
                const char* label = NULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

                if (bitmask == 0b00000001) label = "LCtrl";
 8002a6e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d103      	bne.n	8002a7e <main+0x3a6>
 8002a76:	4bb0      	ldr	r3, [pc, #704]	@ (8002d38 <main+0x660>)
 8002a78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a7c:	e036      	b.n	8002aec <main+0x414>
                else if (bitmask == 0b00000010) label = "LShift";
 8002a7e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d103      	bne.n	8002a8e <main+0x3b6>
 8002a86:	4bad      	ldr	r3, [pc, #692]	@ (8002d3c <main+0x664>)
 8002a88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a8c:	e02e      	b.n	8002aec <main+0x414>
                else if (bitmask == 0b00000100) label = "LAlt";
 8002a8e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d103      	bne.n	8002a9e <main+0x3c6>
 8002a96:	4baa      	ldr	r3, [pc, #680]	@ (8002d40 <main+0x668>)
 8002a98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a9c:	e026      	b.n	8002aec <main+0x414>
                else if (bitmask == 0b00001000) label = "LGUI";
 8002a9e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d103      	bne.n	8002aae <main+0x3d6>
 8002aa6:	4ba7      	ldr	r3, [pc, #668]	@ (8002d44 <main+0x66c>)
 8002aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002aac:	e01e      	b.n	8002aec <main+0x414>
                else if (bitmask == 0b00010000) label = "RCtrl";
 8002aae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002ab2:	2b10      	cmp	r3, #16
 8002ab4:	d103      	bne.n	8002abe <main+0x3e6>
 8002ab6:	4ba4      	ldr	r3, [pc, #656]	@ (8002d48 <main+0x670>)
 8002ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002abc:	e016      	b.n	8002aec <main+0x414>
                else if (bitmask == 0b00100000) label = "RShift";
 8002abe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	d103      	bne.n	8002ace <main+0x3f6>
 8002ac6:	4ba1      	ldr	r3, [pc, #644]	@ (8002d4c <main+0x674>)
 8002ac8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002acc:	e00e      	b.n	8002aec <main+0x414>
                else if (bitmask == 0b01000000) label = "RAlt";
 8002ace:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002ad2:	2b40      	cmp	r3, #64	@ 0x40
 8002ad4:	d103      	bne.n	8002ade <main+0x406>
 8002ad6:	4b9e      	ldr	r3, [pc, #632]	@ (8002d50 <main+0x678>)
 8002ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002adc:	e006      	b.n	8002aec <main+0x414>
                else if (bitmask == 0b10000000) label = "RGUI";
 8002ade:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002ae2:	2b80      	cmp	r3, #128	@ 0x80
 8002ae4:	d102      	bne.n	8002aec <main+0x414>
 8002ae6:	4b9b      	ldr	r3, [pc, #620]	@ (8002d54 <main+0x67c>)
 8002ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

                if (label) {
 8002aec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80b6 	beq.w	8002c62 <main+0x58a>
                    ssd1306_SetCursor(2, mod_y);
 8002af6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	4619      	mov	r1, r3
 8002afe:	2002      	movs	r0, #2
 8002b00:	f000 fdf2 	bl	80036e8 <ssd1306_SetCursor>
                    ssd1306_WriteString(label, Font_6x8, Black);
 8002b04:	4b94      	ldr	r3, [pc, #592]	@ (8002d58 <main+0x680>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	9200      	str	r2, [sp, #0]
 8002b0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b0c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8002b10:	f000 fdc4 	bl	800369c <ssd1306_WriteString>
                    mod_y += mod_line_height;
 8002b14:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            if (k->state.distance_8bits >= 15 && k->layers[current_layer].type == KEY_TYPE_MODIFIER) {
 8002b22:	e09e      	b.n	8002c62 <main+0x58a>
                }
            }

            else if (k->state.distance_8bits >= 15 && tracker < 6 && k->layers[current_layer].type == KEY_TYPE_NORMAL) {
 8002b24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b26:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002b2a:	2b0e      	cmp	r3, #14
 8002b2c:	f240 809a 	bls.w	8002c64 <main+0x58c>
 8002b30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b34:	2b05      	cmp	r3, #5
 8002b36:	f300 8095 	bgt.w	8002c64 <main+0x58c>
 8002b3a:	4b7e      	ldr	r3, [pc, #504]	@ (8002d34 <main+0x65c>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4413      	add	r3, r2
 8002b46:	440b      	add	r3, r1
 8002b48:	3305      	adds	r3, #5
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	f040 8089 	bne.w	8002c64 <main+0x58c>
                        	uint16_t keycode = k->layers[current_layer].value[0];
 8002b52:	4b78      	ldr	r3, [pc, #480]	@ (8002d34 <main+0x65c>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	440b      	add	r3, r1
 8002b60:	799a      	ldrb	r2, [r3, #6]
 8002b62:	79db      	ldrb	r3, [r3, #7]
 8002b64:	021b      	lsls	r3, r3, #8
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
                        	if (keycode >= 0x04 && keycode <= 0x1D) {
 8002b6c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d928      	bls.n	8002bc6 <main+0x4ee>
 8002b74:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002b78:	2b1d      	cmp	r3, #29
 8002b7a:	d824      	bhi.n	8002bc6 <main+0x4ee>
                        	        keycodes[tracker][0] = '0';
 8002b7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	33d0      	adds	r3, #208	@ 0xd0
 8002b84:	443b      	add	r3, r7
 8002b86:	2230      	movs	r2, #48	@ 0x30
 8002b88:	f803 2cb8 	strb.w	r2, [r3, #-184]
                        	        keycodes[tracker][1] = 'x';
 8002b8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	33d0      	adds	r3, #208	@ 0xd0
 8002b94:	443b      	add	r3, r7
 8002b96:	2278      	movs	r2, #120	@ 0x78
 8002b98:	f803 2cb7 	strb.w	r2, [r3, #-183]
                        	        keycodes[tracker][2] = 'A' + (keycode - 0x04);
 8002b9c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	333d      	adds	r3, #61	@ 0x3d
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	33d0      	adds	r3, #208	@ 0xd0
 8002bae:	443b      	add	r3, r7
 8002bb0:	f803 2cb6 	strb.w	r2, [r3, #-182]
                        	        keycodes[tracker][3] = '\0';
 8002bb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	33d0      	adds	r3, #208	@ 0xd0
 8002bbc:	443b      	add	r3, r7
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f803 2cb5 	strb.w	r2, [r3, #-181]
 8002bc4:	e031      	b.n	8002c2a <main+0x552>
                        	} else if (keycode >= 0x1E && keycode <= 0x27) {
 8002bc6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002bca:	2b1d      	cmp	r3, #29
 8002bcc:	d92d      	bls.n	8002c2a <main+0x552>
 8002bce:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002bd2:	2b27      	cmp	r3, #39	@ 0x27
 8002bd4:	d829      	bhi.n	8002c2a <main+0x552>
                        	        keycodes[tracker][0] = '0';
 8002bd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	33d0      	adds	r3, #208	@ 0xd0
 8002bde:	443b      	add	r3, r7
 8002be0:	2230      	movs	r2, #48	@ 0x30
 8002be2:	f803 2cb8 	strb.w	r2, [r3, #-184]
                        	        keycodes[tracker][1] = 'x';
 8002be6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	33d0      	adds	r3, #208	@ 0xd0
 8002bee:	443b      	add	r3, r7
 8002bf0:	2278      	movs	r2, #120	@ 0x78
 8002bf2:	f803 2cb7 	strb.w	r2, [r3, #-183]
                        	        keycodes[tracker][2] = (keycode == 0x27) ? '0' : ('1' + (keycode - 0x1E));
 8002bf6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002bfa:	2b27      	cmp	r3, #39	@ 0x27
 8002bfc:	d005      	beq.n	8002c0a <main+0x532>
 8002bfe:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	3313      	adds	r3, #19
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	e000      	b.n	8002c0c <main+0x534>
 8002c0a:	2230      	movs	r2, #48	@ 0x30
 8002c0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	33d0      	adds	r3, #208	@ 0xd0
 8002c14:	443b      	add	r3, r7
 8002c16:	f803 2cb6 	strb.w	r2, [r3, #-182]
                        	        keycodes[tracker][3] = '\0';
 8002c1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	33d0      	adds	r3, #208	@ 0xd0
 8002c22:	443b      	add	r3, r7
 8002c24:	2200      	movs	r2, #0
 8002c26:	f803 2cb5 	strb.w	r2, [r3, #-181]
                        	    }

                            key_percents[tracker] = (k->state.distance_8bits * 100) / 255;
 8002c2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c2c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002c30:	461a      	mov	r2, r3
 8002c32:	2364      	movs	r3, #100	@ 0x64
 8002c34:	fb02 f303 	mul.w	r3, r2, r3
 8002c38:	4a48      	ldr	r2, [pc, #288]	@ (8002d5c <main+0x684>)
 8002c3a:	fb82 1203 	smull	r1, r2, r2, r3
 8002c3e:	441a      	add	r2, r3
 8002c40:	11d2      	asrs	r2, r2, #7
 8002c42:	17db      	asrs	r3, r3, #31
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	b2d9      	uxtb	r1, r3
 8002c48:	f107 0210 	add.w	r2, r7, #16
 8002c4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c50:	4413      	add	r3, r2
 8002c52:	460a      	mov	r2, r1
 8002c54:	701a      	strb	r2, [r3, #0]
                            tracker++;
 8002c56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c60:	e000      	b.n	8002c64 <main+0x58c>
            if (k->state.distance_8bits >= 15 && k->layers[current_layer].type == KEY_TYPE_MODIFIER) {
 8002c62:	bf00      	nop
    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 8002c64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c68:	3301      	adds	r3, #1
 8002c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c72:	2b0f      	cmp	r3, #15
 8002c74:	f77f aed2 	ble.w	8002a1c <main+0x344>
                        }
        }

    for (int i = 1; i <= 3; i++) {
 8002c78:	2301      	movs	r3, #1
 8002c7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c7e:	e04f      	b.n	8002d20 <main+0x648>
      if (keycodes[i - 1][0] != '\0') {
 8002c80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c84:	3b01      	subs	r3, #1
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	33d0      	adds	r3, #208	@ 0xd0
 8002c8a:	443b      	add	r3, r7
 8002c8c:	f813 3cb8 	ldrb.w	r3, [r3, #-184]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d040      	beq.n	8002d16 <main+0x63e>
        int x = MOD_WIDTH + (i - 1) * KEY_WIDTH + 4;
 8002c94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c98:	1e5a      	subs	r2, r3, #1
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	332a      	adds	r3, #42	@ 0x2a
 8002ca4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        ssd1306_SetCursor(x, label_row_top);
 8002ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fd16 	bl	80036e8 <ssd1306_SetCursor>
        ssd1306_WriteString((char *)keycodes[i - 1], Font_6x8, Black);
 8002cbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	f107 0218 	add.w	r2, r7, #24
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	18d0      	adds	r0, r2, r3
 8002cca:	4b23      	ldr	r3, [pc, #140]	@ (8002d58 <main+0x680>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	9200      	str	r2, [sp, #0]
 8002cd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cd2:	f000 fce3 	bl	800369c <ssd1306_WriteString>

        char buf[6];
        sprintf(buf, "%d%%", key_percents[i - 1]);
 8002cd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	33d0      	adds	r3, #208	@ 0xd0
 8002cde:	443b      	add	r3, r7
 8002ce0:	f813 3cc0 	ldrb.w	r3, [r3, #-192]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	f107 0308 	add.w	r3, r7, #8
 8002cea:	491d      	ldr	r1, [pc, #116]	@ (8002d60 <main+0x688>)
 8002cec:	4618      	mov	r0, r3
 8002cee:	f00a f883 	bl	800cdf8 <siprintf>
        ssd1306_SetCursor(x, percent_row_top);
 8002cf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fcf1 	bl	80036e8 <ssd1306_SetCursor>
        ssd1306_WriteString(buf, Font_6x8, Black);
 8002d06:	4b14      	ldr	r3, [pc, #80]	@ (8002d58 <main+0x680>)
 8002d08:	f107 0008 	add.w	r0, r7, #8
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	9200      	str	r2, [sp, #0]
 8002d10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d12:	f000 fcc3 	bl	800369c <ssd1306_WriteString>
    for (int i = 1; i <= 3; i++) {
 8002d16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	ddab      	ble.n	8002c80 <main+0x5a8>
      }
    }

    for (int i = 4; i <= 6; i++) {
 8002d28:	2304      	movs	r3, #4
 8002d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002d2e:	e067      	b.n	8002e00 <main+0x728>
 8002d30:	20000310 	.word	0x20000310
 8002d34:	20000cf0 	.word	0x20000cf0
 8002d38:	0800e858 	.word	0x0800e858
 8002d3c:	0800e860 	.word	0x0800e860
 8002d40:	0800e868 	.word	0x0800e868
 8002d44:	0800e870 	.word	0x0800e870
 8002d48:	0800e878 	.word	0x0800e878
 8002d4c:	0800e880 	.word	0x0800e880
 8002d50:	0800e888 	.word	0x0800e888
 8002d54:	0800e890 	.word	0x0800e890
 8002d58:	0800f100 	.word	0x0800f100
 8002d5c:	80808081 	.word	0x80808081
 8002d60:	0800e898 	.word	0x0800e898
      if (keycodes[i - 1][0] != '\0') {
 8002d64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	33d0      	adds	r3, #208	@ 0xd0
 8002d6e:	443b      	add	r3, r7
 8002d70:	f813 3cb8 	ldrb.w	r3, [r3, #-184]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d03e      	beq.n	8002df6 <main+0x71e>
        int x = MOD_WIDTH + (i - 4) * KEY_WIDTH + 4;
 8002d78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d7c:	1f1a      	subs	r2, r3, #4
 8002d7e:	4613      	mov	r3, r2
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	332a      	adds	r3, #42	@ 0x2a
 8002d88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        ssd1306_SetCursor(x, label_row_bot);
 8002d8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fca4 	bl	80036e8 <ssd1306_SetCursor>
        ssd1306_WriteString((char *)keycodes[i - 1], Font_6x8, Black);
 8002da0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002da4:	3b01      	subs	r3, #1
 8002da6:	f107 0218 	add.w	r2, r7, #24
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	18d0      	adds	r0, r2, r3
 8002dae:	4b18      	ldr	r3, [pc, #96]	@ (8002e10 <main+0x738>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	9200      	str	r2, [sp, #0]
 8002db4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002db6:	f000 fc71 	bl	800369c <ssd1306_WriteString>

        char buf[6];
        sprintf(buf, "%d%%", key_percents[i - 1]);
 8002dba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	33d0      	adds	r3, #208	@ 0xd0
 8002dc2:	443b      	add	r3, r7
 8002dc4:	f813 3cc0 	ldrb.w	r3, [r3, #-192]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	463b      	mov	r3, r7
 8002dcc:	4911      	ldr	r1, [pc, #68]	@ (8002e14 <main+0x73c>)
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f00a f812 	bl	800cdf8 <siprintf>
        ssd1306_SetCursor(x, percent_row_bot);
 8002dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fc80 	bl	80036e8 <ssd1306_SetCursor>
        ssd1306_WriteString(buf, Font_6x8, Black);
 8002de8:	4b09      	ldr	r3, [pc, #36]	@ (8002e10 <main+0x738>)
 8002dea:	4638      	mov	r0, r7
 8002dec:	2200      	movs	r2, #0
 8002dee:	9200      	str	r2, [sp, #0]
 8002df0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002df2:	f000 fc53 	bl	800369c <ssd1306_WriteString>
    for (int i = 4; i <= 6; i++) {
 8002df6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002e00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e04:	2b06      	cmp	r3, #6
 8002e06:	ddad      	ble.n	8002d64 <main+0x68c>
      }
    }

    ssd1306_UpdateScreen();
 8002e08:	f000 fae2 	bl	80033d0 <ssd1306_UpdateScreen>
  while (1) {
 8002e0c:	e486      	b.n	800271c <main+0x44>
 8002e0e:	bf00      	nop
 8002e10:	0800f100 	.word	0x0800f100
 8002e14:	0800e898 	.word	0x0800e898

08002e18 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b094      	sub	sp, #80	@ 0x50
 8002e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e1e:	f107 0320 	add.w	r3, r7, #32
 8002e22:	2230      	movs	r2, #48	@ 0x30
 8002e24:	2100      	movs	r1, #0
 8002e26:	4618      	mov	r0, r3
 8002e28:	f00a f84b 	bl	800cec2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e2c:	f107 030c 	add.w	r3, r7, #12
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	4b27      	ldr	r3, [pc, #156]	@ (8002ee0 <SystemClock_Config+0xc8>)
 8002e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e44:	4a26      	ldr	r2, [pc, #152]	@ (8002ee0 <SystemClock_Config+0xc8>)
 8002e46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e4c:	4b24      	ldr	r3, [pc, #144]	@ (8002ee0 <SystemClock_Config+0xc8>)
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e58:	2300      	movs	r3, #0
 8002e5a:	607b      	str	r3, [r7, #4]
 8002e5c:	4b21      	ldr	r3, [pc, #132]	@ (8002ee4 <SystemClock_Config+0xcc>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a20      	ldr	r2, [pc, #128]	@ (8002ee4 <SystemClock_Config+0xcc>)
 8002e62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee4 <SystemClock_Config+0xcc>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e74:	2301      	movs	r3, #1
 8002e76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e82:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8002e88:	230d      	movs	r3, #13
 8002e8a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002e8c:	23a8      	movs	r3, #168	@ 0xa8
 8002e8e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002e90:	2304      	movs	r3, #4
 8002e92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002e94:	2307      	movs	r3, #7
 8002e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002e98:	f107 0320 	add.w	r3, r7, #32
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f002 fef3 	bl	8005c88 <HAL_RCC_OscConfig>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <SystemClock_Config+0x94>
    Error_Handler();
 8002ea8:	f000 f9d3 	bl	8003252 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002eac:	230f      	movs	r3, #15
 8002eae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ebc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002ec2:	f107 030c 	add.w	r3, r7, #12
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f003 f955 	bl	8006178 <HAL_RCC_ClockConfig>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <SystemClock_Config+0xc0>
    Error_Handler();
 8002ed4:	f000 f9bd 	bl	8003252 <Error_Handler>
  }
}
 8002ed8:	bf00      	nop
 8002eda:	3750      	adds	r7, #80	@ 0x50
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40007000 	.word	0x40007000

08002ee8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002eee:	463b      	mov	r3, r7
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8002efa:	4b21      	ldr	r3, [pc, #132]	@ (8002f80 <MX_ADC1_Init+0x98>)
 8002efc:	4a21      	ldr	r2, [pc, #132]	@ (8002f84 <MX_ADC1_Init+0x9c>)
 8002efe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f00:	4b1f      	ldr	r3, [pc, #124]	@ (8002f80 <MX_ADC1_Init+0x98>)
 8002f02:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002f06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f08:	4b1d      	ldr	r3, [pc, #116]	@ (8002f80 <MX_ADC1_Init+0x98>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002f80 <MX_ADC1_Init+0x98>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002f14:	4b1a      	ldr	r3, [pc, #104]	@ (8002f80 <MX_ADC1_Init+0x98>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f1a:	4b19      	ldr	r3, [pc, #100]	@ (8002f80 <MX_ADC1_Init+0x98>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f22:	4b17      	ldr	r3, [pc, #92]	@ (8002f80 <MX_ADC1_Init+0x98>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f28:	4b15      	ldr	r3, [pc, #84]	@ (8002f80 <MX_ADC1_Init+0x98>)
 8002f2a:	4a17      	ldr	r2, [pc, #92]	@ (8002f88 <MX_ADC1_Init+0xa0>)
 8002f2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f2e:	4b14      	ldr	r3, [pc, #80]	@ (8002f80 <MX_ADC1_Init+0x98>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002f34:	4b12      	ldr	r3, [pc, #72]	@ (8002f80 <MX_ADC1_Init+0x98>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002f3a:	4b11      	ldr	r3, [pc, #68]	@ (8002f80 <MX_ADC1_Init+0x98>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f42:	4b0f      	ldr	r3, [pc, #60]	@ (8002f80 <MX_ADC1_Init+0x98>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002f48:	480d      	ldr	r0, [pc, #52]	@ (8002f80 <MX_ADC1_Init+0x98>)
 8002f4a:	f001 f831 	bl	8003fb0 <HAL_ADC_Init>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_ADC1_Init+0x70>
    Error_Handler();
 8002f54:	f000 f97d 	bl	8003252 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 8002f58:	2309      	movs	r3, #9
 8002f5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002f64:	463b      	mov	r3, r7
 8002f66:	4619      	mov	r1, r3
 8002f68:	4805      	ldr	r0, [pc, #20]	@ (8002f80 <MX_ADC1_Init+0x98>)
 8002f6a:	f001 f9e5 	bl	8004338 <HAL_ADC_ConfigChannel>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <MX_ADC1_Init+0x90>
    Error_Handler();
 8002f74:	f000 f96d 	bl	8003252 <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */

  // memcpy(&ADC_channel_Config, &sConfig, sizeof(ADC_ChannelConfTypeDef));

  /* USER CODE END ADC1_Init 2 */
}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	2000075c 	.word	0x2000075c
 8002f84:	40012000 	.word	0x40012000
 8002f88:	0f000001 	.word	0x0f000001

08002f8c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f90:	4b12      	ldr	r3, [pc, #72]	@ (8002fdc <MX_I2C1_Init+0x50>)
 8002f92:	4a13      	ldr	r2, [pc, #76]	@ (8002fe0 <MX_I2C1_Init+0x54>)
 8002f94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002f96:	4b11      	ldr	r3, [pc, #68]	@ (8002fdc <MX_I2C1_Init+0x50>)
 8002f98:	4a12      	ldr	r2, [pc, #72]	@ (8002fe4 <MX_I2C1_Init+0x58>)
 8002f9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002fdc <MX_I2C1_Init+0x50>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8002fdc <MX_I2C1_Init+0x50>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002fdc <MX_I2C1_Init+0x50>)
 8002faa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002fae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002fdc <MX_I2C1_Init+0x50>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002fb6:	4b09      	ldr	r3, [pc, #36]	@ (8002fdc <MX_I2C1_Init+0x50>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fbc:	4b07      	ldr	r3, [pc, #28]	@ (8002fdc <MX_I2C1_Init+0x50>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fc2:	4b06      	ldr	r3, [pc, #24]	@ (8002fdc <MX_I2C1_Init+0x50>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002fc8:	4804      	ldr	r0, [pc, #16]	@ (8002fdc <MX_I2C1_Init+0x50>)
 8002fca:	f002 f8a1 	bl	8005110 <HAL_I2C_Init>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_I2C1_Init+0x4c>
    Error_Handler();
 8002fd4:	f000 f93d 	bl	8003252 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	200007a4 	.word	0x200007a4
 8002fe0:	40005400 	.word	0x40005400
 8002fe4:	00061a80 	.word	0x00061a80

08002fe8 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002fec:	4b14      	ldr	r3, [pc, #80]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002ff2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002ff4:	4b12      	ldr	r3, [pc, #72]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ff6:	2204      	movs	r2, #4
 8002ff8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002ffa:	4b11      	ldr	r3, [pc, #68]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003000:	4b0f      	ldr	r3, [pc, #60]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003002:	2200      	movs	r2, #0
 8003004:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003006:	4b0e      	ldr	r3, [pc, #56]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003008:	2202      	movs	r2, #2
 800300a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800300c:	4b0c      	ldr	r3, [pc, #48]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800300e:	2200      	movs	r2, #0
 8003010:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003012:	4b0b      	ldr	r3, [pc, #44]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003014:	2200      	movs	r2, #0
 8003016:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003018:	4b09      	ldr	r3, [pc, #36]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800301a:	2200      	movs	r2, #0
 800301c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800301e:	4b08      	ldr	r3, [pc, #32]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003020:	2200      	movs	r2, #0
 8003022:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003024:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003026:	2200      	movs	r2, #0
 8003028:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 800302a:	4805      	ldr	r0, [pc, #20]	@ (8003040 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800302c:	f002 fd1d 	bl	8005a6a <HAL_PCD_Init>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_USB_OTG_FS_PCD_Init+0x52>
    Error_Handler();
 8003036:	f000 f90c 	bl	8003252 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	200007f8 	.word	0x200007f8

08003044 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304a:	f107 030c 	add.w	r3, r7, #12
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	605a      	str	r2, [r3, #4]
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	60da      	str	r2, [r3, #12]
 8003058:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	4b20      	ldr	r3, [pc, #128]	@ (80030e0 <MX_GPIO_Init+0x9c>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003062:	4a1f      	ldr	r2, [pc, #124]	@ (80030e0 <MX_GPIO_Init+0x9c>)
 8003064:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003068:	6313      	str	r3, [r2, #48]	@ 0x30
 800306a:	4b1d      	ldr	r3, [pc, #116]	@ (80030e0 <MX_GPIO_Init+0x9c>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	607b      	str	r3, [r7, #4]
 800307a:	4b19      	ldr	r3, [pc, #100]	@ (80030e0 <MX_GPIO_Init+0x9c>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307e:	4a18      	ldr	r2, [pc, #96]	@ (80030e0 <MX_GPIO_Init+0x9c>)
 8003080:	f043 0302 	orr.w	r3, r3, #2
 8003084:	6313      	str	r3, [r2, #48]	@ 0x30
 8003086:	4b16      	ldr	r3, [pc, #88]	@ (80030e0 <MX_GPIO_Init+0x9c>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	607b      	str	r3, [r7, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	603b      	str	r3, [r7, #0]
 8003096:	4b12      	ldr	r3, [pc, #72]	@ (80030e0 <MX_GPIO_Init+0x9c>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309a:	4a11      	ldr	r2, [pc, #68]	@ (80030e0 <MX_GPIO_Init+0x9c>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a2:	4b0f      	ldr	r3, [pc, #60]	@ (80030e0 <MX_GPIO_Init+0x9c>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 80030ae:	2200      	movs	r2, #0
 80030b0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80030b4:	480b      	ldr	r0, [pc, #44]	@ (80030e4 <MX_GPIO_Init+0xa0>)
 80030b6:	f002 f811 	bl	80050dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80030ba:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80030be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c0:	2301      	movs	r3, #1
 80030c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030cc:	f107 030c 	add.w	r3, r7, #12
 80030d0:	4619      	mov	r1, r3
 80030d2:	4804      	ldr	r0, [pc, #16]	@ (80030e4 <MX_GPIO_Init+0xa0>)
 80030d4:	f001 fe7e 	bl	8004dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80030d8:	bf00      	nop
 80030da:	3720      	adds	r7, #32
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40020400 	.word	0x40020400

080030e8 <keyboard_read_config>:

/* USER CODE BEGIN 4 */

// MARK: keyboard_* functions

void keyboard_read_config() {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  memcpy(&keyboard_user_config, (uint32_t *)CONFIG_ADDRESS, sizeof(keyboard_user_config));
 80030ec:	4a05      	ldr	r2, [pc, #20]	@ (8003104 <keyboard_read_config+0x1c>)
 80030ee:	4b06      	ldr	r3, [pc, #24]	@ (8003108 <keyboard_read_config+0x20>)
 80030f0:	4610      	mov	r0, r2
 80030f2:	4619      	mov	r1, r3
 80030f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80030f8:	461a      	mov	r2, r3
 80030fa:	f009 ffba 	bl	800d072 <memcpy>
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000000 	.word	0x20000000
 8003108:	08040000 	.word	0x08040000

0800310c <keyboard_write_config>:

uint8_t keyboard_write_config(uint8_t *buffer, uint16_t offset, uint16_t size) {
 800310c:	b5b0      	push	{r4, r5, r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	807b      	strh	r3, [r7, #2]
 8003118:	4613      	mov	r3, r2
 800311a:	803b      	strh	r3, [r7, #0]
  if (offset >= sizeof(keyboard_user_config)) {
 800311c:	887b      	ldrh	r3, [r7, #2]
 800311e:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 8003122:	d301      	bcc.n	8003128 <keyboard_write_config+0x1c>
    return 0;
 8003124:	2300      	movs	r3, #0
 8003126:	e02d      	b.n	8003184 <keyboard_write_config+0x78>
  }

  HAL_FLASH_Unlock();
 8003128:	f001 fc9a 	bl	8004a60 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 800312c:	4b17      	ldr	r3, [pc, #92]	@ (800318c <keyboard_write_config+0x80>)
 800312e:	22b3      	movs	r2, #179	@ 0xb3
 8003130:	60da      	str	r2, [r3, #12]
  FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 8003132:	2102      	movs	r1, #2
 8003134:	2006      	movs	r0, #6
 8003136:	f001 fe05 	bl	8004d44 <FLASH_Erase_Sector>
  for (uint16_t i = offset; i < size; i++) {
 800313a:	887b      	ldrh	r3, [r7, #2]
 800313c:	81fb      	strh	r3, [r7, #14]
 800313e:	e01a      	b.n	8003176 <keyboard_write_config+0x6a>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, CONFIG_ADDRESS + i, buffer[i]) != HAL_OK) {
 8003140:	89fb      	ldrh	r3, [r7, #14]
 8003142:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8003146:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 800314a:	4619      	mov	r1, r3
 800314c:	89fb      	ldrh	r3, [r7, #14]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	4413      	add	r3, r2
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2200      	movs	r2, #0
 8003158:	461c      	mov	r4, r3
 800315a:	4615      	mov	r5, r2
 800315c:	4622      	mov	r2, r4
 800315e:	462b      	mov	r3, r5
 8003160:	2000      	movs	r0, #0
 8003162:	f001 fc29 	bl	80049b8 <HAL_FLASH_Program>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <keyboard_write_config+0x64>
      HAL_FLASH_Lock();
 800316c:	f001 fc9a 	bl	8004aa4 <HAL_FLASH_Lock>
  for (uint16_t i = offset; i < size; i++) {
 8003170:	89fb      	ldrh	r3, [r7, #14]
 8003172:	3301      	adds	r3, #1
 8003174:	81fb      	strh	r3, [r7, #14]
 8003176:	89fa      	ldrh	r2, [r7, #14]
 8003178:	883b      	ldrh	r3, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d3e0      	bcc.n	8003140 <keyboard_write_config+0x34>
    };
  }
  HAL_FLASH_Lock();
 800317e:	f001 fc91 	bl	8004aa4 <HAL_FLASH_Lock>
  return 1;
 8003182:	2301      	movs	r3, #1
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bdb0      	pop	{r4, r5, r7, pc}
 800318c:	40023c00 	.word	0x40023c00

08003190 <keyboard_select_amux>:

void keyboard_select_amux(uint8_t amux_channel) {
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	71fb      	strb	r3, [r7, #7]
  // TODO: set GPIOs at the same time using bitmap on register
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]
 800319e:	e013      	b.n	80031c8 <keyboard_select_amux+0x38>
    HAL_GPIO_WritePin(GPIOB, amux_select_pins[i], (amux_channel >> i) & 1);
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	4a0d      	ldr	r2, [pc, #52]	@ (80031d8 <keyboard_select_amux+0x48>)
 80031a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a8:	b299      	uxth	r1, r3
 80031aa:	79fa      	ldrb	r2, [r7, #7]
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	fa42 f303 	asr.w	r3, r2, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	4807      	ldr	r0, [pc, #28]	@ (80031dc <keyboard_select_amux+0x4c>)
 80031be:	f001 ff8d 	bl	80050dc <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	3301      	adds	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d9e8      	bls.n	80031a0 <keyboard_select_amux+0x10>
  }
}
 80031ce:	bf00      	nop
 80031d0:	bf00      	nop
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	0800eb00 	.word	0x0800eb00
 80031dc:	40020400 	.word	0x40020400

080031e0 <keyboard_select_adc>:

void keyboard_select_adc(uint8_t adc_channel) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	71fb      	strb	r3, [r7, #7]
  ADC_channel_Config.Channel = adc_channels[adc_channel];
 80031ea:	2209      	movs	r2, #9
 80031ec:	4b08      	ldr	r3, [pc, #32]	@ (8003210 <keyboard_select_adc+0x30>)
 80031ee:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &ADC_channel_Config);
 80031f0:	4907      	ldr	r1, [pc, #28]	@ (8003210 <keyboard_select_adc+0x30>)
 80031f2:	4808      	ldr	r0, [pc, #32]	@ (8003214 <keyboard_select_adc+0x34>)
 80031f4:	f001 f8a0 	bl	8004338 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 80031f8:	4806      	ldr	r0, [pc, #24]	@ (8003214 <keyboard_select_adc+0x34>)
 80031fa:	f000 ff1d 	bl	8004038 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 80031fe:	2101      	movs	r1, #1
 8003200:	4804      	ldr	r0, [pc, #16]	@ (8003214 <keyboard_select_adc+0x34>)
 8003202:	f001 f800 	bl	8004206 <HAL_ADC_PollForConversion>
}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000cdc 	.word	0x20000cdc
 8003214:	2000075c 	.word	0x2000075c

08003218 <keyboard_read_adc>:

uint16_t keyboard_read_adc() {
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 800321c:	4803      	ldr	r0, [pc, #12]	@ (800322c <keyboard_read_adc+0x14>)
 800321e:	f001 f87d 	bl	800431c <HAL_ADC_GetValue>
 8003222:	4603      	mov	r3, r0
 8003224:	b29b      	uxth	r3, r3
}
 8003226:	4618      	mov	r0, r3
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	2000075c 	.word	0x2000075c

08003230 <keyboard_close_adc>:

void keyboard_close_adc() {
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  HAL_ADC_Stop(&hadc1);
 8003234:	4802      	ldr	r0, [pc, #8]	@ (8003240 <keyboard_close_adc+0x10>)
 8003236:	f000 ffb3 	bl	80041a0 <HAL_ADC_Stop>
}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	2000075c 	.word	0x2000075c

08003244 <keyboard_get_time>:

uint32_t keyboard_get_time() {
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003248:	f000 fe82 	bl	8003f50 <HAL_GetTick>
 800324c:	4603      	mov	r3, r0
}
 800324e:	4618      	mov	r0, r3
 8003250:	bd80      	pop	{r7, pc}

08003252 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003252:	b480      	push	{r7}
 8003254:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003256:	b672      	cpsid	i
}
 8003258:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800325a:	bf00      	nop
 800325c:	e7fd      	b.n	800325a <Error_Handler+0x8>

0800325e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800325e:	b480      	push	{r7}
 8003260:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003262:	bf00      	nop
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af04      	add	r7, sp, #16
 8003272:	4603      	mov	r3, r0
 8003274:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, OLED_TIMEOUT_MS);
 8003276:	230a      	movs	r3, #10
 8003278:	9302      	str	r3, [sp, #8]
 800327a:	2301      	movs	r3, #1
 800327c:	9301      	str	r3, [sp, #4]
 800327e:	1dfb      	adds	r3, r7, #7
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	2301      	movs	r3, #1
 8003284:	2200      	movs	r2, #0
 8003286:	2178      	movs	r1, #120	@ 0x78
 8003288:	4803      	ldr	r0, [pc, #12]	@ (8003298 <ssd1306_WriteCommand+0x2c>)
 800328a:	f002 f885 	bl	8005398 <HAL_I2C_Mem_Write>
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	200007a4 	.word	0x200007a4

0800329c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af04      	add	r7, sp, #16
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, OLED_TIMEOUT_MS);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	220a      	movs	r2, #10
 80032ac:	9202      	str	r2, [sp, #8]
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	2301      	movs	r3, #1
 80032b6:	2240      	movs	r2, #64	@ 0x40
 80032b8:	2178      	movs	r1, #120	@ 0x78
 80032ba:	4803      	ldr	r0, [pc, #12]	@ (80032c8 <ssd1306_WriteData+0x2c>)
 80032bc:	f002 f86c 	bl	8005398 <HAL_I2C_Mem_Write>
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	200007a4 	.word	0x200007a4

080032cc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80032d0:	f7ff ffc5 	bl	800325e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80032d4:	2064      	movs	r0, #100	@ 0x64
 80032d6:	f000 fe47 	bl	8003f68 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80032da:	2000      	movs	r0, #0
 80032dc:	f000 fad2 	bl	8003884 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80032e0:	2020      	movs	r0, #32
 80032e2:	f7ff ffc3 	bl	800326c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80032e6:	2000      	movs	r0, #0
 80032e8:	f7ff ffc0 	bl	800326c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80032ec:	20b0      	movs	r0, #176	@ 0xb0
 80032ee:	f7ff ffbd 	bl	800326c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 80032f2:	20c0      	movs	r0, #192	@ 0xc0
 80032f4:	f7ff ffba 	bl	800326c <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80032f8:	2000      	movs	r0, #0
 80032fa:	f7ff ffb7 	bl	800326c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80032fe:	2010      	movs	r0, #16
 8003300:	f7ff ffb4 	bl	800326c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003304:	2040      	movs	r0, #64	@ 0x40
 8003306:	f7ff ffb1 	bl	800326c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800330a:	20ff      	movs	r0, #255	@ 0xff
 800330c:	f000 faa7 	bl	800385e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8003310:	20a0      	movs	r0, #160	@ 0xa0
 8003312:	f7ff ffab 	bl	800326c <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
 8003316:	20a7      	movs	r0, #167	@ 0xa7
 8003318:	f7ff ffa8 	bl	800326c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800331c:	20a8      	movs	r0, #168	@ 0xa8
 800331e:	f7ff ffa5 	bl	800326c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003322:	203f      	movs	r0, #63	@ 0x3f
 8003324:	f7ff ffa2 	bl	800326c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003328:	20a4      	movs	r0, #164	@ 0xa4
 800332a:	f7ff ff9f 	bl	800326c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800332e:	20d3      	movs	r0, #211	@ 0xd3
 8003330:	f7ff ff9c 	bl	800326c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003334:	2000      	movs	r0, #0
 8003336:	f7ff ff99 	bl	800326c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800333a:	20d5      	movs	r0, #213	@ 0xd5
 800333c:	f7ff ff96 	bl	800326c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003340:	20f0      	movs	r0, #240	@ 0xf0
 8003342:	f7ff ff93 	bl	800326c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003346:	20d9      	movs	r0, #217	@ 0xd9
 8003348:	f7ff ff90 	bl	800326c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800334c:	2022      	movs	r0, #34	@ 0x22
 800334e:	f7ff ff8d 	bl	800326c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003352:	20da      	movs	r0, #218	@ 0xda
 8003354:	f7ff ff8a 	bl	800326c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003358:	2012      	movs	r0, #18
 800335a:	f7ff ff87 	bl	800326c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800335e:	20db      	movs	r0, #219	@ 0xdb
 8003360:	f7ff ff84 	bl	800326c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003364:	2020      	movs	r0, #32
 8003366:	f7ff ff81 	bl	800326c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800336a:	208d      	movs	r0, #141	@ 0x8d
 800336c:	f7ff ff7e 	bl	800326c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003370:	2014      	movs	r0, #20
 8003372:	f7ff ff7b 	bl	800326c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003376:	2001      	movs	r0, #1
 8003378:	f000 fa84 	bl	8003884 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800337c:	2000      	movs	r0, #0
 800337e:	f000 f80f 	bl	80033a0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003382:	f000 f825 	bl	80033d0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003386:	4b05      	ldr	r3, [pc, #20]	@ (800339c <ssd1306_Init+0xd0>)
 8003388:	2200      	movs	r2, #0
 800338a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800338c:	4b03      	ldr	r3, [pc, #12]	@ (800339c <ssd1306_Init+0xd0>)
 800338e:	2200      	movs	r2, #0
 8003390:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003392:	4b02      	ldr	r3, [pc, #8]	@ (800339c <ssd1306_Init+0xd0>)
 8003394:	2201      	movs	r2, #1
 8003396:	711a      	strb	r2, [r3, #4]
}
 8003398:	bf00      	nop
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000cf4 	.word	0x20000cf4

080033a0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <ssd1306_Fill+0x14>
 80033b0:	2300      	movs	r3, #0
 80033b2:	e000      	b.n	80033b6 <ssd1306_Fill+0x16>
 80033b4:	23ff      	movs	r3, #255	@ 0xff
 80033b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033ba:	4619      	mov	r1, r3
 80033bc:	4803      	ldr	r0, [pc, #12]	@ (80033cc <ssd1306_Fill+0x2c>)
 80033be:	f009 fd80 	bl	800cec2 <memset>
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000cfc 	.word	0x20000cfc

080033d0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
uint8_t SSD1306_Buffer[SSD1306_WIDTH * (SSD1306_HEIGHT / 8)] = {0};
uint8_t SSD1306_LastBuffer[SSD1306_WIDTH * (SSD1306_HEIGHT / 8)] = {0};

void ssd1306_UpdateScreen(void) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af00      	add	r7, sp, #0
    int anyPageChanged = 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
    for (uint8_t page = 0; page < (SSD1306_HEIGHT / 8); page++) {
 80033da:	2300      	movs	r3, #0
 80033dc:	76fb      	strb	r3, [r7, #27]
 80033de:	e06a      	b.n	80034b6 <ssd1306_UpdateScreen+0xe6>
        uint16_t base = page * SSD1306_WIDTH;
 80033e0:	7efb      	ldrb	r3, [r7, #27]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	01db      	lsls	r3, r3, #7
 80033e6:	813b      	strh	r3, [r7, #8]
        int pageChanged = 0;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
        int firstChanged = -1, lastChanged = -1;
 80033ec:	f04f 33ff 	mov.w	r3, #4294967295
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	f04f 33ff 	mov.w	r3, #4294967295
 80033f6:	60fb      	str	r3, [r7, #12]

        // Find the first and last changed column in this page
        for (uint16_t col = 0; col < SSD1306_WIDTH; col++) {
 80033f8:	2300      	movs	r3, #0
 80033fa:	817b      	strh	r3, [r7, #10]
 80033fc:	e018      	b.n	8003430 <ssd1306_UpdateScreen+0x60>
            uint16_t index = base + col;
 80033fe:	893a      	ldrh	r2, [r7, #8]
 8003400:	897b      	ldrh	r3, [r7, #10]
 8003402:	4413      	add	r3, r2
 8003404:	80fb      	strh	r3, [r7, #6]
            if (SSD1306_Buffer[index] != SSD1306_LastBuffer[index]) {
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	4a2f      	ldr	r2, [pc, #188]	@ (80034c8 <ssd1306_UpdateScreen+0xf8>)
 800340a:	5cd2      	ldrb	r2, [r2, r3]
 800340c:	88fb      	ldrh	r3, [r7, #6]
 800340e:	492f      	ldr	r1, [pc, #188]	@ (80034cc <ssd1306_UpdateScreen+0xfc>)
 8003410:	5ccb      	ldrb	r3, [r1, r3]
 8003412:	429a      	cmp	r2, r3
 8003414:	d009      	beq.n	800342a <ssd1306_UpdateScreen+0x5a>
                if (firstChanged == -1) firstChanged = col;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341c:	d101      	bne.n	8003422 <ssd1306_UpdateScreen+0x52>
 800341e:	897b      	ldrh	r3, [r7, #10]
 8003420:	613b      	str	r3, [r7, #16]
                lastChanged = col;
 8003422:	897b      	ldrh	r3, [r7, #10]
 8003424:	60fb      	str	r3, [r7, #12]
                pageChanged = 1;
 8003426:	2301      	movs	r3, #1
 8003428:	617b      	str	r3, [r7, #20]
        for (uint16_t col = 0; col < SSD1306_WIDTH; col++) {
 800342a:	897b      	ldrh	r3, [r7, #10]
 800342c:	3301      	adds	r3, #1
 800342e:	817b      	strh	r3, [r7, #10]
 8003430:	897b      	ldrh	r3, [r7, #10]
 8003432:	2b7f      	cmp	r3, #127	@ 0x7f
 8003434:	d9e3      	bls.n	80033fe <ssd1306_UpdateScreen+0x2e>
            }
        }

        if (!pageChanged)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d038      	beq.n	80034ae <ssd1306_UpdateScreen+0xde>
            continue;
        anyPageChanged = 1;
 800343c:	2301      	movs	r3, #1
 800343e:	61fb      	str	r3, [r7, #28]

        // Write only the changed columns in this page
        ssd1306_WriteCommand(0xB0 + page);
 8003440:	7efb      	ldrb	r3, [r7, #27]
 8003442:	3b50      	subs	r3, #80	@ 0x50
 8003444:	b2db      	uxtb	r3, r3
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff ff10 	bl	800326c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + ((firstChanged + SSD1306_X_OFFSET_LOWER) & 0x0F));
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	b2db      	uxtb	r3, r3
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff ff08 	bl	800326c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + (((firstChanged + SSD1306_X_OFFSET_LOWER) >> 4) & 0x07));
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	111b      	asrs	r3, r3, #4
 8003460:	b2db      	uxtb	r3, r3
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	b2db      	uxtb	r3, r3
 8003468:	3310      	adds	r3, #16
 800346a:	b2db      	uxtb	r3, r3
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff fefd 	bl	800326c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[base + firstChanged], lastChanged - firstChanged + 1);
 8003472:	893a      	ldrh	r2, [r7, #8]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4413      	add	r3, r2
 8003478:	4a13      	ldr	r2, [pc, #76]	@ (80034c8 <ssd1306_UpdateScreen+0xf8>)
 800347a:	1898      	adds	r0, r3, r2
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	3301      	adds	r3, #1
 8003484:	4619      	mov	r1, r3
 8003486:	f7ff ff09 	bl	800329c <ssd1306_WriteData>

        // Copy new page data to last buffer for the changed range
        memcpy(&SSD1306_LastBuffer[base + firstChanged], &SSD1306_Buffer[base + firstChanged], lastChanged - firstChanged + 1);
 800348a:	893a      	ldrh	r2, [r7, #8]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4413      	add	r3, r2
 8003490:	4a0e      	ldr	r2, [pc, #56]	@ (80034cc <ssd1306_UpdateScreen+0xfc>)
 8003492:	1898      	adds	r0, r3, r2
 8003494:	893a      	ldrh	r2, [r7, #8]
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4413      	add	r3, r2
 800349a:	4a0b      	ldr	r2, [pc, #44]	@ (80034c8 <ssd1306_UpdateScreen+0xf8>)
 800349c:	1899      	adds	r1, r3, r2
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	3301      	adds	r3, #1
 80034a6:	461a      	mov	r2, r3
 80034a8:	f009 fde3 	bl	800d072 <memcpy>
 80034ac:	e000      	b.n	80034b0 <ssd1306_UpdateScreen+0xe0>
            continue;
 80034ae:	bf00      	nop
    for (uint8_t page = 0; page < (SSD1306_HEIGHT / 8); page++) {
 80034b0:	7efb      	ldrb	r3, [r7, #27]
 80034b2:	3301      	adds	r3, #1
 80034b4:	76fb      	strb	r3, [r7, #27]
 80034b6:	7efb      	ldrb	r3, [r7, #27]
 80034b8:	2b07      	cmp	r3, #7
 80034ba:	d991      	bls.n	80033e0 <ssd1306_UpdateScreen+0x10>
    }
    // If nothing changed, skip the update entirely
    if (!anyPageChanged) {
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	2b00      	cmp	r3, #0
        return;
    }
}
 80034c0:	3720      	adds	r7, #32
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000cfc 	.word	0x20000cfc
 80034cc:	200010fc 	.word	0x200010fc

080034d0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	71fb      	strb	r3, [r7, #7]
 80034da:	460b      	mov	r3, r1
 80034dc:	71bb      	strb	r3, [r7, #6]
 80034de:	4613      	mov	r3, r2
 80034e0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80034e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	db3d      	blt.n	8003566 <ssd1306_DrawPixel+0x96>
 80034ea:	79bb      	ldrb	r3, [r7, #6]
 80034ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80034ee:	d83a      	bhi.n	8003566 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80034f0:	797b      	ldrb	r3, [r7, #5]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d11a      	bne.n	800352c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80034f6:	79fa      	ldrb	r2, [r7, #7]
 80034f8:	79bb      	ldrb	r3, [r7, #6]
 80034fa:	08db      	lsrs	r3, r3, #3
 80034fc:	b2d8      	uxtb	r0, r3
 80034fe:	4603      	mov	r3, r0
 8003500:	01db      	lsls	r3, r3, #7
 8003502:	4413      	add	r3, r2
 8003504:	4a1b      	ldr	r2, [pc, #108]	@ (8003574 <ssd1306_DrawPixel+0xa4>)
 8003506:	5cd3      	ldrb	r3, [r2, r3]
 8003508:	b25a      	sxtb	r2, r3
 800350a:	79bb      	ldrb	r3, [r7, #6]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	2101      	movs	r1, #1
 8003512:	fa01 f303 	lsl.w	r3, r1, r3
 8003516:	b25b      	sxtb	r3, r3
 8003518:	4313      	orrs	r3, r2
 800351a:	b259      	sxtb	r1, r3
 800351c:	79fa      	ldrb	r2, [r7, #7]
 800351e:	4603      	mov	r3, r0
 8003520:	01db      	lsls	r3, r3, #7
 8003522:	4413      	add	r3, r2
 8003524:	b2c9      	uxtb	r1, r1
 8003526:	4a13      	ldr	r2, [pc, #76]	@ (8003574 <ssd1306_DrawPixel+0xa4>)
 8003528:	54d1      	strb	r1, [r2, r3]
 800352a:	e01d      	b.n	8003568 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800352c:	79fa      	ldrb	r2, [r7, #7]
 800352e:	79bb      	ldrb	r3, [r7, #6]
 8003530:	08db      	lsrs	r3, r3, #3
 8003532:	b2d8      	uxtb	r0, r3
 8003534:	4603      	mov	r3, r0
 8003536:	01db      	lsls	r3, r3, #7
 8003538:	4413      	add	r3, r2
 800353a:	4a0e      	ldr	r2, [pc, #56]	@ (8003574 <ssd1306_DrawPixel+0xa4>)
 800353c:	5cd3      	ldrb	r3, [r2, r3]
 800353e:	b25a      	sxtb	r2, r3
 8003540:	79bb      	ldrb	r3, [r7, #6]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	2101      	movs	r1, #1
 8003548:	fa01 f303 	lsl.w	r3, r1, r3
 800354c:	b25b      	sxtb	r3, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	b25b      	sxtb	r3, r3
 8003552:	4013      	ands	r3, r2
 8003554:	b259      	sxtb	r1, r3
 8003556:	79fa      	ldrb	r2, [r7, #7]
 8003558:	4603      	mov	r3, r0
 800355a:	01db      	lsls	r3, r3, #7
 800355c:	4413      	add	r3, r2
 800355e:	b2c9      	uxtb	r1, r1
 8003560:	4a04      	ldr	r2, [pc, #16]	@ (8003574 <ssd1306_DrawPixel+0xa4>)
 8003562:	54d1      	strb	r1, [r2, r3]
 8003564:	e000      	b.n	8003568 <ssd1306_DrawPixel+0x98>
        return;
 8003566:	bf00      	nop
    }
}
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	20000cfc 	.word	0x20000cfc

08003578 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b089      	sub	sp, #36	@ 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	4604      	mov	r4, r0
 8003580:	4638      	mov	r0, r7
 8003582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003586:	4623      	mov	r3, r4
 8003588:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	2b1f      	cmp	r3, #31
 800358e:	d902      	bls.n	8003596 <ssd1306_WriteChar+0x1e>
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	2b7e      	cmp	r3, #126	@ 0x7e
 8003594:	d901      	bls.n	800359a <ssd1306_WriteChar+0x22>
        return 0;
 8003596:	2300      	movs	r3, #0
 8003598:	e079      	b.n	800368e <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <ssd1306_WriteChar+0x34>
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	3b20      	subs	r3, #32
 80035a6:	4413      	add	r3, r2
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	e000      	b.n	80035ae <ssd1306_WriteChar+0x36>
 80035ac:	783b      	ldrb	r3, [r7, #0]
 80035ae:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80035b0:	4b39      	ldr	r3, [pc, #228]	@ (8003698 <ssd1306_WriteChar+0x120>)
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	7dfb      	ldrb	r3, [r7, #23]
 80035b8:	4413      	add	r3, r2
 80035ba:	2b80      	cmp	r3, #128	@ 0x80
 80035bc:	dc06      	bgt.n	80035cc <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80035be:	4b36      	ldr	r3, [pc, #216]	@ (8003698 <ssd1306_WriteChar+0x120>)
 80035c0:	885b      	ldrh	r3, [r3, #2]
 80035c2:	461a      	mov	r2, r3
 80035c4:	787b      	ldrb	r3, [r7, #1]
 80035c6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80035c8:	2b40      	cmp	r3, #64	@ 0x40
 80035ca:	dd01      	ble.n	80035d0 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	e05e      	b.n	800368e <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80035d0:	2300      	movs	r3, #0
 80035d2:	61fb      	str	r3, [r7, #28]
 80035d4:	e04d      	b.n	8003672 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	3b20      	subs	r3, #32
 80035dc:	7879      	ldrb	r1, [r7, #1]
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	4619      	mov	r1, r3
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	440b      	add	r3, r1
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80035f0:	2300      	movs	r3, #0
 80035f2:	61bb      	str	r3, [r7, #24]
 80035f4:	e036      	b.n	8003664 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d013      	beq.n	800362e <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003606:	4b24      	ldr	r3, [pc, #144]	@ (8003698 <ssd1306_WriteChar+0x120>)
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	b2da      	uxtb	r2, r3
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	b2db      	uxtb	r3, r3
 8003610:	4413      	add	r3, r2
 8003612:	b2d8      	uxtb	r0, r3
 8003614:	4b20      	ldr	r3, [pc, #128]	@ (8003698 <ssd1306_WriteChar+0x120>)
 8003616:	885b      	ldrh	r3, [r3, #2]
 8003618:	b2da      	uxtb	r2, r3
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	4413      	add	r3, r2
 8003620:	b2db      	uxtb	r3, r3
 8003622:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003626:	4619      	mov	r1, r3
 8003628:	f7ff ff52 	bl	80034d0 <ssd1306_DrawPixel>
 800362c:	e017      	b.n	800365e <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800362e:	4b1a      	ldr	r3, [pc, #104]	@ (8003698 <ssd1306_WriteChar+0x120>)
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	b2da      	uxtb	r2, r3
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	4413      	add	r3, r2
 800363a:	b2d8      	uxtb	r0, r3
 800363c:	4b16      	ldr	r3, [pc, #88]	@ (8003698 <ssd1306_WriteChar+0x120>)
 800363e:	885b      	ldrh	r3, [r3, #2]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	4413      	add	r3, r2
 8003648:	b2d9      	uxtb	r1, r3
 800364a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800364e:	2b00      	cmp	r3, #0
 8003650:	bf0c      	ite	eq
 8003652:	2301      	moveq	r3, #1
 8003654:	2300      	movne	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	461a      	mov	r2, r3
 800365a:	f7ff ff39 	bl	80034d0 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	3301      	adds	r3, #1
 8003662:	61bb      	str	r3, [r7, #24]
 8003664:	7dfb      	ldrb	r3, [r7, #23]
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	429a      	cmp	r2, r3
 800366a:	d3c4      	bcc.n	80035f6 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	3301      	adds	r3, #1
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	787b      	ldrb	r3, [r7, #1]
 8003674:	461a      	mov	r2, r3
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	4293      	cmp	r3, r2
 800367a:	d3ac      	bcc.n	80035d6 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 800367c:	4b06      	ldr	r3, [pc, #24]	@ (8003698 <ssd1306_WriteChar+0x120>)
 800367e:	881a      	ldrh	r2, [r3, #0]
 8003680:	7dfb      	ldrb	r3, [r7, #23]
 8003682:	b29b      	uxth	r3, r3
 8003684:	4413      	add	r3, r2
 8003686:	b29a      	uxth	r2, r3
 8003688:	4b03      	ldr	r3, [pc, #12]	@ (8003698 <ssd1306_WriteChar+0x120>)
 800368a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800368c:	7bfb      	ldrb	r3, [r7, #15]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3724      	adds	r7, #36	@ 0x24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd90      	pop	{r4, r7, pc}
 8003696:	bf00      	nop
 8003698:	20000cf4 	.word	0x20000cf4

0800369c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af02      	add	r7, sp, #8
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	4638      	mov	r0, r7
 80036a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80036aa:	e013      	b.n	80036d4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	7818      	ldrb	r0, [r3, #0]
 80036b0:	7e3b      	ldrb	r3, [r7, #24]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	463b      	mov	r3, r7
 80036b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036b8:	f7ff ff5e 	bl	8003578 <ssd1306_WriteChar>
 80036bc:	4603      	mov	r3, r0
 80036be:	461a      	mov	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d002      	beq.n	80036ce <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	e008      	b.n	80036e0 <ssd1306_WriteString+0x44>
        }
        str++;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	3301      	adds	r3, #1
 80036d2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e7      	bne.n	80036ac <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	781b      	ldrb	r3, [r3, #0]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	460a      	mov	r2, r1
 80036f2:	71fb      	strb	r3, [r7, #7]
 80036f4:	4613      	mov	r3, r2
 80036f6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	4b05      	ldr	r3, [pc, #20]	@ (8003714 <ssd1306_SetCursor+0x2c>)
 80036fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003700:	79bb      	ldrb	r3, [r7, #6]
 8003702:	b29a      	uxth	r2, r3
 8003704:	4b03      	ldr	r3, [pc, #12]	@ (8003714 <ssd1306_SetCursor+0x2c>)
 8003706:	805a      	strh	r2, [r3, #2]
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	20000cf4 	.word	0x20000cf4

08003718 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003718:	b590      	push	{r4, r7, lr}
 800371a:	b089      	sub	sp, #36	@ 0x24
 800371c:	af00      	add	r7, sp, #0
 800371e:	4604      	mov	r4, r0
 8003720:	4608      	mov	r0, r1
 8003722:	4611      	mov	r1, r2
 8003724:	461a      	mov	r2, r3
 8003726:	4623      	mov	r3, r4
 8003728:	71fb      	strb	r3, [r7, #7]
 800372a:	4603      	mov	r3, r0
 800372c:	71bb      	strb	r3, [r7, #6]
 800372e:	460b      	mov	r3, r1
 8003730:	717b      	strb	r3, [r7, #5]
 8003732:	4613      	mov	r3, r2
 8003734:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8003736:	797a      	ldrb	r2, [r7, #5]
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	bfb8      	it	lt
 8003740:	425b      	neglt	r3, r3
 8003742:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8003744:	793a      	ldrb	r2, [r7, #4]
 8003746:	79bb      	ldrb	r3, [r7, #6]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	bfb8      	it	lt
 800374e:	425b      	neglt	r3, r3
 8003750:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8003752:	79fa      	ldrb	r2, [r7, #7]
 8003754:	797b      	ldrb	r3, [r7, #5]
 8003756:	429a      	cmp	r2, r3
 8003758:	d201      	bcs.n	800375e <ssd1306_Line+0x46>
 800375a:	2301      	movs	r3, #1
 800375c:	e001      	b.n	8003762 <ssd1306_Line+0x4a>
 800375e:	f04f 33ff 	mov.w	r3, #4294967295
 8003762:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8003764:	79ba      	ldrb	r2, [r7, #6]
 8003766:	793b      	ldrb	r3, [r7, #4]
 8003768:	429a      	cmp	r2, r3
 800376a:	d201      	bcs.n	8003770 <ssd1306_Line+0x58>
 800376c:	2301      	movs	r3, #1
 800376e:	e001      	b.n	8003774 <ssd1306_Line+0x5c>
 8003770:	f04f 33ff 	mov.w	r3, #4294967295
 8003774:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800377e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003782:	7939      	ldrb	r1, [r7, #4]
 8003784:	797b      	ldrb	r3, [r7, #5]
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff fea2 	bl	80034d0 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 800378c:	e024      	b.n	80037d8 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800378e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003792:	79b9      	ldrb	r1, [r7, #6]
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff fe9a 	bl	80034d0 <ssd1306_DrawPixel>
        error2 = error * 2;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	425b      	negs	r3, r3
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	dd08      	ble.n	80037be <ssd1306_Line+0xa6>
            error -= deltaY;
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	4413      	add	r3, r2
 80037bc:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	da08      	bge.n	80037d8 <ssd1306_Line+0xc0>
            error += deltaX;
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	4413      	add	r3, r2
 80037cc:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	79bb      	ldrb	r3, [r7, #6]
 80037d4:	4413      	add	r3, r2
 80037d6:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80037d8:	79fa      	ldrb	r2, [r7, #7]
 80037da:	797b      	ldrb	r3, [r7, #5]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d1d6      	bne.n	800378e <ssd1306_Line+0x76>
 80037e0:	79ba      	ldrb	r2, [r7, #6]
 80037e2:	793b      	ldrb	r3, [r7, #4]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d1d2      	bne.n	800378e <ssd1306_Line+0x76>
        }
    }
    return;
 80037e8:	bf00      	nop
}
 80037ea:	3724      	adds	r7, #36	@ 0x24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd90      	pop	{r4, r7, pc}

080037f0 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80037f0:	b590      	push	{r4, r7, lr}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	4604      	mov	r4, r0
 80037f8:	4608      	mov	r0, r1
 80037fa:	4611      	mov	r1, r2
 80037fc:	461a      	mov	r2, r3
 80037fe:	4623      	mov	r3, r4
 8003800:	71fb      	strb	r3, [r7, #7]
 8003802:	4603      	mov	r3, r0
 8003804:	71bb      	strb	r3, [r7, #6]
 8003806:	460b      	mov	r3, r1
 8003808:	717b      	strb	r3, [r7, #5]
 800380a:	4613      	mov	r3, r2
 800380c:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800380e:	79bc      	ldrb	r4, [r7, #6]
 8003810:	797a      	ldrb	r2, [r7, #5]
 8003812:	79b9      	ldrb	r1, [r7, #6]
 8003814:	79f8      	ldrb	r0, [r7, #7]
 8003816:	7e3b      	ldrb	r3, [r7, #24]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	4623      	mov	r3, r4
 800381c:	f7ff ff7c 	bl	8003718 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8003820:	793c      	ldrb	r4, [r7, #4]
 8003822:	797a      	ldrb	r2, [r7, #5]
 8003824:	79b9      	ldrb	r1, [r7, #6]
 8003826:	7978      	ldrb	r0, [r7, #5]
 8003828:	7e3b      	ldrb	r3, [r7, #24]
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	4623      	mov	r3, r4
 800382e:	f7ff ff73 	bl	8003718 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8003832:	793c      	ldrb	r4, [r7, #4]
 8003834:	79fa      	ldrb	r2, [r7, #7]
 8003836:	7939      	ldrb	r1, [r7, #4]
 8003838:	7978      	ldrb	r0, [r7, #5]
 800383a:	7e3b      	ldrb	r3, [r7, #24]
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	4623      	mov	r3, r4
 8003840:	f7ff ff6a 	bl	8003718 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8003844:	79bc      	ldrb	r4, [r7, #6]
 8003846:	79fa      	ldrb	r2, [r7, #7]
 8003848:	7939      	ldrb	r1, [r7, #4]
 800384a:	79f8      	ldrb	r0, [r7, #7]
 800384c:	7e3b      	ldrb	r3, [r7, #24]
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	4623      	mov	r3, r4
 8003852:	f7ff ff61 	bl	8003718 <ssd1306_Line>

    return;
 8003856:	bf00      	nop
}
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	bd90      	pop	{r4, r7, pc}

0800385e <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	4603      	mov	r3, r0
 8003866:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003868:	2381      	movs	r3, #129	@ 0x81
 800386a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff fcfc 	bl	800326c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff fcf8 	bl	800326c <ssd1306_WriteCommand>
}
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003894:	23af      	movs	r3, #175	@ 0xaf
 8003896:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003898:	4b08      	ldr	r3, [pc, #32]	@ (80038bc <ssd1306_SetDisplayOn+0x38>)
 800389a:	2201      	movs	r2, #1
 800389c:	715a      	strb	r2, [r3, #5]
 800389e:	e004      	b.n	80038aa <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80038a0:	23ae      	movs	r3, #174	@ 0xae
 80038a2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80038a4:	4b05      	ldr	r3, [pc, #20]	@ (80038bc <ssd1306_SetDisplayOn+0x38>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff fcdd 	bl	800326c <ssd1306_WriteCommand>
}
 80038b2:	bf00      	nop
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20000cf4 	.word	0x20000cf4

080038c0 <ssd1306_FlipScreen>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_FlipScreen(uint8_t flip_horizontal, uint8_t flip_vertical) {
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	460a      	mov	r2, r1
 80038ca:	71fb      	strb	r3, [r7, #7]
 80038cc:	4613      	mov	r3, r2
 80038ce:	71bb      	strb	r3, [r7, #6]
    if (flip_horizontal) {
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <ssd1306_FlipScreen+0x1e>
        ssd1306_WriteCommand(0xA1);
 80038d6:	20a1      	movs	r0, #161	@ 0xa1
 80038d8:	f7ff fcc8 	bl	800326c <ssd1306_WriteCommand>
 80038dc:	e002      	b.n	80038e4 <ssd1306_FlipScreen+0x24>
    } else {
        ssd1306_WriteCommand(0xA0);
 80038de:	20a0      	movs	r0, #160	@ 0xa0
 80038e0:	f7ff fcc4 	bl	800326c <ssd1306_WriteCommand>
    }

    if (flip_vertical) {
 80038e4:	79bb      	ldrb	r3, [r7, #6]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <ssd1306_FlipScreen+0x32>
        ssd1306_WriteCommand(0xC8);
 80038ea:	20c8      	movs	r0, #200	@ 0xc8
 80038ec:	f7ff fcbe 	bl	800326c <ssd1306_WriteCommand>
    } else {
        ssd1306_WriteCommand(0xC0);
    }
}
 80038f0:	e002      	b.n	80038f8 <ssd1306_FlipScreen+0x38>
        ssd1306_WriteCommand(0xC0);
 80038f2:	20c0      	movs	r0, #192	@ 0xc0
 80038f4:	f7ff fcba 	bl	800326c <ssd1306_WriteCommand>
}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	607b      	str	r3, [r7, #4]
 800390a:	4b10      	ldr	r3, [pc, #64]	@ (800394c <HAL_MspInit+0x4c>)
 800390c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390e:	4a0f      	ldr	r2, [pc, #60]	@ (800394c <HAL_MspInit+0x4c>)
 8003910:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003914:	6453      	str	r3, [r2, #68]	@ 0x44
 8003916:	4b0d      	ldr	r3, [pc, #52]	@ (800394c <HAL_MspInit+0x4c>)
 8003918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800391e:	607b      	str	r3, [r7, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	4b09      	ldr	r3, [pc, #36]	@ (800394c <HAL_MspInit+0x4c>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392a:	4a08      	ldr	r2, [pc, #32]	@ (800394c <HAL_MspInit+0x4c>)
 800392c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003930:	6413      	str	r3, [r2, #64]	@ 0x40
 8003932:	4b06      	ldr	r3, [pc, #24]	@ (800394c <HAL_MspInit+0x4c>)
 8003934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40023800 	.word	0x40023800

08003950 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	@ 0x28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003958:	f107 0314 	add.w	r3, r7, #20
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a17      	ldr	r2, [pc, #92]	@ (80039cc <HAL_ADC_MspInit+0x7c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d127      	bne.n	80039c2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	4b16      	ldr	r3, [pc, #88]	@ (80039d0 <HAL_ADC_MspInit+0x80>)
 8003978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397a:	4a15      	ldr	r2, [pc, #84]	@ (80039d0 <HAL_ADC_MspInit+0x80>)
 800397c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003980:	6453      	str	r3, [r2, #68]	@ 0x44
 8003982:	4b13      	ldr	r3, [pc, #76]	@ (80039d0 <HAL_ADC_MspInit+0x80>)
 8003984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	4b0f      	ldr	r3, [pc, #60]	@ (80039d0 <HAL_ADC_MspInit+0x80>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	4a0e      	ldr	r2, [pc, #56]	@ (80039d0 <HAL_ADC_MspInit+0x80>)
 8003998:	f043 0302 	orr.w	r3, r3, #2
 800399c:	6313      	str	r3, [r2, #48]	@ 0x30
 800399e:	4b0c      	ldr	r3, [pc, #48]	@ (80039d0 <HAL_ADC_MspInit+0x80>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80039aa:	2302      	movs	r3, #2
 80039ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039ae:	2303      	movs	r3, #3
 80039b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b6:	f107 0314 	add.w	r3, r7, #20
 80039ba:	4619      	mov	r1, r3
 80039bc:	4805      	ldr	r0, [pc, #20]	@ (80039d4 <HAL_ADC_MspInit+0x84>)
 80039be:	f001 fa09 	bl	8004dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80039c2:	bf00      	nop
 80039c4:	3728      	adds	r7, #40	@ 0x28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40012000 	.word	0x40012000
 80039d0:	40023800 	.word	0x40023800
 80039d4:	40020400 	.word	0x40020400

080039d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08a      	sub	sp, #40	@ 0x28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e0:	f107 0314 	add.w	r3, r7, #20
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	60da      	str	r2, [r3, #12]
 80039ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a19      	ldr	r2, [pc, #100]	@ (8003a5c <HAL_I2C_MspInit+0x84>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d12b      	bne.n	8003a52 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	4b18      	ldr	r3, [pc, #96]	@ (8003a60 <HAL_I2C_MspInit+0x88>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a02:	4a17      	ldr	r2, [pc, #92]	@ (8003a60 <HAL_I2C_MspInit+0x88>)
 8003a04:	f043 0302 	orr.w	r3, r3, #2
 8003a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a0a:	4b15      	ldr	r3, [pc, #84]	@ (8003a60 <HAL_I2C_MspInit+0x88>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	613b      	str	r3, [r7, #16]
 8003a14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a16:	23c0      	movs	r3, #192	@ 0xc0
 8003a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a1a:	2312      	movs	r3, #18
 8003a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a22:	2303      	movs	r3, #3
 8003a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a26:	2304      	movs	r3, #4
 8003a28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a2a:	f107 0314 	add.w	r3, r7, #20
 8003a2e:	4619      	mov	r1, r3
 8003a30:	480c      	ldr	r0, [pc, #48]	@ (8003a64 <HAL_I2C_MspInit+0x8c>)
 8003a32:	f001 f9cf 	bl	8004dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	4b09      	ldr	r3, [pc, #36]	@ (8003a60 <HAL_I2C_MspInit+0x88>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3e:	4a08      	ldr	r2, [pc, #32]	@ (8003a60 <HAL_I2C_MspInit+0x88>)
 8003a40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a46:	4b06      	ldr	r3, [pc, #24]	@ (8003a60 <HAL_I2C_MspInit+0x88>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003a52:	bf00      	nop
 8003a54:	3728      	adds	r7, #40	@ 0x28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40005400 	.word	0x40005400
 8003a60:	40023800 	.word	0x40023800
 8003a64:	40020400 	.word	0x40020400

08003a68 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08a      	sub	sp, #40	@ 0x28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a70:	f107 0314 	add.w	r3, r7, #20
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	605a      	str	r2, [r3, #4]
 8003a7a:	609a      	str	r2, [r3, #8]
 8003a7c:	60da      	str	r2, [r3, #12]
 8003a7e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a88:	d13a      	bne.n	8003b00 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003b08 <HAL_PCD_MspInit+0xa0>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a92:	4a1d      	ldr	r2, [pc, #116]	@ (8003b08 <HAL_PCD_MspInit+0xa0>)
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b08 <HAL_PCD_MspInit+0xa0>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003aa6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aac:	2302      	movs	r3, #2
 8003aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003ab8:	230a      	movs	r3, #10
 8003aba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003abc:	f107 0314 	add.w	r3, r7, #20
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4812      	ldr	r0, [pc, #72]	@ (8003b0c <HAL_PCD_MspInit+0xa4>)
 8003ac4:	f001 f986 	bl	8004dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8003b08 <HAL_PCD_MspInit+0xa0>)
 8003aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003acc:	4a0e      	ldr	r2, [pc, #56]	@ (8003b08 <HAL_PCD_MspInit+0xa0>)
 8003ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ad2:	6353      	str	r3, [r2, #52]	@ 0x34
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8003b08 <HAL_PCD_MspInit+0xa0>)
 8003ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003adc:	4a0a      	ldr	r2, [pc, #40]	@ (8003b08 <HAL_PCD_MspInit+0xa0>)
 8003ade:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ae2:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ae4:	4b08      	ldr	r3, [pc, #32]	@ (8003b08 <HAL_PCD_MspInit+0xa0>)
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003af0:	2200      	movs	r2, #0
 8003af2:	2100      	movs	r1, #0
 8003af4:	2043      	movs	r0, #67	@ 0x43
 8003af6:	f000 ff28 	bl	800494a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003afa:	2043      	movs	r0, #67	@ 0x43
 8003afc:	f000 ff41 	bl	8004982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003b00:	bf00      	nop
 8003b02:	3728      	adds	r7, #40	@ 0x28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	40020000 	.word	0x40020000

08003b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8003b14:	bf00      	nop
 8003b16:	e7fd      	b.n	8003b14 <NMI_Handler+0x4>

08003b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm("BKPT #0\n");
 8003b1c:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b1e:	bf00      	nop
 8003b20:	e7fd      	b.n	8003b1e <HardFault_Handler+0x6>

08003b22 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b22:	b480      	push	{r7}
 8003b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b26:	bf00      	nop
 8003b28:	e7fd      	b.n	8003b26 <MemManage_Handler+0x4>

08003b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b2e:	bf00      	nop
 8003b30:	e7fd      	b.n	8003b2e <BusFault_Handler+0x4>

08003b32 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b36:	bf00      	nop
 8003b38:	e7fd      	b.n	8003b36 <UsageFault_Handler+0x4>

08003b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b3e:	bf00      	nop
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b56:	b480      	push	{r7}
 8003b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b68:	f000 f9de 	bl	8003f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  system_ticks++;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	@ (8003b7c <SysTick_Handler+0x18>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3301      	adds	r3, #1
 8003b72:	4a02      	ldr	r2, [pc, #8]	@ (8003b7c <SysTick_Handler+0x18>)
 8003b74:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	200014fc 	.word	0x200014fc

08003b80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 8003b84:	2000      	movs	r0, #0
 8003b86:	f008 fa25 	bl	800bfd4 <dcd_int_handler>
	return;
 8003b8a:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	af00      	add	r7, sp, #0
  return 1;
 8003b92:	2301      	movs	r3, #1
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <_kill>:

int _kill(int pid, int sig)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ba8:	f009 fa36 	bl	800d018 <__errno>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2216      	movs	r2, #22
 8003bb0:	601a      	str	r2, [r3, #0]
  return -1;
 8003bb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <_exit>:

void _exit (int status)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003bc6:	f04f 31ff 	mov.w	r1, #4294967295
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff ffe7 	bl	8003b9e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003bd0:	bf00      	nop
 8003bd2:	e7fd      	b.n	8003bd0 <_exit+0x12>

08003bd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	e00a      	b.n	8003bfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003be6:	f3af 8000 	nop.w
 8003bea:	4601      	mov	r1, r0
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	60ba      	str	r2, [r7, #8]
 8003bf2:	b2ca      	uxtb	r2, r1
 8003bf4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	dbf0      	blt.n	8003be6 <_read+0x12>
  }

  return len;
 8003c04:	687b      	ldr	r3, [r7, #4]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b086      	sub	sp, #24
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	e009      	b.n	8003c34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	60ba      	str	r2, [r7, #8]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	3301      	adds	r3, #1
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	dbf1      	blt.n	8003c20 <_write+0x12>
  }
  return len;
 8003c3c:	687b      	ldr	r3, [r7, #4]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <_close>:

int _close(int file)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c6e:	605a      	str	r2, [r3, #4]
  return 0;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <_isatty>:

int _isatty(int file)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c86:	2301      	movs	r3, #1
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cb8:	4a14      	ldr	r2, [pc, #80]	@ (8003d0c <_sbrk+0x5c>)
 8003cba:	4b15      	ldr	r3, [pc, #84]	@ (8003d10 <_sbrk+0x60>)
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cc4:	4b13      	ldr	r3, [pc, #76]	@ (8003d14 <_sbrk+0x64>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d102      	bne.n	8003cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ccc:	4b11      	ldr	r3, [pc, #68]	@ (8003d14 <_sbrk+0x64>)
 8003cce:	4a12      	ldr	r2, [pc, #72]	@ (8003d18 <_sbrk+0x68>)
 8003cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cd2:	4b10      	ldr	r3, [pc, #64]	@ (8003d14 <_sbrk+0x64>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d207      	bcs.n	8003cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ce0:	f009 f99a 	bl	800d018 <__errno>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	220c      	movs	r2, #12
 8003ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cea:	f04f 33ff 	mov.w	r3, #4294967295
 8003cee:	e009      	b.n	8003d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cf0:	4b08      	ldr	r3, [pc, #32]	@ (8003d14 <_sbrk+0x64>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cf6:	4b07      	ldr	r3, [pc, #28]	@ (8003d14 <_sbrk+0x64>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	4a05      	ldr	r2, [pc, #20]	@ (8003d14 <_sbrk+0x64>)
 8003d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d02:	68fb      	ldr	r3, [r7, #12]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20020000 	.word	0x20020000
 8003d10:	00000400 	.word	0x00000400
 8003d14:	20001500 	.word	0x20001500
 8003d18:	20001a40 	.word	0x20001a40

08003d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d20:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <SystemInit+0x20>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d26:	4a05      	ldr	r2, [pc, #20]	@ (8003d3c <SystemInit+0x20>)
 8003d28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	e000ed00 	.word	0xe000ed00

08003d40 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8003d44:	4b02      	ldr	r3, [pc, #8]	@ (8003d50 <tud_descriptor_device_cb+0x10>)
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	0800f124 	.word	0x0800f124

08003d54 <tud_hid_descriptor_report_cb>:

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_hid_descriptor_report_cb(uint8_t instance)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	71fb      	strb	r3, [r7, #7]
  (void) instance;
  return desc_hid_report;
 8003d5e:	4b03      	ldr	r3, [pc, #12]	@ (8003d6c <tud_hid_descriptor_report_cb+0x18>)
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	0800f138 	.word	0x0800f138

08003d70 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	71fb      	strb	r3, [r7, #7]
  (void) index; // for multiple configurations
  return desc_configuration;
 8003d7a:	4b03      	ldr	r3, [pc, #12]	@ (8003d88 <tud_descriptor_configuration_cb+0x18>)
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	0800f194 	.word	0x0800f194

08003d8c <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	460a      	mov	r2, r1
 8003d96:	71fb      	strb	r3, [r7, #7]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d108      	bne.n	8003db4 <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8003da2:	4b21      	ldr	r3, [pc, #132]	@ (8003e28 <tud_descriptor_string_cb+0x9c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	4b20      	ldr	r3, [pc, #128]	@ (8003e2c <tud_descriptor_string_cb+0xa0>)
 8003dac:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
 8003db2:	e027      	b.n	8003e04 <tud_descriptor_string_cb+0x78>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	2b05      	cmp	r3, #5
 8003db8:	d901      	bls.n	8003dbe <tud_descriptor_string_cb+0x32>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e02f      	b.n	8003e1e <tud_descriptor_string_cb+0x92>

    const char* str = string_desc_arr[index];
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	4a19      	ldr	r2, [pc, #100]	@ (8003e28 <tud_descriptor_string_cb+0x9c>)
 8003dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc6:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = strlen(str);
 8003dc8:	68b8      	ldr	r0, [r7, #8]
 8003dca:	f7fc fa13 	bl	80001f4 <strlen>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
 8003dd4:	2b1f      	cmp	r3, #31
 8003dd6:	d901      	bls.n	8003ddc <tud_descriptor_string_cb+0x50>
 8003dd8:	231f      	movs	r3, #31
 8003dda:	73fb      	strb	r3, [r7, #15]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 8003ddc:	2300      	movs	r3, #0
 8003dde:	73bb      	strb	r3, [r7, #14]
 8003de0:	e00c      	b.n	8003dfc <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 8003de2:	7bbb      	ldrb	r3, [r7, #14]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	4413      	add	r3, r2
 8003de8:	781a      	ldrb	r2, [r3, #0]
 8003dea:	7bbb      	ldrb	r3, [r7, #14]
 8003dec:	3301      	adds	r3, #1
 8003dee:	4611      	mov	r1, r2
 8003df0:	4a0e      	ldr	r2, [pc, #56]	@ (8003e2c <tud_descriptor_string_cb+0xa0>)
 8003df2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 8003df6:	7bbb      	ldrb	r3, [r7, #14]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	73bb      	strb	r3, [r7, #14]
 8003dfc:	7bba      	ldrb	r2, [r7, #14]
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d3ee      	bcc.n	8003de2 <tud_descriptor_string_cb+0x56>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	3301      	adds	r3, #1
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	b21b      	sxth	r3, r3
 8003e10:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003e14:	b21b      	sxth	r3, r3
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	4b04      	ldr	r3, [pc, #16]	@ (8003e2c <tud_descriptor_string_cb+0xa0>)
 8003e1a:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8003e1c:	4b03      	ldr	r3, [pc, #12]	@ (8003e2c <tud_descriptor_string_cb+0xa0>)
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	2000020c 	.word	0x2000020c
 8003e2c:	20001504 	.word	0x20001504

08003e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003e34:	f7ff ff72 	bl	8003d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e38:	480c      	ldr	r0, [pc, #48]	@ (8003e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e3a:	490d      	ldr	r1, [pc, #52]	@ (8003e70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e40:	e002      	b.n	8003e48 <LoopCopyDataInit>

08003e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e46:	3304      	adds	r3, #4

08003e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e4c:	d3f9      	bcc.n	8003e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e50:	4c0a      	ldr	r4, [pc, #40]	@ (8003e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e54:	e001      	b.n	8003e5a <LoopFillZerobss>

08003e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e58:	3204      	adds	r2, #4

08003e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e5c:	d3fb      	bcc.n	8003e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e5e:	f009 f8e1 	bl	800d024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e62:	f7fe fc39 	bl	80026d8 <main>
  bx  lr    
 8003e66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e70:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 8003e74:	0800f450 	.word	0x0800f450
  ldr r2, =_sbss
 8003e78:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8003e7c:	20001a3c 	.word	0x20001a3c

08003e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e80:	e7fe      	b.n	8003e80 <ADC_IRQHandler>
	...

08003e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e88:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec4 <HAL_Init+0x40>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ec4 <HAL_Init+0x40>)
 8003e8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e94:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec4 <HAL_Init+0x40>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec4 <HAL_Init+0x40>)
 8003e9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ea0:	4b08      	ldr	r3, [pc, #32]	@ (8003ec4 <HAL_Init+0x40>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a07      	ldr	r2, [pc, #28]	@ (8003ec4 <HAL_Init+0x40>)
 8003ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003eac:	2003      	movs	r0, #3
 8003eae:	f000 fd41 	bl	8004934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003eb2:	200f      	movs	r0, #15
 8003eb4:	f000 f808 	bl	8003ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003eb8:	f7ff fd22 	bl	8003900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40023c00 	.word	0x40023c00

08003ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ed0:	4b12      	ldr	r3, [pc, #72]	@ (8003f1c <HAL_InitTick+0x54>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	4b12      	ldr	r3, [pc, #72]	@ (8003f20 <HAL_InitTick+0x58>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fd59 	bl	800499e <HAL_SYSTICK_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e00e      	b.n	8003f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b0f      	cmp	r3, #15
 8003efa:	d80a      	bhi.n	8003f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003efc:	2200      	movs	r2, #0
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	f04f 30ff 	mov.w	r0, #4294967295
 8003f04:	f000 fd21 	bl	800494a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f08:	4a06      	ldr	r2, [pc, #24]	@ (8003f24 <HAL_InitTick+0x5c>)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e000      	b.n	8003f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20000208 	.word	0x20000208
 8003f20:	20000228 	.word	0x20000228
 8003f24:	20000224 	.word	0x20000224

08003f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f2c:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <HAL_IncTick+0x20>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	461a      	mov	r2, r3
 8003f32:	4b06      	ldr	r3, [pc, #24]	@ (8003f4c <HAL_IncTick+0x24>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4413      	add	r3, r2
 8003f38:	4a04      	ldr	r2, [pc, #16]	@ (8003f4c <HAL_IncTick+0x24>)
 8003f3a:	6013      	str	r3, [r2, #0]
}
 8003f3c:	bf00      	nop
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20000228 	.word	0x20000228
 8003f4c:	20001544 	.word	0x20001544

08003f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  return uwTick;
 8003f54:	4b03      	ldr	r3, [pc, #12]	@ (8003f64 <HAL_GetTick+0x14>)
 8003f56:	681b      	ldr	r3, [r3, #0]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20001544 	.word	0x20001544

08003f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f70:	f7ff ffee 	bl	8003f50 <HAL_GetTick>
 8003f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d005      	beq.n	8003f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f82:	4b0a      	ldr	r3, [pc, #40]	@ (8003fac <HAL_Delay+0x44>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f8e:	bf00      	nop
 8003f90:	f7ff ffde 	bl	8003f50 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d8f7      	bhi.n	8003f90 <HAL_Delay+0x28>
  {
  }
}
 8003fa0:	bf00      	nop
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000228 	.word	0x20000228

08003fb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e033      	b.n	800402e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d109      	bne.n	8003fe2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff fcbe 	bl	8003950 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	f003 0310 	and.w	r3, r3, #16
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d118      	bne.n	8004020 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003ff6:	f023 0302 	bic.w	r3, r3, #2
 8003ffa:	f043 0202 	orr.w	r2, r3, #2
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 faca 	bl	800459c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004012:	f023 0303 	bic.w	r3, r3, #3
 8004016:	f043 0201 	orr.w	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	641a      	str	r2, [r3, #64]	@ 0x40
 800401e:	e001      	b.n	8004024 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800402c:	7bfb      	ldrb	r3, [r7, #15]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_ADC_Start+0x1a>
 800404e:	2302      	movs	r3, #2
 8004050:	e097      	b.n	8004182 <HAL_ADC_Start+0x14a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b01      	cmp	r3, #1
 8004066:	d018      	beq.n	800409a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004078:	4b45      	ldr	r3, [pc, #276]	@ (8004190 <HAL_ADC_Start+0x158>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a45      	ldr	r2, [pc, #276]	@ (8004194 <HAL_ADC_Start+0x15c>)
 800407e:	fba2 2303 	umull	r2, r3, r2, r3
 8004082:	0c9a      	lsrs	r2, r3, #18
 8004084:	4613      	mov	r3, r2
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	4413      	add	r3, r2
 800408a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800408c:	e002      	b.n	8004094 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	3b01      	subs	r3, #1
 8004092:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f9      	bne.n	800408e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d15f      	bne.n	8004168 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80040d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040e6:	d106      	bne.n	80040f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ec:	f023 0206 	bic.w	r2, r3, #6
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	645a      	str	r2, [r3, #68]	@ 0x44
 80040f4:	e002      	b.n	80040fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004104:	4b24      	ldr	r3, [pc, #144]	@ (8004198 <HAL_ADC_Start+0x160>)
 8004106:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004110:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 031f 	and.w	r3, r3, #31
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10f      	bne.n	800413e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d129      	bne.n	8004180 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800413a:	609a      	str	r2, [r3, #8]
 800413c:	e020      	b.n	8004180 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a16      	ldr	r2, [pc, #88]	@ (800419c <HAL_ADC_Start+0x164>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d11b      	bne.n	8004180 <HAL_ADC_Start+0x148>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d114      	bne.n	8004180 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004164:	609a      	str	r2, [r3, #8]
 8004166:	e00b      	b.n	8004180 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416c:	f043 0210 	orr.w	r2, r3, #16
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004178:	f043 0201 	orr.w	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	20000208 	.word	0x20000208
 8004194:	431bde83 	.word	0x431bde83
 8004198:	40012300 	.word	0x40012300
 800419c:	40012000 	.word	0x40012000

080041a0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_ADC_Stop+0x16>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e021      	b.n	80041fa <HAL_ADC_Stop+0x5a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0201 	bic.w	r2, r2, #1
 80041cc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d109      	bne.n	80041f0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80041e4:	f023 0301 	bic.w	r3, r3, #1
 80041e8:	f043 0201 	orr.w	r2, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b084      	sub	sp, #16
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800421e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004222:	d113      	bne.n	800424c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800422e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004232:	d10b      	bne.n	800424c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004238:	f043 0220 	orr.w	r2, r3, #32
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e063      	b.n	8004314 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800424c:	f7ff fe80 	bl	8003f50 <HAL_GetTick>
 8004250:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004252:	e021      	b.n	8004298 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425a:	d01d      	beq.n	8004298 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <HAL_ADC_PollForConversion+0x6c>
 8004262:	f7ff fe75 	bl	8003f50 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d212      	bcs.n	8004298 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b02      	cmp	r3, #2
 800427e:	d00b      	beq.n	8004298 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004284:	f043 0204 	orr.w	r2, r3, #4
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e03d      	b.n	8004314 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d1d6      	bne.n	8004254 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f06f 0212 	mvn.w	r2, #18
 80042ae:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d123      	bne.n	8004312 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d11f      	bne.n	8004312 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d006      	beq.n	80042ee <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d111      	bne.n	8004312 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d105      	bne.n	8004312 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430a:	f043 0201 	orr.w	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_ADC_ConfigChannel+0x1c>
 8004350:	2302      	movs	r3, #2
 8004352:	e113      	b.n	800457c <HAL_ADC_ConfigChannel+0x244>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b09      	cmp	r3, #9
 8004362:	d925      	bls.n	80043b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68d9      	ldr	r1, [r3, #12]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	b29b      	uxth	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	4613      	mov	r3, r2
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	4413      	add	r3, r2
 8004378:	3b1e      	subs	r3, #30
 800437a:	2207      	movs	r2, #7
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	43da      	mvns	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	400a      	ands	r2, r1
 8004388:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68d9      	ldr	r1, [r3, #12]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	b29b      	uxth	r3, r3
 800439a:	4618      	mov	r0, r3
 800439c:	4603      	mov	r3, r0
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	4403      	add	r3, r0
 80043a2:	3b1e      	subs	r3, #30
 80043a4:	409a      	lsls	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	60da      	str	r2, [r3, #12]
 80043ae:	e022      	b.n	80043f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6919      	ldr	r1, [r3, #16]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	461a      	mov	r2, r3
 80043be:	4613      	mov	r3, r2
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	4413      	add	r3, r2
 80043c4:	2207      	movs	r2, #7
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	43da      	mvns	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	400a      	ands	r2, r1
 80043d2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6919      	ldr	r1, [r3, #16]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	4618      	mov	r0, r3
 80043e6:	4603      	mov	r3, r0
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	4403      	add	r3, r0
 80043ec:	409a      	lsls	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b06      	cmp	r3, #6
 80043fc:	d824      	bhi.n	8004448 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	3b05      	subs	r3, #5
 8004410:	221f      	movs	r2, #31
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	43da      	mvns	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	400a      	ands	r2, r1
 800441e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	4618      	mov	r0, r3
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	3b05      	subs	r3, #5
 800443a:	fa00 f203 	lsl.w	r2, r0, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	635a      	str	r2, [r3, #52]	@ 0x34
 8004446:	e04c      	b.n	80044e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b0c      	cmp	r3, #12
 800444e:	d824      	bhi.n	800449a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	3b23      	subs	r3, #35	@ 0x23
 8004462:	221f      	movs	r2, #31
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	43da      	mvns	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	400a      	ands	r2, r1
 8004470:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	b29b      	uxth	r3, r3
 800447e:	4618      	mov	r0, r3
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	3b23      	subs	r3, #35	@ 0x23
 800448c:	fa00 f203 	lsl.w	r2, r0, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	631a      	str	r2, [r3, #48]	@ 0x30
 8004498:	e023      	b.n	80044e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	3b41      	subs	r3, #65	@ 0x41
 80044ac:	221f      	movs	r2, #31
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	43da      	mvns	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	400a      	ands	r2, r1
 80044ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	4618      	mov	r0, r3
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	3b41      	subs	r3, #65	@ 0x41
 80044d6:	fa00 f203 	lsl.w	r2, r0, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044e2:	4b29      	ldr	r3, [pc, #164]	@ (8004588 <HAL_ADC_ConfigChannel+0x250>)
 80044e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a28      	ldr	r2, [pc, #160]	@ (800458c <HAL_ADC_ConfigChannel+0x254>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d10f      	bne.n	8004510 <HAL_ADC_ConfigChannel+0x1d8>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b12      	cmp	r3, #18
 80044f6:	d10b      	bne.n	8004510 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1d      	ldr	r2, [pc, #116]	@ (800458c <HAL_ADC_ConfigChannel+0x254>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d12b      	bne.n	8004572 <HAL_ADC_ConfigChannel+0x23a>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a1c      	ldr	r2, [pc, #112]	@ (8004590 <HAL_ADC_ConfigChannel+0x258>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d003      	beq.n	800452c <HAL_ADC_ConfigChannel+0x1f4>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b11      	cmp	r3, #17
 800452a:	d122      	bne.n	8004572 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a11      	ldr	r2, [pc, #68]	@ (8004590 <HAL_ADC_ConfigChannel+0x258>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d111      	bne.n	8004572 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800454e:	4b11      	ldr	r3, [pc, #68]	@ (8004594 <HAL_ADC_ConfigChannel+0x25c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a11      	ldr	r2, [pc, #68]	@ (8004598 <HAL_ADC_ConfigChannel+0x260>)
 8004554:	fba2 2303 	umull	r2, r3, r2, r3
 8004558:	0c9a      	lsrs	r2, r3, #18
 800455a:	4613      	mov	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004564:	e002      	b.n	800456c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	3b01      	subs	r3, #1
 800456a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f9      	bne.n	8004566 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	40012300 	.word	0x40012300
 800458c:	40012000 	.word	0x40012000
 8004590:	10000012 	.word	0x10000012
 8004594:	20000208 	.word	0x20000208
 8004598:	431bde83 	.word	0x431bde83

0800459c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045a4:	4b79      	ldr	r3, [pc, #484]	@ (800478c <ADC_Init+0x1f0>)
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	431a      	orrs	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6859      	ldr	r1, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	021a      	lsls	r2, r3, #8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80045f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6859      	ldr	r1, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004616:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6899      	ldr	r1, [r3, #8]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462e:	4a58      	ldr	r2, [pc, #352]	@ (8004790 <ADC_Init+0x1f4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d022      	beq.n	800467a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004642:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6899      	ldr	r1, [r3, #8]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004664:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6899      	ldr	r1, [r3, #8]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	609a      	str	r2, [r3, #8]
 8004678:	e00f      	b.n	800469a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004688:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004698:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0202 	bic.w	r2, r2, #2
 80046a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6899      	ldr	r1, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	7e1b      	ldrb	r3, [r3, #24]
 80046b4:	005a      	lsls	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01b      	beq.n	8004700 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046d6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80046e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6859      	ldr	r1, [r3, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f2:	3b01      	subs	r3, #1
 80046f4:	035a      	lsls	r2, r3, #13
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]
 80046fe:	e007      	b.n	8004710 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800470e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800471e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	3b01      	subs	r3, #1
 800472c:	051a      	lsls	r2, r3, #20
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004744:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6899      	ldr	r1, [r3, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004752:	025a      	lsls	r2, r3, #9
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800476a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6899      	ldr	r1, [r3, #8]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	029a      	lsls	r2, r3, #10
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	609a      	str	r2, [r3, #8]
}
 8004780:	bf00      	nop
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	40012300 	.word	0x40012300
 8004790:	0f000001 	.word	0x0f000001

08004794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047a4:	4b0c      	ldr	r3, [pc, #48]	@ (80047d8 <__NVIC_SetPriorityGrouping+0x44>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80047b0:	4013      	ands	r3, r2
 80047b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047c6:	4a04      	ldr	r2, [pc, #16]	@ (80047d8 <__NVIC_SetPriorityGrouping+0x44>)
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	60d3      	str	r3, [r2, #12]
}
 80047cc:	bf00      	nop
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	e000ed00 	.word	0xe000ed00

080047dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047e0:	4b04      	ldr	r3, [pc, #16]	@ (80047f4 <__NVIC_GetPriorityGrouping+0x18>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	0a1b      	lsrs	r3, r3, #8
 80047e6:	f003 0307 	and.w	r3, r3, #7
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	e000ed00 	.word	0xe000ed00

080047f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004806:	2b00      	cmp	r3, #0
 8004808:	db0b      	blt.n	8004822 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	f003 021f 	and.w	r2, r3, #31
 8004810:	4907      	ldr	r1, [pc, #28]	@ (8004830 <__NVIC_EnableIRQ+0x38>)
 8004812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004816:	095b      	lsrs	r3, r3, #5
 8004818:	2001      	movs	r0, #1
 800481a:	fa00 f202 	lsl.w	r2, r0, r2
 800481e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	e000e100 	.word	0xe000e100

08004834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	4603      	mov	r3, r0
 800483c:	6039      	str	r1, [r7, #0]
 800483e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004844:	2b00      	cmp	r3, #0
 8004846:	db0a      	blt.n	800485e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	b2da      	uxtb	r2, r3
 800484c:	490c      	ldr	r1, [pc, #48]	@ (8004880 <__NVIC_SetPriority+0x4c>)
 800484e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004852:	0112      	lsls	r2, r2, #4
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	440b      	add	r3, r1
 8004858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800485c:	e00a      	b.n	8004874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	b2da      	uxtb	r2, r3
 8004862:	4908      	ldr	r1, [pc, #32]	@ (8004884 <__NVIC_SetPriority+0x50>)
 8004864:	79fb      	ldrb	r3, [r7, #7]
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	3b04      	subs	r3, #4
 800486c:	0112      	lsls	r2, r2, #4
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	440b      	add	r3, r1
 8004872:	761a      	strb	r2, [r3, #24]
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	e000e100 	.word	0xe000e100
 8004884:	e000ed00 	.word	0xe000ed00

08004888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004888:	b480      	push	{r7}
 800488a:	b089      	sub	sp, #36	@ 0x24
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	f1c3 0307 	rsb	r3, r3, #7
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	bf28      	it	cs
 80048a6:	2304      	movcs	r3, #4
 80048a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	3304      	adds	r3, #4
 80048ae:	2b06      	cmp	r3, #6
 80048b0:	d902      	bls.n	80048b8 <NVIC_EncodePriority+0x30>
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	3b03      	subs	r3, #3
 80048b6:	e000      	b.n	80048ba <NVIC_EncodePriority+0x32>
 80048b8:	2300      	movs	r3, #0
 80048ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048bc:	f04f 32ff 	mov.w	r2, #4294967295
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	43da      	mvns	r2, r3
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	401a      	ands	r2, r3
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048d0:	f04f 31ff 	mov.w	r1, #4294967295
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	fa01 f303 	lsl.w	r3, r1, r3
 80048da:	43d9      	mvns	r1, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048e0:	4313      	orrs	r3, r2
         );
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3724      	adds	r7, #36	@ 0x24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
	...

080048f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004900:	d301      	bcc.n	8004906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004902:	2301      	movs	r3, #1
 8004904:	e00f      	b.n	8004926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004906:	4a0a      	ldr	r2, [pc, #40]	@ (8004930 <SysTick_Config+0x40>)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3b01      	subs	r3, #1
 800490c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800490e:	210f      	movs	r1, #15
 8004910:	f04f 30ff 	mov.w	r0, #4294967295
 8004914:	f7ff ff8e 	bl	8004834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004918:	4b05      	ldr	r3, [pc, #20]	@ (8004930 <SysTick_Config+0x40>)
 800491a:	2200      	movs	r2, #0
 800491c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800491e:	4b04      	ldr	r3, [pc, #16]	@ (8004930 <SysTick_Config+0x40>)
 8004920:	2207      	movs	r2, #7
 8004922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	e000e010 	.word	0xe000e010

08004934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff ff29 	bl	8004794 <__NVIC_SetPriorityGrouping>
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800494a:	b580      	push	{r7, lr}
 800494c:	b086      	sub	sp, #24
 800494e:	af00      	add	r7, sp, #0
 8004950:	4603      	mov	r3, r0
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	607a      	str	r2, [r7, #4]
 8004956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004958:	2300      	movs	r3, #0
 800495a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800495c:	f7ff ff3e 	bl	80047dc <__NVIC_GetPriorityGrouping>
 8004960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	6978      	ldr	r0, [r7, #20]
 8004968:	f7ff ff8e 	bl	8004888 <NVIC_EncodePriority>
 800496c:	4602      	mov	r2, r0
 800496e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004972:	4611      	mov	r1, r2
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff ff5d 	bl	8004834 <__NVIC_SetPriority>
}
 800497a:	bf00      	nop
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	af00      	add	r7, sp, #0
 8004988:	4603      	mov	r3, r0
 800498a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800498c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff ff31 	bl	80047f8 <__NVIC_EnableIRQ>
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b082      	sub	sp, #8
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7ff ffa2 	bl	80048f0 <SysTick_Config>
 80049ac:	4603      	mov	r3, r0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80049ca:	4b23      	ldr	r3, [pc, #140]	@ (8004a58 <HAL_FLASH_Program+0xa0>)
 80049cc:	7e1b      	ldrb	r3, [r3, #24]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_FLASH_Program+0x1e>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e03b      	b.n	8004a4e <HAL_FLASH_Program+0x96>
 80049d6:	4b20      	ldr	r3, [pc, #128]	@ (8004a58 <HAL_FLASH_Program+0xa0>)
 80049d8:	2201      	movs	r2, #1
 80049da:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80049dc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80049e0:	f000 f870 	bl	8004ac4 <FLASH_WaitForLastOperation>
 80049e4:	4603      	mov	r3, r0
 80049e6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80049e8:	7dfb      	ldrb	r3, [r7, #23]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d12b      	bne.n	8004a46 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d105      	bne.n	8004a00 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80049f4:	783b      	ldrb	r3, [r7, #0]
 80049f6:	4619      	mov	r1, r3
 80049f8:	68b8      	ldr	r0, [r7, #8]
 80049fa:	f000 f91b 	bl	8004c34 <FLASH_Program_Byte>
 80049fe:	e016      	b.n	8004a2e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d105      	bne.n	8004a12 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004a06:	883b      	ldrh	r3, [r7, #0]
 8004a08:	4619      	mov	r1, r3
 8004a0a:	68b8      	ldr	r0, [r7, #8]
 8004a0c:	f000 f8ee 	bl	8004bec <FLASH_Program_HalfWord>
 8004a10:	e00d      	b.n	8004a2e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d105      	bne.n	8004a24 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	68b8      	ldr	r0, [r7, #8]
 8004a1e:	f000 f8c3 	bl	8004ba8 <FLASH_Program_Word>
 8004a22:	e004      	b.n	8004a2e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a28:	68b8      	ldr	r0, [r7, #8]
 8004a2a:	f000 f88b 	bl	8004b44 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a2e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004a32:	f000 f847 	bl	8004ac4 <FLASH_WaitForLastOperation>
 8004a36:	4603      	mov	r3, r0
 8004a38:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004a3a:	4b08      	ldr	r3, [pc, #32]	@ (8004a5c <HAL_FLASH_Program+0xa4>)
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	4a07      	ldr	r2, [pc, #28]	@ (8004a5c <HAL_FLASH_Program+0xa4>)
 8004a40:	f023 0301 	bic.w	r3, r3, #1
 8004a44:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004a46:	4b04      	ldr	r3, [pc, #16]	@ (8004a58 <HAL_FLASH_Program+0xa0>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20001548 	.word	0x20001548
 8004a5c:	40023c00 	.word	0x40023c00

08004a60 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a98 <HAL_FLASH_Unlock+0x38>)
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	da0b      	bge.n	8004a8a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004a72:	4b09      	ldr	r3, [pc, #36]	@ (8004a98 <HAL_FLASH_Unlock+0x38>)
 8004a74:	4a09      	ldr	r2, [pc, #36]	@ (8004a9c <HAL_FLASH_Unlock+0x3c>)
 8004a76:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004a78:	4b07      	ldr	r3, [pc, #28]	@ (8004a98 <HAL_FLASH_Unlock+0x38>)
 8004a7a:	4a09      	ldr	r2, [pc, #36]	@ (8004aa0 <HAL_FLASH_Unlock+0x40>)
 8004a7c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a7e:	4b06      	ldr	r3, [pc, #24]	@ (8004a98 <HAL_FLASH_Unlock+0x38>)
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	da01      	bge.n	8004a8a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004a8a:	79fb      	ldrb	r3, [r7, #7]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	40023c00 	.word	0x40023c00
 8004a9c:	45670123 	.word	0x45670123
 8004aa0:	cdef89ab 	.word	0xcdef89ab

08004aa4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004aa8:	4b05      	ldr	r3, [pc, #20]	@ (8004ac0 <HAL_FLASH_Lock+0x1c>)
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	4a04      	ldr	r2, [pc, #16]	@ (8004ac0 <HAL_FLASH_Lock+0x1c>)
 8004aae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ab2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	40023c00 	.word	0x40023c00

08004ac4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b3c <FLASH_WaitForLastOperation+0x78>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004ad6:	f7ff fa3b 	bl	8003f50 <HAL_GetTick>
 8004ada:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004adc:	e010      	b.n	8004b00 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae4:	d00c      	beq.n	8004b00 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d007      	beq.n	8004afc <FLASH_WaitForLastOperation+0x38>
 8004aec:	f7ff fa30 	bl	8003f50 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d201      	bcs.n	8004b00 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e019      	b.n	8004b34 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004b00:	4b0f      	ldr	r3, [pc, #60]	@ (8004b40 <FLASH_WaitForLastOperation+0x7c>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e8      	bne.n	8004ade <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b40 <FLASH_WaitForLastOperation+0x7c>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004b18:	4b09      	ldr	r3, [pc, #36]	@ (8004b40 <FLASH_WaitForLastOperation+0x7c>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004b1e:	4b08      	ldr	r3, [pc, #32]	@ (8004b40 <FLASH_WaitForLastOperation+0x7c>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004b2a:	f000 f8a5 	bl	8004c78 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
  
}  
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20001548 	.word	0x20001548
 8004b40:	40023c00 	.word	0x40023c00

08004b44 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b50:	4b14      	ldr	r3, [pc, #80]	@ (8004ba4 <FLASH_Program_DoubleWord+0x60>)
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	4a13      	ldr	r2, [pc, #76]	@ (8004ba4 <FLASH_Program_DoubleWord+0x60>)
 8004b56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004b5c:	4b11      	ldr	r3, [pc, #68]	@ (8004ba4 <FLASH_Program_DoubleWord+0x60>)
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	4a10      	ldr	r2, [pc, #64]	@ (8004ba4 <FLASH_Program_DoubleWord+0x60>)
 8004b62:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004b66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004b68:	4b0e      	ldr	r3, [pc, #56]	@ (8004ba4 <FLASH_Program_DoubleWord+0x60>)
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8004ba4 <FLASH_Program_DoubleWord+0x60>)
 8004b6e:	f043 0301 	orr.w	r3, r3, #1
 8004b72:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004b7a:	f3bf 8f6f 	isb	sy
}
 8004b7e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004b80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	000a      	movs	r2, r1
 8004b8e:	2300      	movs	r3, #0
 8004b90:	68f9      	ldr	r1, [r7, #12]
 8004b92:	3104      	adds	r1, #4
 8004b94:	4613      	mov	r3, r2
 8004b96:	600b      	str	r3, [r1, #0]
}
 8004b98:	bf00      	nop
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	40023c00 	.word	0x40023c00

08004ba8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004be8 <FLASH_Program_Word+0x40>)
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8004be8 <FLASH_Program_Word+0x40>)
 8004bb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bbc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004be8 <FLASH_Program_Word+0x40>)
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	4a09      	ldr	r2, [pc, #36]	@ (8004be8 <FLASH_Program_Word+0x40>)
 8004bc4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bc8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004bca:	4b07      	ldr	r3, [pc, #28]	@ (8004be8 <FLASH_Program_Word+0x40>)
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	4a06      	ldr	r2, [pc, #24]	@ (8004be8 <FLASH_Program_Word+0x40>)
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	601a      	str	r2, [r3, #0]
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	40023c00 	.word	0x40023c00

08004bec <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8004c30 <FLASH_Program_HalfWord+0x44>)
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8004c30 <FLASH_Program_HalfWord+0x44>)
 8004bfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004c04:	4b0a      	ldr	r3, [pc, #40]	@ (8004c30 <FLASH_Program_HalfWord+0x44>)
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	4a09      	ldr	r2, [pc, #36]	@ (8004c30 <FLASH_Program_HalfWord+0x44>)
 8004c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c10:	4b07      	ldr	r3, [pc, #28]	@ (8004c30 <FLASH_Program_HalfWord+0x44>)
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	4a06      	ldr	r2, [pc, #24]	@ (8004c30 <FLASH_Program_HalfWord+0x44>)
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	887a      	ldrh	r2, [r7, #2]
 8004c20:	801a      	strh	r2, [r3, #0]
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40023c00 	.word	0x40023c00

08004c34 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c40:	4b0c      	ldr	r3, [pc, #48]	@ (8004c74 <FLASH_Program_Byte+0x40>)
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	4a0b      	ldr	r2, [pc, #44]	@ (8004c74 <FLASH_Program_Byte+0x40>)
 8004c46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004c4c:	4b09      	ldr	r3, [pc, #36]	@ (8004c74 <FLASH_Program_Byte+0x40>)
 8004c4e:	4a09      	ldr	r2, [pc, #36]	@ (8004c74 <FLASH_Program_Byte+0x40>)
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c54:	4b07      	ldr	r3, [pc, #28]	@ (8004c74 <FLASH_Program_Byte+0x40>)
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	4a06      	ldr	r2, [pc, #24]	@ (8004c74 <FLASH_Program_Byte+0x40>)
 8004c5a:	f043 0301 	orr.w	r3, r3, #1
 8004c5e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	78fa      	ldrb	r2, [r7, #3]
 8004c64:	701a      	strb	r2, [r3, #0]
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40023c00 	.word	0x40023c00

08004c78 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8004d3c <FLASH_SetErrorCode+0xc4>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d008      	beq.n	8004c9a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004c88:	4b2d      	ldr	r3, [pc, #180]	@ (8004d40 <FLASH_SetErrorCode+0xc8>)
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	f043 0310 	orr.w	r3, r3, #16
 8004c90:	4a2b      	ldr	r2, [pc, #172]	@ (8004d40 <FLASH_SetErrorCode+0xc8>)
 8004c92:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004c94:	4b29      	ldr	r3, [pc, #164]	@ (8004d3c <FLASH_SetErrorCode+0xc4>)
 8004c96:	2210      	movs	r2, #16
 8004c98:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004c9a:	4b28      	ldr	r3, [pc, #160]	@ (8004d3c <FLASH_SetErrorCode+0xc4>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d008      	beq.n	8004cb8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004ca6:	4b26      	ldr	r3, [pc, #152]	@ (8004d40 <FLASH_SetErrorCode+0xc8>)
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f043 0308 	orr.w	r3, r3, #8
 8004cae:	4a24      	ldr	r2, [pc, #144]	@ (8004d40 <FLASH_SetErrorCode+0xc8>)
 8004cb0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004cb2:	4b22      	ldr	r3, [pc, #136]	@ (8004d3c <FLASH_SetErrorCode+0xc4>)
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004cb8:	4b20      	ldr	r3, [pc, #128]	@ (8004d3c <FLASH_SetErrorCode+0xc4>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d008      	beq.n	8004cd6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8004d40 <FLASH_SetErrorCode+0xc8>)
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	f043 0304 	orr.w	r3, r3, #4
 8004ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8004d40 <FLASH_SetErrorCode+0xc8>)
 8004cce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8004d3c <FLASH_SetErrorCode+0xc4>)
 8004cd2:	2240      	movs	r2, #64	@ 0x40
 8004cd4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004cd6:	4b19      	ldr	r3, [pc, #100]	@ (8004d3c <FLASH_SetErrorCode+0xc4>)
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d008      	beq.n	8004cf4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004ce2:	4b17      	ldr	r3, [pc, #92]	@ (8004d40 <FLASH_SetErrorCode+0xc8>)
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	f043 0302 	orr.w	r3, r3, #2
 8004cea:	4a15      	ldr	r2, [pc, #84]	@ (8004d40 <FLASH_SetErrorCode+0xc8>)
 8004cec:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004cee:	4b13      	ldr	r3, [pc, #76]	@ (8004d3c <FLASH_SetErrorCode+0xc4>)
 8004cf0:	2280      	movs	r2, #128	@ 0x80
 8004cf2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004cf4:	4b11      	ldr	r3, [pc, #68]	@ (8004d3c <FLASH_SetErrorCode+0xc4>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d009      	beq.n	8004d14 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004d00:	4b0f      	ldr	r3, [pc, #60]	@ (8004d40 <FLASH_SetErrorCode+0xc8>)
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	f043 0301 	orr.w	r3, r3, #1
 8004d08:	4a0d      	ldr	r2, [pc, #52]	@ (8004d40 <FLASH_SetErrorCode+0xc8>)
 8004d0a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d3c <FLASH_SetErrorCode+0xc4>)
 8004d0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d12:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004d14:	4b09      	ldr	r3, [pc, #36]	@ (8004d3c <FLASH_SetErrorCode+0xc4>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d008      	beq.n	8004d32 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004d20:	4b07      	ldr	r3, [pc, #28]	@ (8004d40 <FLASH_SetErrorCode+0xc8>)
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	f043 0320 	orr.w	r3, r3, #32
 8004d28:	4a05      	ldr	r2, [pc, #20]	@ (8004d40 <FLASH_SetErrorCode+0xc8>)
 8004d2a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004d2c:	4b03      	ldr	r3, [pc, #12]	@ (8004d3c <FLASH_SetErrorCode+0xc4>)
 8004d2e:	2202      	movs	r2, #2
 8004d30:	60da      	str	r2, [r3, #12]
  }
}
 8004d32:	bf00      	nop
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	40023c00 	.word	0x40023c00
 8004d40:	20001548 	.word	0x20001548

08004d44 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d102      	bne.n	8004d60 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	e010      	b.n	8004d82 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d103      	bne.n	8004d6e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004d66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	e009      	b.n	8004d82 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004d6e:	78fb      	ldrb	r3, [r7, #3]
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d103      	bne.n	8004d7c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004d74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	e002      	b.n	8004d82 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004d7c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004d80:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004d82:	4b13      	ldr	r3, [pc, #76]	@ (8004dd0 <FLASH_Erase_Sector+0x8c>)
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	4a12      	ldr	r2, [pc, #72]	@ (8004dd0 <FLASH_Erase_Sector+0x8c>)
 8004d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d8c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004d8e:	4b10      	ldr	r3, [pc, #64]	@ (8004dd0 <FLASH_Erase_Sector+0x8c>)
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	490f      	ldr	r1, [pc, #60]	@ (8004dd0 <FLASH_Erase_Sector+0x8c>)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd0 <FLASH_Erase_Sector+0x8c>)
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8004dd0 <FLASH_Erase_Sector+0x8c>)
 8004da0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004da4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004da6:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd0 <FLASH_Erase_Sector+0x8c>)
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4313      	orrs	r3, r2
 8004db0:	4a07      	ldr	r2, [pc, #28]	@ (8004dd0 <FLASH_Erase_Sector+0x8c>)
 8004db2:	f043 0302 	orr.w	r3, r3, #2
 8004db6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004db8:	4b05      	ldr	r3, [pc, #20]	@ (8004dd0 <FLASH_Erase_Sector+0x8c>)
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	4a04      	ldr	r2, [pc, #16]	@ (8004dd0 <FLASH_Erase_Sector+0x8c>)
 8004dbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dc2:	6113      	str	r3, [r2, #16]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	40023c00 	.word	0x40023c00

08004dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b089      	sub	sp, #36	@ 0x24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dea:	2300      	movs	r3, #0
 8004dec:	61fb      	str	r3, [r7, #28]
 8004dee:	e159      	b.n	80050a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004df0:	2201      	movs	r2, #1
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4013      	ands	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	f040 8148 	bne.w	800509e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d005      	beq.n	8004e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d130      	bne.n	8004e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	2203      	movs	r2, #3
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	43db      	mvns	r3, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	43db      	mvns	r3, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	091b      	lsrs	r3, r3, #4
 8004e72:	f003 0201 	and.w	r2, r3, #1
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d017      	beq.n	8004ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	2203      	movs	r2, #3
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 0303 	and.w	r3, r3, #3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d123      	bne.n	8004f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	08da      	lsrs	r2, r3, #3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3208      	adds	r2, #8
 8004ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	220f      	movs	r2, #15
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	43db      	mvns	r3, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	08da      	lsrs	r2, r3, #3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3208      	adds	r2, #8
 8004f12:	69b9      	ldr	r1, [r7, #24]
 8004f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	2203      	movs	r2, #3
 8004f24:	fa02 f303 	lsl.w	r3, r2, r3
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f003 0203 	and.w	r2, r3, #3
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80a2 	beq.w	800509e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	4b57      	ldr	r3, [pc, #348]	@ (80050bc <HAL_GPIO_Init+0x2e8>)
 8004f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f62:	4a56      	ldr	r2, [pc, #344]	@ (80050bc <HAL_GPIO_Init+0x2e8>)
 8004f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f6a:	4b54      	ldr	r3, [pc, #336]	@ (80050bc <HAL_GPIO_Init+0x2e8>)
 8004f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f76:	4a52      	ldr	r2, [pc, #328]	@ (80050c0 <HAL_GPIO_Init+0x2ec>)
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	089b      	lsrs	r3, r3, #2
 8004f7c:	3302      	adds	r3, #2
 8004f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	220f      	movs	r2, #15
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	43db      	mvns	r3, r3
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	4013      	ands	r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a49      	ldr	r2, [pc, #292]	@ (80050c4 <HAL_GPIO_Init+0x2f0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d019      	beq.n	8004fd6 <HAL_GPIO_Init+0x202>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a48      	ldr	r2, [pc, #288]	@ (80050c8 <HAL_GPIO_Init+0x2f4>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <HAL_GPIO_Init+0x1fe>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a47      	ldr	r2, [pc, #284]	@ (80050cc <HAL_GPIO_Init+0x2f8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00d      	beq.n	8004fce <HAL_GPIO_Init+0x1fa>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a46      	ldr	r2, [pc, #280]	@ (80050d0 <HAL_GPIO_Init+0x2fc>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d007      	beq.n	8004fca <HAL_GPIO_Init+0x1f6>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a45      	ldr	r2, [pc, #276]	@ (80050d4 <HAL_GPIO_Init+0x300>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d101      	bne.n	8004fc6 <HAL_GPIO_Init+0x1f2>
 8004fc2:	2304      	movs	r3, #4
 8004fc4:	e008      	b.n	8004fd8 <HAL_GPIO_Init+0x204>
 8004fc6:	2307      	movs	r3, #7
 8004fc8:	e006      	b.n	8004fd8 <HAL_GPIO_Init+0x204>
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e004      	b.n	8004fd8 <HAL_GPIO_Init+0x204>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e002      	b.n	8004fd8 <HAL_GPIO_Init+0x204>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <HAL_GPIO_Init+0x204>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	69fa      	ldr	r2, [r7, #28]
 8004fda:	f002 0203 	and.w	r2, r2, #3
 8004fde:	0092      	lsls	r2, r2, #2
 8004fe0:	4093      	lsls	r3, r2
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fe8:	4935      	ldr	r1, [pc, #212]	@ (80050c0 <HAL_GPIO_Init+0x2ec>)
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	089b      	lsrs	r3, r3, #2
 8004fee:	3302      	adds	r3, #2
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ff6:	4b38      	ldr	r3, [pc, #224]	@ (80050d8 <HAL_GPIO_Init+0x304>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	43db      	mvns	r3, r3
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	4013      	ands	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800501a:	4a2f      	ldr	r2, [pc, #188]	@ (80050d8 <HAL_GPIO_Init+0x304>)
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005020:	4b2d      	ldr	r3, [pc, #180]	@ (80050d8 <HAL_GPIO_Init+0x304>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	43db      	mvns	r3, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4013      	ands	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005044:	4a24      	ldr	r2, [pc, #144]	@ (80050d8 <HAL_GPIO_Init+0x304>)
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800504a:	4b23      	ldr	r3, [pc, #140]	@ (80050d8 <HAL_GPIO_Init+0x304>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	43db      	mvns	r3, r3
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	4013      	ands	r3, r2
 8005058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800506e:	4a1a      	ldr	r2, [pc, #104]	@ (80050d8 <HAL_GPIO_Init+0x304>)
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005074:	4b18      	ldr	r3, [pc, #96]	@ (80050d8 <HAL_GPIO_Init+0x304>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	43db      	mvns	r3, r3
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	4013      	ands	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005098:	4a0f      	ldr	r2, [pc, #60]	@ (80050d8 <HAL_GPIO_Init+0x304>)
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	3301      	adds	r3, #1
 80050a2:	61fb      	str	r3, [r7, #28]
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	2b0f      	cmp	r3, #15
 80050a8:	f67f aea2 	bls.w	8004df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050ac:	bf00      	nop
 80050ae:	bf00      	nop
 80050b0:	3724      	adds	r7, #36	@ 0x24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	40023800 	.word	0x40023800
 80050c0:	40013800 	.word	0x40013800
 80050c4:	40020000 	.word	0x40020000
 80050c8:	40020400 	.word	0x40020400
 80050cc:	40020800 	.word	0x40020800
 80050d0:	40020c00 	.word	0x40020c00
 80050d4:	40021000 	.word	0x40021000
 80050d8:	40013c00 	.word	0x40013c00

080050dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	460b      	mov	r3, r1
 80050e6:	807b      	strh	r3, [r7, #2]
 80050e8:	4613      	mov	r3, r2
 80050ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050ec:	787b      	ldrb	r3, [r7, #1]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050f2:	887a      	ldrh	r2, [r7, #2]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050f8:	e003      	b.n	8005102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050fa:	887b      	ldrh	r3, [r7, #2]
 80050fc:	041a      	lsls	r2, r3, #16
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	619a      	str	r2, [r3, #24]
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
	...

08005110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e12b      	b.n	800537a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fe fc4e 	bl	80039d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2224      	movs	r2, #36	@ 0x24
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0201 	bic.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005162:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005172:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005174:	f001 f9b8 	bl	80064e8 <HAL_RCC_GetPCLK1Freq>
 8005178:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	4a81      	ldr	r2, [pc, #516]	@ (8005384 <HAL_I2C_Init+0x274>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d807      	bhi.n	8005194 <HAL_I2C_Init+0x84>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4a80      	ldr	r2, [pc, #512]	@ (8005388 <HAL_I2C_Init+0x278>)
 8005188:	4293      	cmp	r3, r2
 800518a:	bf94      	ite	ls
 800518c:	2301      	movls	r3, #1
 800518e:	2300      	movhi	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	e006      	b.n	80051a2 <HAL_I2C_Init+0x92>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4a7d      	ldr	r2, [pc, #500]	@ (800538c <HAL_I2C_Init+0x27c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	bf94      	ite	ls
 800519c:	2301      	movls	r3, #1
 800519e:	2300      	movhi	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e0e7      	b.n	800537a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4a78      	ldr	r2, [pc, #480]	@ (8005390 <HAL_I2C_Init+0x280>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	0c9b      	lsrs	r3, r3, #18
 80051b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	4a6a      	ldr	r2, [pc, #424]	@ (8005384 <HAL_I2C_Init+0x274>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d802      	bhi.n	80051e4 <HAL_I2C_Init+0xd4>
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	3301      	adds	r3, #1
 80051e2:	e009      	b.n	80051f8 <HAL_I2C_Init+0xe8>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80051ea:	fb02 f303 	mul.w	r3, r2, r3
 80051ee:	4a69      	ldr	r2, [pc, #420]	@ (8005394 <HAL_I2C_Init+0x284>)
 80051f0:	fba2 2303 	umull	r2, r3, r2, r3
 80051f4:	099b      	lsrs	r3, r3, #6
 80051f6:	3301      	adds	r3, #1
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6812      	ldr	r2, [r2, #0]
 80051fc:	430b      	orrs	r3, r1
 80051fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800520a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	495c      	ldr	r1, [pc, #368]	@ (8005384 <HAL_I2C_Init+0x274>)
 8005214:	428b      	cmp	r3, r1
 8005216:	d819      	bhi.n	800524c <HAL_I2C_Init+0x13c>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	1e59      	subs	r1, r3, #1
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	fbb1 f3f3 	udiv	r3, r1, r3
 8005226:	1c59      	adds	r1, r3, #1
 8005228:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800522c:	400b      	ands	r3, r1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_I2C_Init+0x138>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	1e59      	subs	r1, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005240:	3301      	adds	r3, #1
 8005242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005246:	e051      	b.n	80052ec <HAL_I2C_Init+0x1dc>
 8005248:	2304      	movs	r3, #4
 800524a:	e04f      	b.n	80052ec <HAL_I2C_Init+0x1dc>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d111      	bne.n	8005278 <HAL_I2C_Init+0x168>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	1e58      	subs	r0, r3, #1
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6859      	ldr	r1, [r3, #4]
 800525c:	460b      	mov	r3, r1
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	440b      	add	r3, r1
 8005262:	fbb0 f3f3 	udiv	r3, r0, r3
 8005266:	3301      	adds	r3, #1
 8005268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800526c:	2b00      	cmp	r3, #0
 800526e:	bf0c      	ite	eq
 8005270:	2301      	moveq	r3, #1
 8005272:	2300      	movne	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	e012      	b.n	800529e <HAL_I2C_Init+0x18e>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	1e58      	subs	r0, r3, #1
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6859      	ldr	r1, [r3, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	0099      	lsls	r1, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	fbb0 f3f3 	udiv	r3, r0, r3
 800528e:	3301      	adds	r3, #1
 8005290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005294:	2b00      	cmp	r3, #0
 8005296:	bf0c      	ite	eq
 8005298:	2301      	moveq	r3, #1
 800529a:	2300      	movne	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_I2C_Init+0x196>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e022      	b.n	80052ec <HAL_I2C_Init+0x1dc>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10e      	bne.n	80052cc <HAL_I2C_Init+0x1bc>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1e58      	subs	r0, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6859      	ldr	r1, [r3, #4]
 80052b6:	460b      	mov	r3, r1
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	440b      	add	r3, r1
 80052bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80052c0:	3301      	adds	r3, #1
 80052c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052ca:	e00f      	b.n	80052ec <HAL_I2C_Init+0x1dc>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	1e58      	subs	r0, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6859      	ldr	r1, [r3, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	0099      	lsls	r1, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	fbb0 f3f3 	udiv	r3, r0, r3
 80052e2:	3301      	adds	r3, #1
 80052e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	6809      	ldr	r1, [r1, #0]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69da      	ldr	r2, [r3, #28]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800531a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6911      	ldr	r1, [r2, #16]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	68d2      	ldr	r2, [r2, #12]
 8005326:	4311      	orrs	r1, r2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6812      	ldr	r2, [r2, #0]
 800532c:	430b      	orrs	r3, r1
 800532e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695a      	ldr	r2, [r3, #20]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	000186a0 	.word	0x000186a0
 8005388:	001e847f 	.word	0x001e847f
 800538c:	003d08ff 	.word	0x003d08ff
 8005390:	431bde83 	.word	0x431bde83
 8005394:	10624dd3 	.word	0x10624dd3

08005398 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b088      	sub	sp, #32
 800539c:	af02      	add	r7, sp, #8
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	4608      	mov	r0, r1
 80053a2:	4611      	mov	r1, r2
 80053a4:	461a      	mov	r2, r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	817b      	strh	r3, [r7, #10]
 80053aa:	460b      	mov	r3, r1
 80053ac:	813b      	strh	r3, [r7, #8]
 80053ae:	4613      	mov	r3, r2
 80053b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053b2:	f7fe fdcd 	bl	8003f50 <HAL_GetTick>
 80053b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b20      	cmp	r3, #32
 80053c2:	f040 80d9 	bne.w	8005578 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	2319      	movs	r3, #25
 80053cc:	2201      	movs	r2, #1
 80053ce:	496d      	ldr	r1, [pc, #436]	@ (8005584 <HAL_I2C_Mem_Write+0x1ec>)
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f971 	bl	80056b8 <I2C_WaitOnFlagUntilTimeout>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80053dc:	2302      	movs	r3, #2
 80053de:	e0cc      	b.n	800557a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_I2C_Mem_Write+0x56>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e0c5      	b.n	800557a <HAL_I2C_Mem_Write+0x1e2>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b01      	cmp	r3, #1
 8005402:	d007      	beq.n	8005414 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005422:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2221      	movs	r2, #33	@ 0x21
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2240      	movs	r2, #64	@ 0x40
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a3a      	ldr	r2, [r7, #32]
 800543e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005444:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4a4d      	ldr	r2, [pc, #308]	@ (8005588 <HAL_I2C_Mem_Write+0x1f0>)
 8005454:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005456:	88f8      	ldrh	r0, [r7, #6]
 8005458:	893a      	ldrh	r2, [r7, #8]
 800545a:	8979      	ldrh	r1, [r7, #10]
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	4603      	mov	r3, r0
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 f890 	bl	800558c <I2C_RequestMemoryWrite>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d052      	beq.n	8005518 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e081      	b.n	800557a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fa36 	bl	80058ec <I2C_WaitOnTXEFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00d      	beq.n	80054a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548a:	2b04      	cmp	r3, #4
 800548c:	d107      	bne.n	800549e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800549c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e06b      	b.n	800557a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a6:	781a      	ldrb	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d11b      	bne.n	8005518 <HAL_I2C_Mem_Write+0x180>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d017      	beq.n	8005518 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ec:	781a      	ldrb	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005502:	3b01      	subs	r3, #1
 8005504:	b29a      	uxth	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1aa      	bne.n	8005476 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 fa29 	bl	800597c <I2C_WaitOnBTFFlagUntilTimeout>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00d      	beq.n	800554c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005534:	2b04      	cmp	r3, #4
 8005536:	d107      	bne.n	8005548 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005546:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e016      	b.n	800557a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800555a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	e000      	b.n	800557a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005578:	2302      	movs	r3, #2
  }
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	00100002 	.word	0x00100002
 8005588:	ffff0000 	.word	0xffff0000

0800558c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af02      	add	r7, sp, #8
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	4608      	mov	r0, r1
 8005596:	4611      	mov	r1, r2
 8005598:	461a      	mov	r2, r3
 800559a:	4603      	mov	r3, r0
 800559c:	817b      	strh	r3, [r7, #10]
 800559e:	460b      	mov	r3, r1
 80055a0:	813b      	strh	r3, [r7, #8]
 80055a2:	4613      	mov	r3, r2
 80055a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	2200      	movs	r2, #0
 80055be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 f878 	bl	80056b8 <I2C_WaitOnFlagUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00d      	beq.n	80055ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055dc:	d103      	bne.n	80055e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e05f      	b.n	80056aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055ea:	897b      	ldrh	r3, [r7, #10]
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	461a      	mov	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80055f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	6a3a      	ldr	r2, [r7, #32]
 80055fe:	492d      	ldr	r1, [pc, #180]	@ (80056b4 <I2C_RequestMemoryWrite+0x128>)
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 f8d3 	bl	80057ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e04c      	b.n	80056aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005610:	2300      	movs	r3, #0
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005628:	6a39      	ldr	r1, [r7, #32]
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 f95e 	bl	80058ec <I2C_WaitOnTXEFlagUntilTimeout>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00d      	beq.n	8005652 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563a:	2b04      	cmp	r3, #4
 800563c:	d107      	bne.n	800564e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800564c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e02b      	b.n	80056aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d105      	bne.n	8005664 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005658:	893b      	ldrh	r3, [r7, #8]
 800565a:	b2da      	uxtb	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	611a      	str	r2, [r3, #16]
 8005662:	e021      	b.n	80056a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005664:	893b      	ldrh	r3, [r7, #8]
 8005666:	0a1b      	lsrs	r3, r3, #8
 8005668:	b29b      	uxth	r3, r3
 800566a:	b2da      	uxtb	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005674:	6a39      	ldr	r1, [r7, #32]
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 f938 	bl	80058ec <I2C_WaitOnTXEFlagUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00d      	beq.n	800569e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005686:	2b04      	cmp	r3, #4
 8005688:	d107      	bne.n	800569a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005698:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e005      	b.n	80056aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800569e:	893b      	ldrh	r3, [r7, #8]
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	00010002 	.word	0x00010002

080056b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	603b      	str	r3, [r7, #0]
 80056c4:	4613      	mov	r3, r2
 80056c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056c8:	e048      	b.n	800575c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d0:	d044      	beq.n	800575c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d2:	f7fe fc3d 	bl	8003f50 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d302      	bcc.n	80056e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d139      	bne.n	800575c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	0c1b      	lsrs	r3, r3, #16
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d10d      	bne.n	800570e <I2C_WaitOnFlagUntilTimeout+0x56>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	43da      	mvns	r2, r3
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	4013      	ands	r3, r2
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	bf0c      	ite	eq
 8005704:	2301      	moveq	r3, #1
 8005706:	2300      	movne	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	e00c      	b.n	8005728 <I2C_WaitOnFlagUntilTimeout+0x70>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	43da      	mvns	r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4013      	ands	r3, r2
 800571a:	b29b      	uxth	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	bf0c      	ite	eq
 8005720:	2301      	moveq	r3, #1
 8005722:	2300      	movne	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	461a      	mov	r2, r3
 8005728:	79fb      	ldrb	r3, [r7, #7]
 800572a:	429a      	cmp	r2, r3
 800572c:	d116      	bne.n	800575c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2220      	movs	r2, #32
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005748:	f043 0220 	orr.w	r2, r3, #32
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e023      	b.n	80057a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	0c1b      	lsrs	r3, r3, #16
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b01      	cmp	r3, #1
 8005764:	d10d      	bne.n	8005782 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	43da      	mvns	r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4013      	ands	r3, r2
 8005772:	b29b      	uxth	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	bf0c      	ite	eq
 8005778:	2301      	moveq	r3, #1
 800577a:	2300      	movne	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	461a      	mov	r2, r3
 8005780:	e00c      	b.n	800579c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	43da      	mvns	r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	4013      	ands	r3, r2
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	bf0c      	ite	eq
 8005794:	2301      	moveq	r3, #1
 8005796:	2300      	movne	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	79fb      	ldrb	r3, [r7, #7]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d093      	beq.n	80056ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057ba:	e071      	b.n	80058a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057ca:	d123      	bne.n	8005814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005800:	f043 0204 	orr.w	r2, r3, #4
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e067      	b.n	80058e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581a:	d041      	beq.n	80058a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800581c:	f7fe fb98 	bl	8003f50 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	429a      	cmp	r2, r3
 800582a:	d302      	bcc.n	8005832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d136      	bne.n	80058a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	0c1b      	lsrs	r3, r3, #16
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b01      	cmp	r3, #1
 800583a:	d10c      	bne.n	8005856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	43da      	mvns	r2, r3
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	4013      	ands	r3, r2
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	bf14      	ite	ne
 800584e:	2301      	movne	r3, #1
 8005850:	2300      	moveq	r3, #0
 8005852:	b2db      	uxtb	r3, r3
 8005854:	e00b      	b.n	800586e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	43da      	mvns	r2, r3
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	4013      	ands	r3, r2
 8005862:	b29b      	uxth	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	bf14      	ite	ne
 8005868:	2301      	movne	r3, #1
 800586a:	2300      	moveq	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d016      	beq.n	80058a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2220      	movs	r2, #32
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588c:	f043 0220 	orr.w	r2, r3, #32
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e021      	b.n	80058e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	0c1b      	lsrs	r3, r3, #16
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d10c      	bne.n	80058c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	43da      	mvns	r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	4013      	ands	r3, r2
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	bf14      	ite	ne
 80058bc:	2301      	movne	r3, #1
 80058be:	2300      	moveq	r3, #0
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	e00b      	b.n	80058dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	43da      	mvns	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4013      	ands	r3, r2
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	bf14      	ite	ne
 80058d6:	2301      	movne	r3, #1
 80058d8:	2300      	moveq	r3, #0
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f47f af6d 	bne.w	80057bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058f8:	e034      	b.n	8005964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f886 	bl	8005a0c <I2C_IsAcknowledgeFailed>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e034      	b.n	8005974 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005910:	d028      	beq.n	8005964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005912:	f7fe fb1d 	bl	8003f50 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	429a      	cmp	r2, r3
 8005920:	d302      	bcc.n	8005928 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d11d      	bne.n	8005964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005932:	2b80      	cmp	r3, #128	@ 0x80
 8005934:	d016      	beq.n	8005964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2220      	movs	r2, #32
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005950:	f043 0220 	orr.w	r2, r3, #32
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e007      	b.n	8005974 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800596e:	2b80      	cmp	r3, #128	@ 0x80
 8005970:	d1c3      	bne.n	80058fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005988:	e034      	b.n	80059f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 f83e 	bl	8005a0c <I2C_IsAcknowledgeFailed>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e034      	b.n	8005a04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a0:	d028      	beq.n	80059f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059a2:	f7fe fad5 	bl	8003f50 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d302      	bcc.n	80059b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d11d      	bne.n	80059f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	f003 0304 	and.w	r3, r3, #4
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d016      	beq.n	80059f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e0:	f043 0220 	orr.w	r2, r3, #32
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e007      	b.n	8005a04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	f003 0304 	and.w	r3, r3, #4
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d1c3      	bne.n	800598a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a22:	d11b      	bne.n	8005a5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a48:	f043 0204 	orr.w	r2, r3, #4
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e000      	b.n	8005a5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b086      	sub	sp, #24
 8005a6e:	af02      	add	r7, sp, #8
 8005a70:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e101      	b.n	8005c80 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7fd ffe6 	bl	8003a68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2203      	movs	r2, #3
 8005aa0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005aaa:	d102      	bne.n	8005ab2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 fd8e 	bl	80065d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6818      	ldr	r0, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	7c1a      	ldrb	r2, [r3, #16]
 8005ac4:	f88d 2000 	strb.w	r2, [sp]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005acc:	f000 fd20 	bl	8006510 <USB_CoreInit>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d005      	beq.n	8005ae2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2202      	movs	r2, #2
 8005ada:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e0ce      	b.n	8005c80 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 fd86 	bl	80065fa <USB_SetCurrentMode>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e0bf      	b.n	8005c80 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b00:	2300      	movs	r3, #0
 8005b02:	73fb      	strb	r3, [r7, #15]
 8005b04:	e04a      	b.n	8005b9c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b06:	7bfa      	ldrb	r2, [r7, #15]
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	4413      	add	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	440b      	add	r3, r1
 8005b14:	3315      	adds	r3, #21
 8005b16:	2201      	movs	r2, #1
 8005b18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b1a:	7bfa      	ldrb	r2, [r7, #15]
 8005b1c:	6879      	ldr	r1, [r7, #4]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	440b      	add	r3, r1
 8005b28:	3314      	adds	r3, #20
 8005b2a:	7bfa      	ldrb	r2, [r7, #15]
 8005b2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005b2e:	7bfa      	ldrb	r2, [r7, #15]
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	b298      	uxth	r0, r3
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	4613      	mov	r3, r2
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	4413      	add	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	440b      	add	r3, r1
 8005b40:	332e      	adds	r3, #46	@ 0x2e
 8005b42:	4602      	mov	r2, r0
 8005b44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b46:	7bfa      	ldrb	r2, [r7, #15]
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	440b      	add	r3, r1
 8005b54:	3318      	adds	r3, #24
 8005b56:	2200      	movs	r2, #0
 8005b58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005b5a:	7bfa      	ldrb	r2, [r7, #15]
 8005b5c:	6879      	ldr	r1, [r7, #4]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	4413      	add	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	440b      	add	r3, r1
 8005b68:	331c      	adds	r3, #28
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b6e:	7bfa      	ldrb	r2, [r7, #15]
 8005b70:	6879      	ldr	r1, [r7, #4]
 8005b72:	4613      	mov	r3, r2
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	4413      	add	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	440b      	add	r3, r1
 8005b7c:	3320      	adds	r3, #32
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b82:	7bfa      	ldrb	r2, [r7, #15]
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	4613      	mov	r3, r2
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	4413      	add	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	440b      	add	r3, r1
 8005b90:	3324      	adds	r3, #36	@ 0x24
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b96:	7bfb      	ldrb	r3, [r7, #15]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	73fb      	strb	r3, [r7, #15]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	791b      	ldrb	r3, [r3, #4]
 8005ba0:	7bfa      	ldrb	r2, [r7, #15]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d3af      	bcc.n	8005b06 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	73fb      	strb	r3, [r7, #15]
 8005baa:	e044      	b.n	8005c36 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005bac:	7bfa      	ldrb	r2, [r7, #15]
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	4413      	add	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	440b      	add	r3, r1
 8005bba:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005bc2:	7bfa      	ldrb	r2, [r7, #15]
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	4413      	add	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005bd4:	7bfa      	ldrb	r2, [r7, #15]
 8005bd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005bd8:	7bfa      	ldrb	r2, [r7, #15]
 8005bda:	6879      	ldr	r1, [r7, #4]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	4413      	add	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	440b      	add	r3, r1
 8005be6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005bea:	2200      	movs	r2, #0
 8005bec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005bee:	7bfa      	ldrb	r2, [r7, #15]
 8005bf0:	6879      	ldr	r1, [r7, #4]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	4413      	add	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	440b      	add	r3, r1
 8005bfc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c04:	7bfa      	ldrb	r2, [r7, #15]
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	440b      	add	r3, r1
 8005c12:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005c16:	2200      	movs	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c1a:	7bfa      	ldrb	r2, [r7, #15]
 8005c1c:	6879      	ldr	r1, [r7, #4]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	00db      	lsls	r3, r3, #3
 8005c22:	4413      	add	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	440b      	add	r3, r1
 8005c28:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	3301      	adds	r3, #1
 8005c34:	73fb      	strb	r3, [r7, #15]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	791b      	ldrb	r3, [r3, #4]
 8005c3a:	7bfa      	ldrb	r2, [r7, #15]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d3b5      	bcc.n	8005bac <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6818      	ldr	r0, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	7c1a      	ldrb	r2, [r3, #16]
 8005c48:	f88d 2000 	strb.w	r2, [sp]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c50:	f000 fd20 	bl	8006694 <USB_DevInit>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d005      	beq.n	8005c66 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e00c      	b.n	8005c80 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 fee8 	bl	8006a4e <USB_DevDisconnect>

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e267      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d075      	beq.n	8005d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ca6:	4b88      	ldr	r3, [pc, #544]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 030c 	and.w	r3, r3, #12
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d00c      	beq.n	8005ccc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cb2:	4b85      	ldr	r3, [pc, #532]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cba:	2b08      	cmp	r3, #8
 8005cbc:	d112      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cbe:	4b82      	ldr	r3, [pc, #520]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cca:	d10b      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ccc:	4b7e      	ldr	r3, [pc, #504]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d05b      	beq.n	8005d90 <HAL_RCC_OscConfig+0x108>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d157      	bne.n	8005d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e242      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cec:	d106      	bne.n	8005cfc <HAL_RCC_OscConfig+0x74>
 8005cee:	4b76      	ldr	r3, [pc, #472]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a75      	ldr	r2, [pc, #468]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	e01d      	b.n	8005d38 <HAL_RCC_OscConfig+0xb0>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d04:	d10c      	bne.n	8005d20 <HAL_RCC_OscConfig+0x98>
 8005d06:	4b70      	ldr	r3, [pc, #448]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a6f      	ldr	r2, [pc, #444]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	4b6d      	ldr	r3, [pc, #436]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a6c      	ldr	r2, [pc, #432]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	e00b      	b.n	8005d38 <HAL_RCC_OscConfig+0xb0>
 8005d20:	4b69      	ldr	r3, [pc, #420]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a68      	ldr	r2, [pc, #416]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	4b66      	ldr	r3, [pc, #408]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a65      	ldr	r2, [pc, #404]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d013      	beq.n	8005d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d40:	f7fe f906 	bl	8003f50 <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d48:	f7fe f902 	bl	8003f50 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b64      	cmp	r3, #100	@ 0x64
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e207      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d5a:	4b5b      	ldr	r3, [pc, #364]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0f0      	beq.n	8005d48 <HAL_RCC_OscConfig+0xc0>
 8005d66:	e014      	b.n	8005d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d68:	f7fe f8f2 	bl	8003f50 <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d70:	f7fe f8ee 	bl	8003f50 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b64      	cmp	r3, #100	@ 0x64
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e1f3      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d82:	4b51      	ldr	r3, [pc, #324]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1f0      	bne.n	8005d70 <HAL_RCC_OscConfig+0xe8>
 8005d8e:	e000      	b.n	8005d92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d063      	beq.n	8005e66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d9e:	4b4a      	ldr	r3, [pc, #296]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 030c 	and.w	r3, r3, #12
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00b      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005daa:	4b47      	ldr	r3, [pc, #284]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005db2:	2b08      	cmp	r3, #8
 8005db4:	d11c      	bne.n	8005df0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005db6:	4b44      	ldr	r3, [pc, #272]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d116      	bne.n	8005df0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dc2:	4b41      	ldr	r3, [pc, #260]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d005      	beq.n	8005dda <HAL_RCC_OscConfig+0x152>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d001      	beq.n	8005dda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e1c7      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dda:	4b3b      	ldr	r3, [pc, #236]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	4937      	ldr	r1, [pc, #220]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dee:	e03a      	b.n	8005e66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d020      	beq.n	8005e3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005df8:	4b34      	ldr	r3, [pc, #208]	@ (8005ecc <HAL_RCC_OscConfig+0x244>)
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dfe:	f7fe f8a7 	bl	8003f50 <HAL_GetTick>
 8005e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e04:	e008      	b.n	8005e18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e06:	f7fe f8a3 	bl	8003f50 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d901      	bls.n	8005e18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e1a8      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e18:	4b2b      	ldr	r3, [pc, #172]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0f0      	beq.n	8005e06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e24:	4b28      	ldr	r3, [pc, #160]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	4925      	ldr	r1, [pc, #148]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	600b      	str	r3, [r1, #0]
 8005e38:	e015      	b.n	8005e66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e3a:	4b24      	ldr	r3, [pc, #144]	@ (8005ecc <HAL_RCC_OscConfig+0x244>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e40:	f7fe f886 	bl	8003f50 <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e48:	f7fe f882 	bl	8003f50 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e187      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1f0      	bne.n	8005e48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0308 	and.w	r3, r3, #8
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d036      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d016      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e7a:	4b15      	ldr	r3, [pc, #84]	@ (8005ed0 <HAL_RCC_OscConfig+0x248>)
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e80:	f7fe f866 	bl	8003f50 <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e88:	f7fe f862 	bl	8003f50 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e167      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0f0      	beq.n	8005e88 <HAL_RCC_OscConfig+0x200>
 8005ea6:	e01b      	b.n	8005ee0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ea8:	4b09      	ldr	r3, [pc, #36]	@ (8005ed0 <HAL_RCC_OscConfig+0x248>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eae:	f7fe f84f 	bl	8003f50 <HAL_GetTick>
 8005eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eb4:	e00e      	b.n	8005ed4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eb6:	f7fe f84b 	bl	8003f50 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d907      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e150      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
 8005ec8:	40023800 	.word	0x40023800
 8005ecc:	42470000 	.word	0x42470000
 8005ed0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ed4:	4b88      	ldr	r3, [pc, #544]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005ed6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1ea      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 8097 	beq.w	800601c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ef2:	4b81      	ldr	r3, [pc, #516]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10f      	bne.n	8005f1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005efe:	2300      	movs	r3, #0
 8005f00:	60bb      	str	r3, [r7, #8]
 8005f02:	4b7d      	ldr	r3, [pc, #500]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f06:	4a7c      	ldr	r2, [pc, #496]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f0e:	4b7a      	ldr	r3, [pc, #488]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f16:	60bb      	str	r3, [r7, #8]
 8005f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f1e:	4b77      	ldr	r3, [pc, #476]	@ (80060fc <HAL_RCC_OscConfig+0x474>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d118      	bne.n	8005f5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f2a:	4b74      	ldr	r3, [pc, #464]	@ (80060fc <HAL_RCC_OscConfig+0x474>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a73      	ldr	r2, [pc, #460]	@ (80060fc <HAL_RCC_OscConfig+0x474>)
 8005f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f36:	f7fe f80b 	bl	8003f50 <HAL_GetTick>
 8005f3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f3c:	e008      	b.n	8005f50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f3e:	f7fe f807 	bl	8003f50 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d901      	bls.n	8005f50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e10c      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f50:	4b6a      	ldr	r3, [pc, #424]	@ (80060fc <HAL_RCC_OscConfig+0x474>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d0f0      	beq.n	8005f3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d106      	bne.n	8005f72 <HAL_RCC_OscConfig+0x2ea>
 8005f64:	4b64      	ldr	r3, [pc, #400]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f68:	4a63      	ldr	r2, [pc, #396]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f6a:	f043 0301 	orr.w	r3, r3, #1
 8005f6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f70:	e01c      	b.n	8005fac <HAL_RCC_OscConfig+0x324>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	2b05      	cmp	r3, #5
 8005f78:	d10c      	bne.n	8005f94 <HAL_RCC_OscConfig+0x30c>
 8005f7a:	4b5f      	ldr	r3, [pc, #380]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7e:	4a5e      	ldr	r2, [pc, #376]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f80:	f043 0304 	orr.w	r3, r3, #4
 8005f84:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f86:	4b5c      	ldr	r3, [pc, #368]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f8a:	4a5b      	ldr	r2, [pc, #364]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f8c:	f043 0301 	orr.w	r3, r3, #1
 8005f90:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f92:	e00b      	b.n	8005fac <HAL_RCC_OscConfig+0x324>
 8005f94:	4b58      	ldr	r3, [pc, #352]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f98:	4a57      	ldr	r2, [pc, #348]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005f9a:	f023 0301 	bic.w	r3, r3, #1
 8005f9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fa0:	4b55      	ldr	r3, [pc, #340]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa4:	4a54      	ldr	r2, [pc, #336]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005fa6:	f023 0304 	bic.w	r3, r3, #4
 8005faa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d015      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb4:	f7fd ffcc 	bl	8003f50 <HAL_GetTick>
 8005fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fba:	e00a      	b.n	8005fd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fbc:	f7fd ffc8 	bl	8003f50 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e0cb      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fd2:	4b49      	ldr	r3, [pc, #292]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 8005fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0ee      	beq.n	8005fbc <HAL_RCC_OscConfig+0x334>
 8005fde:	e014      	b.n	800600a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fe0:	f7fd ffb6 	bl	8003f50 <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fe6:	e00a      	b.n	8005ffe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fe8:	f7fd ffb2 	bl	8003f50 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e0b5      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 8006000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1ee      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800600a:	7dfb      	ldrb	r3, [r7, #23]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d105      	bne.n	800601c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006010:	4b39      	ldr	r3, [pc, #228]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 8006012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006014:	4a38      	ldr	r2, [pc, #224]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 8006016:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800601a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 80a1 	beq.w	8006168 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006026:	4b34      	ldr	r3, [pc, #208]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 030c 	and.w	r3, r3, #12
 800602e:	2b08      	cmp	r3, #8
 8006030:	d05c      	beq.n	80060ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	2b02      	cmp	r3, #2
 8006038:	d141      	bne.n	80060be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800603a:	4b31      	ldr	r3, [pc, #196]	@ (8006100 <HAL_RCC_OscConfig+0x478>)
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006040:	f7fd ff86 	bl	8003f50 <HAL_GetTick>
 8006044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006048:	f7fd ff82 	bl	8003f50 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e087      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800605a:	4b27      	ldr	r3, [pc, #156]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1f0      	bne.n	8006048 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69da      	ldr	r2, [r3, #28]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006074:	019b      	lsls	r3, r3, #6
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607c:	085b      	lsrs	r3, r3, #1
 800607e:	3b01      	subs	r3, #1
 8006080:	041b      	lsls	r3, r3, #16
 8006082:	431a      	orrs	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006088:	061b      	lsls	r3, r3, #24
 800608a:	491b      	ldr	r1, [pc, #108]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 800608c:	4313      	orrs	r3, r2
 800608e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006090:	4b1b      	ldr	r3, [pc, #108]	@ (8006100 <HAL_RCC_OscConfig+0x478>)
 8006092:	2201      	movs	r2, #1
 8006094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006096:	f7fd ff5b 	bl	8003f50 <HAL_GetTick>
 800609a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800609c:	e008      	b.n	80060b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800609e:	f7fd ff57 	bl	8003f50 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d901      	bls.n	80060b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e05c      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060b0:	4b11      	ldr	r3, [pc, #68]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0f0      	beq.n	800609e <HAL_RCC_OscConfig+0x416>
 80060bc:	e054      	b.n	8006168 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060be:	4b10      	ldr	r3, [pc, #64]	@ (8006100 <HAL_RCC_OscConfig+0x478>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c4:	f7fd ff44 	bl	8003f50 <HAL_GetTick>
 80060c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ca:	e008      	b.n	80060de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060cc:	f7fd ff40 	bl	8003f50 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e045      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060de:	4b06      	ldr	r3, [pc, #24]	@ (80060f8 <HAL_RCC_OscConfig+0x470>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1f0      	bne.n	80060cc <HAL_RCC_OscConfig+0x444>
 80060ea:	e03d      	b.n	8006168 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d107      	bne.n	8006104 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e038      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
 80060f8:	40023800 	.word	0x40023800
 80060fc:	40007000 	.word	0x40007000
 8006100:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006104:	4b1b      	ldr	r3, [pc, #108]	@ (8006174 <HAL_RCC_OscConfig+0x4ec>)
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d028      	beq.n	8006164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800611c:	429a      	cmp	r2, r3
 800611e:	d121      	bne.n	8006164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800612a:	429a      	cmp	r2, r3
 800612c:	d11a      	bne.n	8006164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006134:	4013      	ands	r3, r2
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800613a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800613c:	4293      	cmp	r3, r2
 800613e:	d111      	bne.n	8006164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614a:	085b      	lsrs	r3, r3, #1
 800614c:	3b01      	subs	r3, #1
 800614e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006150:	429a      	cmp	r2, r3
 8006152:	d107      	bne.n	8006164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006160:	429a      	cmp	r2, r3
 8006162:	d001      	beq.n	8006168 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e000      	b.n	800616a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	40023800 	.word	0x40023800

08006178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e0cc      	b.n	8006326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800618c:	4b68      	ldr	r3, [pc, #416]	@ (8006330 <HAL_RCC_ClockConfig+0x1b8>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0307 	and.w	r3, r3, #7
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	429a      	cmp	r2, r3
 8006198:	d90c      	bls.n	80061b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800619a:	4b65      	ldr	r3, [pc, #404]	@ (8006330 <HAL_RCC_ClockConfig+0x1b8>)
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061a2:	4b63      	ldr	r3, [pc, #396]	@ (8006330 <HAL_RCC_ClockConfig+0x1b8>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0307 	and.w	r3, r3, #7
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d001      	beq.n	80061b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e0b8      	b.n	8006326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d020      	beq.n	8006202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d005      	beq.n	80061d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061cc:	4b59      	ldr	r3, [pc, #356]	@ (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	4a58      	ldr	r2, [pc, #352]	@ (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80061d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80061d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0308 	and.w	r3, r3, #8
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d005      	beq.n	80061f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061e4:	4b53      	ldr	r3, [pc, #332]	@ (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	4a52      	ldr	r2, [pc, #328]	@ (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80061ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80061ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061f0:	4b50      	ldr	r3, [pc, #320]	@ (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	494d      	ldr	r1, [pc, #308]	@ (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d044      	beq.n	8006298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d107      	bne.n	8006226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006216:	4b47      	ldr	r3, [pc, #284]	@ (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d119      	bne.n	8006256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e07f      	b.n	8006326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	2b02      	cmp	r3, #2
 800622c:	d003      	beq.n	8006236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006232:	2b03      	cmp	r3, #3
 8006234:	d107      	bne.n	8006246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006236:	4b3f      	ldr	r3, [pc, #252]	@ (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d109      	bne.n	8006256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e06f      	b.n	8006326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006246:	4b3b      	ldr	r3, [pc, #236]	@ (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e067      	b.n	8006326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006256:	4b37      	ldr	r3, [pc, #220]	@ (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f023 0203 	bic.w	r2, r3, #3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	4934      	ldr	r1, [pc, #208]	@ (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 8006264:	4313      	orrs	r3, r2
 8006266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006268:	f7fd fe72 	bl	8003f50 <HAL_GetTick>
 800626c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800626e:	e00a      	b.n	8006286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006270:	f7fd fe6e 	bl	8003f50 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800627e:	4293      	cmp	r3, r2
 8006280:	d901      	bls.n	8006286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e04f      	b.n	8006326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006286:	4b2b      	ldr	r3, [pc, #172]	@ (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 020c 	and.w	r2, r3, #12
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	429a      	cmp	r2, r3
 8006296:	d1eb      	bne.n	8006270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006298:	4b25      	ldr	r3, [pc, #148]	@ (8006330 <HAL_RCC_ClockConfig+0x1b8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0307 	and.w	r3, r3, #7
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d20c      	bcs.n	80062c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a6:	4b22      	ldr	r3, [pc, #136]	@ (8006330 <HAL_RCC_ClockConfig+0x1b8>)
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ae:	4b20      	ldr	r3, [pc, #128]	@ (8006330 <HAL_RCC_ClockConfig+0x1b8>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d001      	beq.n	80062c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e032      	b.n	8006326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d008      	beq.n	80062de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062cc:	4b19      	ldr	r3, [pc, #100]	@ (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	4916      	ldr	r1, [pc, #88]	@ (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0308 	and.w	r3, r3, #8
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d009      	beq.n	80062fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062ea:	4b12      	ldr	r3, [pc, #72]	@ (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	490e      	ldr	r1, [pc, #56]	@ (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062fe:	f000 f821 	bl	8006344 <HAL_RCC_GetSysClockFreq>
 8006302:	4602      	mov	r2, r0
 8006304:	4b0b      	ldr	r3, [pc, #44]	@ (8006334 <HAL_RCC_ClockConfig+0x1bc>)
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	091b      	lsrs	r3, r3, #4
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	490a      	ldr	r1, [pc, #40]	@ (8006338 <HAL_RCC_ClockConfig+0x1c0>)
 8006310:	5ccb      	ldrb	r3, [r1, r3]
 8006312:	fa22 f303 	lsr.w	r3, r2, r3
 8006316:	4a09      	ldr	r2, [pc, #36]	@ (800633c <HAL_RCC_ClockConfig+0x1c4>)
 8006318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800631a:	4b09      	ldr	r3, [pc, #36]	@ (8006340 <HAL_RCC_ClockConfig+0x1c8>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f7fd fdd2 	bl	8003ec8 <HAL_InitTick>

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	40023c00 	.word	0x40023c00
 8006334:	40023800 	.word	0x40023800
 8006338:	0800f10c 	.word	0x0800f10c
 800633c:	20000208 	.word	0x20000208
 8006340:	20000224 	.word	0x20000224

08006344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006348:	b090      	sub	sp, #64	@ 0x40
 800634a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006350:	2300      	movs	r3, #0
 8006352:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006354:	2300      	movs	r3, #0
 8006356:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800635c:	4b59      	ldr	r3, [pc, #356]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f003 030c 	and.w	r3, r3, #12
 8006364:	2b08      	cmp	r3, #8
 8006366:	d00d      	beq.n	8006384 <HAL_RCC_GetSysClockFreq+0x40>
 8006368:	2b08      	cmp	r3, #8
 800636a:	f200 80a1 	bhi.w	80064b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <HAL_RCC_GetSysClockFreq+0x34>
 8006372:	2b04      	cmp	r3, #4
 8006374:	d003      	beq.n	800637e <HAL_RCC_GetSysClockFreq+0x3a>
 8006376:	e09b      	b.n	80064b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006378:	4b53      	ldr	r3, [pc, #332]	@ (80064c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800637a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800637c:	e09b      	b.n	80064b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800637e:	4b53      	ldr	r3, [pc, #332]	@ (80064cc <HAL_RCC_GetSysClockFreq+0x188>)
 8006380:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006382:	e098      	b.n	80064b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006384:	4b4f      	ldr	r3, [pc, #316]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800638c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800638e:	4b4d      	ldr	r3, [pc, #308]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d028      	beq.n	80063ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800639a:	4b4a      	ldr	r3, [pc, #296]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	099b      	lsrs	r3, r3, #6
 80063a0:	2200      	movs	r2, #0
 80063a2:	623b      	str	r3, [r7, #32]
 80063a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80063ac:	2100      	movs	r1, #0
 80063ae:	4b47      	ldr	r3, [pc, #284]	@ (80064cc <HAL_RCC_GetSysClockFreq+0x188>)
 80063b0:	fb03 f201 	mul.w	r2, r3, r1
 80063b4:	2300      	movs	r3, #0
 80063b6:	fb00 f303 	mul.w	r3, r0, r3
 80063ba:	4413      	add	r3, r2
 80063bc:	4a43      	ldr	r2, [pc, #268]	@ (80064cc <HAL_RCC_GetSysClockFreq+0x188>)
 80063be:	fba0 1202 	umull	r1, r2, r0, r2
 80063c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063c4:	460a      	mov	r2, r1
 80063c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80063c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063ca:	4413      	add	r3, r2
 80063cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d0:	2200      	movs	r2, #0
 80063d2:	61bb      	str	r3, [r7, #24]
 80063d4:	61fa      	str	r2, [r7, #28]
 80063d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80063de:	f7f9 ff67 	bl	80002b0 <__aeabi_uldivmod>
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	4613      	mov	r3, r2
 80063e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063ea:	e053      	b.n	8006494 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063ec:	4b35      	ldr	r3, [pc, #212]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	099b      	lsrs	r3, r3, #6
 80063f2:	2200      	movs	r2, #0
 80063f4:	613b      	str	r3, [r7, #16]
 80063f6:	617a      	str	r2, [r7, #20]
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80063fe:	f04f 0b00 	mov.w	fp, #0
 8006402:	4652      	mov	r2, sl
 8006404:	465b      	mov	r3, fp
 8006406:	f04f 0000 	mov.w	r0, #0
 800640a:	f04f 0100 	mov.w	r1, #0
 800640e:	0159      	lsls	r1, r3, #5
 8006410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006414:	0150      	lsls	r0, r2, #5
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	ebb2 080a 	subs.w	r8, r2, sl
 800641e:	eb63 090b 	sbc.w	r9, r3, fp
 8006422:	f04f 0200 	mov.w	r2, #0
 8006426:	f04f 0300 	mov.w	r3, #0
 800642a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800642e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006432:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006436:	ebb2 0408 	subs.w	r4, r2, r8
 800643a:	eb63 0509 	sbc.w	r5, r3, r9
 800643e:	f04f 0200 	mov.w	r2, #0
 8006442:	f04f 0300 	mov.w	r3, #0
 8006446:	00eb      	lsls	r3, r5, #3
 8006448:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800644c:	00e2      	lsls	r2, r4, #3
 800644e:	4614      	mov	r4, r2
 8006450:	461d      	mov	r5, r3
 8006452:	eb14 030a 	adds.w	r3, r4, sl
 8006456:	603b      	str	r3, [r7, #0]
 8006458:	eb45 030b 	adc.w	r3, r5, fp
 800645c:	607b      	str	r3, [r7, #4]
 800645e:	f04f 0200 	mov.w	r2, #0
 8006462:	f04f 0300 	mov.w	r3, #0
 8006466:	e9d7 4500 	ldrd	r4, r5, [r7]
 800646a:	4629      	mov	r1, r5
 800646c:	028b      	lsls	r3, r1, #10
 800646e:	4621      	mov	r1, r4
 8006470:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006474:	4621      	mov	r1, r4
 8006476:	028a      	lsls	r2, r1, #10
 8006478:	4610      	mov	r0, r2
 800647a:	4619      	mov	r1, r3
 800647c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800647e:	2200      	movs	r2, #0
 8006480:	60bb      	str	r3, [r7, #8]
 8006482:	60fa      	str	r2, [r7, #12]
 8006484:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006488:	f7f9 ff12 	bl	80002b0 <__aeabi_uldivmod>
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	4613      	mov	r3, r2
 8006492:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006494:	4b0b      	ldr	r3, [pc, #44]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	0c1b      	lsrs	r3, r3, #16
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	3301      	adds	r3, #1
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80064a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80064a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80064ae:	e002      	b.n	80064b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064b0:	4b05      	ldr	r3, [pc, #20]	@ (80064c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80064b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80064b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3740      	adds	r7, #64	@ 0x40
 80064bc:	46bd      	mov	sp, r7
 80064be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064c2:	bf00      	nop
 80064c4:	40023800 	.word	0x40023800
 80064c8:	00f42400 	.word	0x00f42400
 80064cc:	018cba80 	.word	0x018cba80

080064d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064d4:	4b03      	ldr	r3, [pc, #12]	@ (80064e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80064d6:	681b      	ldr	r3, [r3, #0]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	20000208 	.word	0x20000208

080064e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064ec:	f7ff fff0 	bl	80064d0 <HAL_RCC_GetHCLKFreq>
 80064f0:	4602      	mov	r2, r0
 80064f2:	4b05      	ldr	r3, [pc, #20]	@ (8006508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	0a9b      	lsrs	r3, r3, #10
 80064f8:	f003 0307 	and.w	r3, r3, #7
 80064fc:	4903      	ldr	r1, [pc, #12]	@ (800650c <HAL_RCC_GetPCLK1Freq+0x24>)
 80064fe:	5ccb      	ldrb	r3, [r1, r3]
 8006500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006504:	4618      	mov	r0, r3
 8006506:	bd80      	pop	{r7, pc}
 8006508:	40023800 	.word	0x40023800
 800650c:	0800f11c 	.word	0x0800f11c

08006510 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006510:	b084      	sub	sp, #16
 8006512:	b580      	push	{r7, lr}
 8006514:	b084      	sub	sp, #16
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
 800651a:	f107 001c 	add.w	r0, r7, #28
 800651e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006522:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006526:	2b01      	cmp	r3, #1
 8006528:	d123      	bne.n	8006572 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800652e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800653e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006552:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006556:	2b01      	cmp	r3, #1
 8006558:	d105      	bne.n	8006566 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 faa0 	bl	8006aac <USB_CoreReset>
 800656c:	4603      	mov	r3, r0
 800656e:	73fb      	strb	r3, [r7, #15]
 8006570:	e01b      	b.n	80065aa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fa94 	bl	8006aac <USB_CoreReset>
 8006584:	4603      	mov	r3, r0
 8006586:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006588:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800658c:	2b00      	cmp	r3, #0
 800658e:	d106      	bne.n	800659e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006594:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	639a      	str	r2, [r3, #56]	@ 0x38
 800659c:	e005      	b.n	80065aa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80065aa:	7fbb      	ldrb	r3, [r7, #30]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d10b      	bne.n	80065c8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f043 0206 	orr.w	r2, r3, #6
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f043 0220 	orr.w	r2, r3, #32
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065d4:	b004      	add	sp, #16
 80065d6:	4770      	bx	lr

080065d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f023 0201 	bic.w	r2, r3, #1
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b084      	sub	sp, #16
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	460b      	mov	r3, r1
 8006604:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006616:	78fb      	ldrb	r3, [r7, #3]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d115      	bne.n	8006648 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006628:	200a      	movs	r0, #10
 800662a:	f7fd fc9d 	bl	8003f68 <HAL_Delay>
      ms += 10U;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	330a      	adds	r3, #10
 8006632:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fa2b 	bl	8006a90 <USB_GetMode>
 800663a:	4603      	mov	r3, r0
 800663c:	2b01      	cmp	r3, #1
 800663e:	d01e      	beq.n	800667e <USB_SetCurrentMode+0x84>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2bc7      	cmp	r3, #199	@ 0xc7
 8006644:	d9f0      	bls.n	8006628 <USB_SetCurrentMode+0x2e>
 8006646:	e01a      	b.n	800667e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d115      	bne.n	800667a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800665a:	200a      	movs	r0, #10
 800665c:	f7fd fc84 	bl	8003f68 <HAL_Delay>
      ms += 10U;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	330a      	adds	r3, #10
 8006664:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fa12 	bl	8006a90 <USB_GetMode>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d005      	beq.n	800667e <USB_SetCurrentMode+0x84>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2bc7      	cmp	r3, #199	@ 0xc7
 8006676:	d9f0      	bls.n	800665a <USB_SetCurrentMode+0x60>
 8006678:	e001      	b.n	800667e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e005      	b.n	800668a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2bc8      	cmp	r3, #200	@ 0xc8
 8006682:	d101      	bne.n	8006688 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e000      	b.n	800668a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006694:	b084      	sub	sp, #16
 8006696:	b580      	push	{r7, lr}
 8006698:	b086      	sub	sp, #24
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80066a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066ae:	2300      	movs	r3, #0
 80066b0:	613b      	str	r3, [r7, #16]
 80066b2:	e009      	b.n	80066c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	3340      	adds	r3, #64	@ 0x40
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	2200      	movs	r2, #0
 80066c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	3301      	adds	r3, #1
 80066c6:	613b      	str	r3, [r7, #16]
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	2b0e      	cmp	r3, #14
 80066cc:	d9f2      	bls.n	80066b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80066ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d11c      	bne.n	8006710 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066e4:	f043 0302 	orr.w	r3, r3, #2
 80066e8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066fa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006706:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	639a      	str	r2, [r3, #56]	@ 0x38
 800670e:	e00b      	b.n	8006728 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006714:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006720:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800672e:	461a      	mov	r2, r3
 8006730:	2300      	movs	r3, #0
 8006732:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006734:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006738:	2b01      	cmp	r3, #1
 800673a:	d10d      	bne.n	8006758 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800673c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006740:	2b00      	cmp	r3, #0
 8006742:	d104      	bne.n	800674e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006744:	2100      	movs	r1, #0
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f968 	bl	8006a1c <USB_SetDevSpeed>
 800674c:	e008      	b.n	8006760 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800674e:	2101      	movs	r1, #1
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f963 	bl	8006a1c <USB_SetDevSpeed>
 8006756:	e003      	b.n	8006760 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006758:	2103      	movs	r1, #3
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f95e 	bl	8006a1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006760:	2110      	movs	r1, #16
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f8fa 	bl	800695c <USB_FlushTxFifo>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f924 	bl	80069c0 <USB_FlushRxFifo>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006788:	461a      	mov	r2, r3
 800678a:	2300      	movs	r3, #0
 800678c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006794:	461a      	mov	r2, r3
 8006796:	2300      	movs	r3, #0
 8006798:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067a0:	461a      	mov	r2, r3
 80067a2:	2300      	movs	r3, #0
 80067a4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067a6:	2300      	movs	r3, #0
 80067a8:	613b      	str	r3, [r7, #16]
 80067aa:	e043      	b.n	8006834 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067c2:	d118      	bne.n	80067f6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10a      	bne.n	80067e0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067d6:	461a      	mov	r2, r3
 80067d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	e013      	b.n	8006808 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ec:	461a      	mov	r2, r3
 80067ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80067f2:	6013      	str	r3, [r2, #0]
 80067f4:	e008      	b.n	8006808 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006802:	461a      	mov	r2, r3
 8006804:	2300      	movs	r3, #0
 8006806:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006814:	461a      	mov	r2, r3
 8006816:	2300      	movs	r3, #0
 8006818:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4413      	add	r3, r2
 8006822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006826:	461a      	mov	r2, r3
 8006828:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800682c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	3301      	adds	r3, #1
 8006832:	613b      	str	r3, [r7, #16]
 8006834:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006838:	461a      	mov	r2, r3
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	4293      	cmp	r3, r2
 800683e:	d3b5      	bcc.n	80067ac <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006840:	2300      	movs	r3, #0
 8006842:	613b      	str	r3, [r7, #16]
 8006844:	e043      	b.n	80068ce <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	015a      	lsls	r2, r3, #5
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4413      	add	r3, r2
 800684e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006858:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800685c:	d118      	bne.n	8006890 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10a      	bne.n	800687a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006870:	461a      	mov	r2, r3
 8006872:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006876:	6013      	str	r3, [r2, #0]
 8006878:	e013      	b.n	80068a2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006886:	461a      	mov	r2, r3
 8006888:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	e008      	b.n	80068a2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800689c:	461a      	mov	r2, r3
 800689e:	2300      	movs	r3, #0
 80068a0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	015a      	lsls	r2, r3, #5
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4413      	add	r3, r2
 80068aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ae:	461a      	mov	r2, r3
 80068b0:	2300      	movs	r3, #0
 80068b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c0:	461a      	mov	r2, r3
 80068c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80068c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	3301      	adds	r3, #1
 80068cc:	613b      	str	r3, [r7, #16]
 80068ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80068d2:	461a      	mov	r2, r3
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d3b5      	bcc.n	8006846 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068ec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80068fa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006900:	2b00      	cmp	r3, #0
 8006902:	d105      	bne.n	8006910 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	f043 0210 	orr.w	r2, r3, #16
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699a      	ldr	r2, [r3, #24]
 8006914:	4b10      	ldr	r3, [pc, #64]	@ (8006958 <USB_DevInit+0x2c4>)
 8006916:	4313      	orrs	r3, r2
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800691c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006920:	2b00      	cmp	r3, #0
 8006922:	d005      	beq.n	8006930 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	f043 0208 	orr.w	r2, r3, #8
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006930:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006934:	2b01      	cmp	r3, #1
 8006936:	d107      	bne.n	8006948 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006940:	f043 0304 	orr.w	r3, r3, #4
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006948:	7dfb      	ldrb	r3, [r7, #23]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006954:	b004      	add	sp, #16
 8006956:	4770      	bx	lr
 8006958:	803c3800 	.word	0x803c3800

0800695c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3301      	adds	r3, #1
 800696e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006976:	d901      	bls.n	800697c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e01b      	b.n	80069b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	daf2      	bge.n	800696a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	019b      	lsls	r3, r3, #6
 800698c:	f043 0220 	orr.w	r2, r3, #32
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	3301      	adds	r3, #1
 8006998:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069a0:	d901      	bls.n	80069a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e006      	b.n	80069b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	2b20      	cmp	r3, #32
 80069b0:	d0f0      	beq.n	8006994 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3301      	adds	r3, #1
 80069d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069d8:	d901      	bls.n	80069de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e018      	b.n	8006a10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	daf2      	bge.n	80069cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2210      	movs	r2, #16
 80069ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	3301      	adds	r3, #1
 80069f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069fc:	d901      	bls.n	8006a02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e006      	b.n	8006a10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	f003 0310 	and.w	r3, r3, #16
 8006a0a:	2b10      	cmp	r3, #16
 8006a0c:	d0f0      	beq.n	80069f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	78fb      	ldrb	r3, [r7, #3]
 8006a36:	68f9      	ldr	r1, [r7, #12]
 8006a38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b085      	sub	sp, #20
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a68:	f023 0303 	bic.w	r3, r3, #3
 8006a6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a7c:	f043 0302 	orr.w	r3, r3, #2
 8006a80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3301      	adds	r3, #1
 8006abc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ac4:	d901      	bls.n	8006aca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e01b      	b.n	8006b02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	daf2      	bge.n	8006ab8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f043 0201 	orr.w	r2, r3, #1
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006aee:	d901      	bls.n	8006af4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e006      	b.n	8006b02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d0f0      	beq.n	8006ae2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
	...

08006b10 <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_t _cdcd_cfg = TUD_CDC_CONFIGURE_DEFAULT();

static bool _prep_out_transaction(uint8_t itf) {
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	4603      	mov	r3, r0
 8006b18:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8006b1e:	79fb      	ldrb	r3, [r7, #7]
 8006b20:	22e8      	movs	r2, #232	@ 0xe8
 8006b22:	fb02 f303 	mul.w	r3, r2, r3
 8006b26:	4a30      	ldr	r2, [pc, #192]	@ (8006be8 <_prep_out_transaction+0xd8>)
 8006b28:	4413      	add	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8006b2c:	79fb      	ldrb	r3, [r7, #7]
 8006b2e:	01db      	lsls	r3, r3, #7
 8006b30:	4a2e      	ldr	r2, [pc, #184]	@ (8006bec <_prep_out_transaction+0xdc>)
 8006b32:	4413      	add	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 8006b36:	f002 f851 	bl	8008bdc <tud_mounted>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d009      	beq.n	8006b54 <_prep_out_transaction+0x44>
 8006b40:	f002 f85e 	bl	8008c00 <tud_suspended>
 8006b44:	4603      	mov	r3, r0
 8006b46:	f083 0301 	eor.w	r3, r3, #1
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d001      	beq.n	8006b54 <_prep_out_transaction+0x44>
 8006b50:	2301      	movs	r3, #1
 8006b52:	e000      	b.n	8006b56 <_prep_out_transaction+0x46>
 8006b54:	2300      	movs	r3, #0
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 8006b5c:	f083 0301 	eor.w	r3, r3, #1
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d103      	bne.n	8006b6e <_prep_out_transaction+0x5e>
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	78db      	ldrb	r3, [r3, #3]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <_prep_out_transaction+0x62>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e035      	b.n	8006bde <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	3310      	adds	r3, #16
 8006b76:	4618      	mov	r0, r3
 8006b78:	f001 feab 	bl	80088d2 <tu_fifo_remaining>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 8006b80:	897b      	ldrh	r3, [r7, #10]
 8006b82:	2b3f      	cmp	r3, #63	@ 0x3f
 8006b84:	d801      	bhi.n	8006b8a <_prep_out_transaction+0x7a>
 8006b86:	2300      	movs	r3, #0
 8006b88:	e029      	b.n	8006bde <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	78da      	ldrb	r2, [r3, #3]
 8006b8e:	7dfb      	ldrb	r3, [r7, #23]
 8006b90:	4611      	mov	r1, r2
 8006b92:	4618      	mov	r0, r3
 8006b94:	f003 fb44 	bl	800a220 <usbd_edpt_claim>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	f083 0301 	eor.w	r3, r3, #1
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <_prep_out_transaction+0x98>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	e01a      	b.n	8006bde <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	3310      	adds	r3, #16
 8006bac:	4618      	mov	r0, r3
 8006bae:	f001 fe90 	bl	80088d2 <tu_fifo_remaining>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 8006bb6:	897b      	ldrh	r3, [r7, #10]
 8006bb8:	2b3f      	cmp	r3, #63	@ 0x3f
 8006bba:	d908      	bls.n	8006bce <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	78d9      	ldrb	r1, [r3, #3]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	7df8      	ldrb	r0, [r7, #23]
 8006bc4:	2340      	movs	r3, #64	@ 0x40
 8006bc6:	f003 fb7b 	bl	800a2c0 <usbd_edpt_xfer>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	e007      	b.n	8006bde <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	78da      	ldrb	r2, [r3, #3]
 8006bd2:	7dfb      	ldrb	r3, [r7, #23]
 8006bd4:	4611      	mov	r1, r2
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f003 fb4a 	bl	800a270 <usbd_edpt_release>
    return false;
 8006bdc:	2300      	movs	r3, #0
  }
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	20001568 	.word	0x20001568
 8006bec:	20001650 	.word	0x20001650

08006bf0 <tud_cdc_n_connected>:

bool tud_cdc_n_ready(uint8_t itf) {
  return tud_ready() && _cdcd_itf[itf].ep_in != 0 && _cdcd_itf[itf].ep_out != 0;
}

bool tud_cdc_n_connected(uint8_t itf) {
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	71fb      	strb	r3, [r7, #7]
 8006bfa:	f001 ffef 	bl	8008bdc <tud_mounted>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d009      	beq.n	8006c18 <tud_cdc_n_connected+0x28>
 8006c04:	f001 fffc 	bl	8008c00 <tud_suspended>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f083 0301 	eor.w	r3, r3, #1
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d001      	beq.n	8006c18 <tud_cdc_n_connected+0x28>
 8006c14:	2301      	movs	r3, #1
 8006c16:	e000      	b.n	8006c1a <tud_cdc_n_connected+0x2a>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	b2db      	uxtb	r3, r3
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d019      	beq.n	8006c58 <tud_cdc_n_connected+0x68>
 8006c24:	79fb      	ldrb	r3, [r7, #7]
 8006c26:	4a10      	ldr	r2, [pc, #64]	@ (8006c68 <tud_cdc_n_connected+0x78>)
 8006c28:	21e8      	movs	r1, #232	@ 0xe8
 8006c2a:	fb01 f303 	mul.w	r3, r1, r3
 8006c2e:	4413      	add	r3, r2
 8006c30:	3304      	adds	r3, #4
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	60fb      	str	r3, [r7, #12]
 8006c36:	2300      	movs	r3, #0
 8006c38:	72fb      	strb	r3, [r7, #11]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8006c3a:	7afb      	ldrb	r3, [r7, #11]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	bf14      	ite	ne
 8006c4a:	2301      	movne	r3, #1
 8006c4c:	2300      	moveq	r3, #0
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <tud_cdc_n_connected+0x68>
 8006c54:	2301      	movs	r3, #1
 8006c56:	e000      	b.n	8006c5a <tud_cdc_n_connected+0x6a>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	b2db      	uxtb	r3, r3
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	20001568 	.word	0x20001568

08006c6c <tud_cdc_n_available>:
}

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf) {
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	4603      	mov	r3, r0
 8006c74:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 8006c76:	79fb      	ldrb	r3, [r7, #7]
 8006c78:	22e8      	movs	r2, #232	@ 0xe8
 8006c7a:	fb02 f303 	mul.w	r3, r2, r3
 8006c7e:	3310      	adds	r3, #16
 8006c80:	4a04      	ldr	r2, [pc, #16]	@ (8006c94 <tud_cdc_n_available+0x28>)
 8006c82:	4413      	add	r3, r2
 8006c84:	4618      	mov	r0, r3
 8006c86:	f001 fdaf 	bl	80087e8 <tu_fifo_count>
 8006c8a:	4603      	mov	r3, r0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	20001568 	.word	0x20001568

08006c98 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize) {
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
 8006ca4:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
 8006ca8:	22e8      	movs	r2, #232	@ 0xe8
 8006caa:	fb02 f303 	mul.w	r3, r2, r3
 8006cae:	4a0f      	ldr	r2, [pc, #60]	@ (8006cec <tud_cdc_n_read+0x54>)
 8006cb0:	4413      	add	r3, r2
 8006cb2:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f103 0010 	add.w	r0, r3, #16
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d802      	bhi.n	8006cca <tud_cdc_n_read+0x32>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	e001      	b.n	8006cce <tud_cdc_n_read+0x36>
 8006cca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006cce:	461a      	mov	r2, r3
 8006cd0:	68b9      	ldr	r1, [r7, #8]
 8006cd2:	f001 fe5a 	bl	800898a <tu_fifo_read_n>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(itf);
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff ff17 	bl	8006b10 <_prep_out_transaction>
  return num_read;
 8006ce2:	693b      	ldr	r3, [r7, #16]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3718      	adds	r7, #24
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	20001568 	.word	0x20001568

08006cf0 <tud_cdc_n_write>:
}

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, const void* buffer, uint32_t bufsize) {
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
 8006cfc:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
 8006d00:	22e8      	movs	r2, #232	@ 0xe8
 8006d02:	fb02 f303 	mul.w	r3, r2, r3
 8006d06:	4a13      	ldr	r2, [pc, #76]	@ (8006d54 <tud_cdc_n_write+0x64>)
 8006d08:	4413      	add	r3, r2
 8006d0a:	617b      	str	r3, [r7, #20]
  uint16_t wr_count = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	f103 001c 	add.w	r0, r3, #28
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d802      	bhi.n	8006d22 <tud_cdc_n_write+0x32>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	e001      	b.n	8006d26 <tud_cdc_n_write+0x36>
 8006d22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006d26:	461a      	mov	r2, r3
 8006d28:	68b9      	ldr	r1, [r7, #8]
 8006d2a:	f001 fe95 	bl	8008a58 <tu_fifo_write_n>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	331c      	adds	r3, #28
 8006d36:	4618      	mov	r0, r3
 8006d38:	f001 fd56 	bl	80087e8 <tu_fifo_count>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006d40:	d903      	bls.n	8006d4a <tud_cdc_n_write+0x5a>
      #if CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
      || tu_fifo_full(&p_cdc->tx_ff) // check full if fifo size is less than packet size
      #endif
      ) {
    tud_cdc_n_write_flush(itf);
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 f807 	bl	8006d58 <tud_cdc_n_write_flush>
  }

  return wr_count;
 8006d4a:	8a7b      	ldrh	r3, [r7, #18]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20001568 	.word	0x20001568

08006d58 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8006d62:	79fb      	ldrb	r3, [r7, #7]
 8006d64:	22e8      	movs	r2, #232	@ 0xe8
 8006d66:	fb02 f303 	mul.w	r3, r2, r3
 8006d6a:	4a39      	ldr	r2, [pc, #228]	@ (8006e50 <tud_cdc_n_write_flush+0xf8>)
 8006d6c:	4413      	add	r3, r2
 8006d6e:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8006d70:	79fb      	ldrb	r3, [r7, #7]
 8006d72:	01db      	lsls	r3, r3, #7
 8006d74:	4a37      	ldr	r2, [pc, #220]	@ (8006e54 <tud_cdc_n_write_flush+0xfc>)
 8006d76:	4413      	add	r3, r2
 8006d78:	613b      	str	r3, [r7, #16]
 8006d7a:	f001 ff2f 	bl	8008bdc <tud_mounted>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d009      	beq.n	8006d98 <tud_cdc_n_write_flush+0x40>
 8006d84:	f001 ff3c 	bl	8008c00 <tud_suspended>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	f083 0301 	eor.w	r3, r3, #1
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <tud_cdc_n_write_flush+0x40>
 8006d94:	2301      	movs	r3, #1
 8006d96:	e000      	b.n	8006d9a <tud_cdc_n_write_flush+0x42>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 8006da0:	f083 0301 	eor.w	r3, r3, #1
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <tud_cdc_n_write_flush+0x56>
 8006daa:	2300      	movs	r3, #0
 8006dac:	e04c      	b.n	8006e48 <tud_cdc_n_write_flush+0xf0>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	331c      	adds	r3, #28
 8006db2:	4618      	mov	r0, r3
 8006db4:	f001 fd18 	bl	80087e8 <tu_fifo_count>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <tud_cdc_n_write_flush+0x6a>
    return 0;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	e042      	b.n	8006e48 <tud_cdc_n_write_flush+0xf0>
  }

  const uint8_t rhport = 0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	789a      	ldrb	r2, [r3, #2]
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
 8006dcc:	4611      	mov	r1, r2
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f003 fa26 	bl	800a220 <usbd_edpt_claim>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	f083 0301 	eor.w	r3, r3, #1
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <tud_cdc_n_write_flush+0x8c>
 8006de0:	2300      	movs	r3, #0
 8006de2:	e031      	b.n	8006e48 <tud_cdc_n_write_flush+0xf0>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f103 001c 	add.w	r0, r3, #28
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	3340      	adds	r3, #64	@ 0x40
 8006dee:	2240      	movs	r2, #64	@ 0x40
 8006df0:	4619      	mov	r1, r3
 8006df2:	f001 fdca 	bl	800898a <tu_fifo_read_n>
 8006df6:	4603      	mov	r3, r0
 8006df8:	81bb      	strh	r3, [r7, #12]

  if (count) {
 8006dfa:	89bb      	ldrh	r3, [r7, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d01b      	beq.n	8006e38 <tud_cdc_n_write_flush+0xe0>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	7899      	ldrb	r1, [r3, #2]
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8006e0a:	89bb      	ldrh	r3, [r7, #12]
 8006e0c:	7bf8      	ldrb	r0, [r7, #15]
 8006e0e:	f003 fa57 	bl	800a2c0 <usbd_edpt_xfer>
 8006e12:	4603      	mov	r3, r0
 8006e14:	f083 0301 	eor.w	r3, r3, #1
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00a      	beq.n	8006e34 <tud_cdc_n_write_flush+0xdc>
 8006e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8006e58 <tud_cdc_n_write_flush+0x100>)
 8006e20:	60bb      	str	r3, [r7, #8]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d000      	beq.n	8006e30 <tud_cdc_n_write_flush+0xd8>
 8006e2e:	be00      	bkpt	0x0000
 8006e30:	2300      	movs	r3, #0
 8006e32:	e009      	b.n	8006e48 <tud_cdc_n_write_flush+0xf0>
    return count;
 8006e34:	89bb      	ldrh	r3, [r7, #12]
 8006e36:	e007      	b.n	8006e48 <tud_cdc_n_write_flush+0xf0>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	789a      	ldrb	r2, [r3, #2]
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	4611      	mov	r1, r2
 8006e40:	4618      	mov	r0, r3
 8006e42:	f003 fa15 	bl	800a270 <usbd_edpt_release>
    return 0;
 8006e46:	2300      	movs	r3, #0
  }
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	20001568 	.word	0x20001568
 8006e54:	20001650 	.word	0x20001650
 8006e58:	e000edf0 	.word	0xe000edf0

08006e5c <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available(uint8_t itf) {
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
 8006e66:	79fb      	ldrb	r3, [r7, #7]
 8006e68:	22e8      	movs	r2, #232	@ 0xe8
 8006e6a:	fb02 f303 	mul.w	r3, r2, r3
 8006e6e:	3318      	adds	r3, #24
 8006e70:	4a05      	ldr	r2, [pc, #20]	@ (8006e88 <tud_cdc_n_write_available+0x2c>)
 8006e72:	4413      	add	r3, r2
 8006e74:	3304      	adds	r3, #4
 8006e76:	4618      	mov	r0, r3
 8006e78:	f001 fd2b 	bl	80088d2 <tu_fifo_remaining>
 8006e7c:	4603      	mov	r3, r0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	20001568 	.word	0x20001568

08006e8c <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8006e92:	22e8      	movs	r2, #232	@ 0xe8
 8006e94:	2100      	movs	r1, #0
 8006e96:	4824      	ldr	r0, [pc, #144]	@ (8006f28 <cdcd_init+0x9c>)
 8006e98:	f006 f813 	bl	800cec2 <memset>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	71fb      	strb	r3, [r7, #7]
 8006ea0:	e03a      	b.n	8006f18 <cdcd_init+0x8c>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8006ea2:	79fb      	ldrb	r3, [r7, #7]
 8006ea4:	22e8      	movs	r2, #232	@ 0xe8
 8006ea6:	fb02 f303 	mul.w	r3, r2, r3
 8006eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8006f28 <cdcd_init+0x9c>)
 8006eac:	4413      	add	r3, r2
 8006eae:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	22ff      	movs	r2, #255	@ 0xff
 8006eb4:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006ebc:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2208      	movs	r2, #8
 8006ece:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	f103 0010 	add.w	r0, r3, #16
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8006edc:	2300      	movs	r3, #0
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	2240      	movs	r2, #64	@ 0x40
 8006ee4:	f000 ffee 	bl	8007ec4 <tu_fifo_config>

    // TX fifo can be configured to change to overwritable if not connected (DTR bit not set). Without DTR we do not
    // know if data is actually polled by terminal. This way the most current data is prioritized.
    // Default: is overwritable
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	f103 001c 	add.w	r0, r3, #28
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8006ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8006f2c <cdcd_init+0xa0>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	bf14      	ite	ne
 8006f02:	2301      	movne	r3, #1
 8006f04:	2300      	moveq	r3, #0
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	9300      	str	r3, [sp, #0]
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	2280      	movs	r2, #128	@ 0x80
 8006f0e:	f000 ffd9 	bl	8007ec4 <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006f12:	79fb      	ldrb	r3, [r7, #7]
 8006f14:	3301      	adds	r3, #1
 8006f16:	71fb      	strb	r3, [r7, #7]
 8006f18:	79fb      	ldrb	r3, [r7, #7]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0c1      	beq.n	8006ea2 <cdcd_init+0x16>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 8006f1e:	bf00      	nop
 8006f20:	bf00      	nop
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	20001568 	.word	0x20001568
 8006f2c:	2000022c 	.word	0x2000022c

08006f30 <cdcd_deinit>:

bool cdcd_deinit(void) {
 8006f30:	b480      	push	{r7}
 8006f32:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 8006f34:	2301      	movs	r3, #1
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	4603      	mov	r3, r0
 8006f48:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	73fb      	strb	r3, [r7, #15]
 8006f4e:	e037      	b.n	8006fc0 <cdcd_reset+0x80>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
 8006f52:	22e8      	movs	r2, #232	@ 0xe8
 8006f54:	fb02 f303 	mul.w	r3, r2, r3
 8006f58:	4a1d      	ldr	r2, [pc, #116]	@ (8006fd0 <cdcd_reset+0x90>)
 8006f5a:	4413      	add	r3, r2
 8006f5c:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8006f5e:	2205      	movs	r2, #5
 8006f60:	2100      	movs	r1, #0
 8006f62:	68b8      	ldr	r0, [r7, #8]
 8006f64:	f005 ffad 	bl	800cec2 <memset>
    if (!_cdcd_cfg.rx_persistent) {
 8006f68:	4b1a      	ldr	r3, [pc, #104]	@ (8006fd4 <cdcd_reset+0x94>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d104      	bne.n	8006f80 <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	3310      	adds	r3, #16
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f001 fd90 	bl	8008aa0 <tu_fifo_clear>
    }
    if (!_cdcd_cfg.tx_persistent) {
 8006f80:	4b14      	ldr	r3, [pc, #80]	@ (8006fd4 <cdcd_reset+0x94>)
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d104      	bne.n	8006f98 <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	331c      	adds	r3, #28
 8006f92:	4618      	mov	r0, r3
 8006f94:	f001 fd84 	bl	8008aa0 <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f103 021c 	add.w	r2, r3, #28
 8006f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fd4 <cdcd_reset+0x94>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	bf14      	ite	ne
 8006fac:	2301      	movne	r3, #1
 8006fae:	2300      	moveq	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	f001 fd84 	bl	8008ac2 <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8006fba:	7bfb      	ldrb	r3, [r7, #15]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	73fb      	strb	r3, [r7, #15]
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d0c4      	beq.n	8006f50 <cdcd_reset+0x10>
  }
}
 8006fc6:	bf00      	nop
 8006fc8:	bf00      	nop
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	20001568 	.word	0x20001568
 8006fd4:	2000022c 	.word	0x2000022c

08006fd8 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b09a      	sub	sp, #104	@ 0x68
 8006fdc:	af02      	add	r7, sp, #8
 8006fde:	4603      	mov	r3, r0
 8006fe0:	6039      	str	r1, [r7, #0]
 8006fe2:	71fb      	strb	r3, [r7, #7]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	795b      	ldrb	r3, [r3, #5]
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d103      	bne.n	8006ff8 <cdcd_open+0x20>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	799b      	ldrb	r3, [r3, #6]
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d001      	beq.n	8006ffc <cdcd_open+0x24>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	e0da      	b.n	80071b2 <cdcd_open+0x1da>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8007002:	e010      	b.n	8007026 <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 8007004:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007008:	22e8      	movs	r2, #232	@ 0xe8
 800700a:	fb02 f303 	mul.w	r3, r2, r3
 800700e:	4a6b      	ldr	r2, [pc, #428]	@ (80071bc <cdcd_open+0x1e4>)
 8007010:	4413      	add	r3, r2
 8007012:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 8007014:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007016:	789b      	ldrb	r3, [r3, #2]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d009      	beq.n	8007030 <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 800701c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007020:	3301      	adds	r3, #1
 8007022:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8007026:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800702a:	2b00      	cmp	r3, #0
 800702c:	d0ea      	beq.n	8007004 <cdcd_open+0x2c>
 800702e:	e000      	b.n	8007032 <cdcd_open+0x5a>
      break;
 8007030:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 8007032:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00a      	beq.n	8007050 <cdcd_open+0x78>
 800703a:	4b61      	ldr	r3, [pc, #388]	@ (80071c0 <cdcd_open+0x1e8>)
 800703c:	647b      	str	r3, [r7, #68]	@ 0x44
 800703e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d000      	beq.n	800704c <cdcd_open+0x74>
 800704a:	be00      	bkpt	0x0000
 800704c:	2300      	movs	r3, #0
 800704e:	e0b0      	b.n	80071b2 <cdcd_open+0x1da>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	789a      	ldrb	r2, [r3, #2]
 8007054:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007056:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8007058:	2309      	movs	r3, #9
 800705a:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007062:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007064:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800706e:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 8007070:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8007072:	e013      	b.n	800709c <cdcd_open+0xc4>
 8007074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007076:	633b      	str	r3, [r7, #48]	@ 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8007078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707a:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 800707c:	461a      	mov	r2, r3
 800707e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8007082:	4413      	add	r3, r2
 8007084:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8007088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800708a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 800708c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708e:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	461a      	mov	r2, r3
 8007096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007098:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 800709a:	657b      	str	r3, [r7, #84]	@ 0x54
 800709c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800709e:	62fb      	str	r3, [r7, #44]	@ 0x2c
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80070a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a2:	3301      	adds	r3, #1
 80070a4:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 80070a6:	2b24      	cmp	r3, #36	@ 0x24
 80070a8:	d104      	bne.n	80070b4 <cdcd_open+0xdc>
 80070aa:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80070ae:	88bb      	ldrh	r3, [r7, #4]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d9df      	bls.n	8007074 <cdcd_open+0x9c>
 80070b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ba:	3301      	adds	r3, #1
 80070bc:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 80070be:	2b05      	cmp	r3, #5
 80070c0:	d12f      	bne.n	8007122 <cdcd_open+0x14a>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 80070c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070c4:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 80070c6:	79fb      	ldrb	r3, [r7, #7]
 80070c8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80070ca:	4618      	mov	r0, r3
 80070cc:	f003 f862 	bl	800a194 <usbd_edpt_open>
 80070d0:	4603      	mov	r3, r0
 80070d2:	f083 0301 	eor.w	r3, r3, #1
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00a      	beq.n	80070f2 <cdcd_open+0x11a>
 80070dc:	4b38      	ldr	r3, [pc, #224]	@ (80071c0 <cdcd_open+0x1e8>)
 80070de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d000      	beq.n	80070ee <cdcd_open+0x116>
 80070ec:	be00      	bkpt	0x0000
 80070ee:	2300      	movs	r3, #0
 80070f0:	e05f      	b.n	80071b2 <cdcd_open+0x1da>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 80070f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070f4:	789a      	ldrb	r2, [r3, #2]
 80070f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070f8:	705a      	strb	r2, [r3, #1]
 80070fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070fc:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8007102:	461a      	mov	r2, r3
 8007104:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8007108:	4413      	add	r3, r2
 800710a:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800710e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007110:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007114:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8007120:	657b      	str	r3, [r7, #84]	@ 0x54
 8007122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007124:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	3301      	adds	r3, #1
 800712a:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 800712c:	2b04      	cmp	r3, #4
 800712e:	d139      	bne.n	80071a4 <cdcd_open+0x1cc>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 8007130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007132:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8007134:	2b0a      	cmp	r3, #10
 8007136:	d135      	bne.n	80071a4 <cdcd_open+0x1cc>
 8007138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800713a:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8007140:	461a      	mov	r2, r3
 8007142:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8007146:	4413      	add	r3, r2
 8007148:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800714c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800714e:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	461a      	mov	r2, r3
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 800715e:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 8007160:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007162:	3303      	adds	r3, #3
 8007164:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007166:	3202      	adds	r2, #2
 8007168:	79f8      	ldrb	r0, [r7, #7]
 800716a:	9201      	str	r2, [sp, #4]
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	2302      	movs	r3, #2
 8007170:	2202      	movs	r2, #2
 8007172:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007174:	f002 ffa6 	bl	800a0c4 <usbd_open_edpt_pair>
 8007178:	4603      	mov	r3, r0
 800717a:	f083 0301 	eor.w	r3, r3, #1
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00a      	beq.n	800719a <cdcd_open+0x1c2>
 8007184:	4b0e      	ldr	r3, [pc, #56]	@ (80071c0 <cdcd_open+0x1e8>)
 8007186:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007188:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d000      	beq.n	8007196 <cdcd_open+0x1be>
 8007194:	be00      	bkpt	0x0000
 8007196:	2300      	movs	r3, #0
 8007198:	e00b      	b.n	80071b2 <cdcd_open+0x1da>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 800719a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800719e:	330e      	adds	r3, #14
 80071a0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 80071a4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff fcb1 	bl	8006b10 <_prep_out_transaction>

  return drv_len;
 80071ae:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3760      	adds	r7, #96	@ 0x60
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20001568 	.word	0x20001568
 80071c0:	e000edf0 	.word	0xe000edf0

080071c4 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b08a      	sub	sp, #40	@ 0x28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	4603      	mov	r3, r0
 80071cc:	603a      	str	r2, [r7, #0]
 80071ce:	71fb      	strb	r3, [r7, #7]
 80071d0:	460b      	mov	r3, r1
 80071d2:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b20      	cmp	r3, #32
 80071e0:	d001      	beq.n	80071e6 <cdcd_control_xfer_cb+0x22>
 80071e2:	2300      	movs	r3, #0
 80071e4:	e0e6      	b.n	80073b4 <cdcd_control_xfer_cb+0x1f0>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80071e6:	2300      	movs	r3, #0
 80071e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80071ec:	e014      	b.n	8007218 <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 80071ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071f2:	22e8      	movs	r2, #232	@ 0xe8
 80071f4:	fb02 f303 	mul.w	r3, r2, r3
 80071f8:	4a70      	ldr	r2, [pc, #448]	@ (80073bc <cdcd_control_xfer_cb+0x1f8>)
 80071fa:	4413      	add	r3, r2
 80071fc:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	461a      	mov	r2, r3
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	889b      	ldrh	r3, [r3, #4]
 8007208:	b29b      	uxth	r3, r3
 800720a:	429a      	cmp	r2, r3
 800720c:	d009      	beq.n	8007222 <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 800720e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007212:	3301      	adds	r3, #1
 8007214:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007218:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800721c:	2b00      	cmp	r3, #0
 800721e:	d0e6      	beq.n	80071ee <cdcd_control_xfer_cb+0x2a>
 8007220:	e000      	b.n	8007224 <cdcd_control_xfer_cb+0x60>
      break;
 8007222:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 8007224:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <cdcd_control_xfer_cb+0x6c>
 800722c:	2300      	movs	r3, #0
 800722e:	e0c1      	b.n	80073b4 <cdcd_control_xfer_cb+0x1f0>

  switch (request->bRequest) {
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	785b      	ldrb	r3, [r3, #1]
 8007234:	3b20      	subs	r3, #32
 8007236:	2b03      	cmp	r3, #3
 8007238:	f200 80b2 	bhi.w	80073a0 <cdcd_control_xfer_cb+0x1dc>
 800723c:	a201      	add	r2, pc, #4	@ (adr r2, 8007244 <cdcd_control_xfer_cb+0x80>)
 800723e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007242:	bf00      	nop
 8007244:	08007255 	.word	0x08007255
 8007248:	08007291 	.word	0x08007291
 800724c:	080072ab 	.word	0x080072ab
 8007250:	0800736f 	.word	0x0800736f
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8007254:	79bb      	ldrb	r3, [r7, #6]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d108      	bne.n	800726c <cdcd_control_xfer_cb+0xa8>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	f103 0208 	add.w	r2, r3, #8
 8007260:	79f8      	ldrb	r0, [r7, #7]
 8007262:	2307      	movs	r3, #7
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	f003 fa13 	bl	800a690 <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 800726a:	e09b      	b.n	80073a4 <cdcd_control_xfer_cb+0x1e0>
      } else if (stage == CONTROL_STAGE_ACK) {
 800726c:	79bb      	ldrb	r3, [r7, #6]
 800726e:	2b03      	cmp	r3, #3
 8007270:	f040 8098 	bne.w	80073a4 <cdcd_control_xfer_cb+0x1e0>
        if (tud_cdc_line_coding_cb) {
 8007274:	4b52      	ldr	r3, [pc, #328]	@ (80073c0 <cdcd_control_xfer_cb+0x1fc>)
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 8094 	beq.w	80073a4 <cdcd_control_xfer_cb+0x1e0>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	f103 0208 	add.w	r2, r3, #8
 8007282:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007286:	4611      	mov	r1, r2
 8007288:	4618      	mov	r0, r3
 800728a:	f3af 8000 	nop.w
      break;
 800728e:	e089      	b.n	80073a4 <cdcd_control_xfer_cb+0x1e0>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8007290:	79bb      	ldrb	r3, [r7, #6]
 8007292:	2b01      	cmp	r3, #1
 8007294:	f040 8088 	bne.w	80073a8 <cdcd_control_xfer_cb+0x1e4>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	f103 0208 	add.w	r2, r3, #8
 800729e:	79f8      	ldrb	r0, [r7, #7]
 80072a0:	2307      	movs	r3, #7
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	f003 f9f4 	bl	800a690 <tud_control_xfer>
      }
      break;
 80072a8:	e07e      	b.n	80073a8 <cdcd_control_xfer_cb+0x1e4>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 80072aa:	79bb      	ldrb	r3, [r7, #6]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d105      	bne.n	80072bc <cdcd_control_xfer_cb+0xf8>
        tud_control_status(rhport, request);
 80072b0:	79fb      	ldrb	r3, [r7, #7]
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f003 f979 	bl	800a5ac <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 80072ba:	e077      	b.n	80073ac <cdcd_control_xfer_cb+0x1e8>
      } else if (stage == CONTROL_STAGE_ACK) {
 80072bc:	79bb      	ldrb	r3, [r7, #6]
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d174      	bne.n	80073ac <cdcd_control_xfer_cb+0x1e8>
        bool const dtr = tu_bit_test(request->wValue, 0);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	885b      	ldrh	r3, [r3, #2]
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	613b      	str	r3, [r7, #16]
 80072ca:	2300      	movs	r3, #0
 80072cc:	73fb      	strb	r3, [r7, #15]
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	fa22 f303 	lsr.w	r3, r2, r3
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	2b00      	cmp	r3, #0
 80072dc:	bf14      	ite	ne
 80072de:	2301      	movne	r3, #1
 80072e0:	2300      	moveq	r3, #0
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	885b      	ldrh	r3, [r3, #2]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	61bb      	str	r3, [r7, #24]
 80072ee:	2301      	movs	r3, #1
 80072f0:	75fb      	strb	r3, [r7, #23]
 80072f2:	7dfb      	ldrb	r3, [r7, #23]
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	fa22 f303 	lsr.w	r3, r2, r3
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b00      	cmp	r3, #0
 8007300:	bf14      	ite	ne
 8007302:	2301      	movne	r3, #1
 8007304:	2300      	moveq	r3, #0
 8007306:	b2db      	uxtb	r3, r3
 8007308:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	885b      	ldrh	r3, [r3, #2]
 800730e:	b29b      	uxth	r3, r3
 8007310:	b2da      	uxtb	r2, r3
 8007312:	6a3b      	ldr	r3, [r7, #32]
 8007314:	711a      	strb	r2, [r3, #4]
        if (_cdcd_cfg.tx_overwritabe_if_not_connected) {
 8007316:	4b2b      	ldr	r3, [pc, #172]	@ (80073c4 <cdcd_control_xfer_cb+0x200>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	f003 0304 	and.w	r3, r3, #4
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	d013      	beq.n	800734c <cdcd_control_xfer_cb+0x188>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	f103 021c 	add.w	r2, r3, #28
 800732a:	7ffb      	ldrb	r3, [r7, #31]
 800732c:	2b00      	cmp	r3, #0
 800732e:	bf14      	ite	ne
 8007330:	2301      	movne	r3, #1
 8007332:	2300      	moveq	r3, #0
 8007334:	b2db      	uxtb	r3, r3
 8007336:	f083 0301 	eor.w	r3, r3, #1
 800733a:	b2db      	uxtb	r3, r3
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	b2db      	uxtb	r3, r3
 8007342:	4619      	mov	r1, r3
 8007344:	4610      	mov	r0, r2
 8007346:	f001 fbbc 	bl	8008ac2 <tu_fifo_set_overwritable>
 800734a:	e005      	b.n	8007358 <cdcd_control_xfer_cb+0x194>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, false);
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	331c      	adds	r3, #28
 8007350:	2100      	movs	r1, #0
 8007352:	4618      	mov	r0, r3
 8007354:	f001 fbb5 	bl	8008ac2 <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 8007358:	4b1b      	ldr	r3, [pc, #108]	@ (80073c8 <cdcd_control_xfer_cb+0x204>)
 800735a:	2b00      	cmp	r3, #0
 800735c:	d026      	beq.n	80073ac <cdcd_control_xfer_cb+0x1e8>
          tud_cdc_line_state_cb(itf, dtr, rts);
 800735e:	7fba      	ldrb	r2, [r7, #30]
 8007360:	7ff9      	ldrb	r1, [r7, #31]
 8007362:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007366:	4618      	mov	r0, r3
 8007368:	f7fa f8ec 	bl	8001544 <tud_cdc_line_state_cb>
      break;
 800736c:	e01e      	b.n	80073ac <cdcd_control_xfer_cb+0x1e8>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 800736e:	79bb      	ldrb	r3, [r7, #6]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d105      	bne.n	8007380 <cdcd_control_xfer_cb+0x1bc>
        tud_control_status(rhport, request);
 8007374:	79fb      	ldrb	r3, [r7, #7]
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	f003 f917 	bl	800a5ac <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 800737e:	e017      	b.n	80073b0 <cdcd_control_xfer_cb+0x1ec>
      } else if (stage == CONTROL_STAGE_ACK) {
 8007380:	79bb      	ldrb	r3, [r7, #6]
 8007382:	2b03      	cmp	r3, #3
 8007384:	d114      	bne.n	80073b0 <cdcd_control_xfer_cb+0x1ec>
        if (tud_cdc_send_break_cb) {
 8007386:	4b11      	ldr	r3, [pc, #68]	@ (80073cc <cdcd_control_xfer_cb+0x208>)
 8007388:	2b00      	cmp	r3, #0
 800738a:	d011      	beq.n	80073b0 <cdcd_control_xfer_cb+0x1ec>
          tud_cdc_send_break_cb(itf, request->wValue);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	885b      	ldrh	r3, [r3, #2]
 8007390:	b29a      	uxth	r2, r3
 8007392:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007396:	4611      	mov	r1, r2
 8007398:	4618      	mov	r0, r3
 800739a:	f3af 8000 	nop.w
      break;
 800739e:	e007      	b.n	80073b0 <cdcd_control_xfer_cb+0x1ec>

    default:
      return false; // stall unsupported request
 80073a0:	2300      	movs	r3, #0
 80073a2:	e007      	b.n	80073b4 <cdcd_control_xfer_cb+0x1f0>
      break;
 80073a4:	bf00      	nop
 80073a6:	e004      	b.n	80073b2 <cdcd_control_xfer_cb+0x1ee>
      break;
 80073a8:	bf00      	nop
 80073aa:	e002      	b.n	80073b2 <cdcd_control_xfer_cb+0x1ee>
      break;
 80073ac:	bf00      	nop
 80073ae:	e000      	b.n	80073b2 <cdcd_control_xfer_cb+0x1ee>
      break;
 80073b0:	bf00      	nop
  }

  return true;
 80073b2:	2301      	movs	r3, #1
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3728      	adds	r7, #40	@ 0x28
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	20001568 	.word	0x20001568
 80073c0:	00000000 	.word	0x00000000
 80073c4:	2000022c 	.word	0x2000022c
 80073c8:	08001545 	.word	0x08001545
 80073cc:	00000000 	.word	0x00000000

080073d0 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	603b      	str	r3, [r7, #0]
 80073d8:	4603      	mov	r3, r0
 80073da:	71fb      	strb	r3, [r7, #7]
 80073dc:	460b      	mov	r3, r1
 80073de:	71bb      	strb	r3, [r7, #6]
 80073e0:	4613      	mov	r3, r2
 80073e2:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80073e4:	2300      	movs	r3, #0
 80073e6:	77fb      	strb	r3, [r7, #31]
 80073e8:	e013      	b.n	8007412 <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 80073ea:	7ffb      	ldrb	r3, [r7, #31]
 80073ec:	22e8      	movs	r2, #232	@ 0xe8
 80073ee:	fb02 f303 	mul.w	r3, r2, r3
 80073f2:	4a5f      	ldr	r2, [pc, #380]	@ (8007570 <cdcd_xfer_cb+0x1a0>)
 80073f4:	4413      	add	r3, r2
 80073f6:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	78db      	ldrb	r3, [r3, #3]
 80073fc:	79ba      	ldrb	r2, [r7, #6]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d00a      	beq.n	8007418 <cdcd_xfer_cb+0x48>
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	789b      	ldrb	r3, [r3, #2]
 8007406:	79ba      	ldrb	r2, [r7, #6]
 8007408:	429a      	cmp	r2, r3
 800740a:	d005      	beq.n	8007418 <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 800740c:	7ffb      	ldrb	r3, [r7, #31]
 800740e:	3301      	adds	r3, #1
 8007410:	77fb      	strb	r3, [r7, #31]
 8007412:	7ffb      	ldrb	r3, [r7, #31]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d0e8      	beq.n	80073ea <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8007418:	7ffb      	ldrb	r3, [r7, #31]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00a      	beq.n	8007434 <cdcd_xfer_cb+0x64>
 800741e:	4b55      	ldr	r3, [pc, #340]	@ (8007574 <cdcd_xfer_cb+0x1a4>)
 8007420:	60bb      	str	r3, [r7, #8]
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	d000      	beq.n	8007430 <cdcd_xfer_cb+0x60>
 800742e:	be00      	bkpt	0x0000
 8007430:	2300      	movs	r3, #0
 8007432:	e098      	b.n	8007566 <cdcd_xfer_cb+0x196>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8007434:	7ffb      	ldrb	r3, [r7, #31]
 8007436:	01db      	lsls	r3, r3, #7
 8007438:	4a4f      	ldr	r2, [pc, #316]	@ (8007578 <cdcd_xfer_cb+0x1a8>)
 800743a:	4413      	add	r3, r2
 800743c:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	78db      	ldrb	r3, [r3, #3]
 8007442:	79ba      	ldrb	r2, [r7, #6]
 8007444:	429a      	cmp	r2, r3
 8007446:	d148      	bne.n	80074da <cdcd_xfer_cb+0x10a>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	3310      	adds	r3, #16
 800744c:	6939      	ldr	r1, [r7, #16]
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	b292      	uxth	r2, r2
 8007452:	4618      	mov	r0, r3
 8007454:	f001 fb00 	bl	8008a58 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 8007458:	4b48      	ldr	r3, [pc, #288]	@ (800757c <cdcd_xfer_cb+0x1ac>)
 800745a:	2b00      	cmp	r3, #0
 800745c:	d027      	beq.n	80074ae <cdcd_xfer_cb+0xde>
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	795b      	ldrb	r3, [r3, #5]
 8007462:	2bff      	cmp	r3, #255	@ 0xff
 8007464:	d023      	beq.n	80074ae <cdcd_xfer_cb+0xde>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8007466:	2300      	movs	r3, #0
 8007468:	617b      	str	r3, [r7, #20]
 800746a:	e01c      	b.n	80074a6 <cdcd_xfer_cb+0xd6>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	795a      	ldrb	r2, [r3, #5]
 8007470:	6939      	ldr	r1, [r7, #16]
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	440b      	add	r3, r1
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	429a      	cmp	r2, r3
 800747a:	d111      	bne.n	80074a0 <cdcd_xfer_cb+0xd0>
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	3310      	adds	r3, #16
 8007480:	4618      	mov	r0, r3
 8007482:	f001 f9e3 	bl	800884c <tu_fifo_empty>
 8007486:	4603      	mov	r3, r0
 8007488:	f083 0301 	eor.w	r3, r3, #1
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d006      	beq.n	80074a0 <cdcd_xfer_cb+0xd0>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	795a      	ldrb	r2, [r3, #5]
 8007496:	7ffb      	ldrb	r3, [r7, #31]
 8007498:	4611      	mov	r1, r2
 800749a:	4618      	mov	r0, r3
 800749c:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	3301      	adds	r3, #1
 80074a4:	617b      	str	r3, [r7, #20]
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d3de      	bcc.n	800746c <cdcd_xfer_cb+0x9c>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 80074ae:	4b34      	ldr	r3, [pc, #208]	@ (8007580 <cdcd_xfer_cb+0x1b0>)
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00e      	beq.n	80074d2 <cdcd_xfer_cb+0x102>
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	3310      	adds	r3, #16
 80074b8:	4618      	mov	r0, r3
 80074ba:	f001 f9c7 	bl	800884c <tu_fifo_empty>
 80074be:	4603      	mov	r3, r0
 80074c0:	f083 0301 	eor.w	r3, r3, #1
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <cdcd_xfer_cb+0x102>
      tud_cdc_rx_cb(itf);
 80074ca:	7ffb      	ldrb	r3, [r7, #31]
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7fa f865 	bl	800159c <tud_cdc_rx_cb>
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 80074d2:	7ffb      	ldrb	r3, [r7, #31]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7ff fb1b 	bl	8006b10 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	789b      	ldrb	r3, [r3, #2]
 80074de:	79ba      	ldrb	r2, [r7, #6]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d13f      	bne.n	8007564 <cdcd_xfer_cb+0x194>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 80074e4:	4b27      	ldr	r3, [pc, #156]	@ (8007584 <cdcd_xfer_cb+0x1b4>)
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <cdcd_xfer_cb+0x122>
      tud_cdc_tx_complete_cb(itf);
 80074ea:	7ffb      	ldrb	r3, [r7, #31]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 80074f2:	7ffb      	ldrb	r3, [r7, #31]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7ff fc2f 	bl	8006d58 <tud_cdc_n_write_flush>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d131      	bne.n	8007564 <cdcd_xfer_cb+0x194>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	331c      	adds	r3, #28
 8007504:	4618      	mov	r0, r3
 8007506:	f001 f96f 	bl	80087e8 <tu_fifo_count>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d129      	bne.n	8007564 <cdcd_xfer_cb+0x194>
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d026      	beq.n	8007564 <cdcd_xfer_cb+0x194>
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800751c:	2b00      	cmp	r3, #0
 800751e:	d121      	bne.n	8007564 <cdcd_xfer_cb+0x194>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	789a      	ldrb	r2, [r3, #2]
 8007524:	79fb      	ldrb	r3, [r7, #7]
 8007526:	4611      	mov	r1, r2
 8007528:	4618      	mov	r0, r3
 800752a:	f002 fe79 	bl	800a220 <usbd_edpt_claim>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d017      	beq.n	8007564 <cdcd_xfer_cb+0x194>
          TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0));
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	7899      	ldrb	r1, [r3, #2]
 8007538:	79f8      	ldrb	r0, [r7, #7]
 800753a:	2300      	movs	r3, #0
 800753c:	2200      	movs	r2, #0
 800753e:	f002 febf 	bl	800a2c0 <usbd_edpt_xfer>
 8007542:	4603      	mov	r3, r0
 8007544:	f083 0301 	eor.w	r3, r3, #1
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <cdcd_xfer_cb+0x194>
 800754e:	4b09      	ldr	r3, [pc, #36]	@ (8007574 <cdcd_xfer_cb+0x1a4>)
 8007550:	60fb      	str	r3, [r7, #12]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b00      	cmp	r3, #0
 800755c:	d000      	beq.n	8007560 <cdcd_xfer_cb+0x190>
 800755e:	be00      	bkpt	0x0000
 8007560:	2300      	movs	r3, #0
 8007562:	e000      	b.n	8007566 <cdcd_xfer_cb+0x196>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 8007564:	2301      	movs	r3, #1
}
 8007566:	4618      	mov	r0, r3
 8007568:	3720      	adds	r7, #32
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	20001568 	.word	0x20001568
 8007574:	e000edf0 	.word	0xe000edf0
 8007578:	20001650 	.word	0x20001650
 800757c:	00000000 	.word	0x00000000
 8007580:	0800159d 	.word	0x0800159d
 8007584:	00000000 	.word	0x00000000

08007588 <tud_hid_set_idle_cb>:
TU_ATTR_WEAK void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
  (void) instance;
  (void) protocol;
}

TU_ATTR_WEAK bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate) {
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	4603      	mov	r3, r0
 8007590:	460a      	mov	r2, r1
 8007592:	71fb      	strb	r3, [r7, #7]
 8007594:	4613      	mov	r3, r2
 8007596:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) idle_rate;
  return true;
 8007598:	2301      	movs	r3, #1
}
 800759a:	4618      	mov	r0, r3
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <tud_hid_report_failed_cb>:
  (void) report;
  (void) len;
}

// Invoked when a transfer wasn't successful
TU_ATTR_WEAK void tud_hid_report_failed_cb(uint8_t instance, hid_report_type_t report_type, uint8_t const* report, uint16_t xferred_bytes) {
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	603a      	str	r2, [r7, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	4603      	mov	r3, r0
 80075b2:	71fb      	strb	r3, [r7, #7]
 80075b4:	460b      	mov	r3, r1
 80075b6:	71bb      	strb	r3, [r7, #6]
 80075b8:	4613      	mov	r3, r2
 80075ba:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report_type;
  (void) report;
  (void) xferred_bytes;
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance) {
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	4603      	mov	r3, r0
 80075d0:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 80075d6:	79fa      	ldrb	r2, [r7, #7]
 80075d8:	491b      	ldr	r1, [pc, #108]	@ (8007648 <tud_hid_n_ready+0x80>)
 80075da:	4613      	mov	r3, r2
 80075dc:	005b      	lsls	r3, r3, #1
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	440b      	add	r3, r1
 80075e4:	3301      	adds	r3, #1
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	73bb      	strb	r3, [r7, #14]
 80075ea:	f001 faf7 	bl	8008bdc <tud_mounted>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d009      	beq.n	8007608 <tud_hid_n_ready+0x40>
 80075f4:	f001 fb04 	bl	8008c00 <tud_suspended>
 80075f8:	4603      	mov	r3, r0
 80075fa:	f083 0301 	eor.w	r3, r3, #1
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <tud_hid_n_ready+0x40>
 8007604:	2301      	movs	r3, #1
 8007606:	e000      	b.n	800760a <tud_hid_n_ready+0x42>
 8007608:	2300      	movs	r3, #0
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 8007610:	2b00      	cmp	r3, #0
 8007612:	d010      	beq.n	8007636 <tud_hid_n_ready+0x6e>
 8007614:	7bbb      	ldrb	r3, [r7, #14]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00d      	beq.n	8007636 <tud_hid_n_ready+0x6e>
 800761a:	7bba      	ldrb	r2, [r7, #14]
 800761c:	7bfb      	ldrb	r3, [r7, #15]
 800761e:	4611      	mov	r1, r2
 8007620:	4618      	mov	r0, r3
 8007622:	f002 fec3 	bl	800a3ac <usbd_edpt_busy>
 8007626:	4603      	mov	r3, r0
 8007628:	f083 0301 	eor.w	r3, r3, #1
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <tud_hid_n_ready+0x6e>
 8007632:	2301      	movs	r3, #1
 8007634:	e000      	b.n	8007638 <tud_hid_n_ready+0x70>
 8007636:	2300      	movs	r3, #0
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	b2db      	uxtb	r3, r3
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	200016d0 	.word	0x200016d0

0800764c <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const *report, uint16_t len) {
 800764c:	b580      	push	{r7, lr}
 800764e:	b08e      	sub	sp, #56	@ 0x38
 8007650:	af00      	add	r7, sp, #0
 8007652:	603a      	str	r2, [r7, #0]
 8007654:	461a      	mov	r2, r3
 8007656:	4603      	mov	r3, r0
 8007658:	71fb      	strb	r3, [r7, #7]
 800765a:	460b      	mov	r3, r1
 800765c:	71bb      	strb	r3, [r7, #6]
 800765e:	4613      	mov	r3, r2
 8007660:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(instance < CFG_TUD_HID);
 8007662:	79fb      	ldrb	r3, [r7, #7]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <tud_hid_n_report+0x20>
 8007668:	2300      	movs	r3, #0
 800766a:	e06d      	b.n	8007748 <tud_hid_n_report+0xfc>
  const uint8_t rhport = 0;
 800766c:	2300      	movs	r3, #0
 800766e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  hidd_interface_t *p_hid = &_hidd_itf[instance];
 8007672:	79fa      	ldrb	r2, [r7, #7]
 8007674:	4613      	mov	r3, r2
 8007676:	005b      	lsls	r3, r3, #1
 8007678:	4413      	add	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4a34      	ldr	r2, [pc, #208]	@ (8007750 <tud_hid_n_report+0x104>)
 800767e:	4413      	add	r3, r2
 8007680:	633b      	str	r3, [r7, #48]	@ 0x30
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8007682:	79fa      	ldrb	r2, [r7, #7]
 8007684:	4613      	mov	r3, r2
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	4413      	add	r3, r2
 800768a:	011b      	lsls	r3, r3, #4
 800768c:	4a31      	ldr	r2, [pc, #196]	@ (8007754 <tud_hid_n_report+0x108>)
 800768e:	4413      	add	r3, r2
 8007690:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_hid->ep_in));
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	785a      	ldrb	r2, [r3, #1]
 8007696:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800769a:	4611      	mov	r1, r2
 800769c:	4618      	mov	r0, r3
 800769e:	f002 fdbf 	bl	800a220 <usbd_edpt_claim>
 80076a2:	4603      	mov	r3, r0
 80076a4:	f083 0301 	eor.w	r3, r3, #1
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <tud_hid_n_report+0x66>
 80076ae:	2300      	movs	r3, #0
 80076b0:	e04a      	b.n	8007748 <tud_hid_n_report+0xfc>

  // prepare data
  if (report_id) {
 80076b2:	79bb      	ldrb	r3, [r7, #6]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d021      	beq.n	80076fc <tud_hid_n_report+0xb0>
    p_epbuf->epin[0] = report_id;
 80076b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ba:	79ba      	ldrb	r2, [r7, #6]
 80076bc:	741a      	strb	r2, [r3, #16]
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin + 1, CFG_TUD_HID_EP_BUFSIZE - 1, report, len));
 80076be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076c0:	3310      	adds	r3, #16
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	88bb      	ldrh	r3, [r7, #4]
 80076c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80076c8:	220f      	movs	r2, #15
 80076ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	623a      	str	r2, [r7, #32]
 80076d0:	61fb      	str	r3, [r7, #28]
  if ( count > destsz ) {
 80076d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d202      	bcs.n	80076e0 <tud_hid_n_report+0x94>
    return -1;
 80076da:	f04f 33ff 	mov.w	r3, #4294967295
 80076de:	e005      	b.n	80076ec <tud_hid_n_report+0xa0>
  memcpy(dest, src, count);
 80076e0:	69fa      	ldr	r2, [r7, #28]
 80076e2:	6a39      	ldr	r1, [r7, #32]
 80076e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076e6:	f005 fcc4 	bl	800d072 <memcpy>
  return 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <tud_hid_n_report+0xa8>
 80076f0:	2300      	movs	r3, #0
 80076f2:	e029      	b.n	8007748 <tud_hid_n_report+0xfc>
    len++;
 80076f4:	88bb      	ldrh	r3, [r7, #4]
 80076f6:	3301      	adds	r3, #1
 80076f8:	80bb      	strh	r3, [r7, #4]
 80076fa:	e01a      	b.n	8007732 <tud_hid_n_report+0xe6>
  } else {
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin, CFG_TUD_HID_EP_BUFSIZE, report, len));
 80076fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076fe:	f103 0210 	add.w	r2, r3, #16
 8007702:	88bb      	ldrh	r3, [r7, #4]
 8007704:	61ba      	str	r2, [r7, #24]
 8007706:	2210      	movs	r2, #16
 8007708:	617a      	str	r2, [r7, #20]
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	613a      	str	r2, [r7, #16]
 800770e:	60fb      	str	r3, [r7, #12]
  if ( count > destsz ) {
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	429a      	cmp	r2, r3
 8007716:	d202      	bcs.n	800771e <tud_hid_n_report+0xd2>
    return -1;
 8007718:	f04f 33ff 	mov.w	r3, #4294967295
 800771c:	e005      	b.n	800772a <tud_hid_n_report+0xde>
  memcpy(dest, src, count);
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	6939      	ldr	r1, [r7, #16]
 8007722:	69b8      	ldr	r0, [r7, #24]
 8007724:	f005 fca5 	bl	800d072 <memcpy>
  return 0;
 8007728:	2300      	movs	r3, #0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <tud_hid_n_report+0xe6>
 800772e:	2300      	movs	r3, #0
 8007730:	e00a      	b.n	8007748 <tud_hid_n_report+0xfc>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_epbuf->epin, len);
 8007732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007734:	7859      	ldrb	r1, [r3, #1]
 8007736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007738:	f103 0210 	add.w	r2, r3, #16
 800773c:	88bb      	ldrh	r3, [r7, #4]
 800773e:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8007742:	f002 fdbd 	bl	800a2c0 <usbd_edpt_xfer>
 8007746:	4603      	mov	r3, r0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3738      	adds	r7, #56	@ 0x38
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	200016d0 	.word	0x200016d0
 8007754:	200016dc 	.word	0x200016dc

08007758 <tud_hid_n_keyboard_report>:

uint8_t tud_hid_n_get_protocol(uint8_t instance) {
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	603b      	str	r3, [r7, #0]
 8007760:	4603      	mov	r3, r0
 8007762:	71fb      	strb	r3, [r7, #7]
 8007764:	460b      	mov	r3, r1
 8007766:	71bb      	strb	r3, [r7, #6]
 8007768:	4613      	mov	r3, r2
 800776a:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;
  report.modifier = modifier;
 800776c:	797b      	ldrb	r3, [r7, #5]
 800776e:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 8007770:	2300      	movs	r3, #0
 8007772:	727b      	strb	r3, [r7, #9]

  if (keycode) {
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d007      	beq.n	800778a <tud_hid_n_keyboard_report+0x32>
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	f107 030a 	add.w	r3, r7, #10
 8007780:	6811      	ldr	r1, [r2, #0]
 8007782:	6019      	str	r1, [r3, #0]
 8007784:	8892      	ldrh	r2, [r2, #4]
 8007786:	809a      	strh	r2, [r3, #4]
 8007788:	e007      	b.n	800779a <tud_hid_n_keyboard_report+0x42>
  } else {
    tu_memclr(report.keycode, 6);
 800778a:	f107 0308 	add.w	r3, r7, #8
 800778e:	3302      	adds	r3, #2
 8007790:	2206      	movs	r2, #6
 8007792:	2100      	movs	r1, #0
 8007794:	4618      	mov	r0, r3
 8007796:	f005 fb94 	bl	800cec2 <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 800779a:	f107 0208 	add.w	r2, r7, #8
 800779e:	79b9      	ldrb	r1, [r7, #6]
 80077a0:	79f8      	ldrb	r0, [r7, #7]
 80077a2:	2308      	movs	r3, #8
 80077a4:	f7ff ff52 	bl	800764c <tud_hid_n_report>
 80077a8:	4603      	mov	r3, r0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <hidd_init>:
}

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void) {
 80077b2:	b580      	push	{r7, lr}
 80077b4:	af00      	add	r7, sp, #0
  hidd_reset(0);
 80077b6:	2000      	movs	r0, #0
 80077b8:	f000 f80a 	bl	80077d0 <hidd_reset>
}
 80077bc:	bf00      	nop
 80077be:	bd80      	pop	{r7, pc}

080077c0 <hidd_deinit>:

bool hidd_deinit(void) {
 80077c0:	b480      	push	{r7}
 80077c2:	af00      	add	r7, sp, #0
  return true;
 80077c4:	2301      	movs	r3, #1
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <hidd_reset>:

void hidd_reset(uint8_t rhport) {
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 80077da:	220c      	movs	r2, #12
 80077dc:	2100      	movs	r1, #0
 80077de:	4803      	ldr	r0, [pc, #12]	@ (80077ec <hidd_reset+0x1c>)
 80077e0:	f005 fb6f 	bl	800cec2 <memset>
}
 80077e4:	bf00      	nop
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	200016d0 	.word	0x200016d0

080077f0 <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const *desc_itf, uint16_t max_len) {
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b094      	sub	sp, #80	@ 0x50
 80077f4:	af02      	add	r7, sp, #8
 80077f6:	4603      	mov	r3, r0
 80077f8:	6039      	str	r1, [r7, #0]
 80077fa:	71fb      	strb	r3, [r7, #7]
 80077fc:	4613      	mov	r3, r2
 80077fe:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	795b      	ldrb	r3, [r3, #5]
 8007804:	2b03      	cmp	r3, #3
 8007806:	d001      	beq.n	800780c <hidd_open+0x1c>
 8007808:	2300      	movs	r3, #0
 800780a:	e0ce      	b.n	80079aa <hidd_open+0x1ba>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	791b      	ldrb	r3, [r3, #4]
 8007810:	461a      	mov	r2, r3
 8007812:	00d2      	lsls	r2, r2, #3
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 8007818:	3312      	adds	r3, #18
 800781a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  TU_ASSERT(max_len >= drv_len, 0);
 800781e:	88ba      	ldrh	r2, [r7, #4]
 8007820:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007824:	429a      	cmp	r2, r3
 8007826:	d20a      	bcs.n	800783e <hidd_open+0x4e>
 8007828:	4b62      	ldr	r3, [pc, #392]	@ (80079b4 <hidd_open+0x1c4>)
 800782a:	627b      	str	r3, [r7, #36]	@ 0x24
 800782c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b00      	cmp	r3, #0
 8007836:	d000      	beq.n	800783a <hidd_open+0x4a>
 8007838:	be00      	bkpt	0x0000
 800783a:	2300      	movs	r3, #0
 800783c:	e0b5      	b.n	80079aa <hidd_open+0x1ba>

  // Find available interface
  hidd_interface_t *p_hid;
  uint8_t hid_id;
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 800783e:	2300      	movs	r3, #0
 8007840:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007844:	e011      	b.n	800786a <hidd_open+0x7a>
    p_hid = &_hidd_itf[hid_id];
 8007846:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800784a:	4613      	mov	r3, r2
 800784c:	005b      	lsls	r3, r3, #1
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4a59      	ldr	r2, [pc, #356]	@ (80079b8 <hidd_open+0x1c8>)
 8007854:	4413      	add	r3, r2
 8007856:	647b      	str	r3, [r7, #68]	@ 0x44
    if (p_hid->ep_in == 0) {
 8007858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800785a:	785b      	ldrb	r3, [r3, #1]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d009      	beq.n	8007874 <hidd_open+0x84>
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8007860:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007864:	3301      	adds	r3, #1
 8007866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0e9      	beq.n	8007846 <hidd_open+0x56>
 8007872:	e000      	b.n	8007876 <hidd_open+0x86>
      break;
 8007874:	bf00      	nop
    }
  }
  TU_ASSERT(hid_id < CFG_TUD_HID, 0);
 8007876:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00a      	beq.n	8007894 <hidd_open+0xa4>
 800787e:	4b4d      	ldr	r3, [pc, #308]	@ (80079b4 <hidd_open+0x1c4>)
 8007880:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	2b00      	cmp	r3, #0
 800788c:	d000      	beq.n	8007890 <hidd_open+0xa0>
 800788e:	be00      	bkpt	0x0000
 8007890:	2300      	movs	r3, #0
 8007892:	e08a      	b.n	80079aa <hidd_open+0x1ba>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_id];
 8007894:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8007898:	4613      	mov	r3, r2
 800789a:	005b      	lsls	r3, r3, #1
 800789c:	4413      	add	r3, r2
 800789e:	011b      	lsls	r3, r3, #4
 80078a0:	4a46      	ldr	r2, [pc, #280]	@ (80079bc <hidd_open+0x1cc>)
 80078a2:	4413      	add	r3, r2
 80078a4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint8_t const *p_desc = (uint8_t const *)desc_itf;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80078aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ac:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 80078bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80078be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c0:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80078c2:	6a3b      	ldr	r3, [r7, #32]
 80078c4:	3301      	adds	r3, #1
 80078c6:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 80078c8:	2b21      	cmp	r3, #33	@ 0x21
 80078ca:	d00a      	beq.n	80078e2 <hidd_open+0xf2>
 80078cc:	4b39      	ldr	r3, [pc, #228]	@ (80079b4 <hidd_open+0x1c4>)
 80078ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d000      	beq.n	80078de <hidd_open+0xee>
 80078dc:	be00      	bkpt	0x0000
 80078de:	2300      	movs	r3, #0
 80078e0:	e063      	b.n	80079aa <hidd_open+0x1ba>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *)p_desc;
 80078e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078e6:	609a      	str	r2, [r3, #8]
 80078e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ea:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	461a      	mov	r2, r3
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 80078fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	7919      	ldrb	r1, [r3, #4]
 8007900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007902:	3302      	adds	r3, #2
 8007904:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007906:	3201      	adds	r2, #1
 8007908:	79f8      	ldrb	r0, [r7, #7]
 800790a:	9201      	str	r2, [sp, #4]
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	2303      	movs	r3, #3
 8007910:	460a      	mov	r2, r1
 8007912:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007914:	f002 fbd6 	bl	800a0c4 <usbd_open_edpt_pair>
 8007918:	4603      	mov	r3, r0
 800791a:	f083 0301 	eor.w	r3, r3, #1
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00a      	beq.n	800793a <hidd_open+0x14a>
 8007924:	4b23      	ldr	r3, [pc, #140]	@ (80079b4 <hidd_open+0x1c4>)
 8007926:	633b      	str	r3, [r7, #48]	@ 0x30
 8007928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0301 	and.w	r3, r3, #1
 8007930:	2b00      	cmp	r3, #0
 8007932:	d000      	beq.n	8007936 <hidd_open+0x146>
 8007934:	be00      	bkpt	0x0000
 8007936:	2300      	movs	r3, #0
 8007938:	e037      	b.n	80079aa <hidd_open+0x1ba>

  if (desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT) {
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	799b      	ldrb	r3, [r3, #6]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d103      	bne.n	800794a <hidd_open+0x15a>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	79da      	ldrb	r2, [r3, #7]
 8007946:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007948:	70da      	strb	r2, [r3, #3]
  }

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 800794a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800794c:	2201      	movs	r2, #1
 800794e:	719a      	strb	r2, [r3, #6]
  p_hid->itf_num = desc_itf->bInterfaceNumber;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	789a      	ldrb	r2, [r3, #2]
 8007954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007956:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const *)p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 8007958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	3307      	adds	r3, #7
 800795e:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	881a      	ldrh	r2, [r3, #0]
 8007964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007966:	809a      	strh	r2, [r3, #4]

  // Prepare for output endpoint
  if (p_hid->ep_out) {
 8007968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800796a:	789b      	ldrb	r3, [r3, #2]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d01a      	beq.n	80079a6 <hidd_open+0x1b6>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE), drv_len);
 8007970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007972:	7899      	ldrb	r1, [r3, #2]
 8007974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007976:	f103 0220 	add.w	r2, r3, #32
 800797a:	79f8      	ldrb	r0, [r7, #7]
 800797c:	2310      	movs	r3, #16
 800797e:	f002 fc9f 	bl	800a2c0 <usbd_edpt_xfer>
 8007982:	4603      	mov	r3, r0
 8007984:	f083 0301 	eor.w	r3, r3, #1
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00b      	beq.n	80079a6 <hidd_open+0x1b6>
 800798e:	4b09      	ldr	r3, [pc, #36]	@ (80079b4 <hidd_open+0x1c4>)
 8007990:	637b      	str	r3, [r7, #52]	@ 0x34
 8007992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	2b00      	cmp	r3, #0
 800799c:	d000      	beq.n	80079a0 <hidd_open+0x1b0>
 800799e:	be00      	bkpt	0x0000
 80079a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80079a4:	e001      	b.n	80079aa <hidd_open+0x1ba>
  }

  return drv_len;
 80079a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3748      	adds	r7, #72	@ 0x48
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	e000edf0 	.word	0xe000edf0
 80079b8:	200016d0 	.word	0x200016d0
 80079bc:	200016dc 	.word	0x200016dc

080079c0 <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b094      	sub	sp, #80	@ 0x50
 80079c4:	af02      	add	r7, sp, #8
 80079c6:	4603      	mov	r3, r0
 80079c8:	603a      	str	r2, [r7, #0]
 80079ca:	71fb      	strb	r3, [r7, #7]
 80079cc:	460b      	mov	r3, r1
 80079ce:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	f003 031f 	and.w	r3, r3, #31
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d001      	beq.n	80079e2 <hidd_control_xfer_cb+0x22>
 80079de:	2300      	movs	r3, #0
 80079e0:	e1d6      	b.n	8007d90 <hidd_control_xfer_cb+0x3d0>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	889b      	ldrh	r3, [r3, #4]
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 80079ec:	2300      	movs	r3, #0
 80079ee:	77bb      	strb	r3, [r7, #30]
 80079f0:	e00f      	b.n	8007a12 <hidd_control_xfer_cb+0x52>
    if (itf_num == _hidd_itf[i].itf_num) {
 80079f2:	7fba      	ldrb	r2, [r7, #30]
 80079f4:	498f      	ldr	r1, [pc, #572]	@ (8007c34 <hidd_control_xfer_cb+0x274>)
 80079f6:	4613      	mov	r3, r2
 80079f8:	005b      	lsls	r3, r3, #1
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	440b      	add	r3, r1
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	7ffa      	ldrb	r2, [r7, #31]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d101      	bne.n	8007a0c <hidd_control_xfer_cb+0x4c>
      return i;
 8007a08:	7fbb      	ldrb	r3, [r7, #30]
 8007a0a:	e006      	b.n	8007a1a <hidd_control_xfer_cb+0x5a>
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8007a0c:	7fbb      	ldrb	r3, [r7, #30]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	77bb      	strb	r3, [r7, #30]
 8007a12:	7fbb      	ldrb	r3, [r7, #30]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d0ec      	beq.n	80079f2 <hidd_control_xfer_cb+0x32>
  return 0xFF;
 8007a18:	23ff      	movs	r3, #255	@ 0xff
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 8007a1a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 8007a1e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <hidd_control_xfer_cb+0x6a>
 8007a26:	2300      	movs	r3, #0
 8007a28:	e1b2      	b.n	8007d90 <hidd_control_xfer_cb+0x3d0>
  hidd_interface_t *p_hid = &_hidd_itf[hid_itf];
 8007a2a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007a2e:	4613      	mov	r3, r2
 8007a30:	005b      	lsls	r3, r3, #1
 8007a32:	4413      	add	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4a7f      	ldr	r2, [pc, #508]	@ (8007c34 <hidd_control_xfer_cb+0x274>)
 8007a38:	4413      	add	r3, r2
 8007a3a:	637b      	str	r3, [r7, #52]	@ 0x34
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_itf];
 8007a3c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007a40:	4613      	mov	r3, r2
 8007a42:	005b      	lsls	r3, r3, #1
 8007a44:	4413      	add	r3, r2
 8007a46:	011b      	lsls	r3, r3, #4
 8007a48:	4a7b      	ldr	r2, [pc, #492]	@ (8007c38 <hidd_control_xfer_cb+0x278>)
 8007a4a:	4413      	add	r3, r2
 8007a4c:	633b      	str	r3, [r7, #48]	@ 0x30

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) {
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d145      	bne.n	8007ae8 <hidd_control_xfer_cb+0x128>
    //------------- STD Request -------------//
    if (stage == CONTROL_STAGE_SETUP) {
 8007a5c:	79bb      	ldrb	r3, [r7, #6]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	f040 8195 	bne.w	8007d8e <hidd_control_xfer_cb+0x3ce>
      uint8_t const desc_type = tu_u16_high(request->wValue);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	885b      	ldrh	r3, [r3, #2]
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8007a6c:	8bbb      	ldrh	r3, [r7, #28]
 8007a6e:	0a1b      	lsrs	r3, r3, #8
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID) {
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	785b      	ldrb	r3, [r3, #1]
 8007a7c:	2b06      	cmp	r3, #6
 8007a7e:	d11b      	bne.n	8007ab8 <hidd_control_xfer_cb+0xf8>
 8007a80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a84:	2b21      	cmp	r3, #33	@ 0x21
 8007a86:	d117      	bne.n	8007ab8 <hidd_control_xfer_cb+0xf8>
        TU_VERIFY(p_hid->hid_descriptor);
 8007a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <hidd_control_xfer_cb+0xd4>
 8007a90:	2300      	movs	r3, #0
 8007a92:	e17d      	b.n	8007d90 <hidd_control_xfer_cb+0x3d0>
        TU_VERIFY(tud_control_xfer(rhport, request, (void *)(uintptr_t)p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 8007a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a96:	689a      	ldr	r2, [r3, #8]
 8007a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	79f8      	ldrb	r0, [r7, #7]
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	f002 fdf5 	bl	800a690 <tud_control_xfer>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	f083 0301 	eor.w	r3, r3, #1
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f000 816d 	beq.w	8007d8e <hidd_control_xfer_cb+0x3ce>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	e16b      	b.n	8007d90 <hidd_control_xfer_cb+0x3d0>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	785b      	ldrb	r3, [r3, #1]
 8007abc:	2b06      	cmp	r3, #6
 8007abe:	d111      	bne.n	8007ae4 <hidd_control_xfer_cb+0x124>
 8007ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ac4:	2b22      	cmp	r3, #34	@ 0x22
 8007ac6:	d10d      	bne.n	8007ae4 <hidd_control_xfer_cb+0x124>
        uint8_t const *desc_report = tud_hid_descriptor_report_cb(hid_itf);
 8007ac8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fc f941 	bl	8003d54 <tud_hid_descriptor_report_cb>
 8007ad2:	6238      	str	r0, [r7, #32]
        tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_report, p_hid->report_desc_len);
 8007ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ad6:	889b      	ldrh	r3, [r3, #4]
 8007ad8:	79f8      	ldrb	r0, [r7, #7]
 8007ada:	6a3a      	ldr	r2, [r7, #32]
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	f002 fdd7 	bl	800a690 <tud_control_xfer>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8007ae2:	e154      	b.n	8007d8e <hidd_control_xfer_cb+0x3ce>
      } else {
        return false; // stall unsupported request
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	e153      	b.n	8007d90 <hidd_control_xfer_cb+0x3d0>
      }
    }
  } else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS) {
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b20      	cmp	r3, #32
 8007af4:	f040 813e 	bne.w	8007d74 <hidd_control_xfer_cb+0x3b4>
    //------------- Class Specific Request -------------//
    switch (request->bRequest) {
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	785b      	ldrb	r3, [r3, #1]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	2b0a      	cmp	r3, #10
 8007b00:	f200 8136 	bhi.w	8007d70 <hidd_control_xfer_cb+0x3b0>
 8007b04:	a201      	add	r2, pc, #4	@ (adr r2, 8007b0c <hidd_control_xfer_cb+0x14c>)
 8007b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0a:	bf00      	nop
 8007b0c:	08007b39 	.word	0x08007b39
 8007b10:	08007d0f 	.word	0x08007d0f
 8007b14:	08007d25 	.word	0x08007d25
 8007b18:	08007d71 	.word	0x08007d71
 8007b1c:	08007d71 	.word	0x08007d71
 8007b20:	08007d71 	.word	0x08007d71
 8007b24:	08007d71 	.word	0x08007d71
 8007b28:	08007d71 	.word	0x08007d71
 8007b2c:	08007c0f 	.word	0x08007c0f
 8007b30:	08007cc9 	.word	0x08007cc9
 8007b34:	08007d3b 	.word	0x08007d3b
      case HID_REQ_CONTROL_GET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8007b38:	79bb      	ldrb	r3, [r7, #6]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	f040 811c 	bne.w	8007d78 <hidd_control_xfer_cb+0x3b8>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	885b      	ldrh	r3, [r3, #2]
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	82bb      	strh	r3, [r7, #20]
 8007b48:	8abb      	ldrh	r3, [r7, #20]
 8007b4a:	0a1b      	lsrs	r3, r3, #8
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          uint8_t const report_id = tu_u16_low(request->wValue);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	885b      	ldrh	r3, [r3, #2]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8007b5c:	8afb      	ldrh	r3, [r7, #22]
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

          uint8_t* report_buf = p_epbuf->ctrl;
 8007b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b66:	647b      	str	r3, [r7, #68]	@ 0x44
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	88db      	ldrh	r3, [r3, #6]
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	837b      	strh	r3, [r7, #26]
 8007b70:	2310      	movs	r3, #16
 8007b72:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007b74:	8b7a      	ldrh	r2, [r7, #26]
 8007b76:	8b3b      	ldrh	r3, [r7, #24]
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	bf28      	it	cs
 8007b7c:	4613      	movcs	r3, r2
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          uint16_t xferlen = 0;
 8007b84:	2300      	movs	r3, #0
 8007b86:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ((report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1)) {
 8007b8a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d013      	beq.n	8007bba <hidd_control_xfer_cb+0x1fa>
 8007b92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d90f      	bls.n	8007bba <hidd_control_xfer_cb+0x1fa>
            *report_buf++ = report_id;
 8007b9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b9c:	1c5a      	adds	r2, r3, #1
 8007b9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ba0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8007ba4:	701a      	strb	r2, [r3, #0]
            req_len--;
 8007ba6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007baa:	3b01      	subs	r3, #1
 8007bac:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            xferlen++;
 8007bb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 8007bba:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8007bbe:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8007bc2:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8007bc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bce:	f7f9 ff3f 	bl	8001a50 <tud_hid_get_report_cb>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007bda:	4413      	add	r3, r2
 8007bdc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          TU_ASSERT(xferlen > 0);
 8007be0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10a      	bne.n	8007bfe <hidd_control_xfer_cb+0x23e>
 8007be8:	4b14      	ldr	r3, [pc, #80]	@ (8007c3c <hidd_control_xfer_cb+0x27c>)
 8007bea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d000      	beq.n	8007bfa <hidd_control_xfer_cb+0x23a>
 8007bf8:	be00      	bkpt	0x0000
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	e0c8      	b.n	8007d90 <hidd_control_xfer_cb+0x3d0>

          tud_control_xfer(rhport, request, p_epbuf->ctrl, xferlen);
 8007bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007c04:	79f8      	ldrb	r0, [r7, #7]
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	f002 fd42 	bl	800a690 <tud_control_xfer>
        }
        break;
 8007c0c:	e0b4      	b.n	8007d78 <hidd_control_xfer_cb+0x3b8>

      case HID_REQ_CONTROL_SET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8007c0e:	79bb      	ldrb	r3, [r7, #6]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d115      	bne.n	8007c40 <hidd_control_xfer_cb+0x280>
          TU_VERIFY(request->wLength <= CFG_TUD_HID_EP_BUFSIZE);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	88db      	ldrh	r3, [r3, #6]
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	2b10      	cmp	r3, #16
 8007c1c:	d901      	bls.n	8007c22 <hidd_control_xfer_cb+0x262>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	e0b6      	b.n	8007d90 <hidd_control_xfer_cb+0x3d0>
          tud_control_xfer(rhport, request, p_epbuf->ctrl, request->wLength);
 8007c22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	88db      	ldrh	r3, [r3, #6]
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	79f8      	ldrb	r0, [r7, #7]
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	f002 fd2f 	bl	800a690 <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
        break;
 8007c32:	e0a3      	b.n	8007d7c <hidd_control_xfer_cb+0x3bc>
 8007c34:	200016d0 	.word	0x200016d0
 8007c38:	200016dc 	.word	0x200016dc
 8007c3c:	e000edf0 	.word	0xe000edf0
        } else if (stage == CONTROL_STAGE_ACK) {
 8007c40:	79bb      	ldrb	r3, [r7, #6]
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	f040 809a 	bne.w	8007d7c <hidd_control_xfer_cb+0x3bc>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	885b      	ldrh	r3, [r3, #2]
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8007c50:	89bb      	ldrh	r3, [r7, #12]
 8007c52:	0a1b      	lsrs	r3, r3, #8
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          uint8_t const report_id = tu_u16_low(request->wValue);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	885b      	ldrh	r3, [r3, #2]
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8007c64:	89fb      	ldrh	r3, [r7, #14]
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          uint8_t const* report_buf = p_epbuf->ctrl;
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	88db      	ldrh	r3, [r3, #6]
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	827b      	strh	r3, [r7, #18]
 8007c78:	2310      	movs	r3, #16
 8007c7a:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007c7c:	8a7a      	ldrh	r2, [r7, #18]
 8007c7e:	8a3b      	ldrh	r3, [r7, #16]
 8007c80:	4293      	cmp	r3, r2
 8007c82:	bf28      	it	cs
 8007c84:	4613      	movcs	r3, r2
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	877b      	strh	r3, [r7, #58]	@ 0x3a
          if ((report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0])) {
 8007c8a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00e      	beq.n	8007cb0 <hidd_control_xfer_cb+0x2f0>
 8007c92:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d90b      	bls.n	8007cb0 <hidd_control_xfer_cb+0x2f0>
 8007c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d105      	bne.n	8007cb0 <hidd_control_xfer_cb+0x2f0>
            report_buf++;
 8007ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
            report_len--;
 8007caa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007cac:	3b01      	subs	r3, #1
 8007cae:	877b      	strh	r3, [r7, #58]	@ 0x3a
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 8007cb0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007cb4:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8007cb8:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8007cbc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cc2:	f7f9 fed6 	bl	8001a72 <tud_hid_set_report_cb>
        break;
 8007cc6:	e059      	b.n	8007d7c <hidd_control_xfer_cb+0x3bc>

      case HID_REQ_CONTROL_SET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8007cc8:	79bb      	ldrb	r3, [r7, #6]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d158      	bne.n	8007d80 <hidd_control_xfer_cb+0x3c0>
          p_hid->idle_rate = tu_u16_high(request->wValue);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	885b      	ldrh	r3, [r3, #2]
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8007cd6:	897b      	ldrh	r3, [r7, #10]
 8007cd8:	0a1b      	lsrs	r3, r3, #8
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ce0:	71da      	strb	r2, [r3, #7]
          TU_VERIFY(tud_hid_set_idle_cb(hid_itf, p_hid->idle_rate)); // stall if false
 8007ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ce4:	79da      	ldrb	r2, [r3, #7]
 8007ce6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007cea:	4611      	mov	r1, r2
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7ff fc4b 	bl	8007588 <tud_hid_set_idle_cb>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	f083 0301 	eor.w	r3, r3, #1
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <hidd_control_xfer_cb+0x342>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	e046      	b.n	8007d90 <hidd_control_xfer_cb+0x3d0>
          tud_control_status(rhport, request);
 8007d02:	79fb      	ldrb	r3, [r7, #7]
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f002 fc50 	bl	800a5ac <tud_control_status>
        }
        break;
 8007d0c:	e038      	b.n	8007d80 <hidd_control_xfer_cb+0x3c0>

      case HID_REQ_CONTROL_GET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8007d0e:	79bb      	ldrb	r3, [r7, #6]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d137      	bne.n	8007d84 <hidd_control_xfer_cb+0x3c4>
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 8007d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d16:	1dda      	adds	r2, r3, #7
 8007d18:	79f8      	ldrb	r0, [r7, #7]
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	f002 fcb7 	bl	800a690 <tud_control_xfer>
        }
        break;
 8007d22:	e02f      	b.n	8007d84 <hidd_control_xfer_cb+0x3c4>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8007d24:	79bb      	ldrb	r3, [r7, #6]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d12e      	bne.n	8007d88 <hidd_control_xfer_cb+0x3c8>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 8007d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d2c:	1d9a      	adds	r2, r3, #6
 8007d2e:	79f8      	ldrb	r0, [r7, #7]
 8007d30:	2301      	movs	r3, #1
 8007d32:	6839      	ldr	r1, [r7, #0]
 8007d34:	f002 fcac 	bl	800a690 <tud_control_xfer>
        }
        break;
 8007d38:	e026      	b.n	8007d88 <hidd_control_xfer_cb+0x3c8>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8007d3a:	79bb      	ldrb	r3, [r7, #6]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d105      	bne.n	8007d4c <hidd_control_xfer_cb+0x38c>
          tud_control_status(rhport, request);
 8007d40:	79fb      	ldrb	r3, [r7, #7]
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f002 fc31 	bl	800a5ac <tud_control_status>
        } else if (stage == CONTROL_STAGE_ACK) {
          p_hid->protocol_mode = (uint8_t) request->wValue;
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
        }
        break;
 8007d4a:	e01f      	b.n	8007d8c <hidd_control_xfer_cb+0x3cc>
        } else if (stage == CONTROL_STAGE_ACK) {
 8007d4c:	79bb      	ldrb	r3, [r7, #6]
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d11c      	bne.n	8007d8c <hidd_control_xfer_cb+0x3cc>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	885b      	ldrh	r3, [r3, #2]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d5c:	719a      	strb	r2, [r3, #6]
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 8007d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d60:	799a      	ldrb	r2, [r3, #6]
 8007d62:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007d66:	4611      	mov	r1, r2
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7f9 fe55 	bl	8001a18 <tud_hid_set_protocol_cb>
        break;
 8007d6e:	e00d      	b.n	8007d8c <hidd_control_xfer_cb+0x3cc>

      default:
        return false; // stall unsupported request
 8007d70:	2300      	movs	r3, #0
 8007d72:	e00d      	b.n	8007d90 <hidd_control_xfer_cb+0x3d0>
    }
  } else {
    return false; // stall unsupported request
 8007d74:	2300      	movs	r3, #0
 8007d76:	e00b      	b.n	8007d90 <hidd_control_xfer_cb+0x3d0>
        break;
 8007d78:	bf00      	nop
 8007d7a:	e008      	b.n	8007d8e <hidd_control_xfer_cb+0x3ce>
        break;
 8007d7c:	bf00      	nop
 8007d7e:	e006      	b.n	8007d8e <hidd_control_xfer_cb+0x3ce>
        break;
 8007d80:	bf00      	nop
 8007d82:	e004      	b.n	8007d8e <hidd_control_xfer_cb+0x3ce>
        break;
 8007d84:	bf00      	nop
 8007d86:	e002      	b.n	8007d8e <hidd_control_xfer_cb+0x3ce>
        break;
 8007d88:	bf00      	nop
 8007d8a:	e000      	b.n	8007d8e <hidd_control_xfer_cb+0x3ce>
        break;
 8007d8c:	bf00      	nop
  }

  return true;
 8007d8e:	2301      	movs	r3, #1
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3748      	adds	r7, #72	@ 0x48
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b08a      	sub	sp, #40	@ 0x28
 8007d9c:	af02      	add	r7, sp, #8
 8007d9e:	603b      	str	r3, [r7, #0]
 8007da0:	4603      	mov	r3, r0
 8007da2:	71fb      	strb	r3, [r7, #7]
 8007da4:	460b      	mov	r3, r1
 8007da6:	71bb      	strb	r3, [r7, #6]
 8007da8:	4613      	mov	r3, r2
 8007daa:	717b      	strb	r3, [r7, #5]
  uint8_t instance;
  hidd_interface_t *p_hid;

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8007dac:	2300      	movs	r3, #0
 8007dae:	77fb      	strb	r3, [r7, #31]
 8007db0:	e014      	b.n	8007ddc <hidd_xfer_cb+0x44>
    p_hid = &_hidd_itf[instance];
 8007db2:	7ffa      	ldrb	r2, [r7, #31]
 8007db4:	4613      	mov	r3, r2
 8007db6:	005b      	lsls	r3, r3, #1
 8007db8:	4413      	add	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	4a3e      	ldr	r2, [pc, #248]	@ (8007eb8 <hidd_xfer_cb+0x120>)
 8007dbe:	4413      	add	r3, r2
 8007dc0:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in)) {
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	789b      	ldrb	r3, [r3, #2]
 8007dc6:	79ba      	ldrb	r2, [r7, #6]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d00a      	beq.n	8007de2 <hidd_xfer_cb+0x4a>
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	785b      	ldrb	r3, [r3, #1]
 8007dd0:	79ba      	ldrb	r2, [r7, #6]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d005      	beq.n	8007de2 <hidd_xfer_cb+0x4a>
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8007dd6:	7ffb      	ldrb	r3, [r7, #31]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	77fb      	strb	r3, [r7, #31]
 8007ddc:	7ffb      	ldrb	r3, [r7, #31]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0e7      	beq.n	8007db2 <hidd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 8007de2:	7ffb      	ldrb	r3, [r7, #31]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00a      	beq.n	8007dfe <hidd_xfer_cb+0x66>
 8007de8:	4b34      	ldr	r3, [pc, #208]	@ (8007ebc <hidd_xfer_cb+0x124>)
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d000      	beq.n	8007dfa <hidd_xfer_cb+0x62>
 8007df8:	be00      	bkpt	0x0000
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	e057      	b.n	8007eae <hidd_xfer_cb+0x116>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8007dfe:	7ffa      	ldrb	r2, [r7, #31]
 8007e00:	4613      	mov	r3, r2
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	4413      	add	r3, r2
 8007e06:	011b      	lsls	r3, r3, #4
 8007e08:	4a2d      	ldr	r2, [pc, #180]	@ (8007ec0 <hidd_xfer_cb+0x128>)
 8007e0a:	4413      	add	r3, r2
 8007e0c:	617b      	str	r3, [r7, #20]

  if (ep_addr == p_hid->ep_in) {
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	785b      	ldrb	r3, [r3, #1]
 8007e12:	79ba      	ldrb	r2, [r7, #6]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d116      	bne.n	8007e46 <hidd_xfer_cb+0xae>
    // Input report
    if (XFER_RESULT_SUCCESS == result) {
 8007e18:	797b      	ldrb	r3, [r7, #5]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d109      	bne.n	8007e32 <hidd_xfer_cb+0x9a>
      tud_hid_report_complete_cb(instance, p_epbuf->epin, (uint16_t) xferred_bytes);
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f103 0110 	add.w	r1, r3, #16
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	7ffb      	ldrb	r3, [r7, #31]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7f9 fe02 	bl	8001a34 <tud_hid_report_complete_cb>
 8007e30:	e03c      	b.n	8007eac <hidd_xfer_cb+0x114>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_INPUT, p_epbuf->epin, (uint16_t) xferred_bytes);
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f103 0210 	add.w	r2, r3, #16
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	7ff8      	ldrb	r0, [r7, #31]
 8007e3e:	2101      	movs	r1, #1
 8007e40:	f7ff fbb1 	bl	80075a6 <tud_hid_report_failed_cb>
 8007e44:	e032      	b.n	8007eac <hidd_xfer_cb+0x114>
    }
  } else {
    // Output report
    if (XFER_RESULT_SUCCESS == result) {
 8007e46:	797b      	ldrb	r3, [r7, #5]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10c      	bne.n	8007e66 <hidd_xfer_cb+0xce>
      tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t)xferred_bytes);
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f103 0220 	add.w	r2, r3, #32
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	7ff8      	ldrb	r0, [r7, #31]
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	2100      	movs	r1, #0
 8007e60:	f7f9 fe07 	bl	8001a72 <tud_hid_set_report_cb>
 8007e64:	e008      	b.n	8007e78 <hidd_xfer_cb+0xe0>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t) xferred_bytes);
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f103 0220 	add.w	r2, r3, #32
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	7ff8      	ldrb	r0, [r7, #31]
 8007e72:	2102      	movs	r1, #2
 8007e74:	f7ff fb97 	bl	80075a6 <tud_hid_report_failed_cb>
    }

    // prepare for new transfer
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE));
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	7899      	ldrb	r1, [r3, #2]
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f103 0220 	add.w	r2, r3, #32
 8007e82:	79f8      	ldrb	r0, [r7, #7]
 8007e84:	2310      	movs	r3, #16
 8007e86:	f002 fa1b 	bl	800a2c0 <usbd_edpt_xfer>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	f083 0301 	eor.w	r3, r3, #1
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00a      	beq.n	8007eac <hidd_xfer_cb+0x114>
 8007e96:	4b09      	ldr	r3, [pc, #36]	@ (8007ebc <hidd_xfer_cb+0x124>)
 8007e98:	613b      	str	r3, [r7, #16]
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d000      	beq.n	8007ea8 <hidd_xfer_cb+0x110>
 8007ea6:	be00      	bkpt	0x0000
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	e000      	b.n	8007eae <hidd_xfer_cb+0x116>
  }

  return true;
 8007eac:	2301      	movs	r3, #1
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3720      	adds	r7, #32
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	200016d0 	.word	0x200016d0
 8007ebc:	e000edf0 	.word	0xe000edf0
 8007ec0:	200016dc 	.word	0x200016dc

08007ec4 <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	4611      	mov	r1, r2
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	80fb      	strh	r3, [r7, #6]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8007eda:	88fb      	ldrh	r3, [r7, #6]
 8007edc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ee0:	d901      	bls.n	8007ee6 <tu_fifo_config+0x22>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	e01b      	b.n	8007f1e <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	88fa      	ldrh	r2, [r7, #6]
 8007ef0:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8007ef2:	88bb      	ldrh	r3, [r7, #4]
 8007ef4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007ef8:	b299      	uxth	r1, r3
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	88d3      	ldrh	r3, [r2, #6]
 8007efe:	f361 030e 	bfi	r3, r1, #0, #15
 8007f02:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	79d3      	ldrb	r3, [r2, #7]
 8007f08:	7e39      	ldrb	r1, [r7, #24]
 8007f0a:	f361 13c7 	bfi	r3, r1, #7, #1
 8007f0e:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8007f1c:	2301      	movs	r3, #1
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3714      	adds	r7, #20
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b08a      	sub	sp, #40	@ 0x28
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	60f8      	str	r0, [r7, #12]
 8007f32:	60b9      	str	r1, [r7, #8]
 8007f34:	4613      	mov	r3, r2
 8007f36:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8007f3c:	88fb      	ldrh	r3, [r7, #6]
 8007f3e:	089b      	lsrs	r3, r3, #2
 8007f40:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8007f42:	e00b      	b.n	8007f5c <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	61ba      	str	r2, [r7, #24]
 8007f4c:	617b      	str	r3, [r7, #20]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	601a      	str	r2, [r3, #0]
}
 8007f54:	bf00      	nop
    ff_buf += 4;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3304      	adds	r3, #4
 8007f5a:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8007f5c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007f5e:	1e5a      	subs	r2, r3, #1
 8007f60:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1ee      	bne.n	8007f44 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8007f66:	88fb      	ldrh	r3, [r7, #6]
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	f003 0303 	and.w	r3, r3, #3
 8007f6e:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8007f70:	7ffb      	ldrb	r3, [r7, #31]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d009      	beq.n	8007f8a <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8007f7c:	7ffa      	ldrb	r2, [r7, #31]
 8007f7e:	f107 0310 	add.w	r3, r7, #16
 8007f82:	4619      	mov	r1, r3
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f005 f874 	bl	800d072 <memcpy>
  }
}
 8007f8a:	bf00      	nop
 8007f8c:	3728      	adds	r7, #40	@ 0x28
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b08a      	sub	sp, #40	@ 0x28
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	60f8      	str	r0, [r7, #12]
 8007f9a:	60b9      	str	r1, [r7, #8]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8007fa4:	88fb      	ldrh	r3, [r7, #6]
 8007fa6:	089b      	lsrs	r3, r3, #2
 8007fa8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8007faa:	e008      	b.n	8007fbe <_ff_pull_const_addr+0x2c>
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	3304      	adds	r3, #4
 8007fbc:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8007fbe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007fc0:	1e5a      	subs	r2, r3, #1
 8007fc2:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1f1      	bne.n	8007fac <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8007fc8:	88fb      	ldrh	r3, [r7, #6]
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	f003 0303 	and.w	r3, r3, #3
 8007fd0:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8007fd2:	7ffb      	ldrb	r3, [r7, #31]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00b      	beq.n	8007ff0 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8007fdc:	7ffa      	ldrb	r2, [r7, #31]
 8007fde:	f107 0314 	add.w	r3, r7, #20
 8007fe2:	68b9      	ldr	r1, [r7, #8]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f005 f844 	bl	800d072 <memcpy>

    *reg_tx = tmp32;
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	601a      	str	r2, [r3, #0]
  }
}
 8007ff0:	bf00      	nop
 8007ff2:	3728      	adds	r7, #40	@ 0x28
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	4613      	mov	r3, r2
 8008004:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	88fa      	ldrh	r2, [r7, #6]
 800800c:	68f9      	ldr	r1, [r7, #12]
 800800e:	88c9      	ldrh	r1, [r1, #6]
 8008010:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8008014:	b289      	uxth	r1, r1
 8008016:	fb01 f202 	mul.w	r2, r1, r2
 800801a:	1898      	adds	r0, r3, r2
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	88db      	ldrh	r3, [r3, #6]
 8008020:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008024:	b29b      	uxth	r3, r3
 8008026:	461a      	mov	r2, r3
 8008028:	68b9      	ldr	r1, [r7, #8]
 800802a:	f005 f822 	bl	800d072 <memcpy>
}
 800802e:	bf00      	nop
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b08e      	sub	sp, #56	@ 0x38
 800803a:	af00      	add	r7, sp, #0
 800803c:	60f8      	str	r0, [r7, #12]
 800803e:	60b9      	str	r1, [r7, #8]
 8008040:	4611      	mov	r1, r2
 8008042:	461a      	mov	r2, r3
 8008044:	460b      	mov	r3, r1
 8008046:	80fb      	strh	r3, [r7, #6]
 8008048:	4613      	mov	r3, r2
 800804a:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	889a      	ldrh	r2, [r3, #4]
 8008050:	88bb      	ldrh	r3, [r7, #4]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 8008056:	88fa      	ldrh	r2, [r7, #6]
 8008058:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	88db      	ldrh	r3, [r3, #6]
 8008062:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008066:	b29b      	uxth	r3, r3
 8008068:	461a      	mov	r2, r3
 800806a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800806c:	fb13 f302 	smulbb	r3, r3, r2
 8008070:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	88db      	ldrh	r3, [r3, #6]
 8008076:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800807a:	b29b      	uxth	r3, r3
 800807c:	461a      	mov	r2, r3
 800807e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008080:	fb13 f302 	smulbb	r3, r3, r2
 8008084:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	88ba      	ldrh	r2, [r7, #4]
 800808c:	68f9      	ldr	r1, [r7, #12]
 800808e:	88c9      	ldrh	r1, [r1, #6]
 8008090:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8008094:	b289      	uxth	r1, r1
 8008096:	fb01 f202 	mul.w	r2, r1, r2
 800809a:	4413      	add	r3, r2
 800809c:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 800809e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d002      	beq.n	80080ac <_ff_push_n+0x76>
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d022      	beq.n	80080f0 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 80080aa:	e09e      	b.n	80081ea <_ff_push_n+0x1b4>
      if(n <= lin_count)
 80080ac:	88fa      	ldrh	r2, [r7, #6]
 80080ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d80d      	bhi.n	80080d0 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 80080b4:	88fb      	ldrh	r3, [r7, #6]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	88d2      	ldrh	r2, [r2, #6]
 80080ba:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80080be:	b292      	uxth	r2, r2
 80080c0:	fb02 f303 	mul.w	r3, r2, r3
 80080c4:	461a      	mov	r2, r3
 80080c6:	68b9      	ldr	r1, [r7, #8]
 80080c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080ca:	f004 ffd2 	bl	800d072 <memcpy>
      break;
 80080ce:	e08c      	b.n	80081ea <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 80080d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80080d2:	461a      	mov	r2, r3
 80080d4:	68b9      	ldr	r1, [r7, #8]
 80080d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080d8:	f004 ffcb 	bl	800d072 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6818      	ldr	r0, [r3, #0]
 80080e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	4413      	add	r3, r2
 80080e6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80080e8:	4619      	mov	r1, r3
 80080ea:	f004 ffc2 	bl	800d072 <memcpy>
      break;
 80080ee:	e07c      	b.n	80081ea <_ff_push_n+0x1b4>
      if(n <= lin_count)
 80080f0:	88fa      	ldrh	r2, [r7, #6]
 80080f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d80f      	bhi.n	8008118 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	88db      	ldrh	r3, [r3, #6]
 80080fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008100:	b29b      	uxth	r3, r3
 8008102:	461a      	mov	r2, r3
 8008104:	88fb      	ldrh	r3, [r7, #6]
 8008106:	fb13 f302 	smulbb	r3, r3, r2
 800810a:	b29b      	uxth	r3, r3
 800810c:	461a      	mov	r2, r3
 800810e:	68b9      	ldr	r1, [r7, #8]
 8008110:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008112:	f7ff ff0a 	bl	8007f2a <_ff_push_const_addr>
      break;
 8008116:	e067      	b.n	80081e8 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8008118:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800811a:	f023 0303 	bic.w	r3, r3, #3
 800811e:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8008120:	8c3b      	ldrh	r3, [r7, #32]
 8008122:	461a      	mov	r2, r3
 8008124:	68b9      	ldr	r1, [r7, #8]
 8008126:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008128:	f7ff feff 	bl	8007f2a <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 800812c:	8c3b      	ldrh	r3, [r7, #32]
 800812e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008130:	4413      	add	r3, r2
 8008132:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8008134:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008136:	b2db      	uxtb	r3, r3
 8008138:	f003 0303 	and.w	r3, r3, #3
 800813c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8008140:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008144:	2b00      	cmp	r3, #0
 8008146:	d043      	beq.n	80081d0 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800814c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008150:	b29b      	uxth	r3, r3
 8008152:	f1c3 0304 	rsb	r3, r3, #4
 8008156:	b29a      	uxth	r2, r3
 8008158:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800815a:	837b      	strh	r3, [r7, #26]
 800815c:	4613      	mov	r3, r2
 800815e:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008160:	8b7a      	ldrh	r2, [r7, #26]
 8008162:	8b3b      	ldrh	r3, [r7, #24]
 8008164:	4293      	cmp	r3, r2
 8008166:	bf28      	it	cs
 8008168:	4613      	movcs	r3, r2
 800816a:	b29b      	uxth	r3, r3
 800816c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8008170:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008174:	b29b      	uxth	r3, r3
 8008176:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8008182:	f107 0314 	add.w	r3, r7, #20
 8008186:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8008188:	e007      	b.n	800819a <_ff_push_n+0x164>
 800818a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800818c:	1c53      	adds	r3, r2, #1
 800818e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008192:	1c59      	adds	r1, r3, #1
 8008194:	6339      	str	r1, [r7, #48]	@ 0x30
 8008196:	7812      	ldrb	r2, [r2, #0]
 8008198:	701a      	strb	r2, [r3, #0]
 800819a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800819e:	1e5a      	subs	r2, r3, #1
 80081a0:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1f0      	bne.n	800818a <_ff_push_n+0x154>
          ff_buf = f->buffer;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 80081ae:	e007      	b.n	80081c0 <_ff_push_n+0x18a>
 80081b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081b2:	1c53      	adds	r3, r2, #1
 80081b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b8:	1c59      	adds	r1, r3, #1
 80081ba:	6339      	str	r1, [r7, #48]	@ 0x30
 80081bc:	7812      	ldrb	r2, [r2, #0]
 80081be:	701a      	strb	r2, [r3, #0]
 80081c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80081c4:	1e5a      	subs	r2, r3, #1
 80081c6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1f0      	bne.n	80081b0 <_ff_push_n+0x17a>
 80081ce:	e002      	b.n	80081d6 <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 80081d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d005      	beq.n	80081e8 <_ff_push_n+0x1b2>
 80081dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80081de:	461a      	mov	r2, r3
 80081e0:	68b9      	ldr	r1, [r7, #8]
 80081e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081e4:	f7ff fea1 	bl	8007f2a <_ff_push_const_addr>
      break;
 80081e8:	bf00      	nop
  }
}
 80081ea:	bf00      	nop
 80081ec:	3738      	adds	r7, #56	@ 0x38
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b084      	sub	sp, #16
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	60f8      	str	r0, [r7, #12]
 80081fa:	60b9      	str	r1, [r7, #8]
 80081fc:	4613      	mov	r3, r2
 80081fe:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	88fa      	ldrh	r2, [r7, #6]
 8008206:	68f9      	ldr	r1, [r7, #12]
 8008208:	88c9      	ldrh	r1, [r1, #6]
 800820a:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800820e:	b289      	uxth	r1, r1
 8008210:	fb01 f202 	mul.w	r2, r1, r2
 8008214:	1899      	adds	r1, r3, r2
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	88db      	ldrh	r3, [r3, #6]
 800821a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800821e:	b29b      	uxth	r3, r3
 8008220:	461a      	mov	r2, r3
 8008222:	68b8      	ldr	r0, [r7, #8]
 8008224:	f004 ff25 	bl	800d072 <memcpy>
}
 8008228:	bf00      	nop
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b08e      	sub	sp, #56	@ 0x38
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	4611      	mov	r1, r2
 800823c:	461a      	mov	r2, r3
 800823e:	460b      	mov	r3, r1
 8008240:	80fb      	strh	r3, [r7, #6]
 8008242:	4613      	mov	r3, r2
 8008244:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	889a      	ldrh	r2, [r3, #4]
 800824a:	88bb      	ldrh	r3, [r7, #4]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8008250:	88fa      	ldrh	r2, [r7, #6]
 8008252:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	88db      	ldrh	r3, [r3, #6]
 800825c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008260:	b29b      	uxth	r3, r3
 8008262:	461a      	mov	r2, r3
 8008264:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008266:	fb13 f302 	smulbb	r3, r3, r2
 800826a:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	88db      	ldrh	r3, [r3, #6]
 8008270:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008274:	b29b      	uxth	r3, r3
 8008276:	461a      	mov	r2, r3
 8008278:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800827a:	fb13 f302 	smulbb	r3, r3, r2
 800827e:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	88ba      	ldrh	r2, [r7, #4]
 8008286:	68f9      	ldr	r1, [r7, #12]
 8008288:	88c9      	ldrh	r1, [r1, #6]
 800828a:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800828e:	b289      	uxth	r1, r1
 8008290:	fb01 f202 	mul.w	r2, r1, r2
 8008294:	4413      	add	r3, r2
 8008296:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8008298:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <_ff_pull_n+0x76>
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d022      	beq.n	80082ea <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 80082a4:	e0a0      	b.n	80083e8 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 80082a6:	88fa      	ldrh	r2, [r7, #6]
 80082a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d80d      	bhi.n	80082ca <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 80082ae:	88fb      	ldrh	r3, [r7, #6]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	88d2      	ldrh	r2, [r2, #6]
 80082b4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80082b8:	b292      	uxth	r2, r2
 80082ba:	fb02 f303 	mul.w	r3, r2, r3
 80082be:	461a      	mov	r2, r3
 80082c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80082c2:	68b8      	ldr	r0, [r7, #8]
 80082c4:	f004 fed5 	bl	800d072 <memcpy>
    break;
 80082c8:	e08e      	b.n	80083e8 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 80082ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80082cc:	461a      	mov	r2, r3
 80082ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80082d0:	68b8      	ldr	r0, [r7, #8]
 80082d2:	f004 fece 	bl	800d072 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 80082d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	18d0      	adds	r0, r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80082e2:	4619      	mov	r1, r3
 80082e4:	f004 fec5 	bl	800d072 <memcpy>
    break;
 80082e8:	e07e      	b.n	80083e8 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 80082ea:	88fa      	ldrh	r2, [r7, #6]
 80082ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d80f      	bhi.n	8008312 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	88db      	ldrh	r3, [r3, #6]
 80082f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	461a      	mov	r2, r3
 80082fe:	88fb      	ldrh	r3, [r7, #6]
 8008300:	fb13 f302 	smulbb	r3, r3, r2
 8008304:	b29b      	uxth	r3, r3
 8008306:	461a      	mov	r2, r3
 8008308:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800830a:	68b8      	ldr	r0, [r7, #8]
 800830c:	f7ff fe41 	bl	8007f92 <_ff_pull_const_addr>
    break;
 8008310:	e069      	b.n	80083e6 <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8008312:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008314:	f023 0303 	bic.w	r3, r3, #3
 8008318:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 800831a:	8c3b      	ldrh	r3, [r7, #32]
 800831c:	461a      	mov	r2, r3
 800831e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008320:	68b8      	ldr	r0, [r7, #8]
 8008322:	f7ff fe36 	bl	8007f92 <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 8008326:	8c3b      	ldrh	r3, [r7, #32]
 8008328:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800832a:	4413      	add	r3, r2
 800832c:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 800832e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008330:	b2db      	uxtb	r3, r3
 8008332:	f003 0303 	and.w	r3, r3, #3
 8008336:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 800833a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800833e:	2b00      	cmp	r3, #0
 8008340:	d045      	beq.n	80083ce <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8008346:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800834a:	b29b      	uxth	r3, r3
 800834c:	f1c3 0304 	rsb	r3, r3, #4
 8008350:	b29a      	uxth	r2, r3
 8008352:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008354:	837b      	strh	r3, [r7, #26]
 8008356:	4613      	mov	r3, r2
 8008358:	833b      	strh	r3, [r7, #24]
 800835a:	8b7a      	ldrh	r2, [r7, #26]
 800835c:	8b3b      	ldrh	r3, [r7, #24]
 800835e:	4293      	cmp	r3, r2
 8008360:	bf28      	it	cs
 8008362:	4613      	movcs	r3, r2
 8008364:	b29b      	uxth	r3, r3
 8008366:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 800836a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800836e:	b29b      	uxth	r3, r3
 8008370:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 8008376:	2300      	movs	r3, #0
 8008378:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 800837a:	f107 0314 	add.w	r3, r7, #20
 800837e:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8008380:	e007      	b.n	8008392 <_ff_pull_n+0x162>
 8008382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008384:	1c53      	adds	r3, r2, #1
 8008386:	633b      	str	r3, [r7, #48]	@ 0x30
 8008388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838a:	1c59      	adds	r1, r3, #1
 800838c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800838e:	7812      	ldrb	r2, [r2, #0]
 8008390:	701a      	strb	r2, [r3, #0]
 8008392:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008396:	1e5a      	subs	r2, r3, #1
 8008398:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1f0      	bne.n	8008382 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 80083a6:	e007      	b.n	80083b8 <_ff_pull_n+0x188>
 80083a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083aa:	1c53      	adds	r3, r2, #1
 80083ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80083ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b0:	1c59      	adds	r1, r3, #1
 80083b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80083b4:	7812      	ldrb	r2, [r2, #0]
 80083b6:	701a      	strb	r2, [r3, #0]
 80083b8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80083bc:	1e5a      	subs	r2, r3, #1
 80083be:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1f0      	bne.n	80083a8 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	601a      	str	r2, [r3, #0]
 80083cc:	e002      	b.n	80083d4 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 80083d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d005      	beq.n	80083e6 <_ff_pull_n+0x1b6>
 80083da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80083dc:	461a      	mov	r2, r3
 80083de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80083e0:	68b8      	ldr	r0, [r7, #8]
 80083e2:	f7ff fdd6 	bl	8007f92 <_ff_pull_const_addr>
    break;
 80083e6:	bf00      	nop
  }
}
 80083e8:	bf00      	nop
 80083ea:	3738      	adds	r7, #56	@ 0x38
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	80fb      	strh	r3, [r7, #6]
 80083fa:	460b      	mov	r3, r1
 80083fc:	80bb      	strh	r3, [r7, #4]
 80083fe:	4613      	mov	r3, r2
 8008400:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8008402:	88ba      	ldrh	r2, [r7, #4]
 8008404:	887b      	ldrh	r3, [r7, #2]
 8008406:	4413      	add	r3, r2
 8008408:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800840a:	88ba      	ldrh	r2, [r7, #4]
 800840c:	89fb      	ldrh	r3, [r7, #14]
 800840e:	429a      	cmp	r2, r3
 8008410:	d804      	bhi.n	800841c <advance_index+0x2c>
 8008412:	89fa      	ldrh	r2, [r7, #14]
 8008414:	88fb      	ldrh	r3, [r7, #6]
 8008416:	005b      	lsls	r3, r3, #1
 8008418:	429a      	cmp	r2, r3
 800841a:	db08      	blt.n	800842e <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 800841c:	88fb      	ldrh	r3, [r7, #6]
 800841e:	005b      	lsls	r3, r3, #1
 8008420:	b29b      	uxth	r3, r3
 8008422:	425b      	negs	r3, r3
 8008424:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8008426:	89fa      	ldrh	r2, [r7, #14]
 8008428:	89bb      	ldrh	r3, [r7, #12]
 800842a:	4413      	add	r3, r2
 800842c:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 800842e:	89fb      	ldrh	r3, [r7, #14]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3714      	adds	r7, #20
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08a      	sub	sp, #40	@ 0x28
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	4611      	mov	r1, r2
 8008448:	461a      	mov	r2, r3
 800844a:	460b      	mov	r3, r1
 800844c:	80fb      	strh	r3, [r7, #6]
 800844e:	4613      	mov	r3, r2
 8008450:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	889b      	ldrh	r3, [r3, #4]
 8008456:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008458:	88fb      	ldrh	r3, [r7, #6]
 800845a:	843b      	strh	r3, [r7, #32]
 800845c:	88bb      	ldrh	r3, [r7, #4]
 800845e:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8008460:	8c3a      	ldrh	r2, [r7, #32]
 8008462:	8bfb      	ldrh	r3, [r7, #30]
 8008464:	429a      	cmp	r2, r3
 8008466:	d304      	bcc.n	8008472 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8008468:	8c3a      	ldrh	r2, [r7, #32]
 800846a:	8bfb      	ldrh	r3, [r7, #30]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	b29b      	uxth	r3, r3
 8008470:	e008      	b.n	8008484 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008472:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008474:	005b      	lsls	r3, r3, #1
 8008476:	b29a      	uxth	r2, r3
 8008478:	8c39      	ldrh	r1, [r7, #32]
 800847a:	8bfb      	ldrh	r3, [r7, #30]
 800847c:	1acb      	subs	r3, r1, r3
 800847e:	b29b      	uxth	r3, r3
 8008480:	4413      	add	r3, r2
 8008482:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8008484:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 8008486:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008488:	2b00      	cmp	r3, #0
 800848a:	d101      	bne.n	8008490 <_tu_fifo_peek+0x54>
 800848c:	2300      	movs	r3, #0
 800848e:	e037      	b.n	8008500 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	889b      	ldrh	r3, [r3, #4]
 8008494:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008496:	429a      	cmp	r2, r3
 8008498:	d91b      	bls.n	80084d2 <_tu_fifo_peek+0x96>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	61bb      	str	r3, [r7, #24]
 800849e:	88fb      	ldrh	r3, [r7, #6]
 80084a0:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	889b      	ldrh	r3, [r3, #4]
 80084a6:	8afa      	ldrh	r2, [r7, #22]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d305      	bcc.n	80084b8 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	889b      	ldrh	r3, [r3, #4]
 80084b0:	8afa      	ldrh	r2, [r7, #22]
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	82bb      	strh	r3, [r7, #20]
 80084b6:	e004      	b.n	80084c2 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	889a      	ldrh	r2, [r3, #4]
 80084bc:	8afb      	ldrh	r3, [r7, #22]
 80084be:	4413      	add	r3, r2
 80084c0:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	8aba      	ldrh	r2, [r7, #20]
 80084c6:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 80084c8:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 80084ca:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	889b      	ldrh	r3, [r3, #4]
 80084d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	889b      	ldrh	r3, [r3, #4]
 80084d6:	827b      	strh	r3, [r7, #18]
 80084d8:	88bb      	ldrh	r3, [r7, #4]
 80084da:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80084dc:	e003      	b.n	80084e6 <_tu_fifo_peek+0xaa>
 80084de:	8a3a      	ldrh	r2, [r7, #16]
 80084e0:	8a7b      	ldrh	r3, [r7, #18]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	823b      	strh	r3, [r7, #16]
 80084e6:	8a7a      	ldrh	r2, [r7, #18]
 80084e8:	8a3b      	ldrh	r3, [r7, #16]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d9f7      	bls.n	80084de <_tu_fifo_peek+0xa2>
  return idx;
 80084ee:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80084f0:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 80084f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80084f4:	461a      	mov	r2, r3
 80084f6:	68b9      	ldr	r1, [r7, #8]
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f7ff fe7a 	bl	80081f2 <_ff_pull>

  return true;
 80084fe:	2301      	movs	r3, #1
}
 8008500:	4618      	mov	r0, r3
 8008502:	3728      	adds	r7, #40	@ 0x28
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b08c      	sub	sp, #48	@ 0x30
 800850c:	af02      	add	r7, sp, #8
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	4611      	mov	r1, r2
 8008514:	461a      	mov	r2, r3
 8008516:	460b      	mov	r3, r1
 8008518:	80fb      	strh	r3, [r7, #6]
 800851a:	4613      	mov	r3, r2
 800851c:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	889b      	ldrh	r3, [r3, #4]
 8008522:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008524:	88bb      	ldrh	r3, [r7, #4]
 8008526:	843b      	strh	r3, [r7, #32]
 8008528:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800852a:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 800852c:	8c3a      	ldrh	r2, [r7, #32]
 800852e:	8bfb      	ldrh	r3, [r7, #30]
 8008530:	429a      	cmp	r2, r3
 8008532:	d304      	bcc.n	800853e <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8008534:	8c3a      	ldrh	r2, [r7, #32]
 8008536:	8bfb      	ldrh	r3, [r7, #30]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	b29b      	uxth	r3, r3
 800853c:	e008      	b.n	8008550 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800853e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008540:	005b      	lsls	r3, r3, #1
 8008542:	b29a      	uxth	r2, r3
 8008544:	8c39      	ldrh	r1, [r7, #32]
 8008546:	8bfb      	ldrh	r3, [r7, #30]
 8008548:	1acb      	subs	r3, r1, r3
 800854a:	b29b      	uxth	r3, r3
 800854c:	4413      	add	r3, r2
 800854e:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8008550:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 8008552:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008554:	2b00      	cmp	r3, #0
 8008556:	d101      	bne.n	800855c <_tu_fifo_peek_n+0x54>
 8008558:	2300      	movs	r3, #0
 800855a:	e041      	b.n	80085e0 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	889b      	ldrh	r3, [r3, #4]
 8008560:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008562:	429a      	cmp	r2, r3
 8008564:	d91b      	bls.n	800859e <_tu_fifo_peek_n+0x96>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	61bb      	str	r3, [r7, #24]
 800856a:	88bb      	ldrh	r3, [r7, #4]
 800856c:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	889b      	ldrh	r3, [r3, #4]
 8008572:	8afa      	ldrh	r2, [r7, #22]
 8008574:	429a      	cmp	r2, r3
 8008576:	d305      	bcc.n	8008584 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	889b      	ldrh	r3, [r3, #4]
 800857c:	8afa      	ldrh	r2, [r7, #22]
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	82bb      	strh	r3, [r7, #20]
 8008582:	e004      	b.n	800858e <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	889a      	ldrh	r2, [r3, #4]
 8008588:	8afb      	ldrh	r3, [r7, #22]
 800858a:	4413      	add	r3, r2
 800858c:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	8aba      	ldrh	r2, [r7, #20]
 8008592:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8008594:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8008596:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	889b      	ldrh	r3, [r3, #4]
 800859c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 800859e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80085a0:	88fb      	ldrh	r3, [r7, #6]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d201      	bcs.n	80085aa <_tu_fifo_peek_n+0xa2>
 80085a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80085a8:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	889b      	ldrh	r3, [r3, #4]
 80085ae:	827b      	strh	r3, [r7, #18]
 80085b0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80085b2:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80085b4:	e003      	b.n	80085be <_tu_fifo_peek_n+0xb6>
 80085b6:	8a3a      	ldrh	r2, [r7, #16]
 80085b8:	8a7b      	ldrh	r3, [r7, #18]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	823b      	strh	r3, [r7, #16]
 80085be:	8a7a      	ldrh	r2, [r7, #18]
 80085c0:	8a3b      	ldrh	r3, [r7, #16]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d9f7      	bls.n	80085b6 <_tu_fifo_peek_n+0xae>
  return idx;
 80085c6:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80085c8:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 80085ca:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80085cc:	88fa      	ldrh	r2, [r7, #6]
 80085ce:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	460b      	mov	r3, r1
 80085d6:	68b9      	ldr	r1, [r7, #8]
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f7ff fe29 	bl	8008230 <_ff_pull_n>

  return n;
 80085de:	88fb      	ldrh	r3, [r7, #6]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3728      	adds	r7, #40	@ 0x28
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b092      	sub	sp, #72	@ 0x48
 80085ec:	af02      	add	r7, sp, #8
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	4611      	mov	r1, r2
 80085f4:	461a      	mov	r2, r3
 80085f6:	460b      	mov	r3, r1
 80085f8:	80fb      	strh	r3, [r7, #6]
 80085fa:	4613      	mov	r3, r2
 80085fc:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 80085fe:	88fb      	ldrh	r3, [r7, #6]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d101      	bne.n	8008608 <_tu_fifo_write_n+0x20>
 8008604:	2300      	movs	r3, #0
 8008606:	e0bc      	b.n	8008782 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	891b      	ldrh	r3, [r3, #8]
 800860c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	895b      	ldrh	r3, [r3, #10]
 8008612:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	79db      	ldrb	r3, [r3, #7]
 800861c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008620:	b2db      	uxtb	r3, r3
 8008622:	f083 0301 	eor.w	r3, r3, #1
 8008626:	b2db      	uxtb	r3, r3
 8008628:	2b00      	cmp	r3, #0
 800862a:	d036      	beq.n	800869a <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	889b      	ldrh	r3, [r3, #4]
 8008630:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008632:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008634:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008636:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008638:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800863a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800863c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800863e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008640:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008642:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008644:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 8008646:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008648:	8c3b      	ldrh	r3, [r7, #32]
 800864a:	429a      	cmp	r2, r3
 800864c:	d304      	bcc.n	8008658 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 800864e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008650:	8c3b      	ldrh	r3, [r7, #32]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	b29b      	uxth	r3, r3
 8008656:	e008      	b.n	800866a <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008658:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800865a:	005b      	lsls	r3, r3, #1
 800865c:	b29a      	uxth	r2, r3
 800865e:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8008660:	8c3b      	ldrh	r3, [r7, #32]
 8008662:	1acb      	subs	r3, r1, r3
 8008664:	b29b      	uxth	r3, r3
 8008666:	4413      	add	r3, r2
 8008668:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 800866a:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 800866c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800866e:	8bfb      	ldrh	r3, [r7, #30]
 8008670:	429a      	cmp	r2, r3
 8008672:	d904      	bls.n	800867e <_tu_fifo_write_n+0x96>
 8008674:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8008676:	8bfb      	ldrh	r3, [r7, #30]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	b29b      	uxth	r3, r3
 800867c:	e000      	b.n	8008680 <_tu_fifo_write_n+0x98>
 800867e:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8008680:	867b      	strh	r3, [r7, #50]	@ 0x32
 8008682:	88fb      	ldrh	r3, [r7, #6]
 8008684:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008686:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008688:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800868a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800868c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800868e:	4293      	cmp	r3, r2
 8008690:	bf28      	it	cs
 8008692:	4613      	movcs	r3, r2
 8008694:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 8008696:	80fb      	strh	r3, [r7, #6]
 8008698:	e04b      	b.n	8008732 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	889b      	ldrh	r3, [r3, #4]
 800869e:	88fa      	ldrh	r2, [r7, #6]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d317      	bcc.n	80086d4 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 80086a4:	797b      	ldrb	r3, [r7, #5]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10e      	bne.n	80086c8 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 80086aa:	88fb      	ldrh	r3, [r7, #6]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	8892      	ldrh	r2, [r2, #4]
 80086b0:	1a9b      	subs	r3, r3, r2
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	88d2      	ldrh	r2, [r2, #6]
 80086b6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80086ba:	b292      	uxth	r2, r2
 80086bc:	fb02 f303 	mul.w	r3, r2, r3
 80086c0:	461a      	mov	r2, r3
 80086c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c4:	4413      	add	r3, r2
 80086c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	889b      	ldrh	r3, [r3, #4]
 80086cc:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 80086ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086d0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80086d2:	e02e      	b.n	8008732 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	889b      	ldrh	r3, [r3, #4]
 80086d8:	83bb      	strh	r3, [r7, #28]
 80086da:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80086dc:	837b      	strh	r3, [r7, #26]
 80086de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086e0:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 80086e2:	8b7a      	ldrh	r2, [r7, #26]
 80086e4:	8b3b      	ldrh	r3, [r7, #24]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d304      	bcc.n	80086f4 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 80086ea:	8b7a      	ldrh	r2, [r7, #26]
 80086ec:	8b3b      	ldrh	r3, [r7, #24]
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	e008      	b.n	8008706 <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80086f4:	8bbb      	ldrh	r3, [r7, #28]
 80086f6:	005b      	lsls	r3, r3, #1
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	8b79      	ldrh	r1, [r7, #26]
 80086fc:	8b3b      	ldrh	r3, [r7, #24]
 80086fe:	1acb      	subs	r3, r1, r3
 8008700:	b29b      	uxth	r3, r3
 8008702:	4413      	add	r3, r2
 8008704:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8008706:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 8008708:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800870a:	88fb      	ldrh	r3, [r7, #6]
 800870c:	441a      	add	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	889b      	ldrh	r3, [r3, #4]
 8008712:	005b      	lsls	r3, r3, #1
 8008714:	429a      	cmp	r2, r3
 8008716:	db0c      	blt.n	8008732 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	8898      	ldrh	r0, [r3, #4]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	889a      	ldrh	r2, [r3, #4]
 8008720:	88fb      	ldrh	r3, [r7, #6]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	b29a      	uxth	r2, r3
 8008726:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008728:	4619      	mov	r1, r3
 800872a:	f7ff fe61 	bl	80083f0 <advance_index>
 800872e:	4603      	mov	r3, r0
 8008730:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 8008732:	88fb      	ldrh	r3, [r7, #6]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d023      	beq.n	8008780 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	889b      	ldrh	r3, [r3, #4]
 800873c:	82fb      	strh	r3, [r7, #22]
 800873e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008740:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8008742:	e003      	b.n	800874c <_tu_fifo_write_n+0x164>
 8008744:	8aba      	ldrh	r2, [r7, #20]
 8008746:	8afb      	ldrh	r3, [r7, #22]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	82bb      	strh	r3, [r7, #20]
 800874c:	8afa      	ldrh	r2, [r7, #22]
 800874e:	8abb      	ldrh	r3, [r7, #20]
 8008750:	429a      	cmp	r2, r3
 8008752:	d9f7      	bls.n	8008744 <_tu_fifo_write_n+0x15c>
  return idx;
 8008754:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8008756:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8008758:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 800875a:	88fa      	ldrh	r2, [r7, #6]
 800875c:	797b      	ldrb	r3, [r7, #5]
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	460b      	mov	r3, r1
 8008762:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f7ff fc66 	bl	8008036 <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	889b      	ldrh	r3, [r3, #4]
 800876e:	88fa      	ldrh	r2, [r7, #6]
 8008770:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8008772:	4618      	mov	r0, r3
 8008774:	f7ff fe3c 	bl	80083f0 <advance_index>
 8008778:	4603      	mov	r3, r0
 800877a:	461a      	mov	r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8008780:	88fb      	ldrh	r3, [r7, #6]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3740      	adds	r7, #64	@ 0x40
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b086      	sub	sp, #24
 800878e:	af02      	add	r7, sp, #8
 8008790:	60f8      	str	r0, [r7, #12]
 8008792:	60b9      	str	r1, [r7, #8]
 8008794:	4611      	mov	r1, r2
 8008796:	461a      	mov	r2, r3
 8008798:	460b      	mov	r3, r1
 800879a:	80fb      	strh	r3, [r7, #6]
 800879c:	4613      	mov	r3, r2
 800879e:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	891b      	ldrh	r3, [r3, #8]
 80087a4:	b298      	uxth	r0, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	895b      	ldrh	r3, [r3, #10]
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	88f9      	ldrh	r1, [r7, #6]
 80087ae:	797a      	ldrb	r2, [r7, #5]
 80087b0:	9201      	str	r2, [sp, #4]
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	4603      	mov	r3, r0
 80087b6:	460a      	mov	r2, r1
 80087b8:	68b9      	ldr	r1, [r7, #8]
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f7ff fea4 	bl	8008508 <_tu_fifo_peek_n>
 80087c0:	4603      	mov	r3, r0
 80087c2:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	8898      	ldrh	r0, [r3, #4]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	895b      	ldrh	r3, [r3, #10]
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	88fa      	ldrh	r2, [r7, #6]
 80087d0:	4619      	mov	r1, r3
 80087d2:	f7ff fe0d 	bl	80083f0 <advance_index>
 80087d6:	4603      	mov	r3, r0
 80087d8:	461a      	mov	r2, r3
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 80087de:	88fb      	ldrh	r3, [r7, #6]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b087      	sub	sp, #28
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	8899      	ldrh	r1, [r3, #4]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	891b      	ldrh	r3, [r3, #8]
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	895b      	ldrh	r3, [r3, #10]
 80087fe:	b29b      	uxth	r3, r3
 8008800:	8279      	strh	r1, [r7, #18]
 8008802:	823a      	strh	r2, [r7, #16]
 8008804:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 8008806:	8a3a      	ldrh	r2, [r7, #16]
 8008808:	89fb      	ldrh	r3, [r7, #14]
 800880a:	429a      	cmp	r2, r3
 800880c:	d304      	bcc.n	8008818 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 800880e:	8a3a      	ldrh	r2, [r7, #16]
 8008810:	89fb      	ldrh	r3, [r7, #14]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	b29b      	uxth	r3, r3
 8008816:	e008      	b.n	800882a <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8008818:	8a7b      	ldrh	r3, [r7, #18]
 800881a:	005b      	lsls	r3, r3, #1
 800881c:	b29a      	uxth	r2, r3
 800881e:	8a39      	ldrh	r1, [r7, #16]
 8008820:	89fb      	ldrh	r3, [r7, #14]
 8008822:	1acb      	subs	r3, r1, r3
 8008824:	b29b      	uxth	r3, r3
 8008826:	4413      	add	r3, r2
 8008828:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	8892      	ldrh	r2, [r2, #4]
 800882e:	82fb      	strh	r3, [r7, #22]
 8008830:	4613      	mov	r3, r2
 8008832:	82bb      	strh	r3, [r7, #20]
 8008834:	8afa      	ldrh	r2, [r7, #22]
 8008836:	8abb      	ldrh	r3, [r7, #20]
 8008838:	4293      	cmp	r3, r2
 800883a:	bf28      	it	cs
 800883c:	4613      	movcs	r3, r2
 800883e:	b29b      	uxth	r3, r3
}
 8008840:	4618      	mov	r0, r3
 8008842:	371c      	adds	r7, #28
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	891b      	ldrh	r3, [r3, #8]
 8008858:	b29a      	uxth	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	895b      	ldrh	r3, [r3, #10]
 800885e:	b29b      	uxth	r3, r3
 8008860:	429a      	cmp	r2, r3
 8008862:	bf0c      	ite	eq
 8008864:	2301      	moveq	r3, #1
 8008866:	2300      	movne	r3, #0
 8008868:	b2db      	uxtb	r3, r3
}
 800886a:	4618      	mov	r0, r3
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8008876:	b480      	push	{r7}
 8008878:	b085      	sub	sp, #20
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	8899      	ldrh	r1, [r3, #4]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	891b      	ldrh	r3, [r3, #8]
 8008886:	b29a      	uxth	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	895b      	ldrh	r3, [r3, #10]
 800888c:	b29b      	uxth	r3, r3
 800888e:	81f9      	strh	r1, [r7, #14]
 8008890:	81ba      	strh	r2, [r7, #12]
 8008892:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8008894:	89ba      	ldrh	r2, [r7, #12]
 8008896:	897b      	ldrh	r3, [r7, #10]
 8008898:	429a      	cmp	r2, r3
 800889a:	d304      	bcc.n	80088a6 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 800889c:	89ba      	ldrh	r2, [r7, #12]
 800889e:	897b      	ldrh	r3, [r7, #10]
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	e008      	b.n	80088b8 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80088a6:	89fb      	ldrh	r3, [r7, #14]
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	89b9      	ldrh	r1, [r7, #12]
 80088ae:	897b      	ldrh	r3, [r7, #10]
 80088b0:	1acb      	subs	r3, r1, r3
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	4413      	add	r3, r2
 80088b6:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	8892      	ldrh	r2, [r2, #4]
 80088bc:	4293      	cmp	r3, r2
 80088be:	bf2c      	ite	cs
 80088c0:	2301      	movcs	r3, #1
 80088c2:	2300      	movcc	r3, #0
 80088c4:	b2db      	uxtb	r3, r3
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3714      	adds	r7, #20
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b087      	sub	sp, #28
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	8899      	ldrh	r1, [r3, #4]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	891b      	ldrh	r3, [r3, #8]
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	895b      	ldrh	r3, [r3, #10]
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	82f9      	strh	r1, [r7, #22]
 80088ec:	82ba      	strh	r2, [r7, #20]
 80088ee:	827b      	strh	r3, [r7, #18]
 80088f0:	8afb      	ldrh	r3, [r7, #22]
 80088f2:	823b      	strh	r3, [r7, #16]
 80088f4:	8abb      	ldrh	r3, [r7, #20]
 80088f6:	81fb      	strh	r3, [r7, #14]
 80088f8:	8a7b      	ldrh	r3, [r7, #18]
 80088fa:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 80088fc:	89fa      	ldrh	r2, [r7, #14]
 80088fe:	89bb      	ldrh	r3, [r7, #12]
 8008900:	429a      	cmp	r2, r3
 8008902:	d304      	bcc.n	800890e <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8008904:	89fa      	ldrh	r2, [r7, #14]
 8008906:	89bb      	ldrh	r3, [r7, #12]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	b29b      	uxth	r3, r3
 800890c:	e008      	b.n	8008920 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800890e:	8a3b      	ldrh	r3, [r7, #16]
 8008910:	005b      	lsls	r3, r3, #1
 8008912:	b29a      	uxth	r2, r3
 8008914:	89f9      	ldrh	r1, [r7, #14]
 8008916:	89bb      	ldrh	r3, [r7, #12]
 8008918:	1acb      	subs	r3, r1, r3
 800891a:	b29b      	uxth	r3, r3
 800891c:	4413      	add	r3, r2
 800891e:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8008920:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8008922:	8afa      	ldrh	r2, [r7, #22]
 8008924:	897b      	ldrh	r3, [r7, #10]
 8008926:	429a      	cmp	r2, r3
 8008928:	d904      	bls.n	8008934 <tu_fifo_remaining+0x62>
 800892a:	8afa      	ldrh	r2, [r7, #22]
 800892c:	897b      	ldrh	r3, [r7, #10]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	b29b      	uxth	r3, r3
 8008932:	e000      	b.n	8008936 <tu_fifo_remaining+0x64>
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	371c      	adds	r7, #28
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
 800894a:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	891b      	ldrh	r3, [r3, #8]
 8008950:	b29a      	uxth	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	895b      	ldrh	r3, [r3, #10]
 8008956:	b29b      	uxth	r3, r3
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7ff fd6e 	bl	800843c <_tu_fifo_peek>
 8008960:	4603      	mov	r3, r0
 8008962:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	8898      	ldrh	r0, [r3, #4]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	895b      	ldrh	r3, [r3, #10]
 800896c:	b29b      	uxth	r3, r3
 800896e:	7bfa      	ldrb	r2, [r7, #15]
 8008970:	b292      	uxth	r2, r2
 8008972:	4619      	mov	r1, r3
 8008974:	f7ff fd3c 	bl	80083f0 <advance_index>
 8008978:	4603      	mov	r3, r0
 800897a:	461a      	mov	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8008980:	7bfb      	ldrb	r3, [r7, #15]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b084      	sub	sp, #16
 800898e:	af00      	add	r7, sp, #0
 8008990:	60f8      	str	r0, [r7, #12]
 8008992:	60b9      	str	r1, [r7, #8]
 8008994:	4613      	mov	r3, r2
 8008996:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8008998:	88fa      	ldrh	r2, [r7, #6]
 800899a:	2300      	movs	r3, #0
 800899c:	68b9      	ldr	r1, [r7, #8]
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f7ff fef3 	bl	800878a <_tu_fifo_read_n>
 80089a4:	4603      	mov	r3, r0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b084      	sub	sp, #16
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	60f8      	str	r0, [r7, #12]
 80089b6:	60b9      	str	r1, [r7, #8]
 80089b8:	4613      	mov	r3, r2
 80089ba:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 80089bc:	88fa      	ldrh	r2, [r7, #6]
 80089be:	2301      	movs	r3, #1
 80089c0:	68b9      	ldr	r1, [r7, #8]
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f7ff fee1 	bl	800878a <_tu_fifo_read_n>
 80089c8:	4603      	mov	r3, r0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b086      	sub	sp, #24
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	891b      	ldrh	r3, [r3, #8]
 80089e0:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7ff ff47 	bl	8008876 <tu_fifo_full>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00c      	beq.n	8008a08 <tu_fifo_write+0x36>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	79db      	ldrb	r3, [r3, #7]
 80089f2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	f083 0301 	eor.w	r3, r3, #1
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d002      	beq.n	8008a08 <tu_fifo_write+0x36>
  {
    ret = false;
 8008a02:	2300      	movs	r3, #0
 8008a04:	75fb      	strb	r3, [r7, #23]
 8008a06:	e022      	b.n	8008a4e <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	889b      	ldrh	r3, [r3, #4]
 8008a0c:	823b      	strh	r3, [r7, #16]
 8008a0e:	8abb      	ldrh	r3, [r7, #20]
 8008a10:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8008a12:	e003      	b.n	8008a1c <tu_fifo_write+0x4a>
 8008a14:	89fa      	ldrh	r2, [r7, #14]
 8008a16:	8a3b      	ldrh	r3, [r7, #16]
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	81fb      	strh	r3, [r7, #14]
 8008a1c:	8a3a      	ldrh	r2, [r7, #16]
 8008a1e:	89fb      	ldrh	r3, [r7, #14]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d9f7      	bls.n	8008a14 <tu_fifo_write+0x42>
  return idx;
 8008a24:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8008a26:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8008a28:	8a7b      	ldrh	r3, [r7, #18]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7ff fae2 	bl	8007ff8 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	889b      	ldrh	r3, [r3, #4]
 8008a38:	8ab9      	ldrh	r1, [r7, #20]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7ff fcd7 	bl	80083f0 <advance_index>
 8008a42:	4603      	mov	r3, r0
 8008a44:	461a      	mov	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	811a      	strh	r2, [r3, #8]

    ret = true;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8008a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3718      	adds	r7, #24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	4613      	mov	r3, r2
 8008a64:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8008a66:	88fa      	ldrh	r2, [r7, #6]
 8008a68:	2300      	movs	r3, #0
 8008a6a:	68b9      	ldr	r1, [r7, #8]
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f7ff fdbb 	bl	80085e8 <_tu_fifo_write_n>
 8008a72:	4603      	mov	r3, r0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	4613      	mov	r3, r2
 8008a88:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8008a8a:	88fa      	ldrh	r2, [r7, #6]
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	68b9      	ldr	r1, [r7, #8]
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f7ff fda9 	bl	80085e8 <_tu_fifo_write_n>
 8008a96:	4603      	mov	r3, r0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8008ab4:	2301      	movs	r3, #1
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	370c      	adds	r7, #12
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <tu_fifo_set_overwritable>:
                Pointer to the FIFO buffer to manipulate
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable) {
 8008ac2:	b480      	push	{r7}
 8008ac4:	b083      	sub	sp, #12
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	460b      	mov	r3, r1
 8008acc:	70fb      	strb	r3, [r7, #3]
  if (f->overwritable == overwritable) {
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	79db      	ldrb	r3, [r3, #7]
 8008ad2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	78fa      	ldrb	r2, [r7, #3]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d101      	bne.n	8008ae2 <tu_fifo_set_overwritable+0x20>
    return true;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e006      	b.n	8008af0 <tu_fifo_set_overwritable+0x2e>
  }

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	79d3      	ldrb	r3, [r2, #7]
 8008ae6:	78f9      	ldrb	r1, [r7, #3]
 8008ae8:	f361 13c7 	bfi	r3, r1, #7, #1
 8008aec:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8008aee:	2301      	movs	r3, #1
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	4603      	mov	r3, r0
 8008b04:	6039      	str	r1, [r7, #0]
 8008b06:	71fb      	strb	r3, [r7, #7]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 8008b0c:	bf00      	nop
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <tud_descriptor_bos_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
 8008b2c:	b480      	push	{r7}
 8008b2e:	af00      	add	r7, sp, #0
  return NULL;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8008b3c:	b480      	push	{r7}
 8008b3e:	af00      	add	r7, sp, #0
  return NULL;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	4603      	mov	r3, r0
 8008b54:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <tud_mount_cb>:

TU_ATTR_WEAK void tud_mount_cb(void) {
 8008b64:	b480      	push	{r7}
 8008b66:	af00      	add	r7, sp, #0
}
 8008b68:	bf00      	nop
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <tud_umount_cb>:

TU_ATTR_WEAK void tud_umount_cb(void) {
 8008b72:	b480      	push	{r7}
 8008b74:	af00      	add	r7, sp, #0
}
 8008b76:	bf00      	nop
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <tud_suspend_cb>:

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	4603      	mov	r3, r0
 8008b88:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 8008b8a:	bf00      	nop
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr

08008b96 <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 8008b96:	b480      	push	{r7}
 8008b98:	af00      	add	r7, sp, #0
}
 8008b9a:	bf00      	nop
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <tud_vendor_control_xfer_cb>:

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	4603      	mov	r3, r0
 8008bac:	603a      	str	r2, [r7, #0]
 8008bae:	71fb      	strb	r3, [r7, #7]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) stage; (void) request;
  return false;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 8008bc2:	b480      	push	{r7}
 8008bc4:	b083      	sub	sp, #12
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8008bcc:	2301      	movs	r3, #1
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
	...

08008bdc <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8008bdc:	b480      	push	{r7}
 8008bde:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8008be0:	4b06      	ldr	r3, [pc, #24]	@ (8008bfc <tud_mounted+0x20>)
 8008be2:	785b      	ldrb	r3, [r3, #1]
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	bf14      	ite	ne
 8008bea:	2301      	movne	r3, #1
 8008bec:	2300      	moveq	r3, #0
 8008bee:	b2db      	uxtb	r3, r3
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	2000170c 	.word	0x2000170c

08008c00 <tud_suspended>:

bool tud_suspended(void) {
 8008c00:	b480      	push	{r7}
 8008c02:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8008c04:	4b07      	ldr	r3, [pc, #28]	@ (8008c24 <tud_suspended+0x24>)
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	bf14      	ite	ne
 8008c12:	2301      	movne	r3, #1
 8008c14:	2300      	moveq	r3, #0
 8008c16:	b2db      	uxtb	r3, r3
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	2000170c 	.word	0x2000170c

08008c28 <tud_remote_wakeup>:

bool tud_remote_wakeup(void) {
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en);
 8008c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8008c6c <tud_remote_wakeup+0x44>)
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00d      	beq.n	8008c56 <tud_remote_wakeup+0x2e>
 8008c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8008c6c <tud_remote_wakeup+0x44>)
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	f003 0310 	and.w	r3, r3, #16
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d006      	beq.n	8008c56 <tud_remote_wakeup+0x2e>
 8008c48:	4b08      	ldr	r3, [pc, #32]	@ (8008c6c <tud_remote_wakeup+0x44>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	f003 0308 	and.w	r3, r3, #8
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <tud_remote_wakeup+0x32>
 8008c56:	2300      	movs	r3, #0
 8008c58:	e005      	b.n	8008c66 <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 8008c5a:	4b05      	ldr	r3, [pc, #20]	@ (8008c70 <tud_remote_wakeup+0x48>)
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f002 fba4 	bl	800b3ac <dcd_remote_wakeup>
  return true;
 8008c64:	2301      	movs	r3, #1
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	2000170c 	.word	0x2000170c
 8008c70:	2000022d 	.word	0x2000022d

08008c74 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8008c74:	b480      	push	{r7}
 8008c76:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8008c78:	4b05      	ldr	r3, [pc, #20]	@ (8008c90 <tud_inited+0x1c>)
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	2bff      	cmp	r3, #255	@ 0xff
 8008c7e:	bf14      	ite	ne
 8008c80:	2301      	movne	r3, #1
 8008c82:	2300      	moveq	r3, #0
 8008c84:	b2db      	uxtb	r3, r3
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr
 8008c90:	2000022d 	.word	0x2000022d

08008c94 <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b08c      	sub	sp, #48	@ 0x30
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	6039      	str	r1, [r7, #0]
 8008c9e:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 8008ca0:	f7ff ffe8 	bl	8008c74 <tud_inited>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 8008caa:	2301      	movs	r3, #1
 8008cac:	e09e      	b.n	8008dec <tud_rhport_init+0x158>
  }
  TU_ASSERT(rh_init);
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10a      	bne.n	8008cca <tud_rhport_init+0x36>
 8008cb4:	4b4f      	ldr	r3, [pc, #316]	@ (8008df4 <tud_rhport_init+0x160>)
 8008cb6:	61bb      	str	r3, [r7, #24]
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0301 	and.w	r3, r3, #1
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d000      	beq.n	8008cc6 <tud_rhport_init+0x32>
 8008cc4:	be00      	bkpt	0x0000
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	e090      	b.n	8008dec <tud_rhport_init+0x158>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8008cca:	222c      	movs	r2, #44	@ 0x2c
 8008ccc:	2100      	movs	r1, #0
 8008cce:	484a      	ldr	r0, [pc, #296]	@ (8008df8 <tud_rhport_init+0x164>)
 8008cd0:	f004 f8f7 	bl	800cec2 <memset>
  _usbd_queued_setup = 0;
 8008cd4:	4b49      	ldr	r3, [pc, #292]	@ (8008dfc <tud_rhport_init+0x168>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	701a      	strb	r2, [r3, #0]
 8008cda:	4b49      	ldr	r3, [pc, #292]	@ (8008e00 <tud_rhport_init+0x16c>)
 8008cdc:	613b      	str	r3, [r7, #16]
#define OSAL_SPINLOCK_DEF(_name, _int_set) \
  osal_spinlock_t _name = { .interrupt_set = _int_set }

TU_ATTR_ALWAYS_INLINE static inline void osal_spin_init(osal_spinlock_t *ctx) {
  (void) ctx;
}
 8008cde:	bf00      	nop
 8008ce0:	4b48      	ldr	r3, [pc, #288]	@ (8008e04 <tud_rhport_init+0x170>)
 8008ce2:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7ff fed9 	bl	8008aa0 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8008cee:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8008cf0:	4a45      	ldr	r2, [pc, #276]	@ (8008e08 <tud_rhport_init+0x174>)
 8008cf2:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8008cf4:	4b44      	ldr	r3, [pc, #272]	@ (8008e08 <tud_rhport_init+0x174>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10a      	bne.n	8008d12 <tud_rhport_init+0x7e>
 8008cfc:	4b3d      	ldr	r3, [pc, #244]	@ (8008df4 <tud_rhport_init+0x160>)
 8008cfe:	61fb      	str	r3, [r7, #28]
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 0301 	and.w	r3, r3, #1
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d000      	beq.n	8008d0e <tud_rhport_init+0x7a>
 8008d0c:	be00      	bkpt	0x0000
 8008d0e:	2300      	movs	r3, #0
 8008d10:	e06c      	b.n	8008dec <tud_rhport_init+0x158>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8008d12:	4b3e      	ldr	r3, [pc, #248]	@ (8008e0c <tud_rhport_init+0x178>)
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d005      	beq.n	8008d24 <tud_rhport_init+0x90>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8008d18:	483d      	ldr	r0, [pc, #244]	@ (8008e10 <tud_rhport_init+0x17c>)
 8008d1a:	f3af 8000 	nop.w
 8008d1e:	4603      	mov	r3, r0
 8008d20:	4a3c      	ldr	r2, [pc, #240]	@ (8008e14 <tud_rhport_init+0x180>)
 8008d22:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008d24:	2300      	movs	r3, #0
 8008d26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008d2a:	e03a      	b.n	8008da2 <tud_rhport_init+0x10e>
 8008d2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008d30:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8008d32:	2300      	movs	r3, #0
 8008d34:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8008d36:	4b36      	ldr	r3, [pc, #216]	@ (8008e10 <tud_rhport_init+0x17c>)
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	7bfa      	ldrb	r2, [r7, #15]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d206      	bcs.n	8008d4e <tud_rhport_init+0xba>
    driver = &_app_driver[drvid];
 8008d40:	4b34      	ldr	r3, [pc, #208]	@ (8008e14 <tud_rhport_init+0x180>)
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
 8008d46:	015b      	lsls	r3, r3, #5
 8008d48:	4413      	add	r3, r2
 8008d4a:	60bb      	str	r3, [r7, #8]
 8008d4c:	e00d      	b.n	8008d6a <tud_rhport_init+0xd6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008d4e:	4b30      	ldr	r3, [pc, #192]	@ (8008e10 <tud_rhport_init+0x17c>)
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	1c5a      	adds	r2, r3, #1
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	db07      	blt.n	8008d6a <tud_rhport_init+0xd6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008d5a:	7bfb      	ldrb	r3, [r7, #15]
 8008d5c:	4a2c      	ldr	r2, [pc, #176]	@ (8008e10 <tud_rhport_init+0x17c>)
 8008d5e:	7812      	ldrb	r2, [r2, #0]
 8008d60:	1a9b      	subs	r3, r3, r2
 8008d62:	015b      	lsls	r3, r3, #5
 8008d64:	4a2c      	ldr	r2, [pc, #176]	@ (8008e18 <tud_rhport_init+0x184>)
 8008d66:	4413      	add	r3, r2
 8008d68:	60bb      	str	r3, [r7, #8]
  return driver;
 8008d6a:	68bb      	ldr	r3, [r7, #8]
    usbd_class_driver_t const* driver = get_driver(i);
 8008d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 8008d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d003      	beq.n	8008d7c <tud_rhport_init+0xe8>
 8008d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10a      	bne.n	8008d92 <tud_rhport_init+0xfe>
 8008d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8008df4 <tud_rhport_init+0x160>)
 8008d7e:	623b      	str	r3, [r7, #32]
 8008d80:	6a3b      	ldr	r3, [r7, #32]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0301 	and.w	r3, r3, #1
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d000      	beq.n	8008d8e <tud_rhport_init+0xfa>
 8008d8c:	be00      	bkpt	0x0000
 8008d8e:	2300      	movs	r3, #0
 8008d90:	e02c      	b.n	8008dec <tud_rhport_init+0x158>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 8008d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008d98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008da2:	4b1b      	ldr	r3, [pc, #108]	@ (8008e10 <tud_rhport_init+0x17c>)
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008dac:	429a      	cmp	r2, r3
 8008dae:	dabd      	bge.n	8008d2c <tud_rhport_init+0x98>
  }

  _usbd_rhport = rhport;
 8008db0:	4a1a      	ldr	r2, [pc, #104]	@ (8008e1c <tud_rhport_init+0x188>)
 8008db2:	79fb      	ldrb	r3, [r7, #7]
 8008db4:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 8008db6:	79fb      	ldrb	r3, [r7, #7]
 8008db8:	6839      	ldr	r1, [r7, #0]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f002 f9cc 	bl	800b158 <dcd_init>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	f083 0301 	eor.w	r3, r3, #1
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00a      	beq.n	8008de2 <tud_rhport_init+0x14e>
 8008dcc:	4b09      	ldr	r3, [pc, #36]	@ (8008df4 <tud_rhport_init+0x160>)
 8008dce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 0301 	and.w	r3, r3, #1
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d000      	beq.n	8008dde <tud_rhport_init+0x14a>
 8008ddc:	be00      	bkpt	0x0000
 8008dde:	2300      	movs	r3, #0
 8008de0:	e004      	b.n	8008dec <tud_rhport_init+0x158>
  dcd_int_enable(rhport);
 8008de2:	79fb      	ldrb	r3, [r7, #7]
 8008de4:	4618      	mov	r0, r3
 8008de6:	f002 fa55 	bl	800b294 <dcd_int_enable>

  return true;
 8008dea:	2301      	movs	r3, #1
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3730      	adds	r7, #48	@ 0x30
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	e000edf0 	.word	0xe000edf0
 8008df8:	2000170c 	.word	0x2000170c
 8008dfc:	20001738 	.word	0x20001738
 8008e00:	20000230 	.word	0x20000230
 8008e04:	20000234 	.word	0x20000234
 8008e08:	20001804 	.word	0x20001804
 8008e0c:	00000000 	.word	0x00000000
 8008e10:	20001740 	.word	0x20001740
 8008e14:	2000173c 	.word	0x2000173c
 8008e18:	0800f1fc 	.word	0x0800f1fc
 8008e1c:	2000022d 	.word	0x2000022d

08008e20 <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b088      	sub	sp, #32
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	4603      	mov	r3, r0
 8008e28:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	77fb      	strb	r3, [r7, #31]
 8008e2e:	e034      	b.n	8008e9a <configuration_reset+0x7a>
 8008e30:	7ffb      	ldrb	r3, [r7, #31]
 8008e32:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8008e34:	2300      	movs	r3, #0
 8008e36:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8008e38:	4b25      	ldr	r3, [pc, #148]	@ (8008ed0 <configuration_reset+0xb0>)
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	7cfa      	ldrb	r2, [r7, #19]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d206      	bcs.n	8008e50 <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 8008e42:	4b24      	ldr	r3, [pc, #144]	@ (8008ed4 <configuration_reset+0xb4>)
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	7cfb      	ldrb	r3, [r7, #19]
 8008e48:	015b      	lsls	r3, r3, #5
 8008e4a:	4413      	add	r3, r2
 8008e4c:	60fb      	str	r3, [r7, #12]
 8008e4e:	e00d      	b.n	8008e6c <configuration_reset+0x4c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8008e50:	4b1f      	ldr	r3, [pc, #124]	@ (8008ed0 <configuration_reset+0xb0>)
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	1c5a      	adds	r2, r3, #1
 8008e56:	7cfb      	ldrb	r3, [r7, #19]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	db07      	blt.n	8008e6c <configuration_reset+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8008e5c:	7cfb      	ldrb	r3, [r7, #19]
 8008e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8008ed0 <configuration_reset+0xb0>)
 8008e60:	7812      	ldrb	r2, [r2, #0]
 8008e62:	1a9b      	subs	r3, r3, r2
 8008e64:	015b      	lsls	r3, r3, #5
 8008e66:	4a1c      	ldr	r2, [pc, #112]	@ (8008ed8 <configuration_reset+0xb8>)
 8008e68:	4413      	add	r3, r2
 8008e6a:	60fb      	str	r3, [r7, #12]
  return driver;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8008e6e:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d109      	bne.n	8008e8a <configuration_reset+0x6a>
 8008e76:	4b19      	ldr	r3, [pc, #100]	@ (8008edc <configuration_reset+0xbc>)
 8008e78:	617b      	str	r3, [r7, #20]
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d01f      	beq.n	8008ec6 <configuration_reset+0xa6>
 8008e86:	be00      	bkpt	0x0000
 8008e88:	e01d      	b.n	8008ec6 <configuration_reset+0xa6>
    driver->reset(rhport);
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	79fa      	ldrb	r2, [r7, #7]
 8008e90:	4610      	mov	r0, r2
 8008e92:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8008e94:	7ffb      	ldrb	r3, [r7, #31]
 8008e96:	3301      	adds	r3, #1
 8008e98:	77fb      	strb	r3, [r7, #31]
 8008e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8008ed0 <configuration_reset+0xb0>)
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	1c5a      	adds	r2, r3, #1
 8008ea0:	7ffb      	ldrb	r3, [r7, #31]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	dac4      	bge.n	8008e30 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8008ea6:	222c      	movs	r2, #44	@ 0x2c
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	480d      	ldr	r0, [pc, #52]	@ (8008ee0 <configuration_reset+0xc0>)
 8008eac:	f004 f809 	bl	800cec2 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8008eb0:	2210      	movs	r2, #16
 8008eb2:	21ff      	movs	r1, #255	@ 0xff
 8008eb4:	480b      	ldr	r0, [pc, #44]	@ (8008ee4 <configuration_reset+0xc4>)
 8008eb6:	f004 f804 	bl	800cec2 <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 8008eba:	220c      	movs	r2, #12
 8008ebc:	21ff      	movs	r1, #255	@ 0xff
 8008ebe:	480a      	ldr	r0, [pc, #40]	@ (8008ee8 <configuration_reset+0xc8>)
 8008ec0:	f003 ffff 	bl	800cec2 <memset>
 8008ec4:	e000      	b.n	8008ec8 <configuration_reset+0xa8>
    TU_ASSERT(driver,);
 8008ec6:	bf00      	nop
}
 8008ec8:	3720      	adds	r7, #32
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	20001740 	.word	0x20001740
 8008ed4:	2000173c 	.word	0x2000173c
 8008ed8:	0800f1fc 	.word	0x0800f1fc
 8008edc:	e000edf0 	.word	0xe000edf0
 8008ee0:	2000170c 	.word	0x2000170c
 8008ee4:	20001710 	.word	0x20001710
 8008ee8:	20001720 	.word	0x20001720

08008eec <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8008ef6:	79fb      	ldrb	r3, [r7, #7]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff ff91 	bl	8008e20 <configuration_reset>
  usbd_control_reset();
 8008efe:	f001 fc37 	bl	800a770 <usbd_control_reset>
}
 8008f02:	bf00      	nop
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
	...

08008f0c <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8008f0c:	b590      	push	{r4, r7, lr}
 8008f0e:	b093      	sub	sp, #76	@ 0x4c
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 8008f18:	f7ff feac 	bl	8008c74 <tud_inited>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	f083 0301 	eor.w	r3, r3, #1
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f040 8189 	bne.w	800923c <tud_task_ext+0x330>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8008f2a:	4bb1      	ldr	r3, [pc, #708]	@ (80091f0 <tud_task_ext+0x2e4>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f30:	f107 030c 	add.w	r3, r7, #12
 8008f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2000      	movs	r0, #0
 8008f40:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 8008f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f44:	3304      	adds	r3, #4
 8008f46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7ff fcfa 	bl	8008942 <tu_fifo_read>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 8008f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2001      	movs	r0, #1
 8008f5a:	4798      	blx	r3

  return success;
 8008f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f60:	f083 0301 	eor.w	r3, r3, #1
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f040 816a 	bne.w	8009240 <tud_task_ext+0x334>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 8008f6c:	7b7b      	ldrb	r3, [r7, #13]
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	2b07      	cmp	r3, #7
 8008f72:	f200 814b 	bhi.w	800920c <tud_task_ext+0x300>
 8008f76:	a201      	add	r2, pc, #4	@ (adr r2, 8008f7c <tud_task_ext+0x70>)
 8008f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7c:	08008f9d 	.word	0x08008f9d
 8008f80:	08008fad 	.word	0x08008fad
 8008f84:	080091c1 	.word	0x080091c1
 8008f88:	08009173 	.word	0x08009173
 8008f8c:	0800919d 	.word	0x0800919d
 8008f90:	08008fbb 	.word	0x08008fbb
 8008f94:	0800906b 	.word	0x0800906b
 8008f98:	080091b1 	.word	0x080091b1
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8008f9c:	7b3b      	ldrb	r3, [r7, #12]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7ff ffa4 	bl	8008eec <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8008fa4:	7c3a      	ldrb	r2, [r7, #16]
 8008fa6:	4b93      	ldr	r3, [pc, #588]	@ (80091f4 <tud_task_ext+0x2e8>)
 8008fa8:	709a      	strb	r2, [r3, #2]
        break;
 8008faa:	e146      	b.n	800923a <tud_task_ext+0x32e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 8008fac:	7b3b      	ldrb	r3, [r7, #12]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7ff ff9c 	bl	8008eec <usbd_reset>
        tud_umount_cb();
 8008fb4:	f7ff fddd 	bl	8008b72 <tud_umount_cb>
        break;
 8008fb8:	e13f      	b.n	800923a <tud_task_ext+0x32e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 8008fba:	4b8f      	ldr	r3, [pc, #572]	@ (80091f8 <tud_task_ext+0x2ec>)
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10a      	bne.n	8008fda <tud_task_ext+0xce>
 8008fc4:	4b8d      	ldr	r3, [pc, #564]	@ (80091fc <tud_task_ext+0x2f0>)
 8008fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 0301 	and.w	r3, r3, #1
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 8137 	beq.w	8009244 <tud_task_ext+0x338>
 8008fd6:	be00      	bkpt	0x0000
 8008fd8:	e134      	b.n	8009244 <tud_task_ext+0x338>
        _usbd_queued_setup--;
 8008fda:	4b87      	ldr	r3, [pc, #540]	@ (80091f8 <tud_task_ext+0x2ec>)
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	b2da      	uxtb	r2, r3
 8008fe4:	4b84      	ldr	r3, [pc, #528]	@ (80091f8 <tud_task_ext+0x2ec>)
 8008fe6:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 8008fe8:	4b83      	ldr	r3, [pc, #524]	@ (80091f8 <tud_task_ext+0x2ec>)
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f040 8116 	bne.w	8009220 <tud_task_ext+0x314>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8008ff4:	4a7f      	ldr	r2, [pc, #508]	@ (80091f4 <tud_task_ext+0x2e8>)
 8008ff6:	7813      	ldrb	r3, [r2, #0]
 8008ff8:	f043 0301 	orr.w	r3, r3, #1
 8008ffc:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8008ffe:	4a7d      	ldr	r2, [pc, #500]	@ (80091f4 <tud_task_ext+0x2e8>)
 8009000:	f892 3020 	ldrb.w	r3, [r2, #32]
 8009004:	f023 0301 	bic.w	r3, r3, #1
 8009008:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 800900c:	4a79      	ldr	r2, [pc, #484]	@ (80091f4 <tud_task_ext+0x2e8>)
 800900e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8009012:	f023 0304 	bic.w	r3, r3, #4
 8009016:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 800901a:	4a76      	ldr	r2, [pc, #472]	@ (80091f4 <tud_task_ext+0x2e8>)
 800901c:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8009020:	f023 0301 	bic.w	r3, r3, #1
 8009024:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 8009028:	4a72      	ldr	r2, [pc, #456]	@ (80091f4 <tud_task_ext+0x2e8>)
 800902a:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 800902e:	f023 0304 	bic.w	r3, r3, #4
 8009032:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 8009036:	7b3a      	ldrb	r2, [r7, #12]
 8009038:	f107 030c 	add.w	r3, r7, #12
 800903c:	3304      	adds	r3, #4
 800903e:	4619      	mov	r1, r3
 8009040:	4610      	mov	r0, r2
 8009042:	f000 f91f 	bl	8009284 <process_control_request>
 8009046:	4603      	mov	r3, r0
 8009048:	f083 0301 	eor.w	r3, r3, #1
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	f000 80e8 	beq.w	8009224 <tud_task_ext+0x318>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8009054:	7b3b      	ldrb	r3, [r7, #12]
 8009056:	2100      	movs	r1, #0
 8009058:	4618      	mov	r0, r3
 800905a:	f002 fb7b 	bl	800b754 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 800905e:	7b3b      	ldrb	r3, [r7, #12]
 8009060:	2180      	movs	r1, #128	@ 0x80
 8009062:	4618      	mov	r0, r3
 8009064:	f002 fb76 	bl	800b754 <dcd_edpt_stall>
        }
        break;
 8009068:	e0dc      	b.n	8009224 <tud_task_ext+0x318>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 800906a:	7c3b      	ldrb	r3, [r7, #16]
 800906c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009070:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009074:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009078:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800907c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009080:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 8009082:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8009086:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800908a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800908e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009092:	09db      	lsrs	r3, r3, #7
 8009094:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 8009096:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 800909a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800909e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80090a2:	4954      	ldr	r1, [pc, #336]	@ (80091f4 <tud_task_ext+0x2e8>)
 80090a4:	0052      	lsls	r2, r2, #1
 80090a6:	440a      	add	r2, r1
 80090a8:	4413      	add	r3, r2
 80090aa:	f103 0220 	add.w	r2, r3, #32
 80090ae:	7813      	ldrb	r3, [r2, #0]
 80090b0:	f023 0301 	bic.w	r3, r3, #1
 80090b4:	7013      	strb	r3, [r2, #0]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80090b6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80090ba:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80090be:	494d      	ldr	r1, [pc, #308]	@ (80091f4 <tud_task_ext+0x2e8>)
 80090c0:	0052      	lsls	r2, r2, #1
 80090c2:	440a      	add	r2, r1
 80090c4:	4413      	add	r3, r2
 80090c6:	f103 0220 	add.w	r2, r3, #32
 80090ca:	7813      	ldrb	r3, [r2, #0]
 80090cc:	f023 0304 	bic.w	r3, r3, #4
 80090d0:	7013      	strb	r3, [r2, #0]

        if (0 == epnum) {
 80090d2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d107      	bne.n	80090ea <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 80090da:	7b38      	ldrb	r0, [r7, #12]
 80090dc:	7c7a      	ldrb	r2, [r7, #17]
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80090e4:	f001 fb7a 	bl	800a7dc <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 80090e8:	e0a7      	b.n	800923a <tud_task_ext+0x32e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 80090ea:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80090ee:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80090f2:	4940      	ldr	r1, [pc, #256]	@ (80091f4 <tud_task_ext+0x2e8>)
 80090f4:	0052      	lsls	r2, r2, #1
 80090f6:	440a      	add	r2, r1
 80090f8:	4413      	add	r3, r2
 80090fa:	3314      	adds	r3, #20
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 8009102:	2300      	movs	r3, #0
 8009104:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8009106:	4b3e      	ldr	r3, [pc, #248]	@ (8009200 <tud_task_ext+0x2f4>)
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800910e:	429a      	cmp	r2, r3
 8009110:	d207      	bcs.n	8009122 <tud_task_ext+0x216>
    driver = &_app_driver[drvid];
 8009112:	4b3c      	ldr	r3, [pc, #240]	@ (8009204 <tud_task_ext+0x2f8>)
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800911a:	015b      	lsls	r3, r3, #5
 800911c:	4413      	add	r3, r2
 800911e:	623b      	str	r3, [r7, #32]
 8009120:	e00f      	b.n	8009142 <tud_task_ext+0x236>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009122:	4b37      	ldr	r3, [pc, #220]	@ (8009200 <tud_task_ext+0x2f4>)
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	1c5a      	adds	r2, r3, #1
 8009128:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800912c:	429a      	cmp	r2, r3
 800912e:	db08      	blt.n	8009142 <tud_task_ext+0x236>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8009130:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009134:	4a32      	ldr	r2, [pc, #200]	@ (8009200 <tud_task_ext+0x2f4>)
 8009136:	7812      	ldrb	r2, [r2, #0]
 8009138:	1a9b      	subs	r3, r3, r2
 800913a:	015b      	lsls	r3, r3, #5
 800913c:	4a32      	ldr	r2, [pc, #200]	@ (8009208 <tud_task_ext+0x2fc>)
 800913e:	4413      	add	r3, r2
 8009140:	623b      	str	r3, [r7, #32]
  return driver;
 8009142:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8009144:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 8009146:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009148:	2b00      	cmp	r3, #0
 800914a:	d109      	bne.n	8009160 <tud_task_ext+0x254>
 800914c:	4b2b      	ldr	r3, [pc, #172]	@ (80091fc <tud_task_ext+0x2f0>)
 800914e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0301 	and.w	r3, r3, #1
 8009158:	2b00      	cmp	r3, #0
 800915a:	d075      	beq.n	8009248 <tud_task_ext+0x33c>
 800915c:	be00      	bkpt	0x0000
 800915e:	e073      	b.n	8009248 <tud_task_ext+0x33c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8009160:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009162:	699c      	ldr	r4, [r3, #24]
 8009164:	7b38      	ldrb	r0, [r7, #12]
 8009166:	7c7a      	ldrb	r2, [r7, #17]
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800916e:	47a0      	blx	r4
        break;
 8009170:	e063      	b.n	800923a <tud_task_ext+0x32e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 8009172:	4b20      	ldr	r3, [pc, #128]	@ (80091f4 <tud_task_ext+0x2e8>)
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800917a:	b2db      	uxtb	r3, r3
 800917c:	2b00      	cmp	r3, #0
 800917e:	d053      	beq.n	8009228 <tud_task_ext+0x31c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8009180:	4b1c      	ldr	r3, [pc, #112]	@ (80091f4 <tud_task_ext+0x2e8>)
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	bf14      	ite	ne
 800918e:	2301      	movne	r3, #1
 8009190:	2300      	moveq	r3, #0
 8009192:	b2db      	uxtb	r3, r3
 8009194:	4618      	mov	r0, r3
 8009196:	f7ff fcf3 	bl	8008b80 <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 800919a:	e045      	b.n	8009228 <tud_task_ext+0x31c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 800919c:	4b15      	ldr	r3, [pc, #84]	@ (80091f4 <tud_task_ext+0x2e8>)
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d040      	beq.n	800922c <tud_task_ext+0x320>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 80091aa:	f7ff fcf4 	bl	8008b96 <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80091ae:	e03d      	b.n	800922c <tud_task_ext+0x320>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) {
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d03c      	beq.n	8009230 <tud_task_ext+0x324>
          event.func_call.func(event.func_call.param);
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	697a      	ldr	r2, [r7, #20]
 80091ba:	4610      	mov	r0, r2
 80091bc:	4798      	blx	r3
        }
        break;
 80091be:	e037      	b.n	8009230 <tud_task_ext+0x324>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 80091c0:	4b0c      	ldr	r3, [pc, #48]	@ (80091f4 <tud_task_ext+0x2e8>)
 80091c2:	78db      	ldrb	r3, [r3, #3]
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	61fb      	str	r3, [r7, #28]
 80091c8:	2300      	movs	r3, #0
 80091ca:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80091cc:	7efb      	ldrb	r3, [r7, #27]
 80091ce:	69fa      	ldr	r2, [r7, #28]
 80091d0:	fa22 f303 	lsr.w	r3, r2, r3
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	2b00      	cmp	r3, #0
 80091da:	bf14      	ite	ne
 80091dc:	2301      	movne	r3, #1
 80091de:	2300      	moveq	r3, #0
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d026      	beq.n	8009234 <tud_task_ext+0x328>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7ff fc95 	bl	8008b18 <tud_sof_cb>
        }
      break;
 80091ee:	e021      	b.n	8009234 <tud_task_ext+0x328>
 80091f0:	20001804 	.word	0x20001804
 80091f4:	2000170c 	.word	0x2000170c
 80091f8:	20001738 	.word	0x20001738
 80091fc:	e000edf0 	.word	0xe000edf0
 8009200:	20001740 	.word	0x20001740
 8009204:	2000173c 	.word	0x2000173c
 8009208:	0800f1fc 	.word	0x0800f1fc

      default:
        TU_BREAKPOINT();
 800920c:	4b10      	ldr	r3, [pc, #64]	@ (8009250 <tud_task_ext+0x344>)
 800920e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 0301 	and.w	r3, r3, #1
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00d      	beq.n	8009238 <tud_task_ext+0x32c>
 800921c:	be00      	bkpt	0x0000
        break;
 800921e:	e00b      	b.n	8009238 <tud_task_ext+0x32c>
          break;
 8009220:	bf00      	nop
 8009222:	e682      	b.n	8008f2a <tud_task_ext+0x1e>
        break;
 8009224:	bf00      	nop
 8009226:	e680      	b.n	8008f2a <tud_task_ext+0x1e>
        break;
 8009228:	bf00      	nop
 800922a:	e67e      	b.n	8008f2a <tud_task_ext+0x1e>
        break;
 800922c:	bf00      	nop
 800922e:	e67c      	b.n	8008f2a <tud_task_ext+0x1e>
        break;
 8009230:	bf00      	nop
 8009232:	e67a      	b.n	8008f2a <tud_task_ext+0x1e>
      break;
 8009234:	bf00      	nop
 8009236:	e678      	b.n	8008f2a <tud_task_ext+0x1e>
        break;
 8009238:	bf00      	nop
  while (1) {
 800923a:	e676      	b.n	8008f2a <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 800923c:	bf00      	nop
 800923e:	e004      	b.n	800924a <tud_task_ext+0x33e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8009240:	bf00      	nop
 8009242:	e002      	b.n	800924a <tud_task_ext+0x33e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8009244:	bf00      	nop
 8009246:	e000      	b.n	800924a <tud_task_ext+0x33e>
          TU_ASSERT(driver,);
 8009248:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) { return; }
#endif
  }
}
 800924a:	374c      	adds	r7, #76	@ 0x4c
 800924c:	46bd      	mov	sp, r7
 800924e:	bd90      	pop	{r4, r7, pc}
 8009250:	e000edf0 	.word	0xe000edf0

08009254 <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	4603      	mov	r3, r0
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
 8009260:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	4618      	mov	r0, r3
 8009268:	f001 fa8e 	bl	800a788 <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	695b      	ldr	r3, [r3, #20]
 8009270:	7bf8      	ldrb	r0, [r7, #15]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	2101      	movs	r1, #1
 8009276:	4798      	blx	r3
 8009278:	4603      	mov	r3, r0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
	...

08009284 <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 8009284:	b580      	push	{r7, lr}
 8009286:	b09a      	sub	sp, #104	@ 0x68
 8009288:	af00      	add	r7, sp, #0
 800928a:	4603      	mov	r3, r0
 800928c:	6039      	str	r1, [r7, #0]
 800928e:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8009290:	2000      	movs	r0, #0
 8009292:	f001 fa79 	bl	800a788 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b60      	cmp	r3, #96	@ 0x60
 80092a2:	d10a      	bne.n	80092ba <process_control_request+0x36>
 80092a4:	4ba5      	ldr	r3, [pc, #660]	@ (800953c <process_control_request+0x2b8>)
 80092a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80092a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0301 	and.w	r3, r3, #1
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d000      	beq.n	80092b6 <process_control_request+0x32>
 80092b4:	be00      	bkpt	0x0000
 80092b6:	2300      	movs	r3, #0
 80092b8:	e2bb      	b.n	8009832 <process_control_request+0x5ae>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	2b40      	cmp	r3, #64	@ 0x40
 80092c6:	d10a      	bne.n	80092de <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 80092c8:	489d      	ldr	r0, [pc, #628]	@ (8009540 <process_control_request+0x2bc>)
 80092ca:	f001 fa5d 	bl	800a788 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 80092ce:	79fb      	ldrb	r3, [r7, #7]
 80092d0:	683a      	ldr	r2, [r7, #0]
 80092d2:	2101      	movs	r1, #1
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7ff fc65 	bl	8008ba4 <tud_vendor_control_xfer_cb>
 80092da:	4603      	mov	r3, r0
 80092dc:	e2a9      	b.n	8009832 <process_control_request+0x5ae>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	f000 81ca 	beq.w	8009682 <process_control_request+0x3fe>
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	f300 8292 	bgt.w	8009818 <process_control_request+0x594>
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d003      	beq.n	8009300 <process_control_request+0x7c>
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	f000 8151 	beq.w	80095a0 <process_control_request+0x31c>
 80092fe:	e28b      	b.n	8009818 <process_control_request+0x594>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009308:	b2db      	uxtb	r3, r3
 800930a:	2b20      	cmp	r3, #32
 800930c:	d143      	bne.n	8009396 <process_control_request+0x112>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	889b      	ldrh	r3, [r3, #4]
 8009312:	b29b      	uxth	r3, r3
 8009314:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8009316:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009318:	b2db      	uxtb	r3, r3
 800931a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 800931e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009322:	2b0f      	cmp	r3, #15
 8009324:	d901      	bls.n	800932a <process_control_request+0xa6>
 8009326:	2300      	movs	r3, #0
 8009328:	e283      	b.n	8009832 <process_control_request+0x5ae>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800932a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800932e:	4a85      	ldr	r2, [pc, #532]	@ (8009544 <process_control_request+0x2c0>)
 8009330:	4413      	add	r3, r2
 8009332:	791b      	ldrb	r3, [r3, #4]
 8009334:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 8009338:	2300      	movs	r3, #0
 800933a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 800933c:	4b82      	ldr	r3, [pc, #520]	@ (8009548 <process_control_request+0x2c4>)
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8009344:	429a      	cmp	r2, r3
 8009346:	d207      	bcs.n	8009358 <process_control_request+0xd4>
    driver = &_app_driver[drvid];
 8009348:	4b80      	ldr	r3, [pc, #512]	@ (800954c <process_control_request+0x2c8>)
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009350:	015b      	lsls	r3, r3, #5
 8009352:	4413      	add	r3, r2
 8009354:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009356:	e00f      	b.n	8009378 <process_control_request+0xf4>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009358:	4b7b      	ldr	r3, [pc, #492]	@ (8009548 <process_control_request+0x2c4>)
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	1c5a      	adds	r2, r3, #1
 800935e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009362:	429a      	cmp	r2, r3
 8009364:	db08      	blt.n	8009378 <process_control_request+0xf4>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8009366:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800936a:	4a77      	ldr	r2, [pc, #476]	@ (8009548 <process_control_request+0x2c4>)
 800936c:	7812      	ldrb	r2, [r2, #0]
 800936e:	1a9b      	subs	r3, r3, r2
 8009370:	015b      	lsls	r3, r3, #5
 8009372:	4a77      	ldr	r2, [pc, #476]	@ (8009550 <process_control_request+0x2cc>)
 8009374:	4413      	add	r3, r2
 8009376:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 8009378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800937a:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 800937c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800937e:	2b00      	cmp	r3, #0
 8009380:	d101      	bne.n	8009386 <process_control_request+0x102>
 8009382:	2300      	movs	r3, #0
 8009384:	e255      	b.n	8009832 <process_control_request+0x5ae>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 8009386:	79fb      	ldrb	r3, [r7, #7]
 8009388:	683a      	ldr	r2, [r7, #0]
 800938a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800938c:	4618      	mov	r0, r3
 800938e:	f7ff ff61 	bl	8009254 <invoke_class_control>
 8009392:	4603      	mov	r3, r0
 8009394:	e24d      	b.n	8009832 <process_control_request+0x5ae>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d00a      	beq.n	80093ba <process_control_request+0x136>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 80093a4:	4b65      	ldr	r3, [pc, #404]	@ (800953c <process_control_request+0x2b8>)
 80093a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80093a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d000      	beq.n	80093b6 <process_control_request+0x132>
 80093b4:	be00      	bkpt	0x0000
        return false;
 80093b6:	2300      	movs	r3, #0
 80093b8:	e23b      	b.n	8009832 <process_control_request+0x5ae>
      }

      switch ( p_request->bRequest ) {
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	785b      	ldrb	r3, [r3, #1]
 80093be:	2b09      	cmp	r3, #9
 80093c0:	f200 80e1 	bhi.w	8009586 <process_control_request+0x302>
 80093c4:	a201      	add	r2, pc, #4	@ (adr r2, 80093cc <process_control_request+0x148>)
 80093c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ca:	bf00      	nop
 80093cc:	08009555 	.word	0x08009555
 80093d0:	08009519 	.word	0x08009519
 80093d4:	08009587 	.word	0x08009587
 80093d8:	080094f3 	.word	0x080094f3
 80093dc:	08009587 	.word	0x08009587
 80093e0:	080093f5 	.word	0x080093f5
 80093e4:	080094d9 	.word	0x080094d9
 80093e8:	08009587 	.word	0x08009587
 80093ec:	08009419 	.word	0x08009419
 80093f0:	08009431 	.word	0x08009431
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 80093f4:	6838      	ldr	r0, [r7, #0]
 80093f6:	f001 f9d7 	bl	800a7a8 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	885b      	ldrh	r3, [r3, #2]
 80093fe:	b29b      	uxth	r3, r3
 8009400:	b2da      	uxtb	r2, r3
 8009402:	79fb      	ldrb	r3, [r7, #7]
 8009404:	4611      	mov	r1, r2
 8009406:	4618      	mov	r0, r3
 8009408:	f001 ff94 	bl	800b334 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 800940c:	4a4d      	ldr	r2, [pc, #308]	@ (8009544 <process_control_request+0x2c0>)
 800940e:	7813      	ldrb	r3, [r2, #0]
 8009410:	f043 0302 	orr.w	r3, r3, #2
 8009414:	7013      	strb	r3, [r2, #0]
        break;
 8009416:	e0c2      	b.n	800959e <process_control_request+0x31a>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8009418:	4b4a      	ldr	r3, [pc, #296]	@ (8009544 <process_control_request+0x2c0>)
 800941a:	785b      	ldrb	r3, [r3, #1]
 800941c:	b2db      	uxtb	r3, r3
 800941e:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8009420:	f107 0213 	add.w	r2, r7, #19
 8009424:	79f8      	ldrb	r0, [r7, #7]
 8009426:	2301      	movs	r3, #1
 8009428:	6839      	ldr	r1, [r7, #0]
 800942a:	f001 f931 	bl	800a690 <tud_control_xfer>
        }
        break;
 800942e:	e0b6      	b.n	800959e <process_control_request+0x31a>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	885b      	ldrh	r3, [r3, #2]
 8009434:	b29b      	uxth	r3, r3
 8009436:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 800943a:	4b42      	ldr	r3, [pc, #264]	@ (8009544 <process_control_request+0x2c0>)
 800943c:	785b      	ldrb	r3, [r3, #1]
 800943e:	b2db      	uxtb	r3, r3
 8009440:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8009444:	429a      	cmp	r2, r3
 8009446:	d041      	beq.n	80094cc <process_control_request+0x248>
            if ( _usbd_dev.cfg_num ) {
 8009448:	4b3e      	ldr	r3, [pc, #248]	@ (8009544 <process_control_request+0x2c0>)
 800944a:	785b      	ldrb	r3, [r3, #1]
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d014      	beq.n	800947c <process_control_request+0x1f8>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 8009452:	79fb      	ldrb	r3, [r7, #7]
 8009454:	2100      	movs	r1, #0
 8009456:	4618      	mov	r0, r3
 8009458:	f002 f832 	bl	800b4c0 <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 800945c:	79fb      	ldrb	r3, [r7, #7]
 800945e:	4618      	mov	r0, r3
 8009460:	f002 f896 	bl	800b590 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8009464:	4b37      	ldr	r3, [pc, #220]	@ (8009544 <process_control_request+0x2c0>)
 8009466:	789b      	ldrb	r3, [r3, #2]
 8009468:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 800946c:	79fb      	ldrb	r3, [r7, #7]
 800946e:	4618      	mov	r0, r3
 8009470:	f7ff fcd6 	bl	8008e20 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8009474:	4a33      	ldr	r2, [pc, #204]	@ (8009544 <process_control_request+0x2c0>)
 8009476:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800947a:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 800947c:	4a31      	ldr	r2, [pc, #196]	@ (8009544 <process_control_request+0x2c0>)
 800947e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009482:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 8009484:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009488:	2b00      	cmp	r3, #0
 800948a:	d01d      	beq.n	80094c8 <process_control_request+0x244>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 800948c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	4611      	mov	r1, r2
 8009494:	4618      	mov	r0, r3
 8009496:	f000 f9d5 	bl	8009844 <process_set_config>
 800949a:	4603      	mov	r3, r0
 800949c:	f083 0301 	eor.w	r3, r3, #1
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00d      	beq.n	80094c2 <process_control_request+0x23e>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 80094a6:	4b25      	ldr	r3, [pc, #148]	@ (800953c <process_control_request+0x2b8>)
 80094a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 0301 	and.w	r3, r3, #1
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d000      	beq.n	80094b8 <process_control_request+0x234>
 80094b6:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 80094b8:	4b22      	ldr	r3, [pc, #136]	@ (8009544 <process_control_request+0x2c0>)
 80094ba:	2200      	movs	r2, #0
 80094bc:	705a      	strb	r2, [r3, #1]
                return false;
 80094be:	2300      	movs	r3, #0
 80094c0:	e1b7      	b.n	8009832 <process_control_request+0x5ae>
              }
              tud_mount_cb();
 80094c2:	f7ff fb4f 	bl	8008b64 <tud_mount_cb>
 80094c6:	e001      	b.n	80094cc <process_control_request+0x248>
            } else {
              tud_umount_cb();
 80094c8:	f7ff fb53 	bl	8008b72 <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 80094cc:	79fb      	ldrb	r3, [r7, #7]
 80094ce:	6839      	ldr	r1, [r7, #0]
 80094d0:	4618      	mov	r0, r3
 80094d2:	f001 f86b 	bl	800a5ac <tud_control_status>
        }
        break;
 80094d6:	e062      	b.n	800959e <process_control_request+0x31a>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 80094d8:	79fb      	ldrb	r3, [r7, #7]
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	4618      	mov	r0, r3
 80094de:	f000 fae5 	bl	8009aac <process_get_descriptor>
 80094e2:	4603      	mov	r3, r0
 80094e4:	f083 0301 	eor.w	r3, r3, #1
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d056      	beq.n	800959c <process_control_request+0x318>
 80094ee:	2300      	movs	r3, #0
 80094f0:	e19f      	b.n	8009832 <process_control_request+0x5ae>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	885b      	ldrh	r3, [r3, #2]
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d10b      	bne.n	8009514 <process_control_request+0x290>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 80094fc:	4a11      	ldr	r2, [pc, #68]	@ (8009544 <process_control_request+0x2c0>)
 80094fe:	7813      	ldrb	r3, [r2, #0]
 8009500:	f043 0308 	orr.w	r3, r3, #8
 8009504:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 8009506:	79fb      	ldrb	r3, [r7, #7]
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	4618      	mov	r0, r3
 800950c:	f001 f84e 	bl	800a5ac <tud_control_status>
            break;
 8009510:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 8009512:	e044      	b.n	800959e <process_control_request+0x31a>
            default: return false;
 8009514:	2300      	movs	r3, #0
 8009516:	e18c      	b.n	8009832 <process_control_request+0x5ae>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	885b      	ldrh	r3, [r3, #2]
 800951c:	b29b      	uxth	r3, r3
 800951e:	2b01      	cmp	r3, #1
 8009520:	d001      	beq.n	8009526 <process_control_request+0x2a2>
 8009522:	2300      	movs	r3, #0
 8009524:	e185      	b.n	8009832 <process_control_request+0x5ae>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8009526:	4a07      	ldr	r2, [pc, #28]	@ (8009544 <process_control_request+0x2c0>)
 8009528:	7813      	ldrb	r3, [r2, #0]
 800952a:	f023 0308 	bic.w	r3, r3, #8
 800952e:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8009530:	79fb      	ldrb	r3, [r7, #7]
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	4618      	mov	r0, r3
 8009536:	f001 f839 	bl	800a5ac <tud_control_status>
        break;
 800953a:	e030      	b.n	800959e <process_control_request+0x31a>
 800953c:	e000edf0 	.word	0xe000edf0
 8009540:	08008ba5 	.word	0x08008ba5
 8009544:	2000170c 	.word	0x2000170c
 8009548:	20001740 	.word	0x20001740
 800954c:	2000173c 	.word	0x2000173c
 8009550:	0800f1fc 	.word	0x0800f1fc

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8009554:	4b94      	ldr	r3, [pc, #592]	@ (80097a8 <process_control_request+0x524>)
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	095b      	lsrs	r3, r3, #5
 800955a:	b2db      	uxtb	r3, r3
 800955c:	f003 0301 	and.w	r3, r3, #1
 8009560:	b29a      	uxth	r2, r3
 8009562:	4b91      	ldr	r3, [pc, #580]	@ (80097a8 <process_control_request+0x524>)
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	089b      	lsrs	r3, r3, #2
 8009568:	b2db      	uxtb	r3, r3
 800956a:	f003 0302 	and.w	r3, r3, #2
 800956e:	b29b      	uxth	r3, r3
 8009570:	4313      	orrs	r3, r2
 8009572:	b29b      	uxth	r3, r3
 8009574:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 8009576:	f107 0210 	add.w	r2, r7, #16
 800957a:	79f8      	ldrb	r0, [r7, #7]
 800957c:	2302      	movs	r3, #2
 800957e:	6839      	ldr	r1, [r7, #0]
 8009580:	f001 f886 	bl	800a690 <tud_control_xfer>
          break;
 8009584:	e00b      	b.n	800959e <process_control_request+0x31a>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 8009586:	4b89      	ldr	r3, [pc, #548]	@ (80097ac <process_control_request+0x528>)
 8009588:	647b      	str	r3, [r7, #68]	@ 0x44
 800958a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f003 0301 	and.w	r3, r3, #1
 8009592:	2b00      	cmp	r3, #0
 8009594:	d000      	beq.n	8009598 <process_control_request+0x314>
 8009596:	be00      	bkpt	0x0000
 8009598:	2300      	movs	r3, #0
 800959a:	e14a      	b.n	8009832 <process_control_request+0x5ae>
        break;
 800959c:	bf00      	nop
      }
    break;
 800959e:	e147      	b.n	8009830 <process_control_request+0x5ac>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	889b      	ldrh	r3, [r3, #4]
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80095a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80095b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80095b4:	2b0f      	cmp	r3, #15
 80095b6:	d901      	bls.n	80095bc <process_control_request+0x338>
 80095b8:	2300      	movs	r3, #0
 80095ba:	e13a      	b.n	8009832 <process_control_request+0x5ae>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80095bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80095c0:	4a79      	ldr	r2, [pc, #484]	@ (80097a8 <process_control_request+0x524>)
 80095c2:	4413      	add	r3, r2
 80095c4:	791b      	ldrb	r3, [r3, #4]
 80095c6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 80095ca:	2300      	movs	r3, #0
 80095cc:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 80095ce:	4b78      	ldr	r3, [pc, #480]	@ (80097b0 <process_control_request+0x52c>)
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d207      	bcs.n	80095ea <process_control_request+0x366>
    driver = &_app_driver[drvid];
 80095da:	4b76      	ldr	r3, [pc, #472]	@ (80097b4 <process_control_request+0x530>)
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80095e2:	015b      	lsls	r3, r3, #5
 80095e4:	4413      	add	r3, r2
 80095e6:	623b      	str	r3, [r7, #32]
 80095e8:	e00f      	b.n	800960a <process_control_request+0x386>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80095ea:	4b71      	ldr	r3, [pc, #452]	@ (80097b0 <process_control_request+0x52c>)
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80095f4:	429a      	cmp	r2, r3
 80095f6:	db08      	blt.n	800960a <process_control_request+0x386>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80095f8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80095fc:	4a6c      	ldr	r2, [pc, #432]	@ (80097b0 <process_control_request+0x52c>)
 80095fe:	7812      	ldrb	r2, [r2, #0]
 8009600:	1a9b      	subs	r3, r3, r2
 8009602:	015b      	lsls	r3, r3, #5
 8009604:	4a6c      	ldr	r2, [pc, #432]	@ (80097b8 <process_control_request+0x534>)
 8009606:	4413      	add	r3, r2
 8009608:	623b      	str	r3, [r7, #32]
  return driver;
 800960a:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800960c:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 800960e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009610:	2b00      	cmp	r3, #0
 8009612:	d101      	bne.n	8009618 <process_control_request+0x394>
 8009614:	2300      	movs	r3, #0
 8009616:	e10c      	b.n	8009832 <process_control_request+0x5ae>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 8009618:	79fb      	ldrb	r3, [r7, #7]
 800961a:	683a      	ldr	r2, [r7, #0]
 800961c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800961e:	4618      	mov	r0, r3
 8009620:	f7ff fe18 	bl	8009254 <invoke_class_control>
 8009624:	4603      	mov	r3, r0
 8009626:	f083 0301 	eor.w	r3, r3, #1
 800962a:	b2db      	uxtb	r3, r3
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 80fe 	beq.w	800982e <process_control_request+0x5aa>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800963a:	b2db      	uxtb	r3, r3
 800963c:	2b00      	cmp	r3, #0
 800963e:	d001      	beq.n	8009644 <process_control_request+0x3c0>
 8009640:	2300      	movs	r3, #0
 8009642:	e0f6      	b.n	8009832 <process_control_request+0x5ae>

        switch(p_request->bRequest) {
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	785b      	ldrb	r3, [r3, #1]
 8009648:	3b0a      	subs	r3, #10
 800964a:	2b01      	cmp	r3, #1
 800964c:	d816      	bhi.n	800967c <process_control_request+0x3f8>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 800964e:	2000      	movs	r0, #0
 8009650:	f001 f89a 	bl	800a788 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	785b      	ldrb	r3, [r3, #1]
 8009658:	2b0a      	cmp	r3, #10
 800965a:	d109      	bne.n	8009670 <process_control_request+0x3ec>
              uint8_t alternate = 0;
 800965c:	2300      	movs	r3, #0
 800965e:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8009660:	f107 020f 	add.w	r2, r7, #15
 8009664:	79f8      	ldrb	r0, [r7, #7]
 8009666:	2301      	movs	r3, #1
 8009668:	6839      	ldr	r1, [r7, #0]
 800966a:	f001 f811 	bl	800a690 <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 800966e:	e007      	b.n	8009680 <process_control_request+0x3fc>
              tud_control_status(rhport, p_request);
 8009670:	79fb      	ldrb	r3, [r7, #7]
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	4618      	mov	r0, r3
 8009676:	f000 ff99 	bl	800a5ac <tud_control_status>
          break;
 800967a:	e001      	b.n	8009680 <process_control_request+0x3fc>

          default: return false;
 800967c:	2300      	movs	r3, #0
 800967e:	e0d8      	b.n	8009832 <process_control_request+0x5ae>
        }
      }
      break;
 8009680:	e0d5      	b.n	800982e <process_control_request+0x5aa>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	889b      	ldrh	r3, [r3, #4]
 8009686:	b29b      	uxth	r3, r3
 8009688:	83bb      	strh	r3, [r7, #28]
 800968a:	8bbb      	ldrh	r3, [r7, #28]
 800968c:	b2db      	uxtb	r3, r3
 800968e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009692:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009696:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009698:	7fbb      	ldrb	r3, [r7, #30]
 800969a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800969e:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 80096a0:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80096a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80096a8:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80096aa:	7ffb      	ldrb	r3, [r7, #31]
 80096ac:	09db      	lsrs	r3, r3, #7
 80096ae:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80096b0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 80096b4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80096b8:	2b05      	cmp	r3, #5
 80096ba:	d90a      	bls.n	80096d2 <process_control_request+0x44e>
 80096bc:	4b3b      	ldr	r3, [pc, #236]	@ (80097ac <process_control_request+0x528>)
 80096be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d000      	beq.n	80096ce <process_control_request+0x44a>
 80096cc:	be00      	bkpt	0x0000
 80096ce:	2300      	movs	r3, #0
 80096d0:	e0af      	b.n	8009832 <process_control_request+0x5ae>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80096d2:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 80096d6:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80096da:	4933      	ldr	r1, [pc, #204]	@ (80097a8 <process_control_request+0x524>)
 80096dc:	0052      	lsls	r2, r2, #1
 80096de:	440a      	add	r2, r1
 80096e0:	4413      	add	r3, r2
 80096e2:	3314      	adds	r3, #20
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 80096e8:	2300      	movs	r3, #0
 80096ea:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 80096ec:	4b30      	ldr	r3, [pc, #192]	@ (80097b0 <process_control_request+0x52c>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	7efa      	ldrb	r2, [r7, #27]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d206      	bcs.n	8009704 <process_control_request+0x480>
    driver = &_app_driver[drvid];
 80096f6:	4b2f      	ldr	r3, [pc, #188]	@ (80097b4 <process_control_request+0x530>)
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	7efb      	ldrb	r3, [r7, #27]
 80096fc:	015b      	lsls	r3, r3, #5
 80096fe:	4413      	add	r3, r2
 8009700:	617b      	str	r3, [r7, #20]
 8009702:	e00d      	b.n	8009720 <process_control_request+0x49c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009704:	4b2a      	ldr	r3, [pc, #168]	@ (80097b0 <process_control_request+0x52c>)
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	1c5a      	adds	r2, r3, #1
 800970a:	7efb      	ldrb	r3, [r7, #27]
 800970c:	429a      	cmp	r2, r3
 800970e:	db07      	blt.n	8009720 <process_control_request+0x49c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8009710:	7efb      	ldrb	r3, [r7, #27]
 8009712:	4a27      	ldr	r2, [pc, #156]	@ (80097b0 <process_control_request+0x52c>)
 8009714:	7812      	ldrb	r2, [r2, #0]
 8009716:	1a9b      	subs	r3, r3, r2
 8009718:	015b      	lsls	r3, r3, #5
 800971a:	4a27      	ldr	r2, [pc, #156]	@ (80097b8 <process_control_request+0x534>)
 800971c:	4413      	add	r3, r2
 800971e:	617b      	str	r3, [r7, #20]
  return driver;
 8009720:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8009722:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00c      	beq.n	800974c <process_control_request+0x4c8>
        // Forward class request to its driver
        TU_VERIFY(driver);
 8009732:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009734:	2b00      	cmp	r3, #0
 8009736:	d101      	bne.n	800973c <process_control_request+0x4b8>
 8009738:	2300      	movs	r3, #0
 800973a:	e07a      	b.n	8009832 <process_control_request+0x5ae>
        return invoke_class_control(rhport, driver, p_request);
 800973c:	79fb      	ldrb	r3, [r7, #7]
 800973e:	683a      	ldr	r2, [r7, #0]
 8009740:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009742:	4618      	mov	r0, r3
 8009744:	f7ff fd86 	bl	8009254 <invoke_class_control>
 8009748:	4603      	mov	r3, r0
 800974a:	e072      	b.n	8009832 <process_control_request+0x5ae>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	785b      	ldrb	r3, [r3, #1]
 8009750:	2b03      	cmp	r3, #3
 8009752:	d017      	beq.n	8009784 <process_control_request+0x500>
 8009754:	2b03      	cmp	r3, #3
 8009756:	dc52      	bgt.n	80097fe <process_control_request+0x57a>
 8009758:	2b00      	cmp	r3, #0
 800975a:	d002      	beq.n	8009762 <process_control_request+0x4de>
 800975c:	2b01      	cmp	r3, #1
 800975e:	d011      	beq.n	8009784 <process_control_request+0x500>
 8009760:	e04d      	b.n	80097fe <process_control_request+0x57a>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8009762:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8009766:	79fb      	ldrb	r3, [r7, #7]
 8009768:	4611      	mov	r1, r2
 800976a:	4618      	mov	r0, r3
 800976c:	f000 fec8 	bl	800a500 <usbd_edpt_stalled>
 8009770:	4603      	mov	r3, r0
 8009772:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 8009774:	f107 020c 	add.w	r2, r7, #12
 8009778:	79f8      	ldrb	r0, [r7, #7]
 800977a:	2302      	movs	r3, #2
 800977c:	6839      	ldr	r1, [r7, #0]
 800977e:	f000 ff87 	bl	800a690 <tud_control_xfer>
          }
          break;
 8009782:	e048      	b.n	8009816 <process_control_request+0x592>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	885b      	ldrh	r3, [r3, #2]
 8009788:	b29b      	uxth	r3, r3
 800978a:	2b00      	cmp	r3, #0
 800978c:	d11d      	bne.n	80097ca <process_control_request+0x546>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	785b      	ldrb	r3, [r3, #1]
 8009792:	2b01      	cmp	r3, #1
 8009794:	d112      	bne.n	80097bc <process_control_request+0x538>
                usbd_edpt_clear_stall(rhport, ep_addr);
 8009796:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800979a:	79fb      	ldrb	r3, [r7, #7]
 800979c:	4611      	mov	r1, r2
 800979e:	4618      	mov	r0, r3
 80097a0:	f000 fe70 	bl	800a484 <usbd_edpt_clear_stall>
 80097a4:	e011      	b.n	80097ca <process_control_request+0x546>
 80097a6:	bf00      	nop
 80097a8:	2000170c 	.word	0x2000170c
 80097ac:	e000edf0 	.word	0xe000edf0
 80097b0:	20001740 	.word	0x20001740
 80097b4:	2000173c 	.word	0x2000173c
 80097b8:	0800f1fc 	.word	0x0800f1fc
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 80097bc:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80097c0:	79fb      	ldrb	r3, [r7, #7]
 80097c2:	4611      	mov	r1, r2
 80097c4:	4618      	mov	r0, r3
 80097c6:	f000 fe1f 	bl	800a408 <usbd_edpt_stall>
              }
            }

            if (driver) {
 80097ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d021      	beq.n	8009814 <process_control_request+0x590>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 80097d0:	79fb      	ldrb	r3, [r7, #7]
 80097d2:	683a      	ldr	r2, [r7, #0]
 80097d4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7ff fd3c 	bl	8009254 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 80097dc:	2000      	movs	r0, #0
 80097de:	f000 ffd3 	bl	800a788 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 80097e2:	4b16      	ldr	r3, [pc, #88]	@ (800983c <process_control_request+0x5b8>)
 80097e4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80097e8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d110      	bne.n	8009814 <process_control_request+0x590>
 80097f2:	79fb      	ldrb	r3, [r7, #7]
 80097f4:	6839      	ldr	r1, [r7, #0]
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 fed8 	bl	800a5ac <tud_control_status>
            }
          }
          break;
 80097fc:	e00a      	b.n	8009814 <process_control_request+0x590>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 80097fe:	4b10      	ldr	r3, [pc, #64]	@ (8009840 <process_control_request+0x5bc>)
 8009800:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009802:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 0301 	and.w	r3, r3, #1
 800980a:	2b00      	cmp	r3, #0
 800980c:	d000      	beq.n	8009810 <process_control_request+0x58c>
 800980e:	be00      	bkpt	0x0000
            return false;
 8009810:	2300      	movs	r3, #0
 8009812:	e00e      	b.n	8009832 <process_control_request+0x5ae>
          break;
 8009814:	bf00      	nop
        }
      }
    }
    break;
 8009816:	e00b      	b.n	8009830 <process_control_request+0x5ac>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 8009818:	4b09      	ldr	r3, [pc, #36]	@ (8009840 <process_control_request+0x5bc>)
 800981a:	637b      	str	r3, [r7, #52]	@ 0x34
 800981c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 0301 	and.w	r3, r3, #1
 8009824:	2b00      	cmp	r3, #0
 8009826:	d000      	beq.n	800982a <process_control_request+0x5a6>
 8009828:	be00      	bkpt	0x0000
      return false;
 800982a:	2300      	movs	r3, #0
 800982c:	e001      	b.n	8009832 <process_control_request+0x5ae>
      break;
 800982e:	bf00      	nop
  }

  return true;
 8009830:	2301      	movs	r3, #1
}
 8009832:	4618      	mov	r0, r3
 8009834:	3768      	adds	r7, #104	@ 0x68
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	2000170c 	.word	0x2000170c
 8009840:	e000edf0 	.word	0xe000edf0

08009844 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b096      	sub	sp, #88	@ 0x58
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	460a      	mov	r2, r1
 800984e:	71fb      	strb	r3, [r7, #7]
 8009850:	4613      	mov	r3, r2
 8009852:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8009854:	79bb      	ldrb	r3, [r7, #6]
 8009856:	3b01      	subs	r3, #1
 8009858:	b2db      	uxtb	r3, r3
 800985a:	4618      	mov	r0, r3
 800985c:	f7fa fa88 	bl	8003d70 <tud_descriptor_configuration_cb>
 8009860:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8009862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009864:	2b00      	cmp	r3, #0
 8009866:	d003      	beq.n	8009870 <process_set_config+0x2c>
 8009868:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800986a:	785b      	ldrb	r3, [r3, #1]
 800986c:	2b02      	cmp	r3, #2
 800986e:	d00a      	beq.n	8009886 <process_set_config+0x42>
 8009870:	4b87      	ldr	r3, [pc, #540]	@ (8009a90 <process_set_config+0x24c>)
 8009872:	623b      	str	r3, [r7, #32]
 8009874:	6a3b      	ldr	r3, [r7, #32]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 0301 	and.w	r3, r3, #1
 800987c:	2b00      	cmp	r3, #0
 800987e:	d000      	beq.n	8009882 <process_set_config+0x3e>
 8009880:	be00      	bkpt	0x0000
 8009882:	2300      	movs	r3, #0
 8009884:	e100      	b.n	8009a88 <process_set_config+0x244>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8009886:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009888:	79db      	ldrb	r3, [r3, #7]
 800988a:	115b      	asrs	r3, r3, #5
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	b2d9      	uxtb	r1, r3
 8009892:	4a80      	ldr	r2, [pc, #512]	@ (8009a94 <process_set_config+0x250>)
 8009894:	7813      	ldrb	r3, [r2, #0]
 8009896:	f361 1304 	bfi	r3, r1, #4, #1
 800989a:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 800989c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800989e:	79db      	ldrb	r3, [r3, #7]
 80098a0:	119b      	asrs	r3, r3, #6
 80098a2:	f003 0301 	and.w	r3, r3, #1
 80098a6:	b2d9      	uxtb	r1, r3
 80098a8:	4a7a      	ldr	r2, [pc, #488]	@ (8009a94 <process_set_config+0x250>)
 80098aa:	7813      	ldrb	r3, [r2, #0]
 80098ac:	f361 1345 	bfi	r3, r1, #5, #1
 80098b0:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 80098b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098b4:	3309      	adds	r3, #9
 80098b6:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 80098b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098ba:	885b      	ldrh	r3, [r3, #2]
 80098bc:	b29b      	uxth	r3, r3
 80098be:	461a      	mov	r2, r3
 80098c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098c2:	4413      	add	r3, r2
 80098c4:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 80098c6:	e0d9      	b.n	8009a7c <process_set_config+0x238>
  {
    uint8_t assoc_itf_count = 1;
 80098c8:	2301      	movs	r3, #1
 80098ca:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80098ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098d0:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	3301      	adds	r3, #1
 80098d6:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 80098d8:	2b0b      	cmp	r3, #11
 80098da:	d10f      	bne.n	80098fc <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 80098dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098de:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 80098e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098e2:	78db      	ldrb	r3, [r3, #3]
 80098e4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80098e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098ea:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	461a      	mov	r2, r3
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 80098fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80098fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098fe:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	3301      	adds	r3, #1
 8009904:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8009906:	2b04      	cmp	r3, #4
 8009908:	d00a      	beq.n	8009920 <process_set_config+0xdc>
 800990a:	4b61      	ldr	r3, [pc, #388]	@ (8009a90 <process_set_config+0x24c>)
 800990c:	627b      	str	r3, [r7, #36]	@ 0x24
 800990e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 0301 	and.w	r3, r3, #1
 8009916:	2b00      	cmp	r3, #0
 8009918:	d000      	beq.n	800991c <process_set_config+0xd8>
 800991a:	be00      	bkpt	0x0000
 800991c:	2300      	movs	r3, #0
 800991e:	e0b3      	b.n	8009a88 <process_set_config+0x244>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8009920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009922:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8009924:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009928:	1ad3      	subs	r3, r2, r3
 800992a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 800992c:	2300      	movs	r3, #0
 800992e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8009932:	e089      	b.n	8009a48 <process_set_config+0x204>
 8009934:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009938:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 800993a:	2300      	movs	r3, #0
 800993c:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 800993e:	4b56      	ldr	r3, [pc, #344]	@ (8009a98 <process_set_config+0x254>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	7bfa      	ldrb	r2, [r7, #15]
 8009944:	429a      	cmp	r2, r3
 8009946:	d206      	bcs.n	8009956 <process_set_config+0x112>
    driver = &_app_driver[drvid];
 8009948:	4b54      	ldr	r3, [pc, #336]	@ (8009a9c <process_set_config+0x258>)
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	7bfb      	ldrb	r3, [r7, #15]
 800994e:	015b      	lsls	r3, r3, #5
 8009950:	4413      	add	r3, r2
 8009952:	60bb      	str	r3, [r7, #8]
 8009954:	e00d      	b.n	8009972 <process_set_config+0x12e>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009956:	4b50      	ldr	r3, [pc, #320]	@ (8009a98 <process_set_config+0x254>)
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	1c5a      	adds	r2, r3, #1
 800995c:	7bfb      	ldrb	r3, [r7, #15]
 800995e:	429a      	cmp	r2, r3
 8009960:	db07      	blt.n	8009972 <process_set_config+0x12e>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8009962:	7bfb      	ldrb	r3, [r7, #15]
 8009964:	4a4c      	ldr	r2, [pc, #304]	@ (8009a98 <process_set_config+0x254>)
 8009966:	7812      	ldrb	r2, [r2, #0]
 8009968:	1a9b      	subs	r3, r3, r2
 800996a:	015b      	lsls	r3, r3, #5
 800996c:	4a4c      	ldr	r2, [pc, #304]	@ (8009aa0 <process_set_config+0x25c>)
 800996e:	4413      	add	r3, r2
 8009970:	60bb      	str	r3, [r7, #8]
  return driver;
 8009972:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8009974:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 8009976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10a      	bne.n	8009992 <process_set_config+0x14e>
 800997c:	4b44      	ldr	r3, [pc, #272]	@ (8009a90 <process_set_config+0x24c>)
 800997e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 0301 	and.w	r3, r3, #1
 8009988:	2b00      	cmp	r3, #0
 800998a:	d000      	beq.n	800998e <process_set_config+0x14a>
 800998c:	be00      	bkpt	0x0000
 800998e:	2300      	movs	r3, #0
 8009990:	e07a      	b.n	8009a88 <process_set_config+0x244>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8009992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8009998:	79f8      	ldrb	r0, [r7, #7]
 800999a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800999c:	4798      	blx	r3
 800999e:	4603      	mov	r3, r0
 80099a0:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 80099a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80099a4:	2b08      	cmp	r3, #8
 80099a6:	d94a      	bls.n	8009a3e <process_set_config+0x1fa>
 80099a8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80099aa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d846      	bhi.n	8009a3e <process_set_config+0x1fa>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 80099b0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d107      	bne.n	80099c8 <process_set_config+0x184>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 80099b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	4a39      	ldr	r2, [pc, #228]	@ (8009aa4 <process_set_config+0x260>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d102      	bne.n	80099c8 <process_set_config+0x184>
 80099c2:	2302      	movs	r3, #2
 80099c4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80099c8:	2300      	movs	r3, #0
 80099ca:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 80099ce:	e024      	b.n	8009a1a <process_set_config+0x1d6>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 80099d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099d2:	789a      	ldrb	r2, [r3, #2]
 80099d4:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80099d8:	4413      	add	r3, r2
 80099da:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 80099de:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80099e2:	4a2c      	ldr	r2, [pc, #176]	@ (8009a94 <process_set_config+0x250>)
 80099e4:	4413      	add	r3, r2
 80099e6:	791b      	ldrb	r3, [r3, #4]
 80099e8:	2bff      	cmp	r3, #255	@ 0xff
 80099ea:	d00a      	beq.n	8009a02 <process_set_config+0x1be>
 80099ec:	4b28      	ldr	r3, [pc, #160]	@ (8009a90 <process_set_config+0x24c>)
 80099ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80099f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 0301 	and.w	r3, r3, #1
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d000      	beq.n	80099fe <process_set_config+0x1ba>
 80099fc:	be00      	bkpt	0x0000
 80099fe:	2300      	movs	r3, #0
 8009a00:	e042      	b.n	8009a88 <process_set_config+0x244>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8009a02:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009a06:	4a23      	ldr	r2, [pc, #140]	@ (8009a94 <process_set_config+0x250>)
 8009a08:	4413      	add	r3, r2
 8009a0a:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8009a0e:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8009a10:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8009a14:	3301      	adds	r3, #1
 8009a16:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8009a1a:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8009a1e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d3d4      	bcc.n	80099d0 <process_set_config+0x18c>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8009a26:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009a2a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009a2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a2e:	481e      	ldr	r0, [pc, #120]	@ (8009aa8 <process_set_config+0x264>)
 8009a30:	f003 f81c 	bl	800ca6c <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8009a34:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009a36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a38:	4413      	add	r3, r2
 8009a3a:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 8009a3c:	e00c      	b.n	8009a58 <process_set_config+0x214>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8009a3e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009a42:	3301      	adds	r3, #1
 8009a44:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8009a48:	4b13      	ldr	r3, [pc, #76]	@ (8009a98 <process_set_config+0x254>)
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	1c5a      	adds	r2, r3, #1
 8009a4e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009a52:	429a      	cmp	r2, r3
 8009a54:	f6bf af6e 	bge.w	8009934 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8009a58:	4b0f      	ldr	r3, [pc, #60]	@ (8009a98 <process_set_config+0x254>)
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	1c5a      	adds	r2, r3, #1
 8009a5e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009a62:	429a      	cmp	r2, r3
 8009a64:	da0a      	bge.n	8009a7c <process_set_config+0x238>
 8009a66:	4b0a      	ldr	r3, [pc, #40]	@ (8009a90 <process_set_config+0x24c>)
 8009a68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f003 0301 	and.w	r3, r3, #1
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d000      	beq.n	8009a78 <process_set_config+0x234>
 8009a76:	be00      	bkpt	0x0000
 8009a78:	2300      	movs	r3, #0
 8009a7a:	e005      	b.n	8009a88 <process_set_config+0x244>
  while( p_desc < desc_end )
 8009a7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a80:	429a      	cmp	r2, r3
 8009a82:	f4ff af21 	bcc.w	80098c8 <process_set_config+0x84>
  }

  return true;
 8009a86:	2301      	movs	r3, #1
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3758      	adds	r7, #88	@ 0x58
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	e000edf0 	.word	0xe000edf0
 8009a94:	2000170c 	.word	0x2000170c
 8009a98:	20001740 	.word	0x20001740
 8009a9c:	2000173c 	.word	0x2000173c
 8009aa0:	0800f1fc 	.word	0x0800f1fc
 8009aa4:	08006fd9 	.word	0x08006fd9
 8009aa8:	20001720 	.word	0x20001720

08009aac <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b094      	sub	sp, #80	@ 0x50
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	6039      	str	r1, [r7, #0]
 8009ab6:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	885b      	ldrh	r3, [r3, #2]
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8009ac0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009ac2:	0a1b      	lsrs	r3, r3, #8
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	885b      	ldrh	r3, [r3, #2]
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8009ad4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 8009adc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	2b0e      	cmp	r3, #14
 8009ae4:	f200 80b4 	bhi.w	8009c50 <process_get_descriptor+0x1a4>
 8009ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8009af0 <process_get_descriptor+0x44>)
 8009aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aee:	bf00      	nop
 8009af0:	08009b2d 	.word	0x08009b2d
 8009af4:	08009b91 	.word	0x08009b91
 8009af8:	08009bf7 	.word	0x08009bf7
 8009afc:	08009c51 	.word	0x08009c51
 8009b00:	08009c51 	.word	0x08009c51
 8009b04:	08009c2b 	.word	0x08009c2b
 8009b08:	08009b91 	.word	0x08009b91
 8009b0c:	08009c51 	.word	0x08009c51
 8009b10:	08009c51 	.word	0x08009c51
 8009b14:	08009c51 	.word	0x08009c51
 8009b18:	08009c51 	.word	0x08009c51
 8009b1c:	08009c51 	.word	0x08009c51
 8009b20:	08009c51 	.word	0x08009c51
 8009b24:	08009c51 	.word	0x08009c51
 8009b28:	08009b5f 	.word	0x08009b5f
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8009b2c:	f7fa f908 	bl	8003d40 <tud_descriptor_device_cb>
 8009b30:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 8009b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d10a      	bne.n	8009b4e <process_get_descriptor+0xa2>
 8009b38:	4b48      	ldr	r3, [pc, #288]	@ (8009c5c <process_get_descriptor+0x1b0>)
 8009b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f003 0301 	and.w	r3, r3, #1
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d000      	beq.n	8009b4a <process_get_descriptor+0x9e>
 8009b48:	be00      	bkpt	0x0000
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	e081      	b.n	8009c52 <process_get_descriptor+0x1a6>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8009b4e:	79f8      	ldrb	r0, [r7, #7]
 8009b50:	2312      	movs	r3, #18
 8009b52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	f000 fd9b 	bl	800a690 <tud_control_xfer>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	e079      	b.n	8009c52 <process_get_descriptor+0x1a6>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8009b5e:	f7fe ffe5 	bl	8008b2c <tud_descriptor_bos_cb>
 8009b62:	4603      	mov	r3, r0
 8009b64:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 8009b66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d101      	bne.n	8009b70 <process_get_descriptor+0xc4>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	e070      	b.n	8009c52 <process_get_descriptor+0x1a6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8009b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b72:	3302      	adds	r3, #2
 8009b74:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 8009b76:	6a3b      	ldr	r3, [r7, #32]
 8009b78:	881b      	ldrh	r3, [r3, #0]
 8009b7a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8009b7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009b84:	79f8      	ldrb	r0, [r7, #7]
 8009b86:	6839      	ldr	r1, [r7, #0]
 8009b88:	f000 fd82 	bl	800a690 <tud_control_xfer>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	e060      	b.n	8009c52 <process_get_descriptor+0x1a6>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 8009b90:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	d114      	bne.n	8009bc2 <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8009b98:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7fa f8e7 	bl	8003d70 <tud_descriptor_configuration_cb>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 8009ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d116      	bne.n	8009bda <process_get_descriptor+0x12e>
 8009bac:	4b2b      	ldr	r3, [pc, #172]	@ (8009c5c <process_get_descriptor+0x1b0>)
 8009bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 0301 	and.w	r3, r3, #1
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d000      	beq.n	8009bbe <process_get_descriptor+0x112>
 8009bbc:	be00      	bkpt	0x0000
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	e047      	b.n	8009c52 <process_get_descriptor+0x1a6>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8009bc2:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7fe ffc0 	bl	8008b4c <tud_descriptor_other_speed_configuration_cb>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 8009bd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d101      	bne.n	8009bda <process_get_descriptor+0x12e>
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	e03b      	b.n	8009c52 <process_get_descriptor+0x1a6>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8009bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bdc:	3302      	adds	r3, #2
 8009bde:	61fb      	str	r3, [r7, #28]
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	881b      	ldrh	r3, [r3, #0]
 8009be4:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8009be6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009be8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009bea:	79f8      	ldrb	r0, [r7, #7]
 8009bec:	6839      	ldr	r1, [r7, #0]
 8009bee:	f000 fd4f 	bl	800a690 <tud_control_xfer>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	e02d      	b.n	8009c52 <process_get_descriptor+0x1a6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	889b      	ldrh	r3, [r3, #4]
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8009c00:	4611      	mov	r1, r2
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7fa f8c2 	bl	8003d8c <tud_descriptor_string_cb>
 8009c08:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 8009c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d101      	bne.n	8009c14 <process_get_descriptor+0x168>
 8009c10:	2300      	movs	r3, #0
 8009c12:	e01e      	b.n	8009c52 <process_get_descriptor+0x1a6>
 8009c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c16:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8009c1c:	79f8      	ldrb	r0, [r7, #7]
 8009c1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	f000 fd35 	bl	800a690 <tud_control_xfer>
 8009c26:	4603      	mov	r3, r0
 8009c28:	e013      	b.n	8009c52 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8009c2a:	f7fe ff87 	bl	8008b3c <tud_descriptor_device_qualifier_cb>
 8009c2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 8009c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d101      	bne.n	8009c3a <process_get_descriptor+0x18e>
 8009c36:	2300      	movs	r3, #0
 8009c38:	e00b      	b.n	8009c52 <process_get_descriptor+0x1a6>
 8009c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c3c:	617b      	str	r3, [r7, #20]
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8009c42:	79f8      	ldrb	r0, [r7, #7]
 8009c44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	f000 fd22 	bl	800a690 <tud_control_xfer>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	e000      	b.n	8009c52 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    default: return false;
 8009c50:	2300      	movs	r3, #0
  }
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3750      	adds	r7, #80	@ 0x50
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	e000edf0 	.word	0xe000edf0

08009c60 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b0a0      	sub	sp, #128	@ 0x80
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	460b      	mov	r3, r1
 8009c6a:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	785b      	ldrb	r3, [r3, #1]
 8009c76:	3b02      	subs	r3, #2
 8009c78:	2b04      	cmp	r3, #4
 8009c7a:	f200 8175 	bhi.w	8009f68 <dcd_event_handler+0x308>
 8009c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c84 <dcd_event_handler+0x24>)
 8009c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c84:	08009c99 	.word	0x08009c99
 8009c88:	08009d09 	.word	0x08009d09
 8009c8c:	08009cc5 	.word	0x08009cc5
 8009c90:	08009ce7 	.word	0x08009ce7
 8009c94:	08009f35 	.word	0x08009f35
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8009c98:	4aac      	ldr	r2, [pc, #688]	@ (8009f4c <dcd_event_handler+0x2ec>)
 8009c9a:	7813      	ldrb	r3, [r2, #0]
 8009c9c:	f023 0301 	bic.w	r3, r3, #1
 8009ca0:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8009ca2:	4aaa      	ldr	r2, [pc, #680]	@ (8009f4c <dcd_event_handler+0x2ec>)
 8009ca4:	7813      	ldrb	r3, [r2, #0]
 8009ca6:	f023 0302 	bic.w	r3, r3, #2
 8009caa:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8009cac:	4ba7      	ldr	r3, [pc, #668]	@ (8009f4c <dcd_event_handler+0x2ec>)
 8009cae:	2200      	movs	r2, #0
 8009cb0:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8009cb2:	4aa6      	ldr	r2, [pc, #664]	@ (8009f4c <dcd_event_handler+0x2ec>)
 8009cb4:	7813      	ldrb	r3, [r2, #0]
 8009cb6:	f023 0304 	bic.w	r3, r3, #4
 8009cba:	7013      	strb	r3, [r2, #0]
      send = true;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8009cc2:	e15a      	b.n	8009f7a <dcd_event_handler+0x31a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8009cc4:	4ba1      	ldr	r3, [pc, #644]	@ (8009f4c <dcd_event_handler+0x2ec>)
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f000 814e 	beq.w	8009f70 <dcd_event_handler+0x310>
        _usbd_dev.suspended = 1;
 8009cd4:	4a9d      	ldr	r2, [pc, #628]	@ (8009f4c <dcd_event_handler+0x2ec>)
 8009cd6:	7813      	ldrb	r3, [r2, #0]
 8009cd8:	f043 0304 	orr.w	r3, r3, #4
 8009cdc:	7013      	strb	r3, [r2, #0]
        send = true;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8009ce4:	e144      	b.n	8009f70 <dcd_event_handler+0x310>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8009ce6:	4b99      	ldr	r3, [pc, #612]	@ (8009f4c <dcd_event_handler+0x2ec>)
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f000 813f 	beq.w	8009f74 <dcd_event_handler+0x314>
        _usbd_dev.suspended = 0;
 8009cf6:	4a95      	ldr	r2, [pc, #596]	@ (8009f4c <dcd_event_handler+0x2ec>)
 8009cf8:	7813      	ldrb	r3, [r2, #0]
 8009cfa:	f023 0304 	bic.w	r3, r3, #4
 8009cfe:	7013      	strb	r3, [r2, #0]
        send = true;
 8009d00:	2301      	movs	r3, #1
 8009d02:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8009d06:	e135      	b.n	8009f74 <dcd_event_handler+0x314>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8009d0e:	e039      	b.n	8009d84 <dcd_event_handler+0x124>
 8009d10:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8009d14:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 8009d1c:	4b8c      	ldr	r3, [pc, #560]	@ (8009f50 <dcd_event_handler+0x2f0>)
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d207      	bcs.n	8009d38 <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 8009d28:	4b8a      	ldr	r3, [pc, #552]	@ (8009f54 <dcd_event_handler+0x2f4>)
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009d30:	015b      	lsls	r3, r3, #5
 8009d32:	4413      	add	r3, r2
 8009d34:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d36:	e00f      	b.n	8009d58 <dcd_event_handler+0xf8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8009d38:	4b85      	ldr	r3, [pc, #532]	@ (8009f50 <dcd_event_handler+0x2f0>)
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	1c5a      	adds	r2, r3, #1
 8009d3e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009d42:	429a      	cmp	r2, r3
 8009d44:	db08      	blt.n	8009d58 <dcd_event_handler+0xf8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8009d46:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009d4a:	4a81      	ldr	r2, [pc, #516]	@ (8009f50 <dcd_event_handler+0x2f0>)
 8009d4c:	7812      	ldrb	r2, [r2, #0]
 8009d4e:	1a9b      	subs	r3, r3, r2
 8009d50:	015b      	lsls	r3, r3, #5
 8009d52:	4a81      	ldr	r2, [pc, #516]	@ (8009f58 <dcd_event_handler+0x2f8>)
 8009d54:	4413      	add	r3, r2
 8009d56:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 8009d58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 8009d5a:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 8009d5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00b      	beq.n	8009d7a <dcd_event_handler+0x11a>
 8009d62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d64:	69db      	ldr	r3, [r3, #28]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d007      	beq.n	8009d7a <dcd_event_handler+0x11a>
          driver->sof(event->rhport, event->sof.frame_count);
 8009d6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d6c:	69db      	ldr	r3, [r3, #28]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	7810      	ldrb	r0, [r2, #0]
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	6852      	ldr	r2, [r2, #4]
 8009d76:	4611      	mov	r1, r2
 8009d78:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8009d7a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8009d7e:	3301      	adds	r3, #1
 8009d80:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8009d84:	4b72      	ldr	r3, [pc, #456]	@ (8009f50 <dcd_event_handler+0x2f0>)
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	1c5a      	adds	r2, r3, #1
 8009d8a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	dabe      	bge.n	8009d10 <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8009d92:	4b6e      	ldr	r3, [pc, #440]	@ (8009f4c <dcd_event_handler+0x2ec>)
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d05a      	beq.n	8009e56 <dcd_event_handler+0x1f6>
        _usbd_dev.suspended = 0;
 8009da0:	4a6a      	ldr	r2, [pc, #424]	@ (8009f4c <dcd_event_handler+0x2ec>)
 8009da2:	7813      	ldrb	r3, [r2, #0]
 8009da4:	f023 0304 	bic.w	r3, r3, #4
 8009da8:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8009daa:	f107 0314 	add.w	r3, r7, #20
 8009dae:	2200      	movs	r2, #0
 8009db0:	601a      	str	r2, [r3, #0]
 8009db2:	605a      	str	r2, [r3, #4]
 8009db4:	609a      	str	r2, [r3, #8]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	753b      	strb	r3, [r7, #20]
 8009dbc:	2305      	movs	r3, #5
 8009dbe:	757b      	strb	r3, [r7, #21]
 8009dc0:	f107 0314 	add.w	r3, r7, #20
 8009dc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009dc6:	78fb      	ldrb	r3, [r7, #3]
 8009dc8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009dcc:	4b63      	ldr	r3, [pc, #396]	@ (8009f5c <dcd_event_handler+0x2fc>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	667b      	str	r3, [r7, #100]	@ 0x64
 8009dd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8009dd6:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009dda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8009dde:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009de2:	f083 0301 	eor.w	r3, r3, #1
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d003      	beq.n	8009df4 <dcd_event_handler+0x194>
    qhdl->interrupt_set(false);
 8009dec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2000      	movs	r0, #0
 8009df2:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 8009df4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009df6:	3304      	adds	r3, #4
 8009df8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7fe fde9 	bl	80089d2 <tu_fifo_write>
 8009e00:	4603      	mov	r3, r0
 8009e02:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 8009e06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009e0a:	f083 0301 	eor.w	r3, r3, #1
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d003      	beq.n	8009e1c <dcd_event_handler+0x1bc>
    qhdl->interrupt_set(true);
 8009e14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2001      	movs	r0, #1
 8009e1a:	4798      	blx	r3
  }

  return success;
 8009e1c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8009e20:	f083 0301 	eor.w	r3, r3, #1
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d009      	beq.n	8009e3e <dcd_event_handler+0x1de>
 8009e2a:	4b4d      	ldr	r3, [pc, #308]	@ (8009f60 <dcd_event_handler+0x300>)
 8009e2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00c      	beq.n	8009e54 <dcd_event_handler+0x1f4>
 8009e3a:	be00      	bkpt	0x0000
 8009e3c:	e00a      	b.n	8009e54 <dcd_event_handler+0x1f4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8009e3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e40:	7818      	ldrb	r0, [r3, #0]
 8009e42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e44:	785b      	ldrb	r3, [r3, #1]
 8009e46:	4619      	mov	r1, r3
 8009e48:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	f7fe fe55 	bl	8008afc <tud_event_hook_cb>
  return true;
 8009e52:	e000      	b.n	8009e56 <dcd_event_handler+0x1f6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009e54:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8009e56:	4b3d      	ldr	r3, [pc, #244]	@ (8009f4c <dcd_event_handler+0x2ec>)
 8009e58:	78db      	ldrb	r3, [r3, #3]
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e5e:	2300      	movs	r3, #0
 8009e60:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8009e64:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8009e68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	bf14      	ite	ne
 8009e76:	2301      	movne	r3, #1
 8009e78:	2300      	moveq	r3, #0
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d07b      	beq.n	8009f78 <dcd_event_handler+0x318>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 8009e80:	f107 0308 	add.w	r3, r7, #8
 8009e84:	2200      	movs	r2, #0
 8009e86:	601a      	str	r2, [r3, #0]
 8009e88:	605a      	str	r2, [r3, #4]
 8009e8a:	609a      	str	r2, [r3, #8]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	723b      	strb	r3, [r7, #8]
 8009e92:	2303      	movs	r3, #3
 8009e94:	727b      	strb	r3, [r7, #9]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	60fb      	str	r3, [r7, #12]
 8009e9c:	f107 0308 	add.w	r3, r7, #8
 8009ea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ea2:	78fb      	ldrb	r3, [r7, #3]
 8009ea4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009ea8:	4b2c      	ldr	r3, [pc, #176]	@ (8009f5c <dcd_event_handler+0x2fc>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	647b      	str	r3, [r7, #68]	@ 0x44
 8009eae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009eb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009eb2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009eb6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 8009eba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009ebe:	f083 0301 	eor.w	r3, r3, #1
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d003      	beq.n	8009ed0 <dcd_event_handler+0x270>
    qhdl->interrupt_set(false);
 8009ec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2000      	movs	r0, #0
 8009ece:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8009ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ed2:	3304      	adds	r3, #4
 8009ed4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fe fd7b 	bl	80089d2 <tu_fifo_write>
 8009edc:	4603      	mov	r3, r0
 8009ede:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 8009ee2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009ee6:	f083 0301 	eor.w	r3, r3, #1
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d003      	beq.n	8009ef8 <dcd_event_handler+0x298>
    qhdl->interrupt_set(true);
 8009ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2001      	movs	r0, #1
 8009ef6:	4798      	blx	r3
  return success;
 8009ef8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009efc:	f083 0301 	eor.w	r3, r3, #1
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d009      	beq.n	8009f1a <dcd_event_handler+0x2ba>
 8009f06:	4b16      	ldr	r3, [pc, #88]	@ (8009f60 <dcd_event_handler+0x300>)
 8009f08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 0301 	and.w	r3, r3, #1
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d00c      	beq.n	8009f30 <dcd_event_handler+0x2d0>
 8009f16:	be00      	bkpt	0x0000
 8009f18:	e00a      	b.n	8009f30 <dcd_event_handler+0x2d0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8009f1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f1c:	7818      	ldrb	r0, [r3, #0]
 8009f1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f20:	785b      	ldrb	r3, [r3, #1]
 8009f22:	4619      	mov	r1, r3
 8009f24:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009f28:	461a      	mov	r2, r3
 8009f2a:	f7fe fde7 	bl	8008afc <tud_event_hook_cb>
  return true;
 8009f2e:	e000      	b.n	8009f32 <dcd_event_handler+0x2d2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009f30:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 8009f32:	e021      	b.n	8009f78 <dcd_event_handler+0x318>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 8009f34:	4b0b      	ldr	r3, [pc, #44]	@ (8009f64 <dcd_event_handler+0x304>)
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	4b09      	ldr	r3, [pc, #36]	@ (8009f64 <dcd_event_handler+0x304>)
 8009f40:	701a      	strb	r2, [r3, #0]
      send = true;
 8009f42:	2301      	movs	r3, #1
 8009f44:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8009f48:	e017      	b.n	8009f7a <dcd_event_handler+0x31a>
 8009f4a:	bf00      	nop
 8009f4c:	2000170c 	.word	0x2000170c
 8009f50:	20001740 	.word	0x20001740
 8009f54:	2000173c 	.word	0x2000173c
 8009f58:	0800f1fc 	.word	0x0800f1fc
 8009f5c:	20001804 	.word	0x20001804
 8009f60:	e000edf0 	.word	0xe000edf0
 8009f64:	20001738 	.word	0x20001738

    default:
      send = true;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8009f6e:	e004      	b.n	8009f7a <dcd_event_handler+0x31a>
      break;
 8009f70:	bf00      	nop
 8009f72:	e002      	b.n	8009f7a <dcd_event_handler+0x31a>
      break;
 8009f74:	bf00      	nop
 8009f76:	e000      	b.n	8009f7a <dcd_event_handler+0x31a>
      break;
 8009f78:	bf00      	nop
  }

  if (send) {
 8009f7a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d049      	beq.n	800a016 <dcd_event_handler+0x3b6>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f86:	78fb      	ldrb	r3, [r7, #3]
 8009f88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8009f8c:	4b24      	ldr	r3, [pc, #144]	@ (800a020 <dcd_event_handler+0x3c0>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f96:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009f9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 8009f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009fa2:	f083 0301 	eor.w	r3, r3, #1
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d003      	beq.n	8009fb4 <dcd_event_handler+0x354>
    qhdl->interrupt_set(false);
 8009fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8009fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fe fd09 	bl	80089d2 <tu_fifo_write>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 8009fc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009fca:	f083 0301 	eor.w	r3, r3, #1
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d003      	beq.n	8009fdc <dcd_event_handler+0x37c>
    qhdl->interrupt_set(true);
 8009fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2001      	movs	r0, #1
 8009fda:	4798      	blx	r3
  return success;
 8009fdc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009fe0:	f083 0301 	eor.w	r3, r3, #1
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d009      	beq.n	8009ffe <dcd_event_handler+0x39e>
 8009fea:	4b0e      	ldr	r3, [pc, #56]	@ (800a024 <dcd_event_handler+0x3c4>)
 8009fec:	623b      	str	r3, [r7, #32]
 8009fee:	6a3b      	ldr	r3, [r7, #32]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 0301 	and.w	r3, r3, #1
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00c      	beq.n	800a014 <dcd_event_handler+0x3b4>
 8009ffa:	be00      	bkpt	0x0000
 8009ffc:	e00a      	b.n	800a014 <dcd_event_handler+0x3b4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8009ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a000:	7818      	ldrb	r0, [r3, #0]
 800a002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a004:	785b      	ldrb	r3, [r3, #1]
 800a006:	4619      	mov	r1, r3
 800a008:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a00c:	461a      	mov	r2, r3
 800a00e:	f7fe fd75 	bl	8008afc <tud_event_hook_cb>
  return true;
 800a012:	e000      	b.n	800a016 <dcd_event_handler+0x3b6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 800a014:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 800a016:	bf00      	nop
 800a018:	3780      	adds	r7, #128	@ 0x80
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	20001804 	.word	0x20001804
 800a024:	e000edf0 	.word	0xe000edf0

0800a028 <usbd_int_set>:

//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled) {
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	4603      	mov	r3, r0
 800a030:	71fb      	strb	r3, [r7, #7]
  if (enabled) {
 800a032:	79fb      	ldrb	r3, [r7, #7]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d005      	beq.n	800a044 <usbd_int_set+0x1c>
    dcd_int_enable(_usbd_rhport);
 800a038:	4b07      	ldr	r3, [pc, #28]	@ (800a058 <usbd_int_set+0x30>)
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	4618      	mov	r0, r3
 800a03e:	f001 f929 	bl	800b294 <dcd_int_enable>
  } else {
    dcd_int_disable(_usbd_rhport);
  }
}
 800a042:	e004      	b.n	800a04e <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 800a044:	4b04      	ldr	r3, [pc, #16]	@ (800a058 <usbd_int_set+0x30>)
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	4618      	mov	r0, r3
 800a04a:	f001 f94b 	bl	800b2e4 <dcd_int_disable>
}
 800a04e:	bf00      	nop
 800a050:	3708      	adds	r7, #8
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	2000022d 	.word	0x2000022d

0800a05c <usbd_spin_lock>:

void usbd_spin_lock(bool in_isr) {
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	4603      	mov	r3, r0
 800a064:	71fb      	strb	r3, [r7, #7]
 800a066:	4b09      	ldr	r3, [pc, #36]	@ (800a08c <usbd_spin_lock+0x30>)
 800a068:	60fb      	str	r3, [r7, #12]
 800a06a:	79fb      	ldrb	r3, [r7, #7]
 800a06c:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 800a06e:	7afb      	ldrb	r3, [r7, #11]
 800a070:	f083 0301 	eor.w	r3, r3, #1
 800a074:	b2db      	uxtb	r3, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	d003      	beq.n	800a082 <usbd_spin_lock+0x26>
    ctx->interrupt_set(false);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2000      	movs	r0, #0
 800a080:	4798      	blx	r3
}
 800a082:	bf00      	nop
  osal_spin_lock(&_usbd_spin, in_isr);
}
 800a084:	bf00      	nop
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	20000230 	.word	0x20000230

0800a090 <usbd_spin_unlock>:
void usbd_spin_unlock(bool in_isr) {
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	4603      	mov	r3, r0
 800a098:	71fb      	strb	r3, [r7, #7]
 800a09a:	4b09      	ldr	r3, [pc, #36]	@ (800a0c0 <usbd_spin_unlock+0x30>)
 800a09c:	60fb      	str	r3, [r7, #12]
 800a09e:	79fb      	ldrb	r3, [r7, #7]
 800a0a0:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 800a0a2:	7afb      	ldrb	r3, [r7, #11]
 800a0a4:	f083 0301 	eor.w	r3, r3, #1
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d003      	beq.n	800a0b6 <usbd_spin_unlock+0x26>
    ctx->interrupt_set(true);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2001      	movs	r0, #1
 800a0b4:	4798      	blx	r3
}
 800a0b6:	bf00      	nop
  osal_spin_unlock(&_usbd_spin, in_isr);
}
 800a0b8:	bf00      	nop
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	20000230 	.word	0x20000230

0800a0c4 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b08a      	sub	sp, #40	@ 0x28
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6039      	str	r1, [r7, #0]
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	71fb      	strb	r3, [r7, #7]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	71bb      	strb	r3, [r7, #6]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 800a0dc:	2300      	movs	r3, #0
 800a0de:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0e0:	e04d      	b.n	800a17e <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 800a0e6:	6a3b      	ldr	r3, [r7, #32]
 800a0e8:	785b      	ldrb	r3, [r3, #1]
 800a0ea:	2b05      	cmp	r3, #5
 800a0ec:	d108      	bne.n	800a100 <usbd_open_edpt_pair+0x3c>
 800a0ee:	6a3b      	ldr	r3, [r7, #32]
 800a0f0:	78db      	ldrb	r3, [r3, #3]
 800a0f2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	797b      	ldrb	r3, [r7, #5]
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d00a      	beq.n	800a116 <usbd_open_edpt_pair+0x52>
 800a100:	4b23      	ldr	r3, [pc, #140]	@ (800a190 <usbd_open_edpt_pair+0xcc>)
 800a102:	61bb      	str	r3, [r7, #24]
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f003 0301 	and.w	r3, r3, #1
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d000      	beq.n	800a112 <usbd_open_edpt_pair+0x4e>
 800a110:	be00      	bkpt	0x0000
 800a112:	2300      	movs	r3, #0
 800a114:	e038      	b.n	800a188 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800a116:	79fb      	ldrb	r3, [r7, #7]
 800a118:	6a39      	ldr	r1, [r7, #32]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 f83a 	bl	800a194 <usbd_edpt_open>
 800a120:	4603      	mov	r3, r0
 800a122:	f083 0301 	eor.w	r3, r3, #1
 800a126:	b2db      	uxtb	r3, r3
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00a      	beq.n	800a142 <usbd_open_edpt_pair+0x7e>
 800a12c:	4b18      	ldr	r3, [pc, #96]	@ (800a190 <usbd_open_edpt_pair+0xcc>)
 800a12e:	61fb      	str	r3, [r7, #28]
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f003 0301 	and.w	r3, r3, #1
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d000      	beq.n	800a13e <usbd_open_edpt_pair+0x7a>
 800a13c:	be00      	bkpt	0x0000
 800a13e:	2300      	movs	r3, #0
 800a140:	e022      	b.n	800a188 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 800a142:	6a3b      	ldr	r3, [r7, #32]
 800a144:	789b      	ldrb	r3, [r3, #2]
 800a146:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a148:	7dfb      	ldrb	r3, [r7, #23]
 800a14a:	09db      	lsrs	r3, r3, #7
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d104      	bne.n	800a15c <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 800a152:	6a3b      	ldr	r3, [r7, #32]
 800a154:	789a      	ldrb	r2, [r3, #2]
 800a156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a158:	701a      	strb	r2, [r3, #0]
 800a15a:	e003      	b.n	800a164 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 800a15c:	6a3b      	ldr	r3, [r7, #32]
 800a15e:	789a      	ldrb	r2, [r3, #2]
 800a160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a162:	701a      	strb	r2, [r3, #0]
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	461a      	mov	r2, r3
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 800a176:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 800a178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a17a:	3301      	adds	r3, #1
 800a17c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a17e:	79bb      	ldrb	r3, [r7, #6]
 800a180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a182:	429a      	cmp	r2, r3
 800a184:	dbad      	blt.n	800a0e2 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 800a186:	2301      	movs	r3, #1
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3728      	adds	r7, #40	@ 0x28
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	e000edf0 	.word	0xe000edf0

0800a194 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 800a194:	b580      	push	{r7, lr}
 800a196:	b086      	sub	sp, #24
 800a198:	af00      	add	r7, sp, #0
 800a19a:	4603      	mov	r3, r0
 800a19c:	6039      	str	r1, [r7, #0]
 800a19e:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 800a1a0:	4b1c      	ldr	r3, [pc, #112]	@ (800a214 <usbd_edpt_open+0x80>)
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	789b      	ldrb	r3, [r3, #2]
 800a1aa:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a1ac:	7bfb      	ldrb	r3, [r7, #15]
 800a1ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	2b05      	cmp	r3, #5
 800a1b6:	d90a      	bls.n	800a1ce <usbd_edpt_open+0x3a>
 800a1b8:	4b17      	ldr	r3, [pc, #92]	@ (800a218 <usbd_edpt_open+0x84>)
 800a1ba:	613b      	str	r3, [r7, #16]
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f003 0301 	and.w	r3, r3, #1
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d000      	beq.n	800a1ca <usbd_edpt_open+0x36>
 800a1c8:	be00      	bkpt	0x0000
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	e01d      	b.n	800a20a <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 800a1ce:	4b13      	ldr	r3, [pc, #76]	@ (800a21c <usbd_edpt_open+0x88>)
 800a1d0:	789b      	ldrb	r3, [r3, #2]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	6838      	ldr	r0, [r7, #0]
 800a1d8:	f002 fbae 	bl	800c938 <tu_edpt_validate>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	f083 0301 	eor.w	r3, r3, #1
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00a      	beq.n	800a1fe <usbd_edpt_open+0x6a>
 800a1e8:	4b0b      	ldr	r3, [pc, #44]	@ (800a218 <usbd_edpt_open+0x84>)
 800a1ea:	617b      	str	r3, [r7, #20]
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 0301 	and.w	r3, r3, #1
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d000      	beq.n	800a1fa <usbd_edpt_open+0x66>
 800a1f8:	be00      	bkpt	0x0000
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	e005      	b.n	800a20a <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 800a1fe:	79fb      	ldrb	r3, [r7, #7]
 800a200:	6839      	ldr	r1, [r7, #0]
 800a202:	4618      	mov	r0, r3
 800a204:	f001 f992 	bl	800b52c <dcd_edpt_open>
 800a208:	4603      	mov	r3, r0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3718      	adds	r7, #24
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	2000022d 	.word	0x2000022d
 800a218:	e000edf0 	.word	0xe000edf0
 800a21c:	2000170c 	.word	0x2000170c

0800a220 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 800a220:	b580      	push	{r7, lr}
 800a222:	b086      	sub	sp, #24
 800a224:	af00      	add	r7, sp, #0
 800a226:	4603      	mov	r3, r0
 800a228:	460a      	mov	r2, r1
 800a22a:	71fb      	strb	r3, [r7, #7]
 800a22c:	4613      	mov	r3, r2
 800a22e:	71bb      	strb	r3, [r7, #6]
 800a230:	79bb      	ldrb	r3, [r7, #6]
 800a232:	73bb      	strb	r3, [r7, #14]
 800a234:	7bbb      	ldrb	r3, [r7, #14]
 800a236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a23a:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a23c:	75fb      	strb	r3, [r7, #23]
 800a23e:	79bb      	ldrb	r3, [r7, #6]
 800a240:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a242:	7bfb      	ldrb	r3, [r7, #15]
 800a244:	09db      	lsrs	r3, r3, #7
 800a246:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a248:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800a24a:	7dfa      	ldrb	r2, [r7, #23]
 800a24c:	7dbb      	ldrb	r3, [r7, #22]
 800a24e:	0052      	lsls	r2, r2, #1
 800a250:	4413      	add	r3, r2
 800a252:	3320      	adds	r3, #32
 800a254:	4a05      	ldr	r2, [pc, #20]	@ (800a26c <usbd_edpt_claim+0x4c>)
 800a256:	4413      	add	r3, r2
 800a258:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 800a25a:	2100      	movs	r1, #0
 800a25c:	6938      	ldr	r0, [r7, #16]
 800a25e:	f002 fb07 	bl	800c870 <tu_edpt_claim>
 800a262:	4603      	mov	r3, r0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3718      	adds	r7, #24
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	2000170c 	.word	0x2000170c

0800a270 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 800a270:	b580      	push	{r7, lr}
 800a272:	b086      	sub	sp, #24
 800a274:	af00      	add	r7, sp, #0
 800a276:	4603      	mov	r3, r0
 800a278:	460a      	mov	r2, r1
 800a27a:	71fb      	strb	r3, [r7, #7]
 800a27c:	4613      	mov	r3, r2
 800a27e:	71bb      	strb	r3, [r7, #6]
 800a280:	79bb      	ldrb	r3, [r7, #6]
 800a282:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a284:	7bbb      	ldrb	r3, [r7, #14]
 800a286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a28a:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a28c:	75fb      	strb	r3, [r7, #23]
 800a28e:	79bb      	ldrb	r3, [r7, #6]
 800a290:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a292:	7bfb      	ldrb	r3, [r7, #15]
 800a294:	09db      	lsrs	r3, r3, #7
 800a296:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a298:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800a29a:	7dfa      	ldrb	r2, [r7, #23]
 800a29c:	7dbb      	ldrb	r3, [r7, #22]
 800a29e:	0052      	lsls	r2, r2, #1
 800a2a0:	4413      	add	r3, r2
 800a2a2:	3320      	adds	r3, #32
 800a2a4:	4a05      	ldr	r2, [pc, #20]	@ (800a2bc <usbd_edpt_release+0x4c>)
 800a2a6:	4413      	add	r3, r2
 800a2a8:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	6938      	ldr	r0, [r7, #16]
 800a2ae:	f002 fb19 	bl	800c8e4 <tu_edpt_release>
 800a2b2:	4603      	mov	r3, r0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3718      	adds	r7, #24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	2000170c 	.word	0x2000170c

0800a2c0 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	603a      	str	r2, [r7, #0]
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	71fb      	strb	r3, [r7, #7]
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	71bb      	strb	r3, [r7, #6]
 800a2d2:	4613      	mov	r3, r2
 800a2d4:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 800a2d6:	4b32      	ldr	r3, [pc, #200]	@ (800a3a0 <usbd_edpt_xfer+0xe0>)
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	71fb      	strb	r3, [r7, #7]
 800a2dc:	79bb      	ldrb	r3, [r7, #6]
 800a2de:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a2e0:	7abb      	ldrb	r3, [r7, #10]
 800a2e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2e6:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a2e8:	75fb      	strb	r3, [r7, #23]
 800a2ea:	79bb      	ldrb	r3, [r7, #6]
 800a2ec:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a2ee:	7afb      	ldrb	r3, [r7, #11]
 800a2f0:	09db      	lsrs	r3, r3, #7
 800a2f2:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a2f4:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 800a2f6:	7dfa      	ldrb	r2, [r7, #23]
 800a2f8:	7dbb      	ldrb	r3, [r7, #22]
 800a2fa:	492a      	ldr	r1, [pc, #168]	@ (800a3a4 <usbd_edpt_xfer+0xe4>)
 800a2fc:	0052      	lsls	r2, r2, #1
 800a2fe:	440a      	add	r2, r1
 800a300:	4413      	add	r3, r2
 800a302:	3320      	adds	r3, #32
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d00a      	beq.n	800a326 <usbd_edpt_xfer+0x66>
 800a310:	4b25      	ldr	r3, [pc, #148]	@ (800a3a8 <usbd_edpt_xfer+0xe8>)
 800a312:	60fb      	str	r3, [r7, #12]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 0301 	and.w	r3, r3, #1
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d000      	beq.n	800a322 <usbd_edpt_xfer+0x62>
 800a320:	be00      	bkpt	0x0000
 800a322:	2300      	movs	r3, #0
 800a324:	e038      	b.n	800a398 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800a326:	7dfa      	ldrb	r2, [r7, #23]
 800a328:	7dbb      	ldrb	r3, [r7, #22]
 800a32a:	491e      	ldr	r1, [pc, #120]	@ (800a3a4 <usbd_edpt_xfer+0xe4>)
 800a32c:	0052      	lsls	r2, r2, #1
 800a32e:	440a      	add	r2, r1
 800a330:	4413      	add	r3, r2
 800a332:	f103 0220 	add.w	r2, r3, #32
 800a336:	7813      	ldrb	r3, [r2, #0]
 800a338:	f043 0301 	orr.w	r3, r3, #1
 800a33c:	7013      	strb	r3, [r2, #0]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 800a33e:	88bb      	ldrh	r3, [r7, #4]
 800a340:	79b9      	ldrb	r1, [r7, #6]
 800a342:	79f8      	ldrb	r0, [r7, #7]
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	f001 f9b5 	bl	800b6b4 <dcd_edpt_xfer>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d001      	beq.n	800a354 <usbd_edpt_xfer+0x94>
    return true;
 800a350:	2301      	movs	r3, #1
 800a352:	e021      	b.n	800a398 <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 800a354:	7dfa      	ldrb	r2, [r7, #23]
 800a356:	7dbb      	ldrb	r3, [r7, #22]
 800a358:	4912      	ldr	r1, [pc, #72]	@ (800a3a4 <usbd_edpt_xfer+0xe4>)
 800a35a:	0052      	lsls	r2, r2, #1
 800a35c:	440a      	add	r2, r1
 800a35e:	4413      	add	r3, r2
 800a360:	f103 0220 	add.w	r2, r3, #32
 800a364:	7813      	ldrb	r3, [r2, #0]
 800a366:	f023 0301 	bic.w	r3, r3, #1
 800a36a:	7013      	strb	r3, [r2, #0]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 800a36c:	7dfa      	ldrb	r2, [r7, #23]
 800a36e:	7dbb      	ldrb	r3, [r7, #22]
 800a370:	490c      	ldr	r1, [pc, #48]	@ (800a3a4 <usbd_edpt_xfer+0xe4>)
 800a372:	0052      	lsls	r2, r2, #1
 800a374:	440a      	add	r2, r1
 800a376:	4413      	add	r3, r2
 800a378:	f103 0220 	add.w	r2, r3, #32
 800a37c:	7813      	ldrb	r3, [r2, #0]
 800a37e:	f023 0304 	bic.w	r3, r3, #4
 800a382:	7013      	strb	r3, [r2, #0]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 800a384:	4b08      	ldr	r3, [pc, #32]	@ (800a3a8 <usbd_edpt_xfer+0xe8>)
 800a386:	613b      	str	r3, [r7, #16]
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f003 0301 	and.w	r3, r3, #1
 800a390:	2b00      	cmp	r3, #0
 800a392:	d000      	beq.n	800a396 <usbd_edpt_xfer+0xd6>
 800a394:	be00      	bkpt	0x0000
    return false;
 800a396:	2300      	movs	r3, #0
  }
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3718      	adds	r7, #24
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	2000022d 	.word	0x2000022d
 800a3a4:	2000170c 	.word	0x2000170c
 800a3a8:	e000edf0 	.word	0xe000edf0

0800a3ac <usbd_edpt_busy>:
    TU_BREAKPOINT();
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr) {
 800a3ac:	b480      	push	{r7}
 800a3ae:	b085      	sub	sp, #20
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	460a      	mov	r2, r1
 800a3b6:	71fb      	strb	r3, [r7, #7]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	71bb      	strb	r3, [r7, #6]
 800a3bc:	79bb      	ldrb	r3, [r7, #6]
 800a3be:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a3c0:	7b3b      	ldrb	r3, [r7, #12]
 800a3c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3c6:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a3c8:	73fb      	strb	r3, [r7, #15]
 800a3ca:	79bb      	ldrb	r3, [r7, #6]
 800a3cc:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a3ce:	7b7b      	ldrb	r3, [r7, #13]
 800a3d0:	09db      	lsrs	r3, r3, #7
 800a3d2:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a3d4:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 800a3d6:	7bfa      	ldrb	r2, [r7, #15]
 800a3d8:	7bbb      	ldrb	r3, [r7, #14]
 800a3da:	490a      	ldr	r1, [pc, #40]	@ (800a404 <usbd_edpt_busy+0x58>)
 800a3dc:	0052      	lsls	r2, r2, #1
 800a3de:	440a      	add	r2, r1
 800a3e0:	4413      	add	r3, r2
 800a3e2:	3320      	adds	r3, #32
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	bf14      	ite	ne
 800a3f0:	2301      	movne	r3, #1
 800a3f2:	2300      	moveq	r3, #0
 800a3f4:	b2db      	uxtb	r3, r3
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	2000170c 	.word	0x2000170c

0800a408 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	4603      	mov	r3, r0
 800a410:	460a      	mov	r2, r1
 800a412:	71fb      	strb	r3, [r7, #7]
 800a414:	4613      	mov	r3, r2
 800a416:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 800a418:	4b18      	ldr	r3, [pc, #96]	@ (800a47c <usbd_edpt_stall+0x74>)
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	71fb      	strb	r3, [r7, #7]
 800a41e:	79bb      	ldrb	r3, [r7, #6]
 800a420:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a422:	7b3b      	ldrb	r3, [r7, #12]
 800a424:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a428:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a42a:	73fb      	strb	r3, [r7, #15]
 800a42c:	79bb      	ldrb	r3, [r7, #6]
 800a42e:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a430:	7b7b      	ldrb	r3, [r7, #13]
 800a432:	09db      	lsrs	r3, r3, #7
 800a434:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a436:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 800a438:	79ba      	ldrb	r2, [r7, #6]
 800a43a:	79fb      	ldrb	r3, [r7, #7]
 800a43c:	4611      	mov	r1, r2
 800a43e:	4618      	mov	r0, r3
 800a440:	f001 f988 	bl	800b754 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 800a444:	7bfa      	ldrb	r2, [r7, #15]
 800a446:	7bbb      	ldrb	r3, [r7, #14]
 800a448:	490d      	ldr	r1, [pc, #52]	@ (800a480 <usbd_edpt_stall+0x78>)
 800a44a:	0052      	lsls	r2, r2, #1
 800a44c:	440a      	add	r2, r1
 800a44e:	4413      	add	r3, r2
 800a450:	f103 0220 	add.w	r2, r3, #32
 800a454:	7813      	ldrb	r3, [r2, #0]
 800a456:	f043 0302 	orr.w	r3, r3, #2
 800a45a:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800a45c:	7bfa      	ldrb	r2, [r7, #15]
 800a45e:	7bbb      	ldrb	r3, [r7, #14]
 800a460:	4907      	ldr	r1, [pc, #28]	@ (800a480 <usbd_edpt_stall+0x78>)
 800a462:	0052      	lsls	r2, r2, #1
 800a464:	440a      	add	r2, r1
 800a466:	4413      	add	r3, r2
 800a468:	f103 0220 	add.w	r2, r3, #32
 800a46c:	7813      	ldrb	r3, [r2, #0]
 800a46e:	f043 0301 	orr.w	r3, r3, #1
 800a472:	7013      	strb	r3, [r2, #0]
}
 800a474:	bf00      	nop
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	2000022d 	.word	0x2000022d
 800a480:	2000170c 	.word	0x2000170c

0800a484 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	4603      	mov	r3, r0
 800a48c:	460a      	mov	r2, r1
 800a48e:	71fb      	strb	r3, [r7, #7]
 800a490:	4613      	mov	r3, r2
 800a492:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 800a494:	4b18      	ldr	r3, [pc, #96]	@ (800a4f8 <usbd_edpt_clear_stall+0x74>)
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	71fb      	strb	r3, [r7, #7]
 800a49a:	79bb      	ldrb	r3, [r7, #6]
 800a49c:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a49e:	7b3b      	ldrb	r3, [r7, #12]
 800a4a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4a4:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a4a6:	73fb      	strb	r3, [r7, #15]
 800a4a8:	79bb      	ldrb	r3, [r7, #6]
 800a4aa:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a4ac:	7b7b      	ldrb	r3, [r7, #13]
 800a4ae:	09db      	lsrs	r3, r3, #7
 800a4b0:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a4b2:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 800a4b4:	79ba      	ldrb	r2, [r7, #6]
 800a4b6:	79fb      	ldrb	r3, [r7, #7]
 800a4b8:	4611      	mov	r1, r2
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f001 f980 	bl	800b7c0 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 800a4c0:	7bfa      	ldrb	r2, [r7, #15]
 800a4c2:	7bbb      	ldrb	r3, [r7, #14]
 800a4c4:	490d      	ldr	r1, [pc, #52]	@ (800a4fc <usbd_edpt_clear_stall+0x78>)
 800a4c6:	0052      	lsls	r2, r2, #1
 800a4c8:	440a      	add	r2, r1
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f103 0220 	add.w	r2, r3, #32
 800a4d0:	7813      	ldrb	r3, [r2, #0]
 800a4d2:	f023 0302 	bic.w	r3, r3, #2
 800a4d6:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 800a4d8:	7bfa      	ldrb	r2, [r7, #15]
 800a4da:	7bbb      	ldrb	r3, [r7, #14]
 800a4dc:	4907      	ldr	r1, [pc, #28]	@ (800a4fc <usbd_edpt_clear_stall+0x78>)
 800a4de:	0052      	lsls	r2, r2, #1
 800a4e0:	440a      	add	r2, r1
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f103 0220 	add.w	r2, r3, #32
 800a4e8:	7813      	ldrb	r3, [r2, #0]
 800a4ea:	f023 0301 	bic.w	r3, r3, #1
 800a4ee:	7013      	strb	r3, [r2, #0]
}
 800a4f0:	bf00      	nop
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	2000022d 	.word	0x2000022d
 800a4fc:	2000170c 	.word	0x2000170c

0800a500 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	4603      	mov	r3, r0
 800a508:	460a      	mov	r2, r1
 800a50a:	71fb      	strb	r3, [r7, #7]
 800a50c:	4613      	mov	r3, r2
 800a50e:	71bb      	strb	r3, [r7, #6]
 800a510:	79bb      	ldrb	r3, [r7, #6]
 800a512:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a514:	7b3b      	ldrb	r3, [r7, #12]
 800a516:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a51a:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a51c:	73fb      	strb	r3, [r7, #15]
 800a51e:	79bb      	ldrb	r3, [r7, #6]
 800a520:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a522:	7b7b      	ldrb	r3, [r7, #13]
 800a524:	09db      	lsrs	r3, r3, #7
 800a526:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a528:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 800a52a:	7bfa      	ldrb	r2, [r7, #15]
 800a52c:	7bbb      	ldrb	r3, [r7, #14]
 800a52e:	490a      	ldr	r1, [pc, #40]	@ (800a558 <usbd_edpt_stalled+0x58>)
 800a530:	0052      	lsls	r2, r2, #1
 800a532:	440a      	add	r2, r1
 800a534:	4413      	add	r3, r2
 800a536:	3320      	adds	r3, #32
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	2b00      	cmp	r3, #0
 800a542:	bf14      	ite	ne
 800a544:	2301      	movne	r3, #1
 800a546:	2300      	moveq	r3, #0
 800a548:	b2db      	uxtb	r3, r3
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3714      	adds	r7, #20
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop
 800a558:	2000170c 	.word	0x2000170c

0800a55c <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, const tusb_control_request_t* request) {
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	4603      	mov	r3, r0
 800a564:	6039      	str	r1, [r7, #0]
 800a566:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 800a568:	bf00      	nop
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	4603      	mov	r3, r0
 800a57c:	6039      	str	r1, [r7, #0]
 800a57e:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d001      	beq.n	800a592 <status_stage_xact+0x1e>
 800a58e:	2300      	movs	r3, #0
 800a590:	e000      	b.n	800a594 <status_stage_xact+0x20>
 800a592:	2380      	movs	r3, #128	@ 0x80
 800a594:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 800a596:	7bf9      	ldrb	r1, [r7, #15]
 800a598:	79f8      	ldrb	r0, [r7, #7]
 800a59a:	2300      	movs	r3, #0
 800a59c:	2200      	movs	r2, #0
 800a59e:	f7ff fe8f 	bl	800a2c0 <usbd_edpt_xfer>
 800a5a2:	4603      	mov	r3, r0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	6039      	str	r1, [r7, #0]
 800a5b6:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 800a5b8:	4b0b      	ldr	r3, [pc, #44]	@ (800a5e8 <tud_control_status+0x3c>)
 800a5ba:	683a      	ldr	r2, [r7, #0]
 800a5bc:	6810      	ldr	r0, [r2, #0]
 800a5be:	6851      	ldr	r1, [r2, #4]
 800a5c0:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800a5c2:	4b09      	ldr	r3, [pc, #36]	@ (800a5e8 <tud_control_status+0x3c>)
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800a5c8:	4b07      	ldr	r3, [pc, #28]	@ (800a5e8 <tud_control_status+0x3c>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800a5ce:	4b06      	ldr	r3, [pc, #24]	@ (800a5e8 <tud_control_status+0x3c>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 800a5d4:	79fb      	ldrb	r3, [r7, #7]
 800a5d6:	6839      	ldr	r1, [r7, #0]
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7ff ffcb 	bl	800a574 <status_stage_xact>
 800a5de:	4603      	mov	r3, r0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	20001808 	.word	0x20001808

0800a5ec <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b088      	sub	sp, #32
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 800a5f6:	4b24      	ldr	r3, [pc, #144]	@ (800a688 <data_stage_xact+0x9c>)
 800a5f8:	899a      	ldrh	r2, [r3, #12]
 800a5fa:	4b23      	ldr	r3, [pc, #140]	@ (800a688 <data_stage_xact+0x9c>)
 800a5fc:	89db      	ldrh	r3, [r3, #14]
 800a5fe:	1ad3      	subs	r3, r2, r3
 800a600:	b29b      	uxth	r3, r3
 800a602:	837b      	strh	r3, [r7, #26]
 800a604:	2340      	movs	r3, #64	@ 0x40
 800a606:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a608:	8b7a      	ldrh	r2, [r7, #26]
 800a60a:	8b3b      	ldrh	r3, [r7, #24]
 800a60c:	4293      	cmp	r3, r2
 800a60e:	bf28      	it	cs
 800a610:	4613      	movcs	r3, r2
 800a612:	b29b      	uxth	r3, r3
 800a614:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 800a616:	2300      	movs	r3, #0
 800a618:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 800a61a:	4b1b      	ldr	r3, [pc, #108]	@ (800a688 <data_stage_xact+0x9c>)
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a622:	b2db      	uxtb	r3, r3
 800a624:	2b00      	cmp	r3, #0
 800a626:	d01e      	beq.n	800a666 <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 800a628:	2380      	movs	r3, #128	@ 0x80
 800a62a:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 800a62c:	8bbb      	ldrh	r3, [r7, #28]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d019      	beq.n	800a666 <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 800a632:	4b15      	ldr	r3, [pc, #84]	@ (800a688 <data_stage_xact+0x9c>)
 800a634:	689a      	ldr	r2, [r3, #8]
 800a636:	8bbb      	ldrh	r3, [r7, #28]
 800a638:	4914      	ldr	r1, [pc, #80]	@ (800a68c <data_stage_xact+0xa0>)
 800a63a:	6179      	str	r1, [r7, #20]
 800a63c:	2140      	movs	r1, #64	@ 0x40
 800a63e:	6139      	str	r1, [r7, #16]
 800a640:	60fa      	str	r2, [r7, #12]
 800a642:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 800a644:	693a      	ldr	r2, [r7, #16]
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d202      	bcs.n	800a652 <data_stage_xact+0x66>
    return -1;
 800a64c:	f04f 33ff 	mov.w	r3, #4294967295
 800a650:	e005      	b.n	800a65e <data_stage_xact+0x72>
  memcpy(dest, src, count);
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	68f9      	ldr	r1, [r7, #12]
 800a656:	6978      	ldr	r0, [r7, #20]
 800a658:	f002 fd0b 	bl	800d072 <memcpy>
  return 0;
 800a65c:	2300      	movs	r3, #0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d001      	beq.n	800a666 <data_stage_xact+0x7a>
 800a662:	2300      	movs	r3, #0
 800a664:	e00b      	b.n	800a67e <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 800a666:	8bbb      	ldrh	r3, [r7, #28]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d001      	beq.n	800a670 <data_stage_xact+0x84>
 800a66c:	4a07      	ldr	r2, [pc, #28]	@ (800a68c <data_stage_xact+0xa0>)
 800a66e:	e000      	b.n	800a672 <data_stage_xact+0x86>
 800a670:	2200      	movs	r2, #0
 800a672:	8bbb      	ldrh	r3, [r7, #28]
 800a674:	7ff9      	ldrb	r1, [r7, #31]
 800a676:	79f8      	ldrb	r0, [r7, #7]
 800a678:	f7ff fe22 	bl	800a2c0 <usbd_edpt_xfer>
 800a67c:	4603      	mov	r3, r0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3720      	adds	r7, #32
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	20001808 	.word	0x20001808
 800a68c:	2000181c 	.word	0x2000181c

0800a690 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 800a690:	b580      	push	{r7, lr}
 800a692:	b088      	sub	sp, #32
 800a694:	af00      	add	r7, sp, #0
 800a696:	60b9      	str	r1, [r7, #8]
 800a698:	607a      	str	r2, [r7, #4]
 800a69a:	461a      	mov	r2, r3
 800a69c:	4603      	mov	r3, r0
 800a69e:	73fb      	strb	r3, [r7, #15]
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 800a6a4:	4b30      	ldr	r3, [pc, #192]	@ (800a768 <tud_control_xfer+0xd8>)
 800a6a6:	68ba      	ldr	r2, [r7, #8]
 800a6a8:	6810      	ldr	r0, [r2, #0]
 800a6aa:	6851      	ldr	r1, [r2, #4]
 800a6ac:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 800a6ae:	4a2e      	ldr	r2, [pc, #184]	@ (800a768 <tud_control_xfer+0xd8>)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 800a6b4:	4b2c      	ldr	r3, [pc, #176]	@ (800a768 <tud_control_xfer+0xd8>)
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	88db      	ldrh	r3, [r3, #6]
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	89bb      	ldrh	r3, [r7, #12]
 800a6c2:	827b      	strh	r3, [r7, #18]
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a6c8:	8a7a      	ldrh	r2, [r7, #18]
 800a6ca:	8a3b      	ldrh	r3, [r7, #16]
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	bf28      	it	cs
 800a6d0:	4613      	movcs	r3, r2
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	4b24      	ldr	r3, [pc, #144]	@ (800a768 <tud_control_xfer+0xd8>)
 800a6d6:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	88db      	ldrh	r3, [r3, #6]
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d026      	beq.n	800a730 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 800a6e2:	4b21      	ldr	r3, [pc, #132]	@ (800a768 <tud_control_xfer+0xd8>)
 800a6e4:	899b      	ldrh	r3, [r3, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d00d      	beq.n	800a706 <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10a      	bne.n	800a706 <tud_control_xfer+0x76>
 800a6f0:	4b1e      	ldr	r3, [pc, #120]	@ (800a76c <tud_control_xfer+0xdc>)
 800a6f2:	61bb      	str	r3, [r7, #24]
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f003 0301 	and.w	r3, r3, #1
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d000      	beq.n	800a702 <tud_control_xfer+0x72>
 800a700:	be00      	bkpt	0x0000
 800a702:	2300      	movs	r3, #0
 800a704:	e02b      	b.n	800a75e <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 800a706:	7bfb      	ldrb	r3, [r7, #15]
 800a708:	4618      	mov	r0, r3
 800a70a:	f7ff ff6f 	bl	800a5ec <data_stage_xact>
 800a70e:	4603      	mov	r3, r0
 800a710:	f083 0301 	eor.w	r3, r3, #1
 800a714:	b2db      	uxtb	r3, r3
 800a716:	2b00      	cmp	r3, #0
 800a718:	d020      	beq.n	800a75c <tud_control_xfer+0xcc>
 800a71a:	4b14      	ldr	r3, [pc, #80]	@ (800a76c <tud_control_xfer+0xdc>)
 800a71c:	617b      	str	r3, [r7, #20]
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 0301 	and.w	r3, r3, #1
 800a726:	2b00      	cmp	r3, #0
 800a728:	d000      	beq.n	800a72c <tud_control_xfer+0x9c>
 800a72a:	be00      	bkpt	0x0000
 800a72c:	2300      	movs	r3, #0
 800a72e:	e016      	b.n	800a75e <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 800a730:	7bfb      	ldrb	r3, [r7, #15]
 800a732:	68b9      	ldr	r1, [r7, #8]
 800a734:	4618      	mov	r0, r3
 800a736:	f7ff ff1d 	bl	800a574 <status_stage_xact>
 800a73a:	4603      	mov	r3, r0
 800a73c:	f083 0301 	eor.w	r3, r3, #1
 800a740:	b2db      	uxtb	r3, r3
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00a      	beq.n	800a75c <tud_control_xfer+0xcc>
 800a746:	4b09      	ldr	r3, [pc, #36]	@ (800a76c <tud_control_xfer+0xdc>)
 800a748:	61fb      	str	r3, [r7, #28]
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 0301 	and.w	r3, r3, #1
 800a752:	2b00      	cmp	r3, #0
 800a754:	d000      	beq.n	800a758 <tud_control_xfer+0xc8>
 800a756:	be00      	bkpt	0x0000
 800a758:	2300      	movs	r3, #0
 800a75a:	e000      	b.n	800a75e <tud_control_xfer+0xce>
  }

  return true;
 800a75c:	2301      	movs	r3, #1
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3720      	adds	r7, #32
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	20001808 	.word	0x20001808
 800a76c:	e000edf0 	.word	0xe000edf0

0800a770 <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 800a770:	b580      	push	{r7, lr}
 800a772:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 800a774:	2214      	movs	r2, #20
 800a776:	2100      	movs	r1, #0
 800a778:	4802      	ldr	r0, [pc, #8]	@ (800a784 <usbd_control_reset+0x14>)
 800a77a:	f002 fba2 	bl	800cec2 <memset>
}
 800a77e:	bf00      	nop
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	20001808 	.word	0x20001808

0800a788 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 800a790:	4a04      	ldr	r2, [pc, #16]	@ (800a7a4 <usbd_control_set_complete_callback+0x1c>)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6113      	str	r3, [r2, #16]
}
 800a796:	bf00      	nop
 800a798:	370c      	adds	r7, #12
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	20001808 	.word	0x20001808

0800a7a8 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 800a7b0:	4b09      	ldr	r3, [pc, #36]	@ (800a7d8 <usbd_control_set_request+0x30>)
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	6810      	ldr	r0, [r2, #0]
 800a7b6:	6851      	ldr	r1, [r2, #4]
 800a7b8:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800a7ba:	4b07      	ldr	r3, [pc, #28]	@ (800a7d8 <usbd_control_set_request+0x30>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800a7c0:	4b05      	ldr	r3, [pc, #20]	@ (800a7d8 <usbd_control_set_request+0x30>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800a7c6:	4b04      	ldr	r3, [pc, #16]	@ (800a7d8 <usbd_control_set_request+0x30>)
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	819a      	strh	r2, [r3, #12]
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr
 800a7d8:	20001808 	.word	0x20001808

0800a7dc <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b088      	sub	sp, #32
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	603b      	str	r3, [r7, #0]
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	71fb      	strb	r3, [r7, #7]
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	71bb      	strb	r3, [r7, #6]
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	717b      	strb	r3, [r7, #5]
 800a7f0:	79bb      	ldrb	r3, [r7, #6]
 800a7f2:	73fb      	strb	r3, [r7, #15]
 800a7f4:	7bfb      	ldrb	r3, [r7, #15]
 800a7f6:	09db      	lsrs	r3, r3, #7
 800a7f8:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 800a7fa:	4a4f      	ldr	r2, [pc, #316]	@ (800a938 <usbd_control_xfer_cb+0x15c>)
 800a7fc:	7812      	ldrb	r2, [r2, #0]
 800a7fe:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 800a802:	b2d2      	uxtb	r2, r2
 800a804:	4293      	cmp	r3, r2
 800a806:	d01e      	beq.n	800a846 <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00a      	beq.n	800a824 <usbd_control_xfer_cb+0x48>
 800a80e:	4b4b      	ldr	r3, [pc, #300]	@ (800a93c <usbd_control_xfer_cb+0x160>)
 800a810:	613b      	str	r3, [r7, #16]
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f003 0301 	and.w	r3, r3, #1
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d000      	beq.n	800a820 <usbd_control_xfer_cb+0x44>
 800a81e:	be00      	bkpt	0x0000
 800a820:	2300      	movs	r3, #0
 800a822:	e084      	b.n	800a92e <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 800a824:	79fb      	ldrb	r3, [r7, #7]
 800a826:	4944      	ldr	r1, [pc, #272]	@ (800a938 <usbd_control_xfer_cb+0x15c>)
 800a828:	4618      	mov	r0, r3
 800a82a:	f7ff fe97 	bl	800a55c <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 800a82e:	4b42      	ldr	r3, [pc, #264]	@ (800a938 <usbd_control_xfer_cb+0x15c>)
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d005      	beq.n	800a842 <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 800a836:	4b40      	ldr	r3, [pc, #256]	@ (800a938 <usbd_control_xfer_cb+0x15c>)
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	79f8      	ldrb	r0, [r7, #7]
 800a83c:	4a3e      	ldr	r2, [pc, #248]	@ (800a938 <usbd_control_xfer_cb+0x15c>)
 800a83e:	2103      	movs	r1, #3
 800a840:	4798      	blx	r3
    }

    return true;
 800a842:	2301      	movs	r3, #1
 800a844:	e073      	b.n	800a92e <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 800a846:	4b3c      	ldr	r3, [pc, #240]	@ (800a938 <usbd_control_xfer_cb+0x15c>)
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10c      	bne.n	800a86e <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 800a854:	4b38      	ldr	r3, [pc, #224]	@ (800a938 <usbd_control_xfer_cb+0x15c>)
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d101      	bne.n	800a860 <usbd_control_xfer_cb+0x84>
 800a85c:	2300      	movs	r3, #0
 800a85e:	e066      	b.n	800a92e <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 800a860:	4b35      	ldr	r3, [pc, #212]	@ (800a938 <usbd_control_xfer_cb+0x15c>)
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	683a      	ldr	r2, [r7, #0]
 800a866:	4936      	ldr	r1, [pc, #216]	@ (800a940 <usbd_control_xfer_cb+0x164>)
 800a868:	4618      	mov	r0, r3
 800a86a:	f002 fc02 	bl	800d072 <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 800a86e:	4b32      	ldr	r3, [pc, #200]	@ (800a938 <usbd_control_xfer_cb+0x15c>)
 800a870:	89da      	ldrh	r2, [r3, #14]
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	b29b      	uxth	r3, r3
 800a876:	4413      	add	r3, r2
 800a878:	b29a      	uxth	r2, r3
 800a87a:	4b2f      	ldr	r3, [pc, #188]	@ (800a938 <usbd_control_xfer_cb+0x15c>)
 800a87c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 800a87e:	4b2e      	ldr	r3, [pc, #184]	@ (800a938 <usbd_control_xfer_cb+0x15c>)
 800a880:	689a      	ldr	r2, [r3, #8]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	4413      	add	r3, r2
 800a886:	4a2c      	ldr	r2, [pc, #176]	@ (800a938 <usbd_control_xfer_cb+0x15c>)
 800a888:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 800a88a:	4b2b      	ldr	r3, [pc, #172]	@ (800a938 <usbd_control_xfer_cb+0x15c>)
 800a88c:	88da      	ldrh	r2, [r3, #6]
 800a88e:	4b2a      	ldr	r3, [pc, #168]	@ (800a938 <usbd_control_xfer_cb+0x15c>)
 800a890:	89db      	ldrh	r3, [r3, #14]
 800a892:	429a      	cmp	r2, r3
 800a894:	d002      	beq.n	800a89c <usbd_control_xfer_cb+0xc0>
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	2b3f      	cmp	r3, #63	@ 0x3f
 800a89a:	d831      	bhi.n	800a900 <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 800a89c:	2301      	movs	r3, #1
 800a89e:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 800a8a0:	4b25      	ldr	r3, [pc, #148]	@ (800a938 <usbd_control_xfer_cb+0x15c>)
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d007      	beq.n	800a8b8 <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 800a8a8:	4b23      	ldr	r3, [pc, #140]	@ (800a938 <usbd_control_xfer_cb+0x15c>)
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	79f8      	ldrb	r0, [r7, #7]
 800a8ae:	4a22      	ldr	r2, [pc, #136]	@ (800a938 <usbd_control_xfer_cb+0x15c>)
 800a8b0:	2102      	movs	r1, #2
 800a8b2:	4798      	blx	r3
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 800a8b8:	7ffb      	ldrb	r3, [r7, #31]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d015      	beq.n	800a8ea <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 800a8be:	79fb      	ldrb	r3, [r7, #7]
 800a8c0:	491d      	ldr	r1, [pc, #116]	@ (800a938 <usbd_control_xfer_cb+0x15c>)
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7ff fe56 	bl	800a574 <status_stage_xact>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	f083 0301 	eor.w	r3, r3, #1
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d02a      	beq.n	800a92a <usbd_control_xfer_cb+0x14e>
 800a8d4:	4b19      	ldr	r3, [pc, #100]	@ (800a93c <usbd_control_xfer_cb+0x160>)
 800a8d6:	617b      	str	r3, [r7, #20]
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f003 0301 	and.w	r3, r3, #1
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d000      	beq.n	800a8e6 <usbd_control_xfer_cb+0x10a>
 800a8e4:	be00      	bkpt	0x0000
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	e021      	b.n	800a92e <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 800a8ea:	79fb      	ldrb	r3, [r7, #7]
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f000 ff30 	bl	800b754 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 800a8f4:	79fb      	ldrb	r3, [r7, #7]
 800a8f6:	2180      	movs	r1, #128	@ 0x80
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f000 ff2b 	bl	800b754 <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 800a8fe:	e014      	b.n	800a92a <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 800a900:	79fb      	ldrb	r3, [r7, #7]
 800a902:	4618      	mov	r0, r3
 800a904:	f7ff fe72 	bl	800a5ec <data_stage_xact>
 800a908:	4603      	mov	r3, r0
 800a90a:	f083 0301 	eor.w	r3, r3, #1
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	2b00      	cmp	r3, #0
 800a912:	d00b      	beq.n	800a92c <usbd_control_xfer_cb+0x150>
 800a914:	4b09      	ldr	r3, [pc, #36]	@ (800a93c <usbd_control_xfer_cb+0x160>)
 800a916:	61bb      	str	r3, [r7, #24]
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f003 0301 	and.w	r3, r3, #1
 800a920:	2b00      	cmp	r3, #0
 800a922:	d000      	beq.n	800a926 <usbd_control_xfer_cb+0x14a>
 800a924:	be00      	bkpt	0x0000
 800a926:	2300      	movs	r3, #0
 800a928:	e001      	b.n	800a92e <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 800a92a:	bf00      	nop
  }

  return true;
 800a92c:	2301      	movs	r3, #1
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3720      	adds	r7, #32
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	20001808 	.word	0x20001808
 800a93c:	e000edf0 	.word	0xe000edf0
 800a940:	2000181c 	.word	0x2000181c

0800a944 <__NVIC_EnableIRQ>:
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a94e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a952:	2b00      	cmp	r3, #0
 800a954:	db0b      	blt.n	800a96e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a956:	79fb      	ldrb	r3, [r7, #7]
 800a958:	f003 021f 	and.w	r2, r3, #31
 800a95c:	4907      	ldr	r1, [pc, #28]	@ (800a97c <__NVIC_EnableIRQ+0x38>)
 800a95e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a962:	095b      	lsrs	r3, r3, #5
 800a964:	2001      	movs	r0, #1
 800a966:	fa00 f202 	lsl.w	r2, r0, r2
 800a96a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a96e:	bf00      	nop
 800a970:	370c      	adds	r7, #12
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	e000e100 	.word	0xe000e100

0800a980 <__NVIC_DisableIRQ>:
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	4603      	mov	r3, r0
 800a988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a98a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	db12      	blt.n	800a9b8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a992:	79fb      	ldrb	r3, [r7, #7]
 800a994:	f003 021f 	and.w	r2, r3, #31
 800a998:	490a      	ldr	r1, [pc, #40]	@ (800a9c4 <__NVIC_DisableIRQ+0x44>)
 800a99a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a99e:	095b      	lsrs	r3, r3, #5
 800a9a0:	2001      	movs	r0, #1
 800a9a2:	fa00 f202 	lsl.w	r2, r0, r2
 800a9a6:	3320      	adds	r3, #32
 800a9a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a9ac:	f3bf 8f4f 	dsb	sy
}
 800a9b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a9b2:	f3bf 8f6f 	isb	sy
}
 800a9b6:	bf00      	nop
}
 800a9b8:	bf00      	nop
 800a9ba:	370c      	adds	r7, #12
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr
 800a9c4:	e000e100 	.word	0xe000e100

0800a9c8 <dma_setup_prepare>:
  // Internal DMA only
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	71fb      	strb	r3, [r7, #7]
 800a9d2:	79fb      	ldrb	r3, [r7, #7]
 800a9d4:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a9d6:	7afb      	ldrb	r3, [r7, #11]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d001      	beq.n	800a9e0 <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a9e0:	7afb      	ldrb	r3, [r7, #11]
 800a9e2:	4a13      	ldr	r2, [pc, #76]	@ (800aa30 <dma_setup_prepare+0x68>)
 800a9e4:	011b      	lsls	r3, r3, #4
 800a9e6:	4413      	add	r3, r2
 800a9e8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a9ea:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9f0:	4a10      	ldr	r2, [pc, #64]	@ (800aa34 <dma_setup_prepare+0x6c>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d904      	bls.n	800aa00 <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	db10      	blt.n	800aa22 <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	4a0d      	ldr	r2, [pc, #52]	@ (800aa38 <dma_setup_prepare+0x70>)
 800aa04:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 800aa08:	4a0c      	ldr	r2, [pc, #48]	@ (800aa3c <dma_setup_prepare+0x74>)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800aa16:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 800aa20:	e000      	b.n	800aa24 <dma_setup_prepare+0x5c>
      return;
 800aa22:	bf00      	nop
}
 800aa24:	3714      	adds	r7, #20
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	0800f23c 	.word	0x0800f23c
 800aa34:	4f543009 	.word	0x4f543009
 800aa38:	20080008 	.word	0x20080008
 800aa3c:	200018e4 	.word	0x200018e4

0800aa40 <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 800aa40:	b480      	push	{r7}
 800aa42:	b091      	sub	sp, #68	@ 0x44
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	4603      	mov	r3, r0
 800aa48:	71fb      	strb	r3, [r7, #7]
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	71bb      	strb	r3, [r7, #6]
 800aa4e:	4613      	mov	r3, r2
 800aa50:	80bb      	strh	r3, [r7, #4]
 800aa52:	79fb      	ldrb	r3, [r7, #7]
 800aa54:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800aa56:	7e7b      	ldrb	r3, [r7, #25]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d001      	beq.n	800aa60 <dfifo_alloc+0x20>
    rhport = 0;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800aa60:	7e7b      	ldrb	r3, [r7, #25]
 800aa62:	4a65      	ldr	r2, [pc, #404]	@ (800abf8 <dfifo_alloc+0x1b8>)
 800aa64:	011b      	lsls	r3, r3, #4
 800aa66:	4413      	add	r3, r2
 800aa68:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800aa6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 800aa6c:	79fb      	ldrb	r3, [r7, #7]
 800aa6e:	011b      	lsls	r3, r3, #4
 800aa70:	4a61      	ldr	r2, [pc, #388]	@ (800abf8 <dfifo_alloc+0x1b8>)
 800aa72:	4413      	add	r3, r2
 800aa74:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 800aa76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa78:	7a1b      	ldrb	r3, [r3, #8]
 800aa7a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800aa7e:	79bb      	ldrb	r3, [r7, #6]
 800aa80:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800aa82:	7ebb      	ldrb	r3, [r7, #26]
 800aa84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa88:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 800aa8a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800aa8e:	79bb      	ldrb	r3, [r7, #6]
 800aa90:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800aa92:	7efb      	ldrb	r3, [r7, #27]
 800aa94:	09db      	lsrs	r3, r3, #7
 800aa96:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 800aa98:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 800aa9c:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800aaa0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d30a      	bcc.n	800aabe <dfifo_alloc+0x7e>
 800aaa8:	4b54      	ldr	r3, [pc, #336]	@ (800abfc <dfifo_alloc+0x1bc>)
 800aaaa:	61fb      	str	r3, [r7, #28]
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 0301 	and.w	r3, r3, #1
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d000      	beq.n	800aaba <dfifo_alloc+0x7a>
 800aab8:	be00      	bkpt	0x0000
 800aaba:	2300      	movs	r3, #0
 800aabc:	e095      	b.n	800abea <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 800aabe:	88bb      	ldrh	r3, [r7, #4]
 800aac0:	617b      	str	r3, [r7, #20]
 800aac2:	2304      	movs	r3, #4
 800aac4:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800aac6:	697a      	ldr	r2, [r7, #20]
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	4413      	add	r3, r2
 800aacc:	1e5a      	subs	r2, r3, #1
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aad4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 800aad6:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d12a      	bne.n	800ab34 <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 800aade:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	81fb      	strh	r3, [r7, #14]
 800aae6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800aaea:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 800aaec:	89fb      	ldrh	r3, [r7, #14]
 800aaee:	089b      	lsrs	r3, r3, #2
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	f103 0208 	add.w	r2, r3, #8
 800aaf6:	7b7b      	ldrb	r3, [r7, #13]
 800aaf8:	4413      	add	r3, r2
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	005b      	lsls	r3, r3, #1
 800aafe:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 800ab00:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 800ab02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d26d      	bcs.n	800abe8 <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 800ab0c:	4b3c      	ldr	r3, [pc, #240]	@ (800ac00 <dfifo_alloc+0x1c0>)
 800ab0e:	889b      	ldrh	r3, [r3, #4]
 800ab10:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d90a      	bls.n	800ab2c <dfifo_alloc+0xec>
 800ab16:	4b39      	ldr	r3, [pc, #228]	@ (800abfc <dfifo_alloc+0x1bc>)
 800ab18:	623b      	str	r3, [r7, #32]
 800ab1a:	6a3b      	ldr	r3, [r7, #32]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 0301 	and.w	r3, r3, #1
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d000      	beq.n	800ab28 <dfifo_alloc+0xe8>
 800ab26:	be00      	bkpt	0x0000
 800ab28:	2300      	movs	r3, #0
 800ab2a:	e05e      	b.n	800abea <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 800ab2c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ab2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab30:	625a      	str	r2, [r3, #36]	@ 0x24
 800ab32:	e059      	b.n	800abe8 <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 800ab34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab36:	7a5b      	ldrb	r3, [r3, #9]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d016      	beq.n	800ab6a <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 800ab3c:	4b30      	ldr	r3, [pc, #192]	@ (800ac00 <dfifo_alloc+0x1c0>)
 800ab3e:	799a      	ldrb	r2, [r3, #6]
 800ab40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab42:	7a5b      	ldrb	r3, [r3, #9]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d30a      	bcc.n	800ab5e <dfifo_alloc+0x11e>
 800ab48:	4b2c      	ldr	r3, [pc, #176]	@ (800abfc <dfifo_alloc+0x1bc>)
 800ab4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f003 0301 	and.w	r3, r3, #1
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d000      	beq.n	800ab5a <dfifo_alloc+0x11a>
 800ab58:	be00      	bkpt	0x0000
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	e045      	b.n	800abea <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 800ab5e:	4b28      	ldr	r3, [pc, #160]	@ (800ac00 <dfifo_alloc+0x1c0>)
 800ab60:	799b      	ldrb	r3, [r3, #6]
 800ab62:	3301      	adds	r3, #1
 800ab64:	b2da      	uxtb	r2, r3
 800ab66:	4b26      	ldr	r3, [pc, #152]	@ (800ac00 <dfifo_alloc+0x1c0>)
 800ab68:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 800ab6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d102      	bne.n	800ab7c <dfifo_alloc+0x13c>
      fifo_size *= 2;
 800ab76:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ab78:	005b      	lsls	r3, r3, #1
 800ab7a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 800ab7c:	4b20      	ldr	r3, [pc, #128]	@ (800ac00 <dfifo_alloc+0x1c0>)
 800ab7e:	889b      	ldrh	r3, [r3, #4]
 800ab80:	4619      	mov	r1, r3
 800ab82:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800ab84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab88:	4413      	add	r3, r2
 800ab8a:	4299      	cmp	r1, r3
 800ab8c:	d20a      	bcs.n	800aba4 <dfifo_alloc+0x164>
 800ab8e:	4b1b      	ldr	r3, [pc, #108]	@ (800abfc <dfifo_alloc+0x1bc>)
 800ab90:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f003 0301 	and.w	r3, r3, #1
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d000      	beq.n	800aba0 <dfifo_alloc+0x160>
 800ab9e:	be00      	bkpt	0x0000
 800aba0:	2300      	movs	r3, #0
 800aba2:	e022      	b.n	800abea <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 800aba4:	4b16      	ldr	r3, [pc, #88]	@ (800ac00 <dfifo_alloc+0x1c0>)
 800aba6:	889a      	ldrh	r2, [r3, #4]
 800aba8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	b29a      	uxth	r2, r3
 800abae:	4b14      	ldr	r3, [pc, #80]	@ (800ac00 <dfifo_alloc+0x1c0>)
 800abb0:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 800abb2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d108      	bne.n	800abcc <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 800abba:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800abbc:	041b      	lsls	r3, r3, #16
 800abbe:	4a10      	ldr	r2, [pc, #64]	@ (800ac00 <dfifo_alloc+0x1c0>)
 800abc0:	8892      	ldrh	r2, [r2, #4]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	461a      	mov	r2, r3
 800abc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc8:	629a      	str	r2, [r3, #40]	@ 0x28
 800abca:	e00d      	b.n	800abe8 <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 800abcc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800abce:	041b      	lsls	r3, r3, #16
 800abd0:	4a0b      	ldr	r2, [pc, #44]	@ (800ac00 <dfifo_alloc+0x1c0>)
 800abd2:	8892      	ldrh	r2, [r2, #4]
 800abd4:	431a      	orrs	r2, r3
 800abd6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800abda:	3b01      	subs	r3, #1
 800abdc:	4611      	mov	r1, r2
 800abde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800abe0:	3340      	adds	r3, #64	@ 0x40
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	4413      	add	r3, r2
 800abe6:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 800abe8:	2301      	movs	r3, #1
}
 800abea:	4618      	mov	r0, r3
 800abec:	3744      	adds	r7, #68	@ 0x44
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	0800f23c 	.word	0x0800f23c
 800abfc:	e000edf0 	.word	0xe000edf0
 800ac00:	200018dc 	.word	0x200018dc

0800ac04 <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b088      	sub	sp, #32
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 800ac0e:	79fb      	ldrb	r3, [r7, #7]
 800ac10:	011b      	lsls	r3, r3, #4
 800ac12:	4a27      	ldr	r2, [pc, #156]	@ (800acb0 <dfifo_device_init+0xac>)
 800ac14:	4413      	add	r3, r2
 800ac16:	61fb      	str	r3, [r7, #28]
 800ac18:	79fb      	ldrb	r3, [r7, #7]
 800ac1a:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ac1c:	7b3b      	ldrb	r3, [r7, #12]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d001      	beq.n	800ac26 <dfifo_device_init+0x22>
    rhport = 0;
 800ac22:	2300      	movs	r3, #0
 800ac24:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800ac26:	7b3b      	ldrb	r3, [r7, #12]
 800ac28:	4a21      	ldr	r2, [pc, #132]	@ (800acb0 <dfifo_device_init+0xac>)
 800ac2a:	011b      	lsls	r3, r3, #4
 800ac2c:	4413      	add	r3, r2
 800ac2e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800ac30:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	7a1b      	ldrb	r3, [r3, #8]
 800ac36:	2240      	movs	r2, #64	@ 0x40
 800ac38:	81fa      	strh	r2, [r7, #14]
 800ac3a:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 800ac3c:	89fb      	ldrh	r3, [r7, #14]
 800ac3e:	089b      	lsrs	r3, r3, #2
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	f103 0208 	add.w	r2, r3, #8
 800ac46:	7b7b      	ldrb	r3, [r7, #13]
 800ac48:	4413      	add	r3, r2
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	005b      	lsls	r3, r3, #1
 800ac4e:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 800ac50:	461a      	mov	r2, r3
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	625a      	str	r2, [r3, #36]	@ 0x24
 800ac56:	69bb      	ldr	r3, [r7, #24]
 800ac58:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac5e:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800ac60:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 800ac62:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	089b      	lsrs	r3, r3, #2
 800ac6a:	b29a      	uxth	r2, r3
 800ac6c:	4b11      	ldr	r3, [pc, #68]	@ (800acb4 <dfifo_device_init+0xb0>)
 800ac6e:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 800ac70:	7dfb      	ldrb	r3, [r7, #23]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d009      	beq.n	800ac8a <dfifo_device_init+0x86>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 800ac76:	4b0f      	ldr	r3, [pc, #60]	@ (800acb4 <dfifo_device_init+0xb0>)
 800ac78:	889a      	ldrh	r2, [r3, #4]
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	7a1b      	ldrb	r3, [r3, #8]
 800ac7e:	005b      	lsls	r3, r3, #1
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	b29a      	uxth	r2, r3
 800ac86:	4b0b      	ldr	r3, [pc, #44]	@ (800acb4 <dfifo_device_init+0xb0>)
 800ac88:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 800ac8a:	4b0a      	ldr	r3, [pc, #40]	@ (800acb4 <dfifo_device_init+0xb0>)
 800ac8c:	889b      	ldrh	r3, [r3, #4]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	4613      	mov	r3, r2
 800ac92:	041b      	lsls	r3, r3, #16
 800ac94:	441a      	add	r2, r3
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 800ac9a:	79fb      	ldrb	r3, [r7, #7]
 800ac9c:	2240      	movs	r2, #64	@ 0x40
 800ac9e:	2180      	movs	r1, #128	@ 0x80
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7ff fecd 	bl	800aa40 <dfifo_alloc>
}
 800aca6:	bf00      	nop
 800aca8:	3720      	adds	r7, #32
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	0800f23c 	.word	0x0800f23c
 800acb4:	200018dc 	.word	0x200018dc

0800acb8 <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 800acb8:	b480      	push	{r7}
 800acba:	b08b      	sub	sp, #44	@ 0x2c
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	4603      	mov	r3, r0
 800acc0:	6039      	str	r1, [r7, #0]
 800acc2:	71fb      	strb	r3, [r7, #7]
 800acc4:	79fb      	ldrb	r3, [r7, #7]
 800acc6:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800acc8:	7c7b      	ldrb	r3, [r7, #17]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d001      	beq.n	800acd2 <edpt_activate+0x1a>
    rhport = 0;
 800acce:	2300      	movs	r3, #0
 800acd0:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800acd2:	7c7b      	ldrb	r3, [r7, #17]
 800acd4:	4a45      	ldr	r2, [pc, #276]	@ (800adec <edpt_activate+0x134>)
 800acd6:	011b      	lsls	r3, r3, #4
 800acd8:	4413      	add	r3, r2
 800acda:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800acdc:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	789b      	ldrb	r3, [r3, #2]
 800ace2:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800ace4:	7cbb      	ldrb	r3, [r7, #18]
 800ace6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acea:	b2db      	uxtb	r3, r3
 800acec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	789b      	ldrb	r3, [r3, #2]
 800acf4:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800acf6:	7cfb      	ldrb	r3, [r7, #19]
 800acf8:	09db      	lsrs	r3, r3, #7
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 800ad00:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800ad04:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ad08:	0052      	lsls	r2, r2, #1
 800ad0a:	4413      	add	r3, r2
 800ad0c:	011b      	lsls	r3, r3, #4
 800ad0e:	4a38      	ldr	r2, [pc, #224]	@ (800adf0 <edpt_activate+0x138>)
 800ad10:	4413      	add	r3, r2
 800ad12:	61fb      	str	r3, [r7, #28]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	889b      	ldrh	r3, [r3, #4]
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad22:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	799a      	ldrb	r2, [r3, #6]
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	731a      	strb	r2, [r3, #12]

  // Endpoint control
  dwc2_depctl_t depctl = {.value = 0};
 800ad30:	2300      	movs	r3, #0
 800ad32:	60fb      	str	r3, [r7, #12]
  depctl.mps = xfer->max_size;
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	895b      	ldrh	r3, [r3, #10]
 800ad38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	89bb      	ldrh	r3, [r7, #12]
 800ad40:	f362 030a 	bfi	r3, r2, #0, #11
 800ad44:	81bb      	strh	r3, [r7, #12]
  depctl.active = 1;
 800ad46:	7b7b      	ldrb	r3, [r7, #13]
 800ad48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad4c:	737b      	strb	r3, [r7, #13]
  depctl.type = p_endpoint_desc->bmAttributes.xfer;
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	78db      	ldrb	r3, [r3, #3]
 800ad52:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800ad56:	b2da      	uxtb	r2, r3
 800ad58:	7bbb      	ldrb	r3, [r7, #14]
 800ad5a:	f362 0383 	bfi	r3, r2, #2, #2
 800ad5e:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	78db      	ldrb	r3, [r3, #3]
 800ad64:	f003 0303 	and.w	r3, r3, #3
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d003      	beq.n	800ad76 <edpt_activate+0xbe>
    depctl.set_data0_iso_even = 1;
 800ad6e:	7bfb      	ldrb	r3, [r7, #15]
 800ad70:	f043 0310 	orr.w	r3, r3, #16
 800ad74:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 800ad76:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d108      	bne.n	800ad90 <edpt_activate+0xd8>
    depctl.tx_fifo_num = epnum;
 800ad7e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ad82:	f003 030f 	and.w	r3, r3, #15
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	89fb      	ldrh	r3, [r7, #14]
 800ad8a:	f362 1389 	bfi	r3, r2, #6, #4
 800ad8e:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800ad90:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	bf14      	ite	ne
 800ad98:	2301      	movne	r3, #1
 800ad9a:	2300      	moveq	r3, #0
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	461a      	mov	r2, r3
 800ada0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ada4:	0112      	lsls	r2, r2, #4
 800ada6:	4413      	add	r3, r2
 800ada8:	3348      	adds	r3, #72	@ 0x48
 800adaa:	015b      	lsls	r3, r3, #5
 800adac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adae:	4413      	add	r3, r2
 800adb0:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 800adb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adba:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 800adbe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800adc2:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 800adc6:	2901      	cmp	r1, #1
 800adc8:	d101      	bne.n	800adce <edpt_activate+0x116>
 800adca:	2100      	movs	r1, #0
 800adcc:	e000      	b.n	800add0 <edpt_activate+0x118>
 800adce:	2110      	movs	r1, #16
 800add0:	440b      	add	r3, r1
 800add2:	2101      	movs	r1, #1
 800add4:	fa01 f303 	lsl.w	r3, r1, r3
 800add8:	431a      	orrs	r2, r3
 800adda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800addc:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 800ade0:	bf00      	nop
 800ade2:	372c      	adds	r7, #44	@ 0x2c
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr
 800adec:	0800f23c 	.word	0x0800f23c
 800adf0:	2000185c 	.word	0x2000185c

0800adf4 <edpt_disable>:

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 800adf4:	b480      	push	{r7}
 800adf6:	b089      	sub	sp, #36	@ 0x24
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	4603      	mov	r3, r0
 800adfc:	71fb      	strb	r3, [r7, #7]
 800adfe:	460b      	mov	r3, r1
 800ae00:	71bb      	strb	r3, [r7, #6]
 800ae02:	4613      	mov	r3, r2
 800ae04:	717b      	strb	r3, [r7, #5]
 800ae06:	79fb      	ldrb	r3, [r7, #7]
 800ae08:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ae0a:	7c7b      	ldrb	r3, [r7, #17]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d001      	beq.n	800ae14 <edpt_disable+0x20>
    rhport = 0;
 800ae10:	2300      	movs	r3, #0
 800ae12:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800ae14:	7c7b      	ldrb	r3, [r7, #17]
 800ae16:	4a5b      	ldr	r2, [pc, #364]	@ (800af84 <edpt_disable+0x190>)
 800ae18:	011b      	lsls	r3, r3, #4
 800ae1a:	4413      	add	r3, r2
 800ae1c:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800ae1e:	61fb      	str	r3, [r7, #28]
 800ae20:	79bb      	ldrb	r3, [r7, #6]
 800ae22:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800ae24:	7cbb      	ldrb	r3, [r7, #18]
 800ae26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae2a:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 800ae2c:	76fb      	strb	r3, [r7, #27]
 800ae2e:	79bb      	ldrb	r3, [r7, #6]
 800ae30:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800ae32:	7cfb      	ldrb	r3, [r7, #19]
 800ae34:	09db      	lsrs	r3, r3, #7
 800ae36:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 800ae38:	76bb      	strb	r3, [r7, #26]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800ae3a:	7ebb      	ldrb	r3, [r7, #26]
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	bf14      	ite	ne
 800ae40:	2301      	movne	r3, #1
 800ae42:	2300      	moveq	r3, #0
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	461a      	mov	r2, r3
 800ae48:	7efb      	ldrb	r3, [r7, #27]
 800ae4a:	0112      	lsls	r2, r2, #4
 800ae4c:	4413      	add	r3, r2
 800ae4e:	3348      	adds	r3, #72	@ 0x48
 800ae50:	015b      	lsls	r3, r3, #5
 800ae52:	69fa      	ldr	r2, [r7, #28]
 800ae54:	4413      	add	r3, r2
 800ae56:	617b      	str	r3, [r7, #20]

  if (dir == TUSB_DIR_IN) {
 800ae58:	7ebb      	ldrb	r3, [r7, #26]
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d149      	bne.n	800aef2 <edpt_disable+0xfe>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 800ae5e:	7efb      	ldrb	r3, [r7, #27]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d003      	beq.n	800ae6c <edpt_disable+0x78>
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	db0d      	blt.n	800ae88 <edpt_disable+0x94>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	797a      	ldrb	r2, [r7, #5]
 800ae72:	2a00      	cmp	r2, #0
 800ae74:	d002      	beq.n	800ae7c <edpt_disable+0x88>
 800ae76:	f04f 6202 	mov.w	r2, #136314880	@ 0x8200000
 800ae7a:	e001      	b.n	800ae80 <edpt_disable+0x8c>
 800ae7c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800ae80:	431a      	orrs	r2, r3
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	601a      	str	r2, [r3, #0]
 800ae86:	e022      	b.n	800aece <edpt_disable+0xda>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      dep->diepctl |= DIEPCTL_SNAK;
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 800ae94:	bf00      	nop
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	689b      	ldr	r3, [r3, #8]
 800ae9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d0f9      	beq.n	800ae96 <edpt_disable+0xa2>

      // Disable the endpoint.
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	797a      	ldrb	r2, [r7, #5]
 800aea8:	2a00      	cmp	r2, #0
 800aeaa:	d001      	beq.n	800aeb0 <edpt_disable+0xbc>
 800aeac:	4a36      	ldr	r2, [pc, #216]	@ (800af88 <edpt_disable+0x194>)
 800aeae:	e001      	b.n	800aeb4 <edpt_disable+0xc0>
 800aeb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800aeb4:	431a      	orrs	r2, r3
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 800aeba:	bf00      	nop
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	f003 0302 	and.w	r3, r3, #2
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d0f9      	beq.n	800aebc <edpt_disable+0xc8>

      dep->diepint = DIEPINT_EPDISD;
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	2202      	movs	r2, #2
 800aecc:	609a      	str	r2, [r3, #8]
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	60fb      	str	r3, [r7, #12]
 800aed2:	7efb      	ldrb	r3, [r7, #27]
 800aed4:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800aed6:	7afb      	ldrb	r3, [r7, #11]
 800aed8:	019b      	lsls	r3, r3, #6
 800aeda:	f043 0220 	orr.w	r2, r3, #32
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800aee2:	bf00      	nop
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	f003 0320 	and.w	r3, r3, #32
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d1f9      	bne.n	800aee4 <edpt_disable+0xf0>
}
 800aef0:	e041      	b.n	800af76 <edpt_disable+0x182>

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dfifo_flush_tx(dwc2, epnum);
  } else {
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 800aef2:	7efb      	ldrb	r3, [r7, #27]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d003      	beq.n	800af00 <edpt_disable+0x10c>
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	db0c      	blt.n	800af1a <edpt_disable+0x126>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	797a      	ldrb	r2, [r7, #5]
 800af06:	2a00      	cmp	r2, #0
 800af08:	d002      	beq.n	800af10 <edpt_disable+0x11c>
 800af0a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800af0e:	e000      	b.n	800af12 <edpt_disable+0x11e>
 800af10:	2200      	movs	r2, #0
 800af12:	431a      	orrs	r2, r3
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	601a      	str	r2, [r3, #0]
 800af18:	e02d      	b.n	800af76 <edpt_disable+0x182>
    } else {
      // Asserting GONAK is required to STALL an OUT endpoint.
      // Simpler to use polling here, we don't use the "B"OUTNAKEFF interrupt
      // anyway, and it can't be cleared by user code. If this while loop never
      // finishes, we have bigger problems than just the stack.
      dwc2->dctl |= DCTL_SGONAK;
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800af20:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 800af2a:	bf00      	nop
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	695b      	ldr	r3, [r3, #20]
 800af30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af34:	2b00      	cmp	r3, #0
 800af36:	d0f9      	beq.n	800af2c <edpt_disable+0x138>

      // Ditto here disable the endpoint.
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	797a      	ldrb	r2, [r7, #5]
 800af3e:	2a00      	cmp	r2, #0
 800af40:	d001      	beq.n	800af46 <edpt_disable+0x152>
 800af42:	4a11      	ldr	r2, [pc, #68]	@ (800af88 <edpt_disable+0x194>)
 800af44:	e001      	b.n	800af4a <edpt_disable+0x156>
 800af46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800af4a:	431a      	orrs	r2, r3
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	601a      	str	r2, [r3, #0]
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 800af50:	bf00      	nop
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	f003 0302 	and.w	r3, r3, #2
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d0f9      	beq.n	800af52 <edpt_disable+0x15e>

      dep->doepint = DOEPINT_EPDISD;
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	2202      	movs	r2, #2
 800af62:	609a      	str	r2, [r3, #8]

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800af6a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
  }
}
 800af74:	bf00      	nop
 800af76:	bf00      	nop
 800af78:	3724      	adds	r7, #36	@ 0x24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	0800f23c 	.word	0x0800f23c
 800af88:	40200000 	.word	0x40200000

0800af8c <edpt_schedule_packets>:

// Since this function returns void, it is not possible to return a boolean success message
// We must make sure that this function is not called when the EP is disabled
// Must be called from critical section
static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b090      	sub	sp, #64	@ 0x40
 800af90:	af00      	add	r7, sp, #0
 800af92:	4603      	mov	r3, r0
 800af94:	71fb      	strb	r3, [r7, #7]
 800af96:	460b      	mov	r3, r1
 800af98:	71bb      	strb	r3, [r7, #6]
 800af9a:	4613      	mov	r3, r2
 800af9c:	717b      	strb	r3, [r7, #5]
 800af9e:	79fb      	ldrb	r3, [r7, #7]
 800afa0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800afa4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d002      	beq.n	800afb2 <edpt_schedule_packets+0x26>
    rhport = 0;
 800afac:	2300      	movs	r3, #0
 800afae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800afb2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800afb6:	4a65      	ldr	r2, [pc, #404]	@ (800b14c <edpt_schedule_packets+0x1c0>)
 800afb8:	011b      	lsls	r3, r3, #4
 800afba:	4413      	add	r3, r2
 800afbc:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800afbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 800afc0:	79ba      	ldrb	r2, [r7, #6]
 800afc2:	797b      	ldrb	r3, [r7, #5]
 800afc4:	0052      	lsls	r2, r2, #1
 800afc6:	4413      	add	r3, r2
 800afc8:	011b      	lsls	r3, r3, #4
 800afca:	4a61      	ldr	r2, [pc, #388]	@ (800b150 <edpt_schedule_packets+0x1c4>)
 800afcc:	4413      	add	r3, r2
 800afce:	637b      	str	r3, [r7, #52]	@ 0x34
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800afd0:	797b      	ldrb	r3, [r7, #5]
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	bf14      	ite	ne
 800afd6:	2301      	movne	r3, #1
 800afd8:	2300      	moveq	r3, #0
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	461a      	mov	r2, r3
 800afde:	79bb      	ldrb	r3, [r7, #6]
 800afe0:	0112      	lsls	r2, r2, #4
 800afe2:	4413      	add	r3, r2
 800afe4:	3348      	adds	r3, #72	@ 0x48
 800afe6:	015b      	lsls	r3, r3, #5
 800afe8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800afea:	4413      	add	r3, r2
 800afec:	633b      	str	r3, [r7, #48]	@ 0x30

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 800afee:	79bb      	ldrb	r3, [r7, #6]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d11c      	bne.n	800b02e <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 800aff4:	797b      	ldrb	r3, [r7, #5]
 800aff6:	4a57      	ldr	r2, [pc, #348]	@ (800b154 <edpt_schedule_packets+0x1c8>)
 800aff8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800affc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800affe:	895b      	ldrh	r3, [r3, #10]
 800b000:	853a      	strh	r2, [r7, #40]	@ 0x28
 800b002:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800b004:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b006:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b008:	4293      	cmp	r3, r2
 800b00a:	bf28      	it	cs
 800b00c:	4613      	movcs	r3, r2
 800b00e:	b29b      	uxth	r3, r3
 800b010:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    _dcd_data.ep0_pending[dir] -= total_bytes;
 800b012:	797b      	ldrb	r3, [r7, #5]
 800b014:	4a4f      	ldr	r2, [pc, #316]	@ (800b154 <edpt_schedule_packets+0x1c8>)
 800b016:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800b01a:	797b      	ldrb	r3, [r7, #5]
 800b01c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800b01e:	1a8a      	subs	r2, r1, r2
 800b020:	b291      	uxth	r1, r2
 800b022:	4a4c      	ldr	r2, [pc, #304]	@ (800b154 <edpt_schedule_packets+0x1c8>)
 800b024:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 800b028:	2301      	movs	r3, #1
 800b02a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b02c:	e014      	b.n	800b058 <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 800b02e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b030:	891b      	ldrh	r3, [r3, #8]
 800b032:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 800b034:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b036:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b038:	8952      	ldrh	r2, [r2, #10]
 800b03a:	623b      	str	r3, [r7, #32]
 800b03c:	61fa      	str	r2, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800b03e:	6a3a      	ldr	r2, [r7, #32]
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	4413      	add	r3, r2
 800b044:	1e5a      	subs	r2, r3, #1
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	fbb2 f3f3 	udiv	r3, r2, r3
 800b04c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if (num_packets == 0) {
 800b04e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b050:	2b00      	cmp	r3, #0
 800b052:	d101      	bne.n	800b058 <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 800b054:	2301      	movs	r3, #1
 800b056:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }
  }

  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  dwc2_ep_tsize_t deptsiz = {.value = 0};
 800b058:	2300      	movs	r3, #0
 800b05a:	617b      	str	r3, [r7, #20]
  deptsiz.xfer_size = total_bytes;
 800b05c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800b05e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	f362 0312 	bfi	r3, r2, #0, #19
 800b068:	617b      	str	r3, [r7, #20]
  deptsiz.packet_count = num_packets;
 800b06a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b06c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b070:	b29a      	uxth	r2, r3
 800b072:	8afb      	ldrh	r3, [r7, #22]
 800b074:	f362 03cc 	bfi	r3, r2, #3, #10
 800b078:	82fb      	strh	r3, [r7, #22]
  dep->tsiz = deptsiz.value;
 800b07a:	697a      	ldr	r2, [r7, #20]
 800b07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b07e:	611a      	str	r2, [r3, #16]

  // control
  dwc2_depctl_t depctl = {.value = dep->ctl};
 800b080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	613b      	str	r3, [r7, #16]
  depctl.clear_nak = 1;
 800b086:	7cfb      	ldrb	r3, [r7, #19]
 800b088:	f043 0304 	orr.w	r3, r3, #4
 800b08c:	74fb      	strb	r3, [r7, #19]
  depctl.enable = 1;
 800b08e:	7cfb      	ldrb	r3, [r7, #19]
 800b090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b094:	74fb      	strb	r3, [r7, #19]
  if (depctl.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 800b096:	7cbb      	ldrb	r3, [r7, #18]
 800b098:	f003 030c 	and.w	r3, r3, #12
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b04      	cmp	r3, #4
 800b0a0:	d11a      	bne.n	800b0d8 <edpt_schedule_packets+0x14c>
 800b0a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0a4:	7b1b      	ldrb	r3, [r3, #12]
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d116      	bne.n	800b0d8 <edpt_schedule_packets+0x14c>
    const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 800b0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ac:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800b0b0:	60bb      	str	r3, [r7, #8]
    const uint32_t odd_now = dsts.frame_number & 1u;
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	f003 0301 	and.w	r3, r3, #1
 800b0be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (odd_now) {
 800b0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d004      	beq.n	800b0d0 <edpt_schedule_packets+0x144>
      depctl.set_data0_iso_even = 1;
 800b0c6:	7cfb      	ldrb	r3, [r7, #19]
 800b0c8:	f043 0310 	orr.w	r3, r3, #16
 800b0cc:	74fb      	strb	r3, [r7, #19]
 800b0ce:	e003      	b.n	800b0d8 <edpt_schedule_packets+0x14c>
    } else {
      depctl.set_data1_iso_odd = 1;
 800b0d0:	7cfb      	ldrb	r3, [r7, #19]
 800b0d2:	f043 0320 	orr.w	r3, r3, #32
 800b0d6:	74fb      	strb	r3, [r7, #19]
 800b0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0da:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b0dc:	69bb      	ldr	r3, [r7, #24]
 800b0de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b0e0:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800b0e2:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 800b0e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if(is_dma) {
 800b0e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d015      	beq.n	800b11c <edpt_schedule_packets+0x190>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 800b0f0:	797b      	ldrb	r3, [r7, #5]
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d109      	bne.n	800b10a <edpt_schedule_packets+0x17e>
 800b0f6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d006      	beq.n	800b10a <edpt_schedule_packets+0x17e>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 800b0fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800b102:	4611      	mov	r1, r2
 800b104:	4618      	mov	r0, r3
 800b106:	f7fd fd5c 	bl	8008bc2 <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 800b10a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	461a      	mov	r2, r3
 800b110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b112:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 800b114:	693a      	ldr	r2, [r7, #16]
 800b116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b118:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 800b11a:	e013      	b.n	800b144 <edpt_schedule_packets+0x1b8>
    dep->diepctl = depctl.value; // enable endpoint
 800b11c:	693a      	ldr	r2, [r7, #16]
 800b11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b120:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 800b122:	797b      	ldrb	r3, [r7, #5]
 800b124:	2b01      	cmp	r3, #1
 800b126:	d10d      	bne.n	800b144 <edpt_schedule_packets+0x1b8>
 800b128:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00a      	beq.n	800b144 <edpt_schedule_packets+0x1b8>
      dwc2->diepempmsk |= (1 << epnum);
 800b12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b130:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800b134:	79ba      	ldrb	r2, [r7, #6]
 800b136:	2101      	movs	r1, #1
 800b138:	fa01 f202 	lsl.w	r2, r1, r2
 800b13c:	431a      	orrs	r2, r3
 800b13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b140:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 800b144:	bf00      	nop
 800b146:	3740      	adds	r7, #64	@ 0x40
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	0800f23c 	.word	0x0800f23c
 800b150:	2000185c 	.word	0x2000185c
 800b154:	200018dc 	.word	0x200018dc

0800b158 <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800b158:	b580      	push	{r7, lr}
 800b15a:	b08c      	sub	sp, #48	@ 0x30
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	4603      	mov	r3, r0
 800b160:	6039      	str	r1, [r7, #0]
 800b162:	71fb      	strb	r3, [r7, #7]
 800b164:	79fb      	ldrb	r3, [r7, #7]
 800b166:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b168:	7dfb      	ldrb	r3, [r7, #23]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d001      	beq.n	800b172 <dcd_init+0x1a>
    rhport = 0;
 800b16e:	2300      	movs	r3, #0
 800b170:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b172:	7dfb      	ldrb	r3, [r7, #23]
 800b174:	4a43      	ldr	r2, [pc, #268]	@ (800b284 <dcd_init+0x12c>)
 800b176:	011b      	lsls	r3, r3, #4
 800b178:	4413      	add	r3, r2
 800b17a:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b17c:	62bb      	str	r3, [r7, #40]	@ 0x28

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 800b17e:	2208      	movs	r2, #8
 800b180:	2100      	movs	r1, #0
 800b182:	4841      	ldr	r0, [pc, #260]	@ (800b288 <dcd_init+0x130>)
 800b184:	f001 fe9d 	bl	800cec2 <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 800b188:	2101      	movs	r1, #1
 800b18a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b18c:	f001 f9c6 	bl	800c51c <dwc2_core_is_highspeed>
 800b190:	4603      	mov	r3, r0
 800b192:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b198:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b19e:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800b1a0:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800b1a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 800b1a6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b1aa:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800b1ae:	79fb      	ldrb	r3, [r7, #7]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f001 f9d1 	bl	800c558 <dwc2_core_init>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	f083 0301 	eor.w	r3, r3, #1
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00a      	beq.n	800b1d8 <dcd_init+0x80>
 800b1c2:	4b32      	ldr	r3, [pc, #200]	@ (800b28c <dcd_init+0x134>)
 800b1c4:	61fb      	str	r3, [r7, #28]
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f003 0301 	and.w	r3, r3, #1
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d000      	beq.n	800b1d4 <dcd_init+0x7c>
 800b1d2:	be00      	bkpt	0x0000
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	e050      	b.n	800b27a <dcd_init+0x122>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 800b1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1da:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b1de:	f023 0303 	bic.w	r3, r3, #3
 800b1e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (is_highspeed) {
 800b1e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d00d      	beq.n	800b208 <dcd_init+0xb0>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b1f0:	60fb      	str	r3, [r7, #12]
    if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800b1f2:	7b3b      	ldrb	r3, [r7, #12]
 800b1f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	2b80      	cmp	r3, #128	@ 0x80
 800b1fc:	d108      	bne.n	800b210 <dcd_init+0xb8>
      dcfg |= DCFG_XCVRDLY;
 800b1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b200:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b206:	e003      	b.n	800b210 <dcd_init+0xb8>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 800b208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b20a:	f043 0303 	orr.w	r3, r3, #3
 800b20e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 800b210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b212:	f043 0304 	orr.w	r3, r3, #4
 800b216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2->dcfg = dcfg;
 800b218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b21a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b21c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 800b220:	79fb      	ldrb	r3, [r7, #7]
 800b222:	4618      	mov	r0, r3
 800b224:	f000 f92a 	bl	800b47c <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 800b228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b230:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b236:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 800b238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 800b240:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 800b244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b246:	601a      	str	r2, [r3, #0]
  // No hardware detection of Vbus B-session is available on the STM32N6
  dwc2->stm32_gccfg |= STM32_GCCFG_VBVALOVAL;
#endif

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 800b248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b24a:	699a      	ldr	r2, [r3, #24]
 800b24c:	4b10      	ldr	r3, [pc, #64]	@ (800b290 <dcd_init+0x138>)
 800b24e:	4313      	orrs	r3, r2
 800b250:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b252:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 800b254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 800b25a:	6a3b      	ldr	r3, [r7, #32]
 800b25c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b260:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 800b262:	6a3b      	ldr	r3, [r7, #32]
 800b264:	f043 0301 	orr.w	r3, r3, #1
 800b268:	623b      	str	r3, [r7, #32]
  dwc2->gahbcfg = gahbcfg;
 800b26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26c:	6a3a      	ldr	r2, [r7, #32]
 800b26e:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 800b270:	79fb      	ldrb	r3, [r7, #7]
 800b272:	4618      	mov	r0, r3
 800b274:	f000 f8e0 	bl	800b438 <dcd_connect>
  return true;
 800b278:	2301      	movs	r3, #1
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3730      	adds	r7, #48	@ 0x30
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	0800f23c 	.word	0x0800f23c
 800b288:	200018dc 	.word	0x200018dc
 800b28c:	e000edf0 	.word	0xe000edf0
 800b290:	80003804 	.word	0x80003804

0800b294 <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	4603      	mov	r3, r0
 800b29c:	71fb      	strb	r3, [r7, #7]
 800b29e:	79fb      	ldrb	r3, [r7, #7]
 800b2a0:	73fb      	strb	r3, [r7, #15]
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	73bb      	strb	r3, [r7, #14]
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800b2aa:	7bfb      	ldrb	r3, [r7, #15]
 800b2ac:	4a0c      	ldr	r2, [pc, #48]	@ (800b2e0 <dcd_int_enable+0x4c>)
 800b2ae:	011b      	lsls	r3, r3, #4
 800b2b0:	4413      	add	r3, r2
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800b2b8:	7b7b      	ldrb	r3, [r7, #13]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d005      	beq.n	800b2ca <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 800b2be:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7ff fb3e 	bl	800a944 <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 800b2c8:	e004      	b.n	800b2d4 <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 800b2ca:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7ff fb56 	bl	800a980 <__NVIC_DisableIRQ>
}
 800b2d4:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 800b2d6:	bf00      	nop
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	0800f23c 	.word	0x0800f23c

0800b2e4 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	71fb      	strb	r3, [r7, #7]
 800b2ee:	79fb      	ldrb	r3, [r7, #7]
 800b2f0:	73fb      	strb	r3, [r7, #15]
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	73bb      	strb	r3, [r7, #14]
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800b2fa:	7bfb      	ldrb	r3, [r7, #15]
 800b2fc:	4a0c      	ldr	r2, [pc, #48]	@ (800b330 <dcd_int_disable+0x4c>)
 800b2fe:	011b      	lsls	r3, r3, #4
 800b300:	4413      	add	r3, r2
 800b302:	3304      	adds	r3, #4
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800b308:	7b7b      	ldrb	r3, [r7, #13]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d005      	beq.n	800b31a <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 800b30e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b312:	4618      	mov	r0, r3
 800b314:	f7ff fb16 	bl	800a944 <__NVIC_EnableIRQ>
}
 800b318:	e004      	b.n	800b324 <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 800b31a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b31e:	4618      	mov	r0, r3
 800b320:	f7ff fb2e 	bl	800a980 <__NVIC_DisableIRQ>
}
 800b324:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 800b326:	bf00      	nop
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	0800f23c 	.word	0x0800f23c

0800b334 <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	4603      	mov	r3, r0
 800b33c:	460a      	mov	r2, r1
 800b33e:	71fb      	strb	r3, [r7, #7]
 800b340:	4613      	mov	r3, r2
 800b342:	71bb      	strb	r3, [r7, #6]
 800b344:	79fb      	ldrb	r3, [r7, #7]
 800b346:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b348:	7a7b      	ldrb	r3, [r7, #9]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d001      	beq.n	800b352 <dcd_set_address+0x1e>
    rhport = 0;
 800b34e:	2300      	movs	r3, #0
 800b350:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b352:	7a7b      	ldrb	r3, [r7, #9]
 800b354:	4a14      	ldr	r2, [pc, #80]	@ (800b3a8 <dcd_set_address+0x74>)
 800b356:	011b      	lsls	r3, r3, #4
 800b358:	4413      	add	r3, r2
 800b35a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b35c:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b364:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 800b368:	79bb      	ldrb	r3, [r7, #6]
 800b36a:	011b      	lsls	r3, r3, #4
 800b36c:	431a      	orrs	r2, r3
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 800b374:	2300      	movs	r3, #0
 800b376:	72fb      	strb	r3, [r7, #11]
 800b378:	2301      	movs	r3, #1
 800b37a:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 800b37c:	7abb      	ldrb	r3, [r7, #10]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d002      	beq.n	800b388 <dcd_set_address+0x54>
 800b382:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800b386:	e000      	b.n	800b38a <dcd_set_address+0x56>
 800b388:	2300      	movs	r3, #0
 800b38a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800b38e:	4313      	orrs	r3, r2
 800b390:	b25b      	sxtb	r3, r3
 800b392:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 800b394:	79f8      	ldrb	r0, [r7, #7]
 800b396:	2300      	movs	r3, #0
 800b398:	2200      	movs	r2, #0
 800b39a:	f000 f98b 	bl	800b6b4 <dcd_edpt_xfer>
}
 800b39e:	bf00      	nop
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	0800f23c 	.word	0x0800f23c

0800b3ac <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 800b3ac:	b480      	push	{r7}
 800b3ae:	b087      	sub	sp, #28
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	71fb      	strb	r3, [r7, #7]
 800b3b6:	79fb      	ldrb	r3, [r7, #7]
 800b3b8:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d001      	beq.n	800b3c4 <dcd_remote_wakeup+0x18>
    rhport = 0;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b3c4:	7bfb      	ldrb	r3, [r7, #15]
 800b3c6:	4a19      	ldr	r2, [pc, #100]	@ (800b42c <dcd_remote_wakeup+0x80>)
 800b3c8:	011b      	lsls	r3, r3, #4
 800b3ca:	4413      	add	r3, r2
 800b3cc:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b3ce:	617b      	str	r3, [r7, #20]

  // set remote wakeup
  dwc2->dctl |= DCTL_RWUSIG;
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b3d6:	f043 0201 	orr.w	r2, r3, #1
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  // enable SOF to detect bus resume
  dwc2->gintsts = GINTSTS_SOF;
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	2208      	movs	r2, #8
 800b3e4:	615a      	str	r2, [r3, #20]
  dwc2->gintmsk |= GINTMSK_SOFM;
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	699b      	ldr	r3, [r3, #24]
 800b3ea:	f043 0208 	orr.w	r2, r3, #8
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	619a      	str	r2, [r3, #24]
#define dwc2_dcd_int_disable(_rhport) dwc2_int_set(_rhport, TUSB_ROLE_DEVICE, false)


TU_ATTR_ALWAYS_INLINE static inline void dwc2_remote_wakeup_delay(void) {
  // try to delay for 1 ms
  uint32_t count = SystemCoreClock / 1000;
 800b3f2:	4b0f      	ldr	r3, [pc, #60]	@ (800b430 <dcd_remote_wakeup+0x84>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a0f      	ldr	r2, [pc, #60]	@ (800b434 <dcd_remote_wakeup+0x88>)
 800b3f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b3fc:	099b      	lsrs	r3, r3, #6
 800b3fe:	613b      	str	r3, [r7, #16]
  while (count--) __NOP();
 800b400:	e000      	b.n	800b404 <dcd_remote_wakeup+0x58>
 800b402:	bf00      	nop
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	1e5a      	subs	r2, r3, #1
 800b408:	613a      	str	r2, [r7, #16]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d1f9      	bne.n	800b402 <dcd_remote_wakeup+0x56>
}
 800b40e:	bf00      	nop

  // Per specs: remote wakeup signal bit must be clear within 1-15ms
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b416:	f023 0201 	bic.w	r2, r3, #1
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800b420:	bf00      	nop
 800b422:	371c      	adds	r7, #28
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr
 800b42c:	0800f23c 	.word	0x0800f23c
 800b430:	20000208 	.word	0x20000208
 800b434:	10624dd3 	.word	0x10624dd3

0800b438 <dcd_connect>:

void dcd_connect(uint8_t rhport) {
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	4603      	mov	r3, r0
 800b440:	71fb      	strb	r3, [r7, #7]
 800b442:	79fb      	ldrb	r3, [r7, #7]
 800b444:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b446:	7afb      	ldrb	r3, [r7, #11]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d001      	beq.n	800b450 <dcd_connect+0x18>
    rhport = 0;
 800b44c:	2300      	movs	r3, #0
 800b44e:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b450:	7afb      	ldrb	r3, [r7, #11]
 800b452:	4a09      	ldr	r2, [pc, #36]	@ (800b478 <dcd_connect+0x40>)
 800b454:	011b      	lsls	r3, r3, #4
 800b456:	4413      	add	r3, r2
 800b458:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b45a:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b462:	f023 0202 	bic.w	r2, r3, #2
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800b46c:	bf00      	nop
 800b46e:	3714      	adds	r7, #20
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr
 800b478:	0800f23c 	.word	0x0800f23c

0800b47c <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 800b47c:	b480      	push	{r7}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
 800b482:	4603      	mov	r3, r0
 800b484:	71fb      	strb	r3, [r7, #7]
 800b486:	79fb      	ldrb	r3, [r7, #7]
 800b488:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b48a:	7afb      	ldrb	r3, [r7, #11]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d001      	beq.n	800b494 <dcd_disconnect+0x18>
    rhport = 0;
 800b490:	2300      	movs	r3, #0
 800b492:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b494:	7afb      	ldrb	r3, [r7, #11]
 800b496:	4a09      	ldr	r2, [pc, #36]	@ (800b4bc <dcd_disconnect+0x40>)
 800b498:	011b      	lsls	r3, r3, #4
 800b49a:	4413      	add	r3, r2
 800b49c:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b49e:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800b4a6:	f043 0202 	orr.w	r2, r3, #2
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800b4b0:	bf00      	nop
 800b4b2:	3714      	adds	r7, #20
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr
 800b4bc:	0800f23c 	.word	0x0800f23c

0800b4c0 <dcd_sof_enable>:

// Be advised: audio, video and possibly other iso-ep classes use dcd_sof_enable() to enable/disable its corresponding ISR on purpose!
void dcd_sof_enable(uint8_t rhport, bool en) {
 800b4c0:	b480      	push	{r7}
 800b4c2:	b085      	sub	sp, #20
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	460a      	mov	r2, r1
 800b4ca:	71fb      	strb	r3, [r7, #7]
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	71bb      	strb	r3, [r7, #6]
 800b4d0:	79fb      	ldrb	r3, [r7, #7]
 800b4d2:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b4d4:	7afb      	ldrb	r3, [r7, #11]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d001      	beq.n	800b4de <dcd_sof_enable+0x1e>
    rhport = 0;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b4de:	7afb      	ldrb	r3, [r7, #11]
 800b4e0:	4a10      	ldr	r2, [pc, #64]	@ (800b524 <dcd_sof_enable+0x64>)
 800b4e2:	011b      	lsls	r3, r3, #4
 800b4e4:	4413      	add	r3, r2
 800b4e6:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b4e8:	60fb      	str	r3, [r7, #12]

  _dcd_data.sof_en = en;
 800b4ea:	4a0f      	ldr	r2, [pc, #60]	@ (800b528 <dcd_sof_enable+0x68>)
 800b4ec:	79bb      	ldrb	r3, [r7, #6]
 800b4ee:	71d3      	strb	r3, [r2, #7]

  if (en) {
 800b4f0:	79bb      	ldrb	r3, [r7, #6]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d009      	beq.n	800b50a <dcd_sof_enable+0x4a>
    dwc2->gintsts = GINTSTS_SOF;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2208      	movs	r2, #8
 800b4fa:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	699b      	ldr	r3, [r3, #24]
 800b500:	f043 0208 	orr.w	r2, r3, #8
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	619a      	str	r2, [r3, #24]
  } else {
    dwc2->gintmsk &= ~GINTMSK_SOFM;
  }
}
 800b508:	e005      	b.n	800b516 <dcd_sof_enable+0x56>
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	699b      	ldr	r3, [r3, #24]
 800b50e:	f023 0208 	bic.w	r2, r3, #8
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	619a      	str	r2, [r3, #24]
}
 800b516:	bf00      	nop
 800b518:	3714      	adds	r7, #20
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	0800f23c 	.word	0x0800f23c
 800b528:	200018dc 	.word	0x200018dc

0800b52c <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	4603      	mov	r3, r0
 800b534:	6039      	str	r1, [r7, #0]
 800b536:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	7899      	ldrb	r1, [r3, #2]
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	889b      	ldrh	r3, [r3, #4]
 800b544:	b29b      	uxth	r3, r3
 800b546:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b54a:	b29a      	uxth	r2, r3
 800b54c:	79fb      	ldrb	r3, [r7, #7]
 800b54e:	4618      	mov	r0, r3
 800b550:	f7ff fa76 	bl	800aa40 <dfifo_alloc>
 800b554:	4603      	mov	r3, r0
 800b556:	f083 0301 	eor.w	r3, r3, #1
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00a      	beq.n	800b576 <dcd_edpt_open+0x4a>
 800b560:	4b0a      	ldr	r3, [pc, #40]	@ (800b58c <dcd_edpt_open+0x60>)
 800b562:	60fb      	str	r3, [r7, #12]
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f003 0301 	and.w	r3, r3, #1
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d000      	beq.n	800b572 <dcd_edpt_open+0x46>
 800b570:	be00      	bkpt	0x0000
 800b572:	2300      	movs	r3, #0
 800b574:	e005      	b.n	800b582 <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 800b576:	79fb      	ldrb	r3, [r7, #7]
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7ff fb9c 	bl	800acb8 <edpt_activate>
  return true;
 800b580:	2301      	movs	r3, #1
}
 800b582:	4618      	mov	r0, r3
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	e000edf0 	.word	0xe000edf0

0800b590 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 800b590:	b580      	push	{r7, lr}
 800b592:	b08a      	sub	sp, #40	@ 0x28
 800b594:	af00      	add	r7, sp, #0
 800b596:	4603      	mov	r3, r0
 800b598:	71fb      	strb	r3, [r7, #7]
 800b59a:	79fb      	ldrb	r3, [r7, #7]
 800b59c:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b59e:	7dfb      	ldrb	r3, [r7, #23]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d001      	beq.n	800b5a8 <dcd_edpt_close_all+0x18>
    rhport = 0;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b5a8:	7dfb      	ldrb	r3, [r7, #23]
 800b5aa:	4a3f      	ldr	r2, [pc, #252]	@ (800b6a8 <dcd_edpt_close_all+0x118>)
 800b5ac:	011b      	lsls	r3, r3, #4
 800b5ae:	4413      	add	r3, r2
 800b5b0:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b5b2:	623b      	str	r3, [r7, #32]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800b5b4:	79fb      	ldrb	r3, [r7, #7]
 800b5b6:	4a3c      	ldr	r2, [pc, #240]	@ (800b6a8 <dcd_edpt_close_all+0x118>)
 800b5b8:	011b      	lsls	r3, r3, #4
 800b5ba:	4413      	add	r3, r2
 800b5bc:	3308      	adds	r3, #8
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	77fb      	strb	r3, [r7, #31]

  usbd_spin_lock(false);
 800b5c2:	2000      	movs	r0, #0
 800b5c4:	f7fe fd4a 	bl	800a05c <usbd_spin_lock>

  _dcd_data.allocated_epin_count = 0;
 800b5c8:	4b38      	ldr	r3, [pc, #224]	@ (800b6ac <dcd_edpt_close_all+0x11c>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	719a      	strb	r2, [r3, #6]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 800b5ce:	6a3b      	ldr	r3, [r7, #32]
 800b5d0:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800b5d4:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 800b5d8:	2301      	movs	r3, #1
 800b5da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b5de:	e034      	b.n	800b64a <dcd_edpt_close_all+0xba>
    for (uint8_t d = 0; d < 2; d++) {
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b5e6:	e027      	b.n	800b638 <dcd_edpt_close_all+0xa8>
      dwc2_dep_t* dep = &dwc2->ep[d][n];
 800b5e8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5f0:	0112      	lsls	r2, r2, #4
 800b5f2:	4413      	add	r3, r2
 800b5f4:	3348      	adds	r3, #72	@ 0x48
 800b5f6:	015b      	lsls	r3, r3, #5
 800b5f8:	6a3a      	ldr	r2, [r7, #32]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	61bb      	str	r3, [r7, #24]
      if (dep->ctl & EPCTL_EPENA) {
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	da05      	bge.n	800b612 <dcd_edpt_close_all+0x82>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f043 4290 	orr.w	r2, r3, #1207959552	@ 0x48000000
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	601a      	str	r2, [r3, #0]
      }
      xfer_status[n][1-d].max_size = 0;
 800b612:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b616:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b61a:	f1c3 0301 	rsb	r3, r3, #1
 800b61e:	4924      	ldr	r1, [pc, #144]	@ (800b6b0 <dcd_edpt_close_all+0x120>)
 800b620:	0052      	lsls	r2, r2, #1
 800b622:	4413      	add	r3, r2
 800b624:	011b      	lsls	r3, r3, #4
 800b626:	440b      	add	r3, r1
 800b628:	330a      	adds	r3, #10
 800b62a:	2200      	movs	r2, #0
 800b62c:	801a      	strh	r2, [r3, #0]
    for (uint8_t d = 0; d < 2; d++) {
 800b62e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b632:	3301      	adds	r3, #1
 800b634:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b638:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d9d3      	bls.n	800b5e8 <dcd_edpt_close_all+0x58>
  for (uint8_t n = 1; n < ep_count; n++) {
 800b640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b644:	3301      	adds	r3, #1
 800b646:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b64a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b64e:	7ffb      	ldrb	r3, [r7, #31]
 800b650:	429a      	cmp	r2, r3
 800b652:	d3c5      	bcc.n	800b5e0 <dcd_edpt_close_all+0x50>
 800b654:	6a3b      	ldr	r3, [r7, #32]
 800b656:	60fb      	str	r3, [r7, #12]
 800b658:	2310      	movs	r3, #16
 800b65a:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800b65c:	7afb      	ldrb	r3, [r7, #11]
 800b65e:	019b      	lsls	r3, r3, #6
 800b660:	f043 0220 	orr.w	r2, r3, #32
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800b668:	bf00      	nop
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	691b      	ldr	r3, [r3, #16]
 800b66e:	f003 0320 	and.w	r3, r3, #32
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1f9      	bne.n	800b66a <dcd_edpt_close_all+0xda>
}
 800b676:	bf00      	nop
 800b678:	6a3b      	ldr	r3, [r7, #32]
 800b67a:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	2210      	movs	r2, #16
 800b680:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800b682:	bf00      	nop
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	691b      	ldr	r3, [r3, #16]
 800b688:	f003 0310 	and.w	r3, r3, #16
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d1f9      	bne.n	800b684 <dcd_edpt_close_all+0xf4>
}
 800b690:	bf00      	nop
    }
  }

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport); // re-init dfifo
 800b692:	79fb      	ldrb	r3, [r7, #7]
 800b694:	4618      	mov	r0, r3
 800b696:	f7ff fab5 	bl	800ac04 <dfifo_device_init>

  usbd_spin_unlock(false);
 800b69a:	2000      	movs	r0, #0
 800b69c:	f7fe fcf8 	bl	800a090 <usbd_spin_unlock>
}
 800b6a0:	bf00      	nop
 800b6a2:	3728      	adds	r7, #40	@ 0x28
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	0800f23c 	.word	0x0800f23c
 800b6ac:	200018dc 	.word	0x200018dc
 800b6b0:	2000185c 	.word	0x2000185c

0800b6b4 <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	603a      	str	r2, [r7, #0]
 800b6bc:	461a      	mov	r2, r3
 800b6be:	4603      	mov	r3, r0
 800b6c0:	71fb      	strb	r3, [r7, #7]
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	71bb      	strb	r3, [r7, #6]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	80bb      	strh	r3, [r7, #4]
 800b6ca:	79bb      	ldrb	r3, [r7, #6]
 800b6cc:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800b6ce:	7bbb      	ldrb	r3, [r7, #14]
 800b6d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6d4:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800b6d6:	75bb      	strb	r3, [r7, #22]
 800b6d8:	79bb      	ldrb	r3, [r7, #6]
 800b6da:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800b6dc:	7bfb      	ldrb	r3, [r7, #15]
 800b6de:	09db      	lsrs	r3, r3, #7
 800b6e0:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800b6e2:	757b      	strb	r3, [r7, #21]
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 800b6e4:	7dba      	ldrb	r2, [r7, #22]
 800b6e6:	7d7b      	ldrb	r3, [r7, #21]
 800b6e8:	0052      	lsls	r2, r2, #1
 800b6ea:	4413      	add	r3, r2
 800b6ec:	011b      	lsls	r3, r3, #4
 800b6ee:	4a17      	ldr	r2, [pc, #92]	@ (800b74c <dcd_edpt_xfer+0x98>)
 800b6f0:	4413      	add	r3, r2
 800b6f2:	613b      	str	r3, [r7, #16]
  bool ret;

  usbd_spin_lock(false);
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	f7fe fcb1 	bl	800a05c <usbd_spin_lock>

  if (xfer->max_size == 0) {
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	895b      	ldrh	r3, [r3, #10]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d102      	bne.n	800b708 <dcd_edpt_xfer+0x54>
    ret = false;  // Endpoint is closed
 800b702:	2300      	movs	r3, #0
 800b704:	75fb      	strb	r3, [r7, #23]
 800b706:	e018      	b.n	800b73a <dcd_edpt_xfer+0x86>
  } else {
    xfer->buffer = buffer;
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	683a      	ldr	r2, [r7, #0]
 800b70c:	601a      	str	r2, [r3, #0]
    xfer->ff = NULL;
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	2200      	movs	r2, #0
 800b712:	605a      	str	r2, [r3, #4]
    xfer->total_len = total_bytes;
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	88ba      	ldrh	r2, [r7, #4]
 800b718:	811a      	strh	r2, [r3, #8]

    // EP0 can only handle one packet
    if (epnum == 0) {
 800b71a:	7dbb      	ldrb	r3, [r7, #22]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d104      	bne.n	800b72a <dcd_edpt_xfer+0x76>
      _dcd_data.ep0_pending[dir] = total_bytes;
 800b720:	7d7b      	ldrb	r3, [r7, #21]
 800b722:	490b      	ldr	r1, [pc, #44]	@ (800b750 <dcd_edpt_xfer+0x9c>)
 800b724:	88ba      	ldrh	r2, [r7, #4]
 800b726:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir);
 800b72a:	7d7a      	ldrb	r2, [r7, #21]
 800b72c:	7db9      	ldrb	r1, [r7, #22]
 800b72e:	79fb      	ldrb	r3, [r7, #7]
 800b730:	4618      	mov	r0, r3
 800b732:	f7ff fc2b 	bl	800af8c <edpt_schedule_packets>
    ret = true;
 800b736:	2301      	movs	r3, #1
 800b738:	75fb      	strb	r3, [r7, #23]
  }

  usbd_spin_unlock(false);
 800b73a:	2000      	movs	r0, #0
 800b73c:	f7fe fca8 	bl	800a090 <usbd_spin_unlock>

  return ret;
 800b740:	7dfb      	ldrb	r3, [r7, #23]
}
 800b742:	4618      	mov	r0, r3
 800b744:	3718      	adds	r7, #24
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	2000185c 	.word	0x2000185c
 800b750:	200018dc 	.word	0x200018dc

0800b754 <dcd_edpt_stall>:
  usbd_spin_unlock(false);

  return ret;
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800b754:	b580      	push	{r7, lr}
 800b756:	b086      	sub	sp, #24
 800b758:	af00      	add	r7, sp, #0
 800b75a:	4603      	mov	r3, r0
 800b75c:	460a      	mov	r2, r1
 800b75e:	71fb      	strb	r3, [r7, #7]
 800b760:	4613      	mov	r3, r2
 800b762:	71bb      	strb	r3, [r7, #6]
 800b764:	79fb      	ldrb	r3, [r7, #7]
 800b766:	74bb      	strb	r3, [r7, #18]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b768:	7cbb      	ldrb	r3, [r7, #18]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d001      	beq.n	800b772 <dcd_edpt_stall+0x1e>
    rhport = 0;
 800b76e:	2300      	movs	r3, #0
 800b770:	74bb      	strb	r3, [r7, #18]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b772:	7cbb      	ldrb	r3, [r7, #18]
 800b774:	4a11      	ldr	r2, [pc, #68]	@ (800b7bc <dcd_edpt_stall+0x68>)
 800b776:	011b      	lsls	r3, r3, #4
 800b778:	4413      	add	r3, r2
 800b77a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b77c:	617b      	str	r3, [r7, #20]
  edpt_disable(rhport, ep_addr, true);
 800b77e:	79b9      	ldrb	r1, [r7, #6]
 800b780:	79fb      	ldrb	r3, [r7, #7]
 800b782:	2201      	movs	r2, #1
 800b784:	4618      	mov	r0, r3
 800b786:	f7ff fb35 	bl	800adf4 <edpt_disable>
 800b78a:	79bb      	ldrb	r3, [r7, #6]
 800b78c:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800b78e:	7cfb      	ldrb	r3, [r7, #19]
 800b790:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b794:	b2db      	uxtb	r3, r3
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800b796:	2b00      	cmp	r3, #0
 800b798:	d10b      	bne.n	800b7b2 <dcd_edpt_stall+0x5e>
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	60fb      	str	r3, [r7, #12]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b7a2:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800b7a4:	2300      	movs	r3, #0
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d003      	beq.n	800b7b2 <dcd_edpt_stall+0x5e>
    dma_setup_prepare(rhport);
 800b7aa:	79fb      	ldrb	r3, [r7, #7]
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7ff f90b 	bl	800a9c8 <dma_setup_prepare>
  }
}
 800b7b2:	bf00      	nop
 800b7b4:	3718      	adds	r7, #24
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	0800f23c 	.word	0x0800f23c

0800b7c0 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800b7c0:	b480      	push	{r7}
 800b7c2:	b087      	sub	sp, #28
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	460a      	mov	r2, r1
 800b7ca:	71fb      	strb	r3, [r7, #7]
 800b7cc:	4613      	mov	r3, r2
 800b7ce:	71bb      	strb	r3, [r7, #6]
 800b7d0:	79fb      	ldrb	r3, [r7, #7]
 800b7d2:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b7d4:	7a7b      	ldrb	r3, [r7, #9]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d001      	beq.n	800b7de <dcd_edpt_clear_stall+0x1e>
    rhport = 0;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b7de:	7a7b      	ldrb	r3, [r7, #9]
 800b7e0:	4a19      	ldr	r2, [pc, #100]	@ (800b848 <dcd_edpt_clear_stall+0x88>)
 800b7e2:	011b      	lsls	r3, r3, #4
 800b7e4:	4413      	add	r3, r2
 800b7e6:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800b7e8:	617b      	str	r3, [r7, #20]
 800b7ea:	79bb      	ldrb	r3, [r7, #6]
 800b7ec:	72bb      	strb	r3, [r7, #10]
 800b7ee:	7abb      	ldrb	r3, [r7, #10]
 800b7f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7f4:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800b7f6:	74fb      	strb	r3, [r7, #19]
 800b7f8:	79bb      	ldrb	r3, [r7, #6]
 800b7fa:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800b7fc:	7afb      	ldrb	r3, [r7, #11]
 800b7fe:	09db      	lsrs	r3, r3, #7
 800b800:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800b802:	74bb      	strb	r3, [r7, #18]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800b804:	7cbb      	ldrb	r3, [r7, #18]
 800b806:	2b01      	cmp	r3, #1
 800b808:	bf14      	ite	ne
 800b80a:	2301      	movne	r3, #1
 800b80c:	2300      	moveq	r3, #0
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	461a      	mov	r2, r3
 800b812:	7cfb      	ldrb	r3, [r7, #19]
 800b814:	0112      	lsls	r2, r2, #4
 800b816:	4413      	add	r3, r2
 800b818:	3348      	adds	r3, #72	@ 0x48
 800b81a:	015b      	lsls	r3, r3, #5
 800b81c:	697a      	ldr	r2, [r7, #20]
 800b81e:	4413      	add	r3, r2
 800b820:	60fb      	str	r3, [r7, #12]

  // Clear stall and reset data toggle
  dep->ctl &= ~EPCTL_STALL;;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	601a      	str	r2, [r3, #0]
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	601a      	str	r2, [r3, #0]
}
 800b83a:	bf00      	nop
 800b83c:	371c      	adds	r7, #28
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	0800f23c 	.word	0x0800f23c

0800b84c <handle_bus_reset>:
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
// Must be called from critical section
static void handle_bus_reset(uint8_t rhport) {
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b08e      	sub	sp, #56	@ 0x38
 800b850:	af00      	add	r7, sp, #0
 800b852:	4603      	mov	r3, r0
 800b854:	71fb      	strb	r3, [r7, #7]
 800b856:	79fb      	ldrb	r3, [r7, #7]
 800b858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800b85c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b860:	2b00      	cmp	r3, #0
 800b862:	d002      	beq.n	800b86a <handle_bus_reset+0x1e>
    rhport = 0;
 800b864:	2300      	movs	r3, #0
 800b866:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800b86a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b86e:	4a6a      	ldr	r2, [pc, #424]	@ (800ba18 <handle_bus_reset+0x1cc>)
 800b870:	011b      	lsls	r3, r3, #4
 800b872:	4413      	add	r3, r2
 800b874:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800b876:	633b      	str	r3, [r7, #48]	@ 0x30
 800b878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b87a:	62bb      	str	r3, [r7, #40]	@ 0x28
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b87e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b880:	60bb      	str	r3, [r7, #8]
  return ghwcfg2.num_dev_ep + 1;
 800b882:	7a7b      	ldrb	r3, [r7, #9]
 800b884:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	3301      	adds	r3, #1
 800b88c:	b2db      	uxtb	r3, r3
  const uint8_t ep_count =  dwc2_ep_count(dwc2);
 800b88e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  tu_memclr(xfer_status, sizeof(xfer_status));
 800b892:	2280      	movs	r2, #128	@ 0x80
 800b894:	2100      	movs	r1, #0
 800b896:	4861      	ldr	r0, [pc, #388]	@ (800ba1c <handle_bus_reset+0x1d0>)
 800b898:	f001 fb13 	bl	800cec2 <memset>

  _dcd_data.sof_en = false;
 800b89c:	4b60      	ldr	r3, [pc, #384]	@ (800ba20 <handle_bus_reset+0x1d4>)
 800b89e:	2200      	movs	r2, #0
 800b8a0:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 800b8a2:	4b5f      	ldr	r3, [pc, #380]	@ (800ba20 <handle_bus_reset+0x1d4>)
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b8ae:	e014      	b.n	800b8da <handle_bus_reset+0x8e>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 800b8b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b8b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8b6:	3358      	adds	r3, #88	@ 0x58
 800b8b8:	015b      	lsls	r3, r3, #5
 800b8ba:	4413      	add	r3, r2
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b8c2:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800b8c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b8c8:	3358      	adds	r3, #88	@ 0x58
 800b8ca:	015b      	lsls	r3, r3, #5
 800b8cc:	440b      	add	r3, r1
 800b8ce:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 800b8d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b8da:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800b8de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d3e4      	bcc.n	800b8b0 <handle_bus_reset+0x64>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800b8ec:	e01d      	b.n	800b92a <handle_bus_reset+0xde>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 800b8ee:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b8f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8f4:	3348      	adds	r3, #72	@ 0x48
 800b8f6:	015b      	lsls	r3, r3, #5
 800b8f8:	4413      	add	r3, r2
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	da0f      	bge.n	800b920 <handle_bus_reset+0xd4>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 800b900:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b906:	3348      	adds	r3, #72	@ 0x48
 800b908:	015b      	lsls	r3, r3, #5
 800b90a:	4413      	add	r3, r2
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b912:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 800b916:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b918:	3348      	adds	r3, #72	@ 0x48
 800b91a:	015b      	lsls	r3, r3, #5
 800b91c:	440b      	add	r3, r1
 800b91e:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 800b920:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b924:	3301      	adds	r3, #1
 800b926:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800b92a:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800b92e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b932:	429a      	cmp	r2, r3
 800b934:	d3db      	bcc.n	800b8ee <handle_bus_reset+0xa2>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 800b936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b938:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800b93c:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 800b940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b942:	2209      	movs	r2, #9
 800b944:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 800b948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b94a:	2209      	movs	r2, #9
 800b94c:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 800b950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b952:	61bb      	str	r3, [r7, #24]
 800b954:	2310      	movs	r3, #16
 800b956:	75fb      	strb	r3, [r7, #23]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800b958:	7dfb      	ldrb	r3, [r7, #23]
 800b95a:	019b      	lsls	r3, r3, #6
 800b95c:	f043 0220 	orr.w	r2, r3, #32
 800b960:	69bb      	ldr	r3, [r7, #24]
 800b962:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800b964:	bf00      	nop
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	691b      	ldr	r3, [r3, #16]
 800b96a:	f003 0320 	and.w	r3, r3, #32
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d1f9      	bne.n	800b966 <handle_bus_reset+0x11a>
}
 800b972:	bf00      	nop
 800b974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b976:	61fb      	str	r3, [r7, #28]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800b978:	69fb      	ldr	r3, [r7, #28]
 800b97a:	2210      	movs	r2, #16
 800b97c:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800b97e:	bf00      	nop
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	691b      	ldr	r3, [r3, #16]
 800b984:	f003 0310 	and.w	r3, r3, #16
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d1f9      	bne.n	800b980 <handle_bus_reset+0x134>
}
 800b98c:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 800b98e:	79fb      	ldrb	r3, [r7, #7]
 800b990:	4618      	mov	r0, r3
 800b992:	f7ff f937 	bl	800ac04 <dfifo_device_init>

  // 5. Reset device address
  dwc2_dcfg_t dcfg = {.value = dwc2->dcfg};
 800b996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b998:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b99c:	613b      	str	r3, [r7, #16]
  dcfg.address = 0;
 800b99e:	8a3b      	ldrh	r3, [r7, #16]
 800b9a0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b9a4:	823b      	strh	r3, [r7, #16]
  dwc2->dcfg = dcfg.value;
 800b9a6:	693a      	ldr	r2, [r7, #16]
 800b9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9aa:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 800b9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b0:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 800b9b4:	f023 0203 	bic.w	r2, r3, #3
 800b9b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ba:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 800b9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c0:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800b9c4:	f023 0203 	bic.w	r2, r3, #3
 800b9c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ca:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 800b9ce:	4b13      	ldr	r3, [pc, #76]	@ (800ba1c <handle_bus_reset+0x1d0>)
 800b9d0:	2240      	movs	r2, #64	@ 0x40
 800b9d2:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 800b9d4:	4b11      	ldr	r3, [pc, #68]	@ (800ba1c <handle_bus_reset+0x1d0>)
 800b9d6:	2240      	movs	r2, #64	@ 0x40
 800b9d8:	835a      	strh	r2, [r3, #26]
 800b9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9dc:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800b9de:	6a3b      	ldr	r3, [r7, #32]
 800b9e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b9e2:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800b9e4:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d004      	beq.n	800b9f4 <handle_bus_reset+0x1a8>
    dma_setup_prepare(rhport);
 800b9ea:	79fb      	ldrb	r3, [r7, #7]
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fe ffeb 	bl	800a9c8 <dma_setup_prepare>
 800b9f2:	e007      	b.n	800ba04 <handle_bus_reset+0x1b8>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800b9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f6:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 800b9fa:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800b9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba00:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 800ba04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba06:	699b      	ldr	r3, [r3, #24]
 800ba08:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 800ba0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba0e:	619a      	str	r2, [r3, #24]
}
 800ba10:	bf00      	nop
 800ba12:	3738      	adds	r7, #56	@ 0x38
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	0800f23c 	.word	0x0800f23c
 800ba1c:	2000185c 	.word	0x2000185c
 800ba20:	200018dc 	.word	0x200018dc

0800ba24 <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b08a      	sub	sp, #40	@ 0x28
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	71fb      	strb	r3, [r7, #7]
 800ba2e:	79fb      	ldrb	r3, [r7, #7]
 800ba30:	77fb      	strb	r3, [r7, #31]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800ba32:	7ffb      	ldrb	r3, [r7, #31]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d001      	beq.n	800ba3c <handle_enum_done+0x18>
    rhport = 0;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	77fb      	strb	r3, [r7, #31]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800ba3c:	7ffb      	ldrb	r3, [r7, #31]
 800ba3e:	4a1b      	ldr	r2, [pc, #108]	@ (800baac <handle_enum_done+0x88>)
 800ba40:	011b      	lsls	r3, r3, #4
 800ba42:	4413      	add	r3, r2
 800ba44:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800ba46:	623b      	str	r3, [r7, #32]
  const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 800ba48:	6a3b      	ldr	r3, [r7, #32]
 800ba4a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800ba4e:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dsts.enum_speed) {
 800ba50:	7e3b      	ldrb	r3, [r7, #24]
 800ba52:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d002      	beq.n	800ba62 <handle_enum_done+0x3e>
 800ba5c:	2b02      	cmp	r3, #2
 800ba5e:	d004      	beq.n	800ba6a <handle_enum_done+0x46>
 800ba60:	e007      	b.n	800ba72 <handle_enum_done+0x4e>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 800ba62:	2302      	movs	r3, #2
 800ba64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800ba68:	e007      	b.n	800ba7a <handle_enum_done+0x56>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800ba70:	e003      	b.n	800ba7a <handle_enum_done+0x56>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 800ba72:	2300      	movs	r3, #0
 800ba74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800ba78:	bf00      	nop
 800ba7a:	79fb      	ldrb	r3, [r7, #7]
 800ba7c:	77bb      	strb	r3, [r7, #30]
 800ba7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba82:	777b      	strb	r3, [r7, #29]
 800ba84:	2301      	movs	r3, #1
 800ba86:	773b      	strb	r3, [r7, #28]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800ba88:	7fbb      	ldrb	r3, [r7, #30]
 800ba8a:	733b      	strb	r3, [r7, #12]
  event.event_id = DCD_EVENT_BUS_RESET;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	737b      	strb	r3, [r7, #13]
  event.bus_reset.speed = speed;
 800ba90:	7f7b      	ldrb	r3, [r7, #29]
 800ba92:	743b      	strb	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 800ba94:	7f3a      	ldrb	r2, [r7, #28]
 800ba96:	f107 030c 	add.w	r3, r7, #12
 800ba9a:	4611      	mov	r1, r2
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7fe f8df 	bl	8009c60 <dcd_event_handler>
}
 800baa2:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 800baa4:	bf00      	nop
 800baa6:	3728      	adds	r7, #40	@ 0x28
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	0800f23c 	.word	0x0800f23c

0800bab0 <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b08c      	sub	sp, #48	@ 0x30
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	4603      	mov	r3, r0
 800bab8:	71fb      	strb	r3, [r7, #7]
 800baba:	79fb      	ldrb	r3, [r7, #7]
 800babc:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800babe:	7cfb      	ldrb	r3, [r7, #19]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d001      	beq.n	800bac8 <handle_rxflvl_irq+0x18>
    rhport = 0;
 800bac4:	2300      	movs	r3, #0
 800bac6:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800bac8:	7cfb      	ldrb	r3, [r7, #19]
 800baca:	4a49      	ldr	r2, [pc, #292]	@ (800bbf0 <handle_rxflvl_irq+0x140>)
 800bacc:	011b      	lsls	r3, r3, #4
 800bace:	4413      	add	r3, r2
 800bad0:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800bad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800bad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bad6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bada:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp = {.value = dwc2->grxstsp};
 800badc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bade:	6a1b      	ldr	r3, [r3, #32]
 800bae0:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp.ep_ch_num;
 800bae2:	7b3b      	ldrb	r3, [r7, #12]
 800bae4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 800baee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800baf2:	3358      	adds	r3, #88	@ 0x58
 800baf4:	015b      	lsls	r3, r3, #5
 800baf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800baf8:	4413      	add	r3, r2
 800bafa:	623b      	str	r3, [r7, #32]

  switch (grxstsp.packet_status) {
 800bafc:	7bbb      	ldrb	r3, [r7, #14]
 800bafe:	f3c3 0343 	ubfx	r3, r3, #1, #4
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	3b01      	subs	r3, #1
 800bb06:	2b05      	cmp	r3, #5
 800bb08:	d86a      	bhi.n	800bbe0 <handle_rxflvl_irq+0x130>
 800bb0a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb10 <handle_rxflvl_irq+0x60>)
 800bb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb10:	0800bbe1 	.word	0x0800bbe1
 800bb14:	0800bb4f 	.word	0x0800bb4f
 800bb18:	0800bbe1 	.word	0x0800bbe1
 800bb1c:	0800bb41 	.word	0x0800bb41
 800bb20:	0800bbe1 	.word	0x0800bbe1
 800bb24:	0800bb29 	.word	0x0800bb29
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 800bb28:	4b32      	ldr	r3, [pc, #200]	@ (800bbf4 <handle_rxflvl_irq+0x144>)
 800bb2a:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 800bb2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	3304      	adds	r3, #4
 800bb38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb3a:	6812      	ldr	r2, [r2, #0]
 800bb3c:	601a      	str	r2, [r3, #0]
      break;
 800bb3e:	e052      	b.n	800bbe6 <handle_rxflvl_irq+0x136>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800bb40:	6a3b      	ldr	r3, [r7, #32]
 800bb42:	691b      	ldr	r3, [r3, #16]
 800bb44:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800bb48:	6a3b      	ldr	r3, [r7, #32]
 800bb4a:	611a      	str	r2, [r3, #16]
      break;
 800bb4c:	e04b      	b.n	800bbe6 <handle_rxflvl_irq+0x136>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp.byte_count;
 800bb4e:	89bb      	ldrh	r3, [r7, #12]
 800bb50:	f3c3 130a 	ubfx	r3, r3, #4, #11
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800bb58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb5c:	015b      	lsls	r3, r3, #5
 800bb5e:	4a26      	ldr	r2, [pc, #152]	@ (800bbf8 <handle_rxflvl_irq+0x148>)
 800bb60:	4413      	add	r3, r2
 800bb62:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 800bb64:	8b7b      	ldrh	r3, [r7, #26]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d03c      	beq.n	800bbe4 <handle_rxflvl_irq+0x134>
        // Read packet off RxFIFO
        if (xfer->ff) {
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d007      	beq.n	800bb82 <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	8b7a      	ldrh	r2, [r7, #26]
 800bb78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7fc ff7e 	bl	8008a7c <tu_fifo_write_n_const_addr_full_words>
 800bb80:	e00c      	b.n	800bb9c <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	8b7a      	ldrh	r2, [r7, #26]
 800bb88:	4619      	mov	r1, r3
 800bb8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bb8c:	f000 fd70 	bl	800c670 <dfifo_read_packet>
          xfer->buffer += byte_count;
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	8b7b      	ldrh	r3, [r7, #26]
 800bb96:	441a      	add	r2, r3
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	895b      	ldrh	r3, [r3, #10]
 800bba0:	8b7a      	ldrh	r2, [r7, #26]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d21e      	bcs.n	800bbe4 <handle_rxflvl_irq+0x134>
          const dwc2_ep_tsize_t tsiz = {.value = epout->tsiz};
 800bba6:	6a3b      	ldr	r3, [r7, #32]
 800bba8:	691b      	ldr	r3, [r3, #16]
 800bbaa:	60bb      	str	r3, [r7, #8]
          xfer->total_len -= tsiz.xfer_size;
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	891a      	ldrh	r2, [r3, #8]
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	1ad3      	subs	r3, r2, r3
 800bbba:	b29a      	uxth	r2, r3
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 800bbc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d10d      	bne.n	800bbe4 <handle_rxflvl_irq+0x134>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	891a      	ldrh	r2, [r3, #8]
 800bbcc:	4b0b      	ldr	r3, [pc, #44]	@ (800bbfc <handle_rxflvl_irq+0x14c>)
 800bbce:	881b      	ldrh	r3, [r3, #0]
 800bbd0:	1ad3      	subs	r3, r2, r3
 800bbd2:	b29a      	uxth	r2, r3
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 800bbd8:	4b08      	ldr	r3, [pc, #32]	@ (800bbfc <handle_rxflvl_irq+0x14c>)
 800bbda:	2200      	movs	r2, #0
 800bbdc:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 800bbde:	e001      	b.n	800bbe4 <handle_rxflvl_irq+0x134>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 800bbe0:	bf00      	nop
 800bbe2:	e000      	b.n	800bbe6 <handle_rxflvl_irq+0x136>
      break;
 800bbe4:	bf00      	nop
  }
}
 800bbe6:	bf00      	nop
 800bbe8:	3730      	adds	r7, #48	@ 0x30
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	0800f23c 	.word	0x0800f23c
 800bbf4:	200018e4 	.word	0x200018e4
 800bbf8:	2000185c 	.word	0x2000185c
 800bbfc:	200018dc 	.word	0x200018dc

0800bc00 <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b08e      	sub	sp, #56	@ 0x38
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	4603      	mov	r3, r0
 800bc08:	603a      	str	r2, [r7, #0]
 800bc0a:	71fb      	strb	r3, [r7, #7]
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 800bc10:	783b      	ldrb	r3, [r7, #0]
 800bc12:	f003 0308 	and.w	r3, r3, #8
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d01c      	beq.n	800bc56 <handle_epout_slave+0x56>
 800bc1c:	79fb      	ldrb	r3, [r7, #7]
 800bc1e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800bc22:	4b34      	ldr	r3, [pc, #208]	@ (800bcf4 <handle_epout_slave+0xf4>)
 800bc24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc26:	2301      	movs	r3, #1
 800bc28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800bc2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800bc30:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 800bc32:	2306      	movs	r3, #6
 800bc34:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 800bc36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc38:	f107 0318 	add.w	r3, r7, #24
 800bc3c:	6810      	ldr	r0, [r2, #0]
 800bc3e:	6851      	ldr	r1, [r2, #4]
 800bc40:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 800bc42:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800bc46:	f107 0314 	add.w	r3, r7, #20
 800bc4a:	4611      	mov	r1, r2
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7fe f807 	bl	8009c60 <dcd_event_handler>
}
 800bc52:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 800bc54:	e04a      	b.n	800bcec <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 800bc56:	783b      	ldrb	r3, [r7, #0]
 800bc58:	f003 0301 	and.w	r3, r3, #1
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d044      	beq.n	800bcec <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 800bc62:	783b      	ldrb	r3, [r7, #0]
 800bc64:	f003 0320 	and.w	r3, r3, #32
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d13e      	bne.n	800bcec <handle_epout_slave+0xec>
 800bc6e:	787b      	ldrb	r3, [r7, #1]
 800bc70:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d138      	bne.n	800bcec <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800bc7a:	79bb      	ldrb	r3, [r7, #6]
 800bc7c:	015b      	lsls	r3, r3, #5
 800bc7e:	4a1e      	ldr	r2, [pc, #120]	@ (800bcf8 <handle_epout_slave+0xf8>)
 800bc80:	4413      	add	r3, r2
 800bc82:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 800bc84:	79bb      	ldrb	r3, [r7, #6]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d10a      	bne.n	800bca0 <handle_epout_slave+0xa0>
 800bc8a:	4b1c      	ldr	r3, [pc, #112]	@ (800bcfc <handle_epout_slave+0xfc>)
 800bc8c:	881b      	ldrh	r3, [r3, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d006      	beq.n	800bca0 <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 800bc92:	79b9      	ldrb	r1, [r7, #6]
 800bc94:	79fb      	ldrb	r3, [r7, #7]
 800bc96:	2200      	movs	r2, #0
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7ff f977 	bl	800af8c <edpt_schedule_packets>
 800bc9e:	e025      	b.n	800bcec <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800bca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bca2:	891b      	ldrh	r3, [r3, #8]
 800bca4:	461a      	mov	r2, r3
 800bca6:	79fb      	ldrb	r3, [r7, #7]
 800bca8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bcac:	79bb      	ldrb	r3, [r7, #6]
 800bcae:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800bcb2:	627a      	str	r2, [r7, #36]	@ 0x24
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bcba:	2301      	movs	r3, #1
 800bcbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800bcc0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bcc4:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800bcc6:	2307      	movs	r3, #7
 800bcc8:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 800bcca:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bcce:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 800bcd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd2:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 800bcd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bcd8:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 800bcda:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800bcde:	f107 0308 	add.w	r3, r7, #8
 800bce2:	4611      	mov	r1, r2
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7fd ffbb 	bl	8009c60 <dcd_event_handler>
}
 800bcea:	bf00      	nop
      }
    }
  }
}
 800bcec:	3738      	adds	r7, #56	@ 0x38
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	200018e4 	.word	0x200018e4
 800bcf8:	2000185c 	.word	0x2000185c
 800bcfc:	200018dc 	.word	0x200018dc

0800bd00 <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b092      	sub	sp, #72	@ 0x48
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	4603      	mov	r3, r0
 800bd08:	603a      	str	r2, [r7, #0]
 800bd0a:	71fb      	strb	r3, [r7, #7]
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	71bb      	strb	r3, [r7, #6]
 800bd10:	79fb      	ldrb	r3, [r7, #7]
 800bd12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800bd16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d002      	beq.n	800bd24 <handle_epin_slave+0x24>
    rhport = 0;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800bd24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd28:	4a64      	ldr	r2, [pc, #400]	@ (800bebc <handle_epin_slave+0x1bc>)
 800bd2a:	011b      	lsls	r3, r3, #4
 800bd2c:	4413      	add	r3, r2
 800bd2e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800bd30:	643b      	str	r3, [r7, #64]	@ 0x40
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 800bd32:	79bb      	ldrb	r3, [r7, #6]
 800bd34:	3348      	adds	r3, #72	@ 0x48
 800bd36:	015b      	lsls	r3, r3, #5
 800bd38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd3a:	4413      	add	r3, r2
 800bd3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 800bd3e:	79bb      	ldrb	r3, [r7, #6]
 800bd40:	015b      	lsls	r3, r3, #5
 800bd42:	3310      	adds	r3, #16
 800bd44:	4a5e      	ldr	r2, [pc, #376]	@ (800bec0 <handle_epin_slave+0x1c0>)
 800bd46:	4413      	add	r3, r2
 800bd48:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (diepint_bm.xfer_complete) {
 800bd4a:	783b      	ldrb	r3, [r7, #0]
 800bd4c:	f003 0301 	and.w	r3, r3, #1
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d037      	beq.n	800bdc6 <handle_epin_slave+0xc6>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 800bd56:	79bb      	ldrb	r3, [r7, #6]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d10a      	bne.n	800bd72 <handle_epin_slave+0x72>
 800bd5c:	4b59      	ldr	r3, [pc, #356]	@ (800bec4 <handle_epin_slave+0x1c4>)
 800bd5e:	885b      	ldrh	r3, [r3, #2]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d006      	beq.n	800bd72 <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 800bd64:	79b9      	ldrb	r1, [r7, #6]
 800bd66:	79fb      	ldrb	r3, [r7, #7]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7ff f90e 	bl	800af8c <edpt_schedule_packets>
 800bd70:	e029      	b.n	800bdc6 <handle_epin_slave+0xc6>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800bd72:	79bb      	ldrb	r3, [r7, #6]
 800bd74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bd78:	b2d9      	uxtb	r1, r3
 800bd7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd7c:	891b      	ldrh	r3, [r3, #8]
 800bd7e:	461a      	mov	r2, r3
 800bd80:	79fb      	ldrb	r3, [r7, #7]
 800bd82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bd86:	460b      	mov	r3, r1
 800bd88:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800bd8c:	627a      	str	r2, [r7, #36]	@ 0x24
 800bd8e:	2300      	movs	r3, #0
 800bd90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bd94:	2301      	movs	r3, #1
 800bd96:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  event.rhport = rhport;
 800bd9a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bd9e:	743b      	strb	r3, [r7, #16]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800bda0:	2307      	movs	r3, #7
 800bda2:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 800bda4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bda8:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 800bdaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdac:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 800bdae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bdb2:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800bdb4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800bdb8:	f107 0310 	add.w	r3, r7, #16
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7fd ff4e 	bl	8009c60 <dcd_event_handler>
}
 800bdc4:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 800bdc6:	783b      	ldrb	r3, [r7, #0]
 800bdc8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d070      	beq.n	800beb4 <handle_epin_slave+0x1b4>
 800bdd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdd4:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800bdd8:	79ba      	ldrb	r2, [r7, #6]
 800bdda:	2101      	movs	r1, #1
 800bddc:	fa01 f202 	lsl.w	r2, r1, r2
 800bde0:	4013      	ands	r3, r2
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d066      	beq.n	800beb4 <handle_epin_slave+0x1b4>
    dwc2_ep_tsize_t tsiz = {.value = epin->tsiz};
 800bde6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bde8:	691b      	ldr	r3, [r3, #16]
 800bdea:	60fb      	str	r3, [r7, #12]
    const uint16_t remain_packets = tsiz.packet_count;
 800bdec:	89fb      	ldrh	r3, [r7, #14]
 800bdee:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800bdfc:	e03f      	b.n	800be7e <handle_epin_slave+0x17e>
      tsiz.value = epin->tsiz;
 800bdfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be00:	691b      	ldr	r3, [r3, #16]
 800be02:	60fb      	str	r3, [r7, #12]
      const uint16_t remain_bytes = (uint16_t) tsiz.xfer_size;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be0a:	86bb      	strh	r3, [r7, #52]	@ 0x34
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 800be0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be0e:	895a      	ldrh	r2, [r3, #10]
 800be10:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800be12:	843b      	strh	r3, [r7, #32]
 800be14:	4613      	mov	r3, r2
 800be16:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800be18:	8c3a      	ldrh	r2, [r7, #32]
 800be1a:	8bfb      	ldrh	r3, [r7, #30]
 800be1c:	4293      	cmp	r3, r2
 800be1e:	bf28      	it	cs
 800be20:	4613      	movcs	r3, r2
 800be22:	b29b      	uxth	r3, r3
 800be24:	867b      	strh	r3, [r7, #50]	@ 0x32

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 800be26:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800be28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be2a:	699b      	ldr	r3, [r3, #24]
 800be2c:	0099      	lsls	r1, r3, #2
 800be2e:	4b26      	ldr	r3, [pc, #152]	@ (800bec8 <handle_epin_slave+0x1c8>)
 800be30:	400b      	ands	r3, r1
 800be32:	429a      	cmp	r2, r3
 800be34:	d829      	bhi.n	800be8a <handle_epin_slave+0x18a>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 800be36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00d      	beq.n	800be5a <handle_epin_slave+0x15a>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 800be3e:	79bb      	ldrb	r3, [r7, #6]
 800be40:	3301      	adds	r3, #1
 800be42:	031b      	lsls	r3, r3, #12
 800be44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be46:	4413      	add	r3, r2
 800be48:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 800be4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800be50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be52:	4618      	mov	r0, r3
 800be54:	f7fc fdab 	bl	80089ae <tu_fifo_read_n_const_addr_full_words>
 800be58:	e00c      	b.n	800be74 <handle_epin_slave+0x174>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 800be5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800be60:	79b9      	ldrb	r1, [r7, #6]
 800be62:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800be64:	f000 fc55 	bl	800c712 <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 800be68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800be6e:	441a      	add	r2, r3
 800be70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be72:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 800be74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800be78:	3301      	adds	r3, #1
 800be7a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800be7e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800be82:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800be84:	429a      	cmp	r2, r3
 800be86:	d3ba      	bcc.n	800bdfe <handle_epin_slave+0xfe>
 800be88:	e000      	b.n	800be8c <handle_epin_slave+0x18c>
        break;
 800be8a:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    tsiz.value = epin->tsiz;
 800be8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be8e:	691b      	ldr	r3, [r3, #16]
 800be90:	60fb      	str	r3, [r7, #12]
    if (tsiz.xfer_size == 0) {
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d10b      	bne.n	800beb4 <handle_epin_slave+0x1b4>
      dwc2->diepempmsk &= ~(1 << epnum);
 800be9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be9e:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800bea2:	79ba      	ldrb	r2, [r7, #6]
 800bea4:	2101      	movs	r1, #1
 800bea6:	fa01 f202 	lsl.w	r2, r1, r2
 800beaa:	43d2      	mvns	r2, r2
 800beac:	401a      	ands	r2, r3
 800beae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800beb0:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 800beb4:	bf00      	nop
 800beb6:	3748      	adds	r7, #72	@ 0x48
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}
 800bebc:	0800f23c 	.word	0x0800f23c
 800bec0:	2000185c 	.word	0x2000185c
 800bec4:	200018dc 	.word	0x200018dc
 800bec8:	0003fffc 	.word	0x0003fffc

0800becc <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 800becc:	b580      	push	{r7, lr}
 800bece:	b08e      	sub	sp, #56	@ 0x38
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	4603      	mov	r3, r0
 800bed4:	460a      	mov	r2, r1
 800bed6:	71fb      	strb	r3, [r7, #7]
 800bed8:	4613      	mov	r3, r2
 800beda:	71bb      	strb	r3, [r7, #6]
 800bedc:	79fb      	ldrb	r3, [r7, #7]
 800bede:	76fb      	strb	r3, [r7, #27]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800bee0:	7efb      	ldrb	r3, [r7, #27]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d001      	beq.n	800beea <handle_ep_irq+0x1e>
    rhport = 0;
 800bee6:	2300      	movs	r3, #0
 800bee8:	76fb      	strb	r3, [r7, #27]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800beea:	7efb      	ldrb	r3, [r7, #27]
 800beec:	4a38      	ldr	r2, [pc, #224]	@ (800bfd0 <handle_ep_irq+0x104>)
 800beee:	011b      	lsls	r3, r3, #4
 800bef0:	4413      	add	r3, r2
 800bef2:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800bef4:	633b      	str	r3, [r7, #48]	@ 0x30
 800bef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef8:	61fb      	str	r3, [r7, #28]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800befe:	617b      	str	r3, [r7, #20]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800bf00:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800bf02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bf06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf08:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800bf0a:	6a3b      	ldr	r3, [r7, #32]
 800bf0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf0e:	613b      	str	r3, [r7, #16]
  return ghwcfg2.num_dev_ep + 1;
 800bf10:	7c7b      	ldrb	r3, [r7, #17]
 800bf12:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	3301      	adds	r3, #1
 800bf1a:	b2db      	uxtb	r3, r3
  const uint8_t ep_count = dwc2_ep_count(dwc2);
 800bf1c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 800bf20:	79bb      	ldrb	r3, [r7, #6]
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d101      	bne.n	800bf2a <handle_ep_irq+0x5e>
 800bf26:	2300      	movs	r3, #0
 800bf28:	e000      	b.n	800bf2c <handle_ep_irq+0x60>
 800bf2a:	2310      	movs	r3, #16
 800bf2c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 800bf30:	79bb      	ldrb	r3, [r7, #6]
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	bf14      	ite	ne
 800bf36:	2301      	movne	r3, #1
 800bf38:	2300      	moveq	r3, #0
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	025b      	lsls	r3, r3, #9
 800bf3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf44:	4413      	add	r3, r2
 800bf46:	62bb      	str	r3, [r7, #40]	@ 0x28

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800bf48:	2300      	movs	r3, #0
 800bf4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bf4e:	e034      	b.n	800bfba <handle_ep_irq+0xee>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 800bf50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf52:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800bf56:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800bf5a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bf5e:	440b      	add	r3, r1
 800bf60:	fa22 f303 	lsr.w	r3, r2, r3
 800bf64:	f003 0301 	and.w	r3, r3, #1
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d021      	beq.n	800bfb0 <handle_ep_irq+0xe4>
      dwc2_dep_t* epout = &ep_base[epnum];
 800bf6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bf70:	015b      	lsls	r3, r3, #5
 800bf72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf74:	4413      	add	r3, r2
 800bf76:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 800bf78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	60fb      	str	r3, [r7, #12]

      epout->intr = intr.value; // Clear interrupt
 800bf7e:	68fa      	ldr	r2, [r7, #12]
 800bf80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf82:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 800bf84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d111      	bne.n	800bfb0 <handle_ep_irq+0xe4>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 800bf8c:	79bb      	ldrb	r3, [r7, #6]
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d107      	bne.n	800bfa2 <handle_ep_irq+0xd6>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 800bf92:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800bf96:	79fb      	ldrb	r3, [r7, #7]
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7ff feb0 	bl	800bd00 <handle_epin_slave>
 800bfa0:	e006      	b.n	800bfb0 <handle_ep_irq+0xe4>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 800bfa2:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800bfa6:	79fb      	ldrb	r3, [r7, #7]
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7ff fe28 	bl	800bc00 <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800bfb0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bfba:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800bfbe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d3c4      	bcc.n	800bf50 <handle_ep_irq+0x84>
        }
        #endif
      }
    }
  }
}
 800bfc6:	bf00      	nop
 800bfc8:	bf00      	nop
 800bfca:	3738      	adds	r7, #56	@ 0x38
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	0800f23c 	.word	0x0800f23c

0800bfd4 <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b098      	sub	sp, #96	@ 0x60
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	4603      	mov	r3, r0
 800bfdc:	71fb      	strb	r3, [r7, #7]
 800bfde:	79fb      	ldrb	r3, [r7, #7]
 800bfe0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800bfe4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d002      	beq.n	800bff2 <dcd_int_handler+0x1e>
    rhport = 0;
 800bfec:	2300      	movs	r3, #0
 800bfee:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800bff2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800bff6:	4a80      	ldr	r2, [pc, #512]	@ (800c1f8 <dcd_int_handler+0x224>)
 800bff8:	011b      	lsls	r3, r3, #4
 800bffa:	4413      	add	r3, r2
 800bffc:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800bffe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  const uint32_t gintmask = dwc2->gintmsk;
 800c000:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c002:	699b      	ldr	r3, [r3, #24]
 800c004:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 800c006:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c008:	695b      	ldr	r3, [r3, #20]
 800c00a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c00c:	4013      	ands	r3, r2
 800c00e:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 800c010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c012:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00d      	beq.n	800c036 <dcd_int_handler+0x62>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 800c01a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c01c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c020:	615a      	str	r2, [r3, #20]

    usbd_spin_lock(true);
 800c022:	2001      	movs	r0, #1
 800c024:	f7fe f81a 	bl	800a05c <usbd_spin_lock>
    handle_bus_reset(rhport);
 800c028:	79fb      	ldrb	r3, [r7, #7]
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7ff fc0e 	bl	800b84c <handle_bus_reset>
    usbd_spin_unlock(true);
 800c030:	2001      	movs	r0, #1
 800c032:	f7fe f82d 	bl	800a090 <usbd_spin_unlock>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 800c036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c038:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d007      	beq.n	800c050 <dcd_int_handler+0x7c>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 800c040:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c042:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800c046:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 800c048:	79fb      	ldrb	r3, [r7, #7]
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7ff fcea 	bl	800ba24 <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 800c050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c052:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c056:	2b00      	cmp	r3, #0
 800c058:	d01d      	beq.n	800c096 <dcd_int_handler+0xc2>
    dwc2->gintsts = GINTSTS_USBSUSP;
 800c05a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c05c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c060:	615a      	str	r2, [r3, #20]
 800c062:	79fb      	ldrb	r3, [r7, #7]
 800c064:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800c068:	2304      	movs	r3, #4
 800c06a:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 800c06e:	2301      	movs	r3, #1
 800c070:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 800c074:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800c078:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 800c07c:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800c080:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 800c084:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800c088:	f107 0320 	add.w	r3, r7, #32
 800c08c:	4611      	mov	r1, r2
 800c08e:	4618      	mov	r0, r3
 800c090:	f7fd fde6 	bl	8009c60 <dcd_event_handler>
}
 800c094:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 800c096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c098:	2b00      	cmp	r3, #0
 800c09a:	da1d      	bge.n	800c0d8 <dcd_int_handler+0x104>
    dwc2->gintsts = GINTSTS_WKUINT;
 800c09c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c09e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c0a2:	615a      	str	r2, [r3, #20]
 800c0a4:	79fb      	ldrb	r3, [r7, #7]
 800c0a6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c0aa:	2305      	movs	r3, #5
 800c0ac:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 800c0b6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c0ba:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 800c0be:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c0c2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 800c0c6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800c0ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c0ce:	4611      	mov	r1, r2
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7fd fdc5 	bl	8009c60 <dcd_event_handler>
}
 800c0d6:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 800c0d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0da:	f003 0304 	and.w	r3, r3, #4
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d022      	beq.n	800c128 <dcd_int_handler+0x154>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 800c0e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 800c0e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0ea:	f003 0304 	and.w	r3, r3, #4
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d017      	beq.n	800c122 <dcd_int_handler+0x14e>
 800c0f2:	79fb      	ldrb	r3, [r7, #7]
 800c0f4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800c0f8:	2302      	movs	r3, #2
 800c0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0fe:	2301      	movs	r3, #1
 800c100:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 800c104:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800c108:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 800c10a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c10e:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800c110:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 800c114:	f107 0314 	add.w	r3, r7, #20
 800c118:	4611      	mov	r1, r2
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7fd fda0 	bl	8009c60 <dcd_event_handler>
}
 800c120:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 800c122:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c124:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c126:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 800c128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c12a:	f003 0308 	and.w	r3, r3, #8
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d02e      	beq.n	800c190 <dcd_int_handler+0x1bc>
    dwc2->gintsts = GINTSTS_SOF;
 800c132:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c134:	2208      	movs	r2, #8
 800c136:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 800c138:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c13a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800c13e:	0a1b      	lsrs	r3, r3, #8
 800c140:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c144:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 800c146:	4b2d      	ldr	r3, [pc, #180]	@ (800c1fc <dcd_int_handler+0x228>)
 800c148:	79db      	ldrb	r3, [r3, #7]
 800c14a:	f083 0301 	eor.w	r3, r3, #1
 800c14e:	b2db      	uxtb	r3, r3
 800c150:	2b00      	cmp	r3, #0
 800c152:	d005      	beq.n	800c160 <dcd_int_handler+0x18c>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 800c154:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c156:	699b      	ldr	r3, [r3, #24]
 800c158:	f023 0208 	bic.w	r2, r3, #8
 800c15c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c15e:	619a      	str	r2, [r3, #24]
 800c160:	79fb      	ldrb	r3, [r7, #7]
 800c162:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800c166:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c168:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c16a:	2301      	movs	r3, #1
 800c16c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800c170:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800c174:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 800c176:	2303      	movs	r3, #3
 800c178:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 800c17a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c17c:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 800c17e:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800c182:	f107 0308 	add.w	r3, r7, #8
 800c186:	4611      	mov	r1, r2
 800c188:	4618      	mov	r0, r3
 800c18a:	f7fd fd69 	bl	8009c60 <dcd_event_handler>
}
 800c18e:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 800c190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c192:	f003 0310 	and.w	r3, r3, #16
 800c196:	2b00      	cmp	r3, #0
 800c198:	d015      	beq.n	800c1c6 <dcd_int_handler+0x1f2>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 800c19a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c19c:	699b      	ldr	r3, [r3, #24]
 800c19e:	f023 0210 	bic.w	r2, r3, #16
 800c1a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1a4:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 800c1a6:	79fb      	ldrb	r3, [r7, #7]
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7ff fc81 	bl	800bab0 <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 800c1ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1b0:	695b      	ldr	r3, [r3, #20]
 800c1b2:	f003 0310 	and.w	r3, r3, #16
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d1f5      	bne.n	800c1a6 <dcd_int_handler+0x1d2>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 800c1ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1bc:	699b      	ldr	r3, [r3, #24]
 800c1be:	f043 0210 	orr.w	r2, r3, #16
 800c1c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1c4:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 800c1c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d004      	beq.n	800c1da <dcd_int_handler+0x206>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 800c1d0:	79fb      	ldrb	r3, [r7, #7]
 800c1d2:	2100      	movs	r1, #0
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7ff fe79 	bl	800becc <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 800c1da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d004      	beq.n	800c1ee <dcd_int_handler+0x21a>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 800c1e4:	79fb      	ldrb	r3, [r7, #7]
 800c1e6:	2101      	movs	r1, #1
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7ff fe6f 	bl	800becc <handle_ep_irq>
  }
}
 800c1ee:	bf00      	nop
 800c1f0:	3760      	adds	r7, #96	@ 0x60
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	0800f23c 	.word	0x0800f23c
 800c1fc:	200018dc 	.word	0x200018dc

0800c200 <dwc2_phy_init>:

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	460b      	mov	r3, r1
 800c20a:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800c20c:	78fb      	ldrb	r3, [r7, #3]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d106      	bne.n	800c220 <dwc2_phy_init+0x20>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c216:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	639a      	str	r2, [r3, #56]	@ 0x38
      #else

      #endif
    }
  }
}
 800c21e:	e005      	b.n	800c22c <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c224:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800c22c:	bf00      	nop
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	460b      	mov	r3, r1
 800c242:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800c244:	78fb      	ldrb	r3, [r7, #3]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d152      	bne.n	800c2f0 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 800c24a:	4b2c      	ldr	r3, [pc, #176]	@ (800c2fc <dwc2_phy_update+0xc4>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4a2c      	ldr	r2, [pc, #176]	@ (800c300 <dwc2_phy_update+0xc8>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d302      	bcc.n	800c25a <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 800c254:	2306      	movs	r3, #6
 800c256:	60fb      	str	r3, [r7, #12]
 800c258:	e041      	b.n	800c2de <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 800c25a:	4b28      	ldr	r3, [pc, #160]	@ (800c2fc <dwc2_phy_update+0xc4>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4a29      	ldr	r2, [pc, #164]	@ (800c304 <dwc2_phy_update+0xcc>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d902      	bls.n	800c26a <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 800c264:	2307      	movs	r3, #7
 800c266:	60fb      	str	r3, [r7, #12]
 800c268:	e039      	b.n	800c2de <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 800c26a:	4b24      	ldr	r3, [pc, #144]	@ (800c2fc <dwc2_phy_update+0xc4>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a26      	ldr	r2, [pc, #152]	@ (800c308 <dwc2_phy_update+0xd0>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d302      	bcc.n	800c27a <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 800c274:	2308      	movs	r3, #8
 800c276:	60fb      	str	r3, [r7, #12]
 800c278:	e031      	b.n	800c2de <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 800c27a:	4b20      	ldr	r3, [pc, #128]	@ (800c2fc <dwc2_phy_update+0xc4>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4a23      	ldr	r2, [pc, #140]	@ (800c30c <dwc2_phy_update+0xd4>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d902      	bls.n	800c28a <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 800c284:	2309      	movs	r3, #9
 800c286:	60fb      	str	r3, [r7, #12]
 800c288:	e029      	b.n	800c2de <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 800c28a:	4b1c      	ldr	r3, [pc, #112]	@ (800c2fc <dwc2_phy_update+0xc4>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4a20      	ldr	r2, [pc, #128]	@ (800c310 <dwc2_phy_update+0xd8>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d902      	bls.n	800c29a <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 800c294:	230a      	movs	r3, #10
 800c296:	60fb      	str	r3, [r7, #12]
 800c298:	e021      	b.n	800c2de <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 800c29a:	4b18      	ldr	r3, [pc, #96]	@ (800c2fc <dwc2_phy_update+0xc4>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a1d      	ldr	r2, [pc, #116]	@ (800c314 <dwc2_phy_update+0xdc>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d902      	bls.n	800c2aa <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 800c2a4:	230b      	movs	r3, #11
 800c2a6:	60fb      	str	r3, [r7, #12]
 800c2a8:	e019      	b.n	800c2de <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 800c2aa:	4b14      	ldr	r3, [pc, #80]	@ (800c2fc <dwc2_phy_update+0xc4>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	4a1a      	ldr	r2, [pc, #104]	@ (800c318 <dwc2_phy_update+0xe0>)
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d302      	bcc.n	800c2ba <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 800c2b4:	230c      	movs	r3, #12
 800c2b6:	60fb      	str	r3, [r7, #12]
 800c2b8:	e011      	b.n	800c2de <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 800c2ba:	4b10      	ldr	r3, [pc, #64]	@ (800c2fc <dwc2_phy_update+0xc4>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a17      	ldr	r2, [pc, #92]	@ (800c31c <dwc2_phy_update+0xe4>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d302      	bcc.n	800c2ca <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 800c2c4:	230d      	movs	r3, #13
 800c2c6:	60fb      	str	r3, [r7, #12]
 800c2c8:	e009      	b.n	800c2de <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 800c2ca:	4b0c      	ldr	r3, [pc, #48]	@ (800c2fc <dwc2_phy_update+0xc4>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a14      	ldr	r2, [pc, #80]	@ (800c320 <dwc2_phy_update+0xe8>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d302      	bcc.n	800c2da <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 800c2d4:	230e      	movs	r3, #14
 800c2d6:	60fb      	str	r3, [r7, #12]
 800c2d8:	e001      	b.n	800c2de <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 800c2da:	230f      	movs	r3, #15
 800c2dc:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	68db      	ldr	r3, [r3, #12]
 800c2e2:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	029b      	lsls	r3, r3, #10
 800c2ea:	431a      	orrs	r2, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	60da      	str	r2, [r3, #12]
  }
}
 800c2f0:	bf00      	nop
 800c2f2:	3714      	adds	r7, #20
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr
 800c2fc:	20000208 	.word	0x20000208
 800c300:	01e84800 	.word	0x01e84800
 800c304:	01a39ddf 	.word	0x01a39ddf
 800c308:	016e3600 	.word	0x016e3600
 800c30c:	014ca43f 	.word	0x014ca43f
 800c310:	01312cff 	.word	0x01312cff
 800c314:	011a499f 	.word	0x011a499f
 800c318:	01067380 	.word	0x01067380
 800c31c:	00f42400 	.word	0x00f42400
 800c320:	00e4e1c0 	.word	0x00e4e1c0

0800c324 <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	691b      	ldr	r3, [r3, #16]
 800c330:	f043 0201 	orr.w	r2, r3, #1
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	f244 2209 	movw	r2, #16905	@ 0x4209
 800c342:	4293      	cmp	r3, r2
 800c344:	d807      	bhi.n	800c356 <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 800c346:	bf00      	nop
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	691b      	ldr	r3, [r3, #16]
 800c34c:	f003 0301 	and.w	r3, r3, #1
 800c350:	2b00      	cmp	r3, #0
 800c352:	d1f9      	bne.n	800c348 <reset_core+0x24>
 800c354:	e010      	b.n	800c378 <reset_core+0x54>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 800c356:	bf00      	nop
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c360:	2b00      	cmp	r3, #0
 800c362:	d0f9      	beq.n	800c358 <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c36c:	f023 0301 	bic.w	r3, r3, #1
 800c370:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 800c378:	bf00      	nop
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	691b      	ldr	r3, [r3, #16]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	dafb      	bge.n	800c37a <reset_core+0x56>
}
 800c382:	bf00      	nop
 800c384:	bf00      	nop
 800c386:	370c      	adds	r7, #12
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3a4:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800c3ac:	2100      	movs	r1, #0
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f7ff ff26 	bl	800c200 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f7ff ffb5 	bl	800c324 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800c3c0:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800c3c8:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800c3d0:	2100      	movs	r1, #0
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f7ff ff30 	bl	800c238 <dwc2_phy_update>
}
 800c3d8:	bf00      	nop
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	617b      	str	r3, [r7, #20]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c3f2:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg4_t ghwcfg4 = {.value = dwc2->ghwcfg4};
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3f8:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c400:	617b      	str	r3, [r7, #20]

  if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800c402:	7c3b      	ldrb	r3, [r7, #16]
 800c404:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	2b80      	cmp	r3, #128	@ 0x80
 800c40c:	d114      	bne.n	800c438 <phy_hs_init+0x58>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	f043 0310 	orr.w	r3, r3, #16
 800c414:	617b      	str	r3, [r7, #20]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	f023 0308 	bic.w	r3, r3, #8
 800c41c:	617b      	str	r3, [r7, #20]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c424:	617b      	str	r3, [r7, #20]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c42c:	617b      	str	r3, [r7, #20]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 800c434:	617b      	str	r3, [r7, #20]
 800c436:	e012      	b.n	800c45e <phy_hs_init+0x7e>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	f023 0310 	bic.w	r3, r3, #16
 800c43e:	617b      	str	r3, [r7, #20]

    // Set 16-bit interface if supported
    if (ghwcfg4.phy_data_width) {
 800c440:	7b7b      	ldrb	r3, [r7, #13]
 800c442:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c446:	b2db      	uxtb	r3, r3
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d004      	beq.n	800c456 <phy_hs_init+0x76>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	f043 0308 	orr.w	r3, r3, #8
 800c452:	617b      	str	r3, [r7, #20]
 800c454:	e003      	b.n	800c45e <phy_hs_init+0x7e>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	f023 0308 	bic.w	r3, r3, #8
 800c45c:	617b      	str	r3, [r7, #20]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	697a      	ldr	r2, [r7, #20]
 800c462:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, ghwcfg2.hs_phy_type);
 800c464:	7c3b      	ldrb	r3, [r7, #16]
 800c466:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	4619      	mov	r1, r3
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f7ff fec6 	bl	800c200 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f7ff ff55 	bl	800c324 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800c480:	617b      	str	r3, [r7, #20]
  gusbcfg |= (ghwcfg4.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 800c482:	7b7b      	ldrb	r3, [r7, #13]
 800c484:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d002      	beq.n	800c494 <phy_hs_init+0xb4>
 800c48e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800c492:	e001      	b.n	800c498 <phy_hs_init+0xb8>
 800c494:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800c498:	697a      	ldr	r2, [r7, #20]
 800c49a:	4313      	orrs	r3, r2
 800c49c:	617b      	str	r3, [r7, #20]
  dwc2->gusbcfg = gusbcfg;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	697a      	ldr	r2, [r7, #20]
 800c4a2:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, ghwcfg2.hs_phy_type);
 800c4a4:	7c3b      	ldrb	r3, [r7, #16]
 800c4a6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f7ff fec2 	bl	800c238 <dwc2_phy_update>
}
 800c4b4:	bf00      	nop
 800c4b6:	3718      	adds	r7, #24
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4c8:	0c1b      	lsrs	r3, r3, #16
 800c4ca:	041b      	lsls	r3, r3, #16
 800c4cc:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	4a0e      	ldr	r2, [pc, #56]	@ (800c50c <check_dwc2+0x50>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d012      	beq.n	800c4fc <check_dwc2+0x40>
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	4a0d      	ldr	r2, [pc, #52]	@ (800c510 <check_dwc2+0x54>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d00e      	beq.n	800c4fc <check_dwc2+0x40>
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	4a0c      	ldr	r2, [pc, #48]	@ (800c514 <check_dwc2+0x58>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d00a      	beq.n	800c4fc <check_dwc2+0x40>
 800c4e6:	4b0c      	ldr	r3, [pc, #48]	@ (800c518 <check_dwc2+0x5c>)
 800c4e8:	60bb      	str	r3, [r7, #8]
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f003 0301 	and.w	r3, r3, #1
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d000      	beq.n	800c4f8 <check_dwc2+0x3c>
 800c4f6:	be00      	bkpt	0x0000
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	e000      	b.n	800c4fe <check_dwc2+0x42>
#endif

  return true;
 800c4fc:	2301      	movs	r3, #1
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3714      	adds	r7, #20
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr
 800c50a:	bf00      	nop
 800c50c:	4f540000 	.word	0x4f540000
 800c510:	55310000 	.word	0x55310000
 800c514:	55320000 	.word	0x55320000
 800c518:	e000edf0 	.word	0xe000edf0

0800c51c <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 800c51c:	b480      	push	{r7}
 800c51e:	b085      	sub	sp, #20
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	460b      	mov	r3, r1
 800c526:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;
#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 800c528:	78fb      	ldrb	r3, [r7, #3]
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	d101      	bne.n	800c532 <dwc2_core_is_highspeed+0x16>
    return false;
 800c52e:	2300      	movs	r3, #0
 800c530:	e00b      	b.n	800c54a <dwc2_core_is_highspeed+0x2e>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c536:	60fb      	str	r3, [r7, #12]
  return ghwcfg2.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 800c538:	7b3b      	ldrb	r3, [r7, #12]
 800c53a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	2b00      	cmp	r3, #0
 800c542:	bf14      	ite	ne
 800c544:	2301      	movne	r3, #1
 800c546:	2300      	moveq	r3, #0
 800c548:	b2db      	uxtb	r3, r3
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3714      	adds	r7, #20
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr
	...

0800c558 <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 800c558:	b580      	push	{r7, lr}
 800c55a:	b088      	sub	sp, #32
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	4603      	mov	r3, r0
 800c560:	71fb      	strb	r3, [r7, #7]
 800c562:	460b      	mov	r3, r1
 800c564:	71bb      	strb	r3, [r7, #6]
 800c566:	4613      	mov	r3, r2
 800c568:	717b      	strb	r3, [r7, #5]
 800c56a:	79fb      	ldrb	r3, [r7, #7]
 800c56c:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800c56e:	7dfb      	ldrb	r3, [r7, #23]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d001      	beq.n	800c578 <dwc2_core_init+0x20>
    rhport = 0;
 800c574:	2300      	movs	r3, #0
 800c576:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800c578:	7dfb      	ldrb	r3, [r7, #23]
 800c57a:	4a3b      	ldr	r2, [pc, #236]	@ (800c668 <dwc2_core_init+0x110>)
 800c57c:	011b      	lsls	r3, r3, #4
 800c57e:	4413      	add	r3, r2
 800c580:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800c582:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 800c584:	69f8      	ldr	r0, [r7, #28]
 800c586:	f7ff ff99 	bl	800c4bc <check_dwc2>
 800c58a:	4603      	mov	r3, r0
 800c58c:	f083 0301 	eor.w	r3, r3, #1
 800c590:	b2db      	uxtb	r3, r3
 800c592:	2b00      	cmp	r3, #0
 800c594:	d00a      	beq.n	800c5ac <dwc2_core_init+0x54>
 800c596:	4b35      	ldr	r3, [pc, #212]	@ (800c66c <dwc2_core_init+0x114>)
 800c598:	61bb      	str	r3, [r7, #24]
 800c59a:	69bb      	ldr	r3, [r7, #24]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f003 0301 	and.w	r3, r3, #1
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d000      	beq.n	800c5a8 <dwc2_core_init+0x50>
 800c5a6:	be00      	bkpt	0x0000
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	e058      	b.n	800c65e <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	689b      	ldr	r3, [r3, #8]
 800c5b0:	f023 0201 	bic.w	r2, r3, #1
 800c5b4:	69fb      	ldr	r3, [r7, #28]
 800c5b6:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 800c5b8:	79bb      	ldrb	r3, [r7, #6]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d003      	beq.n	800c5c6 <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 800c5be:	69f8      	ldr	r0, [r7, #28]
 800c5c0:	f7ff ff0e 	bl	800c3e0 <phy_hs_init>
 800c5c4:	e002      	b.n	800c5cc <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 800c5c6:	69f8      	ldr	r0, [r7, #28]
 800c5c8:	f7ff fee2 	bl	800c390 <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	f043 0207 	orr.w	r2, r3, #7
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800c5de:	f023 020f 	bic.w	r2, r3, #15
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	60fb      	str	r3, [r7, #12]
 800c5ec:	2310      	movs	r3, #16
 800c5ee:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800c5f0:	7afb      	ldrb	r3, [r7, #11]
 800c5f2:	019b      	lsls	r3, r3, #6
 800c5f4:	f043 0220 	orr.w	r2, r3, #32
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800c5fc:	bf00      	nop
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	691b      	ldr	r3, [r3, #16]
 800c602:	f003 0320 	and.w	r3, r3, #32
 800c606:	2b00      	cmp	r3, #0
 800c608:	d1f9      	bne.n	800c5fe <dwc2_core_init+0xa6>
}
 800c60a:	bf00      	nop
 800c60c:	69fb      	ldr	r3, [r7, #28]
 800c60e:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	2210      	movs	r2, #16
 800c614:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800c616:	bf00      	nop
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	691b      	ldr	r3, [r3, #16]
 800c61c:	f003 0310 	and.w	r3, r3, #16
 800c620:	2b00      	cmp	r3, #0
 800c622:	d1f9      	bne.n	800c618 <dwc2_core_init+0xc0>
}
 800c624:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 800c626:	69fb      	ldr	r3, [r7, #28]
 800c628:	f04f 32ff 	mov.w	r2, #4294967295
 800c62c:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 800c62e:	69fb      	ldr	r3, [r7, #28]
 800c630:	f04f 32ff 	mov.w	r2, #4294967295
 800c634:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 800c636:	69fb      	ldr	r3, [r7, #28]
 800c638:	2200      	movs	r2, #0
 800c63a:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 800c63c:	797b      	ldrb	r3, [r7, #5]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d006      	beq.n	800c650 <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	689b      	ldr	r3, [r3, #8]
 800c646:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 800c64a:	69fb      	ldr	r3, [r7, #28]
 800c64c:	609a      	str	r2, [r3, #8]
 800c64e:	e005      	b.n	800c65c <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	699b      	ldr	r3, [r3, #24]
 800c654:	f043 0210 	orr.w	r2, r3, #16
 800c658:	69fb      	ldr	r3, [r7, #28]
 800c65a:	619a      	str	r2, [r3, #24]
  }

  return true;
 800c65c:	2301      	movs	r3, #1
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3720      	adds	r7, #32
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	0800f24c 	.word	0x0800f24c
 800c66c:	e000edf0 	.word	0xe000edf0

0800c670 <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 800c670:	b480      	push	{r7}
 800c672:	b08f      	sub	sp, #60	@ 0x3c
 800c674:	af00      	add	r7, sp, #0
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	60b9      	str	r1, [r7, #8]
 800c67a:	4613      	mov	r3, r2
 800c67c:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c684:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 800c686:	88fb      	ldrh	r3, [r7, #6]
 800c688:	089b      	lsrs	r3, r3, #2
 800c68a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 800c68c:	e00b      	b.n	800c6a6 <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 800c68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	68ba      	ldr	r2, [r7, #8]
 800c694:	627a      	str	r2, [r7, #36]	@ 0x24
 800c696:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 800c698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69a:	6a3a      	ldr	r2, [r7, #32]
 800c69c:	601a      	str	r2, [r3, #0]
}
 800c69e:	bf00      	nop
    dst += 4;
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	3304      	adds	r3, #4
 800c6a4:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 800c6a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c6a8:	1e5a      	subs	r2, r3, #1
 800c6aa:	86fa      	strh	r2, [r7, #54]	@ 0x36
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d1ee      	bne.n	800c68e <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 800c6b0:	88fb      	ldrh	r3, [r7, #6]
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	f003 0303 	and.w	r3, r3, #3
 800c6b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 800c6bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d020      	beq.n	800c706 <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 800c6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6cc:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 800c6d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d907      	bls.n	800c6ee <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6e4:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 800c6e6:	69ba      	ldr	r2, [r7, #24]
 800c6e8:	0a12      	lsrs	r2, r2, #8
 800c6ea:	b2d2      	uxtb	r2, r2
 800c6ec:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 800c6ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6f2:	2b02      	cmp	r3, #2
 800c6f4:	d907      	bls.n	800c706 <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	3302      	adds	r3, #2
 800c6fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6fc:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 800c6fe:	697a      	ldr	r2, [r7, #20]
 800c700:	0c12      	lsrs	r2, r2, #16
 800c702:	b2d2      	uxtb	r2, r2
 800c704:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800c706:	bf00      	nop
 800c708:	373c      	adds	r7, #60	@ 0x3c
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr

0800c712 <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 800c712:	b480      	push	{r7}
 800c714:	b08b      	sub	sp, #44	@ 0x2c
 800c716:	af00      	add	r7, sp, #0
 800c718:	60f8      	str	r0, [r7, #12]
 800c71a:	607a      	str	r2, [r7, #4]
 800c71c:	461a      	mov	r2, r3
 800c71e:	460b      	mov	r3, r1
 800c720:	72fb      	strb	r3, [r7, #11]
 800c722:	4613      	mov	r3, r2
 800c724:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 800c726:	7afb      	ldrb	r3, [r7, #11]
 800c728:	3301      	adds	r3, #1
 800c72a:	031b      	lsls	r3, r3, #12
 800c72c:	68fa      	ldr	r2, [r7, #12]
 800c72e:	4413      	add	r3, r2
 800c730:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 800c732:	893b      	ldrh	r3, [r7, #8]
 800c734:	089b      	lsrs	r3, r3, #2
 800c736:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 800c738:	e008      	b.n	800c74c <dfifo_write_packet+0x3a>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	601a      	str	r2, [r3, #0]
    src += 4;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	3304      	adds	r3, #4
 800c74a:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 800c74c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c74e:	1e5a      	subs	r2, r3, #1
 800c750:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1f1      	bne.n	800c73a <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 800c756:	893b      	ldrh	r3, [r7, #8]
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	f003 0303 	and.w	r3, r3, #3
 800c75e:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 800c760:	7efb      	ldrb	r3, [r7, #27]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d019      	beq.n	800c79a <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 800c76c:	7efb      	ldrb	r3, [r7, #27]
 800c76e:	2b01      	cmp	r3, #1
 800c770:	d906      	bls.n	800c780 <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	3301      	adds	r3, #1
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	021b      	lsls	r3, r3, #8
 800c77a:	6a3a      	ldr	r2, [r7, #32]
 800c77c:	4313      	orrs	r3, r2
 800c77e:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 800c780:	7efb      	ldrb	r3, [r7, #27]
 800c782:	2b02      	cmp	r3, #2
 800c784:	d906      	bls.n	800c794 <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	3302      	adds	r3, #2
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	041b      	lsls	r3, r3, #16
 800c78e:	6a3a      	ldr	r2, [r7, #32]
 800c790:	4313      	orrs	r3, r2
 800c792:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	6a3a      	ldr	r2, [r7, #32]
 800c798:	601a      	str	r2, [r3, #0]
  }
}
 800c79a:	bf00      	nop
 800c79c:	372c      	adds	r7, #44	@ 0x2c
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr
	...

0800c7a8 <tusb_rhport_init>:
}

//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+
bool tusb_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b086      	sub	sp, #24
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	6039      	str	r1, [r7, #0]
 800c7b2:	71fb      	strb	r3, [r7, #7]
  //  backward compatible called with tusb_init(void)
  #if defined(TUD_OPT_RHPORT) || defined(TUH_OPT_RHPORT)
  if (rh_init == NULL) {
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d11f      	bne.n	800c7fa <tusb_rhport_init+0x52>
    #if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
    // init device stack CFG_TUSB_RHPORTx_MODE must be defined
    const tusb_rhport_init_t dev_init = {
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	723b      	strb	r3, [r7, #8]
 800c7be:	2300      	movs	r3, #0
 800c7c0:	727b      	strb	r3, [r7, #9]
      .role = TUSB_ROLE_DEVICE,
      .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
    };
    TU_ASSERT ( tud_rhport_init(TUD_OPT_RHPORT, &dev_init) );
 800c7c2:	f107 0308 	add.w	r3, r7, #8
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	2000      	movs	r0, #0
 800c7ca:	f7fc fa63 	bl	8008c94 <tud_rhport_init>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	f083 0301 	eor.w	r3, r3, #1
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00a      	beq.n	800c7f0 <tusb_rhport_init+0x48>
 800c7da:	4b23      	ldr	r3, [pc, #140]	@ (800c868 <tusb_rhport_init+0xc0>)
 800c7dc:	60fb      	str	r3, [r7, #12]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f003 0301 	and.w	r3, r3, #1
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d000      	beq.n	800c7ec <tusb_rhport_init+0x44>
 800c7ea:	be00      	bkpt	0x0000
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	e036      	b.n	800c85e <tusb_rhport_init+0xb6>
    _tusb_rhport_role[TUD_OPT_RHPORT] = TUSB_ROLE_DEVICE;
 800c7f0:	4b1e      	ldr	r3, [pc, #120]	@ (800c86c <tusb_rhport_init+0xc4>)
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	701a      	strb	r2, [r3, #0]
    };
    TU_ASSERT( tuh_rhport_init(TUH_OPT_RHPORT, &host_init) );
    _tusb_rhport_role[TUH_OPT_RHPORT] = TUSB_ROLE_HOST;
    #endif

    return true;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e031      	b.n	800c85e <tusb_rhport_init+0xb6>
  }
  #endif

  // new API with explicit rhport and role
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 800c7fa:	79fb      	ldrb	r3, [r7, #7]
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d803      	bhi.n	800c808 <tusb_rhport_init+0x60>
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d10a      	bne.n	800c81e <tusb_rhport_init+0x76>
 800c808:	4b17      	ldr	r3, [pc, #92]	@ (800c868 <tusb_rhport_init+0xc0>)
 800c80a:	613b      	str	r3, [r7, #16]
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f003 0301 	and.w	r3, r3, #1
 800c814:	2b00      	cmp	r3, #0
 800c816:	d000      	beq.n	800c81a <tusb_rhport_init+0x72>
 800c818:	be00      	bkpt	0x0000
 800c81a:	2300      	movs	r3, #0
 800c81c:	e01f      	b.n	800c85e <tusb_rhport_init+0xb6>
  _tusb_rhport_role[rhport] = rh_init->role;
 800c81e:	79fb      	ldrb	r3, [r7, #7]
 800c820:	683a      	ldr	r2, [r7, #0]
 800c822:	7811      	ldrb	r1, [r2, #0]
 800c824:	4a11      	ldr	r2, [pc, #68]	@ (800c86c <tusb_rhport_init+0xc4>)
 800c826:	54d1      	strb	r1, [r2, r3]

  #if CFG_TUD_ENABLED
  if (rh_init->role == TUSB_ROLE_DEVICE) {
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d115      	bne.n	800c85c <tusb_rhport_init+0xb4>
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
 800c830:	79fb      	ldrb	r3, [r7, #7]
 800c832:	6839      	ldr	r1, [r7, #0]
 800c834:	4618      	mov	r0, r3
 800c836:	f7fc fa2d 	bl	8008c94 <tud_rhport_init>
 800c83a:	4603      	mov	r3, r0
 800c83c:	f083 0301 	eor.w	r3, r3, #1
 800c840:	b2db      	uxtb	r3, r3
 800c842:	2b00      	cmp	r3, #0
 800c844:	d00a      	beq.n	800c85c <tusb_rhport_init+0xb4>
 800c846:	4b08      	ldr	r3, [pc, #32]	@ (800c868 <tusb_rhport_init+0xc0>)
 800c848:	617b      	str	r3, [r7, #20]
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f003 0301 	and.w	r3, r3, #1
 800c852:	2b00      	cmp	r3, #0
 800c854:	d000      	beq.n	800c858 <tusb_rhport_init+0xb0>
 800c856:	be00      	bkpt	0x0000
 800c858:	2300      	movs	r3, #0
 800c85a:	e000      	b.n	800c85e <tusb_rhport_init+0xb6>
  if (rh_init->role == TUSB_ROLE_HOST) {
    TU_ASSERT(tuh_rhport_init(rhport, rh_init));
  }
  #endif

  return true;
 800c85c:	2301      	movs	r3, #1
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3718      	adds	r7, #24
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	e000edf0 	.word	0xe000edf0
 800c86c:	200018ec 	.word	0x200018ec

0800c870 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800c870:	b480      	push	{r7}
 800c872:	b085      	sub	sp, #20
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c882:	b2db      	uxtb	r3, r3
 800c884:	2b00      	cmp	r3, #0
 800c886:	d106      	bne.n	800c896 <tu_edpt_claim+0x26>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c890:	b2db      	uxtb	r3, r3
 800c892:	2b00      	cmp	r3, #0
 800c894:	d001      	beq.n	800c89a <tu_edpt_claim+0x2a>
 800c896:	2300      	movs	r3, #0
 800c898:	e01e      	b.n	800c8d8 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d108      	bne.n	800c8ba <tu_edpt_claim+0x4a>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c8b0:	b2db      	uxtb	r3, r3
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d101      	bne.n	800c8ba <tu_edpt_claim+0x4a>
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	e000      	b.n	800c8bc <tu_edpt_claim+0x4c>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	73fb      	strb	r3, [r7, #15]
 800c8be:	7bfb      	ldrb	r3, [r7, #15]
 800c8c0:	f003 0301 	and.w	r3, r3, #1
 800c8c4:	73fb      	strb	r3, [r7, #15]
  if (available) {
 800c8c6:	7bfb      	ldrb	r3, [r7, #15]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d004      	beq.n	800c8d6 <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	7813      	ldrb	r3, [r2, #0]
 800c8d0:	f043 0304 	orr.w	r3, r3, #4
 800c8d4:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 800c8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3714      	adds	r7, #20
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d108      	bne.n	800c90e <tu_edpt_release+0x2a>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c904:	b2db      	uxtb	r3, r3
 800c906:	2b00      	cmp	r3, #0
 800c908:	d101      	bne.n	800c90e <tu_edpt_release+0x2a>
 800c90a:	2301      	movs	r3, #1
 800c90c:	e000      	b.n	800c910 <tu_edpt_release+0x2c>
 800c90e:	2300      	movs	r3, #0
 800c910:	73fb      	strb	r3, [r7, #15]
 800c912:	7bfb      	ldrb	r3, [r7, #15]
 800c914:	f003 0301 	and.w	r3, r3, #1
 800c918:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 800c91a:	7bfb      	ldrb	r3, [r7, #15]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d004      	beq.n	800c92a <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	7813      	ldrb	r3, [r2, #0]
 800c924:	f023 0304 	bic.w	r3, r3, #4
 800c928:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 800c92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3714      	adds	r7, #20
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr

0800c938 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 800c938:	b480      	push	{r7}
 800c93a:	b08b      	sub	sp, #44	@ 0x2c
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	460b      	mov	r3, r1
 800c942:	70fb      	strb	r3, [r7, #3]
 800c944:	4613      	mov	r3, r2
 800c946:	70bb      	strb	r3, [r7, #2]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	889b      	ldrh	r3, [r3, #4]
 800c950:	b29b      	uxth	r3, r3
 800c952:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c956:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800c958:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	78db      	ldrb	r3, [r3, #3]
 800c95e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c962:	b2db      	uxtb	r3, r3
 800c964:	2b03      	cmp	r3, #3
 800c966:	d059      	beq.n	800ca1c <tu_edpt_validate+0xe4>
 800c968:	2b03      	cmp	r3, #3
 800c96a:	dc6e      	bgt.n	800ca4a <tu_edpt_validate+0x112>
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d002      	beq.n	800c976 <tu_edpt_validate+0x3e>
 800c970:	2b02      	cmp	r3, #2
 800c972:	d018      	beq.n	800c9a6 <tu_edpt_validate+0x6e>
 800c974:	e069      	b.n	800ca4a <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800c976:	78fb      	ldrb	r3, [r7, #3]
 800c978:	2b02      	cmp	r3, #2
 800c97a:	d102      	bne.n	800c982 <tu_edpt_validate+0x4a>
 800c97c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c980:	e001      	b.n	800c986 <tu_edpt_validate+0x4e>
 800c982:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800c986:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 800c988:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c98a:	8a7b      	ldrh	r3, [r7, #18]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d95e      	bls.n	800ca4e <tu_edpt_validate+0x116>
 800c990:	4b35      	ldr	r3, [pc, #212]	@ (800ca68 <tu_edpt_validate+0x130>)
 800c992:	60fb      	str	r3, [r7, #12]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f003 0301 	and.w	r3, r3, #1
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d000      	beq.n	800c9a2 <tu_edpt_validate+0x6a>
 800c9a0:	be00      	bkpt	0x0000
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	e059      	b.n	800ca5a <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 800c9a6:	78fb      	ldrb	r3, [r7, #3]
 800c9a8:	2b02      	cmp	r3, #2
 800c9aa:	d10e      	bne.n	800c9ca <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 800c9ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c9ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9b2:	d04e      	beq.n	800ca52 <tu_edpt_validate+0x11a>
 800c9b4:	4b2c      	ldr	r3, [pc, #176]	@ (800ca68 <tu_edpt_validate+0x130>)
 800c9b6:	617b      	str	r3, [r7, #20]
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f003 0301 	and.w	r3, r3, #1
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d000      	beq.n	800c9c6 <tu_edpt_validate+0x8e>
 800c9c4:	be00      	bkpt	0x0000
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	e047      	b.n	800ca5a <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 800c9ca:	78bb      	ldrb	r3, [r7, #2]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d00e      	beq.n	800c9ee <tu_edpt_validate+0xb6>
 800c9d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c9d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9d6:	d10a      	bne.n	800c9ee <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 800c9dc:	69fb      	ldr	r3, [r7, #28]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c9e4:	711a      	strb	r2, [r3, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 800c9ea:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 800c9ec:	e031      	b.n	800ca52 <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 800c9ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c9f0:	2b08      	cmp	r3, #8
 800c9f2:	d02e      	beq.n	800ca52 <tu_edpt_validate+0x11a>
 800c9f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c9f6:	2b10      	cmp	r3, #16
 800c9f8:	d02b      	beq.n	800ca52 <tu_edpt_validate+0x11a>
 800c9fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c9fc:	2b20      	cmp	r3, #32
 800c9fe:	d028      	beq.n	800ca52 <tu_edpt_validate+0x11a>
 800ca00:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ca02:	2b40      	cmp	r3, #64	@ 0x40
 800ca04:	d025      	beq.n	800ca52 <tu_edpt_validate+0x11a>
 800ca06:	4b18      	ldr	r3, [pc, #96]	@ (800ca68 <tu_edpt_validate+0x130>)
 800ca08:	61bb      	str	r3, [r7, #24]
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f003 0301 	and.w	r3, r3, #1
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d000      	beq.n	800ca18 <tu_edpt_validate+0xe0>
 800ca16:	be00      	bkpt	0x0000
 800ca18:	2300      	movs	r3, #0
 800ca1a:	e01e      	b.n	800ca5a <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800ca1c:	78fb      	ldrb	r3, [r7, #3]
 800ca1e:	2b02      	cmp	r3, #2
 800ca20:	d102      	bne.n	800ca28 <tu_edpt_validate+0xf0>
 800ca22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca26:	e000      	b.n	800ca2a <tu_edpt_validate+0xf2>
 800ca28:	2340      	movs	r3, #64	@ 0x40
 800ca2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800ca2c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ca2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d910      	bls.n	800ca56 <tu_edpt_validate+0x11e>
 800ca34:	4b0c      	ldr	r3, [pc, #48]	@ (800ca68 <tu_edpt_validate+0x130>)
 800ca36:	623b      	str	r3, [r7, #32]
 800ca38:	6a3b      	ldr	r3, [r7, #32]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f003 0301 	and.w	r3, r3, #1
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d000      	beq.n	800ca46 <tu_edpt_validate+0x10e>
 800ca44:	be00      	bkpt	0x0000
 800ca46:	2300      	movs	r3, #0
 800ca48:	e007      	b.n	800ca5a <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	e005      	b.n	800ca5a <tu_edpt_validate+0x122>
      break;
 800ca4e:	bf00      	nop
 800ca50:	e002      	b.n	800ca58 <tu_edpt_validate+0x120>
      break;
 800ca52:	bf00      	nop
 800ca54:	e000      	b.n	800ca58 <tu_edpt_validate+0x120>
      break;
 800ca56:	bf00      	nop
  }

  return true;
 800ca58:	2301      	movs	r3, #1
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	372c      	adds	r7, #44	@ 0x2c
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	e000edf0 	.word	0xe000edf0

0800ca6c <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 800ca6c:	b480      	push	{r7}
 800ca6e:	b08d      	sub	sp, #52	@ 0x34
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	60f8      	str	r0, [r7, #12]
 800ca74:	60b9      	str	r1, [r7, #8]
 800ca76:	4611      	mov	r1, r2
 800ca78:	461a      	mov	r2, r3
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	80fb      	strh	r3, [r7, #6]
 800ca7e:	4613      	mov	r3, r2
 800ca80:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800ca86:	88fb      	ldrh	r3, [r7, #6]
 800ca88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca8a:	4413      	add	r3, r2
 800ca8c:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 800ca8e:	e027      	b.n	800cae0 <tu_edpt_bind_driver+0x74>
 800ca90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca92:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800ca94:	6a3b      	ldr	r3, [r7, #32]
 800ca96:	3301      	adds	r3, #1
 800ca98:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 800ca9a:	2b05      	cmp	r3, #5
 800ca9c:	d116      	bne.n	800cacc <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800ca9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caa0:	789b      	ldrb	r3, [r3, #2]
 800caa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800caa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800caaa:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800caac:	7fbb      	ldrb	r3, [r7, #30]
 800caae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cab2:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800cab4:	005b      	lsls	r3, r3, #1
 800cab6:	68fa      	ldr	r2, [r7, #12]
 800cab8:	4413      	add	r3, r2
 800caba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cabe:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800cac0:	7ffa      	ldrb	r2, [r7, #31]
 800cac2:	09d2      	lsrs	r2, r2, #7
 800cac4:	b2d2      	uxtb	r2, r2
 800cac6:	4611      	mov	r1, r2
 800cac8:	797a      	ldrb	r2, [r7, #5]
 800caca:	545a      	strb	r2, [r3, r1]
 800cacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cace:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800cad0:	69bb      	ldr	r3, [r7, #24]
 800cad2:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	461a      	mov	r2, r3
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 800cade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 800cae0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d3d3      	bcc.n	800ca90 <tu_edpt_bind_driver+0x24>
  }
}
 800cae8:	bf00      	nop
 800caea:	bf00      	nop
 800caec:	3734      	adds	r7, #52	@ 0x34
 800caee:	46bd      	mov	sp, r7
 800caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf4:	4770      	bx	lr

0800caf6 <atoi>:
 800caf6:	220a      	movs	r2, #10
 800caf8:	2100      	movs	r1, #0
 800cafa:	f000 b87b 	b.w	800cbf4 <strtol>
	...

0800cb00 <_strtol_l.isra.0>:
 800cb00:	2b24      	cmp	r3, #36	@ 0x24
 800cb02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb06:	4686      	mov	lr, r0
 800cb08:	4690      	mov	r8, r2
 800cb0a:	d801      	bhi.n	800cb10 <_strtol_l.isra.0+0x10>
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d106      	bne.n	800cb1e <_strtol_l.isra.0+0x1e>
 800cb10:	f000 fa82 	bl	800d018 <__errno>
 800cb14:	2316      	movs	r3, #22
 800cb16:	6003      	str	r3, [r0, #0]
 800cb18:	2000      	movs	r0, #0
 800cb1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb1e:	4834      	ldr	r0, [pc, #208]	@ (800cbf0 <_strtol_l.isra.0+0xf0>)
 800cb20:	460d      	mov	r5, r1
 800cb22:	462a      	mov	r2, r5
 800cb24:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb28:	5d06      	ldrb	r6, [r0, r4]
 800cb2a:	f016 0608 	ands.w	r6, r6, #8
 800cb2e:	d1f8      	bne.n	800cb22 <_strtol_l.isra.0+0x22>
 800cb30:	2c2d      	cmp	r4, #45	@ 0x2d
 800cb32:	d110      	bne.n	800cb56 <_strtol_l.isra.0+0x56>
 800cb34:	782c      	ldrb	r4, [r5, #0]
 800cb36:	2601      	movs	r6, #1
 800cb38:	1c95      	adds	r5, r2, #2
 800cb3a:	f033 0210 	bics.w	r2, r3, #16
 800cb3e:	d115      	bne.n	800cb6c <_strtol_l.isra.0+0x6c>
 800cb40:	2c30      	cmp	r4, #48	@ 0x30
 800cb42:	d10d      	bne.n	800cb60 <_strtol_l.isra.0+0x60>
 800cb44:	782a      	ldrb	r2, [r5, #0]
 800cb46:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cb4a:	2a58      	cmp	r2, #88	@ 0x58
 800cb4c:	d108      	bne.n	800cb60 <_strtol_l.isra.0+0x60>
 800cb4e:	786c      	ldrb	r4, [r5, #1]
 800cb50:	3502      	adds	r5, #2
 800cb52:	2310      	movs	r3, #16
 800cb54:	e00a      	b.n	800cb6c <_strtol_l.isra.0+0x6c>
 800cb56:	2c2b      	cmp	r4, #43	@ 0x2b
 800cb58:	bf04      	itt	eq
 800cb5a:	782c      	ldrbeq	r4, [r5, #0]
 800cb5c:	1c95      	addeq	r5, r2, #2
 800cb5e:	e7ec      	b.n	800cb3a <_strtol_l.isra.0+0x3a>
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d1f6      	bne.n	800cb52 <_strtol_l.isra.0+0x52>
 800cb64:	2c30      	cmp	r4, #48	@ 0x30
 800cb66:	bf14      	ite	ne
 800cb68:	230a      	movne	r3, #10
 800cb6a:	2308      	moveq	r3, #8
 800cb6c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cb70:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cb74:	2200      	movs	r2, #0
 800cb76:	fbbc f9f3 	udiv	r9, ip, r3
 800cb7a:	4610      	mov	r0, r2
 800cb7c:	fb03 ca19 	mls	sl, r3, r9, ip
 800cb80:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cb84:	2f09      	cmp	r7, #9
 800cb86:	d80f      	bhi.n	800cba8 <_strtol_l.isra.0+0xa8>
 800cb88:	463c      	mov	r4, r7
 800cb8a:	42a3      	cmp	r3, r4
 800cb8c:	dd1b      	ble.n	800cbc6 <_strtol_l.isra.0+0xc6>
 800cb8e:	1c57      	adds	r7, r2, #1
 800cb90:	d007      	beq.n	800cba2 <_strtol_l.isra.0+0xa2>
 800cb92:	4581      	cmp	r9, r0
 800cb94:	d314      	bcc.n	800cbc0 <_strtol_l.isra.0+0xc0>
 800cb96:	d101      	bne.n	800cb9c <_strtol_l.isra.0+0x9c>
 800cb98:	45a2      	cmp	sl, r4
 800cb9a:	db11      	blt.n	800cbc0 <_strtol_l.isra.0+0xc0>
 800cb9c:	fb00 4003 	mla	r0, r0, r3, r4
 800cba0:	2201      	movs	r2, #1
 800cba2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cba6:	e7eb      	b.n	800cb80 <_strtol_l.isra.0+0x80>
 800cba8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cbac:	2f19      	cmp	r7, #25
 800cbae:	d801      	bhi.n	800cbb4 <_strtol_l.isra.0+0xb4>
 800cbb0:	3c37      	subs	r4, #55	@ 0x37
 800cbb2:	e7ea      	b.n	800cb8a <_strtol_l.isra.0+0x8a>
 800cbb4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cbb8:	2f19      	cmp	r7, #25
 800cbba:	d804      	bhi.n	800cbc6 <_strtol_l.isra.0+0xc6>
 800cbbc:	3c57      	subs	r4, #87	@ 0x57
 800cbbe:	e7e4      	b.n	800cb8a <_strtol_l.isra.0+0x8a>
 800cbc0:	f04f 32ff 	mov.w	r2, #4294967295
 800cbc4:	e7ed      	b.n	800cba2 <_strtol_l.isra.0+0xa2>
 800cbc6:	1c53      	adds	r3, r2, #1
 800cbc8:	d108      	bne.n	800cbdc <_strtol_l.isra.0+0xdc>
 800cbca:	2322      	movs	r3, #34	@ 0x22
 800cbcc:	f8ce 3000 	str.w	r3, [lr]
 800cbd0:	4660      	mov	r0, ip
 800cbd2:	f1b8 0f00 	cmp.w	r8, #0
 800cbd6:	d0a0      	beq.n	800cb1a <_strtol_l.isra.0+0x1a>
 800cbd8:	1e69      	subs	r1, r5, #1
 800cbda:	e006      	b.n	800cbea <_strtol_l.isra.0+0xea>
 800cbdc:	b106      	cbz	r6, 800cbe0 <_strtol_l.isra.0+0xe0>
 800cbde:	4240      	negs	r0, r0
 800cbe0:	f1b8 0f00 	cmp.w	r8, #0
 800cbe4:	d099      	beq.n	800cb1a <_strtol_l.isra.0+0x1a>
 800cbe6:	2a00      	cmp	r2, #0
 800cbe8:	d1f6      	bne.n	800cbd8 <_strtol_l.isra.0+0xd8>
 800cbea:	f8c8 1000 	str.w	r1, [r8]
 800cbee:	e794      	b.n	800cb1a <_strtol_l.isra.0+0x1a>
 800cbf0:	0800f25d 	.word	0x0800f25d

0800cbf4 <strtol>:
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	460a      	mov	r2, r1
 800cbf8:	4601      	mov	r1, r0
 800cbfa:	4802      	ldr	r0, [pc, #8]	@ (800cc04 <strtol+0x10>)
 800cbfc:	6800      	ldr	r0, [r0, #0]
 800cbfe:	f7ff bf7f 	b.w	800cb00 <_strtol_l.isra.0>
 800cc02:	bf00      	nop
 800cc04:	20000250 	.word	0x20000250

0800cc08 <std>:
 800cc08:	2300      	movs	r3, #0
 800cc0a:	b510      	push	{r4, lr}
 800cc0c:	4604      	mov	r4, r0
 800cc0e:	e9c0 3300 	strd	r3, r3, [r0]
 800cc12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc16:	6083      	str	r3, [r0, #8]
 800cc18:	8181      	strh	r1, [r0, #12]
 800cc1a:	6643      	str	r3, [r0, #100]	@ 0x64
 800cc1c:	81c2      	strh	r2, [r0, #14]
 800cc1e:	6183      	str	r3, [r0, #24]
 800cc20:	4619      	mov	r1, r3
 800cc22:	2208      	movs	r2, #8
 800cc24:	305c      	adds	r0, #92	@ 0x5c
 800cc26:	f000 f94c 	bl	800cec2 <memset>
 800cc2a:	4b0d      	ldr	r3, [pc, #52]	@ (800cc60 <std+0x58>)
 800cc2c:	6263      	str	r3, [r4, #36]	@ 0x24
 800cc2e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc64 <std+0x5c>)
 800cc30:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cc32:	4b0d      	ldr	r3, [pc, #52]	@ (800cc68 <std+0x60>)
 800cc34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cc36:	4b0d      	ldr	r3, [pc, #52]	@ (800cc6c <std+0x64>)
 800cc38:	6323      	str	r3, [r4, #48]	@ 0x30
 800cc3a:	4b0d      	ldr	r3, [pc, #52]	@ (800cc70 <std+0x68>)
 800cc3c:	6224      	str	r4, [r4, #32]
 800cc3e:	429c      	cmp	r4, r3
 800cc40:	d006      	beq.n	800cc50 <std+0x48>
 800cc42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cc46:	4294      	cmp	r4, r2
 800cc48:	d002      	beq.n	800cc50 <std+0x48>
 800cc4a:	33d0      	adds	r3, #208	@ 0xd0
 800cc4c:	429c      	cmp	r4, r3
 800cc4e:	d105      	bne.n	800cc5c <std+0x54>
 800cc50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cc54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc58:	f000 ba08 	b.w	800d06c <__retarget_lock_init_recursive>
 800cc5c:	bd10      	pop	{r4, pc}
 800cc5e:	bf00      	nop
 800cc60:	0800ce3d 	.word	0x0800ce3d
 800cc64:	0800ce5f 	.word	0x0800ce5f
 800cc68:	0800ce97 	.word	0x0800ce97
 800cc6c:	0800cebb 	.word	0x0800cebb
 800cc70:	200018f0 	.word	0x200018f0

0800cc74 <stdio_exit_handler>:
 800cc74:	4a02      	ldr	r2, [pc, #8]	@ (800cc80 <stdio_exit_handler+0xc>)
 800cc76:	4903      	ldr	r1, [pc, #12]	@ (800cc84 <stdio_exit_handler+0x10>)
 800cc78:	4803      	ldr	r0, [pc, #12]	@ (800cc88 <stdio_exit_handler+0x14>)
 800cc7a:	f000 b869 	b.w	800cd50 <_fwalk_sglue>
 800cc7e:	bf00      	nop
 800cc80:	20000244 	.word	0x20000244
 800cc84:	0800dc21 	.word	0x0800dc21
 800cc88:	20000254 	.word	0x20000254

0800cc8c <cleanup_stdio>:
 800cc8c:	6841      	ldr	r1, [r0, #4]
 800cc8e:	4b0c      	ldr	r3, [pc, #48]	@ (800ccc0 <cleanup_stdio+0x34>)
 800cc90:	4299      	cmp	r1, r3
 800cc92:	b510      	push	{r4, lr}
 800cc94:	4604      	mov	r4, r0
 800cc96:	d001      	beq.n	800cc9c <cleanup_stdio+0x10>
 800cc98:	f000 ffc2 	bl	800dc20 <_fflush_r>
 800cc9c:	68a1      	ldr	r1, [r4, #8]
 800cc9e:	4b09      	ldr	r3, [pc, #36]	@ (800ccc4 <cleanup_stdio+0x38>)
 800cca0:	4299      	cmp	r1, r3
 800cca2:	d002      	beq.n	800ccaa <cleanup_stdio+0x1e>
 800cca4:	4620      	mov	r0, r4
 800cca6:	f000 ffbb 	bl	800dc20 <_fflush_r>
 800ccaa:	68e1      	ldr	r1, [r4, #12]
 800ccac:	4b06      	ldr	r3, [pc, #24]	@ (800ccc8 <cleanup_stdio+0x3c>)
 800ccae:	4299      	cmp	r1, r3
 800ccb0:	d004      	beq.n	800ccbc <cleanup_stdio+0x30>
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccb8:	f000 bfb2 	b.w	800dc20 <_fflush_r>
 800ccbc:	bd10      	pop	{r4, pc}
 800ccbe:	bf00      	nop
 800ccc0:	200018f0 	.word	0x200018f0
 800ccc4:	20001958 	.word	0x20001958
 800ccc8:	200019c0 	.word	0x200019c0

0800cccc <global_stdio_init.part.0>:
 800cccc:	b510      	push	{r4, lr}
 800ccce:	4b0b      	ldr	r3, [pc, #44]	@ (800ccfc <global_stdio_init.part.0+0x30>)
 800ccd0:	4c0b      	ldr	r4, [pc, #44]	@ (800cd00 <global_stdio_init.part.0+0x34>)
 800ccd2:	4a0c      	ldr	r2, [pc, #48]	@ (800cd04 <global_stdio_init.part.0+0x38>)
 800ccd4:	601a      	str	r2, [r3, #0]
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	2200      	movs	r2, #0
 800ccda:	2104      	movs	r1, #4
 800ccdc:	f7ff ff94 	bl	800cc08 <std>
 800cce0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cce4:	2201      	movs	r2, #1
 800cce6:	2109      	movs	r1, #9
 800cce8:	f7ff ff8e 	bl	800cc08 <std>
 800ccec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ccf0:	2202      	movs	r2, #2
 800ccf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccf6:	2112      	movs	r1, #18
 800ccf8:	f7ff bf86 	b.w	800cc08 <std>
 800ccfc:	20001a28 	.word	0x20001a28
 800cd00:	200018f0 	.word	0x200018f0
 800cd04:	0800cc75 	.word	0x0800cc75

0800cd08 <__sfp_lock_acquire>:
 800cd08:	4801      	ldr	r0, [pc, #4]	@ (800cd10 <__sfp_lock_acquire+0x8>)
 800cd0a:	f000 b9b0 	b.w	800d06e <__retarget_lock_acquire_recursive>
 800cd0e:	bf00      	nop
 800cd10:	20001a31 	.word	0x20001a31

0800cd14 <__sfp_lock_release>:
 800cd14:	4801      	ldr	r0, [pc, #4]	@ (800cd1c <__sfp_lock_release+0x8>)
 800cd16:	f000 b9ab 	b.w	800d070 <__retarget_lock_release_recursive>
 800cd1a:	bf00      	nop
 800cd1c:	20001a31 	.word	0x20001a31

0800cd20 <__sinit>:
 800cd20:	b510      	push	{r4, lr}
 800cd22:	4604      	mov	r4, r0
 800cd24:	f7ff fff0 	bl	800cd08 <__sfp_lock_acquire>
 800cd28:	6a23      	ldr	r3, [r4, #32]
 800cd2a:	b11b      	cbz	r3, 800cd34 <__sinit+0x14>
 800cd2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd30:	f7ff bff0 	b.w	800cd14 <__sfp_lock_release>
 800cd34:	4b04      	ldr	r3, [pc, #16]	@ (800cd48 <__sinit+0x28>)
 800cd36:	6223      	str	r3, [r4, #32]
 800cd38:	4b04      	ldr	r3, [pc, #16]	@ (800cd4c <__sinit+0x2c>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d1f5      	bne.n	800cd2c <__sinit+0xc>
 800cd40:	f7ff ffc4 	bl	800cccc <global_stdio_init.part.0>
 800cd44:	e7f2      	b.n	800cd2c <__sinit+0xc>
 800cd46:	bf00      	nop
 800cd48:	0800cc8d 	.word	0x0800cc8d
 800cd4c:	20001a28 	.word	0x20001a28

0800cd50 <_fwalk_sglue>:
 800cd50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd54:	4607      	mov	r7, r0
 800cd56:	4688      	mov	r8, r1
 800cd58:	4614      	mov	r4, r2
 800cd5a:	2600      	movs	r6, #0
 800cd5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd60:	f1b9 0901 	subs.w	r9, r9, #1
 800cd64:	d505      	bpl.n	800cd72 <_fwalk_sglue+0x22>
 800cd66:	6824      	ldr	r4, [r4, #0]
 800cd68:	2c00      	cmp	r4, #0
 800cd6a:	d1f7      	bne.n	800cd5c <_fwalk_sglue+0xc>
 800cd6c:	4630      	mov	r0, r6
 800cd6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd72:	89ab      	ldrh	r3, [r5, #12]
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d907      	bls.n	800cd88 <_fwalk_sglue+0x38>
 800cd78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	d003      	beq.n	800cd88 <_fwalk_sglue+0x38>
 800cd80:	4629      	mov	r1, r5
 800cd82:	4638      	mov	r0, r7
 800cd84:	47c0      	blx	r8
 800cd86:	4306      	orrs	r6, r0
 800cd88:	3568      	adds	r5, #104	@ 0x68
 800cd8a:	e7e9      	b.n	800cd60 <_fwalk_sglue+0x10>

0800cd8c <sniprintf>:
 800cd8c:	b40c      	push	{r2, r3}
 800cd8e:	b530      	push	{r4, r5, lr}
 800cd90:	4b18      	ldr	r3, [pc, #96]	@ (800cdf4 <sniprintf+0x68>)
 800cd92:	1e0c      	subs	r4, r1, #0
 800cd94:	681d      	ldr	r5, [r3, #0]
 800cd96:	b09d      	sub	sp, #116	@ 0x74
 800cd98:	da08      	bge.n	800cdac <sniprintf+0x20>
 800cd9a:	238b      	movs	r3, #139	@ 0x8b
 800cd9c:	602b      	str	r3, [r5, #0]
 800cd9e:	f04f 30ff 	mov.w	r0, #4294967295
 800cda2:	b01d      	add	sp, #116	@ 0x74
 800cda4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cda8:	b002      	add	sp, #8
 800cdaa:	4770      	bx	lr
 800cdac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cdb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cdb4:	f04f 0300 	mov.w	r3, #0
 800cdb8:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cdba:	bf14      	ite	ne
 800cdbc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cdc0:	4623      	moveq	r3, r4
 800cdc2:	9304      	str	r3, [sp, #16]
 800cdc4:	9307      	str	r3, [sp, #28]
 800cdc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cdca:	9002      	str	r0, [sp, #8]
 800cdcc:	9006      	str	r0, [sp, #24]
 800cdce:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cdd2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cdd4:	ab21      	add	r3, sp, #132	@ 0x84
 800cdd6:	a902      	add	r1, sp, #8
 800cdd8:	4628      	mov	r0, r5
 800cdda:	9301      	str	r3, [sp, #4]
 800cddc:	f000 fad2 	bl	800d384 <_svfiprintf_r>
 800cde0:	1c43      	adds	r3, r0, #1
 800cde2:	bfbc      	itt	lt
 800cde4:	238b      	movlt	r3, #139	@ 0x8b
 800cde6:	602b      	strlt	r3, [r5, #0]
 800cde8:	2c00      	cmp	r4, #0
 800cdea:	d0da      	beq.n	800cda2 <sniprintf+0x16>
 800cdec:	9b02      	ldr	r3, [sp, #8]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	701a      	strb	r2, [r3, #0]
 800cdf2:	e7d6      	b.n	800cda2 <sniprintf+0x16>
 800cdf4:	20000250 	.word	0x20000250

0800cdf8 <siprintf>:
 800cdf8:	b40e      	push	{r1, r2, r3}
 800cdfa:	b510      	push	{r4, lr}
 800cdfc:	b09d      	sub	sp, #116	@ 0x74
 800cdfe:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ce00:	9002      	str	r0, [sp, #8]
 800ce02:	9006      	str	r0, [sp, #24]
 800ce04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ce08:	480a      	ldr	r0, [pc, #40]	@ (800ce34 <siprintf+0x3c>)
 800ce0a:	9107      	str	r1, [sp, #28]
 800ce0c:	9104      	str	r1, [sp, #16]
 800ce0e:	490a      	ldr	r1, [pc, #40]	@ (800ce38 <siprintf+0x40>)
 800ce10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce14:	9105      	str	r1, [sp, #20]
 800ce16:	2400      	movs	r4, #0
 800ce18:	a902      	add	r1, sp, #8
 800ce1a:	6800      	ldr	r0, [r0, #0]
 800ce1c:	9301      	str	r3, [sp, #4]
 800ce1e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ce20:	f000 fab0 	bl	800d384 <_svfiprintf_r>
 800ce24:	9b02      	ldr	r3, [sp, #8]
 800ce26:	701c      	strb	r4, [r3, #0]
 800ce28:	b01d      	add	sp, #116	@ 0x74
 800ce2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce2e:	b003      	add	sp, #12
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop
 800ce34:	20000250 	.word	0x20000250
 800ce38:	ffff0208 	.word	0xffff0208

0800ce3c <__sread>:
 800ce3c:	b510      	push	{r4, lr}
 800ce3e:	460c      	mov	r4, r1
 800ce40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce44:	f000 f8c4 	bl	800cfd0 <_read_r>
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	bfab      	itete	ge
 800ce4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ce4e:	89a3      	ldrhlt	r3, [r4, #12]
 800ce50:	181b      	addge	r3, r3, r0
 800ce52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ce56:	bfac      	ite	ge
 800ce58:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ce5a:	81a3      	strhlt	r3, [r4, #12]
 800ce5c:	bd10      	pop	{r4, pc}

0800ce5e <__swrite>:
 800ce5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce62:	461f      	mov	r7, r3
 800ce64:	898b      	ldrh	r3, [r1, #12]
 800ce66:	05db      	lsls	r3, r3, #23
 800ce68:	4605      	mov	r5, r0
 800ce6a:	460c      	mov	r4, r1
 800ce6c:	4616      	mov	r6, r2
 800ce6e:	d505      	bpl.n	800ce7c <__swrite+0x1e>
 800ce70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce74:	2302      	movs	r3, #2
 800ce76:	2200      	movs	r2, #0
 800ce78:	f000 f898 	bl	800cfac <_lseek_r>
 800ce7c:	89a3      	ldrh	r3, [r4, #12]
 800ce7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce86:	81a3      	strh	r3, [r4, #12]
 800ce88:	4632      	mov	r2, r6
 800ce8a:	463b      	mov	r3, r7
 800ce8c:	4628      	mov	r0, r5
 800ce8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce92:	f000 b8af 	b.w	800cff4 <_write_r>

0800ce96 <__sseek>:
 800ce96:	b510      	push	{r4, lr}
 800ce98:	460c      	mov	r4, r1
 800ce9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce9e:	f000 f885 	bl	800cfac <_lseek_r>
 800cea2:	1c43      	adds	r3, r0, #1
 800cea4:	89a3      	ldrh	r3, [r4, #12]
 800cea6:	bf15      	itete	ne
 800cea8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ceaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ceae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ceb2:	81a3      	strheq	r3, [r4, #12]
 800ceb4:	bf18      	it	ne
 800ceb6:	81a3      	strhne	r3, [r4, #12]
 800ceb8:	bd10      	pop	{r4, pc}

0800ceba <__sclose>:
 800ceba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cebe:	f000 b865 	b.w	800cf8c <_close_r>

0800cec2 <memset>:
 800cec2:	4402      	add	r2, r0
 800cec4:	4603      	mov	r3, r0
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d100      	bne.n	800cecc <memset+0xa>
 800ceca:	4770      	bx	lr
 800cecc:	f803 1b01 	strb.w	r1, [r3], #1
 800ced0:	e7f9      	b.n	800cec6 <memset+0x4>
	...

0800ced4 <strtok>:
 800ced4:	4b16      	ldr	r3, [pc, #88]	@ (800cf30 <strtok+0x5c>)
 800ced6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceda:	681f      	ldr	r7, [r3, #0]
 800cedc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800cede:	4605      	mov	r5, r0
 800cee0:	460e      	mov	r6, r1
 800cee2:	b9ec      	cbnz	r4, 800cf20 <strtok+0x4c>
 800cee4:	2050      	movs	r0, #80	@ 0x50
 800cee6:	f000 f93b 	bl	800d160 <malloc>
 800ceea:	4602      	mov	r2, r0
 800ceec:	6478      	str	r0, [r7, #68]	@ 0x44
 800ceee:	b920      	cbnz	r0, 800cefa <strtok+0x26>
 800cef0:	4b10      	ldr	r3, [pc, #64]	@ (800cf34 <strtok+0x60>)
 800cef2:	4811      	ldr	r0, [pc, #68]	@ (800cf38 <strtok+0x64>)
 800cef4:	215b      	movs	r1, #91	@ 0x5b
 800cef6:	f000 f8cb 	bl	800d090 <__assert_func>
 800cefa:	e9c0 4400 	strd	r4, r4, [r0]
 800cefe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800cf02:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800cf06:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800cf0a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800cf0e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800cf12:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800cf16:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800cf1a:	6184      	str	r4, [r0, #24]
 800cf1c:	7704      	strb	r4, [r0, #28]
 800cf1e:	6244      	str	r4, [r0, #36]	@ 0x24
 800cf20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf22:	4631      	mov	r1, r6
 800cf24:	4628      	mov	r0, r5
 800cf26:	2301      	movs	r3, #1
 800cf28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf2c:	f000 b806 	b.w	800cf3c <__strtok_r>
 800cf30:	20000250 	.word	0x20000250
 800cf34:	0800f35d 	.word	0x0800f35d
 800cf38:	0800f374 	.word	0x0800f374

0800cf3c <__strtok_r>:
 800cf3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf3e:	4604      	mov	r4, r0
 800cf40:	b908      	cbnz	r0, 800cf46 <__strtok_r+0xa>
 800cf42:	6814      	ldr	r4, [r2, #0]
 800cf44:	b144      	cbz	r4, 800cf58 <__strtok_r+0x1c>
 800cf46:	4620      	mov	r0, r4
 800cf48:	f814 5b01 	ldrb.w	r5, [r4], #1
 800cf4c:	460f      	mov	r7, r1
 800cf4e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800cf52:	b91e      	cbnz	r6, 800cf5c <__strtok_r+0x20>
 800cf54:	b965      	cbnz	r5, 800cf70 <__strtok_r+0x34>
 800cf56:	6015      	str	r5, [r2, #0]
 800cf58:	2000      	movs	r0, #0
 800cf5a:	e005      	b.n	800cf68 <__strtok_r+0x2c>
 800cf5c:	42b5      	cmp	r5, r6
 800cf5e:	d1f6      	bne.n	800cf4e <__strtok_r+0x12>
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d1f0      	bne.n	800cf46 <__strtok_r+0xa>
 800cf64:	6014      	str	r4, [r2, #0]
 800cf66:	7003      	strb	r3, [r0, #0]
 800cf68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf6a:	461c      	mov	r4, r3
 800cf6c:	e00c      	b.n	800cf88 <__strtok_r+0x4c>
 800cf6e:	b91d      	cbnz	r5, 800cf78 <__strtok_r+0x3c>
 800cf70:	4627      	mov	r7, r4
 800cf72:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cf76:	460e      	mov	r6, r1
 800cf78:	f816 5b01 	ldrb.w	r5, [r6], #1
 800cf7c:	42ab      	cmp	r3, r5
 800cf7e:	d1f6      	bne.n	800cf6e <__strtok_r+0x32>
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d0f2      	beq.n	800cf6a <__strtok_r+0x2e>
 800cf84:	2300      	movs	r3, #0
 800cf86:	703b      	strb	r3, [r7, #0]
 800cf88:	6014      	str	r4, [r2, #0]
 800cf8a:	e7ed      	b.n	800cf68 <__strtok_r+0x2c>

0800cf8c <_close_r>:
 800cf8c:	b538      	push	{r3, r4, r5, lr}
 800cf8e:	4d06      	ldr	r5, [pc, #24]	@ (800cfa8 <_close_r+0x1c>)
 800cf90:	2300      	movs	r3, #0
 800cf92:	4604      	mov	r4, r0
 800cf94:	4608      	mov	r0, r1
 800cf96:	602b      	str	r3, [r5, #0]
 800cf98:	f7f6 fe55 	bl	8003c46 <_close>
 800cf9c:	1c43      	adds	r3, r0, #1
 800cf9e:	d102      	bne.n	800cfa6 <_close_r+0x1a>
 800cfa0:	682b      	ldr	r3, [r5, #0]
 800cfa2:	b103      	cbz	r3, 800cfa6 <_close_r+0x1a>
 800cfa4:	6023      	str	r3, [r4, #0]
 800cfa6:	bd38      	pop	{r3, r4, r5, pc}
 800cfa8:	20001a2c 	.word	0x20001a2c

0800cfac <_lseek_r>:
 800cfac:	b538      	push	{r3, r4, r5, lr}
 800cfae:	4d07      	ldr	r5, [pc, #28]	@ (800cfcc <_lseek_r+0x20>)
 800cfb0:	4604      	mov	r4, r0
 800cfb2:	4608      	mov	r0, r1
 800cfb4:	4611      	mov	r1, r2
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	602a      	str	r2, [r5, #0]
 800cfba:	461a      	mov	r2, r3
 800cfbc:	f7f6 fe6a 	bl	8003c94 <_lseek>
 800cfc0:	1c43      	adds	r3, r0, #1
 800cfc2:	d102      	bne.n	800cfca <_lseek_r+0x1e>
 800cfc4:	682b      	ldr	r3, [r5, #0]
 800cfc6:	b103      	cbz	r3, 800cfca <_lseek_r+0x1e>
 800cfc8:	6023      	str	r3, [r4, #0]
 800cfca:	bd38      	pop	{r3, r4, r5, pc}
 800cfcc:	20001a2c 	.word	0x20001a2c

0800cfd0 <_read_r>:
 800cfd0:	b538      	push	{r3, r4, r5, lr}
 800cfd2:	4d07      	ldr	r5, [pc, #28]	@ (800cff0 <_read_r+0x20>)
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	4608      	mov	r0, r1
 800cfd8:	4611      	mov	r1, r2
 800cfda:	2200      	movs	r2, #0
 800cfdc:	602a      	str	r2, [r5, #0]
 800cfde:	461a      	mov	r2, r3
 800cfe0:	f7f6 fdf8 	bl	8003bd4 <_read>
 800cfe4:	1c43      	adds	r3, r0, #1
 800cfe6:	d102      	bne.n	800cfee <_read_r+0x1e>
 800cfe8:	682b      	ldr	r3, [r5, #0]
 800cfea:	b103      	cbz	r3, 800cfee <_read_r+0x1e>
 800cfec:	6023      	str	r3, [r4, #0]
 800cfee:	bd38      	pop	{r3, r4, r5, pc}
 800cff0:	20001a2c 	.word	0x20001a2c

0800cff4 <_write_r>:
 800cff4:	b538      	push	{r3, r4, r5, lr}
 800cff6:	4d07      	ldr	r5, [pc, #28]	@ (800d014 <_write_r+0x20>)
 800cff8:	4604      	mov	r4, r0
 800cffa:	4608      	mov	r0, r1
 800cffc:	4611      	mov	r1, r2
 800cffe:	2200      	movs	r2, #0
 800d000:	602a      	str	r2, [r5, #0]
 800d002:	461a      	mov	r2, r3
 800d004:	f7f6 fe03 	bl	8003c0e <_write>
 800d008:	1c43      	adds	r3, r0, #1
 800d00a:	d102      	bne.n	800d012 <_write_r+0x1e>
 800d00c:	682b      	ldr	r3, [r5, #0]
 800d00e:	b103      	cbz	r3, 800d012 <_write_r+0x1e>
 800d010:	6023      	str	r3, [r4, #0]
 800d012:	bd38      	pop	{r3, r4, r5, pc}
 800d014:	20001a2c 	.word	0x20001a2c

0800d018 <__errno>:
 800d018:	4b01      	ldr	r3, [pc, #4]	@ (800d020 <__errno+0x8>)
 800d01a:	6818      	ldr	r0, [r3, #0]
 800d01c:	4770      	bx	lr
 800d01e:	bf00      	nop
 800d020:	20000250 	.word	0x20000250

0800d024 <__libc_init_array>:
 800d024:	b570      	push	{r4, r5, r6, lr}
 800d026:	4d0d      	ldr	r5, [pc, #52]	@ (800d05c <__libc_init_array+0x38>)
 800d028:	4c0d      	ldr	r4, [pc, #52]	@ (800d060 <__libc_init_array+0x3c>)
 800d02a:	1b64      	subs	r4, r4, r5
 800d02c:	10a4      	asrs	r4, r4, #2
 800d02e:	2600      	movs	r6, #0
 800d030:	42a6      	cmp	r6, r4
 800d032:	d109      	bne.n	800d048 <__libc_init_array+0x24>
 800d034:	4d0b      	ldr	r5, [pc, #44]	@ (800d064 <__libc_init_array+0x40>)
 800d036:	4c0c      	ldr	r4, [pc, #48]	@ (800d068 <__libc_init_array+0x44>)
 800d038:	f000 fff0 	bl	800e01c <_init>
 800d03c:	1b64      	subs	r4, r4, r5
 800d03e:	10a4      	asrs	r4, r4, #2
 800d040:	2600      	movs	r6, #0
 800d042:	42a6      	cmp	r6, r4
 800d044:	d105      	bne.n	800d052 <__libc_init_array+0x2e>
 800d046:	bd70      	pop	{r4, r5, r6, pc}
 800d048:	f855 3b04 	ldr.w	r3, [r5], #4
 800d04c:	4798      	blx	r3
 800d04e:	3601      	adds	r6, #1
 800d050:	e7ee      	b.n	800d030 <__libc_init_array+0xc>
 800d052:	f855 3b04 	ldr.w	r3, [r5], #4
 800d056:	4798      	blx	r3
 800d058:	3601      	adds	r6, #1
 800d05a:	e7f2      	b.n	800d042 <__libc_init_array+0x1e>
 800d05c:	0800f448 	.word	0x0800f448
 800d060:	0800f448 	.word	0x0800f448
 800d064:	0800f448 	.word	0x0800f448
 800d068:	0800f44c 	.word	0x0800f44c

0800d06c <__retarget_lock_init_recursive>:
 800d06c:	4770      	bx	lr

0800d06e <__retarget_lock_acquire_recursive>:
 800d06e:	4770      	bx	lr

0800d070 <__retarget_lock_release_recursive>:
 800d070:	4770      	bx	lr

0800d072 <memcpy>:
 800d072:	440a      	add	r2, r1
 800d074:	4291      	cmp	r1, r2
 800d076:	f100 33ff 	add.w	r3, r0, #4294967295
 800d07a:	d100      	bne.n	800d07e <memcpy+0xc>
 800d07c:	4770      	bx	lr
 800d07e:	b510      	push	{r4, lr}
 800d080:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d084:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d088:	4291      	cmp	r1, r2
 800d08a:	d1f9      	bne.n	800d080 <memcpy+0xe>
 800d08c:	bd10      	pop	{r4, pc}
	...

0800d090 <__assert_func>:
 800d090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d092:	4614      	mov	r4, r2
 800d094:	461a      	mov	r2, r3
 800d096:	4b09      	ldr	r3, [pc, #36]	@ (800d0bc <__assert_func+0x2c>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4605      	mov	r5, r0
 800d09c:	68d8      	ldr	r0, [r3, #12]
 800d09e:	b14c      	cbz	r4, 800d0b4 <__assert_func+0x24>
 800d0a0:	4b07      	ldr	r3, [pc, #28]	@ (800d0c0 <__assert_func+0x30>)
 800d0a2:	9100      	str	r1, [sp, #0]
 800d0a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d0a8:	4906      	ldr	r1, [pc, #24]	@ (800d0c4 <__assert_func+0x34>)
 800d0aa:	462b      	mov	r3, r5
 800d0ac:	f000 fde0 	bl	800dc70 <fiprintf>
 800d0b0:	f000 feae 	bl	800de10 <abort>
 800d0b4:	4b04      	ldr	r3, [pc, #16]	@ (800d0c8 <__assert_func+0x38>)
 800d0b6:	461c      	mov	r4, r3
 800d0b8:	e7f3      	b.n	800d0a2 <__assert_func+0x12>
 800d0ba:	bf00      	nop
 800d0bc:	20000250 	.word	0x20000250
 800d0c0:	0800f3ce 	.word	0x0800f3ce
 800d0c4:	0800f3db 	.word	0x0800f3db
 800d0c8:	0800f409 	.word	0x0800f409

0800d0cc <_free_r>:
 800d0cc:	b538      	push	{r3, r4, r5, lr}
 800d0ce:	4605      	mov	r5, r0
 800d0d0:	2900      	cmp	r1, #0
 800d0d2:	d041      	beq.n	800d158 <_free_r+0x8c>
 800d0d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0d8:	1f0c      	subs	r4, r1, #4
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	bfb8      	it	lt
 800d0de:	18e4      	addlt	r4, r4, r3
 800d0e0:	f000 f8e8 	bl	800d2b4 <__malloc_lock>
 800d0e4:	4a1d      	ldr	r2, [pc, #116]	@ (800d15c <_free_r+0x90>)
 800d0e6:	6813      	ldr	r3, [r2, #0]
 800d0e8:	b933      	cbnz	r3, 800d0f8 <_free_r+0x2c>
 800d0ea:	6063      	str	r3, [r4, #4]
 800d0ec:	6014      	str	r4, [r2, #0]
 800d0ee:	4628      	mov	r0, r5
 800d0f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0f4:	f000 b8e4 	b.w	800d2c0 <__malloc_unlock>
 800d0f8:	42a3      	cmp	r3, r4
 800d0fa:	d908      	bls.n	800d10e <_free_r+0x42>
 800d0fc:	6820      	ldr	r0, [r4, #0]
 800d0fe:	1821      	adds	r1, r4, r0
 800d100:	428b      	cmp	r3, r1
 800d102:	bf01      	itttt	eq
 800d104:	6819      	ldreq	r1, [r3, #0]
 800d106:	685b      	ldreq	r3, [r3, #4]
 800d108:	1809      	addeq	r1, r1, r0
 800d10a:	6021      	streq	r1, [r4, #0]
 800d10c:	e7ed      	b.n	800d0ea <_free_r+0x1e>
 800d10e:	461a      	mov	r2, r3
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	b10b      	cbz	r3, 800d118 <_free_r+0x4c>
 800d114:	42a3      	cmp	r3, r4
 800d116:	d9fa      	bls.n	800d10e <_free_r+0x42>
 800d118:	6811      	ldr	r1, [r2, #0]
 800d11a:	1850      	adds	r0, r2, r1
 800d11c:	42a0      	cmp	r0, r4
 800d11e:	d10b      	bne.n	800d138 <_free_r+0x6c>
 800d120:	6820      	ldr	r0, [r4, #0]
 800d122:	4401      	add	r1, r0
 800d124:	1850      	adds	r0, r2, r1
 800d126:	4283      	cmp	r3, r0
 800d128:	6011      	str	r1, [r2, #0]
 800d12a:	d1e0      	bne.n	800d0ee <_free_r+0x22>
 800d12c:	6818      	ldr	r0, [r3, #0]
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	6053      	str	r3, [r2, #4]
 800d132:	4408      	add	r0, r1
 800d134:	6010      	str	r0, [r2, #0]
 800d136:	e7da      	b.n	800d0ee <_free_r+0x22>
 800d138:	d902      	bls.n	800d140 <_free_r+0x74>
 800d13a:	230c      	movs	r3, #12
 800d13c:	602b      	str	r3, [r5, #0]
 800d13e:	e7d6      	b.n	800d0ee <_free_r+0x22>
 800d140:	6820      	ldr	r0, [r4, #0]
 800d142:	1821      	adds	r1, r4, r0
 800d144:	428b      	cmp	r3, r1
 800d146:	bf04      	itt	eq
 800d148:	6819      	ldreq	r1, [r3, #0]
 800d14a:	685b      	ldreq	r3, [r3, #4]
 800d14c:	6063      	str	r3, [r4, #4]
 800d14e:	bf04      	itt	eq
 800d150:	1809      	addeq	r1, r1, r0
 800d152:	6021      	streq	r1, [r4, #0]
 800d154:	6054      	str	r4, [r2, #4]
 800d156:	e7ca      	b.n	800d0ee <_free_r+0x22>
 800d158:	bd38      	pop	{r3, r4, r5, pc}
 800d15a:	bf00      	nop
 800d15c:	20001a38 	.word	0x20001a38

0800d160 <malloc>:
 800d160:	4b02      	ldr	r3, [pc, #8]	@ (800d16c <malloc+0xc>)
 800d162:	4601      	mov	r1, r0
 800d164:	6818      	ldr	r0, [r3, #0]
 800d166:	f000 b825 	b.w	800d1b4 <_malloc_r>
 800d16a:	bf00      	nop
 800d16c:	20000250 	.word	0x20000250

0800d170 <sbrk_aligned>:
 800d170:	b570      	push	{r4, r5, r6, lr}
 800d172:	4e0f      	ldr	r6, [pc, #60]	@ (800d1b0 <sbrk_aligned+0x40>)
 800d174:	460c      	mov	r4, r1
 800d176:	6831      	ldr	r1, [r6, #0]
 800d178:	4605      	mov	r5, r0
 800d17a:	b911      	cbnz	r1, 800d182 <sbrk_aligned+0x12>
 800d17c:	f000 fe38 	bl	800ddf0 <_sbrk_r>
 800d180:	6030      	str	r0, [r6, #0]
 800d182:	4621      	mov	r1, r4
 800d184:	4628      	mov	r0, r5
 800d186:	f000 fe33 	bl	800ddf0 <_sbrk_r>
 800d18a:	1c43      	adds	r3, r0, #1
 800d18c:	d103      	bne.n	800d196 <sbrk_aligned+0x26>
 800d18e:	f04f 34ff 	mov.w	r4, #4294967295
 800d192:	4620      	mov	r0, r4
 800d194:	bd70      	pop	{r4, r5, r6, pc}
 800d196:	1cc4      	adds	r4, r0, #3
 800d198:	f024 0403 	bic.w	r4, r4, #3
 800d19c:	42a0      	cmp	r0, r4
 800d19e:	d0f8      	beq.n	800d192 <sbrk_aligned+0x22>
 800d1a0:	1a21      	subs	r1, r4, r0
 800d1a2:	4628      	mov	r0, r5
 800d1a4:	f000 fe24 	bl	800ddf0 <_sbrk_r>
 800d1a8:	3001      	adds	r0, #1
 800d1aa:	d1f2      	bne.n	800d192 <sbrk_aligned+0x22>
 800d1ac:	e7ef      	b.n	800d18e <sbrk_aligned+0x1e>
 800d1ae:	bf00      	nop
 800d1b0:	20001a34 	.word	0x20001a34

0800d1b4 <_malloc_r>:
 800d1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1b8:	1ccd      	adds	r5, r1, #3
 800d1ba:	f025 0503 	bic.w	r5, r5, #3
 800d1be:	3508      	adds	r5, #8
 800d1c0:	2d0c      	cmp	r5, #12
 800d1c2:	bf38      	it	cc
 800d1c4:	250c      	movcc	r5, #12
 800d1c6:	2d00      	cmp	r5, #0
 800d1c8:	4606      	mov	r6, r0
 800d1ca:	db01      	blt.n	800d1d0 <_malloc_r+0x1c>
 800d1cc:	42a9      	cmp	r1, r5
 800d1ce:	d904      	bls.n	800d1da <_malloc_r+0x26>
 800d1d0:	230c      	movs	r3, #12
 800d1d2:	6033      	str	r3, [r6, #0]
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d2b0 <_malloc_r+0xfc>
 800d1de:	f000 f869 	bl	800d2b4 <__malloc_lock>
 800d1e2:	f8d8 3000 	ldr.w	r3, [r8]
 800d1e6:	461c      	mov	r4, r3
 800d1e8:	bb44      	cbnz	r4, 800d23c <_malloc_r+0x88>
 800d1ea:	4629      	mov	r1, r5
 800d1ec:	4630      	mov	r0, r6
 800d1ee:	f7ff ffbf 	bl	800d170 <sbrk_aligned>
 800d1f2:	1c43      	adds	r3, r0, #1
 800d1f4:	4604      	mov	r4, r0
 800d1f6:	d158      	bne.n	800d2aa <_malloc_r+0xf6>
 800d1f8:	f8d8 4000 	ldr.w	r4, [r8]
 800d1fc:	4627      	mov	r7, r4
 800d1fe:	2f00      	cmp	r7, #0
 800d200:	d143      	bne.n	800d28a <_malloc_r+0xd6>
 800d202:	2c00      	cmp	r4, #0
 800d204:	d04b      	beq.n	800d29e <_malloc_r+0xea>
 800d206:	6823      	ldr	r3, [r4, #0]
 800d208:	4639      	mov	r1, r7
 800d20a:	4630      	mov	r0, r6
 800d20c:	eb04 0903 	add.w	r9, r4, r3
 800d210:	f000 fdee 	bl	800ddf0 <_sbrk_r>
 800d214:	4581      	cmp	r9, r0
 800d216:	d142      	bne.n	800d29e <_malloc_r+0xea>
 800d218:	6821      	ldr	r1, [r4, #0]
 800d21a:	1a6d      	subs	r5, r5, r1
 800d21c:	4629      	mov	r1, r5
 800d21e:	4630      	mov	r0, r6
 800d220:	f7ff ffa6 	bl	800d170 <sbrk_aligned>
 800d224:	3001      	adds	r0, #1
 800d226:	d03a      	beq.n	800d29e <_malloc_r+0xea>
 800d228:	6823      	ldr	r3, [r4, #0]
 800d22a:	442b      	add	r3, r5
 800d22c:	6023      	str	r3, [r4, #0]
 800d22e:	f8d8 3000 	ldr.w	r3, [r8]
 800d232:	685a      	ldr	r2, [r3, #4]
 800d234:	bb62      	cbnz	r2, 800d290 <_malloc_r+0xdc>
 800d236:	f8c8 7000 	str.w	r7, [r8]
 800d23a:	e00f      	b.n	800d25c <_malloc_r+0xa8>
 800d23c:	6822      	ldr	r2, [r4, #0]
 800d23e:	1b52      	subs	r2, r2, r5
 800d240:	d420      	bmi.n	800d284 <_malloc_r+0xd0>
 800d242:	2a0b      	cmp	r2, #11
 800d244:	d917      	bls.n	800d276 <_malloc_r+0xc2>
 800d246:	1961      	adds	r1, r4, r5
 800d248:	42a3      	cmp	r3, r4
 800d24a:	6025      	str	r5, [r4, #0]
 800d24c:	bf18      	it	ne
 800d24e:	6059      	strne	r1, [r3, #4]
 800d250:	6863      	ldr	r3, [r4, #4]
 800d252:	bf08      	it	eq
 800d254:	f8c8 1000 	streq.w	r1, [r8]
 800d258:	5162      	str	r2, [r4, r5]
 800d25a:	604b      	str	r3, [r1, #4]
 800d25c:	4630      	mov	r0, r6
 800d25e:	f000 f82f 	bl	800d2c0 <__malloc_unlock>
 800d262:	f104 000b 	add.w	r0, r4, #11
 800d266:	1d23      	adds	r3, r4, #4
 800d268:	f020 0007 	bic.w	r0, r0, #7
 800d26c:	1ac2      	subs	r2, r0, r3
 800d26e:	bf1c      	itt	ne
 800d270:	1a1b      	subne	r3, r3, r0
 800d272:	50a3      	strne	r3, [r4, r2]
 800d274:	e7af      	b.n	800d1d6 <_malloc_r+0x22>
 800d276:	6862      	ldr	r2, [r4, #4]
 800d278:	42a3      	cmp	r3, r4
 800d27a:	bf0c      	ite	eq
 800d27c:	f8c8 2000 	streq.w	r2, [r8]
 800d280:	605a      	strne	r2, [r3, #4]
 800d282:	e7eb      	b.n	800d25c <_malloc_r+0xa8>
 800d284:	4623      	mov	r3, r4
 800d286:	6864      	ldr	r4, [r4, #4]
 800d288:	e7ae      	b.n	800d1e8 <_malloc_r+0x34>
 800d28a:	463c      	mov	r4, r7
 800d28c:	687f      	ldr	r7, [r7, #4]
 800d28e:	e7b6      	b.n	800d1fe <_malloc_r+0x4a>
 800d290:	461a      	mov	r2, r3
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	42a3      	cmp	r3, r4
 800d296:	d1fb      	bne.n	800d290 <_malloc_r+0xdc>
 800d298:	2300      	movs	r3, #0
 800d29a:	6053      	str	r3, [r2, #4]
 800d29c:	e7de      	b.n	800d25c <_malloc_r+0xa8>
 800d29e:	230c      	movs	r3, #12
 800d2a0:	6033      	str	r3, [r6, #0]
 800d2a2:	4630      	mov	r0, r6
 800d2a4:	f000 f80c 	bl	800d2c0 <__malloc_unlock>
 800d2a8:	e794      	b.n	800d1d4 <_malloc_r+0x20>
 800d2aa:	6005      	str	r5, [r0, #0]
 800d2ac:	e7d6      	b.n	800d25c <_malloc_r+0xa8>
 800d2ae:	bf00      	nop
 800d2b0:	20001a38 	.word	0x20001a38

0800d2b4 <__malloc_lock>:
 800d2b4:	4801      	ldr	r0, [pc, #4]	@ (800d2bc <__malloc_lock+0x8>)
 800d2b6:	f7ff beda 	b.w	800d06e <__retarget_lock_acquire_recursive>
 800d2ba:	bf00      	nop
 800d2bc:	20001a30 	.word	0x20001a30

0800d2c0 <__malloc_unlock>:
 800d2c0:	4801      	ldr	r0, [pc, #4]	@ (800d2c8 <__malloc_unlock+0x8>)
 800d2c2:	f7ff bed5 	b.w	800d070 <__retarget_lock_release_recursive>
 800d2c6:	bf00      	nop
 800d2c8:	20001a30 	.word	0x20001a30

0800d2cc <__ssputs_r>:
 800d2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2d0:	688e      	ldr	r6, [r1, #8]
 800d2d2:	461f      	mov	r7, r3
 800d2d4:	42be      	cmp	r6, r7
 800d2d6:	680b      	ldr	r3, [r1, #0]
 800d2d8:	4682      	mov	sl, r0
 800d2da:	460c      	mov	r4, r1
 800d2dc:	4690      	mov	r8, r2
 800d2de:	d82d      	bhi.n	800d33c <__ssputs_r+0x70>
 800d2e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d2e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d2e8:	d026      	beq.n	800d338 <__ssputs_r+0x6c>
 800d2ea:	6965      	ldr	r5, [r4, #20]
 800d2ec:	6909      	ldr	r1, [r1, #16]
 800d2ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2f2:	eba3 0901 	sub.w	r9, r3, r1
 800d2f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d2fa:	1c7b      	adds	r3, r7, #1
 800d2fc:	444b      	add	r3, r9
 800d2fe:	106d      	asrs	r5, r5, #1
 800d300:	429d      	cmp	r5, r3
 800d302:	bf38      	it	cc
 800d304:	461d      	movcc	r5, r3
 800d306:	0553      	lsls	r3, r2, #21
 800d308:	d527      	bpl.n	800d35a <__ssputs_r+0x8e>
 800d30a:	4629      	mov	r1, r5
 800d30c:	f7ff ff52 	bl	800d1b4 <_malloc_r>
 800d310:	4606      	mov	r6, r0
 800d312:	b360      	cbz	r0, 800d36e <__ssputs_r+0xa2>
 800d314:	6921      	ldr	r1, [r4, #16]
 800d316:	464a      	mov	r2, r9
 800d318:	f7ff feab 	bl	800d072 <memcpy>
 800d31c:	89a3      	ldrh	r3, [r4, #12]
 800d31e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d326:	81a3      	strh	r3, [r4, #12]
 800d328:	6126      	str	r6, [r4, #16]
 800d32a:	6165      	str	r5, [r4, #20]
 800d32c:	444e      	add	r6, r9
 800d32e:	eba5 0509 	sub.w	r5, r5, r9
 800d332:	6026      	str	r6, [r4, #0]
 800d334:	60a5      	str	r5, [r4, #8]
 800d336:	463e      	mov	r6, r7
 800d338:	42be      	cmp	r6, r7
 800d33a:	d900      	bls.n	800d33e <__ssputs_r+0x72>
 800d33c:	463e      	mov	r6, r7
 800d33e:	6820      	ldr	r0, [r4, #0]
 800d340:	4632      	mov	r2, r6
 800d342:	4641      	mov	r1, r8
 800d344:	f000 fd3a 	bl	800ddbc <memmove>
 800d348:	68a3      	ldr	r3, [r4, #8]
 800d34a:	1b9b      	subs	r3, r3, r6
 800d34c:	60a3      	str	r3, [r4, #8]
 800d34e:	6823      	ldr	r3, [r4, #0]
 800d350:	4433      	add	r3, r6
 800d352:	6023      	str	r3, [r4, #0]
 800d354:	2000      	movs	r0, #0
 800d356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d35a:	462a      	mov	r2, r5
 800d35c:	f000 fd5f 	bl	800de1e <_realloc_r>
 800d360:	4606      	mov	r6, r0
 800d362:	2800      	cmp	r0, #0
 800d364:	d1e0      	bne.n	800d328 <__ssputs_r+0x5c>
 800d366:	6921      	ldr	r1, [r4, #16]
 800d368:	4650      	mov	r0, sl
 800d36a:	f7ff feaf 	bl	800d0cc <_free_r>
 800d36e:	230c      	movs	r3, #12
 800d370:	f8ca 3000 	str.w	r3, [sl]
 800d374:	89a3      	ldrh	r3, [r4, #12]
 800d376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d37a:	81a3      	strh	r3, [r4, #12]
 800d37c:	f04f 30ff 	mov.w	r0, #4294967295
 800d380:	e7e9      	b.n	800d356 <__ssputs_r+0x8a>
	...

0800d384 <_svfiprintf_r>:
 800d384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d388:	4698      	mov	r8, r3
 800d38a:	898b      	ldrh	r3, [r1, #12]
 800d38c:	061b      	lsls	r3, r3, #24
 800d38e:	b09d      	sub	sp, #116	@ 0x74
 800d390:	4607      	mov	r7, r0
 800d392:	460d      	mov	r5, r1
 800d394:	4614      	mov	r4, r2
 800d396:	d510      	bpl.n	800d3ba <_svfiprintf_r+0x36>
 800d398:	690b      	ldr	r3, [r1, #16]
 800d39a:	b973      	cbnz	r3, 800d3ba <_svfiprintf_r+0x36>
 800d39c:	2140      	movs	r1, #64	@ 0x40
 800d39e:	f7ff ff09 	bl	800d1b4 <_malloc_r>
 800d3a2:	6028      	str	r0, [r5, #0]
 800d3a4:	6128      	str	r0, [r5, #16]
 800d3a6:	b930      	cbnz	r0, 800d3b6 <_svfiprintf_r+0x32>
 800d3a8:	230c      	movs	r3, #12
 800d3aa:	603b      	str	r3, [r7, #0]
 800d3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d3b0:	b01d      	add	sp, #116	@ 0x74
 800d3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b6:	2340      	movs	r3, #64	@ 0x40
 800d3b8:	616b      	str	r3, [r5, #20]
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3be:	2320      	movs	r3, #32
 800d3c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d3c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3c8:	2330      	movs	r3, #48	@ 0x30
 800d3ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d568 <_svfiprintf_r+0x1e4>
 800d3ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3d2:	f04f 0901 	mov.w	r9, #1
 800d3d6:	4623      	mov	r3, r4
 800d3d8:	469a      	mov	sl, r3
 800d3da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3de:	b10a      	cbz	r2, 800d3e4 <_svfiprintf_r+0x60>
 800d3e0:	2a25      	cmp	r2, #37	@ 0x25
 800d3e2:	d1f9      	bne.n	800d3d8 <_svfiprintf_r+0x54>
 800d3e4:	ebba 0b04 	subs.w	fp, sl, r4
 800d3e8:	d00b      	beq.n	800d402 <_svfiprintf_r+0x7e>
 800d3ea:	465b      	mov	r3, fp
 800d3ec:	4622      	mov	r2, r4
 800d3ee:	4629      	mov	r1, r5
 800d3f0:	4638      	mov	r0, r7
 800d3f2:	f7ff ff6b 	bl	800d2cc <__ssputs_r>
 800d3f6:	3001      	adds	r0, #1
 800d3f8:	f000 80a7 	beq.w	800d54a <_svfiprintf_r+0x1c6>
 800d3fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3fe:	445a      	add	r2, fp
 800d400:	9209      	str	r2, [sp, #36]	@ 0x24
 800d402:	f89a 3000 	ldrb.w	r3, [sl]
 800d406:	2b00      	cmp	r3, #0
 800d408:	f000 809f 	beq.w	800d54a <_svfiprintf_r+0x1c6>
 800d40c:	2300      	movs	r3, #0
 800d40e:	f04f 32ff 	mov.w	r2, #4294967295
 800d412:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d416:	f10a 0a01 	add.w	sl, sl, #1
 800d41a:	9304      	str	r3, [sp, #16]
 800d41c:	9307      	str	r3, [sp, #28]
 800d41e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d422:	931a      	str	r3, [sp, #104]	@ 0x68
 800d424:	4654      	mov	r4, sl
 800d426:	2205      	movs	r2, #5
 800d428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d42c:	484e      	ldr	r0, [pc, #312]	@ (800d568 <_svfiprintf_r+0x1e4>)
 800d42e:	f7f2 feef 	bl	8000210 <memchr>
 800d432:	9a04      	ldr	r2, [sp, #16]
 800d434:	b9d8      	cbnz	r0, 800d46e <_svfiprintf_r+0xea>
 800d436:	06d0      	lsls	r0, r2, #27
 800d438:	bf44      	itt	mi
 800d43a:	2320      	movmi	r3, #32
 800d43c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d440:	0711      	lsls	r1, r2, #28
 800d442:	bf44      	itt	mi
 800d444:	232b      	movmi	r3, #43	@ 0x2b
 800d446:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d44a:	f89a 3000 	ldrb.w	r3, [sl]
 800d44e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d450:	d015      	beq.n	800d47e <_svfiprintf_r+0xfa>
 800d452:	9a07      	ldr	r2, [sp, #28]
 800d454:	4654      	mov	r4, sl
 800d456:	2000      	movs	r0, #0
 800d458:	f04f 0c0a 	mov.w	ip, #10
 800d45c:	4621      	mov	r1, r4
 800d45e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d462:	3b30      	subs	r3, #48	@ 0x30
 800d464:	2b09      	cmp	r3, #9
 800d466:	d94b      	bls.n	800d500 <_svfiprintf_r+0x17c>
 800d468:	b1b0      	cbz	r0, 800d498 <_svfiprintf_r+0x114>
 800d46a:	9207      	str	r2, [sp, #28]
 800d46c:	e014      	b.n	800d498 <_svfiprintf_r+0x114>
 800d46e:	eba0 0308 	sub.w	r3, r0, r8
 800d472:	fa09 f303 	lsl.w	r3, r9, r3
 800d476:	4313      	orrs	r3, r2
 800d478:	9304      	str	r3, [sp, #16]
 800d47a:	46a2      	mov	sl, r4
 800d47c:	e7d2      	b.n	800d424 <_svfiprintf_r+0xa0>
 800d47e:	9b03      	ldr	r3, [sp, #12]
 800d480:	1d19      	adds	r1, r3, #4
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	9103      	str	r1, [sp, #12]
 800d486:	2b00      	cmp	r3, #0
 800d488:	bfbb      	ittet	lt
 800d48a:	425b      	neglt	r3, r3
 800d48c:	f042 0202 	orrlt.w	r2, r2, #2
 800d490:	9307      	strge	r3, [sp, #28]
 800d492:	9307      	strlt	r3, [sp, #28]
 800d494:	bfb8      	it	lt
 800d496:	9204      	strlt	r2, [sp, #16]
 800d498:	7823      	ldrb	r3, [r4, #0]
 800d49a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d49c:	d10a      	bne.n	800d4b4 <_svfiprintf_r+0x130>
 800d49e:	7863      	ldrb	r3, [r4, #1]
 800d4a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4a2:	d132      	bne.n	800d50a <_svfiprintf_r+0x186>
 800d4a4:	9b03      	ldr	r3, [sp, #12]
 800d4a6:	1d1a      	adds	r2, r3, #4
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	9203      	str	r2, [sp, #12]
 800d4ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4b0:	3402      	adds	r4, #2
 800d4b2:	9305      	str	r3, [sp, #20]
 800d4b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d578 <_svfiprintf_r+0x1f4>
 800d4b8:	7821      	ldrb	r1, [r4, #0]
 800d4ba:	2203      	movs	r2, #3
 800d4bc:	4650      	mov	r0, sl
 800d4be:	f7f2 fea7 	bl	8000210 <memchr>
 800d4c2:	b138      	cbz	r0, 800d4d4 <_svfiprintf_r+0x150>
 800d4c4:	9b04      	ldr	r3, [sp, #16]
 800d4c6:	eba0 000a 	sub.w	r0, r0, sl
 800d4ca:	2240      	movs	r2, #64	@ 0x40
 800d4cc:	4082      	lsls	r2, r0
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	3401      	adds	r4, #1
 800d4d2:	9304      	str	r3, [sp, #16]
 800d4d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4d8:	4824      	ldr	r0, [pc, #144]	@ (800d56c <_svfiprintf_r+0x1e8>)
 800d4da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4de:	2206      	movs	r2, #6
 800d4e0:	f7f2 fe96 	bl	8000210 <memchr>
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	d036      	beq.n	800d556 <_svfiprintf_r+0x1d2>
 800d4e8:	4b21      	ldr	r3, [pc, #132]	@ (800d570 <_svfiprintf_r+0x1ec>)
 800d4ea:	bb1b      	cbnz	r3, 800d534 <_svfiprintf_r+0x1b0>
 800d4ec:	9b03      	ldr	r3, [sp, #12]
 800d4ee:	3307      	adds	r3, #7
 800d4f0:	f023 0307 	bic.w	r3, r3, #7
 800d4f4:	3308      	adds	r3, #8
 800d4f6:	9303      	str	r3, [sp, #12]
 800d4f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4fa:	4433      	add	r3, r6
 800d4fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4fe:	e76a      	b.n	800d3d6 <_svfiprintf_r+0x52>
 800d500:	fb0c 3202 	mla	r2, ip, r2, r3
 800d504:	460c      	mov	r4, r1
 800d506:	2001      	movs	r0, #1
 800d508:	e7a8      	b.n	800d45c <_svfiprintf_r+0xd8>
 800d50a:	2300      	movs	r3, #0
 800d50c:	3401      	adds	r4, #1
 800d50e:	9305      	str	r3, [sp, #20]
 800d510:	4619      	mov	r1, r3
 800d512:	f04f 0c0a 	mov.w	ip, #10
 800d516:	4620      	mov	r0, r4
 800d518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d51c:	3a30      	subs	r2, #48	@ 0x30
 800d51e:	2a09      	cmp	r2, #9
 800d520:	d903      	bls.n	800d52a <_svfiprintf_r+0x1a6>
 800d522:	2b00      	cmp	r3, #0
 800d524:	d0c6      	beq.n	800d4b4 <_svfiprintf_r+0x130>
 800d526:	9105      	str	r1, [sp, #20]
 800d528:	e7c4      	b.n	800d4b4 <_svfiprintf_r+0x130>
 800d52a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d52e:	4604      	mov	r4, r0
 800d530:	2301      	movs	r3, #1
 800d532:	e7f0      	b.n	800d516 <_svfiprintf_r+0x192>
 800d534:	ab03      	add	r3, sp, #12
 800d536:	9300      	str	r3, [sp, #0]
 800d538:	462a      	mov	r2, r5
 800d53a:	4b0e      	ldr	r3, [pc, #56]	@ (800d574 <_svfiprintf_r+0x1f0>)
 800d53c:	a904      	add	r1, sp, #16
 800d53e:	4638      	mov	r0, r7
 800d540:	f3af 8000 	nop.w
 800d544:	1c42      	adds	r2, r0, #1
 800d546:	4606      	mov	r6, r0
 800d548:	d1d6      	bne.n	800d4f8 <_svfiprintf_r+0x174>
 800d54a:	89ab      	ldrh	r3, [r5, #12]
 800d54c:	065b      	lsls	r3, r3, #25
 800d54e:	f53f af2d 	bmi.w	800d3ac <_svfiprintf_r+0x28>
 800d552:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d554:	e72c      	b.n	800d3b0 <_svfiprintf_r+0x2c>
 800d556:	ab03      	add	r3, sp, #12
 800d558:	9300      	str	r3, [sp, #0]
 800d55a:	462a      	mov	r2, r5
 800d55c:	4b05      	ldr	r3, [pc, #20]	@ (800d574 <_svfiprintf_r+0x1f0>)
 800d55e:	a904      	add	r1, sp, #16
 800d560:	4638      	mov	r0, r7
 800d562:	f000 f9bb 	bl	800d8dc <_printf_i>
 800d566:	e7ed      	b.n	800d544 <_svfiprintf_r+0x1c0>
 800d568:	0800f40a 	.word	0x0800f40a
 800d56c:	0800f414 	.word	0x0800f414
 800d570:	00000000 	.word	0x00000000
 800d574:	0800d2cd 	.word	0x0800d2cd
 800d578:	0800f410 	.word	0x0800f410

0800d57c <__sfputc_r>:
 800d57c:	6893      	ldr	r3, [r2, #8]
 800d57e:	3b01      	subs	r3, #1
 800d580:	2b00      	cmp	r3, #0
 800d582:	b410      	push	{r4}
 800d584:	6093      	str	r3, [r2, #8]
 800d586:	da08      	bge.n	800d59a <__sfputc_r+0x1e>
 800d588:	6994      	ldr	r4, [r2, #24]
 800d58a:	42a3      	cmp	r3, r4
 800d58c:	db01      	blt.n	800d592 <__sfputc_r+0x16>
 800d58e:	290a      	cmp	r1, #10
 800d590:	d103      	bne.n	800d59a <__sfputc_r+0x1e>
 800d592:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d596:	f000 bb7d 	b.w	800dc94 <__swbuf_r>
 800d59a:	6813      	ldr	r3, [r2, #0]
 800d59c:	1c58      	adds	r0, r3, #1
 800d59e:	6010      	str	r0, [r2, #0]
 800d5a0:	7019      	strb	r1, [r3, #0]
 800d5a2:	4608      	mov	r0, r1
 800d5a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5a8:	4770      	bx	lr

0800d5aa <__sfputs_r>:
 800d5aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ac:	4606      	mov	r6, r0
 800d5ae:	460f      	mov	r7, r1
 800d5b0:	4614      	mov	r4, r2
 800d5b2:	18d5      	adds	r5, r2, r3
 800d5b4:	42ac      	cmp	r4, r5
 800d5b6:	d101      	bne.n	800d5bc <__sfputs_r+0x12>
 800d5b8:	2000      	movs	r0, #0
 800d5ba:	e007      	b.n	800d5cc <__sfputs_r+0x22>
 800d5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5c0:	463a      	mov	r2, r7
 800d5c2:	4630      	mov	r0, r6
 800d5c4:	f7ff ffda 	bl	800d57c <__sfputc_r>
 800d5c8:	1c43      	adds	r3, r0, #1
 800d5ca:	d1f3      	bne.n	800d5b4 <__sfputs_r+0xa>
 800d5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d5d0 <_vfiprintf_r>:
 800d5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d4:	460d      	mov	r5, r1
 800d5d6:	b09d      	sub	sp, #116	@ 0x74
 800d5d8:	4614      	mov	r4, r2
 800d5da:	4698      	mov	r8, r3
 800d5dc:	4606      	mov	r6, r0
 800d5de:	b118      	cbz	r0, 800d5e8 <_vfiprintf_r+0x18>
 800d5e0:	6a03      	ldr	r3, [r0, #32]
 800d5e2:	b90b      	cbnz	r3, 800d5e8 <_vfiprintf_r+0x18>
 800d5e4:	f7ff fb9c 	bl	800cd20 <__sinit>
 800d5e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5ea:	07d9      	lsls	r1, r3, #31
 800d5ec:	d405      	bmi.n	800d5fa <_vfiprintf_r+0x2a>
 800d5ee:	89ab      	ldrh	r3, [r5, #12]
 800d5f0:	059a      	lsls	r2, r3, #22
 800d5f2:	d402      	bmi.n	800d5fa <_vfiprintf_r+0x2a>
 800d5f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5f6:	f7ff fd3a 	bl	800d06e <__retarget_lock_acquire_recursive>
 800d5fa:	89ab      	ldrh	r3, [r5, #12]
 800d5fc:	071b      	lsls	r3, r3, #28
 800d5fe:	d501      	bpl.n	800d604 <_vfiprintf_r+0x34>
 800d600:	692b      	ldr	r3, [r5, #16]
 800d602:	b99b      	cbnz	r3, 800d62c <_vfiprintf_r+0x5c>
 800d604:	4629      	mov	r1, r5
 800d606:	4630      	mov	r0, r6
 800d608:	f000 fb82 	bl	800dd10 <__swsetup_r>
 800d60c:	b170      	cbz	r0, 800d62c <_vfiprintf_r+0x5c>
 800d60e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d610:	07dc      	lsls	r4, r3, #31
 800d612:	d504      	bpl.n	800d61e <_vfiprintf_r+0x4e>
 800d614:	f04f 30ff 	mov.w	r0, #4294967295
 800d618:	b01d      	add	sp, #116	@ 0x74
 800d61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d61e:	89ab      	ldrh	r3, [r5, #12]
 800d620:	0598      	lsls	r0, r3, #22
 800d622:	d4f7      	bmi.n	800d614 <_vfiprintf_r+0x44>
 800d624:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d626:	f7ff fd23 	bl	800d070 <__retarget_lock_release_recursive>
 800d62a:	e7f3      	b.n	800d614 <_vfiprintf_r+0x44>
 800d62c:	2300      	movs	r3, #0
 800d62e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d630:	2320      	movs	r3, #32
 800d632:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d636:	f8cd 800c 	str.w	r8, [sp, #12]
 800d63a:	2330      	movs	r3, #48	@ 0x30
 800d63c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d7ec <_vfiprintf_r+0x21c>
 800d640:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d644:	f04f 0901 	mov.w	r9, #1
 800d648:	4623      	mov	r3, r4
 800d64a:	469a      	mov	sl, r3
 800d64c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d650:	b10a      	cbz	r2, 800d656 <_vfiprintf_r+0x86>
 800d652:	2a25      	cmp	r2, #37	@ 0x25
 800d654:	d1f9      	bne.n	800d64a <_vfiprintf_r+0x7a>
 800d656:	ebba 0b04 	subs.w	fp, sl, r4
 800d65a:	d00b      	beq.n	800d674 <_vfiprintf_r+0xa4>
 800d65c:	465b      	mov	r3, fp
 800d65e:	4622      	mov	r2, r4
 800d660:	4629      	mov	r1, r5
 800d662:	4630      	mov	r0, r6
 800d664:	f7ff ffa1 	bl	800d5aa <__sfputs_r>
 800d668:	3001      	adds	r0, #1
 800d66a:	f000 80a7 	beq.w	800d7bc <_vfiprintf_r+0x1ec>
 800d66e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d670:	445a      	add	r2, fp
 800d672:	9209      	str	r2, [sp, #36]	@ 0x24
 800d674:	f89a 3000 	ldrb.w	r3, [sl]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	f000 809f 	beq.w	800d7bc <_vfiprintf_r+0x1ec>
 800d67e:	2300      	movs	r3, #0
 800d680:	f04f 32ff 	mov.w	r2, #4294967295
 800d684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d688:	f10a 0a01 	add.w	sl, sl, #1
 800d68c:	9304      	str	r3, [sp, #16]
 800d68e:	9307      	str	r3, [sp, #28]
 800d690:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d694:	931a      	str	r3, [sp, #104]	@ 0x68
 800d696:	4654      	mov	r4, sl
 800d698:	2205      	movs	r2, #5
 800d69a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d69e:	4853      	ldr	r0, [pc, #332]	@ (800d7ec <_vfiprintf_r+0x21c>)
 800d6a0:	f7f2 fdb6 	bl	8000210 <memchr>
 800d6a4:	9a04      	ldr	r2, [sp, #16]
 800d6a6:	b9d8      	cbnz	r0, 800d6e0 <_vfiprintf_r+0x110>
 800d6a8:	06d1      	lsls	r1, r2, #27
 800d6aa:	bf44      	itt	mi
 800d6ac:	2320      	movmi	r3, #32
 800d6ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6b2:	0713      	lsls	r3, r2, #28
 800d6b4:	bf44      	itt	mi
 800d6b6:	232b      	movmi	r3, #43	@ 0x2b
 800d6b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d6c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6c2:	d015      	beq.n	800d6f0 <_vfiprintf_r+0x120>
 800d6c4:	9a07      	ldr	r2, [sp, #28]
 800d6c6:	4654      	mov	r4, sl
 800d6c8:	2000      	movs	r0, #0
 800d6ca:	f04f 0c0a 	mov.w	ip, #10
 800d6ce:	4621      	mov	r1, r4
 800d6d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6d4:	3b30      	subs	r3, #48	@ 0x30
 800d6d6:	2b09      	cmp	r3, #9
 800d6d8:	d94b      	bls.n	800d772 <_vfiprintf_r+0x1a2>
 800d6da:	b1b0      	cbz	r0, 800d70a <_vfiprintf_r+0x13a>
 800d6dc:	9207      	str	r2, [sp, #28]
 800d6de:	e014      	b.n	800d70a <_vfiprintf_r+0x13a>
 800d6e0:	eba0 0308 	sub.w	r3, r0, r8
 800d6e4:	fa09 f303 	lsl.w	r3, r9, r3
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	9304      	str	r3, [sp, #16]
 800d6ec:	46a2      	mov	sl, r4
 800d6ee:	e7d2      	b.n	800d696 <_vfiprintf_r+0xc6>
 800d6f0:	9b03      	ldr	r3, [sp, #12]
 800d6f2:	1d19      	adds	r1, r3, #4
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	9103      	str	r1, [sp, #12]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	bfbb      	ittet	lt
 800d6fc:	425b      	neglt	r3, r3
 800d6fe:	f042 0202 	orrlt.w	r2, r2, #2
 800d702:	9307      	strge	r3, [sp, #28]
 800d704:	9307      	strlt	r3, [sp, #28]
 800d706:	bfb8      	it	lt
 800d708:	9204      	strlt	r2, [sp, #16]
 800d70a:	7823      	ldrb	r3, [r4, #0]
 800d70c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d70e:	d10a      	bne.n	800d726 <_vfiprintf_r+0x156>
 800d710:	7863      	ldrb	r3, [r4, #1]
 800d712:	2b2a      	cmp	r3, #42	@ 0x2a
 800d714:	d132      	bne.n	800d77c <_vfiprintf_r+0x1ac>
 800d716:	9b03      	ldr	r3, [sp, #12]
 800d718:	1d1a      	adds	r2, r3, #4
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	9203      	str	r2, [sp, #12]
 800d71e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d722:	3402      	adds	r4, #2
 800d724:	9305      	str	r3, [sp, #20]
 800d726:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d7fc <_vfiprintf_r+0x22c>
 800d72a:	7821      	ldrb	r1, [r4, #0]
 800d72c:	2203      	movs	r2, #3
 800d72e:	4650      	mov	r0, sl
 800d730:	f7f2 fd6e 	bl	8000210 <memchr>
 800d734:	b138      	cbz	r0, 800d746 <_vfiprintf_r+0x176>
 800d736:	9b04      	ldr	r3, [sp, #16]
 800d738:	eba0 000a 	sub.w	r0, r0, sl
 800d73c:	2240      	movs	r2, #64	@ 0x40
 800d73e:	4082      	lsls	r2, r0
 800d740:	4313      	orrs	r3, r2
 800d742:	3401      	adds	r4, #1
 800d744:	9304      	str	r3, [sp, #16]
 800d746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d74a:	4829      	ldr	r0, [pc, #164]	@ (800d7f0 <_vfiprintf_r+0x220>)
 800d74c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d750:	2206      	movs	r2, #6
 800d752:	f7f2 fd5d 	bl	8000210 <memchr>
 800d756:	2800      	cmp	r0, #0
 800d758:	d03f      	beq.n	800d7da <_vfiprintf_r+0x20a>
 800d75a:	4b26      	ldr	r3, [pc, #152]	@ (800d7f4 <_vfiprintf_r+0x224>)
 800d75c:	bb1b      	cbnz	r3, 800d7a6 <_vfiprintf_r+0x1d6>
 800d75e:	9b03      	ldr	r3, [sp, #12]
 800d760:	3307      	adds	r3, #7
 800d762:	f023 0307 	bic.w	r3, r3, #7
 800d766:	3308      	adds	r3, #8
 800d768:	9303      	str	r3, [sp, #12]
 800d76a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d76c:	443b      	add	r3, r7
 800d76e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d770:	e76a      	b.n	800d648 <_vfiprintf_r+0x78>
 800d772:	fb0c 3202 	mla	r2, ip, r2, r3
 800d776:	460c      	mov	r4, r1
 800d778:	2001      	movs	r0, #1
 800d77a:	e7a8      	b.n	800d6ce <_vfiprintf_r+0xfe>
 800d77c:	2300      	movs	r3, #0
 800d77e:	3401      	adds	r4, #1
 800d780:	9305      	str	r3, [sp, #20]
 800d782:	4619      	mov	r1, r3
 800d784:	f04f 0c0a 	mov.w	ip, #10
 800d788:	4620      	mov	r0, r4
 800d78a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d78e:	3a30      	subs	r2, #48	@ 0x30
 800d790:	2a09      	cmp	r2, #9
 800d792:	d903      	bls.n	800d79c <_vfiprintf_r+0x1cc>
 800d794:	2b00      	cmp	r3, #0
 800d796:	d0c6      	beq.n	800d726 <_vfiprintf_r+0x156>
 800d798:	9105      	str	r1, [sp, #20]
 800d79a:	e7c4      	b.n	800d726 <_vfiprintf_r+0x156>
 800d79c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7a0:	4604      	mov	r4, r0
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	e7f0      	b.n	800d788 <_vfiprintf_r+0x1b8>
 800d7a6:	ab03      	add	r3, sp, #12
 800d7a8:	9300      	str	r3, [sp, #0]
 800d7aa:	462a      	mov	r2, r5
 800d7ac:	4b12      	ldr	r3, [pc, #72]	@ (800d7f8 <_vfiprintf_r+0x228>)
 800d7ae:	a904      	add	r1, sp, #16
 800d7b0:	4630      	mov	r0, r6
 800d7b2:	f3af 8000 	nop.w
 800d7b6:	4607      	mov	r7, r0
 800d7b8:	1c78      	adds	r0, r7, #1
 800d7ba:	d1d6      	bne.n	800d76a <_vfiprintf_r+0x19a>
 800d7bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d7be:	07d9      	lsls	r1, r3, #31
 800d7c0:	d405      	bmi.n	800d7ce <_vfiprintf_r+0x1fe>
 800d7c2:	89ab      	ldrh	r3, [r5, #12]
 800d7c4:	059a      	lsls	r2, r3, #22
 800d7c6:	d402      	bmi.n	800d7ce <_vfiprintf_r+0x1fe>
 800d7c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d7ca:	f7ff fc51 	bl	800d070 <__retarget_lock_release_recursive>
 800d7ce:	89ab      	ldrh	r3, [r5, #12]
 800d7d0:	065b      	lsls	r3, r3, #25
 800d7d2:	f53f af1f 	bmi.w	800d614 <_vfiprintf_r+0x44>
 800d7d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d7d8:	e71e      	b.n	800d618 <_vfiprintf_r+0x48>
 800d7da:	ab03      	add	r3, sp, #12
 800d7dc:	9300      	str	r3, [sp, #0]
 800d7de:	462a      	mov	r2, r5
 800d7e0:	4b05      	ldr	r3, [pc, #20]	@ (800d7f8 <_vfiprintf_r+0x228>)
 800d7e2:	a904      	add	r1, sp, #16
 800d7e4:	4630      	mov	r0, r6
 800d7e6:	f000 f879 	bl	800d8dc <_printf_i>
 800d7ea:	e7e4      	b.n	800d7b6 <_vfiprintf_r+0x1e6>
 800d7ec:	0800f40a 	.word	0x0800f40a
 800d7f0:	0800f414 	.word	0x0800f414
 800d7f4:	00000000 	.word	0x00000000
 800d7f8:	0800d5ab 	.word	0x0800d5ab
 800d7fc:	0800f410 	.word	0x0800f410

0800d800 <_printf_common>:
 800d800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d804:	4616      	mov	r6, r2
 800d806:	4698      	mov	r8, r3
 800d808:	688a      	ldr	r2, [r1, #8]
 800d80a:	690b      	ldr	r3, [r1, #16]
 800d80c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d810:	4293      	cmp	r3, r2
 800d812:	bfb8      	it	lt
 800d814:	4613      	movlt	r3, r2
 800d816:	6033      	str	r3, [r6, #0]
 800d818:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d81c:	4607      	mov	r7, r0
 800d81e:	460c      	mov	r4, r1
 800d820:	b10a      	cbz	r2, 800d826 <_printf_common+0x26>
 800d822:	3301      	adds	r3, #1
 800d824:	6033      	str	r3, [r6, #0]
 800d826:	6823      	ldr	r3, [r4, #0]
 800d828:	0699      	lsls	r1, r3, #26
 800d82a:	bf42      	ittt	mi
 800d82c:	6833      	ldrmi	r3, [r6, #0]
 800d82e:	3302      	addmi	r3, #2
 800d830:	6033      	strmi	r3, [r6, #0]
 800d832:	6825      	ldr	r5, [r4, #0]
 800d834:	f015 0506 	ands.w	r5, r5, #6
 800d838:	d106      	bne.n	800d848 <_printf_common+0x48>
 800d83a:	f104 0a19 	add.w	sl, r4, #25
 800d83e:	68e3      	ldr	r3, [r4, #12]
 800d840:	6832      	ldr	r2, [r6, #0]
 800d842:	1a9b      	subs	r3, r3, r2
 800d844:	42ab      	cmp	r3, r5
 800d846:	dc26      	bgt.n	800d896 <_printf_common+0x96>
 800d848:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d84c:	6822      	ldr	r2, [r4, #0]
 800d84e:	3b00      	subs	r3, #0
 800d850:	bf18      	it	ne
 800d852:	2301      	movne	r3, #1
 800d854:	0692      	lsls	r2, r2, #26
 800d856:	d42b      	bmi.n	800d8b0 <_printf_common+0xb0>
 800d858:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d85c:	4641      	mov	r1, r8
 800d85e:	4638      	mov	r0, r7
 800d860:	47c8      	blx	r9
 800d862:	3001      	adds	r0, #1
 800d864:	d01e      	beq.n	800d8a4 <_printf_common+0xa4>
 800d866:	6823      	ldr	r3, [r4, #0]
 800d868:	6922      	ldr	r2, [r4, #16]
 800d86a:	f003 0306 	and.w	r3, r3, #6
 800d86e:	2b04      	cmp	r3, #4
 800d870:	bf02      	ittt	eq
 800d872:	68e5      	ldreq	r5, [r4, #12]
 800d874:	6833      	ldreq	r3, [r6, #0]
 800d876:	1aed      	subeq	r5, r5, r3
 800d878:	68a3      	ldr	r3, [r4, #8]
 800d87a:	bf0c      	ite	eq
 800d87c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d880:	2500      	movne	r5, #0
 800d882:	4293      	cmp	r3, r2
 800d884:	bfc4      	itt	gt
 800d886:	1a9b      	subgt	r3, r3, r2
 800d888:	18ed      	addgt	r5, r5, r3
 800d88a:	2600      	movs	r6, #0
 800d88c:	341a      	adds	r4, #26
 800d88e:	42b5      	cmp	r5, r6
 800d890:	d11a      	bne.n	800d8c8 <_printf_common+0xc8>
 800d892:	2000      	movs	r0, #0
 800d894:	e008      	b.n	800d8a8 <_printf_common+0xa8>
 800d896:	2301      	movs	r3, #1
 800d898:	4652      	mov	r2, sl
 800d89a:	4641      	mov	r1, r8
 800d89c:	4638      	mov	r0, r7
 800d89e:	47c8      	blx	r9
 800d8a0:	3001      	adds	r0, #1
 800d8a2:	d103      	bne.n	800d8ac <_printf_common+0xac>
 800d8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8ac:	3501      	adds	r5, #1
 800d8ae:	e7c6      	b.n	800d83e <_printf_common+0x3e>
 800d8b0:	18e1      	adds	r1, r4, r3
 800d8b2:	1c5a      	adds	r2, r3, #1
 800d8b4:	2030      	movs	r0, #48	@ 0x30
 800d8b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d8ba:	4422      	add	r2, r4
 800d8bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d8c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d8c4:	3302      	adds	r3, #2
 800d8c6:	e7c7      	b.n	800d858 <_printf_common+0x58>
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	4622      	mov	r2, r4
 800d8cc:	4641      	mov	r1, r8
 800d8ce:	4638      	mov	r0, r7
 800d8d0:	47c8      	blx	r9
 800d8d2:	3001      	adds	r0, #1
 800d8d4:	d0e6      	beq.n	800d8a4 <_printf_common+0xa4>
 800d8d6:	3601      	adds	r6, #1
 800d8d8:	e7d9      	b.n	800d88e <_printf_common+0x8e>
	...

0800d8dc <_printf_i>:
 800d8dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8e0:	7e0f      	ldrb	r7, [r1, #24]
 800d8e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d8e4:	2f78      	cmp	r7, #120	@ 0x78
 800d8e6:	4691      	mov	r9, r2
 800d8e8:	4680      	mov	r8, r0
 800d8ea:	460c      	mov	r4, r1
 800d8ec:	469a      	mov	sl, r3
 800d8ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d8f2:	d807      	bhi.n	800d904 <_printf_i+0x28>
 800d8f4:	2f62      	cmp	r7, #98	@ 0x62
 800d8f6:	d80a      	bhi.n	800d90e <_printf_i+0x32>
 800d8f8:	2f00      	cmp	r7, #0
 800d8fa:	f000 80d1 	beq.w	800daa0 <_printf_i+0x1c4>
 800d8fe:	2f58      	cmp	r7, #88	@ 0x58
 800d900:	f000 80b8 	beq.w	800da74 <_printf_i+0x198>
 800d904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d908:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d90c:	e03a      	b.n	800d984 <_printf_i+0xa8>
 800d90e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d912:	2b15      	cmp	r3, #21
 800d914:	d8f6      	bhi.n	800d904 <_printf_i+0x28>
 800d916:	a101      	add	r1, pc, #4	@ (adr r1, 800d91c <_printf_i+0x40>)
 800d918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d91c:	0800d975 	.word	0x0800d975
 800d920:	0800d989 	.word	0x0800d989
 800d924:	0800d905 	.word	0x0800d905
 800d928:	0800d905 	.word	0x0800d905
 800d92c:	0800d905 	.word	0x0800d905
 800d930:	0800d905 	.word	0x0800d905
 800d934:	0800d989 	.word	0x0800d989
 800d938:	0800d905 	.word	0x0800d905
 800d93c:	0800d905 	.word	0x0800d905
 800d940:	0800d905 	.word	0x0800d905
 800d944:	0800d905 	.word	0x0800d905
 800d948:	0800da87 	.word	0x0800da87
 800d94c:	0800d9b3 	.word	0x0800d9b3
 800d950:	0800da41 	.word	0x0800da41
 800d954:	0800d905 	.word	0x0800d905
 800d958:	0800d905 	.word	0x0800d905
 800d95c:	0800daa9 	.word	0x0800daa9
 800d960:	0800d905 	.word	0x0800d905
 800d964:	0800d9b3 	.word	0x0800d9b3
 800d968:	0800d905 	.word	0x0800d905
 800d96c:	0800d905 	.word	0x0800d905
 800d970:	0800da49 	.word	0x0800da49
 800d974:	6833      	ldr	r3, [r6, #0]
 800d976:	1d1a      	adds	r2, r3, #4
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	6032      	str	r2, [r6, #0]
 800d97c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d980:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d984:	2301      	movs	r3, #1
 800d986:	e09c      	b.n	800dac2 <_printf_i+0x1e6>
 800d988:	6833      	ldr	r3, [r6, #0]
 800d98a:	6820      	ldr	r0, [r4, #0]
 800d98c:	1d19      	adds	r1, r3, #4
 800d98e:	6031      	str	r1, [r6, #0]
 800d990:	0606      	lsls	r6, r0, #24
 800d992:	d501      	bpl.n	800d998 <_printf_i+0xbc>
 800d994:	681d      	ldr	r5, [r3, #0]
 800d996:	e003      	b.n	800d9a0 <_printf_i+0xc4>
 800d998:	0645      	lsls	r5, r0, #25
 800d99a:	d5fb      	bpl.n	800d994 <_printf_i+0xb8>
 800d99c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d9a0:	2d00      	cmp	r5, #0
 800d9a2:	da03      	bge.n	800d9ac <_printf_i+0xd0>
 800d9a4:	232d      	movs	r3, #45	@ 0x2d
 800d9a6:	426d      	negs	r5, r5
 800d9a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d9ac:	4858      	ldr	r0, [pc, #352]	@ (800db10 <_printf_i+0x234>)
 800d9ae:	230a      	movs	r3, #10
 800d9b0:	e011      	b.n	800d9d6 <_printf_i+0xfa>
 800d9b2:	6821      	ldr	r1, [r4, #0]
 800d9b4:	6833      	ldr	r3, [r6, #0]
 800d9b6:	0608      	lsls	r0, r1, #24
 800d9b8:	f853 5b04 	ldr.w	r5, [r3], #4
 800d9bc:	d402      	bmi.n	800d9c4 <_printf_i+0xe8>
 800d9be:	0649      	lsls	r1, r1, #25
 800d9c0:	bf48      	it	mi
 800d9c2:	b2ad      	uxthmi	r5, r5
 800d9c4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d9c6:	4852      	ldr	r0, [pc, #328]	@ (800db10 <_printf_i+0x234>)
 800d9c8:	6033      	str	r3, [r6, #0]
 800d9ca:	bf14      	ite	ne
 800d9cc:	230a      	movne	r3, #10
 800d9ce:	2308      	moveq	r3, #8
 800d9d0:	2100      	movs	r1, #0
 800d9d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d9d6:	6866      	ldr	r6, [r4, #4]
 800d9d8:	60a6      	str	r6, [r4, #8]
 800d9da:	2e00      	cmp	r6, #0
 800d9dc:	db05      	blt.n	800d9ea <_printf_i+0x10e>
 800d9de:	6821      	ldr	r1, [r4, #0]
 800d9e0:	432e      	orrs	r6, r5
 800d9e2:	f021 0104 	bic.w	r1, r1, #4
 800d9e6:	6021      	str	r1, [r4, #0]
 800d9e8:	d04b      	beq.n	800da82 <_printf_i+0x1a6>
 800d9ea:	4616      	mov	r6, r2
 800d9ec:	fbb5 f1f3 	udiv	r1, r5, r3
 800d9f0:	fb03 5711 	mls	r7, r3, r1, r5
 800d9f4:	5dc7      	ldrb	r7, [r0, r7]
 800d9f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d9fa:	462f      	mov	r7, r5
 800d9fc:	42bb      	cmp	r3, r7
 800d9fe:	460d      	mov	r5, r1
 800da00:	d9f4      	bls.n	800d9ec <_printf_i+0x110>
 800da02:	2b08      	cmp	r3, #8
 800da04:	d10b      	bne.n	800da1e <_printf_i+0x142>
 800da06:	6823      	ldr	r3, [r4, #0]
 800da08:	07df      	lsls	r7, r3, #31
 800da0a:	d508      	bpl.n	800da1e <_printf_i+0x142>
 800da0c:	6923      	ldr	r3, [r4, #16]
 800da0e:	6861      	ldr	r1, [r4, #4]
 800da10:	4299      	cmp	r1, r3
 800da12:	bfde      	ittt	le
 800da14:	2330      	movle	r3, #48	@ 0x30
 800da16:	f806 3c01 	strble.w	r3, [r6, #-1]
 800da1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800da1e:	1b92      	subs	r2, r2, r6
 800da20:	6122      	str	r2, [r4, #16]
 800da22:	f8cd a000 	str.w	sl, [sp]
 800da26:	464b      	mov	r3, r9
 800da28:	aa03      	add	r2, sp, #12
 800da2a:	4621      	mov	r1, r4
 800da2c:	4640      	mov	r0, r8
 800da2e:	f7ff fee7 	bl	800d800 <_printf_common>
 800da32:	3001      	adds	r0, #1
 800da34:	d14a      	bne.n	800dacc <_printf_i+0x1f0>
 800da36:	f04f 30ff 	mov.w	r0, #4294967295
 800da3a:	b004      	add	sp, #16
 800da3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da40:	6823      	ldr	r3, [r4, #0]
 800da42:	f043 0320 	orr.w	r3, r3, #32
 800da46:	6023      	str	r3, [r4, #0]
 800da48:	4832      	ldr	r0, [pc, #200]	@ (800db14 <_printf_i+0x238>)
 800da4a:	2778      	movs	r7, #120	@ 0x78
 800da4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800da50:	6823      	ldr	r3, [r4, #0]
 800da52:	6831      	ldr	r1, [r6, #0]
 800da54:	061f      	lsls	r7, r3, #24
 800da56:	f851 5b04 	ldr.w	r5, [r1], #4
 800da5a:	d402      	bmi.n	800da62 <_printf_i+0x186>
 800da5c:	065f      	lsls	r7, r3, #25
 800da5e:	bf48      	it	mi
 800da60:	b2ad      	uxthmi	r5, r5
 800da62:	6031      	str	r1, [r6, #0]
 800da64:	07d9      	lsls	r1, r3, #31
 800da66:	bf44      	itt	mi
 800da68:	f043 0320 	orrmi.w	r3, r3, #32
 800da6c:	6023      	strmi	r3, [r4, #0]
 800da6e:	b11d      	cbz	r5, 800da78 <_printf_i+0x19c>
 800da70:	2310      	movs	r3, #16
 800da72:	e7ad      	b.n	800d9d0 <_printf_i+0xf4>
 800da74:	4826      	ldr	r0, [pc, #152]	@ (800db10 <_printf_i+0x234>)
 800da76:	e7e9      	b.n	800da4c <_printf_i+0x170>
 800da78:	6823      	ldr	r3, [r4, #0]
 800da7a:	f023 0320 	bic.w	r3, r3, #32
 800da7e:	6023      	str	r3, [r4, #0]
 800da80:	e7f6      	b.n	800da70 <_printf_i+0x194>
 800da82:	4616      	mov	r6, r2
 800da84:	e7bd      	b.n	800da02 <_printf_i+0x126>
 800da86:	6833      	ldr	r3, [r6, #0]
 800da88:	6825      	ldr	r5, [r4, #0]
 800da8a:	6961      	ldr	r1, [r4, #20]
 800da8c:	1d18      	adds	r0, r3, #4
 800da8e:	6030      	str	r0, [r6, #0]
 800da90:	062e      	lsls	r6, r5, #24
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	d501      	bpl.n	800da9a <_printf_i+0x1be>
 800da96:	6019      	str	r1, [r3, #0]
 800da98:	e002      	b.n	800daa0 <_printf_i+0x1c4>
 800da9a:	0668      	lsls	r0, r5, #25
 800da9c:	d5fb      	bpl.n	800da96 <_printf_i+0x1ba>
 800da9e:	8019      	strh	r1, [r3, #0]
 800daa0:	2300      	movs	r3, #0
 800daa2:	6123      	str	r3, [r4, #16]
 800daa4:	4616      	mov	r6, r2
 800daa6:	e7bc      	b.n	800da22 <_printf_i+0x146>
 800daa8:	6833      	ldr	r3, [r6, #0]
 800daaa:	1d1a      	adds	r2, r3, #4
 800daac:	6032      	str	r2, [r6, #0]
 800daae:	681e      	ldr	r6, [r3, #0]
 800dab0:	6862      	ldr	r2, [r4, #4]
 800dab2:	2100      	movs	r1, #0
 800dab4:	4630      	mov	r0, r6
 800dab6:	f7f2 fbab 	bl	8000210 <memchr>
 800daba:	b108      	cbz	r0, 800dac0 <_printf_i+0x1e4>
 800dabc:	1b80      	subs	r0, r0, r6
 800dabe:	6060      	str	r0, [r4, #4]
 800dac0:	6863      	ldr	r3, [r4, #4]
 800dac2:	6123      	str	r3, [r4, #16]
 800dac4:	2300      	movs	r3, #0
 800dac6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800daca:	e7aa      	b.n	800da22 <_printf_i+0x146>
 800dacc:	6923      	ldr	r3, [r4, #16]
 800dace:	4632      	mov	r2, r6
 800dad0:	4649      	mov	r1, r9
 800dad2:	4640      	mov	r0, r8
 800dad4:	47d0      	blx	sl
 800dad6:	3001      	adds	r0, #1
 800dad8:	d0ad      	beq.n	800da36 <_printf_i+0x15a>
 800dada:	6823      	ldr	r3, [r4, #0]
 800dadc:	079b      	lsls	r3, r3, #30
 800dade:	d413      	bmi.n	800db08 <_printf_i+0x22c>
 800dae0:	68e0      	ldr	r0, [r4, #12]
 800dae2:	9b03      	ldr	r3, [sp, #12]
 800dae4:	4298      	cmp	r0, r3
 800dae6:	bfb8      	it	lt
 800dae8:	4618      	movlt	r0, r3
 800daea:	e7a6      	b.n	800da3a <_printf_i+0x15e>
 800daec:	2301      	movs	r3, #1
 800daee:	4632      	mov	r2, r6
 800daf0:	4649      	mov	r1, r9
 800daf2:	4640      	mov	r0, r8
 800daf4:	47d0      	blx	sl
 800daf6:	3001      	adds	r0, #1
 800daf8:	d09d      	beq.n	800da36 <_printf_i+0x15a>
 800dafa:	3501      	adds	r5, #1
 800dafc:	68e3      	ldr	r3, [r4, #12]
 800dafe:	9903      	ldr	r1, [sp, #12]
 800db00:	1a5b      	subs	r3, r3, r1
 800db02:	42ab      	cmp	r3, r5
 800db04:	dcf2      	bgt.n	800daec <_printf_i+0x210>
 800db06:	e7eb      	b.n	800dae0 <_printf_i+0x204>
 800db08:	2500      	movs	r5, #0
 800db0a:	f104 0619 	add.w	r6, r4, #25
 800db0e:	e7f5      	b.n	800dafc <_printf_i+0x220>
 800db10:	0800f41b 	.word	0x0800f41b
 800db14:	0800f42c 	.word	0x0800f42c

0800db18 <__sflush_r>:
 800db18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800db1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db20:	0716      	lsls	r6, r2, #28
 800db22:	4605      	mov	r5, r0
 800db24:	460c      	mov	r4, r1
 800db26:	d454      	bmi.n	800dbd2 <__sflush_r+0xba>
 800db28:	684b      	ldr	r3, [r1, #4]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	dc02      	bgt.n	800db34 <__sflush_r+0x1c>
 800db2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800db30:	2b00      	cmp	r3, #0
 800db32:	dd48      	ble.n	800dbc6 <__sflush_r+0xae>
 800db34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db36:	2e00      	cmp	r6, #0
 800db38:	d045      	beq.n	800dbc6 <__sflush_r+0xae>
 800db3a:	2300      	movs	r3, #0
 800db3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800db40:	682f      	ldr	r7, [r5, #0]
 800db42:	6a21      	ldr	r1, [r4, #32]
 800db44:	602b      	str	r3, [r5, #0]
 800db46:	d030      	beq.n	800dbaa <__sflush_r+0x92>
 800db48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800db4a:	89a3      	ldrh	r3, [r4, #12]
 800db4c:	0759      	lsls	r1, r3, #29
 800db4e:	d505      	bpl.n	800db5c <__sflush_r+0x44>
 800db50:	6863      	ldr	r3, [r4, #4]
 800db52:	1ad2      	subs	r2, r2, r3
 800db54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800db56:	b10b      	cbz	r3, 800db5c <__sflush_r+0x44>
 800db58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800db5a:	1ad2      	subs	r2, r2, r3
 800db5c:	2300      	movs	r3, #0
 800db5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db60:	6a21      	ldr	r1, [r4, #32]
 800db62:	4628      	mov	r0, r5
 800db64:	47b0      	blx	r6
 800db66:	1c43      	adds	r3, r0, #1
 800db68:	89a3      	ldrh	r3, [r4, #12]
 800db6a:	d106      	bne.n	800db7a <__sflush_r+0x62>
 800db6c:	6829      	ldr	r1, [r5, #0]
 800db6e:	291d      	cmp	r1, #29
 800db70:	d82b      	bhi.n	800dbca <__sflush_r+0xb2>
 800db72:	4a2a      	ldr	r2, [pc, #168]	@ (800dc1c <__sflush_r+0x104>)
 800db74:	40ca      	lsrs	r2, r1
 800db76:	07d6      	lsls	r6, r2, #31
 800db78:	d527      	bpl.n	800dbca <__sflush_r+0xb2>
 800db7a:	2200      	movs	r2, #0
 800db7c:	6062      	str	r2, [r4, #4]
 800db7e:	04d9      	lsls	r1, r3, #19
 800db80:	6922      	ldr	r2, [r4, #16]
 800db82:	6022      	str	r2, [r4, #0]
 800db84:	d504      	bpl.n	800db90 <__sflush_r+0x78>
 800db86:	1c42      	adds	r2, r0, #1
 800db88:	d101      	bne.n	800db8e <__sflush_r+0x76>
 800db8a:	682b      	ldr	r3, [r5, #0]
 800db8c:	b903      	cbnz	r3, 800db90 <__sflush_r+0x78>
 800db8e:	6560      	str	r0, [r4, #84]	@ 0x54
 800db90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db92:	602f      	str	r7, [r5, #0]
 800db94:	b1b9      	cbz	r1, 800dbc6 <__sflush_r+0xae>
 800db96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db9a:	4299      	cmp	r1, r3
 800db9c:	d002      	beq.n	800dba4 <__sflush_r+0x8c>
 800db9e:	4628      	mov	r0, r5
 800dba0:	f7ff fa94 	bl	800d0cc <_free_r>
 800dba4:	2300      	movs	r3, #0
 800dba6:	6363      	str	r3, [r4, #52]	@ 0x34
 800dba8:	e00d      	b.n	800dbc6 <__sflush_r+0xae>
 800dbaa:	2301      	movs	r3, #1
 800dbac:	4628      	mov	r0, r5
 800dbae:	47b0      	blx	r6
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	1c50      	adds	r0, r2, #1
 800dbb4:	d1c9      	bne.n	800db4a <__sflush_r+0x32>
 800dbb6:	682b      	ldr	r3, [r5, #0]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d0c6      	beq.n	800db4a <__sflush_r+0x32>
 800dbbc:	2b1d      	cmp	r3, #29
 800dbbe:	d001      	beq.n	800dbc4 <__sflush_r+0xac>
 800dbc0:	2b16      	cmp	r3, #22
 800dbc2:	d11e      	bne.n	800dc02 <__sflush_r+0xea>
 800dbc4:	602f      	str	r7, [r5, #0]
 800dbc6:	2000      	movs	r0, #0
 800dbc8:	e022      	b.n	800dc10 <__sflush_r+0xf8>
 800dbca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbce:	b21b      	sxth	r3, r3
 800dbd0:	e01b      	b.n	800dc0a <__sflush_r+0xf2>
 800dbd2:	690f      	ldr	r7, [r1, #16]
 800dbd4:	2f00      	cmp	r7, #0
 800dbd6:	d0f6      	beq.n	800dbc6 <__sflush_r+0xae>
 800dbd8:	0793      	lsls	r3, r2, #30
 800dbda:	680e      	ldr	r6, [r1, #0]
 800dbdc:	bf08      	it	eq
 800dbde:	694b      	ldreq	r3, [r1, #20]
 800dbe0:	600f      	str	r7, [r1, #0]
 800dbe2:	bf18      	it	ne
 800dbe4:	2300      	movne	r3, #0
 800dbe6:	eba6 0807 	sub.w	r8, r6, r7
 800dbea:	608b      	str	r3, [r1, #8]
 800dbec:	f1b8 0f00 	cmp.w	r8, #0
 800dbf0:	dde9      	ble.n	800dbc6 <__sflush_r+0xae>
 800dbf2:	6a21      	ldr	r1, [r4, #32]
 800dbf4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dbf6:	4643      	mov	r3, r8
 800dbf8:	463a      	mov	r2, r7
 800dbfa:	4628      	mov	r0, r5
 800dbfc:	47b0      	blx	r6
 800dbfe:	2800      	cmp	r0, #0
 800dc00:	dc08      	bgt.n	800dc14 <__sflush_r+0xfc>
 800dc02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc0a:	81a3      	strh	r3, [r4, #12]
 800dc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc14:	4407      	add	r7, r0
 800dc16:	eba8 0800 	sub.w	r8, r8, r0
 800dc1a:	e7e7      	b.n	800dbec <__sflush_r+0xd4>
 800dc1c:	20400001 	.word	0x20400001

0800dc20 <_fflush_r>:
 800dc20:	b538      	push	{r3, r4, r5, lr}
 800dc22:	690b      	ldr	r3, [r1, #16]
 800dc24:	4605      	mov	r5, r0
 800dc26:	460c      	mov	r4, r1
 800dc28:	b913      	cbnz	r3, 800dc30 <_fflush_r+0x10>
 800dc2a:	2500      	movs	r5, #0
 800dc2c:	4628      	mov	r0, r5
 800dc2e:	bd38      	pop	{r3, r4, r5, pc}
 800dc30:	b118      	cbz	r0, 800dc3a <_fflush_r+0x1a>
 800dc32:	6a03      	ldr	r3, [r0, #32]
 800dc34:	b90b      	cbnz	r3, 800dc3a <_fflush_r+0x1a>
 800dc36:	f7ff f873 	bl	800cd20 <__sinit>
 800dc3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d0f3      	beq.n	800dc2a <_fflush_r+0xa>
 800dc42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dc44:	07d0      	lsls	r0, r2, #31
 800dc46:	d404      	bmi.n	800dc52 <_fflush_r+0x32>
 800dc48:	0599      	lsls	r1, r3, #22
 800dc4a:	d402      	bmi.n	800dc52 <_fflush_r+0x32>
 800dc4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc4e:	f7ff fa0e 	bl	800d06e <__retarget_lock_acquire_recursive>
 800dc52:	4628      	mov	r0, r5
 800dc54:	4621      	mov	r1, r4
 800dc56:	f7ff ff5f 	bl	800db18 <__sflush_r>
 800dc5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc5c:	07da      	lsls	r2, r3, #31
 800dc5e:	4605      	mov	r5, r0
 800dc60:	d4e4      	bmi.n	800dc2c <_fflush_r+0xc>
 800dc62:	89a3      	ldrh	r3, [r4, #12]
 800dc64:	059b      	lsls	r3, r3, #22
 800dc66:	d4e1      	bmi.n	800dc2c <_fflush_r+0xc>
 800dc68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc6a:	f7ff fa01 	bl	800d070 <__retarget_lock_release_recursive>
 800dc6e:	e7dd      	b.n	800dc2c <_fflush_r+0xc>

0800dc70 <fiprintf>:
 800dc70:	b40e      	push	{r1, r2, r3}
 800dc72:	b503      	push	{r0, r1, lr}
 800dc74:	4601      	mov	r1, r0
 800dc76:	ab03      	add	r3, sp, #12
 800dc78:	4805      	ldr	r0, [pc, #20]	@ (800dc90 <fiprintf+0x20>)
 800dc7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc7e:	6800      	ldr	r0, [r0, #0]
 800dc80:	9301      	str	r3, [sp, #4]
 800dc82:	f7ff fca5 	bl	800d5d0 <_vfiprintf_r>
 800dc86:	b002      	add	sp, #8
 800dc88:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc8c:	b003      	add	sp, #12
 800dc8e:	4770      	bx	lr
 800dc90:	20000250 	.word	0x20000250

0800dc94 <__swbuf_r>:
 800dc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc96:	460e      	mov	r6, r1
 800dc98:	4614      	mov	r4, r2
 800dc9a:	4605      	mov	r5, r0
 800dc9c:	b118      	cbz	r0, 800dca6 <__swbuf_r+0x12>
 800dc9e:	6a03      	ldr	r3, [r0, #32]
 800dca0:	b90b      	cbnz	r3, 800dca6 <__swbuf_r+0x12>
 800dca2:	f7ff f83d 	bl	800cd20 <__sinit>
 800dca6:	69a3      	ldr	r3, [r4, #24]
 800dca8:	60a3      	str	r3, [r4, #8]
 800dcaa:	89a3      	ldrh	r3, [r4, #12]
 800dcac:	071a      	lsls	r2, r3, #28
 800dcae:	d501      	bpl.n	800dcb4 <__swbuf_r+0x20>
 800dcb0:	6923      	ldr	r3, [r4, #16]
 800dcb2:	b943      	cbnz	r3, 800dcc6 <__swbuf_r+0x32>
 800dcb4:	4621      	mov	r1, r4
 800dcb6:	4628      	mov	r0, r5
 800dcb8:	f000 f82a 	bl	800dd10 <__swsetup_r>
 800dcbc:	b118      	cbz	r0, 800dcc6 <__swbuf_r+0x32>
 800dcbe:	f04f 37ff 	mov.w	r7, #4294967295
 800dcc2:	4638      	mov	r0, r7
 800dcc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcc6:	6823      	ldr	r3, [r4, #0]
 800dcc8:	6922      	ldr	r2, [r4, #16]
 800dcca:	1a98      	subs	r0, r3, r2
 800dccc:	6963      	ldr	r3, [r4, #20]
 800dcce:	b2f6      	uxtb	r6, r6
 800dcd0:	4283      	cmp	r3, r0
 800dcd2:	4637      	mov	r7, r6
 800dcd4:	dc05      	bgt.n	800dce2 <__swbuf_r+0x4e>
 800dcd6:	4621      	mov	r1, r4
 800dcd8:	4628      	mov	r0, r5
 800dcda:	f7ff ffa1 	bl	800dc20 <_fflush_r>
 800dcde:	2800      	cmp	r0, #0
 800dce0:	d1ed      	bne.n	800dcbe <__swbuf_r+0x2a>
 800dce2:	68a3      	ldr	r3, [r4, #8]
 800dce4:	3b01      	subs	r3, #1
 800dce6:	60a3      	str	r3, [r4, #8]
 800dce8:	6823      	ldr	r3, [r4, #0]
 800dcea:	1c5a      	adds	r2, r3, #1
 800dcec:	6022      	str	r2, [r4, #0]
 800dcee:	701e      	strb	r6, [r3, #0]
 800dcf0:	6962      	ldr	r2, [r4, #20]
 800dcf2:	1c43      	adds	r3, r0, #1
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d004      	beq.n	800dd02 <__swbuf_r+0x6e>
 800dcf8:	89a3      	ldrh	r3, [r4, #12]
 800dcfa:	07db      	lsls	r3, r3, #31
 800dcfc:	d5e1      	bpl.n	800dcc2 <__swbuf_r+0x2e>
 800dcfe:	2e0a      	cmp	r6, #10
 800dd00:	d1df      	bne.n	800dcc2 <__swbuf_r+0x2e>
 800dd02:	4621      	mov	r1, r4
 800dd04:	4628      	mov	r0, r5
 800dd06:	f7ff ff8b 	bl	800dc20 <_fflush_r>
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	d0d9      	beq.n	800dcc2 <__swbuf_r+0x2e>
 800dd0e:	e7d6      	b.n	800dcbe <__swbuf_r+0x2a>

0800dd10 <__swsetup_r>:
 800dd10:	b538      	push	{r3, r4, r5, lr}
 800dd12:	4b29      	ldr	r3, [pc, #164]	@ (800ddb8 <__swsetup_r+0xa8>)
 800dd14:	4605      	mov	r5, r0
 800dd16:	6818      	ldr	r0, [r3, #0]
 800dd18:	460c      	mov	r4, r1
 800dd1a:	b118      	cbz	r0, 800dd24 <__swsetup_r+0x14>
 800dd1c:	6a03      	ldr	r3, [r0, #32]
 800dd1e:	b90b      	cbnz	r3, 800dd24 <__swsetup_r+0x14>
 800dd20:	f7fe fffe 	bl	800cd20 <__sinit>
 800dd24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd28:	0719      	lsls	r1, r3, #28
 800dd2a:	d422      	bmi.n	800dd72 <__swsetup_r+0x62>
 800dd2c:	06da      	lsls	r2, r3, #27
 800dd2e:	d407      	bmi.n	800dd40 <__swsetup_r+0x30>
 800dd30:	2209      	movs	r2, #9
 800dd32:	602a      	str	r2, [r5, #0]
 800dd34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd38:	81a3      	strh	r3, [r4, #12]
 800dd3a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd3e:	e033      	b.n	800dda8 <__swsetup_r+0x98>
 800dd40:	0758      	lsls	r0, r3, #29
 800dd42:	d512      	bpl.n	800dd6a <__swsetup_r+0x5a>
 800dd44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd46:	b141      	cbz	r1, 800dd5a <__swsetup_r+0x4a>
 800dd48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd4c:	4299      	cmp	r1, r3
 800dd4e:	d002      	beq.n	800dd56 <__swsetup_r+0x46>
 800dd50:	4628      	mov	r0, r5
 800dd52:	f7ff f9bb 	bl	800d0cc <_free_r>
 800dd56:	2300      	movs	r3, #0
 800dd58:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd5a:	89a3      	ldrh	r3, [r4, #12]
 800dd5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dd60:	81a3      	strh	r3, [r4, #12]
 800dd62:	2300      	movs	r3, #0
 800dd64:	6063      	str	r3, [r4, #4]
 800dd66:	6923      	ldr	r3, [r4, #16]
 800dd68:	6023      	str	r3, [r4, #0]
 800dd6a:	89a3      	ldrh	r3, [r4, #12]
 800dd6c:	f043 0308 	orr.w	r3, r3, #8
 800dd70:	81a3      	strh	r3, [r4, #12]
 800dd72:	6923      	ldr	r3, [r4, #16]
 800dd74:	b94b      	cbnz	r3, 800dd8a <__swsetup_r+0x7a>
 800dd76:	89a3      	ldrh	r3, [r4, #12]
 800dd78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dd7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd80:	d003      	beq.n	800dd8a <__swsetup_r+0x7a>
 800dd82:	4621      	mov	r1, r4
 800dd84:	4628      	mov	r0, r5
 800dd86:	f000 f89e 	bl	800dec6 <__smakebuf_r>
 800dd8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd8e:	f013 0201 	ands.w	r2, r3, #1
 800dd92:	d00a      	beq.n	800ddaa <__swsetup_r+0x9a>
 800dd94:	2200      	movs	r2, #0
 800dd96:	60a2      	str	r2, [r4, #8]
 800dd98:	6962      	ldr	r2, [r4, #20]
 800dd9a:	4252      	negs	r2, r2
 800dd9c:	61a2      	str	r2, [r4, #24]
 800dd9e:	6922      	ldr	r2, [r4, #16]
 800dda0:	b942      	cbnz	r2, 800ddb4 <__swsetup_r+0xa4>
 800dda2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dda6:	d1c5      	bne.n	800dd34 <__swsetup_r+0x24>
 800dda8:	bd38      	pop	{r3, r4, r5, pc}
 800ddaa:	0799      	lsls	r1, r3, #30
 800ddac:	bf58      	it	pl
 800ddae:	6962      	ldrpl	r2, [r4, #20]
 800ddb0:	60a2      	str	r2, [r4, #8]
 800ddb2:	e7f4      	b.n	800dd9e <__swsetup_r+0x8e>
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	e7f7      	b.n	800dda8 <__swsetup_r+0x98>
 800ddb8:	20000250 	.word	0x20000250

0800ddbc <memmove>:
 800ddbc:	4288      	cmp	r0, r1
 800ddbe:	b510      	push	{r4, lr}
 800ddc0:	eb01 0402 	add.w	r4, r1, r2
 800ddc4:	d902      	bls.n	800ddcc <memmove+0x10>
 800ddc6:	4284      	cmp	r4, r0
 800ddc8:	4623      	mov	r3, r4
 800ddca:	d807      	bhi.n	800dddc <memmove+0x20>
 800ddcc:	1e43      	subs	r3, r0, #1
 800ddce:	42a1      	cmp	r1, r4
 800ddd0:	d008      	beq.n	800dde4 <memmove+0x28>
 800ddd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ddd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ddda:	e7f8      	b.n	800ddce <memmove+0x12>
 800dddc:	4402      	add	r2, r0
 800ddde:	4601      	mov	r1, r0
 800dde0:	428a      	cmp	r2, r1
 800dde2:	d100      	bne.n	800dde6 <memmove+0x2a>
 800dde4:	bd10      	pop	{r4, pc}
 800dde6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ddea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ddee:	e7f7      	b.n	800dde0 <memmove+0x24>

0800ddf0 <_sbrk_r>:
 800ddf0:	b538      	push	{r3, r4, r5, lr}
 800ddf2:	4d06      	ldr	r5, [pc, #24]	@ (800de0c <_sbrk_r+0x1c>)
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	4608      	mov	r0, r1
 800ddfa:	602b      	str	r3, [r5, #0]
 800ddfc:	f7f5 ff58 	bl	8003cb0 <_sbrk>
 800de00:	1c43      	adds	r3, r0, #1
 800de02:	d102      	bne.n	800de0a <_sbrk_r+0x1a>
 800de04:	682b      	ldr	r3, [r5, #0]
 800de06:	b103      	cbz	r3, 800de0a <_sbrk_r+0x1a>
 800de08:	6023      	str	r3, [r4, #0]
 800de0a:	bd38      	pop	{r3, r4, r5, pc}
 800de0c:	20001a2c 	.word	0x20001a2c

0800de10 <abort>:
 800de10:	b508      	push	{r3, lr}
 800de12:	2006      	movs	r0, #6
 800de14:	f000 f8bc 	bl	800df90 <raise>
 800de18:	2001      	movs	r0, #1
 800de1a:	f7f5 fed0 	bl	8003bbe <_exit>

0800de1e <_realloc_r>:
 800de1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de22:	4607      	mov	r7, r0
 800de24:	4614      	mov	r4, r2
 800de26:	460d      	mov	r5, r1
 800de28:	b921      	cbnz	r1, 800de34 <_realloc_r+0x16>
 800de2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de2e:	4611      	mov	r1, r2
 800de30:	f7ff b9c0 	b.w	800d1b4 <_malloc_r>
 800de34:	b92a      	cbnz	r2, 800de42 <_realloc_r+0x24>
 800de36:	f7ff f949 	bl	800d0cc <_free_r>
 800de3a:	4625      	mov	r5, r4
 800de3c:	4628      	mov	r0, r5
 800de3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de42:	f000 f8e3 	bl	800e00c <_malloc_usable_size_r>
 800de46:	4284      	cmp	r4, r0
 800de48:	4606      	mov	r6, r0
 800de4a:	d802      	bhi.n	800de52 <_realloc_r+0x34>
 800de4c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de50:	d8f4      	bhi.n	800de3c <_realloc_r+0x1e>
 800de52:	4621      	mov	r1, r4
 800de54:	4638      	mov	r0, r7
 800de56:	f7ff f9ad 	bl	800d1b4 <_malloc_r>
 800de5a:	4680      	mov	r8, r0
 800de5c:	b908      	cbnz	r0, 800de62 <_realloc_r+0x44>
 800de5e:	4645      	mov	r5, r8
 800de60:	e7ec      	b.n	800de3c <_realloc_r+0x1e>
 800de62:	42b4      	cmp	r4, r6
 800de64:	4622      	mov	r2, r4
 800de66:	4629      	mov	r1, r5
 800de68:	bf28      	it	cs
 800de6a:	4632      	movcs	r2, r6
 800de6c:	f7ff f901 	bl	800d072 <memcpy>
 800de70:	4629      	mov	r1, r5
 800de72:	4638      	mov	r0, r7
 800de74:	f7ff f92a 	bl	800d0cc <_free_r>
 800de78:	e7f1      	b.n	800de5e <_realloc_r+0x40>

0800de7a <__swhatbuf_r>:
 800de7a:	b570      	push	{r4, r5, r6, lr}
 800de7c:	460c      	mov	r4, r1
 800de7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de82:	2900      	cmp	r1, #0
 800de84:	b096      	sub	sp, #88	@ 0x58
 800de86:	4615      	mov	r5, r2
 800de88:	461e      	mov	r6, r3
 800de8a:	da0d      	bge.n	800dea8 <__swhatbuf_r+0x2e>
 800de8c:	89a3      	ldrh	r3, [r4, #12]
 800de8e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800de92:	f04f 0100 	mov.w	r1, #0
 800de96:	bf14      	ite	ne
 800de98:	2340      	movne	r3, #64	@ 0x40
 800de9a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800de9e:	2000      	movs	r0, #0
 800dea0:	6031      	str	r1, [r6, #0]
 800dea2:	602b      	str	r3, [r5, #0]
 800dea4:	b016      	add	sp, #88	@ 0x58
 800dea6:	bd70      	pop	{r4, r5, r6, pc}
 800dea8:	466a      	mov	r2, sp
 800deaa:	f000 f879 	bl	800dfa0 <_fstat_r>
 800deae:	2800      	cmp	r0, #0
 800deb0:	dbec      	blt.n	800de8c <__swhatbuf_r+0x12>
 800deb2:	9901      	ldr	r1, [sp, #4]
 800deb4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800deb8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800debc:	4259      	negs	r1, r3
 800debe:	4159      	adcs	r1, r3
 800dec0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dec4:	e7eb      	b.n	800de9e <__swhatbuf_r+0x24>

0800dec6 <__smakebuf_r>:
 800dec6:	898b      	ldrh	r3, [r1, #12]
 800dec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800deca:	079d      	lsls	r5, r3, #30
 800decc:	4606      	mov	r6, r0
 800dece:	460c      	mov	r4, r1
 800ded0:	d507      	bpl.n	800dee2 <__smakebuf_r+0x1c>
 800ded2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ded6:	6023      	str	r3, [r4, #0]
 800ded8:	6123      	str	r3, [r4, #16]
 800deda:	2301      	movs	r3, #1
 800dedc:	6163      	str	r3, [r4, #20]
 800dede:	b003      	add	sp, #12
 800dee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dee2:	ab01      	add	r3, sp, #4
 800dee4:	466a      	mov	r2, sp
 800dee6:	f7ff ffc8 	bl	800de7a <__swhatbuf_r>
 800deea:	9f00      	ldr	r7, [sp, #0]
 800deec:	4605      	mov	r5, r0
 800deee:	4639      	mov	r1, r7
 800def0:	4630      	mov	r0, r6
 800def2:	f7ff f95f 	bl	800d1b4 <_malloc_r>
 800def6:	b948      	cbnz	r0, 800df0c <__smakebuf_r+0x46>
 800def8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800defc:	059a      	lsls	r2, r3, #22
 800defe:	d4ee      	bmi.n	800dede <__smakebuf_r+0x18>
 800df00:	f023 0303 	bic.w	r3, r3, #3
 800df04:	f043 0302 	orr.w	r3, r3, #2
 800df08:	81a3      	strh	r3, [r4, #12]
 800df0a:	e7e2      	b.n	800ded2 <__smakebuf_r+0xc>
 800df0c:	89a3      	ldrh	r3, [r4, #12]
 800df0e:	6020      	str	r0, [r4, #0]
 800df10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df14:	81a3      	strh	r3, [r4, #12]
 800df16:	9b01      	ldr	r3, [sp, #4]
 800df18:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800df1c:	b15b      	cbz	r3, 800df36 <__smakebuf_r+0x70>
 800df1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df22:	4630      	mov	r0, r6
 800df24:	f000 f84e 	bl	800dfc4 <_isatty_r>
 800df28:	b128      	cbz	r0, 800df36 <__smakebuf_r+0x70>
 800df2a:	89a3      	ldrh	r3, [r4, #12]
 800df2c:	f023 0303 	bic.w	r3, r3, #3
 800df30:	f043 0301 	orr.w	r3, r3, #1
 800df34:	81a3      	strh	r3, [r4, #12]
 800df36:	89a3      	ldrh	r3, [r4, #12]
 800df38:	431d      	orrs	r5, r3
 800df3a:	81a5      	strh	r5, [r4, #12]
 800df3c:	e7cf      	b.n	800dede <__smakebuf_r+0x18>

0800df3e <_raise_r>:
 800df3e:	291f      	cmp	r1, #31
 800df40:	b538      	push	{r3, r4, r5, lr}
 800df42:	4605      	mov	r5, r0
 800df44:	460c      	mov	r4, r1
 800df46:	d904      	bls.n	800df52 <_raise_r+0x14>
 800df48:	2316      	movs	r3, #22
 800df4a:	6003      	str	r3, [r0, #0]
 800df4c:	f04f 30ff 	mov.w	r0, #4294967295
 800df50:	bd38      	pop	{r3, r4, r5, pc}
 800df52:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800df54:	b112      	cbz	r2, 800df5c <_raise_r+0x1e>
 800df56:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df5a:	b94b      	cbnz	r3, 800df70 <_raise_r+0x32>
 800df5c:	4628      	mov	r0, r5
 800df5e:	f000 f853 	bl	800e008 <_getpid_r>
 800df62:	4622      	mov	r2, r4
 800df64:	4601      	mov	r1, r0
 800df66:	4628      	mov	r0, r5
 800df68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df6c:	f000 b83a 	b.w	800dfe4 <_kill_r>
 800df70:	2b01      	cmp	r3, #1
 800df72:	d00a      	beq.n	800df8a <_raise_r+0x4c>
 800df74:	1c59      	adds	r1, r3, #1
 800df76:	d103      	bne.n	800df80 <_raise_r+0x42>
 800df78:	2316      	movs	r3, #22
 800df7a:	6003      	str	r3, [r0, #0]
 800df7c:	2001      	movs	r0, #1
 800df7e:	e7e7      	b.n	800df50 <_raise_r+0x12>
 800df80:	2100      	movs	r1, #0
 800df82:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800df86:	4620      	mov	r0, r4
 800df88:	4798      	blx	r3
 800df8a:	2000      	movs	r0, #0
 800df8c:	e7e0      	b.n	800df50 <_raise_r+0x12>
	...

0800df90 <raise>:
 800df90:	4b02      	ldr	r3, [pc, #8]	@ (800df9c <raise+0xc>)
 800df92:	4601      	mov	r1, r0
 800df94:	6818      	ldr	r0, [r3, #0]
 800df96:	f7ff bfd2 	b.w	800df3e <_raise_r>
 800df9a:	bf00      	nop
 800df9c:	20000250 	.word	0x20000250

0800dfa0 <_fstat_r>:
 800dfa0:	b538      	push	{r3, r4, r5, lr}
 800dfa2:	4d07      	ldr	r5, [pc, #28]	@ (800dfc0 <_fstat_r+0x20>)
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	4608      	mov	r0, r1
 800dfaa:	4611      	mov	r1, r2
 800dfac:	602b      	str	r3, [r5, #0]
 800dfae:	f7f5 fe56 	bl	8003c5e <_fstat>
 800dfb2:	1c43      	adds	r3, r0, #1
 800dfb4:	d102      	bne.n	800dfbc <_fstat_r+0x1c>
 800dfb6:	682b      	ldr	r3, [r5, #0]
 800dfb8:	b103      	cbz	r3, 800dfbc <_fstat_r+0x1c>
 800dfba:	6023      	str	r3, [r4, #0]
 800dfbc:	bd38      	pop	{r3, r4, r5, pc}
 800dfbe:	bf00      	nop
 800dfc0:	20001a2c 	.word	0x20001a2c

0800dfc4 <_isatty_r>:
 800dfc4:	b538      	push	{r3, r4, r5, lr}
 800dfc6:	4d06      	ldr	r5, [pc, #24]	@ (800dfe0 <_isatty_r+0x1c>)
 800dfc8:	2300      	movs	r3, #0
 800dfca:	4604      	mov	r4, r0
 800dfcc:	4608      	mov	r0, r1
 800dfce:	602b      	str	r3, [r5, #0]
 800dfd0:	f7f5 fe55 	bl	8003c7e <_isatty>
 800dfd4:	1c43      	adds	r3, r0, #1
 800dfd6:	d102      	bne.n	800dfde <_isatty_r+0x1a>
 800dfd8:	682b      	ldr	r3, [r5, #0]
 800dfda:	b103      	cbz	r3, 800dfde <_isatty_r+0x1a>
 800dfdc:	6023      	str	r3, [r4, #0]
 800dfde:	bd38      	pop	{r3, r4, r5, pc}
 800dfe0:	20001a2c 	.word	0x20001a2c

0800dfe4 <_kill_r>:
 800dfe4:	b538      	push	{r3, r4, r5, lr}
 800dfe6:	4d07      	ldr	r5, [pc, #28]	@ (800e004 <_kill_r+0x20>)
 800dfe8:	2300      	movs	r3, #0
 800dfea:	4604      	mov	r4, r0
 800dfec:	4608      	mov	r0, r1
 800dfee:	4611      	mov	r1, r2
 800dff0:	602b      	str	r3, [r5, #0]
 800dff2:	f7f5 fdd4 	bl	8003b9e <_kill>
 800dff6:	1c43      	adds	r3, r0, #1
 800dff8:	d102      	bne.n	800e000 <_kill_r+0x1c>
 800dffa:	682b      	ldr	r3, [r5, #0]
 800dffc:	b103      	cbz	r3, 800e000 <_kill_r+0x1c>
 800dffe:	6023      	str	r3, [r4, #0]
 800e000:	bd38      	pop	{r3, r4, r5, pc}
 800e002:	bf00      	nop
 800e004:	20001a2c 	.word	0x20001a2c

0800e008 <_getpid_r>:
 800e008:	f7f5 bdc1 	b.w	8003b8e <_getpid>

0800e00c <_malloc_usable_size_r>:
 800e00c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e010:	1f18      	subs	r0, r3, #4
 800e012:	2b00      	cmp	r3, #0
 800e014:	bfbc      	itt	lt
 800e016:	580b      	ldrlt	r3, [r1, r0]
 800e018:	18c0      	addlt	r0, r0, r3
 800e01a:	4770      	bx	lr

0800e01c <_init>:
 800e01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e01e:	bf00      	nop
 800e020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e022:	bc08      	pop	{r3}
 800e024:	469e      	mov	lr, r3
 800e026:	4770      	bx	lr

0800e028 <_fini>:
 800e028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e02a:	bf00      	nop
 800e02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e02e:	bc08      	pop	{r3}
 800e030:	469e      	mov	lr, r3
 800e032:	4770      	bx	lr
