
macrolev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08040000  08040000  0000e0e0  2**0
                  CONTENTS
  1 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000be10  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000ac0  0800bfb0  0800bfb0  0000cfb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800ca70  0800ca70  0000e0e0  2**0
                  CONTENTS
  5 .ARM          00000008  0800ca70  0800ca70  0000da70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800ca78  0800ca78  0000e0e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800ca78  0800ca78  0000da78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800ca7c  0800ca7c  0000da7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000e0  20000000  0800ca80  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000db0  200000e0  0800cb60  0000e0e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000e90  0800cb60  0000ee90  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e0e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c616  00000000  00000000  0000e110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f98  00000000  00000000  0002a726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001598  00000000  00000000  0002f6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000111c  00000000  00000000  00030c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb04  00000000  00000000  00031d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cab4  00000000  00000000  00051878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8a26  00000000  00000000  0006e32c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00126d52  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006538  00000000  00000000  00126d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0012d2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e0 	.word	0x200000e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bf98 	.word	0x0800bf98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000e4 	.word	0x200000e4
 80001dc:	0800bf98 	.word	0x0800bf98

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <cdc_task>:
static void load_config(void);
static void reset_config(void);
static void cdc_write_string_chunked(const char* str);
static void cdc_write_flush_wait(void);

void cdc_task(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b098      	sub	sp, #96	@ 0x60
 80005e0:	af00      	add	r7, sp, #0
TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_ready(void) {
  return tud_cdc_n_ready(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_connected(void) {
  return tud_cdc_n_connected(0);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f004 fae6 	bl	8004bb4 <tud_cdc_n_connected>
 80005e8:	4603      	mov	r3, r0
    if (tud_cdc_connected()) {
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d079      	beq.n	80006e2 <cdc_task+0x106>
TU_ATTR_ALWAYS_INLINE static inline void tud_cdc_set_wanted_char(char wanted) {
  tud_cdc_n_set_wanted_char(0, wanted);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_available(void) {
  return tud_cdc_n_available(0);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f004 fb1e 	bl	8004c30 <tud_cdc_n_available>
 80005f4:	4603      	mov	r3, r0
        if (tud_cdc_available()) {
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d076      	beq.n	80006e8 <cdc_task+0x10c>
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80005fe:	2340      	movs	r3, #64	@ 0x40
 8000600:	653b      	str	r3, [r7, #80]	@ 0x50
TU_ATTR_ALWAYS_INLINE static inline int32_t tud_cdc_read_char(void) {
  return tud_cdc_n_read_char(0);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_read(void* buffer, uint32_t bufsize) {
  return tud_cdc_n_read(0, buffer, bufsize);
 8000602:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000604:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000606:	2000      	movs	r0, #0
 8000608:	f004 fb28 	bl	8004c5c <tud_cdc_n_read>
 800060c:	4603      	mov	r3, r0
            uint8_t buf[CFG_TUD_CDC_RX_BUFSIZE];
            uint32_t count = tud_cdc_read(buf, sizeof(buf));
 800060e:	65bb      	str	r3, [r7, #88]	@ 0x58

            for (uint32_t i = 0; i < count; i++) {
 8000610:	2300      	movs	r3, #0
 8000612:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000614:	e05e      	b.n	80006d4 <cdc_task+0xf8>
                char c = buf[i];
 8000616:	1d3a      	adds	r2, r7, #4
 8000618:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800061a:	4413      	add	r3, r2
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

                // Handle backspace
                if (c == '\b' || c == 127) {
 8000622:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000626:	2b08      	cmp	r3, #8
 8000628:	d003      	beq.n	8000632 <cdc_task+0x56>
 800062a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800062e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000630:	d10d      	bne.n	800064e <cdc_task+0x72>
                    if (cmd_index > 0) {
 8000632:	4b2f      	ldr	r3, [pc, #188]	@ (80006f0 <cdc_task+0x114>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d049      	beq.n	80006ce <cdc_task+0xf2>
                        cmd_index--;
 800063a:	4b2d      	ldr	r3, [pc, #180]	@ (80006f0 <cdc_task+0x114>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	3b01      	subs	r3, #1
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b2b      	ldr	r3, [pc, #172]	@ (80006f0 <cdc_task+0x114>)
 8000644:	701a      	strb	r2, [r3, #0]
                        cdc_write_string_chunked("\b \b"); // Erase character
 8000646:	482b      	ldr	r0, [pc, #172]	@ (80006f4 <cdc_task+0x118>)
 8000648:	f000 f85c 	bl	8000704 <cdc_write_string_chunked>
                    if (cmd_index > 0) {
 800064c:	e03f      	b.n	80006ce <cdc_task+0xf2>
                    }
                }
                // Handle enter/newline
                else if (c == '\r' || c == '\n') {
 800064e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000652:	2b0d      	cmp	r3, #13
 8000654:	d003      	beq.n	800065e <cdc_task+0x82>
 8000656:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800065a:	2b0a      	cmp	r3, #10
 800065c:	d116      	bne.n	800068c <cdc_task+0xb0>
                    cdc_write_string_chunked("\r\n");
 800065e:	4826      	ldr	r0, [pc, #152]	@ (80006f8 <cdc_task+0x11c>)
 8000660:	f000 f850 	bl	8000704 <cdc_write_string_chunked>
                    cmd_buffer[cmd_index] = '\0';
 8000664:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <cdc_task+0x114>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <cdc_task+0x120>)
 800066c:	2100      	movs	r1, #0
 800066e:	5499      	strb	r1, [r3, r2]

                    if (cmd_index > 0) {
 8000670:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <cdc_task+0x114>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d005      	beq.n	8000684 <cdc_task+0xa8>
                        process_command(cmd_buffer);
 8000678:	4820      	ldr	r0, [pc, #128]	@ (80006fc <cdc_task+0x120>)
 800067a:	f000 f8af 	bl	80007dc <process_command>
                        cmd_index = 0;
 800067e:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <cdc_task+0x114>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
                    }

                    cdc_write_string_chunked("Ready> ");
 8000684:	481e      	ldr	r0, [pc, #120]	@ (8000700 <cdc_task+0x124>)
 8000686:	f000 f83d 	bl	8000704 <cdc_write_string_chunked>
 800068a:	e020      	b.n	80006ce <cdc_task+0xf2>
                }
                // Handle printable characters
                else if (c >= 32 && c <= 126 && cmd_index < sizeof(cmd_buffer) - 1) {
 800068c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000690:	2b1f      	cmp	r3, #31
 8000692:	d91c      	bls.n	80006ce <cdc_task+0xf2>
 8000694:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000698:	2b7e      	cmp	r3, #126	@ 0x7e
 800069a:	d818      	bhi.n	80006ce <cdc_task+0xf2>
 800069c:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <cdc_task+0x114>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80006a2:	d814      	bhi.n	80006ce <cdc_task+0xf2>
                    cmd_buffer[cmd_index++] = c;
 80006a4:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <cdc_task+0x114>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	1c5a      	adds	r2, r3, #1
 80006aa:	b2d1      	uxtb	r1, r2
 80006ac:	4a10      	ldr	r2, [pc, #64]	@ (80006f0 <cdc_task+0x114>)
 80006ae:	7011      	strb	r1, [r2, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <cdc_task+0x120>)
 80006b8:	5499      	strb	r1, [r3, r2]
 80006ba:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 80006be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80006c0:	2301      	movs	r3, #1
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_char(char ch) {
  return tud_cdc_n_write_char(0, ch);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write(void const* buffer, uint32_t bufsize) {
  return tud_cdc_n_write(0, buffer, bufsize);
 80006c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80006c6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80006c8:	2000      	movs	r0, #0
 80006ca:	f004 faf3 	bl	8004cb4 <tud_cdc_n_write>
            for (uint32_t i = 0; i < count; i++) {
 80006ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80006d0:	3301      	adds	r3, #1
 80006d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80006d4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80006d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80006d8:	429a      	cmp	r2, r3
 80006da:	d39c      	bcc.n	8000616 <cdc_task+0x3a>
                    tud_cdc_write(&c, 1); // Echo character
                }
            }

            cdc_write_flush_wait();
 80006dc:	f000 f85d 	bl	800079a <cdc_write_flush_wait>
        }
    } else {
        // Reset flag when disconnected
        cmd_index = 0;
    }
}
 80006e0:	e002      	b.n	80006e8 <cdc_task+0x10c>
        cmd_index = 0;
 80006e2:	4b03      	ldr	r3, [pc, #12]	@ (80006f0 <cdc_task+0x114>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
}
 80006e8:	bf00      	nop
 80006ea:	3760      	adds	r7, #96	@ 0x60
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000013c 	.word	0x2000013c
 80006f4:	0800bfb0 	.word	0x0800bfb0
 80006f8:	0800bfb4 	.word	0x0800bfb4
 80006fc:	200000fc 	.word	0x200000fc
 8000700:	0800bfb8 	.word	0x0800bfb8

08000704 <cdc_write_string_chunked>:

// Write string in chunks to avoid buffer overflow
static void cdc_write_string_chunked(const char* str) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
    if (!str) return;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d03f      	beq.n	8000792 <cdc_write_string_chunked+0x8e>

    size_t len = strlen(str);
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff fd6e 	bl	80001f4 <strlen>
 8000718:	61b8      	str	r0, [r7, #24]
    size_t sent = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
    const size_t chunk_size = CFG_TUD_CDC_EP_BUFSIZE - 8; // Leave some margin
 800071e:	2338      	movs	r3, #56	@ 0x38
 8000720:	617b      	str	r3, [r7, #20]

    while (sent < len) {
 8000722:	e031      	b.n	8000788 <cdc_write_string_chunked+0x84>
        size_t to_send = (len - sent > chunk_size) ? chunk_size : (len - sent);
 8000724:	69ba      	ldr	r2, [r7, #24]
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	697a      	ldr	r2, [r7, #20]
 800072c:	4293      	cmp	r3, r2
 800072e:	bf28      	it	cs
 8000730:	4613      	movcs	r3, r2
 8000732:	613b      	str	r3, [r7, #16]

        // Wait for space in buffer
        while (tud_cdc_write_available() < to_send) {
 8000734:	e005      	b.n	8000742 <cdc_write_string_chunked+0x3e>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 8000736:	2100      	movs	r1, #0
 8000738:	f04f 30ff 	mov.w	r0, #4294967295
 800073c:	f006 fbc8 	bl	8006ed0 <tud_task_ext>
}
 8000740:	bf00      	nop
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_flush(void) {
  return tud_cdc_n_write_flush(0);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_available(void) {
  return tud_cdc_n_write_available(0);
 8000742:	2000      	movs	r0, #0
 8000744:	f004 fb6c 	bl	8004e20 <tud_cdc_n_write_available>
 8000748:	4602      	mov	r2, r0
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	4293      	cmp	r3, r2
 800074e:	d8f2      	bhi.n	8000736 <cdc_write_string_chunked+0x32>
            tud_task(); // Process USB tasks
        }

        tud_cdc_write(str + sent, to_send);
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	4413      	add	r3, r2
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	60bb      	str	r3, [r7, #8]
  return tud_cdc_n_write(0, buffer, bufsize);
 800075c:	68ba      	ldr	r2, [r7, #8]
 800075e:	68f9      	ldr	r1, [r7, #12]
 8000760:	2000      	movs	r0, #0
 8000762:	f004 faa7 	bl	8004cb4 <tud_cdc_n_write>
        sent += to_send;
 8000766:	69fa      	ldr	r2, [r7, #28]
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	4413      	add	r3, r2
 800076c:	61fb      	str	r3, [r7, #28]
  return tud_cdc_n_write_available(0);
 800076e:	2000      	movs	r0, #0
 8000770:	f004 fb56 	bl	8004e20 <tud_cdc_n_write_available>
 8000774:	4602      	mov	r2, r0

        // Flush if buffer is getting full or we're done
        if (tud_cdc_write_available() < chunk_size || sent >= len) {
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	4293      	cmp	r3, r2
 800077a:	d803      	bhi.n	8000784 <cdc_write_string_chunked+0x80>
 800077c:	69fa      	ldr	r2, [r7, #28]
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	429a      	cmp	r2, r3
 8000782:	d301      	bcc.n	8000788 <cdc_write_string_chunked+0x84>
            cdc_write_flush_wait();
 8000784:	f000 f809 	bl	800079a <cdc_write_flush_wait>
    while (sent < len) {
 8000788:	69fa      	ldr	r2, [r7, #28]
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	429a      	cmp	r2, r3
 800078e:	d3c9      	bcc.n	8000724 <cdc_write_string_chunked+0x20>
 8000790:	e000      	b.n	8000794 <cdc_write_string_chunked+0x90>
    if (!str) return;
 8000792:	bf00      	nop
        }
    }
}
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <cdc_write_flush_wait>:

// Wait for flush to complete
static void cdc_write_flush_wait(void) {
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f004 fabb 	bl	8004d1c <tud_cdc_n_write_flush>
    tud_cdc_write_flush();

    // Wait for data to be sent
    uint32_t timeout = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
    while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 80007aa:	e008      	b.n	80007be <cdc_write_flush_wait+0x24>
  tud_task_ext(UINT32_MAX, false);
 80007ac:	2100      	movs	r1, #0
 80007ae:	f04f 30ff 	mov.w	r0, #4294967295
 80007b2:	f006 fb8d 	bl	8006ed0 <tud_task_ext>
}
 80007b6:	bf00      	nop
        tud_task(); // Process USB tasks
        timeout++;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3301      	adds	r3, #1
 80007bc:	607b      	str	r3, [r7, #4]
  return tud_cdc_n_write_available(0);
 80007be:	2000      	movs	r0, #0
 80007c0:	f004 fb2e 	bl	8004e20 <tud_cdc_n_write_available>
 80007c4:	4603      	mov	r3, r0
    while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 80007c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80007c8:	d804      	bhi.n	80007d4 <cdc_write_flush_wait+0x3a>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d9eb      	bls.n	80007ac <cdc_write_flush_wait+0x12>
    }
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <process_command>:

static void process_command(char* cmd) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08e      	sub	sp, #56	@ 0x38
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
    // Convert to lowercase for case-insensitive commands
    for (int i = 0; cmd[i]; i++) {
 80007e4:	2300      	movs	r3, #0
 80007e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80007e8:	e018      	b.n	800081c <process_command+0x40>
        if (cmd[i] >= 'A' && cmd[i] <= 'Z') {
 80007ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	4413      	add	r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b40      	cmp	r3, #64	@ 0x40
 80007f4:	d90f      	bls.n	8000816 <process_command+0x3a>
 80007f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	4413      	add	r3, r2
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b5a      	cmp	r3, #90	@ 0x5a
 8000800:	d809      	bhi.n	8000816 <process_command+0x3a>
            cmd[i] += 32;
 8000802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4413      	add	r3, r2
 8000808:	781a      	ldrb	r2, [r3, #0]
 800080a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800080c:	6879      	ldr	r1, [r7, #4]
 800080e:	440b      	add	r3, r1
 8000810:	3220      	adds	r2, #32
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	701a      	strb	r2, [r3, #0]
    for (int i = 0; cmd[i]; i++) {
 8000816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000818:	3301      	adds	r3, #1
 800081a:	637b      	str	r3, [r7, #52]	@ 0x34
 800081c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d1e0      	bne.n	80007ea <process_command+0xe>
        }
    }

    char* token = strtok(cmd, " ");
 8000828:	496c      	ldr	r1, [pc, #432]	@ (80009dc <process_command+0x200>)
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f00a fb12 	bl	800ae54 <strtok>
 8000830:	6338      	str	r0, [r7, #48]	@ 0x30
    if (!token) return;
 8000832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000834:	2b00      	cmp	r3, #0
 8000836:	f000 80cd 	beq.w	80009d4 <process_command+0x1f8>

    if (strcmp(token, "help") == 0) {
 800083a:	4969      	ldr	r1, [pc, #420]	@ (80009e0 <process_command+0x204>)
 800083c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800083e:	f7ff fccf 	bl	80001e0 <strcmp>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d102      	bne.n	800084e <process_command+0x72>
        print_help();
 8000848:	f000 f8e6 	bl	8000a18 <print_help>
 800084c:	e0c3      	b.n	80009d6 <process_command+0x1fa>
    }
    else if (strcmp(token, "show") == 0) {
 800084e:	4965      	ldr	r1, [pc, #404]	@ (80009e4 <process_command+0x208>)
 8000850:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000852:	f7ff fcc5 	bl	80001e0 <strcmp>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d102      	bne.n	8000862 <process_command+0x86>
        print_config();
 800085c:	f000 f91c 	bl	8000a98 <print_config>
 8000860:	e0b9      	b.n	80009d6 <process_command+0x1fa>
    }
    else if (strcmp(token, "set") == 0) {
 8000862:	4961      	ldr	r1, [pc, #388]	@ (80009e8 <process_command+0x20c>)
 8000864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000866:	f7ff fcbb 	bl	80001e0 <strcmp>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d118      	bne.n	80008a2 <process_command+0xc6>
        char* param = strtok(NULL, " ");
 8000870:	495a      	ldr	r1, [pc, #360]	@ (80009dc <process_command+0x200>)
 8000872:	2000      	movs	r0, #0
 8000874:	f00a faee 	bl	800ae54 <strtok>
 8000878:	60f8      	str	r0, [r7, #12]
        char* value = strtok(NULL, " ");
 800087a:	4958      	ldr	r1, [pc, #352]	@ (80009dc <process_command+0x200>)
 800087c:	2000      	movs	r0, #0
 800087e:	f00a fae9 	bl	800ae54 <strtok>
 8000882:	60b8      	str	r0, [r7, #8]
        if (param && value) {
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d007      	beq.n	800089a <process_command+0xbe>
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d004      	beq.n	800089a <process_command+0xbe>
            set_config_value(param, value);
 8000890:	68b9      	ldr	r1, [r7, #8]
 8000892:	68f8      	ldr	r0, [r7, #12]
 8000894:	f000 f962 	bl	8000b5c <set_config_value>
 8000898:	e09d      	b.n	80009d6 <process_command+0x1fa>
        } else {
            cdc_write_string_chunked("Usage: set <parameter> <value>\r\n");
 800089a:	4854      	ldr	r0, [pc, #336]	@ (80009ec <process_command+0x210>)
 800089c:	f7ff ff32 	bl	8000704 <cdc_write_string_chunked>
 80008a0:	e099      	b.n	80009d6 <process_command+0x1fa>
        }
    }
    else if (strcmp(token, "keymap") == 0) {
 80008a2:	4953      	ldr	r1, [pc, #332]	@ (80009f0 <process_command+0x214>)
 80008a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80008a6:	f7ff fc9b 	bl	80001e0 <strcmp>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d11c      	bne.n	80008ea <process_command+0x10e>
        char* layer_str = strtok(NULL, " ");
 80008b0:	494a      	ldr	r1, [pc, #296]	@ (80009dc <process_command+0x200>)
 80008b2:	2000      	movs	r0, #0
 80008b4:	f00a face 	bl	800ae54 <strtok>
 80008b8:	6178      	str	r0, [r7, #20]
        if (layer_str) {
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d010      	beq.n	80008e2 <process_command+0x106>
            uint8_t layer = atoi(layer_str);
 80008c0:	6978      	ldr	r0, [r7, #20]
 80008c2:	f00a f8fa 	bl	800aaba <atoi>
 80008c6:	4603      	mov	r3, r0
 80008c8:	74fb      	strb	r3, [r7, #19]
            if (layer < LAYERS_COUNT) {
 80008ca:	7cfb      	ldrb	r3, [r7, #19]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d804      	bhi.n	80008da <process_command+0xfe>
                print_keymap(layer);
 80008d0:	7cfb      	ldrb	r3, [r7, #19]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f9f0 	bl	8000cb8 <print_keymap>
 80008d8:	e07d      	b.n	80009d6 <process_command+0x1fa>
            } else {
                cdc_write_string_chunked("Invalid layer number\r\n");
 80008da:	4846      	ldr	r0, [pc, #280]	@ (80009f4 <process_command+0x218>)
 80008dc:	f7ff ff12 	bl	8000704 <cdc_write_string_chunked>
 80008e0:	e079      	b.n	80009d6 <process_command+0x1fa>
            }
        } else {
            cdc_write_string_chunked("Usage: keymap <layer>\r\n");
 80008e2:	4845      	ldr	r0, [pc, #276]	@ (80009f8 <process_command+0x21c>)
 80008e4:	f7ff ff0e 	bl	8000704 <cdc_write_string_chunked>
 80008e8:	e075      	b.n	80009d6 <process_command+0x1fa>
        }
    }
    else if (strcmp(token, "setkey") == 0) {
 80008ea:	4944      	ldr	r1, [pc, #272]	@ (80009fc <process_command+0x220>)
 80008ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80008ee:	f7ff fc77 	bl	80001e0 <strcmp>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d14b      	bne.n	8000990 <process_command+0x1b4>
        char* layer_str = strtok(NULL, " ");
 80008f8:	4938      	ldr	r1, [pc, #224]	@ (80009dc <process_command+0x200>)
 80008fa:	2000      	movs	r0, #0
 80008fc:	f00a faaa 	bl	800ae54 <strtok>
 8000900:	62f8      	str	r0, [r7, #44]	@ 0x2c
        char* row_str = strtok(NULL, " ");
 8000902:	4936      	ldr	r1, [pc, #216]	@ (80009dc <process_command+0x200>)
 8000904:	2000      	movs	r0, #0
 8000906:	f00a faa5 	bl	800ae54 <strtok>
 800090a:	62b8      	str	r0, [r7, #40]	@ 0x28
        char* col_str = strtok(NULL, " ");
 800090c:	4933      	ldr	r1, [pc, #204]	@ (80009dc <process_command+0x200>)
 800090e:	2000      	movs	r0, #0
 8000910:	f00a faa0 	bl	800ae54 <strtok>
 8000914:	6278      	str	r0, [r7, #36]	@ 0x24
        char* value_str = strtok(NULL, " ");
 8000916:	4931      	ldr	r1, [pc, #196]	@ (80009dc <process_command+0x200>)
 8000918:	2000      	movs	r0, #0
 800091a:	f00a fa9b 	bl	800ae54 <strtok>
 800091e:	6238      	str	r0, [r7, #32]

        if (layer_str && row_str && col_str && value_str) {
 8000920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000922:	2b00      	cmp	r3, #0
 8000924:	d030      	beq.n	8000988 <process_command+0x1ac>
 8000926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000928:	2b00      	cmp	r3, #0
 800092a:	d02d      	beq.n	8000988 <process_command+0x1ac>
 800092c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800092e:	2b00      	cmp	r3, #0
 8000930:	d02a      	beq.n	8000988 <process_command+0x1ac>
 8000932:	6a3b      	ldr	r3, [r7, #32]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d027      	beq.n	8000988 <process_command+0x1ac>
            uint8_t layer = atoi(layer_str);
 8000938:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800093a:	f00a f8be 	bl	800aaba <atoi>
 800093e:	4603      	mov	r3, r0
 8000940:	77fb      	strb	r3, [r7, #31]
            uint8_t row = atoi(row_str);
 8000942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000944:	f00a f8b9 	bl	800aaba <atoi>
 8000948:	4603      	mov	r3, r0
 800094a:	77bb      	strb	r3, [r7, #30]
            uint8_t col = atoi(col_str);
 800094c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800094e:	f00a f8b4 	bl	800aaba <atoi>
 8000952:	4603      	mov	r3, r0
 8000954:	777b      	strb	r3, [r7, #29]
            uint16_t value = atoi(value_str);
 8000956:	6a38      	ldr	r0, [r7, #32]
 8000958:	f00a f8af 	bl	800aaba <atoi>
 800095c:	4603      	mov	r3, r0
 800095e:	837b      	strh	r3, [r7, #26]

            if (layer < LAYERS_COUNT && row < MATRIX_ROWS && col < MATRIX_COLS) {
 8000960:	7ffb      	ldrb	r3, [r7, #31]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d80c      	bhi.n	8000980 <process_command+0x1a4>
 8000966:	7fbb      	ldrb	r3, [r7, #30]
 8000968:	2b03      	cmp	r3, #3
 800096a:	d809      	bhi.n	8000980 <process_command+0x1a4>
 800096c:	7f7b      	ldrb	r3, [r7, #29]
 800096e:	2b03      	cmp	r3, #3
 8000970:	d806      	bhi.n	8000980 <process_command+0x1a4>
                set_keymap_value(layer, row, col, value);
 8000972:	8b7b      	ldrh	r3, [r7, #26]
 8000974:	7f7a      	ldrb	r2, [r7, #29]
 8000976:	7fb9      	ldrb	r1, [r7, #30]
 8000978:	7ff8      	ldrb	r0, [r7, #31]
 800097a:	f000 fa33 	bl	8000de4 <set_keymap_value>
        if (layer_str && row_str && col_str && value_str) {
 800097e:	e02a      	b.n	80009d6 <process_command+0x1fa>
            } else {
                cdc_write_string_chunked("Invalid layer/row/col values\r\n");
 8000980:	481f      	ldr	r0, [pc, #124]	@ (8000a00 <process_command+0x224>)
 8000982:	f7ff febf 	bl	8000704 <cdc_write_string_chunked>
        if (layer_str && row_str && col_str && value_str) {
 8000986:	e026      	b.n	80009d6 <process_command+0x1fa>
            }
        } else {
            cdc_write_string_chunked("Usage: setkey <layer> <row> <col> <value>\r\n");
 8000988:	481e      	ldr	r0, [pc, #120]	@ (8000a04 <process_command+0x228>)
 800098a:	f7ff febb 	bl	8000704 <cdc_write_string_chunked>
 800098e:	e022      	b.n	80009d6 <process_command+0x1fa>
        }
    }
    else if (strcmp(token, "save") == 0) {
 8000990:	491d      	ldr	r1, [pc, #116]	@ (8000a08 <process_command+0x22c>)
 8000992:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000994:	f7ff fc24 	bl	80001e0 <strcmp>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d102      	bne.n	80009a4 <process_command+0x1c8>
        save_config();
 800099e:	f000 fa5f 	bl	8000e60 <save_config>
 80009a2:	e018      	b.n	80009d6 <process_command+0x1fa>
    }
    else if (strcmp(token, "load") == 0) {
 80009a4:	4919      	ldr	r1, [pc, #100]	@ (8000a0c <process_command+0x230>)
 80009a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009a8:	f7ff fc1a 	bl	80001e0 <strcmp>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d102      	bne.n	80009b8 <process_command+0x1dc>
        load_config();
 80009b2:	f000 fa67 	bl	8000e84 <load_config>
 80009b6:	e00e      	b.n	80009d6 <process_command+0x1fa>
    }
    else if (strcmp(token, "reset") == 0) {
 80009b8:	4915      	ldr	r1, [pc, #84]	@ (8000a10 <process_command+0x234>)
 80009ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009bc:	f7ff fc10 	bl	80001e0 <strcmp>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d102      	bne.n	80009cc <process_command+0x1f0>
        reset_config();
 80009c6:	f000 fa69 	bl	8000e9c <reset_config>
 80009ca:	e004      	b.n	80009d6 <process_command+0x1fa>
    }
    else {
        cdc_write_string_chunked("Unknown command. Type 'help' for available commands\r\n");
 80009cc:	4811      	ldr	r0, [pc, #68]	@ (8000a14 <process_command+0x238>)
 80009ce:	f7ff fe99 	bl	8000704 <cdc_write_string_chunked>
 80009d2:	e000      	b.n	80009d6 <process_command+0x1fa>
    if (!token) return;
 80009d4:	bf00      	nop
    }
}
 80009d6:	3738      	adds	r7, #56	@ 0x38
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	0800bfc0 	.word	0x0800bfc0
 80009e0:	0800bfc4 	.word	0x0800bfc4
 80009e4:	0800bfcc 	.word	0x0800bfcc
 80009e8:	0800bfd4 	.word	0x0800bfd4
 80009ec:	0800bfd8 	.word	0x0800bfd8
 80009f0:	0800bffc 	.word	0x0800bffc
 80009f4:	0800c004 	.word	0x0800c004
 80009f8:	0800c01c 	.word	0x0800c01c
 80009fc:	0800c034 	.word	0x0800c034
 8000a00:	0800c03c 	.word	0x0800c03c
 8000a04:	0800c05c 	.word	0x0800c05c
 8000a08:	0800c088 	.word	0x0800c088
 8000a0c:	0800c090 	.word	0x0800c090
 8000a10:	0800c098 	.word	0x0800c098
 8000a14:	0800c0a0 	.word	0x0800c0a0

08000a18 <print_help>:

static void print_help(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
    cdc_write_string_chunked("Available commands:\r\n");
 8000a1c:	4812      	ldr	r0, [pc, #72]	@ (8000a68 <print_help+0x50>)
 8000a1e:	f7ff fe71 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("  help                    - Show this help\r\n");
 8000a22:	4812      	ldr	r0, [pc, #72]	@ (8000a6c <print_help+0x54>)
 8000a24:	f7ff fe6e 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("  show                    - Show current configuration\r\n");
 8000a28:	4811      	ldr	r0, [pc, #68]	@ (8000a70 <print_help+0x58>)
 8000a2a:	f7ff fe6b 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("  set <param> <value>     - Set configuration parameter\r\n");
 8000a2e:	4811      	ldr	r0, [pc, #68]	@ (8000a74 <print_help+0x5c>)
 8000a30:	f7ff fe68 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("  keymap <layer>          - Show keymap for layer\r\n");
 8000a34:	4810      	ldr	r0, [pc, #64]	@ (8000a78 <print_help+0x60>)
 8000a36:	f7ff fe65 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("  setkey <L> <R> <C> <V>  - Set key value (Layer/Row/Col/Value)\r\n");
 8000a3a:	4810      	ldr	r0, [pc, #64]	@ (8000a7c <print_help+0x64>)
 8000a3c:	f7ff fe62 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("  save                    - Save configuration to flash\r\n");
 8000a40:	480f      	ldr	r0, [pc, #60]	@ (8000a80 <print_help+0x68>)
 8000a42:	f7ff fe5f 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("  load                    - Load configuration from flash\r\n");
 8000a46:	480f      	ldr	r0, [pc, #60]	@ (8000a84 <print_help+0x6c>)
 8000a48:	f7ff fe5c 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("  reset                   - Reset to default values\r\n");
 8000a4c:	480e      	ldr	r0, [pc, #56]	@ (8000a88 <print_help+0x70>)
 8000a4e:	f7ff fe59 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("\r\nParameters:\r\n");
 8000a52:	480e      	ldr	r0, [pc, #56]	@ (8000a8c <print_help+0x74>)
 8000a54:	f7ff fe56 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("  reverse_magnet_pole, trigger_offset, reset_threshold,\r\n");
 8000a58:	480d      	ldr	r0, [pc, #52]	@ (8000a90 <print_help+0x78>)
 8000a5a:	f7ff fe53 	bl	8000704 <cdc_write_string_chunked>
    cdc_write_string_chunked("  rapid_trigger_offset, screaming_velocity_trigger, tap_timeout\r\n");
 8000a5e:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <print_help+0x7c>)
 8000a60:	f7ff fe50 	bl	8000704 <cdc_write_string_chunked>
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	0800c0d8 	.word	0x0800c0d8
 8000a6c:	0800c0f0 	.word	0x0800c0f0
 8000a70:	0800c120 	.word	0x0800c120
 8000a74:	0800c15c 	.word	0x0800c15c
 8000a78:	0800c198 	.word	0x0800c198
 8000a7c:	0800c1cc 	.word	0x0800c1cc
 8000a80:	0800c210 	.word	0x0800c210
 8000a84:	0800c24c 	.word	0x0800c24c
 8000a88:	0800c288 	.word	0x0800c288
 8000a8c:	0800c2c0 	.word	0x0800c2c0
 8000a90:	0800c2d0 	.word	0x0800c2d0
 8000a94:	0800c30c 	.word	0x0800c30c

08000a98 <print_config>:

static void print_config(void) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b0a0      	sub	sp, #128	@ 0x80
 8000a9c:	af00      	add	r7, sp, #0
    char buffer[128];

    cdc_write_string_chunked("Current Configuration:\r\n");
 8000a9e:	4826      	ldr	r0, [pc, #152]	@ (8000b38 <print_config+0xa0>)
 8000aa0:	f7ff fe30 	bl	8000704 <cdc_write_string_chunked>

    snprintf(buffer, sizeof(buffer), "  reverse_magnet_pole: %u\r\n", keyboard_user_config.reverse_magnet_pole);
 8000aa4:	4b25      	ldr	r3, [pc, #148]	@ (8000b3c <print_config+0xa4>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4638      	mov	r0, r7
 8000aaa:	4a25      	ldr	r2, [pc, #148]	@ (8000b40 <print_config+0xa8>)
 8000aac:	2180      	movs	r1, #128	@ 0x80
 8000aae:	f00a f94f 	bl	800ad50 <sniprintf>
    cdc_write_string_chunked(buffer);
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fe25 	bl	8000704 <cdc_write_string_chunked>

    snprintf(buffer, sizeof(buffer), "  trigger_offset: %u\r\n", keyboard_user_config.trigger_offset);
 8000aba:	4b20      	ldr	r3, [pc, #128]	@ (8000b3c <print_config+0xa4>)
 8000abc:	785b      	ldrb	r3, [r3, #1]
 8000abe:	4638      	mov	r0, r7
 8000ac0:	4a20      	ldr	r2, [pc, #128]	@ (8000b44 <print_config+0xac>)
 8000ac2:	2180      	movs	r1, #128	@ 0x80
 8000ac4:	f00a f944 	bl	800ad50 <sniprintf>
    cdc_write_string_chunked(buffer);
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fe1a 	bl	8000704 <cdc_write_string_chunked>

    snprintf(buffer, sizeof(buffer), "  reset_threshold: %u\r\n", keyboard_user_config.reset_threshold);
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b3c <print_config+0xa4>)
 8000ad2:	789b      	ldrb	r3, [r3, #2]
 8000ad4:	4638      	mov	r0, r7
 8000ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b48 <print_config+0xb0>)
 8000ad8:	2180      	movs	r1, #128	@ 0x80
 8000ada:	f00a f939 	bl	800ad50 <sniprintf>
    cdc_write_string_chunked(buffer);
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fe0f 	bl	8000704 <cdc_write_string_chunked>

    snprintf(buffer, sizeof(buffer), "  rapid_trigger_offset: %u\r\n", keyboard_user_config.rapid_trigger_offset);
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <print_config+0xa4>)
 8000ae8:	78db      	ldrb	r3, [r3, #3]
 8000aea:	4638      	mov	r0, r7
 8000aec:	4a17      	ldr	r2, [pc, #92]	@ (8000b4c <print_config+0xb4>)
 8000aee:	2180      	movs	r1, #128	@ 0x80
 8000af0:	f00a f92e 	bl	800ad50 <sniprintf>
    cdc_write_string_chunked(buffer);
 8000af4:	463b      	mov	r3, r7
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fe04 	bl	8000704 <cdc_write_string_chunked>

    snprintf(buffer, sizeof(buffer), "  screaming_velocity_trigger: %u\r\n", keyboard_user_config.screaming_velocity_trigger);
 8000afc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <print_config+0xa4>)
 8000afe:	791b      	ldrb	r3, [r3, #4]
 8000b00:	4638      	mov	r0, r7
 8000b02:	4a13      	ldr	r2, [pc, #76]	@ (8000b50 <print_config+0xb8>)
 8000b04:	2180      	movs	r1, #128	@ 0x80
 8000b06:	f00a f923 	bl	800ad50 <sniprintf>
    cdc_write_string_chunked(buffer);
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fdf9 	bl	8000704 <cdc_write_string_chunked>

    snprintf(buffer, sizeof(buffer), "  tap_timeout: %u\r\n", keyboard_user_config.tap_timeout);
 8000b12:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <print_config+0xa4>)
 8000b14:	88db      	ldrh	r3, [r3, #6]
 8000b16:	4638      	mov	r0, r7
 8000b18:	4a0e      	ldr	r2, [pc, #56]	@ (8000b54 <print_config+0xbc>)
 8000b1a:	2180      	movs	r1, #128	@ 0x80
 8000b1c:	f00a f918 	bl	800ad50 <sniprintf>
    cdc_write_string_chunked(buffer);
 8000b20:	463b      	mov	r3, r7
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fdee 	bl	8000704 <cdc_write_string_chunked>

    cdc_write_string_chunked("Use 'keymap <layer>' to view keymaps\r\n");
 8000b28:	480b      	ldr	r0, [pc, #44]	@ (8000b58 <print_config+0xc0>)
 8000b2a:	f7ff fdeb 	bl	8000704 <cdc_write_string_chunked>
}
 8000b2e:	bf00      	nop
 8000b30:	3780      	adds	r7, #128	@ 0x80
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	0800c350 	.word	0x0800c350
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	0800c36c 	.word	0x0800c36c
 8000b44:	0800c388 	.word	0x0800c388
 8000b48:	0800c3a0 	.word	0x0800c3a0
 8000b4c:	0800c3b8 	.word	0x0800c3b8
 8000b50:	0800c3d8 	.word	0x0800c3d8
 8000b54:	0800c3fc 	.word	0x0800c3fc
 8000b58:	0800c410 	.word	0x0800c410

08000b5c <set_config_value>:

static void set_config_value(char* param, char* value) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b094      	sub	sp, #80	@ 0x50
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
    char buffer[64];
    uint32_t val = atoi(value);
 8000b66:	6838      	ldr	r0, [r7, #0]
 8000b68:	f009 ffa7 	bl	800aaba <atoi>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (strcmp(param, "reverse_magnet_pole") == 0) {
 8000b70:	4943      	ldr	r1, [pc, #268]	@ (8000c80 <set_config_value+0x124>)
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff fb34 	bl	80001e0 <strcmp>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d10c      	bne.n	8000b98 <set_config_value+0x3c>
        keyboard_user_config.reverse_magnet_pole = (uint8_t)val;
 8000b7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4b40      	ldr	r3, [pc, #256]	@ (8000c84 <set_config_value+0x128>)
 8000b84:	701a      	strb	r2, [r3, #0]
        snprintf(buffer, sizeof(buffer), "Set reverse_magnet_pole to %u\r\n", keyboard_user_config.reverse_magnet_pole);
 8000b86:	4b3f      	ldr	r3, [pc, #252]	@ (8000c84 <set_config_value+0x128>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	f107 000c 	add.w	r0, r7, #12
 8000b8e:	4a3e      	ldr	r2, [pc, #248]	@ (8000c88 <set_config_value+0x12c>)
 8000b90:	2140      	movs	r1, #64	@ 0x40
 8000b92:	f00a f8dd 	bl	800ad50 <sniprintf>
 8000b96:	e06a      	b.n	8000c6e <set_config_value+0x112>
    }
    else if (strcmp(param, "trigger_offset") == 0) {
 8000b98:	493c      	ldr	r1, [pc, #240]	@ (8000c8c <set_config_value+0x130>)
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fb20 	bl	80001e0 <strcmp>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d10c      	bne.n	8000bc0 <set_config_value+0x64>
        keyboard_user_config.trigger_offset = (uint8_t)val;
 8000ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b36      	ldr	r3, [pc, #216]	@ (8000c84 <set_config_value+0x128>)
 8000bac:	705a      	strb	r2, [r3, #1]
        snprintf(buffer, sizeof(buffer), "Set trigger_offset to %u\r\n", keyboard_user_config.trigger_offset);
 8000bae:	4b35      	ldr	r3, [pc, #212]	@ (8000c84 <set_config_value+0x128>)
 8000bb0:	785b      	ldrb	r3, [r3, #1]
 8000bb2:	f107 000c 	add.w	r0, r7, #12
 8000bb6:	4a36      	ldr	r2, [pc, #216]	@ (8000c90 <set_config_value+0x134>)
 8000bb8:	2140      	movs	r1, #64	@ 0x40
 8000bba:	f00a f8c9 	bl	800ad50 <sniprintf>
 8000bbe:	e056      	b.n	8000c6e <set_config_value+0x112>
    }
    else if (strcmp(param, "reset_threshold") == 0) {
 8000bc0:	4934      	ldr	r1, [pc, #208]	@ (8000c94 <set_config_value+0x138>)
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff fb0c 	bl	80001e0 <strcmp>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10c      	bne.n	8000be8 <set_config_value+0x8c>
        keyboard_user_config.reset_threshold = (uint8_t)val;
 8000bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c84 <set_config_value+0x128>)
 8000bd4:	709a      	strb	r2, [r3, #2]
        snprintf(buffer, sizeof(buffer), "Set reset_threshold to %u\r\n", keyboard_user_config.reset_threshold);
 8000bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8000c84 <set_config_value+0x128>)
 8000bd8:	789b      	ldrb	r3, [r3, #2]
 8000bda:	f107 000c 	add.w	r0, r7, #12
 8000bde:	4a2e      	ldr	r2, [pc, #184]	@ (8000c98 <set_config_value+0x13c>)
 8000be0:	2140      	movs	r1, #64	@ 0x40
 8000be2:	f00a f8b5 	bl	800ad50 <sniprintf>
 8000be6:	e042      	b.n	8000c6e <set_config_value+0x112>
    }
    else if (strcmp(param, "rapid_trigger_offset") == 0) {
 8000be8:	492c      	ldr	r1, [pc, #176]	@ (8000c9c <set_config_value+0x140>)
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff faf8 	bl	80001e0 <strcmp>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d10c      	bne.n	8000c10 <set_config_value+0xb4>
        keyboard_user_config.rapid_trigger_offset = (uint8_t)val;
 8000bf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b22      	ldr	r3, [pc, #136]	@ (8000c84 <set_config_value+0x128>)
 8000bfc:	70da      	strb	r2, [r3, #3]
        snprintf(buffer, sizeof(buffer), "Set rapid_trigger_offset to %u\r\n", keyboard_user_config.rapid_trigger_offset);
 8000bfe:	4b21      	ldr	r3, [pc, #132]	@ (8000c84 <set_config_value+0x128>)
 8000c00:	78db      	ldrb	r3, [r3, #3]
 8000c02:	f107 000c 	add.w	r0, r7, #12
 8000c06:	4a26      	ldr	r2, [pc, #152]	@ (8000ca0 <set_config_value+0x144>)
 8000c08:	2140      	movs	r1, #64	@ 0x40
 8000c0a:	f00a f8a1 	bl	800ad50 <sniprintf>
 8000c0e:	e02e      	b.n	8000c6e <set_config_value+0x112>
    }
    else if (strcmp(param, "screaming_velocity_trigger") == 0) {
 8000c10:	4924      	ldr	r1, [pc, #144]	@ (8000ca4 <set_config_value+0x148>)
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff fae4 	bl	80001e0 <strcmp>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10c      	bne.n	8000c38 <set_config_value+0xdc>
        keyboard_user_config.screaming_velocity_trigger = (uint8_t)val;
 8000c1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <set_config_value+0x128>)
 8000c24:	711a      	strb	r2, [r3, #4]
        snprintf(buffer, sizeof(buffer), "Set screaming_velocity_trigger to %u\r\n", keyboard_user_config.screaming_velocity_trigger);
 8000c26:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <set_config_value+0x128>)
 8000c28:	791b      	ldrb	r3, [r3, #4]
 8000c2a:	f107 000c 	add.w	r0, r7, #12
 8000c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ca8 <set_config_value+0x14c>)
 8000c30:	2140      	movs	r1, #64	@ 0x40
 8000c32:	f00a f88d 	bl	800ad50 <sniprintf>
 8000c36:	e01a      	b.n	8000c6e <set_config_value+0x112>
    }
    else if (strcmp(param, "tap_timeout") == 0) {
 8000c38:	491c      	ldr	r1, [pc, #112]	@ (8000cac <set_config_value+0x150>)
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff fad0 	bl	80001e0 <strcmp>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d10c      	bne.n	8000c60 <set_config_value+0x104>
        keyboard_user_config.tap_timeout = (uint16_t)val;
 8000c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <set_config_value+0x128>)
 8000c4c:	80da      	strh	r2, [r3, #6]
        snprintf(buffer, sizeof(buffer), "Set tap_timeout to %u\r\n", keyboard_user_config.tap_timeout);
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c84 <set_config_value+0x128>)
 8000c50:	88db      	ldrh	r3, [r3, #6]
 8000c52:	f107 000c 	add.w	r0, r7, #12
 8000c56:	4a16      	ldr	r2, [pc, #88]	@ (8000cb0 <set_config_value+0x154>)
 8000c58:	2140      	movs	r1, #64	@ 0x40
 8000c5a:	f00a f879 	bl	800ad50 <sniprintf>
 8000c5e:	e006      	b.n	8000c6e <set_config_value+0x112>
    }
    else {
        snprintf(buffer, sizeof(buffer), "Unknown parameter: %s\r\n", param);
 8000c60:	f107 000c 	add.w	r0, r7, #12
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a13      	ldr	r2, [pc, #76]	@ (8000cb4 <set_config_value+0x158>)
 8000c68:	2140      	movs	r1, #64	@ 0x40
 8000c6a:	f00a f871 	bl	800ad50 <sniprintf>
    }

    cdc_write_string_chunked(buffer);
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fd46 	bl	8000704 <cdc_write_string_chunked>
}
 8000c78:	bf00      	nop
 8000c7a:	3750      	adds	r7, #80	@ 0x50
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	0800c438 	.word	0x0800c438
 8000c84:	20000000 	.word	0x20000000
 8000c88:	0800c44c 	.word	0x0800c44c
 8000c8c:	0800c46c 	.word	0x0800c46c
 8000c90:	0800c47c 	.word	0x0800c47c
 8000c94:	0800c498 	.word	0x0800c498
 8000c98:	0800c4a8 	.word	0x0800c4a8
 8000c9c:	0800c4c4 	.word	0x0800c4c4
 8000ca0:	0800c4dc 	.word	0x0800c4dc
 8000ca4:	0800c500 	.word	0x0800c500
 8000ca8:	0800c51c 	.word	0x0800c51c
 8000cac:	0800c544 	.word	0x0800c544
 8000cb0:	0800c550 	.word	0x0800c550
 8000cb4:	0800c568 	.word	0x0800c568

08000cb8 <print_keymap>:

static void print_keymap(uint8_t layer) {
 8000cb8:	b5b0      	push	{r4, r5, r7, lr}
 8000cba:	b0e6      	sub	sp, #408	@ 0x198
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8000cc4:	f2a3 1391 	subw	r3, r3, #401	@ 0x191
 8000cc8:	701a      	strb	r2, [r3, #0]
    char buffer[128];

    snprintf(buffer, sizeof(buffer), "Keymap for Layer %u:\r\n", layer);
 8000cca:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8000cce:	f2a3 1391 	subw	r3, r3, #401	@ 0x191
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8000cd8:	4a3d      	ldr	r2, [pc, #244]	@ (8000dd0 <print_keymap+0x118>)
 8000cda:	2180      	movs	r1, #128	@ 0x80
 8000cdc:	f00a f838 	bl	800ad50 <sniprintf>
    cdc_write_string_chunked(buffer);
 8000ce0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fd0d 	bl	8000704 <cdc_write_string_chunked>

    // Print keymap row by row with proper chunking
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8000cea:	2300      	movs	r3, #0
 8000cec:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
 8000cf0:	e064      	b.n	8000dbc <print_keymap+0x104>
        // Build the row string first
        char row_buffer[256]; // Large enough for a full row
        int pos = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "Row %u: ", row);
 8000cf8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000cfc:	f107 020c 	add.w	r2, r7, #12
 8000d00:	18d0      	adds	r0, r2, r3
 8000d02:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000d06:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8000d0a:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 8000d0e:	4a31      	ldr	r2, [pc, #196]	@ (8000dd4 <print_keymap+0x11c>)
 8000d10:	f00a f81e 	bl	800ad50 <sniprintf>
 8000d14:	4602      	mov	r2, r0
 8000d16:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000d1a:	4413      	add	r3, r2
 8000d1c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

        for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8000d20:	2300      	movs	r3, #0
 8000d22:	f887 318f 	strb.w	r3, [r7, #399]	@ 0x18f
 8000d26:	e028      	b.n	8000d7a <print_keymap+0xc2>
            pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%4u ",
 8000d28:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000d2c:	f107 020c 	add.w	r2, r7, #12
 8000d30:	18d0      	adds	r0, r2, r3
 8000d32:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000d36:	f5c3 7480 	rsb	r4, r3, #256	@ 0x100
                          keyboard_user_config.keymaps[layer][row][col]);
 8000d3a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8000d3e:	f2a3 1391 	subw	r3, r3, #401	@ 0x191
 8000d42:	7819      	ldrb	r1, [r3, #0]
 8000d44:	f897 2197 	ldrb.w	r2, [r7, #407]	@ 0x197
 8000d48:	f897 318f 	ldrb.w	r3, [r7, #399]	@ 0x18f
 8000d4c:	4d22      	ldr	r5, [pc, #136]	@ (8000dd8 <print_keymap+0x120>)
 8000d4e:	0089      	lsls	r1, r1, #2
 8000d50:	440a      	add	r2, r1
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	3304      	adds	r3, #4
 8000d58:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
            pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "%4u ",
 8000d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8000ddc <print_keymap+0x124>)
 8000d5e:	4621      	mov	r1, r4
 8000d60:	f009 fff6 	bl	800ad50 <sniprintf>
 8000d64:	4602      	mov	r2, r0
 8000d66:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000d6a:	4413      	add	r3, r2
 8000d6c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8000d70:	f897 318f 	ldrb.w	r3, [r7, #399]	@ 0x18f
 8000d74:	3301      	adds	r3, #1
 8000d76:	f887 318f 	strb.w	r3, [r7, #399]	@ 0x18f
 8000d7a:	f897 318f 	ldrb.w	r3, [r7, #399]	@ 0x18f
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d9d2      	bls.n	8000d28 <print_keymap+0x70>
        }

        pos += snprintf(row_buffer + pos, sizeof(row_buffer) - pos, "\r\n");
 8000d82:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000d86:	f107 020c 	add.w	r2, r7, #12
 8000d8a:	18d0      	adds	r0, r2, r3
 8000d8c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000d90:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000d94:	4a12      	ldr	r2, [pc, #72]	@ (8000de0 <print_keymap+0x128>)
 8000d96:	4619      	mov	r1, r3
 8000d98:	f009 ffda 	bl	800ad50 <sniprintf>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000da2:	4413      	add	r3, r2
 8000da4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

        // Send the complete row
        cdc_write_string_chunked(row_buffer);
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fca9 	bl	8000704 <cdc_write_string_chunked>
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8000db2:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 8000db6:	3301      	adds	r3, #1
 8000db8:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
 8000dbc:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d996      	bls.n	8000cf2 <print_keymap+0x3a>
    }
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bdb0      	pop	{r4, r5, r7, pc}
 8000dd0:	0800c580 	.word	0x0800c580
 8000dd4:	0800c598 	.word	0x0800c598
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	0800c5a4 	.word	0x0800c5a4
 8000de0:	0800bfb4 	.word	0x0800bfb4

08000de4 <set_keymap_value>:

static void set_keymap_value(uint8_t layer, uint8_t row, uint8_t col, uint16_t value) {
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b097      	sub	sp, #92	@ 0x5c
 8000de8:	af04      	add	r7, sp, #16
 8000dea:	4604      	mov	r4, r0
 8000dec:	4608      	mov	r0, r1
 8000dee:	4611      	mov	r1, r2
 8000df0:	461a      	mov	r2, r3
 8000df2:	4623      	mov	r3, r4
 8000df4:	71fb      	strb	r3, [r7, #7]
 8000df6:	4603      	mov	r3, r0
 8000df8:	71bb      	strb	r3, [r7, #6]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	717b      	strb	r3, [r7, #5]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	807b      	strh	r3, [r7, #2]
    char buffer[64];

    keyboard_user_config.keymaps[layer][row][col] = value;
 8000e02:	79f9      	ldrb	r1, [r7, #7]
 8000e04:	79ba      	ldrb	r2, [r7, #6]
 8000e06:	797b      	ldrb	r3, [r7, #5]
 8000e08:	4813      	ldr	r0, [pc, #76]	@ (8000e58 <set_keymap_value+0x74>)
 8000e0a:	0089      	lsls	r1, r1, #2
 8000e0c:	440a      	add	r2, r1
 8000e0e:	0092      	lsls	r2, r2, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	3304      	adds	r3, #4
 8000e14:	887a      	ldrh	r2, [r7, #2]
 8000e16:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 8000e1a:	2248      	movs	r2, #72	@ 0x48
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	480e      	ldr	r0, [pc, #56]	@ (8000e58 <set_keymap_value+0x74>)
 8000e20:	f001 f80e 	bl	8001e40 <keyboard_write_config>
    keyboard_init_keys();
 8000e24:	f000 fd52 	bl	80018cc <keyboard_init_keys>

    snprintf(buffer, sizeof(buffer), "Set keymap[%u][%u][%u] to %u\r\n", layer, row, col, value);
 8000e28:	79fc      	ldrb	r4, [r7, #7]
 8000e2a:	79bb      	ldrb	r3, [r7, #6]
 8000e2c:	797a      	ldrb	r2, [r7, #5]
 8000e2e:	8879      	ldrh	r1, [r7, #2]
 8000e30:	f107 0008 	add.w	r0, r7, #8
 8000e34:	9102      	str	r1, [sp, #8]
 8000e36:	9201      	str	r2, [sp, #4]
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	4623      	mov	r3, r4
 8000e3c:	4a07      	ldr	r2, [pc, #28]	@ (8000e5c <set_keymap_value+0x78>)
 8000e3e:	2140      	movs	r1, #64	@ 0x40
 8000e40:	f009 ff86 	bl	800ad50 <sniprintf>
    cdc_write_string_chunked(buffer);
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fc5b 	bl	8000704 <cdc_write_string_chunked>
}
 8000e4e:	bf00      	nop
 8000e50:	374c      	adds	r7, #76	@ 0x4c
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd90      	pop	{r4, r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	0800c5ac 	.word	0x0800c5ac

08000e60 <save_config>:

static void save_config(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
    // TODO: Implement flash save functionality
    // This would typically write the config struct to flash memory
	keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 8000e64:	2248      	movs	r2, #72	@ 0x48
 8000e66:	2100      	movs	r1, #0
 8000e68:	4804      	ldr	r0, [pc, #16]	@ (8000e7c <save_config+0x1c>)
 8000e6a:	f000 ffe9 	bl	8001e40 <keyboard_write_config>
	keyboard_init_keys();
 8000e6e:	f000 fd2d 	bl	80018cc <keyboard_init_keys>
    cdc_write_string_chunked("Configuration saved to flash\r\n");
 8000e72:	4803      	ldr	r0, [pc, #12]	@ (8000e80 <save_config+0x20>)
 8000e74:	f7ff fc46 	bl	8000704 <cdc_write_string_chunked>
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	0800c5cc 	.word	0x0800c5cc

08000e84 <load_config>:

static void load_config(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
    // TODO: Implement flash load functionality
    // This would typically read the config struct from flash memory
	keyboard_read_config();
 8000e88:	f000 ffca 	bl	8001e20 <keyboard_read_config>
    cdc_write_string_chunked("Configuration loaded from flash\r\n");
 8000e8c:	4802      	ldr	r0, [pc, #8]	@ (8000e98 <load_config+0x14>)
 8000e8e:	f7ff fc39 	bl	8000704 <cdc_write_string_chunked>
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	0800c5ec 	.word	0x0800c5ec

08000e9c <reset_config>:

static void reset_config(void) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
    // Reset to default values
	keyboard_write_config(&keyboard_default_user_config, 0, sizeof keyboard_default_user_config);
 8000ea0:	2248      	movs	r2, #72	@ 0x48
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4805      	ldr	r0, [pc, #20]	@ (8000ebc <reset_config+0x20>)
 8000ea6:	f000 ffcb 	bl	8001e40 <keyboard_write_config>
	keyboard_read_config();
 8000eaa:	f000 ffb9 	bl	8001e20 <keyboard_read_config>
	keyboard_init_keys();
 8000eae:	f000 fd0d 	bl	80018cc <keyboard_init_keys>

    cdc_write_string_chunked("Configuration reset to defaults\r\n");
 8000eb2:	4803      	ldr	r0, [pc, #12]	@ (8000ec0 <reset_config+0x24>)
 8000eb4:	f7ff fc26 	bl	8000704 <cdc_write_string_chunked>
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	0800c6c4 	.word	0x0800c6c4
 8000ec0:	0800c610 	.word	0x0800c610

08000ec4 <tud_cdc_line_state_cb>:
// Getter function for other modules to access configuration
struct user_config* get_user_config(void) {
    return &keyboard_user_config;
}

void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	71bb      	strb	r3, [r7, #6]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	717b      	strb	r3, [r7, #5]
    (void)itf;

    // Check if terminal is connecting (DTR asserted)
    if (dtr) {
 8000ed6:	79bb      	ldrb	r3, [r7, #6]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d015      	beq.n	8000f08 <tud_cdc_line_state_cb+0x44>
        // Give a small delay to ensure connection is stable
        for (volatile int i = 0; i < 10000; i++);
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	e002      	b.n	8000ee8 <tud_cdc_line_state_cb+0x24>
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	ddf7      	ble.n	8000ee2 <tud_cdc_line_state_cb+0x1e>

        cdc_write_string_chunked("\r\n=== HE16 Configuration Interface ===\r\n");
 8000ef2:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <tud_cdc_line_state_cb+0x4c>)
 8000ef4:	f7ff fc06 	bl	8000704 <cdc_write_string_chunked>
        cdc_write_string_chunked("Type 'help' for available commands\r\n");
 8000ef8:	4806      	ldr	r0, [pc, #24]	@ (8000f14 <tud_cdc_line_state_cb+0x50>)
 8000efa:	f7ff fc03 	bl	8000704 <cdc_write_string_chunked>
        cdc_write_string_chunked("Ready> ");
 8000efe:	4806      	ldr	r0, [pc, #24]	@ (8000f18 <tud_cdc_line_state_cb+0x54>)
 8000f00:	f7ff fc00 	bl	8000704 <cdc_write_string_chunked>
        cdc_write_flush_wait();
 8000f04:	f7ff fc49 	bl	800079a <cdc_write_flush_wait>
    }
}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	0800c634 	.word	0x0800c634
 8000f14:	0800c660 	.word	0x0800c660
 8000f18:	0800bfb8 	.word	0x0800bfb8

08000f1c <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf) {
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
    (void)itf;
    // Data handling is done in cdc_task()
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <hid_task>:
static uint8_t keycodes[6] = {0};
// static uint8_t is_screaming = 0;
static uint8_t consumer_report = 0;


void hid_task() {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0

  if ((should_send_consumer_report || should_send_keyboard_report) && tud_hid_ready()) {
 8000f3a:	4b21      	ldr	r3, [pc, #132]	@ (8000fc0 <hid_task+0x8c>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d103      	bne.n	8000f4a <hid_task+0x16>
 8000f42:	4b20      	ldr	r3, [pc, #128]	@ (8000fc4 <hid_task+0x90>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d035      	beq.n	8000fb6 <hid_task+0x82>

//--------------------------------------------------------------------+
// Application API (Single Port)
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_ready(void) {
  return tud_hid_n_ready(0);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f004 fb1e 	bl	800558c <tud_hid_n_ready>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d02f      	beq.n	8000fb6 <hid_task+0x82>
    if (tud_suspended()) {
 8000f56:	f005 fe35 	bl	8006bc4 <tud_suspended>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d002      	beq.n	8000f66 <hid_task+0x32>
      tud_remote_wakeup();
 8000f60:	f005 fe44 	bl	8006bec <tud_remote_wakeup>
        should_send_keyboard_report = 0;
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
      }
    }
  }
}
 8000f64:	e027      	b.n	8000fb6 <hid_task+0x82>
      if (should_send_consumer_report) {
 8000f66:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <hid_task+0x8c>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00f      	beq.n	8000f8e <hid_task+0x5a>
        should_send_consumer_report = 0;
 8000f6e:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <hid_task+0x8c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	2302      	movs	r3, #2
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <hid_task+0x94>)
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	80fb      	strh	r3, [r7, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tud_hid_get_protocol(void) {
  return tud_hid_n_get_protocol(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_report(uint8_t report_id, void const* report, uint16_t len) {
  return tud_hid_n_report(0, report_id, report, len);
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	7bf9      	ldrb	r1, [r7, #15]
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	2000      	movs	r0, #0
 8000f88:	f004 fb42 	bl	8005610 <tud_hid_n_report>
 8000f8c:	e013      	b.n	8000fb6 <hid_task+0x82>
      } else if (should_send_keyboard_report) {
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <hid_task+0x90>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00f      	beq.n	8000fb6 <hid_task+0x82>
        should_send_keyboard_report = 0;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <hid_task+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <hid_task+0x98>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	717a      	strb	r2, [r7, #5]
 8000fa4:	713b      	strb	r3, [r7, #4]
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <hid_task+0x9c>)
 8000fa8:	603b      	str	r3, [r7, #0]
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
  return tud_hid_n_keyboard_report(0, report_id, modifier, keycode);
 8000faa:	793a      	ldrb	r2, [r7, #4]
 8000fac:	7979      	ldrb	r1, [r7, #5]
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f004 fbb3 	bl	800571c <tud_hid_n_keyboard_report>
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000013d 	.word	0x2000013d
 8000fc4:	2000013e 	.word	0x2000013e
 8000fc8:	20000146 	.word	0x20000146
 8000fcc:	2000013f 	.word	0x2000013f
 8000fd0:	20000140 	.word	0x20000140

08000fd4 <hid_press_key>:

void hid_press_key(struct key *key, uint8_t layer) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 8000fe0:	78fa      	ldrb	r2, [r7, #3]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	3305      	adds	r3, #5
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d038      	beq.n	8001066 <hid_press_key+0x92>
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	dc45      	bgt.n	8001084 <hid_press_key+0xb0>
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d014      	beq.n	8001026 <hid_press_key+0x52>
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d141      	bne.n	8001084 <hid_press_key+0xb0>
  case KEY_TYPE_MODIFIER:
    modifiers |= key->layers[layer].value;
 8001000:	78fa      	ldrb	r2, [r7, #3]
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	440b      	add	r3, r1
 800100c:	88db      	ldrh	r3, [r3, #6]
 800100e:	b29b      	uxth	r3, r3
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b20      	ldr	r3, [pc, #128]	@ (8001094 <hid_press_key+0xc0>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	4313      	orrs	r3, r2
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b1e      	ldr	r3, [pc, #120]	@ (8001094 <hid_press_key+0xc0>)
 800101c:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 800101e:	4b1e      	ldr	r3, [pc, #120]	@ (8001098 <hid_press_key+0xc4>)
 8001020:	2201      	movs	r2, #1
 8001022:	701a      	strb	r2, [r3, #0]
    break;
 8001024:	e02f      	b.n	8001086 <hid_press_key+0xb2>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 8001026:	2300      	movs	r3, #0
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	e018      	b.n	800105e <hid_press_key+0x8a>
      if (keycodes[i] == 0) {
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	4a1b      	ldr	r2, [pc, #108]	@ (800109c <hid_press_key+0xc8>)
 8001030:	5cd3      	ldrb	r3, [r2, r3]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d110      	bne.n	8001058 <hid_press_key+0x84>
        keycodes[i] = key->layers[layer].value;
 8001036:	78fa      	ldrb	r2, [r7, #3]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	440b      	add	r3, r1
 8001042:	88db      	ldrh	r3, [r3, #6]
 8001044:	b29a      	uxth	r2, r3
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	b2d1      	uxtb	r1, r2
 800104a:	4a14      	ldr	r2, [pc, #80]	@ (800109c <hid_press_key+0xc8>)
 800104c:	54d1      	strb	r1, [r2, r3]
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // } else if (i == 0 && key->state.velocity > keyboard_user_config.screaming_velocity_trigger) {
        //   is_screaming = 1;
        //   modifiers |= get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 800104e:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <hid_press_key+0xc4>)
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
        break;
 8001054:	bf00      	nop
      }
    }
    break;
 8001056:	e016      	b.n	8001086 <hid_press_key+0xb2>
    for (uint8_t i = 0; i < 6; i++) {
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	3301      	adds	r3, #1
 800105c:	73fb      	strb	r3, [r7, #15]
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	2b05      	cmp	r3, #5
 8001062:	d9e3      	bls.n	800102c <hid_press_key+0x58>
    break;
 8001064:	e00f      	b.n	8001086 <hid_press_key+0xb2>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = key->layers[layer].value;
 8001066:	78fa      	ldrb	r2, [r7, #3]
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	440b      	add	r3, r1
 8001072:	88db      	ldrh	r3, [r3, #6]
 8001074:	b29b      	uxth	r3, r3
 8001076:	b2da      	uxtb	r2, r3
 8001078:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <hid_press_key+0xcc>)
 800107a:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <hid_press_key+0xd0>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
    break;
 8001082:	e000      	b.n	8001086 <hid_press_key+0xb2>

  default:
    break;
 8001084:	bf00      	nop
  }
}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	2000013f 	.word	0x2000013f
 8001098:	2000013e 	.word	0x2000013e
 800109c:	20000140 	.word	0x20000140
 80010a0:	20000146 	.word	0x20000146
 80010a4:	2000013d 	.word	0x2000013d

080010a8 <hid_release_key>:

void hid_release_key(struct key *key, uint8_t layer) {
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 80010b4:	78fa      	ldrb	r2, [r7, #3]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	440b      	add	r3, r1
 80010c0:	3305      	adds	r3, #5
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d03d      	beq.n	8001144 <hid_release_key+0x9c>
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	dc42      	bgt.n	8001152 <hid_release_key+0xaa>
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d018      	beq.n	8001102 <hid_release_key+0x5a>
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d13e      	bne.n	8001152 <hid_release_key+0xaa>
  case KEY_TYPE_MODIFIER:
    modifiers &= ~key->layers[layer].value;
 80010d4:	78fa      	ldrb	r2, [r7, #3]
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	440b      	add	r3, r1
 80010e0:	88db      	ldrh	r3, [r3, #6]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	b25a      	sxtb	r2, r3
 80010ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <hid_release_key+0xb8>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	4013      	ands	r3, r2
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <hid_release_key+0xb8>)
 80010f8:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80010fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001164 <hid_release_key+0xbc>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
    break;
 8001100:	e028      	b.n	8001154 <hid_release_key+0xac>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 8001102:	2300      	movs	r3, #0
 8001104:	73fb      	strb	r3, [r7, #15]
 8001106:	e019      	b.n	800113c <hid_release_key+0x94>
      if (keycodes[i] == key->layers[layer].value) {
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	4a17      	ldr	r2, [pc, #92]	@ (8001168 <hid_release_key+0xc0>)
 800110c:	5cd3      	ldrb	r3, [r2, r3]
 800110e:	4618      	mov	r0, r3
 8001110:	78fa      	ldrb	r2, [r7, #3]
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4413      	add	r3, r2
 800111a:	440b      	add	r3, r1
 800111c:	88db      	ldrh	r3, [r3, #6]
 800111e:	b29b      	uxth	r3, r3
 8001120:	4298      	cmp	r0, r3
 8001122:	d108      	bne.n	8001136 <hid_release_key+0x8e>
        keycodes[i] = 0;
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	4a10      	ldr	r2, [pc, #64]	@ (8001168 <hid_release_key+0xc0>)
 8001128:	2100      	movs	r1, #0
 800112a:	54d1      	strb	r1, [r2, r3]
        // if (is_screaming) {
        //   is_screaming = 0;
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 800112c:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <hid_release_key+0xbc>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
        break;
 8001132:	bf00      	nop
      }
    }
    break;
 8001134:	e00e      	b.n	8001154 <hid_release_key+0xac>
    for (uint8_t i = 0; i < 6; i++) {
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	3301      	adds	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b05      	cmp	r3, #5
 8001140:	d9e2      	bls.n	8001108 <hid_release_key+0x60>
    break;
 8001142:	e007      	b.n	8001154 <hid_release_key+0xac>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = 0;
 8001144:	4b09      	ldr	r3, [pc, #36]	@ (800116c <hid_release_key+0xc4>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 800114a:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <hid_release_key+0xc8>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
    break;
 8001150:	e000      	b.n	8001154 <hid_release_key+0xac>

  default:
    break;
 8001152:	bf00      	nop
  }
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	2000013f 	.word	0x2000013f
 8001164:	2000013e 	.word	0x2000013e
 8001168:	20000140 	.word	0x20000140
 800116c:	20000146 	.word	0x20000146
 8001170:	2000013d 	.word	0x2000013d

08001174 <tud_hid_set_protocol_cb>:
// Invoked when received SET_PROTOCOL request
// protocol is either HID_PROTOCOL_BOOT (0) or HID_PROTOCOL_REPORT (1)

/// CALLBACKS

void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	460a      	mov	r2, r1
 800117e:	71fb      	strb	r3, [r7, #7]
 8001180:	4613      	mov	r3, r2
 8001182:	71bb      	strb	r3, [r7, #6]
  (void)instance;
  (void)protocol;
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <tud_hid_report_complete_cb>:


void tud_hid_report_complete_cb(uint8_t instance, uint8_t const *report, uint16_t len) {
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	4613      	mov	r3, r2
 800119e:	80bb      	strh	r3, [r7, #4]
  (void)instance;
  (void)len;

}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <tud_hid_get_report_cb>:
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t* buffer, uint16_t reqlen)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
 80011b8:	460b      	mov	r3, r1
 80011ba:	71bb      	strb	r3, [r7, #6]
 80011bc:	4613      	mov	r3, r2
 80011be:	717b      	strb	r3, [r7, #5]
  (void) instance;
  (void) report_type;
  (void) buffer;
  (void) reqlen;

  return 0;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const* buffer, uint16_t bufsize)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	460b      	mov	r3, r1
 80011dc:	71bb      	strb	r3, [r7, #6]
 80011de:	4613      	mov	r3, r2
 80011e0:	717b      	strb	r3, [r7, #5]
  (void) instance;
  (void) report_type;
  (void) buffer;
  (void) bufsize;

}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <get_bitmask_for_modifier>:

uint32_t keyboard_last_cycle_duration = 0;

static uint8_t key_triggered = 0;

uint8_t get_bitmask_for_modifier(uint8_t keycode) {
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  switch (keycode) {
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	3be0      	subs	r3, #224	@ 0xe0
 80011fe:	2b07      	cmp	r3, #7
 8001200:	d822      	bhi.n	8001248 <get_bitmask_for_modifier+0x58>
 8001202:	a201      	add	r2, pc, #4	@ (adr r2, 8001208 <get_bitmask_for_modifier+0x18>)
 8001204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001208:	08001229 	.word	0x08001229
 800120c:	0800122d 	.word	0x0800122d
 8001210:	08001231 	.word	0x08001231
 8001214:	08001235 	.word	0x08001235
 8001218:	08001239 	.word	0x08001239
 800121c:	0800123d 	.word	0x0800123d
 8001220:	08001241 	.word	0x08001241
 8001224:	08001245 	.word	0x08001245
  case HID_KEY_CONTROL_LEFT:
    return 0b00000001;
 8001228:	2301      	movs	r3, #1
 800122a:	e00e      	b.n	800124a <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_LEFT:
    return 0b00000010;
 800122c:	2302      	movs	r3, #2
 800122e:	e00c      	b.n	800124a <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_LEFT:
    return 0b00000100;
 8001230:	2304      	movs	r3, #4
 8001232:	e00a      	b.n	800124a <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_LEFT:
    return 0b00001000;
 8001234:	2308      	movs	r3, #8
 8001236:	e008      	b.n	800124a <get_bitmask_for_modifier+0x5a>
  case HID_KEY_CONTROL_RIGHT:
    return 0b00010000;
 8001238:	2310      	movs	r3, #16
 800123a:	e006      	b.n	800124a <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_RIGHT:
    return 0b00100000;
 800123c:	2320      	movs	r3, #32
 800123e:	e004      	b.n	800124a <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_RIGHT:
    return 0b01000000;
 8001240:	2340      	movs	r3, #64	@ 0x40
 8001242:	e002      	b.n	800124a <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_RIGHT:
    return 0b10000000;
 8001244:	2380      	movs	r3, #128	@ 0x80
 8001246:	e000      	b.n	800124a <get_bitmask_for_modifier+0x5a>
  default:
    return 0b00000000;
 8001248:	2300      	movs	r3, #0
  }
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop

08001258 <get_usage_consumer_control>:

uint16_t get_usage_consumer_control(uint16_t value) {
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	80fb      	strh	r3, [r7, #6]
  if (value > 0xFF) {
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	2bff      	cmp	r3, #255	@ 0xff
 8001266:	d904      	bls.n	8001272 <get_usage_consumer_control+0x1a>
    return value & 0b0111111111111111;
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800126e:	b29b      	uxth	r3, r3
 8001270:	e000      	b.n	8001274 <get_usage_consumer_control+0x1c>
  } else {
    return 0;
 8001272:	2300      	movs	r3, #0
  }
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <init_key>:

void init_key(uint8_t adc_channel, uint8_t amux_channel, uint8_t row, uint8_t column) {
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	4604      	mov	r4, r0
 8001288:	4608      	mov	r0, r1
 800128a:	4611      	mov	r1, r2
 800128c:	461a      	mov	r2, r3
 800128e:	4623      	mov	r3, r4
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	4603      	mov	r3, r0
 8001294:	71bb      	strb	r3, [r7, #6]
 8001296:	460b      	mov	r3, r1
 8001298:	717b      	strb	r3, [r7, #5]
 800129a:	4613      	mov	r3, r2
 800129c:	713b      	strb	r3, [r7, #4]

  struct key *key = &keyboard_keys[adc_channel][amux_channel];
 800129e:	79f9      	ldrb	r1, [r7, #7]
 80012a0:	79ba      	ldrb	r2, [r7, #6]
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	1a9b      	subs	r3, r3, r2
 80012ac:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80012b0:	fb01 f202 	mul.w	r2, r1, r2
 80012b4:	4413      	add	r3, r2
 80012b6:	4a61      	ldr	r2, [pc, #388]	@ (800143c <init_key+0x1bc>)
 80012b8:	4413      	add	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]

  key->is_enabled = 1;
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	2201      	movs	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
  key->is_idle = 0;
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	2200      	movs	r2, #0
 80012c6:	711a      	strb	r2, [r3, #4]
  key->row = row;
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	797a      	ldrb	r2, [r7, #5]
 80012cc:	705a      	strb	r2, [r3, #1]
  key->column = column;
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	793a      	ldrb	r2, [r7, #4]
 80012d2:	709a      	strb	r2, [r3, #2]

  key->calibration.cycles_count = 0;
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	2200      	movs	r2, #0
 80012d8:	72da      	strb	r2, [r3, #11]
 80012da:	2200      	movs	r2, #0
 80012dc:	731a      	strb	r2, [r3, #12]
  key->calibration.idle_value = IDLE_VALUE_APPROX;
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f042 0208 	orr.w	r2, r2, #8
 80012e6:	735a      	strb	r2, [r3, #13]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f042 0207 	orr.w	r2, r2, #7
 80012ee:	739a      	strb	r2, [r3, #14]
  key->calibration.max_distance = MAX_DISTANCE_APPROX;
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f062 020b 	orn	r2, r2, #11
 80012f8:	73da      	strb	r2, [r3, #15]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f042 0201 	orr.w	r2, r2, #1
 8001300:	741a      	strb	r2, [r3, #16]

  key->actuation.status = STATUS_RESET;
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	2203      	movs	r2, #3
 8001306:	779a      	strb	r2, [r3, #30]
  key->actuation.trigger_offset = keyboard_user_config.trigger_offset;
 8001308:	4b4d      	ldr	r3, [pc, #308]	@ (8001440 <init_key+0x1c0>)
 800130a:	785a      	ldrb	r2, [r3, #1]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	f883 2020 	strb.w	r2, [r3, #32]
  key->actuation.reset_offset = keyboard_user_config.trigger_offset - keyboard_user_config.reset_threshold;
 8001312:	4b4b      	ldr	r3, [pc, #300]	@ (8001440 <init_key+0x1c0>)
 8001314:	785a      	ldrb	r2, [r3, #1]
 8001316:	4b4a      	ldr	r3, [pc, #296]	@ (8001440 <init_key+0x1c0>)
 8001318:	789b      	ldrb	r3, [r3, #2]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	b2da      	uxtb	r2, r3
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	77da      	strb	r2, [r3, #31]
  key->actuation.rapid_trigger_offset = keyboard_user_config.rapid_trigger_offset;
 8001322:	4b47      	ldr	r3, [pc, #284]	@ (8001440 <init_key+0x1c0>)
 8001324:	78da      	ldrb	r2, [r3, #3]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  key->actuation.is_continuous_rapid_trigger_enabled = 0;
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8001334:	2300      	movs	r3, #0
 8001336:	75fb      	strb	r3, [r7, #23]
 8001338:	e078      	b.n	800142c <init_key+0x1ac>
    if (keyboard_user_config.keymaps[i][row][column] != ____) {
 800133a:	7df9      	ldrb	r1, [r7, #23]
 800133c:	797a      	ldrb	r2, [r7, #5]
 800133e:	793b      	ldrb	r3, [r7, #4]
 8001340:	483f      	ldr	r0, [pc, #252]	@ (8001440 <init_key+0x1c0>)
 8001342:	0089      	lsls	r1, r1, #2
 8001344:	440a      	add	r2, r1
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4413      	add	r3, r2
 800134a:	3304      	adds	r3, #4
 800134c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d068      	beq.n	8001426 <init_key+0x1a6>
      uint16_t usage_consumer_control = get_usage_consumer_control(keyboard_user_config.keymaps[i][row][column]);
 8001354:	7df9      	ldrb	r1, [r7, #23]
 8001356:	797a      	ldrb	r2, [r7, #5]
 8001358:	793b      	ldrb	r3, [r7, #4]
 800135a:	4839      	ldr	r0, [pc, #228]	@ (8001440 <init_key+0x1c0>)
 800135c:	0089      	lsls	r1, r1, #2
 800135e:	440a      	add	r2, r1
 8001360:	0092      	lsls	r2, r2, #2
 8001362:	4413      	add	r3, r2
 8001364:	3304      	adds	r3, #4
 8001366:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ff74 	bl	8001258 <get_usage_consumer_control>
 8001370:	4603      	mov	r3, r0
 8001372:	81fb      	strh	r3, [r7, #14]
      if (usage_consumer_control) {
 8001374:	89fb      	ldrh	r3, [r7, #14]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d011      	beq.n	800139e <init_key+0x11e>
        key->layers[i].type = KEY_TYPE_CONSUMER_CONTROL;
 800137a:	7dfa      	ldrb	r2, [r7, #23]
 800137c:	6939      	ldr	r1, [r7, #16]
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	440b      	add	r3, r1
 8001386:	3305      	adds	r3, #5
 8001388:	2203      	movs	r2, #3
 800138a:	701a      	strb	r2, [r3, #0]
        key->layers[i].value = usage_consumer_control;
 800138c:	7dfa      	ldrb	r2, [r7, #23]
 800138e:	6939      	ldr	r1, [r7, #16]
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	440b      	add	r3, r1
 8001398:	89fa      	ldrh	r2, [r7, #14]
 800139a:	80da      	strh	r2, [r3, #6]
 800139c:	e043      	b.n	8001426 <init_key+0x1a6>
      } else {
        uint8_t bitmask = get_bitmask_for_modifier(keyboard_user_config.keymaps[i][row][column]);
 800139e:	7df9      	ldrb	r1, [r7, #23]
 80013a0:	797a      	ldrb	r2, [r7, #5]
 80013a2:	793b      	ldrb	r3, [r7, #4]
 80013a4:	4826      	ldr	r0, [pc, #152]	@ (8001440 <init_key+0x1c0>)
 80013a6:	0089      	lsls	r1, r1, #2
 80013a8:	440a      	add	r2, r1
 80013aa:	0092      	lsls	r2, r2, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	3304      	adds	r3, #4
 80013b0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff1a 	bl	80011f0 <get_bitmask_for_modifier>
 80013bc:	4603      	mov	r3, r0
 80013be:	737b      	strb	r3, [r7, #13]
        if (bitmask) {
 80013c0:	7b7b      	ldrb	r3, [r7, #13]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d013      	beq.n	80013ee <init_key+0x16e>
          key->layers[i].type = KEY_TYPE_MODIFIER;
 80013c6:	7dfa      	ldrb	r2, [r7, #23]
 80013c8:	6939      	ldr	r1, [r7, #16]
 80013ca:	4613      	mov	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4413      	add	r3, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	3305      	adds	r3, #5
 80013d4:	2202      	movs	r2, #2
 80013d6:	701a      	strb	r2, [r3, #0]
          key->layers[i].value = bitmask;
 80013d8:	7dfa      	ldrb	r2, [r7, #23]
 80013da:	7b7b      	ldrb	r3, [r7, #13]
 80013dc:	b298      	uxth	r0, r3
 80013de:	6939      	ldr	r1, [r7, #16]
 80013e0:	4613      	mov	r3, r2
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4413      	add	r3, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	4602      	mov	r2, r0
 80013ea:	80da      	strh	r2, [r3, #6]
 80013ec:	e01b      	b.n	8001426 <init_key+0x1a6>
        } else {
          key->layers[i].type = KEY_TYPE_NORMAL;
 80013ee:	7dfa      	ldrb	r2, [r7, #23]
 80013f0:	6939      	ldr	r1, [r7, #16]
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	3305      	adds	r3, #5
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
          key->layers[i].value = keyboard_user_config.keymaps[i][row][column];
 8001400:	7df8      	ldrb	r0, [r7, #23]
 8001402:	7979      	ldrb	r1, [r7, #5]
 8001404:	793b      	ldrb	r3, [r7, #4]
 8001406:	7dfa      	ldrb	r2, [r7, #23]
 8001408:	4c0d      	ldr	r4, [pc, #52]	@ (8001440 <init_key+0x1c0>)
 800140a:	0080      	lsls	r0, r0, #2
 800140c:	4401      	add	r1, r0
 800140e:	0089      	lsls	r1, r1, #2
 8001410:	440b      	add	r3, r1
 8001412:	3304      	adds	r3, #4
 8001414:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
 8001418:	6939      	ldr	r1, [r7, #16]
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	440b      	add	r3, r1
 8001422:	4602      	mov	r2, r0
 8001424:	80da      	strh	r2, [r3, #6]
  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8001426:	7dfb      	ldrb	r3, [r7, #23]
 8001428:	3301      	adds	r3, #1
 800142a:	75fb      	strb	r3, [r7, #23]
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d983      	bls.n	800133a <init_key+0xba>
        }
      }
    }
  }
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	371c      	adds	r7, #28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd90      	pop	{r4, r7, pc}
 800143c:	20000148 	.word	0x20000148
 8001440:	20000000 	.word	0x20000000

08001444 <update_key_state>:

uint8_t update_key_state(struct key *key) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  struct state state;

  // Get a reading
  state.value = keyboard_user_config.reverse_magnet_pole ? 4095 - keyboard_read_adc() : keyboard_read_adc();
 800144c:	4ba5      	ldr	r3, [pc, #660]	@ (80016e4 <update_key_state+0x2a0>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d007      	beq.n	8001464 <update_key_state+0x20>
 8001454:	f000 fd7a 	bl	8001f4c <keyboard_read_adc>
 8001458:	4603      	mov	r3, r0
 800145a:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 800145e:	330f      	adds	r3, #15
 8001460:	b29b      	uxth	r3, r3
 8001462:	e002      	b.n	800146a <update_key_state+0x26>
 8001464:	f000 fd72 	bl	8001f4c <keyboard_read_adc>
 8001468:	4603      	mov	r3, r0
 800146a:	813b      	strh	r3, [r7, #8]

  if (key->calibration.cycles_count < CALIBRATION_CYCLES) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8001472:	b29b      	uxth	r3, r3
 8001474:	2b13      	cmp	r3, #19
 8001476:	d82f      	bhi.n	80014d8 <update_key_state+0x94>
    // Calibrate idle value
    float delta = 0.6;
 8001478:	4b9b      	ldr	r3, [pc, #620]	@ (80016e8 <update_key_state+0x2a4>)
 800147a:	617b      	str	r3, [r7, #20]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 800147c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001480:	edd7 7a05 	vldr	s15, [r7, #20]
 8001484:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001488:	893b      	ldrh	r3, [r7, #8]
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001492:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800149c:	b29b      	uxth	r3, r3
 800149e:	ee07 3a90 	vmov	s15, r3
 80014a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80014aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014b6:	ee17 3a90 	vmov	r3, s15
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f8a3 200d 	strh.w	r2, [r3, #13]
    key->calibration.cycles_count++;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	3301      	adds	r3, #1
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f8a3 200b 	strh.w	r2, [r3, #11]

    return 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e101      	b.n	80016dc <update_key_state+0x298>
  }

  // Calibrate idle value
  if (state.value > key->calibration.idle_value) {
 80014d8:	893a      	ldrh	r2, [r7, #8]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d929      	bls.n	800153a <update_key_state+0xf6>
    // opti possible sur float
    float delta = 0.8;
 80014e6:	4b81      	ldr	r3, [pc, #516]	@ (80016ec <update_key_state+0x2a8>)
 80014e8:	61fb      	str	r3, [r7, #28]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 80014ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80014f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014f6:	893b      	ldrh	r3, [r7, #8]
 80014f8:	ee07 3a90 	vmov	s15, r3
 80014fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001500:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800150a:	b29b      	uxth	r3, r3
 800150c:	ee07 3a90 	vmov	s15, r3
 8001510:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001514:	edd7 7a07 	vldr	s15, [r7, #28]
 8001518:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800151c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001524:	ee17 3a90 	vmov	r3, s15
 8001528:	b29a      	uxth	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f8a3 200d 	strh.w	r2, [r3, #13]
    state.value = key->calibration.idle_value;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8001536:	b29b      	uxth	r3, r3
 8001538:	813b      	strh	r3, [r7, #8]
  }

  // Do nothing if key is idle
  if (key->state.distance == 0 && state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f8b3 3013 	ldrh.w	r3, [r3, #19]
 8001540:	b29b      	uxth	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d117      	bne.n	8001576 <update_key_state+0x132>
 8001546:	893b      	ldrh	r3, [r7, #8]
 8001548:	461a      	mov	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8001550:	b29b      	uxth	r3, r3
 8001552:	3b0a      	subs	r3, #10
 8001554:	429a      	cmp	r2, r3
 8001556:	db0e      	blt.n	8001576 <update_key_state+0x132>
    if (key->idle_counter >= IDLE_CYCLES_UNTIL_SLEEP) {
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	78db      	ldrb	r3, [r3, #3]
 800155c:	2b0e      	cmp	r3, #14
 800155e:	d904      	bls.n	800156a <update_key_state+0x126>
      key->is_idle = 1;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	711a      	strb	r2, [r3, #4]
      return 0;
 8001566:	2300      	movs	r3, #0
 8001568:	e0b8      	b.n	80016dc <update_key_state+0x298>
    }
    key->idle_counter++;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	78db      	ldrb	r3, [r3, #3]
 800156e:	3301      	adds	r3, #1
 8001570:	b2da      	uxtb	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	70da      	strb	r2, [r3, #3]
  }

  // Get distance from top
  if (state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8001576:	893b      	ldrh	r3, [r7, #8]
 8001578:	461a      	mov	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8001580:	b29b      	uxth	r3, r3
 8001582:	3b0a      	subs	r3, #10
 8001584:	429a      	cmp	r2, r3
 8001586:	db05      	blt.n	8001594 <update_key_state+0x150>
    state.distance = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	817b      	strh	r3, [r7, #10]
    key->actuation.direction_changed_point = 0;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	775a      	strb	r2, [r3, #29]
 8001592:	e00f      	b.n	80015b4 <update_key_state+0x170>
  } else {
    state.distance = key->calibration.idle_value - IDLE_VALUE_OFFSET - state.value;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800159a:	b29a      	uxth	r2, r3
 800159c:	893b      	ldrh	r3, [r7, #8]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	3b0a      	subs	r3, #10
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	817b      	strh	r3, [r7, #10]
    key->is_idle = 0;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	711a      	strb	r2, [r3, #4]
    key->idle_counter = 0;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	70da      	strb	r2, [r3, #3]
  }

  // Calibrate max distance value
  if (state.distance > key->calibration.max_distance) {
 80015b4:	897a      	ldrh	r2, [r7, #10]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	429a      	cmp	r2, r3
 80015c0:	d903      	bls.n	80015ca <update_key_state+0x186>
    key->calibration.max_distance = state.distance;
 80015c2:	897a      	ldrh	r2, [r7, #10]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f8a3 200f 	strh.w	r2, [r3, #15]
  }

  // Limit max distance
  if (state.distance >= key->calibration.max_distance - MAX_DISTANCE_OFFSET) {
 80015ca:	897b      	ldrh	r3, [r7, #10]
 80015cc:	461a      	mov	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3b3c      	subs	r3, #60	@ 0x3c
 80015d8:	429a      	cmp	r2, r3
 80015da:	db04      	blt.n	80015e6 <update_key_state+0x1a2>
    state.distance = key->calibration.max_distance;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	817b      	strh	r3, [r7, #10]
  }

  // Map distance in percentages
  state.distance_8bits = (state.distance * 0xff) / key->calibration.max_distance;
 80015e6:	897b      	ldrh	r3, [r7, #10]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4613      	mov	r3, r2
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	1a9b      	subs	r3, r3, r2
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	f8b2 200f 	ldrh.w	r2, [r2, #15]
 80015f6:	b292      	uxth	r2, r2
 80015f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	733b      	strb	r3, [r7, #12]

  float delta = 0.8;
 8001600:	4b3a      	ldr	r3, [pc, #232]	@ (80016ec <update_key_state+0x2a8>)
 8001602:	61bb      	str	r3, [r7, #24]
  state.filtered_distance = (1 - delta) * state.distance_8bits + delta * key->state.filtered_distance;
 8001604:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001608:	edd7 7a06 	vldr	s15, [r7, #24]
 800160c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001610:	7b3b      	ldrb	r3, [r7, #12]
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8001624:	edd7 7a06 	vldr	s15, [r7, #24]
 8001628:	ee06 3a90 	vmov	s13, r3
 800162c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001634:	ee17 3a90 	vmov	r3, s15
 8001638:	f8c7 300d 	str.w	r3, [r7, #13]
  state.filtered_distance_8bits = state.filtered_distance;
 800163c:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8001640:	ee07 3a90 	vmov	s15, r3
 8001644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001648:	edc7 7a00 	vstr	s15, [r7]
 800164c:	783b      	ldrb	r3, [r7, #0]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	74bb      	strb	r3, [r7, #18]

  // Update velocity
  state.velocity = state.filtered_distance_8bits - key->state.filtered_distance_8bits;
 8001652:	7cba      	ldrb	r2, [r7, #18]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7edb      	ldrb	r3, [r3, #27]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	b25b      	sxtb	r3, r3
 800165e:	747b      	strb	r3, [r7, #17]

  // Update direction
  if (key->state.velocity > 0 && state.velocity > 0 && key->actuation.direction != GOING_DOWN) {
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001666:	2b00      	cmp	r3, #0
 8001668:	dd13      	ble.n	8001692 <update_key_state+0x24e>
 800166a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800166e:	2b00      	cmp	r3, #0
 8001670:	dd0f      	ble.n	8001692 <update_key_state+0x24e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7f1b      	ldrb	r3, [r3, #28]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d00b      	beq.n	8001692 <update_key_state+0x24e>
    key->actuation.direction = GOING_DOWN;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	771a      	strb	r2, [r3, #28]
    if (key->actuation.direction_changed_point != 0) {
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7f5b      	ldrb	r3, [r3, #29]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d01c      	beq.n	80016c2 <update_key_state+0x27e>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7eda      	ldrb	r2, [r3, #27]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	775a      	strb	r2, [r3, #29]
    if (key->actuation.direction_changed_point != 0) {
 8001690:	e017      	b.n	80016c2 <update_key_state+0x27e>
    }
  } else if (key->state.velocity < 0 && state.velocity < 0 && key->actuation.direction != GOING_UP) {
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001698:	2b00      	cmp	r3, #0
 800169a:	da12      	bge.n	80016c2 <update_key_state+0x27e>
 800169c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da0e      	bge.n	80016c2 <update_key_state+0x27e>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7f1b      	ldrb	r3, [r3, #28]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00a      	beq.n	80016c2 <update_key_state+0x27e>
    key->actuation.direction = GOING_UP;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	771a      	strb	r2, [r3, #28]
    if (key->actuation.direction_changed_point != 255) {
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	7f5b      	ldrb	r3, [r3, #29]
 80016b6:	2bff      	cmp	r3, #255	@ 0xff
 80016b8:	d003      	beq.n	80016c2 <update_key_state+0x27e>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7eda      	ldrb	r2, [r3, #27]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	775a      	strb	r2, [r3, #29]
    }
  }

  key->state = state;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f103 0211 	add.w	r2, r3, #17
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	cb03      	ldmia	r3!, {r0, r1}
 80016ce:	6010      	str	r0, [r2, #0]
 80016d0:	6051      	str	r1, [r2, #4]
 80016d2:	8819      	ldrh	r1, [r3, #0]
 80016d4:	789b      	ldrb	r3, [r3, #2]
 80016d6:	8111      	strh	r1, [r2, #8]
 80016d8:	7293      	strb	r3, [r2, #10]
  return 1;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3720      	adds	r7, #32
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000000 	.word	0x20000000
 80016e8:	3f19999a 	.word	0x3f19999a
 80016ec:	3f4ccccd 	.word	0x3f4ccccd

080016f0 <update_key_actuation>:

void update_key_actuation(struct key *key) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
   *
   */

  // if rapid trigger enable, move trigger and reset offsets according to the distance taht began the trigger

  uint32_t now = keyboard_get_time();
 80016f8:	f000 fc3e 	bl	8001f78 <keyboard_get_time>
 80016fc:	6178      	str	r0, [r7, #20]
  uint8_t is_after_trigger_offset = key->state.distance_8bits > key->actuation.trigger_offset;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7d5a      	ldrb	r2, [r3, #21]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001708:	429a      	cmp	r2, r3
 800170a:	bf8c      	ite	hi
 800170c:	2301      	movhi	r3, #1
 800170e:	2300      	movls	r3, #0
 8001710:	b2db      	uxtb	r3, r3
 8001712:	74fb      	strb	r3, [r7, #19]
  uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7d5a      	ldrb	r2, [r3, #21]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	7fdb      	ldrb	r3, [r3, #31]
 800171c:	429a      	cmp	r2, r3
 800171e:	bf34      	ite	cc
 8001720:	2301      	movcc	r3, #1
 8001722:	2300      	movcs	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	74bb      	strb	r3, [r7, #18]
  uint8_t has_rapid_trigger = key->actuation.rapid_trigger_offset != 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf14      	ite	ne
 8001732:	2301      	movne	r3, #1
 8001734:	2300      	moveq	r3, #0
 8001736:	b2db      	uxtb	r3, r3
 8001738:	747b      	strb	r3, [r7, #17]
  uint8_t is_after_rapid_trigger_offset = key->state.distance_8bits > key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset + keyboard_user_config.reset_threshold;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7d5b      	ldrb	r3, [r3, #21]
 800173e:	4619      	mov	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7f5b      	ldrb	r3, [r3, #29]
 8001744:	461a      	mov	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	4a54      	ldr	r2, [pc, #336]	@ (80018a0 <update_key_actuation+0x1b0>)
 8001750:	7892      	ldrb	r2, [r2, #2]
 8001752:	4413      	add	r3, r2
 8001754:	4299      	cmp	r1, r3
 8001756:	bfcc      	ite	gt
 8001758:	2301      	movgt	r3, #1
 800175a:	2300      	movle	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	743b      	strb	r3, [r7, #16]
  uint8_t is_before_rapid_reset_offset = key->state.distance_8bits < key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	7d5b      	ldrb	r3, [r3, #21]
 8001764:	461a      	mov	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7f5b      	ldrb	r3, [r3, #29]
 800176a:	4619      	mov	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001772:	1acb      	subs	r3, r1, r3
 8001774:	429a      	cmp	r2, r3
 8001776:	bfb4      	ite	lt
 8001778:	2301      	movlt	r3, #1
 800177a:	2300      	movge	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	73fb      	strb	r3, [r7, #15]

  switch (key->actuation.status) {
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7f9b      	ldrb	r3, [r3, #30]
 8001784:	3b01      	subs	r3, #1
 8001786:	2b03      	cmp	r3, #3
 8001788:	d87f      	bhi.n	800188a <update_key_actuation+0x19a>
 800178a:	a201      	add	r2, pc, #4	@ (adr r2, 8001790 <update_key_actuation+0xa0>)
 800178c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001790:	08001841 	.word	0x08001841
 8001794:	08001851 	.word	0x08001851
 8001798:	080017a1 	.word	0x080017a1
 800179c:	080017d9 	.word	0x080017d9

  case STATUS_RESET:
    // if reset, can be triggered or tap
    if (is_after_trigger_offset) {
 80017a0:	7cfb      	ldrb	r3, [r7, #19]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d073      	beq.n	800188e <update_key_actuation+0x19e>
      if (key->layers[_TAP_LAYER].value) {
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <update_key_actuation+0xca>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	779a      	strb	r2, [r3, #30]
 80017b8:	e009      	b.n	80017ce <update_key_actuation+0xde>
        // key_triggered = 1;
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2202      	movs	r2, #2
 80017be:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 80017c0:	4b38      	ldr	r3, [pc, #224]	@ (80018a4 <update_key_actuation+0x1b4>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, _BASE_LAYER);
 80017c6:	2100      	movs	r1, #0
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff fc03 	bl	8000fd4 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	f8c3 2023 	str.w	r2, [r3, #35]	@ 0x23
    }
    break;
 80017d6:	e05a      	b.n	800188e <update_key_actuation+0x19e>

  case STATUS_RAPID_TRIGGER_RESET:
    if (!has_rapid_trigger) {
 80017d8:	7c7b      	ldrb	r3, [r7, #17]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d103      	bne.n	80017e6 <update_key_actuation+0xf6>
      key->actuation.status = STATUS_RESET;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2203      	movs	r2, #3
 80017e2:	779a      	strb	r2, [r3, #30]
      break;
 80017e4:	e058      	b.n	8001898 <update_key_actuation+0x1a8>
    }
    // if reset, can be triggered or tap
    if (is_after_trigger_offset && key->actuation.direction == GOING_DOWN && is_after_rapid_trigger_offset) {
 80017e6:	7cfb      	ldrb	r3, [r7, #19]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d022      	beq.n	8001832 <update_key_actuation+0x142>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7f1b      	ldrb	r3, [r3, #28]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d11e      	bne.n	8001832 <update_key_actuation+0x142>
 80017f4:	7c3b      	ldrb	r3, [r7, #16]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d01b      	beq.n	8001832 <update_key_actuation+0x142>
      if (key->layers[_TAP_LAYER].value) {
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8001800:	b29b      	uxth	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d006      	beq.n	8001814 <update_key_actuation+0x124>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 800180c:	4b25      	ldr	r3, [pc, #148]	@ (80018a4 <update_key_actuation+0x1b4>)
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	e009      	b.n	8001828 <update_key_actuation+0x138>
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2202      	movs	r2, #2
 8001818:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 800181a:	4b22      	ldr	r3, [pc, #136]	@ (80018a4 <update_key_actuation+0x1b4>)
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, _BASE_LAYER);
 8001820:	2100      	movs	r1, #0
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fbd6 	bl	8000fd4 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	f8c3 2023 	str.w	r2, [r3, #35]	@ 0x23
    } else if (is_before_reset_offset) {
      key->actuation.status = STATUS_RESET;
    }
    break;
 8001830:	e02f      	b.n	8001892 <update_key_actuation+0x1a2>
    } else if (is_before_reset_offset) {
 8001832:	7cbb      	ldrb	r3, [r7, #18]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d02c      	beq.n	8001892 <update_key_actuation+0x1a2>
      key->actuation.status = STATUS_RESET;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2203      	movs	r2, #3
 800183c:	779a      	strb	r2, [r3, #30]
    break;
 800183e:	e028      	b.n	8001892 <update_key_actuation+0x1a2>

  case STATUS_TAP:
    // if tap, can be reset
    key->actuation.status = STATUS_RESET;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2203      	movs	r2, #3
 8001844:	779a      	strb	r2, [r3, #30]
    hid_release_key(key, _TAP_LAYER);
 8001846:	2101      	movs	r1, #1
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff fc2d 	bl	80010a8 <hid_release_key>
    break;
 800184e:	e023      	b.n	8001898 <update_key_actuation+0x1a8>

  case STATUS_TRIGGERED:
    // if triggered, can be reset
    if (is_before_reset_offset) {
 8001850:	7cbb      	ldrb	r3, [r7, #18]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d007      	beq.n	8001866 <update_key_actuation+0x176>
      key->actuation.status = STATUS_RESET;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2203      	movs	r2, #3
 800185a:	779a      	strb	r2, [r3, #30]
      hid_release_key(key, _BASE_LAYER);
 800185c:	2100      	movs	r1, #0
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff fc22 	bl	80010a8 <hid_release_key>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
      hid_release_key(key, _BASE_LAYER);
    }
    break;
 8001864:	e017      	b.n	8001896 <update_key_actuation+0x1a6>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
 8001866:	7c7b      	ldrb	r3, [r7, #17]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d014      	beq.n	8001896 <update_key_actuation+0x1a6>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7f1b      	ldrb	r3, [r3, #28]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d110      	bne.n	8001896 <update_key_actuation+0x1a6>
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00d      	beq.n	8001896 <update_key_actuation+0x1a6>
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2204      	movs	r2, #4
 800187e:	779a      	strb	r2, [r3, #30]
      hid_release_key(key, _BASE_LAYER);
 8001880:	2100      	movs	r1, #0
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fc10 	bl	80010a8 <hid_release_key>
    break;
 8001888:	e005      	b.n	8001896 <update_key_actuation+0x1a6>

  default:
    break;
 800188a:	bf00      	nop
 800188c:	e004      	b.n	8001898 <update_key_actuation+0x1a8>
    break;
 800188e:	bf00      	nop
 8001890:	e002      	b.n	8001898 <update_key_actuation+0x1a8>
    break;
 8001892:	bf00      	nop
 8001894:	e000      	b.n	8001898 <update_key_actuation+0x1a8>
    break;
 8001896:	bf00      	nop
  }
}
 8001898:	bf00      	nop
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000000 	.word	0x20000000
 80018a4:	200003bc 	.word	0x200003bc

080018a8 <update_key>:

void update_key(struct key *key) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if (!update_key_state(key)) {
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff fdc7 	bl	8001444 <update_key_state>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <update_key+0x1c>
    return;
  }

  update_key_actuation(key);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff ff17 	bl	80016f0 <update_key_actuation>
 80018c2:	e000      	b.n	80018c6 <update_key+0x1e>
    return;
 80018c4:	bf00      	nop
}
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <keyboard_init_keys>:

void keyboard_init_keys() {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
//	keyboard_read_config();
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 80018d2:	2300      	movs	r3, #0
 80018d4:	71fb      	strb	r3, [r7, #7]
 80018d6:	e027      	b.n	8001928 <keyboard_init_keys+0x5c>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 80018d8:	2300      	movs	r3, #0
 80018da:	71bb      	strb	r3, [r7, #6]
 80018dc:	e01e      	b.n	800191c <keyboard_init_keys+0x50>
      if (channels_by_row_col[row][col][0] != XXXX) {
 80018de:	79fa      	ldrb	r2, [r7, #7]
 80018e0:	79bb      	ldrb	r3, [r7, #6]
 80018e2:	4915      	ldr	r1, [pc, #84]	@ (8001938 <keyboard_init_keys+0x6c>)
 80018e4:	0092      	lsls	r2, r2, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80018ec:	2bff      	cmp	r3, #255	@ 0xff
 80018ee:	d012      	beq.n	8001916 <keyboard_init_keys+0x4a>
        init_key(channels_by_row_col[row][col][0], channels_by_row_col[row][col][1], row, col);
 80018f0:	79fa      	ldrb	r2, [r7, #7]
 80018f2:	79bb      	ldrb	r3, [r7, #6]
 80018f4:	4910      	ldr	r1, [pc, #64]	@ (8001938 <keyboard_init_keys+0x6c>)
 80018f6:	0092      	lsls	r2, r2, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 80018fe:	79fa      	ldrb	r2, [r7, #7]
 8001900:	79bb      	ldrb	r3, [r7, #6]
 8001902:	490d      	ldr	r1, [pc, #52]	@ (8001938 <keyboard_init_keys+0x6c>)
 8001904:	0092      	lsls	r2, r2, #2
 8001906:	4413      	add	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	440b      	add	r3, r1
 800190c:	7859      	ldrb	r1, [r3, #1]
 800190e:	79bb      	ldrb	r3, [r7, #6]
 8001910:	79fa      	ldrb	r2, [r7, #7]
 8001912:	f7ff fcb5 	bl	8001280 <init_key>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8001916:	79bb      	ldrb	r3, [r7, #6]
 8001918:	3301      	adds	r3, #1
 800191a:	71bb      	strb	r3, [r7, #6]
 800191c:	79bb      	ldrb	r3, [r7, #6]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d9dd      	bls.n	80018de <keyboard_init_keys+0x12>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	3301      	adds	r3, #1
 8001926:	71fb      	strb	r3, [r7, #7]
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	2b03      	cmp	r3, #3
 800192c:	d9d4      	bls.n	80018d8 <keyboard_init_keys+0xc>
      }
    }
  }
}
 800192e:	bf00      	nop
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	0800c70c 	.word	0x0800c70c

0800193c <keyboard_task>:

void keyboard_task() {
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 8001942:	f000 fb19 	bl	8001f78 <keyboard_get_time>
 8001946:	60b8      	str	r0, [r7, #8]
  key_triggered = 0;
 8001948:	4b64      	ldr	r3, [pc, #400]	@ (8001adc <keyboard_task+0x1a0>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800194e:	2300      	movs	r3, #0
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	e039      	b.n	80019c8 <keyboard_task+0x8c>
    keyboard_select_amux(amux_channel);
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fab4 	bl	8001ec4 <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800195c:	2300      	movs	r3, #0
 800195e:	73bb      	strb	r3, [r7, #14]
 8001960:	e02c      	b.n	80019bc <keyboard_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 8001962:	7bb9      	ldrb	r1, [r7, #14]
 8001964:	7bfa      	ldrb	r2, [r7, #15]
 8001966:	485e      	ldr	r0, [pc, #376]	@ (8001ae0 <keyboard_task+0x1a4>)
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001976:	fb01 f202 	mul.w	r2, r1, r2
 800197a:	4413      	add	r3, r2
 800197c:	4403      	add	r3, r0
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d017      	beq.n	80019b4 <keyboard_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 8001984:	7bbb      	ldrb	r3, [r7, #14]
 8001986:	4618      	mov	r0, r3
 8001988:	f000 fac4 	bl	8001f14 <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 800198c:	7bb9      	ldrb	r1, [r7, #14]
 800198e:	7bfa      	ldrb	r2, [r7, #15]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	1a9b      	subs	r3, r3, r2
 800199a:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800199e:	fb01 f202 	mul.w	r2, r1, r2
 80019a2:	4413      	add	r3, r2
 80019a4:	4a4e      	ldr	r2, [pc, #312]	@ (8001ae0 <keyboard_task+0x1a4>)
 80019a6:	4413      	add	r3, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff7d 	bl	80018a8 <update_key>

      keyboard_close_adc();
 80019ae:	f000 fad9 	bl	8001f64 <keyboard_close_adc>
 80019b2:	e000      	b.n	80019b6 <keyboard_task+0x7a>
        continue;
 80019b4:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80019b6:	7bbb      	ldrb	r3, [r7, #14]
 80019b8:	3301      	adds	r3, #1
 80019ba:	73bb      	strb	r3, [r7, #14]
 80019bc:	7bbb      	ldrb	r3, [r7, #14]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0cf      	beq.n	8001962 <keyboard_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	3301      	adds	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	2b0f      	cmp	r3, #15
 80019cc:	d9c2      	bls.n	8001954 <keyboard_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80019ce:	2300      	movs	r3, #0
 80019d0:	737b      	strb	r3, [r7, #13]
 80019d2:	e074      	b.n	8001abe <keyboard_task+0x182>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80019d4:	2300      	movs	r3, #0
 80019d6:	733b      	strb	r3, [r7, #12]
 80019d8:	e06b      	b.n	8001ab2 <keyboard_task+0x176>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 80019da:	7b39      	ldrb	r1, [r7, #12]
 80019dc:	7b7a      	ldrb	r2, [r7, #13]
 80019de:	4840      	ldr	r0, [pc, #256]	@ (8001ae0 <keyboard_task+0x1a4>)
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	1a9b      	subs	r3, r3, r2
 80019ea:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80019ee:	fb01 f202 	mul.w	r2, r1, r2
 80019f2:	4413      	add	r3, r2
 80019f4:	4403      	add	r3, r0
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d056      	beq.n	8001aaa <keyboard_task+0x16e>
 80019fc:	7b39      	ldrb	r1, [r7, #12]
 80019fe:	7b7a      	ldrb	r2, [r7, #13]
 8001a00:	4837      	ldr	r0, [pc, #220]	@ (8001ae0 <keyboard_task+0x1a4>)
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001a10:	fb01 f202 	mul.w	r2, r1, r2
 8001a14:	4413      	add	r3, r2
 8001a16:	4403      	add	r3, r0
 8001a18:	331e      	adds	r3, #30
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d144      	bne.n	8001aaa <keyboard_task+0x16e>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8001a20:	7b39      	ldrb	r1, [r7, #12]
 8001a22:	7b7a      	ldrb	r2, [r7, #13]
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001a32:	fb01 f202 	mul.w	r2, r1, r2
 8001a36:	4413      	add	r3, r2
 8001a38:	4a29      	ldr	r2, [pc, #164]	@ (8001ae0 <keyboard_task+0x1a4>)
 8001a3a:	4413      	add	r3, r2
 8001a3c:	607b      	str	r3, [r7, #4]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7d5a      	ldrb	r2, [r3, #21]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7fdb      	ldrb	r3, [r3, #31]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	bf34      	ite	cc
 8001a4a:	2301      	movcc	r3, #1
 8001a4c:	2300      	movcs	r3, #0
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	70fb      	strb	r3, [r7, #3]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 8001a52:	f000 fa91 	bl	8001f78 <keyboard_get_time>
 8001a56:	4602      	mov	r2, r0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f8d3 3023 	ldr.w	r3, [r3, #35]	@ 0x23
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	4a20      	ldr	r2, [pc, #128]	@ (8001ae4 <keyboard_task+0x1a8>)
 8001a62:	88d2      	ldrh	r2, [r2, #6]
 8001a64:	4293      	cmp	r3, r2
 8001a66:	bf94      	ite	ls
 8001a68:	2301      	movls	r3, #1
 8001a6a:	2300      	movhi	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	70bb      	strb	r3, [r7, #2]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00a      	beq.n	8001a8c <keyboard_task+0x150>
 8001a76:	78bb      	ldrb	r3, [r7, #2]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d007      	beq.n	8001a8c <keyboard_task+0x150>
        key->actuation.status = STATUS_TAP;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	779a      	strb	r2, [r3, #30]
        hid_press_key(key, _TAP_LAYER);
 8001a82:	2101      	movs	r1, #1
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff faa5 	bl	8000fd4 <hid_press_key>
 8001a8a:	e00f      	b.n	8001aac <keyboard_task+0x170>
      } else if (!is_before_timeout || key_triggered) {
 8001a8c:	78bb      	ldrb	r3, [r7, #2]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <keyboard_task+0x15e>
 8001a92:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <keyboard_task+0x1a0>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d008      	beq.n	8001aac <keyboard_task+0x170>
        key->actuation.status = STATUS_TRIGGERED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	779a      	strb	r2, [r3, #30]
        hid_press_key(key, _BASE_LAYER);
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff fa96 	bl	8000fd4 <hid_press_key>
 8001aa8:	e000      	b.n	8001aac <keyboard_task+0x170>
        continue;
 8001aaa:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8001aac:	7b3b      	ldrb	r3, [r7, #12]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	733b      	strb	r3, [r7, #12]
 8001ab2:	7b3b      	ldrb	r3, [r7, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d090      	beq.n	80019da <keyboard_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8001ab8:	7b7b      	ldrb	r3, [r7, #13]
 8001aba:	3301      	adds	r3, #1
 8001abc:	737b      	strb	r3, [r7, #13]
 8001abe:	7b7b      	ldrb	r3, [r7, #13]
 8001ac0:	2b0f      	cmp	r3, #15
 8001ac2:	d987      	bls.n	80019d4 <keyboard_task+0x98>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 8001ac4:	f000 fa58 	bl	8001f78 <keyboard_get_time>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	4a06      	ldr	r2, [pc, #24]	@ (8001ae8 <keyboard_task+0x1ac>)
 8001ad0:	6013      	str	r3, [r2, #0]
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200003bc 	.word	0x200003bc
 8001ae0:	20000148 	.word	0x20000148
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	200003b8 	.word	0x200003b8

08001aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af2:	f000 fd11 	bl	8002518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af6:	f000 f82b 	bl	8001b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001afa:	f000 f93f 	bl	8001d7c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001afe:	f000 f88f 	bl	8001c20 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b02:	f000 f90d 	bl	8001d20 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001b06:	f000 f8dd 	bl	8001cc4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ADC_channel_Config.Rank = 1;
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <main+0x5c>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	605a      	str	r2, [r3, #4]
  ADC_channel_Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b10:	4b0d      	ldr	r3, [pc, #52]	@ (8001b48 <main+0x5c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]

  keyboard_init_keys();
 8001b16:	f7ff fed9 	bl	80018cc <keyboard_init_keys>
  tusb_rhport_init_t dev_init = {
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <main+0x60>)
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	80bb      	strh	r3, [r7, #4]
      .role = TUSB_ROLE_DEVICE,
      .speed = TUSB_SPEED_AUTO};
  tusb_init(0, &dev_init); // initialize device stack on roothub port 0
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	4619      	mov	r1, r3
 8001b24:	2000      	movs	r0, #0
 8001b26:	f008 fe21 	bl	800a76c <tusb_rhport_init>
  tud_task_ext(UINT32_MAX, false);
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	f005 f9ce 	bl	8006ed0 <tud_task_ext>
}
 8001b34:	bf00      	nop
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    // MARK: Main loop
	tud_task();
    keyboard_task();
 8001b36:	f7ff ff01 	bl	800193c <keyboard_task>
    hid_task();
 8001b3a:	f7ff f9fb 	bl	8000f34 <hid_task>
    cdc_task();
 8001b3e:	f7fe fd4d 	bl	80005dc <cdc_task>
	tud_task();
 8001b42:	bf00      	nop
 8001b44:	e7f1      	b.n	8001b2a <main+0x3e>
 8001b46:	bf00      	nop
 8001b48:	20000940 	.word	0x20000940
 8001b4c:	0800c688 	.word	0x0800c688

08001b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b094      	sub	sp, #80	@ 0x50
 8001b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b56:	f107 0320 	add.w	r3, r7, #32
 8001b5a:	2230      	movs	r2, #48	@ 0x30
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f009 f96f 	bl	800ae42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	4b27      	ldr	r3, [pc, #156]	@ (8001c18 <SystemClock_Config+0xc8>)
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7c:	4a26      	ldr	r2, [pc, #152]	@ (8001c18 <SystemClock_Config+0xc8>)
 8001b7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b82:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b84:	4b24      	ldr	r3, [pc, #144]	@ (8001c18 <SystemClock_Config+0xc8>)
 8001b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b90:	2300      	movs	r3, #0
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	4b21      	ldr	r3, [pc, #132]	@ (8001c1c <SystemClock_Config+0xcc>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a20      	ldr	r2, [pc, #128]	@ (8001c1c <SystemClock_Config+0xcc>)
 8001b9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <SystemClock_Config+0xcc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bac:	2301      	movs	r3, #1
 8001bae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bb0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8001bc0:	230d      	movs	r3, #13
 8001bc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001bc4:	23a8      	movs	r3, #168	@ 0xa8
 8001bc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001bc8:	2304      	movs	r3, #4
 8001bca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bcc:	2307      	movs	r3, #7
 8001bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd0:	f107 0320 	add.w	r3, r7, #32
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f002 f839 	bl	8003c4c <HAL_RCC_OscConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001be0:	f000 f9d1 	bl	8001f86 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001be4:	230f      	movs	r3, #15
 8001be6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001be8:	2302      	movs	r3, #2
 8001bea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	2102      	movs	r1, #2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f002 fa9b 	bl	800413c <HAL_RCC_ClockConfig>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c0c:	f000 f9bb 	bl	8001f86 <Error_Handler>
  }
}
 8001c10:	bf00      	nop
 8001c12:	3750      	adds	r7, #80	@ 0x50
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40007000 	.word	0x40007000

08001c20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c26:	463b      	mov	r3, r7
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c32:	4b21      	ldr	r3, [pc, #132]	@ (8001cb8 <MX_ADC1_Init+0x98>)
 8001c34:	4a21      	ldr	r2, [pc, #132]	@ (8001cbc <MX_ADC1_Init+0x9c>)
 8001c36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c38:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb8 <MX_ADC1_Init+0x98>)
 8001c3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c40:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <MX_ADC1_Init+0x98>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001c46:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb8 <MX_ADC1_Init+0x98>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb8 <MX_ADC1_Init+0x98>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c52:	4b19      	ldr	r3, [pc, #100]	@ (8001cb8 <MX_ADC1_Init+0x98>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c5a:	4b17      	ldr	r3, [pc, #92]	@ (8001cb8 <MX_ADC1_Init+0x98>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c60:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <MX_ADC1_Init+0x98>)
 8001c62:	4a17      	ldr	r2, [pc, #92]	@ (8001cc0 <MX_ADC1_Init+0xa0>)
 8001c64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c66:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <MX_ADC1_Init+0x98>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c6c:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <MX_ADC1_Init+0x98>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c72:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <MX_ADC1_Init+0x98>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb8 <MX_ADC1_Init+0x98>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c80:	480d      	ldr	r0, [pc, #52]	@ (8001cb8 <MX_ADC1_Init+0x98>)
 8001c82:	f000 fcdf 	bl	8002644 <HAL_ADC_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c8c:	f000 f97b 	bl	8001f86 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001c90:	2309      	movs	r3, #9
 8001c92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c94:	2301      	movs	r3, #1
 8001c96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c9c:	463b      	mov	r3, r7
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4805      	ldr	r0, [pc, #20]	@ (8001cb8 <MX_ADC1_Init+0x98>)
 8001ca2:	f000 fe93 	bl	80029cc <HAL_ADC_ConfigChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001cac:	f000 f96b 	bl	8001f86 <Error_Handler>

  // memcpy(&ADC_channel_Config, &sConfig, sizeof(ADC_ChannelConfTypeDef));

  /* USER CODE END ADC1_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	200003c0 	.word	0x200003c0
 8001cbc:	40012000 	.word	0x40012000
 8001cc0:	0f000001 	.word	0x0f000001

08001cc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cc8:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cca:	4a13      	ldr	r2, [pc, #76]	@ (8001d18 <MX_I2C1_Init+0x54>)
 8001ccc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cce:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cd0:	4a12      	ldr	r2, [pc, #72]	@ (8001d1c <MX_I2C1_Init+0x58>)
 8001cd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cda:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001ce2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ce6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cee:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cf4:	4b07      	ldr	r3, [pc, #28]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cfa:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d00:	4804      	ldr	r0, [pc, #16]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001d02:	f001 fd4f 	bl	80037a4 <HAL_I2C_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d0c:	f000 f93b 	bl	8001f86 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000408 	.word	0x20000408
 8001d18:	40005400 	.word	0x40005400
 8001d1c:	000186a0 	.word	0x000186a0

08001d20 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d24:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d26:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001d2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001d2c:	4b12      	ldr	r3, [pc, #72]	@ (8001d78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d2e:	2204      	movs	r2, #4
 8001d30:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d32:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d34:	2202      	movs	r2, #2
 8001d36:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d38:	4b0f      	ldr	r3, [pc, #60]	@ (8001d78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d40:	2202      	movs	r2, #2
 8001d42:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001d44:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d50:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001d56:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001d62:	4805      	ldr	r0, [pc, #20]	@ (8001d78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d64:	f001 fe62 	bl	8003a2c <HAL_PCD_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001d6e:	f000 f90a 	bl	8001f86 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	2000045c 	.word	0x2000045c

08001d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d82:	f107 030c 	add.w	r3, r7, #12
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
 8001d90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	4b20      	ldr	r3, [pc, #128]	@ (8001e18 <MX_GPIO_Init+0x9c>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8001e18 <MX_GPIO_Init+0x9c>)
 8001d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <MX_GPIO_Init+0x9c>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	4b19      	ldr	r3, [pc, #100]	@ (8001e18 <MX_GPIO_Init+0x9c>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	4a18      	ldr	r2, [pc, #96]	@ (8001e18 <MX_GPIO_Init+0x9c>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dbe:	4b16      	ldr	r3, [pc, #88]	@ (8001e18 <MX_GPIO_Init+0x9c>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	4b12      	ldr	r3, [pc, #72]	@ (8001e18 <MX_GPIO_Init+0x9c>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	4a11      	ldr	r2, [pc, #68]	@ (8001e18 <MX_GPIO_Init+0x9c>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dda:	4b0f      	ldr	r3, [pc, #60]	@ (8001e18 <MX_GPIO_Init+0x9c>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001dec:	480b      	ldr	r0, [pc, #44]	@ (8001e1c <MX_GPIO_Init+0xa0>)
 8001dee:	f001 fcbf 	bl	8003770 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001df2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001df6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e04:	f107 030c 	add.w	r3, r7, #12
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4804      	ldr	r0, [pc, #16]	@ (8001e1c <MX_GPIO_Init+0xa0>)
 8001e0c:	f001 fb2c 	bl	8003468 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e10:	bf00      	nop
 8001e12:	3720      	adds	r7, #32
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020400 	.word	0x40020400

08001e20 <keyboard_read_config>:

/* USER CODE BEGIN 4 */

// MARK: keyboard_* functions

void keyboard_read_config() {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  memcpy(&keyboard_user_config, (uint32_t *)CONFIG_ADDRESS, sizeof(keyboard_user_config));
 8001e24:	4a04      	ldr	r2, [pc, #16]	@ (8001e38 <keyboard_read_config+0x18>)
 8001e26:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <keyboard_read_config+0x1c>)
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	2348      	movs	r3, #72	@ 0x48
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f009 f8df 	bl	800aff2 <memcpy>
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	08040000 	.word	0x08040000

08001e40 <keyboard_write_config>:

uint8_t keyboard_write_config(uint8_t *buffer, uint16_t offset, uint16_t size) {
 8001e40:	b5b0      	push	{r4, r5, r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	803b      	strh	r3, [r7, #0]
  if (offset >= sizeof(keyboard_user_config)) {
 8001e50:	887b      	ldrh	r3, [r7, #2]
 8001e52:	2b47      	cmp	r3, #71	@ 0x47
 8001e54:	d901      	bls.n	8001e5a <keyboard_write_config+0x1a>
    return 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e02d      	b.n	8001eb6 <keyboard_write_config+0x76>
  }

  HAL_FLASH_Unlock();
 8001e5a:	f001 f94b 	bl	80030f4 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 8001e5e:	4b18      	ldr	r3, [pc, #96]	@ (8001ec0 <keyboard_write_config+0x80>)
 8001e60:	22b3      	movs	r2, #179	@ 0xb3
 8001e62:	60da      	str	r2, [r3, #12]
  FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 8001e64:	2102      	movs	r1, #2
 8001e66:	2006      	movs	r0, #6
 8001e68:	f001 fab6 	bl	80033d8 <FLASH_Erase_Sector>
  for (uint16_t i = offset; i < size; i++) {
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	81fb      	strh	r3, [r7, #14]
 8001e70:	e01a      	b.n	8001ea8 <keyboard_write_config+0x68>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, CONFIG_ADDRESS + i, buffer[i]) != HAL_OK) {
 8001e72:	89fb      	ldrh	r3, [r7, #14]
 8001e74:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001e78:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	89fb      	ldrh	r3, [r7, #14]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2200      	movs	r2, #0
 8001e8a:	461c      	mov	r4, r3
 8001e8c:	4615      	mov	r5, r2
 8001e8e:	4622      	mov	r2, r4
 8001e90:	462b      	mov	r3, r5
 8001e92:	2000      	movs	r0, #0
 8001e94:	f001 f8da 	bl	800304c <HAL_FLASH_Program>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <keyboard_write_config+0x62>
      HAL_FLASH_Lock();
 8001e9e:	f001 f94b 	bl	8003138 <HAL_FLASH_Lock>
  for (uint16_t i = offset; i < size; i++) {
 8001ea2:	89fb      	ldrh	r3, [r7, #14]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	81fb      	strh	r3, [r7, #14]
 8001ea8:	89fa      	ldrh	r2, [r7, #14]
 8001eaa:	883b      	ldrh	r3, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d3e0      	bcc.n	8001e72 <keyboard_write_config+0x32>
    };
  }
  HAL_FLASH_Lock();
 8001eb0:	f001 f942 	bl	8003138 <HAL_FLASH_Lock>
  return 1;
 8001eb4:	2301      	movs	r3, #1
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023c00 	.word	0x40023c00

08001ec4 <keyboard_select_amux>:

void keyboard_select_amux(uint8_t amux_channel) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  // TODO: set GPIOs at the same time using bitmap on register
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73fb      	strb	r3, [r7, #15]
 8001ed2:	e013      	b.n	8001efc <keyboard_select_amux+0x38>
    HAL_GPIO_WritePin(GPIOB, amux_select_pins[i], (amux_channel >> i) & 1);
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	4a0d      	ldr	r2, [pc, #52]	@ (8001f0c <keyboard_select_amux+0x48>)
 8001ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001edc:	b299      	uxth	r1, r3
 8001ede:	79fa      	ldrb	r2, [r7, #7]
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	fa42 f303 	asr.w	r3, r2, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4807      	ldr	r0, [pc, #28]	@ (8001f10 <keyboard_select_amux+0x4c>)
 8001ef2:	f001 fc3d 	bl	8003770 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d9e8      	bls.n	8001ed4 <keyboard_select_amux+0x10>
  }
}
 8001f02:	bf00      	nop
 8001f04:	bf00      	nop
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	0800c72c 	.word	0x0800c72c
 8001f10:	40020400 	.word	0x40020400

08001f14 <keyboard_select_adc>:

void keyboard_select_adc(uint8_t adc_channel) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
  ADC_channel_Config.Channel = adc_channels[adc_channel];
 8001f1e:	2209      	movs	r2, #9
 8001f20:	4b08      	ldr	r3, [pc, #32]	@ (8001f44 <keyboard_select_adc+0x30>)
 8001f22:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &ADC_channel_Config);
 8001f24:	4907      	ldr	r1, [pc, #28]	@ (8001f44 <keyboard_select_adc+0x30>)
 8001f26:	4808      	ldr	r0, [pc, #32]	@ (8001f48 <keyboard_select_adc+0x34>)
 8001f28:	f000 fd50 	bl	80029cc <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 8001f2c:	4806      	ldr	r0, [pc, #24]	@ (8001f48 <keyboard_select_adc+0x34>)
 8001f2e:	f000 fbcd 	bl	80026cc <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 8001f32:	2101      	movs	r1, #1
 8001f34:	4804      	ldr	r0, [pc, #16]	@ (8001f48 <keyboard_select_adc+0x34>)
 8001f36:	f000 fcb0 	bl	800289a <HAL_ADC_PollForConversion>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000940 	.word	0x20000940
 8001f48:	200003c0 	.word	0x200003c0

08001f4c <keyboard_read_adc>:

uint16_t keyboard_read_adc() {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 8001f50:	4803      	ldr	r0, [pc, #12]	@ (8001f60 <keyboard_read_adc+0x14>)
 8001f52:	f000 fd2d 	bl	80029b0 <HAL_ADC_GetValue>
 8001f56:	4603      	mov	r3, r0
 8001f58:	b29b      	uxth	r3, r3
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200003c0 	.word	0x200003c0

08001f64 <keyboard_close_adc>:

void keyboard_close_adc() {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  HAL_ADC_Stop(&hadc1);
 8001f68:	4802      	ldr	r0, [pc, #8]	@ (8001f74 <keyboard_close_adc+0x10>)
 8001f6a:	f000 fc63 	bl	8002834 <HAL_ADC_Stop>
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	200003c0 	.word	0x200003c0

08001f78 <keyboard_get_time>:

uint32_t keyboard_get_time() {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001f7c:	f000 fb32 	bl	80025e4 <HAL_GetTick>
 8001f80:	4603      	mov	r3, r0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f8a:	b672      	cpsid	i
}
 8001f8c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001f8e:	bf00      	nop
 8001f90:	e7fd      	b.n	8001f8e <Error_Handler+0x8>
	...

08001f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <HAL_MspInit+0x4c>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe0 <HAL_MspInit+0x4c>)
 8001fa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001faa:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <HAL_MspInit+0x4c>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <HAL_MspInit+0x4c>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	4a08      	ldr	r2, [pc, #32]	@ (8001fe0 <HAL_MspInit+0x4c>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_MspInit+0x4c>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800

08001fe4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	@ 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a17      	ldr	r2, [pc, #92]	@ (8002060 <HAL_ADC_MspInit+0x7c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d127      	bne.n	8002056 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	4b16      	ldr	r3, [pc, #88]	@ (8002064 <HAL_ADC_MspInit+0x80>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200e:	4a15      	ldr	r2, [pc, #84]	@ (8002064 <HAL_ADC_MspInit+0x80>)
 8002010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002014:	6453      	str	r3, [r2, #68]	@ 0x44
 8002016:	4b13      	ldr	r3, [pc, #76]	@ (8002064 <HAL_ADC_MspInit+0x80>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b0f      	ldr	r3, [pc, #60]	@ (8002064 <HAL_ADC_MspInit+0x80>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	4a0e      	ldr	r2, [pc, #56]	@ (8002064 <HAL_ADC_MspInit+0x80>)
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	6313      	str	r3, [r2, #48]	@ 0x30
 8002032:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <HAL_ADC_MspInit+0x80>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800203e:	2302      	movs	r3, #2
 8002040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002042:	2303      	movs	r3, #3
 8002044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4619      	mov	r1, r3
 8002050:	4805      	ldr	r0, [pc, #20]	@ (8002068 <HAL_ADC_MspInit+0x84>)
 8002052:	f001 fa09 	bl	8003468 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002056:	bf00      	nop
 8002058:	3728      	adds	r7, #40	@ 0x28
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40012000 	.word	0x40012000
 8002064:	40023800 	.word	0x40023800
 8002068:	40020400 	.word	0x40020400

0800206c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	@ 0x28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a19      	ldr	r2, [pc, #100]	@ (80020f0 <HAL_I2C_MspInit+0x84>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d12b      	bne.n	80020e6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	4b18      	ldr	r3, [pc, #96]	@ (80020f4 <HAL_I2C_MspInit+0x88>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	4a17      	ldr	r2, [pc, #92]	@ (80020f4 <HAL_I2C_MspInit+0x88>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	6313      	str	r3, [r2, #48]	@ 0x30
 800209e:	4b15      	ldr	r3, [pc, #84]	@ (80020f4 <HAL_I2C_MspInit+0x88>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020aa:	23c0      	movs	r3, #192	@ 0xc0
 80020ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ae:	2312      	movs	r3, #18
 80020b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020b2:	2301      	movs	r3, #1
 80020b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b6:	2303      	movs	r3, #3
 80020b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020ba:	2304      	movs	r3, #4
 80020bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020be:	f107 0314 	add.w	r3, r7, #20
 80020c2:	4619      	mov	r1, r3
 80020c4:	480c      	ldr	r0, [pc, #48]	@ (80020f8 <HAL_I2C_MspInit+0x8c>)
 80020c6:	f001 f9cf 	bl	8003468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <HAL_I2C_MspInit+0x88>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	4a08      	ldr	r2, [pc, #32]	@ (80020f4 <HAL_I2C_MspInit+0x88>)
 80020d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020da:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <HAL_I2C_MspInit+0x88>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020e6:	bf00      	nop
 80020e8:	3728      	adds	r7, #40	@ 0x28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40005400 	.word	0x40005400
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40020400 	.word	0x40020400

080020fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	@ 0x28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800211c:	d13a      	bne.n	8002194 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	4b1e      	ldr	r3, [pc, #120]	@ (800219c <HAL_PCD_MspInit+0xa0>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	4a1d      	ldr	r2, [pc, #116]	@ (800219c <HAL_PCD_MspInit+0xa0>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6313      	str	r3, [r2, #48]	@ 0x30
 800212e:	4b1b      	ldr	r3, [pc, #108]	@ (800219c <HAL_PCD_MspInit+0xa0>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800213a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800213e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002148:	2303      	movs	r3, #3
 800214a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800214c:	230a      	movs	r3, #10
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	4812      	ldr	r0, [pc, #72]	@ (80021a0 <HAL_PCD_MspInit+0xa4>)
 8002158:	f001 f986 	bl	8003468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800215c:	4b0f      	ldr	r3, [pc, #60]	@ (800219c <HAL_PCD_MspInit+0xa0>)
 800215e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002160:	4a0e      	ldr	r2, [pc, #56]	@ (800219c <HAL_PCD_MspInit+0xa0>)
 8002162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002166:	6353      	str	r3, [r2, #52]	@ 0x34
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <HAL_PCD_MspInit+0xa0>)
 800216e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002170:	4a0a      	ldr	r2, [pc, #40]	@ (800219c <HAL_PCD_MspInit+0xa0>)
 8002172:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002176:	6453      	str	r3, [r2, #68]	@ 0x44
 8002178:	4b08      	ldr	r3, [pc, #32]	@ (800219c <HAL_PCD_MspInit+0xa0>)
 800217a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8002184:	2200      	movs	r2, #0
 8002186:	2100      	movs	r1, #0
 8002188:	2043      	movs	r0, #67	@ 0x43
 800218a:	f000 ff28 	bl	8002fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800218e:	2043      	movs	r0, #67	@ 0x43
 8002190:	f000 ff41 	bl	8003016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002194:	bf00      	nop
 8002196:	3728      	adds	r7, #40	@ 0x28
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40023800 	.word	0x40023800
 80021a0:	40020000 	.word	0x40020000

080021a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 80021a8:	bf00      	nop
 80021aa:	e7fd      	b.n	80021a8 <NMI_Handler+0x4>

080021ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm("BKPT #0\n");
 80021b0:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b2:	bf00      	nop
 80021b4:	e7fd      	b.n	80021b2 <HardFault_Handler+0x6>

080021b6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021ba:	bf00      	nop
 80021bc:	e7fd      	b.n	80021ba <MemManage_Handler+0x4>

080021be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c2:	bf00      	nop
 80021c4:	e7fd      	b.n	80021c2 <BusFault_Handler+0x4>

080021c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021ca:	bf00      	nop
 80021cc:	e7fd      	b.n	80021ca <UsageFault_Handler+0x4>

080021ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021fc:	f000 f9de 	bl	80025bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  system_ticks++;
 8002200:	4b03      	ldr	r3, [pc, #12]	@ (8002210 <SysTick_Handler+0x18>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	3301      	adds	r3, #1
 8002206:	4a02      	ldr	r2, [pc, #8]	@ (8002210 <SysTick_Handler+0x18>)
 8002208:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000950 	.word	0x20000950

08002214 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 8002218:	2000      	movs	r0, #0
 800221a:	f007 febd 	bl	8009f98 <dcd_int_handler>
	return;
 800221e:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002220:	bd80      	pop	{r7, pc}

08002222 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  return 1;
 8002226:	2301      	movs	r3, #1
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <_kill>:

int _kill(int pid, int sig)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800223c:	f008 feac 	bl	800af98 <__errno>
 8002240:	4603      	mov	r3, r0
 8002242:	2216      	movs	r2, #22
 8002244:	601a      	str	r2, [r3, #0]
  return -1;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <_exit>:

void _exit (int status)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800225a:	f04f 31ff 	mov.w	r1, #4294967295
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff ffe7 	bl	8002232 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002264:	bf00      	nop
 8002266:	e7fd      	b.n	8002264 <_exit+0x12>

08002268 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	e00a      	b.n	8002290 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800227a:	f3af 8000 	nop.w
 800227e:	4601      	mov	r1, r0
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	60ba      	str	r2, [r7, #8]
 8002286:	b2ca      	uxtb	r2, r1
 8002288:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	3301      	adds	r3, #1
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	429a      	cmp	r2, r3
 8002296:	dbf0      	blt.n	800227a <_read+0x12>
  }

  return len;
 8002298:	687b      	ldr	r3, [r7, #4]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b086      	sub	sp, #24
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	e009      	b.n	80022c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	60ba      	str	r2, [r7, #8]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	3301      	adds	r3, #1
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	dbf1      	blt.n	80022b4 <_write+0x12>
  }
  return len;
 80022d0:	687b      	ldr	r3, [r7, #4]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <_close>:

int _close(int file)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002302:	605a      	str	r2, [r3, #4]
  return 0;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <_isatty>:

int _isatty(int file)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800231a:	2301      	movs	r3, #1
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800234c:	4a14      	ldr	r2, [pc, #80]	@ (80023a0 <_sbrk+0x5c>)
 800234e:	4b15      	ldr	r3, [pc, #84]	@ (80023a4 <_sbrk+0x60>)
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002358:	4b13      	ldr	r3, [pc, #76]	@ (80023a8 <_sbrk+0x64>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d102      	bne.n	8002366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002360:	4b11      	ldr	r3, [pc, #68]	@ (80023a8 <_sbrk+0x64>)
 8002362:	4a12      	ldr	r2, [pc, #72]	@ (80023ac <_sbrk+0x68>)
 8002364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002366:	4b10      	ldr	r3, [pc, #64]	@ (80023a8 <_sbrk+0x64>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	429a      	cmp	r2, r3
 8002372:	d207      	bcs.n	8002384 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002374:	f008 fe10 	bl	800af98 <__errno>
 8002378:	4603      	mov	r3, r0
 800237a:	220c      	movs	r2, #12
 800237c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
 8002382:	e009      	b.n	8002398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002384:	4b08      	ldr	r3, [pc, #32]	@ (80023a8 <_sbrk+0x64>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800238a:	4b07      	ldr	r3, [pc, #28]	@ (80023a8 <_sbrk+0x64>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	4a05      	ldr	r2, [pc, #20]	@ (80023a8 <_sbrk+0x64>)
 8002394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002396:	68fb      	ldr	r3, [r7, #12]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20020000 	.word	0x20020000
 80023a4:	00000400 	.word	0x00000400
 80023a8:	20000954 	.word	0x20000954
 80023ac:	20000e90 	.word	0x20000e90

080023b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023b4:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <SystemInit+0x20>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ba:	4a05      	ldr	r2, [pc, #20]	@ (80023d0 <SystemInit+0x20>)
 80023bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 80023d8:	4b02      	ldr	r3, [pc, #8]	@ (80023e4 <tud_descriptor_device_cb+0x10>)
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	0800c754 	.word	0x0800c754

080023e8 <tud_hid_descriptor_report_cb>:

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_hid_descriptor_report_cb(uint8_t instance)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  (void) instance;
  return desc_hid_report;
 80023f2:	4b03      	ldr	r3, [pc, #12]	@ (8002400 <tud_hid_descriptor_report_cb+0x18>)
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	0800c768 	.word	0x0800c768

08002404 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
  (void) index; // for multiple configurations
  return desc_configuration;
 800240e:	4b03      	ldr	r3, [pc, #12]	@ (800241c <tud_descriptor_configuration_cb+0x18>)
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	0800c7c4 	.word	0x0800c7c4

08002420 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	460a      	mov	r2, r1
 800242a:	71fb      	strb	r3, [r7, #7]
 800242c:	4613      	mov	r3, r2
 800242e:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d108      	bne.n	8002448 <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8002436:	4b21      	ldr	r3, [pc, #132]	@ (80024bc <tud_descriptor_string_cb+0x9c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	b29a      	uxth	r2, r3
 800243e:	4b20      	ldr	r3, [pc, #128]	@ (80024c0 <tud_descriptor_string_cb+0xa0>)
 8002440:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 8002442:	2301      	movs	r3, #1
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	e027      	b.n	8002498 <tud_descriptor_string_cb+0x78>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	2b05      	cmp	r3, #5
 800244c:	d901      	bls.n	8002452 <tud_descriptor_string_cb+0x32>
 800244e:	2300      	movs	r3, #0
 8002450:	e02f      	b.n	80024b2 <tud_descriptor_string_cb+0x92>

    const char* str = string_desc_arr[index];
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	4a19      	ldr	r2, [pc, #100]	@ (80024bc <tud_descriptor_string_cb+0x9c>)
 8002456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245a:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = strlen(str);
 800245c:	68b8      	ldr	r0, [r7, #8]
 800245e:	f7fd fec9 	bl	80001f4 <strlen>
 8002462:	4603      	mov	r3, r0
 8002464:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	2b1f      	cmp	r3, #31
 800246a:	d901      	bls.n	8002470 <tud_descriptor_string_cb+0x50>
 800246c:	231f      	movs	r3, #31
 800246e:	73fb      	strb	r3, [r7, #15]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 8002470:	2300      	movs	r3, #0
 8002472:	73bb      	strb	r3, [r7, #14]
 8002474:	e00c      	b.n	8002490 <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 8002476:	7bbb      	ldrb	r3, [r7, #14]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	4413      	add	r3, r2
 800247c:	781a      	ldrb	r2, [r3, #0]
 800247e:	7bbb      	ldrb	r3, [r7, #14]
 8002480:	3301      	adds	r3, #1
 8002482:	4611      	mov	r1, r2
 8002484:	4a0e      	ldr	r2, [pc, #56]	@ (80024c0 <tud_descriptor_string_cb+0xa0>)
 8002486:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 800248a:	7bbb      	ldrb	r3, [r7, #14]
 800248c:	3301      	adds	r3, #1
 800248e:	73bb      	strb	r3, [r7, #14]
 8002490:	7bba      	ldrb	r2, [r7, #14]
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	429a      	cmp	r2, r3
 8002496:	d3ee      	bcc.n	8002476 <tud_descriptor_string_cb+0x56>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	3301      	adds	r3, #1
 800249c:	b29b      	uxth	r3, r3
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	b21b      	sxth	r3, r3
 80024a4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80024a8:	b21b      	sxth	r3, r3
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	4b04      	ldr	r3, [pc, #16]	@ (80024c0 <tud_descriptor_string_cb+0xa0>)
 80024ae:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 80024b0:	4b03      	ldr	r3, [pc, #12]	@ (80024c0 <tud_descriptor_string_cb+0xa0>)
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	2000004c 	.word	0x2000004c
 80024c0:	20000958 	.word	0x20000958

080024c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024c8:	f7ff ff72 	bl	80023b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024cc:	480c      	ldr	r0, [pc, #48]	@ (8002500 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024ce:	490d      	ldr	r1, [pc, #52]	@ (8002504 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002508 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024d4:	e002      	b.n	80024dc <LoopCopyDataInit>

080024d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024da:	3304      	adds	r3, #4

080024dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e0:	d3f9      	bcc.n	80024d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024e2:	4a0a      	ldr	r2, [pc, #40]	@ (800250c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002510 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e8:	e001      	b.n	80024ee <LoopFillZerobss>

080024ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024ec:	3204      	adds	r2, #4

080024ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f0:	d3fb      	bcc.n	80024ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024f2:	f008 fd57 	bl	800afa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024f6:	f7ff faf9 	bl	8001aec <main>
  bx  lr    
 80024fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002504:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8002508:	0800ca80 	.word	0x0800ca80
  ldr r2, =_sbss
 800250c:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8002510:	20000e90 	.word	0x20000e90

08002514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002514:	e7fe      	b.n	8002514 <ADC_IRQHandler>
	...

08002518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800251c:	4b0e      	ldr	r3, [pc, #56]	@ (8002558 <HAL_Init+0x40>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0d      	ldr	r2, [pc, #52]	@ (8002558 <HAL_Init+0x40>)
 8002522:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002526:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002528:	4b0b      	ldr	r3, [pc, #44]	@ (8002558 <HAL_Init+0x40>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0a      	ldr	r2, [pc, #40]	@ (8002558 <HAL_Init+0x40>)
 800252e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002532:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002534:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <HAL_Init+0x40>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a07      	ldr	r2, [pc, #28]	@ (8002558 <HAL_Init+0x40>)
 800253a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800253e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002540:	2003      	movs	r0, #3
 8002542:	f000 fd41 	bl	8002fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002546:	200f      	movs	r0, #15
 8002548:	f000 f808 	bl	800255c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800254c:	f7ff fd22 	bl	8001f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40023c00 	.word	0x40023c00

0800255c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002564:	4b12      	ldr	r3, [pc, #72]	@ (80025b0 <HAL_InitTick+0x54>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b12      	ldr	r3, [pc, #72]	@ (80025b4 <HAL_InitTick+0x58>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	4619      	mov	r1, r3
 800256e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002572:	fbb3 f3f1 	udiv	r3, r3, r1
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fd59 	bl	8003032 <HAL_SYSTICK_Config>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e00e      	b.n	80025a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b0f      	cmp	r3, #15
 800258e:	d80a      	bhi.n	80025a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002590:	2200      	movs	r2, #0
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	f04f 30ff 	mov.w	r0, #4294967295
 8002598:	f000 fd21 	bl	8002fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800259c:	4a06      	ldr	r2, [pc, #24]	@ (80025b8 <HAL_InitTick+0x5c>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e000      	b.n	80025a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000048 	.word	0x20000048
 80025b4:	20000068 	.word	0x20000068
 80025b8:	20000064 	.word	0x20000064

080025bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c0:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <HAL_IncTick+0x20>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <HAL_IncTick+0x24>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	4a04      	ldr	r2, [pc, #16]	@ (80025e0 <HAL_IncTick+0x24>)
 80025ce:	6013      	str	r3, [r2, #0]
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000068 	.word	0x20000068
 80025e0:	20000998 	.word	0x20000998

080025e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return uwTick;
 80025e8:	4b03      	ldr	r3, [pc, #12]	@ (80025f8 <HAL_GetTick+0x14>)
 80025ea:	681b      	ldr	r3, [r3, #0]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20000998 	.word	0x20000998

080025fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002604:	f7ff ffee 	bl	80025e4 <HAL_GetTick>
 8002608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d005      	beq.n	8002622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002616:	4b0a      	ldr	r3, [pc, #40]	@ (8002640 <HAL_Delay+0x44>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4413      	add	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002622:	bf00      	nop
 8002624:	f7ff ffde 	bl	80025e4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	429a      	cmp	r2, r3
 8002632:	d8f7      	bhi.n	8002624 <HAL_Delay+0x28>
  {
  }
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000068 	.word	0x20000068

08002644 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e033      	b.n	80026c2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff fcbe 	bl	8001fe4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b00      	cmp	r3, #0
 8002680:	d118      	bne.n	80026b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800268a:	f023 0302 	bic.w	r3, r3, #2
 800268e:	f043 0202 	orr.w	r2, r3, #2
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 faca 	bl	8002c30 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	f023 0303 	bic.w	r3, r3, #3
 80026aa:	f043 0201 	orr.w	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80026b2:	e001      	b.n	80026b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_ADC_Start+0x1a>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e097      	b.n	8002816 <HAL_ADC_Start+0x14a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d018      	beq.n	800272e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800270c:	4b45      	ldr	r3, [pc, #276]	@ (8002824 <HAL_ADC_Start+0x158>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a45      	ldr	r2, [pc, #276]	@ (8002828 <HAL_ADC_Start+0x15c>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	0c9a      	lsrs	r2, r3, #18
 8002718:	4613      	mov	r3, r2
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4413      	add	r3, r2
 800271e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002720:	e002      	b.n	8002728 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	3b01      	subs	r3, #1
 8002726:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f9      	bne.n	8002722 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b01      	cmp	r3, #1
 800273a:	d15f      	bne.n	80027fc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002766:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800277a:	d106      	bne.n	800278a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002780:	f023 0206 	bic.w	r2, r3, #6
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	645a      	str	r2, [r3, #68]	@ 0x44
 8002788:	e002      	b.n	8002790 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002798:	4b24      	ldr	r3, [pc, #144]	@ (800282c <HAL_ADC_Start+0x160>)
 800279a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80027a4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 031f 	and.w	r3, r3, #31
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10f      	bne.n	80027d2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d129      	bne.n	8002814 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	e020      	b.n	8002814 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a16      	ldr	r2, [pc, #88]	@ (8002830 <HAL_ADC_Start+0x164>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d11b      	bne.n	8002814 <HAL_ADC_Start+0x148>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d114      	bne.n	8002814 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	e00b      	b.n	8002814 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	f043 0210 	orr.w	r2, r3, #16
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280c:	f043 0201 	orr.w	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	20000048 	.word	0x20000048
 8002828:	431bde83 	.word	0x431bde83
 800282c:	40012300 	.word	0x40012300
 8002830:	40012000 	.word	0x40012000

08002834 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_ADC_Stop+0x16>
 8002846:	2302      	movs	r3, #2
 8002848:	e021      	b.n	800288e <HAL_ADC_Stop+0x5a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0201 	bic.w	r2, r2, #1
 8002860:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d109      	bne.n	8002884 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002874:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002878:	f023 0301 	bic.w	r3, r3, #1
 800287c:	f043 0201 	orr.w	r2, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028b6:	d113      	bne.n	80028e0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028c6:	d10b      	bne.n	80028e0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	f043 0220 	orr.w	r2, r3, #32
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e063      	b.n	80029a8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80028e0:	f7ff fe80 	bl	80025e4 <HAL_GetTick>
 80028e4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028e6:	e021      	b.n	800292c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ee:	d01d      	beq.n	800292c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <HAL_ADC_PollForConversion+0x6c>
 80028f6:	f7ff fe75 	bl	80025e4 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d212      	bcs.n	800292c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b02      	cmp	r3, #2
 8002912:	d00b      	beq.n	800292c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002918:	f043 0204 	orr.w	r2, r3, #4
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e03d      	b.n	80029a8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b02      	cmp	r3, #2
 8002938:	d1d6      	bne.n	80028e8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f06f 0212 	mvn.w	r2, #18
 8002942:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d123      	bne.n	80029a6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002962:	2b00      	cmp	r3, #0
 8002964:	d11f      	bne.n	80029a6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002970:	2b00      	cmp	r3, #0
 8002972:	d006      	beq.n	8002982 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800297e:	2b00      	cmp	r3, #0
 8002980:	d111      	bne.n	80029a6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d105      	bne.n	80029a6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	f043 0201 	orr.w	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x1c>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e113      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x244>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b09      	cmp	r3, #9
 80029f6:	d925      	bls.n	8002a44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68d9      	ldr	r1, [r3, #12]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	4613      	mov	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3b1e      	subs	r3, #30
 8002a0e:	2207      	movs	r2, #7
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43da      	mvns	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	400a      	ands	r2, r1
 8002a1c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68d9      	ldr	r1, [r3, #12]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	4618      	mov	r0, r3
 8002a30:	4603      	mov	r3, r0
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4403      	add	r3, r0
 8002a36:	3b1e      	subs	r3, #30
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	e022      	b.n	8002a8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6919      	ldr	r1, [r3, #16]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	4613      	mov	r3, r2
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	4413      	add	r3, r2
 8002a58:	2207      	movs	r2, #7
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	400a      	ands	r2, r1
 8002a66:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6919      	ldr	r1, [r3, #16]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	4618      	mov	r0, r3
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4403      	add	r3, r0
 8002a80:	409a      	lsls	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b06      	cmp	r3, #6
 8002a90:	d824      	bhi.n	8002adc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3b05      	subs	r3, #5
 8002aa4:	221f      	movs	r2, #31
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	400a      	ands	r2, r1
 8002ab2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	3b05      	subs	r3, #5
 8002ace:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ada:	e04c      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b0c      	cmp	r3, #12
 8002ae2:	d824      	bhi.n	8002b2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	3b23      	subs	r3, #35	@ 0x23
 8002af6:	221f      	movs	r2, #31
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43da      	mvns	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	400a      	ands	r2, r1
 8002b04:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	4618      	mov	r0, r3
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3b23      	subs	r3, #35	@ 0x23
 8002b20:	fa00 f203 	lsl.w	r2, r0, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b2c:	e023      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3b41      	subs	r3, #65	@ 0x41
 8002b40:	221f      	movs	r2, #31
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43da      	mvns	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	400a      	ands	r2, r1
 8002b4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	3b41      	subs	r3, #65	@ 0x41
 8002b6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b76:	4b29      	ldr	r3, [pc, #164]	@ (8002c1c <HAL_ADC_ConfigChannel+0x250>)
 8002b78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a28      	ldr	r2, [pc, #160]	@ (8002c20 <HAL_ADC_ConfigChannel+0x254>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d10f      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x1d8>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b12      	cmp	r3, #18
 8002b8a:	d10b      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c20 <HAL_ADC_ConfigChannel+0x254>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d12b      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x23a>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c24 <HAL_ADC_ConfigChannel+0x258>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d003      	beq.n	8002bc0 <HAL_ADC_ConfigChannel+0x1f4>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b11      	cmp	r3, #17
 8002bbe:	d122      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a11      	ldr	r2, [pc, #68]	@ (8002c24 <HAL_ADC_ConfigChannel+0x258>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d111      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002be2:	4b11      	ldr	r3, [pc, #68]	@ (8002c28 <HAL_ADC_ConfigChannel+0x25c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a11      	ldr	r2, [pc, #68]	@ (8002c2c <HAL_ADC_ConfigChannel+0x260>)
 8002be8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bec:	0c9a      	lsrs	r2, r3, #18
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bf8:	e002      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f9      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	40012300 	.word	0x40012300
 8002c20:	40012000 	.word	0x40012000
 8002c24:	10000012 	.word	0x10000012
 8002c28:	20000048 	.word	0x20000048
 8002c2c:	431bde83 	.word	0x431bde83

08002c30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c38:	4b79      	ldr	r3, [pc, #484]	@ (8002e20 <ADC_Init+0x1f0>)
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	431a      	orrs	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6859      	ldr	r1, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	021a      	lsls	r2, r3, #8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002c88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6859      	ldr	r1, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002caa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6899      	ldr	r1, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc2:	4a58      	ldr	r2, [pc, #352]	@ (8002e24 <ADC_Init+0x1f4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d022      	beq.n	8002d0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6899      	ldr	r1, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002cf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6899      	ldr	r1, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	e00f      	b.n	8002d2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d2c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0202 	bic.w	r2, r2, #2
 8002d3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6899      	ldr	r1, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7e1b      	ldrb	r3, [r3, #24]
 8002d48:	005a      	lsls	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d01b      	beq.n	8002d94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d6a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002d7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6859      	ldr	r1, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d86:	3b01      	subs	r3, #1
 8002d88:	035a      	lsls	r2, r3, #13
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	e007      	b.n	8002da4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002da2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002db2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	051a      	lsls	r2, r3, #20
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002dd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6899      	ldr	r1, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002de6:	025a      	lsls	r2, r3, #9
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6899      	ldr	r1, [r3, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	029a      	lsls	r2, r3, #10
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	609a      	str	r2, [r3, #8]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	40012300 	.word	0x40012300
 8002e24:	0f000001 	.word	0x0f000001

08002e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e38:	4b0c      	ldr	r3, [pc, #48]	@ (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e44:	4013      	ands	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e5a:	4a04      	ldr	r2, [pc, #16]	@ (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	60d3      	str	r3, [r2, #12]
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e74:	4b04      	ldr	r3, [pc, #16]	@ (8002e88 <__NVIC_GetPriorityGrouping+0x18>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	f003 0307 	and.w	r3, r3, #7
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	db0b      	blt.n	8002eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	f003 021f 	and.w	r2, r3, #31
 8002ea4:	4907      	ldr	r1, [pc, #28]	@ (8002ec4 <__NVIC_EnableIRQ+0x38>)
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	2001      	movs	r0, #1
 8002eae:	fa00 f202 	lsl.w	r2, r0, r2
 8002eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	e000e100 	.word	0xe000e100

08002ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	6039      	str	r1, [r7, #0]
 8002ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	db0a      	blt.n	8002ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	490c      	ldr	r1, [pc, #48]	@ (8002f14 <__NVIC_SetPriority+0x4c>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	0112      	lsls	r2, r2, #4
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	440b      	add	r3, r1
 8002eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef0:	e00a      	b.n	8002f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4908      	ldr	r1, [pc, #32]	@ (8002f18 <__NVIC_SetPriority+0x50>)
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	3b04      	subs	r3, #4
 8002f00:	0112      	lsls	r2, r2, #4
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	440b      	add	r3, r1
 8002f06:	761a      	strb	r2, [r3, #24]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000e100 	.word	0xe000e100
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	@ 0x24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f1c3 0307 	rsb	r3, r3, #7
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	bf28      	it	cs
 8002f3a:	2304      	movcs	r3, #4
 8002f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2b06      	cmp	r3, #6
 8002f44:	d902      	bls.n	8002f4c <NVIC_EncodePriority+0x30>
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3b03      	subs	r3, #3
 8002f4a:	e000      	b.n	8002f4e <NVIC_EncodePriority+0x32>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f50:	f04f 32ff 	mov.w	r2, #4294967295
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	401a      	ands	r2, r3
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f64:	f04f 31ff 	mov.w	r1, #4294967295
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	43d9      	mvns	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f74:	4313      	orrs	r3, r2
         );
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3724      	adds	r7, #36	@ 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f94:	d301      	bcc.n	8002f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f96:	2301      	movs	r3, #1
 8002f98:	e00f      	b.n	8002fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc4 <SysTick_Config+0x40>)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fa2:	210f      	movs	r1, #15
 8002fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa8:	f7ff ff8e 	bl	8002ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fac:	4b05      	ldr	r3, [pc, #20]	@ (8002fc4 <SysTick_Config+0x40>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fb2:	4b04      	ldr	r3, [pc, #16]	@ (8002fc4 <SysTick_Config+0x40>)
 8002fb4:	2207      	movs	r2, #7
 8002fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	e000e010 	.word	0xe000e010

08002fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ff29 	bl	8002e28 <__NVIC_SetPriorityGrouping>
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ff0:	f7ff ff3e 	bl	8002e70 <__NVIC_GetPriorityGrouping>
 8002ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	6978      	ldr	r0, [r7, #20]
 8002ffc:	f7ff ff8e 	bl	8002f1c <NVIC_EncodePriority>
 8003000:	4602      	mov	r2, r0
 8003002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff5d 	bl	8002ec8 <__NVIC_SetPriority>
}
 800300e:	bf00      	nop
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	4603      	mov	r3, r0
 800301e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff ff31 	bl	8002e8c <__NVIC_EnableIRQ>
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff ffa2 	bl	8002f84 <SysTick_Config>
 8003040:	4603      	mov	r3, r0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800305e:	4b23      	ldr	r3, [pc, #140]	@ (80030ec <HAL_FLASH_Program+0xa0>)
 8003060:	7e1b      	ldrb	r3, [r3, #24]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_FLASH_Program+0x1e>
 8003066:	2302      	movs	r3, #2
 8003068:	e03b      	b.n	80030e2 <HAL_FLASH_Program+0x96>
 800306a:	4b20      	ldr	r3, [pc, #128]	@ (80030ec <HAL_FLASH_Program+0xa0>)
 800306c:	2201      	movs	r2, #1
 800306e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003070:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003074:	f000 f870 	bl	8003158 <FLASH_WaitForLastOperation>
 8003078:	4603      	mov	r3, r0
 800307a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800307c:	7dfb      	ldrb	r3, [r7, #23]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d12b      	bne.n	80030da <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d105      	bne.n	8003094 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003088:	783b      	ldrb	r3, [r7, #0]
 800308a:	4619      	mov	r1, r3
 800308c:	68b8      	ldr	r0, [r7, #8]
 800308e:	f000 f91b 	bl	80032c8 <FLASH_Program_Byte>
 8003092:	e016      	b.n	80030c2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d105      	bne.n	80030a6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800309a:	883b      	ldrh	r3, [r7, #0]
 800309c:	4619      	mov	r1, r3
 800309e:	68b8      	ldr	r0, [r7, #8]
 80030a0:	f000 f8ee 	bl	8003280 <FLASH_Program_HalfWord>
 80030a4:	e00d      	b.n	80030c2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d105      	bne.n	80030b8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4619      	mov	r1, r3
 80030b0:	68b8      	ldr	r0, [r7, #8]
 80030b2:	f000 f8c3 	bl	800323c <FLASH_Program_Word>
 80030b6:	e004      	b.n	80030c2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80030b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030bc:	68b8      	ldr	r0, [r7, #8]
 80030be:	f000 f88b 	bl	80031d8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80030c2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80030c6:	f000 f847 	bl	8003158 <FLASH_WaitForLastOperation>
 80030ca:	4603      	mov	r3, r0
 80030cc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80030ce:	4b08      	ldr	r3, [pc, #32]	@ (80030f0 <HAL_FLASH_Program+0xa4>)
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	4a07      	ldr	r2, [pc, #28]	@ (80030f0 <HAL_FLASH_Program+0xa4>)
 80030d4:	f023 0301 	bic.w	r3, r3, #1
 80030d8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80030da:	4b04      	ldr	r3, [pc, #16]	@ (80030ec <HAL_FLASH_Program+0xa0>)
 80030dc:	2200      	movs	r2, #0
 80030de:	761a      	strb	r2, [r3, #24]
  
  return status;
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	2000099c 	.word	0x2000099c
 80030f0:	40023c00 	.word	0x40023c00

080030f4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80030fe:	4b0b      	ldr	r3, [pc, #44]	@ (800312c <HAL_FLASH_Unlock+0x38>)
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	2b00      	cmp	r3, #0
 8003104:	da0b      	bge.n	800311e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003106:	4b09      	ldr	r3, [pc, #36]	@ (800312c <HAL_FLASH_Unlock+0x38>)
 8003108:	4a09      	ldr	r2, [pc, #36]	@ (8003130 <HAL_FLASH_Unlock+0x3c>)
 800310a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800310c:	4b07      	ldr	r3, [pc, #28]	@ (800312c <HAL_FLASH_Unlock+0x38>)
 800310e:	4a09      	ldr	r2, [pc, #36]	@ (8003134 <HAL_FLASH_Unlock+0x40>)
 8003110:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003112:	4b06      	ldr	r3, [pc, #24]	@ (800312c <HAL_FLASH_Unlock+0x38>)
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	2b00      	cmp	r3, #0
 8003118:	da01      	bge.n	800311e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800311e:	79fb      	ldrb	r3, [r7, #7]
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	40023c00 	.word	0x40023c00
 8003130:	45670123 	.word	0x45670123
 8003134:	cdef89ab 	.word	0xcdef89ab

08003138 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800313c:	4b05      	ldr	r3, [pc, #20]	@ (8003154 <HAL_FLASH_Lock+0x1c>)
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	4a04      	ldr	r2, [pc, #16]	@ (8003154 <HAL_FLASH_Lock+0x1c>)
 8003142:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003146:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	40023c00 	.word	0x40023c00

08003158 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003164:	4b1a      	ldr	r3, [pc, #104]	@ (80031d0 <FLASH_WaitForLastOperation+0x78>)
 8003166:	2200      	movs	r2, #0
 8003168:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800316a:	f7ff fa3b 	bl	80025e4 <HAL_GetTick>
 800316e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003170:	e010      	b.n	8003194 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003178:	d00c      	beq.n	8003194 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d007      	beq.n	8003190 <FLASH_WaitForLastOperation+0x38>
 8003180:	f7ff fa30 	bl	80025e4 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	d201      	bcs.n	8003194 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e019      	b.n	80031c8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003194:	4b0f      	ldr	r3, [pc, #60]	@ (80031d4 <FLASH_WaitForLastOperation+0x7c>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1e8      	bne.n	8003172 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80031a0:	4b0c      	ldr	r3, [pc, #48]	@ (80031d4 <FLASH_WaitForLastOperation+0x7c>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80031ac:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <FLASH_WaitForLastOperation+0x7c>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80031b2:	4b08      	ldr	r3, [pc, #32]	@ (80031d4 <FLASH_WaitForLastOperation+0x7c>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80031be:	f000 f8a5 	bl	800330c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
  
}  
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	2000099c 	.word	0x2000099c
 80031d4:	40023c00 	.word	0x40023c00

080031d8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80031e4:	4b14      	ldr	r3, [pc, #80]	@ (8003238 <FLASH_Program_DoubleWord+0x60>)
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	4a13      	ldr	r2, [pc, #76]	@ (8003238 <FLASH_Program_DoubleWord+0x60>)
 80031ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80031f0:	4b11      	ldr	r3, [pc, #68]	@ (8003238 <FLASH_Program_DoubleWord+0x60>)
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	4a10      	ldr	r2, [pc, #64]	@ (8003238 <FLASH_Program_DoubleWord+0x60>)
 80031f6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80031fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80031fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003238 <FLASH_Program_DoubleWord+0x60>)
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	4a0d      	ldr	r2, [pc, #52]	@ (8003238 <FLASH_Program_DoubleWord+0x60>)
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800320e:	f3bf 8f6f 	isb	sy
}
 8003212:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003214:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	000a      	movs	r2, r1
 8003222:	2300      	movs	r3, #0
 8003224:	68f9      	ldr	r1, [r7, #12]
 8003226:	3104      	adds	r1, #4
 8003228:	4613      	mov	r3, r2
 800322a:	600b      	str	r3, [r1, #0]
}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	40023c00 	.word	0x40023c00

0800323c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003246:	4b0d      	ldr	r3, [pc, #52]	@ (800327c <FLASH_Program_Word+0x40>)
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	4a0c      	ldr	r2, [pc, #48]	@ (800327c <FLASH_Program_Word+0x40>)
 800324c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003250:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003252:	4b0a      	ldr	r3, [pc, #40]	@ (800327c <FLASH_Program_Word+0x40>)
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	4a09      	ldr	r2, [pc, #36]	@ (800327c <FLASH_Program_Word+0x40>)
 8003258:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800325c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800325e:	4b07      	ldr	r3, [pc, #28]	@ (800327c <FLASH_Program_Word+0x40>)
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	4a06      	ldr	r2, [pc, #24]	@ (800327c <FLASH_Program_Word+0x40>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	601a      	str	r2, [r3, #0]
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	40023c00 	.word	0x40023c00

08003280 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800328c:	4b0d      	ldr	r3, [pc, #52]	@ (80032c4 <FLASH_Program_HalfWord+0x44>)
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	4a0c      	ldr	r2, [pc, #48]	@ (80032c4 <FLASH_Program_HalfWord+0x44>)
 8003292:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003296:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003298:	4b0a      	ldr	r3, [pc, #40]	@ (80032c4 <FLASH_Program_HalfWord+0x44>)
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	4a09      	ldr	r2, [pc, #36]	@ (80032c4 <FLASH_Program_HalfWord+0x44>)
 800329e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80032a4:	4b07      	ldr	r3, [pc, #28]	@ (80032c4 <FLASH_Program_HalfWord+0x44>)
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	4a06      	ldr	r2, [pc, #24]	@ (80032c4 <FLASH_Program_HalfWord+0x44>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	887a      	ldrh	r2, [r7, #2]
 80032b4:	801a      	strh	r2, [r3, #0]
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40023c00 	.word	0x40023c00

080032c8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80032d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003308 <FLASH_Program_Byte+0x40>)
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003308 <FLASH_Program_Byte+0x40>)
 80032da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80032e0:	4b09      	ldr	r3, [pc, #36]	@ (8003308 <FLASH_Program_Byte+0x40>)
 80032e2:	4a09      	ldr	r2, [pc, #36]	@ (8003308 <FLASH_Program_Byte+0x40>)
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80032e8:	4b07      	ldr	r3, [pc, #28]	@ (8003308 <FLASH_Program_Byte+0x40>)
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	4a06      	ldr	r2, [pc, #24]	@ (8003308 <FLASH_Program_Byte+0x40>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	78fa      	ldrb	r2, [r7, #3]
 80032f8:	701a      	strb	r2, [r3, #0]
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40023c00 	.word	0x40023c00

0800330c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003310:	4b2f      	ldr	r3, [pc, #188]	@ (80033d0 <FLASH_SetErrorCode+0xc4>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800331c:	4b2d      	ldr	r3, [pc, #180]	@ (80033d4 <FLASH_SetErrorCode+0xc8>)
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	f043 0310 	orr.w	r3, r3, #16
 8003324:	4a2b      	ldr	r2, [pc, #172]	@ (80033d4 <FLASH_SetErrorCode+0xc8>)
 8003326:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003328:	4b29      	ldr	r3, [pc, #164]	@ (80033d0 <FLASH_SetErrorCode+0xc4>)
 800332a:	2210      	movs	r2, #16
 800332c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800332e:	4b28      	ldr	r3, [pc, #160]	@ (80033d0 <FLASH_SetErrorCode+0xc4>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f003 0320 	and.w	r3, r3, #32
 8003336:	2b00      	cmp	r3, #0
 8003338:	d008      	beq.n	800334c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800333a:	4b26      	ldr	r3, [pc, #152]	@ (80033d4 <FLASH_SetErrorCode+0xc8>)
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f043 0308 	orr.w	r3, r3, #8
 8003342:	4a24      	ldr	r2, [pc, #144]	@ (80033d4 <FLASH_SetErrorCode+0xc8>)
 8003344:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003346:	4b22      	ldr	r3, [pc, #136]	@ (80033d0 <FLASH_SetErrorCode+0xc4>)
 8003348:	2220      	movs	r2, #32
 800334a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800334c:	4b20      	ldr	r3, [pc, #128]	@ (80033d0 <FLASH_SetErrorCode+0xc4>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d008      	beq.n	800336a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003358:	4b1e      	ldr	r3, [pc, #120]	@ (80033d4 <FLASH_SetErrorCode+0xc8>)
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	f043 0304 	orr.w	r3, r3, #4
 8003360:	4a1c      	ldr	r2, [pc, #112]	@ (80033d4 <FLASH_SetErrorCode+0xc8>)
 8003362:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003364:	4b1a      	ldr	r3, [pc, #104]	@ (80033d0 <FLASH_SetErrorCode+0xc4>)
 8003366:	2240      	movs	r2, #64	@ 0x40
 8003368:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800336a:	4b19      	ldr	r3, [pc, #100]	@ (80033d0 <FLASH_SetErrorCode+0xc4>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003372:	2b00      	cmp	r3, #0
 8003374:	d008      	beq.n	8003388 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003376:	4b17      	ldr	r3, [pc, #92]	@ (80033d4 <FLASH_SetErrorCode+0xc8>)
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f043 0302 	orr.w	r3, r3, #2
 800337e:	4a15      	ldr	r2, [pc, #84]	@ (80033d4 <FLASH_SetErrorCode+0xc8>)
 8003380:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003382:	4b13      	ldr	r3, [pc, #76]	@ (80033d0 <FLASH_SetErrorCode+0xc4>)
 8003384:	2280      	movs	r2, #128	@ 0x80
 8003386:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003388:	4b11      	ldr	r3, [pc, #68]	@ (80033d0 <FLASH_SetErrorCode+0xc4>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003390:	2b00      	cmp	r3, #0
 8003392:	d009      	beq.n	80033a8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003394:	4b0f      	ldr	r3, [pc, #60]	@ (80033d4 <FLASH_SetErrorCode+0xc8>)
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	4a0d      	ldr	r2, [pc, #52]	@ (80033d4 <FLASH_SetErrorCode+0xc8>)
 800339e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80033a0:	4b0b      	ldr	r3, [pc, #44]	@ (80033d0 <FLASH_SetErrorCode+0xc4>)
 80033a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033a6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80033a8:	4b09      	ldr	r3, [pc, #36]	@ (80033d0 <FLASH_SetErrorCode+0xc4>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80033b4:	4b07      	ldr	r3, [pc, #28]	@ (80033d4 <FLASH_SetErrorCode+0xc8>)
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	f043 0320 	orr.w	r3, r3, #32
 80033bc:	4a05      	ldr	r2, [pc, #20]	@ (80033d4 <FLASH_SetErrorCode+0xc8>)
 80033be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80033c0:	4b03      	ldr	r3, [pc, #12]	@ (80033d0 <FLASH_SetErrorCode+0xc4>)
 80033c2:	2202      	movs	r2, #2
 80033c4:	60da      	str	r2, [r3, #12]
  }
}
 80033c6:	bf00      	nop
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	40023c00 	.word	0x40023c00
 80033d4:	2000099c 	.word	0x2000099c

080033d8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	e010      	b.n	8003416 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d103      	bne.n	8003402 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80033fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	e009      	b.n	8003416 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d103      	bne.n	8003410 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003408:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	e002      	b.n	8003416 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003410:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003414:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003416:	4b13      	ldr	r3, [pc, #76]	@ (8003464 <FLASH_Erase_Sector+0x8c>)
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	4a12      	ldr	r2, [pc, #72]	@ (8003464 <FLASH_Erase_Sector+0x8c>)
 800341c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003420:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003422:	4b10      	ldr	r3, [pc, #64]	@ (8003464 <FLASH_Erase_Sector+0x8c>)
 8003424:	691a      	ldr	r2, [r3, #16]
 8003426:	490f      	ldr	r1, [pc, #60]	@ (8003464 <FLASH_Erase_Sector+0x8c>)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4313      	orrs	r3, r2
 800342c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800342e:	4b0d      	ldr	r3, [pc, #52]	@ (8003464 <FLASH_Erase_Sector+0x8c>)
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	4a0c      	ldr	r2, [pc, #48]	@ (8003464 <FLASH_Erase_Sector+0x8c>)
 8003434:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003438:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800343a:	4b0a      	ldr	r3, [pc, #40]	@ (8003464 <FLASH_Erase_Sector+0x8c>)
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4313      	orrs	r3, r2
 8003444:	4a07      	ldr	r2, [pc, #28]	@ (8003464 <FLASH_Erase_Sector+0x8c>)
 8003446:	f043 0302 	orr.w	r3, r3, #2
 800344a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800344c:	4b05      	ldr	r3, [pc, #20]	@ (8003464 <FLASH_Erase_Sector+0x8c>)
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	4a04      	ldr	r2, [pc, #16]	@ (8003464 <FLASH_Erase_Sector+0x8c>)
 8003452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003456:	6113      	str	r3, [r2, #16]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	40023c00 	.word	0x40023c00

08003468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003468:	b480      	push	{r7}
 800346a:	b089      	sub	sp, #36	@ 0x24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800347a:	2300      	movs	r3, #0
 800347c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
 8003482:	e159      	b.n	8003738 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003484:	2201      	movs	r2, #1
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	429a      	cmp	r2, r3
 800349e:	f040 8148 	bne.w	8003732 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d005      	beq.n	80034ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d130      	bne.n	800351c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	2203      	movs	r2, #3
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43db      	mvns	r3, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4013      	ands	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034f0:	2201      	movs	r2, #1
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	091b      	lsrs	r3, r3, #4
 8003506:	f003 0201 	and.w	r2, r3, #1
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4313      	orrs	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	2b03      	cmp	r3, #3
 8003526:	d017      	beq.n	8003558 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	2203      	movs	r2, #3
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4013      	ands	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d123      	bne.n	80035ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	08da      	lsrs	r2, r3, #3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3208      	adds	r2, #8
 800356c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003570:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	220f      	movs	r2, #15
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	08da      	lsrs	r2, r3, #3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3208      	adds	r2, #8
 80035a6:	69b9      	ldr	r1, [r7, #24]
 80035a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	2203      	movs	r2, #3
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 0203 	and.w	r2, r3, #3
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80a2 	beq.w	8003732 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	4b57      	ldr	r3, [pc, #348]	@ (8003750 <HAL_GPIO_Init+0x2e8>)
 80035f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f6:	4a56      	ldr	r2, [pc, #344]	@ (8003750 <HAL_GPIO_Init+0x2e8>)
 80035f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80035fe:	4b54      	ldr	r3, [pc, #336]	@ (8003750 <HAL_GPIO_Init+0x2e8>)
 8003600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800360a:	4a52      	ldr	r2, [pc, #328]	@ (8003754 <HAL_GPIO_Init+0x2ec>)
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	089b      	lsrs	r3, r3, #2
 8003610:	3302      	adds	r3, #2
 8003612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	220f      	movs	r2, #15
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	43db      	mvns	r3, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4013      	ands	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a49      	ldr	r2, [pc, #292]	@ (8003758 <HAL_GPIO_Init+0x2f0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d019      	beq.n	800366a <HAL_GPIO_Init+0x202>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a48      	ldr	r2, [pc, #288]	@ (800375c <HAL_GPIO_Init+0x2f4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d013      	beq.n	8003666 <HAL_GPIO_Init+0x1fe>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a47      	ldr	r2, [pc, #284]	@ (8003760 <HAL_GPIO_Init+0x2f8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00d      	beq.n	8003662 <HAL_GPIO_Init+0x1fa>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a46      	ldr	r2, [pc, #280]	@ (8003764 <HAL_GPIO_Init+0x2fc>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d007      	beq.n	800365e <HAL_GPIO_Init+0x1f6>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a45      	ldr	r2, [pc, #276]	@ (8003768 <HAL_GPIO_Init+0x300>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d101      	bne.n	800365a <HAL_GPIO_Init+0x1f2>
 8003656:	2304      	movs	r3, #4
 8003658:	e008      	b.n	800366c <HAL_GPIO_Init+0x204>
 800365a:	2307      	movs	r3, #7
 800365c:	e006      	b.n	800366c <HAL_GPIO_Init+0x204>
 800365e:	2303      	movs	r3, #3
 8003660:	e004      	b.n	800366c <HAL_GPIO_Init+0x204>
 8003662:	2302      	movs	r3, #2
 8003664:	e002      	b.n	800366c <HAL_GPIO_Init+0x204>
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <HAL_GPIO_Init+0x204>
 800366a:	2300      	movs	r3, #0
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	f002 0203 	and.w	r2, r2, #3
 8003672:	0092      	lsls	r2, r2, #2
 8003674:	4093      	lsls	r3, r2
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4313      	orrs	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800367c:	4935      	ldr	r1, [pc, #212]	@ (8003754 <HAL_GPIO_Init+0x2ec>)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	089b      	lsrs	r3, r3, #2
 8003682:	3302      	adds	r3, #2
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800368a:	4b38      	ldr	r3, [pc, #224]	@ (800376c <HAL_GPIO_Init+0x304>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	43db      	mvns	r3, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4013      	ands	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036ae:	4a2f      	ldr	r2, [pc, #188]	@ (800376c <HAL_GPIO_Init+0x304>)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036b4:	4b2d      	ldr	r3, [pc, #180]	@ (800376c <HAL_GPIO_Init+0x304>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	43db      	mvns	r3, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4013      	ands	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036d8:	4a24      	ldr	r2, [pc, #144]	@ (800376c <HAL_GPIO_Init+0x304>)
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036de:	4b23      	ldr	r3, [pc, #140]	@ (800376c <HAL_GPIO_Init+0x304>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003702:	4a1a      	ldr	r2, [pc, #104]	@ (800376c <HAL_GPIO_Init+0x304>)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003708:	4b18      	ldr	r3, [pc, #96]	@ (800376c <HAL_GPIO_Init+0x304>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800372c:	4a0f      	ldr	r2, [pc, #60]	@ (800376c <HAL_GPIO_Init+0x304>)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	3301      	adds	r3, #1
 8003736:	61fb      	str	r3, [r7, #28]
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	2b0f      	cmp	r3, #15
 800373c:	f67f aea2 	bls.w	8003484 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	3724      	adds	r7, #36	@ 0x24
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800
 8003754:	40013800 	.word	0x40013800
 8003758:	40020000 	.word	0x40020000
 800375c:	40020400 	.word	0x40020400
 8003760:	40020800 	.word	0x40020800
 8003764:	40020c00 	.word	0x40020c00
 8003768:	40021000 	.word	0x40021000
 800376c:	40013c00 	.word	0x40013c00

08003770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	807b      	strh	r3, [r7, #2]
 800377c:	4613      	mov	r3, r2
 800377e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003780:	787b      	ldrb	r3, [r7, #1]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003786:	887a      	ldrh	r2, [r7, #2]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800378c:	e003      	b.n	8003796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800378e:	887b      	ldrh	r3, [r7, #2]
 8003790:	041a      	lsls	r2, r3, #16
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	619a      	str	r2, [r3, #24]
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
	...

080037a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e12b      	b.n	8003a0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fe fc4e 	bl	800206c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2224      	movs	r2, #36	@ 0x24
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0201 	bic.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003806:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003808:	f000 fe50 	bl	80044ac <HAL_RCC_GetPCLK1Freq>
 800380c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	4a81      	ldr	r2, [pc, #516]	@ (8003a18 <HAL_I2C_Init+0x274>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d807      	bhi.n	8003828 <HAL_I2C_Init+0x84>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4a80      	ldr	r2, [pc, #512]	@ (8003a1c <HAL_I2C_Init+0x278>)
 800381c:	4293      	cmp	r3, r2
 800381e:	bf94      	ite	ls
 8003820:	2301      	movls	r3, #1
 8003822:	2300      	movhi	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	e006      	b.n	8003836 <HAL_I2C_Init+0x92>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4a7d      	ldr	r2, [pc, #500]	@ (8003a20 <HAL_I2C_Init+0x27c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	bf94      	ite	ls
 8003830:	2301      	movls	r3, #1
 8003832:	2300      	movhi	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e0e7      	b.n	8003a0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4a78      	ldr	r2, [pc, #480]	@ (8003a24 <HAL_I2C_Init+0x280>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	0c9b      	lsrs	r3, r3, #18
 8003848:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	430a      	orrs	r2, r1
 800385c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4a6a      	ldr	r2, [pc, #424]	@ (8003a18 <HAL_I2C_Init+0x274>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d802      	bhi.n	8003878 <HAL_I2C_Init+0xd4>
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	3301      	adds	r3, #1
 8003876:	e009      	b.n	800388c <HAL_I2C_Init+0xe8>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800387e:	fb02 f303 	mul.w	r3, r2, r3
 8003882:	4a69      	ldr	r2, [pc, #420]	@ (8003a28 <HAL_I2C_Init+0x284>)
 8003884:	fba2 2303 	umull	r2, r3, r2, r3
 8003888:	099b      	lsrs	r3, r3, #6
 800388a:	3301      	adds	r3, #1
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6812      	ldr	r2, [r2, #0]
 8003890:	430b      	orrs	r3, r1
 8003892:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800389e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	495c      	ldr	r1, [pc, #368]	@ (8003a18 <HAL_I2C_Init+0x274>)
 80038a8:	428b      	cmp	r3, r1
 80038aa:	d819      	bhi.n	80038e0 <HAL_I2C_Init+0x13c>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1e59      	subs	r1, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ba:	1c59      	adds	r1, r3, #1
 80038bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038c0:	400b      	ands	r3, r1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_I2C_Init+0x138>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	1e59      	subs	r1, r3, #1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80038d4:	3301      	adds	r3, #1
 80038d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038da:	e051      	b.n	8003980 <HAL_I2C_Init+0x1dc>
 80038dc:	2304      	movs	r3, #4
 80038de:	e04f      	b.n	8003980 <HAL_I2C_Init+0x1dc>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d111      	bne.n	800390c <HAL_I2C_Init+0x168>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	1e58      	subs	r0, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6859      	ldr	r1, [r3, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	440b      	add	r3, r1
 80038f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038fa:	3301      	adds	r3, #1
 80038fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003900:	2b00      	cmp	r3, #0
 8003902:	bf0c      	ite	eq
 8003904:	2301      	moveq	r3, #1
 8003906:	2300      	movne	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	e012      	b.n	8003932 <HAL_I2C_Init+0x18e>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	1e58      	subs	r0, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6859      	ldr	r1, [r3, #4]
 8003914:	460b      	mov	r3, r1
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	0099      	lsls	r1, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003922:	3301      	adds	r3, #1
 8003924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003928:	2b00      	cmp	r3, #0
 800392a:	bf0c      	ite	eq
 800392c:	2301      	moveq	r3, #1
 800392e:	2300      	movne	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_I2C_Init+0x196>
 8003936:	2301      	movs	r3, #1
 8003938:	e022      	b.n	8003980 <HAL_I2C_Init+0x1dc>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10e      	bne.n	8003960 <HAL_I2C_Init+0x1bc>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1e58      	subs	r0, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6859      	ldr	r1, [r3, #4]
 800394a:	460b      	mov	r3, r1
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	440b      	add	r3, r1
 8003950:	fbb0 f3f3 	udiv	r3, r0, r3
 8003954:	3301      	adds	r3, #1
 8003956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800395a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800395e:	e00f      	b.n	8003980 <HAL_I2C_Init+0x1dc>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	1e58      	subs	r0, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6859      	ldr	r1, [r3, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	0099      	lsls	r1, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	fbb0 f3f3 	udiv	r3, r0, r3
 8003976:	3301      	adds	r3, #1
 8003978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800397c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	6809      	ldr	r1, [r1, #0]
 8003984:	4313      	orrs	r3, r2
 8003986:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69da      	ldr	r2, [r3, #28]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6911      	ldr	r1, [r2, #16]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	68d2      	ldr	r2, [r2, #12]
 80039ba:	4311      	orrs	r1, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	430b      	orrs	r3, r1
 80039c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0201 	orr.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	000186a0 	.word	0x000186a0
 8003a1c:	001e847f 	.word	0x001e847f
 8003a20:	003d08ff 	.word	0x003d08ff
 8003a24:	431bde83 	.word	0x431bde83
 8003a28:	10624dd3 	.word	0x10624dd3

08003a2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e101      	b.n	8003c42 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d106      	bne.n	8003a5e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7fe fb4f 	bl	80020fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2203      	movs	r2, #3
 8003a62:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a6c:	d102      	bne.n	8003a74 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 fd8f 	bl	800459c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	7c1a      	ldrb	r2, [r3, #16]
 8003a86:	f88d 2000 	strb.w	r2, [sp]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a8e:	f000 fd21 	bl	80044d4 <USB_CoreInit>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0ce      	b.n	8003c42 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fd87 	bl	80045be <USB_SetCurrentMode>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e0bf      	b.n	8003c42 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	73fb      	strb	r3, [r7, #15]
 8003ac6:	e04a      	b.n	8003b5e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ac8:	7bfa      	ldrb	r2, [r7, #15]
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	3315      	adds	r3, #21
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003adc:	7bfa      	ldrb	r2, [r7, #15]
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	3314      	adds	r3, #20
 8003aec:	7bfa      	ldrb	r2, [r7, #15]
 8003aee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003af0:	7bfa      	ldrb	r2, [r7, #15]
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	b298      	uxth	r0, r3
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	332e      	adds	r3, #46	@ 0x2e
 8003b04:	4602      	mov	r2, r0
 8003b06:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b08:	7bfa      	ldrb	r2, [r7, #15]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	3318      	adds	r3, #24
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	331c      	adds	r3, #28
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b30:	7bfa      	ldrb	r2, [r7, #15]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	3320      	adds	r3, #32
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b44:	7bfa      	ldrb	r2, [r7, #15]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	3324      	adds	r3, #36	@ 0x24
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	73fb      	strb	r3, [r7, #15]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	791b      	ldrb	r3, [r3, #4]
 8003b62:	7bfa      	ldrb	r2, [r7, #15]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d3af      	bcc.n	8003ac8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b68:	2300      	movs	r3, #0
 8003b6a:	73fb      	strb	r3, [r7, #15]
 8003b6c:	e044      	b.n	8003bf8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b6e:	7bfa      	ldrb	r2, [r7, #15]
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003b80:	2200      	movs	r2, #0
 8003b82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b84:	7bfa      	ldrb	r2, [r7, #15]
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003b96:	7bfa      	ldrb	r2, [r7, #15]
 8003b98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b9a:	7bfa      	ldrb	r2, [r7, #15]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	4413      	add	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bc6:	7bfa      	ldrb	r2, [r7, #15]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4413      	add	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	791b      	ldrb	r3, [r3, #4]
 8003bfc:	7bfa      	ldrb	r2, [r7, #15]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d3b5      	bcc.n	8003b6e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	7c1a      	ldrb	r2, [r3, #16]
 8003c0a:	f88d 2000 	strb.w	r2, [sp]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c12:	f000 fd21 	bl	8004658 <USB_DevInit>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e00c      	b.n	8003c42 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fee9 	bl	8004a12 <USB_DevDisconnect>

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
	...

08003c4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e267      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d075      	beq.n	8003d56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c6a:	4b88      	ldr	r3, [pc, #544]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d00c      	beq.n	8003c90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c76:	4b85      	ldr	r3, [pc, #532]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d112      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c82:	4b82      	ldr	r3, [pc, #520]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c90:	4b7e      	ldr	r3, [pc, #504]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d05b      	beq.n	8003d54 <HAL_RCC_OscConfig+0x108>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d157      	bne.n	8003d54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e242      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cb0:	d106      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x74>
 8003cb2:	4b76      	ldr	r3, [pc, #472]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a75      	ldr	r2, [pc, #468]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e01d      	b.n	8003cfc <HAL_RCC_OscConfig+0xb0>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x98>
 8003cca:	4b70      	ldr	r3, [pc, #448]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a6f      	ldr	r2, [pc, #444]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003cd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	4b6d      	ldr	r3, [pc, #436]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a6c      	ldr	r2, [pc, #432]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	e00b      	b.n	8003cfc <HAL_RCC_OscConfig+0xb0>
 8003ce4:	4b69      	ldr	r3, [pc, #420]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a68      	ldr	r2, [pc, #416]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003cea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	4b66      	ldr	r3, [pc, #408]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a65      	ldr	r2, [pc, #404]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003cf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d013      	beq.n	8003d2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7fe fc6e 	bl	80025e4 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d0c:	f7fe fc6a 	bl	80025e4 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	@ 0x64
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e207      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1e:	4b5b      	ldr	r3, [pc, #364]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0f0      	beq.n	8003d0c <HAL_RCC_OscConfig+0xc0>
 8003d2a:	e014      	b.n	8003d56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7fe fc5a 	bl	80025e4 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d34:	f7fe fc56 	bl	80025e4 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	@ 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e1f3      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d46:	4b51      	ldr	r3, [pc, #324]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0xe8>
 8003d52:	e000      	b.n	8003d56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d063      	beq.n	8003e2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d62:	4b4a      	ldr	r3, [pc, #296]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00b      	beq.n	8003d86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d6e:	4b47      	ldr	r3, [pc, #284]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d11c      	bne.n	8003db4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d7a:	4b44      	ldr	r3, [pc, #272]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d116      	bne.n	8003db4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d86:	4b41      	ldr	r3, [pc, #260]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <HAL_RCC_OscConfig+0x152>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d001      	beq.n	8003d9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e1c7      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4937      	ldr	r1, [pc, #220]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db2:	e03a      	b.n	8003e2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d020      	beq.n	8003dfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dbc:	4b34      	ldr	r3, [pc, #208]	@ (8003e90 <HAL_RCC_OscConfig+0x244>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc2:	f7fe fc0f 	bl	80025e4 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dca:	f7fe fc0b 	bl	80025e4 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e1a8      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0f0      	beq.n	8003dca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de8:	4b28      	ldr	r3, [pc, #160]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	4925      	ldr	r1, [pc, #148]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	600b      	str	r3, [r1, #0]
 8003dfc:	e015      	b.n	8003e2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dfe:	4b24      	ldr	r3, [pc, #144]	@ (8003e90 <HAL_RCC_OscConfig+0x244>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fe fbee 	bl	80025e4 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e0c:	f7fe fbea 	bl	80025e4 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e187      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d036      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d016      	beq.n	8003e6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e3e:	4b15      	ldr	r3, [pc, #84]	@ (8003e94 <HAL_RCC_OscConfig+0x248>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e44:	f7fe fbce 	bl	80025e4 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e4c:	f7fe fbca 	bl	80025e4 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e167      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCC_OscConfig+0x200>
 8003e6a:	e01b      	b.n	8003ea4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e6c:	4b09      	ldr	r3, [pc, #36]	@ (8003e94 <HAL_RCC_OscConfig+0x248>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e72:	f7fe fbb7 	bl	80025e4 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e78:	e00e      	b.n	8003e98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e7a:	f7fe fbb3 	bl	80025e4 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d907      	bls.n	8003e98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e150      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	42470000 	.word	0x42470000
 8003e94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e98:	4b88      	ldr	r3, [pc, #544]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8003e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1ea      	bne.n	8003e7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 8097 	beq.w	8003fe0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb6:	4b81      	ldr	r3, [pc, #516]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10f      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	4b7d      	ldr	r3, [pc, #500]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	4a7c      	ldr	r2, [pc, #496]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8003ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ed2:	4b7a      	ldr	r3, [pc, #488]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eda:	60bb      	str	r3, [r7, #8]
 8003edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee2:	4b77      	ldr	r3, [pc, #476]	@ (80040c0 <HAL_RCC_OscConfig+0x474>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d118      	bne.n	8003f20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eee:	4b74      	ldr	r3, [pc, #464]	@ (80040c0 <HAL_RCC_OscConfig+0x474>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a73      	ldr	r2, [pc, #460]	@ (80040c0 <HAL_RCC_OscConfig+0x474>)
 8003ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003efa:	f7fe fb73 	bl	80025e4 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f02:	f7fe fb6f 	bl	80025e4 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e10c      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f14:	4b6a      	ldr	r3, [pc, #424]	@ (80040c0 <HAL_RCC_OscConfig+0x474>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0f0      	beq.n	8003f02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d106      	bne.n	8003f36 <HAL_RCC_OscConfig+0x2ea>
 8003f28:	4b64      	ldr	r3, [pc, #400]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2c:	4a63      	ldr	r2, [pc, #396]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f34:	e01c      	b.n	8003f70 <HAL_RCC_OscConfig+0x324>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b05      	cmp	r3, #5
 8003f3c:	d10c      	bne.n	8003f58 <HAL_RCC_OscConfig+0x30c>
 8003f3e:	4b5f      	ldr	r3, [pc, #380]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f42:	4a5e      	ldr	r2, [pc, #376]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f44:	f043 0304 	orr.w	r3, r3, #4
 8003f48:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f4a:	4b5c      	ldr	r3, [pc, #368]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4e:	4a5b      	ldr	r2, [pc, #364]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f56:	e00b      	b.n	8003f70 <HAL_RCC_OscConfig+0x324>
 8003f58:	4b58      	ldr	r3, [pc, #352]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5c:	4a57      	ldr	r2, [pc, #348]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f5e:	f023 0301 	bic.w	r3, r3, #1
 8003f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f64:	4b55      	ldr	r3, [pc, #340]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f68:	4a54      	ldr	r2, [pc, #336]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f6a:	f023 0304 	bic.w	r3, r3, #4
 8003f6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d015      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f78:	f7fe fb34 	bl	80025e4 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7e:	e00a      	b.n	8003f96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f80:	f7fe fb30 	bl	80025e4 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e0cb      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f96:	4b49      	ldr	r3, [pc, #292]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0ee      	beq.n	8003f80 <HAL_RCC_OscConfig+0x334>
 8003fa2:	e014      	b.n	8003fce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa4:	f7fe fb1e 	bl	80025e4 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003faa:	e00a      	b.n	8003fc2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fac:	f7fe fb1a 	bl	80025e4 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e0b5      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1ee      	bne.n	8003fac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fce:	7dfb      	ldrb	r3, [r7, #23]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d105      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd4:	4b39      	ldr	r3, [pc, #228]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd8:	4a38      	ldr	r2, [pc, #224]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8003fda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fde:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 80a1 	beq.w	800412c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fea:	4b34      	ldr	r3, [pc, #208]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d05c      	beq.n	80040b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d141      	bne.n	8004082 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffe:	4b31      	ldr	r3, [pc, #196]	@ (80040c4 <HAL_RCC_OscConfig+0x478>)
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004004:	f7fe faee 	bl	80025e4 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800400c:	f7fe faea 	bl	80025e4 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e087      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401e:	4b27      	ldr	r3, [pc, #156]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69da      	ldr	r2, [r3, #28]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004038:	019b      	lsls	r3, r3, #6
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004040:	085b      	lsrs	r3, r3, #1
 8004042:	3b01      	subs	r3, #1
 8004044:	041b      	lsls	r3, r3, #16
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404c:	061b      	lsls	r3, r3, #24
 800404e:	491b      	ldr	r1, [pc, #108]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8004050:	4313      	orrs	r3, r2
 8004052:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004054:	4b1b      	ldr	r3, [pc, #108]	@ (80040c4 <HAL_RCC_OscConfig+0x478>)
 8004056:	2201      	movs	r2, #1
 8004058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405a:	f7fe fac3 	bl	80025e4 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004062:	f7fe fabf 	bl	80025e4 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e05c      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004074:	4b11      	ldr	r3, [pc, #68]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0f0      	beq.n	8004062 <HAL_RCC_OscConfig+0x416>
 8004080:	e054      	b.n	800412c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004082:	4b10      	ldr	r3, [pc, #64]	@ (80040c4 <HAL_RCC_OscConfig+0x478>)
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004088:	f7fe faac 	bl	80025e4 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004090:	f7fe faa8 	bl	80025e4 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e045      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a2:	4b06      	ldr	r3, [pc, #24]	@ (80040bc <HAL_RCC_OscConfig+0x470>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0x444>
 80040ae:	e03d      	b.n	800412c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d107      	bne.n	80040c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e038      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
 80040bc:	40023800 	.word	0x40023800
 80040c0:	40007000 	.word	0x40007000
 80040c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004138 <HAL_RCC_OscConfig+0x4ec>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d028      	beq.n	8004128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d121      	bne.n	8004128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d11a      	bne.n	8004128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040f8:	4013      	ands	r3, r2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004100:	4293      	cmp	r3, r2
 8004102:	d111      	bne.n	8004128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410e:	085b      	lsrs	r3, r3, #1
 8004110:	3b01      	subs	r3, #1
 8004112:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004114:	429a      	cmp	r2, r3
 8004116:	d107      	bne.n	8004128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004122:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004124:	429a      	cmp	r2, r3
 8004126:	d001      	beq.n	800412c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e000      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40023800 	.word	0x40023800

0800413c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e0cc      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004150:	4b68      	ldr	r3, [pc, #416]	@ (80042f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d90c      	bls.n	8004178 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415e:	4b65      	ldr	r3, [pc, #404]	@ (80042f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004166:	4b63      	ldr	r3, [pc, #396]	@ (80042f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0b8      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d020      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004190:	4b59      	ldr	r3, [pc, #356]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	4a58      	ldr	r2, [pc, #352]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800419a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041a8:	4b53      	ldr	r3, [pc, #332]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	4a52      	ldr	r2, [pc, #328]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b4:	4b50      	ldr	r3, [pc, #320]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	494d      	ldr	r1, [pc, #308]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d044      	beq.n	800425c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d107      	bne.n	80041ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041da:	4b47      	ldr	r3, [pc, #284]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d119      	bne.n	800421a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e07f      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d003      	beq.n	80041fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d107      	bne.n	800420a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fa:	4b3f      	ldr	r3, [pc, #252]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d109      	bne.n	800421a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e06f      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420a:	4b3b      	ldr	r3, [pc, #236]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e067      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800421a:	4b37      	ldr	r3, [pc, #220]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f023 0203 	bic.w	r2, r3, #3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	4934      	ldr	r1, [pc, #208]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004228:	4313      	orrs	r3, r2
 800422a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800422c:	f7fe f9da 	bl	80025e4 <HAL_GetTick>
 8004230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004232:	e00a      	b.n	800424a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004234:	f7fe f9d6 	bl	80025e4 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004242:	4293      	cmp	r3, r2
 8004244:	d901      	bls.n	800424a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e04f      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800424a:	4b2b      	ldr	r3, [pc, #172]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 020c 	and.w	r2, r3, #12
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	429a      	cmp	r2, r3
 800425a:	d1eb      	bne.n	8004234 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800425c:	4b25      	ldr	r3, [pc, #148]	@ (80042f4 <HAL_RCC_ClockConfig+0x1b8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d20c      	bcs.n	8004284 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426a:	4b22      	ldr	r3, [pc, #136]	@ (80042f4 <HAL_RCC_ClockConfig+0x1b8>)
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b20      	ldr	r3, [pc, #128]	@ (80042f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e032      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004290:	4b19      	ldr	r3, [pc, #100]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	4916      	ldr	r1, [pc, #88]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ae:	4b12      	ldr	r3, [pc, #72]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	490e      	ldr	r1, [pc, #56]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042c2:	f000 f821 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 80042c6:	4602      	mov	r2, r0
 80042c8:	4b0b      	ldr	r3, [pc, #44]	@ (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	091b      	lsrs	r3, r3, #4
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	490a      	ldr	r1, [pc, #40]	@ (80042fc <HAL_RCC_ClockConfig+0x1c0>)
 80042d4:	5ccb      	ldrb	r3, [r1, r3]
 80042d6:	fa22 f303 	lsr.w	r3, r2, r3
 80042da:	4a09      	ldr	r2, [pc, #36]	@ (8004300 <HAL_RCC_ClockConfig+0x1c4>)
 80042dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042de:	4b09      	ldr	r3, [pc, #36]	@ (8004304 <HAL_RCC_ClockConfig+0x1c8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fe f93a 	bl	800255c <HAL_InitTick>

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40023c00 	.word	0x40023c00
 80042f8:	40023800 	.word	0x40023800
 80042fc:	0800c73c 	.word	0x0800c73c
 8004300:	20000048 	.word	0x20000048
 8004304:	20000064 	.word	0x20000064

08004308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800430c:	b090      	sub	sp, #64	@ 0x40
 800430e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	637b      	str	r3, [r7, #52]	@ 0x34
 8004314:	2300      	movs	r3, #0
 8004316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004318:	2300      	movs	r3, #0
 800431a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004320:	4b59      	ldr	r3, [pc, #356]	@ (8004488 <HAL_RCC_GetSysClockFreq+0x180>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 030c 	and.w	r3, r3, #12
 8004328:	2b08      	cmp	r3, #8
 800432a:	d00d      	beq.n	8004348 <HAL_RCC_GetSysClockFreq+0x40>
 800432c:	2b08      	cmp	r3, #8
 800432e:	f200 80a1 	bhi.w	8004474 <HAL_RCC_GetSysClockFreq+0x16c>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0x34>
 8004336:	2b04      	cmp	r3, #4
 8004338:	d003      	beq.n	8004342 <HAL_RCC_GetSysClockFreq+0x3a>
 800433a:	e09b      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800433c:	4b53      	ldr	r3, [pc, #332]	@ (800448c <HAL_RCC_GetSysClockFreq+0x184>)
 800433e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004340:	e09b      	b.n	800447a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004342:	4b53      	ldr	r3, [pc, #332]	@ (8004490 <HAL_RCC_GetSysClockFreq+0x188>)
 8004344:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004346:	e098      	b.n	800447a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004348:	4b4f      	ldr	r3, [pc, #316]	@ (8004488 <HAL_RCC_GetSysClockFreq+0x180>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004350:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004352:	4b4d      	ldr	r3, [pc, #308]	@ (8004488 <HAL_RCC_GetSysClockFreq+0x180>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d028      	beq.n	80043b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800435e:	4b4a      	ldr	r3, [pc, #296]	@ (8004488 <HAL_RCC_GetSysClockFreq+0x180>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	099b      	lsrs	r3, r3, #6
 8004364:	2200      	movs	r2, #0
 8004366:	623b      	str	r3, [r7, #32]
 8004368:	627a      	str	r2, [r7, #36]	@ 0x24
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004370:	2100      	movs	r1, #0
 8004372:	4b47      	ldr	r3, [pc, #284]	@ (8004490 <HAL_RCC_GetSysClockFreq+0x188>)
 8004374:	fb03 f201 	mul.w	r2, r3, r1
 8004378:	2300      	movs	r3, #0
 800437a:	fb00 f303 	mul.w	r3, r0, r3
 800437e:	4413      	add	r3, r2
 8004380:	4a43      	ldr	r2, [pc, #268]	@ (8004490 <HAL_RCC_GetSysClockFreq+0x188>)
 8004382:	fba0 1202 	umull	r1, r2, r0, r2
 8004386:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004388:	460a      	mov	r2, r1
 800438a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800438c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800438e:	4413      	add	r3, r2
 8004390:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004394:	2200      	movs	r2, #0
 8004396:	61bb      	str	r3, [r7, #24]
 8004398:	61fa      	str	r2, [r7, #28]
 800439a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800439e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80043a2:	f7fb ff85 	bl	80002b0 <__aeabi_uldivmod>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	4613      	mov	r3, r2
 80043ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043ae:	e053      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b0:	4b35      	ldr	r3, [pc, #212]	@ (8004488 <HAL_RCC_GetSysClockFreq+0x180>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	099b      	lsrs	r3, r3, #6
 80043b6:	2200      	movs	r2, #0
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	617a      	str	r2, [r7, #20]
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80043c2:	f04f 0b00 	mov.w	fp, #0
 80043c6:	4652      	mov	r2, sl
 80043c8:	465b      	mov	r3, fp
 80043ca:	f04f 0000 	mov.w	r0, #0
 80043ce:	f04f 0100 	mov.w	r1, #0
 80043d2:	0159      	lsls	r1, r3, #5
 80043d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043d8:	0150      	lsls	r0, r2, #5
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	ebb2 080a 	subs.w	r8, r2, sl
 80043e2:	eb63 090b 	sbc.w	r9, r3, fp
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043fa:	ebb2 0408 	subs.w	r4, r2, r8
 80043fe:	eb63 0509 	sbc.w	r5, r3, r9
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	00eb      	lsls	r3, r5, #3
 800440c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004410:	00e2      	lsls	r2, r4, #3
 8004412:	4614      	mov	r4, r2
 8004414:	461d      	mov	r5, r3
 8004416:	eb14 030a 	adds.w	r3, r4, sl
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	eb45 030b 	adc.w	r3, r5, fp
 8004420:	607b      	str	r3, [r7, #4]
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800442e:	4629      	mov	r1, r5
 8004430:	028b      	lsls	r3, r1, #10
 8004432:	4621      	mov	r1, r4
 8004434:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004438:	4621      	mov	r1, r4
 800443a:	028a      	lsls	r2, r1, #10
 800443c:	4610      	mov	r0, r2
 800443e:	4619      	mov	r1, r3
 8004440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004442:	2200      	movs	r2, #0
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	60fa      	str	r2, [r7, #12]
 8004448:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800444c:	f7fb ff30 	bl	80002b0 <__aeabi_uldivmod>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4613      	mov	r3, r2
 8004456:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004458:	4b0b      	ldr	r3, [pc, #44]	@ (8004488 <HAL_RCC_GetSysClockFreq+0x180>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	0c1b      	lsrs	r3, r3, #16
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	3301      	adds	r3, #1
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004468:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800446a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004470:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004472:	e002      	b.n	800447a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004474:	4b05      	ldr	r3, [pc, #20]	@ (800448c <HAL_RCC_GetSysClockFreq+0x184>)
 8004476:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800447a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800447c:	4618      	mov	r0, r3
 800447e:	3740      	adds	r7, #64	@ 0x40
 8004480:	46bd      	mov	sp, r7
 8004482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004486:	bf00      	nop
 8004488:	40023800 	.word	0x40023800
 800448c:	00f42400 	.word	0x00f42400
 8004490:	018cba80 	.word	0x018cba80

08004494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004498:	4b03      	ldr	r3, [pc, #12]	@ (80044a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800449a:	681b      	ldr	r3, [r3, #0]
}
 800449c:	4618      	mov	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	20000048 	.word	0x20000048

080044ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044b0:	f7ff fff0 	bl	8004494 <HAL_RCC_GetHCLKFreq>
 80044b4:	4602      	mov	r2, r0
 80044b6:	4b05      	ldr	r3, [pc, #20]	@ (80044cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	0a9b      	lsrs	r3, r3, #10
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	4903      	ldr	r1, [pc, #12]	@ (80044d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044c2:	5ccb      	ldrb	r3, [r1, r3]
 80044c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40023800 	.word	0x40023800
 80044d0:	0800c74c 	.word	0x0800c74c

080044d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044d4:	b084      	sub	sp, #16
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b084      	sub	sp, #16
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	f107 001c 	add.w	r0, r7, #28
 80044e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044e6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d123      	bne.n	8004536 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004502:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004516:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800451a:	2b01      	cmp	r3, #1
 800451c:	d105      	bne.n	800452a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 faa0 	bl	8004a70 <USB_CoreReset>
 8004530:	4603      	mov	r3, r0
 8004532:	73fb      	strb	r3, [r7, #15]
 8004534:	e01b      	b.n	800456e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fa94 	bl	8004a70 <USB_CoreReset>
 8004548:	4603      	mov	r3, r0
 800454a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800454c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004550:	2b00      	cmp	r3, #0
 8004552:	d106      	bne.n	8004562 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004558:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004560:	e005      	b.n	800456e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004566:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800456e:	7fbb      	ldrb	r3, [r7, #30]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d10b      	bne.n	800458c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f043 0206 	orr.w	r2, r3, #6
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f043 0220 	orr.w	r2, r3, #32
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800458c:	7bfb      	ldrb	r3, [r7, #15]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004598:	b004      	add	sp, #16
 800459a:	4770      	bx	lr

0800459c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f023 0201 	bic.w	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	460b      	mov	r3, r1
 80045c8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045da:	78fb      	ldrb	r3, [r7, #3]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d115      	bne.n	800460c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045ec:	200a      	movs	r0, #10
 80045ee:	f7fe f805 	bl	80025fc <HAL_Delay>
      ms += 10U;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	330a      	adds	r3, #10
 80045f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fa2b 	bl	8004a54 <USB_GetMode>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b01      	cmp	r3, #1
 8004602:	d01e      	beq.n	8004642 <USB_SetCurrentMode+0x84>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2bc7      	cmp	r3, #199	@ 0xc7
 8004608:	d9f0      	bls.n	80045ec <USB_SetCurrentMode+0x2e>
 800460a:	e01a      	b.n	8004642 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d115      	bne.n	800463e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800461e:	200a      	movs	r0, #10
 8004620:	f7fd ffec 	bl	80025fc <HAL_Delay>
      ms += 10U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	330a      	adds	r3, #10
 8004628:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fa12 	bl	8004a54 <USB_GetMode>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <USB_SetCurrentMode+0x84>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2bc7      	cmp	r3, #199	@ 0xc7
 800463a:	d9f0      	bls.n	800461e <USB_SetCurrentMode+0x60>
 800463c:	e001      	b.n	8004642 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e005      	b.n	800464e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2bc8      	cmp	r3, #200	@ 0xc8
 8004646:	d101      	bne.n	800464c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004658:	b084      	sub	sp, #16
 800465a:	b580      	push	{r7, lr}
 800465c:	b086      	sub	sp, #24
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004672:	2300      	movs	r3, #0
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	e009      	b.n	800468c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	3340      	adds	r3, #64	@ 0x40
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	2200      	movs	r2, #0
 8004684:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	3301      	adds	r3, #1
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	2b0e      	cmp	r3, #14
 8004690:	d9f2      	bls.n	8004678 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004692:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004696:	2b00      	cmp	r3, #0
 8004698:	d11c      	bne.n	80046d4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046a8:	f043 0302 	orr.w	r3, r3, #2
 80046ac:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046be:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80046d2:	e00b      	b.n	80046ec <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80046f2:	461a      	mov	r2, r3
 80046f4:	2300      	movs	r3, #0
 80046f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d10d      	bne.n	800471c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004700:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004708:	2100      	movs	r1, #0
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f968 	bl	80049e0 <USB_SetDevSpeed>
 8004710:	e008      	b.n	8004724 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004712:	2101      	movs	r1, #1
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f963 	bl	80049e0 <USB_SetDevSpeed>
 800471a:	e003      	b.n	8004724 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800471c:	2103      	movs	r1, #3
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f95e 	bl	80049e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004724:	2110      	movs	r1, #16
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f8fa 	bl	8004920 <USB_FlushTxFifo>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f924 	bl	8004984 <USB_FlushRxFifo>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800474c:	461a      	mov	r2, r3
 800474e:	2300      	movs	r3, #0
 8004750:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004758:	461a      	mov	r2, r3
 800475a:	2300      	movs	r3, #0
 800475c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004764:	461a      	mov	r2, r3
 8004766:	2300      	movs	r3, #0
 8004768:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800476a:	2300      	movs	r3, #0
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	e043      	b.n	80047f8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004782:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004786:	d118      	bne.n	80047ba <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10a      	bne.n	80047a4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800479a:	461a      	mov	r2, r3
 800479c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	e013      	b.n	80047cc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047b0:	461a      	mov	r2, r3
 80047b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	e008      	b.n	80047cc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c6:	461a      	mov	r2, r3
 80047c8:	2300      	movs	r3, #0
 80047ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047d8:	461a      	mov	r2, r3
 80047da:	2300      	movs	r3, #0
 80047dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ea:	461a      	mov	r2, r3
 80047ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	3301      	adds	r3, #1
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047fc:	461a      	mov	r2, r3
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4293      	cmp	r3, r2
 8004802:	d3b5      	bcc.n	8004770 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004804:	2300      	movs	r3, #0
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	e043      	b.n	8004892 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800481c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004820:	d118      	bne.n	8004854 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10a      	bne.n	800483e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004834:	461a      	mov	r2, r3
 8004836:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	e013      	b.n	8004866 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800484a:	461a      	mov	r2, r3
 800484c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	e008      	b.n	8004866 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004860:	461a      	mov	r2, r3
 8004862:	2300      	movs	r3, #0
 8004864:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4413      	add	r3, r2
 800486e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004872:	461a      	mov	r2, r3
 8004874:	2300      	movs	r3, #0
 8004876:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004884:	461a      	mov	r2, r3
 8004886:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800488a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	3301      	adds	r3, #1
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004896:	461a      	mov	r2, r3
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4293      	cmp	r3, r2
 800489c:	d3b5      	bcc.n	800480a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80048be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80048c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d105      	bne.n	80048d4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	f043 0210 	orr.w	r2, r3, #16
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699a      	ldr	r2, [r3, #24]
 80048d8:	4b10      	ldr	r3, [pc, #64]	@ (800491c <USB_DevInit+0x2c4>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	f043 0208 	orr.w	r2, r3, #8
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d107      	bne.n	800490c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004904:	f043 0304 	orr.w	r3, r3, #4
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800490c:	7dfb      	ldrb	r3, [r7, #23]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004918:	b004      	add	sp, #16
 800491a:	4770      	bx	lr
 800491c:	803c3800 	.word	0x803c3800

08004920 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3301      	adds	r3, #1
 8004932:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800493a:	d901      	bls.n	8004940 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e01b      	b.n	8004978 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	daf2      	bge.n	800492e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	019b      	lsls	r3, r3, #6
 8004950:	f043 0220 	orr.w	r2, r3, #32
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	3301      	adds	r3, #1
 800495c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004964:	d901      	bls.n	800496a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e006      	b.n	8004978 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b20      	cmp	r3, #32
 8004974:	d0f0      	beq.n	8004958 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3301      	adds	r3, #1
 8004994:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800499c:	d901      	bls.n	80049a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e018      	b.n	80049d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	daf2      	bge.n	8004990 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2210      	movs	r2, #16
 80049b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3301      	adds	r3, #1
 80049b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049c0:	d901      	bls.n	80049c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e006      	b.n	80049d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b10      	cmp	r3, #16
 80049d0:	d0f0      	beq.n	80049b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	68f9      	ldr	r1, [r7, #12]
 80049fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a00:	4313      	orrs	r3, r2
 8004a02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b085      	sub	sp, #20
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004a2c:	f023 0303 	bic.w	r3, r3, #3
 8004a30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a40:	f043 0302 	orr.w	r3, r3, #2
 8004a44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	f003 0301 	and.w	r3, r3, #1
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a88:	d901      	bls.n	8004a8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e01b      	b.n	8004ac6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	daf2      	bge.n	8004a7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f043 0201 	orr.w	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ab2:	d901      	bls.n	8004ab8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e006      	b.n	8004ac6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d0f0      	beq.n	8004aa6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
	...

08004ad4 <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_t _cdcd_cfg = TUD_CDC_CONFIGURE_DEFAULT();

static bool _prep_out_transaction(uint8_t itf) {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	22e8      	movs	r2, #232	@ 0xe8
 8004ae6:	fb02 f303 	mul.w	r3, r2, r3
 8004aea:	4a30      	ldr	r2, [pc, #192]	@ (8004bac <_prep_out_transaction+0xd8>)
 8004aec:	4413      	add	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8004af0:	79fb      	ldrb	r3, [r7, #7]
 8004af2:	01db      	lsls	r3, r3, #7
 8004af4:	4a2e      	ldr	r2, [pc, #184]	@ (8004bb0 <_prep_out_transaction+0xdc>)
 8004af6:	4413      	add	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 8004afa:	f002 f851 	bl	8006ba0 <tud_mounted>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d009      	beq.n	8004b18 <_prep_out_transaction+0x44>
 8004b04:	f002 f85e 	bl	8006bc4 <tud_suspended>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	f083 0301 	eor.w	r3, r3, #1
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <_prep_out_transaction+0x44>
 8004b14:	2301      	movs	r3, #1
 8004b16:	e000      	b.n	8004b1a <_prep_out_transaction+0x46>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 8004b20:	f083 0301 	eor.w	r3, r3, #1
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d103      	bne.n	8004b32 <_prep_out_transaction+0x5e>
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	78db      	ldrb	r3, [r3, #3]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <_prep_out_transaction+0x62>
 8004b32:	2300      	movs	r3, #0
 8004b34:	e035      	b.n	8004ba2 <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	3310      	adds	r3, #16
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f001 feab 	bl	8006896 <tu_fifo_remaining>
 8004b40:	4603      	mov	r3, r0
 8004b42:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 8004b44:	897b      	ldrh	r3, [r7, #10]
 8004b46:	2b3f      	cmp	r3, #63	@ 0x3f
 8004b48:	d801      	bhi.n	8004b4e <_prep_out_transaction+0x7a>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	e029      	b.n	8004ba2 <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	78da      	ldrb	r2, [r3, #3]
 8004b52:	7dfb      	ldrb	r3, [r7, #23]
 8004b54:	4611      	mov	r1, r2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f003 fb44 	bl	80081e4 <usbd_edpt_claim>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f083 0301 	eor.w	r3, r3, #1
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <_prep_out_transaction+0x98>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	e01a      	b.n	8004ba2 <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	3310      	adds	r3, #16
 8004b70:	4618      	mov	r0, r3
 8004b72:	f001 fe90 	bl	8006896 <tu_fifo_remaining>
 8004b76:	4603      	mov	r3, r0
 8004b78:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 8004b7a:	897b      	ldrh	r3, [r7, #10]
 8004b7c:	2b3f      	cmp	r3, #63	@ 0x3f
 8004b7e:	d908      	bls.n	8004b92 <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	78d9      	ldrb	r1, [r3, #3]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	7df8      	ldrb	r0, [r7, #23]
 8004b88:	2340      	movs	r3, #64	@ 0x40
 8004b8a:	f003 fb7b 	bl	8008284 <usbd_edpt_xfer>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	e007      	b.n	8004ba2 <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	78da      	ldrb	r2, [r3, #3]
 8004b96:	7dfb      	ldrb	r3, [r7, #23]
 8004b98:	4611      	mov	r1, r2
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f003 fb4a 	bl	8008234 <usbd_edpt_release>
    return false;
 8004ba0:	2300      	movs	r3, #0
  }
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	200009bc 	.word	0x200009bc
 8004bb0:	20000aa4 	.word	0x20000aa4

08004bb4 <tud_cdc_n_connected>:

bool tud_cdc_n_ready(uint8_t itf) {
  return tud_ready() && _cdcd_itf[itf].ep_in != 0 && _cdcd_itf[itf].ep_out != 0;
}

bool tud_cdc_n_connected(uint8_t itf) {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	71fb      	strb	r3, [r7, #7]
 8004bbe:	f001 ffef 	bl	8006ba0 <tud_mounted>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d009      	beq.n	8004bdc <tud_cdc_n_connected+0x28>
 8004bc8:	f001 fffc 	bl	8006bc4 <tud_suspended>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f083 0301 	eor.w	r3, r3, #1
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <tud_cdc_n_connected+0x28>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e000      	b.n	8004bde <tud_cdc_n_connected+0x2a>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	b2db      	uxtb	r3, r3
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d019      	beq.n	8004c1c <tud_cdc_n_connected+0x68>
 8004be8:	79fb      	ldrb	r3, [r7, #7]
 8004bea:	4a10      	ldr	r2, [pc, #64]	@ (8004c2c <tud_cdc_n_connected+0x78>)
 8004bec:	21e8      	movs	r1, #232	@ 0xe8
 8004bee:	fb01 f303 	mul.w	r3, r1, r3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	72fb      	strb	r3, [r7, #11]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8004bfe:	7afb      	ldrb	r3, [r7, #11]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	fa22 f303 	lsr.w	r3, r2, r3
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	bf14      	ite	ne
 8004c0e:	2301      	movne	r3, #1
 8004c10:	2300      	moveq	r3, #0
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <tud_cdc_n_connected+0x68>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <tud_cdc_n_connected+0x6a>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	b2db      	uxtb	r3, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	200009bc 	.word	0x200009bc

08004c30 <tud_cdc_n_available>:
}

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf) {
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 8004c3a:	79fb      	ldrb	r3, [r7, #7]
 8004c3c:	22e8      	movs	r2, #232	@ 0xe8
 8004c3e:	fb02 f303 	mul.w	r3, r2, r3
 8004c42:	3310      	adds	r3, #16
 8004c44:	4a04      	ldr	r2, [pc, #16]	@ (8004c58 <tud_cdc_n_available+0x28>)
 8004c46:	4413      	add	r3, r2
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f001 fdaf 	bl	80067ac <tu_fifo_count>
 8004c4e:	4603      	mov	r3, r0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	200009bc 	.word	0x200009bc

08004c5c <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize) {
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	4603      	mov	r3, r0
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	22e8      	movs	r2, #232	@ 0xe8
 8004c6e:	fb02 f303 	mul.w	r3, r2, r3
 8004c72:	4a0f      	ldr	r2, [pc, #60]	@ (8004cb0 <tud_cdc_n_read+0x54>)
 8004c74:	4413      	add	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f103 0010 	add.w	r0, r3, #16
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d802      	bhi.n	8004c8e <tud_cdc_n_read+0x32>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	e001      	b.n	8004c92 <tud_cdc_n_read+0x36>
 8004c8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c92:	461a      	mov	r2, r3
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	f001 fe5a 	bl	800694e <tu_fifo_read_n>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(itf);
 8004c9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff ff17 	bl	8004ad4 <_prep_out_transaction>
  return num_read;
 8004ca6:	693b      	ldr	r3, [r7, #16]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	200009bc 	.word	0x200009bc

08004cb4 <tud_cdc_n_write>:
}

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, const void* buffer, uint32_t bufsize) {
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	22e8      	movs	r2, #232	@ 0xe8
 8004cc6:	fb02 f303 	mul.w	r3, r2, r3
 8004cca:	4a13      	ldr	r2, [pc, #76]	@ (8004d18 <tud_cdc_n_write+0x64>)
 8004ccc:	4413      	add	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]
  uint16_t wr_count = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f103 001c 	add.w	r0, r3, #28
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d802      	bhi.n	8004ce6 <tud_cdc_n_write+0x32>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	e001      	b.n	8004cea <tud_cdc_n_write+0x36>
 8004ce6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004cea:	461a      	mov	r2, r3
 8004cec:	68b9      	ldr	r1, [r7, #8]
 8004cee:	f001 fe95 	bl	8006a1c <tu_fifo_write_n>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	331c      	adds	r3, #28
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f001 fd56 	bl	80067ac <tu_fifo_count>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b3f      	cmp	r3, #63	@ 0x3f
 8004d04:	d903      	bls.n	8004d0e <tud_cdc_n_write+0x5a>
      #if CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
      || tu_fifo_full(&p_cdc->tx_ff) // check full if fifo size is less than packet size
      #endif
      ) {
    tud_cdc_n_write_flush(itf);
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 f807 	bl	8004d1c <tud_cdc_n_write_flush>
  }

  return wr_count;
 8004d0e:	8a7b      	ldrh	r3, [r7, #18]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	200009bc 	.word	0x200009bc

08004d1c <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	22e8      	movs	r2, #232	@ 0xe8
 8004d2a:	fb02 f303 	mul.w	r3, r2, r3
 8004d2e:	4a39      	ldr	r2, [pc, #228]	@ (8004e14 <tud_cdc_n_write_flush+0xf8>)
 8004d30:	4413      	add	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	01db      	lsls	r3, r3, #7
 8004d38:	4a37      	ldr	r2, [pc, #220]	@ (8004e18 <tud_cdc_n_write_flush+0xfc>)
 8004d3a:	4413      	add	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]
 8004d3e:	f001 ff2f 	bl	8006ba0 <tud_mounted>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d009      	beq.n	8004d5c <tud_cdc_n_write_flush+0x40>
 8004d48:	f001 ff3c 	bl	8006bc4 <tud_suspended>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f083 0301 	eor.w	r3, r3, #1
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <tud_cdc_n_write_flush+0x40>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <tud_cdc_n_write_flush+0x42>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 8004d64:	f083 0301 	eor.w	r3, r3, #1
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <tud_cdc_n_write_flush+0x56>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	e04c      	b.n	8004e0c <tud_cdc_n_write_flush+0xf0>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	331c      	adds	r3, #28
 8004d76:	4618      	mov	r0, r3
 8004d78:	f001 fd18 	bl	80067ac <tu_fifo_count>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <tud_cdc_n_write_flush+0x6a>
    return 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	e042      	b.n	8004e0c <tud_cdc_n_write_flush+0xf0>
  }

  const uint8_t rhport = 0;
 8004d86:	2300      	movs	r3, #0
 8004d88:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	789a      	ldrb	r2, [r3, #2]
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	4611      	mov	r1, r2
 8004d92:	4618      	mov	r0, r3
 8004d94:	f003 fa26 	bl	80081e4 <usbd_edpt_claim>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	f083 0301 	eor.w	r3, r3, #1
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <tud_cdc_n_write_flush+0x8c>
 8004da4:	2300      	movs	r3, #0
 8004da6:	e031      	b.n	8004e0c <tud_cdc_n_write_flush+0xf0>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f103 001c 	add.w	r0, r3, #28
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	3340      	adds	r3, #64	@ 0x40
 8004db2:	2240      	movs	r2, #64	@ 0x40
 8004db4:	4619      	mov	r1, r3
 8004db6:	f001 fdca 	bl	800694e <tu_fifo_read_n>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	81bb      	strh	r3, [r7, #12]

  if (count) {
 8004dbe:	89bb      	ldrh	r3, [r7, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d01b      	beq.n	8004dfc <tud_cdc_n_write_flush+0xe0>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	7899      	ldrb	r1, [r3, #2]
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004dce:	89bb      	ldrh	r3, [r7, #12]
 8004dd0:	7bf8      	ldrb	r0, [r7, #15]
 8004dd2:	f003 fa57 	bl	8008284 <usbd_edpt_xfer>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f083 0301 	eor.w	r3, r3, #1
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <tud_cdc_n_write_flush+0xdc>
 8004de2:	4b0e      	ldr	r3, [pc, #56]	@ (8004e1c <tud_cdc_n_write_flush+0x100>)
 8004de4:	60bb      	str	r3, [r7, #8]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d000      	beq.n	8004df4 <tud_cdc_n_write_flush+0xd8>
 8004df2:	be00      	bkpt	0x0000
 8004df4:	2300      	movs	r3, #0
 8004df6:	e009      	b.n	8004e0c <tud_cdc_n_write_flush+0xf0>
    return count;
 8004df8:	89bb      	ldrh	r3, [r7, #12]
 8004dfa:	e007      	b.n	8004e0c <tud_cdc_n_write_flush+0xf0>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	789a      	ldrb	r2, [r3, #2]
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
 8004e02:	4611      	mov	r1, r2
 8004e04:	4618      	mov	r0, r3
 8004e06:	f003 fa15 	bl	8008234 <usbd_edpt_release>
    return 0;
 8004e0a:	2300      	movs	r3, #0
  }
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	200009bc 	.word	0x200009bc
 8004e18:	20000aa4 	.word	0x20000aa4
 8004e1c:	e000edf0 	.word	0xe000edf0

08004e20 <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available(uint8_t itf) {
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4603      	mov	r3, r0
 8004e28:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
 8004e2a:	79fb      	ldrb	r3, [r7, #7]
 8004e2c:	22e8      	movs	r2, #232	@ 0xe8
 8004e2e:	fb02 f303 	mul.w	r3, r2, r3
 8004e32:	3318      	adds	r3, #24
 8004e34:	4a05      	ldr	r2, [pc, #20]	@ (8004e4c <tud_cdc_n_write_available+0x2c>)
 8004e36:	4413      	add	r3, r2
 8004e38:	3304      	adds	r3, #4
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f001 fd2b 	bl	8006896 <tu_fifo_remaining>
 8004e40:	4603      	mov	r3, r0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	200009bc 	.word	0x200009bc

08004e50 <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8004e56:	22e8      	movs	r2, #232	@ 0xe8
 8004e58:	2100      	movs	r1, #0
 8004e5a:	4824      	ldr	r0, [pc, #144]	@ (8004eec <cdcd_init+0x9c>)
 8004e5c:	f005 fff1 	bl	800ae42 <memset>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8004e60:	2300      	movs	r3, #0
 8004e62:	71fb      	strb	r3, [r7, #7]
 8004e64:	e03a      	b.n	8004edc <cdcd_init+0x8c>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8004e66:	79fb      	ldrb	r3, [r7, #7]
 8004e68:	22e8      	movs	r2, #232	@ 0xe8
 8004e6a:	fb02 f303 	mul.w	r3, r2, r3
 8004e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004eec <cdcd_init+0x9c>)
 8004e70:	4413      	add	r3, r2
 8004e72:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	22ff      	movs	r2, #255	@ 0xff
 8004e78:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004e80:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2200      	movs	r2, #0
 8004e86:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2208      	movs	r2, #8
 8004e92:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	f103 0010 	add.w	r0, r3, #16
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	2240      	movs	r2, #64	@ 0x40
 8004ea8:	f000 ffee 	bl	8005e88 <tu_fifo_config>

    // TX fifo can be configured to change to overwritable if not connected (DTR bit not set). Without DTR we do not
    // know if data is actually polled by terminal. This way the most current data is prioritized.
    // Default: is overwritable
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	f103 001c 	add.w	r0, r3, #28
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8004eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef0 <cdcd_init+0xa0>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	bf14      	ite	ne
 8004ec6:	2301      	movne	r3, #1
 8004ec8:	2300      	moveq	r3, #0
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	2301      	movs	r3, #1
 8004ed0:	2280      	movs	r2, #128	@ 0x80
 8004ed2:	f000 ffd9 	bl	8005e88 <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	71fb      	strb	r3, [r7, #7]
 8004edc:	79fb      	ldrb	r3, [r7, #7]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0c1      	beq.n	8004e66 <cdcd_init+0x16>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 8004ee2:	bf00      	nop
 8004ee4:	bf00      	nop
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	200009bc 	.word	0x200009bc
 8004ef0:	2000006c 	.word	0x2000006c

08004ef4 <cdcd_deinit>:

bool cdcd_deinit(void) {
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 8004ef8:	2301      	movs	r3, #1
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8004f0e:	2300      	movs	r3, #0
 8004f10:	73fb      	strb	r3, [r7, #15]
 8004f12:	e037      	b.n	8004f84 <cdcd_reset+0x80>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
 8004f16:	22e8      	movs	r2, #232	@ 0xe8
 8004f18:	fb02 f303 	mul.w	r3, r2, r3
 8004f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004f94 <cdcd_reset+0x90>)
 8004f1e:	4413      	add	r3, r2
 8004f20:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8004f22:	2205      	movs	r2, #5
 8004f24:	2100      	movs	r1, #0
 8004f26:	68b8      	ldr	r0, [r7, #8]
 8004f28:	f005 ff8b 	bl	800ae42 <memset>
    if (!_cdcd_cfg.rx_persistent) {
 8004f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f98 <cdcd_reset+0x94>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d104      	bne.n	8004f44 <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	3310      	adds	r3, #16
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f001 fd90 	bl	8006a64 <tu_fifo_clear>
    }
    if (!_cdcd_cfg.tx_persistent) {
 8004f44:	4b14      	ldr	r3, [pc, #80]	@ (8004f98 <cdcd_reset+0x94>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d104      	bne.n	8004f5c <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	331c      	adds	r3, #28
 8004f56:	4618      	mov	r0, r3
 8004f58:	f001 fd84 	bl	8006a64 <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f103 021c 	add.w	r2, r3, #28
 8004f62:	4b0d      	ldr	r3, [pc, #52]	@ (8004f98 <cdcd_reset+0x94>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	bf14      	ite	ne
 8004f70:	2301      	movne	r3, #1
 8004f72:	2300      	moveq	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	4619      	mov	r1, r3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	f001 fd84 	bl	8006a86 <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	3301      	adds	r3, #1
 8004f82:	73fb      	strb	r3, [r7, #15]
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0c4      	beq.n	8004f14 <cdcd_reset+0x10>
  }
}
 8004f8a:	bf00      	nop
 8004f8c:	bf00      	nop
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	200009bc 	.word	0x200009bc
 8004f98:	2000006c 	.word	0x2000006c

08004f9c <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b09a      	sub	sp, #104	@ 0x68
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	6039      	str	r1, [r7, #0]
 8004fa6:	71fb      	strb	r3, [r7, #7]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	795b      	ldrb	r3, [r3, #5]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d103      	bne.n	8004fbc <cdcd_open+0x20>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	799b      	ldrb	r3, [r3, #6]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d001      	beq.n	8004fc0 <cdcd_open+0x24>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	e0da      	b.n	8005176 <cdcd_open+0x1da>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8004fc6:	e010      	b.n	8004fea <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 8004fc8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004fcc:	22e8      	movs	r2, #232	@ 0xe8
 8004fce:	fb02 f303 	mul.w	r3, r2, r3
 8004fd2:	4a6b      	ldr	r2, [pc, #428]	@ (8005180 <cdcd_open+0x1e4>)
 8004fd4:	4413      	add	r3, r2
 8004fd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 8004fd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fda:	789b      	ldrb	r3, [r3, #2]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d009      	beq.n	8004ff4 <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8004fe0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8004fea:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0ea      	beq.n	8004fc8 <cdcd_open+0x2c>
 8004ff2:	e000      	b.n	8004ff6 <cdcd_open+0x5a>
      break;
 8004ff4:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 8004ff6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <cdcd_open+0x78>
 8004ffe:	4b61      	ldr	r3, [pc, #388]	@ (8005184 <cdcd_open+0x1e8>)
 8005000:	647b      	str	r3, [r7, #68]	@ 0x44
 8005002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d000      	beq.n	8005010 <cdcd_open+0x74>
 800500e:	be00      	bkpt	0x0000
 8005010:	2300      	movs	r3, #0
 8005012:	e0b0      	b.n	8005176 <cdcd_open+0x1da>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	789a      	ldrb	r2, [r3, #2]
 8005018:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800501a:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 800501c:	2309      	movs	r3, #9
 800501e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005028:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 800502a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005032:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 8005034:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8005036:	e013      	b.n	8005060 <cdcd_open+0xc4>
 8005038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800503a:	633b      	str	r3, [r7, #48]	@ 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800503c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503e:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 8005040:	461a      	mov	r2, r3
 8005042:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8005046:	4413      	add	r3, r2
 8005048:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800504c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800504e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005052:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800505c:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 800505e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005062:	62fb      	str	r3, [r7, #44]	@ 0x2c
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005066:	3301      	adds	r3, #1
 8005068:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 800506a:	2b24      	cmp	r3, #36	@ 0x24
 800506c:	d104      	bne.n	8005078 <cdcd_open+0xdc>
 800506e:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8005072:	88bb      	ldrh	r3, [r7, #4]
 8005074:	429a      	cmp	r2, r3
 8005076:	d9df      	bls.n	8005038 <cdcd_open+0x9c>
 8005078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800507a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800507c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507e:	3301      	adds	r3, #1
 8005080:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 8005082:	2b05      	cmp	r3, #5
 8005084:	d12f      	bne.n	80050e6 <cdcd_open+0x14a>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 8005086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005088:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 800508a:	79fb      	ldrb	r3, [r7, #7]
 800508c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800508e:	4618      	mov	r0, r3
 8005090:	f003 f862 	bl	8008158 <usbd_edpt_open>
 8005094:	4603      	mov	r3, r0
 8005096:	f083 0301 	eor.w	r3, r3, #1
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <cdcd_open+0x11a>
 80050a0:	4b38      	ldr	r3, [pc, #224]	@ (8005184 <cdcd_open+0x1e8>)
 80050a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d000      	beq.n	80050b2 <cdcd_open+0x116>
 80050b0:	be00      	bkpt	0x0000
 80050b2:	2300      	movs	r3, #0
 80050b4:	e05f      	b.n	8005176 <cdcd_open+0x1da>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 80050b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050b8:	789a      	ldrb	r2, [r3, #2]
 80050ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050bc:	705a      	strb	r2, [r3, #1]
 80050be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050c0:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 80050c6:	461a      	mov	r2, r3
 80050c8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80050cc:	4413      	add	r3, r2
 80050ce:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80050d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 80050d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d8:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	461a      	mov	r2, r3
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 80050e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80050e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050e8:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	3301      	adds	r3, #1
 80050ee:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d139      	bne.n	8005168 <cdcd_open+0x1cc>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 80050f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050f6:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 80050f8:	2b0a      	cmp	r3, #10
 80050fa:	d135      	bne.n	8005168 <cdcd_open+0x1cc>
 80050fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050fe:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8005104:	461a      	mov	r2, r3
 8005106:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800510a:	4413      	add	r3, r2
 800510c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8005110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005112:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	461a      	mov	r2, r3
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8005122:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 8005124:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005126:	3303      	adds	r3, #3
 8005128:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800512a:	3202      	adds	r2, #2
 800512c:	79f8      	ldrb	r0, [r7, #7]
 800512e:	9201      	str	r2, [sp, #4]
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	2302      	movs	r3, #2
 8005134:	2202      	movs	r2, #2
 8005136:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005138:	f002 ffa6 	bl	8008088 <usbd_open_edpt_pair>
 800513c:	4603      	mov	r3, r0
 800513e:	f083 0301 	eor.w	r3, r3, #1
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00a      	beq.n	800515e <cdcd_open+0x1c2>
 8005148:	4b0e      	ldr	r3, [pc, #56]	@ (8005184 <cdcd_open+0x1e8>)
 800514a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800514c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	d000      	beq.n	800515a <cdcd_open+0x1be>
 8005158:	be00      	bkpt	0x0000
 800515a:	2300      	movs	r3, #0
 800515c:	e00b      	b.n	8005176 <cdcd_open+0x1da>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 800515e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8005162:	330e      	adds	r3, #14
 8005164:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 8005168:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff fcb1 	bl	8004ad4 <_prep_out_transaction>

  return drv_len;
 8005172:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 8005176:	4618      	mov	r0, r3
 8005178:	3760      	adds	r7, #96	@ 0x60
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	200009bc 	.word	0x200009bc
 8005184:	e000edf0 	.word	0xe000edf0

08005188 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	@ 0x28
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	603a      	str	r2, [r7, #0]
 8005192:	71fb      	strb	r3, [r7, #7]
 8005194:	460b      	mov	r3, r1
 8005196:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d001      	beq.n	80051aa <cdcd_control_xfer_cb+0x22>
 80051a6:	2300      	movs	r3, #0
 80051a8:	e0e6      	b.n	8005378 <cdcd_control_xfer_cb+0x1f0>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80051aa:	2300      	movs	r3, #0
 80051ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80051b0:	e014      	b.n	80051dc <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 80051b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051b6:	22e8      	movs	r2, #232	@ 0xe8
 80051b8:	fb02 f303 	mul.w	r3, r2, r3
 80051bc:	4a70      	ldr	r2, [pc, #448]	@ (8005380 <cdcd_control_xfer_cb+0x1f8>)
 80051be:	4413      	add	r3, r2
 80051c0:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	889b      	ldrh	r3, [r3, #4]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d009      	beq.n	80051e6 <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80051d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051d6:	3301      	adds	r3, #1
 80051d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80051dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d0e6      	beq.n	80051b2 <cdcd_control_xfer_cb+0x2a>
 80051e4:	e000      	b.n	80051e8 <cdcd_control_xfer_cb+0x60>
      break;
 80051e6:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 80051e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <cdcd_control_xfer_cb+0x6c>
 80051f0:	2300      	movs	r3, #0
 80051f2:	e0c1      	b.n	8005378 <cdcd_control_xfer_cb+0x1f0>

  switch (request->bRequest) {
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	3b20      	subs	r3, #32
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	f200 80b2 	bhi.w	8005364 <cdcd_control_xfer_cb+0x1dc>
 8005200:	a201      	add	r2, pc, #4	@ (adr r2, 8005208 <cdcd_control_xfer_cb+0x80>)
 8005202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005206:	bf00      	nop
 8005208:	08005219 	.word	0x08005219
 800520c:	08005255 	.word	0x08005255
 8005210:	0800526f 	.word	0x0800526f
 8005214:	08005333 	.word	0x08005333
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8005218:	79bb      	ldrb	r3, [r7, #6]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d108      	bne.n	8005230 <cdcd_control_xfer_cb+0xa8>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	f103 0208 	add.w	r2, r3, #8
 8005224:	79f8      	ldrb	r0, [r7, #7]
 8005226:	2307      	movs	r3, #7
 8005228:	6839      	ldr	r1, [r7, #0]
 800522a:	f003 fa13 	bl	8008654 <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 800522e:	e09b      	b.n	8005368 <cdcd_control_xfer_cb+0x1e0>
      } else if (stage == CONTROL_STAGE_ACK) {
 8005230:	79bb      	ldrb	r3, [r7, #6]
 8005232:	2b03      	cmp	r3, #3
 8005234:	f040 8098 	bne.w	8005368 <cdcd_control_xfer_cb+0x1e0>
        if (tud_cdc_line_coding_cb) {
 8005238:	4b52      	ldr	r3, [pc, #328]	@ (8005384 <cdcd_control_xfer_cb+0x1fc>)
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 8094 	beq.w	8005368 <cdcd_control_xfer_cb+0x1e0>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	f103 0208 	add.w	r2, r3, #8
 8005246:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800524a:	4611      	mov	r1, r2
 800524c:	4618      	mov	r0, r3
 800524e:	f3af 8000 	nop.w
      break;
 8005252:	e089      	b.n	8005368 <cdcd_control_xfer_cb+0x1e0>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8005254:	79bb      	ldrb	r3, [r7, #6]
 8005256:	2b01      	cmp	r3, #1
 8005258:	f040 8088 	bne.w	800536c <cdcd_control_xfer_cb+0x1e4>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	f103 0208 	add.w	r2, r3, #8
 8005262:	79f8      	ldrb	r0, [r7, #7]
 8005264:	2307      	movs	r3, #7
 8005266:	6839      	ldr	r1, [r7, #0]
 8005268:	f003 f9f4 	bl	8008654 <tud_control_xfer>
      }
      break;
 800526c:	e07e      	b.n	800536c <cdcd_control_xfer_cb+0x1e4>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 800526e:	79bb      	ldrb	r3, [r7, #6]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d105      	bne.n	8005280 <cdcd_control_xfer_cb+0xf8>
        tud_control_status(rhport, request);
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	6839      	ldr	r1, [r7, #0]
 8005278:	4618      	mov	r0, r3
 800527a:	f003 f979 	bl	8008570 <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 800527e:	e077      	b.n	8005370 <cdcd_control_xfer_cb+0x1e8>
      } else if (stage == CONTROL_STAGE_ACK) {
 8005280:	79bb      	ldrb	r3, [r7, #6]
 8005282:	2b03      	cmp	r3, #3
 8005284:	d174      	bne.n	8005370 <cdcd_control_xfer_cb+0x1e8>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	885b      	ldrh	r3, [r3, #2]
 800528a:	b29b      	uxth	r3, r3
 800528c:	613b      	str	r3, [r7, #16]
 800528e:	2300      	movs	r3, #0
 8005290:	73fb      	strb	r3, [r7, #15]
 8005292:	7bfb      	ldrb	r3, [r7, #15]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	fa22 f303 	lsr.w	r3, r2, r3
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	bf14      	ite	ne
 80052a2:	2301      	movne	r3, #1
 80052a4:	2300      	moveq	r3, #0
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	885b      	ldrh	r3, [r3, #2]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	61bb      	str	r3, [r7, #24]
 80052b2:	2301      	movs	r3, #1
 80052b4:	75fb      	strb	r3, [r7, #23]
 80052b6:	7dfb      	ldrb	r3, [r7, #23]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	fa22 f303 	lsr.w	r3, r2, r3
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	bf14      	ite	ne
 80052c6:	2301      	movne	r3, #1
 80052c8:	2300      	moveq	r3, #0
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	885b      	ldrh	r3, [r3, #2]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	711a      	strb	r2, [r3, #4]
        if (_cdcd_cfg.tx_overwritabe_if_not_connected) {
 80052da:	4b2b      	ldr	r3, [pc, #172]	@ (8005388 <cdcd_control_xfer_cb+0x200>)
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d013      	beq.n	8005310 <cdcd_control_xfer_cb+0x188>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	f103 021c 	add.w	r2, r3, #28
 80052ee:	7ffb      	ldrb	r3, [r7, #31]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	bf14      	ite	ne
 80052f4:	2301      	movne	r3, #1
 80052f6:	2300      	moveq	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	f083 0301 	eor.w	r3, r3, #1
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	b2db      	uxtb	r3, r3
 8005306:	4619      	mov	r1, r3
 8005308:	4610      	mov	r0, r2
 800530a:	f001 fbbc 	bl	8006a86 <tu_fifo_set_overwritable>
 800530e:	e005      	b.n	800531c <cdcd_control_xfer_cb+0x194>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, false);
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	331c      	adds	r3, #28
 8005314:	2100      	movs	r1, #0
 8005316:	4618      	mov	r0, r3
 8005318:	f001 fbb5 	bl	8006a86 <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 800531c:	4b1b      	ldr	r3, [pc, #108]	@ (800538c <cdcd_control_xfer_cb+0x204>)
 800531e:	2b00      	cmp	r3, #0
 8005320:	d026      	beq.n	8005370 <cdcd_control_xfer_cb+0x1e8>
          tud_cdc_line_state_cb(itf, dtr, rts);
 8005322:	7fba      	ldrb	r2, [r7, #30]
 8005324:	7ff9      	ldrb	r1, [r7, #31]
 8005326:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800532a:	4618      	mov	r0, r3
 800532c:	f7fb fdca 	bl	8000ec4 <tud_cdc_line_state_cb>
      break;
 8005330:	e01e      	b.n	8005370 <cdcd_control_xfer_cb+0x1e8>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 8005332:	79bb      	ldrb	r3, [r7, #6]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d105      	bne.n	8005344 <cdcd_control_xfer_cb+0x1bc>
        tud_control_status(rhport, request);
 8005338:	79fb      	ldrb	r3, [r7, #7]
 800533a:	6839      	ldr	r1, [r7, #0]
 800533c:	4618      	mov	r0, r3
 800533e:	f003 f917 	bl	8008570 <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 8005342:	e017      	b.n	8005374 <cdcd_control_xfer_cb+0x1ec>
      } else if (stage == CONTROL_STAGE_ACK) {
 8005344:	79bb      	ldrb	r3, [r7, #6]
 8005346:	2b03      	cmp	r3, #3
 8005348:	d114      	bne.n	8005374 <cdcd_control_xfer_cb+0x1ec>
        if (tud_cdc_send_break_cb) {
 800534a:	4b11      	ldr	r3, [pc, #68]	@ (8005390 <cdcd_control_xfer_cb+0x208>)
 800534c:	2b00      	cmp	r3, #0
 800534e:	d011      	beq.n	8005374 <cdcd_control_xfer_cb+0x1ec>
          tud_cdc_send_break_cb(itf, request->wValue);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	885b      	ldrh	r3, [r3, #2]
 8005354:	b29a      	uxth	r2, r3
 8005356:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800535a:	4611      	mov	r1, r2
 800535c:	4618      	mov	r0, r3
 800535e:	f3af 8000 	nop.w
      break;
 8005362:	e007      	b.n	8005374 <cdcd_control_xfer_cb+0x1ec>

    default:
      return false; // stall unsupported request
 8005364:	2300      	movs	r3, #0
 8005366:	e007      	b.n	8005378 <cdcd_control_xfer_cb+0x1f0>
      break;
 8005368:	bf00      	nop
 800536a:	e004      	b.n	8005376 <cdcd_control_xfer_cb+0x1ee>
      break;
 800536c:	bf00      	nop
 800536e:	e002      	b.n	8005376 <cdcd_control_xfer_cb+0x1ee>
      break;
 8005370:	bf00      	nop
 8005372:	e000      	b.n	8005376 <cdcd_control_xfer_cb+0x1ee>
      break;
 8005374:	bf00      	nop
  }

  return true;
 8005376:	2301      	movs	r3, #1
}
 8005378:	4618      	mov	r0, r3
 800537a:	3728      	adds	r7, #40	@ 0x28
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	200009bc 	.word	0x200009bc
 8005384:	00000000 	.word	0x00000000
 8005388:	2000006c 	.word	0x2000006c
 800538c:	08000ec5 	.word	0x08000ec5
 8005390:	00000000 	.word	0x00000000

08005394 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af00      	add	r7, sp, #0
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	4603      	mov	r3, r0
 800539e:	71fb      	strb	r3, [r7, #7]
 80053a0:	460b      	mov	r3, r1
 80053a2:	71bb      	strb	r3, [r7, #6]
 80053a4:	4613      	mov	r3, r2
 80053a6:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80053a8:	2300      	movs	r3, #0
 80053aa:	77fb      	strb	r3, [r7, #31]
 80053ac:	e013      	b.n	80053d6 <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 80053ae:	7ffb      	ldrb	r3, [r7, #31]
 80053b0:	22e8      	movs	r2, #232	@ 0xe8
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
 80053b6:	4a5f      	ldr	r2, [pc, #380]	@ (8005534 <cdcd_xfer_cb+0x1a0>)
 80053b8:	4413      	add	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	78db      	ldrb	r3, [r3, #3]
 80053c0:	79ba      	ldrb	r2, [r7, #6]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d00a      	beq.n	80053dc <cdcd_xfer_cb+0x48>
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	789b      	ldrb	r3, [r3, #2]
 80053ca:	79ba      	ldrb	r2, [r7, #6]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d005      	beq.n	80053dc <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80053d0:	7ffb      	ldrb	r3, [r7, #31]
 80053d2:	3301      	adds	r3, #1
 80053d4:	77fb      	strb	r3, [r7, #31]
 80053d6:	7ffb      	ldrb	r3, [r7, #31]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0e8      	beq.n	80053ae <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 80053dc:	7ffb      	ldrb	r3, [r7, #31]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <cdcd_xfer_cb+0x64>
 80053e2:	4b55      	ldr	r3, [pc, #340]	@ (8005538 <cdcd_xfer_cb+0x1a4>)
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d000      	beq.n	80053f4 <cdcd_xfer_cb+0x60>
 80053f2:	be00      	bkpt	0x0000
 80053f4:	2300      	movs	r3, #0
 80053f6:	e098      	b.n	800552a <cdcd_xfer_cb+0x196>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 80053f8:	7ffb      	ldrb	r3, [r7, #31]
 80053fa:	01db      	lsls	r3, r3, #7
 80053fc:	4a4f      	ldr	r2, [pc, #316]	@ (800553c <cdcd_xfer_cb+0x1a8>)
 80053fe:	4413      	add	r3, r2
 8005400:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	78db      	ldrb	r3, [r3, #3]
 8005406:	79ba      	ldrb	r2, [r7, #6]
 8005408:	429a      	cmp	r2, r3
 800540a:	d148      	bne.n	800549e <cdcd_xfer_cb+0x10a>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	3310      	adds	r3, #16
 8005410:	6939      	ldr	r1, [r7, #16]
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	b292      	uxth	r2, r2
 8005416:	4618      	mov	r0, r3
 8005418:	f001 fb00 	bl	8006a1c <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 800541c:	4b48      	ldr	r3, [pc, #288]	@ (8005540 <cdcd_xfer_cb+0x1ac>)
 800541e:	2b00      	cmp	r3, #0
 8005420:	d027      	beq.n	8005472 <cdcd_xfer_cb+0xde>
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	795b      	ldrb	r3, [r3, #5]
 8005426:	2bff      	cmp	r3, #255	@ 0xff
 8005428:	d023      	beq.n	8005472 <cdcd_xfer_cb+0xde>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 800542a:	2300      	movs	r3, #0
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	e01c      	b.n	800546a <cdcd_xfer_cb+0xd6>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	795a      	ldrb	r2, [r3, #5]
 8005434:	6939      	ldr	r1, [r7, #16]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	440b      	add	r3, r1
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d111      	bne.n	8005464 <cdcd_xfer_cb+0xd0>
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	3310      	adds	r3, #16
 8005444:	4618      	mov	r0, r3
 8005446:	f001 f9e3 	bl	8006810 <tu_fifo_empty>
 800544a:	4603      	mov	r3, r0
 800544c:	f083 0301 	eor.w	r3, r3, #1
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d006      	beq.n	8005464 <cdcd_xfer_cb+0xd0>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	795a      	ldrb	r2, [r3, #5]
 800545a:	7ffb      	ldrb	r3, [r7, #31]
 800545c:	4611      	mov	r1, r2
 800545e:	4618      	mov	r0, r3
 8005460:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	3301      	adds	r3, #1
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d3de      	bcc.n	8005430 <cdcd_xfer_cb+0x9c>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8005472:	4b34      	ldr	r3, [pc, #208]	@ (8005544 <cdcd_xfer_cb+0x1b0>)
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00e      	beq.n	8005496 <cdcd_xfer_cb+0x102>
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	3310      	adds	r3, #16
 800547c:	4618      	mov	r0, r3
 800547e:	f001 f9c7 	bl	8006810 <tu_fifo_empty>
 8005482:	4603      	mov	r3, r0
 8005484:	f083 0301 	eor.w	r3, r3, #1
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <cdcd_xfer_cb+0x102>
      tud_cdc_rx_cb(itf);
 800548e:	7ffb      	ldrb	r3, [r7, #31]
 8005490:	4618      	mov	r0, r3
 8005492:	f7fb fd43 	bl	8000f1c <tud_cdc_rx_cb>
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 8005496:	7ffb      	ldrb	r3, [r7, #31]
 8005498:	4618      	mov	r0, r3
 800549a:	f7ff fb1b 	bl	8004ad4 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	789b      	ldrb	r3, [r3, #2]
 80054a2:	79ba      	ldrb	r2, [r7, #6]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d13f      	bne.n	8005528 <cdcd_xfer_cb+0x194>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 80054a8:	4b27      	ldr	r3, [pc, #156]	@ (8005548 <cdcd_xfer_cb+0x1b4>)
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <cdcd_xfer_cb+0x122>
      tud_cdc_tx_complete_cb(itf);
 80054ae:	7ffb      	ldrb	r3, [r7, #31]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 80054b6:	7ffb      	ldrb	r3, [r7, #31]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff fc2f 	bl	8004d1c <tud_cdc_n_write_flush>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d131      	bne.n	8005528 <cdcd_xfer_cb+0x194>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	331c      	adds	r3, #28
 80054c8:	4618      	mov	r0, r3
 80054ca:	f001 f96f 	bl	80067ac <tu_fifo_count>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d129      	bne.n	8005528 <cdcd_xfer_cb+0x194>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d026      	beq.n	8005528 <cdcd_xfer_cb+0x194>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d121      	bne.n	8005528 <cdcd_xfer_cb+0x194>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	789a      	ldrb	r2, [r3, #2]
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	4611      	mov	r1, r2
 80054ec:	4618      	mov	r0, r3
 80054ee:	f002 fe79 	bl	80081e4 <usbd_edpt_claim>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d017      	beq.n	8005528 <cdcd_xfer_cb+0x194>
          TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0));
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	7899      	ldrb	r1, [r3, #2]
 80054fc:	79f8      	ldrb	r0, [r7, #7]
 80054fe:	2300      	movs	r3, #0
 8005500:	2200      	movs	r2, #0
 8005502:	f002 febf 	bl	8008284 <usbd_edpt_xfer>
 8005506:	4603      	mov	r3, r0
 8005508:	f083 0301 	eor.w	r3, r3, #1
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <cdcd_xfer_cb+0x194>
 8005512:	4b09      	ldr	r3, [pc, #36]	@ (8005538 <cdcd_xfer_cb+0x1a4>)
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d000      	beq.n	8005524 <cdcd_xfer_cb+0x190>
 8005522:	be00      	bkpt	0x0000
 8005524:	2300      	movs	r3, #0
 8005526:	e000      	b.n	800552a <cdcd_xfer_cb+0x196>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 8005528:	2301      	movs	r3, #1
}
 800552a:	4618      	mov	r0, r3
 800552c:	3720      	adds	r7, #32
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	200009bc 	.word	0x200009bc
 8005538:	e000edf0 	.word	0xe000edf0
 800553c:	20000aa4 	.word	0x20000aa4
 8005540:	00000000 	.word	0x00000000
 8005544:	08000f1d 	.word	0x08000f1d
 8005548:	00000000 	.word	0x00000000

0800554c <tud_hid_set_idle_cb>:
TU_ATTR_WEAK void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
  (void) instance;
  (void) protocol;
}

TU_ATTR_WEAK bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate) {
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	4603      	mov	r3, r0
 8005554:	460a      	mov	r2, r1
 8005556:	71fb      	strb	r3, [r7, #7]
 8005558:	4613      	mov	r3, r2
 800555a:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) idle_rate;
  return true;
 800555c:	2301      	movs	r3, #1
}
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <tud_hid_report_failed_cb>:
  (void) report;
  (void) len;
}

// Invoked when a transfer wasn't successful
TU_ATTR_WEAK void tud_hid_report_failed_cb(uint8_t instance, hid_report_type_t report_type, uint8_t const* report, uint16_t xferred_bytes) {
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	603a      	str	r2, [r7, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	4603      	mov	r3, r0
 8005576:	71fb      	strb	r3, [r7, #7]
 8005578:	460b      	mov	r3, r1
 800557a:	71bb      	strb	r3, [r7, #6]
 800557c:	4613      	mov	r3, r2
 800557e:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report_type;
  (void) report;
  (void) xferred_bytes;
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance) {
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	4603      	mov	r3, r0
 8005594:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 8005596:	2300      	movs	r3, #0
 8005598:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 800559a:	79fa      	ldrb	r2, [r7, #7]
 800559c:	491b      	ldr	r1, [pc, #108]	@ (800560c <tud_hid_n_ready+0x80>)
 800559e:	4613      	mov	r3, r2
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	440b      	add	r3, r1
 80055a8:	3301      	adds	r3, #1
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	73bb      	strb	r3, [r7, #14]
 80055ae:	f001 faf7 	bl	8006ba0 <tud_mounted>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d009      	beq.n	80055cc <tud_hid_n_ready+0x40>
 80055b8:	f001 fb04 	bl	8006bc4 <tud_suspended>
 80055bc:	4603      	mov	r3, r0
 80055be:	f083 0301 	eor.w	r3, r3, #1
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <tud_hid_n_ready+0x40>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <tud_hid_n_ready+0x42>
 80055cc:	2300      	movs	r3, #0
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d010      	beq.n	80055fa <tud_hid_n_ready+0x6e>
 80055d8:	7bbb      	ldrb	r3, [r7, #14]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00d      	beq.n	80055fa <tud_hid_n_ready+0x6e>
 80055de:	7bba      	ldrb	r2, [r7, #14]
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	4611      	mov	r1, r2
 80055e4:	4618      	mov	r0, r3
 80055e6:	f002 fec3 	bl	8008370 <usbd_edpt_busy>
 80055ea:	4603      	mov	r3, r0
 80055ec:	f083 0301 	eor.w	r3, r3, #1
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <tud_hid_n_ready+0x6e>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e000      	b.n	80055fc <tud_hid_n_ready+0x70>
 80055fa:	2300      	movs	r3, #0
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	b2db      	uxtb	r3, r3
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000b24 	.word	0x20000b24

08005610 <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const *report, uint16_t len) {
 8005610:	b580      	push	{r7, lr}
 8005612:	b08e      	sub	sp, #56	@ 0x38
 8005614:	af00      	add	r7, sp, #0
 8005616:	603a      	str	r2, [r7, #0]
 8005618:	461a      	mov	r2, r3
 800561a:	4603      	mov	r3, r0
 800561c:	71fb      	strb	r3, [r7, #7]
 800561e:	460b      	mov	r3, r1
 8005620:	71bb      	strb	r3, [r7, #6]
 8005622:	4613      	mov	r3, r2
 8005624:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(instance < CFG_TUD_HID);
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <tud_hid_n_report+0x20>
 800562c:	2300      	movs	r3, #0
 800562e:	e06d      	b.n	800570c <tud_hid_n_report+0xfc>
  const uint8_t rhport = 0;
 8005630:	2300      	movs	r3, #0
 8005632:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  hidd_interface_t *p_hid = &_hidd_itf[instance];
 8005636:	79fa      	ldrb	r2, [r7, #7]
 8005638:	4613      	mov	r3, r2
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4a34      	ldr	r2, [pc, #208]	@ (8005714 <tud_hid_n_report+0x104>)
 8005642:	4413      	add	r3, r2
 8005644:	633b      	str	r3, [r7, #48]	@ 0x30
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8005646:	79fa      	ldrb	r2, [r7, #7]
 8005648:	4613      	mov	r3, r2
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	4413      	add	r3, r2
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	4a31      	ldr	r2, [pc, #196]	@ (8005718 <tud_hid_n_report+0x108>)
 8005652:	4413      	add	r3, r2
 8005654:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_hid->ep_in));
 8005656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005658:	785a      	ldrb	r2, [r3, #1]
 800565a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800565e:	4611      	mov	r1, r2
 8005660:	4618      	mov	r0, r3
 8005662:	f002 fdbf 	bl	80081e4 <usbd_edpt_claim>
 8005666:	4603      	mov	r3, r0
 8005668:	f083 0301 	eor.w	r3, r3, #1
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <tud_hid_n_report+0x66>
 8005672:	2300      	movs	r3, #0
 8005674:	e04a      	b.n	800570c <tud_hid_n_report+0xfc>

  // prepare data
  if (report_id) {
 8005676:	79bb      	ldrb	r3, [r7, #6]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d021      	beq.n	80056c0 <tud_hid_n_report+0xb0>
    p_epbuf->epin[0] = report_id;
 800567c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800567e:	79ba      	ldrb	r2, [r7, #6]
 8005680:	741a      	strb	r2, [r3, #16]
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin + 1, CFG_TUD_HID_EP_BUFSIZE - 1, report, len));
 8005682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005684:	3310      	adds	r3, #16
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	88bb      	ldrh	r3, [r7, #4]
 800568a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800568c:	220f      	movs	r2, #15
 800568e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	623a      	str	r2, [r7, #32]
 8005694:	61fb      	str	r3, [r7, #28]
  if ( count > destsz ) {
 8005696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	429a      	cmp	r2, r3
 800569c:	d202      	bcs.n	80056a4 <tud_hid_n_report+0x94>
    return -1;
 800569e:	f04f 33ff 	mov.w	r3, #4294967295
 80056a2:	e005      	b.n	80056b0 <tud_hid_n_report+0xa0>
  memcpy(dest, src, count);
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	6a39      	ldr	r1, [r7, #32]
 80056a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056aa:	f005 fca2 	bl	800aff2 <memcpy>
  return 0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <tud_hid_n_report+0xa8>
 80056b4:	2300      	movs	r3, #0
 80056b6:	e029      	b.n	800570c <tud_hid_n_report+0xfc>
    len++;
 80056b8:	88bb      	ldrh	r3, [r7, #4]
 80056ba:	3301      	adds	r3, #1
 80056bc:	80bb      	strh	r3, [r7, #4]
 80056be:	e01a      	b.n	80056f6 <tud_hid_n_report+0xe6>
  } else {
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin, CFG_TUD_HID_EP_BUFSIZE, report, len));
 80056c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c2:	f103 0210 	add.w	r2, r3, #16
 80056c6:	88bb      	ldrh	r3, [r7, #4]
 80056c8:	61ba      	str	r2, [r7, #24]
 80056ca:	2210      	movs	r2, #16
 80056cc:	617a      	str	r2, [r7, #20]
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	613a      	str	r2, [r7, #16]
 80056d2:	60fb      	str	r3, [r7, #12]
  if ( count > destsz ) {
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d202      	bcs.n	80056e2 <tud_hid_n_report+0xd2>
    return -1;
 80056dc:	f04f 33ff 	mov.w	r3, #4294967295
 80056e0:	e005      	b.n	80056ee <tud_hid_n_report+0xde>
  memcpy(dest, src, count);
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	6939      	ldr	r1, [r7, #16]
 80056e6:	69b8      	ldr	r0, [r7, #24]
 80056e8:	f005 fc83 	bl	800aff2 <memcpy>
  return 0;
 80056ec:	2300      	movs	r3, #0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <tud_hid_n_report+0xe6>
 80056f2:	2300      	movs	r3, #0
 80056f4:	e00a      	b.n	800570c <tud_hid_n_report+0xfc>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_epbuf->epin, len);
 80056f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f8:	7859      	ldrb	r1, [r3, #1]
 80056fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056fc:	f103 0210 	add.w	r2, r3, #16
 8005700:	88bb      	ldrh	r3, [r7, #4]
 8005702:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8005706:	f002 fdbd 	bl	8008284 <usbd_edpt_xfer>
 800570a:	4603      	mov	r3, r0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3738      	adds	r7, #56	@ 0x38
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	20000b24 	.word	0x20000b24
 8005718:	20000b30 	.word	0x20000b30

0800571c <tud_hid_n_keyboard_report>:

uint8_t tud_hid_n_get_protocol(uint8_t instance) {
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	4603      	mov	r3, r0
 8005726:	71fb      	strb	r3, [r7, #7]
 8005728:	460b      	mov	r3, r1
 800572a:	71bb      	strb	r3, [r7, #6]
 800572c:	4613      	mov	r3, r2
 800572e:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;
  report.modifier = modifier;
 8005730:	797b      	ldrb	r3, [r7, #5]
 8005732:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 8005734:	2300      	movs	r3, #0
 8005736:	727b      	strb	r3, [r7, #9]

  if (keycode) {
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d007      	beq.n	800574e <tud_hid_n_keyboard_report+0x32>
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	f107 030a 	add.w	r3, r7, #10
 8005744:	6811      	ldr	r1, [r2, #0]
 8005746:	6019      	str	r1, [r3, #0]
 8005748:	8892      	ldrh	r2, [r2, #4]
 800574a:	809a      	strh	r2, [r3, #4]
 800574c:	e007      	b.n	800575e <tud_hid_n_keyboard_report+0x42>
  } else {
    tu_memclr(report.keycode, 6);
 800574e:	f107 0308 	add.w	r3, r7, #8
 8005752:	3302      	adds	r3, #2
 8005754:	2206      	movs	r2, #6
 8005756:	2100      	movs	r1, #0
 8005758:	4618      	mov	r0, r3
 800575a:	f005 fb72 	bl	800ae42 <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 800575e:	f107 0208 	add.w	r2, r7, #8
 8005762:	79b9      	ldrb	r1, [r7, #6]
 8005764:	79f8      	ldrb	r0, [r7, #7]
 8005766:	2308      	movs	r3, #8
 8005768:	f7ff ff52 	bl	8005610 <tud_hid_n_report>
 800576c:	4603      	mov	r3, r0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <hidd_init>:
}

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void) {
 8005776:	b580      	push	{r7, lr}
 8005778:	af00      	add	r7, sp, #0
  hidd_reset(0);
 800577a:	2000      	movs	r0, #0
 800577c:	f000 f80a 	bl	8005794 <hidd_reset>
}
 8005780:	bf00      	nop
 8005782:	bd80      	pop	{r7, pc}

08005784 <hidd_deinit>:

bool hidd_deinit(void) {
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
  return true;
 8005788:	2301      	movs	r3, #1
}
 800578a:	4618      	mov	r0, r3
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <hidd_reset>:

void hidd_reset(uint8_t rhport) {
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	4603      	mov	r3, r0
 800579c:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 800579e:	220c      	movs	r2, #12
 80057a0:	2100      	movs	r1, #0
 80057a2:	4803      	ldr	r0, [pc, #12]	@ (80057b0 <hidd_reset+0x1c>)
 80057a4:	f005 fb4d 	bl	800ae42 <memset>
}
 80057a8:	bf00      	nop
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20000b24 	.word	0x20000b24

080057b4 <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const *desc_itf, uint16_t max_len) {
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b094      	sub	sp, #80	@ 0x50
 80057b8:	af02      	add	r7, sp, #8
 80057ba:	4603      	mov	r3, r0
 80057bc:	6039      	str	r1, [r7, #0]
 80057be:	71fb      	strb	r3, [r7, #7]
 80057c0:	4613      	mov	r3, r2
 80057c2:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	795b      	ldrb	r3, [r3, #5]
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d001      	beq.n	80057d0 <hidd_open+0x1c>
 80057cc:	2300      	movs	r3, #0
 80057ce:	e0ce      	b.n	800596e <hidd_open+0x1ba>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	791b      	ldrb	r3, [r3, #4]
 80057d4:	461a      	mov	r2, r3
 80057d6:	00d2      	lsls	r2, r2, #3
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 80057dc:	3312      	adds	r3, #18
 80057de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  TU_ASSERT(max_len >= drv_len, 0);
 80057e2:	88ba      	ldrh	r2, [r7, #4]
 80057e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d20a      	bcs.n	8005802 <hidd_open+0x4e>
 80057ec:	4b62      	ldr	r3, [pc, #392]	@ (8005978 <hidd_open+0x1c4>)
 80057ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80057f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d000      	beq.n	80057fe <hidd_open+0x4a>
 80057fc:	be00      	bkpt	0x0000
 80057fe:	2300      	movs	r3, #0
 8005800:	e0b5      	b.n	800596e <hidd_open+0x1ba>

  // Find available interface
  hidd_interface_t *p_hid;
  uint8_t hid_id;
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8005802:	2300      	movs	r3, #0
 8005804:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005808:	e011      	b.n	800582e <hidd_open+0x7a>
    p_hid = &_hidd_itf[hid_id];
 800580a:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800580e:	4613      	mov	r3, r2
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4a59      	ldr	r2, [pc, #356]	@ (800597c <hidd_open+0x1c8>)
 8005818:	4413      	add	r3, r2
 800581a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (p_hid->ep_in == 0) {
 800581c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800581e:	785b      	ldrb	r3, [r3, #1]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d009      	beq.n	8005838 <hidd_open+0x84>
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8005824:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005828:	3301      	adds	r3, #1
 800582a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800582e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0e9      	beq.n	800580a <hidd_open+0x56>
 8005836:	e000      	b.n	800583a <hidd_open+0x86>
      break;
 8005838:	bf00      	nop
    }
  }
  TU_ASSERT(hid_id < CFG_TUD_HID, 0);
 800583a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <hidd_open+0xa4>
 8005842:	4b4d      	ldr	r3, [pc, #308]	@ (8005978 <hidd_open+0x1c4>)
 8005844:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d000      	beq.n	8005854 <hidd_open+0xa0>
 8005852:	be00      	bkpt	0x0000
 8005854:	2300      	movs	r3, #0
 8005856:	e08a      	b.n	800596e <hidd_open+0x1ba>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_id];
 8005858:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800585c:	4613      	mov	r3, r2
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	4413      	add	r3, r2
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	4a46      	ldr	r2, [pc, #280]	@ (8005980 <hidd_open+0x1cc>)
 8005866:	4413      	add	r3, r2
 8005868:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint8_t const *p_desc = (uint8_t const *)desc_itf;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800586e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005870:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8005880:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005884:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	3301      	adds	r3, #1
 800588a:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 800588c:	2b21      	cmp	r3, #33	@ 0x21
 800588e:	d00a      	beq.n	80058a6 <hidd_open+0xf2>
 8005890:	4b39      	ldr	r3, [pc, #228]	@ (8005978 <hidd_open+0x1c4>)
 8005892:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d000      	beq.n	80058a2 <hidd_open+0xee>
 80058a0:	be00      	bkpt	0x0000
 80058a2:	2300      	movs	r3, #0
 80058a4:	e063      	b.n	800596e <hidd_open+0x1ba>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *)p_desc;
 80058a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058aa:	609a      	str	r2, [r3, #8]
 80058ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ae:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	461a      	mov	r2, r3
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 80058be:	63bb      	str	r3, [r7, #56]	@ 0x38
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	7919      	ldrb	r1, [r3, #4]
 80058c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058c6:	3302      	adds	r3, #2
 80058c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058ca:	3201      	adds	r2, #1
 80058cc:	79f8      	ldrb	r0, [r7, #7]
 80058ce:	9201      	str	r2, [sp, #4]
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	2303      	movs	r3, #3
 80058d4:	460a      	mov	r2, r1
 80058d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80058d8:	f002 fbd6 	bl	8008088 <usbd_open_edpt_pair>
 80058dc:	4603      	mov	r3, r0
 80058de:	f083 0301 	eor.w	r3, r3, #1
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00a      	beq.n	80058fe <hidd_open+0x14a>
 80058e8:	4b23      	ldr	r3, [pc, #140]	@ (8005978 <hidd_open+0x1c4>)
 80058ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80058ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d000      	beq.n	80058fa <hidd_open+0x146>
 80058f8:	be00      	bkpt	0x0000
 80058fa:	2300      	movs	r3, #0
 80058fc:	e037      	b.n	800596e <hidd_open+0x1ba>

  if (desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT) {
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	799b      	ldrb	r3, [r3, #6]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d103      	bne.n	800590e <hidd_open+0x15a>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	79da      	ldrb	r2, [r3, #7]
 800590a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800590c:	70da      	strb	r2, [r3, #3]
  }

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 800590e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005910:	2201      	movs	r2, #1
 8005912:	719a      	strb	r2, [r3, #6]
  p_hid->itf_num = desc_itf->bInterfaceNumber;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	789a      	ldrb	r2, [r3, #2]
 8005918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800591a:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const *)p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 800591c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	3307      	adds	r3, #7
 8005922:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	881a      	ldrh	r2, [r3, #0]
 8005928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800592a:	809a      	strh	r2, [r3, #4]

  // Prepare for output endpoint
  if (p_hid->ep_out) {
 800592c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800592e:	789b      	ldrb	r3, [r3, #2]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d01a      	beq.n	800596a <hidd_open+0x1b6>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE), drv_len);
 8005934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005936:	7899      	ldrb	r1, [r3, #2]
 8005938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800593a:	f103 0220 	add.w	r2, r3, #32
 800593e:	79f8      	ldrb	r0, [r7, #7]
 8005940:	2310      	movs	r3, #16
 8005942:	f002 fc9f 	bl	8008284 <usbd_edpt_xfer>
 8005946:	4603      	mov	r3, r0
 8005948:	f083 0301 	eor.w	r3, r3, #1
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00b      	beq.n	800596a <hidd_open+0x1b6>
 8005952:	4b09      	ldr	r3, [pc, #36]	@ (8005978 <hidd_open+0x1c4>)
 8005954:	637b      	str	r3, [r7, #52]	@ 0x34
 8005956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d000      	beq.n	8005964 <hidd_open+0x1b0>
 8005962:	be00      	bkpt	0x0000
 8005964:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005968:	e001      	b.n	800596e <hidd_open+0x1ba>
  }

  return drv_len;
 800596a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
}
 800596e:	4618      	mov	r0, r3
 8005970:	3748      	adds	r7, #72	@ 0x48
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	e000edf0 	.word	0xe000edf0
 800597c:	20000b24 	.word	0x20000b24
 8005980:	20000b30 	.word	0x20000b30

08005984 <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 8005984:	b580      	push	{r7, lr}
 8005986:	b094      	sub	sp, #80	@ 0x50
 8005988:	af02      	add	r7, sp, #8
 800598a:	4603      	mov	r3, r0
 800598c:	603a      	str	r2, [r7, #0]
 800598e:	71fb      	strb	r3, [r7, #7]
 8005990:	460b      	mov	r3, r1
 8005992:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	f003 031f 	and.w	r3, r3, #31
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d001      	beq.n	80059a6 <hidd_control_xfer_cb+0x22>
 80059a2:	2300      	movs	r3, #0
 80059a4:	e1d6      	b.n	8005d54 <hidd_control_xfer_cb+0x3d0>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	889b      	ldrh	r3, [r3, #4]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 80059b0:	2300      	movs	r3, #0
 80059b2:	77bb      	strb	r3, [r7, #30]
 80059b4:	e00f      	b.n	80059d6 <hidd_control_xfer_cb+0x52>
    if (itf_num == _hidd_itf[i].itf_num) {
 80059b6:	7fba      	ldrb	r2, [r7, #30]
 80059b8:	498f      	ldr	r1, [pc, #572]	@ (8005bf8 <hidd_control_xfer_cb+0x274>)
 80059ba:	4613      	mov	r3, r2
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	7ffa      	ldrb	r2, [r7, #31]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d101      	bne.n	80059d0 <hidd_control_xfer_cb+0x4c>
      return i;
 80059cc:	7fbb      	ldrb	r3, [r7, #30]
 80059ce:	e006      	b.n	80059de <hidd_control_xfer_cb+0x5a>
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 80059d0:	7fbb      	ldrb	r3, [r7, #30]
 80059d2:	3301      	adds	r3, #1
 80059d4:	77bb      	strb	r3, [r7, #30]
 80059d6:	7fbb      	ldrb	r3, [r7, #30]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0ec      	beq.n	80059b6 <hidd_control_xfer_cb+0x32>
  return 0xFF;
 80059dc:	23ff      	movs	r3, #255	@ 0xff
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 80059de:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 80059e2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <hidd_control_xfer_cb+0x6a>
 80059ea:	2300      	movs	r3, #0
 80059ec:	e1b2      	b.n	8005d54 <hidd_control_xfer_cb+0x3d0>
  hidd_interface_t *p_hid = &_hidd_itf[hid_itf];
 80059ee:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80059f2:	4613      	mov	r3, r2
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4a7f      	ldr	r2, [pc, #508]	@ (8005bf8 <hidd_control_xfer_cb+0x274>)
 80059fc:	4413      	add	r3, r2
 80059fe:	637b      	str	r3, [r7, #52]	@ 0x34
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_itf];
 8005a00:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005a04:	4613      	mov	r3, r2
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	4413      	add	r3, r2
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	4a7b      	ldr	r2, [pc, #492]	@ (8005bfc <hidd_control_xfer_cb+0x278>)
 8005a0e:	4413      	add	r3, r2
 8005a10:	633b      	str	r3, [r7, #48]	@ 0x30

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) {
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d145      	bne.n	8005aac <hidd_control_xfer_cb+0x128>
    //------------- STD Request -------------//
    if (stage == CONTROL_STAGE_SETUP) {
 8005a20:	79bb      	ldrb	r3, [r7, #6]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	f040 8195 	bne.w	8005d52 <hidd_control_xfer_cb+0x3ce>
      uint8_t const desc_type = tu_u16_high(request->wValue);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	885b      	ldrh	r3, [r3, #2]
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8005a30:	8bbb      	ldrh	r3, [r7, #28]
 8005a32:	0a1b      	lsrs	r3, r3, #8
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID) {
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	785b      	ldrb	r3, [r3, #1]
 8005a40:	2b06      	cmp	r3, #6
 8005a42:	d11b      	bne.n	8005a7c <hidd_control_xfer_cb+0xf8>
 8005a44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a48:	2b21      	cmp	r3, #33	@ 0x21
 8005a4a:	d117      	bne.n	8005a7c <hidd_control_xfer_cb+0xf8>
        TU_VERIFY(p_hid->hid_descriptor);
 8005a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <hidd_control_xfer_cb+0xd4>
 8005a54:	2300      	movs	r3, #0
 8005a56:	e17d      	b.n	8005d54 <hidd_control_xfer_cb+0x3d0>
        TU_VERIFY(tud_control_xfer(rhport, request, (void *)(uintptr_t)p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 8005a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	79f8      	ldrb	r0, [r7, #7]
 8005a64:	6839      	ldr	r1, [r7, #0]
 8005a66:	f002 fdf5 	bl	8008654 <tud_control_xfer>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	f083 0301 	eor.w	r3, r3, #1
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 816d 	beq.w	8005d52 <hidd_control_xfer_cb+0x3ce>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	e16b      	b.n	8005d54 <hidd_control_xfer_cb+0x3d0>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	785b      	ldrb	r3, [r3, #1]
 8005a80:	2b06      	cmp	r3, #6
 8005a82:	d111      	bne.n	8005aa8 <hidd_control_xfer_cb+0x124>
 8005a84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a88:	2b22      	cmp	r3, #34	@ 0x22
 8005a8a:	d10d      	bne.n	8005aa8 <hidd_control_xfer_cb+0x124>
        uint8_t const *desc_report = tud_hid_descriptor_report_cb(hid_itf);
 8005a8c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7fc fca9 	bl	80023e8 <tud_hid_descriptor_report_cb>
 8005a96:	6238      	str	r0, [r7, #32]
        tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_report, p_hid->report_desc_len);
 8005a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a9a:	889b      	ldrh	r3, [r3, #4]
 8005a9c:	79f8      	ldrb	r0, [r7, #7]
 8005a9e:	6a3a      	ldr	r2, [r7, #32]
 8005aa0:	6839      	ldr	r1, [r7, #0]
 8005aa2:	f002 fdd7 	bl	8008654 <tud_control_xfer>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8005aa6:	e154      	b.n	8005d52 <hidd_control_xfer_cb+0x3ce>
      } else {
        return false; // stall unsupported request
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	e153      	b.n	8005d54 <hidd_control_xfer_cb+0x3d0>
      }
    }
  } else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS) {
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	f040 813e 	bne.w	8005d38 <hidd_control_xfer_cb+0x3b4>
    //------------- Class Specific Request -------------//
    switch (request->bRequest) {
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	785b      	ldrb	r3, [r3, #1]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	2b0a      	cmp	r3, #10
 8005ac4:	f200 8136 	bhi.w	8005d34 <hidd_control_xfer_cb+0x3b0>
 8005ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad0 <hidd_control_xfer_cb+0x14c>)
 8005aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ace:	bf00      	nop
 8005ad0:	08005afd 	.word	0x08005afd
 8005ad4:	08005cd3 	.word	0x08005cd3
 8005ad8:	08005ce9 	.word	0x08005ce9
 8005adc:	08005d35 	.word	0x08005d35
 8005ae0:	08005d35 	.word	0x08005d35
 8005ae4:	08005d35 	.word	0x08005d35
 8005ae8:	08005d35 	.word	0x08005d35
 8005aec:	08005d35 	.word	0x08005d35
 8005af0:	08005bd3 	.word	0x08005bd3
 8005af4:	08005c8d 	.word	0x08005c8d
 8005af8:	08005cff 	.word	0x08005cff
      case HID_REQ_CONTROL_GET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8005afc:	79bb      	ldrb	r3, [r7, #6]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	f040 811c 	bne.w	8005d3c <hidd_control_xfer_cb+0x3b8>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	885b      	ldrh	r3, [r3, #2]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	82bb      	strh	r3, [r7, #20]
 8005b0c:	8abb      	ldrh	r3, [r7, #20]
 8005b0e:	0a1b      	lsrs	r3, r3, #8
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          uint8_t const report_id = tu_u16_low(request->wValue);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	885b      	ldrh	r3, [r3, #2]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8005b20:	8afb      	ldrh	r3, [r7, #22]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

          uint8_t* report_buf = p_epbuf->ctrl;
 8005b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2a:	647b      	str	r3, [r7, #68]	@ 0x44
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	88db      	ldrh	r3, [r3, #6]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	837b      	strh	r3, [r7, #26]
 8005b34:	2310      	movs	r3, #16
 8005b36:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8005b38:	8b7a      	ldrh	r2, [r7, #26]
 8005b3a:	8b3b      	ldrh	r3, [r7, #24]
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	bf28      	it	cs
 8005b40:	4613      	movcs	r3, r2
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          uint16_t xferlen = 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ((report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1)) {
 8005b4e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d013      	beq.n	8005b7e <hidd_control_xfer_cb+0x1fa>
 8005b56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d90f      	bls.n	8005b7e <hidd_control_xfer_cb+0x1fa>
            *report_buf++ = report_id;
 8005b5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b64:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005b68:	701a      	strb	r2, [r3, #0]
            req_len--;
 8005b6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            xferlen++;
 8005b74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005b78:	3301      	adds	r3, #1
 8005b7a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 8005b7e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8005b82:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8005b86:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8005b8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b92:	f7fb fb0b 	bl	80011ac <tud_hid_get_report_cb>
 8005b96:	4603      	mov	r3, r0
 8005b98:	461a      	mov	r2, r3
 8005b9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          TU_ASSERT(xferlen > 0);
 8005ba4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10a      	bne.n	8005bc2 <hidd_control_xfer_cb+0x23e>
 8005bac:	4b14      	ldr	r3, [pc, #80]	@ (8005c00 <hidd_control_xfer_cb+0x27c>)
 8005bae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d000      	beq.n	8005bbe <hidd_control_xfer_cb+0x23a>
 8005bbc:	be00      	bkpt	0x0000
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e0c8      	b.n	8005d54 <hidd_control_xfer_cb+0x3d0>

          tud_control_xfer(rhport, request, p_epbuf->ctrl, xferlen);
 8005bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bc4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005bc8:	79f8      	ldrb	r0, [r7, #7]
 8005bca:	6839      	ldr	r1, [r7, #0]
 8005bcc:	f002 fd42 	bl	8008654 <tud_control_xfer>
        }
        break;
 8005bd0:	e0b4      	b.n	8005d3c <hidd_control_xfer_cb+0x3b8>

      case HID_REQ_CONTROL_SET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8005bd2:	79bb      	ldrb	r3, [r7, #6]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d115      	bne.n	8005c04 <hidd_control_xfer_cb+0x280>
          TU_VERIFY(request->wLength <= CFG_TUD_HID_EP_BUFSIZE);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	88db      	ldrh	r3, [r3, #6]
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	2b10      	cmp	r3, #16
 8005be0:	d901      	bls.n	8005be6 <hidd_control_xfer_cb+0x262>
 8005be2:	2300      	movs	r3, #0
 8005be4:	e0b6      	b.n	8005d54 <hidd_control_xfer_cb+0x3d0>
          tud_control_xfer(rhport, request, p_epbuf->ctrl, request->wLength);
 8005be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	88db      	ldrh	r3, [r3, #6]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	79f8      	ldrb	r0, [r7, #7]
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	f002 fd2f 	bl	8008654 <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
        break;
 8005bf6:	e0a3      	b.n	8005d40 <hidd_control_xfer_cb+0x3bc>
 8005bf8:	20000b24 	.word	0x20000b24
 8005bfc:	20000b30 	.word	0x20000b30
 8005c00:	e000edf0 	.word	0xe000edf0
        } else if (stage == CONTROL_STAGE_ACK) {
 8005c04:	79bb      	ldrb	r3, [r7, #6]
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	f040 809a 	bne.w	8005d40 <hidd_control_xfer_cb+0x3bc>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	885b      	ldrh	r3, [r3, #2]
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8005c14:	89bb      	ldrh	r3, [r7, #12]
 8005c16:	0a1b      	lsrs	r3, r3, #8
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          uint8_t const report_id = tu_u16_low(request->wValue);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	885b      	ldrh	r3, [r3, #2]
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8005c28:	89fb      	ldrh	r3, [r7, #14]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          uint8_t const* report_buf = p_epbuf->ctrl;
 8005c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	88db      	ldrh	r3, [r3, #6]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	827b      	strh	r3, [r7, #18]
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8005c40:	8a7a      	ldrh	r2, [r7, #18]
 8005c42:	8a3b      	ldrh	r3, [r7, #16]
 8005c44:	4293      	cmp	r3, r2
 8005c46:	bf28      	it	cs
 8005c48:	4613      	movcs	r3, r2
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	877b      	strh	r3, [r7, #58]	@ 0x3a
          if ((report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0])) {
 8005c4e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00e      	beq.n	8005c74 <hidd_control_xfer_cb+0x2f0>
 8005c56:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d90b      	bls.n	8005c74 <hidd_control_xfer_cb+0x2f0>
 8005c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d105      	bne.n	8005c74 <hidd_control_xfer_cb+0x2f0>
            report_buf++;
 8005c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            report_len--;
 8005c6e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005c70:	3b01      	subs	r3, #1
 8005c72:	877b      	strh	r3, [r7, #58]	@ 0x3a
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 8005c74:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005c78:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8005c7c:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8005c80:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c86:	f7fb faa2 	bl	80011ce <tud_hid_set_report_cb>
        break;
 8005c8a:	e059      	b.n	8005d40 <hidd_control_xfer_cb+0x3bc>

      case HID_REQ_CONTROL_SET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8005c8c:	79bb      	ldrb	r3, [r7, #6]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d158      	bne.n	8005d44 <hidd_control_xfer_cb+0x3c0>
          p_hid->idle_rate = tu_u16_high(request->wValue);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	885b      	ldrh	r3, [r3, #2]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8005c9a:	897b      	ldrh	r3, [r7, #10]
 8005c9c:	0a1b      	lsrs	r3, r3, #8
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca4:	71da      	strb	r2, [r3, #7]
          TU_VERIFY(tud_hid_set_idle_cb(hid_itf, p_hid->idle_rate)); // stall if false
 8005ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca8:	79da      	ldrb	r2, [r3, #7]
 8005caa:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005cae:	4611      	mov	r1, r2
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff fc4b 	bl	800554c <tud_hid_set_idle_cb>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	f083 0301 	eor.w	r3, r3, #1
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <hidd_control_xfer_cb+0x342>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e046      	b.n	8005d54 <hidd_control_xfer_cb+0x3d0>
          tud_control_status(rhport, request);
 8005cc6:	79fb      	ldrb	r3, [r7, #7]
 8005cc8:	6839      	ldr	r1, [r7, #0]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f002 fc50 	bl	8008570 <tud_control_status>
        }
        break;
 8005cd0:	e038      	b.n	8005d44 <hidd_control_xfer_cb+0x3c0>

      case HID_REQ_CONTROL_GET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8005cd2:	79bb      	ldrb	r3, [r7, #6]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d137      	bne.n	8005d48 <hidd_control_xfer_cb+0x3c4>
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 8005cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cda:	1dda      	adds	r2, r3, #7
 8005cdc:	79f8      	ldrb	r0, [r7, #7]
 8005cde:	2301      	movs	r3, #1
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	f002 fcb7 	bl	8008654 <tud_control_xfer>
        }
        break;
 8005ce6:	e02f      	b.n	8005d48 <hidd_control_xfer_cb+0x3c4>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8005ce8:	79bb      	ldrb	r3, [r7, #6]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d12e      	bne.n	8005d4c <hidd_control_xfer_cb+0x3c8>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 8005cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf0:	1d9a      	adds	r2, r3, #6
 8005cf2:	79f8      	ldrb	r0, [r7, #7]
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	6839      	ldr	r1, [r7, #0]
 8005cf8:	f002 fcac 	bl	8008654 <tud_control_xfer>
        }
        break;
 8005cfc:	e026      	b.n	8005d4c <hidd_control_xfer_cb+0x3c8>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8005cfe:	79bb      	ldrb	r3, [r7, #6]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d105      	bne.n	8005d10 <hidd_control_xfer_cb+0x38c>
          tud_control_status(rhport, request);
 8005d04:	79fb      	ldrb	r3, [r7, #7]
 8005d06:	6839      	ldr	r1, [r7, #0]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f002 fc31 	bl	8008570 <tud_control_status>
        } else if (stage == CONTROL_STAGE_ACK) {
          p_hid->protocol_mode = (uint8_t) request->wValue;
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
        }
        break;
 8005d0e:	e01f      	b.n	8005d50 <hidd_control_xfer_cb+0x3cc>
        } else if (stage == CONTROL_STAGE_ACK) {
 8005d10:	79bb      	ldrb	r3, [r7, #6]
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	d11c      	bne.n	8005d50 <hidd_control_xfer_cb+0x3cc>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	885b      	ldrh	r3, [r3, #2]
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d20:	719a      	strb	r2, [r3, #6]
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 8005d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d24:	799a      	ldrb	r2, [r3, #6]
 8005d26:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005d2a:	4611      	mov	r1, r2
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fb fa21 	bl	8001174 <tud_hid_set_protocol_cb>
        break;
 8005d32:	e00d      	b.n	8005d50 <hidd_control_xfer_cb+0x3cc>

      default:
        return false; // stall unsupported request
 8005d34:	2300      	movs	r3, #0
 8005d36:	e00d      	b.n	8005d54 <hidd_control_xfer_cb+0x3d0>
    }
  } else {
    return false; // stall unsupported request
 8005d38:	2300      	movs	r3, #0
 8005d3a:	e00b      	b.n	8005d54 <hidd_control_xfer_cb+0x3d0>
        break;
 8005d3c:	bf00      	nop
 8005d3e:	e008      	b.n	8005d52 <hidd_control_xfer_cb+0x3ce>
        break;
 8005d40:	bf00      	nop
 8005d42:	e006      	b.n	8005d52 <hidd_control_xfer_cb+0x3ce>
        break;
 8005d44:	bf00      	nop
 8005d46:	e004      	b.n	8005d52 <hidd_control_xfer_cb+0x3ce>
        break;
 8005d48:	bf00      	nop
 8005d4a:	e002      	b.n	8005d52 <hidd_control_xfer_cb+0x3ce>
        break;
 8005d4c:	bf00      	nop
 8005d4e:	e000      	b.n	8005d52 <hidd_control_xfer_cb+0x3ce>
        break;
 8005d50:	bf00      	nop
  }

  return true;
 8005d52:	2301      	movs	r3, #1
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3748      	adds	r7, #72	@ 0x48
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08a      	sub	sp, #40	@ 0x28
 8005d60:	af02      	add	r7, sp, #8
 8005d62:	603b      	str	r3, [r7, #0]
 8005d64:	4603      	mov	r3, r0
 8005d66:	71fb      	strb	r3, [r7, #7]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	71bb      	strb	r3, [r7, #6]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	717b      	strb	r3, [r7, #5]
  uint8_t instance;
  hidd_interface_t *p_hid;

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8005d70:	2300      	movs	r3, #0
 8005d72:	77fb      	strb	r3, [r7, #31]
 8005d74:	e014      	b.n	8005da0 <hidd_xfer_cb+0x44>
    p_hid = &_hidd_itf[instance];
 8005d76:	7ffa      	ldrb	r2, [r7, #31]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	005b      	lsls	r3, r3, #1
 8005d7c:	4413      	add	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4a3e      	ldr	r2, [pc, #248]	@ (8005e7c <hidd_xfer_cb+0x120>)
 8005d82:	4413      	add	r3, r2
 8005d84:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in)) {
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	789b      	ldrb	r3, [r3, #2]
 8005d8a:	79ba      	ldrb	r2, [r7, #6]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d00a      	beq.n	8005da6 <hidd_xfer_cb+0x4a>
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	785b      	ldrb	r3, [r3, #1]
 8005d94:	79ba      	ldrb	r2, [r7, #6]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d005      	beq.n	8005da6 <hidd_xfer_cb+0x4a>
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8005d9a:	7ffb      	ldrb	r3, [r7, #31]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	77fb      	strb	r3, [r7, #31]
 8005da0:	7ffb      	ldrb	r3, [r7, #31]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0e7      	beq.n	8005d76 <hidd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 8005da6:	7ffb      	ldrb	r3, [r7, #31]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00a      	beq.n	8005dc2 <hidd_xfer_cb+0x66>
 8005dac:	4b34      	ldr	r3, [pc, #208]	@ (8005e80 <hidd_xfer_cb+0x124>)
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d000      	beq.n	8005dbe <hidd_xfer_cb+0x62>
 8005dbc:	be00      	bkpt	0x0000
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e057      	b.n	8005e72 <hidd_xfer_cb+0x116>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8005dc2:	7ffa      	ldrb	r2, [r7, #31]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	4413      	add	r3, r2
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	4a2d      	ldr	r2, [pc, #180]	@ (8005e84 <hidd_xfer_cb+0x128>)
 8005dce:	4413      	add	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]

  if (ep_addr == p_hid->ep_in) {
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	785b      	ldrb	r3, [r3, #1]
 8005dd6:	79ba      	ldrb	r2, [r7, #6]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d116      	bne.n	8005e0a <hidd_xfer_cb+0xae>
    // Input report
    if (XFER_RESULT_SUCCESS == result) {
 8005ddc:	797b      	ldrb	r3, [r7, #5]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d109      	bne.n	8005df6 <hidd_xfer_cb+0x9a>
      tud_hid_report_complete_cb(instance, p_epbuf->epin, (uint16_t) xferred_bytes);
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f103 0110 	add.w	r1, r3, #16
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	7ffb      	ldrb	r3, [r7, #31]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fb f9ce 	bl	8001190 <tud_hid_report_complete_cb>
 8005df4:	e03c      	b.n	8005e70 <hidd_xfer_cb+0x114>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_INPUT, p_epbuf->epin, (uint16_t) xferred_bytes);
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f103 0210 	add.w	r2, r3, #16
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	7ff8      	ldrb	r0, [r7, #31]
 8005e02:	2101      	movs	r1, #1
 8005e04:	f7ff fbb1 	bl	800556a <tud_hid_report_failed_cb>
 8005e08:	e032      	b.n	8005e70 <hidd_xfer_cb+0x114>
    }
  } else {
    // Output report
    if (XFER_RESULT_SUCCESS == result) {
 8005e0a:	797b      	ldrb	r3, [r7, #5]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10c      	bne.n	8005e2a <hidd_xfer_cb+0xce>
      tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t)xferred_bytes);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f103 0220 	add.w	r2, r3, #32
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	7ff8      	ldrb	r0, [r7, #31]
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	2202      	movs	r2, #2
 8005e22:	2100      	movs	r1, #0
 8005e24:	f7fb f9d3 	bl	80011ce <tud_hid_set_report_cb>
 8005e28:	e008      	b.n	8005e3c <hidd_xfer_cb+0xe0>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t) xferred_bytes);
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f103 0220 	add.w	r2, r3, #32
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	7ff8      	ldrb	r0, [r7, #31]
 8005e36:	2102      	movs	r1, #2
 8005e38:	f7ff fb97 	bl	800556a <tud_hid_report_failed_cb>
    }

    // prepare for new transfer
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE));
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	7899      	ldrb	r1, [r3, #2]
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f103 0220 	add.w	r2, r3, #32
 8005e46:	79f8      	ldrb	r0, [r7, #7]
 8005e48:	2310      	movs	r3, #16
 8005e4a:	f002 fa1b 	bl	8008284 <usbd_edpt_xfer>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	f083 0301 	eor.w	r3, r3, #1
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <hidd_xfer_cb+0x114>
 8005e5a:	4b09      	ldr	r3, [pc, #36]	@ (8005e80 <hidd_xfer_cb+0x124>)
 8005e5c:	613b      	str	r3, [r7, #16]
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d000      	beq.n	8005e6c <hidd_xfer_cb+0x110>
 8005e6a:	be00      	bkpt	0x0000
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	e000      	b.n	8005e72 <hidd_xfer_cb+0x116>
  }

  return true;
 8005e70:	2301      	movs	r3, #1
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3720      	adds	r7, #32
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	20000b24 	.word	0x20000b24
 8005e80:	e000edf0 	.word	0xe000edf0
 8005e84:	20000b30 	.word	0x20000b30

08005e88 <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	4611      	mov	r1, r2
 8005e94:	461a      	mov	r2, r3
 8005e96:	460b      	mov	r3, r1
 8005e98:	80fb      	strh	r3, [r7, #6]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8005e9e:	88fb      	ldrh	r3, [r7, #6]
 8005ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ea4:	d901      	bls.n	8005eaa <tu_fifo_config+0x22>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	e01b      	b.n	8005ee2 <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	88fa      	ldrh	r2, [r7, #6]
 8005eb4:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8005eb6:	88bb      	ldrh	r3, [r7, #4]
 8005eb8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005ebc:	b299      	uxth	r1, r3
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	88d3      	ldrh	r3, [r2, #6]
 8005ec2:	f361 030e 	bfi	r3, r1, #0, #15
 8005ec6:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	79d3      	ldrb	r3, [r2, #7]
 8005ecc:	7e39      	ldrb	r1, [r7, #24]
 8005ece:	f361 13c7 	bfi	r3, r1, #7, #1
 8005ed2:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8005ee0:	2301      	movs	r3, #1
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b08a      	sub	sp, #40	@ 0x28
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	60f8      	str	r0, [r7, #12]
 8005ef6:	60b9      	str	r1, [r7, #8]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8005f00:	88fb      	ldrh	r3, [r7, #6]
 8005f02:	089b      	lsrs	r3, r3, #2
 8005f04:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8005f06:	e00b      	b.n	8005f20 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	61ba      	str	r2, [r7, #24]
 8005f10:	617b      	str	r3, [r7, #20]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	601a      	str	r2, [r3, #0]
}
 8005f18:	bf00      	nop
    ff_buf += 4;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8005f20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f22:	1e5a      	subs	r2, r3, #1
 8005f24:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1ee      	bne.n	8005f08 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8005f2a:	88fb      	ldrh	r3, [r7, #6]
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	f003 0303 	and.w	r3, r3, #3
 8005f32:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8005f34:	7ffb      	ldrb	r3, [r7, #31]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d009      	beq.n	8005f4e <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8005f40:	7ffa      	ldrb	r2, [r7, #31]
 8005f42:	f107 0310 	add.w	r3, r7, #16
 8005f46:	4619      	mov	r1, r3
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f005 f852 	bl	800aff2 <memcpy>
  }
}
 8005f4e:	bf00      	nop
 8005f50:	3728      	adds	r7, #40	@ 0x28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b08a      	sub	sp, #40	@ 0x28
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	4613      	mov	r3, r2
 8005f62:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8005f68:	88fb      	ldrh	r3, [r7, #6]
 8005f6a:	089b      	lsrs	r3, r3, #2
 8005f6c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8005f6e:	e008      	b.n	8005f82 <_ff_pull_const_addr+0x2c>
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8005f82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f84:	1e5a      	subs	r2, r3, #1
 8005f86:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1f1      	bne.n	8005f70 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8005f8c:	88fb      	ldrh	r3, [r7, #6]
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	f003 0303 	and.w	r3, r3, #3
 8005f94:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8005f96:	7ffb      	ldrb	r3, [r7, #31]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00b      	beq.n	8005fb4 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8005fa0:	7ffa      	ldrb	r2, [r7, #31]
 8005fa2:	f107 0314 	add.w	r3, r7, #20
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f005 f822 	bl	800aff2 <memcpy>

    *reg_tx = tmp32;
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	601a      	str	r2, [r3, #0]
  }
}
 8005fb4:	bf00      	nop
 8005fb6:	3728      	adds	r7, #40	@ 0x28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	88fa      	ldrh	r2, [r7, #6]
 8005fd0:	68f9      	ldr	r1, [r7, #12]
 8005fd2:	88c9      	ldrh	r1, [r1, #6]
 8005fd4:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8005fd8:	b289      	uxth	r1, r1
 8005fda:	fb01 f202 	mul.w	r2, r1, r2
 8005fde:	1898      	adds	r0, r3, r2
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	88db      	ldrh	r3, [r3, #6]
 8005fe4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	68b9      	ldr	r1, [r7, #8]
 8005fee:	f005 f800 	bl	800aff2 <memcpy>
}
 8005ff2:	bf00      	nop
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b08e      	sub	sp, #56	@ 0x38
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	4611      	mov	r1, r2
 8006006:	461a      	mov	r2, r3
 8006008:	460b      	mov	r3, r1
 800600a:	80fb      	strh	r3, [r7, #6]
 800600c:	4613      	mov	r3, r2
 800600e:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	889a      	ldrh	r2, [r3, #4]
 8006014:	88bb      	ldrh	r3, [r7, #4]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 800601a:	88fa      	ldrh	r2, [r7, #6]
 800601c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	88db      	ldrh	r3, [r3, #6]
 8006026:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800602a:	b29b      	uxth	r3, r3
 800602c:	461a      	mov	r2, r3
 800602e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006030:	fb13 f302 	smulbb	r3, r3, r2
 8006034:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	88db      	ldrh	r3, [r3, #6]
 800603a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800603e:	b29b      	uxth	r3, r3
 8006040:	461a      	mov	r2, r3
 8006042:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006044:	fb13 f302 	smulbb	r3, r3, r2
 8006048:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	88ba      	ldrh	r2, [r7, #4]
 8006050:	68f9      	ldr	r1, [r7, #12]
 8006052:	88c9      	ldrh	r1, [r1, #6]
 8006054:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006058:	b289      	uxth	r1, r1
 800605a:	fb01 f202 	mul.w	r2, r1, r2
 800605e:	4413      	add	r3, r2
 8006060:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8006062:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <_ff_push_n+0x76>
 800606a:	2b01      	cmp	r3, #1
 800606c:	d022      	beq.n	80060b4 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 800606e:	e09e      	b.n	80061ae <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8006070:	88fa      	ldrh	r2, [r7, #6]
 8006072:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006074:	429a      	cmp	r2, r3
 8006076:	d80d      	bhi.n	8006094 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8006078:	88fb      	ldrh	r3, [r7, #6]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	88d2      	ldrh	r2, [r2, #6]
 800607e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006082:	b292      	uxth	r2, r2
 8006084:	fb02 f303 	mul.w	r3, r2, r3
 8006088:	461a      	mov	r2, r3
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800608e:	f004 ffb0 	bl	800aff2 <memcpy>
      break;
 8006092:	e08c      	b.n	80061ae <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8006094:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006096:	461a      	mov	r2, r3
 8006098:	68b9      	ldr	r1, [r7, #8]
 800609a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800609c:	f004 ffa9 	bl	800aff2 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	4413      	add	r3, r2
 80060aa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80060ac:	4619      	mov	r1, r3
 80060ae:	f004 ffa0 	bl	800aff2 <memcpy>
      break;
 80060b2:	e07c      	b.n	80061ae <_ff_push_n+0x1b4>
      if(n <= lin_count)
 80060b4:	88fa      	ldrh	r2, [r7, #6]
 80060b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d80f      	bhi.n	80060dc <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	88db      	ldrh	r3, [r3, #6]
 80060c0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	461a      	mov	r2, r3
 80060c8:	88fb      	ldrh	r3, [r7, #6]
 80060ca:	fb13 f302 	smulbb	r3, r3, r2
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	461a      	mov	r2, r3
 80060d2:	68b9      	ldr	r1, [r7, #8]
 80060d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060d6:	f7ff ff0a 	bl	8005eee <_ff_push_const_addr>
      break;
 80060da:	e067      	b.n	80061ac <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 80060dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80060de:	f023 0303 	bic.w	r3, r3, #3
 80060e2:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 80060e4:	8c3b      	ldrh	r3, [r7, #32]
 80060e6:	461a      	mov	r2, r3
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060ec:	f7ff feff 	bl	8005eee <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 80060f0:	8c3b      	ldrh	r3, [r7, #32]
 80060f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060f4:	4413      	add	r3, r2
 80060f6:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 80060f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	f003 0303 	and.w	r3, r3, #3
 8006100:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8006104:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006108:	2b00      	cmp	r3, #0
 800610a:	d043      	beq.n	8006194 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8006110:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006114:	b29b      	uxth	r3, r3
 8006116:	f1c3 0304 	rsb	r3, r3, #4
 800611a:	b29a      	uxth	r2, r3
 800611c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800611e:	837b      	strh	r3, [r7, #26]
 8006120:	4613      	mov	r3, r2
 8006122:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8006124:	8b7a      	ldrh	r2, [r7, #26]
 8006126:	8b3b      	ldrh	r3, [r7, #24]
 8006128:	4293      	cmp	r3, r2
 800612a:	bf28      	it	cs
 800612c:	4613      	movcs	r3, r2
 800612e:	b29b      	uxth	r3, r3
 8006130:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8006134:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006138:	b29b      	uxth	r3, r3
 800613a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8006146:	f107 0314 	add.w	r3, r7, #20
 800614a:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 800614c:	e007      	b.n	800615e <_ff_push_n+0x164>
 800614e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006150:	1c53      	adds	r3, r2, #1
 8006152:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006156:	1c59      	adds	r1, r3, #1
 8006158:	6339      	str	r1, [r7, #48]	@ 0x30
 800615a:	7812      	ldrb	r2, [r2, #0]
 800615c:	701a      	strb	r2, [r3, #0]
 800615e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006162:	1e5a      	subs	r2, r3, #1
 8006164:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1f0      	bne.n	800614e <_ff_push_n+0x154>
          ff_buf = f->buffer;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8006172:	e007      	b.n	8006184 <_ff_push_n+0x18a>
 8006174:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006176:	1c53      	adds	r3, r2, #1
 8006178:	62bb      	str	r3, [r7, #40]	@ 0x28
 800617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617c:	1c59      	adds	r1, r3, #1
 800617e:	6339      	str	r1, [r7, #48]	@ 0x30
 8006180:	7812      	ldrb	r2, [r2, #0]
 8006182:	701a      	strb	r2, [r3, #0]
 8006184:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006188:	1e5a      	subs	r2, r3, #1
 800618a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1f0      	bne.n	8006174 <_ff_push_n+0x17a>
 8006192:	e002      	b.n	800619a <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 800619a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <_ff_push_n+0x1b2>
 80061a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80061a2:	461a      	mov	r2, r3
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061a8:	f7ff fea1 	bl	8005eee <_ff_push_const_addr>
      break;
 80061ac:	bf00      	nop
  }
}
 80061ae:	bf00      	nop
 80061b0:	3738      	adds	r7, #56	@ 0x38
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	4613      	mov	r3, r2
 80061c2:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	88fa      	ldrh	r2, [r7, #6]
 80061ca:	68f9      	ldr	r1, [r7, #12]
 80061cc:	88c9      	ldrh	r1, [r1, #6]
 80061ce:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80061d2:	b289      	uxth	r1, r1
 80061d4:	fb01 f202 	mul.w	r2, r1, r2
 80061d8:	1899      	adds	r1, r3, r2
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	88db      	ldrh	r3, [r3, #6]
 80061de:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	68b8      	ldr	r0, [r7, #8]
 80061e8:	f004 ff03 	bl	800aff2 <memcpy>
}
 80061ec:	bf00      	nop
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08e      	sub	sp, #56	@ 0x38
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	4611      	mov	r1, r2
 8006200:	461a      	mov	r2, r3
 8006202:	460b      	mov	r3, r1
 8006204:	80fb      	strh	r3, [r7, #6]
 8006206:	4613      	mov	r3, r2
 8006208:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	889a      	ldrh	r2, [r3, #4]
 800620e:	88bb      	ldrh	r3, [r7, #4]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8006214:	88fa      	ldrh	r2, [r7, #6]
 8006216:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	88db      	ldrh	r3, [r3, #6]
 8006220:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006224:	b29b      	uxth	r3, r3
 8006226:	461a      	mov	r2, r3
 8006228:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800622a:	fb13 f302 	smulbb	r3, r3, r2
 800622e:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	88db      	ldrh	r3, [r3, #6]
 8006234:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006238:	b29b      	uxth	r3, r3
 800623a:	461a      	mov	r2, r3
 800623c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800623e:	fb13 f302 	smulbb	r3, r3, r2
 8006242:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	88ba      	ldrh	r2, [r7, #4]
 800624a:	68f9      	ldr	r1, [r7, #12]
 800624c:	88c9      	ldrh	r1, [r1, #6]
 800624e:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006252:	b289      	uxth	r1, r1
 8006254:	fb01 f202 	mul.w	r2, r1, r2
 8006258:	4413      	add	r3, r2
 800625a:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 800625c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <_ff_pull_n+0x76>
 8006264:	2b01      	cmp	r3, #1
 8006266:	d022      	beq.n	80062ae <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 8006268:	e0a0      	b.n	80063ac <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 800626a:	88fa      	ldrh	r2, [r7, #6]
 800626c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800626e:	429a      	cmp	r2, r3
 8006270:	d80d      	bhi.n	800628e <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 8006272:	88fb      	ldrh	r3, [r7, #6]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	88d2      	ldrh	r2, [r2, #6]
 8006278:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800627c:	b292      	uxth	r2, r2
 800627e:	fb02 f303 	mul.w	r3, r2, r3
 8006282:	461a      	mov	r2, r3
 8006284:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006286:	68b8      	ldr	r0, [r7, #8]
 8006288:	f004 feb3 	bl	800aff2 <memcpy>
    break;
 800628c:	e08e      	b.n	80063ac <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 800628e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006290:	461a      	mov	r2, r3
 8006292:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006294:	68b8      	ldr	r0, [r7, #8]
 8006296:	f004 feac 	bl	800aff2 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 800629a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	18d0      	adds	r0, r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80062a6:	4619      	mov	r1, r3
 80062a8:	f004 fea3 	bl	800aff2 <memcpy>
    break;
 80062ac:	e07e      	b.n	80063ac <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 80062ae:	88fa      	ldrh	r2, [r7, #6]
 80062b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d80f      	bhi.n	80062d6 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	88db      	ldrh	r3, [r3, #6]
 80062ba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80062be:	b29b      	uxth	r3, r3
 80062c0:	461a      	mov	r2, r3
 80062c2:	88fb      	ldrh	r3, [r7, #6]
 80062c4:	fb13 f302 	smulbb	r3, r3, r2
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	461a      	mov	r2, r3
 80062cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80062ce:	68b8      	ldr	r0, [r7, #8]
 80062d0:	f7ff fe41 	bl	8005f56 <_ff_pull_const_addr>
    break;
 80062d4:	e069      	b.n	80063aa <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 80062d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80062d8:	f023 0303 	bic.w	r3, r3, #3
 80062dc:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 80062de:	8c3b      	ldrh	r3, [r7, #32]
 80062e0:	461a      	mov	r2, r3
 80062e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80062e4:	68b8      	ldr	r0, [r7, #8]
 80062e6:	f7ff fe36 	bl	8005f56 <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 80062ea:	8c3b      	ldrh	r3, [r7, #32]
 80062ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062ee:	4413      	add	r3, r2
 80062f0:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 80062f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	f003 0303 	and.w	r3, r3, #3
 80062fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 80062fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006302:	2b00      	cmp	r3, #0
 8006304:	d045      	beq.n	8006392 <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800630a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800630e:	b29b      	uxth	r3, r3
 8006310:	f1c3 0304 	rsb	r3, r3, #4
 8006314:	b29a      	uxth	r2, r3
 8006316:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006318:	837b      	strh	r3, [r7, #26]
 800631a:	4613      	mov	r3, r2
 800631c:	833b      	strh	r3, [r7, #24]
 800631e:	8b7a      	ldrh	r2, [r7, #26]
 8006320:	8b3b      	ldrh	r3, [r7, #24]
 8006322:	4293      	cmp	r3, r2
 8006324:	bf28      	it	cs
 8006326:	4613      	movcs	r3, r2
 8006328:	b29b      	uxth	r3, r3
 800632a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 800632e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006332:	b29b      	uxth	r3, r3
 8006334:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 800633a:	2300      	movs	r3, #0
 800633c:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 800633e:	f107 0314 	add.w	r3, r7, #20
 8006342:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8006344:	e007      	b.n	8006356 <_ff_pull_n+0x162>
 8006346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006348:	1c53      	adds	r3, r2, #1
 800634a:	633b      	str	r3, [r7, #48]	@ 0x30
 800634c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800634e:	1c59      	adds	r1, r3, #1
 8006350:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006352:	7812      	ldrb	r2, [r2, #0]
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800635a:	1e5a      	subs	r2, r3, #1
 800635c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1f0      	bne.n	8006346 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 800636a:	e007      	b.n	800637c <_ff_pull_n+0x188>
 800636c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800636e:	1c53      	adds	r3, r2, #1
 8006370:	633b      	str	r3, [r7, #48]	@ 0x30
 8006372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006374:	1c59      	adds	r1, r3, #1
 8006376:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006378:	7812      	ldrb	r2, [r2, #0]
 800637a:	701a      	strb	r2, [r3, #0]
 800637c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006380:	1e5a      	subs	r2, r3, #1
 8006382:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1f0      	bne.n	800636c <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	e002      	b.n	8006398 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8006398:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800639a:	2b00      	cmp	r3, #0
 800639c:	d005      	beq.n	80063aa <_ff_pull_n+0x1b6>
 800639e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80063a0:	461a      	mov	r2, r3
 80063a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80063a4:	68b8      	ldr	r0, [r7, #8]
 80063a6:	f7ff fdd6 	bl	8005f56 <_ff_pull_const_addr>
    break;
 80063aa:	bf00      	nop
  }
}
 80063ac:	bf00      	nop
 80063ae:	3738      	adds	r7, #56	@ 0x38
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	4603      	mov	r3, r0
 80063bc:	80fb      	strh	r3, [r7, #6]
 80063be:	460b      	mov	r3, r1
 80063c0:	80bb      	strh	r3, [r7, #4]
 80063c2:	4613      	mov	r3, r2
 80063c4:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 80063c6:	88ba      	ldrh	r2, [r7, #4]
 80063c8:	887b      	ldrh	r3, [r7, #2]
 80063ca:	4413      	add	r3, r2
 80063cc:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 80063ce:	88ba      	ldrh	r2, [r7, #4]
 80063d0:	89fb      	ldrh	r3, [r7, #14]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d804      	bhi.n	80063e0 <advance_index+0x2c>
 80063d6:	89fa      	ldrh	r2, [r7, #14]
 80063d8:	88fb      	ldrh	r3, [r7, #6]
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	429a      	cmp	r2, r3
 80063de:	db08      	blt.n	80063f2 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 80063e0:	88fb      	ldrh	r3, [r7, #6]
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	425b      	negs	r3, r3
 80063e8:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 80063ea:	89fa      	ldrh	r2, [r7, #14]
 80063ec:	89bb      	ldrh	r3, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 80063f2:	89fb      	ldrh	r3, [r7, #14]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08a      	sub	sp, #40	@ 0x28
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	4611      	mov	r1, r2
 800640c:	461a      	mov	r2, r3
 800640e:	460b      	mov	r3, r1
 8006410:	80fb      	strh	r3, [r7, #6]
 8006412:	4613      	mov	r3, r2
 8006414:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	889b      	ldrh	r3, [r3, #4]
 800641a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800641c:	88fb      	ldrh	r3, [r7, #6]
 800641e:	843b      	strh	r3, [r7, #32]
 8006420:	88bb      	ldrh	r3, [r7, #4]
 8006422:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8006424:	8c3a      	ldrh	r2, [r7, #32]
 8006426:	8bfb      	ldrh	r3, [r7, #30]
 8006428:	429a      	cmp	r2, r3
 800642a:	d304      	bcc.n	8006436 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 800642c:	8c3a      	ldrh	r2, [r7, #32]
 800642e:	8bfb      	ldrh	r3, [r7, #30]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	b29b      	uxth	r3, r3
 8006434:	e008      	b.n	8006448 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006436:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	b29a      	uxth	r2, r3
 800643c:	8c39      	ldrh	r1, [r7, #32]
 800643e:	8bfb      	ldrh	r3, [r7, #30]
 8006440:	1acb      	subs	r3, r1, r3
 8006442:	b29b      	uxth	r3, r3
 8006444:	4413      	add	r3, r2
 8006446:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006448:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 800644a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <_tu_fifo_peek+0x54>
 8006450:	2300      	movs	r3, #0
 8006452:	e037      	b.n	80064c4 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	889b      	ldrh	r3, [r3, #4]
 8006458:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800645a:	429a      	cmp	r2, r3
 800645c:	d91b      	bls.n	8006496 <_tu_fifo_peek+0x96>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	61bb      	str	r3, [r7, #24]
 8006462:	88fb      	ldrh	r3, [r7, #6]
 8006464:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	889b      	ldrh	r3, [r3, #4]
 800646a:	8afa      	ldrh	r2, [r7, #22]
 800646c:	429a      	cmp	r2, r3
 800646e:	d305      	bcc.n	800647c <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	889b      	ldrh	r3, [r3, #4]
 8006474:	8afa      	ldrh	r2, [r7, #22]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	82bb      	strh	r3, [r7, #20]
 800647a:	e004      	b.n	8006486 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	889a      	ldrh	r2, [r3, #4]
 8006480:	8afb      	ldrh	r3, [r7, #22]
 8006482:	4413      	add	r3, r2
 8006484:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	8aba      	ldrh	r2, [r7, #20]
 800648a:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 800648c:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800648e:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	889b      	ldrh	r3, [r3, #4]
 8006494:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	889b      	ldrh	r3, [r3, #4]
 800649a:	827b      	strh	r3, [r7, #18]
 800649c:	88bb      	ldrh	r3, [r7, #4]
 800649e:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80064a0:	e003      	b.n	80064aa <_tu_fifo_peek+0xaa>
 80064a2:	8a3a      	ldrh	r2, [r7, #16]
 80064a4:	8a7b      	ldrh	r3, [r7, #18]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	823b      	strh	r3, [r7, #16]
 80064aa:	8a7a      	ldrh	r2, [r7, #18]
 80064ac:	8a3b      	ldrh	r3, [r7, #16]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d9f7      	bls.n	80064a2 <_tu_fifo_peek+0xa2>
  return idx;
 80064b2:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80064b4:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 80064b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064b8:	461a      	mov	r2, r3
 80064ba:	68b9      	ldr	r1, [r7, #8]
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f7ff fe7a 	bl	80061b6 <_ff_pull>

  return true;
 80064c2:	2301      	movs	r3, #1
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3728      	adds	r7, #40	@ 0x28
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b08c      	sub	sp, #48	@ 0x30
 80064d0:	af02      	add	r7, sp, #8
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	4611      	mov	r1, r2
 80064d8:	461a      	mov	r2, r3
 80064da:	460b      	mov	r3, r1
 80064dc:	80fb      	strh	r3, [r7, #6]
 80064de:	4613      	mov	r3, r2
 80064e0:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	889b      	ldrh	r3, [r3, #4]
 80064e6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80064e8:	88bb      	ldrh	r3, [r7, #4]
 80064ea:	843b      	strh	r3, [r7, #32]
 80064ec:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80064ee:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80064f0:	8c3a      	ldrh	r2, [r7, #32]
 80064f2:	8bfb      	ldrh	r3, [r7, #30]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d304      	bcc.n	8006502 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80064f8:	8c3a      	ldrh	r2, [r7, #32]
 80064fa:	8bfb      	ldrh	r3, [r7, #30]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	b29b      	uxth	r3, r3
 8006500:	e008      	b.n	8006514 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006502:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	8c39      	ldrh	r1, [r7, #32]
 800650a:	8bfb      	ldrh	r3, [r7, #30]
 800650c:	1acb      	subs	r3, r1, r3
 800650e:	b29b      	uxth	r3, r3
 8006510:	4413      	add	r3, r2
 8006512:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006514:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 8006516:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <_tu_fifo_peek_n+0x54>
 800651c:	2300      	movs	r3, #0
 800651e:	e041      	b.n	80065a4 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	889b      	ldrh	r3, [r3, #4]
 8006524:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006526:	429a      	cmp	r2, r3
 8006528:	d91b      	bls.n	8006562 <_tu_fifo_peek_n+0x96>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	61bb      	str	r3, [r7, #24]
 800652e:	88bb      	ldrh	r3, [r7, #4]
 8006530:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	889b      	ldrh	r3, [r3, #4]
 8006536:	8afa      	ldrh	r2, [r7, #22]
 8006538:	429a      	cmp	r2, r3
 800653a:	d305      	bcc.n	8006548 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	889b      	ldrh	r3, [r3, #4]
 8006540:	8afa      	ldrh	r2, [r7, #22]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	82bb      	strh	r3, [r7, #20]
 8006546:	e004      	b.n	8006552 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	889a      	ldrh	r2, [r3, #4]
 800654c:	8afb      	ldrh	r3, [r7, #22]
 800654e:	4413      	add	r3, r2
 8006550:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	8aba      	ldrh	r2, [r7, #20]
 8006556:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8006558:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800655a:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	889b      	ldrh	r3, [r3, #4]
 8006560:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8006562:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006564:	88fb      	ldrh	r3, [r7, #6]
 8006566:	429a      	cmp	r2, r3
 8006568:	d201      	bcs.n	800656e <_tu_fifo_peek_n+0xa2>
 800656a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800656c:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	889b      	ldrh	r3, [r3, #4]
 8006572:	827b      	strh	r3, [r7, #18]
 8006574:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006576:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8006578:	e003      	b.n	8006582 <_tu_fifo_peek_n+0xb6>
 800657a:	8a3a      	ldrh	r2, [r7, #16]
 800657c:	8a7b      	ldrh	r3, [r7, #18]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	823b      	strh	r3, [r7, #16]
 8006582:	8a7a      	ldrh	r2, [r7, #18]
 8006584:	8a3b      	ldrh	r3, [r7, #16]
 8006586:	429a      	cmp	r2, r3
 8006588:	d9f7      	bls.n	800657a <_tu_fifo_peek_n+0xae>
  return idx;
 800658a:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800658c:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 800658e:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8006590:	88fa      	ldrh	r2, [r7, #6]
 8006592:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	460b      	mov	r3, r1
 800659a:	68b9      	ldr	r1, [r7, #8]
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f7ff fe29 	bl	80061f4 <_ff_pull_n>

  return n;
 80065a2:	88fb      	ldrh	r3, [r7, #6]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3728      	adds	r7, #40	@ 0x28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b092      	sub	sp, #72	@ 0x48
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	4611      	mov	r1, r2
 80065b8:	461a      	mov	r2, r3
 80065ba:	460b      	mov	r3, r1
 80065bc:	80fb      	strh	r3, [r7, #6]
 80065be:	4613      	mov	r3, r2
 80065c0:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 80065c2:	88fb      	ldrh	r3, [r7, #6]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <_tu_fifo_write_n+0x20>
 80065c8:	2300      	movs	r3, #0
 80065ca:	e0bc      	b.n	8006746 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	891b      	ldrh	r3, [r3, #8]
 80065d0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	895b      	ldrh	r3, [r3, #10]
 80065d6:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	79db      	ldrb	r3, [r3, #7]
 80065e0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	f083 0301 	eor.w	r3, r3, #1
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d036      	beq.n	800665e <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	889b      	ldrh	r3, [r3, #4]
 80065f4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80065f6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80065f8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80065fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80065fc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80065fe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006600:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006602:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006604:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006606:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006608:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 800660a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800660c:	8c3b      	ldrh	r3, [r7, #32]
 800660e:	429a      	cmp	r2, r3
 8006610:	d304      	bcc.n	800661c <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 8006612:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006614:	8c3b      	ldrh	r3, [r7, #32]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	b29b      	uxth	r3, r3
 800661a:	e008      	b.n	800662e <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800661c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	b29a      	uxth	r2, r3
 8006622:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8006624:	8c3b      	ldrh	r3, [r7, #32]
 8006626:	1acb      	subs	r3, r1, r3
 8006628:	b29b      	uxth	r3, r3
 800662a:	4413      	add	r3, r2
 800662c:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 800662e:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8006630:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8006632:	8bfb      	ldrh	r3, [r7, #30]
 8006634:	429a      	cmp	r2, r3
 8006636:	d904      	bls.n	8006642 <_tu_fifo_write_n+0x96>
 8006638:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800663a:	8bfb      	ldrh	r3, [r7, #30]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	b29b      	uxth	r3, r3
 8006640:	e000      	b.n	8006644 <_tu_fifo_write_n+0x98>
 8006642:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8006644:	867b      	strh	r3, [r7, #50]	@ 0x32
 8006646:	88fb      	ldrh	r3, [r7, #6]
 8006648:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800664a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800664c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800664e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006650:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006652:	4293      	cmp	r3, r2
 8006654:	bf28      	it	cs
 8006656:	4613      	movcs	r3, r2
 8006658:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 800665a:	80fb      	strh	r3, [r7, #6]
 800665c:	e04b      	b.n	80066f6 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	889b      	ldrh	r3, [r3, #4]
 8006662:	88fa      	ldrh	r2, [r7, #6]
 8006664:	429a      	cmp	r2, r3
 8006666:	d317      	bcc.n	8006698 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8006668:	797b      	ldrb	r3, [r7, #5]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10e      	bne.n	800668c <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 800666e:	88fb      	ldrh	r3, [r7, #6]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	8892      	ldrh	r2, [r2, #4]
 8006674:	1a9b      	subs	r3, r3, r2
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	88d2      	ldrh	r2, [r2, #6]
 800667a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800667e:	b292      	uxth	r2, r2
 8006680:	fb02 f303 	mul.w	r3, r2, r3
 8006684:	461a      	mov	r2, r3
 8006686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006688:	4413      	add	r3, r2
 800668a:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	889b      	ldrh	r3, [r3, #4]
 8006690:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8006692:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006694:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006696:	e02e      	b.n	80066f6 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	889b      	ldrh	r3, [r3, #4]
 800669c:	83bb      	strh	r3, [r7, #28]
 800669e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80066a0:	837b      	strh	r3, [r7, #26]
 80066a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80066a4:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 80066a6:	8b7a      	ldrh	r2, [r7, #26]
 80066a8:	8b3b      	ldrh	r3, [r7, #24]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d304      	bcc.n	80066b8 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 80066ae:	8b7a      	ldrh	r2, [r7, #26]
 80066b0:	8b3b      	ldrh	r3, [r7, #24]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	e008      	b.n	80066ca <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80066b8:	8bbb      	ldrh	r3, [r7, #28]
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	b29a      	uxth	r2, r3
 80066be:	8b79      	ldrh	r1, [r7, #26]
 80066c0:	8b3b      	ldrh	r3, [r7, #24]
 80066c2:	1acb      	subs	r3, r1, r3
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	4413      	add	r3, r2
 80066c8:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 80066ca:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 80066cc:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80066ce:	88fb      	ldrh	r3, [r7, #6]
 80066d0:	441a      	add	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	889b      	ldrh	r3, [r3, #4]
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	429a      	cmp	r2, r3
 80066da:	db0c      	blt.n	80066f6 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8898      	ldrh	r0, [r3, #4]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	889a      	ldrh	r2, [r3, #4]
 80066e4:	88fb      	ldrh	r3, [r7, #6]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80066ec:	4619      	mov	r1, r3
 80066ee:	f7ff fe61 	bl	80063b4 <advance_index>
 80066f2:	4603      	mov	r3, r0
 80066f4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 80066f6:	88fb      	ldrh	r3, [r7, #6]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d023      	beq.n	8006744 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	889b      	ldrh	r3, [r3, #4]
 8006700:	82fb      	strh	r3, [r7, #22]
 8006702:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006704:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8006706:	e003      	b.n	8006710 <_tu_fifo_write_n+0x164>
 8006708:	8aba      	ldrh	r2, [r7, #20]
 800670a:	8afb      	ldrh	r3, [r7, #22]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	82bb      	strh	r3, [r7, #20]
 8006710:	8afa      	ldrh	r2, [r7, #22]
 8006712:	8abb      	ldrh	r3, [r7, #20]
 8006714:	429a      	cmp	r2, r3
 8006716:	d9f7      	bls.n	8006708 <_tu_fifo_write_n+0x15c>
  return idx;
 8006718:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 800671a:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 800671c:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 800671e:	88fa      	ldrh	r2, [r7, #6]
 8006720:	797b      	ldrb	r3, [r7, #5]
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	460b      	mov	r3, r1
 8006726:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f7ff fc66 	bl	8005ffa <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	889b      	ldrh	r3, [r3, #4]
 8006732:	88fa      	ldrh	r2, [r7, #6]
 8006734:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8006736:	4618      	mov	r0, r3
 8006738:	f7ff fe3c 	bl	80063b4 <advance_index>
 800673c:	4603      	mov	r3, r0
 800673e:	461a      	mov	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8006744:	88fb      	ldrh	r3, [r7, #6]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3740      	adds	r7, #64	@ 0x40
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b086      	sub	sp, #24
 8006752:	af02      	add	r7, sp, #8
 8006754:	60f8      	str	r0, [r7, #12]
 8006756:	60b9      	str	r1, [r7, #8]
 8006758:	4611      	mov	r1, r2
 800675a:	461a      	mov	r2, r3
 800675c:	460b      	mov	r3, r1
 800675e:	80fb      	strh	r3, [r7, #6]
 8006760:	4613      	mov	r3, r2
 8006762:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	891b      	ldrh	r3, [r3, #8]
 8006768:	b298      	uxth	r0, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	895b      	ldrh	r3, [r3, #10]
 800676e:	b29b      	uxth	r3, r3
 8006770:	88f9      	ldrh	r1, [r7, #6]
 8006772:	797a      	ldrb	r2, [r7, #5]
 8006774:	9201      	str	r2, [sp, #4]
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	4603      	mov	r3, r0
 800677a:	460a      	mov	r2, r1
 800677c:	68b9      	ldr	r1, [r7, #8]
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f7ff fea4 	bl	80064cc <_tu_fifo_peek_n>
 8006784:	4603      	mov	r3, r0
 8006786:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8898      	ldrh	r0, [r3, #4]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	895b      	ldrh	r3, [r3, #10]
 8006790:	b29b      	uxth	r3, r3
 8006792:	88fa      	ldrh	r2, [r7, #6]
 8006794:	4619      	mov	r1, r3
 8006796:	f7ff fe0d 	bl	80063b4 <advance_index>
 800679a:	4603      	mov	r3, r0
 800679c:	461a      	mov	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 80067a2:	88fb      	ldrh	r3, [r7, #6]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	8899      	ldrh	r1, [r3, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	891b      	ldrh	r3, [r3, #8]
 80067bc:	b29a      	uxth	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	895b      	ldrh	r3, [r3, #10]
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	8279      	strh	r1, [r7, #18]
 80067c6:	823a      	strh	r2, [r7, #16]
 80067c8:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 80067ca:	8a3a      	ldrh	r2, [r7, #16]
 80067cc:	89fb      	ldrh	r3, [r7, #14]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d304      	bcc.n	80067dc <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 80067d2:	8a3a      	ldrh	r2, [r7, #16]
 80067d4:	89fb      	ldrh	r3, [r7, #14]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	b29b      	uxth	r3, r3
 80067da:	e008      	b.n	80067ee <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80067dc:	8a7b      	ldrh	r3, [r7, #18]
 80067de:	005b      	lsls	r3, r3, #1
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	8a39      	ldrh	r1, [r7, #16]
 80067e4:	89fb      	ldrh	r3, [r7, #14]
 80067e6:	1acb      	subs	r3, r1, r3
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	4413      	add	r3, r2
 80067ec:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	8892      	ldrh	r2, [r2, #4]
 80067f2:	82fb      	strh	r3, [r7, #22]
 80067f4:	4613      	mov	r3, r2
 80067f6:	82bb      	strh	r3, [r7, #20]
 80067f8:	8afa      	ldrh	r2, [r7, #22]
 80067fa:	8abb      	ldrh	r3, [r7, #20]
 80067fc:	4293      	cmp	r3, r2
 80067fe:	bf28      	it	cs
 8006800:	4613      	movcs	r3, r2
 8006802:	b29b      	uxth	r3, r3
}
 8006804:	4618      	mov	r0, r3
 8006806:	371c      	adds	r7, #28
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	891b      	ldrh	r3, [r3, #8]
 800681c:	b29a      	uxth	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	895b      	ldrh	r3, [r3, #10]
 8006822:	b29b      	uxth	r3, r3
 8006824:	429a      	cmp	r2, r3
 8006826:	bf0c      	ite	eq
 8006828:	2301      	moveq	r3, #1
 800682a:	2300      	movne	r3, #0
 800682c:	b2db      	uxtb	r3, r3
}
 800682e:	4618      	mov	r0, r3
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 800683a:	b480      	push	{r7}
 800683c:	b085      	sub	sp, #20
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	8899      	ldrh	r1, [r3, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	891b      	ldrh	r3, [r3, #8]
 800684a:	b29a      	uxth	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	895b      	ldrh	r3, [r3, #10]
 8006850:	b29b      	uxth	r3, r3
 8006852:	81f9      	strh	r1, [r7, #14]
 8006854:	81ba      	strh	r2, [r7, #12]
 8006856:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8006858:	89ba      	ldrh	r2, [r7, #12]
 800685a:	897b      	ldrh	r3, [r7, #10]
 800685c:	429a      	cmp	r2, r3
 800685e:	d304      	bcc.n	800686a <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8006860:	89ba      	ldrh	r2, [r7, #12]
 8006862:	897b      	ldrh	r3, [r7, #10]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	b29b      	uxth	r3, r3
 8006868:	e008      	b.n	800687c <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800686a:	89fb      	ldrh	r3, [r7, #14]
 800686c:	005b      	lsls	r3, r3, #1
 800686e:	b29a      	uxth	r2, r3
 8006870:	89b9      	ldrh	r1, [r7, #12]
 8006872:	897b      	ldrh	r3, [r7, #10]
 8006874:	1acb      	subs	r3, r1, r3
 8006876:	b29b      	uxth	r3, r3
 8006878:	4413      	add	r3, r2
 800687a:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	8892      	ldrh	r2, [r2, #4]
 8006880:	4293      	cmp	r3, r2
 8006882:	bf2c      	ite	cs
 8006884:	2301      	movcs	r3, #1
 8006886:	2300      	movcc	r3, #0
 8006888:	b2db      	uxtb	r3, r3
}
 800688a:	4618      	mov	r0, r3
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8006896:	b480      	push	{r7}
 8006898:	b087      	sub	sp, #28
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	8899      	ldrh	r1, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	891b      	ldrh	r3, [r3, #8]
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	895b      	ldrh	r3, [r3, #10]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	82f9      	strh	r1, [r7, #22]
 80068b0:	82ba      	strh	r2, [r7, #20]
 80068b2:	827b      	strh	r3, [r7, #18]
 80068b4:	8afb      	ldrh	r3, [r7, #22]
 80068b6:	823b      	strh	r3, [r7, #16]
 80068b8:	8abb      	ldrh	r3, [r7, #20]
 80068ba:	81fb      	strh	r3, [r7, #14]
 80068bc:	8a7b      	ldrh	r3, [r7, #18]
 80068be:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 80068c0:	89fa      	ldrh	r2, [r7, #14]
 80068c2:	89bb      	ldrh	r3, [r7, #12]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d304      	bcc.n	80068d2 <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 80068c8:	89fa      	ldrh	r2, [r7, #14]
 80068ca:	89bb      	ldrh	r3, [r7, #12]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	e008      	b.n	80068e4 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80068d2:	8a3b      	ldrh	r3, [r7, #16]
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	89f9      	ldrh	r1, [r7, #14]
 80068da:	89bb      	ldrh	r3, [r7, #12]
 80068dc:	1acb      	subs	r3, r1, r3
 80068de:	b29b      	uxth	r3, r3
 80068e0:	4413      	add	r3, r2
 80068e2:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 80068e4:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 80068e6:	8afa      	ldrh	r2, [r7, #22]
 80068e8:	897b      	ldrh	r3, [r7, #10]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d904      	bls.n	80068f8 <tu_fifo_remaining+0x62>
 80068ee:	8afa      	ldrh	r2, [r7, #22]
 80068f0:	897b      	ldrh	r3, [r7, #10]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	e000      	b.n	80068fa <tu_fifo_remaining+0x64>
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	891b      	ldrh	r3, [r3, #8]
 8006914:	b29a      	uxth	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	895b      	ldrh	r3, [r3, #10]
 800691a:	b29b      	uxth	r3, r3
 800691c:	6839      	ldr	r1, [r7, #0]
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7ff fd6e 	bl	8006400 <_tu_fifo_peek>
 8006924:	4603      	mov	r3, r0
 8006926:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	8898      	ldrh	r0, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	895b      	ldrh	r3, [r3, #10]
 8006930:	b29b      	uxth	r3, r3
 8006932:	7bfa      	ldrb	r2, [r7, #15]
 8006934:	b292      	uxth	r2, r2
 8006936:	4619      	mov	r1, r3
 8006938:	f7ff fd3c 	bl	80063b4 <advance_index>
 800693c:	4603      	mov	r3, r0
 800693e:	461a      	mov	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8006944:	7bfb      	ldrb	r3, [r7, #15]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	4613      	mov	r3, r2
 800695a:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 800695c:	88fa      	ldrh	r2, [r7, #6]
 800695e:	2300      	movs	r3, #0
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f7ff fef3 	bl	800674e <_tu_fifo_read_n>
 8006968:	4603      	mov	r3, r0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	4613      	mov	r3, r2
 800697e:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8006980:	88fa      	ldrh	r2, [r7, #6]
 8006982:	2301      	movs	r3, #1
 8006984:	68b9      	ldr	r1, [r7, #8]
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f7ff fee1 	bl	800674e <_tu_fifo_read_n>
 800698c:	4603      	mov	r3, r0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b086      	sub	sp, #24
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	891b      	ldrh	r3, [r3, #8]
 80069a4:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7ff ff47 	bl	800683a <tu_fifo_full>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00c      	beq.n	80069cc <tu_fifo_write+0x36>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	79db      	ldrb	r3, [r3, #7]
 80069b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	f083 0301 	eor.w	r3, r3, #1
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d002      	beq.n	80069cc <tu_fifo_write+0x36>
  {
    ret = false;
 80069c6:	2300      	movs	r3, #0
 80069c8:	75fb      	strb	r3, [r7, #23]
 80069ca:	e022      	b.n	8006a12 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	889b      	ldrh	r3, [r3, #4]
 80069d0:	823b      	strh	r3, [r7, #16]
 80069d2:	8abb      	ldrh	r3, [r7, #20]
 80069d4:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 80069d6:	e003      	b.n	80069e0 <tu_fifo_write+0x4a>
 80069d8:	89fa      	ldrh	r2, [r7, #14]
 80069da:	8a3b      	ldrh	r3, [r7, #16]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	81fb      	strh	r3, [r7, #14]
 80069e0:	8a3a      	ldrh	r2, [r7, #16]
 80069e2:	89fb      	ldrh	r3, [r7, #14]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d9f7      	bls.n	80069d8 <tu_fifo_write+0x42>
  return idx;
 80069e8:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80069ea:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 80069ec:	8a7b      	ldrh	r3, [r7, #18]
 80069ee:	461a      	mov	r2, r3
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7ff fae2 	bl	8005fbc <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	889b      	ldrh	r3, [r3, #4]
 80069fc:	8ab9      	ldrh	r1, [r7, #20]
 80069fe:	2201      	movs	r2, #1
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff fcd7 	bl	80063b4 <advance_index>
 8006a06:	4603      	mov	r3, r0
 8006a08:	461a      	mov	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	811a      	strh	r2, [r3, #8]

    ret = true;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8006a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	4613      	mov	r3, r2
 8006a28:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8006a2a:	88fa      	ldrh	r2, [r7, #6]
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	68b9      	ldr	r1, [r7, #8]
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f7ff fdbb 	bl	80065ac <_tu_fifo_write_n>
 8006a36:	4603      	mov	r3, r0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8006a4e:	88fa      	ldrh	r2, [r7, #6]
 8006a50:	2301      	movs	r3, #1
 8006a52:	68b9      	ldr	r1, [r7, #8]
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f7ff fda9 	bl	80065ac <_tu_fifo_write_n>
 8006a5a:	4603      	mov	r3, r0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8006a78:	2301      	movs	r3, #1
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <tu_fifo_set_overwritable>:
                Pointer to the FIFO buffer to manipulate
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable) {
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	460b      	mov	r3, r1
 8006a90:	70fb      	strb	r3, [r7, #3]
  if (f->overwritable == overwritable) {
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	79db      	ldrb	r3, [r3, #7]
 8006a96:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	78fa      	ldrb	r2, [r7, #3]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d101      	bne.n	8006aa6 <tu_fifo_set_overwritable+0x20>
    return true;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e006      	b.n	8006ab4 <tu_fifo_set_overwritable+0x2e>
  }

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	79d3      	ldrb	r3, [r2, #7]
 8006aaa:	78f9      	ldrb	r1, [r7, #3]
 8006aac:	f361 13c7 	bfi	r3, r1, #7, #1
 8006ab0:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8006ab2:	2301      	movs	r3, #1
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	6039      	str	r1, [r7, #0]
 8006aca:	71fb      	strb	r3, [r7, #7]
 8006acc:	4613      	mov	r3, r2
 8006ace:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <tud_descriptor_bos_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
 8006af0:	b480      	push	{r7}
 8006af2:	af00      	add	r7, sp, #0
  return NULL;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
  return NULL;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	4603      	mov	r3, r0
 8006b18:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <tud_mount_cb>:

TU_ATTR_WEAK void tud_mount_cb(void) {
 8006b28:	b480      	push	{r7}
 8006b2a:	af00      	add	r7, sp, #0
}
 8006b2c:	bf00      	nop
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <tud_umount_cb>:

TU_ATTR_WEAK void tud_umount_cb(void) {
 8006b36:	b480      	push	{r7}
 8006b38:	af00      	add	r7, sp, #0
}
 8006b3a:	bf00      	nop
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <tud_suspend_cb>:

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 8006b5a:	b480      	push	{r7}
 8006b5c:	af00      	add	r7, sp, #0
}
 8006b5e:	bf00      	nop
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <tud_vendor_control_xfer_cb>:

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	4603      	mov	r3, r0
 8006b70:	603a      	str	r2, [r7, #0]
 8006b72:	71fb      	strb	r3, [r7, #7]
 8006b74:	460b      	mov	r3, r1
 8006b76:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) stage; (void) request;
  return false;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8006b90:	2301      	movs	r3, #1
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
	...

08006ba0 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8006ba0:	b480      	push	{r7}
 8006ba2:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8006ba4:	4b06      	ldr	r3, [pc, #24]	@ (8006bc0 <tud_mounted+0x20>)
 8006ba6:	785b      	ldrb	r3, [r3, #1]
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	bf14      	ite	ne
 8006bae:	2301      	movne	r3, #1
 8006bb0:	2300      	moveq	r3, #0
 8006bb2:	b2db      	uxtb	r3, r3
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	20000b60 	.word	0x20000b60

08006bc4 <tud_suspended>:

bool tud_suspended(void) {
 8006bc4:	b480      	push	{r7}
 8006bc6:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8006bc8:	4b07      	ldr	r3, [pc, #28]	@ (8006be8 <tud_suspended+0x24>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	bf14      	ite	ne
 8006bd6:	2301      	movne	r3, #1
 8006bd8:	2300      	moveq	r3, #0
 8006bda:	b2db      	uxtb	r3, r3
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	20000b60 	.word	0x20000b60

08006bec <tud_remote_wakeup>:

bool tud_remote_wakeup(void) {
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en);
 8006bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8006c30 <tud_remote_wakeup+0x44>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00d      	beq.n	8006c1a <tud_remote_wakeup+0x2e>
 8006bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8006c30 <tud_remote_wakeup+0x44>)
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	f003 0310 	and.w	r3, r3, #16
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d006      	beq.n	8006c1a <tud_remote_wakeup+0x2e>
 8006c0c:	4b08      	ldr	r3, [pc, #32]	@ (8006c30 <tud_remote_wakeup+0x44>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <tud_remote_wakeup+0x32>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e005      	b.n	8006c2a <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 8006c1e:	4b05      	ldr	r3, [pc, #20]	@ (8006c34 <tud_remote_wakeup+0x48>)
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f002 fba4 	bl	8009370 <dcd_remote_wakeup>
  return true;
 8006c28:	2301      	movs	r3, #1
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000b60 	.word	0x20000b60
 8006c34:	2000006d 	.word	0x2000006d

08006c38 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8006c3c:	4b05      	ldr	r3, [pc, #20]	@ (8006c54 <tud_inited+0x1c>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2bff      	cmp	r3, #255	@ 0xff
 8006c42:	bf14      	ite	ne
 8006c44:	2301      	movne	r3, #1
 8006c46:	2300      	moveq	r3, #0
 8006c48:	b2db      	uxtb	r3, r3
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	2000006d 	.word	0x2000006d

08006c58 <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b08c      	sub	sp, #48	@ 0x30
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	4603      	mov	r3, r0
 8006c60:	6039      	str	r1, [r7, #0]
 8006c62:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 8006c64:	f7ff ffe8 	bl	8006c38 <tud_inited>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e09e      	b.n	8006db0 <tud_rhport_init+0x158>
  }
  TU_ASSERT(rh_init);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10a      	bne.n	8006c8e <tud_rhport_init+0x36>
 8006c78:	4b4f      	ldr	r3, [pc, #316]	@ (8006db8 <tud_rhport_init+0x160>)
 8006c7a:	61bb      	str	r3, [r7, #24]
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d000      	beq.n	8006c8a <tud_rhport_init+0x32>
 8006c88:	be00      	bkpt	0x0000
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	e090      	b.n	8006db0 <tud_rhport_init+0x158>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8006c8e:	222c      	movs	r2, #44	@ 0x2c
 8006c90:	2100      	movs	r1, #0
 8006c92:	484a      	ldr	r0, [pc, #296]	@ (8006dbc <tud_rhport_init+0x164>)
 8006c94:	f004 f8d5 	bl	800ae42 <memset>
  _usbd_queued_setup = 0;
 8006c98:	4b49      	ldr	r3, [pc, #292]	@ (8006dc0 <tud_rhport_init+0x168>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	701a      	strb	r2, [r3, #0]
 8006c9e:	4b49      	ldr	r3, [pc, #292]	@ (8006dc4 <tud_rhport_init+0x16c>)
 8006ca0:	613b      	str	r3, [r7, #16]
#define OSAL_SPINLOCK_DEF(_name, _int_set) \
  osal_spinlock_t _name = { .interrupt_set = _int_set }

TU_ATTR_ALWAYS_INLINE static inline void osal_spin_init(osal_spinlock_t *ctx) {
  (void) ctx;
}
 8006ca2:	bf00      	nop
 8006ca4:	4b48      	ldr	r3, [pc, #288]	@ (8006dc8 <tud_rhport_init+0x170>)
 8006ca6:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	3304      	adds	r3, #4
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7ff fed9 	bl	8006a64 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8006cb2:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8006cb4:	4a45      	ldr	r2, [pc, #276]	@ (8006dcc <tud_rhport_init+0x174>)
 8006cb6:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8006cb8:	4b44      	ldr	r3, [pc, #272]	@ (8006dcc <tud_rhport_init+0x174>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d10a      	bne.n	8006cd6 <tud_rhport_init+0x7e>
 8006cc0:	4b3d      	ldr	r3, [pc, #244]	@ (8006db8 <tud_rhport_init+0x160>)
 8006cc2:	61fb      	str	r3, [r7, #28]
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d000      	beq.n	8006cd2 <tud_rhport_init+0x7a>
 8006cd0:	be00      	bkpt	0x0000
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e06c      	b.n	8006db0 <tud_rhport_init+0x158>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8006cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8006dd0 <tud_rhport_init+0x178>)
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d005      	beq.n	8006ce8 <tud_rhport_init+0x90>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8006cdc:	483d      	ldr	r0, [pc, #244]	@ (8006dd4 <tud_rhport_init+0x17c>)
 8006cde:	f3af 8000 	nop.w
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	4a3c      	ldr	r2, [pc, #240]	@ (8006dd8 <tud_rhport_init+0x180>)
 8006ce6:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006cee:	e03a      	b.n	8006d66 <tud_rhport_init+0x10e>
 8006cf0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006cf4:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8006cfa:	4b36      	ldr	r3, [pc, #216]	@ (8006dd4 <tud_rhport_init+0x17c>)
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	7bfa      	ldrb	r2, [r7, #15]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d206      	bcs.n	8006d12 <tud_rhport_init+0xba>
    driver = &_app_driver[drvid];
 8006d04:	4b34      	ldr	r3, [pc, #208]	@ (8006dd8 <tud_rhport_init+0x180>)
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
 8006d0a:	015b      	lsls	r3, r3, #5
 8006d0c:	4413      	add	r3, r2
 8006d0e:	60bb      	str	r3, [r7, #8]
 8006d10:	e00d      	b.n	8006d2e <tud_rhport_init+0xd6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006d12:	4b30      	ldr	r3, [pc, #192]	@ (8006dd4 <tud_rhport_init+0x17c>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	db07      	blt.n	8006d2e <tud_rhport_init+0xd6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	4a2c      	ldr	r2, [pc, #176]	@ (8006dd4 <tud_rhport_init+0x17c>)
 8006d22:	7812      	ldrb	r2, [r2, #0]
 8006d24:	1a9b      	subs	r3, r3, r2
 8006d26:	015b      	lsls	r3, r3, #5
 8006d28:	4a2c      	ldr	r2, [pc, #176]	@ (8006ddc <tud_rhport_init+0x184>)
 8006d2a:	4413      	add	r3, r2
 8006d2c:	60bb      	str	r3, [r7, #8]
  return driver;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
    usbd_class_driver_t const* driver = get_driver(i);
 8006d30:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 8006d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <tud_rhport_init+0xe8>
 8006d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10a      	bne.n	8006d56 <tud_rhport_init+0xfe>
 8006d40:	4b1d      	ldr	r3, [pc, #116]	@ (8006db8 <tud_rhport_init+0x160>)
 8006d42:	623b      	str	r3, [r7, #32]
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d000      	beq.n	8006d52 <tud_rhport_init+0xfa>
 8006d50:	be00      	bkpt	0x0000
 8006d52:	2300      	movs	r3, #0
 8006d54:	e02c      	b.n	8006db0 <tud_rhport_init+0x158>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 8006d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006d5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006d60:	3301      	adds	r3, #1
 8006d62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006d66:	4b1b      	ldr	r3, [pc, #108]	@ (8006dd4 <tud_rhport_init+0x17c>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006d70:	429a      	cmp	r2, r3
 8006d72:	dabd      	bge.n	8006cf0 <tud_rhport_init+0x98>
  }

  _usbd_rhport = rhport;
 8006d74:	4a1a      	ldr	r2, [pc, #104]	@ (8006de0 <tud_rhport_init+0x188>)
 8006d76:	79fb      	ldrb	r3, [r7, #7]
 8006d78:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 8006d7a:	79fb      	ldrb	r3, [r7, #7]
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f002 f9cc 	bl	800911c <dcd_init>
 8006d84:	4603      	mov	r3, r0
 8006d86:	f083 0301 	eor.w	r3, r3, #1
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00a      	beq.n	8006da6 <tud_rhport_init+0x14e>
 8006d90:	4b09      	ldr	r3, [pc, #36]	@ (8006db8 <tud_rhport_init+0x160>)
 8006d92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0301 	and.w	r3, r3, #1
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d000      	beq.n	8006da2 <tud_rhport_init+0x14a>
 8006da0:	be00      	bkpt	0x0000
 8006da2:	2300      	movs	r3, #0
 8006da4:	e004      	b.n	8006db0 <tud_rhport_init+0x158>
  dcd_int_enable(rhport);
 8006da6:	79fb      	ldrb	r3, [r7, #7]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f002 fa55 	bl	8009258 <dcd_int_enable>

  return true;
 8006dae:	2301      	movs	r3, #1
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3730      	adds	r7, #48	@ 0x30
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	e000edf0 	.word	0xe000edf0
 8006dbc:	20000b60 	.word	0x20000b60
 8006dc0:	20000b8c 	.word	0x20000b8c
 8006dc4:	20000070 	.word	0x20000070
 8006dc8:	20000074 	.word	0x20000074
 8006dcc:	20000c58 	.word	0x20000c58
 8006dd0:	00000000 	.word	0x00000000
 8006dd4:	20000b94 	.word	0x20000b94
 8006dd8:	20000b90 	.word	0x20000b90
 8006ddc:	0800c82c 	.word	0x0800c82c
 8006de0:	2000006d 	.word	0x2000006d

08006de4 <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	4603      	mov	r3, r0
 8006dec:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006dee:	2300      	movs	r3, #0
 8006df0:	77fb      	strb	r3, [r7, #31]
 8006df2:	e034      	b.n	8006e5e <configuration_reset+0x7a>
 8006df4:	7ffb      	ldrb	r3, [r7, #31]
 8006df6:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8006dfc:	4b25      	ldr	r3, [pc, #148]	@ (8006e94 <configuration_reset+0xb0>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	7cfa      	ldrb	r2, [r7, #19]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d206      	bcs.n	8006e14 <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 8006e06:	4b24      	ldr	r3, [pc, #144]	@ (8006e98 <configuration_reset+0xb4>)
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	7cfb      	ldrb	r3, [r7, #19]
 8006e0c:	015b      	lsls	r3, r3, #5
 8006e0e:	4413      	add	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	e00d      	b.n	8006e30 <configuration_reset+0x4c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006e14:	4b1f      	ldr	r3, [pc, #124]	@ (8006e94 <configuration_reset+0xb0>)
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	1c5a      	adds	r2, r3, #1
 8006e1a:	7cfb      	ldrb	r3, [r7, #19]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	db07      	blt.n	8006e30 <configuration_reset+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006e20:	7cfb      	ldrb	r3, [r7, #19]
 8006e22:	4a1c      	ldr	r2, [pc, #112]	@ (8006e94 <configuration_reset+0xb0>)
 8006e24:	7812      	ldrb	r2, [r2, #0]
 8006e26:	1a9b      	subs	r3, r3, r2
 8006e28:	015b      	lsls	r3, r3, #5
 8006e2a:	4a1c      	ldr	r2, [pc, #112]	@ (8006e9c <configuration_reset+0xb8>)
 8006e2c:	4413      	add	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]
  return driver;
 8006e30:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8006e32:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d109      	bne.n	8006e4e <configuration_reset+0x6a>
 8006e3a:	4b19      	ldr	r3, [pc, #100]	@ (8006ea0 <configuration_reset+0xbc>)
 8006e3c:	617b      	str	r3, [r7, #20]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d01f      	beq.n	8006e8a <configuration_reset+0xa6>
 8006e4a:	be00      	bkpt	0x0000
 8006e4c:	e01d      	b.n	8006e8a <configuration_reset+0xa6>
    driver->reset(rhport);
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	79fa      	ldrb	r2, [r7, #7]
 8006e54:	4610      	mov	r0, r2
 8006e56:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006e58:	7ffb      	ldrb	r3, [r7, #31]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	77fb      	strb	r3, [r7, #31]
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e94 <configuration_reset+0xb0>)
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	7ffb      	ldrb	r3, [r7, #31]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	dac4      	bge.n	8006df4 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8006e6a:	222c      	movs	r2, #44	@ 0x2c
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	480d      	ldr	r0, [pc, #52]	@ (8006ea4 <configuration_reset+0xc0>)
 8006e70:	f003 ffe7 	bl	800ae42 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8006e74:	2210      	movs	r2, #16
 8006e76:	21ff      	movs	r1, #255	@ 0xff
 8006e78:	480b      	ldr	r0, [pc, #44]	@ (8006ea8 <configuration_reset+0xc4>)
 8006e7a:	f003 ffe2 	bl	800ae42 <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 8006e7e:	220c      	movs	r2, #12
 8006e80:	21ff      	movs	r1, #255	@ 0xff
 8006e82:	480a      	ldr	r0, [pc, #40]	@ (8006eac <configuration_reset+0xc8>)
 8006e84:	f003 ffdd 	bl	800ae42 <memset>
 8006e88:	e000      	b.n	8006e8c <configuration_reset+0xa8>
    TU_ASSERT(driver,);
 8006e8a:	bf00      	nop
}
 8006e8c:	3720      	adds	r7, #32
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20000b94 	.word	0x20000b94
 8006e98:	20000b90 	.word	0x20000b90
 8006e9c:	0800c82c 	.word	0x0800c82c
 8006ea0:	e000edf0 	.word	0xe000edf0
 8006ea4:	20000b60 	.word	0x20000b60
 8006ea8:	20000b64 	.word	0x20000b64
 8006eac:	20000b74 	.word	0x20000b74

08006eb0 <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7ff ff91 	bl	8006de4 <configuration_reset>
  usbd_control_reset();
 8006ec2:	f001 fc37 	bl	8008734 <usbd_control_reset>
}
 8006ec6:	bf00      	nop
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
	...

08006ed0 <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8006ed0:	b590      	push	{r4, r7, lr}
 8006ed2:	b093      	sub	sp, #76	@ 0x4c
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 8006edc:	f7ff feac 	bl	8006c38 <tud_inited>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	f083 0301 	eor.w	r3, r3, #1
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f040 8189 	bne.w	8007200 <tud_task_ext+0x330>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8006eee:	4bb1      	ldr	r3, [pc, #708]	@ (80071b4 <tud_task_ext+0x2e4>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ef4:	f107 030c 	add.w	r3, r7, #12
 8006ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 8006efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2000      	movs	r0, #0
 8006f04:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 8006f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f08:	3304      	adds	r3, #4
 8006f0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7ff fcfa 	bl	8006906 <tu_fifo_read>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 8006f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2001      	movs	r0, #1
 8006f1e:	4798      	blx	r3

  return success;
 8006f20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f24:	f083 0301 	eor.w	r3, r3, #1
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f040 816a 	bne.w	8007204 <tud_task_ext+0x334>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 8006f30:	7b7b      	ldrb	r3, [r7, #13]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	2b07      	cmp	r3, #7
 8006f36:	f200 814b 	bhi.w	80071d0 <tud_task_ext+0x300>
 8006f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f40 <tud_task_ext+0x70>)
 8006f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f40:	08006f61 	.word	0x08006f61
 8006f44:	08006f71 	.word	0x08006f71
 8006f48:	08007185 	.word	0x08007185
 8006f4c:	08007137 	.word	0x08007137
 8006f50:	08007161 	.word	0x08007161
 8006f54:	08006f7f 	.word	0x08006f7f
 8006f58:	0800702f 	.word	0x0800702f
 8006f5c:	08007175 	.word	0x08007175
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8006f60:	7b3b      	ldrb	r3, [r7, #12]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7ff ffa4 	bl	8006eb0 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8006f68:	7c3a      	ldrb	r2, [r7, #16]
 8006f6a:	4b93      	ldr	r3, [pc, #588]	@ (80071b8 <tud_task_ext+0x2e8>)
 8006f6c:	709a      	strb	r2, [r3, #2]
        break;
 8006f6e:	e146      	b.n	80071fe <tud_task_ext+0x32e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 8006f70:	7b3b      	ldrb	r3, [r7, #12]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff ff9c 	bl	8006eb0 <usbd_reset>
        tud_umount_cb();
 8006f78:	f7ff fddd 	bl	8006b36 <tud_umount_cb>
        break;
 8006f7c:	e13f      	b.n	80071fe <tud_task_ext+0x32e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 8006f7e:	4b8f      	ldr	r3, [pc, #572]	@ (80071bc <tud_task_ext+0x2ec>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <tud_task_ext+0xce>
 8006f88:	4b8d      	ldr	r3, [pc, #564]	@ (80071c0 <tud_task_ext+0x2f0>)
 8006f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 8137 	beq.w	8007208 <tud_task_ext+0x338>
 8006f9a:	be00      	bkpt	0x0000
 8006f9c:	e134      	b.n	8007208 <tud_task_ext+0x338>
        _usbd_queued_setup--;
 8006f9e:	4b87      	ldr	r3, [pc, #540]	@ (80071bc <tud_task_ext+0x2ec>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	4b84      	ldr	r3, [pc, #528]	@ (80071bc <tud_task_ext+0x2ec>)
 8006faa:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 8006fac:	4b83      	ldr	r3, [pc, #524]	@ (80071bc <tud_task_ext+0x2ec>)
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f040 8116 	bne.w	80071e4 <tud_task_ext+0x314>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8006fb8:	4a7f      	ldr	r2, [pc, #508]	@ (80071b8 <tud_task_ext+0x2e8>)
 8006fba:	7813      	ldrb	r3, [r2, #0]
 8006fbc:	f043 0301 	orr.w	r3, r3, #1
 8006fc0:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8006fc2:	4a7d      	ldr	r2, [pc, #500]	@ (80071b8 <tud_task_ext+0x2e8>)
 8006fc4:	f892 3020 	ldrb.w	r3, [r2, #32]
 8006fc8:	f023 0301 	bic.w	r3, r3, #1
 8006fcc:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8006fd0:	4a79      	ldr	r2, [pc, #484]	@ (80071b8 <tud_task_ext+0x2e8>)
 8006fd2:	f892 3020 	ldrb.w	r3, [r2, #32]
 8006fd6:	f023 0304 	bic.w	r3, r3, #4
 8006fda:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 8006fde:	4a76      	ldr	r2, [pc, #472]	@ (80071b8 <tud_task_ext+0x2e8>)
 8006fe0:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8006fe4:	f023 0301 	bic.w	r3, r3, #1
 8006fe8:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 8006fec:	4a72      	ldr	r2, [pc, #456]	@ (80071b8 <tud_task_ext+0x2e8>)
 8006fee:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8006ff2:	f023 0304 	bic.w	r3, r3, #4
 8006ff6:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 8006ffa:	7b3a      	ldrb	r2, [r7, #12]
 8006ffc:	f107 030c 	add.w	r3, r7, #12
 8007000:	3304      	adds	r3, #4
 8007002:	4619      	mov	r1, r3
 8007004:	4610      	mov	r0, r2
 8007006:	f000 f91f 	bl	8007248 <process_control_request>
 800700a:	4603      	mov	r3, r0
 800700c:	f083 0301 	eor.w	r3, r3, #1
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 80e8 	beq.w	80071e8 <tud_task_ext+0x318>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8007018:	7b3b      	ldrb	r3, [r7, #12]
 800701a:	2100      	movs	r1, #0
 800701c:	4618      	mov	r0, r3
 800701e:	f002 fb7b 	bl	8009718 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8007022:	7b3b      	ldrb	r3, [r7, #12]
 8007024:	2180      	movs	r1, #128	@ 0x80
 8007026:	4618      	mov	r0, r3
 8007028:	f002 fb76 	bl	8009718 <dcd_edpt_stall>
        }
        break;
 800702c:	e0dc      	b.n	80071e8 <tud_task_ext+0x318>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 800702e:	7c3b      	ldrb	r3, [r7, #16]
 8007030:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007034:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007038:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800703c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007040:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007044:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 8007046:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800704a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800704e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007052:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007056:	09db      	lsrs	r3, r3, #7
 8007058:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 800705a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 800705e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8007062:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007066:	4954      	ldr	r1, [pc, #336]	@ (80071b8 <tud_task_ext+0x2e8>)
 8007068:	0052      	lsls	r2, r2, #1
 800706a:	440a      	add	r2, r1
 800706c:	4413      	add	r3, r2
 800706e:	f103 0220 	add.w	r2, r3, #32
 8007072:	7813      	ldrb	r3, [r2, #0]
 8007074:	f023 0301 	bic.w	r3, r3, #1
 8007078:	7013      	strb	r3, [r2, #0]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 800707a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800707e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007082:	494d      	ldr	r1, [pc, #308]	@ (80071b8 <tud_task_ext+0x2e8>)
 8007084:	0052      	lsls	r2, r2, #1
 8007086:	440a      	add	r2, r1
 8007088:	4413      	add	r3, r2
 800708a:	f103 0220 	add.w	r2, r3, #32
 800708e:	7813      	ldrb	r3, [r2, #0]
 8007090:	f023 0304 	bic.w	r3, r3, #4
 8007094:	7013      	strb	r3, [r2, #0]

        if (0 == epnum) {
 8007096:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800709a:	2b00      	cmp	r3, #0
 800709c:	d107      	bne.n	80070ae <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 800709e:	7b38      	ldrb	r0, [r7, #12]
 80070a0:	7c7a      	ldrb	r2, [r7, #17]
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80070a8:	f001 fb7a 	bl	80087a0 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 80070ac:	e0a7      	b.n	80071fe <tud_task_ext+0x32e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 80070ae:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80070b2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80070b6:	4940      	ldr	r1, [pc, #256]	@ (80071b8 <tud_task_ext+0x2e8>)
 80070b8:	0052      	lsls	r2, r2, #1
 80070ba:	440a      	add	r2, r1
 80070bc:	4413      	add	r3, r2
 80070be:	3314      	adds	r3, #20
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 80070ca:	4b3e      	ldr	r3, [pc, #248]	@ (80071c4 <tud_task_ext+0x2f4>)
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d207      	bcs.n	80070e6 <tud_task_ext+0x216>
    driver = &_app_driver[drvid];
 80070d6:	4b3c      	ldr	r3, [pc, #240]	@ (80071c8 <tud_task_ext+0x2f8>)
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80070de:	015b      	lsls	r3, r3, #5
 80070e0:	4413      	add	r3, r2
 80070e2:	623b      	str	r3, [r7, #32]
 80070e4:	e00f      	b.n	8007106 <tud_task_ext+0x236>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80070e6:	4b37      	ldr	r3, [pc, #220]	@ (80071c4 <tud_task_ext+0x2f4>)
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	1c5a      	adds	r2, r3, #1
 80070ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80070f0:	429a      	cmp	r2, r3
 80070f2:	db08      	blt.n	8007106 <tud_task_ext+0x236>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80070f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80070f8:	4a32      	ldr	r2, [pc, #200]	@ (80071c4 <tud_task_ext+0x2f4>)
 80070fa:	7812      	ldrb	r2, [r2, #0]
 80070fc:	1a9b      	subs	r3, r3, r2
 80070fe:	015b      	lsls	r3, r3, #5
 8007100:	4a32      	ldr	r2, [pc, #200]	@ (80071cc <tud_task_ext+0x2fc>)
 8007102:	4413      	add	r3, r2
 8007104:	623b      	str	r3, [r7, #32]
  return driver;
 8007106:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8007108:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 800710a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800710c:	2b00      	cmp	r3, #0
 800710e:	d109      	bne.n	8007124 <tud_task_ext+0x254>
 8007110:	4b2b      	ldr	r3, [pc, #172]	@ (80071c0 <tud_task_ext+0x2f0>)
 8007112:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b00      	cmp	r3, #0
 800711e:	d075      	beq.n	800720c <tud_task_ext+0x33c>
 8007120:	be00      	bkpt	0x0000
 8007122:	e073      	b.n	800720c <tud_task_ext+0x33c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8007124:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007126:	699c      	ldr	r4, [r3, #24]
 8007128:	7b38      	ldrb	r0, [r7, #12]
 800712a:	7c7a      	ldrb	r2, [r7, #17]
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8007132:	47a0      	blx	r4
        break;
 8007134:	e063      	b.n	80071fe <tud_task_ext+0x32e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 8007136:	4b20      	ldr	r3, [pc, #128]	@ (80071b8 <tud_task_ext+0x2e8>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d053      	beq.n	80071ec <tud_task_ext+0x31c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8007144:	4b1c      	ldr	r3, [pc, #112]	@ (80071b8 <tud_task_ext+0x2e8>)
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	bf14      	ite	ne
 8007152:	2301      	movne	r3, #1
 8007154:	2300      	moveq	r3, #0
 8007156:	b2db      	uxtb	r3, r3
 8007158:	4618      	mov	r0, r3
 800715a:	f7ff fcf3 	bl	8006b44 <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 800715e:	e045      	b.n	80071ec <tud_task_ext+0x31c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 8007160:	4b15      	ldr	r3, [pc, #84]	@ (80071b8 <tud_task_ext+0x2e8>)
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d040      	beq.n	80071f0 <tud_task_ext+0x320>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 800716e:	f7ff fcf4 	bl	8006b5a <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 8007172:	e03d      	b.n	80071f0 <tud_task_ext+0x320>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) {
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d03c      	beq.n	80071f4 <tud_task_ext+0x324>
          event.func_call.func(event.func_call.param);
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	4610      	mov	r0, r2
 8007180:	4798      	blx	r3
        }
        break;
 8007182:	e037      	b.n	80071f4 <tud_task_ext+0x324>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8007184:	4b0c      	ldr	r3, [pc, #48]	@ (80071b8 <tud_task_ext+0x2e8>)
 8007186:	78db      	ldrb	r3, [r3, #3]
 8007188:	b2db      	uxtb	r3, r3
 800718a:	61fb      	str	r3, [r7, #28]
 800718c:	2300      	movs	r3, #0
 800718e:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8007190:	7efb      	ldrb	r3, [r7, #27]
 8007192:	69fa      	ldr	r2, [r7, #28]
 8007194:	fa22 f303 	lsr.w	r3, r2, r3
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	bf14      	ite	ne
 80071a0:	2301      	movne	r3, #1
 80071a2:	2300      	moveq	r3, #0
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d026      	beq.n	80071f8 <tud_task_ext+0x328>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7ff fc95 	bl	8006adc <tud_sof_cb>
        }
      break;
 80071b2:	e021      	b.n	80071f8 <tud_task_ext+0x328>
 80071b4:	20000c58 	.word	0x20000c58
 80071b8:	20000b60 	.word	0x20000b60
 80071bc:	20000b8c 	.word	0x20000b8c
 80071c0:	e000edf0 	.word	0xe000edf0
 80071c4:	20000b94 	.word	0x20000b94
 80071c8:	20000b90 	.word	0x20000b90
 80071cc:	0800c82c 	.word	0x0800c82c

      default:
        TU_BREAKPOINT();
 80071d0:	4b10      	ldr	r3, [pc, #64]	@ (8007214 <tud_task_ext+0x344>)
 80071d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80071d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00d      	beq.n	80071fc <tud_task_ext+0x32c>
 80071e0:	be00      	bkpt	0x0000
        break;
 80071e2:	e00b      	b.n	80071fc <tud_task_ext+0x32c>
          break;
 80071e4:	bf00      	nop
 80071e6:	e682      	b.n	8006eee <tud_task_ext+0x1e>
        break;
 80071e8:	bf00      	nop
 80071ea:	e680      	b.n	8006eee <tud_task_ext+0x1e>
        break;
 80071ec:	bf00      	nop
 80071ee:	e67e      	b.n	8006eee <tud_task_ext+0x1e>
        break;
 80071f0:	bf00      	nop
 80071f2:	e67c      	b.n	8006eee <tud_task_ext+0x1e>
        break;
 80071f4:	bf00      	nop
 80071f6:	e67a      	b.n	8006eee <tud_task_ext+0x1e>
      break;
 80071f8:	bf00      	nop
 80071fa:	e678      	b.n	8006eee <tud_task_ext+0x1e>
        break;
 80071fc:	bf00      	nop
  while (1) {
 80071fe:	e676      	b.n	8006eee <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 8007200:	bf00      	nop
 8007202:	e004      	b.n	800720e <tud_task_ext+0x33e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8007204:	bf00      	nop
 8007206:	e002      	b.n	800720e <tud_task_ext+0x33e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8007208:	bf00      	nop
 800720a:	e000      	b.n	800720e <tud_task_ext+0x33e>
          TU_ASSERT(driver,);
 800720c:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) { return; }
#endif
  }
}
 800720e:	374c      	adds	r7, #76	@ 0x4c
 8007210:	46bd      	mov	sp, r7
 8007212:	bd90      	pop	{r4, r7, pc}
 8007214:	e000edf0 	.word	0xe000edf0

08007218 <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	4603      	mov	r3, r0
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
 8007224:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	4618      	mov	r0, r3
 800722c:	f001 fa8e 	bl	800874c <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	7bf8      	ldrb	r0, [r7, #15]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	2101      	movs	r1, #1
 800723a:	4798      	blx	r3
 800723c:	4603      	mov	r3, r0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 8007248:	b580      	push	{r7, lr}
 800724a:	b09a      	sub	sp, #104	@ 0x68
 800724c:	af00      	add	r7, sp, #0
 800724e:	4603      	mov	r3, r0
 8007250:	6039      	str	r1, [r7, #0]
 8007252:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8007254:	2000      	movs	r0, #0
 8007256:	f001 fa79 	bl	800874c <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b60      	cmp	r3, #96	@ 0x60
 8007266:	d10a      	bne.n	800727e <process_control_request+0x36>
 8007268:	4ba5      	ldr	r3, [pc, #660]	@ (8007500 <process_control_request+0x2b8>)
 800726a:	633b      	str	r3, [r7, #48]	@ 0x30
 800726c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	2b00      	cmp	r3, #0
 8007276:	d000      	beq.n	800727a <process_control_request+0x32>
 8007278:	be00      	bkpt	0x0000
 800727a:	2300      	movs	r3, #0
 800727c:	e2bb      	b.n	80077f6 <process_control_request+0x5ae>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b40      	cmp	r3, #64	@ 0x40
 800728a:	d10a      	bne.n	80072a2 <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 800728c:	489d      	ldr	r0, [pc, #628]	@ (8007504 <process_control_request+0x2bc>)
 800728e:	f001 fa5d 	bl	800874c <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8007292:	79fb      	ldrb	r3, [r7, #7]
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	2101      	movs	r1, #1
 8007298:	4618      	mov	r0, r3
 800729a:	f7ff fc65 	bl	8006b68 <tud_vendor_control_xfer_cb>
 800729e:	4603      	mov	r3, r0
 80072a0:	e2a9      	b.n	80077f6 <process_control_request+0x5ae>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	f000 81ca 	beq.w	8007646 <process_control_request+0x3fe>
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	f300 8292 	bgt.w	80077dc <process_control_request+0x594>
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d003      	beq.n	80072c4 <process_control_request+0x7c>
 80072bc:	2b01      	cmp	r3, #1
 80072be:	f000 8151 	beq.w	8007564 <process_control_request+0x31c>
 80072c2:	e28b      	b.n	80077dc <process_control_request+0x594>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b20      	cmp	r3, #32
 80072d0:	d143      	bne.n	800735a <process_control_request+0x112>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	889b      	ldrh	r3, [r3, #4]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80072da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80072e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80072e6:	2b0f      	cmp	r3, #15
 80072e8:	d901      	bls.n	80072ee <process_control_request+0xa6>
 80072ea:	2300      	movs	r3, #0
 80072ec:	e283      	b.n	80077f6 <process_control_request+0x5ae>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80072ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80072f2:	4a85      	ldr	r2, [pc, #532]	@ (8007508 <process_control_request+0x2c0>)
 80072f4:	4413      	add	r3, r2
 80072f6:	791b      	ldrb	r3, [r3, #4]
 80072f8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 80072fc:	2300      	movs	r3, #0
 80072fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 8007300:	4b82      	ldr	r3, [pc, #520]	@ (800750c <process_control_request+0x2c4>)
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8007308:	429a      	cmp	r2, r3
 800730a:	d207      	bcs.n	800731c <process_control_request+0xd4>
    driver = &_app_driver[drvid];
 800730c:	4b80      	ldr	r3, [pc, #512]	@ (8007510 <process_control_request+0x2c8>)
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007314:	015b      	lsls	r3, r3, #5
 8007316:	4413      	add	r3, r2
 8007318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800731a:	e00f      	b.n	800733c <process_control_request+0xf4>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800731c:	4b7b      	ldr	r3, [pc, #492]	@ (800750c <process_control_request+0x2c4>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	1c5a      	adds	r2, r3, #1
 8007322:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007326:	429a      	cmp	r2, r3
 8007328:	db08      	blt.n	800733c <process_control_request+0xf4>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800732a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800732e:	4a77      	ldr	r2, [pc, #476]	@ (800750c <process_control_request+0x2c4>)
 8007330:	7812      	ldrb	r2, [r2, #0]
 8007332:	1a9b      	subs	r3, r3, r2
 8007334:	015b      	lsls	r3, r3, #5
 8007336:	4a77      	ldr	r2, [pc, #476]	@ (8007514 <process_control_request+0x2cc>)
 8007338:	4413      	add	r3, r2
 800733a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 800733c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800733e:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 8007340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <process_control_request+0x102>
 8007346:	2300      	movs	r3, #0
 8007348:	e255      	b.n	80077f6 <process_control_request+0x5ae>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 800734a:	79fb      	ldrb	r3, [r7, #7]
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007350:	4618      	mov	r0, r3
 8007352:	f7ff ff61 	bl	8007218 <invoke_class_control>
 8007356:	4603      	mov	r3, r0
 8007358:	e24d      	b.n	80077f6 <process_control_request+0x5ae>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00a      	beq.n	800737e <process_control_request+0x136>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 8007368:	4b65      	ldr	r3, [pc, #404]	@ (8007500 <process_control_request+0x2b8>)
 800736a:	643b      	str	r3, [r7, #64]	@ 0x40
 800736c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	2b00      	cmp	r3, #0
 8007376:	d000      	beq.n	800737a <process_control_request+0x132>
 8007378:	be00      	bkpt	0x0000
        return false;
 800737a:	2300      	movs	r3, #0
 800737c:	e23b      	b.n	80077f6 <process_control_request+0x5ae>
      }

      switch ( p_request->bRequest ) {
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	785b      	ldrb	r3, [r3, #1]
 8007382:	2b09      	cmp	r3, #9
 8007384:	f200 80e1 	bhi.w	800754a <process_control_request+0x302>
 8007388:	a201      	add	r2, pc, #4	@ (adr r2, 8007390 <process_control_request+0x148>)
 800738a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738e:	bf00      	nop
 8007390:	08007519 	.word	0x08007519
 8007394:	080074dd 	.word	0x080074dd
 8007398:	0800754b 	.word	0x0800754b
 800739c:	080074b7 	.word	0x080074b7
 80073a0:	0800754b 	.word	0x0800754b
 80073a4:	080073b9 	.word	0x080073b9
 80073a8:	0800749d 	.word	0x0800749d
 80073ac:	0800754b 	.word	0x0800754b
 80073b0:	080073dd 	.word	0x080073dd
 80073b4:	080073f5 	.word	0x080073f5
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 80073b8:	6838      	ldr	r0, [r7, #0]
 80073ba:	f001 f9d7 	bl	800876c <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	885b      	ldrh	r3, [r3, #2]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	79fb      	ldrb	r3, [r7, #7]
 80073c8:	4611      	mov	r1, r2
 80073ca:	4618      	mov	r0, r3
 80073cc:	f001 ff94 	bl	80092f8 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 80073d0:	4a4d      	ldr	r2, [pc, #308]	@ (8007508 <process_control_request+0x2c0>)
 80073d2:	7813      	ldrb	r3, [r2, #0]
 80073d4:	f043 0302 	orr.w	r3, r3, #2
 80073d8:	7013      	strb	r3, [r2, #0]
        break;
 80073da:	e0c2      	b.n	8007562 <process_control_request+0x31a>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 80073dc:	4b4a      	ldr	r3, [pc, #296]	@ (8007508 <process_control_request+0x2c0>)
 80073de:	785b      	ldrb	r3, [r3, #1]
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 80073e4:	f107 0213 	add.w	r2, r7, #19
 80073e8:	79f8      	ldrb	r0, [r7, #7]
 80073ea:	2301      	movs	r3, #1
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	f001 f931 	bl	8008654 <tud_control_xfer>
        }
        break;
 80073f2:	e0b6      	b.n	8007562 <process_control_request+0x31a>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	885b      	ldrh	r3, [r3, #2]
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 80073fe:	4b42      	ldr	r3, [pc, #264]	@ (8007508 <process_control_request+0x2c0>)
 8007400:	785b      	ldrb	r3, [r3, #1]
 8007402:	b2db      	uxtb	r3, r3
 8007404:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007408:	429a      	cmp	r2, r3
 800740a:	d041      	beq.n	8007490 <process_control_request+0x248>
            if ( _usbd_dev.cfg_num ) {
 800740c:	4b3e      	ldr	r3, [pc, #248]	@ (8007508 <process_control_request+0x2c0>)
 800740e:	785b      	ldrb	r3, [r3, #1]
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d014      	beq.n	8007440 <process_control_request+0x1f8>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 8007416:	79fb      	ldrb	r3, [r7, #7]
 8007418:	2100      	movs	r1, #0
 800741a:	4618      	mov	r0, r3
 800741c:	f002 f832 	bl	8009484 <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8007420:	79fb      	ldrb	r3, [r7, #7]
 8007422:	4618      	mov	r0, r3
 8007424:	f002 f896 	bl	8009554 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8007428:	4b37      	ldr	r3, [pc, #220]	@ (8007508 <process_control_request+0x2c0>)
 800742a:	789b      	ldrb	r3, [r3, #2]
 800742c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 8007430:	79fb      	ldrb	r3, [r7, #7]
 8007432:	4618      	mov	r0, r3
 8007434:	f7ff fcd6 	bl	8006de4 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8007438:	4a33      	ldr	r2, [pc, #204]	@ (8007508 <process_control_request+0x2c0>)
 800743a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800743e:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 8007440:	4a31      	ldr	r2, [pc, #196]	@ (8007508 <process_control_request+0x2c0>)
 8007442:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007446:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 8007448:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800744c:	2b00      	cmp	r3, #0
 800744e:	d01d      	beq.n	800748c <process_control_request+0x244>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 8007450:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007454:	79fb      	ldrb	r3, [r7, #7]
 8007456:	4611      	mov	r1, r2
 8007458:	4618      	mov	r0, r3
 800745a:	f000 f9d5 	bl	8007808 <process_set_config>
 800745e:	4603      	mov	r3, r0
 8007460:	f083 0301 	eor.w	r3, r3, #1
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00d      	beq.n	8007486 <process_control_request+0x23e>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 800746a:	4b25      	ldr	r3, [pc, #148]	@ (8007500 <process_control_request+0x2b8>)
 800746c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800746e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	d000      	beq.n	800747c <process_control_request+0x234>
 800747a:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 800747c:	4b22      	ldr	r3, [pc, #136]	@ (8007508 <process_control_request+0x2c0>)
 800747e:	2200      	movs	r2, #0
 8007480:	705a      	strb	r2, [r3, #1]
                return false;
 8007482:	2300      	movs	r3, #0
 8007484:	e1b7      	b.n	80077f6 <process_control_request+0x5ae>
              }
              tud_mount_cb();
 8007486:	f7ff fb4f 	bl	8006b28 <tud_mount_cb>
 800748a:	e001      	b.n	8007490 <process_control_request+0x248>
            } else {
              tud_umount_cb();
 800748c:	f7ff fb53 	bl	8006b36 <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 8007490:	79fb      	ldrb	r3, [r7, #7]
 8007492:	6839      	ldr	r1, [r7, #0]
 8007494:	4618      	mov	r0, r3
 8007496:	f001 f86b 	bl	8008570 <tud_control_status>
        }
        break;
 800749a:	e062      	b.n	8007562 <process_control_request+0x31a>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 800749c:	79fb      	ldrb	r3, [r7, #7]
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f000 fae5 	bl	8007a70 <process_get_descriptor>
 80074a6:	4603      	mov	r3, r0
 80074a8:	f083 0301 	eor.w	r3, r3, #1
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d056      	beq.n	8007560 <process_control_request+0x318>
 80074b2:	2300      	movs	r3, #0
 80074b4:	e19f      	b.n	80077f6 <process_control_request+0x5ae>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	885b      	ldrh	r3, [r3, #2]
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d10b      	bne.n	80074d8 <process_control_request+0x290>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 80074c0:	4a11      	ldr	r2, [pc, #68]	@ (8007508 <process_control_request+0x2c0>)
 80074c2:	7813      	ldrb	r3, [r2, #0]
 80074c4:	f043 0308 	orr.w	r3, r3, #8
 80074c8:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 80074ca:	79fb      	ldrb	r3, [r7, #7]
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f001 f84e 	bl	8008570 <tud_control_status>
            break;
 80074d4:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 80074d6:	e044      	b.n	8007562 <process_control_request+0x31a>
            default: return false;
 80074d8:	2300      	movs	r3, #0
 80074da:	e18c      	b.n	80077f6 <process_control_request+0x5ae>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	885b      	ldrh	r3, [r3, #2]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d001      	beq.n	80074ea <process_control_request+0x2a2>
 80074e6:	2300      	movs	r3, #0
 80074e8:	e185      	b.n	80077f6 <process_control_request+0x5ae>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 80074ea:	4a07      	ldr	r2, [pc, #28]	@ (8007508 <process_control_request+0x2c0>)
 80074ec:	7813      	ldrb	r3, [r2, #0]
 80074ee:	f023 0308 	bic.w	r3, r3, #8
 80074f2:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 80074f4:	79fb      	ldrb	r3, [r7, #7]
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f001 f839 	bl	8008570 <tud_control_status>
        break;
 80074fe:	e030      	b.n	8007562 <process_control_request+0x31a>
 8007500:	e000edf0 	.word	0xe000edf0
 8007504:	08006b69 	.word	0x08006b69
 8007508:	20000b60 	.word	0x20000b60
 800750c:	20000b94 	.word	0x20000b94
 8007510:	20000b90 	.word	0x20000b90
 8007514:	0800c82c 	.word	0x0800c82c

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8007518:	4b94      	ldr	r3, [pc, #592]	@ (800776c <process_control_request+0x524>)
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	095b      	lsrs	r3, r3, #5
 800751e:	b2db      	uxtb	r3, r3
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	b29a      	uxth	r2, r3
 8007526:	4b91      	ldr	r3, [pc, #580]	@ (800776c <process_control_request+0x524>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	089b      	lsrs	r3, r3, #2
 800752c:	b2db      	uxtb	r3, r3
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	b29b      	uxth	r3, r3
 8007534:	4313      	orrs	r3, r2
 8007536:	b29b      	uxth	r3, r3
 8007538:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 800753a:	f107 0210 	add.w	r2, r7, #16
 800753e:	79f8      	ldrb	r0, [r7, #7]
 8007540:	2302      	movs	r3, #2
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	f001 f886 	bl	8008654 <tud_control_xfer>
          break;
 8007548:	e00b      	b.n	8007562 <process_control_request+0x31a>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 800754a:	4b89      	ldr	r3, [pc, #548]	@ (8007770 <process_control_request+0x528>)
 800754c:	647b      	str	r3, [r7, #68]	@ 0x44
 800754e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b00      	cmp	r3, #0
 8007558:	d000      	beq.n	800755c <process_control_request+0x314>
 800755a:	be00      	bkpt	0x0000
 800755c:	2300      	movs	r3, #0
 800755e:	e14a      	b.n	80077f6 <process_control_request+0x5ae>
        break;
 8007560:	bf00      	nop
      }
    break;
 8007562:	e147      	b.n	80077f4 <process_control_request+0x5ac>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	889b      	ldrh	r3, [r3, #4]
 8007568:	b29b      	uxth	r3, r3
 800756a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800756c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800756e:	b2db      	uxtb	r3, r3
 8007570:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8007574:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007578:	2b0f      	cmp	r3, #15
 800757a:	d901      	bls.n	8007580 <process_control_request+0x338>
 800757c:	2300      	movs	r3, #0
 800757e:	e13a      	b.n	80077f6 <process_control_request+0x5ae>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8007580:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007584:	4a79      	ldr	r2, [pc, #484]	@ (800776c <process_control_request+0x524>)
 8007586:	4413      	add	r3, r2
 8007588:	791b      	ldrb	r3, [r3, #4]
 800758a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 800758e:	2300      	movs	r3, #0
 8007590:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8007592:	4b78      	ldr	r3, [pc, #480]	@ (8007774 <process_control_request+0x52c>)
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800759a:	429a      	cmp	r2, r3
 800759c:	d207      	bcs.n	80075ae <process_control_request+0x366>
    driver = &_app_driver[drvid];
 800759e:	4b76      	ldr	r3, [pc, #472]	@ (8007778 <process_control_request+0x530>)
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80075a6:	015b      	lsls	r3, r3, #5
 80075a8:	4413      	add	r3, r2
 80075aa:	623b      	str	r3, [r7, #32]
 80075ac:	e00f      	b.n	80075ce <process_control_request+0x386>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80075ae:	4b71      	ldr	r3, [pc, #452]	@ (8007774 <process_control_request+0x52c>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80075b8:	429a      	cmp	r2, r3
 80075ba:	db08      	blt.n	80075ce <process_control_request+0x386>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80075bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80075c0:	4a6c      	ldr	r2, [pc, #432]	@ (8007774 <process_control_request+0x52c>)
 80075c2:	7812      	ldrb	r2, [r2, #0]
 80075c4:	1a9b      	subs	r3, r3, r2
 80075c6:	015b      	lsls	r3, r3, #5
 80075c8:	4a6c      	ldr	r2, [pc, #432]	@ (800777c <process_control_request+0x534>)
 80075ca:	4413      	add	r3, r2
 80075cc:	623b      	str	r3, [r7, #32]
  return driver;
 80075ce:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80075d0:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 80075d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <process_control_request+0x394>
 80075d8:	2300      	movs	r3, #0
 80075da:	e10c      	b.n	80077f6 <process_control_request+0x5ae>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 80075dc:	79fb      	ldrb	r3, [r7, #7]
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7ff fe18 	bl	8007218 <invoke_class_control>
 80075e8:	4603      	mov	r3, r0
 80075ea:	f083 0301 	eor.w	r3, r3, #1
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 80fe 	beq.w	80077f2 <process_control_request+0x5aa>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <process_control_request+0x3c0>
 8007604:	2300      	movs	r3, #0
 8007606:	e0f6      	b.n	80077f6 <process_control_request+0x5ae>

        switch(p_request->bRequest) {
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	785b      	ldrb	r3, [r3, #1]
 800760c:	3b0a      	subs	r3, #10
 800760e:	2b01      	cmp	r3, #1
 8007610:	d816      	bhi.n	8007640 <process_control_request+0x3f8>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8007612:	2000      	movs	r0, #0
 8007614:	f001 f89a 	bl	800874c <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	785b      	ldrb	r3, [r3, #1]
 800761c:	2b0a      	cmp	r3, #10
 800761e:	d109      	bne.n	8007634 <process_control_request+0x3ec>
              uint8_t alternate = 0;
 8007620:	2300      	movs	r3, #0
 8007622:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8007624:	f107 020f 	add.w	r2, r7, #15
 8007628:	79f8      	ldrb	r0, [r7, #7]
 800762a:	2301      	movs	r3, #1
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	f001 f811 	bl	8008654 <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 8007632:	e007      	b.n	8007644 <process_control_request+0x3fc>
              tud_control_status(rhport, p_request);
 8007634:	79fb      	ldrb	r3, [r7, #7]
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	4618      	mov	r0, r3
 800763a:	f000 ff99 	bl	8008570 <tud_control_status>
          break;
 800763e:	e001      	b.n	8007644 <process_control_request+0x3fc>

          default: return false;
 8007640:	2300      	movs	r3, #0
 8007642:	e0d8      	b.n	80077f6 <process_control_request+0x5ae>
        }
      }
      break;
 8007644:	e0d5      	b.n	80077f2 <process_control_request+0x5aa>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	889b      	ldrh	r3, [r3, #4]
 800764a:	b29b      	uxth	r3, r3
 800764c:	83bb      	strh	r3, [r7, #28]
 800764e:	8bbb      	ldrh	r3, [r7, #28]
 8007650:	b2db      	uxtb	r3, r3
 8007652:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007656:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800765a:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800765c:	7fbb      	ldrb	r3, [r7, #30]
 800765e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007662:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8007664:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8007668:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800766c:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800766e:	7ffb      	ldrb	r3, [r7, #31]
 8007670:	09db      	lsrs	r3, r3, #7
 8007672:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8007674:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8007678:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800767c:	2b05      	cmp	r3, #5
 800767e:	d90a      	bls.n	8007696 <process_control_request+0x44e>
 8007680:	4b3b      	ldr	r3, [pc, #236]	@ (8007770 <process_control_request+0x528>)
 8007682:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007684:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	2b00      	cmp	r3, #0
 800768e:	d000      	beq.n	8007692 <process_control_request+0x44a>
 8007690:	be00      	bkpt	0x0000
 8007692:	2300      	movs	r3, #0
 8007694:	e0af      	b.n	80077f6 <process_control_request+0x5ae>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8007696:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 800769a:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 800769e:	4933      	ldr	r1, [pc, #204]	@ (800776c <process_control_request+0x524>)
 80076a0:	0052      	lsls	r2, r2, #1
 80076a2:	440a      	add	r2, r1
 80076a4:	4413      	add	r3, r2
 80076a6:	3314      	adds	r3, #20
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 80076ac:	2300      	movs	r3, #0
 80076ae:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 80076b0:	4b30      	ldr	r3, [pc, #192]	@ (8007774 <process_control_request+0x52c>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	7efa      	ldrb	r2, [r7, #27]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d206      	bcs.n	80076c8 <process_control_request+0x480>
    driver = &_app_driver[drvid];
 80076ba:	4b2f      	ldr	r3, [pc, #188]	@ (8007778 <process_control_request+0x530>)
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	7efb      	ldrb	r3, [r7, #27]
 80076c0:	015b      	lsls	r3, r3, #5
 80076c2:	4413      	add	r3, r2
 80076c4:	617b      	str	r3, [r7, #20]
 80076c6:	e00d      	b.n	80076e4 <process_control_request+0x49c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80076c8:	4b2a      	ldr	r3, [pc, #168]	@ (8007774 <process_control_request+0x52c>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	1c5a      	adds	r2, r3, #1
 80076ce:	7efb      	ldrb	r3, [r7, #27]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	db07      	blt.n	80076e4 <process_control_request+0x49c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80076d4:	7efb      	ldrb	r3, [r7, #27]
 80076d6:	4a27      	ldr	r2, [pc, #156]	@ (8007774 <process_control_request+0x52c>)
 80076d8:	7812      	ldrb	r2, [r2, #0]
 80076da:	1a9b      	subs	r3, r3, r2
 80076dc:	015b      	lsls	r3, r3, #5
 80076de:	4a27      	ldr	r2, [pc, #156]	@ (800777c <process_control_request+0x534>)
 80076e0:	4413      	add	r3, r2
 80076e2:	617b      	str	r3, [r7, #20]
  return driver;
 80076e4:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80076e6:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00c      	beq.n	8007710 <process_control_request+0x4c8>
        // Forward class request to its driver
        TU_VERIFY(driver);
 80076f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <process_control_request+0x4b8>
 80076fc:	2300      	movs	r3, #0
 80076fe:	e07a      	b.n	80077f6 <process_control_request+0x5ae>
        return invoke_class_control(rhport, driver, p_request);
 8007700:	79fb      	ldrb	r3, [r7, #7]
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007706:	4618      	mov	r0, r3
 8007708:	f7ff fd86 	bl	8007218 <invoke_class_control>
 800770c:	4603      	mov	r3, r0
 800770e:	e072      	b.n	80077f6 <process_control_request+0x5ae>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	785b      	ldrb	r3, [r3, #1]
 8007714:	2b03      	cmp	r3, #3
 8007716:	d017      	beq.n	8007748 <process_control_request+0x500>
 8007718:	2b03      	cmp	r3, #3
 800771a:	dc52      	bgt.n	80077c2 <process_control_request+0x57a>
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <process_control_request+0x4de>
 8007720:	2b01      	cmp	r3, #1
 8007722:	d011      	beq.n	8007748 <process_control_request+0x500>
 8007724:	e04d      	b.n	80077c2 <process_control_request+0x57a>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8007726:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800772a:	79fb      	ldrb	r3, [r7, #7]
 800772c:	4611      	mov	r1, r2
 800772e:	4618      	mov	r0, r3
 8007730:	f000 fec8 	bl	80084c4 <usbd_edpt_stalled>
 8007734:	4603      	mov	r3, r0
 8007736:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 8007738:	f107 020c 	add.w	r2, r7, #12
 800773c:	79f8      	ldrb	r0, [r7, #7]
 800773e:	2302      	movs	r3, #2
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	f000 ff87 	bl	8008654 <tud_control_xfer>
          }
          break;
 8007746:	e048      	b.n	80077da <process_control_request+0x592>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	885b      	ldrh	r3, [r3, #2]
 800774c:	b29b      	uxth	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d11d      	bne.n	800778e <process_control_request+0x546>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	785b      	ldrb	r3, [r3, #1]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d112      	bne.n	8007780 <process_control_request+0x538>
                usbd_edpt_clear_stall(rhport, ep_addr);
 800775a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800775e:	79fb      	ldrb	r3, [r7, #7]
 8007760:	4611      	mov	r1, r2
 8007762:	4618      	mov	r0, r3
 8007764:	f000 fe70 	bl	8008448 <usbd_edpt_clear_stall>
 8007768:	e011      	b.n	800778e <process_control_request+0x546>
 800776a:	bf00      	nop
 800776c:	20000b60 	.word	0x20000b60
 8007770:	e000edf0 	.word	0xe000edf0
 8007774:	20000b94 	.word	0x20000b94
 8007778:	20000b90 	.word	0x20000b90
 800777c:	0800c82c 	.word	0x0800c82c
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 8007780:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8007784:	79fb      	ldrb	r3, [r7, #7]
 8007786:	4611      	mov	r1, r2
 8007788:	4618      	mov	r0, r3
 800778a:	f000 fe1f 	bl	80083cc <usbd_edpt_stall>
              }
            }

            if (driver) {
 800778e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007790:	2b00      	cmp	r3, #0
 8007792:	d021      	beq.n	80077d8 <process_control_request+0x590>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8007794:	79fb      	ldrb	r3, [r7, #7]
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800779a:	4618      	mov	r0, r3
 800779c:	f7ff fd3c 	bl	8007218 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 80077a0:	2000      	movs	r0, #0
 80077a2:	f000 ffd3 	bl	800874c <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 80077a6:	4b16      	ldr	r3, [pc, #88]	@ (8007800 <process_control_request+0x5b8>)
 80077a8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80077ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d110      	bne.n	80077d8 <process_control_request+0x590>
 80077b6:	79fb      	ldrb	r3, [r7, #7]
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 fed8 	bl	8008570 <tud_control_status>
            }
          }
          break;
 80077c0:	e00a      	b.n	80077d8 <process_control_request+0x590>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 80077c2:	4b10      	ldr	r3, [pc, #64]	@ (8007804 <process_control_request+0x5bc>)
 80077c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d000      	beq.n	80077d4 <process_control_request+0x58c>
 80077d2:	be00      	bkpt	0x0000
            return false;
 80077d4:	2300      	movs	r3, #0
 80077d6:	e00e      	b.n	80077f6 <process_control_request+0x5ae>
          break;
 80077d8:	bf00      	nop
        }
      }
    }
    break;
 80077da:	e00b      	b.n	80077f4 <process_control_request+0x5ac>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 80077dc:	4b09      	ldr	r3, [pc, #36]	@ (8007804 <process_control_request+0x5bc>)
 80077de:	637b      	str	r3, [r7, #52]	@ 0x34
 80077e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d000      	beq.n	80077ee <process_control_request+0x5a6>
 80077ec:	be00      	bkpt	0x0000
      return false;
 80077ee:	2300      	movs	r3, #0
 80077f0:	e001      	b.n	80077f6 <process_control_request+0x5ae>
      break;
 80077f2:	bf00      	nop
  }

  return true;
 80077f4:	2301      	movs	r3, #1
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3768      	adds	r7, #104	@ 0x68
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	20000b60 	.word	0x20000b60
 8007804:	e000edf0 	.word	0xe000edf0

08007808 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b096      	sub	sp, #88	@ 0x58
 800780c:	af00      	add	r7, sp, #0
 800780e:	4603      	mov	r3, r0
 8007810:	460a      	mov	r2, r1
 8007812:	71fb      	strb	r3, [r7, #7]
 8007814:	4613      	mov	r3, r2
 8007816:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8007818:	79bb      	ldrb	r3, [r7, #6]
 800781a:	3b01      	subs	r3, #1
 800781c:	b2db      	uxtb	r3, r3
 800781e:	4618      	mov	r0, r3
 8007820:	f7fa fdf0 	bl	8002404 <tud_descriptor_configuration_cb>
 8007824:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8007826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007828:	2b00      	cmp	r3, #0
 800782a:	d003      	beq.n	8007834 <process_set_config+0x2c>
 800782c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800782e:	785b      	ldrb	r3, [r3, #1]
 8007830:	2b02      	cmp	r3, #2
 8007832:	d00a      	beq.n	800784a <process_set_config+0x42>
 8007834:	4b87      	ldr	r3, [pc, #540]	@ (8007a54 <process_set_config+0x24c>)
 8007836:	623b      	str	r3, [r7, #32]
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b00      	cmp	r3, #0
 8007842:	d000      	beq.n	8007846 <process_set_config+0x3e>
 8007844:	be00      	bkpt	0x0000
 8007846:	2300      	movs	r3, #0
 8007848:	e100      	b.n	8007a4c <process_set_config+0x244>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 800784a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800784c:	79db      	ldrb	r3, [r3, #7]
 800784e:	115b      	asrs	r3, r3, #5
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	b2d9      	uxtb	r1, r3
 8007856:	4a80      	ldr	r2, [pc, #512]	@ (8007a58 <process_set_config+0x250>)
 8007858:	7813      	ldrb	r3, [r2, #0]
 800785a:	f361 1304 	bfi	r3, r1, #4, #1
 800785e:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8007860:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007862:	79db      	ldrb	r3, [r3, #7]
 8007864:	119b      	asrs	r3, r3, #6
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	b2d9      	uxtb	r1, r3
 800786c:	4a7a      	ldr	r2, [pc, #488]	@ (8007a58 <process_set_config+0x250>)
 800786e:	7813      	ldrb	r3, [r2, #0]
 8007870:	f361 1345 	bfi	r3, r1, #5, #1
 8007874:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8007876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007878:	3309      	adds	r3, #9
 800787a:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 800787c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800787e:	885b      	ldrh	r3, [r3, #2]
 8007880:	b29b      	uxth	r3, r3
 8007882:	461a      	mov	r2, r3
 8007884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007886:	4413      	add	r3, r2
 8007888:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 800788a:	e0d9      	b.n	8007a40 <process_set_config+0x238>
  {
    uint8_t assoc_itf_count = 1;
 800788c:	2301      	movs	r3, #1
 800788e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8007892:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007894:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	3301      	adds	r3, #1
 800789a:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 800789c:	2b0b      	cmp	r3, #11
 800789e:	d10f      	bne.n	80078c0 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 80078a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078a2:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 80078a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078a6:	78db      	ldrb	r3, [r3, #3]
 80078a8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80078ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078ae:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 80078be:	657b      	str	r3, [r7, #84]	@ 0x54
 80078c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078c2:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	3301      	adds	r3, #1
 80078c8:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d00a      	beq.n	80078e4 <process_set_config+0xdc>
 80078ce:	4b61      	ldr	r3, [pc, #388]	@ (8007a54 <process_set_config+0x24c>)
 80078d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80078d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d000      	beq.n	80078e0 <process_set_config+0xd8>
 80078de:	be00      	bkpt	0x0000
 80078e0:	2300      	movs	r3, #0
 80078e2:	e0b3      	b.n	8007a4c <process_set_config+0x244>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 80078e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078e6:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 80078e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80078f0:	2300      	movs	r3, #0
 80078f2:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 80078f6:	e089      	b.n	8007a0c <process_set_config+0x204>
 80078f8:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80078fc:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 80078fe:	2300      	movs	r3, #0
 8007900:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8007902:	4b56      	ldr	r3, [pc, #344]	@ (8007a5c <process_set_config+0x254>)
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	7bfa      	ldrb	r2, [r7, #15]
 8007908:	429a      	cmp	r2, r3
 800790a:	d206      	bcs.n	800791a <process_set_config+0x112>
    driver = &_app_driver[drvid];
 800790c:	4b54      	ldr	r3, [pc, #336]	@ (8007a60 <process_set_config+0x258>)
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	7bfb      	ldrb	r3, [r7, #15]
 8007912:	015b      	lsls	r3, r3, #5
 8007914:	4413      	add	r3, r2
 8007916:	60bb      	str	r3, [r7, #8]
 8007918:	e00d      	b.n	8007936 <process_set_config+0x12e>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800791a:	4b50      	ldr	r3, [pc, #320]	@ (8007a5c <process_set_config+0x254>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	1c5a      	adds	r2, r3, #1
 8007920:	7bfb      	ldrb	r3, [r7, #15]
 8007922:	429a      	cmp	r2, r3
 8007924:	db07      	blt.n	8007936 <process_set_config+0x12e>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007926:	7bfb      	ldrb	r3, [r7, #15]
 8007928:	4a4c      	ldr	r2, [pc, #304]	@ (8007a5c <process_set_config+0x254>)
 800792a:	7812      	ldrb	r2, [r2, #0]
 800792c:	1a9b      	subs	r3, r3, r2
 800792e:	015b      	lsls	r3, r3, #5
 8007930:	4a4c      	ldr	r2, [pc, #304]	@ (8007a64 <process_set_config+0x25c>)
 8007932:	4413      	add	r3, r2
 8007934:	60bb      	str	r3, [r7, #8]
  return driver;
 8007936:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8007938:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 800793a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10a      	bne.n	8007956 <process_set_config+0x14e>
 8007940:	4b44      	ldr	r3, [pc, #272]	@ (8007a54 <process_set_config+0x24c>)
 8007942:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0301 	and.w	r3, r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	d000      	beq.n	8007952 <process_set_config+0x14a>
 8007950:	be00      	bkpt	0x0000
 8007952:	2300      	movs	r3, #0
 8007954:	e07a      	b.n	8007a4c <process_set_config+0x244>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8007956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800795c:	79f8      	ldrb	r0, [r7, #7]
 800795e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007960:	4798      	blx	r3
 8007962:	4603      	mov	r3, r0
 8007964:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8007966:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007968:	2b08      	cmp	r3, #8
 800796a:	d94a      	bls.n	8007a02 <process_set_config+0x1fa>
 800796c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800796e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007970:	429a      	cmp	r2, r3
 8007972:	d846      	bhi.n	8007a02 <process_set_config+0x1fa>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 8007974:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8007978:	2b01      	cmp	r3, #1
 800797a:	d107      	bne.n	800798c <process_set_config+0x184>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 800797c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	4a39      	ldr	r2, [pc, #228]	@ (8007a68 <process_set_config+0x260>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d102      	bne.n	800798c <process_set_config+0x184>
 8007986:	2302      	movs	r3, #2
 8007988:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 800798c:	2300      	movs	r3, #0
 800798e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8007992:	e024      	b.n	80079de <process_set_config+0x1d6>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8007994:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007996:	789a      	ldrb	r2, [r3, #2]
 8007998:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800799c:	4413      	add	r3, r2
 800799e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 80079a2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80079a6:	4a2c      	ldr	r2, [pc, #176]	@ (8007a58 <process_set_config+0x250>)
 80079a8:	4413      	add	r3, r2
 80079aa:	791b      	ldrb	r3, [r3, #4]
 80079ac:	2bff      	cmp	r3, #255	@ 0xff
 80079ae:	d00a      	beq.n	80079c6 <process_set_config+0x1be>
 80079b0:	4b28      	ldr	r3, [pc, #160]	@ (8007a54 <process_set_config+0x24c>)
 80079b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80079b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d000      	beq.n	80079c2 <process_set_config+0x1ba>
 80079c0:	be00      	bkpt	0x0000
 80079c2:	2300      	movs	r3, #0
 80079c4:	e042      	b.n	8007a4c <process_set_config+0x244>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 80079c6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80079ca:	4a23      	ldr	r2, [pc, #140]	@ (8007a58 <process_set_config+0x250>)
 80079cc:	4413      	add	r3, r2
 80079ce:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 80079d2:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80079d4:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80079d8:	3301      	adds	r3, #1
 80079da:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 80079de:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 80079e2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d3d4      	bcc.n	8007994 <process_set_config+0x18c>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 80079ea:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80079ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80079f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079f2:	481e      	ldr	r0, [pc, #120]	@ (8007a6c <process_set_config+0x264>)
 80079f4:	f003 f81c 	bl	800aa30 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 80079f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80079fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80079fc:	4413      	add	r3, r2
 80079fe:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 8007a00:	e00c      	b.n	8007a1c <process_set_config+0x214>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8007a02:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007a06:	3301      	adds	r3, #1
 8007a08:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8007a0c:	4b13      	ldr	r3, [pc, #76]	@ (8007a5c <process_set_config+0x254>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	1c5a      	adds	r2, r3, #1
 8007a12:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007a16:	429a      	cmp	r2, r3
 8007a18:	f6bf af6e 	bge.w	80078f8 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8007a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8007a5c <process_set_config+0x254>)
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	1c5a      	adds	r2, r3, #1
 8007a22:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007a26:	429a      	cmp	r2, r3
 8007a28:	da0a      	bge.n	8007a40 <process_set_config+0x238>
 8007a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8007a54 <process_set_config+0x24c>)
 8007a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d000      	beq.n	8007a3c <process_set_config+0x234>
 8007a3a:	be00      	bkpt	0x0000
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	e005      	b.n	8007a4c <process_set_config+0x244>
  while( p_desc < desc_end )
 8007a40:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007a42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a44:	429a      	cmp	r2, r3
 8007a46:	f4ff af21 	bcc.w	800788c <process_set_config+0x84>
  }

  return true;
 8007a4a:	2301      	movs	r3, #1
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3758      	adds	r7, #88	@ 0x58
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	e000edf0 	.word	0xe000edf0
 8007a58:	20000b60 	.word	0x20000b60
 8007a5c:	20000b94 	.word	0x20000b94
 8007a60:	20000b90 	.word	0x20000b90
 8007a64:	0800c82c 	.word	0x0800c82c
 8007a68:	08004f9d 	.word	0x08004f9d
 8007a6c:	20000b74 	.word	0x20000b74

08007a70 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b094      	sub	sp, #80	@ 0x50
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	4603      	mov	r3, r0
 8007a78:	6039      	str	r1, [r7, #0]
 8007a7a:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	885b      	ldrh	r3, [r3, #2]
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8007a84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a86:	0a1b      	lsrs	r3, r3, #8
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	885b      	ldrh	r3, [r3, #2]
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8007a98:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 8007aa0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	2b0e      	cmp	r3, #14
 8007aa8:	f200 80b4 	bhi.w	8007c14 <process_get_descriptor+0x1a4>
 8007aac:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab4 <process_get_descriptor+0x44>)
 8007aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab2:	bf00      	nop
 8007ab4:	08007af1 	.word	0x08007af1
 8007ab8:	08007b55 	.word	0x08007b55
 8007abc:	08007bbb 	.word	0x08007bbb
 8007ac0:	08007c15 	.word	0x08007c15
 8007ac4:	08007c15 	.word	0x08007c15
 8007ac8:	08007bef 	.word	0x08007bef
 8007acc:	08007b55 	.word	0x08007b55
 8007ad0:	08007c15 	.word	0x08007c15
 8007ad4:	08007c15 	.word	0x08007c15
 8007ad8:	08007c15 	.word	0x08007c15
 8007adc:	08007c15 	.word	0x08007c15
 8007ae0:	08007c15 	.word	0x08007c15
 8007ae4:	08007c15 	.word	0x08007c15
 8007ae8:	08007c15 	.word	0x08007c15
 8007aec:	08007b23 	.word	0x08007b23
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8007af0:	f7fa fc70 	bl	80023d4 <tud_descriptor_device_cb>
 8007af4:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 8007af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10a      	bne.n	8007b12 <process_get_descriptor+0xa2>
 8007afc:	4b48      	ldr	r3, [pc, #288]	@ (8007c20 <process_get_descriptor+0x1b0>)
 8007afe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d000      	beq.n	8007b0e <process_get_descriptor+0x9e>
 8007b0c:	be00      	bkpt	0x0000
 8007b0e:	2300      	movs	r3, #0
 8007b10:	e081      	b.n	8007c16 <process_get_descriptor+0x1a6>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8007b12:	79f8      	ldrb	r0, [r7, #7]
 8007b14:	2312      	movs	r3, #18
 8007b16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	f000 fd9b 	bl	8008654 <tud_control_xfer>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	e079      	b.n	8007c16 <process_get_descriptor+0x1a6>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8007b22:	f7fe ffe5 	bl	8006af0 <tud_descriptor_bos_cb>
 8007b26:	4603      	mov	r3, r0
 8007b28:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 8007b2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <process_get_descriptor+0xc4>
 8007b30:	2300      	movs	r3, #0
 8007b32:	e070      	b.n	8007c16 <process_get_descriptor+0x1a6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8007b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b36:	3302      	adds	r3, #2
 8007b38:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 8007b3a:	6a3b      	ldr	r3, [r7, #32]
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8007b42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007b48:	79f8      	ldrb	r0, [r7, #7]
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	f000 fd82 	bl	8008654 <tud_control_xfer>
 8007b50:	4603      	mov	r3, r0
 8007b52:	e060      	b.n	8007c16 <process_get_descriptor+0x1a6>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 8007b54:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d114      	bne.n	8007b86 <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8007b5c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fa fc4f 	bl	8002404 <tud_descriptor_configuration_cb>
 8007b66:	4603      	mov	r3, r0
 8007b68:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 8007b6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d116      	bne.n	8007b9e <process_get_descriptor+0x12e>
 8007b70:	4b2b      	ldr	r3, [pc, #172]	@ (8007c20 <process_get_descriptor+0x1b0>)
 8007b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0301 	and.w	r3, r3, #1
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d000      	beq.n	8007b82 <process_get_descriptor+0x112>
 8007b80:	be00      	bkpt	0x0000
 8007b82:	2300      	movs	r3, #0
 8007b84:	e047      	b.n	8007c16 <process_get_descriptor+0x1a6>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8007b86:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fe ffc0 	bl	8006b10 <tud_descriptor_other_speed_configuration_cb>
 8007b90:	4603      	mov	r3, r0
 8007b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 8007b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <process_get_descriptor+0x12e>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	e03b      	b.n	8007c16 <process_get_descriptor+0x1a6>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8007b9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ba0:	3302      	adds	r3, #2
 8007ba2:	61fb      	str	r3, [r7, #28]
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	881b      	ldrh	r3, [r3, #0]
 8007ba8:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8007baa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007bac:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007bae:	79f8      	ldrb	r0, [r7, #7]
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	f000 fd4f 	bl	8008654 <tud_control_xfer>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	e02d      	b.n	8007c16 <process_get_descriptor+0x1a6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	889b      	ldrh	r3, [r3, #4]
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007bc4:	4611      	mov	r1, r2
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fa fc2a 	bl	8002420 <tud_descriptor_string_cb>
 8007bcc:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 8007bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d101      	bne.n	8007bd8 <process_get_descriptor+0x168>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	e01e      	b.n	8007c16 <process_get_descriptor+0x1a6>
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bda:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8007be0:	79f8      	ldrb	r0, [r7, #7]
 8007be2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	f000 fd35 	bl	8008654 <tud_control_xfer>
 8007bea:	4603      	mov	r3, r0
 8007bec:	e013      	b.n	8007c16 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8007bee:	f7fe ff87 	bl	8006b00 <tud_descriptor_device_qualifier_cb>
 8007bf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 8007bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <process_get_descriptor+0x18e>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	e00b      	b.n	8007c16 <process_get_descriptor+0x1a6>
 8007bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c00:	617b      	str	r3, [r7, #20]
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8007c06:	79f8      	ldrb	r0, [r7, #7]
 8007c08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	f000 fd22 	bl	8008654 <tud_control_xfer>
 8007c10:	4603      	mov	r3, r0
 8007c12:	e000      	b.n	8007c16 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    default: return false;
 8007c14:	2300      	movs	r3, #0
  }
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3750      	adds	r7, #80	@ 0x50
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	e000edf0 	.word	0xe000edf0

08007c24 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b0a0      	sub	sp, #128	@ 0x80
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8007c30:	2300      	movs	r3, #0
 8007c32:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	785b      	ldrb	r3, [r3, #1]
 8007c3a:	3b02      	subs	r3, #2
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	f200 8175 	bhi.w	8007f2c <dcd_event_handler+0x308>
 8007c42:	a201      	add	r2, pc, #4	@ (adr r2, 8007c48 <dcd_event_handler+0x24>)
 8007c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c48:	08007c5d 	.word	0x08007c5d
 8007c4c:	08007ccd 	.word	0x08007ccd
 8007c50:	08007c89 	.word	0x08007c89
 8007c54:	08007cab 	.word	0x08007cab
 8007c58:	08007ef9 	.word	0x08007ef9
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8007c5c:	4aac      	ldr	r2, [pc, #688]	@ (8007f10 <dcd_event_handler+0x2ec>)
 8007c5e:	7813      	ldrb	r3, [r2, #0]
 8007c60:	f023 0301 	bic.w	r3, r3, #1
 8007c64:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8007c66:	4aaa      	ldr	r2, [pc, #680]	@ (8007f10 <dcd_event_handler+0x2ec>)
 8007c68:	7813      	ldrb	r3, [r2, #0]
 8007c6a:	f023 0302 	bic.w	r3, r3, #2
 8007c6e:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8007c70:	4ba7      	ldr	r3, [pc, #668]	@ (8007f10 <dcd_event_handler+0x2ec>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8007c76:	4aa6      	ldr	r2, [pc, #664]	@ (8007f10 <dcd_event_handler+0x2ec>)
 8007c78:	7813      	ldrb	r3, [r2, #0]
 8007c7a:	f023 0304 	bic.w	r3, r3, #4
 8007c7e:	7013      	strb	r3, [r2, #0]
      send = true;
 8007c80:	2301      	movs	r3, #1
 8007c82:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8007c86:	e15a      	b.n	8007f3e <dcd_event_handler+0x31a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8007c88:	4ba1      	ldr	r3, [pc, #644]	@ (8007f10 <dcd_event_handler+0x2ec>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f000 814e 	beq.w	8007f34 <dcd_event_handler+0x310>
        _usbd_dev.suspended = 1;
 8007c98:	4a9d      	ldr	r2, [pc, #628]	@ (8007f10 <dcd_event_handler+0x2ec>)
 8007c9a:	7813      	ldrb	r3, [r2, #0]
 8007c9c:	f043 0304 	orr.w	r3, r3, #4
 8007ca0:	7013      	strb	r3, [r2, #0]
        send = true;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8007ca8:	e144      	b.n	8007f34 <dcd_event_handler+0x310>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8007caa:	4b99      	ldr	r3, [pc, #612]	@ (8007f10 <dcd_event_handler+0x2ec>)
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 813f 	beq.w	8007f38 <dcd_event_handler+0x314>
        _usbd_dev.suspended = 0;
 8007cba:	4a95      	ldr	r2, [pc, #596]	@ (8007f10 <dcd_event_handler+0x2ec>)
 8007cbc:	7813      	ldrb	r3, [r2, #0]
 8007cbe:	f023 0304 	bic.w	r3, r3, #4
 8007cc2:	7013      	strb	r3, [r2, #0]
        send = true;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8007cca:	e135      	b.n	8007f38 <dcd_event_handler+0x314>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8007ccc:	2300      	movs	r3, #0
 8007cce:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8007cd2:	e039      	b.n	8007d48 <dcd_event_handler+0x124>
 8007cd4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8007cd8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 8007ce0:	4b8c      	ldr	r3, [pc, #560]	@ (8007f14 <dcd_event_handler+0x2f0>)
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d207      	bcs.n	8007cfc <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 8007cec:	4b8a      	ldr	r3, [pc, #552]	@ (8007f18 <dcd_event_handler+0x2f4>)
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007cf4:	015b      	lsls	r3, r3, #5
 8007cf6:	4413      	add	r3, r2
 8007cf8:	673b      	str	r3, [r7, #112]	@ 0x70
 8007cfa:	e00f      	b.n	8007d1c <dcd_event_handler+0xf8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007cfc:	4b85      	ldr	r3, [pc, #532]	@ (8007f14 <dcd_event_handler+0x2f0>)
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	1c5a      	adds	r2, r3, #1
 8007d02:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007d06:	429a      	cmp	r2, r3
 8007d08:	db08      	blt.n	8007d1c <dcd_event_handler+0xf8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007d0a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007d0e:	4a81      	ldr	r2, [pc, #516]	@ (8007f14 <dcd_event_handler+0x2f0>)
 8007d10:	7812      	ldrb	r2, [r2, #0]
 8007d12:	1a9b      	subs	r3, r3, r2
 8007d14:	015b      	lsls	r3, r3, #5
 8007d16:	4a81      	ldr	r2, [pc, #516]	@ (8007f1c <dcd_event_handler+0x2f8>)
 8007d18:	4413      	add	r3, r2
 8007d1a:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 8007d1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 8007d1e:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 8007d20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00b      	beq.n	8007d3e <dcd_event_handler+0x11a>
 8007d26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d007      	beq.n	8007d3e <dcd_event_handler+0x11a>
          driver->sof(event->rhport, event->sof.frame_count);
 8007d2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	7810      	ldrb	r0, [r2, #0]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	6852      	ldr	r2, [r2, #4]
 8007d3a:	4611      	mov	r1, r2
 8007d3c:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8007d3e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8007d42:	3301      	adds	r3, #1
 8007d44:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8007d48:	4b72      	ldr	r3, [pc, #456]	@ (8007f14 <dcd_event_handler+0x2f0>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8007d52:	429a      	cmp	r2, r3
 8007d54:	dabe      	bge.n	8007cd4 <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8007d56:	4b6e      	ldr	r3, [pc, #440]	@ (8007f10 <dcd_event_handler+0x2ec>)
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d05a      	beq.n	8007e1a <dcd_event_handler+0x1f6>
        _usbd_dev.suspended = 0;
 8007d64:	4a6a      	ldr	r2, [pc, #424]	@ (8007f10 <dcd_event_handler+0x2ec>)
 8007d66:	7813      	ldrb	r3, [r2, #0]
 8007d68:	f023 0304 	bic.w	r3, r3, #4
 8007d6c:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8007d6e:	f107 0314 	add.w	r3, r7, #20
 8007d72:	2200      	movs	r2, #0
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	605a      	str	r2, [r3, #4]
 8007d78:	609a      	str	r2, [r3, #8]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	753b      	strb	r3, [r7, #20]
 8007d80:	2305      	movs	r3, #5
 8007d82:	757b      	strb	r3, [r7, #21]
 8007d84:	f107 0314 	add.w	r3, r7, #20
 8007d88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d8a:	78fb      	ldrb	r3, [r7, #3]
 8007d8c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8007d90:	4b63      	ldr	r3, [pc, #396]	@ (8007f20 <dcd_event_handler+0x2fc>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d98:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d9a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8007d9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8007da2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007da6:	f083 0301 	eor.w	r3, r3, #1
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d003      	beq.n	8007db8 <dcd_event_handler+0x194>
    qhdl->interrupt_set(false);
 8007db0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2000      	movs	r0, #0
 8007db6:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 8007db8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007dba:	3304      	adds	r3, #4
 8007dbc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fe fde9 	bl	8006996 <tu_fifo_write>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 8007dca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007dce:	f083 0301 	eor.w	r3, r3, #1
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d003      	beq.n	8007de0 <dcd_event_handler+0x1bc>
    qhdl->interrupt_set(true);
 8007dd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2001      	movs	r0, #1
 8007dde:	4798      	blx	r3
  }

  return success;
 8007de0:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8007de4:	f083 0301 	eor.w	r3, r3, #1
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d009      	beq.n	8007e02 <dcd_event_handler+0x1de>
 8007dee:	4b4d      	ldr	r3, [pc, #308]	@ (8007f24 <dcd_event_handler+0x300>)
 8007df0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007df2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00c      	beq.n	8007e18 <dcd_event_handler+0x1f4>
 8007dfe:	be00      	bkpt	0x0000
 8007e00:	e00a      	b.n	8007e18 <dcd_event_handler+0x1f4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8007e02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e04:	7818      	ldrb	r0, [r3, #0]
 8007e06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e08:	785b      	ldrb	r3, [r3, #1]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8007e10:	461a      	mov	r2, r3
 8007e12:	f7fe fe55 	bl	8006ac0 <tud_event_hook_cb>
  return true;
 8007e16:	e000      	b.n	8007e1a <dcd_event_handler+0x1f6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8007e18:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8007e1a:	4b3d      	ldr	r3, [pc, #244]	@ (8007f10 <dcd_event_handler+0x2ec>)
 8007e1c:	78db      	ldrb	r3, [r3, #3]
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e22:	2300      	movs	r3, #0
 8007e24:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8007e28:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8007e2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	bf14      	ite	ne
 8007e3a:	2301      	movne	r3, #1
 8007e3c:	2300      	moveq	r3, #0
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d07b      	beq.n	8007f3c <dcd_event_handler+0x318>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 8007e44:	f107 0308 	add.w	r3, r7, #8
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]
 8007e4c:	605a      	str	r2, [r3, #4]
 8007e4e:	609a      	str	r2, [r3, #8]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	723b      	strb	r3, [r7, #8]
 8007e56:	2303      	movs	r3, #3
 8007e58:	727b      	strb	r3, [r7, #9]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	60fb      	str	r3, [r7, #12]
 8007e60:	f107 0308 	add.w	r3, r7, #8
 8007e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e66:	78fb      	ldrb	r3, [r7, #3]
 8007e68:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8007e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8007f20 <dcd_event_handler+0x2fc>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e74:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e76:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007e7a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 8007e7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007e82:	f083 0301 	eor.w	r3, r3, #1
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d003      	beq.n	8007e94 <dcd_event_handler+0x270>
    qhdl->interrupt_set(false);
 8007e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2000      	movs	r0, #0
 8007e92:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8007e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e96:	3304      	adds	r3, #4
 8007e98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fe fd7b 	bl	8006996 <tu_fifo_write>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 8007ea6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007eaa:	f083 0301 	eor.w	r3, r3, #1
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d003      	beq.n	8007ebc <dcd_event_handler+0x298>
    qhdl->interrupt_set(true);
 8007eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2001      	movs	r0, #1
 8007eba:	4798      	blx	r3
  return success;
 8007ebc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007ec0:	f083 0301 	eor.w	r3, r3, #1
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d009      	beq.n	8007ede <dcd_event_handler+0x2ba>
 8007eca:	4b16      	ldr	r3, [pc, #88]	@ (8007f24 <dcd_event_handler+0x300>)
 8007ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00c      	beq.n	8007ef4 <dcd_event_handler+0x2d0>
 8007eda:	be00      	bkpt	0x0000
 8007edc:	e00a      	b.n	8007ef4 <dcd_event_handler+0x2d0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8007ede:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ee0:	7818      	ldrb	r0, [r3, #0]
 8007ee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ee4:	785b      	ldrb	r3, [r3, #1]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007eec:	461a      	mov	r2, r3
 8007eee:	f7fe fde7 	bl	8006ac0 <tud_event_hook_cb>
  return true;
 8007ef2:	e000      	b.n	8007ef6 <dcd_event_handler+0x2d2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8007ef4:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 8007ef6:	e021      	b.n	8007f3c <dcd_event_handler+0x318>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 8007ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8007f28 <dcd_event_handler+0x304>)
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	3301      	adds	r3, #1
 8007f00:	b2da      	uxtb	r2, r3
 8007f02:	4b09      	ldr	r3, [pc, #36]	@ (8007f28 <dcd_event_handler+0x304>)
 8007f04:	701a      	strb	r2, [r3, #0]
      send = true;
 8007f06:	2301      	movs	r3, #1
 8007f08:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8007f0c:	e017      	b.n	8007f3e <dcd_event_handler+0x31a>
 8007f0e:	bf00      	nop
 8007f10:	20000b60 	.word	0x20000b60
 8007f14:	20000b94 	.word	0x20000b94
 8007f18:	20000b90 	.word	0x20000b90
 8007f1c:	0800c82c 	.word	0x0800c82c
 8007f20:	20000c58 	.word	0x20000c58
 8007f24:	e000edf0 	.word	0xe000edf0
 8007f28:	20000b8c 	.word	0x20000b8c

    default:
      send = true;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8007f32:	e004      	b.n	8007f3e <dcd_event_handler+0x31a>
      break;
 8007f34:	bf00      	nop
 8007f36:	e002      	b.n	8007f3e <dcd_event_handler+0x31a>
      break;
 8007f38:	bf00      	nop
 8007f3a:	e000      	b.n	8007f3e <dcd_event_handler+0x31a>
      break;
 8007f3c:	bf00      	nop
  }

  if (send) {
 8007f3e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d049      	beq.n	8007fda <dcd_event_handler+0x3b6>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f4a:	78fb      	ldrb	r3, [r7, #3]
 8007f4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8007f50:	4b24      	ldr	r3, [pc, #144]	@ (8007fe4 <dcd_event_handler+0x3c0>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f5a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007f5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 8007f62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f66:	f083 0301 	eor.w	r3, r3, #1
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d003      	beq.n	8007f78 <dcd_event_handler+0x354>
    qhdl->interrupt_set(false);
 8007f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2000      	movs	r0, #0
 8007f76:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8007f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fe fd09 	bl	8006996 <tu_fifo_write>
 8007f84:	4603      	mov	r3, r0
 8007f86:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 8007f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f8e:	f083 0301 	eor.w	r3, r3, #1
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d003      	beq.n	8007fa0 <dcd_event_handler+0x37c>
    qhdl->interrupt_set(true);
 8007f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2001      	movs	r0, #1
 8007f9e:	4798      	blx	r3
  return success;
 8007fa0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007fa4:	f083 0301 	eor.w	r3, r3, #1
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d009      	beq.n	8007fc2 <dcd_event_handler+0x39e>
 8007fae:	4b0e      	ldr	r3, [pc, #56]	@ (8007fe8 <dcd_event_handler+0x3c4>)
 8007fb0:	623b      	str	r3, [r7, #32]
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00c      	beq.n	8007fd8 <dcd_event_handler+0x3b4>
 8007fbe:	be00      	bkpt	0x0000
 8007fc0:	e00a      	b.n	8007fd8 <dcd_event_handler+0x3b4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8007fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fc4:	7818      	ldrb	r0, [r3, #0]
 8007fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fc8:	785b      	ldrb	r3, [r3, #1]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	f7fe fd75 	bl	8006ac0 <tud_event_hook_cb>
  return true;
 8007fd6:	e000      	b.n	8007fda <dcd_event_handler+0x3b6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8007fd8:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 8007fda:	bf00      	nop
 8007fdc:	3780      	adds	r7, #128	@ 0x80
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	20000c58 	.word	0x20000c58
 8007fe8:	e000edf0 	.word	0xe000edf0

08007fec <usbd_int_set>:

//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled) {
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	71fb      	strb	r3, [r7, #7]
  if (enabled) {
 8007ff6:	79fb      	ldrb	r3, [r7, #7]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d005      	beq.n	8008008 <usbd_int_set+0x1c>
    dcd_int_enable(_usbd_rhport);
 8007ffc:	4b07      	ldr	r3, [pc, #28]	@ (800801c <usbd_int_set+0x30>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	4618      	mov	r0, r3
 8008002:	f001 f929 	bl	8009258 <dcd_int_enable>
  } else {
    dcd_int_disable(_usbd_rhport);
  }
}
 8008006:	e004      	b.n	8008012 <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8008008:	4b04      	ldr	r3, [pc, #16]	@ (800801c <usbd_int_set+0x30>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	4618      	mov	r0, r3
 800800e:	f001 f94b 	bl	80092a8 <dcd_int_disable>
}
 8008012:	bf00      	nop
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	2000006d 	.word	0x2000006d

08008020 <usbd_spin_lock>:

void usbd_spin_lock(bool in_isr) {
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	4603      	mov	r3, r0
 8008028:	71fb      	strb	r3, [r7, #7]
 800802a:	4b09      	ldr	r3, [pc, #36]	@ (8008050 <usbd_spin_lock+0x30>)
 800802c:	60fb      	str	r3, [r7, #12]
 800802e:	79fb      	ldrb	r3, [r7, #7]
 8008030:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 8008032:	7afb      	ldrb	r3, [r7, #11]
 8008034:	f083 0301 	eor.w	r3, r3, #1
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <usbd_spin_lock+0x26>
    ctx->interrupt_set(false);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2000      	movs	r0, #0
 8008044:	4798      	blx	r3
}
 8008046:	bf00      	nop
  osal_spin_lock(&_usbd_spin, in_isr);
}
 8008048:	bf00      	nop
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	20000070 	.word	0x20000070

08008054 <usbd_spin_unlock>:
void usbd_spin_unlock(bool in_isr) {
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	4603      	mov	r3, r0
 800805c:	71fb      	strb	r3, [r7, #7]
 800805e:	4b09      	ldr	r3, [pc, #36]	@ (8008084 <usbd_spin_unlock+0x30>)
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	79fb      	ldrb	r3, [r7, #7]
 8008064:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 8008066:	7afb      	ldrb	r3, [r7, #11]
 8008068:	f083 0301 	eor.w	r3, r3, #1
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <usbd_spin_unlock+0x26>
    ctx->interrupt_set(true);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2001      	movs	r0, #1
 8008078:	4798      	blx	r3
}
 800807a:	bf00      	nop
  osal_spin_unlock(&_usbd_spin, in_isr);
}
 800807c:	bf00      	nop
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	20000070 	.word	0x20000070

08008088 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08a      	sub	sp, #40	@ 0x28
 800808c:	af00      	add	r7, sp, #0
 800808e:	6039      	str	r1, [r7, #0]
 8008090:	4611      	mov	r1, r2
 8008092:	461a      	mov	r2, r3
 8008094:	4603      	mov	r3, r0
 8008096:	71fb      	strb	r3, [r7, #7]
 8008098:	460b      	mov	r3, r1
 800809a:	71bb      	strb	r3, [r7, #6]
 800809c:	4613      	mov	r3, r2
 800809e:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 80080a0:	2300      	movs	r3, #0
 80080a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80080a4:	e04d      	b.n	8008142 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	785b      	ldrb	r3, [r3, #1]
 80080ae:	2b05      	cmp	r3, #5
 80080b0:	d108      	bne.n	80080c4 <usbd_open_edpt_pair+0x3c>
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	78db      	ldrb	r3, [r3, #3]
 80080b6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	461a      	mov	r2, r3
 80080be:	797b      	ldrb	r3, [r7, #5]
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d00a      	beq.n	80080da <usbd_open_edpt_pair+0x52>
 80080c4:	4b23      	ldr	r3, [pc, #140]	@ (8008154 <usbd_open_edpt_pair+0xcc>)
 80080c6:	61bb      	str	r3, [r7, #24]
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d000      	beq.n	80080d6 <usbd_open_edpt_pair+0x4e>
 80080d4:	be00      	bkpt	0x0000
 80080d6:	2300      	movs	r3, #0
 80080d8:	e038      	b.n	800814c <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 80080da:	79fb      	ldrb	r3, [r7, #7]
 80080dc:	6a39      	ldr	r1, [r7, #32]
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 f83a 	bl	8008158 <usbd_edpt_open>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f083 0301 	eor.w	r3, r3, #1
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00a      	beq.n	8008106 <usbd_open_edpt_pair+0x7e>
 80080f0:	4b18      	ldr	r3, [pc, #96]	@ (8008154 <usbd_open_edpt_pair+0xcc>)
 80080f2:	61fb      	str	r3, [r7, #28]
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d000      	beq.n	8008102 <usbd_open_edpt_pair+0x7a>
 8008100:	be00      	bkpt	0x0000
 8008102:	2300      	movs	r3, #0
 8008104:	e022      	b.n	800814c <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	789b      	ldrb	r3, [r3, #2]
 800810a:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800810c:	7dfb      	ldrb	r3, [r7, #23]
 800810e:	09db      	lsrs	r3, r3, #7
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b01      	cmp	r3, #1
 8008114:	d104      	bne.n	8008120 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	789a      	ldrb	r2, [r3, #2]
 800811a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800811c:	701a      	strb	r2, [r3, #0]
 800811e:	e003      	b.n	8008128 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8008120:	6a3b      	ldr	r3, [r7, #32]
 8008122:	789a      	ldrb	r2, [r3, #2]
 8008124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008126:	701a      	strb	r2, [r3, #0]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	461a      	mov	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 800813a:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 800813c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813e:	3301      	adds	r3, #1
 8008140:	627b      	str	r3, [r7, #36]	@ 0x24
 8008142:	79bb      	ldrb	r3, [r7, #6]
 8008144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008146:	429a      	cmp	r2, r3
 8008148:	dbad      	blt.n	80080a6 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 800814a:	2301      	movs	r3, #1
}
 800814c:	4618      	mov	r0, r3
 800814e:	3728      	adds	r7, #40	@ 0x28
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	e000edf0 	.word	0xe000edf0

08008158 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	4603      	mov	r3, r0
 8008160:	6039      	str	r1, [r7, #0]
 8008162:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8008164:	4b1c      	ldr	r3, [pc, #112]	@ (80081d8 <usbd_edpt_open+0x80>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	789b      	ldrb	r3, [r3, #2]
 800816e:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008170:	7bfb      	ldrb	r3, [r7, #15]
 8008172:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b05      	cmp	r3, #5
 800817a:	d90a      	bls.n	8008192 <usbd_edpt_open+0x3a>
 800817c:	4b17      	ldr	r3, [pc, #92]	@ (80081dc <usbd_edpt_open+0x84>)
 800817e:	613b      	str	r3, [r7, #16]
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0301 	and.w	r3, r3, #1
 8008188:	2b00      	cmp	r3, #0
 800818a:	d000      	beq.n	800818e <usbd_edpt_open+0x36>
 800818c:	be00      	bkpt	0x0000
 800818e:	2300      	movs	r3, #0
 8008190:	e01d      	b.n	80081ce <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 8008192:	4b13      	ldr	r3, [pc, #76]	@ (80081e0 <usbd_edpt_open+0x88>)
 8008194:	789b      	ldrb	r3, [r3, #2]
 8008196:	2200      	movs	r2, #0
 8008198:	4619      	mov	r1, r3
 800819a:	6838      	ldr	r0, [r7, #0]
 800819c:	f002 fbae 	bl	800a8fc <tu_edpt_validate>
 80081a0:	4603      	mov	r3, r0
 80081a2:	f083 0301 	eor.w	r3, r3, #1
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00a      	beq.n	80081c2 <usbd_edpt_open+0x6a>
 80081ac:	4b0b      	ldr	r3, [pc, #44]	@ (80081dc <usbd_edpt_open+0x84>)
 80081ae:	617b      	str	r3, [r7, #20]
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 0301 	and.w	r3, r3, #1
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d000      	beq.n	80081be <usbd_edpt_open+0x66>
 80081bc:	be00      	bkpt	0x0000
 80081be:	2300      	movs	r3, #0
 80081c0:	e005      	b.n	80081ce <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f001 f992 	bl	80094f0 <dcd_edpt_open>
 80081cc:	4603      	mov	r3, r0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	2000006d 	.word	0x2000006d
 80081dc:	e000edf0 	.word	0xe000edf0
 80081e0:	20000b60 	.word	0x20000b60

080081e4 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	4603      	mov	r3, r0
 80081ec:	460a      	mov	r2, r1
 80081ee:	71fb      	strb	r3, [r7, #7]
 80081f0:	4613      	mov	r3, r2
 80081f2:	71bb      	strb	r3, [r7, #6]
 80081f4:	79bb      	ldrb	r3, [r7, #6]
 80081f6:	73bb      	strb	r3, [r7, #14]
 80081f8:	7bbb      	ldrb	r3, [r7, #14]
 80081fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081fe:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008200:	75fb      	strb	r3, [r7, #23]
 8008202:	79bb      	ldrb	r3, [r7, #6]
 8008204:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	09db      	lsrs	r3, r3, #7
 800820a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800820c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800820e:	7dfa      	ldrb	r2, [r7, #23]
 8008210:	7dbb      	ldrb	r3, [r7, #22]
 8008212:	0052      	lsls	r2, r2, #1
 8008214:	4413      	add	r3, r2
 8008216:	3320      	adds	r3, #32
 8008218:	4a05      	ldr	r2, [pc, #20]	@ (8008230 <usbd_edpt_claim+0x4c>)
 800821a:	4413      	add	r3, r2
 800821c:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 800821e:	2100      	movs	r1, #0
 8008220:	6938      	ldr	r0, [r7, #16]
 8008222:	f002 fb07 	bl	800a834 <tu_edpt_claim>
 8008226:	4603      	mov	r3, r0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3718      	adds	r7, #24
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	20000b60 	.word	0x20000b60

08008234 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af00      	add	r7, sp, #0
 800823a:	4603      	mov	r3, r0
 800823c:	460a      	mov	r2, r1
 800823e:	71fb      	strb	r3, [r7, #7]
 8008240:	4613      	mov	r3, r2
 8008242:	71bb      	strb	r3, [r7, #6]
 8008244:	79bb      	ldrb	r3, [r7, #6]
 8008246:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008248:	7bbb      	ldrb	r3, [r7, #14]
 800824a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800824e:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008250:	75fb      	strb	r3, [r7, #23]
 8008252:	79bb      	ldrb	r3, [r7, #6]
 8008254:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008256:	7bfb      	ldrb	r3, [r7, #15]
 8008258:	09db      	lsrs	r3, r3, #7
 800825a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800825c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800825e:	7dfa      	ldrb	r2, [r7, #23]
 8008260:	7dbb      	ldrb	r3, [r7, #22]
 8008262:	0052      	lsls	r2, r2, #1
 8008264:	4413      	add	r3, r2
 8008266:	3320      	adds	r3, #32
 8008268:	4a05      	ldr	r2, [pc, #20]	@ (8008280 <usbd_edpt_release+0x4c>)
 800826a:	4413      	add	r3, r2
 800826c:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 800826e:	2100      	movs	r1, #0
 8008270:	6938      	ldr	r0, [r7, #16]
 8008272:	f002 fb19 	bl	800a8a8 <tu_edpt_release>
 8008276:	4603      	mov	r3, r0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20000b60 	.word	0x20000b60

08008284 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af00      	add	r7, sp, #0
 800828a:	603a      	str	r2, [r7, #0]
 800828c:	461a      	mov	r2, r3
 800828e:	4603      	mov	r3, r0
 8008290:	71fb      	strb	r3, [r7, #7]
 8008292:	460b      	mov	r3, r1
 8008294:	71bb      	strb	r3, [r7, #6]
 8008296:	4613      	mov	r3, r2
 8008298:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 800829a:	4b32      	ldr	r3, [pc, #200]	@ (8008364 <usbd_edpt_xfer+0xe0>)
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	71fb      	strb	r3, [r7, #7]
 80082a0:	79bb      	ldrb	r3, [r7, #6]
 80082a2:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80082a4:	7abb      	ldrb	r3, [r7, #10]
 80082a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082aa:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80082ac:	75fb      	strb	r3, [r7, #23]
 80082ae:	79bb      	ldrb	r3, [r7, #6]
 80082b0:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80082b2:	7afb      	ldrb	r3, [r7, #11]
 80082b4:	09db      	lsrs	r3, r3, #7
 80082b6:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80082b8:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80082ba:	7dfa      	ldrb	r2, [r7, #23]
 80082bc:	7dbb      	ldrb	r3, [r7, #22]
 80082be:	492a      	ldr	r1, [pc, #168]	@ (8008368 <usbd_edpt_xfer+0xe4>)
 80082c0:	0052      	lsls	r2, r2, #1
 80082c2:	440a      	add	r2, r1
 80082c4:	4413      	add	r3, r2
 80082c6:	3320      	adds	r3, #32
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00a      	beq.n	80082ea <usbd_edpt_xfer+0x66>
 80082d4:	4b25      	ldr	r3, [pc, #148]	@ (800836c <usbd_edpt_xfer+0xe8>)
 80082d6:	60fb      	str	r3, [r7, #12]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d000      	beq.n	80082e6 <usbd_edpt_xfer+0x62>
 80082e4:	be00      	bkpt	0x0000
 80082e6:	2300      	movs	r3, #0
 80082e8:	e038      	b.n	800835c <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 80082ea:	7dfa      	ldrb	r2, [r7, #23]
 80082ec:	7dbb      	ldrb	r3, [r7, #22]
 80082ee:	491e      	ldr	r1, [pc, #120]	@ (8008368 <usbd_edpt_xfer+0xe4>)
 80082f0:	0052      	lsls	r2, r2, #1
 80082f2:	440a      	add	r2, r1
 80082f4:	4413      	add	r3, r2
 80082f6:	f103 0220 	add.w	r2, r3, #32
 80082fa:	7813      	ldrb	r3, [r2, #0]
 80082fc:	f043 0301 	orr.w	r3, r3, #1
 8008300:	7013      	strb	r3, [r2, #0]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 8008302:	88bb      	ldrh	r3, [r7, #4]
 8008304:	79b9      	ldrb	r1, [r7, #6]
 8008306:	79f8      	ldrb	r0, [r7, #7]
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	f001 f9b5 	bl	8009678 <dcd_edpt_xfer>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <usbd_edpt_xfer+0x94>
    return true;
 8008314:	2301      	movs	r3, #1
 8008316:	e021      	b.n	800835c <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8008318:	7dfa      	ldrb	r2, [r7, #23]
 800831a:	7dbb      	ldrb	r3, [r7, #22]
 800831c:	4912      	ldr	r1, [pc, #72]	@ (8008368 <usbd_edpt_xfer+0xe4>)
 800831e:	0052      	lsls	r2, r2, #1
 8008320:	440a      	add	r2, r1
 8008322:	4413      	add	r3, r2
 8008324:	f103 0220 	add.w	r2, r3, #32
 8008328:	7813      	ldrb	r3, [r2, #0]
 800832a:	f023 0301 	bic.w	r3, r3, #1
 800832e:	7013      	strb	r3, [r2, #0]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8008330:	7dfa      	ldrb	r2, [r7, #23]
 8008332:	7dbb      	ldrb	r3, [r7, #22]
 8008334:	490c      	ldr	r1, [pc, #48]	@ (8008368 <usbd_edpt_xfer+0xe4>)
 8008336:	0052      	lsls	r2, r2, #1
 8008338:	440a      	add	r2, r1
 800833a:	4413      	add	r3, r2
 800833c:	f103 0220 	add.w	r2, r3, #32
 8008340:	7813      	ldrb	r3, [r2, #0]
 8008342:	f023 0304 	bic.w	r3, r3, #4
 8008346:	7013      	strb	r3, [r2, #0]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 8008348:	4b08      	ldr	r3, [pc, #32]	@ (800836c <usbd_edpt_xfer+0xe8>)
 800834a:	613b      	str	r3, [r7, #16]
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	2b00      	cmp	r3, #0
 8008356:	d000      	beq.n	800835a <usbd_edpt_xfer+0xd6>
 8008358:	be00      	bkpt	0x0000
    return false;
 800835a:	2300      	movs	r3, #0
  }
}
 800835c:	4618      	mov	r0, r3
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	2000006d 	.word	0x2000006d
 8008368:	20000b60 	.word	0x20000b60
 800836c:	e000edf0 	.word	0xe000edf0

08008370 <usbd_edpt_busy>:
    TU_BREAKPOINT();
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr) {
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	4603      	mov	r3, r0
 8008378:	460a      	mov	r2, r1
 800837a:	71fb      	strb	r3, [r7, #7]
 800837c:	4613      	mov	r3, r2
 800837e:	71bb      	strb	r3, [r7, #6]
 8008380:	79bb      	ldrb	r3, [r7, #6]
 8008382:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008384:	7b3b      	ldrb	r3, [r7, #12]
 8008386:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800838a:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800838c:	73fb      	strb	r3, [r7, #15]
 800838e:	79bb      	ldrb	r3, [r7, #6]
 8008390:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008392:	7b7b      	ldrb	r3, [r7, #13]
 8008394:	09db      	lsrs	r3, r3, #7
 8008396:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008398:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 800839a:	7bfa      	ldrb	r2, [r7, #15]
 800839c:	7bbb      	ldrb	r3, [r7, #14]
 800839e:	490a      	ldr	r1, [pc, #40]	@ (80083c8 <usbd_edpt_busy+0x58>)
 80083a0:	0052      	lsls	r2, r2, #1
 80083a2:	440a      	add	r2, r1
 80083a4:	4413      	add	r3, r2
 80083a6:	3320      	adds	r3, #32
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	bf14      	ite	ne
 80083b4:	2301      	movne	r3, #1
 80083b6:	2300      	moveq	r3, #0
 80083b8:	b2db      	uxtb	r3, r3
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	20000b60 	.word	0x20000b60

080083cc <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	4603      	mov	r3, r0
 80083d4:	460a      	mov	r2, r1
 80083d6:	71fb      	strb	r3, [r7, #7]
 80083d8:	4613      	mov	r3, r2
 80083da:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80083dc:	4b18      	ldr	r3, [pc, #96]	@ (8008440 <usbd_edpt_stall+0x74>)
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	71fb      	strb	r3, [r7, #7]
 80083e2:	79bb      	ldrb	r3, [r7, #6]
 80083e4:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80083e6:	7b3b      	ldrb	r3, [r7, #12]
 80083e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083ec:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80083ee:	73fb      	strb	r3, [r7, #15]
 80083f0:	79bb      	ldrb	r3, [r7, #6]
 80083f2:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80083f4:	7b7b      	ldrb	r3, [r7, #13]
 80083f6:	09db      	lsrs	r3, r3, #7
 80083f8:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80083fa:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 80083fc:	79ba      	ldrb	r2, [r7, #6]
 80083fe:	79fb      	ldrb	r3, [r7, #7]
 8008400:	4611      	mov	r1, r2
 8008402:	4618      	mov	r0, r3
 8008404:	f001 f988 	bl	8009718 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 8008408:	7bfa      	ldrb	r2, [r7, #15]
 800840a:	7bbb      	ldrb	r3, [r7, #14]
 800840c:	490d      	ldr	r1, [pc, #52]	@ (8008444 <usbd_edpt_stall+0x78>)
 800840e:	0052      	lsls	r2, r2, #1
 8008410:	440a      	add	r2, r1
 8008412:	4413      	add	r3, r2
 8008414:	f103 0220 	add.w	r2, r3, #32
 8008418:	7813      	ldrb	r3, [r2, #0]
 800841a:	f043 0302 	orr.w	r3, r3, #2
 800841e:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8008420:	7bfa      	ldrb	r2, [r7, #15]
 8008422:	7bbb      	ldrb	r3, [r7, #14]
 8008424:	4907      	ldr	r1, [pc, #28]	@ (8008444 <usbd_edpt_stall+0x78>)
 8008426:	0052      	lsls	r2, r2, #1
 8008428:	440a      	add	r2, r1
 800842a:	4413      	add	r3, r2
 800842c:	f103 0220 	add.w	r2, r3, #32
 8008430:	7813      	ldrb	r3, [r2, #0]
 8008432:	f043 0301 	orr.w	r3, r3, #1
 8008436:	7013      	strb	r3, [r2, #0]
}
 8008438:	bf00      	nop
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	2000006d 	.word	0x2000006d
 8008444:	20000b60 	.word	0x20000b60

08008448 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	4603      	mov	r3, r0
 8008450:	460a      	mov	r2, r1
 8008452:	71fb      	strb	r3, [r7, #7]
 8008454:	4613      	mov	r3, r2
 8008456:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8008458:	4b18      	ldr	r3, [pc, #96]	@ (80084bc <usbd_edpt_clear_stall+0x74>)
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	71fb      	strb	r3, [r7, #7]
 800845e:	79bb      	ldrb	r3, [r7, #6]
 8008460:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008462:	7b3b      	ldrb	r3, [r7, #12]
 8008464:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008468:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800846a:	73fb      	strb	r3, [r7, #15]
 800846c:	79bb      	ldrb	r3, [r7, #6]
 800846e:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008470:	7b7b      	ldrb	r3, [r7, #13]
 8008472:	09db      	lsrs	r3, r3, #7
 8008474:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008476:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 8008478:	79ba      	ldrb	r2, [r7, #6]
 800847a:	79fb      	ldrb	r3, [r7, #7]
 800847c:	4611      	mov	r1, r2
 800847e:	4618      	mov	r0, r3
 8008480:	f001 f980 	bl	8009784 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8008484:	7bfa      	ldrb	r2, [r7, #15]
 8008486:	7bbb      	ldrb	r3, [r7, #14]
 8008488:	490d      	ldr	r1, [pc, #52]	@ (80084c0 <usbd_edpt_clear_stall+0x78>)
 800848a:	0052      	lsls	r2, r2, #1
 800848c:	440a      	add	r2, r1
 800848e:	4413      	add	r3, r2
 8008490:	f103 0220 	add.w	r2, r3, #32
 8008494:	7813      	ldrb	r3, [r2, #0]
 8008496:	f023 0302 	bic.w	r3, r3, #2
 800849a:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 800849c:	7bfa      	ldrb	r2, [r7, #15]
 800849e:	7bbb      	ldrb	r3, [r7, #14]
 80084a0:	4907      	ldr	r1, [pc, #28]	@ (80084c0 <usbd_edpt_clear_stall+0x78>)
 80084a2:	0052      	lsls	r2, r2, #1
 80084a4:	440a      	add	r2, r1
 80084a6:	4413      	add	r3, r2
 80084a8:	f103 0220 	add.w	r2, r3, #32
 80084ac:	7813      	ldrb	r3, [r2, #0]
 80084ae:	f023 0301 	bic.w	r3, r3, #1
 80084b2:	7013      	strb	r3, [r2, #0]
}
 80084b4:	bf00      	nop
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	2000006d 	.word	0x2000006d
 80084c0:	20000b60 	.word	0x20000b60

080084c4 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	4603      	mov	r3, r0
 80084cc:	460a      	mov	r2, r1
 80084ce:	71fb      	strb	r3, [r7, #7]
 80084d0:	4613      	mov	r3, r2
 80084d2:	71bb      	strb	r3, [r7, #6]
 80084d4:	79bb      	ldrb	r3, [r7, #6]
 80084d6:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80084d8:	7b3b      	ldrb	r3, [r7, #12]
 80084da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084de:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80084e0:	73fb      	strb	r3, [r7, #15]
 80084e2:	79bb      	ldrb	r3, [r7, #6]
 80084e4:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80084e6:	7b7b      	ldrb	r3, [r7, #13]
 80084e8:	09db      	lsrs	r3, r3, #7
 80084ea:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80084ec:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 80084ee:	7bfa      	ldrb	r2, [r7, #15]
 80084f0:	7bbb      	ldrb	r3, [r7, #14]
 80084f2:	490a      	ldr	r1, [pc, #40]	@ (800851c <usbd_edpt_stalled+0x58>)
 80084f4:	0052      	lsls	r2, r2, #1
 80084f6:	440a      	add	r2, r1
 80084f8:	4413      	add	r3, r2
 80084fa:	3320      	adds	r3, #32
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b00      	cmp	r3, #0
 8008506:	bf14      	ite	ne
 8008508:	2301      	movne	r3, #1
 800850a:	2300      	moveq	r3, #0
 800850c:	b2db      	uxtb	r3, r3
}
 800850e:	4618      	mov	r0, r3
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	20000b60 	.word	0x20000b60

08008520 <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, const tusb_control_request_t* request) {
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	4603      	mov	r3, r0
 8008528:	6039      	str	r1, [r7, #0]
 800852a:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	4603      	mov	r3, r0
 8008540:	6039      	str	r1, [r7, #0]
 8008542:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <status_stage_xact+0x1e>
 8008552:	2300      	movs	r3, #0
 8008554:	e000      	b.n	8008558 <status_stage_xact+0x20>
 8008556:	2380      	movs	r3, #128	@ 0x80
 8008558:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 800855a:	7bf9      	ldrb	r1, [r7, #15]
 800855c:	79f8      	ldrb	r0, [r7, #7]
 800855e:	2300      	movs	r3, #0
 8008560:	2200      	movs	r2, #0
 8008562:	f7ff fe8f 	bl	8008284 <usbd_edpt_xfer>
 8008566:	4603      	mov	r3, r0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	4603      	mov	r3, r0
 8008578:	6039      	str	r1, [r7, #0]
 800857a:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 800857c:	4b0b      	ldr	r3, [pc, #44]	@ (80085ac <tud_control_status+0x3c>)
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	6810      	ldr	r0, [r2, #0]
 8008582:	6851      	ldr	r1, [r2, #4]
 8008584:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 8008586:	4b09      	ldr	r3, [pc, #36]	@ (80085ac <tud_control_status+0x3c>)
 8008588:	2200      	movs	r2, #0
 800858a:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800858c:	4b07      	ldr	r3, [pc, #28]	@ (80085ac <tud_control_status+0x3c>)
 800858e:	2200      	movs	r2, #0
 8008590:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 8008592:	4b06      	ldr	r3, [pc, #24]	@ (80085ac <tud_control_status+0x3c>)
 8008594:	2200      	movs	r2, #0
 8008596:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 8008598:	79fb      	ldrb	r3, [r7, #7]
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	4618      	mov	r0, r3
 800859e:	f7ff ffcb 	bl	8008538 <status_stage_xact>
 80085a2:	4603      	mov	r3, r0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	20000c5c 	.word	0x20000c5c

080085b0 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	4603      	mov	r3, r0
 80085b8:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 80085ba:	4b24      	ldr	r3, [pc, #144]	@ (800864c <data_stage_xact+0x9c>)
 80085bc:	899a      	ldrh	r2, [r3, #12]
 80085be:	4b23      	ldr	r3, [pc, #140]	@ (800864c <data_stage_xact+0x9c>)
 80085c0:	89db      	ldrh	r3, [r3, #14]
 80085c2:	1ad3      	subs	r3, r2, r3
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	837b      	strh	r3, [r7, #26]
 80085c8:	2340      	movs	r3, #64	@ 0x40
 80085ca:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80085cc:	8b7a      	ldrh	r2, [r7, #26]
 80085ce:	8b3b      	ldrh	r3, [r7, #24]
 80085d0:	4293      	cmp	r3, r2
 80085d2:	bf28      	it	cs
 80085d4:	4613      	movcs	r3, r2
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 80085da:	2300      	movs	r3, #0
 80085dc:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 80085de:	4b1b      	ldr	r3, [pc, #108]	@ (800864c <data_stage_xact+0x9c>)
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d01e      	beq.n	800862a <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 80085ec:	2380      	movs	r3, #128	@ 0x80
 80085ee:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 80085f0:	8bbb      	ldrh	r3, [r7, #28]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d019      	beq.n	800862a <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 80085f6:	4b15      	ldr	r3, [pc, #84]	@ (800864c <data_stage_xact+0x9c>)
 80085f8:	689a      	ldr	r2, [r3, #8]
 80085fa:	8bbb      	ldrh	r3, [r7, #28]
 80085fc:	4914      	ldr	r1, [pc, #80]	@ (8008650 <data_stage_xact+0xa0>)
 80085fe:	6179      	str	r1, [r7, #20]
 8008600:	2140      	movs	r1, #64	@ 0x40
 8008602:	6139      	str	r1, [r7, #16]
 8008604:	60fa      	str	r2, [r7, #12]
 8008606:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	429a      	cmp	r2, r3
 800860e:	d202      	bcs.n	8008616 <data_stage_xact+0x66>
    return -1;
 8008610:	f04f 33ff 	mov.w	r3, #4294967295
 8008614:	e005      	b.n	8008622 <data_stage_xact+0x72>
  memcpy(dest, src, count);
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	68f9      	ldr	r1, [r7, #12]
 800861a:	6978      	ldr	r0, [r7, #20]
 800861c:	f002 fce9 	bl	800aff2 <memcpy>
  return 0;
 8008620:	2300      	movs	r3, #0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <data_stage_xact+0x7a>
 8008626:	2300      	movs	r3, #0
 8008628:	e00b      	b.n	8008642 <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 800862a:	8bbb      	ldrh	r3, [r7, #28]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <data_stage_xact+0x84>
 8008630:	4a07      	ldr	r2, [pc, #28]	@ (8008650 <data_stage_xact+0xa0>)
 8008632:	e000      	b.n	8008636 <data_stage_xact+0x86>
 8008634:	2200      	movs	r2, #0
 8008636:	8bbb      	ldrh	r3, [r7, #28]
 8008638:	7ff9      	ldrb	r1, [r7, #31]
 800863a:	79f8      	ldrb	r0, [r7, #7]
 800863c:	f7ff fe22 	bl	8008284 <usbd_edpt_xfer>
 8008640:	4603      	mov	r3, r0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3720      	adds	r7, #32
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	20000c5c 	.word	0x20000c5c
 8008650:	20000c70 	.word	0x20000c70

08008654 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 8008654:	b580      	push	{r7, lr}
 8008656:	b088      	sub	sp, #32
 8008658:	af00      	add	r7, sp, #0
 800865a:	60b9      	str	r1, [r7, #8]
 800865c:	607a      	str	r2, [r7, #4]
 800865e:	461a      	mov	r2, r3
 8008660:	4603      	mov	r3, r0
 8008662:	73fb      	strb	r3, [r7, #15]
 8008664:	4613      	mov	r3, r2
 8008666:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 8008668:	4b30      	ldr	r3, [pc, #192]	@ (800872c <tud_control_xfer+0xd8>)
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	6810      	ldr	r0, [r2, #0]
 800866e:	6851      	ldr	r1, [r2, #4]
 8008670:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 8008672:	4a2e      	ldr	r2, [pc, #184]	@ (800872c <tud_control_xfer+0xd8>)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8008678:	4b2c      	ldr	r3, [pc, #176]	@ (800872c <tud_control_xfer+0xd8>)
 800867a:	2200      	movs	r2, #0
 800867c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	88db      	ldrh	r3, [r3, #6]
 8008682:	b29a      	uxth	r2, r3
 8008684:	89bb      	ldrh	r3, [r7, #12]
 8008686:	827b      	strh	r3, [r7, #18]
 8008688:	4613      	mov	r3, r2
 800868a:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800868c:	8a7a      	ldrh	r2, [r7, #18]
 800868e:	8a3b      	ldrh	r3, [r7, #16]
 8008690:	4293      	cmp	r3, r2
 8008692:	bf28      	it	cs
 8008694:	4613      	movcs	r3, r2
 8008696:	b29a      	uxth	r2, r3
 8008698:	4b24      	ldr	r3, [pc, #144]	@ (800872c <tud_control_xfer+0xd8>)
 800869a:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	88db      	ldrh	r3, [r3, #6]
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d026      	beq.n	80086f4 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 80086a6:	4b21      	ldr	r3, [pc, #132]	@ (800872c <tud_control_xfer+0xd8>)
 80086a8:	899b      	ldrh	r3, [r3, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00d      	beq.n	80086ca <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10a      	bne.n	80086ca <tud_control_xfer+0x76>
 80086b4:	4b1e      	ldr	r3, [pc, #120]	@ (8008730 <tud_control_xfer+0xdc>)
 80086b6:	61bb      	str	r3, [r7, #24]
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 0301 	and.w	r3, r3, #1
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d000      	beq.n	80086c6 <tud_control_xfer+0x72>
 80086c4:	be00      	bkpt	0x0000
 80086c6:	2300      	movs	r3, #0
 80086c8:	e02b      	b.n	8008722 <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7ff ff6f 	bl	80085b0 <data_stage_xact>
 80086d2:	4603      	mov	r3, r0
 80086d4:	f083 0301 	eor.w	r3, r3, #1
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d020      	beq.n	8008720 <tud_control_xfer+0xcc>
 80086de:	4b14      	ldr	r3, [pc, #80]	@ (8008730 <tud_control_xfer+0xdc>)
 80086e0:	617b      	str	r3, [r7, #20]
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d000      	beq.n	80086f0 <tud_control_xfer+0x9c>
 80086ee:	be00      	bkpt	0x0000
 80086f0:	2300      	movs	r3, #0
 80086f2:	e016      	b.n	8008722 <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
 80086f6:	68b9      	ldr	r1, [r7, #8]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7ff ff1d 	bl	8008538 <status_stage_xact>
 80086fe:	4603      	mov	r3, r0
 8008700:	f083 0301 	eor.w	r3, r3, #1
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00a      	beq.n	8008720 <tud_control_xfer+0xcc>
 800870a:	4b09      	ldr	r3, [pc, #36]	@ (8008730 <tud_control_xfer+0xdc>)
 800870c:	61fb      	str	r3, [r7, #28]
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	2b00      	cmp	r3, #0
 8008718:	d000      	beq.n	800871c <tud_control_xfer+0xc8>
 800871a:	be00      	bkpt	0x0000
 800871c:	2300      	movs	r3, #0
 800871e:	e000      	b.n	8008722 <tud_control_xfer+0xce>
  }

  return true;
 8008720:	2301      	movs	r3, #1
}
 8008722:	4618      	mov	r0, r3
 8008724:	3720      	adds	r7, #32
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	20000c5c 	.word	0x20000c5c
 8008730:	e000edf0 	.word	0xe000edf0

08008734 <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 8008734:	b580      	push	{r7, lr}
 8008736:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8008738:	2214      	movs	r2, #20
 800873a:	2100      	movs	r1, #0
 800873c:	4802      	ldr	r0, [pc, #8]	@ (8008748 <usbd_control_reset+0x14>)
 800873e:	f002 fb80 	bl	800ae42 <memset>
}
 8008742:	bf00      	nop
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	20000c5c 	.word	0x20000c5c

0800874c <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8008754:	4a04      	ldr	r2, [pc, #16]	@ (8008768 <usbd_control_set_complete_callback+0x1c>)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6113      	str	r3, [r2, #16]
}
 800875a:	bf00      	nop
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	20000c5c 	.word	0x20000c5c

0800876c <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 8008774:	4b09      	ldr	r3, [pc, #36]	@ (800879c <usbd_control_set_request+0x30>)
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	6810      	ldr	r0, [r2, #0]
 800877a:	6851      	ldr	r1, [r2, #4]
 800877c:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800877e:	4b07      	ldr	r3, [pc, #28]	@ (800879c <usbd_control_set_request+0x30>)
 8008780:	2200      	movs	r2, #0
 8008782:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8008784:	4b05      	ldr	r3, [pc, #20]	@ (800879c <usbd_control_set_request+0x30>)
 8008786:	2200      	movs	r2, #0
 8008788:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800878a:	4b04      	ldr	r3, [pc, #16]	@ (800879c <usbd_control_set_request+0x30>)
 800878c:	2200      	movs	r2, #0
 800878e:	819a      	strh	r2, [r3, #12]
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	20000c5c 	.word	0x20000c5c

080087a0 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b088      	sub	sp, #32
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	603b      	str	r3, [r7, #0]
 80087a8:	4603      	mov	r3, r0
 80087aa:	71fb      	strb	r3, [r7, #7]
 80087ac:	460b      	mov	r3, r1
 80087ae:	71bb      	strb	r3, [r7, #6]
 80087b0:	4613      	mov	r3, r2
 80087b2:	717b      	strb	r3, [r7, #5]
 80087b4:	79bb      	ldrb	r3, [r7, #6]
 80087b6:	73fb      	strb	r3, [r7, #15]
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
 80087ba:	09db      	lsrs	r3, r3, #7
 80087bc:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 80087be:	4a4f      	ldr	r2, [pc, #316]	@ (80088fc <usbd_control_xfer_cb+0x15c>)
 80087c0:	7812      	ldrb	r2, [r2, #0]
 80087c2:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80087c6:	b2d2      	uxtb	r2, r2
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d01e      	beq.n	800880a <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00a      	beq.n	80087e8 <usbd_control_xfer_cb+0x48>
 80087d2:	4b4b      	ldr	r3, [pc, #300]	@ (8008900 <usbd_control_xfer_cb+0x160>)
 80087d4:	613b      	str	r3, [r7, #16]
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d000      	beq.n	80087e4 <usbd_control_xfer_cb+0x44>
 80087e2:	be00      	bkpt	0x0000
 80087e4:	2300      	movs	r3, #0
 80087e6:	e084      	b.n	80088f2 <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 80087e8:	79fb      	ldrb	r3, [r7, #7]
 80087ea:	4944      	ldr	r1, [pc, #272]	@ (80088fc <usbd_control_xfer_cb+0x15c>)
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7ff fe97 	bl	8008520 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 80087f2:	4b42      	ldr	r3, [pc, #264]	@ (80088fc <usbd_control_xfer_cb+0x15c>)
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d005      	beq.n	8008806 <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 80087fa:	4b40      	ldr	r3, [pc, #256]	@ (80088fc <usbd_control_xfer_cb+0x15c>)
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	79f8      	ldrb	r0, [r7, #7]
 8008800:	4a3e      	ldr	r2, [pc, #248]	@ (80088fc <usbd_control_xfer_cb+0x15c>)
 8008802:	2103      	movs	r1, #3
 8008804:	4798      	blx	r3
    }

    return true;
 8008806:	2301      	movs	r3, #1
 8008808:	e073      	b.n	80088f2 <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 800880a:	4b3c      	ldr	r3, [pc, #240]	@ (80088fc <usbd_control_xfer_cb+0x15c>)
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10c      	bne.n	8008832 <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 8008818:	4b38      	ldr	r3, [pc, #224]	@ (80088fc <usbd_control_xfer_cb+0x15c>)
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <usbd_control_xfer_cb+0x84>
 8008820:	2300      	movs	r3, #0
 8008822:	e066      	b.n	80088f2 <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 8008824:	4b35      	ldr	r3, [pc, #212]	@ (80088fc <usbd_control_xfer_cb+0x15c>)
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	4936      	ldr	r1, [pc, #216]	@ (8008904 <usbd_control_xfer_cb+0x164>)
 800882c:	4618      	mov	r0, r3
 800882e:	f002 fbe0 	bl	800aff2 <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8008832:	4b32      	ldr	r3, [pc, #200]	@ (80088fc <usbd_control_xfer_cb+0x15c>)
 8008834:	89da      	ldrh	r2, [r3, #14]
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	b29b      	uxth	r3, r3
 800883a:	4413      	add	r3, r2
 800883c:	b29a      	uxth	r2, r3
 800883e:	4b2f      	ldr	r3, [pc, #188]	@ (80088fc <usbd_control_xfer_cb+0x15c>)
 8008840:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8008842:	4b2e      	ldr	r3, [pc, #184]	@ (80088fc <usbd_control_xfer_cb+0x15c>)
 8008844:	689a      	ldr	r2, [r3, #8]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	4413      	add	r3, r2
 800884a:	4a2c      	ldr	r2, [pc, #176]	@ (80088fc <usbd_control_xfer_cb+0x15c>)
 800884c:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 800884e:	4b2b      	ldr	r3, [pc, #172]	@ (80088fc <usbd_control_xfer_cb+0x15c>)
 8008850:	88da      	ldrh	r2, [r3, #6]
 8008852:	4b2a      	ldr	r3, [pc, #168]	@ (80088fc <usbd_control_xfer_cb+0x15c>)
 8008854:	89db      	ldrh	r3, [r3, #14]
 8008856:	429a      	cmp	r2, r3
 8008858:	d002      	beq.n	8008860 <usbd_control_xfer_cb+0xc0>
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b3f      	cmp	r3, #63	@ 0x3f
 800885e:	d831      	bhi.n	80088c4 <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 8008860:	2301      	movs	r3, #1
 8008862:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 8008864:	4b25      	ldr	r3, [pc, #148]	@ (80088fc <usbd_control_xfer_cb+0x15c>)
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d007      	beq.n	800887c <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 800886c:	4b23      	ldr	r3, [pc, #140]	@ (80088fc <usbd_control_xfer_cb+0x15c>)
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	79f8      	ldrb	r0, [r7, #7]
 8008872:	4a22      	ldr	r2, [pc, #136]	@ (80088fc <usbd_control_xfer_cb+0x15c>)
 8008874:	2102      	movs	r1, #2
 8008876:	4798      	blx	r3
 8008878:	4603      	mov	r3, r0
 800887a:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 800887c:	7ffb      	ldrb	r3, [r7, #31]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d015      	beq.n	80088ae <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 8008882:	79fb      	ldrb	r3, [r7, #7]
 8008884:	491d      	ldr	r1, [pc, #116]	@ (80088fc <usbd_control_xfer_cb+0x15c>)
 8008886:	4618      	mov	r0, r3
 8008888:	f7ff fe56 	bl	8008538 <status_stage_xact>
 800888c:	4603      	mov	r3, r0
 800888e:	f083 0301 	eor.w	r3, r3, #1
 8008892:	b2db      	uxtb	r3, r3
 8008894:	2b00      	cmp	r3, #0
 8008896:	d02a      	beq.n	80088ee <usbd_control_xfer_cb+0x14e>
 8008898:	4b19      	ldr	r3, [pc, #100]	@ (8008900 <usbd_control_xfer_cb+0x160>)
 800889a:	617b      	str	r3, [r7, #20]
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 0301 	and.w	r3, r3, #1
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d000      	beq.n	80088aa <usbd_control_xfer_cb+0x10a>
 80088a8:	be00      	bkpt	0x0000
 80088aa:	2300      	movs	r3, #0
 80088ac:	e021      	b.n	80088f2 <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 80088ae:	79fb      	ldrb	r3, [r7, #7]
 80088b0:	2100      	movs	r1, #0
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 ff30 	bl	8009718 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 80088b8:	79fb      	ldrb	r3, [r7, #7]
 80088ba:	2180      	movs	r1, #128	@ 0x80
 80088bc:	4618      	mov	r0, r3
 80088be:	f000 ff2b 	bl	8009718 <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 80088c2:	e014      	b.n	80088ee <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 80088c4:	79fb      	ldrb	r3, [r7, #7]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7ff fe72 	bl	80085b0 <data_stage_xact>
 80088cc:	4603      	mov	r3, r0
 80088ce:	f083 0301 	eor.w	r3, r3, #1
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00b      	beq.n	80088f0 <usbd_control_xfer_cb+0x150>
 80088d8:	4b09      	ldr	r3, [pc, #36]	@ (8008900 <usbd_control_xfer_cb+0x160>)
 80088da:	61bb      	str	r3, [r7, #24]
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0301 	and.w	r3, r3, #1
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d000      	beq.n	80088ea <usbd_control_xfer_cb+0x14a>
 80088e8:	be00      	bkpt	0x0000
 80088ea:	2300      	movs	r3, #0
 80088ec:	e001      	b.n	80088f2 <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 80088ee:	bf00      	nop
  }

  return true;
 80088f0:	2301      	movs	r3, #1
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3720      	adds	r7, #32
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	20000c5c 	.word	0x20000c5c
 8008900:	e000edf0 	.word	0xe000edf0
 8008904:	20000c70 	.word	0x20000c70

08008908 <__NVIC_EnableIRQ>:
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	4603      	mov	r3, r0
 8008910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008916:	2b00      	cmp	r3, #0
 8008918:	db0b      	blt.n	8008932 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800891a:	79fb      	ldrb	r3, [r7, #7]
 800891c:	f003 021f 	and.w	r2, r3, #31
 8008920:	4907      	ldr	r1, [pc, #28]	@ (8008940 <__NVIC_EnableIRQ+0x38>)
 8008922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008926:	095b      	lsrs	r3, r3, #5
 8008928:	2001      	movs	r0, #1
 800892a:	fa00 f202 	lsl.w	r2, r0, r2
 800892e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008932:	bf00      	nop
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	e000e100 	.word	0xe000e100

08008944 <__NVIC_DisableIRQ>:
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	4603      	mov	r3, r0
 800894c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800894e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008952:	2b00      	cmp	r3, #0
 8008954:	db12      	blt.n	800897c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008956:	79fb      	ldrb	r3, [r7, #7]
 8008958:	f003 021f 	and.w	r2, r3, #31
 800895c:	490a      	ldr	r1, [pc, #40]	@ (8008988 <__NVIC_DisableIRQ+0x44>)
 800895e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008962:	095b      	lsrs	r3, r3, #5
 8008964:	2001      	movs	r0, #1
 8008966:	fa00 f202 	lsl.w	r2, r0, r2
 800896a:	3320      	adds	r3, #32
 800896c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008970:	f3bf 8f4f 	dsb	sy
}
 8008974:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008976:	f3bf 8f6f 	isb	sy
}
 800897a:	bf00      	nop
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	e000e100 	.word	0xe000e100

0800898c <dma_setup_prepare>:
  // Internal DMA only
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	4603      	mov	r3, r0
 8008994:	71fb      	strb	r3, [r7, #7]
 8008996:	79fb      	ldrb	r3, [r7, #7]
 8008998:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800899a:	7afb      	ldrb	r3, [r7, #11]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 80089a0:	2300      	movs	r3, #0
 80089a2:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80089a4:	7afb      	ldrb	r3, [r7, #11]
 80089a6:	4a13      	ldr	r2, [pc, #76]	@ (80089f4 <dma_setup_prepare+0x68>)
 80089a8:	011b      	lsls	r3, r3, #4
 80089aa:	4413      	add	r3, r2
 80089ac:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80089ae:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089b4:	4a10      	ldr	r2, [pc, #64]	@ (80089f8 <dma_setup_prepare+0x6c>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d904      	bls.n	80089c4 <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	db10      	blt.n	80089e6 <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4a0d      	ldr	r2, [pc, #52]	@ (80089fc <dma_setup_prepare+0x70>)
 80089c8:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 80089cc:	4a0c      	ldr	r2, [pc, #48]	@ (8008a00 <dma_setup_prepare+0x74>)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 80089da:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 80089e4:	e000      	b.n	80089e8 <dma_setup_prepare+0x5c>
      return;
 80089e6:	bf00      	nop
}
 80089e8:	3714      	adds	r7, #20
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	0800c86c 	.word	0x0800c86c
 80089f8:	4f543009 	.word	0x4f543009
 80089fc:	20080008 	.word	0x20080008
 8008a00:	20000d38 	.word	0x20000d38

08008a04 <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 8008a04:	b480      	push	{r7}
 8008a06:	b091      	sub	sp, #68	@ 0x44
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	71fb      	strb	r3, [r7, #7]
 8008a0e:	460b      	mov	r3, r1
 8008a10:	71bb      	strb	r3, [r7, #6]
 8008a12:	4613      	mov	r3, r2
 8008a14:	80bb      	strh	r3, [r7, #4]
 8008a16:	79fb      	ldrb	r3, [r7, #7]
 8008a18:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008a1a:	7e7b      	ldrb	r3, [r7, #25]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <dfifo_alloc+0x20>
    rhport = 0;
 8008a20:	2300      	movs	r3, #0
 8008a22:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008a24:	7e7b      	ldrb	r3, [r7, #25]
 8008a26:	4a65      	ldr	r2, [pc, #404]	@ (8008bbc <dfifo_alloc+0x1b8>)
 8008a28:	011b      	lsls	r3, r3, #4
 8008a2a:	4413      	add	r3, r2
 8008a2c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8008a30:	79fb      	ldrb	r3, [r7, #7]
 8008a32:	011b      	lsls	r3, r3, #4
 8008a34:	4a61      	ldr	r2, [pc, #388]	@ (8008bbc <dfifo_alloc+0x1b8>)
 8008a36:	4413      	add	r3, r2
 8008a38:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 8008a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a3c:	7a1b      	ldrb	r3, [r3, #8]
 8008a3e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008a42:	79bb      	ldrb	r3, [r7, #6]
 8008a44:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008a46:	7ebb      	ldrb	r3, [r7, #26]
 8008a48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a4c:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8008a4e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8008a52:	79bb      	ldrb	r3, [r7, #6]
 8008a54:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008a56:	7efb      	ldrb	r3, [r7, #27]
 8008a58:	09db      	lsrs	r3, r3, #7
 8008a5a:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8008a5c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 8008a60:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8008a64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d30a      	bcc.n	8008a82 <dfifo_alloc+0x7e>
 8008a6c:	4b54      	ldr	r3, [pc, #336]	@ (8008bc0 <dfifo_alloc+0x1bc>)
 8008a6e:	61fb      	str	r3, [r7, #28]
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 0301 	and.w	r3, r3, #1
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d000      	beq.n	8008a7e <dfifo_alloc+0x7a>
 8008a7c:	be00      	bkpt	0x0000
 8008a7e:	2300      	movs	r3, #0
 8008a80:	e095      	b.n	8008bae <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 8008a82:	88bb      	ldrh	r3, [r7, #4]
 8008a84:	617b      	str	r3, [r7, #20]
 8008a86:	2304      	movs	r3, #4
 8008a88:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	4413      	add	r3, r2
 8008a90:	1e5a      	subs	r2, r3, #1
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a98:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 8008a9a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d12a      	bne.n	8008af8 <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8008aa2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	81fb      	strh	r3, [r7, #14]
 8008aaa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008aae:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8008ab0:	89fb      	ldrh	r3, [r7, #14]
 8008ab2:	089b      	lsrs	r3, r3, #2
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	f103 0208 	add.w	r2, r3, #8
 8008aba:	7b7b      	ldrb	r3, [r7, #13]
 8008abc:	4413      	add	r3, r2
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	005b      	lsls	r3, r3, #1
 8008ac2:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8008ac4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 8008ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008aca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d26d      	bcs.n	8008bac <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 8008ad0:	4b3c      	ldr	r3, [pc, #240]	@ (8008bc4 <dfifo_alloc+0x1c0>)
 8008ad2:	889b      	ldrh	r3, [r3, #4]
 8008ad4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d90a      	bls.n	8008af0 <dfifo_alloc+0xec>
 8008ada:	4b39      	ldr	r3, [pc, #228]	@ (8008bc0 <dfifo_alloc+0x1bc>)
 8008adc:	623b      	str	r3, [r7, #32]
 8008ade:	6a3b      	ldr	r3, [r7, #32]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d000      	beq.n	8008aec <dfifo_alloc+0xe8>
 8008aea:	be00      	bkpt	0x0000
 8008aec:	2300      	movs	r3, #0
 8008aee:	e05e      	b.n	8008bae <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 8008af0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af4:	625a      	str	r2, [r3, #36]	@ 0x24
 8008af6:	e059      	b.n	8008bac <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 8008af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008afa:	7a5b      	ldrb	r3, [r3, #9]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d016      	beq.n	8008b2e <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 8008b00:	4b30      	ldr	r3, [pc, #192]	@ (8008bc4 <dfifo_alloc+0x1c0>)
 8008b02:	799a      	ldrb	r2, [r3, #6]
 8008b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b06:	7a5b      	ldrb	r3, [r3, #9]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d30a      	bcc.n	8008b22 <dfifo_alloc+0x11e>
 8008b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8008bc0 <dfifo_alloc+0x1bc>)
 8008b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 0301 	and.w	r3, r3, #1
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d000      	beq.n	8008b1e <dfifo_alloc+0x11a>
 8008b1c:	be00      	bkpt	0x0000
 8008b1e:	2300      	movs	r3, #0
 8008b20:	e045      	b.n	8008bae <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 8008b22:	4b28      	ldr	r3, [pc, #160]	@ (8008bc4 <dfifo_alloc+0x1c0>)
 8008b24:	799b      	ldrb	r3, [r3, #6]
 8008b26:	3301      	adds	r3, #1
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	4b26      	ldr	r3, [pc, #152]	@ (8008bc4 <dfifo_alloc+0x1c0>)
 8008b2c:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 8008b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d102      	bne.n	8008b40 <dfifo_alloc+0x13c>
      fifo_size *= 2;
 8008b3a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008b3c:	005b      	lsls	r3, r3, #1
 8008b3e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 8008b40:	4b20      	ldr	r3, [pc, #128]	@ (8008bc4 <dfifo_alloc+0x1c0>)
 8008b42:	889b      	ldrh	r3, [r3, #4]
 8008b44:	4619      	mov	r1, r3
 8008b46:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8008b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b4c:	4413      	add	r3, r2
 8008b4e:	4299      	cmp	r1, r3
 8008b50:	d20a      	bcs.n	8008b68 <dfifo_alloc+0x164>
 8008b52:	4b1b      	ldr	r3, [pc, #108]	@ (8008bc0 <dfifo_alloc+0x1bc>)
 8008b54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d000      	beq.n	8008b64 <dfifo_alloc+0x160>
 8008b62:	be00      	bkpt	0x0000
 8008b64:	2300      	movs	r3, #0
 8008b66:	e022      	b.n	8008bae <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 8008b68:	4b16      	ldr	r3, [pc, #88]	@ (8008bc4 <dfifo_alloc+0x1c0>)
 8008b6a:	889a      	ldrh	r2, [r3, #4]
 8008b6c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	4b14      	ldr	r3, [pc, #80]	@ (8008bc4 <dfifo_alloc+0x1c0>)
 8008b74:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 8008b76:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d108      	bne.n	8008b90 <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 8008b7e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008b80:	041b      	lsls	r3, r3, #16
 8008b82:	4a10      	ldr	r2, [pc, #64]	@ (8008bc4 <dfifo_alloc+0x1c0>)
 8008b84:	8892      	ldrh	r2, [r2, #4]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	461a      	mov	r2, r3
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8008b8e:	e00d      	b.n	8008bac <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 8008b90:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008b92:	041b      	lsls	r3, r3, #16
 8008b94:	4a0b      	ldr	r2, [pc, #44]	@ (8008bc4 <dfifo_alloc+0x1c0>)
 8008b96:	8892      	ldrh	r2, [r2, #4]
 8008b98:	431a      	orrs	r2, r3
 8008b9a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	4611      	mov	r1, r2
 8008ba2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ba4:	3340      	adds	r3, #64	@ 0x40
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 8008bac:	2301      	movs	r3, #1
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3744      	adds	r7, #68	@ 0x44
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	0800c86c 	.word	0x0800c86c
 8008bc0:	e000edf0 	.word	0xe000edf0
 8008bc4:	20000d30 	.word	0x20000d30

08008bc8 <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b088      	sub	sp, #32
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	4603      	mov	r3, r0
 8008bd0:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8008bd2:	79fb      	ldrb	r3, [r7, #7]
 8008bd4:	011b      	lsls	r3, r3, #4
 8008bd6:	4a27      	ldr	r2, [pc, #156]	@ (8008c74 <dfifo_device_init+0xac>)
 8008bd8:	4413      	add	r3, r2
 8008bda:	61fb      	str	r3, [r7, #28]
 8008bdc:	79fb      	ldrb	r3, [r7, #7]
 8008bde:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008be0:	7b3b      	ldrb	r3, [r7, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <dfifo_device_init+0x22>
    rhport = 0;
 8008be6:	2300      	movs	r3, #0
 8008be8:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008bea:	7b3b      	ldrb	r3, [r7, #12]
 8008bec:	4a21      	ldr	r2, [pc, #132]	@ (8008c74 <dfifo_device_init+0xac>)
 8008bee:	011b      	lsls	r3, r3, #4
 8008bf0:	4413      	add	r3, r2
 8008bf2:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008bf4:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	7a1b      	ldrb	r3, [r3, #8]
 8008bfa:	2240      	movs	r2, #64	@ 0x40
 8008bfc:	81fa      	strh	r2, [r7, #14]
 8008bfe:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8008c00:	89fb      	ldrh	r3, [r7, #14]
 8008c02:	089b      	lsrs	r3, r3, #2
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	f103 0208 	add.w	r2, r3, #8
 8008c0a:	7b7b      	ldrb	r3, [r7, #13]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	005b      	lsls	r3, r3, #1
 8008c12:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8008c14:	461a      	mov	r2, r3
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	625a      	str	r2, [r3, #36]	@ 0x24
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c22:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8008c24:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 8008c26:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	089b      	lsrs	r3, r3, #2
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	4b11      	ldr	r3, [pc, #68]	@ (8008c78 <dfifo_device_init+0xb0>)
 8008c32:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d009      	beq.n	8008c4e <dfifo_device_init+0x86>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 8008c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008c78 <dfifo_device_init+0xb0>)
 8008c3c:	889a      	ldrh	r2, [r3, #4]
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	7a1b      	ldrb	r3, [r3, #8]
 8008c42:	005b      	lsls	r3, r3, #1
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8008c78 <dfifo_device_init+0xb0>)
 8008c4c:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 8008c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8008c78 <dfifo_device_init+0xb0>)
 8008c50:	889b      	ldrh	r3, [r3, #4]
 8008c52:	461a      	mov	r2, r3
 8008c54:	4613      	mov	r3, r2
 8008c56:	041b      	lsls	r3, r3, #16
 8008c58:	441a      	add	r2, r3
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 8008c5e:	79fb      	ldrb	r3, [r7, #7]
 8008c60:	2240      	movs	r2, #64	@ 0x40
 8008c62:	2180      	movs	r1, #128	@ 0x80
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7ff fecd 	bl	8008a04 <dfifo_alloc>
}
 8008c6a:	bf00      	nop
 8008c6c:	3720      	adds	r7, #32
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	0800c86c 	.word	0x0800c86c
 8008c78:	20000d30 	.word	0x20000d30

08008c7c <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 8008c7c:	b480      	push	{r7}
 8008c7e:	b08b      	sub	sp, #44	@ 0x2c
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	4603      	mov	r3, r0
 8008c84:	6039      	str	r1, [r7, #0]
 8008c86:	71fb      	strb	r3, [r7, #7]
 8008c88:	79fb      	ldrb	r3, [r7, #7]
 8008c8a:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008c8c:	7c7b      	ldrb	r3, [r7, #17]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <edpt_activate+0x1a>
    rhport = 0;
 8008c92:	2300      	movs	r3, #0
 8008c94:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008c96:	7c7b      	ldrb	r3, [r7, #17]
 8008c98:	4a45      	ldr	r2, [pc, #276]	@ (8008db0 <edpt_activate+0x134>)
 8008c9a:	011b      	lsls	r3, r3, #4
 8008c9c:	4413      	add	r3, r2
 8008c9e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	789b      	ldrb	r3, [r3, #2]
 8008ca6:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008ca8:	7cbb      	ldrb	r3, [r7, #18]
 8008caa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	789b      	ldrb	r3, [r3, #2]
 8008cb8:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008cba:	7cfb      	ldrb	r3, [r7, #19]
 8008cbc:	09db      	lsrs	r3, r3, #7
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8008cc4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8008cc8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8008ccc:	0052      	lsls	r2, r2, #1
 8008cce:	4413      	add	r3, r2
 8008cd0:	011b      	lsls	r3, r3, #4
 8008cd2:	4a38      	ldr	r2, [pc, #224]	@ (8008db4 <edpt_activate+0x138>)
 8008cd4:	4413      	add	r3, r2
 8008cd6:	61fb      	str	r3, [r7, #28]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	889b      	ldrh	r3, [r3, #4]
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ce6:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	799a      	ldrb	r2, [r3, #6]
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	731a      	strb	r2, [r3, #12]

  // Endpoint control
  dwc2_depctl_t depctl = {.value = 0};
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	60fb      	str	r3, [r7, #12]
  depctl.mps = xfer->max_size;
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	895b      	ldrh	r3, [r3, #10]
 8008cfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	89bb      	ldrh	r3, [r7, #12]
 8008d04:	f362 030a 	bfi	r3, r2, #0, #11
 8008d08:	81bb      	strh	r3, [r7, #12]
  depctl.active = 1;
 8008d0a:	7b7b      	ldrb	r3, [r7, #13]
 8008d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d10:	737b      	strb	r3, [r7, #13]
  depctl.type = p_endpoint_desc->bmAttributes.xfer;
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	78db      	ldrb	r3, [r3, #3]
 8008d16:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008d1a:	b2da      	uxtb	r2, r3
 8008d1c:	7bbb      	ldrb	r3, [r7, #14]
 8008d1e:	f362 0383 	bfi	r3, r2, #2, #2
 8008d22:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	78db      	ldrb	r3, [r3, #3]
 8008d28:	f003 0303 	and.w	r3, r3, #3
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d003      	beq.n	8008d3a <edpt_activate+0xbe>
    depctl.set_data0_iso_even = 1;
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
 8008d34:	f043 0310 	orr.w	r3, r3, #16
 8008d38:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 8008d3a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d108      	bne.n	8008d54 <edpt_activate+0xd8>
    depctl.tx_fifo_num = epnum;
 8008d42:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008d46:	f003 030f 	and.w	r3, r3, #15
 8008d4a:	b2da      	uxtb	r2, r3
 8008d4c:	89fb      	ldrh	r3, [r7, #14]
 8008d4e:	f362 1389 	bfi	r3, r2, #6, #4
 8008d52:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8008d54:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	bf14      	ite	ne
 8008d5c:	2301      	movne	r3, #1
 8008d5e:	2300      	moveq	r3, #0
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	461a      	mov	r2, r3
 8008d64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008d68:	0112      	lsls	r2, r2, #4
 8008d6a:	4413      	add	r3, r2
 8008d6c:	3348      	adds	r3, #72	@ 0x48
 8008d6e:	015b      	lsls	r3, r3, #5
 8008d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d72:	4413      	add	r3, r2
 8008d74:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7e:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 8008d82:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008d86:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8008d8a:	2901      	cmp	r1, #1
 8008d8c:	d101      	bne.n	8008d92 <edpt_activate+0x116>
 8008d8e:	2100      	movs	r1, #0
 8008d90:	e000      	b.n	8008d94 <edpt_activate+0x118>
 8008d92:	2110      	movs	r1, #16
 8008d94:	440b      	add	r3, r1
 8008d96:	2101      	movs	r1, #1
 8008d98:	fa01 f303 	lsl.w	r3, r1, r3
 8008d9c:	431a      	orrs	r2, r3
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da0:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 8008da4:	bf00      	nop
 8008da6:	372c      	adds	r7, #44	@ 0x2c
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr
 8008db0:	0800c86c 	.word	0x0800c86c
 8008db4:	20000cb0 	.word	0x20000cb0

08008db8 <edpt_disable>:

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 8008db8:	b480      	push	{r7}
 8008dba:	b089      	sub	sp, #36	@ 0x24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	71fb      	strb	r3, [r7, #7]
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	71bb      	strb	r3, [r7, #6]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	717b      	strb	r3, [r7, #5]
 8008dca:	79fb      	ldrb	r3, [r7, #7]
 8008dcc:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008dce:	7c7b      	ldrb	r3, [r7, #17]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <edpt_disable+0x20>
    rhport = 0;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008dd8:	7c7b      	ldrb	r3, [r7, #17]
 8008dda:	4a5b      	ldr	r2, [pc, #364]	@ (8008f48 <edpt_disable+0x190>)
 8008ddc:	011b      	lsls	r3, r3, #4
 8008dde:	4413      	add	r3, r2
 8008de0:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008de2:	61fb      	str	r3, [r7, #28]
 8008de4:	79bb      	ldrb	r3, [r7, #6]
 8008de6:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008de8:	7cbb      	ldrb	r3, [r7, #18]
 8008dea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dee:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8008df0:	76fb      	strb	r3, [r7, #27]
 8008df2:	79bb      	ldrb	r3, [r7, #6]
 8008df4:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008df6:	7cfb      	ldrb	r3, [r7, #19]
 8008df8:	09db      	lsrs	r3, r3, #7
 8008dfa:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8008dfc:	76bb      	strb	r3, [r7, #26]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8008dfe:	7ebb      	ldrb	r3, [r7, #26]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	bf14      	ite	ne
 8008e04:	2301      	movne	r3, #1
 8008e06:	2300      	moveq	r3, #0
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	7efb      	ldrb	r3, [r7, #27]
 8008e0e:	0112      	lsls	r2, r2, #4
 8008e10:	4413      	add	r3, r2
 8008e12:	3348      	adds	r3, #72	@ 0x48
 8008e14:	015b      	lsls	r3, r3, #5
 8008e16:	69fa      	ldr	r2, [r7, #28]
 8008e18:	4413      	add	r3, r2
 8008e1a:	617b      	str	r3, [r7, #20]

  if (dir == TUSB_DIR_IN) {
 8008e1c:	7ebb      	ldrb	r3, [r7, #26]
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d149      	bne.n	8008eb6 <edpt_disable+0xfe>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 8008e22:	7efb      	ldrb	r3, [r7, #27]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d003      	beq.n	8008e30 <edpt_disable+0x78>
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	db0d      	blt.n	8008e4c <edpt_disable+0x94>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	797a      	ldrb	r2, [r7, #5]
 8008e36:	2a00      	cmp	r2, #0
 8008e38:	d002      	beq.n	8008e40 <edpt_disable+0x88>
 8008e3a:	f04f 6202 	mov.w	r2, #136314880	@ 0x8200000
 8008e3e:	e001      	b.n	8008e44 <edpt_disable+0x8c>
 8008e40:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008e44:	431a      	orrs	r2, r3
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	601a      	str	r2, [r3, #0]
 8008e4a:	e022      	b.n	8008e92 <edpt_disable+0xda>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      dep->diepctl |= DIEPCTL_SNAK;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 8008e58:	bf00      	nop
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d0f9      	beq.n	8008e5a <edpt_disable+0xa2>

      // Disable the endpoint.
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	797a      	ldrb	r2, [r7, #5]
 8008e6c:	2a00      	cmp	r2, #0
 8008e6e:	d001      	beq.n	8008e74 <edpt_disable+0xbc>
 8008e70:	4a36      	ldr	r2, [pc, #216]	@ (8008f4c <edpt_disable+0x194>)
 8008e72:	e001      	b.n	8008e78 <edpt_disable+0xc0>
 8008e74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 8008e7e:	bf00      	nop
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	f003 0302 	and.w	r3, r3, #2
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d0f9      	beq.n	8008e80 <edpt_disable+0xc8>

      dep->diepint = DIEPINT_EPDISD;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	2202      	movs	r2, #2
 8008e90:	609a      	str	r2, [r3, #8]
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	60fb      	str	r3, [r7, #12]
 8008e96:	7efb      	ldrb	r3, [r7, #27]
 8008e98:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8008e9a:	7afb      	ldrb	r3, [r7, #11]
 8008e9c:	019b      	lsls	r3, r3, #6
 8008e9e:	f043 0220 	orr.w	r2, r3, #32
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8008ea6:	bf00      	nop
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	f003 0320 	and.w	r3, r3, #32
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1f9      	bne.n	8008ea8 <edpt_disable+0xf0>
}
 8008eb4:	e041      	b.n	8008f3a <edpt_disable+0x182>

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dfifo_flush_tx(dwc2, epnum);
  } else {
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 8008eb6:	7efb      	ldrb	r3, [r7, #27]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d003      	beq.n	8008ec4 <edpt_disable+0x10c>
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	db0c      	blt.n	8008ede <edpt_disable+0x126>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	797a      	ldrb	r2, [r7, #5]
 8008eca:	2a00      	cmp	r2, #0
 8008ecc:	d002      	beq.n	8008ed4 <edpt_disable+0x11c>
 8008ece:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8008ed2:	e000      	b.n	8008ed6 <edpt_disable+0x11e>
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	431a      	orrs	r2, r3
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	e02d      	b.n	8008f3a <edpt_disable+0x182>
    } else {
      // Asserting GONAK is required to STALL an OUT endpoint.
      // Simpler to use polling here, we don't use the "B"OUTNAKEFF interrupt
      // anyway, and it can't be cleared by user code. If this while loop never
      // finishes, we have bigger problems than just the stack.
      dwc2->dctl |= DCTL_SGONAK;
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8008ee4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 8008eee:	bf00      	nop
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	695b      	ldr	r3, [r3, #20]
 8008ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d0f9      	beq.n	8008ef0 <edpt_disable+0x138>

      // Ditto here disable the endpoint.
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	797a      	ldrb	r2, [r7, #5]
 8008f02:	2a00      	cmp	r2, #0
 8008f04:	d001      	beq.n	8008f0a <edpt_disable+0x152>
 8008f06:	4a11      	ldr	r2, [pc, #68]	@ (8008f4c <edpt_disable+0x194>)
 8008f08:	e001      	b.n	8008f0e <edpt_disable+0x156>
 8008f0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	601a      	str	r2, [r3, #0]
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 8008f14:	bf00      	nop
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	f003 0302 	and.w	r3, r3, #2
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d0f9      	beq.n	8008f16 <edpt_disable+0x15e>

      dep->doepint = DOEPINT_EPDISD;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	2202      	movs	r2, #2
 8008f26:	609a      	str	r2, [r3, #8]

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8008f2e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
  }
}
 8008f38:	bf00      	nop
 8008f3a:	bf00      	nop
 8008f3c:	3724      	adds	r7, #36	@ 0x24
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	0800c86c 	.word	0x0800c86c
 8008f4c:	40200000 	.word	0x40200000

08008f50 <edpt_schedule_packets>:

// Since this function returns void, it is not possible to return a boolean success message
// We must make sure that this function is not called when the EP is disabled
// Must be called from critical section
static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b090      	sub	sp, #64	@ 0x40
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	4603      	mov	r3, r0
 8008f58:	71fb      	strb	r3, [r7, #7]
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	71bb      	strb	r3, [r7, #6]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	717b      	strb	r3, [r7, #5]
 8008f62:	79fb      	ldrb	r3, [r7, #7]
 8008f64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008f68:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <edpt_schedule_packets+0x26>
    rhport = 0;
 8008f70:	2300      	movs	r3, #0
 8008f72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008f76:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008f7a:	4a65      	ldr	r2, [pc, #404]	@ (8009110 <edpt_schedule_packets+0x1c0>)
 8008f7c:	011b      	lsls	r3, r3, #4
 8008f7e:	4413      	add	r3, r2
 8008f80:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008f82:	63bb      	str	r3, [r7, #56]	@ 0x38
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 8008f84:	79ba      	ldrb	r2, [r7, #6]
 8008f86:	797b      	ldrb	r3, [r7, #5]
 8008f88:	0052      	lsls	r2, r2, #1
 8008f8a:	4413      	add	r3, r2
 8008f8c:	011b      	lsls	r3, r3, #4
 8008f8e:	4a61      	ldr	r2, [pc, #388]	@ (8009114 <edpt_schedule_packets+0x1c4>)
 8008f90:	4413      	add	r3, r2
 8008f92:	637b      	str	r3, [r7, #52]	@ 0x34
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8008f94:	797b      	ldrb	r3, [r7, #5]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	bf14      	ite	ne
 8008f9a:	2301      	movne	r3, #1
 8008f9c:	2300      	moveq	r3, #0
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	79bb      	ldrb	r3, [r7, #6]
 8008fa4:	0112      	lsls	r2, r2, #4
 8008fa6:	4413      	add	r3, r2
 8008fa8:	3348      	adds	r3, #72	@ 0x48
 8008faa:	015b      	lsls	r3, r3, #5
 8008fac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008fae:	4413      	add	r3, r2
 8008fb0:	633b      	str	r3, [r7, #48]	@ 0x30

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 8008fb2:	79bb      	ldrb	r3, [r7, #6]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d11c      	bne.n	8008ff2 <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 8008fb8:	797b      	ldrb	r3, [r7, #5]
 8008fba:	4a57      	ldr	r2, [pc, #348]	@ (8009118 <edpt_schedule_packets+0x1c8>)
 8008fbc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fc2:	895b      	ldrh	r3, [r3, #10]
 8008fc4:	853a      	strh	r2, [r7, #40]	@ 0x28
 8008fc6:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008fc8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008fca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	bf28      	it	cs
 8008fd0:	4613      	movcs	r3, r2
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    _dcd_data.ep0_pending[dir] -= total_bytes;
 8008fd6:	797b      	ldrb	r3, [r7, #5]
 8008fd8:	4a4f      	ldr	r2, [pc, #316]	@ (8009118 <edpt_schedule_packets+0x1c8>)
 8008fda:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8008fde:	797b      	ldrb	r3, [r7, #5]
 8008fe0:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8008fe2:	1a8a      	subs	r2, r1, r2
 8008fe4:	b291      	uxth	r1, r2
 8008fe6:	4a4c      	ldr	r2, [pc, #304]	@ (8009118 <edpt_schedule_packets+0x1c8>)
 8008fe8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 8008fec:	2301      	movs	r3, #1
 8008fee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008ff0:	e014      	b.n	800901c <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 8008ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ff4:	891b      	ldrh	r3, [r3, #8]
 8008ff6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 8008ff8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008ffa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ffc:	8952      	ldrh	r2, [r2, #10]
 8008ffe:	623b      	str	r3, [r7, #32]
 8009000:	61fa      	str	r2, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8009002:	6a3a      	ldr	r2, [r7, #32]
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	4413      	add	r3, r2
 8009008:	1e5a      	subs	r2, r3, #1
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009010:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if (num_packets == 0) {
 8009012:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009014:	2b00      	cmp	r3, #0
 8009016:	d101      	bne.n	800901c <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 8009018:	2301      	movs	r3, #1
 800901a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }
  }

  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  dwc2_ep_tsize_t deptsiz = {.value = 0};
 800901c:	2300      	movs	r3, #0
 800901e:	617b      	str	r3, [r7, #20]
  deptsiz.xfer_size = total_bytes;
 8009020:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8009022:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f362 0312 	bfi	r3, r2, #0, #19
 800902c:	617b      	str	r3, [r7, #20]
  deptsiz.packet_count = num_packets;
 800902e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009034:	b29a      	uxth	r2, r3
 8009036:	8afb      	ldrh	r3, [r7, #22]
 8009038:	f362 03cc 	bfi	r3, r2, #3, #10
 800903c:	82fb      	strh	r3, [r7, #22]
  dep->tsiz = deptsiz.value;
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009042:	611a      	str	r2, [r3, #16]

  // control
  dwc2_depctl_t depctl = {.value = dep->ctl};
 8009044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	613b      	str	r3, [r7, #16]
  depctl.clear_nak = 1;
 800904a:	7cfb      	ldrb	r3, [r7, #19]
 800904c:	f043 0304 	orr.w	r3, r3, #4
 8009050:	74fb      	strb	r3, [r7, #19]
  depctl.enable = 1;
 8009052:	7cfb      	ldrb	r3, [r7, #19]
 8009054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009058:	74fb      	strb	r3, [r7, #19]
  if (depctl.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 800905a:	7cbb      	ldrb	r3, [r7, #18]
 800905c:	f003 030c 	and.w	r3, r3, #12
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b04      	cmp	r3, #4
 8009064:	d11a      	bne.n	800909c <edpt_schedule_packets+0x14c>
 8009066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009068:	7b1b      	ldrb	r3, [r3, #12]
 800906a:	2b01      	cmp	r3, #1
 800906c:	d116      	bne.n	800909c <edpt_schedule_packets+0x14c>
    const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 800906e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009070:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8009074:	60bb      	str	r3, [r7, #8]
    const uint32_t odd_now = dsts.frame_number & 1u;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800907c:	b29b      	uxth	r3, r3
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (odd_now) {
 8009084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009086:	2b00      	cmp	r3, #0
 8009088:	d004      	beq.n	8009094 <edpt_schedule_packets+0x144>
      depctl.set_data0_iso_even = 1;
 800908a:	7cfb      	ldrb	r3, [r7, #19]
 800908c:	f043 0310 	orr.w	r3, r3, #16
 8009090:	74fb      	strb	r3, [r7, #19]
 8009092:	e003      	b.n	800909c <edpt_schedule_packets+0x14c>
    } else {
      depctl.set_data1_iso_odd = 1;
 8009094:	7cfb      	ldrb	r3, [r7, #19]
 8009096:	f043 0320 	orr.w	r3, r3, #32
 800909a:	74fb      	strb	r3, [r7, #19]
 800909c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909e:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090a4:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 80090a6:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 80090a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if(is_dma) {
 80090ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d015      	beq.n	80090e0 <edpt_schedule_packets+0x190>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 80090b4:	797b      	ldrb	r3, [r7, #5]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d109      	bne.n	80090ce <edpt_schedule_packets+0x17e>
 80090ba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d006      	beq.n	80090ce <edpt_schedule_packets+0x17e>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 80090c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80090c6:	4611      	mov	r1, r2
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fd fd5c 	bl	8006b86 <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 80090ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d6:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 80090d8:	693a      	ldr	r2, [r7, #16]
 80090da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090dc:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 80090de:	e013      	b.n	8009108 <edpt_schedule_packets+0x1b8>
    dep->diepctl = depctl.value; // enable endpoint
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e4:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 80090e6:	797b      	ldrb	r3, [r7, #5]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d10d      	bne.n	8009108 <edpt_schedule_packets+0x1b8>
 80090ec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00a      	beq.n	8009108 <edpt_schedule_packets+0x1b8>
      dwc2->diepempmsk |= (1 << epnum);
 80090f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f4:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 80090f8:	79ba      	ldrb	r2, [r7, #6]
 80090fa:	2101      	movs	r1, #1
 80090fc:	fa01 f202 	lsl.w	r2, r1, r2
 8009100:	431a      	orrs	r2, r3
 8009102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009104:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 8009108:	bf00      	nop
 800910a:	3740      	adds	r7, #64	@ 0x40
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	0800c86c 	.word	0x0800c86c
 8009114:	20000cb0 	.word	0x20000cb0
 8009118:	20000d30 	.word	0x20000d30

0800911c <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800911c:	b580      	push	{r7, lr}
 800911e:	b08c      	sub	sp, #48	@ 0x30
 8009120:	af00      	add	r7, sp, #0
 8009122:	4603      	mov	r3, r0
 8009124:	6039      	str	r1, [r7, #0]
 8009126:	71fb      	strb	r3, [r7, #7]
 8009128:	79fb      	ldrb	r3, [r7, #7]
 800912a:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800912c:	7dfb      	ldrb	r3, [r7, #23]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <dcd_init+0x1a>
    rhport = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009136:	7dfb      	ldrb	r3, [r7, #23]
 8009138:	4a43      	ldr	r2, [pc, #268]	@ (8009248 <dcd_init+0x12c>)
 800913a:	011b      	lsls	r3, r3, #4
 800913c:	4413      	add	r3, r2
 800913e:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009140:	62bb      	str	r3, [r7, #40]	@ 0x28

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 8009142:	2208      	movs	r2, #8
 8009144:	2100      	movs	r1, #0
 8009146:	4841      	ldr	r0, [pc, #260]	@ (800924c <dcd_init+0x130>)
 8009148:	f001 fe7b 	bl	800ae42 <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 800914c:	2101      	movs	r1, #1
 800914e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009150:	f001 f9c6 	bl	800a4e0 <dwc2_core_is_highspeed>
 8009154:	4603      	mov	r3, r0
 8009156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800915a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915c:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009162:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8009164:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 8009166:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 800916a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800916e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8009172:	79fb      	ldrb	r3, [r7, #7]
 8009174:	4618      	mov	r0, r3
 8009176:	f001 f9d1 	bl	800a51c <dwc2_core_init>
 800917a:	4603      	mov	r3, r0
 800917c:	f083 0301 	eor.w	r3, r3, #1
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00a      	beq.n	800919c <dcd_init+0x80>
 8009186:	4b32      	ldr	r3, [pc, #200]	@ (8009250 <dcd_init+0x134>)
 8009188:	61fb      	str	r3, [r7, #28]
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0301 	and.w	r3, r3, #1
 8009192:	2b00      	cmp	r3, #0
 8009194:	d000      	beq.n	8009198 <dcd_init+0x7c>
 8009196:	be00      	bkpt	0x0000
 8009198:	2300      	movs	r3, #0
 800919a:	e050      	b.n	800923e <dcd_init+0x122>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 800919c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 80091a2:	f023 0303 	bic.w	r3, r3, #3
 80091a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (is_highspeed) {
 80091a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00d      	beq.n	80091cc <dcd_init+0xb0>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80091b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091b4:	60fb      	str	r3, [r7, #12]
    if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 80091b6:	7b3b      	ldrb	r3, [r7, #12]
 80091b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	2b80      	cmp	r3, #128	@ 0x80
 80091c0:	d108      	bne.n	80091d4 <dcd_init+0xb8>
      dcfg |= DCFG_XCVRDLY;
 80091c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80091c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091ca:	e003      	b.n	80091d4 <dcd_init+0xb8>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 80091cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ce:	f043 0303 	orr.w	r3, r3, #3
 80091d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 80091d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091d6:	f043 0304 	orr.w	r3, r3, #4
 80091da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2->dcfg = dcfg;
 80091dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091e0:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 80091e4:	79fb      	ldrb	r3, [r7, #7]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 f92a 	bl	8009440 <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 80091ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80091f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80091f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fa:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 80091fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8009204:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 8009208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800920a:	601a      	str	r2, [r3, #0]
  // No hardware detection of Vbus B-session is available on the STM32N6
  dwc2->stm32_gccfg |= STM32_GCCFG_VBVALOVAL;
#endif

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 800920c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800920e:	699a      	ldr	r2, [r3, #24]
 8009210:	4b10      	ldr	r3, [pc, #64]	@ (8009254 <dcd_init+0x138>)
 8009212:	4313      	orrs	r3, r2
 8009214:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009216:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 8009218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009224:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 8009226:	6a3b      	ldr	r3, [r7, #32]
 8009228:	f043 0301 	orr.w	r3, r3, #1
 800922c:	623b      	str	r3, [r7, #32]
  dwc2->gahbcfg = gahbcfg;
 800922e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009230:	6a3a      	ldr	r2, [r7, #32]
 8009232:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 8009234:	79fb      	ldrb	r3, [r7, #7]
 8009236:	4618      	mov	r0, r3
 8009238:	f000 f8e0 	bl	80093fc <dcd_connect>
  return true;
 800923c:	2301      	movs	r3, #1
}
 800923e:	4618      	mov	r0, r3
 8009240:	3730      	adds	r7, #48	@ 0x30
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	0800c86c 	.word	0x0800c86c
 800924c:	20000d30 	.word	0x20000d30
 8009250:	e000edf0 	.word	0xe000edf0
 8009254:	80003804 	.word	0x80003804

08009258 <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	71fb      	strb	r3, [r7, #7]
 8009262:	79fb      	ldrb	r3, [r7, #7]
 8009264:	73fb      	strb	r3, [r7, #15]
 8009266:	2301      	movs	r3, #1
 8009268:	73bb      	strb	r3, [r7, #14]
 800926a:	2301      	movs	r3, #1
 800926c:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800926e:	7bfb      	ldrb	r3, [r7, #15]
 8009270:	4a0c      	ldr	r2, [pc, #48]	@ (80092a4 <dcd_int_enable+0x4c>)
 8009272:	011b      	lsls	r3, r3, #4
 8009274:	4413      	add	r3, r2
 8009276:	3304      	adds	r3, #4
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800927c:	7b7b      	ldrb	r3, [r7, #13]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d005      	beq.n	800928e <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 8009282:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009286:	4618      	mov	r0, r3
 8009288:	f7ff fb3e 	bl	8008908 <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 800928c:	e004      	b.n	8009298 <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 800928e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009292:	4618      	mov	r0, r3
 8009294:	f7ff fb56 	bl	8008944 <__NVIC_DisableIRQ>
}
 8009298:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 800929a:	bf00      	nop
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	0800c86c 	.word	0x0800c86c

080092a8 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	4603      	mov	r3, r0
 80092b0:	71fb      	strb	r3, [r7, #7]
 80092b2:	79fb      	ldrb	r3, [r7, #7]
 80092b4:	73fb      	strb	r3, [r7, #15]
 80092b6:	2301      	movs	r3, #1
 80092b8:	73bb      	strb	r3, [r7, #14]
 80092ba:	2300      	movs	r3, #0
 80092bc:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 80092be:	7bfb      	ldrb	r3, [r7, #15]
 80092c0:	4a0c      	ldr	r2, [pc, #48]	@ (80092f4 <dcd_int_disable+0x4c>)
 80092c2:	011b      	lsls	r3, r3, #4
 80092c4:	4413      	add	r3, r2
 80092c6:	3304      	adds	r3, #4
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 80092cc:	7b7b      	ldrb	r3, [r7, #13]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d005      	beq.n	80092de <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 80092d2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7ff fb16 	bl	8008908 <__NVIC_EnableIRQ>
}
 80092dc:	e004      	b.n	80092e8 <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 80092de:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7ff fb2e 	bl	8008944 <__NVIC_DisableIRQ>
}
 80092e8:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 80092ea:	bf00      	nop
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	0800c86c 	.word	0x0800c86c

080092f8 <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	4603      	mov	r3, r0
 8009300:	460a      	mov	r2, r1
 8009302:	71fb      	strb	r3, [r7, #7]
 8009304:	4613      	mov	r3, r2
 8009306:	71bb      	strb	r3, [r7, #6]
 8009308:	79fb      	ldrb	r3, [r7, #7]
 800930a:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800930c:	7a7b      	ldrb	r3, [r7, #9]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d001      	beq.n	8009316 <dcd_set_address+0x1e>
    rhport = 0;
 8009312:	2300      	movs	r3, #0
 8009314:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009316:	7a7b      	ldrb	r3, [r7, #9]
 8009318:	4a14      	ldr	r2, [pc, #80]	@ (800936c <dcd_set_address+0x74>)
 800931a:	011b      	lsls	r3, r3, #4
 800931c:	4413      	add	r3, r2
 800931e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009320:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8009328:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 800932c:	79bb      	ldrb	r3, [r7, #6]
 800932e:	011b      	lsls	r3, r3, #4
 8009330:	431a      	orrs	r2, r3
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 8009338:	2300      	movs	r3, #0
 800933a:	72fb      	strb	r3, [r7, #11]
 800933c:	2301      	movs	r3, #1
 800933e:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8009340:	7abb      	ldrb	r3, [r7, #10]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d002      	beq.n	800934c <dcd_set_address+0x54>
 8009346:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800934a:	e000      	b.n	800934e <dcd_set_address+0x56>
 800934c:	2300      	movs	r3, #0
 800934e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8009352:	4313      	orrs	r3, r2
 8009354:	b25b      	sxtb	r3, r3
 8009356:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8009358:	79f8      	ldrb	r0, [r7, #7]
 800935a:	2300      	movs	r3, #0
 800935c:	2200      	movs	r2, #0
 800935e:	f000 f98b 	bl	8009678 <dcd_edpt_xfer>
}
 8009362:	bf00      	nop
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	0800c86c 	.word	0x0800c86c

08009370 <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 8009370:	b480      	push	{r7}
 8009372:	b087      	sub	sp, #28
 8009374:	af00      	add	r7, sp, #0
 8009376:	4603      	mov	r3, r0
 8009378:	71fb      	strb	r3, [r7, #7]
 800937a:	79fb      	ldrb	r3, [r7, #7]
 800937c:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800937e:	7bfb      	ldrb	r3, [r7, #15]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <dcd_remote_wakeup+0x18>
    rhport = 0;
 8009384:	2300      	movs	r3, #0
 8009386:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009388:	7bfb      	ldrb	r3, [r7, #15]
 800938a:	4a19      	ldr	r2, [pc, #100]	@ (80093f0 <dcd_remote_wakeup+0x80>)
 800938c:	011b      	lsls	r3, r3, #4
 800938e:	4413      	add	r3, r2
 8009390:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009392:	617b      	str	r3, [r7, #20]

  // set remote wakeup
  dwc2->dctl |= DCTL_RWUSIG;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800939a:	f043 0201 	orr.w	r2, r3, #1
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  // enable SOF to detect bus resume
  dwc2->gintsts = GINTSTS_SOF;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	2208      	movs	r2, #8
 80093a8:	615a      	str	r2, [r3, #20]
  dwc2->gintmsk |= GINTMSK_SOFM;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	f043 0208 	orr.w	r2, r3, #8
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	619a      	str	r2, [r3, #24]
#define dwc2_dcd_int_disable(_rhport) dwc2_int_set(_rhport, TUSB_ROLE_DEVICE, false)


TU_ATTR_ALWAYS_INLINE static inline void dwc2_remote_wakeup_delay(void) {
  // try to delay for 1 ms
  uint32_t count = SystemCoreClock / 1000;
 80093b6:	4b0f      	ldr	r3, [pc, #60]	@ (80093f4 <dcd_remote_wakeup+0x84>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a0f      	ldr	r2, [pc, #60]	@ (80093f8 <dcd_remote_wakeup+0x88>)
 80093bc:	fba2 2303 	umull	r2, r3, r2, r3
 80093c0:	099b      	lsrs	r3, r3, #6
 80093c2:	613b      	str	r3, [r7, #16]
  while (count--) __NOP();
 80093c4:	e000      	b.n	80093c8 <dcd_remote_wakeup+0x58>
 80093c6:	bf00      	nop
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	1e5a      	subs	r2, r3, #1
 80093cc:	613a      	str	r2, [r7, #16]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1f9      	bne.n	80093c6 <dcd_remote_wakeup+0x56>
}
 80093d2:	bf00      	nop

  // Per specs: remote wakeup signal bit must be clear within 1-15ms
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80093da:	f023 0201 	bic.w	r2, r3, #1
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 80093e4:	bf00      	nop
 80093e6:	371c      	adds	r7, #28
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	0800c86c 	.word	0x0800c86c
 80093f4:	20000048 	.word	0x20000048
 80093f8:	10624dd3 	.word	0x10624dd3

080093fc <dcd_connect>:

void dcd_connect(uint8_t rhport) {
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	4603      	mov	r3, r0
 8009404:	71fb      	strb	r3, [r7, #7]
 8009406:	79fb      	ldrb	r3, [r7, #7]
 8009408:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800940a:	7afb      	ldrb	r3, [r7, #11]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <dcd_connect+0x18>
    rhport = 0;
 8009410:	2300      	movs	r3, #0
 8009412:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009414:	7afb      	ldrb	r3, [r7, #11]
 8009416:	4a09      	ldr	r2, [pc, #36]	@ (800943c <dcd_connect+0x40>)
 8009418:	011b      	lsls	r3, r3, #4
 800941a:	4413      	add	r3, r2
 800941c:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800941e:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8009426:	f023 0202 	bic.w	r2, r3, #2
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8009430:	bf00      	nop
 8009432:	3714      	adds	r7, #20
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr
 800943c:	0800c86c 	.word	0x0800c86c

08009440 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	4603      	mov	r3, r0
 8009448:	71fb      	strb	r3, [r7, #7]
 800944a:	79fb      	ldrb	r3, [r7, #7]
 800944c:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800944e:	7afb      	ldrb	r3, [r7, #11]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d001      	beq.n	8009458 <dcd_disconnect+0x18>
    rhport = 0;
 8009454:	2300      	movs	r3, #0
 8009456:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009458:	7afb      	ldrb	r3, [r7, #11]
 800945a:	4a09      	ldr	r2, [pc, #36]	@ (8009480 <dcd_disconnect+0x40>)
 800945c:	011b      	lsls	r3, r3, #4
 800945e:	4413      	add	r3, r2
 8009460:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009462:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800946a:	f043 0202 	orr.w	r2, r3, #2
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8009474:	bf00      	nop
 8009476:	3714      	adds	r7, #20
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr
 8009480:	0800c86c 	.word	0x0800c86c

08009484 <dcd_sof_enable>:

// Be advised: audio, video and possibly other iso-ep classes use dcd_sof_enable() to enable/disable its corresponding ISR on purpose!
void dcd_sof_enable(uint8_t rhport, bool en) {
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	4603      	mov	r3, r0
 800948c:	460a      	mov	r2, r1
 800948e:	71fb      	strb	r3, [r7, #7]
 8009490:	4613      	mov	r3, r2
 8009492:	71bb      	strb	r3, [r7, #6]
 8009494:	79fb      	ldrb	r3, [r7, #7]
 8009496:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009498:	7afb      	ldrb	r3, [r7, #11]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <dcd_sof_enable+0x1e>
    rhport = 0;
 800949e:	2300      	movs	r3, #0
 80094a0:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80094a2:	7afb      	ldrb	r3, [r7, #11]
 80094a4:	4a10      	ldr	r2, [pc, #64]	@ (80094e8 <dcd_sof_enable+0x64>)
 80094a6:	011b      	lsls	r3, r3, #4
 80094a8:	4413      	add	r3, r2
 80094aa:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80094ac:	60fb      	str	r3, [r7, #12]

  _dcd_data.sof_en = en;
 80094ae:	4a0f      	ldr	r2, [pc, #60]	@ (80094ec <dcd_sof_enable+0x68>)
 80094b0:	79bb      	ldrb	r3, [r7, #6]
 80094b2:	71d3      	strb	r3, [r2, #7]

  if (en) {
 80094b4:	79bb      	ldrb	r3, [r7, #6]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d009      	beq.n	80094ce <dcd_sof_enable+0x4a>
    dwc2->gintsts = GINTSTS_SOF;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2208      	movs	r2, #8
 80094be:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	f043 0208 	orr.w	r2, r3, #8
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	619a      	str	r2, [r3, #24]
  } else {
    dwc2->gintmsk &= ~GINTMSK_SOFM;
  }
}
 80094cc:	e005      	b.n	80094da <dcd_sof_enable+0x56>
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	f023 0208 	bic.w	r2, r3, #8
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	619a      	str	r2, [r3, #24]
}
 80094da:	bf00      	nop
 80094dc:	3714      	adds	r7, #20
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	0800c86c 	.word	0x0800c86c
 80094ec:	20000d30 	.word	0x20000d30

080094f0 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	4603      	mov	r3, r0
 80094f8:	6039      	str	r1, [r7, #0]
 80094fa:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	7899      	ldrb	r1, [r3, #2]
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	889b      	ldrh	r3, [r3, #4]
 8009508:	b29b      	uxth	r3, r3
 800950a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800950e:	b29a      	uxth	r2, r3
 8009510:	79fb      	ldrb	r3, [r7, #7]
 8009512:	4618      	mov	r0, r3
 8009514:	f7ff fa76 	bl	8008a04 <dfifo_alloc>
 8009518:	4603      	mov	r3, r0
 800951a:	f083 0301 	eor.w	r3, r3, #1
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00a      	beq.n	800953a <dcd_edpt_open+0x4a>
 8009524:	4b0a      	ldr	r3, [pc, #40]	@ (8009550 <dcd_edpt_open+0x60>)
 8009526:	60fb      	str	r3, [r7, #12]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	2b00      	cmp	r3, #0
 8009532:	d000      	beq.n	8009536 <dcd_edpt_open+0x46>
 8009534:	be00      	bkpt	0x0000
 8009536:	2300      	movs	r3, #0
 8009538:	e005      	b.n	8009546 <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 800953a:	79fb      	ldrb	r3, [r7, #7]
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	4618      	mov	r0, r3
 8009540:	f7ff fb9c 	bl	8008c7c <edpt_activate>
  return true;
 8009544:	2301      	movs	r3, #1
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	e000edf0 	.word	0xe000edf0

08009554 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 8009554:	b580      	push	{r7, lr}
 8009556:	b08a      	sub	sp, #40	@ 0x28
 8009558:	af00      	add	r7, sp, #0
 800955a:	4603      	mov	r3, r0
 800955c:	71fb      	strb	r3, [r7, #7]
 800955e:	79fb      	ldrb	r3, [r7, #7]
 8009560:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009562:	7dfb      	ldrb	r3, [r7, #23]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d001      	beq.n	800956c <dcd_edpt_close_all+0x18>
    rhport = 0;
 8009568:	2300      	movs	r3, #0
 800956a:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800956c:	7dfb      	ldrb	r3, [r7, #23]
 800956e:	4a3f      	ldr	r2, [pc, #252]	@ (800966c <dcd_edpt_close_all+0x118>)
 8009570:	011b      	lsls	r3, r3, #4
 8009572:	4413      	add	r3, r2
 8009574:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009576:	623b      	str	r3, [r7, #32]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8009578:	79fb      	ldrb	r3, [r7, #7]
 800957a:	4a3c      	ldr	r2, [pc, #240]	@ (800966c <dcd_edpt_close_all+0x118>)
 800957c:	011b      	lsls	r3, r3, #4
 800957e:	4413      	add	r3, r2
 8009580:	3308      	adds	r3, #8
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	77fb      	strb	r3, [r7, #31]

  usbd_spin_lock(false);
 8009586:	2000      	movs	r0, #0
 8009588:	f7fe fd4a 	bl	8008020 <usbd_spin_lock>

  _dcd_data.allocated_epin_count = 0;
 800958c:	4b38      	ldr	r3, [pc, #224]	@ (8009670 <dcd_edpt_close_all+0x11c>)
 800958e:	2200      	movs	r2, #0
 8009590:	719a      	strb	r2, [r3, #6]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 8009592:	6a3b      	ldr	r3, [r7, #32]
 8009594:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8009598:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 800959c:	2301      	movs	r3, #1
 800959e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80095a2:	e034      	b.n	800960e <dcd_edpt_close_all+0xba>
    for (uint8_t d = 0; d < 2; d++) {
 80095a4:	2300      	movs	r3, #0
 80095a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80095aa:	e027      	b.n	80095fc <dcd_edpt_close_all+0xa8>
      dwc2_dep_t* dep = &dwc2->ep[d][n];
 80095ac:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80095b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095b4:	0112      	lsls	r2, r2, #4
 80095b6:	4413      	add	r3, r2
 80095b8:	3348      	adds	r3, #72	@ 0x48
 80095ba:	015b      	lsls	r3, r3, #5
 80095bc:	6a3a      	ldr	r2, [r7, #32]
 80095be:	4413      	add	r3, r2
 80095c0:	61bb      	str	r3, [r7, #24]
      if (dep->ctl & EPCTL_EPENA) {
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	da05      	bge.n	80095d6 <dcd_edpt_close_all+0x82>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f043 4290 	orr.w	r2, r3, #1207959552	@ 0x48000000
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	601a      	str	r2, [r3, #0]
      }
      xfer_status[n][1-d].max_size = 0;
 80095d6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80095da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80095de:	f1c3 0301 	rsb	r3, r3, #1
 80095e2:	4924      	ldr	r1, [pc, #144]	@ (8009674 <dcd_edpt_close_all+0x120>)
 80095e4:	0052      	lsls	r2, r2, #1
 80095e6:	4413      	add	r3, r2
 80095e8:	011b      	lsls	r3, r3, #4
 80095ea:	440b      	add	r3, r1
 80095ec:	330a      	adds	r3, #10
 80095ee:	2200      	movs	r2, #0
 80095f0:	801a      	strh	r2, [r3, #0]
    for (uint8_t d = 0; d < 2; d++) {
 80095f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80095f6:	3301      	adds	r3, #1
 80095f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80095fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009600:	2b01      	cmp	r3, #1
 8009602:	d9d3      	bls.n	80095ac <dcd_edpt_close_all+0x58>
  for (uint8_t n = 1; n < ep_count; n++) {
 8009604:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009608:	3301      	adds	r3, #1
 800960a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800960e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009612:	7ffb      	ldrb	r3, [r7, #31]
 8009614:	429a      	cmp	r2, r3
 8009616:	d3c5      	bcc.n	80095a4 <dcd_edpt_close_all+0x50>
 8009618:	6a3b      	ldr	r3, [r7, #32]
 800961a:	60fb      	str	r3, [r7, #12]
 800961c:	2310      	movs	r3, #16
 800961e:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8009620:	7afb      	ldrb	r3, [r7, #11]
 8009622:	019b      	lsls	r3, r3, #6
 8009624:	f043 0220 	orr.w	r2, r3, #32
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800962c:	bf00      	nop
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	f003 0320 	and.w	r3, r3, #32
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1f9      	bne.n	800962e <dcd_edpt_close_all+0xda>
}
 800963a:	bf00      	nop
 800963c:	6a3b      	ldr	r3, [r7, #32]
 800963e:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	2210      	movs	r2, #16
 8009644:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8009646:	bf00      	nop
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	f003 0310 	and.w	r3, r3, #16
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1f9      	bne.n	8009648 <dcd_edpt_close_all+0xf4>
}
 8009654:	bf00      	nop
    }
  }

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport); // re-init dfifo
 8009656:	79fb      	ldrb	r3, [r7, #7]
 8009658:	4618      	mov	r0, r3
 800965a:	f7ff fab5 	bl	8008bc8 <dfifo_device_init>

  usbd_spin_unlock(false);
 800965e:	2000      	movs	r0, #0
 8009660:	f7fe fcf8 	bl	8008054 <usbd_spin_unlock>
}
 8009664:	bf00      	nop
 8009666:	3728      	adds	r7, #40	@ 0x28
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	0800c86c 	.word	0x0800c86c
 8009670:	20000d30 	.word	0x20000d30
 8009674:	20000cb0 	.word	0x20000cb0

08009678 <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	603a      	str	r2, [r7, #0]
 8009680:	461a      	mov	r2, r3
 8009682:	4603      	mov	r3, r0
 8009684:	71fb      	strb	r3, [r7, #7]
 8009686:	460b      	mov	r3, r1
 8009688:	71bb      	strb	r3, [r7, #6]
 800968a:	4613      	mov	r3, r2
 800968c:	80bb      	strh	r3, [r7, #4]
 800968e:	79bb      	ldrb	r3, [r7, #6]
 8009690:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009692:	7bbb      	ldrb	r3, [r7, #14]
 8009694:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009698:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800969a:	75bb      	strb	r3, [r7, #22]
 800969c:	79bb      	ldrb	r3, [r7, #6]
 800969e:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
 80096a2:	09db      	lsrs	r3, r3, #7
 80096a4:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80096a6:	757b      	strb	r3, [r7, #21]
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 80096a8:	7dba      	ldrb	r2, [r7, #22]
 80096aa:	7d7b      	ldrb	r3, [r7, #21]
 80096ac:	0052      	lsls	r2, r2, #1
 80096ae:	4413      	add	r3, r2
 80096b0:	011b      	lsls	r3, r3, #4
 80096b2:	4a17      	ldr	r2, [pc, #92]	@ (8009710 <dcd_edpt_xfer+0x98>)
 80096b4:	4413      	add	r3, r2
 80096b6:	613b      	str	r3, [r7, #16]
  bool ret;

  usbd_spin_lock(false);
 80096b8:	2000      	movs	r0, #0
 80096ba:	f7fe fcb1 	bl	8008020 <usbd_spin_lock>

  if (xfer->max_size == 0) {
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	895b      	ldrh	r3, [r3, #10]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d102      	bne.n	80096cc <dcd_edpt_xfer+0x54>
    ret = false;  // Endpoint is closed
 80096c6:	2300      	movs	r3, #0
 80096c8:	75fb      	strb	r3, [r7, #23]
 80096ca:	e018      	b.n	80096fe <dcd_edpt_xfer+0x86>
  } else {
    xfer->buffer = buffer;
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	601a      	str	r2, [r3, #0]
    xfer->ff = NULL;
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	2200      	movs	r2, #0
 80096d6:	605a      	str	r2, [r3, #4]
    xfer->total_len = total_bytes;
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	88ba      	ldrh	r2, [r7, #4]
 80096dc:	811a      	strh	r2, [r3, #8]

    // EP0 can only handle one packet
    if (epnum == 0) {
 80096de:	7dbb      	ldrb	r3, [r7, #22]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d104      	bne.n	80096ee <dcd_edpt_xfer+0x76>
      _dcd_data.ep0_pending[dir] = total_bytes;
 80096e4:	7d7b      	ldrb	r3, [r7, #21]
 80096e6:	490b      	ldr	r1, [pc, #44]	@ (8009714 <dcd_edpt_xfer+0x9c>)
 80096e8:	88ba      	ldrh	r2, [r7, #4]
 80096ea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir);
 80096ee:	7d7a      	ldrb	r2, [r7, #21]
 80096f0:	7db9      	ldrb	r1, [r7, #22]
 80096f2:	79fb      	ldrb	r3, [r7, #7]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7ff fc2b 	bl	8008f50 <edpt_schedule_packets>
    ret = true;
 80096fa:	2301      	movs	r3, #1
 80096fc:	75fb      	strb	r3, [r7, #23]
  }

  usbd_spin_unlock(false);
 80096fe:	2000      	movs	r0, #0
 8009700:	f7fe fca8 	bl	8008054 <usbd_spin_unlock>

  return ret;
 8009704:	7dfb      	ldrb	r3, [r7, #23]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3718      	adds	r7, #24
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	20000cb0 	.word	0x20000cb0
 8009714:	20000d30 	.word	0x20000d30

08009718 <dcd_edpt_stall>:
  usbd_spin_unlock(false);

  return ret;
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	4603      	mov	r3, r0
 8009720:	460a      	mov	r2, r1
 8009722:	71fb      	strb	r3, [r7, #7]
 8009724:	4613      	mov	r3, r2
 8009726:	71bb      	strb	r3, [r7, #6]
 8009728:	79fb      	ldrb	r3, [r7, #7]
 800972a:	74bb      	strb	r3, [r7, #18]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800972c:	7cbb      	ldrb	r3, [r7, #18]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d001      	beq.n	8009736 <dcd_edpt_stall+0x1e>
    rhport = 0;
 8009732:	2300      	movs	r3, #0
 8009734:	74bb      	strb	r3, [r7, #18]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009736:	7cbb      	ldrb	r3, [r7, #18]
 8009738:	4a11      	ldr	r2, [pc, #68]	@ (8009780 <dcd_edpt_stall+0x68>)
 800973a:	011b      	lsls	r3, r3, #4
 800973c:	4413      	add	r3, r2
 800973e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009740:	617b      	str	r3, [r7, #20]
  edpt_disable(rhport, ep_addr, true);
 8009742:	79b9      	ldrb	r1, [r7, #6]
 8009744:	79fb      	ldrb	r3, [r7, #7]
 8009746:	2201      	movs	r2, #1
 8009748:	4618      	mov	r0, r3
 800974a:	f7ff fb35 	bl	8008db8 <edpt_disable>
 800974e:	79bb      	ldrb	r3, [r7, #6]
 8009750:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009752:	7cfb      	ldrb	r3, [r7, #19]
 8009754:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009758:	b2db      	uxtb	r3, r3
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800975a:	2b00      	cmp	r3, #0
 800975c:	d10b      	bne.n	8009776 <dcd_edpt_stall+0x5e>
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	60fb      	str	r3, [r7, #12]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009766:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8009768:	2300      	movs	r3, #0
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800976a:	2b00      	cmp	r3, #0
 800976c:	d003      	beq.n	8009776 <dcd_edpt_stall+0x5e>
    dma_setup_prepare(rhport);
 800976e:	79fb      	ldrb	r3, [r7, #7]
 8009770:	4618      	mov	r0, r3
 8009772:	f7ff f90b 	bl	800898c <dma_setup_prepare>
  }
}
 8009776:	bf00      	nop
 8009778:	3718      	adds	r7, #24
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	0800c86c 	.word	0x0800c86c

08009784 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 8009784:	b480      	push	{r7}
 8009786:	b087      	sub	sp, #28
 8009788:	af00      	add	r7, sp, #0
 800978a:	4603      	mov	r3, r0
 800978c:	460a      	mov	r2, r1
 800978e:	71fb      	strb	r3, [r7, #7]
 8009790:	4613      	mov	r3, r2
 8009792:	71bb      	strb	r3, [r7, #6]
 8009794:	79fb      	ldrb	r3, [r7, #7]
 8009796:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009798:	7a7b      	ldrb	r3, [r7, #9]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <dcd_edpt_clear_stall+0x1e>
    rhport = 0;
 800979e:	2300      	movs	r3, #0
 80097a0:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80097a2:	7a7b      	ldrb	r3, [r7, #9]
 80097a4:	4a19      	ldr	r2, [pc, #100]	@ (800980c <dcd_edpt_clear_stall+0x88>)
 80097a6:	011b      	lsls	r3, r3, #4
 80097a8:	4413      	add	r3, r2
 80097aa:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80097ac:	617b      	str	r3, [r7, #20]
 80097ae:	79bb      	ldrb	r3, [r7, #6]
 80097b0:	72bb      	strb	r3, [r7, #10]
 80097b2:	7abb      	ldrb	r3, [r7, #10]
 80097b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097b8:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 80097ba:	74fb      	strb	r3, [r7, #19]
 80097bc:	79bb      	ldrb	r3, [r7, #6]
 80097be:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80097c0:	7afb      	ldrb	r3, [r7, #11]
 80097c2:	09db      	lsrs	r3, r3, #7
 80097c4:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80097c6:	74bb      	strb	r3, [r7, #18]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 80097c8:	7cbb      	ldrb	r3, [r7, #18]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	bf14      	ite	ne
 80097ce:	2301      	movne	r3, #1
 80097d0:	2300      	moveq	r3, #0
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	461a      	mov	r2, r3
 80097d6:	7cfb      	ldrb	r3, [r7, #19]
 80097d8:	0112      	lsls	r2, r2, #4
 80097da:	4413      	add	r3, r2
 80097dc:	3348      	adds	r3, #72	@ 0x48
 80097de:	015b      	lsls	r3, r3, #5
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	4413      	add	r3, r2
 80097e4:	60fb      	str	r3, [r7, #12]

  // Clear stall and reset data toggle
  dep->ctl &= ~EPCTL_STALL;;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	601a      	str	r2, [r3, #0]
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	601a      	str	r2, [r3, #0]
}
 80097fe:	bf00      	nop
 8009800:	371c      	adds	r7, #28
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	0800c86c 	.word	0x0800c86c

08009810 <handle_bus_reset>:
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
// Must be called from critical section
static void handle_bus_reset(uint8_t rhport) {
 8009810:	b580      	push	{r7, lr}
 8009812:	b08e      	sub	sp, #56	@ 0x38
 8009814:	af00      	add	r7, sp, #0
 8009816:	4603      	mov	r3, r0
 8009818:	71fb      	strb	r3, [r7, #7]
 800981a:	79fb      	ldrb	r3, [r7, #7]
 800981c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009824:	2b00      	cmp	r3, #0
 8009826:	d002      	beq.n	800982e <handle_bus_reset+0x1e>
    rhport = 0;
 8009828:	2300      	movs	r3, #0
 800982a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800982e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009832:	4a6a      	ldr	r2, [pc, #424]	@ (80099dc <handle_bus_reset+0x1cc>)
 8009834:	011b      	lsls	r3, r3, #4
 8009836:	4413      	add	r3, r2
 8009838:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800983a:	633b      	str	r3, [r7, #48]	@ 0x30
 800983c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983e:	62bb      	str	r3, [r7, #40]	@ 0x28
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009844:	60bb      	str	r3, [r7, #8]
  return ghwcfg2.num_dev_ep + 1;
 8009846:	7a7b      	ldrb	r3, [r7, #9]
 8009848:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800984c:	b2db      	uxtb	r3, r3
 800984e:	3301      	adds	r3, #1
 8009850:	b2db      	uxtb	r3, r3
  const uint8_t ep_count =  dwc2_ep_count(dwc2);
 8009852:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  tu_memclr(xfer_status, sizeof(xfer_status));
 8009856:	2280      	movs	r2, #128	@ 0x80
 8009858:	2100      	movs	r1, #0
 800985a:	4861      	ldr	r0, [pc, #388]	@ (80099e0 <handle_bus_reset+0x1d0>)
 800985c:	f001 faf1 	bl	800ae42 <memset>

  _dcd_data.sof_en = false;
 8009860:	4b60      	ldr	r3, [pc, #384]	@ (80099e4 <handle_bus_reset+0x1d4>)
 8009862:	2200      	movs	r2, #0
 8009864:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 8009866:	4b5f      	ldr	r3, [pc, #380]	@ (80099e4 <handle_bus_reset+0x1d4>)
 8009868:	2200      	movs	r2, #0
 800986a:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800986c:	2300      	movs	r3, #0
 800986e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009872:	e014      	b.n	800989e <handle_bus_reset+0x8e>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8009874:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009878:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800987a:	3358      	adds	r3, #88	@ 0x58
 800987c:	015b      	lsls	r3, r3, #5
 800987e:	4413      	add	r3, r2
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009886:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800988a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800988c:	3358      	adds	r3, #88	@ 0x58
 800988e:	015b      	lsls	r3, r3, #5
 8009890:	440b      	add	r3, r1
 8009892:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 8009894:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009898:	3301      	adds	r3, #1
 800989a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800989e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80098a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d3e4      	bcc.n	8009874 <handle_bus_reset+0x64>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 80098aa:	2300      	movs	r3, #0
 80098ac:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80098b0:	e01d      	b.n	80098ee <handle_bus_reset+0xde>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 80098b2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80098b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098b8:	3348      	adds	r3, #72	@ 0x48
 80098ba:	015b      	lsls	r3, r3, #5
 80098bc:	4413      	add	r3, r2
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	da0f      	bge.n	80098e4 <handle_bus_reset+0xd4>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 80098c4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80098c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098ca:	3348      	adds	r3, #72	@ 0x48
 80098cc:	015b      	lsls	r3, r3, #5
 80098ce:	4413      	add	r3, r2
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80098d6:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 80098da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80098dc:	3348      	adds	r3, #72	@ 0x48
 80098de:	015b      	lsls	r3, r3, #5
 80098e0:	440b      	add	r3, r1
 80098e2:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 80098e4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80098e8:	3301      	adds	r3, #1
 80098ea:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80098ee:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80098f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d3db      	bcc.n	80098b2 <handle_bus_reset+0xa2>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 80098fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098fc:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8009900:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8009904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009906:	2209      	movs	r2, #9
 8009908:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 800990c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990e:	2209      	movs	r2, #9
 8009910:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 8009914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009916:	61bb      	str	r3, [r7, #24]
 8009918:	2310      	movs	r3, #16
 800991a:	75fb      	strb	r3, [r7, #23]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800991c:	7dfb      	ldrb	r3, [r7, #23]
 800991e:	019b      	lsls	r3, r3, #6
 8009920:	f043 0220 	orr.w	r2, r3, #32
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8009928:	bf00      	nop
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	691b      	ldr	r3, [r3, #16]
 800992e:	f003 0320 	and.w	r3, r3, #32
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1f9      	bne.n	800992a <handle_bus_reset+0x11a>
}
 8009936:	bf00      	nop
 8009938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993a:	61fb      	str	r3, [r7, #28]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	2210      	movs	r2, #16
 8009940:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8009942:	bf00      	nop
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	f003 0310 	and.w	r3, r3, #16
 800994c:	2b00      	cmp	r3, #0
 800994e:	d1f9      	bne.n	8009944 <handle_bus_reset+0x134>
}
 8009950:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 8009952:	79fb      	ldrb	r3, [r7, #7]
 8009954:	4618      	mov	r0, r3
 8009956:	f7ff f937 	bl	8008bc8 <dfifo_device_init>

  // 5. Reset device address
  dwc2_dcfg_t dcfg = {.value = dwc2->dcfg};
 800995a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8009960:	613b      	str	r3, [r7, #16]
  dcfg.address = 0;
 8009962:	8a3b      	ldrh	r3, [r7, #16]
 8009964:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009968:	823b      	strh	r3, [r7, #16]
  dwc2->dcfg = dcfg.value;
 800996a:	693a      	ldr	r2, [r7, #16]
 800996c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996e:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8009972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009974:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8009978:	f023 0203 	bic.w	r2, r3, #3
 800997c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 8009982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009984:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8009988:	f023 0203 	bic.w	r2, r3, #3
 800998c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998e:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8009992:	4b13      	ldr	r3, [pc, #76]	@ (80099e0 <handle_bus_reset+0x1d0>)
 8009994:	2240      	movs	r2, #64	@ 0x40
 8009996:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8009998:	4b11      	ldr	r3, [pc, #68]	@ (80099e0 <handle_bus_reset+0x1d0>)
 800999a:	2240      	movs	r2, #64	@ 0x40
 800999c:	835a      	strh	r2, [r3, #26]
 800999e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a0:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80099a2:	6a3b      	ldr	r3, [r7, #32]
 80099a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099a6:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 80099a8:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d004      	beq.n	80099b8 <handle_bus_reset+0x1a8>
    dma_setup_prepare(rhport);
 80099ae:	79fb      	ldrb	r3, [r7, #7]
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7fe ffeb 	bl	800898c <dma_setup_prepare>
 80099b6:	e007      	b.n	80099c8 <handle_bus_reset+0x1b8>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 80099b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ba:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 80099be:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 80099c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c4:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 80099c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 80099d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d2:	619a      	str	r2, [r3, #24]
}
 80099d4:	bf00      	nop
 80099d6:	3738      	adds	r7, #56	@ 0x38
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	0800c86c 	.word	0x0800c86c
 80099e0:	20000cb0 	.word	0x20000cb0
 80099e4:	20000d30 	.word	0x20000d30

080099e8 <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b08a      	sub	sp, #40	@ 0x28
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	4603      	mov	r3, r0
 80099f0:	71fb      	strb	r3, [r7, #7]
 80099f2:	79fb      	ldrb	r3, [r7, #7]
 80099f4:	77fb      	strb	r3, [r7, #31]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80099f6:	7ffb      	ldrb	r3, [r7, #31]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d001      	beq.n	8009a00 <handle_enum_done+0x18>
    rhport = 0;
 80099fc:	2300      	movs	r3, #0
 80099fe:	77fb      	strb	r3, [r7, #31]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009a00:	7ffb      	ldrb	r3, [r7, #31]
 8009a02:	4a1b      	ldr	r2, [pc, #108]	@ (8009a70 <handle_enum_done+0x88>)
 8009a04:	011b      	lsls	r3, r3, #4
 8009a06:	4413      	add	r3, r2
 8009a08:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8009a0a:	623b      	str	r3, [r7, #32]
  const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 8009a0c:	6a3b      	ldr	r3, [r7, #32]
 8009a0e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8009a12:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dsts.enum_speed) {
 8009a14:	7e3b      	ldrb	r3, [r7, #24]
 8009a16:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d002      	beq.n	8009a26 <handle_enum_done+0x3e>
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	d004      	beq.n	8009a2e <handle_enum_done+0x46>
 8009a24:	e007      	b.n	8009a36 <handle_enum_done+0x4e>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 8009a26:	2302      	movs	r3, #2
 8009a28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8009a2c:	e007      	b.n	8009a3e <handle_enum_done+0x56>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8009a34:	e003      	b.n	8009a3e <handle_enum_done+0x56>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 8009a36:	2300      	movs	r3, #0
 8009a38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8009a3c:	bf00      	nop
 8009a3e:	79fb      	ldrb	r3, [r7, #7]
 8009a40:	77bb      	strb	r3, [r7, #30]
 8009a42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a46:	777b      	strb	r3, [r7, #29]
 8009a48:	2301      	movs	r3, #1
 8009a4a:	773b      	strb	r3, [r7, #28]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8009a4c:	7fbb      	ldrb	r3, [r7, #30]
 8009a4e:	733b      	strb	r3, [r7, #12]
  event.event_id = DCD_EVENT_BUS_RESET;
 8009a50:	2301      	movs	r3, #1
 8009a52:	737b      	strb	r3, [r7, #13]
  event.bus_reset.speed = speed;
 8009a54:	7f7b      	ldrb	r3, [r7, #29]
 8009a56:	743b      	strb	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 8009a58:	7f3a      	ldrb	r2, [r7, #28]
 8009a5a:	f107 030c 	add.w	r3, r7, #12
 8009a5e:	4611      	mov	r1, r2
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7fe f8df 	bl	8007c24 <dcd_event_handler>
}
 8009a66:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 8009a68:	bf00      	nop
 8009a6a:	3728      	adds	r7, #40	@ 0x28
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	0800c86c 	.word	0x0800c86c

08009a74 <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b08c      	sub	sp, #48	@ 0x30
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	71fb      	strb	r3, [r7, #7]
 8009a7e:	79fb      	ldrb	r3, [r7, #7]
 8009a80:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009a82:	7cfb      	ldrb	r3, [r7, #19]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d001      	beq.n	8009a8c <handle_rxflvl_irq+0x18>
    rhport = 0;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009a8c:	7cfb      	ldrb	r3, [r7, #19]
 8009a8e:	4a49      	ldr	r2, [pc, #292]	@ (8009bb4 <handle_rxflvl_irq+0x140>)
 8009a90:	011b      	lsls	r3, r3, #4
 8009a92:	4413      	add	r3, r2
 8009a94:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 8009a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a9e:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp = {.value = dwc2->grxstsp};
 8009aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aa2:	6a1b      	ldr	r3, [r3, #32]
 8009aa4:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp.ep_ch_num;
 8009aa6:	7b3b      	ldrb	r3, [r7, #12]
 8009aa8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 8009ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ab6:	3358      	adds	r3, #88	@ 0x58
 8009ab8:	015b      	lsls	r3, r3, #5
 8009aba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009abc:	4413      	add	r3, r2
 8009abe:	623b      	str	r3, [r7, #32]

  switch (grxstsp.packet_status) {
 8009ac0:	7bbb      	ldrb	r3, [r7, #14]
 8009ac2:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	3b01      	subs	r3, #1
 8009aca:	2b05      	cmp	r3, #5
 8009acc:	d86a      	bhi.n	8009ba4 <handle_rxflvl_irq+0x130>
 8009ace:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad4 <handle_rxflvl_irq+0x60>)
 8009ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad4:	08009ba5 	.word	0x08009ba5
 8009ad8:	08009b13 	.word	0x08009b13
 8009adc:	08009ba5 	.word	0x08009ba5
 8009ae0:	08009b05 	.word	0x08009b05
 8009ae4:	08009ba5 	.word	0x08009ba5
 8009ae8:	08009aed 	.word	0x08009aed
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 8009aec:	4b32      	ldr	r3, [pc, #200]	@ (8009bb8 <handle_rxflvl_irq+0x144>)
 8009aee:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 8009af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	3304      	adds	r3, #4
 8009afc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009afe:	6812      	ldr	r2, [r2, #0]
 8009b00:	601a      	str	r2, [r3, #0]
      break;
 8009b02:	e052      	b.n	8009baa <handle_rxflvl_irq+0x136>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8009b04:	6a3b      	ldr	r3, [r7, #32]
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 8009b0c:	6a3b      	ldr	r3, [r7, #32]
 8009b0e:	611a      	str	r2, [r3, #16]
      break;
 8009b10:	e04b      	b.n	8009baa <handle_rxflvl_irq+0x136>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp.byte_count;
 8009b12:	89bb      	ldrh	r3, [r7, #12]
 8009b14:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8009b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b20:	015b      	lsls	r3, r3, #5
 8009b22:	4a26      	ldr	r2, [pc, #152]	@ (8009bbc <handle_rxflvl_irq+0x148>)
 8009b24:	4413      	add	r3, r2
 8009b26:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 8009b28:	8b7b      	ldrh	r3, [r7, #26]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d03c      	beq.n	8009ba8 <handle_rxflvl_irq+0x134>
        // Read packet off RxFIFO
        if (xfer->ff) {
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d007      	beq.n	8009b46 <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	8b7a      	ldrh	r2, [r7, #26]
 8009b3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fc ff7e 	bl	8006a40 <tu_fifo_write_n_const_addr_full_words>
 8009b44:	e00c      	b.n	8009b60 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	8b7a      	ldrh	r2, [r7, #26]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b50:	f000 fd70 	bl	800a634 <dfifo_read_packet>
          xfer->buffer += byte_count;
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	8b7b      	ldrh	r3, [r7, #26]
 8009b5a:	441a      	add	r2, r3
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	895b      	ldrh	r3, [r3, #10]
 8009b64:	8b7a      	ldrh	r2, [r7, #26]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d21e      	bcs.n	8009ba8 <handle_rxflvl_irq+0x134>
          const dwc2_ep_tsize_t tsiz = {.value = epout->tsiz};
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	60bb      	str	r3, [r7, #8]
          xfer->total_len -= tsiz.xfer_size;
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	891a      	ldrh	r2, [r3, #8]
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 8009b84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10d      	bne.n	8009ba8 <handle_rxflvl_irq+0x134>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	891a      	ldrh	r2, [r3, #8]
 8009b90:	4b0b      	ldr	r3, [pc, #44]	@ (8009bc0 <handle_rxflvl_irq+0x14c>)
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 8009b9c:	4b08      	ldr	r3, [pc, #32]	@ (8009bc0 <handle_rxflvl_irq+0x14c>)
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 8009ba2:	e001      	b.n	8009ba8 <handle_rxflvl_irq+0x134>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 8009ba4:	bf00      	nop
 8009ba6:	e000      	b.n	8009baa <handle_rxflvl_irq+0x136>
      break;
 8009ba8:	bf00      	nop
  }
}
 8009baa:	bf00      	nop
 8009bac:	3730      	adds	r7, #48	@ 0x30
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	0800c86c 	.word	0x0800c86c
 8009bb8:	20000d38 	.word	0x20000d38
 8009bbc:	20000cb0 	.word	0x20000cb0
 8009bc0:	20000d30 	.word	0x20000d30

08009bc4 <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b08e      	sub	sp, #56	@ 0x38
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	4603      	mov	r3, r0
 8009bcc:	603a      	str	r2, [r7, #0]
 8009bce:	71fb      	strb	r3, [r7, #7]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 8009bd4:	783b      	ldrb	r3, [r7, #0]
 8009bd6:	f003 0308 	and.w	r3, r3, #8
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d01c      	beq.n	8009c1a <handle_epout_slave+0x56>
 8009be0:	79fb      	ldrb	r3, [r7, #7]
 8009be2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8009be6:	4b34      	ldr	r3, [pc, #208]	@ (8009cb8 <handle_epout_slave+0xf4>)
 8009be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009bea:	2301      	movs	r3, #1
 8009bec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8009bf0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009bf4:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 8009bf6:	2306      	movs	r3, #6
 8009bf8:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8009bfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bfc:	f107 0318 	add.w	r3, r7, #24
 8009c00:	6810      	ldr	r0, [r2, #0]
 8009c02:	6851      	ldr	r1, [r2, #4]
 8009c04:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 8009c06:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8009c0a:	f107 0314 	add.w	r3, r7, #20
 8009c0e:	4611      	mov	r1, r2
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7fe f807 	bl	8007c24 <dcd_event_handler>
}
 8009c16:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 8009c18:	e04a      	b.n	8009cb0 <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 8009c1a:	783b      	ldrb	r3, [r7, #0]
 8009c1c:	f003 0301 	and.w	r3, r3, #1
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d044      	beq.n	8009cb0 <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 8009c26:	783b      	ldrb	r3, [r7, #0]
 8009c28:	f003 0320 	and.w	r3, r3, #32
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d13e      	bne.n	8009cb0 <handle_epout_slave+0xec>
 8009c32:	787b      	ldrb	r3, [r7, #1]
 8009c34:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d138      	bne.n	8009cb0 <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8009c3e:	79bb      	ldrb	r3, [r7, #6]
 8009c40:	015b      	lsls	r3, r3, #5
 8009c42:	4a1e      	ldr	r2, [pc, #120]	@ (8009cbc <handle_epout_slave+0xf8>)
 8009c44:	4413      	add	r3, r2
 8009c46:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 8009c48:	79bb      	ldrb	r3, [r7, #6]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10a      	bne.n	8009c64 <handle_epout_slave+0xa0>
 8009c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8009cc0 <handle_epout_slave+0xfc>)
 8009c50:	881b      	ldrh	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d006      	beq.n	8009c64 <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 8009c56:	79b9      	ldrb	r1, [r7, #6]
 8009c58:	79fb      	ldrb	r3, [r7, #7]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7ff f977 	bl	8008f50 <edpt_schedule_packets>
 8009c62:	e025      	b.n	8009cb0 <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8009c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c66:	891b      	ldrh	r3, [r3, #8]
 8009c68:	461a      	mov	r2, r3
 8009c6a:	79fb      	ldrb	r3, [r7, #7]
 8009c6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c70:	79bb      	ldrb	r3, [r7, #6]
 8009c72:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8009c76:	627a      	str	r2, [r7, #36]	@ 0x24
 8009c78:	2300      	movs	r3, #0
 8009c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009c7e:	2301      	movs	r3, #1
 8009c80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8009c84:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009c88:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8009c8a:	2307      	movs	r3, #7
 8009c8c:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 8009c8e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009c92:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8009c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c96:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8009c98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009c9c:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 8009c9e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8009ca2:	f107 0308 	add.w	r3, r7, #8
 8009ca6:	4611      	mov	r1, r2
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7fd ffbb 	bl	8007c24 <dcd_event_handler>
}
 8009cae:	bf00      	nop
      }
    }
  }
}
 8009cb0:	3738      	adds	r7, #56	@ 0x38
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20000d38 	.word	0x20000d38
 8009cbc:	20000cb0 	.word	0x20000cb0
 8009cc0:	20000d30 	.word	0x20000d30

08009cc4 <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b092      	sub	sp, #72	@ 0x48
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	4603      	mov	r3, r0
 8009ccc:	603a      	str	r2, [r7, #0]
 8009cce:	71fb      	strb	r3, [r7, #7]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	71bb      	strb	r3, [r7, #6]
 8009cd4:	79fb      	ldrb	r3, [r7, #7]
 8009cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009cda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d002      	beq.n	8009ce8 <handle_epin_slave+0x24>
    rhport = 0;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009ce8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009cec:	4a64      	ldr	r2, [pc, #400]	@ (8009e80 <handle_epin_slave+0x1bc>)
 8009cee:	011b      	lsls	r3, r3, #4
 8009cf0:	4413      	add	r3, r2
 8009cf2:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009cf4:	643b      	str	r3, [r7, #64]	@ 0x40
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 8009cf6:	79bb      	ldrb	r3, [r7, #6]
 8009cf8:	3348      	adds	r3, #72	@ 0x48
 8009cfa:	015b      	lsls	r3, r3, #5
 8009cfc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009cfe:	4413      	add	r3, r2
 8009d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 8009d02:	79bb      	ldrb	r3, [r7, #6]
 8009d04:	015b      	lsls	r3, r3, #5
 8009d06:	3310      	adds	r3, #16
 8009d08:	4a5e      	ldr	r2, [pc, #376]	@ (8009e84 <handle_epin_slave+0x1c0>)
 8009d0a:	4413      	add	r3, r2
 8009d0c:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (diepint_bm.xfer_complete) {
 8009d0e:	783b      	ldrb	r3, [r7, #0]
 8009d10:	f003 0301 	and.w	r3, r3, #1
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d037      	beq.n	8009d8a <handle_epin_slave+0xc6>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 8009d1a:	79bb      	ldrb	r3, [r7, #6]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10a      	bne.n	8009d36 <handle_epin_slave+0x72>
 8009d20:	4b59      	ldr	r3, [pc, #356]	@ (8009e88 <handle_epin_slave+0x1c4>)
 8009d22:	885b      	ldrh	r3, [r3, #2]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d006      	beq.n	8009d36 <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 8009d28:	79b9      	ldrb	r1, [r7, #6]
 8009d2a:	79fb      	ldrb	r3, [r7, #7]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7ff f90e 	bl	8008f50 <edpt_schedule_packets>
 8009d34:	e029      	b.n	8009d8a <handle_epin_slave+0xc6>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8009d36:	79bb      	ldrb	r3, [r7, #6]
 8009d38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009d3c:	b2d9      	uxtb	r1, r3
 8009d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d40:	891b      	ldrh	r3, [r3, #8]
 8009d42:	461a      	mov	r2, r3
 8009d44:	79fb      	ldrb	r3, [r7, #7]
 8009d46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8009d50:	627a      	str	r2, [r7, #36]	@ 0x24
 8009d52:	2300      	movs	r3, #0
 8009d54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d58:	2301      	movs	r3, #1
 8009d5a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  event.rhport = rhport;
 8009d5e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009d62:	743b      	strb	r3, [r7, #16]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8009d64:	2307      	movs	r3, #7
 8009d66:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 8009d68:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009d6c:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d70:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 8009d72:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009d76:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8009d78:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8009d7c:	f107 0310 	add.w	r3, r7, #16
 8009d80:	4611      	mov	r1, r2
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fd ff4e 	bl	8007c24 <dcd_event_handler>
}
 8009d88:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 8009d8a:	783b      	ldrb	r3, [r7, #0]
 8009d8c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d070      	beq.n	8009e78 <handle_epin_slave+0x1b4>
 8009d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d98:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8009d9c:	79ba      	ldrb	r2, [r7, #6]
 8009d9e:	2101      	movs	r1, #1
 8009da0:	fa01 f202 	lsl.w	r2, r1, r2
 8009da4:	4013      	ands	r3, r2
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d066      	beq.n	8009e78 <handle_epin_slave+0x1b4>
    dwc2_ep_tsize_t tsiz = {.value = epin->tsiz};
 8009daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	60fb      	str	r3, [r7, #12]
    const uint16_t remain_packets = tsiz.packet_count;
 8009db0:	89fb      	ldrh	r3, [r7, #14]
 8009db2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 8009dba:	2300      	movs	r3, #0
 8009dbc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8009dc0:	e03f      	b.n	8009e42 <handle_epin_slave+0x17e>
      tsiz.value = epin->tsiz;
 8009dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	60fb      	str	r3, [r7, #12]
      const uint16_t remain_bytes = (uint16_t) tsiz.xfer_size;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dce:	86bb      	strh	r3, [r7, #52]	@ 0x34
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 8009dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd2:	895a      	ldrh	r2, [r3, #10]
 8009dd4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009dd6:	843b      	strh	r3, [r7, #32]
 8009dd8:	4613      	mov	r3, r2
 8009dda:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8009ddc:	8c3a      	ldrh	r2, [r7, #32]
 8009dde:	8bfb      	ldrh	r3, [r7, #30]
 8009de0:	4293      	cmp	r3, r2
 8009de2:	bf28      	it	cs
 8009de4:	4613      	movcs	r3, r2
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	867b      	strh	r3, [r7, #50]	@ 0x32

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 8009dea:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8009dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dee:	699b      	ldr	r3, [r3, #24]
 8009df0:	0099      	lsls	r1, r3, #2
 8009df2:	4b26      	ldr	r3, [pc, #152]	@ (8009e8c <handle_epin_slave+0x1c8>)
 8009df4:	400b      	ands	r3, r1
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d829      	bhi.n	8009e4e <handle_epin_slave+0x18a>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 8009dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00d      	beq.n	8009e1e <handle_epin_slave+0x15a>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 8009e02:	79bb      	ldrb	r3, [r7, #6]
 8009e04:	3301      	adds	r3, #1
 8009e06:	031b      	lsls	r3, r3, #12
 8009e08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e0a:	4413      	add	r3, r2
 8009e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 8009e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8009e14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fc fdab 	bl	8006972 <tu_fifo_read_n_const_addr_full_words>
 8009e1c:	e00c      	b.n	8009e38 <handle_epin_slave+0x174>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 8009e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009e24:	79b9      	ldrb	r1, [r7, #6]
 8009e26:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8009e28:	f000 fc55 	bl	800a6d6 <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 8009e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009e32:	441a      	add	r2, r3
 8009e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e36:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 8009e38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8009e42:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8009e46:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d3ba      	bcc.n	8009dc2 <handle_epin_slave+0xfe>
 8009e4c:	e000      	b.n	8009e50 <handle_epin_slave+0x18c>
        break;
 8009e4e:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    tsiz.value = epin->tsiz;
 8009e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	60fb      	str	r3, [r7, #12]
    if (tsiz.xfer_size == 0) {
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10b      	bne.n	8009e78 <handle_epin_slave+0x1b4>
      dwc2->diepempmsk &= ~(1 << epnum);
 8009e60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e62:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8009e66:	79ba      	ldrb	r2, [r7, #6]
 8009e68:	2101      	movs	r1, #1
 8009e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8009e6e:	43d2      	mvns	r2, r2
 8009e70:	401a      	ands	r2, r3
 8009e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e74:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 8009e78:	bf00      	nop
 8009e7a:	3748      	adds	r7, #72	@ 0x48
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	0800c86c 	.word	0x0800c86c
 8009e84:	20000cb0 	.word	0x20000cb0
 8009e88:	20000d30 	.word	0x20000d30
 8009e8c:	0003fffc 	.word	0x0003fffc

08009e90 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b08e      	sub	sp, #56	@ 0x38
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	4603      	mov	r3, r0
 8009e98:	460a      	mov	r2, r1
 8009e9a:	71fb      	strb	r3, [r7, #7]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	71bb      	strb	r3, [r7, #6]
 8009ea0:	79fb      	ldrb	r3, [r7, #7]
 8009ea2:	76fb      	strb	r3, [r7, #27]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009ea4:	7efb      	ldrb	r3, [r7, #27]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d001      	beq.n	8009eae <handle_ep_irq+0x1e>
    rhport = 0;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	76fb      	strb	r3, [r7, #27]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009eae:	7efb      	ldrb	r3, [r7, #27]
 8009eb0:	4a38      	ldr	r2, [pc, #224]	@ (8009f94 <handle_ep_irq+0x104>)
 8009eb2:	011b      	lsls	r3, r3, #4
 8009eb4:	4413      	add	r3, r2
 8009eb6:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009eb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8009eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebc:	61fb      	str	r3, [r7, #28]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ec2:	617b      	str	r3, [r7, #20]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8009ec4:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 8009ec6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ecc:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009ece:	6a3b      	ldr	r3, [r7, #32]
 8009ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ed2:	613b      	str	r3, [r7, #16]
  return ghwcfg2.num_dev_ep + 1;
 8009ed4:	7c7b      	ldrb	r3, [r7, #17]
 8009ed6:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	3301      	adds	r3, #1
 8009ede:	b2db      	uxtb	r3, r3
  const uint8_t ep_count = dwc2_ep_count(dwc2);
 8009ee0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 8009ee4:	79bb      	ldrb	r3, [r7, #6]
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d101      	bne.n	8009eee <handle_ep_irq+0x5e>
 8009eea:	2300      	movs	r3, #0
 8009eec:	e000      	b.n	8009ef0 <handle_ep_irq+0x60>
 8009eee:	2310      	movs	r3, #16
 8009ef0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 8009ef4:	79bb      	ldrb	r3, [r7, #6]
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	bf14      	ite	ne
 8009efa:	2301      	movne	r3, #1
 8009efc:	2300      	moveq	r3, #0
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	025b      	lsls	r3, r3, #9
 8009f02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f08:	4413      	add	r3, r2
 8009f0a:	62bb      	str	r3, [r7, #40]	@ 0x28

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009f12:	e034      	b.n	8009f7e <handle_ep_irq+0xee>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 8009f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f16:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8009f1a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8009f1e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009f22:	440b      	add	r3, r1
 8009f24:	fa22 f303 	lsr.w	r3, r2, r3
 8009f28:	f003 0301 	and.w	r3, r3, #1
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d021      	beq.n	8009f74 <handle_ep_irq+0xe4>
      dwc2_dep_t* epout = &ep_base[epnum];
 8009f30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009f34:	015b      	lsls	r3, r3, #5
 8009f36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f38:	4413      	add	r3, r2
 8009f3a:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	60fb      	str	r3, [r7, #12]

      epout->intr = intr.value; // Clear interrupt
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f46:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 8009f48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d111      	bne.n	8009f74 <handle_ep_irq+0xe4>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 8009f50:	79bb      	ldrb	r3, [r7, #6]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d107      	bne.n	8009f66 <handle_ep_irq+0xd6>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 8009f56:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8009f5a:	79fb      	ldrb	r3, [r7, #7]
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7ff feb0 	bl	8009cc4 <handle_epin_slave>
 8009f64:	e006      	b.n	8009f74 <handle_ep_irq+0xe4>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 8009f66:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8009f6a:	79fb      	ldrb	r3, [r7, #7]
 8009f6c:	68fa      	ldr	r2, [r7, #12]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7ff fe28 	bl	8009bc4 <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8009f74:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009f78:	3301      	adds	r3, #1
 8009f7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009f7e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8009f82:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d3c4      	bcc.n	8009f14 <handle_ep_irq+0x84>
        }
        #endif
      }
    }
  }
}
 8009f8a:	bf00      	nop
 8009f8c:	bf00      	nop
 8009f8e:	3738      	adds	r7, #56	@ 0x38
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	0800c86c 	.word	0x0800c86c

08009f98 <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b098      	sub	sp, #96	@ 0x60
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	71fb      	strb	r3, [r7, #7]
 8009fa2:	79fb      	ldrb	r3, [r7, #7]
 8009fa4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009fa8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d002      	beq.n	8009fb6 <dcd_int_handler+0x1e>
    rhport = 0;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009fb6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009fba:	4a80      	ldr	r2, [pc, #512]	@ (800a1bc <dcd_int_handler+0x224>)
 8009fbc:	011b      	lsls	r3, r3, #4
 8009fbe:	4413      	add	r3, r2
 8009fc0:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009fc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  const uint32_t gintmask = dwc2->gintmsk;
 8009fc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009fc6:	699b      	ldr	r3, [r3, #24]
 8009fc8:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 8009fca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009fcc:	695b      	ldr	r3, [r3, #20]
 8009fce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 8009fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00d      	beq.n	8009ffa <dcd_int_handler+0x62>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 8009fde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009fe0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009fe4:	615a      	str	r2, [r3, #20]

    usbd_spin_lock(true);
 8009fe6:	2001      	movs	r0, #1
 8009fe8:	f7fe f81a 	bl	8008020 <usbd_spin_lock>
    handle_bus_reset(rhport);
 8009fec:	79fb      	ldrb	r3, [r7, #7]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7ff fc0e 	bl	8009810 <handle_bus_reset>
    usbd_spin_unlock(true);
 8009ff4:	2001      	movs	r0, #1
 8009ff6:	f7fe f82d 	bl	8008054 <usbd_spin_unlock>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 8009ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ffc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a000:	2b00      	cmp	r3, #0
 800a002:	d007      	beq.n	800a014 <dcd_int_handler+0x7c>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 800a004:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a006:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a00a:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 800a00c:	79fb      	ldrb	r3, [r7, #7]
 800a00e:	4618      	mov	r0, r3
 800a010:	f7ff fcea 	bl	80099e8 <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 800a014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a016:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d01d      	beq.n	800a05a <dcd_int_handler+0xc2>
    dwc2->gintsts = GINTSTS_USBSUSP;
 800a01e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a020:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a024:	615a      	str	r2, [r3, #20]
 800a026:	79fb      	ldrb	r3, [r7, #7]
 800a028:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800a02c:	2304      	movs	r3, #4
 800a02e:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 800a032:	2301      	movs	r3, #1
 800a034:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 800a038:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800a03c:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 800a040:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800a044:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 800a048:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800a04c:	f107 0320 	add.w	r3, r7, #32
 800a050:	4611      	mov	r1, r2
 800a052:	4618      	mov	r0, r3
 800a054:	f7fd fde6 	bl	8007c24 <dcd_event_handler>
}
 800a058:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 800a05a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	da1d      	bge.n	800a09c <dcd_int_handler+0x104>
    dwc2->gintsts = GINTSTS_WKUINT;
 800a060:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a062:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a066:	615a      	str	r2, [r3, #20]
 800a068:	79fb      	ldrb	r3, [r7, #7]
 800a06a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a06e:	2305      	movs	r3, #5
 800a070:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800a074:	2301      	movs	r3, #1
 800a076:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 800a07a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a07e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 800a082:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a086:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 800a08a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a08e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a092:	4611      	mov	r1, r2
 800a094:	4618      	mov	r0, r3
 800a096:	f7fd fdc5 	bl	8007c24 <dcd_event_handler>
}
 800a09a:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 800a09c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a09e:	f003 0304 	and.w	r3, r3, #4
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d022      	beq.n	800a0ec <dcd_int_handler+0x154>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 800a0a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 800a0ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0ae:	f003 0304 	and.w	r3, r3, #4
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d017      	beq.n	800a0e6 <dcd_int_handler+0x14e>
 800a0b6:	79fb      	ldrb	r3, [r7, #7]
 800a0b8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800a0bc:	2302      	movs	r3, #2
 800a0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 800a0c8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800a0cc:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 800a0ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a0d2:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800a0d4:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 800a0d8:	f107 0314 	add.w	r3, r7, #20
 800a0dc:	4611      	mov	r1, r2
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fd fda0 	bl	8007c24 <dcd_event_handler>
}
 800a0e4:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 800a0e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a0ea:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 800a0ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0ee:	f003 0308 	and.w	r3, r3, #8
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d02e      	beq.n	800a154 <dcd_int_handler+0x1bc>
    dwc2->gintsts = GINTSTS_SOF;
 800a0f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0f8:	2208      	movs	r2, #8
 800a0fa:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 800a0fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0fe:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800a102:	0a1b      	lsrs	r3, r3, #8
 800a104:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a108:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 800a10a:	4b2d      	ldr	r3, [pc, #180]	@ (800a1c0 <dcd_int_handler+0x228>)
 800a10c:	79db      	ldrb	r3, [r3, #7]
 800a10e:	f083 0301 	eor.w	r3, r3, #1
 800a112:	b2db      	uxtb	r3, r3
 800a114:	2b00      	cmp	r3, #0
 800a116:	d005      	beq.n	800a124 <dcd_int_handler+0x18c>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 800a118:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	f023 0208 	bic.w	r2, r3, #8
 800a120:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a122:	619a      	str	r2, [r3, #24]
 800a124:	79fb      	ldrb	r3, [r7, #7]
 800a126:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800a12a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a12e:	2301      	movs	r3, #1
 800a130:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800a134:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a138:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 800a13a:	2303      	movs	r3, #3
 800a13c:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 800a13e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a140:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 800a142:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800a146:	f107 0308 	add.w	r3, r7, #8
 800a14a:	4611      	mov	r1, r2
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7fd fd69 	bl	8007c24 <dcd_event_handler>
}
 800a152:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 800a154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a156:	f003 0310 	and.w	r3, r3, #16
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d015      	beq.n	800a18a <dcd_int_handler+0x1f2>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 800a15e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	f023 0210 	bic.w	r2, r3, #16
 800a166:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a168:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 800a16a:	79fb      	ldrb	r3, [r7, #7]
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7ff fc81 	bl	8009a74 <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 800a172:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a174:	695b      	ldr	r3, [r3, #20]
 800a176:	f003 0310 	and.w	r3, r3, #16
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d1f5      	bne.n	800a16a <dcd_int_handler+0x1d2>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 800a17e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	f043 0210 	orr.w	r2, r3, #16
 800a186:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a188:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 800a18a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a18c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a190:	2b00      	cmp	r3, #0
 800a192:	d004      	beq.n	800a19e <dcd_int_handler+0x206>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 800a194:	79fb      	ldrb	r3, [r7, #7]
 800a196:	2100      	movs	r1, #0
 800a198:	4618      	mov	r0, r3
 800a19a:	f7ff fe79 	bl	8009e90 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 800a19e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d004      	beq.n	800a1b2 <dcd_int_handler+0x21a>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 800a1a8:	79fb      	ldrb	r3, [r7, #7]
 800a1aa:	2101      	movs	r1, #1
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7ff fe6f 	bl	8009e90 <handle_ep_irq>
  }
}
 800a1b2:	bf00      	nop
 800a1b4:	3760      	adds	r7, #96	@ 0x60
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	0800c86c 	.word	0x0800c86c
 800a1c0:	20000d30 	.word	0x20000d30

0800a1c4 <dwc2_phy_init>:

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800a1d0:	78fb      	ldrb	r3, [r7, #3]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d106      	bne.n	800a1e4 <dwc2_phy_init+0x20>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1da:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	639a      	str	r2, [r3, #56]	@ 0x38
      #else

      #endif
    }
  }
}
 800a1e2:	e005      	b.n	800a1f0 <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800a1f0:	bf00      	nop
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	460b      	mov	r3, r1
 800a206:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800a208:	78fb      	ldrb	r3, [r7, #3]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d152      	bne.n	800a2b4 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 800a20e:	4b2c      	ldr	r3, [pc, #176]	@ (800a2c0 <dwc2_phy_update+0xc4>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a2c      	ldr	r2, [pc, #176]	@ (800a2c4 <dwc2_phy_update+0xc8>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d302      	bcc.n	800a21e <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 800a218:	2306      	movs	r3, #6
 800a21a:	60fb      	str	r3, [r7, #12]
 800a21c:	e041      	b.n	800a2a2 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 800a21e:	4b28      	ldr	r3, [pc, #160]	@ (800a2c0 <dwc2_phy_update+0xc4>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a29      	ldr	r2, [pc, #164]	@ (800a2c8 <dwc2_phy_update+0xcc>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d902      	bls.n	800a22e <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 800a228:	2307      	movs	r3, #7
 800a22a:	60fb      	str	r3, [r7, #12]
 800a22c:	e039      	b.n	800a2a2 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 800a22e:	4b24      	ldr	r3, [pc, #144]	@ (800a2c0 <dwc2_phy_update+0xc4>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a26      	ldr	r2, [pc, #152]	@ (800a2cc <dwc2_phy_update+0xd0>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d302      	bcc.n	800a23e <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 800a238:	2308      	movs	r3, #8
 800a23a:	60fb      	str	r3, [r7, #12]
 800a23c:	e031      	b.n	800a2a2 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 800a23e:	4b20      	ldr	r3, [pc, #128]	@ (800a2c0 <dwc2_phy_update+0xc4>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a23      	ldr	r2, [pc, #140]	@ (800a2d0 <dwc2_phy_update+0xd4>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d902      	bls.n	800a24e <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 800a248:	2309      	movs	r3, #9
 800a24a:	60fb      	str	r3, [r7, #12]
 800a24c:	e029      	b.n	800a2a2 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 800a24e:	4b1c      	ldr	r3, [pc, #112]	@ (800a2c0 <dwc2_phy_update+0xc4>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a20      	ldr	r2, [pc, #128]	@ (800a2d4 <dwc2_phy_update+0xd8>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d902      	bls.n	800a25e <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 800a258:	230a      	movs	r3, #10
 800a25a:	60fb      	str	r3, [r7, #12]
 800a25c:	e021      	b.n	800a2a2 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 800a25e:	4b18      	ldr	r3, [pc, #96]	@ (800a2c0 <dwc2_phy_update+0xc4>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a1d      	ldr	r2, [pc, #116]	@ (800a2d8 <dwc2_phy_update+0xdc>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d902      	bls.n	800a26e <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 800a268:	230b      	movs	r3, #11
 800a26a:	60fb      	str	r3, [r7, #12]
 800a26c:	e019      	b.n	800a2a2 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 800a26e:	4b14      	ldr	r3, [pc, #80]	@ (800a2c0 <dwc2_phy_update+0xc4>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a1a      	ldr	r2, [pc, #104]	@ (800a2dc <dwc2_phy_update+0xe0>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d302      	bcc.n	800a27e <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 800a278:	230c      	movs	r3, #12
 800a27a:	60fb      	str	r3, [r7, #12]
 800a27c:	e011      	b.n	800a2a2 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 800a27e:	4b10      	ldr	r3, [pc, #64]	@ (800a2c0 <dwc2_phy_update+0xc4>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a17      	ldr	r2, [pc, #92]	@ (800a2e0 <dwc2_phy_update+0xe4>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d302      	bcc.n	800a28e <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 800a288:	230d      	movs	r3, #13
 800a28a:	60fb      	str	r3, [r7, #12]
 800a28c:	e009      	b.n	800a2a2 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 800a28e:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c0 <dwc2_phy_update+0xc4>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a14      	ldr	r2, [pc, #80]	@ (800a2e4 <dwc2_phy_update+0xe8>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d302      	bcc.n	800a29e <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 800a298:	230e      	movs	r3, #14
 800a29a:	60fb      	str	r3, [r7, #12]
 800a29c:	e001      	b.n	800a2a2 <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 800a29e:	230f      	movs	r3, #15
 800a2a0:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	029b      	lsls	r3, r3, #10
 800a2ae:	431a      	orrs	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	60da      	str	r2, [r3, #12]
  }
}
 800a2b4:	bf00      	nop
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr
 800a2c0:	20000048 	.word	0x20000048
 800a2c4:	01e84800 	.word	0x01e84800
 800a2c8:	01a39ddf 	.word	0x01a39ddf
 800a2cc:	016e3600 	.word	0x016e3600
 800a2d0:	014ca43f 	.word	0x014ca43f
 800a2d4:	01312cff 	.word	0x01312cff
 800a2d8:	011a499f 	.word	0x011a499f
 800a2dc:	01067380 	.word	0x01067380
 800a2e0:	00f42400 	.word	0x00f42400
 800a2e4:	00e4e1c0 	.word	0x00e4e1c0

0800a2e8 <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	f043 0201 	orr.w	r2, r3, #1
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a300:	b29b      	uxth	r3, r3
 800a302:	f244 2209 	movw	r2, #16905	@ 0x4209
 800a306:	4293      	cmp	r3, r2
 800a308:	d807      	bhi.n	800a31a <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 800a30a:	bf00      	nop
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	f003 0301 	and.w	r3, r3, #1
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1f9      	bne.n	800a30c <reset_core+0x24>
 800a318:	e010      	b.n	800a33c <reset_core+0x54>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 800a31a:	bf00      	nop
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a324:	2b00      	cmp	r3, #0
 800a326:	d0f9      	beq.n	800a31c <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a330:	f023 0301 	bic.w	r3, r3, #1
 800a334:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 800a33c:	bf00      	nop
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	2b00      	cmp	r3, #0
 800a344:	dafb      	bge.n	800a33e <reset_core+0x56>
}
 800a346:	bf00      	nop
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a368:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800a370:	2100      	movs	r1, #0
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f7ff ff26 	bl	800a1c4 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f7ff ffb5 	bl	800a2e8 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800a384:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800a38c:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800a394:	2100      	movs	r1, #0
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7ff ff30 	bl	800a1fc <dwc2_phy_update>
}
 800a39c:	bf00      	nop
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b086      	sub	sp, #24
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	617b      	str	r3, [r7, #20]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3b6:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg4_t ghwcfg4 = {.value = dwc2->ghwcfg4};
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3bc:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3c4:	617b      	str	r3, [r7, #20]

  if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800a3c6:	7c3b      	ldrb	r3, [r7, #16]
 800a3c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	2b80      	cmp	r3, #128	@ 0x80
 800a3d0:	d114      	bne.n	800a3fc <phy_hs_init+0x58>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	f043 0310 	orr.w	r3, r3, #16
 800a3d8:	617b      	str	r3, [r7, #20]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	f023 0308 	bic.w	r3, r3, #8
 800a3e0:	617b      	str	r3, [r7, #20]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3e8:	617b      	str	r3, [r7, #20]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a3f0:	617b      	str	r3, [r7, #20]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 800a3f8:	617b      	str	r3, [r7, #20]
 800a3fa:	e012      	b.n	800a422 <phy_hs_init+0x7e>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	f023 0310 	bic.w	r3, r3, #16
 800a402:	617b      	str	r3, [r7, #20]

    // Set 16-bit interface if supported
    if (ghwcfg4.phy_data_width) {
 800a404:	7b7b      	ldrb	r3, [r7, #13]
 800a406:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d004      	beq.n	800a41a <phy_hs_init+0x76>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	f043 0308 	orr.w	r3, r3, #8
 800a416:	617b      	str	r3, [r7, #20]
 800a418:	e003      	b.n	800a422 <phy_hs_init+0x7e>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	f023 0308 	bic.w	r3, r3, #8
 800a420:	617b      	str	r3, [r7, #20]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, ghwcfg2.hs_phy_type);
 800a428:	7c3b      	ldrb	r3, [r7, #16]
 800a42a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	4619      	mov	r1, r3
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f7ff fec6 	bl	800a1c4 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f7ff ff55 	bl	800a2e8 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800a444:	617b      	str	r3, [r7, #20]
  gusbcfg |= (ghwcfg4.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 800a446:	7b7b      	ldrb	r3, [r7, #13]
 800a448:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d002      	beq.n	800a458 <phy_hs_init+0xb4>
 800a452:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800a456:	e001      	b.n	800a45c <phy_hs_init+0xb8>
 800a458:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800a45c:	697a      	ldr	r2, [r7, #20]
 800a45e:	4313      	orrs	r3, r2
 800a460:	617b      	str	r3, [r7, #20]
  dwc2->gusbcfg = gusbcfg;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	697a      	ldr	r2, [r7, #20]
 800a466:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, ghwcfg2.hs_phy_type);
 800a468:	7c3b      	ldrb	r3, [r7, #16]
 800a46a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	4619      	mov	r1, r3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f7ff fec2 	bl	800a1fc <dwc2_phy_update>
}
 800a478:	bf00      	nop
 800a47a:	3718      	adds	r7, #24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a48c:	0c1b      	lsrs	r3, r3, #16
 800a48e:	041b      	lsls	r3, r3, #16
 800a490:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	4a0e      	ldr	r2, [pc, #56]	@ (800a4d0 <check_dwc2+0x50>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d012      	beq.n	800a4c0 <check_dwc2+0x40>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	4a0d      	ldr	r2, [pc, #52]	@ (800a4d4 <check_dwc2+0x54>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d00e      	beq.n	800a4c0 <check_dwc2+0x40>
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	4a0c      	ldr	r2, [pc, #48]	@ (800a4d8 <check_dwc2+0x58>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d00a      	beq.n	800a4c0 <check_dwc2+0x40>
 800a4aa:	4b0c      	ldr	r3, [pc, #48]	@ (800a4dc <check_dwc2+0x5c>)
 800a4ac:	60bb      	str	r3, [r7, #8]
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f003 0301 	and.w	r3, r3, #1
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d000      	beq.n	800a4bc <check_dwc2+0x3c>
 800a4ba:	be00      	bkpt	0x0000
 800a4bc:	2300      	movs	r3, #0
 800a4be:	e000      	b.n	800a4c2 <check_dwc2+0x42>
#endif

  return true;
 800a4c0:	2301      	movs	r3, #1
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3714      	adds	r7, #20
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	4f540000 	.word	0x4f540000
 800a4d4:	55310000 	.word	0x55310000
 800a4d8:	55320000 	.word	0x55320000
 800a4dc:	e000edf0 	.word	0xe000edf0

0800a4e0 <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;
#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 800a4ec:	78fb      	ldrb	r3, [r7, #3]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d101      	bne.n	800a4f6 <dwc2_core_is_highspeed+0x16>
    return false;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	e00b      	b.n	800a50e <dwc2_core_is_highspeed+0x2e>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4fa:	60fb      	str	r3, [r7, #12]
  return ghwcfg2.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 800a4fc:	7b3b      	ldrb	r3, [r7, #12]
 800a4fe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a502:	b2db      	uxtb	r3, r3
 800a504:	2b00      	cmp	r3, #0
 800a506:	bf14      	ite	ne
 800a508:	2301      	movne	r3, #1
 800a50a:	2300      	moveq	r3, #0
 800a50c:	b2db      	uxtb	r3, r3
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3714      	adds	r7, #20
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
	...

0800a51c <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b088      	sub	sp, #32
 800a520:	af00      	add	r7, sp, #0
 800a522:	4603      	mov	r3, r0
 800a524:	71fb      	strb	r3, [r7, #7]
 800a526:	460b      	mov	r3, r1
 800a528:	71bb      	strb	r3, [r7, #6]
 800a52a:	4613      	mov	r3, r2
 800a52c:	717b      	strb	r3, [r7, #5]
 800a52e:	79fb      	ldrb	r3, [r7, #7]
 800a530:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a532:	7dfb      	ldrb	r3, [r7, #23]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d001      	beq.n	800a53c <dwc2_core_init+0x20>
    rhport = 0;
 800a538:	2300      	movs	r3, #0
 800a53a:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a53c:	7dfb      	ldrb	r3, [r7, #23]
 800a53e:	4a3b      	ldr	r2, [pc, #236]	@ (800a62c <dwc2_core_init+0x110>)
 800a540:	011b      	lsls	r3, r3, #4
 800a542:	4413      	add	r3, r2
 800a544:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a546:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 800a548:	69f8      	ldr	r0, [r7, #28]
 800a54a:	f7ff ff99 	bl	800a480 <check_dwc2>
 800a54e:	4603      	mov	r3, r0
 800a550:	f083 0301 	eor.w	r3, r3, #1
 800a554:	b2db      	uxtb	r3, r3
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00a      	beq.n	800a570 <dwc2_core_init+0x54>
 800a55a:	4b35      	ldr	r3, [pc, #212]	@ (800a630 <dwc2_core_init+0x114>)
 800a55c:	61bb      	str	r3, [r7, #24]
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f003 0301 	and.w	r3, r3, #1
 800a566:	2b00      	cmp	r3, #0
 800a568:	d000      	beq.n	800a56c <dwc2_core_init+0x50>
 800a56a:	be00      	bkpt	0x0000
 800a56c:	2300      	movs	r3, #0
 800a56e:	e058      	b.n	800a622 <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	f023 0201 	bic.w	r2, r3, #1
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 800a57c:	79bb      	ldrb	r3, [r7, #6]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d003      	beq.n	800a58a <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 800a582:	69f8      	ldr	r0, [r7, #28]
 800a584:	f7ff ff0e 	bl	800a3a4 <phy_hs_init>
 800a588:	e002      	b.n	800a590 <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 800a58a:	69f8      	ldr	r0, [r7, #28]
 800a58c:	f7ff fee2 	bl	800a354 <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	f043 0207 	orr.w	r2, r3, #7
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800a5a2:	f023 020f 	bic.w	r2, r3, #15
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	60fb      	str	r3, [r7, #12]
 800a5b0:	2310      	movs	r3, #16
 800a5b2:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800a5b4:	7afb      	ldrb	r3, [r7, #11]
 800a5b6:	019b      	lsls	r3, r3, #6
 800a5b8:	f043 0220 	orr.w	r2, r3, #32
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800a5c0:	bf00      	nop
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	f003 0320 	and.w	r3, r3, #32
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1f9      	bne.n	800a5c2 <dwc2_core_init+0xa6>
}
 800a5ce:	bf00      	nop
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	2210      	movs	r2, #16
 800a5d8:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800a5da:	bf00      	nop
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	f003 0310 	and.w	r3, r3, #16
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d1f9      	bne.n	800a5dc <dwc2_core_init+0xc0>
}
 800a5e8:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f0:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f8:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 800a600:	797b      	ldrb	r3, [r7, #5]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d006      	beq.n	800a614 <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	609a      	str	r2, [r3, #8]
 800a612:	e005      	b.n	800a620 <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	699b      	ldr	r3, [r3, #24]
 800a618:	f043 0210 	orr.w	r2, r3, #16
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	619a      	str	r2, [r3, #24]
  }

  return true;
 800a620:	2301      	movs	r3, #1
}
 800a622:	4618      	mov	r0, r3
 800a624:	3720      	adds	r7, #32
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	0800c87c 	.word	0x0800c87c
 800a630:	e000edf0 	.word	0xe000edf0

0800a634 <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 800a634:	b480      	push	{r7}
 800a636:	b08f      	sub	sp, #60	@ 0x3c
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	4613      	mov	r3, r2
 800a640:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a648:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 800a64a:	88fb      	ldrh	r3, [r7, #6]
 800a64c:	089b      	lsrs	r3, r3, #2
 800a64e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 800a650:	e00b      	b.n	800a66a <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 800a652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	68ba      	ldr	r2, [r7, #8]
 800a658:	627a      	str	r2, [r7, #36]	@ 0x24
 800a65a:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 800a65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a65e:	6a3a      	ldr	r2, [r7, #32]
 800a660:	601a      	str	r2, [r3, #0]
}
 800a662:	bf00      	nop
    dst += 4;
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	3304      	adds	r3, #4
 800a668:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 800a66a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a66c:	1e5a      	subs	r2, r3, #1
 800a66e:	86fa      	strh	r2, [r7, #54]	@ 0x36
 800a670:	2b00      	cmp	r3, #0
 800a672:	d1ee      	bne.n	800a652 <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 800a674:	88fb      	ldrh	r3, [r7, #6]
 800a676:	b2db      	uxtb	r3, r3
 800a678:	f003 0303 	and.w	r3, r3, #3
 800a67c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 800a680:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a684:	2b00      	cmp	r3, #0
 800a686:	d020      	beq.n	800a6ca <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 800a688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a690:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 800a69a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d907      	bls.n	800a6b2 <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6a8:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 800a6aa:	69ba      	ldr	r2, [r7, #24]
 800a6ac:	0a12      	lsrs	r2, r2, #8
 800a6ae:	b2d2      	uxtb	r2, r2
 800a6b0:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 800a6b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d907      	bls.n	800a6ca <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	3302      	adds	r3, #2
 800a6be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6c0:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 800a6c2:	697a      	ldr	r2, [r7, #20]
 800a6c4:	0c12      	lsrs	r2, r2, #16
 800a6c6:	b2d2      	uxtb	r2, r2
 800a6c8:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800a6ca:	bf00      	nop
 800a6cc:	373c      	adds	r7, #60	@ 0x3c
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr

0800a6d6 <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 800a6d6:	b480      	push	{r7}
 800a6d8:	b08b      	sub	sp, #44	@ 0x2c
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	60f8      	str	r0, [r7, #12]
 800a6de:	607a      	str	r2, [r7, #4]
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	72fb      	strb	r3, [r7, #11]
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 800a6ea:	7afb      	ldrb	r3, [r7, #11]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	031b      	lsls	r3, r3, #12
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 800a6f6:	893b      	ldrh	r3, [r7, #8]
 800a6f8:	089b      	lsrs	r3, r3, #2
 800a6fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 800a6fc:	e008      	b.n	800a710 <dfifo_write_packet+0x3a>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	601a      	str	r2, [r3, #0]
    src += 4;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	3304      	adds	r3, #4
 800a70e:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 800a710:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a712:	1e5a      	subs	r2, r3, #1
 800a714:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1f1      	bne.n	800a6fe <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 800a71a:	893b      	ldrh	r3, [r7, #8]
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	f003 0303 	and.w	r3, r3, #3
 800a722:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 800a724:	7efb      	ldrb	r3, [r7, #27]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d019      	beq.n	800a75e <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 800a730:	7efb      	ldrb	r3, [r7, #27]
 800a732:	2b01      	cmp	r3, #1
 800a734:	d906      	bls.n	800a744 <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	3301      	adds	r3, #1
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	021b      	lsls	r3, r3, #8
 800a73e:	6a3a      	ldr	r2, [r7, #32]
 800a740:	4313      	orrs	r3, r2
 800a742:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 800a744:	7efb      	ldrb	r3, [r7, #27]
 800a746:	2b02      	cmp	r3, #2
 800a748:	d906      	bls.n	800a758 <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	3302      	adds	r3, #2
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	041b      	lsls	r3, r3, #16
 800a752:	6a3a      	ldr	r2, [r7, #32]
 800a754:	4313      	orrs	r3, r2
 800a756:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	6a3a      	ldr	r2, [r7, #32]
 800a75c:	601a      	str	r2, [r3, #0]
  }
}
 800a75e:	bf00      	nop
 800a760:	372c      	adds	r7, #44	@ 0x2c
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr
	...

0800a76c <tusb_rhport_init>:
}

//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+
bool tusb_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b086      	sub	sp, #24
 800a770:	af00      	add	r7, sp, #0
 800a772:	4603      	mov	r3, r0
 800a774:	6039      	str	r1, [r7, #0]
 800a776:	71fb      	strb	r3, [r7, #7]
  //  backward compatible called with tusb_init(void)
  #if defined(TUD_OPT_RHPORT) || defined(TUH_OPT_RHPORT)
  if (rh_init == NULL) {
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d11f      	bne.n	800a7be <tusb_rhport_init+0x52>
    #if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
    // init device stack CFG_TUSB_RHPORTx_MODE must be defined
    const tusb_rhport_init_t dev_init = {
 800a77e:	2301      	movs	r3, #1
 800a780:	723b      	strb	r3, [r7, #8]
 800a782:	2300      	movs	r3, #0
 800a784:	727b      	strb	r3, [r7, #9]
      .role = TUSB_ROLE_DEVICE,
      .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
    };
    TU_ASSERT ( tud_rhport_init(TUD_OPT_RHPORT, &dev_init) );
 800a786:	f107 0308 	add.w	r3, r7, #8
 800a78a:	4619      	mov	r1, r3
 800a78c:	2000      	movs	r0, #0
 800a78e:	f7fc fa63 	bl	8006c58 <tud_rhport_init>
 800a792:	4603      	mov	r3, r0
 800a794:	f083 0301 	eor.w	r3, r3, #1
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00a      	beq.n	800a7b4 <tusb_rhport_init+0x48>
 800a79e:	4b23      	ldr	r3, [pc, #140]	@ (800a82c <tusb_rhport_init+0xc0>)
 800a7a0:	60fb      	str	r3, [r7, #12]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f003 0301 	and.w	r3, r3, #1
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d000      	beq.n	800a7b0 <tusb_rhport_init+0x44>
 800a7ae:	be00      	bkpt	0x0000
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	e036      	b.n	800a822 <tusb_rhport_init+0xb6>
    _tusb_rhport_role[TUD_OPT_RHPORT] = TUSB_ROLE_DEVICE;
 800a7b4:	4b1e      	ldr	r3, [pc, #120]	@ (800a830 <tusb_rhport_init+0xc4>)
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	701a      	strb	r2, [r3, #0]
    };
    TU_ASSERT( tuh_rhport_init(TUH_OPT_RHPORT, &host_init) );
    _tusb_rhport_role[TUH_OPT_RHPORT] = TUSB_ROLE_HOST;
    #endif

    return true;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	e031      	b.n	800a822 <tusb_rhport_init+0xb6>
  }
  #endif

  // new API with explicit rhport and role
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 800a7be:	79fb      	ldrb	r3, [r7, #7]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d803      	bhi.n	800a7cc <tusb_rhport_init+0x60>
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10a      	bne.n	800a7e2 <tusb_rhport_init+0x76>
 800a7cc:	4b17      	ldr	r3, [pc, #92]	@ (800a82c <tusb_rhport_init+0xc0>)
 800a7ce:	613b      	str	r3, [r7, #16]
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 0301 	and.w	r3, r3, #1
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d000      	beq.n	800a7de <tusb_rhport_init+0x72>
 800a7dc:	be00      	bkpt	0x0000
 800a7de:	2300      	movs	r3, #0
 800a7e0:	e01f      	b.n	800a822 <tusb_rhport_init+0xb6>
  _tusb_rhport_role[rhport] = rh_init->role;
 800a7e2:	79fb      	ldrb	r3, [r7, #7]
 800a7e4:	683a      	ldr	r2, [r7, #0]
 800a7e6:	7811      	ldrb	r1, [r2, #0]
 800a7e8:	4a11      	ldr	r2, [pc, #68]	@ (800a830 <tusb_rhport_init+0xc4>)
 800a7ea:	54d1      	strb	r1, [r2, r3]

  #if CFG_TUD_ENABLED
  if (rh_init->role == TUSB_ROLE_DEVICE) {
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d115      	bne.n	800a820 <tusb_rhport_init+0xb4>
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
 800a7f4:	79fb      	ldrb	r3, [r7, #7]
 800a7f6:	6839      	ldr	r1, [r7, #0]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7fc fa2d 	bl	8006c58 <tud_rhport_init>
 800a7fe:	4603      	mov	r3, r0
 800a800:	f083 0301 	eor.w	r3, r3, #1
 800a804:	b2db      	uxtb	r3, r3
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00a      	beq.n	800a820 <tusb_rhport_init+0xb4>
 800a80a:	4b08      	ldr	r3, [pc, #32]	@ (800a82c <tusb_rhport_init+0xc0>)
 800a80c:	617b      	str	r3, [r7, #20]
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 0301 	and.w	r3, r3, #1
 800a816:	2b00      	cmp	r3, #0
 800a818:	d000      	beq.n	800a81c <tusb_rhport_init+0xb0>
 800a81a:	be00      	bkpt	0x0000
 800a81c:	2300      	movs	r3, #0
 800a81e:	e000      	b.n	800a822 <tusb_rhport_init+0xb6>
  if (rh_init->role == TUSB_ROLE_HOST) {
    TU_ASSERT(tuh_rhport_init(rhport, rh_init));
  }
  #endif

  return true;
 800a820:	2301      	movs	r3, #1
}
 800a822:	4618      	mov	r0, r3
 800a824:	3718      	adds	r7, #24
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	e000edf0 	.word	0xe000edf0
 800a830:	20000d40 	.word	0x20000d40

0800a834 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a846:	b2db      	uxtb	r3, r3
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d106      	bne.n	800a85a <tu_edpt_claim+0x26>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a854:	b2db      	uxtb	r3, r3
 800a856:	2b00      	cmp	r3, #0
 800a858:	d001      	beq.n	800a85e <tu_edpt_claim+0x2a>
 800a85a:	2300      	movs	r3, #0
 800a85c:	e01e      	b.n	800a89c <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a866:	b2db      	uxtb	r3, r3
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d108      	bne.n	800a87e <tu_edpt_claim+0x4a>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a874:	b2db      	uxtb	r3, r3
 800a876:	2b00      	cmp	r3, #0
 800a878:	d101      	bne.n	800a87e <tu_edpt_claim+0x4a>
 800a87a:	2301      	movs	r3, #1
 800a87c:	e000      	b.n	800a880 <tu_edpt_claim+0x4c>
 800a87e:	2300      	movs	r3, #0
 800a880:	73fb      	strb	r3, [r7, #15]
 800a882:	7bfb      	ldrb	r3, [r7, #15]
 800a884:	f003 0301 	and.w	r3, r3, #1
 800a888:	73fb      	strb	r3, [r7, #15]
  if (available) {
 800a88a:	7bfb      	ldrb	r3, [r7, #15]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d004      	beq.n	800a89a <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	7813      	ldrb	r3, [r2, #0]
 800a894:	f043 0304 	orr.w	r3, r3, #4
 800a898:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 800a89a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3714      	adds	r7, #20
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d108      	bne.n	800a8d2 <tu_edpt_release+0x2a>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d101      	bne.n	800a8d2 <tu_edpt_release+0x2a>
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e000      	b.n	800a8d4 <tu_edpt_release+0x2c>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	73fb      	strb	r3, [r7, #15]
 800a8d6:	7bfb      	ldrb	r3, [r7, #15]
 800a8d8:	f003 0301 	and.w	r3, r3, #1
 800a8dc:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 800a8de:	7bfb      	ldrb	r3, [r7, #15]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d004      	beq.n	800a8ee <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	7813      	ldrb	r3, [r2, #0]
 800a8e8:	f023 0304 	bic.w	r3, r3, #4
 800a8ec:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 800a8ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3714      	adds	r7, #20
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 800a8fc:	b480      	push	{r7}
 800a8fe:	b08b      	sub	sp, #44	@ 0x2c
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	460b      	mov	r3, r1
 800a906:	70fb      	strb	r3, [r7, #3]
 800a908:	4613      	mov	r3, r2
 800a90a:	70bb      	strb	r3, [r7, #2]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	889b      	ldrh	r3, [r3, #4]
 800a914:	b29b      	uxth	r3, r3
 800a916:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a91a:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800a91c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	78db      	ldrb	r3, [r3, #3]
 800a922:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a926:	b2db      	uxtb	r3, r3
 800a928:	2b03      	cmp	r3, #3
 800a92a:	d059      	beq.n	800a9e0 <tu_edpt_validate+0xe4>
 800a92c:	2b03      	cmp	r3, #3
 800a92e:	dc6e      	bgt.n	800aa0e <tu_edpt_validate+0x112>
 800a930:	2b01      	cmp	r3, #1
 800a932:	d002      	beq.n	800a93a <tu_edpt_validate+0x3e>
 800a934:	2b02      	cmp	r3, #2
 800a936:	d018      	beq.n	800a96a <tu_edpt_validate+0x6e>
 800a938:	e069      	b.n	800aa0e <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800a93a:	78fb      	ldrb	r3, [r7, #3]
 800a93c:	2b02      	cmp	r3, #2
 800a93e:	d102      	bne.n	800a946 <tu_edpt_validate+0x4a>
 800a940:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a944:	e001      	b.n	800a94a <tu_edpt_validate+0x4e>
 800a946:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800a94a:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 800a94c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a94e:	8a7b      	ldrh	r3, [r7, #18]
 800a950:	429a      	cmp	r2, r3
 800a952:	d95e      	bls.n	800aa12 <tu_edpt_validate+0x116>
 800a954:	4b35      	ldr	r3, [pc, #212]	@ (800aa2c <tu_edpt_validate+0x130>)
 800a956:	60fb      	str	r3, [r7, #12]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f003 0301 	and.w	r3, r3, #1
 800a960:	2b00      	cmp	r3, #0
 800a962:	d000      	beq.n	800a966 <tu_edpt_validate+0x6a>
 800a964:	be00      	bkpt	0x0000
 800a966:	2300      	movs	r3, #0
 800a968:	e059      	b.n	800aa1e <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 800a96a:	78fb      	ldrb	r3, [r7, #3]
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d10e      	bne.n	800a98e <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 800a970:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a972:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a976:	d04e      	beq.n	800aa16 <tu_edpt_validate+0x11a>
 800a978:	4b2c      	ldr	r3, [pc, #176]	@ (800aa2c <tu_edpt_validate+0x130>)
 800a97a:	617b      	str	r3, [r7, #20]
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 0301 	and.w	r3, r3, #1
 800a984:	2b00      	cmp	r3, #0
 800a986:	d000      	beq.n	800a98a <tu_edpt_validate+0x8e>
 800a988:	be00      	bkpt	0x0000
 800a98a:	2300      	movs	r3, #0
 800a98c:	e047      	b.n	800aa1e <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 800a98e:	78bb      	ldrb	r3, [r7, #2]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00e      	beq.n	800a9b2 <tu_edpt_validate+0xb6>
 800a994:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a996:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a99a:	d10a      	bne.n	800a9b2 <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a9a8:	711a      	strb	r2, [r3, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 800a9ae:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 800a9b0:	e031      	b.n	800aa16 <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 800a9b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a9b4:	2b08      	cmp	r3, #8
 800a9b6:	d02e      	beq.n	800aa16 <tu_edpt_validate+0x11a>
 800a9b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a9ba:	2b10      	cmp	r3, #16
 800a9bc:	d02b      	beq.n	800aa16 <tu_edpt_validate+0x11a>
 800a9be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a9c0:	2b20      	cmp	r3, #32
 800a9c2:	d028      	beq.n	800aa16 <tu_edpt_validate+0x11a>
 800a9c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a9c6:	2b40      	cmp	r3, #64	@ 0x40
 800a9c8:	d025      	beq.n	800aa16 <tu_edpt_validate+0x11a>
 800a9ca:	4b18      	ldr	r3, [pc, #96]	@ (800aa2c <tu_edpt_validate+0x130>)
 800a9cc:	61bb      	str	r3, [r7, #24]
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f003 0301 	and.w	r3, r3, #1
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d000      	beq.n	800a9dc <tu_edpt_validate+0xe0>
 800a9da:	be00      	bkpt	0x0000
 800a9dc:	2300      	movs	r3, #0
 800a9de:	e01e      	b.n	800aa1e <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800a9e0:	78fb      	ldrb	r3, [r7, #3]
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	d102      	bne.n	800a9ec <tu_edpt_validate+0xf0>
 800a9e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9ea:	e000      	b.n	800a9ee <tu_edpt_validate+0xf2>
 800a9ec:	2340      	movs	r3, #64	@ 0x40
 800a9ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800a9f0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a9f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d910      	bls.n	800aa1a <tu_edpt_validate+0x11e>
 800a9f8:	4b0c      	ldr	r3, [pc, #48]	@ (800aa2c <tu_edpt_validate+0x130>)
 800a9fa:	623b      	str	r3, [r7, #32]
 800a9fc:	6a3b      	ldr	r3, [r7, #32]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f003 0301 	and.w	r3, r3, #1
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d000      	beq.n	800aa0a <tu_edpt_validate+0x10e>
 800aa08:	be00      	bkpt	0x0000
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	e007      	b.n	800aa1e <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	e005      	b.n	800aa1e <tu_edpt_validate+0x122>
      break;
 800aa12:	bf00      	nop
 800aa14:	e002      	b.n	800aa1c <tu_edpt_validate+0x120>
      break;
 800aa16:	bf00      	nop
 800aa18:	e000      	b.n	800aa1c <tu_edpt_validate+0x120>
      break;
 800aa1a:	bf00      	nop
  }

  return true;
 800aa1c:	2301      	movs	r3, #1
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	372c      	adds	r7, #44	@ 0x2c
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	e000edf0 	.word	0xe000edf0

0800aa30 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 800aa30:	b480      	push	{r7}
 800aa32:	b08d      	sub	sp, #52	@ 0x34
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	4611      	mov	r1, r2
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	460b      	mov	r3, r1
 800aa40:	80fb      	strh	r3, [r7, #6]
 800aa42:	4613      	mov	r3, r2
 800aa44:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800aa4a:	88fb      	ldrh	r3, [r7, #6]
 800aa4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa4e:	4413      	add	r3, r2
 800aa50:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 800aa52:	e027      	b.n	800aaa4 <tu_edpt_bind_driver+0x74>
 800aa54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa56:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800aa58:	6a3b      	ldr	r3, [r7, #32]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 800aa5e:	2b05      	cmp	r3, #5
 800aa60:	d116      	bne.n	800aa90 <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800aa62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa64:	789b      	ldrb	r3, [r3, #2]
 800aa66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800aa6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa6e:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800aa70:	7fbb      	ldrb	r3, [r7, #30]
 800aa72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa76:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800aa78:	005b      	lsls	r3, r3, #1
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800aa82:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800aa84:	7ffa      	ldrb	r2, [r7, #31]
 800aa86:	09d2      	lsrs	r2, r2, #7
 800aa88:	b2d2      	uxtb	r2, r2
 800aa8a:	4611      	mov	r1, r2
 800aa8c:	797a      	ldrb	r2, [r7, #5]
 800aa8e:	545a      	strb	r2, [r3, r1]
 800aa90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa92:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 800aaa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 800aaa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aaa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d3d3      	bcc.n	800aa54 <tu_edpt_bind_driver+0x24>
  }
}
 800aaac:	bf00      	nop
 800aaae:	bf00      	nop
 800aab0:	3734      	adds	r7, #52	@ 0x34
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr

0800aaba <atoi>:
 800aaba:	220a      	movs	r2, #10
 800aabc:	2100      	movs	r1, #0
 800aabe:	f000 b87b 	b.w	800abb8 <strtol>
	...

0800aac4 <_strtol_l.isra.0>:
 800aac4:	2b24      	cmp	r3, #36	@ 0x24
 800aac6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaca:	4686      	mov	lr, r0
 800aacc:	4690      	mov	r8, r2
 800aace:	d801      	bhi.n	800aad4 <_strtol_l.isra.0+0x10>
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d106      	bne.n	800aae2 <_strtol_l.isra.0+0x1e>
 800aad4:	f000 fa60 	bl	800af98 <__errno>
 800aad8:	2316      	movs	r3, #22
 800aada:	6003      	str	r3, [r0, #0]
 800aadc:	2000      	movs	r0, #0
 800aade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae2:	4834      	ldr	r0, [pc, #208]	@ (800abb4 <_strtol_l.isra.0+0xf0>)
 800aae4:	460d      	mov	r5, r1
 800aae6:	462a      	mov	r2, r5
 800aae8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aaec:	5d06      	ldrb	r6, [r0, r4]
 800aaee:	f016 0608 	ands.w	r6, r6, #8
 800aaf2:	d1f8      	bne.n	800aae6 <_strtol_l.isra.0+0x22>
 800aaf4:	2c2d      	cmp	r4, #45	@ 0x2d
 800aaf6:	d110      	bne.n	800ab1a <_strtol_l.isra.0+0x56>
 800aaf8:	782c      	ldrb	r4, [r5, #0]
 800aafa:	2601      	movs	r6, #1
 800aafc:	1c95      	adds	r5, r2, #2
 800aafe:	f033 0210 	bics.w	r2, r3, #16
 800ab02:	d115      	bne.n	800ab30 <_strtol_l.isra.0+0x6c>
 800ab04:	2c30      	cmp	r4, #48	@ 0x30
 800ab06:	d10d      	bne.n	800ab24 <_strtol_l.isra.0+0x60>
 800ab08:	782a      	ldrb	r2, [r5, #0]
 800ab0a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ab0e:	2a58      	cmp	r2, #88	@ 0x58
 800ab10:	d108      	bne.n	800ab24 <_strtol_l.isra.0+0x60>
 800ab12:	786c      	ldrb	r4, [r5, #1]
 800ab14:	3502      	adds	r5, #2
 800ab16:	2310      	movs	r3, #16
 800ab18:	e00a      	b.n	800ab30 <_strtol_l.isra.0+0x6c>
 800ab1a:	2c2b      	cmp	r4, #43	@ 0x2b
 800ab1c:	bf04      	itt	eq
 800ab1e:	782c      	ldrbeq	r4, [r5, #0]
 800ab20:	1c95      	addeq	r5, r2, #2
 800ab22:	e7ec      	b.n	800aafe <_strtol_l.isra.0+0x3a>
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1f6      	bne.n	800ab16 <_strtol_l.isra.0+0x52>
 800ab28:	2c30      	cmp	r4, #48	@ 0x30
 800ab2a:	bf14      	ite	ne
 800ab2c:	230a      	movne	r3, #10
 800ab2e:	2308      	moveq	r3, #8
 800ab30:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ab34:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ab38:	2200      	movs	r2, #0
 800ab3a:	fbbc f9f3 	udiv	r9, ip, r3
 800ab3e:	4610      	mov	r0, r2
 800ab40:	fb03 ca19 	mls	sl, r3, r9, ip
 800ab44:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ab48:	2f09      	cmp	r7, #9
 800ab4a:	d80f      	bhi.n	800ab6c <_strtol_l.isra.0+0xa8>
 800ab4c:	463c      	mov	r4, r7
 800ab4e:	42a3      	cmp	r3, r4
 800ab50:	dd1b      	ble.n	800ab8a <_strtol_l.isra.0+0xc6>
 800ab52:	1c57      	adds	r7, r2, #1
 800ab54:	d007      	beq.n	800ab66 <_strtol_l.isra.0+0xa2>
 800ab56:	4581      	cmp	r9, r0
 800ab58:	d314      	bcc.n	800ab84 <_strtol_l.isra.0+0xc0>
 800ab5a:	d101      	bne.n	800ab60 <_strtol_l.isra.0+0x9c>
 800ab5c:	45a2      	cmp	sl, r4
 800ab5e:	db11      	blt.n	800ab84 <_strtol_l.isra.0+0xc0>
 800ab60:	fb00 4003 	mla	r0, r0, r3, r4
 800ab64:	2201      	movs	r2, #1
 800ab66:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab6a:	e7eb      	b.n	800ab44 <_strtol_l.isra.0+0x80>
 800ab6c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ab70:	2f19      	cmp	r7, #25
 800ab72:	d801      	bhi.n	800ab78 <_strtol_l.isra.0+0xb4>
 800ab74:	3c37      	subs	r4, #55	@ 0x37
 800ab76:	e7ea      	b.n	800ab4e <_strtol_l.isra.0+0x8a>
 800ab78:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ab7c:	2f19      	cmp	r7, #25
 800ab7e:	d804      	bhi.n	800ab8a <_strtol_l.isra.0+0xc6>
 800ab80:	3c57      	subs	r4, #87	@ 0x57
 800ab82:	e7e4      	b.n	800ab4e <_strtol_l.isra.0+0x8a>
 800ab84:	f04f 32ff 	mov.w	r2, #4294967295
 800ab88:	e7ed      	b.n	800ab66 <_strtol_l.isra.0+0xa2>
 800ab8a:	1c53      	adds	r3, r2, #1
 800ab8c:	d108      	bne.n	800aba0 <_strtol_l.isra.0+0xdc>
 800ab8e:	2322      	movs	r3, #34	@ 0x22
 800ab90:	f8ce 3000 	str.w	r3, [lr]
 800ab94:	4660      	mov	r0, ip
 800ab96:	f1b8 0f00 	cmp.w	r8, #0
 800ab9a:	d0a0      	beq.n	800aade <_strtol_l.isra.0+0x1a>
 800ab9c:	1e69      	subs	r1, r5, #1
 800ab9e:	e006      	b.n	800abae <_strtol_l.isra.0+0xea>
 800aba0:	b106      	cbz	r6, 800aba4 <_strtol_l.isra.0+0xe0>
 800aba2:	4240      	negs	r0, r0
 800aba4:	f1b8 0f00 	cmp.w	r8, #0
 800aba8:	d099      	beq.n	800aade <_strtol_l.isra.0+0x1a>
 800abaa:	2a00      	cmp	r2, #0
 800abac:	d1f6      	bne.n	800ab9c <_strtol_l.isra.0+0xd8>
 800abae:	f8c8 1000 	str.w	r1, [r8]
 800abb2:	e794      	b.n	800aade <_strtol_l.isra.0+0x1a>
 800abb4:	0800c88d 	.word	0x0800c88d

0800abb8 <strtol>:
 800abb8:	4613      	mov	r3, r2
 800abba:	460a      	mov	r2, r1
 800abbc:	4601      	mov	r1, r0
 800abbe:	4802      	ldr	r0, [pc, #8]	@ (800abc8 <strtol+0x10>)
 800abc0:	6800      	ldr	r0, [r0, #0]
 800abc2:	f7ff bf7f 	b.w	800aac4 <_strtol_l.isra.0>
 800abc6:	bf00      	nop
 800abc8:	20000090 	.word	0x20000090

0800abcc <std>:
 800abcc:	2300      	movs	r3, #0
 800abce:	b510      	push	{r4, lr}
 800abd0:	4604      	mov	r4, r0
 800abd2:	e9c0 3300 	strd	r3, r3, [r0]
 800abd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abda:	6083      	str	r3, [r0, #8]
 800abdc:	8181      	strh	r1, [r0, #12]
 800abde:	6643      	str	r3, [r0, #100]	@ 0x64
 800abe0:	81c2      	strh	r2, [r0, #14]
 800abe2:	6183      	str	r3, [r0, #24]
 800abe4:	4619      	mov	r1, r3
 800abe6:	2208      	movs	r2, #8
 800abe8:	305c      	adds	r0, #92	@ 0x5c
 800abea:	f000 f92a 	bl	800ae42 <memset>
 800abee:	4b0d      	ldr	r3, [pc, #52]	@ (800ac24 <std+0x58>)
 800abf0:	6263      	str	r3, [r4, #36]	@ 0x24
 800abf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ac28 <std+0x5c>)
 800abf4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800abf6:	4b0d      	ldr	r3, [pc, #52]	@ (800ac2c <std+0x60>)
 800abf8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800abfa:	4b0d      	ldr	r3, [pc, #52]	@ (800ac30 <std+0x64>)
 800abfc:	6323      	str	r3, [r4, #48]	@ 0x30
 800abfe:	4b0d      	ldr	r3, [pc, #52]	@ (800ac34 <std+0x68>)
 800ac00:	6224      	str	r4, [r4, #32]
 800ac02:	429c      	cmp	r4, r3
 800ac04:	d006      	beq.n	800ac14 <std+0x48>
 800ac06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ac0a:	4294      	cmp	r4, r2
 800ac0c:	d002      	beq.n	800ac14 <std+0x48>
 800ac0e:	33d0      	adds	r3, #208	@ 0xd0
 800ac10:	429c      	cmp	r4, r3
 800ac12:	d105      	bne.n	800ac20 <std+0x54>
 800ac14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ac18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac1c:	f000 b9e6 	b.w	800afec <__retarget_lock_init_recursive>
 800ac20:	bd10      	pop	{r4, pc}
 800ac22:	bf00      	nop
 800ac24:	0800adbd 	.word	0x0800adbd
 800ac28:	0800addf 	.word	0x0800addf
 800ac2c:	0800ae17 	.word	0x0800ae17
 800ac30:	0800ae3b 	.word	0x0800ae3b
 800ac34:	20000d44 	.word	0x20000d44

0800ac38 <stdio_exit_handler>:
 800ac38:	4a02      	ldr	r2, [pc, #8]	@ (800ac44 <stdio_exit_handler+0xc>)
 800ac3a:	4903      	ldr	r1, [pc, #12]	@ (800ac48 <stdio_exit_handler+0x10>)
 800ac3c:	4803      	ldr	r0, [pc, #12]	@ (800ac4c <stdio_exit_handler+0x14>)
 800ac3e:	f000 b869 	b.w	800ad14 <_fwalk_sglue>
 800ac42:	bf00      	nop
 800ac44:	20000084 	.word	0x20000084
 800ac48:	0800b91d 	.word	0x0800b91d
 800ac4c:	20000094 	.word	0x20000094

0800ac50 <cleanup_stdio>:
 800ac50:	6841      	ldr	r1, [r0, #4]
 800ac52:	4b0c      	ldr	r3, [pc, #48]	@ (800ac84 <cleanup_stdio+0x34>)
 800ac54:	4299      	cmp	r1, r3
 800ac56:	b510      	push	{r4, lr}
 800ac58:	4604      	mov	r4, r0
 800ac5a:	d001      	beq.n	800ac60 <cleanup_stdio+0x10>
 800ac5c:	f000 fe5e 	bl	800b91c <_fflush_r>
 800ac60:	68a1      	ldr	r1, [r4, #8]
 800ac62:	4b09      	ldr	r3, [pc, #36]	@ (800ac88 <cleanup_stdio+0x38>)
 800ac64:	4299      	cmp	r1, r3
 800ac66:	d002      	beq.n	800ac6e <cleanup_stdio+0x1e>
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f000 fe57 	bl	800b91c <_fflush_r>
 800ac6e:	68e1      	ldr	r1, [r4, #12]
 800ac70:	4b06      	ldr	r3, [pc, #24]	@ (800ac8c <cleanup_stdio+0x3c>)
 800ac72:	4299      	cmp	r1, r3
 800ac74:	d004      	beq.n	800ac80 <cleanup_stdio+0x30>
 800ac76:	4620      	mov	r0, r4
 800ac78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac7c:	f000 be4e 	b.w	800b91c <_fflush_r>
 800ac80:	bd10      	pop	{r4, pc}
 800ac82:	bf00      	nop
 800ac84:	20000d44 	.word	0x20000d44
 800ac88:	20000dac 	.word	0x20000dac
 800ac8c:	20000e14 	.word	0x20000e14

0800ac90 <global_stdio_init.part.0>:
 800ac90:	b510      	push	{r4, lr}
 800ac92:	4b0b      	ldr	r3, [pc, #44]	@ (800acc0 <global_stdio_init.part.0+0x30>)
 800ac94:	4c0b      	ldr	r4, [pc, #44]	@ (800acc4 <global_stdio_init.part.0+0x34>)
 800ac96:	4a0c      	ldr	r2, [pc, #48]	@ (800acc8 <global_stdio_init.part.0+0x38>)
 800ac98:	601a      	str	r2, [r3, #0]
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	2104      	movs	r1, #4
 800aca0:	f7ff ff94 	bl	800abcc <std>
 800aca4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aca8:	2201      	movs	r2, #1
 800acaa:	2109      	movs	r1, #9
 800acac:	f7ff ff8e 	bl	800abcc <std>
 800acb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800acb4:	2202      	movs	r2, #2
 800acb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acba:	2112      	movs	r1, #18
 800acbc:	f7ff bf86 	b.w	800abcc <std>
 800acc0:	20000e7c 	.word	0x20000e7c
 800acc4:	20000d44 	.word	0x20000d44
 800acc8:	0800ac39 	.word	0x0800ac39

0800accc <__sfp_lock_acquire>:
 800accc:	4801      	ldr	r0, [pc, #4]	@ (800acd4 <__sfp_lock_acquire+0x8>)
 800acce:	f000 b98e 	b.w	800afee <__retarget_lock_acquire_recursive>
 800acd2:	bf00      	nop
 800acd4:	20000e85 	.word	0x20000e85

0800acd8 <__sfp_lock_release>:
 800acd8:	4801      	ldr	r0, [pc, #4]	@ (800ace0 <__sfp_lock_release+0x8>)
 800acda:	f000 b989 	b.w	800aff0 <__retarget_lock_release_recursive>
 800acde:	bf00      	nop
 800ace0:	20000e85 	.word	0x20000e85

0800ace4 <__sinit>:
 800ace4:	b510      	push	{r4, lr}
 800ace6:	4604      	mov	r4, r0
 800ace8:	f7ff fff0 	bl	800accc <__sfp_lock_acquire>
 800acec:	6a23      	ldr	r3, [r4, #32]
 800acee:	b11b      	cbz	r3, 800acf8 <__sinit+0x14>
 800acf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acf4:	f7ff bff0 	b.w	800acd8 <__sfp_lock_release>
 800acf8:	4b04      	ldr	r3, [pc, #16]	@ (800ad0c <__sinit+0x28>)
 800acfa:	6223      	str	r3, [r4, #32]
 800acfc:	4b04      	ldr	r3, [pc, #16]	@ (800ad10 <__sinit+0x2c>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d1f5      	bne.n	800acf0 <__sinit+0xc>
 800ad04:	f7ff ffc4 	bl	800ac90 <global_stdio_init.part.0>
 800ad08:	e7f2      	b.n	800acf0 <__sinit+0xc>
 800ad0a:	bf00      	nop
 800ad0c:	0800ac51 	.word	0x0800ac51
 800ad10:	20000e7c 	.word	0x20000e7c

0800ad14 <_fwalk_sglue>:
 800ad14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad18:	4607      	mov	r7, r0
 800ad1a:	4688      	mov	r8, r1
 800ad1c:	4614      	mov	r4, r2
 800ad1e:	2600      	movs	r6, #0
 800ad20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad24:	f1b9 0901 	subs.w	r9, r9, #1
 800ad28:	d505      	bpl.n	800ad36 <_fwalk_sglue+0x22>
 800ad2a:	6824      	ldr	r4, [r4, #0]
 800ad2c:	2c00      	cmp	r4, #0
 800ad2e:	d1f7      	bne.n	800ad20 <_fwalk_sglue+0xc>
 800ad30:	4630      	mov	r0, r6
 800ad32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad36:	89ab      	ldrh	r3, [r5, #12]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d907      	bls.n	800ad4c <_fwalk_sglue+0x38>
 800ad3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad40:	3301      	adds	r3, #1
 800ad42:	d003      	beq.n	800ad4c <_fwalk_sglue+0x38>
 800ad44:	4629      	mov	r1, r5
 800ad46:	4638      	mov	r0, r7
 800ad48:	47c0      	blx	r8
 800ad4a:	4306      	orrs	r6, r0
 800ad4c:	3568      	adds	r5, #104	@ 0x68
 800ad4e:	e7e9      	b.n	800ad24 <_fwalk_sglue+0x10>

0800ad50 <sniprintf>:
 800ad50:	b40c      	push	{r2, r3}
 800ad52:	b530      	push	{r4, r5, lr}
 800ad54:	4b18      	ldr	r3, [pc, #96]	@ (800adb8 <sniprintf+0x68>)
 800ad56:	1e0c      	subs	r4, r1, #0
 800ad58:	681d      	ldr	r5, [r3, #0]
 800ad5a:	b09d      	sub	sp, #116	@ 0x74
 800ad5c:	da08      	bge.n	800ad70 <sniprintf+0x20>
 800ad5e:	238b      	movs	r3, #139	@ 0x8b
 800ad60:	602b      	str	r3, [r5, #0]
 800ad62:	f04f 30ff 	mov.w	r0, #4294967295
 800ad66:	b01d      	add	sp, #116	@ 0x74
 800ad68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad6c:	b002      	add	sp, #8
 800ad6e:	4770      	bx	lr
 800ad70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ad74:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ad78:	f04f 0300 	mov.w	r3, #0
 800ad7c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ad7e:	bf14      	ite	ne
 800ad80:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ad84:	4623      	moveq	r3, r4
 800ad86:	9304      	str	r3, [sp, #16]
 800ad88:	9307      	str	r3, [sp, #28]
 800ad8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ad8e:	9002      	str	r0, [sp, #8]
 800ad90:	9006      	str	r0, [sp, #24]
 800ad92:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ad96:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ad98:	ab21      	add	r3, sp, #132	@ 0x84
 800ad9a:	a902      	add	r1, sp, #8
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	9301      	str	r3, [sp, #4]
 800ada0:	f000 fab0 	bl	800b304 <_svfiprintf_r>
 800ada4:	1c43      	adds	r3, r0, #1
 800ada6:	bfbc      	itt	lt
 800ada8:	238b      	movlt	r3, #139	@ 0x8b
 800adaa:	602b      	strlt	r3, [r5, #0]
 800adac:	2c00      	cmp	r4, #0
 800adae:	d0da      	beq.n	800ad66 <sniprintf+0x16>
 800adb0:	9b02      	ldr	r3, [sp, #8]
 800adb2:	2200      	movs	r2, #0
 800adb4:	701a      	strb	r2, [r3, #0]
 800adb6:	e7d6      	b.n	800ad66 <sniprintf+0x16>
 800adb8:	20000090 	.word	0x20000090

0800adbc <__sread>:
 800adbc:	b510      	push	{r4, lr}
 800adbe:	460c      	mov	r4, r1
 800adc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adc4:	f000 f8c4 	bl	800af50 <_read_r>
 800adc8:	2800      	cmp	r0, #0
 800adca:	bfab      	itete	ge
 800adcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800adce:	89a3      	ldrhlt	r3, [r4, #12]
 800add0:	181b      	addge	r3, r3, r0
 800add2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800add6:	bfac      	ite	ge
 800add8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800adda:	81a3      	strhlt	r3, [r4, #12]
 800addc:	bd10      	pop	{r4, pc}

0800adde <__swrite>:
 800adde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade2:	461f      	mov	r7, r3
 800ade4:	898b      	ldrh	r3, [r1, #12]
 800ade6:	05db      	lsls	r3, r3, #23
 800ade8:	4605      	mov	r5, r0
 800adea:	460c      	mov	r4, r1
 800adec:	4616      	mov	r6, r2
 800adee:	d505      	bpl.n	800adfc <__swrite+0x1e>
 800adf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adf4:	2302      	movs	r3, #2
 800adf6:	2200      	movs	r2, #0
 800adf8:	f000 f898 	bl	800af2c <_lseek_r>
 800adfc:	89a3      	ldrh	r3, [r4, #12]
 800adfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae06:	81a3      	strh	r3, [r4, #12]
 800ae08:	4632      	mov	r2, r6
 800ae0a:	463b      	mov	r3, r7
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae12:	f000 b8af 	b.w	800af74 <_write_r>

0800ae16 <__sseek>:
 800ae16:	b510      	push	{r4, lr}
 800ae18:	460c      	mov	r4, r1
 800ae1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae1e:	f000 f885 	bl	800af2c <_lseek_r>
 800ae22:	1c43      	adds	r3, r0, #1
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	bf15      	itete	ne
 800ae28:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ae2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ae2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ae32:	81a3      	strheq	r3, [r4, #12]
 800ae34:	bf18      	it	ne
 800ae36:	81a3      	strhne	r3, [r4, #12]
 800ae38:	bd10      	pop	{r4, pc}

0800ae3a <__sclose>:
 800ae3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae3e:	f000 b865 	b.w	800af0c <_close_r>

0800ae42 <memset>:
 800ae42:	4402      	add	r2, r0
 800ae44:	4603      	mov	r3, r0
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d100      	bne.n	800ae4c <memset+0xa>
 800ae4a:	4770      	bx	lr
 800ae4c:	f803 1b01 	strb.w	r1, [r3], #1
 800ae50:	e7f9      	b.n	800ae46 <memset+0x4>
	...

0800ae54 <strtok>:
 800ae54:	4b16      	ldr	r3, [pc, #88]	@ (800aeb0 <strtok+0x5c>)
 800ae56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae5a:	681f      	ldr	r7, [r3, #0]
 800ae5c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800ae5e:	4605      	mov	r5, r0
 800ae60:	460e      	mov	r6, r1
 800ae62:	b9ec      	cbnz	r4, 800aea0 <strtok+0x4c>
 800ae64:	2050      	movs	r0, #80	@ 0x50
 800ae66:	f000 f93b 	bl	800b0e0 <malloc>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	6478      	str	r0, [r7, #68]	@ 0x44
 800ae6e:	b920      	cbnz	r0, 800ae7a <strtok+0x26>
 800ae70:	4b10      	ldr	r3, [pc, #64]	@ (800aeb4 <strtok+0x60>)
 800ae72:	4811      	ldr	r0, [pc, #68]	@ (800aeb8 <strtok+0x64>)
 800ae74:	215b      	movs	r1, #91	@ 0x5b
 800ae76:	f000 f8cb 	bl	800b010 <__assert_func>
 800ae7a:	e9c0 4400 	strd	r4, r4, [r0]
 800ae7e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ae82:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ae86:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ae8a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800ae8e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800ae92:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800ae96:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800ae9a:	6184      	str	r4, [r0, #24]
 800ae9c:	7704      	strb	r4, [r0, #28]
 800ae9e:	6244      	str	r4, [r0, #36]	@ 0x24
 800aea0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aea2:	4631      	mov	r1, r6
 800aea4:	4628      	mov	r0, r5
 800aea6:	2301      	movs	r3, #1
 800aea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeac:	f000 b806 	b.w	800aebc <__strtok_r>
 800aeb0:	20000090 	.word	0x20000090
 800aeb4:	0800c98d 	.word	0x0800c98d
 800aeb8:	0800c9a4 	.word	0x0800c9a4

0800aebc <__strtok_r>:
 800aebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aebe:	4604      	mov	r4, r0
 800aec0:	b908      	cbnz	r0, 800aec6 <__strtok_r+0xa>
 800aec2:	6814      	ldr	r4, [r2, #0]
 800aec4:	b144      	cbz	r4, 800aed8 <__strtok_r+0x1c>
 800aec6:	4620      	mov	r0, r4
 800aec8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800aecc:	460f      	mov	r7, r1
 800aece:	f817 6b01 	ldrb.w	r6, [r7], #1
 800aed2:	b91e      	cbnz	r6, 800aedc <__strtok_r+0x20>
 800aed4:	b965      	cbnz	r5, 800aef0 <__strtok_r+0x34>
 800aed6:	6015      	str	r5, [r2, #0]
 800aed8:	2000      	movs	r0, #0
 800aeda:	e005      	b.n	800aee8 <__strtok_r+0x2c>
 800aedc:	42b5      	cmp	r5, r6
 800aede:	d1f6      	bne.n	800aece <__strtok_r+0x12>
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d1f0      	bne.n	800aec6 <__strtok_r+0xa>
 800aee4:	6014      	str	r4, [r2, #0]
 800aee6:	7003      	strb	r3, [r0, #0]
 800aee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeea:	461c      	mov	r4, r3
 800aeec:	e00c      	b.n	800af08 <__strtok_r+0x4c>
 800aeee:	b91d      	cbnz	r5, 800aef8 <__strtok_r+0x3c>
 800aef0:	4627      	mov	r7, r4
 800aef2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aef6:	460e      	mov	r6, r1
 800aef8:	f816 5b01 	ldrb.w	r5, [r6], #1
 800aefc:	42ab      	cmp	r3, r5
 800aefe:	d1f6      	bne.n	800aeee <__strtok_r+0x32>
 800af00:	2b00      	cmp	r3, #0
 800af02:	d0f2      	beq.n	800aeea <__strtok_r+0x2e>
 800af04:	2300      	movs	r3, #0
 800af06:	703b      	strb	r3, [r7, #0]
 800af08:	6014      	str	r4, [r2, #0]
 800af0a:	e7ed      	b.n	800aee8 <__strtok_r+0x2c>

0800af0c <_close_r>:
 800af0c:	b538      	push	{r3, r4, r5, lr}
 800af0e:	4d06      	ldr	r5, [pc, #24]	@ (800af28 <_close_r+0x1c>)
 800af10:	2300      	movs	r3, #0
 800af12:	4604      	mov	r4, r0
 800af14:	4608      	mov	r0, r1
 800af16:	602b      	str	r3, [r5, #0]
 800af18:	f7f7 f9df 	bl	80022da <_close>
 800af1c:	1c43      	adds	r3, r0, #1
 800af1e:	d102      	bne.n	800af26 <_close_r+0x1a>
 800af20:	682b      	ldr	r3, [r5, #0]
 800af22:	b103      	cbz	r3, 800af26 <_close_r+0x1a>
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	bd38      	pop	{r3, r4, r5, pc}
 800af28:	20000e80 	.word	0x20000e80

0800af2c <_lseek_r>:
 800af2c:	b538      	push	{r3, r4, r5, lr}
 800af2e:	4d07      	ldr	r5, [pc, #28]	@ (800af4c <_lseek_r+0x20>)
 800af30:	4604      	mov	r4, r0
 800af32:	4608      	mov	r0, r1
 800af34:	4611      	mov	r1, r2
 800af36:	2200      	movs	r2, #0
 800af38:	602a      	str	r2, [r5, #0]
 800af3a:	461a      	mov	r2, r3
 800af3c:	f7f7 f9f4 	bl	8002328 <_lseek>
 800af40:	1c43      	adds	r3, r0, #1
 800af42:	d102      	bne.n	800af4a <_lseek_r+0x1e>
 800af44:	682b      	ldr	r3, [r5, #0]
 800af46:	b103      	cbz	r3, 800af4a <_lseek_r+0x1e>
 800af48:	6023      	str	r3, [r4, #0]
 800af4a:	bd38      	pop	{r3, r4, r5, pc}
 800af4c:	20000e80 	.word	0x20000e80

0800af50 <_read_r>:
 800af50:	b538      	push	{r3, r4, r5, lr}
 800af52:	4d07      	ldr	r5, [pc, #28]	@ (800af70 <_read_r+0x20>)
 800af54:	4604      	mov	r4, r0
 800af56:	4608      	mov	r0, r1
 800af58:	4611      	mov	r1, r2
 800af5a:	2200      	movs	r2, #0
 800af5c:	602a      	str	r2, [r5, #0]
 800af5e:	461a      	mov	r2, r3
 800af60:	f7f7 f982 	bl	8002268 <_read>
 800af64:	1c43      	adds	r3, r0, #1
 800af66:	d102      	bne.n	800af6e <_read_r+0x1e>
 800af68:	682b      	ldr	r3, [r5, #0]
 800af6a:	b103      	cbz	r3, 800af6e <_read_r+0x1e>
 800af6c:	6023      	str	r3, [r4, #0]
 800af6e:	bd38      	pop	{r3, r4, r5, pc}
 800af70:	20000e80 	.word	0x20000e80

0800af74 <_write_r>:
 800af74:	b538      	push	{r3, r4, r5, lr}
 800af76:	4d07      	ldr	r5, [pc, #28]	@ (800af94 <_write_r+0x20>)
 800af78:	4604      	mov	r4, r0
 800af7a:	4608      	mov	r0, r1
 800af7c:	4611      	mov	r1, r2
 800af7e:	2200      	movs	r2, #0
 800af80:	602a      	str	r2, [r5, #0]
 800af82:	461a      	mov	r2, r3
 800af84:	f7f7 f98d 	bl	80022a2 <_write>
 800af88:	1c43      	adds	r3, r0, #1
 800af8a:	d102      	bne.n	800af92 <_write_r+0x1e>
 800af8c:	682b      	ldr	r3, [r5, #0]
 800af8e:	b103      	cbz	r3, 800af92 <_write_r+0x1e>
 800af90:	6023      	str	r3, [r4, #0]
 800af92:	bd38      	pop	{r3, r4, r5, pc}
 800af94:	20000e80 	.word	0x20000e80

0800af98 <__errno>:
 800af98:	4b01      	ldr	r3, [pc, #4]	@ (800afa0 <__errno+0x8>)
 800af9a:	6818      	ldr	r0, [r3, #0]
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	20000090 	.word	0x20000090

0800afa4 <__libc_init_array>:
 800afa4:	b570      	push	{r4, r5, r6, lr}
 800afa6:	4d0d      	ldr	r5, [pc, #52]	@ (800afdc <__libc_init_array+0x38>)
 800afa8:	4c0d      	ldr	r4, [pc, #52]	@ (800afe0 <__libc_init_array+0x3c>)
 800afaa:	1b64      	subs	r4, r4, r5
 800afac:	10a4      	asrs	r4, r4, #2
 800afae:	2600      	movs	r6, #0
 800afb0:	42a6      	cmp	r6, r4
 800afb2:	d109      	bne.n	800afc8 <__libc_init_array+0x24>
 800afb4:	4d0b      	ldr	r5, [pc, #44]	@ (800afe4 <__libc_init_array+0x40>)
 800afb6:	4c0c      	ldr	r4, [pc, #48]	@ (800afe8 <__libc_init_array+0x44>)
 800afb8:	f000 ffee 	bl	800bf98 <_init>
 800afbc:	1b64      	subs	r4, r4, r5
 800afbe:	10a4      	asrs	r4, r4, #2
 800afc0:	2600      	movs	r6, #0
 800afc2:	42a6      	cmp	r6, r4
 800afc4:	d105      	bne.n	800afd2 <__libc_init_array+0x2e>
 800afc6:	bd70      	pop	{r4, r5, r6, pc}
 800afc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800afcc:	4798      	blx	r3
 800afce:	3601      	adds	r6, #1
 800afd0:	e7ee      	b.n	800afb0 <__libc_init_array+0xc>
 800afd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800afd6:	4798      	blx	r3
 800afd8:	3601      	adds	r6, #1
 800afda:	e7f2      	b.n	800afc2 <__libc_init_array+0x1e>
 800afdc:	0800ca78 	.word	0x0800ca78
 800afe0:	0800ca78 	.word	0x0800ca78
 800afe4:	0800ca78 	.word	0x0800ca78
 800afe8:	0800ca7c 	.word	0x0800ca7c

0800afec <__retarget_lock_init_recursive>:
 800afec:	4770      	bx	lr

0800afee <__retarget_lock_acquire_recursive>:
 800afee:	4770      	bx	lr

0800aff0 <__retarget_lock_release_recursive>:
 800aff0:	4770      	bx	lr

0800aff2 <memcpy>:
 800aff2:	440a      	add	r2, r1
 800aff4:	4291      	cmp	r1, r2
 800aff6:	f100 33ff 	add.w	r3, r0, #4294967295
 800affa:	d100      	bne.n	800affe <memcpy+0xc>
 800affc:	4770      	bx	lr
 800affe:	b510      	push	{r4, lr}
 800b000:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b004:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b008:	4291      	cmp	r1, r2
 800b00a:	d1f9      	bne.n	800b000 <memcpy+0xe>
 800b00c:	bd10      	pop	{r4, pc}
	...

0800b010 <__assert_func>:
 800b010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b012:	4614      	mov	r4, r2
 800b014:	461a      	mov	r2, r3
 800b016:	4b09      	ldr	r3, [pc, #36]	@ (800b03c <__assert_func+0x2c>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4605      	mov	r5, r0
 800b01c:	68d8      	ldr	r0, [r3, #12]
 800b01e:	b14c      	cbz	r4, 800b034 <__assert_func+0x24>
 800b020:	4b07      	ldr	r3, [pc, #28]	@ (800b040 <__assert_func+0x30>)
 800b022:	9100      	str	r1, [sp, #0]
 800b024:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b028:	4906      	ldr	r1, [pc, #24]	@ (800b044 <__assert_func+0x34>)
 800b02a:	462b      	mov	r3, r5
 800b02c:	f000 fc9e 	bl	800b96c <fiprintf>
 800b030:	f000 fcd8 	bl	800b9e4 <abort>
 800b034:	4b04      	ldr	r3, [pc, #16]	@ (800b048 <__assert_func+0x38>)
 800b036:	461c      	mov	r4, r3
 800b038:	e7f3      	b.n	800b022 <__assert_func+0x12>
 800b03a:	bf00      	nop
 800b03c:	20000090 	.word	0x20000090
 800b040:	0800c9fe 	.word	0x0800c9fe
 800b044:	0800ca0b 	.word	0x0800ca0b
 800b048:	0800ca39 	.word	0x0800ca39

0800b04c <_free_r>:
 800b04c:	b538      	push	{r3, r4, r5, lr}
 800b04e:	4605      	mov	r5, r0
 800b050:	2900      	cmp	r1, #0
 800b052:	d041      	beq.n	800b0d8 <_free_r+0x8c>
 800b054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b058:	1f0c      	subs	r4, r1, #4
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	bfb8      	it	lt
 800b05e:	18e4      	addlt	r4, r4, r3
 800b060:	f000 f8e8 	bl	800b234 <__malloc_lock>
 800b064:	4a1d      	ldr	r2, [pc, #116]	@ (800b0dc <_free_r+0x90>)
 800b066:	6813      	ldr	r3, [r2, #0]
 800b068:	b933      	cbnz	r3, 800b078 <_free_r+0x2c>
 800b06a:	6063      	str	r3, [r4, #4]
 800b06c:	6014      	str	r4, [r2, #0]
 800b06e:	4628      	mov	r0, r5
 800b070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b074:	f000 b8e4 	b.w	800b240 <__malloc_unlock>
 800b078:	42a3      	cmp	r3, r4
 800b07a:	d908      	bls.n	800b08e <_free_r+0x42>
 800b07c:	6820      	ldr	r0, [r4, #0]
 800b07e:	1821      	adds	r1, r4, r0
 800b080:	428b      	cmp	r3, r1
 800b082:	bf01      	itttt	eq
 800b084:	6819      	ldreq	r1, [r3, #0]
 800b086:	685b      	ldreq	r3, [r3, #4]
 800b088:	1809      	addeq	r1, r1, r0
 800b08a:	6021      	streq	r1, [r4, #0]
 800b08c:	e7ed      	b.n	800b06a <_free_r+0x1e>
 800b08e:	461a      	mov	r2, r3
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	b10b      	cbz	r3, 800b098 <_free_r+0x4c>
 800b094:	42a3      	cmp	r3, r4
 800b096:	d9fa      	bls.n	800b08e <_free_r+0x42>
 800b098:	6811      	ldr	r1, [r2, #0]
 800b09a:	1850      	adds	r0, r2, r1
 800b09c:	42a0      	cmp	r0, r4
 800b09e:	d10b      	bne.n	800b0b8 <_free_r+0x6c>
 800b0a0:	6820      	ldr	r0, [r4, #0]
 800b0a2:	4401      	add	r1, r0
 800b0a4:	1850      	adds	r0, r2, r1
 800b0a6:	4283      	cmp	r3, r0
 800b0a8:	6011      	str	r1, [r2, #0]
 800b0aa:	d1e0      	bne.n	800b06e <_free_r+0x22>
 800b0ac:	6818      	ldr	r0, [r3, #0]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	6053      	str	r3, [r2, #4]
 800b0b2:	4408      	add	r0, r1
 800b0b4:	6010      	str	r0, [r2, #0]
 800b0b6:	e7da      	b.n	800b06e <_free_r+0x22>
 800b0b8:	d902      	bls.n	800b0c0 <_free_r+0x74>
 800b0ba:	230c      	movs	r3, #12
 800b0bc:	602b      	str	r3, [r5, #0]
 800b0be:	e7d6      	b.n	800b06e <_free_r+0x22>
 800b0c0:	6820      	ldr	r0, [r4, #0]
 800b0c2:	1821      	adds	r1, r4, r0
 800b0c4:	428b      	cmp	r3, r1
 800b0c6:	bf04      	itt	eq
 800b0c8:	6819      	ldreq	r1, [r3, #0]
 800b0ca:	685b      	ldreq	r3, [r3, #4]
 800b0cc:	6063      	str	r3, [r4, #4]
 800b0ce:	bf04      	itt	eq
 800b0d0:	1809      	addeq	r1, r1, r0
 800b0d2:	6021      	streq	r1, [r4, #0]
 800b0d4:	6054      	str	r4, [r2, #4]
 800b0d6:	e7ca      	b.n	800b06e <_free_r+0x22>
 800b0d8:	bd38      	pop	{r3, r4, r5, pc}
 800b0da:	bf00      	nop
 800b0dc:	20000e8c 	.word	0x20000e8c

0800b0e0 <malloc>:
 800b0e0:	4b02      	ldr	r3, [pc, #8]	@ (800b0ec <malloc+0xc>)
 800b0e2:	4601      	mov	r1, r0
 800b0e4:	6818      	ldr	r0, [r3, #0]
 800b0e6:	f000 b825 	b.w	800b134 <_malloc_r>
 800b0ea:	bf00      	nop
 800b0ec:	20000090 	.word	0x20000090

0800b0f0 <sbrk_aligned>:
 800b0f0:	b570      	push	{r4, r5, r6, lr}
 800b0f2:	4e0f      	ldr	r6, [pc, #60]	@ (800b130 <sbrk_aligned+0x40>)
 800b0f4:	460c      	mov	r4, r1
 800b0f6:	6831      	ldr	r1, [r6, #0]
 800b0f8:	4605      	mov	r5, r0
 800b0fa:	b911      	cbnz	r1, 800b102 <sbrk_aligned+0x12>
 800b0fc:	f000 fc62 	bl	800b9c4 <_sbrk_r>
 800b100:	6030      	str	r0, [r6, #0]
 800b102:	4621      	mov	r1, r4
 800b104:	4628      	mov	r0, r5
 800b106:	f000 fc5d 	bl	800b9c4 <_sbrk_r>
 800b10a:	1c43      	adds	r3, r0, #1
 800b10c:	d103      	bne.n	800b116 <sbrk_aligned+0x26>
 800b10e:	f04f 34ff 	mov.w	r4, #4294967295
 800b112:	4620      	mov	r0, r4
 800b114:	bd70      	pop	{r4, r5, r6, pc}
 800b116:	1cc4      	adds	r4, r0, #3
 800b118:	f024 0403 	bic.w	r4, r4, #3
 800b11c:	42a0      	cmp	r0, r4
 800b11e:	d0f8      	beq.n	800b112 <sbrk_aligned+0x22>
 800b120:	1a21      	subs	r1, r4, r0
 800b122:	4628      	mov	r0, r5
 800b124:	f000 fc4e 	bl	800b9c4 <_sbrk_r>
 800b128:	3001      	adds	r0, #1
 800b12a:	d1f2      	bne.n	800b112 <sbrk_aligned+0x22>
 800b12c:	e7ef      	b.n	800b10e <sbrk_aligned+0x1e>
 800b12e:	bf00      	nop
 800b130:	20000e88 	.word	0x20000e88

0800b134 <_malloc_r>:
 800b134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b138:	1ccd      	adds	r5, r1, #3
 800b13a:	f025 0503 	bic.w	r5, r5, #3
 800b13e:	3508      	adds	r5, #8
 800b140:	2d0c      	cmp	r5, #12
 800b142:	bf38      	it	cc
 800b144:	250c      	movcc	r5, #12
 800b146:	2d00      	cmp	r5, #0
 800b148:	4606      	mov	r6, r0
 800b14a:	db01      	blt.n	800b150 <_malloc_r+0x1c>
 800b14c:	42a9      	cmp	r1, r5
 800b14e:	d904      	bls.n	800b15a <_malloc_r+0x26>
 800b150:	230c      	movs	r3, #12
 800b152:	6033      	str	r3, [r6, #0]
 800b154:	2000      	movs	r0, #0
 800b156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b15a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b230 <_malloc_r+0xfc>
 800b15e:	f000 f869 	bl	800b234 <__malloc_lock>
 800b162:	f8d8 3000 	ldr.w	r3, [r8]
 800b166:	461c      	mov	r4, r3
 800b168:	bb44      	cbnz	r4, 800b1bc <_malloc_r+0x88>
 800b16a:	4629      	mov	r1, r5
 800b16c:	4630      	mov	r0, r6
 800b16e:	f7ff ffbf 	bl	800b0f0 <sbrk_aligned>
 800b172:	1c43      	adds	r3, r0, #1
 800b174:	4604      	mov	r4, r0
 800b176:	d158      	bne.n	800b22a <_malloc_r+0xf6>
 800b178:	f8d8 4000 	ldr.w	r4, [r8]
 800b17c:	4627      	mov	r7, r4
 800b17e:	2f00      	cmp	r7, #0
 800b180:	d143      	bne.n	800b20a <_malloc_r+0xd6>
 800b182:	2c00      	cmp	r4, #0
 800b184:	d04b      	beq.n	800b21e <_malloc_r+0xea>
 800b186:	6823      	ldr	r3, [r4, #0]
 800b188:	4639      	mov	r1, r7
 800b18a:	4630      	mov	r0, r6
 800b18c:	eb04 0903 	add.w	r9, r4, r3
 800b190:	f000 fc18 	bl	800b9c4 <_sbrk_r>
 800b194:	4581      	cmp	r9, r0
 800b196:	d142      	bne.n	800b21e <_malloc_r+0xea>
 800b198:	6821      	ldr	r1, [r4, #0]
 800b19a:	1a6d      	subs	r5, r5, r1
 800b19c:	4629      	mov	r1, r5
 800b19e:	4630      	mov	r0, r6
 800b1a0:	f7ff ffa6 	bl	800b0f0 <sbrk_aligned>
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	d03a      	beq.n	800b21e <_malloc_r+0xea>
 800b1a8:	6823      	ldr	r3, [r4, #0]
 800b1aa:	442b      	add	r3, r5
 800b1ac:	6023      	str	r3, [r4, #0]
 800b1ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b1b2:	685a      	ldr	r2, [r3, #4]
 800b1b4:	bb62      	cbnz	r2, 800b210 <_malloc_r+0xdc>
 800b1b6:	f8c8 7000 	str.w	r7, [r8]
 800b1ba:	e00f      	b.n	800b1dc <_malloc_r+0xa8>
 800b1bc:	6822      	ldr	r2, [r4, #0]
 800b1be:	1b52      	subs	r2, r2, r5
 800b1c0:	d420      	bmi.n	800b204 <_malloc_r+0xd0>
 800b1c2:	2a0b      	cmp	r2, #11
 800b1c4:	d917      	bls.n	800b1f6 <_malloc_r+0xc2>
 800b1c6:	1961      	adds	r1, r4, r5
 800b1c8:	42a3      	cmp	r3, r4
 800b1ca:	6025      	str	r5, [r4, #0]
 800b1cc:	bf18      	it	ne
 800b1ce:	6059      	strne	r1, [r3, #4]
 800b1d0:	6863      	ldr	r3, [r4, #4]
 800b1d2:	bf08      	it	eq
 800b1d4:	f8c8 1000 	streq.w	r1, [r8]
 800b1d8:	5162      	str	r2, [r4, r5]
 800b1da:	604b      	str	r3, [r1, #4]
 800b1dc:	4630      	mov	r0, r6
 800b1de:	f000 f82f 	bl	800b240 <__malloc_unlock>
 800b1e2:	f104 000b 	add.w	r0, r4, #11
 800b1e6:	1d23      	adds	r3, r4, #4
 800b1e8:	f020 0007 	bic.w	r0, r0, #7
 800b1ec:	1ac2      	subs	r2, r0, r3
 800b1ee:	bf1c      	itt	ne
 800b1f0:	1a1b      	subne	r3, r3, r0
 800b1f2:	50a3      	strne	r3, [r4, r2]
 800b1f4:	e7af      	b.n	800b156 <_malloc_r+0x22>
 800b1f6:	6862      	ldr	r2, [r4, #4]
 800b1f8:	42a3      	cmp	r3, r4
 800b1fa:	bf0c      	ite	eq
 800b1fc:	f8c8 2000 	streq.w	r2, [r8]
 800b200:	605a      	strne	r2, [r3, #4]
 800b202:	e7eb      	b.n	800b1dc <_malloc_r+0xa8>
 800b204:	4623      	mov	r3, r4
 800b206:	6864      	ldr	r4, [r4, #4]
 800b208:	e7ae      	b.n	800b168 <_malloc_r+0x34>
 800b20a:	463c      	mov	r4, r7
 800b20c:	687f      	ldr	r7, [r7, #4]
 800b20e:	e7b6      	b.n	800b17e <_malloc_r+0x4a>
 800b210:	461a      	mov	r2, r3
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	42a3      	cmp	r3, r4
 800b216:	d1fb      	bne.n	800b210 <_malloc_r+0xdc>
 800b218:	2300      	movs	r3, #0
 800b21a:	6053      	str	r3, [r2, #4]
 800b21c:	e7de      	b.n	800b1dc <_malloc_r+0xa8>
 800b21e:	230c      	movs	r3, #12
 800b220:	6033      	str	r3, [r6, #0]
 800b222:	4630      	mov	r0, r6
 800b224:	f000 f80c 	bl	800b240 <__malloc_unlock>
 800b228:	e794      	b.n	800b154 <_malloc_r+0x20>
 800b22a:	6005      	str	r5, [r0, #0]
 800b22c:	e7d6      	b.n	800b1dc <_malloc_r+0xa8>
 800b22e:	bf00      	nop
 800b230:	20000e8c 	.word	0x20000e8c

0800b234 <__malloc_lock>:
 800b234:	4801      	ldr	r0, [pc, #4]	@ (800b23c <__malloc_lock+0x8>)
 800b236:	f7ff beda 	b.w	800afee <__retarget_lock_acquire_recursive>
 800b23a:	bf00      	nop
 800b23c:	20000e84 	.word	0x20000e84

0800b240 <__malloc_unlock>:
 800b240:	4801      	ldr	r0, [pc, #4]	@ (800b248 <__malloc_unlock+0x8>)
 800b242:	f7ff bed5 	b.w	800aff0 <__retarget_lock_release_recursive>
 800b246:	bf00      	nop
 800b248:	20000e84 	.word	0x20000e84

0800b24c <__ssputs_r>:
 800b24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b250:	688e      	ldr	r6, [r1, #8]
 800b252:	461f      	mov	r7, r3
 800b254:	42be      	cmp	r6, r7
 800b256:	680b      	ldr	r3, [r1, #0]
 800b258:	4682      	mov	sl, r0
 800b25a:	460c      	mov	r4, r1
 800b25c:	4690      	mov	r8, r2
 800b25e:	d82d      	bhi.n	800b2bc <__ssputs_r+0x70>
 800b260:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b264:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b268:	d026      	beq.n	800b2b8 <__ssputs_r+0x6c>
 800b26a:	6965      	ldr	r5, [r4, #20]
 800b26c:	6909      	ldr	r1, [r1, #16]
 800b26e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b272:	eba3 0901 	sub.w	r9, r3, r1
 800b276:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b27a:	1c7b      	adds	r3, r7, #1
 800b27c:	444b      	add	r3, r9
 800b27e:	106d      	asrs	r5, r5, #1
 800b280:	429d      	cmp	r5, r3
 800b282:	bf38      	it	cc
 800b284:	461d      	movcc	r5, r3
 800b286:	0553      	lsls	r3, r2, #21
 800b288:	d527      	bpl.n	800b2da <__ssputs_r+0x8e>
 800b28a:	4629      	mov	r1, r5
 800b28c:	f7ff ff52 	bl	800b134 <_malloc_r>
 800b290:	4606      	mov	r6, r0
 800b292:	b360      	cbz	r0, 800b2ee <__ssputs_r+0xa2>
 800b294:	6921      	ldr	r1, [r4, #16]
 800b296:	464a      	mov	r2, r9
 800b298:	f7ff feab 	bl	800aff2 <memcpy>
 800b29c:	89a3      	ldrh	r3, [r4, #12]
 800b29e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b2a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2a6:	81a3      	strh	r3, [r4, #12]
 800b2a8:	6126      	str	r6, [r4, #16]
 800b2aa:	6165      	str	r5, [r4, #20]
 800b2ac:	444e      	add	r6, r9
 800b2ae:	eba5 0509 	sub.w	r5, r5, r9
 800b2b2:	6026      	str	r6, [r4, #0]
 800b2b4:	60a5      	str	r5, [r4, #8]
 800b2b6:	463e      	mov	r6, r7
 800b2b8:	42be      	cmp	r6, r7
 800b2ba:	d900      	bls.n	800b2be <__ssputs_r+0x72>
 800b2bc:	463e      	mov	r6, r7
 800b2be:	6820      	ldr	r0, [r4, #0]
 800b2c0:	4632      	mov	r2, r6
 800b2c2:	4641      	mov	r1, r8
 800b2c4:	f000 fb64 	bl	800b990 <memmove>
 800b2c8:	68a3      	ldr	r3, [r4, #8]
 800b2ca:	1b9b      	subs	r3, r3, r6
 800b2cc:	60a3      	str	r3, [r4, #8]
 800b2ce:	6823      	ldr	r3, [r4, #0]
 800b2d0:	4433      	add	r3, r6
 800b2d2:	6023      	str	r3, [r4, #0]
 800b2d4:	2000      	movs	r0, #0
 800b2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2da:	462a      	mov	r2, r5
 800b2dc:	f000 fb89 	bl	800b9f2 <_realloc_r>
 800b2e0:	4606      	mov	r6, r0
 800b2e2:	2800      	cmp	r0, #0
 800b2e4:	d1e0      	bne.n	800b2a8 <__ssputs_r+0x5c>
 800b2e6:	6921      	ldr	r1, [r4, #16]
 800b2e8:	4650      	mov	r0, sl
 800b2ea:	f7ff feaf 	bl	800b04c <_free_r>
 800b2ee:	230c      	movs	r3, #12
 800b2f0:	f8ca 3000 	str.w	r3, [sl]
 800b2f4:	89a3      	ldrh	r3, [r4, #12]
 800b2f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2fa:	81a3      	strh	r3, [r4, #12]
 800b2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b300:	e7e9      	b.n	800b2d6 <__ssputs_r+0x8a>
	...

0800b304 <_svfiprintf_r>:
 800b304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b308:	4698      	mov	r8, r3
 800b30a:	898b      	ldrh	r3, [r1, #12]
 800b30c:	061b      	lsls	r3, r3, #24
 800b30e:	b09d      	sub	sp, #116	@ 0x74
 800b310:	4607      	mov	r7, r0
 800b312:	460d      	mov	r5, r1
 800b314:	4614      	mov	r4, r2
 800b316:	d510      	bpl.n	800b33a <_svfiprintf_r+0x36>
 800b318:	690b      	ldr	r3, [r1, #16]
 800b31a:	b973      	cbnz	r3, 800b33a <_svfiprintf_r+0x36>
 800b31c:	2140      	movs	r1, #64	@ 0x40
 800b31e:	f7ff ff09 	bl	800b134 <_malloc_r>
 800b322:	6028      	str	r0, [r5, #0]
 800b324:	6128      	str	r0, [r5, #16]
 800b326:	b930      	cbnz	r0, 800b336 <_svfiprintf_r+0x32>
 800b328:	230c      	movs	r3, #12
 800b32a:	603b      	str	r3, [r7, #0]
 800b32c:	f04f 30ff 	mov.w	r0, #4294967295
 800b330:	b01d      	add	sp, #116	@ 0x74
 800b332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b336:	2340      	movs	r3, #64	@ 0x40
 800b338:	616b      	str	r3, [r5, #20]
 800b33a:	2300      	movs	r3, #0
 800b33c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b33e:	2320      	movs	r3, #32
 800b340:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b344:	f8cd 800c 	str.w	r8, [sp, #12]
 800b348:	2330      	movs	r3, #48	@ 0x30
 800b34a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b4e8 <_svfiprintf_r+0x1e4>
 800b34e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b352:	f04f 0901 	mov.w	r9, #1
 800b356:	4623      	mov	r3, r4
 800b358:	469a      	mov	sl, r3
 800b35a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b35e:	b10a      	cbz	r2, 800b364 <_svfiprintf_r+0x60>
 800b360:	2a25      	cmp	r2, #37	@ 0x25
 800b362:	d1f9      	bne.n	800b358 <_svfiprintf_r+0x54>
 800b364:	ebba 0b04 	subs.w	fp, sl, r4
 800b368:	d00b      	beq.n	800b382 <_svfiprintf_r+0x7e>
 800b36a:	465b      	mov	r3, fp
 800b36c:	4622      	mov	r2, r4
 800b36e:	4629      	mov	r1, r5
 800b370:	4638      	mov	r0, r7
 800b372:	f7ff ff6b 	bl	800b24c <__ssputs_r>
 800b376:	3001      	adds	r0, #1
 800b378:	f000 80a7 	beq.w	800b4ca <_svfiprintf_r+0x1c6>
 800b37c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b37e:	445a      	add	r2, fp
 800b380:	9209      	str	r2, [sp, #36]	@ 0x24
 800b382:	f89a 3000 	ldrb.w	r3, [sl]
 800b386:	2b00      	cmp	r3, #0
 800b388:	f000 809f 	beq.w	800b4ca <_svfiprintf_r+0x1c6>
 800b38c:	2300      	movs	r3, #0
 800b38e:	f04f 32ff 	mov.w	r2, #4294967295
 800b392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b396:	f10a 0a01 	add.w	sl, sl, #1
 800b39a:	9304      	str	r3, [sp, #16]
 800b39c:	9307      	str	r3, [sp, #28]
 800b39e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3a4:	4654      	mov	r4, sl
 800b3a6:	2205      	movs	r2, #5
 800b3a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ac:	484e      	ldr	r0, [pc, #312]	@ (800b4e8 <_svfiprintf_r+0x1e4>)
 800b3ae:	f7f4 ff2f 	bl	8000210 <memchr>
 800b3b2:	9a04      	ldr	r2, [sp, #16]
 800b3b4:	b9d8      	cbnz	r0, 800b3ee <_svfiprintf_r+0xea>
 800b3b6:	06d0      	lsls	r0, r2, #27
 800b3b8:	bf44      	itt	mi
 800b3ba:	2320      	movmi	r3, #32
 800b3bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3c0:	0711      	lsls	r1, r2, #28
 800b3c2:	bf44      	itt	mi
 800b3c4:	232b      	movmi	r3, #43	@ 0x2b
 800b3c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b3ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3d0:	d015      	beq.n	800b3fe <_svfiprintf_r+0xfa>
 800b3d2:	9a07      	ldr	r2, [sp, #28]
 800b3d4:	4654      	mov	r4, sl
 800b3d6:	2000      	movs	r0, #0
 800b3d8:	f04f 0c0a 	mov.w	ip, #10
 800b3dc:	4621      	mov	r1, r4
 800b3de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3e2:	3b30      	subs	r3, #48	@ 0x30
 800b3e4:	2b09      	cmp	r3, #9
 800b3e6:	d94b      	bls.n	800b480 <_svfiprintf_r+0x17c>
 800b3e8:	b1b0      	cbz	r0, 800b418 <_svfiprintf_r+0x114>
 800b3ea:	9207      	str	r2, [sp, #28]
 800b3ec:	e014      	b.n	800b418 <_svfiprintf_r+0x114>
 800b3ee:	eba0 0308 	sub.w	r3, r0, r8
 800b3f2:	fa09 f303 	lsl.w	r3, r9, r3
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	9304      	str	r3, [sp, #16]
 800b3fa:	46a2      	mov	sl, r4
 800b3fc:	e7d2      	b.n	800b3a4 <_svfiprintf_r+0xa0>
 800b3fe:	9b03      	ldr	r3, [sp, #12]
 800b400:	1d19      	adds	r1, r3, #4
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	9103      	str	r1, [sp, #12]
 800b406:	2b00      	cmp	r3, #0
 800b408:	bfbb      	ittet	lt
 800b40a:	425b      	neglt	r3, r3
 800b40c:	f042 0202 	orrlt.w	r2, r2, #2
 800b410:	9307      	strge	r3, [sp, #28]
 800b412:	9307      	strlt	r3, [sp, #28]
 800b414:	bfb8      	it	lt
 800b416:	9204      	strlt	r2, [sp, #16]
 800b418:	7823      	ldrb	r3, [r4, #0]
 800b41a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b41c:	d10a      	bne.n	800b434 <_svfiprintf_r+0x130>
 800b41e:	7863      	ldrb	r3, [r4, #1]
 800b420:	2b2a      	cmp	r3, #42	@ 0x2a
 800b422:	d132      	bne.n	800b48a <_svfiprintf_r+0x186>
 800b424:	9b03      	ldr	r3, [sp, #12]
 800b426:	1d1a      	adds	r2, r3, #4
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	9203      	str	r2, [sp, #12]
 800b42c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b430:	3402      	adds	r4, #2
 800b432:	9305      	str	r3, [sp, #20]
 800b434:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b4f8 <_svfiprintf_r+0x1f4>
 800b438:	7821      	ldrb	r1, [r4, #0]
 800b43a:	2203      	movs	r2, #3
 800b43c:	4650      	mov	r0, sl
 800b43e:	f7f4 fee7 	bl	8000210 <memchr>
 800b442:	b138      	cbz	r0, 800b454 <_svfiprintf_r+0x150>
 800b444:	9b04      	ldr	r3, [sp, #16]
 800b446:	eba0 000a 	sub.w	r0, r0, sl
 800b44a:	2240      	movs	r2, #64	@ 0x40
 800b44c:	4082      	lsls	r2, r0
 800b44e:	4313      	orrs	r3, r2
 800b450:	3401      	adds	r4, #1
 800b452:	9304      	str	r3, [sp, #16]
 800b454:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b458:	4824      	ldr	r0, [pc, #144]	@ (800b4ec <_svfiprintf_r+0x1e8>)
 800b45a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b45e:	2206      	movs	r2, #6
 800b460:	f7f4 fed6 	bl	8000210 <memchr>
 800b464:	2800      	cmp	r0, #0
 800b466:	d036      	beq.n	800b4d6 <_svfiprintf_r+0x1d2>
 800b468:	4b21      	ldr	r3, [pc, #132]	@ (800b4f0 <_svfiprintf_r+0x1ec>)
 800b46a:	bb1b      	cbnz	r3, 800b4b4 <_svfiprintf_r+0x1b0>
 800b46c:	9b03      	ldr	r3, [sp, #12]
 800b46e:	3307      	adds	r3, #7
 800b470:	f023 0307 	bic.w	r3, r3, #7
 800b474:	3308      	adds	r3, #8
 800b476:	9303      	str	r3, [sp, #12]
 800b478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b47a:	4433      	add	r3, r6
 800b47c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b47e:	e76a      	b.n	800b356 <_svfiprintf_r+0x52>
 800b480:	fb0c 3202 	mla	r2, ip, r2, r3
 800b484:	460c      	mov	r4, r1
 800b486:	2001      	movs	r0, #1
 800b488:	e7a8      	b.n	800b3dc <_svfiprintf_r+0xd8>
 800b48a:	2300      	movs	r3, #0
 800b48c:	3401      	adds	r4, #1
 800b48e:	9305      	str	r3, [sp, #20]
 800b490:	4619      	mov	r1, r3
 800b492:	f04f 0c0a 	mov.w	ip, #10
 800b496:	4620      	mov	r0, r4
 800b498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b49c:	3a30      	subs	r2, #48	@ 0x30
 800b49e:	2a09      	cmp	r2, #9
 800b4a0:	d903      	bls.n	800b4aa <_svfiprintf_r+0x1a6>
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d0c6      	beq.n	800b434 <_svfiprintf_r+0x130>
 800b4a6:	9105      	str	r1, [sp, #20]
 800b4a8:	e7c4      	b.n	800b434 <_svfiprintf_r+0x130>
 800b4aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4ae:	4604      	mov	r4, r0
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e7f0      	b.n	800b496 <_svfiprintf_r+0x192>
 800b4b4:	ab03      	add	r3, sp, #12
 800b4b6:	9300      	str	r3, [sp, #0]
 800b4b8:	462a      	mov	r2, r5
 800b4ba:	4b0e      	ldr	r3, [pc, #56]	@ (800b4f4 <_svfiprintf_r+0x1f0>)
 800b4bc:	a904      	add	r1, sp, #16
 800b4be:	4638      	mov	r0, r7
 800b4c0:	f3af 8000 	nop.w
 800b4c4:	1c42      	adds	r2, r0, #1
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	d1d6      	bne.n	800b478 <_svfiprintf_r+0x174>
 800b4ca:	89ab      	ldrh	r3, [r5, #12]
 800b4cc:	065b      	lsls	r3, r3, #25
 800b4ce:	f53f af2d 	bmi.w	800b32c <_svfiprintf_r+0x28>
 800b4d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b4d4:	e72c      	b.n	800b330 <_svfiprintf_r+0x2c>
 800b4d6:	ab03      	add	r3, sp, #12
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	462a      	mov	r2, r5
 800b4dc:	4b05      	ldr	r3, [pc, #20]	@ (800b4f4 <_svfiprintf_r+0x1f0>)
 800b4de:	a904      	add	r1, sp, #16
 800b4e0:	4638      	mov	r0, r7
 800b4e2:	f000 f879 	bl	800b5d8 <_printf_i>
 800b4e6:	e7ed      	b.n	800b4c4 <_svfiprintf_r+0x1c0>
 800b4e8:	0800ca3a 	.word	0x0800ca3a
 800b4ec:	0800ca44 	.word	0x0800ca44
 800b4f0:	00000000 	.word	0x00000000
 800b4f4:	0800b24d 	.word	0x0800b24d
 800b4f8:	0800ca40 	.word	0x0800ca40

0800b4fc <_printf_common>:
 800b4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b500:	4616      	mov	r6, r2
 800b502:	4698      	mov	r8, r3
 800b504:	688a      	ldr	r2, [r1, #8]
 800b506:	690b      	ldr	r3, [r1, #16]
 800b508:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b50c:	4293      	cmp	r3, r2
 800b50e:	bfb8      	it	lt
 800b510:	4613      	movlt	r3, r2
 800b512:	6033      	str	r3, [r6, #0]
 800b514:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b518:	4607      	mov	r7, r0
 800b51a:	460c      	mov	r4, r1
 800b51c:	b10a      	cbz	r2, 800b522 <_printf_common+0x26>
 800b51e:	3301      	adds	r3, #1
 800b520:	6033      	str	r3, [r6, #0]
 800b522:	6823      	ldr	r3, [r4, #0]
 800b524:	0699      	lsls	r1, r3, #26
 800b526:	bf42      	ittt	mi
 800b528:	6833      	ldrmi	r3, [r6, #0]
 800b52a:	3302      	addmi	r3, #2
 800b52c:	6033      	strmi	r3, [r6, #0]
 800b52e:	6825      	ldr	r5, [r4, #0]
 800b530:	f015 0506 	ands.w	r5, r5, #6
 800b534:	d106      	bne.n	800b544 <_printf_common+0x48>
 800b536:	f104 0a19 	add.w	sl, r4, #25
 800b53a:	68e3      	ldr	r3, [r4, #12]
 800b53c:	6832      	ldr	r2, [r6, #0]
 800b53e:	1a9b      	subs	r3, r3, r2
 800b540:	42ab      	cmp	r3, r5
 800b542:	dc26      	bgt.n	800b592 <_printf_common+0x96>
 800b544:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b548:	6822      	ldr	r2, [r4, #0]
 800b54a:	3b00      	subs	r3, #0
 800b54c:	bf18      	it	ne
 800b54e:	2301      	movne	r3, #1
 800b550:	0692      	lsls	r2, r2, #26
 800b552:	d42b      	bmi.n	800b5ac <_printf_common+0xb0>
 800b554:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b558:	4641      	mov	r1, r8
 800b55a:	4638      	mov	r0, r7
 800b55c:	47c8      	blx	r9
 800b55e:	3001      	adds	r0, #1
 800b560:	d01e      	beq.n	800b5a0 <_printf_common+0xa4>
 800b562:	6823      	ldr	r3, [r4, #0]
 800b564:	6922      	ldr	r2, [r4, #16]
 800b566:	f003 0306 	and.w	r3, r3, #6
 800b56a:	2b04      	cmp	r3, #4
 800b56c:	bf02      	ittt	eq
 800b56e:	68e5      	ldreq	r5, [r4, #12]
 800b570:	6833      	ldreq	r3, [r6, #0]
 800b572:	1aed      	subeq	r5, r5, r3
 800b574:	68a3      	ldr	r3, [r4, #8]
 800b576:	bf0c      	ite	eq
 800b578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b57c:	2500      	movne	r5, #0
 800b57e:	4293      	cmp	r3, r2
 800b580:	bfc4      	itt	gt
 800b582:	1a9b      	subgt	r3, r3, r2
 800b584:	18ed      	addgt	r5, r5, r3
 800b586:	2600      	movs	r6, #0
 800b588:	341a      	adds	r4, #26
 800b58a:	42b5      	cmp	r5, r6
 800b58c:	d11a      	bne.n	800b5c4 <_printf_common+0xc8>
 800b58e:	2000      	movs	r0, #0
 800b590:	e008      	b.n	800b5a4 <_printf_common+0xa8>
 800b592:	2301      	movs	r3, #1
 800b594:	4652      	mov	r2, sl
 800b596:	4641      	mov	r1, r8
 800b598:	4638      	mov	r0, r7
 800b59a:	47c8      	blx	r9
 800b59c:	3001      	adds	r0, #1
 800b59e:	d103      	bne.n	800b5a8 <_printf_common+0xac>
 800b5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5a8:	3501      	adds	r5, #1
 800b5aa:	e7c6      	b.n	800b53a <_printf_common+0x3e>
 800b5ac:	18e1      	adds	r1, r4, r3
 800b5ae:	1c5a      	adds	r2, r3, #1
 800b5b0:	2030      	movs	r0, #48	@ 0x30
 800b5b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5b6:	4422      	add	r2, r4
 800b5b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5c0:	3302      	adds	r3, #2
 800b5c2:	e7c7      	b.n	800b554 <_printf_common+0x58>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	4622      	mov	r2, r4
 800b5c8:	4641      	mov	r1, r8
 800b5ca:	4638      	mov	r0, r7
 800b5cc:	47c8      	blx	r9
 800b5ce:	3001      	adds	r0, #1
 800b5d0:	d0e6      	beq.n	800b5a0 <_printf_common+0xa4>
 800b5d2:	3601      	adds	r6, #1
 800b5d4:	e7d9      	b.n	800b58a <_printf_common+0x8e>
	...

0800b5d8 <_printf_i>:
 800b5d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5dc:	7e0f      	ldrb	r7, [r1, #24]
 800b5de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b5e0:	2f78      	cmp	r7, #120	@ 0x78
 800b5e2:	4691      	mov	r9, r2
 800b5e4:	4680      	mov	r8, r0
 800b5e6:	460c      	mov	r4, r1
 800b5e8:	469a      	mov	sl, r3
 800b5ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b5ee:	d807      	bhi.n	800b600 <_printf_i+0x28>
 800b5f0:	2f62      	cmp	r7, #98	@ 0x62
 800b5f2:	d80a      	bhi.n	800b60a <_printf_i+0x32>
 800b5f4:	2f00      	cmp	r7, #0
 800b5f6:	f000 80d1 	beq.w	800b79c <_printf_i+0x1c4>
 800b5fa:	2f58      	cmp	r7, #88	@ 0x58
 800b5fc:	f000 80b8 	beq.w	800b770 <_printf_i+0x198>
 800b600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b604:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b608:	e03a      	b.n	800b680 <_printf_i+0xa8>
 800b60a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b60e:	2b15      	cmp	r3, #21
 800b610:	d8f6      	bhi.n	800b600 <_printf_i+0x28>
 800b612:	a101      	add	r1, pc, #4	@ (adr r1, 800b618 <_printf_i+0x40>)
 800b614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b618:	0800b671 	.word	0x0800b671
 800b61c:	0800b685 	.word	0x0800b685
 800b620:	0800b601 	.word	0x0800b601
 800b624:	0800b601 	.word	0x0800b601
 800b628:	0800b601 	.word	0x0800b601
 800b62c:	0800b601 	.word	0x0800b601
 800b630:	0800b685 	.word	0x0800b685
 800b634:	0800b601 	.word	0x0800b601
 800b638:	0800b601 	.word	0x0800b601
 800b63c:	0800b601 	.word	0x0800b601
 800b640:	0800b601 	.word	0x0800b601
 800b644:	0800b783 	.word	0x0800b783
 800b648:	0800b6af 	.word	0x0800b6af
 800b64c:	0800b73d 	.word	0x0800b73d
 800b650:	0800b601 	.word	0x0800b601
 800b654:	0800b601 	.word	0x0800b601
 800b658:	0800b7a5 	.word	0x0800b7a5
 800b65c:	0800b601 	.word	0x0800b601
 800b660:	0800b6af 	.word	0x0800b6af
 800b664:	0800b601 	.word	0x0800b601
 800b668:	0800b601 	.word	0x0800b601
 800b66c:	0800b745 	.word	0x0800b745
 800b670:	6833      	ldr	r3, [r6, #0]
 800b672:	1d1a      	adds	r2, r3, #4
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	6032      	str	r2, [r6, #0]
 800b678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b67c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b680:	2301      	movs	r3, #1
 800b682:	e09c      	b.n	800b7be <_printf_i+0x1e6>
 800b684:	6833      	ldr	r3, [r6, #0]
 800b686:	6820      	ldr	r0, [r4, #0]
 800b688:	1d19      	adds	r1, r3, #4
 800b68a:	6031      	str	r1, [r6, #0]
 800b68c:	0606      	lsls	r6, r0, #24
 800b68e:	d501      	bpl.n	800b694 <_printf_i+0xbc>
 800b690:	681d      	ldr	r5, [r3, #0]
 800b692:	e003      	b.n	800b69c <_printf_i+0xc4>
 800b694:	0645      	lsls	r5, r0, #25
 800b696:	d5fb      	bpl.n	800b690 <_printf_i+0xb8>
 800b698:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b69c:	2d00      	cmp	r5, #0
 800b69e:	da03      	bge.n	800b6a8 <_printf_i+0xd0>
 800b6a0:	232d      	movs	r3, #45	@ 0x2d
 800b6a2:	426d      	negs	r5, r5
 800b6a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6a8:	4858      	ldr	r0, [pc, #352]	@ (800b80c <_printf_i+0x234>)
 800b6aa:	230a      	movs	r3, #10
 800b6ac:	e011      	b.n	800b6d2 <_printf_i+0xfa>
 800b6ae:	6821      	ldr	r1, [r4, #0]
 800b6b0:	6833      	ldr	r3, [r6, #0]
 800b6b2:	0608      	lsls	r0, r1, #24
 800b6b4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6b8:	d402      	bmi.n	800b6c0 <_printf_i+0xe8>
 800b6ba:	0649      	lsls	r1, r1, #25
 800b6bc:	bf48      	it	mi
 800b6be:	b2ad      	uxthmi	r5, r5
 800b6c0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6c2:	4852      	ldr	r0, [pc, #328]	@ (800b80c <_printf_i+0x234>)
 800b6c4:	6033      	str	r3, [r6, #0]
 800b6c6:	bf14      	ite	ne
 800b6c8:	230a      	movne	r3, #10
 800b6ca:	2308      	moveq	r3, #8
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6d2:	6866      	ldr	r6, [r4, #4]
 800b6d4:	60a6      	str	r6, [r4, #8]
 800b6d6:	2e00      	cmp	r6, #0
 800b6d8:	db05      	blt.n	800b6e6 <_printf_i+0x10e>
 800b6da:	6821      	ldr	r1, [r4, #0]
 800b6dc:	432e      	orrs	r6, r5
 800b6de:	f021 0104 	bic.w	r1, r1, #4
 800b6e2:	6021      	str	r1, [r4, #0]
 800b6e4:	d04b      	beq.n	800b77e <_printf_i+0x1a6>
 800b6e6:	4616      	mov	r6, r2
 800b6e8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b6ec:	fb03 5711 	mls	r7, r3, r1, r5
 800b6f0:	5dc7      	ldrb	r7, [r0, r7]
 800b6f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b6f6:	462f      	mov	r7, r5
 800b6f8:	42bb      	cmp	r3, r7
 800b6fa:	460d      	mov	r5, r1
 800b6fc:	d9f4      	bls.n	800b6e8 <_printf_i+0x110>
 800b6fe:	2b08      	cmp	r3, #8
 800b700:	d10b      	bne.n	800b71a <_printf_i+0x142>
 800b702:	6823      	ldr	r3, [r4, #0]
 800b704:	07df      	lsls	r7, r3, #31
 800b706:	d508      	bpl.n	800b71a <_printf_i+0x142>
 800b708:	6923      	ldr	r3, [r4, #16]
 800b70a:	6861      	ldr	r1, [r4, #4]
 800b70c:	4299      	cmp	r1, r3
 800b70e:	bfde      	ittt	le
 800b710:	2330      	movle	r3, #48	@ 0x30
 800b712:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b716:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b71a:	1b92      	subs	r2, r2, r6
 800b71c:	6122      	str	r2, [r4, #16]
 800b71e:	f8cd a000 	str.w	sl, [sp]
 800b722:	464b      	mov	r3, r9
 800b724:	aa03      	add	r2, sp, #12
 800b726:	4621      	mov	r1, r4
 800b728:	4640      	mov	r0, r8
 800b72a:	f7ff fee7 	bl	800b4fc <_printf_common>
 800b72e:	3001      	adds	r0, #1
 800b730:	d14a      	bne.n	800b7c8 <_printf_i+0x1f0>
 800b732:	f04f 30ff 	mov.w	r0, #4294967295
 800b736:	b004      	add	sp, #16
 800b738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b73c:	6823      	ldr	r3, [r4, #0]
 800b73e:	f043 0320 	orr.w	r3, r3, #32
 800b742:	6023      	str	r3, [r4, #0]
 800b744:	4832      	ldr	r0, [pc, #200]	@ (800b810 <_printf_i+0x238>)
 800b746:	2778      	movs	r7, #120	@ 0x78
 800b748:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b74c:	6823      	ldr	r3, [r4, #0]
 800b74e:	6831      	ldr	r1, [r6, #0]
 800b750:	061f      	lsls	r7, r3, #24
 800b752:	f851 5b04 	ldr.w	r5, [r1], #4
 800b756:	d402      	bmi.n	800b75e <_printf_i+0x186>
 800b758:	065f      	lsls	r7, r3, #25
 800b75a:	bf48      	it	mi
 800b75c:	b2ad      	uxthmi	r5, r5
 800b75e:	6031      	str	r1, [r6, #0]
 800b760:	07d9      	lsls	r1, r3, #31
 800b762:	bf44      	itt	mi
 800b764:	f043 0320 	orrmi.w	r3, r3, #32
 800b768:	6023      	strmi	r3, [r4, #0]
 800b76a:	b11d      	cbz	r5, 800b774 <_printf_i+0x19c>
 800b76c:	2310      	movs	r3, #16
 800b76e:	e7ad      	b.n	800b6cc <_printf_i+0xf4>
 800b770:	4826      	ldr	r0, [pc, #152]	@ (800b80c <_printf_i+0x234>)
 800b772:	e7e9      	b.n	800b748 <_printf_i+0x170>
 800b774:	6823      	ldr	r3, [r4, #0]
 800b776:	f023 0320 	bic.w	r3, r3, #32
 800b77a:	6023      	str	r3, [r4, #0]
 800b77c:	e7f6      	b.n	800b76c <_printf_i+0x194>
 800b77e:	4616      	mov	r6, r2
 800b780:	e7bd      	b.n	800b6fe <_printf_i+0x126>
 800b782:	6833      	ldr	r3, [r6, #0]
 800b784:	6825      	ldr	r5, [r4, #0]
 800b786:	6961      	ldr	r1, [r4, #20]
 800b788:	1d18      	adds	r0, r3, #4
 800b78a:	6030      	str	r0, [r6, #0]
 800b78c:	062e      	lsls	r6, r5, #24
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	d501      	bpl.n	800b796 <_printf_i+0x1be>
 800b792:	6019      	str	r1, [r3, #0]
 800b794:	e002      	b.n	800b79c <_printf_i+0x1c4>
 800b796:	0668      	lsls	r0, r5, #25
 800b798:	d5fb      	bpl.n	800b792 <_printf_i+0x1ba>
 800b79a:	8019      	strh	r1, [r3, #0]
 800b79c:	2300      	movs	r3, #0
 800b79e:	6123      	str	r3, [r4, #16]
 800b7a0:	4616      	mov	r6, r2
 800b7a2:	e7bc      	b.n	800b71e <_printf_i+0x146>
 800b7a4:	6833      	ldr	r3, [r6, #0]
 800b7a6:	1d1a      	adds	r2, r3, #4
 800b7a8:	6032      	str	r2, [r6, #0]
 800b7aa:	681e      	ldr	r6, [r3, #0]
 800b7ac:	6862      	ldr	r2, [r4, #4]
 800b7ae:	2100      	movs	r1, #0
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	f7f4 fd2d 	bl	8000210 <memchr>
 800b7b6:	b108      	cbz	r0, 800b7bc <_printf_i+0x1e4>
 800b7b8:	1b80      	subs	r0, r0, r6
 800b7ba:	6060      	str	r0, [r4, #4]
 800b7bc:	6863      	ldr	r3, [r4, #4]
 800b7be:	6123      	str	r3, [r4, #16]
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7c6:	e7aa      	b.n	800b71e <_printf_i+0x146>
 800b7c8:	6923      	ldr	r3, [r4, #16]
 800b7ca:	4632      	mov	r2, r6
 800b7cc:	4649      	mov	r1, r9
 800b7ce:	4640      	mov	r0, r8
 800b7d0:	47d0      	blx	sl
 800b7d2:	3001      	adds	r0, #1
 800b7d4:	d0ad      	beq.n	800b732 <_printf_i+0x15a>
 800b7d6:	6823      	ldr	r3, [r4, #0]
 800b7d8:	079b      	lsls	r3, r3, #30
 800b7da:	d413      	bmi.n	800b804 <_printf_i+0x22c>
 800b7dc:	68e0      	ldr	r0, [r4, #12]
 800b7de:	9b03      	ldr	r3, [sp, #12]
 800b7e0:	4298      	cmp	r0, r3
 800b7e2:	bfb8      	it	lt
 800b7e4:	4618      	movlt	r0, r3
 800b7e6:	e7a6      	b.n	800b736 <_printf_i+0x15e>
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	4632      	mov	r2, r6
 800b7ec:	4649      	mov	r1, r9
 800b7ee:	4640      	mov	r0, r8
 800b7f0:	47d0      	blx	sl
 800b7f2:	3001      	adds	r0, #1
 800b7f4:	d09d      	beq.n	800b732 <_printf_i+0x15a>
 800b7f6:	3501      	adds	r5, #1
 800b7f8:	68e3      	ldr	r3, [r4, #12]
 800b7fa:	9903      	ldr	r1, [sp, #12]
 800b7fc:	1a5b      	subs	r3, r3, r1
 800b7fe:	42ab      	cmp	r3, r5
 800b800:	dcf2      	bgt.n	800b7e8 <_printf_i+0x210>
 800b802:	e7eb      	b.n	800b7dc <_printf_i+0x204>
 800b804:	2500      	movs	r5, #0
 800b806:	f104 0619 	add.w	r6, r4, #25
 800b80a:	e7f5      	b.n	800b7f8 <_printf_i+0x220>
 800b80c:	0800ca4b 	.word	0x0800ca4b
 800b810:	0800ca5c 	.word	0x0800ca5c

0800b814 <__sflush_r>:
 800b814:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b81c:	0716      	lsls	r6, r2, #28
 800b81e:	4605      	mov	r5, r0
 800b820:	460c      	mov	r4, r1
 800b822:	d454      	bmi.n	800b8ce <__sflush_r+0xba>
 800b824:	684b      	ldr	r3, [r1, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	dc02      	bgt.n	800b830 <__sflush_r+0x1c>
 800b82a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	dd48      	ble.n	800b8c2 <__sflush_r+0xae>
 800b830:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b832:	2e00      	cmp	r6, #0
 800b834:	d045      	beq.n	800b8c2 <__sflush_r+0xae>
 800b836:	2300      	movs	r3, #0
 800b838:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b83c:	682f      	ldr	r7, [r5, #0]
 800b83e:	6a21      	ldr	r1, [r4, #32]
 800b840:	602b      	str	r3, [r5, #0]
 800b842:	d030      	beq.n	800b8a6 <__sflush_r+0x92>
 800b844:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b846:	89a3      	ldrh	r3, [r4, #12]
 800b848:	0759      	lsls	r1, r3, #29
 800b84a:	d505      	bpl.n	800b858 <__sflush_r+0x44>
 800b84c:	6863      	ldr	r3, [r4, #4]
 800b84e:	1ad2      	subs	r2, r2, r3
 800b850:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b852:	b10b      	cbz	r3, 800b858 <__sflush_r+0x44>
 800b854:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b856:	1ad2      	subs	r2, r2, r3
 800b858:	2300      	movs	r3, #0
 800b85a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b85c:	6a21      	ldr	r1, [r4, #32]
 800b85e:	4628      	mov	r0, r5
 800b860:	47b0      	blx	r6
 800b862:	1c43      	adds	r3, r0, #1
 800b864:	89a3      	ldrh	r3, [r4, #12]
 800b866:	d106      	bne.n	800b876 <__sflush_r+0x62>
 800b868:	6829      	ldr	r1, [r5, #0]
 800b86a:	291d      	cmp	r1, #29
 800b86c:	d82b      	bhi.n	800b8c6 <__sflush_r+0xb2>
 800b86e:	4a2a      	ldr	r2, [pc, #168]	@ (800b918 <__sflush_r+0x104>)
 800b870:	40ca      	lsrs	r2, r1
 800b872:	07d6      	lsls	r6, r2, #31
 800b874:	d527      	bpl.n	800b8c6 <__sflush_r+0xb2>
 800b876:	2200      	movs	r2, #0
 800b878:	6062      	str	r2, [r4, #4]
 800b87a:	04d9      	lsls	r1, r3, #19
 800b87c:	6922      	ldr	r2, [r4, #16]
 800b87e:	6022      	str	r2, [r4, #0]
 800b880:	d504      	bpl.n	800b88c <__sflush_r+0x78>
 800b882:	1c42      	adds	r2, r0, #1
 800b884:	d101      	bne.n	800b88a <__sflush_r+0x76>
 800b886:	682b      	ldr	r3, [r5, #0]
 800b888:	b903      	cbnz	r3, 800b88c <__sflush_r+0x78>
 800b88a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b88c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b88e:	602f      	str	r7, [r5, #0]
 800b890:	b1b9      	cbz	r1, 800b8c2 <__sflush_r+0xae>
 800b892:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b896:	4299      	cmp	r1, r3
 800b898:	d002      	beq.n	800b8a0 <__sflush_r+0x8c>
 800b89a:	4628      	mov	r0, r5
 800b89c:	f7ff fbd6 	bl	800b04c <_free_r>
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8a4:	e00d      	b.n	800b8c2 <__sflush_r+0xae>
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	4628      	mov	r0, r5
 800b8aa:	47b0      	blx	r6
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	1c50      	adds	r0, r2, #1
 800b8b0:	d1c9      	bne.n	800b846 <__sflush_r+0x32>
 800b8b2:	682b      	ldr	r3, [r5, #0]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d0c6      	beq.n	800b846 <__sflush_r+0x32>
 800b8b8:	2b1d      	cmp	r3, #29
 800b8ba:	d001      	beq.n	800b8c0 <__sflush_r+0xac>
 800b8bc:	2b16      	cmp	r3, #22
 800b8be:	d11e      	bne.n	800b8fe <__sflush_r+0xea>
 800b8c0:	602f      	str	r7, [r5, #0]
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	e022      	b.n	800b90c <__sflush_r+0xf8>
 800b8c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8ca:	b21b      	sxth	r3, r3
 800b8cc:	e01b      	b.n	800b906 <__sflush_r+0xf2>
 800b8ce:	690f      	ldr	r7, [r1, #16]
 800b8d0:	2f00      	cmp	r7, #0
 800b8d2:	d0f6      	beq.n	800b8c2 <__sflush_r+0xae>
 800b8d4:	0793      	lsls	r3, r2, #30
 800b8d6:	680e      	ldr	r6, [r1, #0]
 800b8d8:	bf08      	it	eq
 800b8da:	694b      	ldreq	r3, [r1, #20]
 800b8dc:	600f      	str	r7, [r1, #0]
 800b8de:	bf18      	it	ne
 800b8e0:	2300      	movne	r3, #0
 800b8e2:	eba6 0807 	sub.w	r8, r6, r7
 800b8e6:	608b      	str	r3, [r1, #8]
 800b8e8:	f1b8 0f00 	cmp.w	r8, #0
 800b8ec:	dde9      	ble.n	800b8c2 <__sflush_r+0xae>
 800b8ee:	6a21      	ldr	r1, [r4, #32]
 800b8f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b8f2:	4643      	mov	r3, r8
 800b8f4:	463a      	mov	r2, r7
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	47b0      	blx	r6
 800b8fa:	2800      	cmp	r0, #0
 800b8fc:	dc08      	bgt.n	800b910 <__sflush_r+0xfc>
 800b8fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b906:	81a3      	strh	r3, [r4, #12]
 800b908:	f04f 30ff 	mov.w	r0, #4294967295
 800b90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b910:	4407      	add	r7, r0
 800b912:	eba8 0800 	sub.w	r8, r8, r0
 800b916:	e7e7      	b.n	800b8e8 <__sflush_r+0xd4>
 800b918:	20400001 	.word	0x20400001

0800b91c <_fflush_r>:
 800b91c:	b538      	push	{r3, r4, r5, lr}
 800b91e:	690b      	ldr	r3, [r1, #16]
 800b920:	4605      	mov	r5, r0
 800b922:	460c      	mov	r4, r1
 800b924:	b913      	cbnz	r3, 800b92c <_fflush_r+0x10>
 800b926:	2500      	movs	r5, #0
 800b928:	4628      	mov	r0, r5
 800b92a:	bd38      	pop	{r3, r4, r5, pc}
 800b92c:	b118      	cbz	r0, 800b936 <_fflush_r+0x1a>
 800b92e:	6a03      	ldr	r3, [r0, #32]
 800b930:	b90b      	cbnz	r3, 800b936 <_fflush_r+0x1a>
 800b932:	f7ff f9d7 	bl	800ace4 <__sinit>
 800b936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d0f3      	beq.n	800b926 <_fflush_r+0xa>
 800b93e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b940:	07d0      	lsls	r0, r2, #31
 800b942:	d404      	bmi.n	800b94e <_fflush_r+0x32>
 800b944:	0599      	lsls	r1, r3, #22
 800b946:	d402      	bmi.n	800b94e <_fflush_r+0x32>
 800b948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b94a:	f7ff fb50 	bl	800afee <__retarget_lock_acquire_recursive>
 800b94e:	4628      	mov	r0, r5
 800b950:	4621      	mov	r1, r4
 800b952:	f7ff ff5f 	bl	800b814 <__sflush_r>
 800b956:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b958:	07da      	lsls	r2, r3, #31
 800b95a:	4605      	mov	r5, r0
 800b95c:	d4e4      	bmi.n	800b928 <_fflush_r+0xc>
 800b95e:	89a3      	ldrh	r3, [r4, #12]
 800b960:	059b      	lsls	r3, r3, #22
 800b962:	d4e1      	bmi.n	800b928 <_fflush_r+0xc>
 800b964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b966:	f7ff fb43 	bl	800aff0 <__retarget_lock_release_recursive>
 800b96a:	e7dd      	b.n	800b928 <_fflush_r+0xc>

0800b96c <fiprintf>:
 800b96c:	b40e      	push	{r1, r2, r3}
 800b96e:	b503      	push	{r0, r1, lr}
 800b970:	4601      	mov	r1, r0
 800b972:	ab03      	add	r3, sp, #12
 800b974:	4805      	ldr	r0, [pc, #20]	@ (800b98c <fiprintf+0x20>)
 800b976:	f853 2b04 	ldr.w	r2, [r3], #4
 800b97a:	6800      	ldr	r0, [r0, #0]
 800b97c:	9301      	str	r3, [sp, #4]
 800b97e:	f000 f88f 	bl	800baa0 <_vfiprintf_r>
 800b982:	b002      	add	sp, #8
 800b984:	f85d eb04 	ldr.w	lr, [sp], #4
 800b988:	b003      	add	sp, #12
 800b98a:	4770      	bx	lr
 800b98c:	20000090 	.word	0x20000090

0800b990 <memmove>:
 800b990:	4288      	cmp	r0, r1
 800b992:	b510      	push	{r4, lr}
 800b994:	eb01 0402 	add.w	r4, r1, r2
 800b998:	d902      	bls.n	800b9a0 <memmove+0x10>
 800b99a:	4284      	cmp	r4, r0
 800b99c:	4623      	mov	r3, r4
 800b99e:	d807      	bhi.n	800b9b0 <memmove+0x20>
 800b9a0:	1e43      	subs	r3, r0, #1
 800b9a2:	42a1      	cmp	r1, r4
 800b9a4:	d008      	beq.n	800b9b8 <memmove+0x28>
 800b9a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9ae:	e7f8      	b.n	800b9a2 <memmove+0x12>
 800b9b0:	4402      	add	r2, r0
 800b9b2:	4601      	mov	r1, r0
 800b9b4:	428a      	cmp	r2, r1
 800b9b6:	d100      	bne.n	800b9ba <memmove+0x2a>
 800b9b8:	bd10      	pop	{r4, pc}
 800b9ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9c2:	e7f7      	b.n	800b9b4 <memmove+0x24>

0800b9c4 <_sbrk_r>:
 800b9c4:	b538      	push	{r3, r4, r5, lr}
 800b9c6:	4d06      	ldr	r5, [pc, #24]	@ (800b9e0 <_sbrk_r+0x1c>)
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	4608      	mov	r0, r1
 800b9ce:	602b      	str	r3, [r5, #0]
 800b9d0:	f7f6 fcb8 	bl	8002344 <_sbrk>
 800b9d4:	1c43      	adds	r3, r0, #1
 800b9d6:	d102      	bne.n	800b9de <_sbrk_r+0x1a>
 800b9d8:	682b      	ldr	r3, [r5, #0]
 800b9da:	b103      	cbz	r3, 800b9de <_sbrk_r+0x1a>
 800b9dc:	6023      	str	r3, [r4, #0]
 800b9de:	bd38      	pop	{r3, r4, r5, pc}
 800b9e0:	20000e80 	.word	0x20000e80

0800b9e4 <abort>:
 800b9e4:	b508      	push	{r3, lr}
 800b9e6:	2006      	movs	r0, #6
 800b9e8:	f000 fa2e 	bl	800be48 <raise>
 800b9ec:	2001      	movs	r0, #1
 800b9ee:	f7f6 fc30 	bl	8002252 <_exit>

0800b9f2 <_realloc_r>:
 800b9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f6:	4607      	mov	r7, r0
 800b9f8:	4614      	mov	r4, r2
 800b9fa:	460d      	mov	r5, r1
 800b9fc:	b921      	cbnz	r1, 800ba08 <_realloc_r+0x16>
 800b9fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba02:	4611      	mov	r1, r2
 800ba04:	f7ff bb96 	b.w	800b134 <_malloc_r>
 800ba08:	b92a      	cbnz	r2, 800ba16 <_realloc_r+0x24>
 800ba0a:	f7ff fb1f 	bl	800b04c <_free_r>
 800ba0e:	4625      	mov	r5, r4
 800ba10:	4628      	mov	r0, r5
 800ba12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba16:	f000 fa33 	bl	800be80 <_malloc_usable_size_r>
 800ba1a:	4284      	cmp	r4, r0
 800ba1c:	4606      	mov	r6, r0
 800ba1e:	d802      	bhi.n	800ba26 <_realloc_r+0x34>
 800ba20:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba24:	d8f4      	bhi.n	800ba10 <_realloc_r+0x1e>
 800ba26:	4621      	mov	r1, r4
 800ba28:	4638      	mov	r0, r7
 800ba2a:	f7ff fb83 	bl	800b134 <_malloc_r>
 800ba2e:	4680      	mov	r8, r0
 800ba30:	b908      	cbnz	r0, 800ba36 <_realloc_r+0x44>
 800ba32:	4645      	mov	r5, r8
 800ba34:	e7ec      	b.n	800ba10 <_realloc_r+0x1e>
 800ba36:	42b4      	cmp	r4, r6
 800ba38:	4622      	mov	r2, r4
 800ba3a:	4629      	mov	r1, r5
 800ba3c:	bf28      	it	cs
 800ba3e:	4632      	movcs	r2, r6
 800ba40:	f7ff fad7 	bl	800aff2 <memcpy>
 800ba44:	4629      	mov	r1, r5
 800ba46:	4638      	mov	r0, r7
 800ba48:	f7ff fb00 	bl	800b04c <_free_r>
 800ba4c:	e7f1      	b.n	800ba32 <_realloc_r+0x40>

0800ba4e <__sfputc_r>:
 800ba4e:	6893      	ldr	r3, [r2, #8]
 800ba50:	3b01      	subs	r3, #1
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	b410      	push	{r4}
 800ba56:	6093      	str	r3, [r2, #8]
 800ba58:	da08      	bge.n	800ba6c <__sfputc_r+0x1e>
 800ba5a:	6994      	ldr	r4, [r2, #24]
 800ba5c:	42a3      	cmp	r3, r4
 800ba5e:	db01      	blt.n	800ba64 <__sfputc_r+0x16>
 800ba60:	290a      	cmp	r1, #10
 800ba62:	d103      	bne.n	800ba6c <__sfputc_r+0x1e>
 800ba64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba68:	f000 b932 	b.w	800bcd0 <__swbuf_r>
 800ba6c:	6813      	ldr	r3, [r2, #0]
 800ba6e:	1c58      	adds	r0, r3, #1
 800ba70:	6010      	str	r0, [r2, #0]
 800ba72:	7019      	strb	r1, [r3, #0]
 800ba74:	4608      	mov	r0, r1
 800ba76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <__sfputs_r>:
 800ba7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba7e:	4606      	mov	r6, r0
 800ba80:	460f      	mov	r7, r1
 800ba82:	4614      	mov	r4, r2
 800ba84:	18d5      	adds	r5, r2, r3
 800ba86:	42ac      	cmp	r4, r5
 800ba88:	d101      	bne.n	800ba8e <__sfputs_r+0x12>
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	e007      	b.n	800ba9e <__sfputs_r+0x22>
 800ba8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba92:	463a      	mov	r2, r7
 800ba94:	4630      	mov	r0, r6
 800ba96:	f7ff ffda 	bl	800ba4e <__sfputc_r>
 800ba9a:	1c43      	adds	r3, r0, #1
 800ba9c:	d1f3      	bne.n	800ba86 <__sfputs_r+0xa>
 800ba9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800baa0 <_vfiprintf_r>:
 800baa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa4:	460d      	mov	r5, r1
 800baa6:	b09d      	sub	sp, #116	@ 0x74
 800baa8:	4614      	mov	r4, r2
 800baaa:	4698      	mov	r8, r3
 800baac:	4606      	mov	r6, r0
 800baae:	b118      	cbz	r0, 800bab8 <_vfiprintf_r+0x18>
 800bab0:	6a03      	ldr	r3, [r0, #32]
 800bab2:	b90b      	cbnz	r3, 800bab8 <_vfiprintf_r+0x18>
 800bab4:	f7ff f916 	bl	800ace4 <__sinit>
 800bab8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800baba:	07d9      	lsls	r1, r3, #31
 800babc:	d405      	bmi.n	800baca <_vfiprintf_r+0x2a>
 800babe:	89ab      	ldrh	r3, [r5, #12]
 800bac0:	059a      	lsls	r2, r3, #22
 800bac2:	d402      	bmi.n	800baca <_vfiprintf_r+0x2a>
 800bac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bac6:	f7ff fa92 	bl	800afee <__retarget_lock_acquire_recursive>
 800baca:	89ab      	ldrh	r3, [r5, #12]
 800bacc:	071b      	lsls	r3, r3, #28
 800bace:	d501      	bpl.n	800bad4 <_vfiprintf_r+0x34>
 800bad0:	692b      	ldr	r3, [r5, #16]
 800bad2:	b99b      	cbnz	r3, 800bafc <_vfiprintf_r+0x5c>
 800bad4:	4629      	mov	r1, r5
 800bad6:	4630      	mov	r0, r6
 800bad8:	f000 f938 	bl	800bd4c <__swsetup_r>
 800badc:	b170      	cbz	r0, 800bafc <_vfiprintf_r+0x5c>
 800bade:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bae0:	07dc      	lsls	r4, r3, #31
 800bae2:	d504      	bpl.n	800baee <_vfiprintf_r+0x4e>
 800bae4:	f04f 30ff 	mov.w	r0, #4294967295
 800bae8:	b01d      	add	sp, #116	@ 0x74
 800baea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baee:	89ab      	ldrh	r3, [r5, #12]
 800baf0:	0598      	lsls	r0, r3, #22
 800baf2:	d4f7      	bmi.n	800bae4 <_vfiprintf_r+0x44>
 800baf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800baf6:	f7ff fa7b 	bl	800aff0 <__retarget_lock_release_recursive>
 800bafa:	e7f3      	b.n	800bae4 <_vfiprintf_r+0x44>
 800bafc:	2300      	movs	r3, #0
 800bafe:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb00:	2320      	movs	r3, #32
 800bb02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb06:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb0a:	2330      	movs	r3, #48	@ 0x30
 800bb0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bcbc <_vfiprintf_r+0x21c>
 800bb10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb14:	f04f 0901 	mov.w	r9, #1
 800bb18:	4623      	mov	r3, r4
 800bb1a:	469a      	mov	sl, r3
 800bb1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb20:	b10a      	cbz	r2, 800bb26 <_vfiprintf_r+0x86>
 800bb22:	2a25      	cmp	r2, #37	@ 0x25
 800bb24:	d1f9      	bne.n	800bb1a <_vfiprintf_r+0x7a>
 800bb26:	ebba 0b04 	subs.w	fp, sl, r4
 800bb2a:	d00b      	beq.n	800bb44 <_vfiprintf_r+0xa4>
 800bb2c:	465b      	mov	r3, fp
 800bb2e:	4622      	mov	r2, r4
 800bb30:	4629      	mov	r1, r5
 800bb32:	4630      	mov	r0, r6
 800bb34:	f7ff ffa2 	bl	800ba7c <__sfputs_r>
 800bb38:	3001      	adds	r0, #1
 800bb3a:	f000 80a7 	beq.w	800bc8c <_vfiprintf_r+0x1ec>
 800bb3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb40:	445a      	add	r2, fp
 800bb42:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb44:	f89a 3000 	ldrb.w	r3, [sl]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f000 809f 	beq.w	800bc8c <_vfiprintf_r+0x1ec>
 800bb4e:	2300      	movs	r3, #0
 800bb50:	f04f 32ff 	mov.w	r2, #4294967295
 800bb54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb58:	f10a 0a01 	add.w	sl, sl, #1
 800bb5c:	9304      	str	r3, [sp, #16]
 800bb5e:	9307      	str	r3, [sp, #28]
 800bb60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb64:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb66:	4654      	mov	r4, sl
 800bb68:	2205      	movs	r2, #5
 800bb6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb6e:	4853      	ldr	r0, [pc, #332]	@ (800bcbc <_vfiprintf_r+0x21c>)
 800bb70:	f7f4 fb4e 	bl	8000210 <memchr>
 800bb74:	9a04      	ldr	r2, [sp, #16]
 800bb76:	b9d8      	cbnz	r0, 800bbb0 <_vfiprintf_r+0x110>
 800bb78:	06d1      	lsls	r1, r2, #27
 800bb7a:	bf44      	itt	mi
 800bb7c:	2320      	movmi	r3, #32
 800bb7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb82:	0713      	lsls	r3, r2, #28
 800bb84:	bf44      	itt	mi
 800bb86:	232b      	movmi	r3, #43	@ 0x2b
 800bb88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb8c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb90:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb92:	d015      	beq.n	800bbc0 <_vfiprintf_r+0x120>
 800bb94:	9a07      	ldr	r2, [sp, #28]
 800bb96:	4654      	mov	r4, sl
 800bb98:	2000      	movs	r0, #0
 800bb9a:	f04f 0c0a 	mov.w	ip, #10
 800bb9e:	4621      	mov	r1, r4
 800bba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bba4:	3b30      	subs	r3, #48	@ 0x30
 800bba6:	2b09      	cmp	r3, #9
 800bba8:	d94b      	bls.n	800bc42 <_vfiprintf_r+0x1a2>
 800bbaa:	b1b0      	cbz	r0, 800bbda <_vfiprintf_r+0x13a>
 800bbac:	9207      	str	r2, [sp, #28]
 800bbae:	e014      	b.n	800bbda <_vfiprintf_r+0x13a>
 800bbb0:	eba0 0308 	sub.w	r3, r0, r8
 800bbb4:	fa09 f303 	lsl.w	r3, r9, r3
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	9304      	str	r3, [sp, #16]
 800bbbc:	46a2      	mov	sl, r4
 800bbbe:	e7d2      	b.n	800bb66 <_vfiprintf_r+0xc6>
 800bbc0:	9b03      	ldr	r3, [sp, #12]
 800bbc2:	1d19      	adds	r1, r3, #4
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	9103      	str	r1, [sp, #12]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	bfbb      	ittet	lt
 800bbcc:	425b      	neglt	r3, r3
 800bbce:	f042 0202 	orrlt.w	r2, r2, #2
 800bbd2:	9307      	strge	r3, [sp, #28]
 800bbd4:	9307      	strlt	r3, [sp, #28]
 800bbd6:	bfb8      	it	lt
 800bbd8:	9204      	strlt	r2, [sp, #16]
 800bbda:	7823      	ldrb	r3, [r4, #0]
 800bbdc:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbde:	d10a      	bne.n	800bbf6 <_vfiprintf_r+0x156>
 800bbe0:	7863      	ldrb	r3, [r4, #1]
 800bbe2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbe4:	d132      	bne.n	800bc4c <_vfiprintf_r+0x1ac>
 800bbe6:	9b03      	ldr	r3, [sp, #12]
 800bbe8:	1d1a      	adds	r2, r3, #4
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	9203      	str	r2, [sp, #12]
 800bbee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbf2:	3402      	adds	r4, #2
 800bbf4:	9305      	str	r3, [sp, #20]
 800bbf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bccc <_vfiprintf_r+0x22c>
 800bbfa:	7821      	ldrb	r1, [r4, #0]
 800bbfc:	2203      	movs	r2, #3
 800bbfe:	4650      	mov	r0, sl
 800bc00:	f7f4 fb06 	bl	8000210 <memchr>
 800bc04:	b138      	cbz	r0, 800bc16 <_vfiprintf_r+0x176>
 800bc06:	9b04      	ldr	r3, [sp, #16]
 800bc08:	eba0 000a 	sub.w	r0, r0, sl
 800bc0c:	2240      	movs	r2, #64	@ 0x40
 800bc0e:	4082      	lsls	r2, r0
 800bc10:	4313      	orrs	r3, r2
 800bc12:	3401      	adds	r4, #1
 800bc14:	9304      	str	r3, [sp, #16]
 800bc16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc1a:	4829      	ldr	r0, [pc, #164]	@ (800bcc0 <_vfiprintf_r+0x220>)
 800bc1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc20:	2206      	movs	r2, #6
 800bc22:	f7f4 faf5 	bl	8000210 <memchr>
 800bc26:	2800      	cmp	r0, #0
 800bc28:	d03f      	beq.n	800bcaa <_vfiprintf_r+0x20a>
 800bc2a:	4b26      	ldr	r3, [pc, #152]	@ (800bcc4 <_vfiprintf_r+0x224>)
 800bc2c:	bb1b      	cbnz	r3, 800bc76 <_vfiprintf_r+0x1d6>
 800bc2e:	9b03      	ldr	r3, [sp, #12]
 800bc30:	3307      	adds	r3, #7
 800bc32:	f023 0307 	bic.w	r3, r3, #7
 800bc36:	3308      	adds	r3, #8
 800bc38:	9303      	str	r3, [sp, #12]
 800bc3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc3c:	443b      	add	r3, r7
 800bc3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc40:	e76a      	b.n	800bb18 <_vfiprintf_r+0x78>
 800bc42:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc46:	460c      	mov	r4, r1
 800bc48:	2001      	movs	r0, #1
 800bc4a:	e7a8      	b.n	800bb9e <_vfiprintf_r+0xfe>
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	3401      	adds	r4, #1
 800bc50:	9305      	str	r3, [sp, #20]
 800bc52:	4619      	mov	r1, r3
 800bc54:	f04f 0c0a 	mov.w	ip, #10
 800bc58:	4620      	mov	r0, r4
 800bc5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc5e:	3a30      	subs	r2, #48	@ 0x30
 800bc60:	2a09      	cmp	r2, #9
 800bc62:	d903      	bls.n	800bc6c <_vfiprintf_r+0x1cc>
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d0c6      	beq.n	800bbf6 <_vfiprintf_r+0x156>
 800bc68:	9105      	str	r1, [sp, #20]
 800bc6a:	e7c4      	b.n	800bbf6 <_vfiprintf_r+0x156>
 800bc6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc70:	4604      	mov	r4, r0
 800bc72:	2301      	movs	r3, #1
 800bc74:	e7f0      	b.n	800bc58 <_vfiprintf_r+0x1b8>
 800bc76:	ab03      	add	r3, sp, #12
 800bc78:	9300      	str	r3, [sp, #0]
 800bc7a:	462a      	mov	r2, r5
 800bc7c:	4b12      	ldr	r3, [pc, #72]	@ (800bcc8 <_vfiprintf_r+0x228>)
 800bc7e:	a904      	add	r1, sp, #16
 800bc80:	4630      	mov	r0, r6
 800bc82:	f3af 8000 	nop.w
 800bc86:	4607      	mov	r7, r0
 800bc88:	1c78      	adds	r0, r7, #1
 800bc8a:	d1d6      	bne.n	800bc3a <_vfiprintf_r+0x19a>
 800bc8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc8e:	07d9      	lsls	r1, r3, #31
 800bc90:	d405      	bmi.n	800bc9e <_vfiprintf_r+0x1fe>
 800bc92:	89ab      	ldrh	r3, [r5, #12]
 800bc94:	059a      	lsls	r2, r3, #22
 800bc96:	d402      	bmi.n	800bc9e <_vfiprintf_r+0x1fe>
 800bc98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc9a:	f7ff f9a9 	bl	800aff0 <__retarget_lock_release_recursive>
 800bc9e:	89ab      	ldrh	r3, [r5, #12]
 800bca0:	065b      	lsls	r3, r3, #25
 800bca2:	f53f af1f 	bmi.w	800bae4 <_vfiprintf_r+0x44>
 800bca6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bca8:	e71e      	b.n	800bae8 <_vfiprintf_r+0x48>
 800bcaa:	ab03      	add	r3, sp, #12
 800bcac:	9300      	str	r3, [sp, #0]
 800bcae:	462a      	mov	r2, r5
 800bcb0:	4b05      	ldr	r3, [pc, #20]	@ (800bcc8 <_vfiprintf_r+0x228>)
 800bcb2:	a904      	add	r1, sp, #16
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	f7ff fc8f 	bl	800b5d8 <_printf_i>
 800bcba:	e7e4      	b.n	800bc86 <_vfiprintf_r+0x1e6>
 800bcbc:	0800ca3a 	.word	0x0800ca3a
 800bcc0:	0800ca44 	.word	0x0800ca44
 800bcc4:	00000000 	.word	0x00000000
 800bcc8:	0800ba7d 	.word	0x0800ba7d
 800bccc:	0800ca40 	.word	0x0800ca40

0800bcd0 <__swbuf_r>:
 800bcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcd2:	460e      	mov	r6, r1
 800bcd4:	4614      	mov	r4, r2
 800bcd6:	4605      	mov	r5, r0
 800bcd8:	b118      	cbz	r0, 800bce2 <__swbuf_r+0x12>
 800bcda:	6a03      	ldr	r3, [r0, #32]
 800bcdc:	b90b      	cbnz	r3, 800bce2 <__swbuf_r+0x12>
 800bcde:	f7ff f801 	bl	800ace4 <__sinit>
 800bce2:	69a3      	ldr	r3, [r4, #24]
 800bce4:	60a3      	str	r3, [r4, #8]
 800bce6:	89a3      	ldrh	r3, [r4, #12]
 800bce8:	071a      	lsls	r2, r3, #28
 800bcea:	d501      	bpl.n	800bcf0 <__swbuf_r+0x20>
 800bcec:	6923      	ldr	r3, [r4, #16]
 800bcee:	b943      	cbnz	r3, 800bd02 <__swbuf_r+0x32>
 800bcf0:	4621      	mov	r1, r4
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	f000 f82a 	bl	800bd4c <__swsetup_r>
 800bcf8:	b118      	cbz	r0, 800bd02 <__swbuf_r+0x32>
 800bcfa:	f04f 37ff 	mov.w	r7, #4294967295
 800bcfe:	4638      	mov	r0, r7
 800bd00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd02:	6823      	ldr	r3, [r4, #0]
 800bd04:	6922      	ldr	r2, [r4, #16]
 800bd06:	1a98      	subs	r0, r3, r2
 800bd08:	6963      	ldr	r3, [r4, #20]
 800bd0a:	b2f6      	uxtb	r6, r6
 800bd0c:	4283      	cmp	r3, r0
 800bd0e:	4637      	mov	r7, r6
 800bd10:	dc05      	bgt.n	800bd1e <__swbuf_r+0x4e>
 800bd12:	4621      	mov	r1, r4
 800bd14:	4628      	mov	r0, r5
 800bd16:	f7ff fe01 	bl	800b91c <_fflush_r>
 800bd1a:	2800      	cmp	r0, #0
 800bd1c:	d1ed      	bne.n	800bcfa <__swbuf_r+0x2a>
 800bd1e:	68a3      	ldr	r3, [r4, #8]
 800bd20:	3b01      	subs	r3, #1
 800bd22:	60a3      	str	r3, [r4, #8]
 800bd24:	6823      	ldr	r3, [r4, #0]
 800bd26:	1c5a      	adds	r2, r3, #1
 800bd28:	6022      	str	r2, [r4, #0]
 800bd2a:	701e      	strb	r6, [r3, #0]
 800bd2c:	6962      	ldr	r2, [r4, #20]
 800bd2e:	1c43      	adds	r3, r0, #1
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d004      	beq.n	800bd3e <__swbuf_r+0x6e>
 800bd34:	89a3      	ldrh	r3, [r4, #12]
 800bd36:	07db      	lsls	r3, r3, #31
 800bd38:	d5e1      	bpl.n	800bcfe <__swbuf_r+0x2e>
 800bd3a:	2e0a      	cmp	r6, #10
 800bd3c:	d1df      	bne.n	800bcfe <__swbuf_r+0x2e>
 800bd3e:	4621      	mov	r1, r4
 800bd40:	4628      	mov	r0, r5
 800bd42:	f7ff fdeb 	bl	800b91c <_fflush_r>
 800bd46:	2800      	cmp	r0, #0
 800bd48:	d0d9      	beq.n	800bcfe <__swbuf_r+0x2e>
 800bd4a:	e7d6      	b.n	800bcfa <__swbuf_r+0x2a>

0800bd4c <__swsetup_r>:
 800bd4c:	b538      	push	{r3, r4, r5, lr}
 800bd4e:	4b29      	ldr	r3, [pc, #164]	@ (800bdf4 <__swsetup_r+0xa8>)
 800bd50:	4605      	mov	r5, r0
 800bd52:	6818      	ldr	r0, [r3, #0]
 800bd54:	460c      	mov	r4, r1
 800bd56:	b118      	cbz	r0, 800bd60 <__swsetup_r+0x14>
 800bd58:	6a03      	ldr	r3, [r0, #32]
 800bd5a:	b90b      	cbnz	r3, 800bd60 <__swsetup_r+0x14>
 800bd5c:	f7fe ffc2 	bl	800ace4 <__sinit>
 800bd60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd64:	0719      	lsls	r1, r3, #28
 800bd66:	d422      	bmi.n	800bdae <__swsetup_r+0x62>
 800bd68:	06da      	lsls	r2, r3, #27
 800bd6a:	d407      	bmi.n	800bd7c <__swsetup_r+0x30>
 800bd6c:	2209      	movs	r2, #9
 800bd6e:	602a      	str	r2, [r5, #0]
 800bd70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd74:	81a3      	strh	r3, [r4, #12]
 800bd76:	f04f 30ff 	mov.w	r0, #4294967295
 800bd7a:	e033      	b.n	800bde4 <__swsetup_r+0x98>
 800bd7c:	0758      	lsls	r0, r3, #29
 800bd7e:	d512      	bpl.n	800bda6 <__swsetup_r+0x5a>
 800bd80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd82:	b141      	cbz	r1, 800bd96 <__swsetup_r+0x4a>
 800bd84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd88:	4299      	cmp	r1, r3
 800bd8a:	d002      	beq.n	800bd92 <__swsetup_r+0x46>
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	f7ff f95d 	bl	800b04c <_free_r>
 800bd92:	2300      	movs	r3, #0
 800bd94:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd96:	89a3      	ldrh	r3, [r4, #12]
 800bd98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bd9c:	81a3      	strh	r3, [r4, #12]
 800bd9e:	2300      	movs	r3, #0
 800bda0:	6063      	str	r3, [r4, #4]
 800bda2:	6923      	ldr	r3, [r4, #16]
 800bda4:	6023      	str	r3, [r4, #0]
 800bda6:	89a3      	ldrh	r3, [r4, #12]
 800bda8:	f043 0308 	orr.w	r3, r3, #8
 800bdac:	81a3      	strh	r3, [r4, #12]
 800bdae:	6923      	ldr	r3, [r4, #16]
 800bdb0:	b94b      	cbnz	r3, 800bdc6 <__swsetup_r+0x7a>
 800bdb2:	89a3      	ldrh	r3, [r4, #12]
 800bdb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bdb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bdbc:	d003      	beq.n	800bdc6 <__swsetup_r+0x7a>
 800bdbe:	4621      	mov	r1, r4
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	f000 f88b 	bl	800bedc <__smakebuf_r>
 800bdc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdca:	f013 0201 	ands.w	r2, r3, #1
 800bdce:	d00a      	beq.n	800bde6 <__swsetup_r+0x9a>
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	60a2      	str	r2, [r4, #8]
 800bdd4:	6962      	ldr	r2, [r4, #20]
 800bdd6:	4252      	negs	r2, r2
 800bdd8:	61a2      	str	r2, [r4, #24]
 800bdda:	6922      	ldr	r2, [r4, #16]
 800bddc:	b942      	cbnz	r2, 800bdf0 <__swsetup_r+0xa4>
 800bdde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bde2:	d1c5      	bne.n	800bd70 <__swsetup_r+0x24>
 800bde4:	bd38      	pop	{r3, r4, r5, pc}
 800bde6:	0799      	lsls	r1, r3, #30
 800bde8:	bf58      	it	pl
 800bdea:	6962      	ldrpl	r2, [r4, #20]
 800bdec:	60a2      	str	r2, [r4, #8]
 800bdee:	e7f4      	b.n	800bdda <__swsetup_r+0x8e>
 800bdf0:	2000      	movs	r0, #0
 800bdf2:	e7f7      	b.n	800bde4 <__swsetup_r+0x98>
 800bdf4:	20000090 	.word	0x20000090

0800bdf8 <_raise_r>:
 800bdf8:	291f      	cmp	r1, #31
 800bdfa:	b538      	push	{r3, r4, r5, lr}
 800bdfc:	4605      	mov	r5, r0
 800bdfe:	460c      	mov	r4, r1
 800be00:	d904      	bls.n	800be0c <_raise_r+0x14>
 800be02:	2316      	movs	r3, #22
 800be04:	6003      	str	r3, [r0, #0]
 800be06:	f04f 30ff 	mov.w	r0, #4294967295
 800be0a:	bd38      	pop	{r3, r4, r5, pc}
 800be0c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800be0e:	b112      	cbz	r2, 800be16 <_raise_r+0x1e>
 800be10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be14:	b94b      	cbnz	r3, 800be2a <_raise_r+0x32>
 800be16:	4628      	mov	r0, r5
 800be18:	f000 f830 	bl	800be7c <_getpid_r>
 800be1c:	4622      	mov	r2, r4
 800be1e:	4601      	mov	r1, r0
 800be20:	4628      	mov	r0, r5
 800be22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be26:	f000 b817 	b.w	800be58 <_kill_r>
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d00a      	beq.n	800be44 <_raise_r+0x4c>
 800be2e:	1c59      	adds	r1, r3, #1
 800be30:	d103      	bne.n	800be3a <_raise_r+0x42>
 800be32:	2316      	movs	r3, #22
 800be34:	6003      	str	r3, [r0, #0]
 800be36:	2001      	movs	r0, #1
 800be38:	e7e7      	b.n	800be0a <_raise_r+0x12>
 800be3a:	2100      	movs	r1, #0
 800be3c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800be40:	4620      	mov	r0, r4
 800be42:	4798      	blx	r3
 800be44:	2000      	movs	r0, #0
 800be46:	e7e0      	b.n	800be0a <_raise_r+0x12>

0800be48 <raise>:
 800be48:	4b02      	ldr	r3, [pc, #8]	@ (800be54 <raise+0xc>)
 800be4a:	4601      	mov	r1, r0
 800be4c:	6818      	ldr	r0, [r3, #0]
 800be4e:	f7ff bfd3 	b.w	800bdf8 <_raise_r>
 800be52:	bf00      	nop
 800be54:	20000090 	.word	0x20000090

0800be58 <_kill_r>:
 800be58:	b538      	push	{r3, r4, r5, lr}
 800be5a:	4d07      	ldr	r5, [pc, #28]	@ (800be78 <_kill_r+0x20>)
 800be5c:	2300      	movs	r3, #0
 800be5e:	4604      	mov	r4, r0
 800be60:	4608      	mov	r0, r1
 800be62:	4611      	mov	r1, r2
 800be64:	602b      	str	r3, [r5, #0]
 800be66:	f7f6 f9e4 	bl	8002232 <_kill>
 800be6a:	1c43      	adds	r3, r0, #1
 800be6c:	d102      	bne.n	800be74 <_kill_r+0x1c>
 800be6e:	682b      	ldr	r3, [r5, #0]
 800be70:	b103      	cbz	r3, 800be74 <_kill_r+0x1c>
 800be72:	6023      	str	r3, [r4, #0]
 800be74:	bd38      	pop	{r3, r4, r5, pc}
 800be76:	bf00      	nop
 800be78:	20000e80 	.word	0x20000e80

0800be7c <_getpid_r>:
 800be7c:	f7f6 b9d1 	b.w	8002222 <_getpid>

0800be80 <_malloc_usable_size_r>:
 800be80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be84:	1f18      	subs	r0, r3, #4
 800be86:	2b00      	cmp	r3, #0
 800be88:	bfbc      	itt	lt
 800be8a:	580b      	ldrlt	r3, [r1, r0]
 800be8c:	18c0      	addlt	r0, r0, r3
 800be8e:	4770      	bx	lr

0800be90 <__swhatbuf_r>:
 800be90:	b570      	push	{r4, r5, r6, lr}
 800be92:	460c      	mov	r4, r1
 800be94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be98:	2900      	cmp	r1, #0
 800be9a:	b096      	sub	sp, #88	@ 0x58
 800be9c:	4615      	mov	r5, r2
 800be9e:	461e      	mov	r6, r3
 800bea0:	da0d      	bge.n	800bebe <__swhatbuf_r+0x2e>
 800bea2:	89a3      	ldrh	r3, [r4, #12]
 800bea4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bea8:	f04f 0100 	mov.w	r1, #0
 800beac:	bf14      	ite	ne
 800beae:	2340      	movne	r3, #64	@ 0x40
 800beb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800beb4:	2000      	movs	r0, #0
 800beb6:	6031      	str	r1, [r6, #0]
 800beb8:	602b      	str	r3, [r5, #0]
 800beba:	b016      	add	sp, #88	@ 0x58
 800bebc:	bd70      	pop	{r4, r5, r6, pc}
 800bebe:	466a      	mov	r2, sp
 800bec0:	f000 f848 	bl	800bf54 <_fstat_r>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	dbec      	blt.n	800bea2 <__swhatbuf_r+0x12>
 800bec8:	9901      	ldr	r1, [sp, #4]
 800beca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bece:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bed2:	4259      	negs	r1, r3
 800bed4:	4159      	adcs	r1, r3
 800bed6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800beda:	e7eb      	b.n	800beb4 <__swhatbuf_r+0x24>

0800bedc <__smakebuf_r>:
 800bedc:	898b      	ldrh	r3, [r1, #12]
 800bede:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bee0:	079d      	lsls	r5, r3, #30
 800bee2:	4606      	mov	r6, r0
 800bee4:	460c      	mov	r4, r1
 800bee6:	d507      	bpl.n	800bef8 <__smakebuf_r+0x1c>
 800bee8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800beec:	6023      	str	r3, [r4, #0]
 800beee:	6123      	str	r3, [r4, #16]
 800bef0:	2301      	movs	r3, #1
 800bef2:	6163      	str	r3, [r4, #20]
 800bef4:	b003      	add	sp, #12
 800bef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bef8:	ab01      	add	r3, sp, #4
 800befa:	466a      	mov	r2, sp
 800befc:	f7ff ffc8 	bl	800be90 <__swhatbuf_r>
 800bf00:	9f00      	ldr	r7, [sp, #0]
 800bf02:	4605      	mov	r5, r0
 800bf04:	4639      	mov	r1, r7
 800bf06:	4630      	mov	r0, r6
 800bf08:	f7ff f914 	bl	800b134 <_malloc_r>
 800bf0c:	b948      	cbnz	r0, 800bf22 <__smakebuf_r+0x46>
 800bf0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf12:	059a      	lsls	r2, r3, #22
 800bf14:	d4ee      	bmi.n	800bef4 <__smakebuf_r+0x18>
 800bf16:	f023 0303 	bic.w	r3, r3, #3
 800bf1a:	f043 0302 	orr.w	r3, r3, #2
 800bf1e:	81a3      	strh	r3, [r4, #12]
 800bf20:	e7e2      	b.n	800bee8 <__smakebuf_r+0xc>
 800bf22:	89a3      	ldrh	r3, [r4, #12]
 800bf24:	6020      	str	r0, [r4, #0]
 800bf26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf2a:	81a3      	strh	r3, [r4, #12]
 800bf2c:	9b01      	ldr	r3, [sp, #4]
 800bf2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf32:	b15b      	cbz	r3, 800bf4c <__smakebuf_r+0x70>
 800bf34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf38:	4630      	mov	r0, r6
 800bf3a:	f000 f81d 	bl	800bf78 <_isatty_r>
 800bf3e:	b128      	cbz	r0, 800bf4c <__smakebuf_r+0x70>
 800bf40:	89a3      	ldrh	r3, [r4, #12]
 800bf42:	f023 0303 	bic.w	r3, r3, #3
 800bf46:	f043 0301 	orr.w	r3, r3, #1
 800bf4a:	81a3      	strh	r3, [r4, #12]
 800bf4c:	89a3      	ldrh	r3, [r4, #12]
 800bf4e:	431d      	orrs	r5, r3
 800bf50:	81a5      	strh	r5, [r4, #12]
 800bf52:	e7cf      	b.n	800bef4 <__smakebuf_r+0x18>

0800bf54 <_fstat_r>:
 800bf54:	b538      	push	{r3, r4, r5, lr}
 800bf56:	4d07      	ldr	r5, [pc, #28]	@ (800bf74 <_fstat_r+0x20>)
 800bf58:	2300      	movs	r3, #0
 800bf5a:	4604      	mov	r4, r0
 800bf5c:	4608      	mov	r0, r1
 800bf5e:	4611      	mov	r1, r2
 800bf60:	602b      	str	r3, [r5, #0]
 800bf62:	f7f6 f9c6 	bl	80022f2 <_fstat>
 800bf66:	1c43      	adds	r3, r0, #1
 800bf68:	d102      	bne.n	800bf70 <_fstat_r+0x1c>
 800bf6a:	682b      	ldr	r3, [r5, #0]
 800bf6c:	b103      	cbz	r3, 800bf70 <_fstat_r+0x1c>
 800bf6e:	6023      	str	r3, [r4, #0]
 800bf70:	bd38      	pop	{r3, r4, r5, pc}
 800bf72:	bf00      	nop
 800bf74:	20000e80 	.word	0x20000e80

0800bf78 <_isatty_r>:
 800bf78:	b538      	push	{r3, r4, r5, lr}
 800bf7a:	4d06      	ldr	r5, [pc, #24]	@ (800bf94 <_isatty_r+0x1c>)
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	4604      	mov	r4, r0
 800bf80:	4608      	mov	r0, r1
 800bf82:	602b      	str	r3, [r5, #0]
 800bf84:	f7f6 f9c5 	bl	8002312 <_isatty>
 800bf88:	1c43      	adds	r3, r0, #1
 800bf8a:	d102      	bne.n	800bf92 <_isatty_r+0x1a>
 800bf8c:	682b      	ldr	r3, [r5, #0]
 800bf8e:	b103      	cbz	r3, 800bf92 <_isatty_r+0x1a>
 800bf90:	6023      	str	r3, [r4, #0]
 800bf92:	bd38      	pop	{r3, r4, r5, pc}
 800bf94:	20000e80 	.word	0x20000e80

0800bf98 <_init>:
 800bf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf9a:	bf00      	nop
 800bf9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf9e:	bc08      	pop	{r3}
 800bfa0:	469e      	mov	lr, r3
 800bfa2:	4770      	bx	lr

0800bfa4 <_fini>:
 800bfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa6:	bf00      	nop
 800bfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfaa:	bc08      	pop	{r3}
 800bfac:	469e      	mov	lr, r3
 800bfae:	4770      	bx	lr
