
macrolev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08040000  08040000  0000e0d0  2**0
                  CONTENTS
  1 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b880  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000090c  0800ba20  0800ba20  0000ca20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800c32c  0800c32c  0000e0d0  2**0
                  CONTENTS
  5 .ARM          00000008  0800c32c  0800c32c  0000d32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800c334  0800c334  0000e0d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800c334  0800c334  0000d334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800c338  0800c338  0000d338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000d0  20000000  0800c33c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000012c8  200000d0  0800c40c  0000e0d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001398  0800c40c  0000e398  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e0d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d190  00000000  00000000  0000e100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f7c  00000000  00000000  0002b290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  00030210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f309  00000000  00000000  00031778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d37e  00000000  00000000  00050a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6ff9  00000000  00000000  0006ddff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124df8  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 000010e4  00000000  00000000  00124e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005da4  00000000  00000000  00125f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0012bcc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d0 	.word	0x200000d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ba08 	.word	0x0800ba08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d4 	.word	0x200000d4
 80001dc:	0800ba08 	.word	0x0800ba08

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <hid_init>:
// static uint8_t is_screaming = 0;
static uint8_t consumer_report = 0;

CFG_TUSB_MEM_SECTION CFG_TUSB_MEM_ALIGN static uint8_t usb_vendor_control_buffer[400];

void hid_init() {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	71fb      	strb	r3, [r7, #7]
// Init device stack on roothub port
#if TUSB_VERSION_NUMBER > 2000  // 0.20.0
TU_ATTR_DEPRECATED("Please use tusb_init(rhport, rh_init) instead")
#endif
TU_ATTR_ALWAYS_INLINE static inline bool tud_init (uint8_t rhport) {
  const tusb_rhport_init_t rh_init = {
 80005c6:	2301      	movs	r3, #1
 80005c8:	713b      	strb	r3, [r7, #4]
 80005ca:	2300      	movs	r3, #0
 80005cc:	717b      	strb	r3, [r7, #5]
    .role = TUSB_ROLE_DEVICE,
    .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
  };
  return tud_rhport_init(rhport, &rh_init);
 80005ce:	1d3a      	adds	r2, r7, #4
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	4611      	mov	r1, r2
 80005d4:	4618      	mov	r0, r3
 80005d6:	f006 fc77 	bl	8006ec8 <tud_rhport_init>
  tud_init(BOARD_TUD_RHPORT);
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <hid_task>:

void hid_task() {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 80005ea:	2100      	movs	r1, #0
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295
 80005f0:	f006 fda6 	bl	8007140 <tud_task_ext>
}
 80005f4:	bf00      	nop
  tud_task();

  if ((should_send_consumer_report || should_send_keyboard_report) && tud_hid_ready()) {
 80005f6:	4b21      	ldr	r3, [pc, #132]	@ (800067c <hid_task+0x98>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d103      	bne.n	8000606 <hid_task+0x22>
 80005fe:	4b20      	ldr	r3, [pc, #128]	@ (8000680 <hid_task+0x9c>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d035      	beq.n	8000672 <hid_task+0x8e>

//--------------------------------------------------------------------+
// Application API (Single Port)
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_ready(void) {
  return tud_hid_n_ready(0);
 8000606:	2000      	movs	r0, #0
 8000608:	f004 fe8e 	bl	8005328 <tud_hid_n_ready>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d02f      	beq.n	8000672 <hid_task+0x8e>
    if (tud_suspended()) {
 8000612:	f006 fc0f 	bl	8006e34 <tud_suspended>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d002      	beq.n	8000622 <hid_task+0x3e>
      tud_remote_wakeup();
 800061c:	f006 fc1e 	bl	8006e5c <tud_remote_wakeup>
        should_send_keyboard_report = 0;
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
      }
    }
  }
}
 8000620:	e027      	b.n	8000672 <hid_task+0x8e>
      if (should_send_consumer_report) {
 8000622:	4b16      	ldr	r3, [pc, #88]	@ (800067c <hid_task+0x98>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d00f      	beq.n	800064a <hid_task+0x66>
        should_send_consumer_report = 0;
 800062a:	4b14      	ldr	r3, [pc, #80]	@ (800067c <hid_task+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
 8000630:	2302      	movs	r3, #2
 8000632:	73fb      	strb	r3, [r7, #15]
 8000634:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <hid_task+0xa0>)
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	2302      	movs	r3, #2
 800063a:	80fb      	strh	r3, [r7, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tud_hid_get_protocol(void) {
  return tud_hid_n_get_protocol(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_report(uint8_t report_id, void const* report, uint16_t len) {
  return tud_hid_n_report(0, report_id, report, len);
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	7bf9      	ldrb	r1, [r7, #15]
 8000640:	68ba      	ldr	r2, [r7, #8]
 8000642:	2000      	movs	r0, #0
 8000644:	f004 feb2 	bl	80053ac <tud_hid_n_report>
 8000648:	e013      	b.n	8000672 <hid_task+0x8e>
      } else if (should_send_keyboard_report) {
 800064a:	4b0d      	ldr	r3, [pc, #52]	@ (8000680 <hid_task+0x9c>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d00f      	beq.n	8000672 <hid_task+0x8e>
        should_send_keyboard_report = 0;
 8000652:	4b0b      	ldr	r3, [pc, #44]	@ (8000680 <hid_task+0x9c>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
 8000658:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <hid_task+0xa4>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2201      	movs	r2, #1
 800065e:	717a      	strb	r2, [r7, #5]
 8000660:	713b      	strb	r3, [r7, #4]
 8000662:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <hid_task+0xa8>)
 8000664:	603b      	str	r3, [r7, #0]
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
  return tud_hid_n_keyboard_report(0, report_id, modifier, keycode);
 8000666:	793a      	ldrb	r2, [r7, #4]
 8000668:	7979      	ldrb	r1, [r7, #5]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	2000      	movs	r0, #0
 800066e:	f004 ff23 	bl	80054b8 <tud_hid_n_keyboard_report>
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200000ec 	.word	0x200000ec
 8000680:	200000ed 	.word	0x200000ed
 8000684:	200000f6 	.word	0x200000f6
 8000688:	200000ee 	.word	0x200000ee
 800068c:	200000f0 	.word	0x200000f0

08000690 <hid_press_key>:

void hid_press_key(struct key *key, uint8_t layer) {
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	460b      	mov	r3, r1
 800069a:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 800069c:	78fa      	ldrb	r2, [r7, #3]
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	4613      	mov	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	440b      	add	r3, r1
 80006a8:	3305      	adds	r3, #5
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b03      	cmp	r3, #3
 80006ae:	d038      	beq.n	8000722 <hid_press_key+0x92>
 80006b0:	2b03      	cmp	r3, #3
 80006b2:	dc45      	bgt.n	8000740 <hid_press_key+0xb0>
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d014      	beq.n	80006e2 <hid_press_key+0x52>
 80006b8:	2b02      	cmp	r3, #2
 80006ba:	d141      	bne.n	8000740 <hid_press_key+0xb0>
  case KEY_TYPE_MODIFIER:
    modifiers |= key->layers[layer].value;
 80006bc:	78fa      	ldrb	r2, [r7, #3]
 80006be:	6879      	ldr	r1, [r7, #4]
 80006c0:	4613      	mov	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	4413      	add	r3, r2
 80006c6:	440b      	add	r3, r1
 80006c8:	88db      	ldrh	r3, [r3, #6]
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b20      	ldr	r3, [pc, #128]	@ (8000750 <hid_press_key+0xc0>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000750 <hid_press_key+0xc0>)
 80006d8:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80006da:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <hid_press_key+0xc4>)
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]
    break;
 80006e0:	e02f      	b.n	8000742 <hid_press_key+0xb2>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
 80006e6:	e018      	b.n	800071a <hid_press_key+0x8a>
      if (keycodes[i] == 0) {
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	4a1b      	ldr	r2, [pc, #108]	@ (8000758 <hid_press_key+0xc8>)
 80006ec:	5cd3      	ldrb	r3, [r2, r3]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d110      	bne.n	8000714 <hid_press_key+0x84>
        keycodes[i] = key->layers[layer].value;
 80006f2:	78fa      	ldrb	r2, [r7, #3]
 80006f4:	6879      	ldr	r1, [r7, #4]
 80006f6:	4613      	mov	r3, r2
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	4413      	add	r3, r2
 80006fc:	440b      	add	r3, r1
 80006fe:	88db      	ldrh	r3, [r3, #6]
 8000700:	b29a      	uxth	r2, r3
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	b2d1      	uxtb	r1, r2
 8000706:	4a14      	ldr	r2, [pc, #80]	@ (8000758 <hid_press_key+0xc8>)
 8000708:	54d1      	strb	r1, [r2, r3]
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // } else if (i == 0 && key->state.velocity > keyboard_user_config.screaming_velocity_trigger) {
        //   is_screaming = 1;
        //   modifiers |= get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 800070a:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <hid_press_key+0xc4>)
 800070c:	2201      	movs	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
        break;
 8000710:	bf00      	nop
      }
    }
    break;
 8000712:	e016      	b.n	8000742 <hid_press_key+0xb2>
    for (uint8_t i = 0; i < 6; i++) {
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	3301      	adds	r3, #1
 8000718:	73fb      	strb	r3, [r7, #15]
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	2b05      	cmp	r3, #5
 800071e:	d9e3      	bls.n	80006e8 <hid_press_key+0x58>
    break;
 8000720:	e00f      	b.n	8000742 <hid_press_key+0xb2>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = key->layers[layer].value;
 8000722:	78fa      	ldrb	r2, [r7, #3]
 8000724:	6879      	ldr	r1, [r7, #4]
 8000726:	4613      	mov	r3, r2
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4413      	add	r3, r2
 800072c:	440b      	add	r3, r1
 800072e:	88db      	ldrh	r3, [r3, #6]
 8000730:	b29b      	uxth	r3, r3
 8000732:	b2da      	uxtb	r2, r3
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <hid_press_key+0xcc>)
 8000736:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 8000738:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <hid_press_key+0xd0>)
 800073a:	2201      	movs	r2, #1
 800073c:	701a      	strb	r2, [r3, #0]
    break;
 800073e:	e000      	b.n	8000742 <hid_press_key+0xb2>

  default:
    break;
 8000740:	bf00      	nop
  }
}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	200000ee 	.word	0x200000ee
 8000754:	200000ed 	.word	0x200000ed
 8000758:	200000f0 	.word	0x200000f0
 800075c:	200000f6 	.word	0x200000f6
 8000760:	200000ec 	.word	0x200000ec

08000764 <hid_release_key>:

void hid_release_key(struct key *key, uint8_t layer) {
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 8000770:	78fa      	ldrb	r2, [r7, #3]
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	4613      	mov	r3, r2
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	4413      	add	r3, r2
 800077a:	440b      	add	r3, r1
 800077c:	3305      	adds	r3, #5
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b03      	cmp	r3, #3
 8000782:	d03d      	beq.n	8000800 <hid_release_key+0x9c>
 8000784:	2b03      	cmp	r3, #3
 8000786:	dc42      	bgt.n	800080e <hid_release_key+0xaa>
 8000788:	2b01      	cmp	r3, #1
 800078a:	d018      	beq.n	80007be <hid_release_key+0x5a>
 800078c:	2b02      	cmp	r3, #2
 800078e:	d13e      	bne.n	800080e <hid_release_key+0xaa>
  case KEY_TYPE_MODIFIER:
    modifiers &= ~key->layers[layer].value;
 8000790:	78fa      	ldrb	r2, [r7, #3]
 8000792:	6879      	ldr	r1, [r7, #4]
 8000794:	4613      	mov	r3, r2
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	4413      	add	r3, r2
 800079a:	440b      	add	r3, r1
 800079c:	88db      	ldrh	r3, [r3, #6]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	43db      	mvns	r3, r3
 80007a4:	b25a      	sxtb	r2, r3
 80007a6:	4b1d      	ldr	r3, [pc, #116]	@ (800081c <hid_release_key+0xb8>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	4013      	ands	r3, r2
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <hid_release_key+0xb8>)
 80007b4:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80007b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <hid_release_key+0xbc>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
    break;
 80007bc:	e028      	b.n	8000810 <hid_release_key+0xac>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 80007be:	2300      	movs	r3, #0
 80007c0:	73fb      	strb	r3, [r7, #15]
 80007c2:	e019      	b.n	80007f8 <hid_release_key+0x94>
      if (keycodes[i] == key->layers[layer].value) {
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	4a17      	ldr	r2, [pc, #92]	@ (8000824 <hid_release_key+0xc0>)
 80007c8:	5cd3      	ldrb	r3, [r2, r3]
 80007ca:	4618      	mov	r0, r3
 80007cc:	78fa      	ldrb	r2, [r7, #3]
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	4613      	mov	r3, r2
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	4413      	add	r3, r2
 80007d6:	440b      	add	r3, r1
 80007d8:	88db      	ldrh	r3, [r3, #6]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	4298      	cmp	r0, r3
 80007de:	d108      	bne.n	80007f2 <hid_release_key+0x8e>
        keycodes[i] = 0;
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	4a10      	ldr	r2, [pc, #64]	@ (8000824 <hid_release_key+0xc0>)
 80007e4:	2100      	movs	r1, #0
 80007e6:	54d1      	strb	r1, [r2, r3]
        // if (is_screaming) {
        //   is_screaming = 0;
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 80007e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <hid_release_key+0xbc>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
        break;
 80007ee:	bf00      	nop
      }
    }
    break;
 80007f0:	e00e      	b.n	8000810 <hid_release_key+0xac>
    for (uint8_t i = 0; i < 6; i++) {
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	3301      	adds	r3, #1
 80007f6:	73fb      	strb	r3, [r7, #15]
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	2b05      	cmp	r3, #5
 80007fc:	d9e2      	bls.n	80007c4 <hid_release_key+0x60>
    break;
 80007fe:	e007      	b.n	8000810 <hid_release_key+0xac>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = 0;
 8000800:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <hid_release_key+0xc4>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 8000806:	4b09      	ldr	r3, [pc, #36]	@ (800082c <hid_release_key+0xc8>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
    break;
 800080c:	e000      	b.n	8000810 <hid_release_key+0xac>

  default:
    break;
 800080e:	bf00      	nop
  }
}
 8000810:	bf00      	nop
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	200000ee 	.word	0x200000ee
 8000820:	200000ed 	.word	0x200000ed
 8000824:	200000f0 	.word	0x200000f0
 8000828:	200000f6 	.word	0x200000f6
 800082c:	200000ec 	.word	0x200000ec

08000830 <tud_hid_set_protocol_cb>:

// Invoked when received SET_PROTOCOL request
// protocol is either HID_PROTOCOL_BOOT (0) or HID_PROTOCOL_REPORT (1)
void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	460a      	mov	r2, r1
 800083a:	71fb      	strb	r3, [r7, #7]
 800083c:	4613      	mov	r3, r2
 800083e:	71bb      	strb	r3, [r7, #6]
  (void)instance;
  (void)protocol;

  // nothing to do since we use the same compatible boot report for both Boot and Report mode.
  // TODO set a indicator for user
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <tud_hid_report_complete_cb>:

// Invoked when sent REPORT successfully to host
// Application can use this to send the next report
// Note: For composite reports, report[0] is report ID
void tud_hid_report_complete_cb(uint8_t instance, uint8_t const *report, uint16_t len) {
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
 8000858:	4613      	mov	r3, r2
 800085a:	80bb      	strh	r3, [r7, #4]
  (void)instance;
  (void)report;
  (void)len;
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <tud_hid_get_report_cb>:

// Invoked when received GET_REPORT control request
// Application must fill buffer report's content and return its length.
// Return zero will cause the stack to STALL request
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t *buffer, uint16_t reqlen) {
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	4603      	mov	r3, r0
 8000872:	71fb      	strb	r3, [r7, #7]
 8000874:	460b      	mov	r3, r1
 8000876:	71bb      	strb	r3, [r7, #6]
 8000878:	4613      	mov	r3, r2
 800087a:	717b      	strb	r3, [r7, #5]
  (void)report_id;
  (void)report_type;
  (void)buffer;
  (void)reqlen;

  return 0;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const *buffer, uint16_t bufsize) {
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
 8000896:	460b      	mov	r3, r1
 8000898:	71bb      	strb	r3, [r7, #6]
 800089a:	4613      	mov	r3, r2
 800089c:	717b      	strb	r3, [r7, #5]
  // if (instance == 1 && report_id == 0) {
  //   keyboard_write_config(buffer, bufsize);

  //   keyboard_init_keys();
  // }
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <tud_vendor_control_xfer_cb>:
// }

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	603a      	str	r2, [r7, #0]
 80008b6:	71fb      	strb	r3, [r7, #7]
 80008b8:	460b      	mov	r3, r1
 80008ba:	71bb      	strb	r3, [r7, #6]
  switch (request->bmRequestType_bit.type) {
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	f000 811b 	beq.w	8000b02 <tud_vendor_control_xfer_cb+0x256>
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	f040 8128 	bne.w	8000b22 <tud_vendor_control_xfer_cb+0x276>
  case TUSB_REQ_TYPE_VENDOR: {
    switch (request->bRequest) {
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	785b      	ldrb	r3, [r3, #1]
 80008d6:	2bff      	cmp	r3, #255	@ 0xff
 80008d8:	f300 810a 	bgt.w	8000af0 <tud_vendor_control_xfer_cb+0x244>
 80008dc:	2bfb      	cmp	r3, #251	@ 0xfb
 80008de:	da06      	bge.n	80008ee <tud_vendor_control_xfer_cb+0x42>
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	f000 80e5 	beq.w	8000ab0 <tud_vendor_control_xfer_cb+0x204>
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	f000 80ec 	beq.w	8000ac4 <tud_vendor_control_xfer_cb+0x218>

      break;
    }

    default:
      break;
 80008ec:	e100      	b.n	8000af0 <tud_vendor_control_xfer_cb+0x244>
    switch (request->bRequest) {
 80008ee:	3bfb      	subs	r3, #251	@ 0xfb
 80008f0:	2b04      	cmp	r3, #4
 80008f2:	f200 80fd 	bhi.w	8000af0 <tud_vendor_control_xfer_cb+0x244>
 80008f6:	a201      	add	r2, pc, #4	@ (adr r2, 80008fc <tud_vendor_control_xfer_cb+0x50>)
 80008f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fc:	08000a61 	.word	0x08000a61
 8000900:	080009f1 	.word	0x080009f1
 8000904:	080009b5 	.word	0x080009b5
 8000908:	08000a0f 	.word	0x08000a0f
 800090c:	08000911 	.word	0x08000911
      switch (request->wValue) {
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	885b      	ldrh	r3, [r3, #2]
 8000914:	b29b      	uxth	r3, r3
 8000916:	2b02      	cmp	r3, #2
 8000918:	d023      	beq.n	8000962 <tud_vendor_control_xfer_cb+0xb6>
 800091a:	2b02      	cmp	r3, #2
 800091c:	dc43      	bgt.n	80009a6 <tud_vendor_control_xfer_cb+0xfa>
 800091e:	2b00      	cmp	r3, #0
 8000920:	d002      	beq.n	8000928 <tud_vendor_control_xfer_cb+0x7c>
 8000922:	2b01      	cmp	r3, #1
 8000924:	d010      	beq.n	8000948 <tud_vendor_control_xfer_cb+0x9c>
        break;
 8000926:	e03e      	b.n	80009a6 <tud_vendor_control_xfer_cb+0xfa>
        if (stage == CONTROL_STAGE_SETUP) {
 8000928:	79bb      	ldrb	r3, [r7, #6]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d13d      	bne.n	80009aa <tud_vendor_control_xfer_cb+0xfe>
          uint16_t size = sizeof(keyboard_user_config);
 800092e:	2348      	movs	r3, #72	@ 0x48
 8000930:	81fb      	strh	r3, [r7, #14]
          return tud_control_xfer(rhport, request, &size, request->wLength);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	88db      	ldrh	r3, [r3, #6]
 8000936:	b29b      	uxth	r3, r3
 8000938:	f107 020e 	add.w	r2, r7, #14
 800093c:	79f8      	ldrb	r0, [r7, #7]
 800093e:	6839      	ldr	r1, [r7, #0]
 8000940:	f007 ffb2 	bl	80088a8 <tud_control_xfer>
 8000944:	4603      	mov	r3, r0
 8000946:	e0f5      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
        if (stage == CONTROL_STAGE_SETUP) {
 8000948:	79bb      	ldrb	r3, [r7, #6]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d12f      	bne.n	80009ae <tud_vendor_control_xfer_cb+0x102>
          return tud_control_xfer(rhport, request, &keyboard_user_config, request->wLength);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	88db      	ldrh	r3, [r3, #6]
 8000952:	b29b      	uxth	r3, r3
 8000954:	79f8      	ldrb	r0, [r7, #7]
 8000956:	4a79      	ldr	r2, [pc, #484]	@ (8000b3c <tud_vendor_control_xfer_cb+0x290>)
 8000958:	6839      	ldr	r1, [r7, #0]
 800095a:	f007 ffa5 	bl	80088a8 <tud_control_xfer>
 800095e:	4603      	mov	r3, r0
 8000960:	e0e8      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
        if (stage == CONTROL_STAGE_SETUP) {
 8000962:	79bb      	ldrb	r3, [r7, #6]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d109      	bne.n	800097c <tud_vendor_control_xfer_cb+0xd0>
          return tud_control_xfer(rhport, request, usb_vendor_control_buffer, request->wLength);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	88db      	ldrh	r3, [r3, #6]
 800096c:	b29b      	uxth	r3, r3
 800096e:	79f8      	ldrb	r0, [r7, #7]
 8000970:	4a73      	ldr	r2, [pc, #460]	@ (8000b40 <tud_vendor_control_xfer_cb+0x294>)
 8000972:	6839      	ldr	r1, [r7, #0]
 8000974:	f007 ff98 	bl	80088a8 <tud_control_xfer>
 8000978:	4603      	mov	r3, r0
 800097a:	e0db      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
        } else if (stage == CONTROL_STAGE_DATA) {
 800097c:	79bb      	ldrb	r3, [r7, #6]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d117      	bne.n	80009b2 <tud_vendor_control_xfer_cb+0x106>
          if (!keyboard_write_config(&usb_vendor_control_buffer, 0, request->wLength)) {
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	88db      	ldrh	r3, [r3, #6]
 8000986:	b29b      	uxth	r3, r3
 8000988:	461a      	mov	r2, r3
 800098a:	2100      	movs	r1, #0
 800098c:	486c      	ldr	r0, [pc, #432]	@ (8000b40 <tud_vendor_control_xfer_cb+0x294>)
 800098e:	f001 f845 	bl	8001a1c <keyboard_write_config>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d101      	bne.n	800099c <tud_vendor_control_xfer_cb+0xf0>
            return false;
 8000998:	2300      	movs	r3, #0
 800099a:	e0cb      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
          keyboard_read_config();
 800099c:	f001 f82e 	bl	80019fc <keyboard_read_config>
          keyboard_init_keys();
 80009a0:	f000 fc48 	bl	8001234 <keyboard_init_keys>
        break;
 80009a4:	e005      	b.n	80009b2 <tud_vendor_control_xfer_cb+0x106>
        break;
 80009a6:	bf00      	nop
 80009a8:	e004      	b.n	80009b4 <tud_vendor_control_xfer_cb+0x108>
        break;
 80009aa:	bf00      	nop
 80009ac:	e002      	b.n	80009b4 <tud_vendor_control_xfer_cb+0x108>
        break;
 80009ae:	bf00      	nop
 80009b0:	e000      	b.n	80009b4 <tud_vendor_control_xfer_cb+0x108>
        break;
 80009b2:	bf00      	nop
      if (request->wValue == VENDOR_VALUE_SET) {
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	885b      	ldrh	r3, [r3, #2]
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d118      	bne.n	80009f0 <tud_vendor_control_xfer_cb+0x144>
        if (stage == CONTROL_STAGE_SETUP) {
 80009be:	79bb      	ldrb	r3, [r7, #6]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	f040 8097 	bne.w	8000af4 <tud_vendor_control_xfer_cb+0x248>
          if (!keyboard_write_config(&keyboard_default_user_config, 0, sizeof keyboard_default_user_config)) {
 80009c6:	2248      	movs	r2, #72	@ 0x48
 80009c8:	2100      	movs	r1, #0
 80009ca:	485e      	ldr	r0, [pc, #376]	@ (8000b44 <tud_vendor_control_xfer_cb+0x298>)
 80009cc:	f001 f826 	bl	8001a1c <keyboard_write_config>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d101      	bne.n	80009da <tud_vendor_control_xfer_cb+0x12e>
            return false;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e0ac      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
          keyboard_read_config();
 80009da:	f001 f80f 	bl	80019fc <keyboard_read_config>
          keyboard_init_keys();
 80009de:	f000 fc29 	bl	8001234 <keyboard_init_keys>
          return tud_control_status(rhport, request);
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	6839      	ldr	r1, [r7, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f007 feec 	bl	80087c4 <tud_control_status>
 80009ec:	4603      	mov	r3, r0
 80009ee:	e0a1      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
      if (request->wValue == VENDOR_VALUE_SET) {
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	885b      	ldrh	r3, [r3, #2]
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d109      	bne.n	8000a0e <tud_vendor_control_xfer_cb+0x162>
        if (stage == CONTROL_STAGE_SETUP) {
 80009fa:	79bb      	ldrb	r3, [r7, #6]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d17b      	bne.n	8000af8 <tud_vendor_control_xfer_cb+0x24c>
          return tud_control_status(rhport, request);
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	6839      	ldr	r1, [r7, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f007 fedd 	bl	80087c4 <tud_control_status>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	e092      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
      switch (request->wValue) {
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	885b      	ldrh	r3, [r3, #2]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d002      	beq.n	8000a1e <tud_vendor_control_xfer_cb+0x172>
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d011      	beq.n	8000a40 <tud_vendor_control_xfer_cb+0x194>
        break;
 8000a1c:	e020      	b.n	8000a60 <tud_vendor_control_xfer_cb+0x1b4>
        if (stage == CONTROL_STAGE_SETUP) {
 8000a1e:	79bb      	ldrb	r3, [r7, #6]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d11a      	bne.n	8000a5a <tud_vendor_control_xfer_cb+0x1ae>
          uint16_t size = sizeof(keyboard_keys);
 8000a24:	f44f 731c 	mov.w	r3, #624	@ 0x270
 8000a28:	81bb      	strh	r3, [r7, #12]
          return tud_control_xfer(rhport, request, &size, request->wLength);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	88db      	ldrh	r3, [r3, #6]
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	f107 020c 	add.w	r2, r7, #12
 8000a34:	79f8      	ldrb	r0, [r7, #7]
 8000a36:	6839      	ldr	r1, [r7, #0]
 8000a38:	f007 ff36 	bl	80088a8 <tud_control_xfer>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	e079      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
        if (stage == CONTROL_STAGE_SETUP) {
 8000a40:	79bb      	ldrb	r3, [r7, #6]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d10b      	bne.n	8000a5e <tud_vendor_control_xfer_cb+0x1b2>
          return tud_control_xfer(rhport, request, &keyboard_keys, request->wLength);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	88db      	ldrh	r3, [r3, #6]
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	79f8      	ldrb	r0, [r7, #7]
 8000a4e:	4a3e      	ldr	r2, [pc, #248]	@ (8000b48 <tud_vendor_control_xfer_cb+0x29c>)
 8000a50:	6839      	ldr	r1, [r7, #0]
 8000a52:	f007 ff29 	bl	80088a8 <tud_control_xfer>
 8000a56:	4603      	mov	r3, r0
 8000a58:	e06c      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
        break;
 8000a5a:	bf00      	nop
 8000a5c:	e000      	b.n	8000a60 <tud_vendor_control_xfer_cb+0x1b4>
        break;
 8000a5e:	bf00      	nop
      switch (request->wValue) {
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	885b      	ldrh	r3, [r3, #2]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d002      	beq.n	8000a70 <tud_vendor_control_xfer_cb+0x1c4>
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d010      	beq.n	8000a90 <tud_vendor_control_xfer_cb+0x1e4>
        break;
 8000a6e:	e01f      	b.n	8000ab0 <tud_vendor_control_xfer_cb+0x204>
        if (stage == CONTROL_STAGE_SETUP) {
 8000a70:	79bb      	ldrb	r3, [r7, #6]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d119      	bne.n	8000aaa <tud_vendor_control_xfer_cb+0x1fe>
          uint16_t size = sizeof(keyboard_last_cycle_duration);
 8000a76:	2304      	movs	r3, #4
 8000a78:	817b      	strh	r3, [r7, #10]
          return tud_control_xfer(rhport, request, &size, request->wLength);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	88db      	ldrh	r3, [r3, #6]
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	f107 020a 	add.w	r2, r7, #10
 8000a84:	79f8      	ldrb	r0, [r7, #7]
 8000a86:	6839      	ldr	r1, [r7, #0]
 8000a88:	f007 ff0e 	bl	80088a8 <tud_control_xfer>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	e051      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
        if (stage == CONTROL_STAGE_SETUP) {
 8000a90:	79bb      	ldrb	r3, [r7, #6]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d10b      	bne.n	8000aae <tud_vendor_control_xfer_cb+0x202>
          return tud_control_xfer(rhport, request, &keyboard_last_cycle_duration, request->wLength);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	88db      	ldrh	r3, [r3, #6]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	79f8      	ldrb	r0, [r7, #7]
 8000a9e:	4a2b      	ldr	r2, [pc, #172]	@ (8000b4c <tud_vendor_control_xfer_cb+0x2a0>)
 8000aa0:	6839      	ldr	r1, [r7, #0]
 8000aa2:	f007 ff01 	bl	80088a8 <tud_control_xfer>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	e044      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
        break;
 8000aaa:	bf00      	nop
 8000aac:	e000      	b.n	8000ab0 <tud_vendor_control_xfer_cb+0x204>
        break;
 8000aae:	bf00      	nop
      if (stage == CONTROL_STAGE_SETUP) {
 8000ab0:	79bb      	ldrb	r3, [r7, #6]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d122      	bne.n	8000afc <tud_vendor_control_xfer_cb+0x250>
        return tud_control_status(rhport, request);
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	6839      	ldr	r1, [r7, #0]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f007 fe82 	bl	80087c4 <tud_control_status>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	e037      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
      if (stage == CONTROL_STAGE_SETUP) {
 8000ac4:	79bb      	ldrb	r3, [r7, #6]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d11a      	bne.n	8000b00 <tud_vendor_control_xfer_cb+0x254>
        if (request->wIndex == 7) {
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	889b      	ldrh	r3, [r3, #4]
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	2b07      	cmp	r3, #7
 8000ad2:	d10b      	bne.n	8000aec <tud_vendor_control_xfer_cb+0x240>
          memcpy(&total_len, desc_ms_os_20 + 8, 2);
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <tud_vendor_control_xfer_cb+0x2a4>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	813b      	strh	r3, [r7, #8]
          return tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_ms_os_20, total_len);
 8000adc:	893b      	ldrh	r3, [r7, #8]
 8000ade:	79f8      	ldrb	r0, [r7, #7]
 8000ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8000b54 <tud_vendor_control_xfer_cb+0x2a8>)
 8000ae2:	6839      	ldr	r1, [r7, #0]
 8000ae4:	f007 fee0 	bl	80088a8 <tud_control_xfer>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	e023      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
        return false;
 8000aec:	2300      	movs	r3, #0
 8000aee:	e021      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
      break;
 8000af0:	bf00      	nop
 8000af2:	e006      	b.n	8000b02 <tud_vendor_control_xfer_cb+0x256>
        break;
 8000af4:	bf00      	nop
 8000af6:	e004      	b.n	8000b02 <tud_vendor_control_xfer_cb+0x256>
        break;
 8000af8:	bf00      	nop
 8000afa:	e002      	b.n	8000b02 <tud_vendor_control_xfer_cb+0x256>
      break;
 8000afc:	bf00      	nop
 8000afe:	e000      	b.n	8000b02 <tud_vendor_control_xfer_cb+0x256>
      break;
 8000b00:	bf00      	nop
    }
  }

  case TUSB_REQ_TYPE_CLASS: {
    if (stage == CONTROL_STAGE_SETUP) {
 8000b02:	79bb      	ldrb	r3, [r7, #6]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d10e      	bne.n	8000b26 <tud_vendor_control_xfer_cb+0x27a>
      if (request->bRequest == 0x22) {
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	785b      	ldrb	r3, [r3, #1]
 8000b0c:	2b22      	cmp	r3, #34	@ 0x22
 8000b0e:	d106      	bne.n	8000b1e <tud_vendor_control_xfer_cb+0x272>
        // response with status OK
        return tud_control_status(rhport, request);
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	6839      	ldr	r1, [r7, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f007 fe55 	bl	80087c4 <tud_control_status>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	e00a      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
      }

      return false;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e008      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>

    break;
  }

  default:
    break;
 8000b22:	bf00      	nop
 8000b24:	e000      	b.n	8000b28 <tud_vendor_control_xfer_cb+0x27c>
    break;
 8000b26:	bf00      	nop
  }

  if (stage != CONTROL_STAGE_SETUP) {
 8000b28:	79bb      	ldrb	r3, [r7, #6]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d001      	beq.n	8000b32 <tud_vendor_control_xfer_cb+0x286>
    return true;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e000      	b.n	8000b34 <tud_vendor_control_xfer_cb+0x288>
  }
  return false;
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	200000f8 	.word	0x200000f8
 8000b44:	0800ba6c 	.word	0x0800ba6c
 8000b48:	20000288 	.word	0x20000288
 8000b4c:	200004f8 	.word	0x200004f8
 8000b50:	0800c1e8 	.word	0x0800c1e8
 8000b54:	0800c1e0 	.word	0x0800c1e0

08000b58 <get_bitmask_for_modifier>:

static uint8_t key_triggered = 0;

struct key* current_pressed_key = NULL;

uint8_t get_bitmask_for_modifier(uint8_t keycode) {
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  switch (keycode) {
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	3be0      	subs	r3, #224	@ 0xe0
 8000b66:	2b07      	cmp	r3, #7
 8000b68:	d822      	bhi.n	8000bb0 <get_bitmask_for_modifier+0x58>
 8000b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b70 <get_bitmask_for_modifier+0x18>)
 8000b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b70:	08000b91 	.word	0x08000b91
 8000b74:	08000b95 	.word	0x08000b95
 8000b78:	08000b99 	.word	0x08000b99
 8000b7c:	08000b9d 	.word	0x08000b9d
 8000b80:	08000ba1 	.word	0x08000ba1
 8000b84:	08000ba5 	.word	0x08000ba5
 8000b88:	08000ba9 	.word	0x08000ba9
 8000b8c:	08000bad 	.word	0x08000bad
  case HID_KEY_CONTROL_LEFT:
    return 0b00000001;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e00e      	b.n	8000bb2 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_LEFT:
    return 0b00000010;
 8000b94:	2302      	movs	r3, #2
 8000b96:	e00c      	b.n	8000bb2 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_LEFT:
    return 0b00000100;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	e00a      	b.n	8000bb2 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_LEFT:
    return 0b00001000;
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	e008      	b.n	8000bb2 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_CONTROL_RIGHT:
    return 0b00010000;
 8000ba0:	2310      	movs	r3, #16
 8000ba2:	e006      	b.n	8000bb2 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_RIGHT:
    return 0b00100000;
 8000ba4:	2320      	movs	r3, #32
 8000ba6:	e004      	b.n	8000bb2 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_RIGHT:
    return 0b01000000;
 8000ba8:	2340      	movs	r3, #64	@ 0x40
 8000baa:	e002      	b.n	8000bb2 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_RIGHT:
    return 0b10000000;
 8000bac:	2380      	movs	r3, #128	@ 0x80
 8000bae:	e000      	b.n	8000bb2 <get_bitmask_for_modifier+0x5a>
  default:
    return 0b00000000;
 8000bb0:	2300      	movs	r3, #0
  }
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <get_usage_consumer_control>:

uint16_t get_usage_consumer_control(uint16_t value) {
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
  if (value > 0xFF) {
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	2bff      	cmp	r3, #255	@ 0xff
 8000bce:	d904      	bls.n	8000bda <get_usage_consumer_control+0x1a>
    return value & 0b0111111111111111;
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	e000      	b.n	8000bdc <get_usage_consumer_control+0x1c>
  } else {
    return 0;
 8000bda:	2300      	movs	r3, #0
  }
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <init_key>:

void init_key(uint8_t adc_channel, uint8_t amux_channel, uint8_t row, uint8_t column) {
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b087      	sub	sp, #28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4623      	mov	r3, r4
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71bb      	strb	r3, [r7, #6]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	717b      	strb	r3, [r7, #5]
 8000c02:	4613      	mov	r3, r2
 8000c04:	713b      	strb	r3, [r7, #4]
  struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8000c06:	79f9      	ldrb	r1, [r7, #7]
 8000c08:	79ba      	ldrb	r2, [r7, #6]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	1a9b      	subs	r3, r3, r2
 8000c14:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8000c18:	fb01 f202 	mul.w	r2, r1, r2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a61      	ldr	r2, [pc, #388]	@ (8000da4 <init_key+0x1bc>)
 8000c20:	4413      	add	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]

  key->is_enabled = 1;
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
  key->is_idle = 0;
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	711a      	strb	r2, [r3, #4]
  key->row = row;
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	797a      	ldrb	r2, [r7, #5]
 8000c34:	705a      	strb	r2, [r3, #1]
  key->column = column;
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	793a      	ldrb	r2, [r7, #4]
 8000c3a:	709a      	strb	r2, [r3, #2]

  key->calibration.cycles_count = 0;
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	72da      	strb	r2, [r3, #11]
 8000c42:	2200      	movs	r2, #0
 8000c44:	731a      	strb	r2, [r3, #12]
  key->calibration.idle_value = IDLE_VALUE_APPROX;
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f042 0208 	orr.w	r2, r2, #8
 8000c4e:	735a      	strb	r2, [r3, #13]
 8000c50:	2200      	movs	r2, #0
 8000c52:	f042 0207 	orr.w	r2, r2, #7
 8000c56:	739a      	strb	r2, [r3, #14]
  key->calibration.max_distance = MAX_DISTANCE_APPROX;
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f062 020b 	orn	r2, r2, #11
 8000c60:	73da      	strb	r2, [r3, #15]
 8000c62:	2200      	movs	r2, #0
 8000c64:	f042 0201 	orr.w	r2, r2, #1
 8000c68:	741a      	strb	r2, [r3, #16]

  key->actuation.status = STATUS_RESET;
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	779a      	strb	r2, [r3, #30]
  key->actuation.trigger_offset = keyboard_user_config.trigger_offset;
 8000c70:	4b4d      	ldr	r3, [pc, #308]	@ (8000da8 <init_key+0x1c0>)
 8000c72:	785a      	ldrb	r2, [r3, #1]
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	f883 2020 	strb.w	r2, [r3, #32]
  key->actuation.reset_offset = keyboard_user_config.trigger_offset - keyboard_user_config.reset_threshold;
 8000c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8000da8 <init_key+0x1c0>)
 8000c7c:	785a      	ldrb	r2, [r3, #1]
 8000c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8000da8 <init_key+0x1c0>)
 8000c80:	789b      	ldrb	r3, [r3, #2]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	77da      	strb	r2, [r3, #31]
  key->actuation.rapid_trigger_offset = keyboard_user_config.rapid_trigger_offset;
 8000c8a:	4b47      	ldr	r3, [pc, #284]	@ (8000da8 <init_key+0x1c0>)
 8000c8c:	78da      	ldrb	r2, [r3, #3]
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  key->actuation.is_continuous_rapid_trigger_enabled = 0;
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	75fb      	strb	r3, [r7, #23]
 8000ca0:	e078      	b.n	8000d94 <init_key+0x1ac>
    if (keyboard_user_config.keymaps[i][row][column] != ____) {
 8000ca2:	7df9      	ldrb	r1, [r7, #23]
 8000ca4:	797a      	ldrb	r2, [r7, #5]
 8000ca6:	793b      	ldrb	r3, [r7, #4]
 8000ca8:	483f      	ldr	r0, [pc, #252]	@ (8000da8 <init_key+0x1c0>)
 8000caa:	0089      	lsls	r1, r1, #2
 8000cac:	440a      	add	r2, r1
 8000cae:	0092      	lsls	r2, r2, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	3304      	adds	r3, #4
 8000cb4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d068      	beq.n	8000d8e <init_key+0x1a6>
      uint16_t usage_consumer_control = get_usage_consumer_control(keyboard_user_config.keymaps[i][row][column]);
 8000cbc:	7df9      	ldrb	r1, [r7, #23]
 8000cbe:	797a      	ldrb	r2, [r7, #5]
 8000cc0:	793b      	ldrb	r3, [r7, #4]
 8000cc2:	4839      	ldr	r0, [pc, #228]	@ (8000da8 <init_key+0x1c0>)
 8000cc4:	0089      	lsls	r1, r1, #2
 8000cc6:	440a      	add	r2, r1
 8000cc8:	0092      	lsls	r2, r2, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	3304      	adds	r3, #4
 8000cce:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff74 	bl	8000bc0 <get_usage_consumer_control>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	81fb      	strh	r3, [r7, #14]
      if (usage_consumer_control) {
 8000cdc:	89fb      	ldrh	r3, [r7, #14]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d011      	beq.n	8000d06 <init_key+0x11e>
        key->layers[i].type = KEY_TYPE_CONSUMER_CONTROL;
 8000ce2:	7dfa      	ldrb	r2, [r7, #23]
 8000ce4:	6939      	ldr	r1, [r7, #16]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	3305      	adds	r3, #5
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	701a      	strb	r2, [r3, #0]
        key->layers[i].value = usage_consumer_control;
 8000cf4:	7dfa      	ldrb	r2, [r7, #23]
 8000cf6:	6939      	ldr	r1, [r7, #16]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	440b      	add	r3, r1
 8000d00:	89fa      	ldrh	r2, [r7, #14]
 8000d02:	80da      	strh	r2, [r3, #6]
 8000d04:	e043      	b.n	8000d8e <init_key+0x1a6>
      } else {
        uint8_t bitmask = get_bitmask_for_modifier(keyboard_user_config.keymaps[i][row][column]);
 8000d06:	7df9      	ldrb	r1, [r7, #23]
 8000d08:	797a      	ldrb	r2, [r7, #5]
 8000d0a:	793b      	ldrb	r3, [r7, #4]
 8000d0c:	4826      	ldr	r0, [pc, #152]	@ (8000da8 <init_key+0x1c0>)
 8000d0e:	0089      	lsls	r1, r1, #2
 8000d10:	440a      	add	r2, r1
 8000d12:	0092      	lsls	r2, r2, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	3304      	adds	r3, #4
 8000d18:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff1a 	bl	8000b58 <get_bitmask_for_modifier>
 8000d24:	4603      	mov	r3, r0
 8000d26:	737b      	strb	r3, [r7, #13]
        if (bitmask) {
 8000d28:	7b7b      	ldrb	r3, [r7, #13]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d013      	beq.n	8000d56 <init_key+0x16e>
          key->layers[i].type = KEY_TYPE_MODIFIER;
 8000d2e:	7dfa      	ldrb	r2, [r7, #23]
 8000d30:	6939      	ldr	r1, [r7, #16]
 8000d32:	4613      	mov	r3, r2
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	4413      	add	r3, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	3305      	adds	r3, #5
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	701a      	strb	r2, [r3, #0]
          key->layers[i].value = bitmask;
 8000d40:	7dfa      	ldrb	r2, [r7, #23]
 8000d42:	7b7b      	ldrb	r3, [r7, #13]
 8000d44:	b298      	uxth	r0, r3
 8000d46:	6939      	ldr	r1, [r7, #16]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	4413      	add	r3, r2
 8000d4e:	440b      	add	r3, r1
 8000d50:	4602      	mov	r2, r0
 8000d52:	80da      	strh	r2, [r3, #6]
 8000d54:	e01b      	b.n	8000d8e <init_key+0x1a6>
        } else {
          key->layers[i].type = KEY_TYPE_NORMAL;
 8000d56:	7dfa      	ldrb	r2, [r7, #23]
 8000d58:	6939      	ldr	r1, [r7, #16]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	4413      	add	r3, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	3305      	adds	r3, #5
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
          key->layers[i].value = keyboard_user_config.keymaps[i][row][column];
 8000d68:	7df8      	ldrb	r0, [r7, #23]
 8000d6a:	7979      	ldrb	r1, [r7, #5]
 8000d6c:	793b      	ldrb	r3, [r7, #4]
 8000d6e:	7dfa      	ldrb	r2, [r7, #23]
 8000d70:	4c0d      	ldr	r4, [pc, #52]	@ (8000da8 <init_key+0x1c0>)
 8000d72:	0080      	lsls	r0, r0, #2
 8000d74:	4401      	add	r1, r0
 8000d76:	0089      	lsls	r1, r1, #2
 8000d78:	440b      	add	r3, r1
 8000d7a:	3304      	adds	r3, #4
 8000d7c:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
 8000d80:	6939      	ldr	r1, [r7, #16]
 8000d82:	4613      	mov	r3, r2
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	4413      	add	r3, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	80da      	strh	r2, [r3, #6]
  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8000d8e:	7dfb      	ldrb	r3, [r7, #23]
 8000d90:	3301      	adds	r3, #1
 8000d92:	75fb      	strb	r3, [r7, #23]
 8000d94:	7dfb      	ldrb	r3, [r7, #23]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d983      	bls.n	8000ca2 <init_key+0xba>
        }
      }
    }
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	bf00      	nop
 8000d9e:	371c      	adds	r7, #28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd90      	pop	{r4, r7, pc}
 8000da4:	20000288 	.word	0x20000288
 8000da8:	20000000 	.word	0x20000000

08000dac <update_key_state>:

uint8_t update_key_state(struct key *key) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  struct state state;

  // Get a reading
  state.value = keyboard_user_config.reverse_magnet_pole ? 4095 - keyboard_read_adc() : keyboard_read_adc();
 8000db4:	4ba5      	ldr	r3, [pc, #660]	@ (800104c <update_key_state+0x2a0>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d007      	beq.n	8000dcc <update_key_state+0x20>
 8000dbc:	f000 feb4 	bl	8001b28 <keyboard_read_adc>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8000dc6:	330f      	adds	r3, #15
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	e002      	b.n	8000dd2 <update_key_state+0x26>
 8000dcc:	f000 feac 	bl	8001b28 <keyboard_read_adc>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	813b      	strh	r3, [r7, #8]

  if (key->calibration.cycles_count < CALIBRATION_CYCLES) {
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	2b13      	cmp	r3, #19
 8000dde:	d82f      	bhi.n	8000e40 <update_key_state+0x94>
    // Calibrate idle value
    float delta = 0.6;
 8000de0:	4b9b      	ldr	r3, [pc, #620]	@ (8001050 <update_key_state+0x2a4>)
 8000de2:	617b      	str	r3, [r7, #20]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8000de4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000de8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000df0:	893b      	ldrh	r3, [r7, #8]
 8000df2:	ee07 3a90 	vmov	s15, r3
 8000df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	ee07 3a90 	vmov	s15, r3
 8000e0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e1e:	ee17 3a90 	vmov	r3, s15
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f8a3 200d 	strh.w	r2, [r3, #13]
    key->calibration.cycles_count++;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	3301      	adds	r3, #1
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f8a3 200b 	strh.w	r2, [r3, #11]

    return 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e101      	b.n	8001044 <update_key_state+0x298>
  }

  // Calibrate idle value
  if (state.value > key->calibration.idle_value) {
 8000e40:	893a      	ldrh	r2, [r7, #8]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d929      	bls.n	8000ea2 <update_key_state+0xf6>
    // opti possible sur float
    float delta = 0.8;
 8000e4e:	4b81      	ldr	r3, [pc, #516]	@ (8001054 <update_key_state+0x2a8>)
 8000e50:	61fb      	str	r3, [r7, #28]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8000e52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e56:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e5e:	893b      	ldrh	r3, [r7, #8]
 8000e60:	ee07 3a90 	vmov	s15, r3
 8000e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	ee07 3a90 	vmov	s15, r3
 8000e78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e8c:	ee17 3a90 	vmov	r3, s15
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f8a3 200d 	strh.w	r2, [r3, #13]
    state.value = key->calibration.idle_value;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	813b      	strh	r3, [r7, #8]
  }

  // Do nothing if key is idle
  if (key->state.distance == 0 && state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f8b3 3013 	ldrh.w	r3, [r3, #19]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d117      	bne.n	8000ede <update_key_state+0x132>
 8000eae:	893b      	ldrh	r3, [r7, #8]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	3b0a      	subs	r3, #10
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	db0e      	blt.n	8000ede <update_key_state+0x132>
    if (key->idle_counter >= IDLE_CYCLES_UNTIL_SLEEP) {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	78db      	ldrb	r3, [r3, #3]
 8000ec4:	2b0e      	cmp	r3, #14
 8000ec6:	d904      	bls.n	8000ed2 <update_key_state+0x126>
      key->is_idle = 1;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	711a      	strb	r2, [r3, #4]
      return 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e0b8      	b.n	8001044 <update_key_state+0x298>
    }
    key->idle_counter++;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	78db      	ldrb	r3, [r3, #3]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	70da      	strb	r2, [r3, #3]
  }

  // Get distance from top
  if (state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8000ede:	893b      	ldrh	r3, [r7, #8]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	3b0a      	subs	r3, #10
 8000eec:	429a      	cmp	r2, r3
 8000eee:	db05      	blt.n	8000efc <update_key_state+0x150>
    state.distance = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	817b      	strh	r3, [r7, #10]
    key->actuation.direction_changed_point = 0;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	775a      	strb	r2, [r3, #29]
 8000efa:	e00f      	b.n	8000f1c <update_key_state+0x170>
  } else {
    state.distance = key->calibration.idle_value - IDLE_VALUE_OFFSET - state.value;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	893b      	ldrh	r3, [r7, #8]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	3b0a      	subs	r3, #10
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	817b      	strh	r3, [r7, #10]
    key->is_idle = 0;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	711a      	strb	r2, [r3, #4]
    key->idle_counter = 0;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	70da      	strb	r2, [r3, #3]
  }

  // Calibrate max distance value
  if (state.distance > key->calibration.max_distance) {
 8000f1c:	897a      	ldrh	r2, [r7, #10]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d903      	bls.n	8000f32 <update_key_state+0x186>
    key->calibration.max_distance = state.distance;
 8000f2a:	897a      	ldrh	r2, [r7, #10]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f8a3 200f 	strh.w	r2, [r3, #15]
  }

  // Limit max distance
  if (state.distance >= key->calibration.max_distance - MAX_DISTANCE_OFFSET) {
 8000f32:	897b      	ldrh	r3, [r7, #10]
 8000f34:	461a      	mov	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	3b3c      	subs	r3, #60	@ 0x3c
 8000f40:	429a      	cmp	r2, r3
 8000f42:	db04      	blt.n	8000f4e <update_key_state+0x1a2>
    state.distance = key->calibration.max_distance;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	817b      	strh	r3, [r7, #10]
  }

  // Map distance in percentages
  state.distance_8bits = (state.distance * 0xff) / key->calibration.max_distance;
 8000f4e:	897b      	ldrh	r3, [r7, #10]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4613      	mov	r3, r2
 8000f54:	021b      	lsls	r3, r3, #8
 8000f56:	1a9b      	subs	r3, r3, r2
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	f8b2 200f 	ldrh.w	r2, [r2, #15]
 8000f5e:	b292      	uxth	r2, r2
 8000f60:	fb93 f3f2 	sdiv	r3, r3, r2
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	733b      	strb	r3, [r7, #12]

  float delta = 0.8;
 8000f68:	4b3a      	ldr	r3, [pc, #232]	@ (8001054 <update_key_state+0x2a8>)
 8000f6a:	61bb      	str	r3, [r7, #24]
  state.filtered_distance = (1 - delta) * state.distance_8bits + delta * key->state.filtered_distance;
 8000f6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f70:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f78:	7b3b      	ldrb	r3, [r7, #12]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000f8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f90:	ee06 3a90 	vmov	s13, r3
 8000f94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9c:	ee17 3a90 	vmov	r3, s15
 8000fa0:	f8c7 300d 	str.w	r3, [r7, #13]
  state.filtered_distance_8bits = state.filtered_distance;
 8000fa4:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8000fa8:	ee07 3a90 	vmov	s15, r3
 8000fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fb0:	edc7 7a00 	vstr	s15, [r7]
 8000fb4:	783b      	ldrb	r3, [r7, #0]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	74bb      	strb	r3, [r7, #18]

  // Update velocity
  state.velocity = state.filtered_distance_8bits - key->state.filtered_distance_8bits;
 8000fba:	7cba      	ldrb	r2, [r7, #18]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	7edb      	ldrb	r3, [r3, #27]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	747b      	strb	r3, [r7, #17]

  // Update direction
  if (key->state.velocity > 0 && state.velocity > 0 && key->actuation.direction != GOING_DOWN) {
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	dd13      	ble.n	8000ffa <update_key_state+0x24e>
 8000fd2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	dd0f      	ble.n	8000ffa <update_key_state+0x24e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	7f1b      	ldrb	r3, [r3, #28]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d00b      	beq.n	8000ffa <update_key_state+0x24e>
    key->actuation.direction = GOING_DOWN;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	771a      	strb	r2, [r3, #28]
    if (key->actuation.direction_changed_point != 0) {
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7f5b      	ldrb	r3, [r3, #29]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d01c      	beq.n	800102a <update_key_state+0x27e>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	7eda      	ldrb	r2, [r3, #27]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	775a      	strb	r2, [r3, #29]
    if (key->actuation.direction_changed_point != 0) {
 8000ff8:	e017      	b.n	800102a <update_key_state+0x27e>
    }
  } else if (key->state.velocity < 0 && state.velocity < 0 && key->actuation.direction != GOING_UP) {
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001000:	2b00      	cmp	r3, #0
 8001002:	da12      	bge.n	800102a <update_key_state+0x27e>
 8001004:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001008:	2b00      	cmp	r3, #0
 800100a:	da0e      	bge.n	800102a <update_key_state+0x27e>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7f1b      	ldrb	r3, [r3, #28]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00a      	beq.n	800102a <update_key_state+0x27e>
    key->actuation.direction = GOING_UP;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	771a      	strb	r2, [r3, #28]
    if (key->actuation.direction_changed_point != 255) {
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7f5b      	ldrb	r3, [r3, #29]
 800101e:	2bff      	cmp	r3, #255	@ 0xff
 8001020:	d003      	beq.n	800102a <update_key_state+0x27e>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7eda      	ldrb	r2, [r3, #27]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	775a      	strb	r2, [r3, #29]
    }
  }

  key->state = state;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f103 0211 	add.w	r2, r3, #17
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	cb03      	ldmia	r3!, {r0, r1}
 8001036:	6010      	str	r0, [r2, #0]
 8001038:	6051      	str	r1, [r2, #4]
 800103a:	8819      	ldrh	r1, [r3, #0]
 800103c:	789b      	ldrb	r3, [r3, #2]
 800103e:	8111      	strh	r1, [r2, #8]
 8001040:	7293      	strb	r3, [r2, #10]
  return 1;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000000 	.word	0x20000000
 8001050:	3f19999a 	.word	0x3f19999a
 8001054:	3f4ccccd 	.word	0x3f4ccccd

08001058 <update_key_actuation>:

void update_key_actuation(struct key *key) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
   *
   */

  // if rapid trigger enable, move trigger and reset offsets according to the distance taht began the trigger

  uint32_t now = keyboard_get_time();
 8001060:	f000 fd78 	bl	8001b54 <keyboard_get_time>
 8001064:	6178      	str	r0, [r7, #20]
  uint8_t is_after_trigger_offset = key->state.distance_8bits > key->actuation.trigger_offset;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7d5a      	ldrb	r2, [r3, #21]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001070:	429a      	cmp	r2, r3
 8001072:	bf8c      	ite	hi
 8001074:	2301      	movhi	r3, #1
 8001076:	2300      	movls	r3, #0
 8001078:	b2db      	uxtb	r3, r3
 800107a:	74fb      	strb	r3, [r7, #19]
  uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7d5a      	ldrb	r2, [r3, #21]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7fdb      	ldrb	r3, [r3, #31]
 8001084:	429a      	cmp	r2, r3
 8001086:	bf34      	ite	cc
 8001088:	2301      	movcc	r3, #1
 800108a:	2300      	movcs	r3, #0
 800108c:	b2db      	uxtb	r3, r3
 800108e:	74bb      	strb	r3, [r7, #18]
  uint8_t has_rapid_trigger = key->actuation.rapid_trigger_offset != 0;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001096:	2b00      	cmp	r3, #0
 8001098:	bf14      	ite	ne
 800109a:	2301      	movne	r3, #1
 800109c:	2300      	moveq	r3, #0
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	747b      	strb	r3, [r7, #17]
  uint8_t is_after_rapid_trigger_offset = key->state.distance_8bits > key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset + keyboard_user_config.reset_threshold;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	7d5b      	ldrb	r3, [r3, #21]
 80010a6:	4619      	mov	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7f5b      	ldrb	r3, [r3, #29]
 80010ac:	461a      	mov	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	4a54      	ldr	r2, [pc, #336]	@ (8001208 <update_key_actuation+0x1b0>)
 80010b8:	7892      	ldrb	r2, [r2, #2]
 80010ba:	4413      	add	r3, r2
 80010bc:	4299      	cmp	r1, r3
 80010be:	bfcc      	ite	gt
 80010c0:	2301      	movgt	r3, #1
 80010c2:	2300      	movle	r3, #0
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	743b      	strb	r3, [r7, #16]
  uint8_t is_before_rapid_reset_offset = key->state.distance_8bits < key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	7d5b      	ldrb	r3, [r3, #21]
 80010cc:	461a      	mov	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7f5b      	ldrb	r3, [r3, #29]
 80010d2:	4619      	mov	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010da:	1acb      	subs	r3, r1, r3
 80010dc:	429a      	cmp	r2, r3
 80010de:	bfb4      	ite	lt
 80010e0:	2301      	movlt	r3, #1
 80010e2:	2300      	movge	r3, #0
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	73fb      	strb	r3, [r7, #15]

  switch (key->actuation.status) {
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7f9b      	ldrb	r3, [r3, #30]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d87f      	bhi.n	80011f2 <update_key_actuation+0x19a>
 80010f2:	a201      	add	r2, pc, #4	@ (adr r2, 80010f8 <update_key_actuation+0xa0>)
 80010f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f8:	080011a9 	.word	0x080011a9
 80010fc:	080011b9 	.word	0x080011b9
 8001100:	08001109 	.word	0x08001109
 8001104:	08001141 	.word	0x08001141

  case STATUS_RESET:
    // if reset, can be triggered or tap
    if (is_after_trigger_offset) {
 8001108:	7cfb      	ldrb	r3, [r7, #19]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d073      	beq.n	80011f6 <update_key_actuation+0x19e>
      if (key->layers[_TAP_LAYER].value) {
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8001114:	b29b      	uxth	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <update_key_actuation+0xca>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	779a      	strb	r2, [r3, #30]
 8001120:	e009      	b.n	8001136 <update_key_actuation+0xde>
        // key_triggered = 1;
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2202      	movs	r2, #2
 8001126:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 8001128:	4b38      	ldr	r3, [pc, #224]	@ (800120c <update_key_actuation+0x1b4>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, _BASE_LAYER);
 800112e:	2100      	movs	r1, #0
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff faad 	bl	8000690 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	f8c3 2023 	str.w	r2, [r3, #35]	@ 0x23
    }
    break;
 800113e:	e05a      	b.n	80011f6 <update_key_actuation+0x19e>

  case STATUS_RAPID_TRIGGER_RESET:
    if (!has_rapid_trigger) {
 8001140:	7c7b      	ldrb	r3, [r7, #17]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d103      	bne.n	800114e <update_key_actuation+0xf6>
      key->actuation.status = STATUS_RESET;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2203      	movs	r2, #3
 800114a:	779a      	strb	r2, [r3, #30]
      break;
 800114c:	e058      	b.n	8001200 <update_key_actuation+0x1a8>
    }
    // if reset, can be triggered or tap
    if (is_after_trigger_offset && key->actuation.direction == GOING_DOWN && is_after_rapid_trigger_offset) {
 800114e:	7cfb      	ldrb	r3, [r7, #19]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d022      	beq.n	800119a <update_key_actuation+0x142>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7f1b      	ldrb	r3, [r3, #28]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d11e      	bne.n	800119a <update_key_actuation+0x142>
 800115c:	7c3b      	ldrb	r3, [r7, #16]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d01b      	beq.n	800119a <update_key_actuation+0x142>
      if (key->layers[_TAP_LAYER].value) {
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8001168:	b29b      	uxth	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d006      	beq.n	800117c <update_key_actuation+0x124>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 8001174:	4b25      	ldr	r3, [pc, #148]	@ (800120c <update_key_actuation+0x1b4>)
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
 800117a:	e009      	b.n	8001190 <update_key_actuation+0x138>
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2202      	movs	r2, #2
 8001180:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 8001182:	4b22      	ldr	r3, [pc, #136]	@ (800120c <update_key_actuation+0x1b4>)
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, _BASE_LAYER);
 8001188:	2100      	movs	r1, #0
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fa80 	bl	8000690 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	f8c3 2023 	str.w	r2, [r3, #35]	@ 0x23
    } else if (is_before_reset_offset) {
      key->actuation.status = STATUS_RESET;
    }
    break;
 8001198:	e02f      	b.n	80011fa <update_key_actuation+0x1a2>
    } else if (is_before_reset_offset) {
 800119a:	7cbb      	ldrb	r3, [r7, #18]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d02c      	beq.n	80011fa <update_key_actuation+0x1a2>
      key->actuation.status = STATUS_RESET;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2203      	movs	r2, #3
 80011a4:	779a      	strb	r2, [r3, #30]
    break;
 80011a6:	e028      	b.n	80011fa <update_key_actuation+0x1a2>

  case STATUS_TAP:
    // if tap, can be reset
    key->actuation.status = STATUS_RESET;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2203      	movs	r2, #3
 80011ac:	779a      	strb	r2, [r3, #30]
    hid_release_key(key, _TAP_LAYER);
 80011ae:	2101      	movs	r1, #1
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff fad7 	bl	8000764 <hid_release_key>
    break;
 80011b6:	e023      	b.n	8001200 <update_key_actuation+0x1a8>

  case STATUS_TRIGGERED:
    // if triggered, can be reset
    if (is_before_reset_offset) {
 80011b8:	7cbb      	ldrb	r3, [r7, #18]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d007      	beq.n	80011ce <update_key_actuation+0x176>
      key->actuation.status = STATUS_RESET;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2203      	movs	r2, #3
 80011c2:	779a      	strb	r2, [r3, #30]
      hid_release_key(key, _BASE_LAYER);
 80011c4:	2100      	movs	r1, #0
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff facc 	bl	8000764 <hid_release_key>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
      hid_release_key(key, _BASE_LAYER);
    }
    break;
 80011cc:	e017      	b.n	80011fe <update_key_actuation+0x1a6>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
 80011ce:	7c7b      	ldrb	r3, [r7, #17]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d014      	beq.n	80011fe <update_key_actuation+0x1a6>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7f1b      	ldrb	r3, [r3, #28]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d110      	bne.n	80011fe <update_key_actuation+0x1a6>
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00d      	beq.n	80011fe <update_key_actuation+0x1a6>
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2204      	movs	r2, #4
 80011e6:	779a      	strb	r2, [r3, #30]
      hid_release_key(key, _BASE_LAYER);
 80011e8:	2100      	movs	r1, #0
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff faba 	bl	8000764 <hid_release_key>
    break;
 80011f0:	e005      	b.n	80011fe <update_key_actuation+0x1a6>

  default:
    break;
 80011f2:	bf00      	nop
 80011f4:	e004      	b.n	8001200 <update_key_actuation+0x1a8>
    break;
 80011f6:	bf00      	nop
 80011f8:	e002      	b.n	8001200 <update_key_actuation+0x1a8>
    break;
 80011fa:	bf00      	nop
 80011fc:	e000      	b.n	8001200 <update_key_actuation+0x1a8>
    break;
 80011fe:	bf00      	nop
  }
}
 8001200:	bf00      	nop
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000000 	.word	0x20000000
 800120c:	200004fc 	.word	0x200004fc

08001210 <update_key>:

void update_key(struct key *key) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if (!update_key_state(key)) {
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff fdc7 	bl	8000dac <update_key_state>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <update_key+0x1c>
    return;
  }

  update_key_actuation(key);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff17 	bl	8001058 <update_key_actuation>
 800122a:	e000      	b.n	800122e <update_key+0x1e>
    return;
 800122c:	bf00      	nop
}
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <keyboard_init_keys>:

void keyboard_init_keys() {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0

  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 800123a:	2300      	movs	r3, #0
 800123c:	71fb      	strb	r3, [r7, #7]
 800123e:	e027      	b.n	8001290 <keyboard_init_keys+0x5c>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8001240:	2300      	movs	r3, #0
 8001242:	71bb      	strb	r3, [r7, #6]
 8001244:	e01e      	b.n	8001284 <keyboard_init_keys+0x50>
      if (channels_by_row_col[row][col][0] != XXXX) {
 8001246:	79fa      	ldrb	r2, [r7, #7]
 8001248:	79bb      	ldrb	r3, [r7, #6]
 800124a:	4915      	ldr	r1, [pc, #84]	@ (80012a0 <keyboard_init_keys+0x6c>)
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	4413      	add	r3, r2
 8001250:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001254:	2bff      	cmp	r3, #255	@ 0xff
 8001256:	d012      	beq.n	800127e <keyboard_init_keys+0x4a>
        init_key(channels_by_row_col[row][col][0], channels_by_row_col[row][col][1], row, col);
 8001258:	79fa      	ldrb	r2, [r7, #7]
 800125a:	79bb      	ldrb	r3, [r7, #6]
 800125c:	4910      	ldr	r1, [pc, #64]	@ (80012a0 <keyboard_init_keys+0x6c>)
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4413      	add	r3, r2
 8001262:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 8001266:	79fa      	ldrb	r2, [r7, #7]
 8001268:	79bb      	ldrb	r3, [r7, #6]
 800126a:	490d      	ldr	r1, [pc, #52]	@ (80012a0 <keyboard_init_keys+0x6c>)
 800126c:	0092      	lsls	r2, r2, #2
 800126e:	4413      	add	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	440b      	add	r3, r1
 8001274:	7859      	ldrb	r1, [r3, #1]
 8001276:	79bb      	ldrb	r3, [r7, #6]
 8001278:	79fa      	ldrb	r2, [r7, #7]
 800127a:	f7ff fcb5 	bl	8000be8 <init_key>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	3301      	adds	r3, #1
 8001282:	71bb      	strb	r3, [r7, #6]
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	2b03      	cmp	r3, #3
 8001288:	d9dd      	bls.n	8001246 <keyboard_init_keys+0x12>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	3301      	adds	r3, #1
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	2b03      	cmp	r3, #3
 8001294:	d9d4      	bls.n	8001240 <keyboard_init_keys+0xc>
      }
    }
  }
}
 8001296:	bf00      	nop
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	0800bab4 	.word	0x0800bab4

080012a4 <keyboard_task>:

void keyboard_task() {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 80012aa:	f000 fc53 	bl	8001b54 <keyboard_get_time>
 80012ae:	60b8      	str	r0, [r7, #8]
  key_triggered = 0;
 80012b0:	4b64      	ldr	r3, [pc, #400]	@ (8001444 <keyboard_task+0x1a0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80012b6:	2300      	movs	r3, #0
 80012b8:	73fb      	strb	r3, [r7, #15]
 80012ba:	e039      	b.n	8001330 <keyboard_task+0x8c>
    keyboard_select_amux(amux_channel);
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 fbee 	bl	8001aa0 <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80012c4:	2300      	movs	r3, #0
 80012c6:	73bb      	strb	r3, [r7, #14]
 80012c8:	e02c      	b.n	8001324 <keyboard_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 80012ca:	7bb9      	ldrb	r1, [r7, #14]
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	485e      	ldr	r0, [pc, #376]	@ (8001448 <keyboard_task+0x1a4>)
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	1a9b      	subs	r3, r3, r2
 80012da:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80012de:	fb01 f202 	mul.w	r2, r1, r2
 80012e2:	4413      	add	r3, r2
 80012e4:	4403      	add	r3, r0
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d017      	beq.n	800131c <keyboard_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 80012ec:	7bbb      	ldrb	r3, [r7, #14]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fbfe 	bl	8001af0 <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 80012f4:	7bb9      	ldrb	r1, [r7, #14]
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	1a9b      	subs	r3, r3, r2
 8001302:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001306:	fb01 f202 	mul.w	r2, r1, r2
 800130a:	4413      	add	r3, r2
 800130c:	4a4e      	ldr	r2, [pc, #312]	@ (8001448 <keyboard_task+0x1a4>)
 800130e:	4413      	add	r3, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff7d 	bl	8001210 <update_key>

      keyboard_close_adc();
 8001316:	f000 fc13 	bl	8001b40 <keyboard_close_adc>
 800131a:	e000      	b.n	800131e <keyboard_task+0x7a>
        continue;
 800131c:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800131e:	7bbb      	ldrb	r3, [r7, #14]
 8001320:	3301      	adds	r3, #1
 8001322:	73bb      	strb	r3, [r7, #14]
 8001324:	7bbb      	ldrb	r3, [r7, #14]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0cf      	beq.n	80012ca <keyboard_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	3301      	adds	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	2b0f      	cmp	r3, #15
 8001334:	d9c2      	bls.n	80012bc <keyboard_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8001336:	2300      	movs	r3, #0
 8001338:	737b      	strb	r3, [r7, #13]
 800133a:	e074      	b.n	8001426 <keyboard_task+0x182>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800133c:	2300      	movs	r3, #0
 800133e:	733b      	strb	r3, [r7, #12]
 8001340:	e06b      	b.n	800141a <keyboard_task+0x176>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 8001342:	7b39      	ldrb	r1, [r7, #12]
 8001344:	7b7a      	ldrb	r2, [r7, #13]
 8001346:	4840      	ldr	r0, [pc, #256]	@ (8001448 <keyboard_task+0x1a4>)
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	1a9b      	subs	r3, r3, r2
 8001352:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001356:	fb01 f202 	mul.w	r2, r1, r2
 800135a:	4413      	add	r3, r2
 800135c:	4403      	add	r3, r0
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d056      	beq.n	8001412 <keyboard_task+0x16e>
 8001364:	7b39      	ldrb	r1, [r7, #12]
 8001366:	7b7a      	ldrb	r2, [r7, #13]
 8001368:	4837      	ldr	r0, [pc, #220]	@ (8001448 <keyboard_task+0x1a4>)
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	1a9b      	subs	r3, r3, r2
 8001374:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001378:	fb01 f202 	mul.w	r2, r1, r2
 800137c:	4413      	add	r3, r2
 800137e:	4403      	add	r3, r0
 8001380:	331e      	adds	r3, #30
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d144      	bne.n	8001412 <keyboard_task+0x16e>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8001388:	7b39      	ldrb	r1, [r7, #12]
 800138a:	7b7a      	ldrb	r2, [r7, #13]
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	1a9b      	subs	r3, r3, r2
 8001396:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800139a:	fb01 f202 	mul.w	r2, r1, r2
 800139e:	4413      	add	r3, r2
 80013a0:	4a29      	ldr	r2, [pc, #164]	@ (8001448 <keyboard_task+0x1a4>)
 80013a2:	4413      	add	r3, r2
 80013a4:	607b      	str	r3, [r7, #4]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7d5a      	ldrb	r2, [r3, #21]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7fdb      	ldrb	r3, [r3, #31]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	bf34      	ite	cc
 80013b2:	2301      	movcc	r3, #1
 80013b4:	2300      	movcs	r3, #0
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	70fb      	strb	r3, [r7, #3]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 80013ba:	f000 fbcb 	bl	8001b54 <keyboard_get_time>
 80013be:	4602      	mov	r2, r0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f8d3 3023 	ldr.w	r3, [r3, #35]	@ 0x23
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	4a20      	ldr	r2, [pc, #128]	@ (800144c <keyboard_task+0x1a8>)
 80013ca:	88d2      	ldrh	r2, [r2, #6]
 80013cc:	4293      	cmp	r3, r2
 80013ce:	bf94      	ite	ls
 80013d0:	2301      	movls	r3, #1
 80013d2:	2300      	movhi	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	70bb      	strb	r3, [r7, #2]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00a      	beq.n	80013f4 <keyboard_task+0x150>
 80013de:	78bb      	ldrb	r3, [r7, #2]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d007      	beq.n	80013f4 <keyboard_task+0x150>
        key->actuation.status = STATUS_TAP;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	779a      	strb	r2, [r3, #30]
        hid_press_key(key, _TAP_LAYER);
 80013ea:	2101      	movs	r1, #1
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff f94f 	bl	8000690 <hid_press_key>
 80013f2:	e00f      	b.n	8001414 <keyboard_task+0x170>
      } else if (!is_before_timeout || key_triggered) {
 80013f4:	78bb      	ldrb	r3, [r7, #2]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <keyboard_task+0x15e>
 80013fa:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <keyboard_task+0x1a0>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d008      	beq.n	8001414 <keyboard_task+0x170>
        key->actuation.status = STATUS_TRIGGERED;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2202      	movs	r2, #2
 8001406:	779a      	strb	r2, [r3, #30]
        hid_press_key(key, _BASE_LAYER);
 8001408:	2100      	movs	r1, #0
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff f940 	bl	8000690 <hid_press_key>
 8001410:	e000      	b.n	8001414 <keyboard_task+0x170>
        continue;
 8001412:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8001414:	7b3b      	ldrb	r3, [r7, #12]
 8001416:	3301      	adds	r3, #1
 8001418:	733b      	strb	r3, [r7, #12]
 800141a:	7b3b      	ldrb	r3, [r7, #12]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d090      	beq.n	8001342 <keyboard_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8001420:	7b7b      	ldrb	r3, [r7, #13]
 8001422:	3301      	adds	r3, #1
 8001424:	737b      	strb	r3, [r7, #13]
 8001426:	7b7b      	ldrb	r3, [r7, #13]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d987      	bls.n	800133c <keyboard_task+0x98>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 800142c:	f000 fb92 	bl	8001b54 <keyboard_get_time>
 8001430:	4602      	mov	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	4a06      	ldr	r2, [pc, #24]	@ (8001450 <keyboard_task+0x1ac>)
 8001438:	6013      	str	r3, [r2, #0]
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200004fc 	.word	0x200004fc
 8001448:	20000288 	.word	0x20000288
 800144c:	20000000 	.word	0x20000000
 8001450:	200004f8 	.word	0x200004f8

08001454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b09c      	sub	sp, #112	@ 0x70
 8001458:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145a:	f001 f8ff 	bl	800265c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800145e:	f000 f963 	bl	8001728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001462:	f000 fa79 	bl	8001958 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001466:	f000 f9c9 	bl	80017fc <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 800146a:	f000 fa47 	bl	80018fc <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800146e:	f000 fa17 	bl	80018a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ADC_channel_Config.Rank = 1;
 8001472:	4ba8      	ldr	r3, [pc, #672]	@ (8001714 <main+0x2c0>)
 8001474:	2201      	movs	r2, #1
 8001476:	605a      	str	r2, [r3, #4]
  ADC_channel_Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001478:	4ba6      	ldr	r3, [pc, #664]	@ (8001714 <main+0x2c0>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  keyboard_init_keys();
 800147e:	f7ff fed9 	bl	8001234 <keyboard_init_keys>

  ssd1306_Init();
 8001482:	f000 fbad 	bl	8001be0 <ssd1306_Init>

  hid_init();
 8001486:	f7ff f899 	bl	80005bc <hid_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    // MARK: Main loop
    keyboard_task();
 800148a:	f7ff ff0b 	bl	80012a4 <keyboard_task>

    ssd1306_Fill(White);
 800148e:	2001      	movs	r0, #1
 8001490:	f000 fc10 	bl	8001cb4 <ssd1306_Fill>
    ssd1306_FlipScreen(1, 1);
 8001494:	2101      	movs	r1, #1
 8001496:	2001      	movs	r0, #1
 8001498:	f000 fe44 	bl	8002124 <ssd1306_FlipScreen>

    ssd1306_DrawRectangle(0, 0, SSD1306_WIDTH - 1, SSD1306_HEIGHT - 1, Black);
 800149c:	2300      	movs	r3, #0
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	233f      	movs	r3, #63	@ 0x3f
 80014a2:	227f      	movs	r2, #127	@ 0x7f
 80014a4:	2100      	movs	r1, #0
 80014a6:	2000      	movs	r0, #0
 80014a8:	f000 fdd4 	bl	8002054 <ssd1306_DrawRectangle>
    ssd1306_Line(MOD_WIDTH, DIVIDER, SSD1306_WIDTH - 1, DIVIDER, Black);
 80014ac:	2300      	movs	r3, #0
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2320      	movs	r3, #32
 80014b2:	227f      	movs	r2, #127	@ 0x7f
 80014b4:	2120      	movs	r1, #32
 80014b6:	2026      	movs	r0, #38	@ 0x26
 80014b8:	f000 fd60 	bl	8001f7c <ssd1306_Line>
    ssd1306_Line(MOD_WIDTH, 0, MOD_WIDTH, SSD1306_HEIGHT - 1, Black);
 80014bc:	2300      	movs	r3, #0
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	233f      	movs	r3, #63	@ 0x3f
 80014c2:	2226      	movs	r2, #38	@ 0x26
 80014c4:	2100      	movs	r1, #0
 80014c6:	2026      	movs	r0, #38	@ 0x26
 80014c8:	f000 fd58 	bl	8001f7c <ssd1306_Line>
    for (int i = 1; i < 3; i++) {
 80014cc:	2301      	movs	r3, #1
 80014ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80014d0:	e013      	b.n	80014fa <main+0xa6>
        int x = MOD_WIDTH + i * KEY_WIDTH;
 80014d2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80014d4:	4613      	mov	r3, r2
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	1a9b      	subs	r3, r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	3326      	adds	r3, #38	@ 0x26
 80014de:	637b      	str	r3, [r7, #52]	@ 0x34
        ssd1306_Line(x, 0, x, SSD1306_HEIGHT - 1, Black);
 80014e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014e2:	b2d8      	uxtb	r0, r3
 80014e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	2300      	movs	r3, #0
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	233f      	movs	r3, #63	@ 0x3f
 80014ee:	2100      	movs	r1, #0
 80014f0:	f000 fd44 	bl	8001f7c <ssd1306_Line>
    for (int i = 1; i < 3; i++) {
 80014f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014f6:	3301      	adds	r3, #1
 80014f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80014fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	dde8      	ble.n	80014d2 <main+0x7e>
        sprintf(mod_buf, "%d%%", mod_percent);
        ssd1306_SetCursor(mod_x_percent, mod_y + 12);
        ssd1306_WriteString(mod_buf, Font_6x8, Black);
    } */

    int label_row_bot = SSD1306_HEIGHT - DIVIDER + 2;
 8001500:	2322      	movs	r3, #34	@ 0x22
 8001502:	653b      	str	r3, [r7, #80]	@ 0x50
    int percent_row_bot = SSD1306_HEIGHT - 8 - 2;
 8001504:	2336      	movs	r3, #54	@ 0x36
 8001506:	64fb      	str	r3, [r7, #76]	@ 0x4c

    int label_row_top = 2;
 8001508:	2302      	movs	r3, #2
 800150a:	64bb      	str	r3, [r7, #72]	@ 0x48
    int percent_row_top = label_row_bot - 11;
 800150c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800150e:	3b0b      	subs	r3, #11
 8001510:	647b      	str	r3, [r7, #68]	@ 0x44

    char keycodes[6][4] = {0};
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]
 8001522:	615a      	str	r2, [r3, #20]
    uint8_t key_percents[6] = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	809a      	strh	r2, [r3, #4]
    int tracker = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	663b      	str	r3, [r7, #96]	@ 0x60

    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 8001532:	2300      	movs	r3, #0
 8001534:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001536:	e050      	b.n	80015da <main+0x186>
    	struct key* k = &keyboard_keys[0][amux];
 8001538:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	4a74      	ldr	r2, [pc, #464]	@ (8001718 <main+0x2c4>)
 8001546:	4413      	add	r3, r2
 8001548:	63bb      	str	r3, [r7, #56]	@ 0x38

        if (k->state.distance_8bits > 20 && tracker < 6) {
 800154a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800154c:	7d5b      	ldrb	r3, [r3, #21]
 800154e:	2b14      	cmp	r3, #20
 8001550:	d940      	bls.n	80015d4 <main+0x180>
 8001552:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001554:	2b05      	cmp	r3, #5
 8001556:	dc3d      	bgt.n	80015d4 <main+0x180>
        	keycodes[tracker][0] = '0';
 8001558:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	3368      	adds	r3, #104	@ 0x68
 800155e:	443b      	add	r3, r7
 8001560:	2230      	movs	r2, #48	@ 0x30
 8001562:	f803 2c4c 	strb.w	r2, [r3, #-76]
        	keycodes[tracker][1] = 'x';
 8001566:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	3368      	adds	r3, #104	@ 0x68
 800156c:	443b      	add	r3, r7
 800156e:	2278      	movs	r2, #120	@ 0x78
 8001570:	f803 2c4b 	strb.w	r2, [r3, #-75]
        	keycodes[tracker][2] = (amux < 10) ? ('0' + amux) : ('A' + (amux - 10));
 8001574:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001576:	2b09      	cmp	r3, #9
 8001578:	dc04      	bgt.n	8001584 <main+0x130>
 800157a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800157c:	b2db      	uxtb	r3, r3
 800157e:	3330      	adds	r3, #48	@ 0x30
 8001580:	b2da      	uxtb	r2, r3
 8001582:	e003      	b.n	800158c <main+0x138>
 8001584:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001586:	b2db      	uxtb	r3, r3
 8001588:	3337      	adds	r3, #55	@ 0x37
 800158a:	b2da      	uxtb	r2, r3
 800158c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	3368      	adds	r3, #104	@ 0x68
 8001592:	443b      	add	r3, r7
 8001594:	f803 2c4a 	strb.w	r2, [r3, #-74]
        	keycodes[tracker][3] = '\0';
 8001598:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	3368      	adds	r3, #104	@ 0x68
 800159e:	443b      	add	r3, r7
 80015a0:	2200      	movs	r2, #0
 80015a2:	f803 2c49 	strb.w	r2, [r3, #-73]

            key_percents[tracker] = (k->state.distance_8bits * 100) / 255;
 80015a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015a8:	7d5b      	ldrb	r3, [r3, #21]
 80015aa:	461a      	mov	r2, r3
 80015ac:	2364      	movs	r3, #100	@ 0x64
 80015ae:	fb02 f303 	mul.w	r3, r2, r3
 80015b2:	4a5a      	ldr	r2, [pc, #360]	@ (800171c <main+0x2c8>)
 80015b4:	fb82 1203 	smull	r1, r2, r2, r3
 80015b8:	441a      	add	r2, r3
 80015ba:	11d2      	asrs	r2, r2, #7
 80015bc:	17db      	asrs	r3, r3, #31
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	b2d9      	uxtb	r1, r3
 80015c2:	f107 0214 	add.w	r2, r7, #20
 80015c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80015c8:	4413      	add	r3, r2
 80015ca:	460a      	mov	r2, r1
 80015cc:	701a      	strb	r2, [r3, #0]
            tracker++;
 80015ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80015d0:	3301      	adds	r3, #1
 80015d2:	663b      	str	r3, [r7, #96]	@ 0x60
    for (int amux = 0; amux < AMUX_CHANNEL_COUNT; amux++) {
 80015d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015d6:	3301      	adds	r3, #1
 80015d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80015da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	ddab      	ble.n	8001538 <main+0xe4>
        }
    }

    for (int i = 1; i <= 3; i++) {
 80015e0:	2301      	movs	r3, #1
 80015e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80015e4:	e044      	b.n	8001670 <main+0x21c>
    	if (keycodes[i - 1][0] != '\0') {
 80015e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015e8:	3b01      	subs	r3, #1
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	3368      	adds	r3, #104	@ 0x68
 80015ee:	443b      	add	r3, r7
 80015f0:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d038      	beq.n	800166a <main+0x216>
    		int x = MOD_WIDTH + (i - 1) * KEY_WIDTH + 4;
 80015f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015fa:	1e5a      	subs	r2, r3, #1
 80015fc:	4613      	mov	r3, r2
 80015fe:	011b      	lsls	r3, r3, #4
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	332a      	adds	r3, #42	@ 0x2a
 8001606:	63fb      	str	r3, [r7, #60]	@ 0x3c
    		ssd1306_SetCursor(x, label_row_top);
 8001608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800160a:	b2db      	uxtb	r3, r3
 800160c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f000 fc9a 	bl	8001f4c <ssd1306_SetCursor>
         	ssd1306_WriteString((char*)keycodes[i - 1], Font_6x8, Black);
 8001618:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800161a:	3b01      	subs	r3, #1
 800161c:	f107 021c 	add.w	r2, r7, #28
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	18d0      	adds	r0, r2, r3
 8001624:	4b3e      	ldr	r3, [pc, #248]	@ (8001720 <main+0x2cc>)
 8001626:	2200      	movs	r2, #0
 8001628:	9200      	str	r2, [sp, #0]
 800162a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800162c:	f000 fc68 	bl	8001f00 <ssd1306_WriteString>

    		char buf[6];
         	sprintf(buf, "%d%%", key_percents[i - 1]);
 8001630:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001632:	3b01      	subs	r3, #1
 8001634:	3368      	adds	r3, #104	@ 0x68
 8001636:	443b      	add	r3, r7
 8001638:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800163c:	461a      	mov	r2, r3
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	4938      	ldr	r1, [pc, #224]	@ (8001724 <main+0x2d0>)
 8001644:	4618      	mov	r0, r3
 8001646:	f009 fd3f 	bl	800b0c8 <siprintf>
         	ssd1306_SetCursor(x, percent_row_top);
 800164a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800164c:	b2db      	uxtb	r3, r3
 800164e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f000 fc79 	bl	8001f4c <ssd1306_SetCursor>
    		ssd1306_WriteString(buf, Font_6x8, Black);
 800165a:	4b31      	ldr	r3, [pc, #196]	@ (8001720 <main+0x2cc>)
 800165c:	f107 000c 	add.w	r0, r7, #12
 8001660:	2200      	movs	r2, #0
 8001662:	9200      	str	r2, [sp, #0]
 8001664:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001666:	f000 fc4b 	bl	8001f00 <ssd1306_WriteString>
    for (int i = 1; i <= 3; i++) {
 800166a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800166c:	3301      	adds	r3, #1
 800166e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001670:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001672:	2b03      	cmp	r3, #3
 8001674:	ddb7      	ble.n	80015e6 <main+0x192>
    	}
    }

    for (int i = 4; i <= 6; i++) {
 8001676:	2304      	movs	r3, #4
 8001678:	657b      	str	r3, [r7, #84]	@ 0x54
 800167a:	e042      	b.n	8001702 <main+0x2ae>
    	if (keycodes[i - 1][0] != '\0') {
 800167c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800167e:	3b01      	subs	r3, #1
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	3368      	adds	r3, #104	@ 0x68
 8001684:	443b      	add	r3, r7
 8001686:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d036      	beq.n	80016fc <main+0x2a8>
        	int x = MOD_WIDTH + (i - 4) * KEY_WIDTH + 4;
 800168e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001690:	1f1a      	subs	r2, r3, #4
 8001692:	4613      	mov	r3, r2
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	1a9b      	subs	r3, r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	332a      	adds	r3, #42	@ 0x2a
 800169c:	643b      	str	r3, [r7, #64]	@ 0x40
            ssd1306_SetCursor(x, label_row_bot);
 800169e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 fc4f 	bl	8001f4c <ssd1306_SetCursor>
           	ssd1306_WriteString((char*)keycodes[i - 1], Font_6x8, Black);
 80016ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016b0:	3b01      	subs	r3, #1
 80016b2:	f107 021c 	add.w	r2, r7, #28
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	18d0      	adds	r0, r2, r3
 80016ba:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <main+0x2cc>)
 80016bc:	2200      	movs	r2, #0
 80016be:	9200      	str	r2, [sp, #0]
 80016c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016c2:	f000 fc1d 	bl	8001f00 <ssd1306_WriteString>

        	char buf[6];
           	sprintf(buf, "%d%%", key_percents[i - 1]);
 80016c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016c8:	3b01      	subs	r3, #1
 80016ca:	3368      	adds	r3, #104	@ 0x68
 80016cc:	443b      	add	r3, r7
 80016ce:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80016d2:	461a      	mov	r2, r3
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	4913      	ldr	r1, [pc, #76]	@ (8001724 <main+0x2d0>)
 80016d8:	4618      	mov	r0, r3
 80016da:	f009 fcf5 	bl	800b0c8 <siprintf>
           	ssd1306_SetCursor(x, percent_row_bot);
 80016de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 fc2f 	bl	8001f4c <ssd1306_SetCursor>
           	ssd1306_WriteString(buf, Font_6x8, Black);
 80016ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <main+0x2cc>)
 80016f0:	1d38      	adds	r0, r7, #4
 80016f2:	2200      	movs	r2, #0
 80016f4:	9200      	str	r2, [sp, #0]
 80016f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f8:	f000 fc02 	bl	8001f00 <ssd1306_WriteString>
    for (int i = 4; i <= 6; i++) {
 80016fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016fe:	3301      	adds	r3, #1
 8001700:	657b      	str	r3, [r7, #84]	@ 0x54
 8001702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001704:	2b06      	cmp	r3, #6
 8001706:	ddb9      	ble.n	800167c <main+0x228>
    	}
    }

    ssd1306_UpdateScreen();
 8001708:	f000 faec 	bl	8001ce4 <ssd1306_UpdateScreen>

    hid_task();
 800170c:	f7fe ff6a 	bl	80005e4 <hid_task>
  while (1) {
 8001710:	e6bb      	b.n	800148a <main+0x36>
 8001712:	bf00      	nop
 8001714:	20000a80 	.word	0x20000a80
 8001718:	20000288 	.word	0x20000288
 800171c:	80808081 	.word	0x80808081
 8001720:	0800c0d4 	.word	0x0800c0d4
 8001724:	0800ba20 	.word	0x0800ba20

08001728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b094      	sub	sp, #80	@ 0x50
 800172c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172e:	f107 0320 	add.w	r3, r7, #32
 8001732:	2230      	movs	r2, #48	@ 0x30
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f009 fce8 	bl	800b10c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800174c:	2300      	movs	r3, #0
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	4b28      	ldr	r3, [pc, #160]	@ (80017f4 <SystemClock_Config+0xcc>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001754:	4a27      	ldr	r2, [pc, #156]	@ (80017f4 <SystemClock_Config+0xcc>)
 8001756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800175a:	6413      	str	r3, [r2, #64]	@ 0x40
 800175c:	4b25      	ldr	r3, [pc, #148]	@ (80017f4 <SystemClock_Config+0xcc>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001768:	2300      	movs	r3, #0
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	4b22      	ldr	r3, [pc, #136]	@ (80017f8 <SystemClock_Config+0xd0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a21      	ldr	r2, [pc, #132]	@ (80017f8 <SystemClock_Config+0xd0>)
 8001772:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	4b1f      	ldr	r3, [pc, #124]	@ (80017f8 <SystemClock_Config+0xd0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001784:	2301      	movs	r3, #1
 8001786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001788:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800178c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800178e:	2302      	movs	r3, #2
 8001790:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001792:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001796:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001798:	2319      	movs	r3, #25
 800179a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800179c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80017a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017a2:	2304      	movs	r3, #4
 80017a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017a6:	2307      	movs	r3, #7
 80017a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017aa:	f107 0320 	add.w	r3, r7, #32
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 fe56 	bl	8004460 <HAL_RCC_OscConfig>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80017ba:	f000 f9d2 	bl	8001b62 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017be:	230f      	movs	r3, #15
 80017c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c2:	2302      	movs	r3, #2
 80017c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	2102      	movs	r1, #2
 80017da:	4618      	mov	r0, r3
 80017dc:	f003 f8b8 	bl	8004950 <HAL_RCC_ClockConfig>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017e6:	f000 f9bc 	bl	8001b62 <Error_Handler>
  }
}
 80017ea:	bf00      	nop
 80017ec:	3750      	adds	r7, #80	@ 0x50
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40007000 	.word	0x40007000

080017fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001802:	463b      	mov	r3, r7
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800180e:	4b21      	ldr	r3, [pc, #132]	@ (8001894 <MX_ADC1_Init+0x98>)
 8001810:	4a21      	ldr	r2, [pc, #132]	@ (8001898 <MX_ADC1_Init+0x9c>)
 8001812:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001814:	4b1f      	ldr	r3, [pc, #124]	@ (8001894 <MX_ADC1_Init+0x98>)
 8001816:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800181a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800181c:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <MX_ADC1_Init+0x98>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001822:	4b1c      	ldr	r3, [pc, #112]	@ (8001894 <MX_ADC1_Init+0x98>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001828:	4b1a      	ldr	r3, [pc, #104]	@ (8001894 <MX_ADC1_Init+0x98>)
 800182a:	2200      	movs	r2, #0
 800182c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800182e:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <MX_ADC1_Init+0x98>)
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001836:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <MX_ADC1_Init+0x98>)
 8001838:	2200      	movs	r2, #0
 800183a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800183c:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <MX_ADC1_Init+0x98>)
 800183e:	4a17      	ldr	r2, [pc, #92]	@ (800189c <MX_ADC1_Init+0xa0>)
 8001840:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001842:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <MX_ADC1_Init+0x98>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001848:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <MX_ADC1_Init+0x98>)
 800184a:	2201      	movs	r2, #1
 800184c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800184e:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <MX_ADC1_Init+0x98>)
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001856:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <MX_ADC1_Init+0x98>)
 8001858:	2201      	movs	r2, #1
 800185a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800185c:	480d      	ldr	r0, [pc, #52]	@ (8001894 <MX_ADC1_Init+0x98>)
 800185e:	f000 ff93 	bl	8002788 <HAL_ADC_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001868:	f000 f97b 	bl	8001b62 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800186c:	2309      	movs	r3, #9
 800186e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001870:	2301      	movs	r3, #1
 8001872:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001878:	463b      	mov	r3, r7
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	@ (8001894 <MX_ADC1_Init+0x98>)
 800187e:	f001 f947 	bl	8002b10 <HAL_ADC_ConfigChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001888:	f000 f96b 	bl	8001b62 <Error_Handler>

  // memcpy(&ADC_channel_Config, &sConfig, sizeof(ADC_ChannelConfTypeDef));

  /* USER CODE END ADC1_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000500 	.word	0x20000500
 8001898:	40012000 	.word	0x40012000
 800189c:	0f000001 	.word	0x0f000001

080018a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018a4:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <MX_I2C1_Init+0x50>)
 80018a6:	4a13      	ldr	r2, [pc, #76]	@ (80018f4 <MX_I2C1_Init+0x54>)
 80018a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018aa:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <MX_I2C1_Init+0x50>)
 80018ac:	4a12      	ldr	r2, [pc, #72]	@ (80018f8 <MX_I2C1_Init+0x58>)
 80018ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <MX_I2C1_Init+0x50>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <MX_I2C1_Init+0x50>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <MX_I2C1_Init+0x50>)
 80018be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c4:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <MX_I2C1_Init+0x50>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <MX_I2C1_Init+0x50>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d0:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <MX_I2C1_Init+0x50>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <MX_I2C1_Init+0x50>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018dc:	4804      	ldr	r0, [pc, #16]	@ (80018f0 <MX_I2C1_Init+0x50>)
 80018de:	f002 f803 	bl	80038e8 <HAL_I2C_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018e8:	f000 f93b 	bl	8001b62 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000548 	.word	0x20000548
 80018f4:	40005400 	.word	0x40005400
 80018f8:	000186a0 	.word	0x000186a0

080018fc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001900:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001902:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001906:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001908:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800190a:	2204      	movs	r2, #4
 800190c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800190e:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001910:	2202      	movs	r2, #2
 8001912:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001914:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001916:	2200      	movs	r2, #0
 8001918:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800191a:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800191c:	2202      	movs	r2, #2
 800191e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001922:	2200      	movs	r2, #0
 8001924:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001926:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001928:	2200      	movs	r2, #0
 800192a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800192e:	2200      	movs	r2, #0
 8001930:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001932:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001934:	2200      	movs	r2, #0
 8001936:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001938:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800193a:	2200      	movs	r2, #0
 800193c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800193e:	4805      	ldr	r0, [pc, #20]	@ (8001954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001940:	f002 fc7f 	bl	8004242 <HAL_PCD_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800194a:	f000 f90a 	bl	8001b62 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	2000059c 	.word	0x2000059c

08001958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195e:	f107 030c 	add.w	r3, r7, #12
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	4b20      	ldr	r3, [pc, #128]	@ (80019f4 <MX_GPIO_Init+0x9c>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	4a1f      	ldr	r2, [pc, #124]	@ (80019f4 <MX_GPIO_Init+0x9c>)
 8001978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800197c:	6313      	str	r3, [r2, #48]	@ 0x30
 800197e:	4b1d      	ldr	r3, [pc, #116]	@ (80019f4 <MX_GPIO_Init+0x9c>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <MX_GPIO_Init+0x9c>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4a18      	ldr	r2, [pc, #96]	@ (80019f4 <MX_GPIO_Init+0x9c>)
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	6313      	str	r3, [r2, #48]	@ 0x30
 800199a:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <MX_GPIO_Init+0x9c>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <MX_GPIO_Init+0x9c>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a11      	ldr	r2, [pc, #68]	@ (80019f4 <MX_GPIO_Init+0x9c>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <MX_GPIO_Init+0x9c>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80019c8:	480b      	ldr	r0, [pc, #44]	@ (80019f8 <MX_GPIO_Init+0xa0>)
 80019ca:	f001 ff73 	bl	80038b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80019ce:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80019d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d4:	2301      	movs	r3, #1
 80019d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	4619      	mov	r1, r3
 80019e6:	4804      	ldr	r0, [pc, #16]	@ (80019f8 <MX_GPIO_Init+0xa0>)
 80019e8:	f001 fde0 	bl	80035ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019ec:	bf00      	nop
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40020400 	.word	0x40020400

080019fc <keyboard_read_config>:

/* USER CODE BEGIN 4 */

// MARK: keyboard_* functions

void keyboard_read_config() {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  memcpy(&keyboard_user_config, (uint32_t *)CONFIG_ADDRESS, sizeof(keyboard_user_config));
 8001a00:	4a04      	ldr	r2, [pc, #16]	@ (8001a14 <keyboard_read_config+0x18>)
 8001a02:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <keyboard_read_config+0x1c>)
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	2348      	movs	r3, #72	@ 0x48
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	f009 fbb2 	bl	800b174 <memcpy>
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000000 	.word	0x20000000
 8001a18:	08040000 	.word	0x08040000

08001a1c <keyboard_write_config>:

uint8_t keyboard_write_config(uint8_t *buffer, uint16_t offset, uint16_t size) {
 8001a1c:	b5b0      	push	{r4, r5, r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	807b      	strh	r3, [r7, #2]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	803b      	strh	r3, [r7, #0]
  if (offset >= sizeof(keyboard_user_config)) {
 8001a2c:	887b      	ldrh	r3, [r7, #2]
 8001a2e:	2b47      	cmp	r3, #71	@ 0x47
 8001a30:	d901      	bls.n	8001a36 <keyboard_write_config+0x1a>
    return 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e02d      	b.n	8001a92 <keyboard_write_config+0x76>
  }

  HAL_FLASH_Unlock();
 8001a36:	f001 fbff 	bl	8003238 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 8001a3a:	4b18      	ldr	r3, [pc, #96]	@ (8001a9c <keyboard_write_config+0x80>)
 8001a3c:	22b3      	movs	r2, #179	@ 0xb3
 8001a3e:	60da      	str	r2, [r3, #12]
  FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 8001a40:	2102      	movs	r1, #2
 8001a42:	2006      	movs	r0, #6
 8001a44:	f001 fd6a 	bl	800351c <FLASH_Erase_Sector>
  for (uint16_t i = offset; i < size; i++) {
 8001a48:	887b      	ldrh	r3, [r7, #2]
 8001a4a:	81fb      	strh	r3, [r7, #14]
 8001a4c:	e01a      	b.n	8001a84 <keyboard_write_config+0x68>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, CONFIG_ADDRESS + i, buffer[i]) != HAL_OK) {
 8001a4e:	89fb      	ldrh	r3, [r7, #14]
 8001a50:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001a54:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 8001a58:	4619      	mov	r1, r3
 8001a5a:	89fb      	ldrh	r3, [r7, #14]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2200      	movs	r2, #0
 8001a66:	461c      	mov	r4, r3
 8001a68:	4615      	mov	r5, r2
 8001a6a:	4622      	mov	r2, r4
 8001a6c:	462b      	mov	r3, r5
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f001 fb8e 	bl	8003190 <HAL_FLASH_Program>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <keyboard_write_config+0x62>
      HAL_FLASH_Lock();
 8001a7a:	f001 fbff 	bl	800327c <HAL_FLASH_Lock>
  for (uint16_t i = offset; i < size; i++) {
 8001a7e:	89fb      	ldrh	r3, [r7, #14]
 8001a80:	3301      	adds	r3, #1
 8001a82:	81fb      	strh	r3, [r7, #14]
 8001a84:	89fa      	ldrh	r2, [r7, #14]
 8001a86:	883b      	ldrh	r3, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d3e0      	bcc.n	8001a4e <keyboard_write_config+0x32>
    };
  }
  HAL_FLASH_Lock();
 8001a8c:	f001 fbf6 	bl	800327c <HAL_FLASH_Lock>
  return 1;
 8001a90:	2301      	movs	r3, #1
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bdb0      	pop	{r4, r5, r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <keyboard_select_amux>:

void keyboard_select_amux(uint8_t amux_channel) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  // TODO: set GPIOs at the same time using bitmap on register
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8001aaa:	2300      	movs	r3, #0
 8001aac:	73fb      	strb	r3, [r7, #15]
 8001aae:	e013      	b.n	8001ad8 <keyboard_select_amux+0x38>
    HAL_GPIO_WritePin(GPIOB, amux_select_pins[i], (amux_channel >> i) & 1);
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae8 <keyboard_select_amux+0x48>)
 8001ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab8:	b299      	uxth	r1, r3
 8001aba:	79fa      	ldrb	r2, [r7, #7]
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	fa42 f303 	asr.w	r3, r2, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	4807      	ldr	r0, [pc, #28]	@ (8001aec <keyboard_select_amux+0x4c>)
 8001ace:	f001 fef1 	bl	80038b4 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d9e8      	bls.n	8001ab0 <keyboard_select_amux+0x10>
  }
}
 8001ade:	bf00      	nop
 8001ae0:	bf00      	nop
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	0800bad4 	.word	0x0800bad4
 8001aec:	40020400 	.word	0x40020400

08001af0 <keyboard_select_adc>:

void keyboard_select_adc(uint8_t adc_channel) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
  ADC_channel_Config.Channel = adc_channels[adc_channel];
 8001afa:	2209      	movs	r2, #9
 8001afc:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <keyboard_select_adc+0x30>)
 8001afe:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &ADC_channel_Config);
 8001b00:	4907      	ldr	r1, [pc, #28]	@ (8001b20 <keyboard_select_adc+0x30>)
 8001b02:	4808      	ldr	r0, [pc, #32]	@ (8001b24 <keyboard_select_adc+0x34>)
 8001b04:	f001 f804 	bl	8002b10 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 8001b08:	4806      	ldr	r0, [pc, #24]	@ (8001b24 <keyboard_select_adc+0x34>)
 8001b0a:	f000 fe81 	bl	8002810 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 8001b0e:	2101      	movs	r1, #1
 8001b10:	4804      	ldr	r0, [pc, #16]	@ (8001b24 <keyboard_select_adc+0x34>)
 8001b12:	f000 ff64 	bl	80029de <HAL_ADC_PollForConversion>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000a80 	.word	0x20000a80
 8001b24:	20000500 	.word	0x20000500

08001b28 <keyboard_read_adc>:

uint16_t keyboard_read_adc() {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 8001b2c:	4803      	ldr	r0, [pc, #12]	@ (8001b3c <keyboard_read_adc+0x14>)
 8001b2e:	f000 ffe1 	bl	8002af4 <HAL_ADC_GetValue>
 8001b32:	4603      	mov	r3, r0
 8001b34:	b29b      	uxth	r3, r3
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000500 	.word	0x20000500

08001b40 <keyboard_close_adc>:

void keyboard_close_adc() {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  HAL_ADC_Stop(&hadc1);
 8001b44:	4802      	ldr	r0, [pc, #8]	@ (8001b50 <keyboard_close_adc+0x10>)
 8001b46:	f000 ff17 	bl	8002978 <HAL_ADC_Stop>
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000500 	.word	0x20000500

08001b54 <keyboard_get_time>:

uint32_t keyboard_get_time() {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001b58:	f000 fde6 	bl	8002728 <HAL_GetTick>
 8001b5c:	4603      	mov	r3, r0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b66:	b672      	cpsid	i
}
 8001b68:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001b6a:	bf00      	nop
 8001b6c:	e7fd      	b.n	8001b6a <Error_Handler+0x8>

08001b6e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af04      	add	r7, sp, #16
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	9302      	str	r3, [sp, #8]
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	1dfb      	adds	r3, r7, #7
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2301      	movs	r3, #1
 8001b96:	2200      	movs	r2, #0
 8001b98:	2178      	movs	r1, #120	@ 0x78
 8001b9a:	4803      	ldr	r0, [pc, #12]	@ (8001ba8 <ssd1306_WriteCommand+0x2c>)
 8001b9c:	f001 ffe8 	bl	8003b70 <HAL_I2C_Mem_Write>
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000548 	.word	0x20000548

08001bac <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af04      	add	r7, sp, #16
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbe:	9202      	str	r2, [sp, #8]
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	2240      	movs	r2, #64	@ 0x40
 8001bca:	2178      	movs	r1, #120	@ 0x78
 8001bcc:	4803      	ldr	r0, [pc, #12]	@ (8001bdc <ssd1306_WriteData+0x30>)
 8001bce:	f001 ffcf 	bl	8003b70 <HAL_I2C_Mem_Write>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000548 	.word	0x20000548

08001be0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001be4:	f7ff ffc3 	bl	8001b6e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001be8:	2064      	movs	r0, #100	@ 0x64
 8001bea:	f000 fda9 	bl	8002740 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f000 fa7a 	bl	80020e8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001bf4:	2020      	movs	r0, #32
 8001bf6:	f7ff ffc1 	bl	8001b7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f7ff ffbe 	bl	8001b7c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001c00:	20b0      	movs	r0, #176	@ 0xb0
 8001c02:	f7ff ffbb 	bl	8001b7c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8001c06:	20c0      	movs	r0, #192	@ 0xc0
 8001c08:	f7ff ffb8 	bl	8001b7c <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f7ff ffb5 	bl	8001b7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001c12:	2010      	movs	r0, #16
 8001c14:	f7ff ffb2 	bl	8001b7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001c18:	2040      	movs	r0, #64	@ 0x40
 8001c1a:	f7ff ffaf 	bl	8001b7c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001c1e:	20ff      	movs	r0, #255	@ 0xff
 8001c20:	f000 fa4f 	bl	80020c2 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8001c24:	20a0      	movs	r0, #160	@ 0xa0
 8001c26:	f7ff ffa9 	bl	8001b7c <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
 8001c2a:	20a7      	movs	r0, #167	@ 0xa7
 8001c2c:	f7ff ffa6 	bl	8001b7c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001c30:	20a8      	movs	r0, #168	@ 0xa8
 8001c32:	f7ff ffa3 	bl	8001b7c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001c36:	203f      	movs	r0, #63	@ 0x3f
 8001c38:	f7ff ffa0 	bl	8001b7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c3c:	20a4      	movs	r0, #164	@ 0xa4
 8001c3e:	f7ff ff9d 	bl	8001b7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001c42:	20d3      	movs	r0, #211	@ 0xd3
 8001c44:	f7ff ff9a 	bl	8001b7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7ff ff97 	bl	8001b7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c4e:	20d5      	movs	r0, #213	@ 0xd5
 8001c50:	f7ff ff94 	bl	8001b7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001c54:	20f0      	movs	r0, #240	@ 0xf0
 8001c56:	f7ff ff91 	bl	8001b7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001c5a:	20d9      	movs	r0, #217	@ 0xd9
 8001c5c:	f7ff ff8e 	bl	8001b7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001c60:	2022      	movs	r0, #34	@ 0x22
 8001c62:	f7ff ff8b 	bl	8001b7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001c66:	20da      	movs	r0, #218	@ 0xda
 8001c68:	f7ff ff88 	bl	8001b7c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001c6c:	2012      	movs	r0, #18
 8001c6e:	f7ff ff85 	bl	8001b7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001c72:	20db      	movs	r0, #219	@ 0xdb
 8001c74:	f7ff ff82 	bl	8001b7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001c78:	2020      	movs	r0, #32
 8001c7a:	f7ff ff7f 	bl	8001b7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001c7e:	208d      	movs	r0, #141	@ 0x8d
 8001c80:	f7ff ff7c 	bl	8001b7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001c84:	2014      	movs	r0, #20
 8001c86:	f7ff ff79 	bl	8001b7c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f000 fa2c 	bl	80020e8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001c90:	2000      	movs	r0, #0
 8001c92:	f000 f80f 	bl	8001cb4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001c96:	f000 f825 	bl	8001ce4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001c9a:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <ssd1306_Init+0xd0>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001ca0:	4b03      	ldr	r3, [pc, #12]	@ (8001cb0 <ssd1306_Init+0xd0>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001ca6:	4b02      	ldr	r3, [pc, #8]	@ (8001cb0 <ssd1306_Init+0xd0>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	711a      	strb	r2, [r3, #4]
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000e90 	.word	0x20000e90

08001cb4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <ssd1306_Fill+0x14>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e000      	b.n	8001cca <ssd1306_Fill+0x16>
 8001cc8:	23ff      	movs	r3, #255	@ 0xff
 8001cca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4803      	ldr	r0, [pc, #12]	@ (8001ce0 <ssd1306_Fill+0x2c>)
 8001cd2:	f009 fa1b 	bl	800b10c <memset>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000a90 	.word	0x20000a90

08001ce4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001cea:	2300      	movs	r3, #0
 8001cec:	71fb      	strb	r3, [r7, #7]
 8001cee:	e016      	b.n	8001d1e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	3b50      	subs	r3, #80	@ 0x50
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ff40 	bl	8001b7c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f7ff ff3d 	bl	8001b7c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001d02:	2010      	movs	r0, #16
 8001d04:	f7ff ff3a 	bl	8001b7c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	01db      	lsls	r3, r3, #7
 8001d0c:	4a08      	ldr	r2, [pc, #32]	@ (8001d30 <ssd1306_UpdateScreen+0x4c>)
 8001d0e:	4413      	add	r3, r2
 8001d10:	2180      	movs	r1, #128	@ 0x80
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ff4a 	bl	8001bac <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	71fb      	strb	r3, [r7, #7]
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	2b07      	cmp	r3, #7
 8001d22:	d9e5      	bls.n	8001cf0 <ssd1306_UpdateScreen+0xc>
    }
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000a90 	.word	0x20000a90

08001d34 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	71bb      	strb	r3, [r7, #6]
 8001d42:	4613      	mov	r3, r2
 8001d44:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	db3d      	blt.n	8001dca <ssd1306_DrawPixel+0x96>
 8001d4e:	79bb      	ldrb	r3, [r7, #6]
 8001d50:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d52:	d83a      	bhi.n	8001dca <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001d54:	797b      	ldrb	r3, [r7, #5]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d11a      	bne.n	8001d90 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001d5a:	79fa      	ldrb	r2, [r7, #7]
 8001d5c:	79bb      	ldrb	r3, [r7, #6]
 8001d5e:	08db      	lsrs	r3, r3, #3
 8001d60:	b2d8      	uxtb	r0, r3
 8001d62:	4603      	mov	r3, r0
 8001d64:	01db      	lsls	r3, r3, #7
 8001d66:	4413      	add	r3, r2
 8001d68:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd8 <ssd1306_DrawPixel+0xa4>)
 8001d6a:	5cd3      	ldrb	r3, [r2, r3]
 8001d6c:	b25a      	sxtb	r2, r3
 8001d6e:	79bb      	ldrb	r3, [r7, #6]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	2101      	movs	r1, #1
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	b25b      	sxtb	r3, r3
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	b259      	sxtb	r1, r3
 8001d80:	79fa      	ldrb	r2, [r7, #7]
 8001d82:	4603      	mov	r3, r0
 8001d84:	01db      	lsls	r3, r3, #7
 8001d86:	4413      	add	r3, r2
 8001d88:	b2c9      	uxtb	r1, r1
 8001d8a:	4a13      	ldr	r2, [pc, #76]	@ (8001dd8 <ssd1306_DrawPixel+0xa4>)
 8001d8c:	54d1      	strb	r1, [r2, r3]
 8001d8e:	e01d      	b.n	8001dcc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d90:	79fa      	ldrb	r2, [r7, #7]
 8001d92:	79bb      	ldrb	r3, [r7, #6]
 8001d94:	08db      	lsrs	r3, r3, #3
 8001d96:	b2d8      	uxtb	r0, r3
 8001d98:	4603      	mov	r3, r0
 8001d9a:	01db      	lsls	r3, r3, #7
 8001d9c:	4413      	add	r3, r2
 8001d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001dd8 <ssd1306_DrawPixel+0xa4>)
 8001da0:	5cd3      	ldrb	r3, [r2, r3]
 8001da2:	b25a      	sxtb	r2, r3
 8001da4:	79bb      	ldrb	r3, [r7, #6]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	2101      	movs	r1, #1
 8001dac:	fa01 f303 	lsl.w	r3, r1, r3
 8001db0:	b25b      	sxtb	r3, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	b25b      	sxtb	r3, r3
 8001db6:	4013      	ands	r3, r2
 8001db8:	b259      	sxtb	r1, r3
 8001dba:	79fa      	ldrb	r2, [r7, #7]
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	01db      	lsls	r3, r3, #7
 8001dc0:	4413      	add	r3, r2
 8001dc2:	b2c9      	uxtb	r1, r1
 8001dc4:	4a04      	ldr	r2, [pc, #16]	@ (8001dd8 <ssd1306_DrawPixel+0xa4>)
 8001dc6:	54d1      	strb	r1, [r2, r3]
 8001dc8:	e000      	b.n	8001dcc <ssd1306_DrawPixel+0x98>
        return;
 8001dca:	bf00      	nop
    }
}
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000a90 	.word	0x20000a90

08001ddc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b089      	sub	sp, #36	@ 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4604      	mov	r4, r0
 8001de4:	4638      	mov	r0, r7
 8001de6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001dea:	4623      	mov	r3, r4
 8001dec:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	2b1f      	cmp	r3, #31
 8001df2:	d902      	bls.n	8001dfa <ssd1306_WriteChar+0x1e>
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	2b7e      	cmp	r3, #126	@ 0x7e
 8001df8:	d901      	bls.n	8001dfe <ssd1306_WriteChar+0x22>
        return 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e079      	b.n	8001ef2 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <ssd1306_WriteChar+0x34>
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	3b20      	subs	r3, #32
 8001e0a:	4413      	add	r3, r2
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	e000      	b.n	8001e12 <ssd1306_WriteChar+0x36>
 8001e10:	783b      	ldrb	r3, [r7, #0]
 8001e12:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001e14:	4b39      	ldr	r3, [pc, #228]	@ (8001efc <ssd1306_WriteChar+0x120>)
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	7dfb      	ldrb	r3, [r7, #23]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	2b80      	cmp	r3, #128	@ 0x80
 8001e20:	dc06      	bgt.n	8001e30 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001e22:	4b36      	ldr	r3, [pc, #216]	@ (8001efc <ssd1306_WriteChar+0x120>)
 8001e24:	885b      	ldrh	r3, [r3, #2]
 8001e26:	461a      	mov	r2, r3
 8001e28:	787b      	ldrb	r3, [r7, #1]
 8001e2a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001e2c:	2b40      	cmp	r3, #64	@ 0x40
 8001e2e:	dd01      	ble.n	8001e34 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e05e      	b.n	8001ef2 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
 8001e38:	e04d      	b.n	8001ed6 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	3b20      	subs	r3, #32
 8001e40:	7879      	ldrb	r1, [r7, #1]
 8001e42:	fb01 f303 	mul.w	r3, r1, r3
 8001e46:	4619      	mov	r1, r3
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	440b      	add	r3, r1
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001e54:	2300      	movs	r3, #0
 8001e56:	61bb      	str	r3, [r7, #24]
 8001e58:	e036      	b.n	8001ec8 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d013      	beq.n	8001e92 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001e6a:	4b24      	ldr	r3, [pc, #144]	@ (8001efc <ssd1306_WriteChar+0x120>)
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	b2d8      	uxtb	r0, r3
 8001e78:	4b20      	ldr	r3, [pc, #128]	@ (8001efc <ssd1306_WriteChar+0x120>)
 8001e7a:	885b      	ldrh	r3, [r3, #2]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	4413      	add	r3, r2
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f7ff ff52 	bl	8001d34 <ssd1306_DrawPixel>
 8001e90:	e017      	b.n	8001ec2 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001e92:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <ssd1306_WriteChar+0x120>)
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	b2d8      	uxtb	r0, r3
 8001ea0:	4b16      	ldr	r3, [pc, #88]	@ (8001efc <ssd1306_WriteChar+0x120>)
 8001ea2:	885b      	ldrh	r3, [r3, #2]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	b2d9      	uxtb	r1, r3
 8001eae:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	bf0c      	ite	eq
 8001eb6:	2301      	moveq	r3, #1
 8001eb8:	2300      	movne	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	f7ff ff39 	bl	8001d34 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	61bb      	str	r3, [r7, #24]
 8001ec8:	7dfb      	ldrb	r3, [r7, #23]
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d3c4      	bcc.n	8001e5a <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	787b      	ldrb	r3, [r7, #1]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d3ac      	bcc.n	8001e3a <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <ssd1306_WriteChar+0x120>)
 8001ee2:	881a      	ldrh	r2, [r3, #0]
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	4413      	add	r3, r2
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	4b03      	ldr	r3, [pc, #12]	@ (8001efc <ssd1306_WriteChar+0x120>)
 8001eee:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3724      	adds	r7, #36	@ 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd90      	pop	{r4, r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000e90 	.word	0x20000e90

08001f00 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af02      	add	r7, sp, #8
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	4638      	mov	r0, r7
 8001f0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001f0e:	e013      	b.n	8001f38 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	7818      	ldrb	r0, [r3, #0]
 8001f14:	7e3b      	ldrb	r3, [r7, #24]
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	463b      	mov	r3, r7
 8001f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f1c:	f7ff ff5e 	bl	8001ddc <ssd1306_WriteChar>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461a      	mov	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d002      	beq.n	8001f32 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	e008      	b.n	8001f44 <ssd1306_WriteString+0x44>
        }
        str++;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3301      	adds	r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1e7      	bne.n	8001f10 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	781b      	ldrb	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	460a      	mov	r2, r1
 8001f56:	71fb      	strb	r3, [r7, #7]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	4b05      	ldr	r3, [pc, #20]	@ (8001f78 <ssd1306_SetCursor+0x2c>)
 8001f62:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001f64:	79bb      	ldrb	r3, [r7, #6]
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	4b03      	ldr	r3, [pc, #12]	@ (8001f78 <ssd1306_SetCursor+0x2c>)
 8001f6a:	805a      	strh	r2, [r3, #2]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	20000e90 	.word	0x20000e90

08001f7c <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b089      	sub	sp, #36	@ 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4604      	mov	r4, r0
 8001f84:	4608      	mov	r0, r1
 8001f86:	4611      	mov	r1, r2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4623      	mov	r3, r4
 8001f8c:	71fb      	strb	r3, [r7, #7]
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71bb      	strb	r3, [r7, #6]
 8001f92:	460b      	mov	r3, r1
 8001f94:	717b      	strb	r3, [r7, #5]
 8001f96:	4613      	mov	r3, r2
 8001f98:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8001f9a:	797a      	ldrb	r2, [r7, #5]
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bfb8      	it	lt
 8001fa4:	425b      	neglt	r3, r3
 8001fa6:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001fa8:	793a      	ldrb	r2, [r7, #4]
 8001faa:	79bb      	ldrb	r3, [r7, #6]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	bfb8      	it	lt
 8001fb2:	425b      	neglt	r3, r3
 8001fb4:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001fb6:	79fa      	ldrb	r2, [r7, #7]
 8001fb8:	797b      	ldrb	r3, [r7, #5]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d201      	bcs.n	8001fc2 <ssd1306_Line+0x46>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e001      	b.n	8001fc6 <ssd1306_Line+0x4a>
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc6:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001fc8:	79ba      	ldrb	r2, [r7, #6]
 8001fca:	793b      	ldrb	r3, [r7, #4]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d201      	bcs.n	8001fd4 <ssd1306_Line+0x58>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e001      	b.n	8001fd8 <ssd1306_Line+0x5c>
 8001fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd8:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8001fe2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001fe6:	7939      	ldrb	r1, [r7, #4]
 8001fe8:	797b      	ldrb	r3, [r7, #5]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fea2 	bl	8001d34 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001ff0:	e024      	b.n	800203c <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8001ff2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001ff6:	79b9      	ldrb	r1, [r7, #6]
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fe9a 	bl	8001d34 <ssd1306_DrawPixel>
        error2 = error * 2;
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	425b      	negs	r3, r3
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	429a      	cmp	r2, r3
 800200e:	dd08      	ble.n	8002022 <ssd1306_Line+0xa6>
            error -= deltaY;
 8002010:	69fa      	ldr	r2, [r7, #28]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	4413      	add	r3, r2
 8002020:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	429a      	cmp	r2, r3
 8002028:	da08      	bge.n	800203c <ssd1306_Line+0xc0>
            error += deltaX;
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	4413      	add	r3, r2
 8002030:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	b2da      	uxtb	r2, r3
 8002036:	79bb      	ldrb	r3, [r7, #6]
 8002038:	4413      	add	r3, r2
 800203a:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 800203c:	79fa      	ldrb	r2, [r7, #7]
 800203e:	797b      	ldrb	r3, [r7, #5]
 8002040:	429a      	cmp	r2, r3
 8002042:	d1d6      	bne.n	8001ff2 <ssd1306_Line+0x76>
 8002044:	79ba      	ldrb	r2, [r7, #6]
 8002046:	793b      	ldrb	r3, [r7, #4]
 8002048:	429a      	cmp	r2, r3
 800204a:	d1d2      	bne.n	8001ff2 <ssd1306_Line+0x76>
        }
    }
    return;
 800204c:	bf00      	nop
}
 800204e:	3724      	adds	r7, #36	@ 0x24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd90      	pop	{r4, r7, pc}

08002054 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b085      	sub	sp, #20
 8002058:	af02      	add	r7, sp, #8
 800205a:	4604      	mov	r4, r0
 800205c:	4608      	mov	r0, r1
 800205e:	4611      	mov	r1, r2
 8002060:	461a      	mov	r2, r3
 8002062:	4623      	mov	r3, r4
 8002064:	71fb      	strb	r3, [r7, #7]
 8002066:	4603      	mov	r3, r0
 8002068:	71bb      	strb	r3, [r7, #6]
 800206a:	460b      	mov	r3, r1
 800206c:	717b      	strb	r3, [r7, #5]
 800206e:	4613      	mov	r3, r2
 8002070:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8002072:	79bc      	ldrb	r4, [r7, #6]
 8002074:	797a      	ldrb	r2, [r7, #5]
 8002076:	79b9      	ldrb	r1, [r7, #6]
 8002078:	79f8      	ldrb	r0, [r7, #7]
 800207a:	7e3b      	ldrb	r3, [r7, #24]
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	4623      	mov	r3, r4
 8002080:	f7ff ff7c 	bl	8001f7c <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8002084:	793c      	ldrb	r4, [r7, #4]
 8002086:	797a      	ldrb	r2, [r7, #5]
 8002088:	79b9      	ldrb	r1, [r7, #6]
 800208a:	7978      	ldrb	r0, [r7, #5]
 800208c:	7e3b      	ldrb	r3, [r7, #24]
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	4623      	mov	r3, r4
 8002092:	f7ff ff73 	bl	8001f7c <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8002096:	793c      	ldrb	r4, [r7, #4]
 8002098:	79fa      	ldrb	r2, [r7, #7]
 800209a:	7939      	ldrb	r1, [r7, #4]
 800209c:	7978      	ldrb	r0, [r7, #5]
 800209e:	7e3b      	ldrb	r3, [r7, #24]
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	4623      	mov	r3, r4
 80020a4:	f7ff ff6a 	bl	8001f7c <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80020a8:	79bc      	ldrb	r4, [r7, #6]
 80020aa:	79fa      	ldrb	r2, [r7, #7]
 80020ac:	7939      	ldrb	r1, [r7, #4]
 80020ae:	79f8      	ldrb	r0, [r7, #7]
 80020b0:	7e3b      	ldrb	r3, [r7, #24]
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	4623      	mov	r3, r4
 80020b6:	f7ff ff61 	bl	8001f7c <ssd1306_Line>

    return;
 80020ba:	bf00      	nop
}
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd90      	pop	{r4, r7, pc}

080020c2 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80020cc:	2381      	movs	r3, #129	@ 0x81
 80020ce:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fd52 	bl	8001b7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fd4e 	bl	8001b7c <ssd1306_WriteCommand>
}
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80020f8:	23af      	movs	r3, #175	@ 0xaf
 80020fa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80020fc:	4b08      	ldr	r3, [pc, #32]	@ (8002120 <ssd1306_SetDisplayOn+0x38>)
 80020fe:	2201      	movs	r2, #1
 8002100:	715a      	strb	r2, [r3, #5]
 8002102:	e004      	b.n	800210e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002104:	23ae      	movs	r3, #174	@ 0xae
 8002106:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002108:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <ssd1306_SetDisplayOn+0x38>)
 800210a:	2200      	movs	r2, #0
 800210c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fd33 	bl	8001b7c <ssd1306_WriteCommand>
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000e90 	.word	0x20000e90

08002124 <ssd1306_FlipScreen>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_FlipScreen(uint8_t flip_horizontal, uint8_t flip_vertical) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	460a      	mov	r2, r1
 800212e:	71fb      	strb	r3, [r7, #7]
 8002130:	4613      	mov	r3, r2
 8002132:	71bb      	strb	r3, [r7, #6]
    if (flip_horizontal) {
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <ssd1306_FlipScreen+0x1e>
        ssd1306_WriteCommand(0xA1);
 800213a:	20a1      	movs	r0, #161	@ 0xa1
 800213c:	f7ff fd1e 	bl	8001b7c <ssd1306_WriteCommand>
 8002140:	e002      	b.n	8002148 <ssd1306_FlipScreen+0x24>
    } else {
        ssd1306_WriteCommand(0xA0);
 8002142:	20a0      	movs	r0, #160	@ 0xa0
 8002144:	f7ff fd1a 	bl	8001b7c <ssd1306_WriteCommand>
    }

    if (flip_vertical) {
 8002148:	79bb      	ldrb	r3, [r7, #6]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <ssd1306_FlipScreen+0x32>
        ssd1306_WriteCommand(0xC8);
 800214e:	20c8      	movs	r0, #200	@ 0xc8
 8002150:	f7ff fd14 	bl	8001b7c <ssd1306_WriteCommand>
    } else {
        ssd1306_WriteCommand(0xC0);
    }
}
 8002154:	e002      	b.n	800215c <ssd1306_FlipScreen+0x38>
        ssd1306_WriteCommand(0xC0);
 8002156:	20c0      	movs	r0, #192	@ 0xc0
 8002158:	f7ff fd10 	bl	8001b7c <ssd1306_WriteCommand>
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	4b10      	ldr	r3, [pc, #64]	@ (80021b0 <HAL_MspInit+0x4c>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	4a0f      	ldr	r2, [pc, #60]	@ (80021b0 <HAL_MspInit+0x4c>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002178:	6453      	str	r3, [r2, #68]	@ 0x44
 800217a:	4b0d      	ldr	r3, [pc, #52]	@ (80021b0 <HAL_MspInit+0x4c>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <HAL_MspInit+0x4c>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	4a08      	ldr	r2, [pc, #32]	@ (80021b0 <HAL_MspInit+0x4c>)
 8002190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002194:	6413      	str	r3, [r2, #64]	@ 0x40
 8002196:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <HAL_MspInit+0x4c>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800

080021b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	@ 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a17      	ldr	r2, [pc, #92]	@ (8002230 <HAL_ADC_MspInit+0x7c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d127      	bne.n	8002226 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	4b16      	ldr	r3, [pc, #88]	@ (8002234 <HAL_ADC_MspInit+0x80>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021de:	4a15      	ldr	r2, [pc, #84]	@ (8002234 <HAL_ADC_MspInit+0x80>)
 80021e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021e6:	4b13      	ldr	r3, [pc, #76]	@ (8002234 <HAL_ADC_MspInit+0x80>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <HAL_ADC_MspInit+0x80>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002234 <HAL_ADC_MspInit+0x80>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	6313      	str	r3, [r2, #48]	@ 0x30
 8002202:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <HAL_ADC_MspInit+0x80>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800220e:	2302      	movs	r3, #2
 8002210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002212:	2303      	movs	r3, #3
 8002214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	4619      	mov	r1, r3
 8002220:	4805      	ldr	r0, [pc, #20]	@ (8002238 <HAL_ADC_MspInit+0x84>)
 8002222:	f001 f9c3 	bl	80035ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002226:	bf00      	nop
 8002228:	3728      	adds	r7, #40	@ 0x28
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40012000 	.word	0x40012000
 8002234:	40023800 	.word	0x40023800
 8002238:	40020400 	.word	0x40020400

0800223c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	@ 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a19      	ldr	r2, [pc, #100]	@ (80022c0 <HAL_I2C_MspInit+0x84>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d12b      	bne.n	80022b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	4b18      	ldr	r3, [pc, #96]	@ (80022c4 <HAL_I2C_MspInit+0x88>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	4a17      	ldr	r2, [pc, #92]	@ (80022c4 <HAL_I2C_MspInit+0x88>)
 8002268:	f043 0302 	orr.w	r3, r3, #2
 800226c:	6313      	str	r3, [r2, #48]	@ 0x30
 800226e:	4b15      	ldr	r3, [pc, #84]	@ (80022c4 <HAL_I2C_MspInit+0x88>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800227a:	23c0      	movs	r3, #192	@ 0xc0
 800227c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800227e:	2312      	movs	r3, #18
 8002280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002282:	2301      	movs	r3, #1
 8002284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800228a:	2304      	movs	r3, #4
 800228c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	4619      	mov	r1, r3
 8002294:	480c      	ldr	r0, [pc, #48]	@ (80022c8 <HAL_I2C_MspInit+0x8c>)
 8002296:	f001 f989 	bl	80035ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	4b09      	ldr	r3, [pc, #36]	@ (80022c4 <HAL_I2C_MspInit+0x88>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	4a08      	ldr	r2, [pc, #32]	@ (80022c4 <HAL_I2C_MspInit+0x88>)
 80022a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022aa:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <HAL_I2C_MspInit+0x88>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022b6:	bf00      	nop
 80022b8:	3728      	adds	r7, #40	@ 0x28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40005400 	.word	0x40005400
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40020400 	.word	0x40020400

080022cc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	@ 0x28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022ec:	d13a      	bne.n	8002364 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	4b1e      	ldr	r3, [pc, #120]	@ (800236c <HAL_PCD_MspInit+0xa0>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	4a1d      	ldr	r2, [pc, #116]	@ (800236c <HAL_PCD_MspInit+0xa0>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fe:	4b1b      	ldr	r3, [pc, #108]	@ (800236c <HAL_PCD_MspInit+0xa0>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800230a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800230e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002310:	2302      	movs	r3, #2
 8002312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002318:	2303      	movs	r3, #3
 800231a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800231c:	230a      	movs	r3, #10
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	4619      	mov	r1, r3
 8002326:	4812      	ldr	r0, [pc, #72]	@ (8002370 <HAL_PCD_MspInit+0xa4>)
 8002328:	f001 f940 	bl	80035ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800232c:	4b0f      	ldr	r3, [pc, #60]	@ (800236c <HAL_PCD_MspInit+0xa0>)
 800232e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002330:	4a0e      	ldr	r2, [pc, #56]	@ (800236c <HAL_PCD_MspInit+0xa0>)
 8002332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002336:	6353      	str	r3, [r2, #52]	@ 0x34
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	4b0b      	ldr	r3, [pc, #44]	@ (800236c <HAL_PCD_MspInit+0xa0>)
 800233e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002340:	4a0a      	ldr	r2, [pc, #40]	@ (800236c <HAL_PCD_MspInit+0xa0>)
 8002342:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002346:	6453      	str	r3, [r2, #68]	@ 0x44
 8002348:	4b08      	ldr	r3, [pc, #32]	@ (800236c <HAL_PCD_MspInit+0xa0>)
 800234a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8002354:	2200      	movs	r2, #0
 8002356:	2100      	movs	r1, #0
 8002358:	2043      	movs	r0, #67	@ 0x43
 800235a:	f000 fee2 	bl	8003122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800235e:	2043      	movs	r0, #67	@ 0x43
 8002360:	f000 fefb 	bl	800315a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002364:	bf00      	nop
 8002366:	3728      	adds	r7, #40	@ 0x28
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40023800 	.word	0x40023800
 8002370:	40020000 	.word	0x40020000

08002374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8002378:	bf00      	nop
 800237a:	e7fd      	b.n	8002378 <NMI_Handler+0x4>

0800237c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm("BKPT #0\n");
 8002380:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002382:	bf00      	nop
 8002384:	e7fd      	b.n	8002382 <HardFault_Handler+0x6>

08002386 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800238a:	bf00      	nop
 800238c:	e7fd      	b.n	800238a <MemManage_Handler+0x4>

0800238e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002392:	bf00      	nop
 8002394:	e7fd      	b.n	8002392 <BusFault_Handler+0x4>

08002396 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800239a:	bf00      	nop
 800239c:	e7fd      	b.n	800239a <UsageFault_Handler+0x4>

0800239e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023cc:	f000 f998 	bl	8002700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  system_ticks++;
 80023d0:	4b03      	ldr	r3, [pc, #12]	@ (80023e0 <SysTick_Handler+0x18>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	4a02      	ldr	r2, [pc, #8]	@ (80023e0 <SysTick_Handler+0x18>)
 80023d8:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000e98 	.word	0x20000e98

080023e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(0);
 80023e8:	2000      	movs	r0, #0
 80023ea:	f007 feff 	bl	800a1ec <dcd_int_handler>
	return;
 80023ee:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023fc:	4a14      	ldr	r2, [pc, #80]	@ (8002450 <_sbrk+0x5c>)
 80023fe:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <_sbrk+0x60>)
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002408:	4b13      	ldr	r3, [pc, #76]	@ (8002458 <_sbrk+0x64>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002410:	4b11      	ldr	r3, [pc, #68]	@ (8002458 <_sbrk+0x64>)
 8002412:	4a12      	ldr	r2, [pc, #72]	@ (800245c <_sbrk+0x68>)
 8002414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002416:	4b10      	ldr	r3, [pc, #64]	@ (8002458 <_sbrk+0x64>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	429a      	cmp	r2, r3
 8002422:	d207      	bcs.n	8002434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002424:	f008 fe7a 	bl	800b11c <__errno>
 8002428:	4603      	mov	r3, r0
 800242a:	220c      	movs	r2, #12
 800242c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800242e:	f04f 33ff 	mov.w	r3, #4294967295
 8002432:	e009      	b.n	8002448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002434:	4b08      	ldr	r3, [pc, #32]	@ (8002458 <_sbrk+0x64>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800243a:	4b07      	ldr	r3, [pc, #28]	@ (8002458 <_sbrk+0x64>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	4a05      	ldr	r2, [pc, #20]	@ (8002458 <_sbrk+0x64>)
 8002444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002446:	68fb      	ldr	r3, [r7, #12]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20020000 	.word	0x20020000
 8002454:	00000400 	.word	0x00000400
 8002458:	20000e9c 	.word	0x20000e9c
 800245c:	20001398 	.word	0x20001398

08002460 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002464:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <SystemInit+0x20>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246a:	4a05      	ldr	r2, [pc, #20]	@ (8002480 <SystemInit+0x20>)
 800246c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002470:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <tud_descriptor_device_cb>:
        .bNumConfigurations = 0x01,
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const *tud_descriptor_device_cb(void) {
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return (uint8_t const *)&desc_device;
 8002488:	4b02      	ldr	r3, [pc, #8]	@ (8002494 <tud_descriptor_device_cb+0x10>)
}
 800248a:	4618      	mov	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	0800c0f8 	.word	0x0800c0f8

08002498 <tud_hid_descriptor_report_cb>:
};

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const *tud_hid_descriptor_report_cb(uint8_t instance) {
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
  if (instance == ITF_NUM_KEYBOARD) {
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <tud_hid_descriptor_report_cb+0x14>
    return desc_hid_keyboard_report;
 80024a8:	4b04      	ldr	r3, [pc, #16]	@ (80024bc <tud_hid_descriptor_report_cb+0x24>)
 80024aa:	e000      	b.n	80024ae <tud_hid_descriptor_report_cb+0x16>
  }

  return NULL;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	0800c10c 	.word	0x0800c10c

080024c0 <tud_descriptor_configuration_cb>:
};

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const *tud_descriptor_configuration_cb(uint8_t index) {
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
  (void)index; // for multiple configurations
  return desc_configuration;
 80024ca:	4b03      	ldr	r3, [pc, #12]	@ (80024d8 <tud_descriptor_configuration_cb+0x18>)
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	0800c168 	.word	0x0800c168

080024dc <tud_descriptor_bos_cb>:
        TUD_BOS_WEBUSB_DESCRIPTOR(VENDOR_REQUEST_WEBUSB, 1),

        // Microsoft OS 2.0 descriptor
        TUD_BOS_MS_OS_20_DESCRIPTOR(MS_OS_20_DESC_LEN, VENDOR_REQUEST_MICROSOFT)};

uint8_t const *tud_descriptor_bos_cb(void) {
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return desc_bos;
 80024e0:	4b02      	ldr	r3, [pc, #8]	@ (80024ec <tud_descriptor_bos_cb+0x10>)
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	0800c1a4 	.word	0x0800c1a4

080024f0 <tud_descriptor_string_cb>:

static uint16_t _desc_str[32 + 1];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	460a      	mov	r2, r1
 80024fa:	71fb      	strb	r3, [r7, #7]
 80024fc:	4613      	mov	r3, r2
 80024fe:	80bb      	strh	r3, [r7, #4]
  (void)langid;
  size_t chr_count;

  if (index == 0) {
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d108      	bne.n	8002518 <tud_descriptor_string_cb+0x28>
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8002506:	4b3e      	ldr	r3, [pc, #248]	@ (8002600 <tud_descriptor_string_cb+0x110>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	b29a      	uxth	r2, r3
 800250e:	4b3d      	ldr	r3, [pc, #244]	@ (8002604 <tud_descriptor_string_cb+0x114>)
 8002510:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 8002512:	2301      	movs	r3, #1
 8002514:	61fb      	str	r3, [r7, #28]
 8002516:	e026      	b.n	8002566 <tud_descriptor_string_cb+0x76>
  } else {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if (!(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])))
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	2b05      	cmp	r3, #5
 800251c:	d901      	bls.n	8002522 <tud_descriptor_string_cb+0x32>
      return NULL;
 800251e:	2300      	movs	r3, #0
 8002520:	e06a      	b.n	80025f8 <tud_descriptor_string_cb+0x108>

    const char *str = string_desc_arr[index];
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	4a36      	ldr	r2, [pc, #216]	@ (8002600 <tud_descriptor_string_cb+0x110>)
 8002526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252a:	613b      	str	r3, [r7, #16]

    // Cap at max char
    chr_count = strlen(str);
 800252c:	6938      	ldr	r0, [r7, #16]
 800252e:	f7fd fe57 	bl	80001e0 <strlen>
 8002532:	61f8      	str	r0, [r7, #28]
    if (chr_count > 31)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2b1f      	cmp	r3, #31
 8002538:	d901      	bls.n	800253e <tud_descriptor_string_cb+0x4e>
      chr_count = 31;
 800253a:	231f      	movs	r3, #31
 800253c:	61fb      	str	r3, [r7, #28]

    // Convert ASCII string into UTF-16
    for (uint8_t i = 0; i < chr_count; i++) {
 800253e:	2300      	movs	r3, #0
 8002540:	76fb      	strb	r3, [r7, #27]
 8002542:	e00c      	b.n	800255e <tud_descriptor_string_cb+0x6e>
      _desc_str[1 + i] = str[i];
 8002544:	7efb      	ldrb	r3, [r7, #27]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4413      	add	r3, r2
 800254a:	781a      	ldrb	r2, [r3, #0]
 800254c:	7efb      	ldrb	r3, [r7, #27]
 800254e:	3301      	adds	r3, #1
 8002550:	4611      	mov	r1, r2
 8002552:	4a2c      	ldr	r2, [pc, #176]	@ (8002604 <tud_descriptor_string_cb+0x114>)
 8002554:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < chr_count; i++) {
 8002558:	7efb      	ldrb	r3, [r7, #27]
 800255a:	3301      	adds	r3, #1
 800255c:	76fb      	strb	r3, [r7, #27]
 800255e:	7efb      	ldrb	r3, [r7, #27]
 8002560:	69fa      	ldr	r2, [r7, #28]
 8002562:	429a      	cmp	r2, r3
 8002564:	d8ee      	bhi.n	8002544 <tud_descriptor_string_cb+0x54>
    }
  }

  switch (index) {
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <tud_descriptor_string_cb+0x82>
 800256c:	2b03      	cmp	r3, #3
 800256e:	d009      	beq.n	8002584 <tud_descriptor_string_cb+0x94>
 8002570:	e00b      	b.n	800258a <tud_descriptor_string_cb+0x9a>
  case STRID_LANGID:
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8002572:	4b23      	ldr	r3, [pc, #140]	@ (8002600 <tud_descriptor_string_cb+0x110>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	b29a      	uxth	r2, r3
 800257a:	4b22      	ldr	r3, [pc, #136]	@ (8002604 <tud_descriptor_string_cb+0x114>)
 800257c:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 800257e:	2301      	movs	r3, #1
 8002580:	61fb      	str	r3, [r7, #28]
    break;
 8002582:	e02d      	b.n	80025e0 <tud_descriptor_string_cb+0xf0>

  case STRID_SERIAL:
    chr_count = 10;
 8002584:	230a      	movs	r3, #10
 8002586:	61fb      	str	r3, [r7, #28]
    break;
 8002588:	e02a      	b.n	80025e0 <tud_descriptor_string_cb+0xf0>

  default:
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if (!(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])))
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	2b05      	cmp	r3, #5
 800258e:	d901      	bls.n	8002594 <tud_descriptor_string_cb+0xa4>
      return NULL;
 8002590:	2300      	movs	r3, #0
 8002592:	e031      	b.n	80025f8 <tud_descriptor_string_cb+0x108>

    const char *str = string_desc_arr[index];
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	4a1a      	ldr	r2, [pc, #104]	@ (8002600 <tud_descriptor_string_cb+0x110>)
 8002598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259c:	60fb      	str	r3, [r7, #12]

    // Cap at max char
    chr_count = strlen(str);
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f7fd fe1e 	bl	80001e0 <strlen>
 80025a4:	61f8      	str	r0, [r7, #28]
    size_t const max_count = sizeof(_desc_str) / sizeof(_desc_str[0]) - 1; // -1 for string type
 80025a6:	2320      	movs	r3, #32
 80025a8:	60bb      	str	r3, [r7, #8]
    if (chr_count > max_count)
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d901      	bls.n	80025b6 <tud_descriptor_string_cb+0xc6>
      chr_count = max_count;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	61fb      	str	r3, [r7, #28]

    // Convert ASCII string into UTF-16
    for (size_t i = 0; i < chr_count; i++) {
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	e00c      	b.n	80025d6 <tud_descriptor_string_cb+0xe6>
      _desc_str[1 + i] = str[i];
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	4413      	add	r3, r2
 80025c2:	781a      	ldrb	r2, [r3, #0]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	3301      	adds	r3, #1
 80025c8:	4611      	mov	r1, r2
 80025ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002604 <tud_descriptor_string_cb+0x114>)
 80025cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (size_t i = 0; i < chr_count; i++) {
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3301      	adds	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d3ee      	bcc.n	80025bc <tud_descriptor_string_cb+0xcc>
    }
    break;
 80025de:	bf00      	nop
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t)((TUSB_DESC_STRING << 8) | (2 * chr_count + 2));
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3301      	adds	r3, #1
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	4b04      	ldr	r3, [pc, #16]	@ (8002604 <tud_descriptor_string_cb+0x114>)
 80025f4:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 80025f6:	4b03      	ldr	r3, [pc, #12]	@ (8002604 <tud_descriptor_string_cb+0x114>)
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3720      	adds	r7, #32
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	2000004c 	.word	0x2000004c
 8002604:	20000ea0 	.word	0x20000ea0

08002608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002608:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002640 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800260c:	f7ff ff28 	bl	8002460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002610:	480c      	ldr	r0, [pc, #48]	@ (8002644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002612:	490d      	ldr	r1, [pc, #52]	@ (8002648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002614:	4a0d      	ldr	r2, [pc, #52]	@ (800264c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002618:	e002      	b.n	8002620 <LoopCopyDataInit>

0800261a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800261a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800261c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261e:	3304      	adds	r3, #4

08002620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002624:	d3f9      	bcc.n	800261a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002626:	4a0a      	ldr	r2, [pc, #40]	@ (8002650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002628:	4c0a      	ldr	r4, [pc, #40]	@ (8002654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800262a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800262c:	e001      	b.n	8002632 <LoopFillZerobss>

0800262e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002630:	3204      	adds	r2, #4

08002632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002634:	d3fb      	bcc.n	800262e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002636:	f008 fd77 	bl	800b128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800263a:	f7fe ff0b 	bl	8001454 <main>
  bx  lr    
 800263e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002648:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 800264c:	0800c33c 	.word	0x0800c33c
  ldr r2, =_sbss
 8002650:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8002654:	20001398 	.word	0x20001398

08002658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002658:	e7fe      	b.n	8002658 <ADC_IRQHandler>
	...

0800265c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002660:	4b0e      	ldr	r3, [pc, #56]	@ (800269c <HAL_Init+0x40>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0d      	ldr	r2, [pc, #52]	@ (800269c <HAL_Init+0x40>)
 8002666:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800266a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800266c:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <HAL_Init+0x40>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a0a      	ldr	r2, [pc, #40]	@ (800269c <HAL_Init+0x40>)
 8002672:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002676:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002678:	4b08      	ldr	r3, [pc, #32]	@ (800269c <HAL_Init+0x40>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a07      	ldr	r2, [pc, #28]	@ (800269c <HAL_Init+0x40>)
 800267e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002682:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002684:	2003      	movs	r0, #3
 8002686:	f000 fd41 	bl	800310c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800268a:	200f      	movs	r0, #15
 800268c:	f000 f808 	bl	80026a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002690:	f7ff fd68 	bl	8002164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023c00 	.word	0x40023c00

080026a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026a8:	4b12      	ldr	r3, [pc, #72]	@ (80026f4 <HAL_InitTick+0x54>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b12      	ldr	r3, [pc, #72]	@ (80026f8 <HAL_InitTick+0x58>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	4619      	mov	r1, r3
 80026b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fd59 	bl	8003176 <HAL_SYSTICK_Config>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e00e      	b.n	80026ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b0f      	cmp	r3, #15
 80026d2:	d80a      	bhi.n	80026ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026d4:	2200      	movs	r2, #0
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	f04f 30ff 	mov.w	r0, #4294967295
 80026dc:	f000 fd21 	bl	8003122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026e0:	4a06      	ldr	r2, [pc, #24]	@ (80026fc <HAL_InitTick+0x5c>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	e000      	b.n	80026ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000048 	.word	0x20000048
 80026f8:	20000068 	.word	0x20000068
 80026fc:	20000064 	.word	0x20000064

08002700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002704:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <HAL_IncTick+0x20>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <HAL_IncTick+0x24>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4413      	add	r3, r2
 8002710:	4a04      	ldr	r2, [pc, #16]	@ (8002724 <HAL_IncTick+0x24>)
 8002712:	6013      	str	r3, [r2, #0]
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000068 	.word	0x20000068
 8002724:	20000ee4 	.word	0x20000ee4

08002728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return uwTick;
 800272c:	4b03      	ldr	r3, [pc, #12]	@ (800273c <HAL_GetTick+0x14>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000ee4 	.word	0x20000ee4

08002740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002748:	f7ff ffee 	bl	8002728 <HAL_GetTick>
 800274c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002758:	d005      	beq.n	8002766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800275a:	4b0a      	ldr	r3, [pc, #40]	@ (8002784 <HAL_Delay+0x44>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4413      	add	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002766:	bf00      	nop
 8002768:	f7ff ffde 	bl	8002728 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	429a      	cmp	r2, r3
 8002776:	d8f7      	bhi.n	8002768 <HAL_Delay+0x28>
  {
  }
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000068 	.word	0x20000068

08002788 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e033      	b.n	8002806 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff fd04 	bl	80021b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d118      	bne.n	80027f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80027ce:	f023 0302 	bic.w	r3, r3, #2
 80027d2:	f043 0202 	orr.w	r2, r3, #2
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 faca 	bl	8002d74 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	f023 0303 	bic.w	r3, r3, #3
 80027ee:	f043 0201 	orr.w	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80027f6:	e001      	b.n	80027fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002804:	7bfb      	ldrb	r3, [r7, #15]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_ADC_Start+0x1a>
 8002826:	2302      	movs	r3, #2
 8002828:	e097      	b.n	800295a <HAL_ADC_Start+0x14a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	d018      	beq.n	8002872 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002850:	4b45      	ldr	r3, [pc, #276]	@ (8002968 <HAL_ADC_Start+0x158>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a45      	ldr	r2, [pc, #276]	@ (800296c <HAL_ADC_Start+0x15c>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	0c9a      	lsrs	r2, r3, #18
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002864:	e002      	b.n	800286c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	3b01      	subs	r3, #1
 800286a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f9      	bne.n	8002866 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b01      	cmp	r3, #1
 800287e:	d15f      	bne.n	8002940 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d007      	beq.n	80028b2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80028aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028be:	d106      	bne.n	80028ce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c4:	f023 0206 	bic.w	r2, r3, #6
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	645a      	str	r2, [r3, #68]	@ 0x44
 80028cc:	e002      	b.n	80028d4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028dc:	4b24      	ldr	r3, [pc, #144]	@ (8002970 <HAL_ADC_Start+0x160>)
 80028de:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80028e8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 031f 	and.w	r3, r3, #31
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10f      	bne.n	8002916 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d129      	bne.n	8002958 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	e020      	b.n	8002958 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a16      	ldr	r2, [pc, #88]	@ (8002974 <HAL_ADC_Start+0x164>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d11b      	bne.n	8002958 <HAL_ADC_Start+0x148>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d114      	bne.n	8002958 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	e00b      	b.n	8002958 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002944:	f043 0210 	orr.w	r2, r3, #16
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002950:	f043 0201 	orr.w	r2, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000048 	.word	0x20000048
 800296c:	431bde83 	.word	0x431bde83
 8002970:	40012300 	.word	0x40012300
 8002974:	40012000 	.word	0x40012000

08002978 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_ADC_Stop+0x16>
 800298a:	2302      	movs	r3, #2
 800298c:	e021      	b.n	80029d2 <HAL_ADC_Stop+0x5a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0201 	bic.w	r2, r2, #1
 80029a4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d109      	bne.n	80029c8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029bc:	f023 0301 	bic.w	r3, r3, #1
 80029c0:	f043 0201 	orr.w	r2, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029fa:	d113      	bne.n	8002a24 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a0a:	d10b      	bne.n	8002a24 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a10:	f043 0220 	orr.w	r2, r3, #32
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e063      	b.n	8002aec <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a24:	f7ff fe80 	bl	8002728 <HAL_GetTick>
 8002a28:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a2a:	e021      	b.n	8002a70 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a32:	d01d      	beq.n	8002a70 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d007      	beq.n	8002a4a <HAL_ADC_PollForConversion+0x6c>
 8002a3a:	f7ff fe75 	bl	8002728 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d212      	bcs.n	8002a70 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d00b      	beq.n	8002a70 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	f043 0204 	orr.w	r2, r3, #4
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e03d      	b.n	8002aec <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d1d6      	bne.n	8002a2c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f06f 0212 	mvn.w	r2, #18
 8002a86:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d123      	bne.n	8002aea <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d11f      	bne.n	8002aea <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d006      	beq.n	8002ac6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d111      	bne.n	8002aea <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d105      	bne.n	8002aea <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	f043 0201 	orr.w	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x1c>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e113      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x244>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b09      	cmp	r3, #9
 8002b3a:	d925      	bls.n	8002b88 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68d9      	ldr	r1, [r3, #12]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	3b1e      	subs	r3, #30
 8002b52:	2207      	movs	r2, #7
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43da      	mvns	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	400a      	ands	r2, r1
 8002b60:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68d9      	ldr	r1, [r3, #12]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	4618      	mov	r0, r3
 8002b74:	4603      	mov	r3, r0
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4403      	add	r3, r0
 8002b7a:	3b1e      	subs	r3, #30
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	e022      	b.n	8002bce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6919      	ldr	r1, [r3, #16]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	461a      	mov	r2, r3
 8002b96:	4613      	mov	r3, r2
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4413      	add	r3, r2
 8002b9c:	2207      	movs	r2, #7
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	400a      	ands	r2, r1
 8002baa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6919      	ldr	r1, [r3, #16]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	4403      	add	r3, r0
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b06      	cmp	r3, #6
 8002bd4:	d824      	bhi.n	8002c20 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	3b05      	subs	r3, #5
 8002be8:	221f      	movs	r2, #31
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	400a      	ands	r2, r1
 8002bf6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	4618      	mov	r0, r3
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	3b05      	subs	r3, #5
 8002c12:	fa00 f203 	lsl.w	r2, r0, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c1e:	e04c      	b.n	8002cba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b0c      	cmp	r3, #12
 8002c26:	d824      	bhi.n	8002c72 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	3b23      	subs	r3, #35	@ 0x23
 8002c3a:	221f      	movs	r2, #31
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43da      	mvns	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	400a      	ands	r2, r1
 8002c48:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	4618      	mov	r0, r3
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	3b23      	subs	r3, #35	@ 0x23
 8002c64:	fa00 f203 	lsl.w	r2, r0, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c70:	e023      	b.n	8002cba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	3b41      	subs	r3, #65	@ 0x41
 8002c84:	221f      	movs	r2, #31
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43da      	mvns	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	400a      	ands	r2, r1
 8002c92:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	3b41      	subs	r3, #65	@ 0x41
 8002cae:	fa00 f203 	lsl.w	r2, r0, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cba:	4b29      	ldr	r3, [pc, #164]	@ (8002d60 <HAL_ADC_ConfigChannel+0x250>)
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a28      	ldr	r2, [pc, #160]	@ (8002d64 <HAL_ADC_ConfigChannel+0x254>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d10f      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x1d8>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b12      	cmp	r3, #18
 8002cce:	d10b      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a1d      	ldr	r2, [pc, #116]	@ (8002d64 <HAL_ADC_ConfigChannel+0x254>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d12b      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x23a>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d68 <HAL_ADC_ConfigChannel+0x258>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d003      	beq.n	8002d04 <HAL_ADC_ConfigChannel+0x1f4>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b11      	cmp	r3, #17
 8002d02:	d122      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a11      	ldr	r2, [pc, #68]	@ (8002d68 <HAL_ADC_ConfigChannel+0x258>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d111      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d26:	4b11      	ldr	r3, [pc, #68]	@ (8002d6c <HAL_ADC_ConfigChannel+0x25c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a11      	ldr	r2, [pc, #68]	@ (8002d70 <HAL_ADC_ConfigChannel+0x260>)
 8002d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d30:	0c9a      	lsrs	r2, r3, #18
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d3c:	e002      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f9      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	40012300 	.word	0x40012300
 8002d64:	40012000 	.word	0x40012000
 8002d68:	10000012 	.word	0x10000012
 8002d6c:	20000048 	.word	0x20000048
 8002d70:	431bde83 	.word	0x431bde83

08002d74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d7c:	4b79      	ldr	r3, [pc, #484]	@ (8002f64 <ADC_Init+0x1f0>)
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	431a      	orrs	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002da8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6859      	ldr	r1, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	021a      	lsls	r2, r3, #8
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002dcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6859      	ldr	r1, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6899      	ldr	r1, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e06:	4a58      	ldr	r2, [pc, #352]	@ (8002f68 <ADC_Init+0x1f4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d022      	beq.n	8002e52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6899      	ldr	r1, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6899      	ldr	r1, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	e00f      	b.n	8002e72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e70:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0202 	bic.w	r2, r2, #2
 8002e80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6899      	ldr	r1, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	7e1b      	ldrb	r3, [r3, #24]
 8002e8c:	005a      	lsls	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01b      	beq.n	8002ed8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002ebe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6859      	ldr	r1, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	035a      	lsls	r2, r3, #13
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	e007      	b.n	8002ee8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ee6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	051a      	lsls	r2, r3, #20
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6899      	ldr	r1, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f2a:	025a      	lsls	r2, r3, #9
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6899      	ldr	r1, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	029a      	lsls	r2, r3, #10
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	609a      	str	r2, [r3, #8]
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	40012300 	.word	0x40012300
 8002f68:	0f000001 	.word	0x0f000001

08002f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f9e:	4a04      	ldr	r2, [pc, #16]	@ (8002fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	60d3      	str	r3, [r2, #12]
}
 8002fa4:	bf00      	nop
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fb8:	4b04      	ldr	r3, [pc, #16]	@ (8002fcc <__NVIC_GetPriorityGrouping+0x18>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	f003 0307 	and.w	r3, r3, #7
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	db0b      	blt.n	8002ffa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	f003 021f 	and.w	r2, r3, #31
 8002fe8:	4907      	ldr	r1, [pc, #28]	@ (8003008 <__NVIC_EnableIRQ+0x38>)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	e000e100 	.word	0xe000e100

0800300c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	6039      	str	r1, [r7, #0]
 8003016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301c:	2b00      	cmp	r3, #0
 800301e:	db0a      	blt.n	8003036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	490c      	ldr	r1, [pc, #48]	@ (8003058 <__NVIC_SetPriority+0x4c>)
 8003026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302a:	0112      	lsls	r2, r2, #4
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	440b      	add	r3, r1
 8003030:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003034:	e00a      	b.n	800304c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	b2da      	uxtb	r2, r3
 800303a:	4908      	ldr	r1, [pc, #32]	@ (800305c <__NVIC_SetPriority+0x50>)
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	3b04      	subs	r3, #4
 8003044:	0112      	lsls	r2, r2, #4
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	440b      	add	r3, r1
 800304a:	761a      	strb	r2, [r3, #24]
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	e000e100 	.word	0xe000e100
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003060:	b480      	push	{r7}
 8003062:	b089      	sub	sp, #36	@ 0x24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f1c3 0307 	rsb	r3, r3, #7
 800307a:	2b04      	cmp	r3, #4
 800307c:	bf28      	it	cs
 800307e:	2304      	movcs	r3, #4
 8003080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3304      	adds	r3, #4
 8003086:	2b06      	cmp	r3, #6
 8003088:	d902      	bls.n	8003090 <NVIC_EncodePriority+0x30>
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3b03      	subs	r3, #3
 800308e:	e000      	b.n	8003092 <NVIC_EncodePriority+0x32>
 8003090:	2300      	movs	r3, #0
 8003092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003094:	f04f 32ff 	mov.w	r2, #4294967295
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43da      	mvns	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	401a      	ands	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030a8:	f04f 31ff 	mov.w	r1, #4294967295
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	fa01 f303 	lsl.w	r3, r1, r3
 80030b2:	43d9      	mvns	r1, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b8:	4313      	orrs	r3, r2
         );
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3724      	adds	r7, #36	@ 0x24
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030d8:	d301      	bcc.n	80030de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030da:	2301      	movs	r3, #1
 80030dc:	e00f      	b.n	80030fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030de:	4a0a      	ldr	r2, [pc, #40]	@ (8003108 <SysTick_Config+0x40>)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030e6:	210f      	movs	r1, #15
 80030e8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ec:	f7ff ff8e 	bl	800300c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030f0:	4b05      	ldr	r3, [pc, #20]	@ (8003108 <SysTick_Config+0x40>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030f6:	4b04      	ldr	r3, [pc, #16]	@ (8003108 <SysTick_Config+0x40>)
 80030f8:	2207      	movs	r2, #7
 80030fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	e000e010 	.word	0xe000e010

0800310c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff ff29 	bl	8002f6c <__NVIC_SetPriorityGrouping>
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003122:	b580      	push	{r7, lr}
 8003124:	b086      	sub	sp, #24
 8003126:	af00      	add	r7, sp, #0
 8003128:	4603      	mov	r3, r0
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003134:	f7ff ff3e 	bl	8002fb4 <__NVIC_GetPriorityGrouping>
 8003138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	6978      	ldr	r0, [r7, #20]
 8003140:	f7ff ff8e 	bl	8003060 <NVIC_EncodePriority>
 8003144:	4602      	mov	r2, r0
 8003146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff ff5d 	bl	800300c <__NVIC_SetPriority>
}
 8003152:	bf00      	nop
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	4603      	mov	r3, r0
 8003162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ff31 	bl	8002fd0 <__NVIC_EnableIRQ>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff ffa2 	bl	80030c8 <SysTick_Config>
 8003184:	4603      	mov	r3, r0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80031a2:	4b23      	ldr	r3, [pc, #140]	@ (8003230 <HAL_FLASH_Program+0xa0>)
 80031a4:	7e1b      	ldrb	r3, [r3, #24]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_FLASH_Program+0x1e>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e03b      	b.n	8003226 <HAL_FLASH_Program+0x96>
 80031ae:	4b20      	ldr	r3, [pc, #128]	@ (8003230 <HAL_FLASH_Program+0xa0>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031b4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80031b8:	f000 f870 	bl	800329c <FLASH_WaitForLastOperation>
 80031bc:	4603      	mov	r3, r0
 80031be:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d12b      	bne.n	800321e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d105      	bne.n	80031d8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80031cc:	783b      	ldrb	r3, [r7, #0]
 80031ce:	4619      	mov	r1, r3
 80031d0:	68b8      	ldr	r0, [r7, #8]
 80031d2:	f000 f91b 	bl	800340c <FLASH_Program_Byte>
 80031d6:	e016      	b.n	8003206 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d105      	bne.n	80031ea <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80031de:	883b      	ldrh	r3, [r7, #0]
 80031e0:	4619      	mov	r1, r3
 80031e2:	68b8      	ldr	r0, [r7, #8]
 80031e4:	f000 f8ee 	bl	80033c4 <FLASH_Program_HalfWord>
 80031e8:	e00d      	b.n	8003206 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d105      	bne.n	80031fc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	4619      	mov	r1, r3
 80031f4:	68b8      	ldr	r0, [r7, #8]
 80031f6:	f000 f8c3 	bl	8003380 <FLASH_Program_Word>
 80031fa:	e004      	b.n	8003206 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80031fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003200:	68b8      	ldr	r0, [r7, #8]
 8003202:	f000 f88b 	bl	800331c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003206:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800320a:	f000 f847 	bl	800329c <FLASH_WaitForLastOperation>
 800320e:	4603      	mov	r3, r0
 8003210:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003212:	4b08      	ldr	r3, [pc, #32]	@ (8003234 <HAL_FLASH_Program+0xa4>)
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	4a07      	ldr	r2, [pc, #28]	@ (8003234 <HAL_FLASH_Program+0xa4>)
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800321e:	4b04      	ldr	r3, [pc, #16]	@ (8003230 <HAL_FLASH_Program+0xa0>)
 8003220:	2200      	movs	r2, #0
 8003222:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003224:	7dfb      	ldrb	r3, [r7, #23]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20000ee8 	.word	0x20000ee8
 8003234:	40023c00 	.word	0x40023c00

08003238 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003242:	4b0b      	ldr	r3, [pc, #44]	@ (8003270 <HAL_FLASH_Unlock+0x38>)
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	da0b      	bge.n	8003262 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800324a:	4b09      	ldr	r3, [pc, #36]	@ (8003270 <HAL_FLASH_Unlock+0x38>)
 800324c:	4a09      	ldr	r2, [pc, #36]	@ (8003274 <HAL_FLASH_Unlock+0x3c>)
 800324e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003250:	4b07      	ldr	r3, [pc, #28]	@ (8003270 <HAL_FLASH_Unlock+0x38>)
 8003252:	4a09      	ldr	r2, [pc, #36]	@ (8003278 <HAL_FLASH_Unlock+0x40>)
 8003254:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003256:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <HAL_FLASH_Unlock+0x38>)
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	da01      	bge.n	8003262 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003262:	79fb      	ldrb	r3, [r7, #7]
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	40023c00 	.word	0x40023c00
 8003274:	45670123 	.word	0x45670123
 8003278:	cdef89ab 	.word	0xcdef89ab

0800327c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003280:	4b05      	ldr	r3, [pc, #20]	@ (8003298 <HAL_FLASH_Lock+0x1c>)
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	4a04      	ldr	r2, [pc, #16]	@ (8003298 <HAL_FLASH_Lock+0x1c>)
 8003286:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800328a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	40023c00 	.word	0x40023c00

0800329c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80032a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003314 <FLASH_WaitForLastOperation+0x78>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80032ae:	f7ff fa3b 	bl	8002728 <HAL_GetTick>
 80032b2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80032b4:	e010      	b.n	80032d8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d00c      	beq.n	80032d8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d007      	beq.n	80032d4 <FLASH_WaitForLastOperation+0x38>
 80032c4:	f7ff fa30 	bl	8002728 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d201      	bcs.n	80032d8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e019      	b.n	800330c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80032d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003318 <FLASH_WaitForLastOperation+0x7c>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1e8      	bne.n	80032b6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80032e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003318 <FLASH_WaitForLastOperation+0x7c>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80032f0:	4b09      	ldr	r3, [pc, #36]	@ (8003318 <FLASH_WaitForLastOperation+0x7c>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80032f6:	4b08      	ldr	r3, [pc, #32]	@ (8003318 <FLASH_WaitForLastOperation+0x7c>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003302:	f000 f8a5 	bl	8003450 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
  
}  
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	20000ee8 	.word	0x20000ee8
 8003318:	40023c00 	.word	0x40023c00

0800331c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003328:	4b14      	ldr	r3, [pc, #80]	@ (800337c <FLASH_Program_DoubleWord+0x60>)
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	4a13      	ldr	r2, [pc, #76]	@ (800337c <FLASH_Program_DoubleWord+0x60>)
 800332e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003332:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003334:	4b11      	ldr	r3, [pc, #68]	@ (800337c <FLASH_Program_DoubleWord+0x60>)
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	4a10      	ldr	r2, [pc, #64]	@ (800337c <FLASH_Program_DoubleWord+0x60>)
 800333a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800333e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003340:	4b0e      	ldr	r3, [pc, #56]	@ (800337c <FLASH_Program_DoubleWord+0x60>)
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	4a0d      	ldr	r2, [pc, #52]	@ (800337c <FLASH_Program_DoubleWord+0x60>)
 8003346:	f043 0301 	orr.w	r3, r3, #1
 800334a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003352:	f3bf 8f6f 	isb	sy
}
 8003356:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	000a      	movs	r2, r1
 8003366:	2300      	movs	r3, #0
 8003368:	68f9      	ldr	r1, [r7, #12]
 800336a:	3104      	adds	r1, #4
 800336c:	4613      	mov	r3, r2
 800336e:	600b      	str	r3, [r1, #0]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	40023c00 	.word	0x40023c00

08003380 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800338a:	4b0d      	ldr	r3, [pc, #52]	@ (80033c0 <FLASH_Program_Word+0x40>)
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	4a0c      	ldr	r2, [pc, #48]	@ (80033c0 <FLASH_Program_Word+0x40>)
 8003390:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003394:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003396:	4b0a      	ldr	r3, [pc, #40]	@ (80033c0 <FLASH_Program_Word+0x40>)
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	4a09      	ldr	r2, [pc, #36]	@ (80033c0 <FLASH_Program_Word+0x40>)
 800339c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80033a2:	4b07      	ldr	r3, [pc, #28]	@ (80033c0 <FLASH_Program_Word+0x40>)
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	4a06      	ldr	r2, [pc, #24]	@ (80033c0 <FLASH_Program_Word+0x40>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	601a      	str	r2, [r3, #0]
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	40023c00 	.word	0x40023c00

080033c4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80033d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003408 <FLASH_Program_HalfWord+0x44>)
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	4a0c      	ldr	r2, [pc, #48]	@ (8003408 <FLASH_Program_HalfWord+0x44>)
 80033d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80033dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003408 <FLASH_Program_HalfWord+0x44>)
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	4a09      	ldr	r2, [pc, #36]	@ (8003408 <FLASH_Program_HalfWord+0x44>)
 80033e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80033e8:	4b07      	ldr	r3, [pc, #28]	@ (8003408 <FLASH_Program_HalfWord+0x44>)
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	4a06      	ldr	r2, [pc, #24]	@ (8003408 <FLASH_Program_HalfWord+0x44>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	887a      	ldrh	r2, [r7, #2]
 80033f8:	801a      	strh	r2, [r3, #0]
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40023c00 	.word	0x40023c00

0800340c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003418:	4b0c      	ldr	r3, [pc, #48]	@ (800344c <FLASH_Program_Byte+0x40>)
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	4a0b      	ldr	r2, [pc, #44]	@ (800344c <FLASH_Program_Byte+0x40>)
 800341e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003422:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003424:	4b09      	ldr	r3, [pc, #36]	@ (800344c <FLASH_Program_Byte+0x40>)
 8003426:	4a09      	ldr	r2, [pc, #36]	@ (800344c <FLASH_Program_Byte+0x40>)
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800342c:	4b07      	ldr	r3, [pc, #28]	@ (800344c <FLASH_Program_Byte+0x40>)
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	4a06      	ldr	r2, [pc, #24]	@ (800344c <FLASH_Program_Byte+0x40>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	701a      	strb	r2, [r3, #0]
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40023c00 	.word	0x40023c00

08003450 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003454:	4b2f      	ldr	r3, [pc, #188]	@ (8003514 <FLASH_SetErrorCode+0xc4>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003460:	4b2d      	ldr	r3, [pc, #180]	@ (8003518 <FLASH_SetErrorCode+0xc8>)
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	f043 0310 	orr.w	r3, r3, #16
 8003468:	4a2b      	ldr	r2, [pc, #172]	@ (8003518 <FLASH_SetErrorCode+0xc8>)
 800346a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800346c:	4b29      	ldr	r3, [pc, #164]	@ (8003514 <FLASH_SetErrorCode+0xc4>)
 800346e:	2210      	movs	r2, #16
 8003470:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003472:	4b28      	ldr	r3, [pc, #160]	@ (8003514 <FLASH_SetErrorCode+0xc4>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d008      	beq.n	8003490 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800347e:	4b26      	ldr	r3, [pc, #152]	@ (8003518 <FLASH_SetErrorCode+0xc8>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	f043 0308 	orr.w	r3, r3, #8
 8003486:	4a24      	ldr	r2, [pc, #144]	@ (8003518 <FLASH_SetErrorCode+0xc8>)
 8003488:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800348a:	4b22      	ldr	r3, [pc, #136]	@ (8003514 <FLASH_SetErrorCode+0xc4>)
 800348c:	2220      	movs	r2, #32
 800348e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003490:	4b20      	ldr	r3, [pc, #128]	@ (8003514 <FLASH_SetErrorCode+0xc4>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800349c:	4b1e      	ldr	r3, [pc, #120]	@ (8003518 <FLASH_SetErrorCode+0xc8>)
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	f043 0304 	orr.w	r3, r3, #4
 80034a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003518 <FLASH_SetErrorCode+0xc8>)
 80034a6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80034a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003514 <FLASH_SetErrorCode+0xc4>)
 80034aa:	2240      	movs	r2, #64	@ 0x40
 80034ac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80034ae:	4b19      	ldr	r3, [pc, #100]	@ (8003514 <FLASH_SetErrorCode+0xc4>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d008      	beq.n	80034cc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80034ba:	4b17      	ldr	r3, [pc, #92]	@ (8003518 <FLASH_SetErrorCode+0xc8>)
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	f043 0302 	orr.w	r3, r3, #2
 80034c2:	4a15      	ldr	r2, [pc, #84]	@ (8003518 <FLASH_SetErrorCode+0xc8>)
 80034c4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80034c6:	4b13      	ldr	r3, [pc, #76]	@ (8003514 <FLASH_SetErrorCode+0xc4>)
 80034c8:	2280      	movs	r2, #128	@ 0x80
 80034ca:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80034cc:	4b11      	ldr	r3, [pc, #68]	@ (8003514 <FLASH_SetErrorCode+0xc4>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d009      	beq.n	80034ec <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80034d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003518 <FLASH_SetErrorCode+0xc8>)
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003518 <FLASH_SetErrorCode+0xc8>)
 80034e2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80034e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <FLASH_SetErrorCode+0xc4>)
 80034e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034ea:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80034ec:	4b09      	ldr	r3, [pc, #36]	@ (8003514 <FLASH_SetErrorCode+0xc4>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80034f8:	4b07      	ldr	r3, [pc, #28]	@ (8003518 <FLASH_SetErrorCode+0xc8>)
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	f043 0320 	orr.w	r3, r3, #32
 8003500:	4a05      	ldr	r2, [pc, #20]	@ (8003518 <FLASH_SetErrorCode+0xc8>)
 8003502:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003504:	4b03      	ldr	r3, [pc, #12]	@ (8003514 <FLASH_SetErrorCode+0xc4>)
 8003506:	2202      	movs	r2, #2
 8003508:	60da      	str	r2, [r3, #12]
  }
}
 800350a:	bf00      	nop
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	40023c00 	.word	0x40023c00
 8003518:	20000ee8 	.word	0x20000ee8

0800351c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	e010      	b.n	800355a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d103      	bne.n	8003546 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800353e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	e009      	b.n	800355a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d103      	bne.n	8003554 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800354c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	e002      	b.n	800355a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003554:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003558:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800355a:	4b13      	ldr	r3, [pc, #76]	@ (80035a8 <FLASH_Erase_Sector+0x8c>)
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	4a12      	ldr	r2, [pc, #72]	@ (80035a8 <FLASH_Erase_Sector+0x8c>)
 8003560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003564:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003566:	4b10      	ldr	r3, [pc, #64]	@ (80035a8 <FLASH_Erase_Sector+0x8c>)
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	490f      	ldr	r1, [pc, #60]	@ (80035a8 <FLASH_Erase_Sector+0x8c>)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003572:	4b0d      	ldr	r3, [pc, #52]	@ (80035a8 <FLASH_Erase_Sector+0x8c>)
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	4a0c      	ldr	r2, [pc, #48]	@ (80035a8 <FLASH_Erase_Sector+0x8c>)
 8003578:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800357c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800357e:	4b0a      	ldr	r3, [pc, #40]	@ (80035a8 <FLASH_Erase_Sector+0x8c>)
 8003580:	691a      	ldr	r2, [r3, #16]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4313      	orrs	r3, r2
 8003588:	4a07      	ldr	r2, [pc, #28]	@ (80035a8 <FLASH_Erase_Sector+0x8c>)
 800358a:	f043 0302 	orr.w	r3, r3, #2
 800358e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003590:	4b05      	ldr	r3, [pc, #20]	@ (80035a8 <FLASH_Erase_Sector+0x8c>)
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	4a04      	ldr	r2, [pc, #16]	@ (80035a8 <FLASH_Erase_Sector+0x8c>)
 8003596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800359a:	6113      	str	r3, [r2, #16]
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	40023c00 	.word	0x40023c00

080035ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b089      	sub	sp, #36	@ 0x24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035be:	2300      	movs	r3, #0
 80035c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	e159      	b.n	800387c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035c8:	2201      	movs	r2, #1
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4013      	ands	r3, r2
 80035da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	f040 8148 	bne.w	8003876 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d005      	beq.n	80035fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d130      	bne.n	8003660 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	2203      	movs	r2, #3
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4313      	orrs	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003634:	2201      	movs	r2, #1
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 0201 	and.w	r2, r3, #1
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4313      	orrs	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	2b03      	cmp	r3, #3
 800366a:	d017      	beq.n	800369c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	2203      	movs	r2, #3
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d123      	bne.n	80036f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	08da      	lsrs	r2, r3, #3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3208      	adds	r2, #8
 80036b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	220f      	movs	r2, #15
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	08da      	lsrs	r2, r3, #3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3208      	adds	r2, #8
 80036ea:	69b9      	ldr	r1, [r7, #24]
 80036ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	2203      	movs	r2, #3
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 0203 	and.w	r2, r3, #3
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80a2 	beq.w	8003876 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	4b57      	ldr	r3, [pc, #348]	@ (8003894 <HAL_GPIO_Init+0x2e8>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373a:	4a56      	ldr	r2, [pc, #344]	@ (8003894 <HAL_GPIO_Init+0x2e8>)
 800373c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003740:	6453      	str	r3, [r2, #68]	@ 0x44
 8003742:	4b54      	ldr	r3, [pc, #336]	@ (8003894 <HAL_GPIO_Init+0x2e8>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003746:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800374e:	4a52      	ldr	r2, [pc, #328]	@ (8003898 <HAL_GPIO_Init+0x2ec>)
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	089b      	lsrs	r3, r3, #2
 8003754:	3302      	adds	r3, #2
 8003756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	220f      	movs	r2, #15
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43db      	mvns	r3, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4013      	ands	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a49      	ldr	r2, [pc, #292]	@ (800389c <HAL_GPIO_Init+0x2f0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d019      	beq.n	80037ae <HAL_GPIO_Init+0x202>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a48      	ldr	r2, [pc, #288]	@ (80038a0 <HAL_GPIO_Init+0x2f4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <HAL_GPIO_Init+0x1fe>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a47      	ldr	r2, [pc, #284]	@ (80038a4 <HAL_GPIO_Init+0x2f8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00d      	beq.n	80037a6 <HAL_GPIO_Init+0x1fa>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a46      	ldr	r2, [pc, #280]	@ (80038a8 <HAL_GPIO_Init+0x2fc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d007      	beq.n	80037a2 <HAL_GPIO_Init+0x1f6>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a45      	ldr	r2, [pc, #276]	@ (80038ac <HAL_GPIO_Init+0x300>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d101      	bne.n	800379e <HAL_GPIO_Init+0x1f2>
 800379a:	2304      	movs	r3, #4
 800379c:	e008      	b.n	80037b0 <HAL_GPIO_Init+0x204>
 800379e:	2307      	movs	r3, #7
 80037a0:	e006      	b.n	80037b0 <HAL_GPIO_Init+0x204>
 80037a2:	2303      	movs	r3, #3
 80037a4:	e004      	b.n	80037b0 <HAL_GPIO_Init+0x204>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e002      	b.n	80037b0 <HAL_GPIO_Init+0x204>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_GPIO_Init+0x204>
 80037ae:	2300      	movs	r3, #0
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	f002 0203 	and.w	r2, r2, #3
 80037b6:	0092      	lsls	r2, r2, #2
 80037b8:	4093      	lsls	r3, r2
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037c0:	4935      	ldr	r1, [pc, #212]	@ (8003898 <HAL_GPIO_Init+0x2ec>)
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	089b      	lsrs	r3, r3, #2
 80037c6:	3302      	adds	r3, #2
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ce:	4b38      	ldr	r3, [pc, #224]	@ (80038b0 <HAL_GPIO_Init+0x304>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037f2:	4a2f      	ldr	r2, [pc, #188]	@ (80038b0 <HAL_GPIO_Init+0x304>)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037f8:	4b2d      	ldr	r3, [pc, #180]	@ (80038b0 <HAL_GPIO_Init+0x304>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800381c:	4a24      	ldr	r2, [pc, #144]	@ (80038b0 <HAL_GPIO_Init+0x304>)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003822:	4b23      	ldr	r3, [pc, #140]	@ (80038b0 <HAL_GPIO_Init+0x304>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	43db      	mvns	r3, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003846:	4a1a      	ldr	r2, [pc, #104]	@ (80038b0 <HAL_GPIO_Init+0x304>)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800384c:	4b18      	ldr	r3, [pc, #96]	@ (80038b0 <HAL_GPIO_Init+0x304>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003870:	4a0f      	ldr	r2, [pc, #60]	@ (80038b0 <HAL_GPIO_Init+0x304>)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3301      	adds	r3, #1
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	2b0f      	cmp	r3, #15
 8003880:	f67f aea2 	bls.w	80035c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	3724      	adds	r7, #36	@ 0x24
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
 8003898:	40013800 	.word	0x40013800
 800389c:	40020000 	.word	0x40020000
 80038a0:	40020400 	.word	0x40020400
 80038a4:	40020800 	.word	0x40020800
 80038a8:	40020c00 	.word	0x40020c00
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40013c00 	.word	0x40013c00

080038b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	807b      	strh	r3, [r7, #2]
 80038c0:	4613      	mov	r3, r2
 80038c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038c4:	787b      	ldrb	r3, [r7, #1]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ca:	887a      	ldrh	r2, [r7, #2]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038d0:	e003      	b.n	80038da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038d2:	887b      	ldrh	r3, [r7, #2]
 80038d4:	041a      	lsls	r2, r3, #16
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	619a      	str	r2, [r3, #24]
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e12b      	b.n	8003b52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fe fc94 	bl	800223c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2224      	movs	r2, #36	@ 0x24
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0201 	bic.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800393a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800394a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800394c:	f001 f9b8 	bl	8004cc0 <HAL_RCC_GetPCLK1Freq>
 8003950:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4a81      	ldr	r2, [pc, #516]	@ (8003b5c <HAL_I2C_Init+0x274>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d807      	bhi.n	800396c <HAL_I2C_Init+0x84>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4a80      	ldr	r2, [pc, #512]	@ (8003b60 <HAL_I2C_Init+0x278>)
 8003960:	4293      	cmp	r3, r2
 8003962:	bf94      	ite	ls
 8003964:	2301      	movls	r3, #1
 8003966:	2300      	movhi	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e006      	b.n	800397a <HAL_I2C_Init+0x92>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4a7d      	ldr	r2, [pc, #500]	@ (8003b64 <HAL_I2C_Init+0x27c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	bf94      	ite	ls
 8003974:	2301      	movls	r3, #1
 8003976:	2300      	movhi	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e0e7      	b.n	8003b52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4a78      	ldr	r2, [pc, #480]	@ (8003b68 <HAL_I2C_Init+0x280>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	0c9b      	lsrs	r3, r3, #18
 800398c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4a6a      	ldr	r2, [pc, #424]	@ (8003b5c <HAL_I2C_Init+0x274>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d802      	bhi.n	80039bc <HAL_I2C_Init+0xd4>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	3301      	adds	r3, #1
 80039ba:	e009      	b.n	80039d0 <HAL_I2C_Init+0xe8>
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039c2:	fb02 f303 	mul.w	r3, r2, r3
 80039c6:	4a69      	ldr	r2, [pc, #420]	@ (8003b6c <HAL_I2C_Init+0x284>)
 80039c8:	fba2 2303 	umull	r2, r3, r2, r3
 80039cc:	099b      	lsrs	r3, r3, #6
 80039ce:	3301      	adds	r3, #1
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	430b      	orrs	r3, r1
 80039d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	495c      	ldr	r1, [pc, #368]	@ (8003b5c <HAL_I2C_Init+0x274>)
 80039ec:	428b      	cmp	r3, r1
 80039ee:	d819      	bhi.n	8003a24 <HAL_I2C_Init+0x13c>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	1e59      	subs	r1, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80039fe:	1c59      	adds	r1, r3, #1
 8003a00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a04:	400b      	ands	r3, r1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_I2C_Init+0x138>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1e59      	subs	r1, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a18:	3301      	adds	r3, #1
 8003a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1e:	e051      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003a20:	2304      	movs	r3, #4
 8003a22:	e04f      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d111      	bne.n	8003a50 <HAL_I2C_Init+0x168>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1e58      	subs	r0, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6859      	ldr	r1, [r3, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	440b      	add	r3, r1
 8003a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e012      	b.n	8003a76 <HAL_I2C_Init+0x18e>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	1e58      	subs	r0, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	0099      	lsls	r1, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a66:	3301      	adds	r3, #1
 8003a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf0c      	ite	eq
 8003a70:	2301      	moveq	r3, #1
 8003a72:	2300      	movne	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_I2C_Init+0x196>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e022      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10e      	bne.n	8003aa4 <HAL_I2C_Init+0x1bc>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1e58      	subs	r0, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6859      	ldr	r1, [r3, #4]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	440b      	add	r3, r1
 8003a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aa2:	e00f      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1e58      	subs	r0, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	0099      	lsls	r1, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aba:	3301      	adds	r3, #1
 8003abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	6809      	ldr	r1, [r1, #0]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003af2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6911      	ldr	r1, [r2, #16]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	68d2      	ldr	r2, [r2, #12]
 8003afe:	4311      	orrs	r1, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6812      	ldr	r2, [r2, #0]
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695a      	ldr	r2, [r3, #20]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	000186a0 	.word	0x000186a0
 8003b60:	001e847f 	.word	0x001e847f
 8003b64:	003d08ff 	.word	0x003d08ff
 8003b68:	431bde83 	.word	0x431bde83
 8003b6c:	10624dd3 	.word	0x10624dd3

08003b70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	4608      	mov	r0, r1
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4603      	mov	r3, r0
 8003b80:	817b      	strh	r3, [r7, #10]
 8003b82:	460b      	mov	r3, r1
 8003b84:	813b      	strh	r3, [r7, #8]
 8003b86:	4613      	mov	r3, r2
 8003b88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b8a:	f7fe fdcd 	bl	8002728 <HAL_GetTick>
 8003b8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b20      	cmp	r3, #32
 8003b9a:	f040 80d9 	bne.w	8003d50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	2319      	movs	r3, #25
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	496d      	ldr	r1, [pc, #436]	@ (8003d5c <HAL_I2C_Mem_Write+0x1ec>)
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 f971 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e0cc      	b.n	8003d52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_I2C_Mem_Write+0x56>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e0c5      	b.n	8003d52 <HAL_I2C_Mem_Write+0x1e2>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d007      	beq.n	8003bec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2221      	movs	r2, #33	@ 0x21
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2240      	movs	r2, #64	@ 0x40
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a3a      	ldr	r2, [r7, #32]
 8003c16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a4d      	ldr	r2, [pc, #308]	@ (8003d60 <HAL_I2C_Mem_Write+0x1f0>)
 8003c2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c2e:	88f8      	ldrh	r0, [r7, #6]
 8003c30:	893a      	ldrh	r2, [r7, #8]
 8003c32:	8979      	ldrh	r1, [r7, #10]
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f890 	bl	8003d64 <I2C_RequestMemoryWrite>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d052      	beq.n	8003cf0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e081      	b.n	8003d52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 fa36 	bl	80040c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00d      	beq.n	8003c7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d107      	bne.n	8003c76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e06b      	b.n	8003d52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7e:	781a      	ldrb	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d11b      	bne.n	8003cf0 <HAL_I2C_Mem_Write+0x180>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d017      	beq.n	8003cf0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc4:	781a      	ldrb	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1aa      	bne.n	8003c4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 fa29 	bl	8004154 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00d      	beq.n	8003d24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d107      	bne.n	8003d20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e016      	b.n	8003d52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e000      	b.n	8003d52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d50:	2302      	movs	r3, #2
  }
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	00100002 	.word	0x00100002
 8003d60:	ffff0000 	.word	0xffff0000

08003d64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	4608      	mov	r0, r1
 8003d6e:	4611      	mov	r1, r2
 8003d70:	461a      	mov	r2, r3
 8003d72:	4603      	mov	r3, r0
 8003d74:	817b      	strh	r3, [r7, #10]
 8003d76:	460b      	mov	r3, r1
 8003d78:	813b      	strh	r3, [r7, #8]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f878 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00d      	beq.n	8003dc2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003db4:	d103      	bne.n	8003dbe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e05f      	b.n	8003e82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dc2:	897b      	ldrh	r3, [r7, #10]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003dd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd4:	6a3a      	ldr	r2, [r7, #32]
 8003dd6:	492d      	ldr	r1, [pc, #180]	@ (8003e8c <I2C_RequestMemoryWrite+0x128>)
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f8d3 	bl	8003f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e04c      	b.n	8003e82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e00:	6a39      	ldr	r1, [r7, #32]
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f95e 	bl	80040c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00d      	beq.n	8003e2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d107      	bne.n	8003e26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e02b      	b.n	8003e82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e2a:	88fb      	ldrh	r3, [r7, #6]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d105      	bne.n	8003e3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e30:	893b      	ldrh	r3, [r7, #8]
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	611a      	str	r2, [r3, #16]
 8003e3a:	e021      	b.n	8003e80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e3c:	893b      	ldrh	r3, [r7, #8]
 8003e3e:	0a1b      	lsrs	r3, r3, #8
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e4c:	6a39      	ldr	r1, [r7, #32]
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f938 	bl	80040c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00d      	beq.n	8003e76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d107      	bne.n	8003e72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e005      	b.n	8003e82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e76:	893b      	ldrh	r3, [r7, #8]
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	00010002 	.word	0x00010002

08003e90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ea0:	e048      	b.n	8003f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea8:	d044      	beq.n	8003f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eaa:	f7fe fc3d 	bl	8002728 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d302      	bcc.n	8003ec0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d139      	bne.n	8003f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	0c1b      	lsrs	r3, r3, #16
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d10d      	bne.n	8003ee6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	43da      	mvns	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bf0c      	ite	eq
 8003edc:	2301      	moveq	r3, #1
 8003ede:	2300      	movne	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	e00c      	b.n	8003f00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	43da      	mvns	r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	bf0c      	ite	eq
 8003ef8:	2301      	moveq	r3, #1
 8003efa:	2300      	movne	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d116      	bne.n	8003f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f20:	f043 0220 	orr.w	r2, r3, #32
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e023      	b.n	8003f7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	0c1b      	lsrs	r3, r3, #16
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d10d      	bne.n	8003f5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	43da      	mvns	r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	bf0c      	ite	eq
 8003f50:	2301      	moveq	r3, #1
 8003f52:	2300      	movne	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	e00c      	b.n	8003f74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	43da      	mvns	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	4013      	ands	r3, r2
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	bf0c      	ite	eq
 8003f6c:	2301      	moveq	r3, #1
 8003f6e:	2300      	movne	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d093      	beq.n	8003ea2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f92:	e071      	b.n	8004078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fa2:	d123      	bne.n	8003fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd8:	f043 0204 	orr.w	r2, r3, #4
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e067      	b.n	80040bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff2:	d041      	beq.n	8004078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff4:	f7fe fb98 	bl	8002728 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	429a      	cmp	r2, r3
 8004002:	d302      	bcc.n	800400a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d136      	bne.n	8004078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	0c1b      	lsrs	r3, r3, #16
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b01      	cmp	r3, #1
 8004012:	d10c      	bne.n	800402e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	43da      	mvns	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4013      	ands	r3, r2
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	bf14      	ite	ne
 8004026:	2301      	movne	r3, #1
 8004028:	2300      	moveq	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	e00b      	b.n	8004046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	43da      	mvns	r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4013      	ands	r3, r2
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	bf14      	ite	ne
 8004040:	2301      	movne	r3, #1
 8004042:	2300      	moveq	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d016      	beq.n	8004078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004064:	f043 0220 	orr.w	r2, r3, #32
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e021      	b.n	80040bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	0c1b      	lsrs	r3, r3, #16
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b01      	cmp	r3, #1
 8004080:	d10c      	bne.n	800409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	43da      	mvns	r2, r3
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	4013      	ands	r3, r2
 800408e:	b29b      	uxth	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	bf14      	ite	ne
 8004094:	2301      	movne	r3, #1
 8004096:	2300      	moveq	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	e00b      	b.n	80040b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	43da      	mvns	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4013      	ands	r3, r2
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	bf14      	ite	ne
 80040ae:	2301      	movne	r3, #1
 80040b0:	2300      	moveq	r3, #0
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f47f af6d 	bne.w	8003f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040d0:	e034      	b.n	800413c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f886 	bl	80041e4 <I2C_IsAcknowledgeFailed>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e034      	b.n	800414c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e8:	d028      	beq.n	800413c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ea:	f7fe fb1d 	bl	8002728 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d302      	bcc.n	8004100 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d11d      	bne.n	800413c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800410a:	2b80      	cmp	r3, #128	@ 0x80
 800410c:	d016      	beq.n	800413c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004128:	f043 0220 	orr.w	r2, r3, #32
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e007      	b.n	800414c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004146:	2b80      	cmp	r3, #128	@ 0x80
 8004148:	d1c3      	bne.n	80040d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004160:	e034      	b.n	80041cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 f83e 	bl	80041e4 <I2C_IsAcknowledgeFailed>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e034      	b.n	80041dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d028      	beq.n	80041cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417a:	f7fe fad5 	bl	8002728 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	429a      	cmp	r2, r3
 8004188:	d302      	bcc.n	8004190 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d11d      	bne.n	80041cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b04      	cmp	r3, #4
 800419c:	d016      	beq.n	80041cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b8:	f043 0220 	orr.w	r2, r3, #32
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e007      	b.n	80041dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d1c3      	bne.n	8004162 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041fa:	d11b      	bne.n	8004234 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004204:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004220:	f043 0204 	orr.w	r2, r3, #4
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b086      	sub	sp, #24
 8004246:	af02      	add	r7, sp, #8
 8004248:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e101      	b.n	8004458 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fe f82c 	bl	80022cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2203      	movs	r2, #3
 8004278:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004282:	d102      	bne.n	800428a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fd8e 	bl	8004db0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6818      	ldr	r0, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	7c1a      	ldrb	r2, [r3, #16]
 800429c:	f88d 2000 	strb.w	r2, [sp]
 80042a0:	3304      	adds	r3, #4
 80042a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042a4:	f000 fd20 	bl	8004ce8 <USB_CoreInit>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2202      	movs	r2, #2
 80042b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e0ce      	b.n	8004458 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2100      	movs	r1, #0
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fd86 	bl	8004dd2 <USB_SetCurrentMode>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e0bf      	b.n	8004458 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042d8:	2300      	movs	r3, #0
 80042da:	73fb      	strb	r3, [r7, #15]
 80042dc:	e04a      	b.n	8004374 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042de:	7bfa      	ldrb	r2, [r7, #15]
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	3315      	adds	r3, #21
 80042ee:	2201      	movs	r2, #1
 80042f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042f2:	7bfa      	ldrb	r2, [r7, #15]
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	4613      	mov	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	4413      	add	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	440b      	add	r3, r1
 8004300:	3314      	adds	r3, #20
 8004302:	7bfa      	ldrb	r2, [r7, #15]
 8004304:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004306:	7bfa      	ldrb	r2, [r7, #15]
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	b298      	uxth	r0, r3
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	332e      	adds	r3, #46	@ 0x2e
 800431a:	4602      	mov	r2, r0
 800431c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800431e:	7bfa      	ldrb	r2, [r7, #15]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	3318      	adds	r3, #24
 800432e:	2200      	movs	r2, #0
 8004330:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004332:	7bfa      	ldrb	r2, [r7, #15]
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	440b      	add	r3, r1
 8004340:	331c      	adds	r3, #28
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004346:	7bfa      	ldrb	r2, [r7, #15]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	4413      	add	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	3320      	adds	r3, #32
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800435a:	7bfa      	ldrb	r2, [r7, #15]
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	4413      	add	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	3324      	adds	r3, #36	@ 0x24
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	3301      	adds	r3, #1
 8004372:	73fb      	strb	r3, [r7, #15]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	791b      	ldrb	r3, [r3, #4]
 8004378:	7bfa      	ldrb	r2, [r7, #15]
 800437a:	429a      	cmp	r2, r3
 800437c:	d3af      	bcc.n	80042de <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800437e:	2300      	movs	r3, #0
 8004380:	73fb      	strb	r3, [r7, #15]
 8004382:	e044      	b.n	800440e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004384:	7bfa      	ldrb	r2, [r7, #15]
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800439a:	7bfa      	ldrb	r2, [r7, #15]
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	4413      	add	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80043ac:	7bfa      	ldrb	r2, [r7, #15]
 80043ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043b0:	7bfa      	ldrb	r2, [r7, #15]
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	4613      	mov	r3, r2
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80043c2:	2200      	movs	r2, #0
 80043c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043c6:	7bfa      	ldrb	r2, [r7, #15]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043dc:	7bfa      	ldrb	r2, [r7, #15]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043f2:	7bfa      	ldrb	r2, [r7, #15]
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	3301      	adds	r3, #1
 800440c:	73fb      	strb	r3, [r7, #15]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	791b      	ldrb	r3, [r3, #4]
 8004412:	7bfa      	ldrb	r2, [r7, #15]
 8004414:	429a      	cmp	r2, r3
 8004416:	d3b5      	bcc.n	8004384 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6818      	ldr	r0, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	7c1a      	ldrb	r2, [r3, #16]
 8004420:	f88d 2000 	strb.w	r2, [sp]
 8004424:	3304      	adds	r3, #4
 8004426:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004428:	f000 fd20 	bl	8004e6c <USB_DevInit>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d005      	beq.n	800443e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2202      	movs	r2, #2
 8004436:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e00c      	b.n	8004458 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fee8 	bl	8005226 <USB_DevDisconnect>

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e267      	b.n	8004942 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d075      	beq.n	800456a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800447e:	4b88      	ldr	r3, [pc, #544]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 030c 	and.w	r3, r3, #12
 8004486:	2b04      	cmp	r3, #4
 8004488:	d00c      	beq.n	80044a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800448a:	4b85      	ldr	r3, [pc, #532]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004492:	2b08      	cmp	r3, #8
 8004494:	d112      	bne.n	80044bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004496:	4b82      	ldr	r3, [pc, #520]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800449e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044a2:	d10b      	bne.n	80044bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a4:	4b7e      	ldr	r3, [pc, #504]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d05b      	beq.n	8004568 <HAL_RCC_OscConfig+0x108>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d157      	bne.n	8004568 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e242      	b.n	8004942 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044c4:	d106      	bne.n	80044d4 <HAL_RCC_OscConfig+0x74>
 80044c6:	4b76      	ldr	r3, [pc, #472]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a75      	ldr	r2, [pc, #468]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 80044cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	e01d      	b.n	8004510 <HAL_RCC_OscConfig+0xb0>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044dc:	d10c      	bne.n	80044f8 <HAL_RCC_OscConfig+0x98>
 80044de:	4b70      	ldr	r3, [pc, #448]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a6f      	ldr	r2, [pc, #444]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 80044e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	4b6d      	ldr	r3, [pc, #436]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a6c      	ldr	r2, [pc, #432]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 80044f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	e00b      	b.n	8004510 <HAL_RCC_OscConfig+0xb0>
 80044f8:	4b69      	ldr	r3, [pc, #420]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a68      	ldr	r2, [pc, #416]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 80044fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004502:	6013      	str	r3, [r2, #0]
 8004504:	4b66      	ldr	r3, [pc, #408]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a65      	ldr	r2, [pc, #404]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 800450a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800450e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d013      	beq.n	8004540 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004518:	f7fe f906 	bl	8002728 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004520:	f7fe f902 	bl	8002728 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b64      	cmp	r3, #100	@ 0x64
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e207      	b.n	8004942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004532:	4b5b      	ldr	r3, [pc, #364]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0xc0>
 800453e:	e014      	b.n	800456a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004540:	f7fe f8f2 	bl	8002728 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004548:	f7fe f8ee 	bl	8002728 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	@ 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e1f3      	b.n	8004942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800455a:	4b51      	ldr	r3, [pc, #324]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f0      	bne.n	8004548 <HAL_RCC_OscConfig+0xe8>
 8004566:	e000      	b.n	800456a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d063      	beq.n	800463e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004576:	4b4a      	ldr	r3, [pc, #296]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 030c 	and.w	r3, r3, #12
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00b      	beq.n	800459a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004582:	4b47      	ldr	r3, [pc, #284]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800458a:	2b08      	cmp	r3, #8
 800458c:	d11c      	bne.n	80045c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800458e:	4b44      	ldr	r3, [pc, #272]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d116      	bne.n	80045c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800459a:	4b41      	ldr	r3, [pc, #260]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d005      	beq.n	80045b2 <HAL_RCC_OscConfig+0x152>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d001      	beq.n	80045b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e1c7      	b.n	8004942 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b2:	4b3b      	ldr	r3, [pc, #236]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	4937      	ldr	r1, [pc, #220]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c6:	e03a      	b.n	800463e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d020      	beq.n	8004612 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045d0:	4b34      	ldr	r3, [pc, #208]	@ (80046a4 <HAL_RCC_OscConfig+0x244>)
 80045d2:	2201      	movs	r2, #1
 80045d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d6:	f7fe f8a7 	bl	8002728 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045de:	f7fe f8a3 	bl	8002728 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e1a8      	b.n	8004942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f0:	4b2b      	ldr	r3, [pc, #172]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0f0      	beq.n	80045de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fc:	4b28      	ldr	r3, [pc, #160]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	4925      	ldr	r1, [pc, #148]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 800460c:	4313      	orrs	r3, r2
 800460e:	600b      	str	r3, [r1, #0]
 8004610:	e015      	b.n	800463e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004612:	4b24      	ldr	r3, [pc, #144]	@ (80046a4 <HAL_RCC_OscConfig+0x244>)
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004618:	f7fe f886 	bl	8002728 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004620:	f7fe f882 	bl	8002728 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e187      	b.n	8004942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004632:	4b1b      	ldr	r3, [pc, #108]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f0      	bne.n	8004620 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b00      	cmp	r3, #0
 8004648:	d036      	beq.n	80046b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d016      	beq.n	8004680 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004652:	4b15      	ldr	r3, [pc, #84]	@ (80046a8 <HAL_RCC_OscConfig+0x248>)
 8004654:	2201      	movs	r2, #1
 8004656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004658:	f7fe f866 	bl	8002728 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004660:	f7fe f862 	bl	8002728 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e167      	b.n	8004942 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004672:	4b0b      	ldr	r3, [pc, #44]	@ (80046a0 <HAL_RCC_OscConfig+0x240>)
 8004674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f0      	beq.n	8004660 <HAL_RCC_OscConfig+0x200>
 800467e:	e01b      	b.n	80046b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004680:	4b09      	ldr	r3, [pc, #36]	@ (80046a8 <HAL_RCC_OscConfig+0x248>)
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004686:	f7fe f84f 	bl	8002728 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800468c:	e00e      	b.n	80046ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800468e:	f7fe f84b 	bl	8002728 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d907      	bls.n	80046ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e150      	b.n	8004942 <HAL_RCC_OscConfig+0x4e2>
 80046a0:	40023800 	.word	0x40023800
 80046a4:	42470000 	.word	0x42470000
 80046a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ac:	4b88      	ldr	r3, [pc, #544]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 80046ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1ea      	bne.n	800468e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 8097 	beq.w	80047f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c6:	2300      	movs	r3, #0
 80046c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ca:	4b81      	ldr	r3, [pc, #516]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10f      	bne.n	80046f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046d6:	2300      	movs	r3, #0
 80046d8:	60bb      	str	r3, [r7, #8]
 80046da:	4b7d      	ldr	r3, [pc, #500]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 80046dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046de:	4a7c      	ldr	r2, [pc, #496]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 80046e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80046e6:	4b7a      	ldr	r3, [pc, #488]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ee:	60bb      	str	r3, [r7, #8]
 80046f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046f2:	2301      	movs	r3, #1
 80046f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f6:	4b77      	ldr	r3, [pc, #476]	@ (80048d4 <HAL_RCC_OscConfig+0x474>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d118      	bne.n	8004734 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004702:	4b74      	ldr	r3, [pc, #464]	@ (80048d4 <HAL_RCC_OscConfig+0x474>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a73      	ldr	r2, [pc, #460]	@ (80048d4 <HAL_RCC_OscConfig+0x474>)
 8004708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800470c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800470e:	f7fe f80b 	bl	8002728 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004716:	f7fe f807 	bl	8002728 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e10c      	b.n	8004942 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004728:	4b6a      	ldr	r3, [pc, #424]	@ (80048d4 <HAL_RCC_OscConfig+0x474>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0f0      	beq.n	8004716 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d106      	bne.n	800474a <HAL_RCC_OscConfig+0x2ea>
 800473c:	4b64      	ldr	r3, [pc, #400]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 800473e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004740:	4a63      	ldr	r2, [pc, #396]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	6713      	str	r3, [r2, #112]	@ 0x70
 8004748:	e01c      	b.n	8004784 <HAL_RCC_OscConfig+0x324>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	2b05      	cmp	r3, #5
 8004750:	d10c      	bne.n	800476c <HAL_RCC_OscConfig+0x30c>
 8004752:	4b5f      	ldr	r3, [pc, #380]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004756:	4a5e      	ldr	r2, [pc, #376]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 8004758:	f043 0304 	orr.w	r3, r3, #4
 800475c:	6713      	str	r3, [r2, #112]	@ 0x70
 800475e:	4b5c      	ldr	r3, [pc, #368]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004762:	4a5b      	ldr	r2, [pc, #364]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 8004764:	f043 0301 	orr.w	r3, r3, #1
 8004768:	6713      	str	r3, [r2, #112]	@ 0x70
 800476a:	e00b      	b.n	8004784 <HAL_RCC_OscConfig+0x324>
 800476c:	4b58      	ldr	r3, [pc, #352]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004770:	4a57      	ldr	r2, [pc, #348]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 8004772:	f023 0301 	bic.w	r3, r3, #1
 8004776:	6713      	str	r3, [r2, #112]	@ 0x70
 8004778:	4b55      	ldr	r3, [pc, #340]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 800477a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800477c:	4a54      	ldr	r2, [pc, #336]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 800477e:	f023 0304 	bic.w	r3, r3, #4
 8004782:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d015      	beq.n	80047b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478c:	f7fd ffcc 	bl	8002728 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004792:	e00a      	b.n	80047aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004794:	f7fd ffc8 	bl	8002728 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e0cb      	b.n	8004942 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047aa:	4b49      	ldr	r3, [pc, #292]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 80047ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0ee      	beq.n	8004794 <HAL_RCC_OscConfig+0x334>
 80047b6:	e014      	b.n	80047e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b8:	f7fd ffb6 	bl	8002728 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047be:	e00a      	b.n	80047d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047c0:	f7fd ffb2 	bl	8002728 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e0b5      	b.n	8004942 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d6:	4b3e      	ldr	r3, [pc, #248]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1ee      	bne.n	80047c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047e2:	7dfb      	ldrb	r3, [r7, #23]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d105      	bne.n	80047f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e8:	4b39      	ldr	r3, [pc, #228]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 80047ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ec:	4a38      	ldr	r2, [pc, #224]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 80047ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 80a1 	beq.w	8004940 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047fe:	4b34      	ldr	r3, [pc, #208]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
 8004806:	2b08      	cmp	r3, #8
 8004808:	d05c      	beq.n	80048c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	2b02      	cmp	r3, #2
 8004810:	d141      	bne.n	8004896 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004812:	4b31      	ldr	r3, [pc, #196]	@ (80048d8 <HAL_RCC_OscConfig+0x478>)
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004818:	f7fd ff86 	bl	8002728 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004820:	f7fd ff82 	bl	8002728 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e087      	b.n	8004942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004832:	4b27      	ldr	r3, [pc, #156]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f0      	bne.n	8004820 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69da      	ldr	r2, [r3, #28]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484c:	019b      	lsls	r3, r3, #6
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004854:	085b      	lsrs	r3, r3, #1
 8004856:	3b01      	subs	r3, #1
 8004858:	041b      	lsls	r3, r3, #16
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004860:	061b      	lsls	r3, r3, #24
 8004862:	491b      	ldr	r1, [pc, #108]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 8004864:	4313      	orrs	r3, r2
 8004866:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004868:	4b1b      	ldr	r3, [pc, #108]	@ (80048d8 <HAL_RCC_OscConfig+0x478>)
 800486a:	2201      	movs	r2, #1
 800486c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486e:	f7fd ff5b 	bl	8002728 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004876:	f7fd ff57 	bl	8002728 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e05c      	b.n	8004942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004888:	4b11      	ldr	r3, [pc, #68]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0f0      	beq.n	8004876 <HAL_RCC_OscConfig+0x416>
 8004894:	e054      	b.n	8004940 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004896:	4b10      	ldr	r3, [pc, #64]	@ (80048d8 <HAL_RCC_OscConfig+0x478>)
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489c:	f7fd ff44 	bl	8002728 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a4:	f7fd ff40 	bl	8002728 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e045      	b.n	8004942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b6:	4b06      	ldr	r3, [pc, #24]	@ (80048d0 <HAL_RCC_OscConfig+0x470>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f0      	bne.n	80048a4 <HAL_RCC_OscConfig+0x444>
 80048c2:	e03d      	b.n	8004940 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d107      	bne.n	80048dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e038      	b.n	8004942 <HAL_RCC_OscConfig+0x4e2>
 80048d0:	40023800 	.word	0x40023800
 80048d4:	40007000 	.word	0x40007000
 80048d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048dc:	4b1b      	ldr	r3, [pc, #108]	@ (800494c <HAL_RCC_OscConfig+0x4ec>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d028      	beq.n	800493c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d121      	bne.n	800493c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004902:	429a      	cmp	r2, r3
 8004904:	d11a      	bne.n	800493c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800490c:	4013      	ands	r3, r2
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004912:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004914:	4293      	cmp	r3, r2
 8004916:	d111      	bne.n	800493c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004922:	085b      	lsrs	r3, r3, #1
 8004924:	3b01      	subs	r3, #1
 8004926:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004928:	429a      	cmp	r2, r3
 800492a:	d107      	bne.n	800493c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004936:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004938:	429a      	cmp	r2, r3
 800493a:	d001      	beq.n	8004940 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40023800 	.word	0x40023800

08004950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e0cc      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004964:	4b68      	ldr	r3, [pc, #416]	@ (8004b08 <HAL_RCC_ClockConfig+0x1b8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d90c      	bls.n	800498c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004972:	4b65      	ldr	r3, [pc, #404]	@ (8004b08 <HAL_RCC_ClockConfig+0x1b8>)
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800497a:	4b63      	ldr	r3, [pc, #396]	@ (8004b08 <HAL_RCC_ClockConfig+0x1b8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d001      	beq.n	800498c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e0b8      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d020      	beq.n	80049da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049a4:	4b59      	ldr	r3, [pc, #356]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	4a58      	ldr	r2, [pc, #352]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049bc:	4b53      	ldr	r3, [pc, #332]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	4a52      	ldr	r2, [pc, #328]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c8:	4b50      	ldr	r3, [pc, #320]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	494d      	ldr	r1, [pc, #308]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d044      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d107      	bne.n	80049fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ee:	4b47      	ldr	r3, [pc, #284]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d119      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e07f      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d003      	beq.n	8004a0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d107      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d109      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e06f      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e067      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a2e:	4b37      	ldr	r3, [pc, #220]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f023 0203 	bic.w	r2, r3, #3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	4934      	ldr	r1, [pc, #208]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a40:	f7fd fe72 	bl	8002728 <HAL_GetTick>
 8004a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a46:	e00a      	b.n	8004a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a48:	f7fd fe6e 	bl	8002728 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e04f      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 020c 	and.w	r2, r3, #12
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d1eb      	bne.n	8004a48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a70:	4b25      	ldr	r3, [pc, #148]	@ (8004b08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d20c      	bcs.n	8004a98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7e:	4b22      	ldr	r3, [pc, #136]	@ (8004b08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a86:	4b20      	ldr	r3, [pc, #128]	@ (8004b08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e032      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d008      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aa4:	4b19      	ldr	r3, [pc, #100]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4916      	ldr	r1, [pc, #88]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d009      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ac2:	4b12      	ldr	r3, [pc, #72]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	490e      	ldr	r1, [pc, #56]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ad6:	f000 f821 	bl	8004b1c <HAL_RCC_GetSysClockFreq>
 8004ada:	4602      	mov	r2, r0
 8004adc:	4b0b      	ldr	r3, [pc, #44]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	091b      	lsrs	r3, r3, #4
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	490a      	ldr	r1, [pc, #40]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c0>)
 8004ae8:	5ccb      	ldrb	r3, [r1, r3]
 8004aea:	fa22 f303 	lsr.w	r3, r2, r3
 8004aee:	4a09      	ldr	r2, [pc, #36]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004af2:	4b09      	ldr	r3, [pc, #36]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fd fdd2 	bl	80026a0 <HAL_InitTick>

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40023c00 	.word	0x40023c00
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	0800c0e0 	.word	0x0800c0e0
 8004b14:	20000048 	.word	0x20000048
 8004b18:	20000064 	.word	0x20000064

08004b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b20:	b090      	sub	sp, #64	@ 0x40
 8004b22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b28:	2300      	movs	r3, #0
 8004b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b34:	4b59      	ldr	r3, [pc, #356]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 030c 	and.w	r3, r3, #12
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d00d      	beq.n	8004b5c <HAL_RCC_GetSysClockFreq+0x40>
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	f200 80a1 	bhi.w	8004c88 <HAL_RCC_GetSysClockFreq+0x16c>
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_RCC_GetSysClockFreq+0x34>
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d003      	beq.n	8004b56 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b4e:	e09b      	b.n	8004c88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b50:	4b53      	ldr	r3, [pc, #332]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b52:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004b54:	e09b      	b.n	8004c8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b56:	4b53      	ldr	r3, [pc, #332]	@ (8004ca4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b5a:	e098      	b.n	8004c8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b5c:	4b4f      	ldr	r3, [pc, #316]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b64:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b66:	4b4d      	ldr	r3, [pc, #308]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d028      	beq.n	8004bc4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b72:	4b4a      	ldr	r3, [pc, #296]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	099b      	lsrs	r3, r3, #6
 8004b78:	2200      	movs	r2, #0
 8004b7a:	623b      	str	r3, [r7, #32]
 8004b7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b84:	2100      	movs	r1, #0
 8004b86:	4b47      	ldr	r3, [pc, #284]	@ (8004ca4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b88:	fb03 f201 	mul.w	r2, r3, r1
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	fb00 f303 	mul.w	r3, r0, r3
 8004b92:	4413      	add	r3, r2
 8004b94:	4a43      	ldr	r2, [pc, #268]	@ (8004ca4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b96:	fba0 1202 	umull	r1, r2, r0, r2
 8004b9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b9c:	460a      	mov	r2, r1
 8004b9e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004ba0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ba2:	4413      	add	r3, r2
 8004ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba8:	2200      	movs	r2, #0
 8004baa:	61bb      	str	r3, [r7, #24]
 8004bac:	61fa      	str	r2, [r7, #28]
 8004bae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bb2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004bb6:	f7fb fb6b 	bl	8000290 <__aeabi_uldivmod>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bc2:	e053      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc4:	4b35      	ldr	r3, [pc, #212]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	099b      	lsrs	r3, r3, #6
 8004bca:	2200      	movs	r2, #0
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	617a      	str	r2, [r7, #20]
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004bd6:	f04f 0b00 	mov.w	fp, #0
 8004bda:	4652      	mov	r2, sl
 8004bdc:	465b      	mov	r3, fp
 8004bde:	f04f 0000 	mov.w	r0, #0
 8004be2:	f04f 0100 	mov.w	r1, #0
 8004be6:	0159      	lsls	r1, r3, #5
 8004be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bec:	0150      	lsls	r0, r2, #5
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	ebb2 080a 	subs.w	r8, r2, sl
 8004bf6:	eb63 090b 	sbc.w	r9, r3, fp
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c0e:	ebb2 0408 	subs.w	r4, r2, r8
 8004c12:	eb63 0509 	sbc.w	r5, r3, r9
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	00eb      	lsls	r3, r5, #3
 8004c20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c24:	00e2      	lsls	r2, r4, #3
 8004c26:	4614      	mov	r4, r2
 8004c28:	461d      	mov	r5, r3
 8004c2a:	eb14 030a 	adds.w	r3, r4, sl
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	eb45 030b 	adc.w	r3, r5, fp
 8004c34:	607b      	str	r3, [r7, #4]
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c42:	4629      	mov	r1, r5
 8004c44:	028b      	lsls	r3, r1, #10
 8004c46:	4621      	mov	r1, r4
 8004c48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c4c:	4621      	mov	r1, r4
 8004c4e:	028a      	lsls	r2, r1, #10
 8004c50:	4610      	mov	r0, r2
 8004c52:	4619      	mov	r1, r3
 8004c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c56:	2200      	movs	r2, #0
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	60fa      	str	r2, [r7, #12]
 8004c5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c60:	f7fb fb16 	bl	8000290 <__aeabi_uldivmod>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4613      	mov	r3, r2
 8004c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	0c1b      	lsrs	r3, r3, #16
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	3301      	adds	r3, #1
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004c7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c86:	e002      	b.n	8004c8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c88:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3740      	adds	r7, #64	@ 0x40
 8004c94:	46bd      	mov	sp, r7
 8004c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	00f42400 	.word	0x00f42400
 8004ca4:	017d7840 	.word	0x017d7840

08004ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cac:	4b03      	ldr	r3, [pc, #12]	@ (8004cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004cae:	681b      	ldr	r3, [r3, #0]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20000048 	.word	0x20000048

08004cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cc4:	f7ff fff0 	bl	8004ca8 <HAL_RCC_GetHCLKFreq>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	4b05      	ldr	r3, [pc, #20]	@ (8004ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	0a9b      	lsrs	r3, r3, #10
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	4903      	ldr	r1, [pc, #12]	@ (8004ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cd6:	5ccb      	ldrb	r3, [r1, r3]
 8004cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	0800c0f0 	.word	0x0800c0f0

08004ce8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ce8:	b084      	sub	sp, #16
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	f107 001c 	add.w	r0, r7, #28
 8004cf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cfa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d123      	bne.n	8004d4a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d06:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004d16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d105      	bne.n	8004d3e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 faa0 	bl	8005284 <USB_CoreReset>
 8004d44:	4603      	mov	r3, r0
 8004d46:	73fb      	strb	r3, [r7, #15]
 8004d48:	e01b      	b.n	8004d82 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fa94 	bl	8005284 <USB_CoreReset>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d60:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d74:	e005      	b.n	8004d82 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d82:	7fbb      	ldrb	r3, [r7, #30]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d10b      	bne.n	8004da0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f043 0206 	orr.w	r2, r3, #6
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f043 0220 	orr.w	r2, r3, #32
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dac:	b004      	add	sp, #16
 8004dae:	4770      	bx	lr

08004db0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f023 0201 	bic.w	r2, r3, #1
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004dee:	78fb      	ldrb	r3, [r7, #3]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d115      	bne.n	8004e20 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004e00:	200a      	movs	r0, #10
 8004e02:	f7fd fc9d 	bl	8002740 <HAL_Delay>
      ms += 10U;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	330a      	adds	r3, #10
 8004e0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 fa2b 	bl	8005268 <USB_GetMode>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d01e      	beq.n	8004e56 <USB_SetCurrentMode+0x84>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2bc7      	cmp	r3, #199	@ 0xc7
 8004e1c:	d9f0      	bls.n	8004e00 <USB_SetCurrentMode+0x2e>
 8004e1e:	e01a      	b.n	8004e56 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d115      	bne.n	8004e52 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004e32:	200a      	movs	r0, #10
 8004e34:	f7fd fc84 	bl	8002740 <HAL_Delay>
      ms += 10U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	330a      	adds	r3, #10
 8004e3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 fa12 	bl	8005268 <USB_GetMode>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <USB_SetCurrentMode+0x84>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2bc7      	cmp	r3, #199	@ 0xc7
 8004e4e:	d9f0      	bls.n	8004e32 <USB_SetCurrentMode+0x60>
 8004e50:	e001      	b.n	8004e56 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e005      	b.n	8004e62 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2bc8      	cmp	r3, #200	@ 0xc8
 8004e5a:	d101      	bne.n	8004e60 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e000      	b.n	8004e62 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b086      	sub	sp, #24
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004e7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e86:	2300      	movs	r3, #0
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	e009      	b.n	8004ea0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	3340      	adds	r3, #64	@ 0x40
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	2200      	movs	r2, #0
 8004e98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	2b0e      	cmp	r3, #14
 8004ea4:	d9f2      	bls.n	8004e8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ea6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d11c      	bne.n	8004ee8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ebc:	f043 0302 	orr.w	r3, r3, #2
 8004ec0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ede:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ee6:	e00b      	b.n	8004f00 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eec:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f06:	461a      	mov	r2, r3
 8004f08:	2300      	movs	r3, #0
 8004f0a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f0c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d10d      	bne.n	8004f30 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d104      	bne.n	8004f26 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f968 	bl	80051f4 <USB_SetDevSpeed>
 8004f24:	e008      	b.n	8004f38 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f26:	2101      	movs	r1, #1
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f963 	bl	80051f4 <USB_SetDevSpeed>
 8004f2e:	e003      	b.n	8004f38 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f30:	2103      	movs	r1, #3
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f95e 	bl	80051f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f38:	2110      	movs	r1, #16
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f8fa 	bl	8005134 <USB_FlushTxFifo>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f924 	bl	8005198 <USB_FlushRxFifo>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f60:	461a      	mov	r2, r3
 8004f62:	2300      	movs	r3, #0
 8004f64:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	2300      	movs	r3, #0
 8004f70:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f78:	461a      	mov	r2, r3
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f7e:	2300      	movs	r3, #0
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	e043      	b.n	800500c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f9a:	d118      	bne.n	8004fce <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	e013      	b.n	8004fe0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	e008      	b.n	8004fe0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fda:	461a      	mov	r2, r3
 8004fdc:	2300      	movs	r3, #0
 8004fde:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fec:	461a      	mov	r2, r3
 8004fee:	2300      	movs	r3, #0
 8004ff0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ffe:	461a      	mov	r2, r3
 8005000:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005004:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	3301      	adds	r3, #1
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005010:	461a      	mov	r2, r3
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	4293      	cmp	r3, r2
 8005016:	d3b5      	bcc.n	8004f84 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005018:	2300      	movs	r3, #0
 800501a:	613b      	str	r3, [r7, #16]
 800501c:	e043      	b.n	80050a6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005030:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005034:	d118      	bne.n	8005068 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10a      	bne.n	8005052 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005048:	461a      	mov	r2, r3
 800504a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	e013      	b.n	800507a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800505e:	461a      	mov	r2, r3
 8005060:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	e008      	b.n	800507a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005074:	461a      	mov	r2, r3
 8005076:	2300      	movs	r3, #0
 8005078:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005086:	461a      	mov	r2, r3
 8005088:	2300      	movs	r3, #0
 800508a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005098:	461a      	mov	r2, r3
 800509a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800509e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	3301      	adds	r3, #1
 80050a4:	613b      	str	r3, [r7, #16]
 80050a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80050aa:	461a      	mov	r2, r3
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d3b5      	bcc.n	800501e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050c4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80050d2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80050d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d105      	bne.n	80050e8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	f043 0210 	orr.w	r2, r3, #16
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	699a      	ldr	r2, [r3, #24]
 80050ec:	4b10      	ldr	r3, [pc, #64]	@ (8005130 <USB_DevInit+0x2c4>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80050f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	f043 0208 	orr.w	r2, r3, #8
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005108:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800510c:	2b01      	cmp	r3, #1
 800510e:	d107      	bne.n	8005120 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005118:	f043 0304 	orr.w	r3, r3, #4
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005120:	7dfb      	ldrb	r3, [r7, #23]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800512c:	b004      	add	sp, #16
 800512e:	4770      	bx	lr
 8005130:	803c3800 	.word	0x803c3800

08005134 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3301      	adds	r3, #1
 8005146:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800514e:	d901      	bls.n	8005154 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e01b      	b.n	800518c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	daf2      	bge.n	8005142 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	019b      	lsls	r3, r3, #6
 8005164:	f043 0220 	orr.w	r2, r3, #32
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3301      	adds	r3, #1
 8005170:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005178:	d901      	bls.n	800517e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e006      	b.n	800518c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0320 	and.w	r3, r3, #32
 8005186:	2b20      	cmp	r3, #32
 8005188:	d0f0      	beq.n	800516c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	3301      	adds	r3, #1
 80051a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051b0:	d901      	bls.n	80051b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e018      	b.n	80051e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	daf2      	bge.n	80051a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2210      	movs	r2, #16
 80051c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	3301      	adds	r3, #1
 80051cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051d4:	d901      	bls.n	80051da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e006      	b.n	80051e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 0310 	and.w	r3, r3, #16
 80051e2:	2b10      	cmp	r3, #16
 80051e4:	d0f0      	beq.n	80051c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	460b      	mov	r3, r1
 80051fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	78fb      	ldrb	r3, [r7, #3]
 800520e:	68f9      	ldr	r1, [r7, #12]
 8005210:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005214:	4313      	orrs	r3, r2
 8005216:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005226:	b480      	push	{r7}
 8005228:	b085      	sub	sp, #20
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005240:	f023 0303 	bic.w	r3, r3, #3
 8005244:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005254:	f043 0302 	orr.w	r3, r3, #2
 8005258:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	f003 0301 	and.w	r3, r3, #1
}
 8005278:	4618      	mov	r0, r3
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	3301      	adds	r3, #1
 8005294:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800529c:	d901      	bls.n	80052a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e01b      	b.n	80052da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	daf2      	bge.n	8005290 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f043 0201 	orr.w	r2, r3, #1
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3301      	adds	r3, #1
 80052be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052c6:	d901      	bls.n	80052cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e006      	b.n	80052da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d0f0      	beq.n	80052ba <USB_CoreReset+0x36>

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <tud_hid_set_idle_cb>:
TU_ATTR_WEAK void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
  (void) instance;
  (void) protocol;
}

TU_ATTR_WEAK bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate) {
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	4603      	mov	r3, r0
 80052ee:	460a      	mov	r2, r1
 80052f0:	71fb      	strb	r3, [r7, #7]
 80052f2:	4613      	mov	r3, r2
 80052f4:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) idle_rate;
  return true;
 80052f6:	2301      	movs	r3, #1
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <tud_hid_report_failed_cb>:
  (void) report;
  (void) len;
}

// Invoked when a transfer wasn't successful
TU_ATTR_WEAK void tud_hid_report_failed_cb(uint8_t instance, hid_report_type_t report_type, uint8_t const* report, uint16_t xferred_bytes) {
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	603a      	str	r2, [r7, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	4603      	mov	r3, r0
 8005310:	71fb      	strb	r3, [r7, #7]
 8005312:	460b      	mov	r3, r1
 8005314:	71bb      	strb	r3, [r7, #6]
 8005316:	4613      	mov	r3, r2
 8005318:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report_type;
  (void) report;
  (void) xferred_bytes;
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
	...

08005328 <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	4603      	mov	r3, r0
 8005330:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 8005332:	2300      	movs	r3, #0
 8005334:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 8005336:	79fa      	ldrb	r2, [r7, #7]
 8005338:	491b      	ldr	r1, [pc, #108]	@ (80053a8 <tud_hid_n_ready+0x80>)
 800533a:	4613      	mov	r3, r2
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	440b      	add	r3, r1
 8005344:	3301      	adds	r3, #1
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	73bb      	strb	r3, [r7, #14]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 800534a:	f001 fd61 	bl	8006e10 <tud_mounted>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d009      	beq.n	8005368 <tud_hid_n_ready+0x40>
 8005354:	f001 fd6e 	bl	8006e34 <tud_suspended>
 8005358:	4603      	mov	r3, r0
 800535a:	f083 0301 	eor.w	r3, r3, #1
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <tud_hid_n_ready+0x40>
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <tud_hid_n_ready+0x42>
 8005368:	2300      	movs	r3, #0
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 8005370:	2b00      	cmp	r3, #0
 8005372:	d010      	beq.n	8005396 <tud_hid_n_ready+0x6e>
 8005374:	7bbb      	ldrb	r3, [r7, #14]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00d      	beq.n	8005396 <tud_hid_n_ready+0x6e>
 800537a:	7bba      	ldrb	r2, [r7, #14]
 800537c:	7bfb      	ldrb	r3, [r7, #15]
 800537e:	4611      	mov	r1, r2
 8005380:	4618      	mov	r0, r3
 8005382:	f003 f91f 	bl	80085c4 <usbd_edpt_busy>
 8005386:	4603      	mov	r3, r0
 8005388:	f083 0301 	eor.w	r3, r3, #1
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <tud_hid_n_ready+0x6e>
 8005392:	2301      	movs	r3, #1
 8005394:	e000      	b.n	8005398 <tud_hid_n_ready+0x70>
 8005396:	2300      	movs	r3, #0
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	b2db      	uxtb	r3, r3
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	20000f08 	.word	0x20000f08

080053ac <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const *report, uint16_t len) {
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08e      	sub	sp, #56	@ 0x38
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	603a      	str	r2, [r7, #0]
 80053b4:	461a      	mov	r2, r3
 80053b6:	4603      	mov	r3, r0
 80053b8:	71fb      	strb	r3, [r7, #7]
 80053ba:	460b      	mov	r3, r1
 80053bc:	71bb      	strb	r3, [r7, #6]
 80053be:	4613      	mov	r3, r2
 80053c0:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(instance < CFG_TUD_HID);
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <tud_hid_n_report+0x20>
 80053c8:	2300      	movs	r3, #0
 80053ca:	e06d      	b.n	80054a8 <tud_hid_n_report+0xfc>
  const uint8_t rhport = 0;
 80053cc:	2300      	movs	r3, #0
 80053ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  hidd_interface_t *p_hid = &_hidd_itf[instance];
 80053d2:	79fa      	ldrb	r2, [r7, #7]
 80053d4:	4613      	mov	r3, r2
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	4413      	add	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4a34      	ldr	r2, [pc, #208]	@ (80054b0 <tud_hid_n_report+0x104>)
 80053de:	4413      	add	r3, r2
 80053e0:	633b      	str	r3, [r7, #48]	@ 0x30
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 80053e2:	79fa      	ldrb	r2, [r7, #7]
 80053e4:	4613      	mov	r3, r2
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	4413      	add	r3, r2
 80053ea:	011b      	lsls	r3, r3, #4
 80053ec:	4a31      	ldr	r2, [pc, #196]	@ (80054b4 <tud_hid_n_report+0x108>)
 80053ee:	4413      	add	r3, r2
 80053f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_hid->ep_in));
 80053f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f4:	785a      	ldrb	r2, [r3, #1]
 80053f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80053fa:	4611      	mov	r1, r2
 80053fc:	4618      	mov	r0, r3
 80053fe:	f003 f81b 	bl	8008438 <usbd_edpt_claim>
 8005402:	4603      	mov	r3, r0
 8005404:	f083 0301 	eor.w	r3, r3, #1
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <tud_hid_n_report+0x66>
 800540e:	2300      	movs	r3, #0
 8005410:	e04a      	b.n	80054a8 <tud_hid_n_report+0xfc>

  // prepare data
  if (report_id) {
 8005412:	79bb      	ldrb	r3, [r7, #6]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d021      	beq.n	800545c <tud_hid_n_report+0xb0>
    p_epbuf->epin[0] = report_id;
 8005418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800541a:	79ba      	ldrb	r2, [r7, #6]
 800541c:	741a      	strb	r2, [r3, #16]
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin + 1, CFG_TUD_HID_EP_BUFSIZE - 1, report, len));
 800541e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005420:	3310      	adds	r3, #16
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	88bb      	ldrh	r3, [r7, #4]
 8005426:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005428:	220f      	movs	r2, #15
 800542a:	627a      	str	r2, [r7, #36]	@ 0x24
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	623a      	str	r2, [r7, #32]
 8005430:	61fb      	str	r3, [r7, #28]
}

// This is a backport of memcpy_s from c11
TU_ATTR_ALWAYS_INLINE static inline int tu_memcpy_s(void *dest, size_t destsz, const void *src, size_t count) {
  // TODO may check if desst and src is not NULL
  if ( count > destsz ) {
 8005432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	429a      	cmp	r2, r3
 8005438:	d202      	bcs.n	8005440 <tud_hid_n_report+0x94>
    return -1;
 800543a:	f04f 33ff 	mov.w	r3, #4294967295
 800543e:	e005      	b.n	800544c <tud_hid_n_report+0xa0>
  }
  memcpy(dest, src, count);
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	6a39      	ldr	r1, [r7, #32]
 8005444:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005446:	f005 fe95 	bl	800b174 <memcpy>
  return 0;
 800544a:	2300      	movs	r3, #0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <tud_hid_n_report+0xa8>
 8005450:	2300      	movs	r3, #0
 8005452:	e029      	b.n	80054a8 <tud_hid_n_report+0xfc>
    len++;
 8005454:	88bb      	ldrh	r3, [r7, #4]
 8005456:	3301      	adds	r3, #1
 8005458:	80bb      	strh	r3, [r7, #4]
 800545a:	e01a      	b.n	8005492 <tud_hid_n_report+0xe6>
  } else {
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin, CFG_TUD_HID_EP_BUFSIZE, report, len));
 800545c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800545e:	f103 0210 	add.w	r2, r3, #16
 8005462:	88bb      	ldrh	r3, [r7, #4]
 8005464:	61ba      	str	r2, [r7, #24]
 8005466:	2210      	movs	r2, #16
 8005468:	617a      	str	r2, [r7, #20]
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	613a      	str	r2, [r7, #16]
 800546e:	60fb      	str	r3, [r7, #12]
  if ( count > destsz ) {
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	429a      	cmp	r2, r3
 8005476:	d202      	bcs.n	800547e <tud_hid_n_report+0xd2>
    return -1;
 8005478:	f04f 33ff 	mov.w	r3, #4294967295
 800547c:	e005      	b.n	800548a <tud_hid_n_report+0xde>
  memcpy(dest, src, count);
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	6939      	ldr	r1, [r7, #16]
 8005482:	69b8      	ldr	r0, [r7, #24]
 8005484:	f005 fe76 	bl	800b174 <memcpy>
  return 0;
 8005488:	2300      	movs	r3, #0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <tud_hid_n_report+0xe6>
 800548e:	2300      	movs	r3, #0
 8005490:	e00a      	b.n	80054a8 <tud_hid_n_report+0xfc>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_epbuf->epin, len);
 8005492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005494:	7859      	ldrb	r1, [r3, #1]
 8005496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005498:	f103 0210 	add.w	r2, r3, #16
 800549c:	88bb      	ldrh	r3, [r7, #4]
 800549e:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 80054a2:	f003 f819 	bl	80084d8 <usbd_edpt_xfer>
 80054a6:	4603      	mov	r3, r0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3738      	adds	r7, #56	@ 0x38
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	20000f08 	.word	0x20000f08
 80054b4:	20000f14 	.word	0x20000f14

080054b8 <tud_hid_n_keyboard_report>:

uint8_t tud_hid_n_get_protocol(uint8_t instance) {
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	4603      	mov	r3, r0
 80054c2:	71fb      	strb	r3, [r7, #7]
 80054c4:	460b      	mov	r3, r1
 80054c6:	71bb      	strb	r3, [r7, #6]
 80054c8:	4613      	mov	r3, r2
 80054ca:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;
  report.modifier = modifier;
 80054cc:	797b      	ldrb	r3, [r7, #5]
 80054ce:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 80054d0:	2300      	movs	r3, #0
 80054d2:	727b      	strb	r3, [r7, #9]

  if (keycode) {
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d007      	beq.n	80054ea <tud_hid_n_keyboard_report+0x32>
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	f107 030a 	add.w	r3, r7, #10
 80054e0:	6811      	ldr	r1, [r2, #0]
 80054e2:	6019      	str	r1, [r3, #0]
 80054e4:	8892      	ldrh	r2, [r2, #4]
 80054e6:	809a      	strh	r2, [r3, #4]
 80054e8:	e007      	b.n	80054fa <tud_hid_n_keyboard_report+0x42>
  } else {
    tu_memclr(report.keycode, 6);
 80054ea:	f107 0308 	add.w	r3, r7, #8
 80054ee:	3302      	adds	r3, #2
 80054f0:	2206      	movs	r2, #6
 80054f2:	2100      	movs	r1, #0
 80054f4:	4618      	mov	r0, r3
 80054f6:	f005 fe09 	bl	800b10c <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 80054fa:	f107 0208 	add.w	r2, r7, #8
 80054fe:	79b9      	ldrb	r1, [r7, #6]
 8005500:	79f8      	ldrb	r0, [r7, #7]
 8005502:	2308      	movs	r3, #8
 8005504:	f7ff ff52 	bl	80053ac <tud_hid_n_report>
 8005508:	4603      	mov	r3, r0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <hidd_init>:
}

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void) {
 8005512:	b580      	push	{r7, lr}
 8005514:	af00      	add	r7, sp, #0
  hidd_reset(0);
 8005516:	2000      	movs	r0, #0
 8005518:	f000 f80a 	bl	8005530 <hidd_reset>
}
 800551c:	bf00      	nop
 800551e:	bd80      	pop	{r7, pc}

08005520 <hidd_deinit>:

bool hidd_deinit(void) {
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  return true;
 8005524:	2301      	movs	r3, #1
}
 8005526:	4618      	mov	r0, r3
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <hidd_reset>:

void hidd_reset(uint8_t rhport) {
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 800553a:	220c      	movs	r2, #12
 800553c:	2100      	movs	r1, #0
 800553e:	4803      	ldr	r0, [pc, #12]	@ (800554c <hidd_reset+0x1c>)
 8005540:	f005 fde4 	bl	800b10c <memset>
}
 8005544:	bf00      	nop
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	20000f08 	.word	0x20000f08

08005550 <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const *desc_itf, uint16_t max_len) {
 8005550:	b580      	push	{r7, lr}
 8005552:	b094      	sub	sp, #80	@ 0x50
 8005554:	af02      	add	r7, sp, #8
 8005556:	4603      	mov	r3, r0
 8005558:	6039      	str	r1, [r7, #0]
 800555a:	71fb      	strb	r3, [r7, #7]
 800555c:	4613      	mov	r3, r2
 800555e:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	795b      	ldrb	r3, [r3, #5]
 8005564:	2b03      	cmp	r3, #3
 8005566:	d001      	beq.n	800556c <hidd_open+0x1c>
 8005568:	2300      	movs	r3, #0
 800556a:	e0ce      	b.n	800570a <hidd_open+0x1ba>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	791b      	ldrb	r3, [r3, #4]
 8005570:	461a      	mov	r2, r3
 8005572:	00d2      	lsls	r2, r2, #3
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 8005578:	3312      	adds	r3, #18
 800557a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  TU_ASSERT(max_len >= drv_len, 0);
 800557e:	88ba      	ldrh	r2, [r7, #4]
 8005580:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005584:	429a      	cmp	r2, r3
 8005586:	d20a      	bcs.n	800559e <hidd_open+0x4e>
 8005588:	4b62      	ldr	r3, [pc, #392]	@ (8005714 <hidd_open+0x1c4>)
 800558a:	627b      	str	r3, [r7, #36]	@ 0x24
 800558c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d000      	beq.n	800559a <hidd_open+0x4a>
 8005598:	be00      	bkpt	0x0000
 800559a:	2300      	movs	r3, #0
 800559c:	e0b5      	b.n	800570a <hidd_open+0x1ba>

  // Find available interface
  hidd_interface_t *p_hid;
  uint8_t hid_id;
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 800559e:	2300      	movs	r3, #0
 80055a0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055a4:	e011      	b.n	80055ca <hidd_open+0x7a>
    p_hid = &_hidd_itf[hid_id];
 80055a6:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80055aa:	4613      	mov	r3, r2
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	4413      	add	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4a59      	ldr	r2, [pc, #356]	@ (8005718 <hidd_open+0x1c8>)
 80055b4:	4413      	add	r3, r2
 80055b6:	647b      	str	r3, [r7, #68]	@ 0x44
    if (p_hid->ep_in == 0) {
 80055b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ba:	785b      	ldrb	r3, [r3, #1]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d009      	beq.n	80055d4 <hidd_open+0x84>
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 80055c0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80055c4:	3301      	adds	r3, #1
 80055c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0e9      	beq.n	80055a6 <hidd_open+0x56>
 80055d2:	e000      	b.n	80055d6 <hidd_open+0x86>
      break;
 80055d4:	bf00      	nop
    }
  }
  TU_ASSERT(hid_id < CFG_TUD_HID, 0);
 80055d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <hidd_open+0xa4>
 80055de:	4b4d      	ldr	r3, [pc, #308]	@ (8005714 <hidd_open+0x1c4>)
 80055e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d000      	beq.n	80055f0 <hidd_open+0xa0>
 80055ee:	be00      	bkpt	0x0000
 80055f0:	2300      	movs	r3, #0
 80055f2:	e08a      	b.n	800570a <hidd_open+0x1ba>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_id];
 80055f4:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80055f8:	4613      	mov	r3, r2
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	4413      	add	r3, r2
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	4a46      	ldr	r2, [pc, #280]	@ (800571c <hidd_open+0x1cc>)
 8005602:	4413      	add	r3, r2
 8005604:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint8_t const *p_desc = (uint8_t const *)desc_itf;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	63bb      	str	r3, [r7, #56]	@ 0x38
 800560a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800560c:	61fb      	str	r3, [r7, #28]
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 800561c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800561e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005620:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	3301      	adds	r3, #1
 8005626:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 8005628:	2b21      	cmp	r3, #33	@ 0x21
 800562a:	d00a      	beq.n	8005642 <hidd_open+0xf2>
 800562c:	4b39      	ldr	r3, [pc, #228]	@ (8005714 <hidd_open+0x1c4>)
 800562e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d000      	beq.n	800563e <hidd_open+0xee>
 800563c:	be00      	bkpt	0x0000
 800563e:	2300      	movs	r3, #0
 8005640:	e063      	b.n	800570a <hidd_open+0x1ba>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *)p_desc;
 8005642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005644:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005646:	609a      	str	r2, [r3, #8]
 8005648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564a:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	461a      	mov	r2, r3
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 800565a:	63bb      	str	r3, [r7, #56]	@ 0x38
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	7919      	ldrb	r1, [r3, #4]
 8005660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005662:	3302      	adds	r3, #2
 8005664:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005666:	3201      	adds	r2, #1
 8005668:	79f8      	ldrb	r0, [r7, #7]
 800566a:	9201      	str	r2, [sp, #4]
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	2303      	movs	r3, #3
 8005670:	460a      	mov	r2, r1
 8005672:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005674:	f002 fe32 	bl	80082dc <usbd_open_edpt_pair>
 8005678:	4603      	mov	r3, r0
 800567a:	f083 0301 	eor.w	r3, r3, #1
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00a      	beq.n	800569a <hidd_open+0x14a>
 8005684:	4b23      	ldr	r3, [pc, #140]	@ (8005714 <hidd_open+0x1c4>)
 8005686:	633b      	str	r3, [r7, #48]	@ 0x30
 8005688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d000      	beq.n	8005696 <hidd_open+0x146>
 8005694:	be00      	bkpt	0x0000
 8005696:	2300      	movs	r3, #0
 8005698:	e037      	b.n	800570a <hidd_open+0x1ba>

  if (desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT) {
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	799b      	ldrb	r3, [r3, #6]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d103      	bne.n	80056aa <hidd_open+0x15a>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	79da      	ldrb	r2, [r3, #7]
 80056a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056a8:	70da      	strb	r2, [r3, #3]
  }

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 80056aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ac:	2201      	movs	r2, #1
 80056ae:	719a      	strb	r2, [r3, #6]
  p_hid->itf_num = desc_itf->bInterfaceNumber;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	789a      	ldrb	r2, [r3, #2]
 80056b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056b6:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const *)p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 80056b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	3307      	adds	r3, #7
 80056be:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	881a      	ldrh	r2, [r3, #0]
 80056c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056c6:	809a      	strh	r2, [r3, #4]

  // Prepare for output endpoint
  if (p_hid->ep_out) {
 80056c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ca:	789b      	ldrb	r3, [r3, #2]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01a      	beq.n	8005706 <hidd_open+0x1b6>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE), drv_len);
 80056d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056d2:	7899      	ldrb	r1, [r3, #2]
 80056d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d6:	f103 0220 	add.w	r2, r3, #32
 80056da:	79f8      	ldrb	r0, [r7, #7]
 80056dc:	2310      	movs	r3, #16
 80056de:	f002 fefb 	bl	80084d8 <usbd_edpt_xfer>
 80056e2:	4603      	mov	r3, r0
 80056e4:	f083 0301 	eor.w	r3, r3, #1
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00b      	beq.n	8005706 <hidd_open+0x1b6>
 80056ee:	4b09      	ldr	r3, [pc, #36]	@ (8005714 <hidd_open+0x1c4>)
 80056f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80056f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d000      	beq.n	8005700 <hidd_open+0x1b0>
 80056fe:	be00      	bkpt	0x0000
 8005700:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005704:	e001      	b.n	800570a <hidd_open+0x1ba>
  }

  return drv_len;
 8005706:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
}
 800570a:	4618      	mov	r0, r3
 800570c:	3748      	adds	r7, #72	@ 0x48
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	e000edf0 	.word	0xe000edf0
 8005718:	20000f08 	.word	0x20000f08
 800571c:	20000f14 	.word	0x20000f14

08005720 <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 8005720:	b580      	push	{r7, lr}
 8005722:	b094      	sub	sp, #80	@ 0x50
 8005724:	af02      	add	r7, sp, #8
 8005726:	4603      	mov	r3, r0
 8005728:	603a      	str	r2, [r7, #0]
 800572a:	71fb      	strb	r3, [r7, #7]
 800572c:	460b      	mov	r3, r1
 800572e:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	f003 031f 	and.w	r3, r3, #31
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b01      	cmp	r3, #1
 800573c:	d001      	beq.n	8005742 <hidd_control_xfer_cb+0x22>
 800573e:	2300      	movs	r3, #0
 8005740:	e1d6      	b.n	8005af0 <hidd_control_xfer_cb+0x3d0>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	889b      	ldrh	r3, [r3, #4]
 8005746:	b29b      	uxth	r3, r3
 8005748:	b2db      	uxtb	r3, r3
 800574a:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 800574c:	2300      	movs	r3, #0
 800574e:	77bb      	strb	r3, [r7, #30]
 8005750:	e00f      	b.n	8005772 <hidd_control_xfer_cb+0x52>
    if (itf_num == _hidd_itf[i].itf_num) {
 8005752:	7fba      	ldrb	r2, [r7, #30]
 8005754:	498f      	ldr	r1, [pc, #572]	@ (8005994 <hidd_control_xfer_cb+0x274>)
 8005756:	4613      	mov	r3, r2
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	4413      	add	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	440b      	add	r3, r1
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	7ffa      	ldrb	r2, [r7, #31]
 8005764:	429a      	cmp	r2, r3
 8005766:	d101      	bne.n	800576c <hidd_control_xfer_cb+0x4c>
      return i;
 8005768:	7fbb      	ldrb	r3, [r7, #30]
 800576a:	e006      	b.n	800577a <hidd_control_xfer_cb+0x5a>
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 800576c:	7fbb      	ldrb	r3, [r7, #30]
 800576e:	3301      	adds	r3, #1
 8005770:	77bb      	strb	r3, [r7, #30]
 8005772:	7fbb      	ldrb	r3, [r7, #30]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0ec      	beq.n	8005752 <hidd_control_xfer_cb+0x32>
  return 0xFF;
 8005778:	23ff      	movs	r3, #255	@ 0xff
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 800577a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 800577e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <hidd_control_xfer_cb+0x6a>
 8005786:	2300      	movs	r3, #0
 8005788:	e1b2      	b.n	8005af0 <hidd_control_xfer_cb+0x3d0>
  hidd_interface_t *p_hid = &_hidd_itf[hid_itf];
 800578a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800578e:	4613      	mov	r3, r2
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	4413      	add	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4a7f      	ldr	r2, [pc, #508]	@ (8005994 <hidd_control_xfer_cb+0x274>)
 8005798:	4413      	add	r3, r2
 800579a:	637b      	str	r3, [r7, #52]	@ 0x34
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_itf];
 800579c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80057a0:	4613      	mov	r3, r2
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	4413      	add	r3, r2
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	4a7b      	ldr	r2, [pc, #492]	@ (8005998 <hidd_control_xfer_cb+0x278>)
 80057aa:	4413      	add	r3, r2
 80057ac:	633b      	str	r3, [r7, #48]	@ 0x30

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) {
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d145      	bne.n	8005848 <hidd_control_xfer_cb+0x128>
    //------------- STD Request -------------//
    if (stage == CONTROL_STAGE_SETUP) {
 80057bc:	79bb      	ldrb	r3, [r7, #6]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	f040 8195 	bne.w	8005aee <hidd_control_xfer_cb+0x3ce>
      uint8_t const desc_type = tu_u16_high(request->wValue);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	885b      	ldrh	r3, [r3, #2]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80057cc:	8bbb      	ldrh	r3, [r7, #28]
 80057ce:	0a1b      	lsrs	r3, r3, #8
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID) {
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	785b      	ldrb	r3, [r3, #1]
 80057dc:	2b06      	cmp	r3, #6
 80057de:	d11b      	bne.n	8005818 <hidd_control_xfer_cb+0xf8>
 80057e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057e4:	2b21      	cmp	r3, #33	@ 0x21
 80057e6:	d117      	bne.n	8005818 <hidd_control_xfer_cb+0xf8>
        TU_VERIFY(p_hid->hid_descriptor);
 80057e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <hidd_control_xfer_cb+0xd4>
 80057f0:	2300      	movs	r3, #0
 80057f2:	e17d      	b.n	8005af0 <hidd_control_xfer_cb+0x3d0>
        TU_VERIFY(tud_control_xfer(rhport, request, (void *)(uintptr_t)p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 80057f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	79f8      	ldrb	r0, [r7, #7]
 8005800:	6839      	ldr	r1, [r7, #0]
 8005802:	f003 f851 	bl	80088a8 <tud_control_xfer>
 8005806:	4603      	mov	r3, r0
 8005808:	f083 0301 	eor.w	r3, r3, #1
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 816d 	beq.w	8005aee <hidd_control_xfer_cb+0x3ce>
 8005814:	2300      	movs	r3, #0
 8005816:	e16b      	b.n	8005af0 <hidd_control_xfer_cb+0x3d0>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	2b06      	cmp	r3, #6
 800581e:	d111      	bne.n	8005844 <hidd_control_xfer_cb+0x124>
 8005820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005824:	2b22      	cmp	r3, #34	@ 0x22
 8005826:	d10d      	bne.n	8005844 <hidd_control_xfer_cb+0x124>
        uint8_t const *desc_report = tud_hid_descriptor_report_cb(hid_itf);
 8005828:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800582c:	4618      	mov	r0, r3
 800582e:	f7fc fe33 	bl	8002498 <tud_hid_descriptor_report_cb>
 8005832:	6238      	str	r0, [r7, #32]
        tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_report, p_hid->report_desc_len);
 8005834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005836:	889b      	ldrh	r3, [r3, #4]
 8005838:	79f8      	ldrb	r0, [r7, #7]
 800583a:	6a3a      	ldr	r2, [r7, #32]
 800583c:	6839      	ldr	r1, [r7, #0]
 800583e:	f003 f833 	bl	80088a8 <tud_control_xfer>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8005842:	e154      	b.n	8005aee <hidd_control_xfer_cb+0x3ce>
      } else {
        return false; // stall unsupported request
 8005844:	2300      	movs	r3, #0
 8005846:	e153      	b.n	8005af0 <hidd_control_xfer_cb+0x3d0>
      }
    }
  } else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS) {
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b20      	cmp	r3, #32
 8005854:	f040 813e 	bne.w	8005ad4 <hidd_control_xfer_cb+0x3b4>
    //------------- Class Specific Request -------------//
    switch (request->bRequest) {
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	785b      	ldrb	r3, [r3, #1]
 800585c:	3b01      	subs	r3, #1
 800585e:	2b0a      	cmp	r3, #10
 8005860:	f200 8136 	bhi.w	8005ad0 <hidd_control_xfer_cb+0x3b0>
 8005864:	a201      	add	r2, pc, #4	@ (adr r2, 800586c <hidd_control_xfer_cb+0x14c>)
 8005866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586a:	bf00      	nop
 800586c:	08005899 	.word	0x08005899
 8005870:	08005a6f 	.word	0x08005a6f
 8005874:	08005a85 	.word	0x08005a85
 8005878:	08005ad1 	.word	0x08005ad1
 800587c:	08005ad1 	.word	0x08005ad1
 8005880:	08005ad1 	.word	0x08005ad1
 8005884:	08005ad1 	.word	0x08005ad1
 8005888:	08005ad1 	.word	0x08005ad1
 800588c:	0800596f 	.word	0x0800596f
 8005890:	08005a29 	.word	0x08005a29
 8005894:	08005a9b 	.word	0x08005a9b
      case HID_REQ_CONTROL_GET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8005898:	79bb      	ldrb	r3, [r7, #6]
 800589a:	2b01      	cmp	r3, #1
 800589c:	f040 811c 	bne.w	8005ad8 <hidd_control_xfer_cb+0x3b8>
          uint8_t const report_type = tu_u16_high(request->wValue);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	885b      	ldrh	r3, [r3, #2]
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	82bb      	strh	r3, [r7, #20]
 80058a8:	8abb      	ldrh	r3, [r7, #20]
 80058aa:	0a1b      	lsrs	r3, r3, #8
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          uint8_t const report_id = tu_u16_low(request->wValue);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	885b      	ldrh	r3, [r3, #2]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80058bc:	8afb      	ldrh	r3, [r7, #22]
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

          uint8_t* report_buf = p_epbuf->ctrl;
 80058c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c6:	647b      	str	r3, [r7, #68]	@ 0x44
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	88db      	ldrh	r3, [r3, #6]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	837b      	strh	r3, [r7, #26]
 80058d0:	2310      	movs	r3, #16
 80058d2:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80058d4:	8b7a      	ldrh	r2, [r7, #26]
 80058d6:	8b3b      	ldrh	r3, [r7, #24]
 80058d8:	4293      	cmp	r3, r2
 80058da:	bf28      	it	cs
 80058dc:	4613      	movcs	r3, r2
 80058de:	b29b      	uxth	r3, r3
 80058e0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          uint16_t xferlen = 0;
 80058e4:	2300      	movs	r3, #0
 80058e6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ((report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1)) {
 80058ea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d013      	beq.n	800591a <hidd_control_xfer_cb+0x1fa>
 80058f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d90f      	bls.n	800591a <hidd_control_xfer_cb+0x1fa>
            *report_buf++ = report_id;
 80058fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8005900:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005904:	701a      	strb	r2, [r3, #0]
            req_len--;
 8005906:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800590a:	3b01      	subs	r3, #1
 800590c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            xferlen++;
 8005910:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005914:	3301      	adds	r3, #1
 8005916:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 800591a:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800591e:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8005922:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8005926:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800592e:	f7fa ff9b 	bl	8000868 <tud_hid_get_report_cb>
 8005932:	4603      	mov	r3, r0
 8005934:	461a      	mov	r2, r3
 8005936:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800593a:	4413      	add	r3, r2
 800593c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          TU_ASSERT(xferlen > 0);
 8005940:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10a      	bne.n	800595e <hidd_control_xfer_cb+0x23e>
 8005948:	4b14      	ldr	r3, [pc, #80]	@ (800599c <hidd_control_xfer_cb+0x27c>)
 800594a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800594c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d000      	beq.n	800595a <hidd_control_xfer_cb+0x23a>
 8005958:	be00      	bkpt	0x0000
 800595a:	2300      	movs	r3, #0
 800595c:	e0c8      	b.n	8005af0 <hidd_control_xfer_cb+0x3d0>

          tud_control_xfer(rhport, request, p_epbuf->ctrl, xferlen);
 800595e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005960:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005964:	79f8      	ldrb	r0, [r7, #7]
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	f002 ff9e 	bl	80088a8 <tud_control_xfer>
        }
        break;
 800596c:	e0b4      	b.n	8005ad8 <hidd_control_xfer_cb+0x3b8>

      case HID_REQ_CONTROL_SET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 800596e:	79bb      	ldrb	r3, [r7, #6]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d115      	bne.n	80059a0 <hidd_control_xfer_cb+0x280>
          TU_VERIFY(request->wLength <= CFG_TUD_HID_EP_BUFSIZE);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	88db      	ldrh	r3, [r3, #6]
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b10      	cmp	r3, #16
 800597c:	d901      	bls.n	8005982 <hidd_control_xfer_cb+0x262>
 800597e:	2300      	movs	r3, #0
 8005980:	e0b6      	b.n	8005af0 <hidd_control_xfer_cb+0x3d0>
          tud_control_xfer(rhport, request, p_epbuf->ctrl, request->wLength);
 8005982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	88db      	ldrh	r3, [r3, #6]
 8005988:	b29b      	uxth	r3, r3
 800598a:	79f8      	ldrb	r0, [r7, #7]
 800598c:	6839      	ldr	r1, [r7, #0]
 800598e:	f002 ff8b 	bl	80088a8 <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
        break;
 8005992:	e0a3      	b.n	8005adc <hidd_control_xfer_cb+0x3bc>
 8005994:	20000f08 	.word	0x20000f08
 8005998:	20000f14 	.word	0x20000f14
 800599c:	e000edf0 	.word	0xe000edf0
        } else if (stage == CONTROL_STAGE_ACK) {
 80059a0:	79bb      	ldrb	r3, [r7, #6]
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	f040 809a 	bne.w	8005adc <hidd_control_xfer_cb+0x3bc>
          uint8_t const report_type = tu_u16_high(request->wValue);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	885b      	ldrh	r3, [r3, #2]
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80059b0:	89bb      	ldrh	r3, [r7, #12]
 80059b2:	0a1b      	lsrs	r3, r3, #8
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          uint8_t const report_id = tu_u16_low(request->wValue);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	885b      	ldrh	r3, [r3, #2]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80059c4:	89fb      	ldrh	r3, [r7, #14]
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          uint8_t const* report_buf = p_epbuf->ctrl;
 80059cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	88db      	ldrh	r3, [r3, #6]
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	827b      	strh	r3, [r7, #18]
 80059d8:	2310      	movs	r3, #16
 80059da:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80059dc:	8a7a      	ldrh	r2, [r7, #18]
 80059de:	8a3b      	ldrh	r3, [r7, #16]
 80059e0:	4293      	cmp	r3, r2
 80059e2:	bf28      	it	cs
 80059e4:	4613      	movcs	r3, r2
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	877b      	strh	r3, [r7, #58]	@ 0x3a
          if ((report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0])) {
 80059ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00e      	beq.n	8005a10 <hidd_control_xfer_cb+0x2f0>
 80059f2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d90b      	bls.n	8005a10 <hidd_control_xfer_cb+0x2f0>
 80059f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d105      	bne.n	8005a10 <hidd_control_xfer_cb+0x2f0>
            report_buf++;
 8005a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a06:	3301      	adds	r3, #1
 8005a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
            report_len--;
 8005a0a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	877b      	strh	r3, [r7, #58]	@ 0x3a
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 8005a10:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005a14:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8005a18:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8005a1c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a22:	f7fa ff32 	bl	800088a <tud_hid_set_report_cb>
        break;
 8005a26:	e059      	b.n	8005adc <hidd_control_xfer_cb+0x3bc>

      case HID_REQ_CONTROL_SET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8005a28:	79bb      	ldrb	r3, [r7, #6]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d158      	bne.n	8005ae0 <hidd_control_xfer_cb+0x3c0>
          p_hid->idle_rate = tu_u16_high(request->wValue);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	885b      	ldrh	r3, [r3, #2]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8005a36:	897b      	ldrh	r3, [r7, #10]
 8005a38:	0a1b      	lsrs	r3, r3, #8
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a40:	71da      	strb	r2, [r3, #7]
          TU_VERIFY(tud_hid_set_idle_cb(hid_itf, p_hid->idle_rate)); // stall if false
 8005a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a44:	79da      	ldrb	r2, [r3, #7]
 8005a46:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7ff fc4a 	bl	80052e6 <tud_hid_set_idle_cb>
 8005a52:	4603      	mov	r3, r0
 8005a54:	f083 0301 	eor.w	r3, r3, #1
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <hidd_control_xfer_cb+0x342>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	e046      	b.n	8005af0 <hidd_control_xfer_cb+0x3d0>
          tud_control_status(rhport, request);
 8005a62:	79fb      	ldrb	r3, [r7, #7]
 8005a64:	6839      	ldr	r1, [r7, #0]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f002 feac 	bl	80087c4 <tud_control_status>
        }
        break;
 8005a6c:	e038      	b.n	8005ae0 <hidd_control_xfer_cb+0x3c0>

      case HID_REQ_CONTROL_GET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8005a6e:	79bb      	ldrb	r3, [r7, #6]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d137      	bne.n	8005ae4 <hidd_control_xfer_cb+0x3c4>
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 8005a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a76:	1dda      	adds	r2, r3, #7
 8005a78:	79f8      	ldrb	r0, [r7, #7]
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	f002 ff13 	bl	80088a8 <tud_control_xfer>
        }
        break;
 8005a82:	e02f      	b.n	8005ae4 <hidd_control_xfer_cb+0x3c4>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8005a84:	79bb      	ldrb	r3, [r7, #6]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d12e      	bne.n	8005ae8 <hidd_control_xfer_cb+0x3c8>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8c:	1d9a      	adds	r2, r3, #6
 8005a8e:	79f8      	ldrb	r0, [r7, #7]
 8005a90:	2301      	movs	r3, #1
 8005a92:	6839      	ldr	r1, [r7, #0]
 8005a94:	f002 ff08 	bl	80088a8 <tud_control_xfer>
        }
        break;
 8005a98:	e026      	b.n	8005ae8 <hidd_control_xfer_cb+0x3c8>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8005a9a:	79bb      	ldrb	r3, [r7, #6]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d105      	bne.n	8005aac <hidd_control_xfer_cb+0x38c>
          tud_control_status(rhport, request);
 8005aa0:	79fb      	ldrb	r3, [r7, #7]
 8005aa2:	6839      	ldr	r1, [r7, #0]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f002 fe8d 	bl	80087c4 <tud_control_status>
        } else if (stage == CONTROL_STAGE_ACK) {
          p_hid->protocol_mode = (uint8_t) request->wValue;
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
        }
        break;
 8005aaa:	e01f      	b.n	8005aec <hidd_control_xfer_cb+0x3cc>
        } else if (stage == CONTROL_STAGE_ACK) {
 8005aac:	79bb      	ldrb	r3, [r7, #6]
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	d11c      	bne.n	8005aec <hidd_control_xfer_cb+0x3cc>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	885b      	ldrh	r3, [r3, #2]
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005abc:	719a      	strb	r2, [r3, #6]
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 8005abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ac0:	799a      	ldrb	r2, [r3, #6]
 8005ac2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005ac6:	4611      	mov	r1, r2
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fa feb1 	bl	8000830 <tud_hid_set_protocol_cb>
        break;
 8005ace:	e00d      	b.n	8005aec <hidd_control_xfer_cb+0x3cc>

      default:
        return false; // stall unsupported request
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e00d      	b.n	8005af0 <hidd_control_xfer_cb+0x3d0>
    }
  } else {
    return false; // stall unsupported request
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	e00b      	b.n	8005af0 <hidd_control_xfer_cb+0x3d0>
        break;
 8005ad8:	bf00      	nop
 8005ada:	e008      	b.n	8005aee <hidd_control_xfer_cb+0x3ce>
        break;
 8005adc:	bf00      	nop
 8005ade:	e006      	b.n	8005aee <hidd_control_xfer_cb+0x3ce>
        break;
 8005ae0:	bf00      	nop
 8005ae2:	e004      	b.n	8005aee <hidd_control_xfer_cb+0x3ce>
        break;
 8005ae4:	bf00      	nop
 8005ae6:	e002      	b.n	8005aee <hidd_control_xfer_cb+0x3ce>
        break;
 8005ae8:	bf00      	nop
 8005aea:	e000      	b.n	8005aee <hidd_control_xfer_cb+0x3ce>
        break;
 8005aec:	bf00      	nop
  }

  return true;
 8005aee:	2301      	movs	r3, #1
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3748      	adds	r7, #72	@ 0x48
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08a      	sub	sp, #40	@ 0x28
 8005afc:	af02      	add	r7, sp, #8
 8005afe:	603b      	str	r3, [r7, #0]
 8005b00:	4603      	mov	r3, r0
 8005b02:	71fb      	strb	r3, [r7, #7]
 8005b04:	460b      	mov	r3, r1
 8005b06:	71bb      	strb	r3, [r7, #6]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	717b      	strb	r3, [r7, #5]
  uint8_t instance;
  hidd_interface_t *p_hid;

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	77fb      	strb	r3, [r7, #31]
 8005b10:	e014      	b.n	8005b3c <hidd_xfer_cb+0x44>
    p_hid = &_hidd_itf[instance];
 8005b12:	7ffa      	ldrb	r2, [r7, #31]
 8005b14:	4613      	mov	r3, r2
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4a3e      	ldr	r2, [pc, #248]	@ (8005c18 <hidd_xfer_cb+0x120>)
 8005b1e:	4413      	add	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in)) {
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	789b      	ldrb	r3, [r3, #2]
 8005b26:	79ba      	ldrb	r2, [r7, #6]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d00a      	beq.n	8005b42 <hidd_xfer_cb+0x4a>
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	785b      	ldrb	r3, [r3, #1]
 8005b30:	79ba      	ldrb	r2, [r7, #6]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d005      	beq.n	8005b42 <hidd_xfer_cb+0x4a>
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8005b36:	7ffb      	ldrb	r3, [r7, #31]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	77fb      	strb	r3, [r7, #31]
 8005b3c:	7ffb      	ldrb	r3, [r7, #31]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0e7      	beq.n	8005b12 <hidd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 8005b42:	7ffb      	ldrb	r3, [r7, #31]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00a      	beq.n	8005b5e <hidd_xfer_cb+0x66>
 8005b48:	4b34      	ldr	r3, [pc, #208]	@ (8005c1c <hidd_xfer_cb+0x124>)
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d000      	beq.n	8005b5a <hidd_xfer_cb+0x62>
 8005b58:	be00      	bkpt	0x0000
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e057      	b.n	8005c0e <hidd_xfer_cb+0x116>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8005b5e:	7ffa      	ldrb	r2, [r7, #31]
 8005b60:	4613      	mov	r3, r2
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	4413      	add	r3, r2
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	4a2d      	ldr	r2, [pc, #180]	@ (8005c20 <hidd_xfer_cb+0x128>)
 8005b6a:	4413      	add	r3, r2
 8005b6c:	617b      	str	r3, [r7, #20]

  if (ep_addr == p_hid->ep_in) {
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	785b      	ldrb	r3, [r3, #1]
 8005b72:	79ba      	ldrb	r2, [r7, #6]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d116      	bne.n	8005ba6 <hidd_xfer_cb+0xae>
    // Input report
    if (XFER_RESULT_SUCCESS == result) {
 8005b78:	797b      	ldrb	r3, [r7, #5]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d109      	bne.n	8005b92 <hidd_xfer_cb+0x9a>
      tud_hid_report_complete_cb(instance, p_epbuf->epin, (uint16_t) xferred_bytes);
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f103 0110 	add.w	r1, r3, #16
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	7ffb      	ldrb	r3, [r7, #31]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fa fe5e 	bl	800084c <tud_hid_report_complete_cb>
 8005b90:	e03c      	b.n	8005c0c <hidd_xfer_cb+0x114>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_INPUT, p_epbuf->epin, (uint16_t) xferred_bytes);
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f103 0210 	add.w	r2, r3, #16
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	7ff8      	ldrb	r0, [r7, #31]
 8005b9e:	2101      	movs	r1, #1
 8005ba0:	f7ff fbb0 	bl	8005304 <tud_hid_report_failed_cb>
 8005ba4:	e032      	b.n	8005c0c <hidd_xfer_cb+0x114>
    }
  } else {
    // Output report
    if (XFER_RESULT_SUCCESS == result) {
 8005ba6:	797b      	ldrb	r3, [r7, #5]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10c      	bne.n	8005bc6 <hidd_xfer_cb+0xce>
      tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t)xferred_bytes);
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f103 0220 	add.w	r2, r3, #32
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	7ff8      	ldrb	r0, [r7, #31]
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	f7fa fe63 	bl	800088a <tud_hid_set_report_cb>
 8005bc4:	e008      	b.n	8005bd8 <hidd_xfer_cb+0xe0>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t) xferred_bytes);
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f103 0220 	add.w	r2, r3, #32
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	7ff8      	ldrb	r0, [r7, #31]
 8005bd2:	2102      	movs	r1, #2
 8005bd4:	f7ff fb96 	bl	8005304 <tud_hid_report_failed_cb>
    }

    // prepare for new transfer
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE));
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	7899      	ldrb	r1, [r3, #2]
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f103 0220 	add.w	r2, r3, #32
 8005be2:	79f8      	ldrb	r0, [r7, #7]
 8005be4:	2310      	movs	r3, #16
 8005be6:	f002 fc77 	bl	80084d8 <usbd_edpt_xfer>
 8005bea:	4603      	mov	r3, r0
 8005bec:	f083 0301 	eor.w	r3, r3, #1
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <hidd_xfer_cb+0x114>
 8005bf6:	4b09      	ldr	r3, [pc, #36]	@ (8005c1c <hidd_xfer_cb+0x124>)
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d000      	beq.n	8005c08 <hidd_xfer_cb+0x110>
 8005c06:	be00      	bkpt	0x0000
 8005c08:	2300      	movs	r3, #0
 8005c0a:	e000      	b.n	8005c0e <hidd_xfer_cb+0x116>
  }

  return true;
 8005c0c:	2301      	movs	r3, #1
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3720      	adds	r7, #32
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20000f08 	.word	0x20000f08
 8005c1c:	e000edf0 	.word	0xe000edf0
 8005c20:	20000f14 	.word	0x20000f14

08005c24 <tud_vendor_n_mounted>:

//--------------------------------------------------------------------
// Application API
//--------------------------------------------------------------------

bool tud_vendor_n_mounted(uint8_t itf) {
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	71fb      	strb	r3, [r7, #7]
  TU_VERIFY(itf < CFG_TUD_VENDOR);
 8005c2e:	79fb      	ldrb	r3, [r7, #7]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <tud_vendor_n_mounted+0x14>
 8005c34:	2300      	movs	r3, #0
 8005c36:	e015      	b.n	8005c64 <tud_vendor_n_mounted+0x40>
  vendord_interface_t* p_itf = &_vendord_itf[itf];
 8005c38:	79fb      	ldrb	r3, [r7, #7]
 8005c3a:	22ac      	movs	r2, #172	@ 0xac
 8005c3c:	fb02 f303 	mul.w	r3, r2, r3
 8005c40:	4a0b      	ldr	r2, [pc, #44]	@ (8005c70 <tud_vendor_n_mounted+0x4c>)
 8005c42:	4413      	add	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]
  return p_itf->rx.stream.ep_addr || p_itf->tx.stream.ep_addr;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d103      	bne.n	8005c58 <tud_vendor_n_mounted+0x34>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	795b      	ldrb	r3, [r3, #5]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <tud_vendor_n_mounted+0x38>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e000      	b.n	8005c5e <tud_vendor_n_mounted+0x3a>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	b2db      	uxtb	r3, r3
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	20000f44 	.word	0x20000f44

08005c74 <tud_vendor_n_write_flush>:
  const uint8_t rhport = 0;

  return tu_edpt_stream_write(rhport, &p_itf->tx.stream, buffer, (uint16_t) bufsize);
}

uint32_t tud_vendor_n_write_flush (uint8_t itf) {
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	71fb      	strb	r3, [r7, #7]
  TU_VERIFY(itf < CFG_TUD_VENDOR, 0);
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <tud_vendor_n_write_flush+0x14>
 8005c84:	2300      	movs	r3, #0
 8005c86:	e010      	b.n	8005caa <tud_vendor_n_write_flush+0x36>
  vendord_interface_t* p_itf = &_vendord_itf[itf];
 8005c88:	79fb      	ldrb	r3, [r7, #7]
 8005c8a:	22ac      	movs	r2, #172	@ 0xac
 8005c8c:	fb02 f303 	mul.w	r3, r2, r3
 8005c90:	4a08      	ldr	r2, [pc, #32]	@ (8005cb4 <tud_vendor_n_write_flush+0x40>)
 8005c92:	4413      	add	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]
  const uint8_t rhport = 0;
 8005c96:	2300      	movs	r3, #0
 8005c98:	72fb      	strb	r3, [r7, #11]

  return tu_edpt_stream_write_xfer(rhport, &p_itf->tx.stream);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	1d1a      	adds	r2, r3, #4
 8005c9e:	7afb      	ldrb	r3, [r7, #11]
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f005 f87c 	bl	800ada0 <tu_edpt_stream_write_xfer>
 8005ca8:	4603      	mov	r3, r0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	20000f44 	.word	0x20000f44

08005cb8 <vendord_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void vendord_init(void) {
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08a      	sub	sp, #40	@ 0x28
 8005cbc:	af04      	add	r7, sp, #16
  tu_memclr(_vendord_itf, sizeof(_vendord_itf));
 8005cbe:	22ac      	movs	r2, #172	@ 0xac
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4821      	ldr	r0, [pc, #132]	@ (8005d48 <vendord_init+0x90>)
 8005cc4:	f005 fa22 	bl	800b10c <memset>

  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8005cc8:	2300      	movs	r3, #0
 8005cca:	75fb      	strb	r3, [r7, #23]
 8005ccc:	e034      	b.n	8005d38 <vendord_init+0x80>
    vendord_interface_t* p_itf = &_vendord_itf[i];
 8005cce:	7dfb      	ldrb	r3, [r7, #23]
 8005cd0:	22ac      	movs	r2, #172	@ 0xac
 8005cd2:	fb02 f303 	mul.w	r3, r2, r3
 8005cd6:	4a1c      	ldr	r2, [pc, #112]	@ (8005d48 <vendord_init+0x90>)
 8005cd8:	4413      	add	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
    vendord_epbuf_t* p_epbuf = &_vendord_epbuf[i];
 8005cdc:	7dfb      	ldrb	r3, [r7, #23]
 8005cde:	01db      	lsls	r3, r3, #7
 8005ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8005d4c <vendord_init+0x94>)
 8005ce2:	4413      	add	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]

    uint8_t* rx_ff_buf =
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	336c      	adds	r3, #108	@ 0x6c
 8005cea:	60bb      	str	r3, [r7, #8]
                          p_itf->rx.ff_buf;
                        #else
                          NULL;
                        #endif

    tu_edpt_stream_init(&p_itf->rx.stream, false, false, false,
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f103 0058 	add.w	r0, r3, #88	@ 0x58
                        rx_ff_buf, CFG_TUD_VENDOR_RX_BUFSIZE,
                        p_epbuf->epout, CFG_TUD_VENDOR_EPSIZE);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
    tu_edpt_stream_init(&p_itf->rx.stream, false, false, false,
 8005cf4:	2240      	movs	r2, #64	@ 0x40
 8005cf6:	9203      	str	r2, [sp, #12]
 8005cf8:	9302      	str	r3, [sp, #8]
 8005cfa:	2340      	movs	r3, #64	@ 0x40
 8005cfc:	9301      	str	r3, [sp, #4]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	2300      	movs	r3, #0
 8005d04:	2200      	movs	r2, #0
 8005d06:	2100      	movs	r1, #0
 8005d08:	f004 ff9d 	bl	800ac46 <tu_edpt_stream_init>

    uint8_t* tx_ff_buf =
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	3318      	adds	r3, #24
 8005d10:	607b      	str	r3, [r7, #4]
                          p_itf->tx.ff_buf;
                        #else
                          NULL;
                        #endif

    tu_edpt_stream_init(&p_itf->tx.stream, false, true, false,
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1d18      	adds	r0, r3, #4
                        tx_ff_buf, CFG_TUD_VENDOR_TX_BUFSIZE,
                        p_epbuf->epin, CFG_TUD_VENDOR_EPSIZE);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	3340      	adds	r3, #64	@ 0x40
    tu_edpt_stream_init(&p_itf->tx.stream, false, true, false,
 8005d1a:	2240      	movs	r2, #64	@ 0x40
 8005d1c:	9203      	str	r2, [sp, #12]
 8005d1e:	9302      	str	r3, [sp, #8]
 8005d20:	2340      	movs	r3, #64	@ 0x40
 8005d22:	9301      	str	r3, [sp, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	f004 ff8a 	bl	800ac46 <tu_edpt_stream_init>
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8005d32:	7dfb      	ldrb	r3, [r7, #23]
 8005d34:	3301      	adds	r3, #1
 8005d36:	75fb      	strb	r3, [r7, #23]
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0c7      	beq.n	8005cce <vendord_init+0x16>
  }
}
 8005d3e:	bf00      	nop
 8005d40:	bf00      	nop
 8005d42:	3718      	adds	r7, #24
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	20000f44 	.word	0x20000f44
 8005d4c:	20000ff0 	.word	0x20000ff0

08005d50 <vendord_deinit>:

bool vendord_deinit(void) {
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8005d56:	2300      	movs	r3, #0
 8005d58:	71fb      	strb	r3, [r7, #7]
 8005d5a:	e013      	b.n	8005d84 <vendord_deinit+0x34>
    vendord_interface_t* p_itf = &_vendord_itf[i];
 8005d5c:	79fb      	ldrb	r3, [r7, #7]
 8005d5e:	22ac      	movs	r2, #172	@ 0xac
 8005d60:	fb02 f303 	mul.w	r3, r2, r3
 8005d64:	4a0b      	ldr	r2, [pc, #44]	@ (8005d94 <vendord_deinit+0x44>)
 8005d66:	4413      	add	r3, r2
 8005d68:	603b      	str	r3, [r7, #0]
    tu_edpt_stream_deinit(&p_itf->rx.stream);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	3358      	adds	r3, #88	@ 0x58
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f004 ff91 	bl	800ac96 <tu_edpt_stream_deinit>
    tu_edpt_stream_deinit(&p_itf->tx.stream);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	3304      	adds	r3, #4
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f004 ff8c 	bl	800ac96 <tu_edpt_stream_deinit>
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8005d7e:	79fb      	ldrb	r3, [r7, #7]
 8005d80:	3301      	adds	r3, #1
 8005d82:	71fb      	strb	r3, [r7, #7]
 8005d84:	79fb      	ldrb	r3, [r7, #7]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0e8      	beq.n	8005d5c <vendord_deinit+0xc>
  }
  return true;
 8005d8a:	2301      	movs	r3, #1
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	20000f44 	.word	0x20000f44

08005d98 <vendord_reset>:

void vendord_reset(uint8_t rhport) {
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8005da2:	2300      	movs	r3, #0
 8005da4:	77fb      	strb	r3, [r7, #31]
 8005da6:	e02c      	b.n	8005e02 <vendord_reset+0x6a>
    vendord_interface_t* p_itf = &_vendord_itf[i];
 8005da8:	7ffb      	ldrb	r3, [r7, #31]
 8005daa:	22ac      	movs	r2, #172	@ 0xac
 8005dac:	fb02 f303 	mul.w	r3, r2, r3
 8005db0:	4a18      	ldr	r2, [pc, #96]	@ (8005e14 <vendord_reset+0x7c>)
 8005db2:	4413      	add	r3, r2
 8005db4:	61bb      	str	r3, [r7, #24]
    tu_memclr(p_itf, ITF_MEM_RESET_SIZE);
 8005db6:	2201      	movs	r2, #1
 8005db8:	2100      	movs	r1, #0
 8005dba:	69b8      	ldr	r0, [r7, #24]
 8005dbc:	f005 f9a6 	bl	800b10c <memset>
    tu_edpt_stream_clear(&p_itf->rx.stream);
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	3358      	adds	r3, #88	@ 0x58
 8005dc4:	60bb      	str	r3, [r7, #8]
}

// Clear fifo
TU_ATTR_ALWAYS_INLINE static inline
bool tu_edpt_stream_clear(tu_edpt_stream_t* s) {
  return tu_fifo_clear(&s->ff);
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	3308      	adds	r3, #8
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 ffb7 	bl	8006d3e <tu_fifo_clear>
    tu_edpt_stream_clear(&p_itf->tx.stream);
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3308      	adds	r3, #8
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 ffaf 	bl	8006d3e <tu_fifo_clear>
    tu_edpt_stream_close(&p_itf->rx.stream);
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	3358      	adds	r3, #88	@ 0x58
 8005de4:	613b      	str	r3, [r7, #16]
  s->ep_addr = 0;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2200      	movs	r2, #0
 8005dea:	705a      	strb	r2, [r3, #1]
}
 8005dec:	bf00      	nop
    tu_edpt_stream_close(&p_itf->tx.stream);
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	3304      	adds	r3, #4
 8005df2:	617b      	str	r3, [r7, #20]
  s->ep_addr = 0;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	2200      	movs	r2, #0
 8005df8:	705a      	strb	r2, [r3, #1]
}
 8005dfa:	bf00      	nop
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8005dfc:	7ffb      	ldrb	r3, [r7, #31]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	77fb      	strb	r3, [r7, #31]
 8005e02:	7ffb      	ldrb	r3, [r7, #31]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0cf      	beq.n	8005da8 <vendord_reset+0x10>
  }
}
 8005e08:	bf00      	nop
 8005e0a:	bf00      	nop
 8005e0c:	3720      	adds	r7, #32
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20000f44 	.word	0x20000f44

08005e18 <vendord_open>:

uint16_t vendord_open(uint8_t rhport, const tusb_desc_interface_t* desc_itf, uint16_t max_len) {
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b09c      	sub	sp, #112	@ 0x70
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	4603      	mov	r3, r0
 8005e20:	6039      	str	r1, [r7, #0]
 8005e22:	71fb      	strb	r3, [r7, #7]
 8005e24:	4613      	mov	r3, r2
 8005e26:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_VENDOR_SPECIFIC == desc_itf->bInterfaceClass, 0);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	795b      	ldrb	r3, [r3, #5]
 8005e2c:	2bff      	cmp	r3, #255	@ 0xff
 8005e2e:	d001      	beq.n	8005e34 <vendord_open+0x1c>
 8005e30:	2300      	movs	r3, #0
 8005e32:	e114      	b.n	800605e <vendord_open+0x246>
  const uint8_t* desc_end = (const uint8_t*)desc_itf + max_len;
 8005e34:	88bb      	ldrh	r3, [r7, #4]
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	4413      	add	r3, r2
 8005e3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e42:	64bb      	str	r3, [r7, #72]	@ 0x48
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005e44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e4c:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(desc_itf);
 8005e4e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  // Find available interface
  vendord_interface_t* p_vendor = NULL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	66bb      	str	r3, [r7, #104]	@ 0x68
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8005e54:	2300      	movs	r3, #0
 8005e56:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005e5a:	e018      	b.n	8005e8e <vendord_open+0x76>
    if (!tud_vendor_n_mounted(i)) {
 8005e5c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff fedf 	bl	8005c24 <tud_vendor_n_mounted>
 8005e66:	4603      	mov	r3, r0
 8005e68:	f083 0301 	eor.w	r3, r3, #1
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d008      	beq.n	8005e84 <vendord_open+0x6c>
      p_vendor = &_vendord_itf[i];
 8005e72:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005e76:	22ac      	movs	r2, #172	@ 0xac
 8005e78:	fb02 f303 	mul.w	r3, r2, r3
 8005e7c:	4a7a      	ldr	r2, [pc, #488]	@ (8006068 <vendord_open+0x250>)
 8005e7e:	4413      	add	r3, r2
 8005e80:	66bb      	str	r3, [r7, #104]	@ 0x68
      break;
 8005e82:	e008      	b.n	8005e96 <vendord_open+0x7e>
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
 8005e84:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005e88:	3301      	adds	r3, #1
 8005e8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005e8e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0e2      	beq.n	8005e5c <vendord_open+0x44>
    }
  }
  TU_VERIFY(p_vendor, 0);
 8005e96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <vendord_open+0x88>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	e0de      	b.n	800605e <vendord_open+0x246>

  p_vendor->itf_num = desc_itf->bInterfaceNumber;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	789a      	ldrb	r2, [r3, #2]
 8005ea4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ea6:	701a      	strb	r2, [r3, #0]
  while (tu_desc_is_valid(p_desc, desc_end)) {
 8005ea8:	e0b8      	b.n	800601c <vendord_open+0x204>
 8005eaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eac:	647b      	str	r3, [r7, #68]	@ 0x44
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005eae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	781b      	ldrb	r3, [r3, #0]
    const uint8_t desc_type = tu_desc_type(p_desc);
 8005eb4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (desc_type == TUSB_DESC_INTERFACE || desc_type == TUSB_DESC_INTERFACE_ASSOCIATION) {
 8005eb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	f000 80ca 	beq.w	8006056 <vendord_open+0x23e>
 8005ec2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ec6:	2b0b      	cmp	r3, #11
 8005ec8:	f000 80c5 	beq.w	8006056 <vendord_open+0x23e>
      break; // end of this interface
    } else if (desc_type == TUSB_DESC_ENDPOINT) {
 8005ecc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ed0:	2b05      	cmp	r3, #5
 8005ed2:	f040 8099 	bne.w	8006008 <vendord_open+0x1f0>
      const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 8005ed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ed8:	65bb      	str	r3, [r7, #88]	@ 0x58
      TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8005eda:	79fb      	ldrb	r3, [r7, #7]
 8005edc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f002 fa64 	bl	80083ac <usbd_edpt_open>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	f083 0301 	eor.w	r3, r3, #1
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00a      	beq.n	8005f06 <vendord_open+0xee>
 8005ef0:	4b5e      	ldr	r3, [pc, #376]	@ (800606c <vendord_open+0x254>)
 8005ef2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d000      	beq.n	8005f02 <vendord_open+0xea>
 8005f00:	be00      	bkpt	0x0000
 8005f02:	2300      	movs	r3, #0
 8005f04:	e0ab      	b.n	800605e <vendord_open+0x246>

      // open endpoint stream, skip if already opened
      if (tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN) {
 8005f06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f08:	789b      	ldrb	r3, [r3, #2]
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005f0e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f12:	09db      	lsrs	r3, r3, #7
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d139      	bne.n	8005f8e <vendord_open+0x176>
        if (p_vendor->tx.stream.ep_addr == 0) {
 8005f1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f1c:	795b      	ldrb	r3, [r3, #5]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d172      	bne.n	8006008 <vendord_open+0x1f0>
          tu_edpt_stream_open(&p_vendor->tx.stream, desc_ep);
 8005f22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f24:	3304      	adds	r3, #4
 8005f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  tu_fifo_clear(&s->ff);
 8005f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f2e:	3308      	adds	r3, #8
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 ff04 	bl	8006d3e <tu_fifo_clear>
  s->ep_addr = desc_ep->bEndpointAddress;
 8005f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f38:	789a      	ldrb	r2, [r3, #2]
 8005f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f3c:	705a      	strb	r2, [r3, #1]
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f40:	637b      	str	r3, [r7, #52]	@ 0x34
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8005f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f44:	889b      	ldrh	r3, [r3, #4]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f4c:	b29b      	uxth	r3, r3
  s->is_mps512 = (tu_edpt_packet_size(desc_ep) == 512) ? 1 : 0;
 8005f4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f52:	bf0c      	ite	eq
 8005f54:	2301      	moveq	r3, #1
 8005f56:	2300      	movne	r3, #0
 8005f58:	b2d9      	uxtb	r1, r3
 8005f5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f5c:	7813      	ldrb	r3, [r2, #0]
 8005f5e:	f361 0341 	bfi	r3, r1, #1, #1
 8005f62:	7013      	strb	r3, [r2, #0]
}
 8005f64:	bf00      	nop
          tud_vendor_n_write_flush((uint8_t)(p_vendor - _vendord_itf));
 8005f66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f68:	4a3f      	ldr	r2, [pc, #252]	@ (8006068 <vendord_open+0x250>)
 8005f6a:	1a9b      	subs	r3, r3, r2
 8005f6c:	1099      	asrs	r1, r3, #2
 8005f6e:	460a      	mov	r2, r1
 8005f70:	0052      	lsls	r2, r2, #1
 8005f72:	440a      	add	r2, r1
 8005f74:	01d3      	lsls	r3, r2, #7
 8005f76:	1a9b      	subs	r3, r3, r2
 8005f78:	039a      	lsls	r2, r3, #14
 8005f7a:	4413      	add	r3, r2
 8005f7c:	019b      	lsls	r3, r3, #6
 8005f7e:	440b      	add	r3, r1
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	440b      	add	r3, r1
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff fe74 	bl	8005c74 <tud_vendor_n_write_flush>
 8005f8c:	e03c      	b.n	8006008 <vendord_open+0x1f0>
        }
      } else {
        if (p_vendor->rx.stream.ep_addr == 0) {
 8005f8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f90:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d137      	bne.n	8006008 <vendord_open+0x1f0>
          tu_edpt_stream_open(&p_vendor->rx.stream, desc_ep);
 8005f98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f9a:	3358      	adds	r3, #88	@ 0x58
 8005f9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tu_fifo_clear(&s->ff);
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa4:	3308      	adds	r3, #8
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 fec9 	bl	8006d3e <tu_fifo_clear>
  s->ep_addr = desc_ep->bEndpointAddress;
 8005fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fae:	789a      	ldrb	r2, [r3, #2]
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb2:	705a      	strb	r2, [r3, #1]
 8005fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fba:	889b      	ldrh	r3, [r3, #4]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fc2:	b29b      	uxth	r3, r3
  s->is_mps512 = (tu_edpt_packet_size(desc_ep) == 512) ? 1 : 0;
 8005fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fc8:	bf0c      	ite	eq
 8005fca:	2301      	moveq	r3, #1
 8005fcc:	2300      	movne	r3, #0
 8005fce:	b2d9      	uxtb	r1, r3
 8005fd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fd2:	7813      	ldrb	r3, [r2, #0]
 8005fd4:	f361 0341 	bfi	r3, r1, #1, #1
 8005fd8:	7013      	strb	r3, [r2, #0]
}
 8005fda:	bf00      	nop
          TU_ASSERT(tu_edpt_stream_read_xfer(rhport, &p_vendor->rx.stream) > 0, 0); // prepare for incoming data
 8005fdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fde:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8005fe2:	79fb      	ldrb	r3, [r7, #7]
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f004 ff60 	bl	800aeac <tu_edpt_stream_read_xfer>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10a      	bne.n	8006008 <vendord_open+0x1f0>
 8005ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800606c <vendord_open+0x254>)
 8005ff4:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d000      	beq.n	8006004 <vendord_open+0x1ec>
 8006002:	be00      	bkpt	0x0000
 8006004:	2300      	movs	r3, #0
 8006006:	e02a      	b.n	800605e <vendord_open+0x246>
 8006008:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800600a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 800600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600e:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	461a      	mov	r2, r3
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	4413      	add	r3, r2
        }
      }
    }

    p_desc = tu_desc_next(p_desc);
 800601a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800601c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800601e:	61fb      	str	r3, [r7, #28]
 8006020:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006022:	61bb      	str	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_subtype(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_SUBTYPE];
}

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_is_valid(void const* desc, uint8_t const* desc_end) {
  const uint8_t* desc8 = (uint8_t const*) desc;
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	617b      	str	r3, [r7, #20]
  return (desc8 < desc_end) && (tu_desc_next(desc) <= desc_end);
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	429a      	cmp	r2, r3
 800602e:	d90d      	bls.n	800604c <vendord_open+0x234>
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	461a      	mov	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	4413      	add	r3, r2
  return (desc8 < desc_end) && (tu_desc_next(desc) <= desc_end);
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	429a      	cmp	r2, r3
 8006046:	d301      	bcc.n	800604c <vendord_open+0x234>
 8006048:	2301      	movs	r3, #1
 800604a:	e000      	b.n	800604e <vendord_open+0x236>
 800604c:	2300      	movs	r3, #0
 800604e:	b2db      	uxtb	r3, r3
  while (tu_desc_is_valid(p_desc, desc_end)) {
 8006050:	2b00      	cmp	r3, #0
 8006052:	f47f af2a 	bne.w	8005eaa <vendord_open+0x92>
  }

  return (uint16_t) ((uintptr_t) p_desc - (uintptr_t) desc_itf);
 8006056:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	b29b      	uxth	r3, r3
}
 800605e:	4618      	mov	r0, r3
 8006060:	3770      	adds	r7, #112	@ 0x70
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20000f44 	.word	0x20000f44
 800606c:	e000edf0 	.word	0xe000edf0

08006070 <vendord_xfer_cb>:

bool vendord_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8006070:	b580      	push	{r7, lr}
 8006072:	b088      	sub	sp, #32
 8006074:	af00      	add	r7, sp, #0
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	4603      	mov	r3, r0
 800607a:	71fb      	strb	r3, [r7, #7]
 800607c:	460b      	mov	r3, r1
 800607e:	71bb      	strb	r3, [r7, #6]
 8006080:	4613      	mov	r3, r2
 8006082:	717b      	strb	r3, [r7, #5]
  (void) result;

  uint8_t itf;
  vendord_interface_t* p_vendor;

  for (itf = 0; itf < CFG_TUD_VENDOR; itf++) {
 8006084:	2300      	movs	r3, #0
 8006086:	77fb      	strb	r3, [r7, #31]
 8006088:	e014      	b.n	80060b4 <vendord_xfer_cb+0x44>
    p_vendor = &_vendord_itf[itf];
 800608a:	7ffb      	ldrb	r3, [r7, #31]
 800608c:	22ac      	movs	r2, #172	@ 0xac
 800608e:	fb02 f303 	mul.w	r3, r2, r3
 8006092:	4a3a      	ldr	r2, [pc, #232]	@ (800617c <vendord_xfer_cb+0x10c>)
 8006094:	4413      	add	r3, r2
 8006096:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_vendor->rx.stream.ep_addr) || (ep_addr == p_vendor->tx.stream.ep_addr)) {
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800609e:	79ba      	ldrb	r2, [r7, #6]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d00a      	beq.n	80060ba <vendord_xfer_cb+0x4a>
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	795b      	ldrb	r3, [r3, #5]
 80060a8:	79ba      	ldrb	r2, [r7, #6]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d005      	beq.n	80060ba <vendord_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_VENDOR; itf++) {
 80060ae:	7ffb      	ldrb	r3, [r7, #31]
 80060b0:	3301      	adds	r3, #1
 80060b2:	77fb      	strb	r3, [r7, #31]
 80060b4:	7ffb      	ldrb	r3, [r7, #31]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d0e7      	beq.n	800608a <vendord_xfer_cb+0x1a>
      break;
    }
  }
  TU_VERIFY(itf < CFG_TUD_VENDOR);
 80060ba:	7ffb      	ldrb	r3, [r7, #31]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <vendord_xfer_cb+0x54>
 80060c0:	2300      	movs	r3, #0
 80060c2:	e056      	b.n	8006172 <vendord_xfer_cb+0x102>
  vendord_epbuf_t* p_epbuf = &_vendord_epbuf[itf];
 80060c4:	7ffb      	ldrb	r3, [r7, #31]
 80060c6:	01db      	lsls	r3, r3, #7
 80060c8:	4a2d      	ldr	r2, [pc, #180]	@ (8006180 <vendord_xfer_cb+0x110>)
 80060ca:	4413      	add	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

  if ( ep_addr == p_vendor->rx.stream.ep_addr ) {
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80060d4:	79ba      	ldrb	r2, [r7, #6]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d129      	bne.n	800612e <vendord_xfer_cb+0xbe>
    // Received new data: put into stream's fifo
    tu_edpt_stream_read_xfer_complete(&p_vendor->rx.stream, xferred_bytes);
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	3358      	adds	r3, #88	@ 0x58
 80060de:	613b      	str	r3, [r7, #16]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	60fb      	str	r3, [r7, #12]
uint32_t tu_edpt_stream_read_xfer(uint8_t hwid, tu_edpt_stream_t* s);

// Complete read transfer by writing EP -> FIFO. Must be called in the transfer complete callback
TU_ATTR_ALWAYS_INLINE static inline
void tu_edpt_stream_read_xfer_complete(tu_edpt_stream_t* s, uint32_t xferred_bytes) {
  if (tu_fifo_depth(&s->ff)) {
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	3308      	adds	r3, #8
 80060e8:	60bb      	str	r3, [r7, #8]
bool     tu_fifo_overflowed             (tu_fifo_t* f);
void     tu_fifo_correct_read_pointer   (tu_fifo_t* f);

TU_ATTR_ALWAYS_INLINE static inline
uint16_t tu_fifo_depth(tu_fifo_t* f) {
  return f->depth;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	889b      	ldrh	r3, [r3, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d009      	beq.n	8006106 <vendord_xfer_cb+0x96>
    tu_fifo_write_n(&s->ff, s->ep_buf, (uint16_t) xferred_bytes);
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f103 0008 	add.w	r0, r3, #8
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	b292      	uxth	r2, r2
 8006100:	4619      	mov	r1, r3
 8006102:	f000 fdf8 	bl	8006cf6 <tu_fifo_write_n>
  }
}
 8006106:	bf00      	nop

    // Invoked callback if any
    if (tud_vendor_rx_cb) {
 8006108:	4b1e      	ldr	r3, [pc, #120]	@ (8006184 <vendord_xfer_cb+0x114>)
 800610a:	2b00      	cmp	r3, #0
 800610c:	d006      	beq.n	800611c <vendord_xfer_cb+0xac>
      tud_vendor_rx_cb(itf, p_epbuf->epout, (uint16_t) xferred_bytes);
 800610e:	6979      	ldr	r1, [r7, #20]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	b29a      	uxth	r2, r3
 8006114:	7ffb      	ldrb	r3, [r7, #31]
 8006116:	4618      	mov	r0, r3
 8006118:	f3af 8000 	nop.w
    }

    tu_edpt_stream_read_xfer(rhport, &p_vendor->rx.stream);
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8006122:	79fb      	ldrb	r3, [r7, #7]
 8006124:	4611      	mov	r1, r2
 8006126:	4618      	mov	r0, r3
 8006128:	f004 fec0 	bl	800aeac <tu_edpt_stream_read_xfer>
 800612c:	e020      	b.n	8006170 <vendord_xfer_cb+0x100>
  } else if ( ep_addr == p_vendor->tx.stream.ep_addr ) {
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	795b      	ldrb	r3, [r3, #5]
 8006132:	79ba      	ldrb	r2, [r7, #6]
 8006134:	429a      	cmp	r2, r3
 8006136:	d11b      	bne.n	8006170 <vendord_xfer_cb+0x100>
    // Send complete
    if (tud_vendor_tx_cb) {
 8006138:	4b13      	ldr	r3, [pc, #76]	@ (8006188 <vendord_xfer_cb+0x118>)
 800613a:	2b00      	cmp	r3, #0
 800613c:	d007      	beq.n	800614e <vendord_xfer_cb+0xde>
      tud_vendor_tx_cb(itf, (uint16_t) xferred_bytes);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	b29b      	uxth	r3, r3
 8006142:	461a      	mov	r2, r3
 8006144:	7ffb      	ldrb	r3, [r7, #31]
 8006146:	4611      	mov	r1, r2
 8006148:	4618      	mov	r0, r3
 800614a:	f3af 8000 	nop.w
    }

    #if CFG_TUD_VENDOR_TX_BUFSIZE > 0
    // try to send more if possible
    if ( 0 == tu_edpt_stream_write_xfer(rhport, &p_vendor->tx.stream) ) {
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	1d1a      	adds	r2, r3, #4
 8006152:	79fb      	ldrb	r3, [r7, #7]
 8006154:	4611      	mov	r1, r2
 8006156:	4618      	mov	r0, r3
 8006158:	f004 fe22 	bl	800ada0 <tu_edpt_stream_write_xfer>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <vendord_xfer_cb+0x100>
      // If there is no data left, a ZLP should be sent if xferred_bytes is multiple of EP Packet size and not zero
      tu_edpt_stream_write_zlp_if_needed(rhport, &p_vendor->tx.stream, xferred_bytes);
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	1d19      	adds	r1, r3, #4
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	4618      	mov	r0, r3
 800616c:	f004 fd9e 	bl	800acac <tu_edpt_stream_write_zlp_if_needed>
    }
    #endif
  }

  return true;
 8006170:	2301      	movs	r3, #1
}
 8006172:	4618      	mov	r0, r3
 8006174:	3720      	adds	r7, #32
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	20000f44 	.word	0x20000f44
 8006180:	20000ff0 	.word	0x20000ff0
	...

0800618c <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	4611      	mov	r1, r2
 8006198:	461a      	mov	r2, r3
 800619a:	460b      	mov	r3, r1
 800619c:	80fb      	strh	r3, [r7, #6]
 800619e:	4613      	mov	r3, r2
 80061a0:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 80061a2:	88fb      	ldrh	r3, [r7, #6]
 80061a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061a8:	d901      	bls.n	80061ae <tu_fifo_config+0x22>
 80061aa:	2300      	movs	r3, #0
 80061ac:	e01b      	b.n	80061e6 <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	88fa      	ldrh	r2, [r7, #6]
 80061b8:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 80061ba:	88bb      	ldrh	r3, [r7, #4]
 80061bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80061c0:	b299      	uxth	r1, r3
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	88d3      	ldrh	r3, [r2, #6]
 80061c6:	f361 030e 	bfi	r3, r1, #0, #15
 80061ca:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	79d3      	ldrb	r3, [r2, #7]
 80061d0:	7e39      	ldrb	r1, [r7, #24]
 80061d2:	f361 13c7 	bfi	r3, r1, #7, #1
 80061d6:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 80061e4:	2301      	movs	r3, #1
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b08a      	sub	sp, #40	@ 0x28
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	4613      	mov	r3, r2
 80061fe:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8006204:	88fb      	ldrh	r3, [r7, #6]
 8006206:	089b      	lsrs	r3, r3, #2
 8006208:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 800620a:	e00b      	b.n	8006224 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	61ba      	str	r2, [r7, #24]
 8006214:	617b      	str	r3, [r7, #20]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	601a      	str	r2, [r3, #0]
}
 800621c:	bf00      	nop
    ff_buf += 4;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3304      	adds	r3, #4
 8006222:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8006224:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006226:	1e5a      	subs	r2, r3, #1
 8006228:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1ee      	bne.n	800620c <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 800622e:	88fb      	ldrh	r3, [r7, #6]
 8006230:	b2db      	uxtb	r3, r3
 8006232:	f003 0303 	and.w	r3, r3, #3
 8006236:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8006238:	7ffb      	ldrb	r3, [r7, #31]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d009      	beq.n	8006252 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8006244:	7ffa      	ldrb	r2, [r7, #31]
 8006246:	f107 0310 	add.w	r3, r7, #16
 800624a:	4619      	mov	r1, r3
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f004 ff91 	bl	800b174 <memcpy>
  }
}
 8006252:	bf00      	nop
 8006254:	3728      	adds	r7, #40	@ 0x28
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b08a      	sub	sp, #40	@ 0x28
 800625e:	af00      	add	r7, sp, #0
 8006260:	60f8      	str	r0, [r7, #12]
 8006262:	60b9      	str	r1, [r7, #8]
 8006264:	4613      	mov	r3, r2
 8006266:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 800626c:	88fb      	ldrh	r3, [r7, #6]
 800626e:	089b      	lsrs	r3, r3, #2
 8006270:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8006272:	e008      	b.n	8006286 <_ff_pull_const_addr+0x2c>
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	3304      	adds	r3, #4
 8006284:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8006286:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006288:	1e5a      	subs	r2, r3, #1
 800628a:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1f1      	bne.n	8006274 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8006290:	88fb      	ldrh	r3, [r7, #6]
 8006292:	b2db      	uxtb	r3, r3
 8006294:	f003 0303 	and.w	r3, r3, #3
 8006298:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 800629a:	7ffb      	ldrb	r3, [r7, #31]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00b      	beq.n	80062b8 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 80062a0:	2300      	movs	r3, #0
 80062a2:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 80062a4:	7ffa      	ldrb	r2, [r7, #31]
 80062a6:	f107 0314 	add.w	r3, r7, #20
 80062aa:	68b9      	ldr	r1, [r7, #8]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f004 ff61 	bl	800b174 <memcpy>

    *reg_tx = tmp32;
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	601a      	str	r2, [r3, #0]
  }
}
 80062b8:	bf00      	nop
 80062ba:	3728      	adds	r7, #40	@ 0x28
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	4613      	mov	r3, r2
 80062cc:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	88fa      	ldrh	r2, [r7, #6]
 80062d4:	68f9      	ldr	r1, [r7, #12]
 80062d6:	88c9      	ldrh	r1, [r1, #6]
 80062d8:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80062dc:	b289      	uxth	r1, r1
 80062de:	fb01 f202 	mul.w	r2, r1, r2
 80062e2:	1898      	adds	r0, r3, r2
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	88db      	ldrh	r3, [r3, #6]
 80062e8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	461a      	mov	r2, r3
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	f004 ff3f 	bl	800b174 <memcpy>
}
 80062f6:	bf00      	nop
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b08e      	sub	sp, #56	@ 0x38
 8006302:	af00      	add	r7, sp, #0
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	60b9      	str	r1, [r7, #8]
 8006308:	4611      	mov	r1, r2
 800630a:	461a      	mov	r2, r3
 800630c:	460b      	mov	r3, r1
 800630e:	80fb      	strh	r3, [r7, #6]
 8006310:	4613      	mov	r3, r2
 8006312:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	889a      	ldrh	r2, [r3, #4]
 8006318:	88bb      	ldrh	r3, [r7, #4]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 800631e:	88fa      	ldrh	r2, [r7, #6]
 8006320:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	88db      	ldrh	r3, [r3, #6]
 800632a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800632e:	b29b      	uxth	r3, r3
 8006330:	461a      	mov	r2, r3
 8006332:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006334:	fb13 f302 	smulbb	r3, r3, r2
 8006338:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	88db      	ldrh	r3, [r3, #6]
 800633e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006342:	b29b      	uxth	r3, r3
 8006344:	461a      	mov	r2, r3
 8006346:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006348:	fb13 f302 	smulbb	r3, r3, r2
 800634c:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	88ba      	ldrh	r2, [r7, #4]
 8006354:	68f9      	ldr	r1, [r7, #12]
 8006356:	88c9      	ldrh	r1, [r1, #6]
 8006358:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800635c:	b289      	uxth	r1, r1
 800635e:	fb01 f202 	mul.w	r2, r1, r2
 8006362:	4413      	add	r3, r2
 8006364:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8006366:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <_ff_push_n+0x76>
 800636e:	2b01      	cmp	r3, #1
 8006370:	d022      	beq.n	80063b8 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 8006372:	e09e      	b.n	80064b2 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8006374:	88fa      	ldrh	r2, [r7, #6]
 8006376:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006378:	429a      	cmp	r2, r3
 800637a:	d80d      	bhi.n	8006398 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 800637c:	88fb      	ldrh	r3, [r7, #6]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	88d2      	ldrh	r2, [r2, #6]
 8006382:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006386:	b292      	uxth	r2, r2
 8006388:	fb02 f303 	mul.w	r3, r2, r3
 800638c:	461a      	mov	r2, r3
 800638e:	68b9      	ldr	r1, [r7, #8]
 8006390:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006392:	f004 feef 	bl	800b174 <memcpy>
      break;
 8006396:	e08c      	b.n	80064b2 <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8006398:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800639a:	461a      	mov	r2, r3
 800639c:	68b9      	ldr	r1, [r7, #8]
 800639e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063a0:	f004 fee8 	bl	800b174 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6818      	ldr	r0, [r3, #0]
 80063a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	4413      	add	r3, r2
 80063ae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80063b0:	4619      	mov	r1, r3
 80063b2:	f004 fedf 	bl	800b174 <memcpy>
      break;
 80063b6:	e07c      	b.n	80064b2 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 80063b8:	88fa      	ldrh	r2, [r7, #6]
 80063ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80063bc:	429a      	cmp	r2, r3
 80063be:	d80f      	bhi.n	80063e0 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	88db      	ldrh	r3, [r3, #6]
 80063c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	461a      	mov	r2, r3
 80063cc:	88fb      	ldrh	r3, [r7, #6]
 80063ce:	fb13 f302 	smulbb	r3, r3, r2
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	461a      	mov	r2, r3
 80063d6:	68b9      	ldr	r1, [r7, #8]
 80063d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063da:	f7ff ff0a 	bl	80061f2 <_ff_push_const_addr>
      break;
 80063de:	e067      	b.n	80064b0 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 80063e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80063e2:	f023 0303 	bic.w	r3, r3, #3
 80063e6:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 80063e8:	8c3b      	ldrh	r3, [r7, #32]
 80063ea:	461a      	mov	r2, r3
 80063ec:	68b9      	ldr	r1, [r7, #8]
 80063ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063f0:	f7ff feff 	bl	80061f2 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 80063f4:	8c3b      	ldrh	r3, [r7, #32]
 80063f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063f8:	4413      	add	r3, r2
 80063fa:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 80063fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	f003 0303 	and.w	r3, r3, #3
 8006404:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8006408:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800640c:	2b00      	cmp	r3, #0
 800640e:	d043      	beq.n	8006498 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8006414:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006418:	b29b      	uxth	r3, r3
 800641a:	f1c3 0304 	rsb	r3, r3, #4
 800641e:	b29a      	uxth	r2, r3
 8006420:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006422:	837b      	strh	r3, [r7, #26]
 8006424:	4613      	mov	r3, r2
 8006426:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8006428:	8b7a      	ldrh	r2, [r7, #26]
 800642a:	8b3b      	ldrh	r3, [r7, #24]
 800642c:	4293      	cmp	r3, r2
 800642e:	bf28      	it	cs
 8006430:	4613      	movcs	r3, r2
 8006432:	b29b      	uxth	r3, r3
 8006434:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8006438:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800643c:	b29b      	uxth	r3, r3
 800643e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 800644a:	f107 0314 	add.w	r3, r7, #20
 800644e:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8006450:	e007      	b.n	8006462 <_ff_push_n+0x164>
 8006452:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006454:	1c53      	adds	r3, r2, #1
 8006456:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645a:	1c59      	adds	r1, r3, #1
 800645c:	6339      	str	r1, [r7, #48]	@ 0x30
 800645e:	7812      	ldrb	r2, [r2, #0]
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006466:	1e5a      	subs	r2, r3, #1
 8006468:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1f0      	bne.n	8006452 <_ff_push_n+0x154>
          ff_buf = f->buffer;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8006476:	e007      	b.n	8006488 <_ff_push_n+0x18a>
 8006478:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800647a:	1c53      	adds	r3, r2, #1
 800647c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800647e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006480:	1c59      	adds	r1, r3, #1
 8006482:	6339      	str	r1, [r7, #48]	@ 0x30
 8006484:	7812      	ldrb	r2, [r2, #0]
 8006486:	701a      	strb	r2, [r3, #0]
 8006488:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800648c:	1e5a      	subs	r2, r3, #1
 800648e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f0      	bne.n	8006478 <_ff_push_n+0x17a>
 8006496:	e002      	b.n	800649e <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 800649e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d005      	beq.n	80064b0 <_ff_push_n+0x1b2>
 80064a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80064a6:	461a      	mov	r2, r3
 80064a8:	68b9      	ldr	r1, [r7, #8]
 80064aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064ac:	f7ff fea1 	bl	80061f2 <_ff_push_const_addr>
      break;
 80064b0:	bf00      	nop
  }
}
 80064b2:	bf00      	nop
 80064b4:	3738      	adds	r7, #56	@ 0x38
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	60b9      	str	r1, [r7, #8]
 80064c4:	4613      	mov	r3, r2
 80064c6:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	88fa      	ldrh	r2, [r7, #6]
 80064ce:	68f9      	ldr	r1, [r7, #12]
 80064d0:	88c9      	ldrh	r1, [r1, #6]
 80064d2:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80064d6:	b289      	uxth	r1, r1
 80064d8:	fb01 f202 	mul.w	r2, r1, r2
 80064dc:	1899      	adds	r1, r3, r2
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	88db      	ldrh	r3, [r3, #6]
 80064e2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	461a      	mov	r2, r3
 80064ea:	68b8      	ldr	r0, [r7, #8]
 80064ec:	f004 fe42 	bl	800b174 <memcpy>
}
 80064f0:	bf00      	nop
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08e      	sub	sp, #56	@ 0x38
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	4611      	mov	r1, r2
 8006504:	461a      	mov	r2, r3
 8006506:	460b      	mov	r3, r1
 8006508:	80fb      	strh	r3, [r7, #6]
 800650a:	4613      	mov	r3, r2
 800650c:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	889a      	ldrh	r2, [r3, #4]
 8006512:	88bb      	ldrh	r3, [r7, #4]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8006518:	88fa      	ldrh	r2, [r7, #6]
 800651a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	88db      	ldrh	r3, [r3, #6]
 8006524:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006528:	b29b      	uxth	r3, r3
 800652a:	461a      	mov	r2, r3
 800652c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800652e:	fb13 f302 	smulbb	r3, r3, r2
 8006532:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	88db      	ldrh	r3, [r3, #6]
 8006538:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800653c:	b29b      	uxth	r3, r3
 800653e:	461a      	mov	r2, r3
 8006540:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006542:	fb13 f302 	smulbb	r3, r3, r2
 8006546:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	88ba      	ldrh	r2, [r7, #4]
 800654e:	68f9      	ldr	r1, [r7, #12]
 8006550:	88c9      	ldrh	r1, [r1, #6]
 8006552:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006556:	b289      	uxth	r1, r1
 8006558:	fb01 f202 	mul.w	r2, r1, r2
 800655c:	4413      	add	r3, r2
 800655e:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8006560:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <_ff_pull_n+0x76>
 8006568:	2b01      	cmp	r3, #1
 800656a:	d022      	beq.n	80065b2 <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 800656c:	e0a0      	b.n	80066b0 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 800656e:	88fa      	ldrh	r2, [r7, #6]
 8006570:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006572:	429a      	cmp	r2, r3
 8006574:	d80d      	bhi.n	8006592 <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 8006576:	88fb      	ldrh	r3, [r7, #6]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	88d2      	ldrh	r2, [r2, #6]
 800657c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006580:	b292      	uxth	r2, r2
 8006582:	fb02 f303 	mul.w	r3, r2, r3
 8006586:	461a      	mov	r2, r3
 8006588:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800658a:	68b8      	ldr	r0, [r7, #8]
 800658c:	f004 fdf2 	bl	800b174 <memcpy>
    break;
 8006590:	e08e      	b.n	80066b0 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 8006592:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006594:	461a      	mov	r2, r3
 8006596:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006598:	68b8      	ldr	r0, [r7, #8]
 800659a:	f004 fdeb 	bl	800b174 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 800659e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	18d0      	adds	r0, r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80065aa:	4619      	mov	r1, r3
 80065ac:	f004 fde2 	bl	800b174 <memcpy>
    break;
 80065b0:	e07e      	b.n	80066b0 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 80065b2:	88fa      	ldrh	r2, [r7, #6]
 80065b4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d80f      	bhi.n	80065da <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	88db      	ldrh	r3, [r3, #6]
 80065be:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	461a      	mov	r2, r3
 80065c6:	88fb      	ldrh	r3, [r7, #6]
 80065c8:	fb13 f302 	smulbb	r3, r3, r2
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	461a      	mov	r2, r3
 80065d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80065d2:	68b8      	ldr	r0, [r7, #8]
 80065d4:	f7ff fe41 	bl	800625a <_ff_pull_const_addr>
    break;
 80065d8:	e069      	b.n	80066ae <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 80065da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80065dc:	f023 0303 	bic.w	r3, r3, #3
 80065e0:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 80065e2:	8c3b      	ldrh	r3, [r7, #32]
 80065e4:	461a      	mov	r2, r3
 80065e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80065e8:	68b8      	ldr	r0, [r7, #8]
 80065ea:	f7ff fe36 	bl	800625a <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 80065ee:	8c3b      	ldrh	r3, [r7, #32]
 80065f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065f2:	4413      	add	r3, r2
 80065f4:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 80065f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8006602:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006606:	2b00      	cmp	r3, #0
 8006608:	d045      	beq.n	8006696 <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800660e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006612:	b29b      	uxth	r3, r3
 8006614:	f1c3 0304 	rsb	r3, r3, #4
 8006618:	b29a      	uxth	r2, r3
 800661a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800661c:	837b      	strh	r3, [r7, #26]
 800661e:	4613      	mov	r3, r2
 8006620:	833b      	strh	r3, [r7, #24]
 8006622:	8b7a      	ldrh	r2, [r7, #26]
 8006624:	8b3b      	ldrh	r3, [r7, #24]
 8006626:	4293      	cmp	r3, r2
 8006628:	bf28      	it	cs
 800662a:	4613      	movcs	r3, r2
 800662c:	b29b      	uxth	r3, r3
 800662e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8006632:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006636:	b29b      	uxth	r3, r3
 8006638:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 800663e:	2300      	movs	r3, #0
 8006640:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8006642:	f107 0314 	add.w	r3, r7, #20
 8006646:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8006648:	e007      	b.n	800665a <_ff_pull_n+0x162>
 800664a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800664c:	1c53      	adds	r3, r2, #1
 800664e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006652:	1c59      	adds	r1, r3, #1
 8006654:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006656:	7812      	ldrb	r2, [r2, #0]
 8006658:	701a      	strb	r2, [r3, #0]
 800665a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800665e:	1e5a      	subs	r2, r3, #1
 8006660:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1f0      	bne.n	800664a <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 800666e:	e007      	b.n	8006680 <_ff_pull_n+0x188>
 8006670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006672:	1c53      	adds	r3, r2, #1
 8006674:	633b      	str	r3, [r7, #48]	@ 0x30
 8006676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006678:	1c59      	adds	r1, r3, #1
 800667a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800667c:	7812      	ldrb	r2, [r2, #0]
 800667e:	701a      	strb	r2, [r3, #0]
 8006680:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006684:	1e5a      	subs	r2, r3, #1
 8006686:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1f0      	bne.n	8006670 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	e002      	b.n	800669c <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 800669c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d005      	beq.n	80066ae <_ff_pull_n+0x1b6>
 80066a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80066a4:	461a      	mov	r2, r3
 80066a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80066a8:	68b8      	ldr	r0, [r7, #8]
 80066aa:	f7ff fdd6 	bl	800625a <_ff_pull_const_addr>
    break;
 80066ae:	bf00      	nop
  }
}
 80066b0:	bf00      	nop
 80066b2:	3738      	adds	r7, #56	@ 0x38
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	4603      	mov	r3, r0
 80066c0:	80fb      	strh	r3, [r7, #6]
 80066c2:	460b      	mov	r3, r1
 80066c4:	80bb      	strh	r3, [r7, #4]
 80066c6:	4613      	mov	r3, r2
 80066c8:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 80066ca:	88ba      	ldrh	r2, [r7, #4]
 80066cc:	887b      	ldrh	r3, [r7, #2]
 80066ce:	4413      	add	r3, r2
 80066d0:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 80066d2:	88ba      	ldrh	r2, [r7, #4]
 80066d4:	89fb      	ldrh	r3, [r7, #14]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d804      	bhi.n	80066e4 <advance_index+0x2c>
 80066da:	89fa      	ldrh	r2, [r7, #14]
 80066dc:	88fb      	ldrh	r3, [r7, #6]
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	429a      	cmp	r2, r3
 80066e2:	db08      	blt.n	80066f6 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 80066e4:	88fb      	ldrh	r3, [r7, #6]
 80066e6:	005b      	lsls	r3, r3, #1
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	425b      	negs	r3, r3
 80066ec:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 80066ee:	89fa      	ldrh	r2, [r7, #14]
 80066f0:	89bb      	ldrh	r3, [r7, #12]
 80066f2:	4413      	add	r3, r2
 80066f4:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 80066f6:	89fb      	ldrh	r3, [r7, #14]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b08a      	sub	sp, #40	@ 0x28
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	4611      	mov	r1, r2
 8006710:	461a      	mov	r2, r3
 8006712:	460b      	mov	r3, r1
 8006714:	80fb      	strh	r3, [r7, #6]
 8006716:	4613      	mov	r3, r2
 8006718:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	889b      	ldrh	r3, [r3, #4]
 800671e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006720:	88fb      	ldrh	r3, [r7, #6]
 8006722:	843b      	strh	r3, [r7, #32]
 8006724:	88bb      	ldrh	r3, [r7, #4]
 8006726:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8006728:	8c3a      	ldrh	r2, [r7, #32]
 800672a:	8bfb      	ldrh	r3, [r7, #30]
 800672c:	429a      	cmp	r2, r3
 800672e:	d304      	bcc.n	800673a <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8006730:	8c3a      	ldrh	r2, [r7, #32]
 8006732:	8bfb      	ldrh	r3, [r7, #30]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	b29b      	uxth	r3, r3
 8006738:	e008      	b.n	800674c <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800673a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	8c39      	ldrh	r1, [r7, #32]
 8006742:	8bfb      	ldrh	r3, [r7, #30]
 8006744:	1acb      	subs	r3, r1, r3
 8006746:	b29b      	uxth	r3, r3
 8006748:	4413      	add	r3, r2
 800674a:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800674c:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 800674e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <_tu_fifo_peek+0x54>
 8006754:	2300      	movs	r3, #0
 8006756:	e037      	b.n	80067c8 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	889b      	ldrh	r3, [r3, #4]
 800675c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800675e:	429a      	cmp	r2, r3
 8006760:	d91b      	bls.n	800679a <_tu_fifo_peek+0x96>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	61bb      	str	r3, [r7, #24]
 8006766:	88fb      	ldrh	r3, [r7, #6]
 8006768:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	889b      	ldrh	r3, [r3, #4]
 800676e:	8afa      	ldrh	r2, [r7, #22]
 8006770:	429a      	cmp	r2, r3
 8006772:	d305      	bcc.n	8006780 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	889b      	ldrh	r3, [r3, #4]
 8006778:	8afa      	ldrh	r2, [r7, #22]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	82bb      	strh	r3, [r7, #20]
 800677e:	e004      	b.n	800678a <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	889a      	ldrh	r2, [r3, #4]
 8006784:	8afb      	ldrh	r3, [r7, #22]
 8006786:	4413      	add	r3, r2
 8006788:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	8aba      	ldrh	r2, [r7, #20]
 800678e:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8006790:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8006792:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	889b      	ldrh	r3, [r3, #4]
 8006798:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	889b      	ldrh	r3, [r3, #4]
 800679e:	827b      	strh	r3, [r7, #18]
 80067a0:	88bb      	ldrh	r3, [r7, #4]
 80067a2:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80067a4:	e003      	b.n	80067ae <_tu_fifo_peek+0xaa>
 80067a6:	8a3a      	ldrh	r2, [r7, #16]
 80067a8:	8a7b      	ldrh	r3, [r7, #18]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	823b      	strh	r3, [r7, #16]
 80067ae:	8a7a      	ldrh	r2, [r7, #18]
 80067b0:	8a3b      	ldrh	r3, [r7, #16]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d9f7      	bls.n	80067a6 <_tu_fifo_peek+0xa2>
  return idx;
 80067b6:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80067b8:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 80067ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067bc:	461a      	mov	r2, r3
 80067be:	68b9      	ldr	r1, [r7, #8]
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f7ff fe7a 	bl	80064ba <_ff_pull>

  return true;
 80067c6:	2301      	movs	r3, #1
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3728      	adds	r7, #40	@ 0x28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08c      	sub	sp, #48	@ 0x30
 80067d4:	af02      	add	r7, sp, #8
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	4611      	mov	r1, r2
 80067dc:	461a      	mov	r2, r3
 80067de:	460b      	mov	r3, r1
 80067e0:	80fb      	strh	r3, [r7, #6]
 80067e2:	4613      	mov	r3, r2
 80067e4:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	889b      	ldrh	r3, [r3, #4]
 80067ea:	847b      	strh	r3, [r7, #34]	@ 0x22
 80067ec:	88bb      	ldrh	r3, [r7, #4]
 80067ee:	843b      	strh	r3, [r7, #32]
 80067f0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80067f2:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80067f4:	8c3a      	ldrh	r2, [r7, #32]
 80067f6:	8bfb      	ldrh	r3, [r7, #30]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d304      	bcc.n	8006806 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80067fc:	8c3a      	ldrh	r2, [r7, #32]
 80067fe:	8bfb      	ldrh	r3, [r7, #30]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	b29b      	uxth	r3, r3
 8006804:	e008      	b.n	8006818 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006806:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	b29a      	uxth	r2, r3
 800680c:	8c39      	ldrh	r1, [r7, #32]
 800680e:	8bfb      	ldrh	r3, [r7, #30]
 8006810:	1acb      	subs	r3, r1, r3
 8006812:	b29b      	uxth	r3, r3
 8006814:	4413      	add	r3, r2
 8006816:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006818:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 800681a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <_tu_fifo_peek_n+0x54>
 8006820:	2300      	movs	r3, #0
 8006822:	e041      	b.n	80068a8 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	889b      	ldrh	r3, [r3, #4]
 8006828:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800682a:	429a      	cmp	r2, r3
 800682c:	d91b      	bls.n	8006866 <_tu_fifo_peek_n+0x96>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	61bb      	str	r3, [r7, #24]
 8006832:	88bb      	ldrh	r3, [r7, #4]
 8006834:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	889b      	ldrh	r3, [r3, #4]
 800683a:	8afa      	ldrh	r2, [r7, #22]
 800683c:	429a      	cmp	r2, r3
 800683e:	d305      	bcc.n	800684c <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	889b      	ldrh	r3, [r3, #4]
 8006844:	8afa      	ldrh	r2, [r7, #22]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	82bb      	strh	r3, [r7, #20]
 800684a:	e004      	b.n	8006856 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	889a      	ldrh	r2, [r3, #4]
 8006850:	8afb      	ldrh	r3, [r7, #22]
 8006852:	4413      	add	r3, r2
 8006854:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	8aba      	ldrh	r2, [r7, #20]
 800685a:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 800685c:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800685e:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	889b      	ldrh	r3, [r3, #4]
 8006864:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8006866:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	429a      	cmp	r2, r3
 800686c:	d201      	bcs.n	8006872 <_tu_fifo_peek_n+0xa2>
 800686e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006870:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	889b      	ldrh	r3, [r3, #4]
 8006876:	827b      	strh	r3, [r7, #18]
 8006878:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800687a:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 800687c:	e003      	b.n	8006886 <_tu_fifo_peek_n+0xb6>
 800687e:	8a3a      	ldrh	r2, [r7, #16]
 8006880:	8a7b      	ldrh	r3, [r7, #18]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	823b      	strh	r3, [r7, #16]
 8006886:	8a7a      	ldrh	r2, [r7, #18]
 8006888:	8a3b      	ldrh	r3, [r7, #16]
 800688a:	429a      	cmp	r2, r3
 800688c:	d9f7      	bls.n	800687e <_tu_fifo_peek_n+0xae>
  return idx;
 800688e:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006890:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8006892:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8006894:	88fa      	ldrh	r2, [r7, #6]
 8006896:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	460b      	mov	r3, r1
 800689e:	68b9      	ldr	r1, [r7, #8]
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f7ff fe29 	bl	80064f8 <_ff_pull_n>

  return n;
 80068a6:	88fb      	ldrh	r3, [r7, #6]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3728      	adds	r7, #40	@ 0x28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b092      	sub	sp, #72	@ 0x48
 80068b4:	af02      	add	r7, sp, #8
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	4611      	mov	r1, r2
 80068bc:	461a      	mov	r2, r3
 80068be:	460b      	mov	r3, r1
 80068c0:	80fb      	strh	r3, [r7, #6]
 80068c2:	4613      	mov	r3, r2
 80068c4:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 80068c6:	88fb      	ldrh	r3, [r7, #6]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d101      	bne.n	80068d0 <_tu_fifo_write_n+0x20>
 80068cc:	2300      	movs	r3, #0
 80068ce:	e0bc      	b.n	8006a4a <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	891b      	ldrh	r3, [r3, #8]
 80068d4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	895b      	ldrh	r3, [r3, #10]
 80068da:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	79db      	ldrb	r3, [r3, #7]
 80068e4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	f083 0301 	eor.w	r3, r3, #1
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d036      	beq.n	8006962 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	889b      	ldrh	r3, [r3, #4]
 80068f8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80068fa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80068fc:	853b      	strh	r3, [r7, #40]	@ 0x28
 80068fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006900:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006902:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006904:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006906:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006908:	847b      	strh	r3, [r7, #34]	@ 0x22
 800690a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800690c:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 800690e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006910:	8c3b      	ldrh	r3, [r7, #32]
 8006912:	429a      	cmp	r2, r3
 8006914:	d304      	bcc.n	8006920 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 8006916:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006918:	8c3b      	ldrh	r3, [r7, #32]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	b29b      	uxth	r3, r3
 800691e:	e008      	b.n	8006932 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006920:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006922:	005b      	lsls	r3, r3, #1
 8006924:	b29a      	uxth	r2, r3
 8006926:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8006928:	8c3b      	ldrh	r3, [r7, #32]
 800692a:	1acb      	subs	r3, r1, r3
 800692c:	b29b      	uxth	r3, r3
 800692e:	4413      	add	r3, r2
 8006930:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8006932:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8006934:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8006936:	8bfb      	ldrh	r3, [r7, #30]
 8006938:	429a      	cmp	r2, r3
 800693a:	d904      	bls.n	8006946 <_tu_fifo_write_n+0x96>
 800693c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800693e:	8bfb      	ldrh	r3, [r7, #30]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	b29b      	uxth	r3, r3
 8006944:	e000      	b.n	8006948 <_tu_fifo_write_n+0x98>
 8006946:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8006948:	867b      	strh	r3, [r7, #50]	@ 0x32
 800694a:	88fb      	ldrh	r3, [r7, #6]
 800694c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800694e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006950:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006952:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006954:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006956:	4293      	cmp	r3, r2
 8006958:	bf28      	it	cs
 800695a:	4613      	movcs	r3, r2
 800695c:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 800695e:	80fb      	strh	r3, [r7, #6]
 8006960:	e04b      	b.n	80069fa <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	889b      	ldrh	r3, [r3, #4]
 8006966:	88fa      	ldrh	r2, [r7, #6]
 8006968:	429a      	cmp	r2, r3
 800696a:	d317      	bcc.n	800699c <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 800696c:	797b      	ldrb	r3, [r7, #5]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10e      	bne.n	8006990 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8006972:	88fb      	ldrh	r3, [r7, #6]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	8892      	ldrh	r2, [r2, #4]
 8006978:	1a9b      	subs	r3, r3, r2
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	88d2      	ldrh	r2, [r2, #6]
 800697e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006982:	b292      	uxth	r2, r2
 8006984:	fb02 f303 	mul.w	r3, r2, r3
 8006988:	461a      	mov	r2, r3
 800698a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698c:	4413      	add	r3, r2
 800698e:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	889b      	ldrh	r3, [r3, #4]
 8006994:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8006996:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006998:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800699a:	e02e      	b.n	80069fa <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	889b      	ldrh	r3, [r3, #4]
 80069a0:	83bb      	strh	r3, [r7, #28]
 80069a2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80069a4:	837b      	strh	r3, [r7, #26]
 80069a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80069a8:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 80069aa:	8b7a      	ldrh	r2, [r7, #26]
 80069ac:	8b3b      	ldrh	r3, [r7, #24]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d304      	bcc.n	80069bc <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 80069b2:	8b7a      	ldrh	r2, [r7, #26]
 80069b4:	8b3b      	ldrh	r3, [r7, #24]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	e008      	b.n	80069ce <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80069bc:	8bbb      	ldrh	r3, [r7, #28]
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	8b79      	ldrh	r1, [r7, #26]
 80069c4:	8b3b      	ldrh	r3, [r7, #24]
 80069c6:	1acb      	subs	r3, r1, r3
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	4413      	add	r3, r2
 80069cc:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 80069ce:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 80069d0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80069d2:	88fb      	ldrh	r3, [r7, #6]
 80069d4:	441a      	add	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	889b      	ldrh	r3, [r3, #4]
 80069da:	005b      	lsls	r3, r3, #1
 80069dc:	429a      	cmp	r2, r3
 80069de:	db0c      	blt.n	80069fa <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8898      	ldrh	r0, [r3, #4]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	889a      	ldrh	r2, [r3, #4]
 80069e8:	88fb      	ldrh	r3, [r7, #6]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80069f0:	4619      	mov	r1, r3
 80069f2:	f7ff fe61 	bl	80066b8 <advance_index>
 80069f6:	4603      	mov	r3, r0
 80069f8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 80069fa:	88fb      	ldrh	r3, [r7, #6]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d023      	beq.n	8006a48 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	889b      	ldrh	r3, [r3, #4]
 8006a04:	82fb      	strh	r3, [r7, #22]
 8006a06:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006a08:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8006a0a:	e003      	b.n	8006a14 <_tu_fifo_write_n+0x164>
 8006a0c:	8aba      	ldrh	r2, [r7, #20]
 8006a0e:	8afb      	ldrh	r3, [r7, #22]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	82bb      	strh	r3, [r7, #20]
 8006a14:	8afa      	ldrh	r2, [r7, #22]
 8006a16:	8abb      	ldrh	r3, [r7, #20]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d9f7      	bls.n	8006a0c <_tu_fifo_write_n+0x15c>
  return idx;
 8006a1c:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006a1e:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8006a20:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8006a22:	88fa      	ldrh	r2, [r7, #6]
 8006a24:	797b      	ldrb	r3, [r7, #5]
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f7ff fc66 	bl	80062fe <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	889b      	ldrh	r3, [r3, #4]
 8006a36:	88fa      	ldrh	r2, [r7, #6]
 8006a38:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff fe3c 	bl	80066b8 <advance_index>
 8006a40:	4603      	mov	r3, r0
 8006a42:	461a      	mov	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8006a48:	88fb      	ldrh	r3, [r7, #6]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3740      	adds	r7, #64	@ 0x40
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b086      	sub	sp, #24
 8006a56:	af02      	add	r7, sp, #8
 8006a58:	60f8      	str	r0, [r7, #12]
 8006a5a:	60b9      	str	r1, [r7, #8]
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	461a      	mov	r2, r3
 8006a60:	460b      	mov	r3, r1
 8006a62:	80fb      	strh	r3, [r7, #6]
 8006a64:	4613      	mov	r3, r2
 8006a66:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	891b      	ldrh	r3, [r3, #8]
 8006a6c:	b298      	uxth	r0, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	895b      	ldrh	r3, [r3, #10]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	88f9      	ldrh	r1, [r7, #6]
 8006a76:	797a      	ldrb	r2, [r7, #5]
 8006a78:	9201      	str	r2, [sp, #4]
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	460a      	mov	r2, r1
 8006a80:	68b9      	ldr	r1, [r7, #8]
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f7ff fea4 	bl	80067d0 <_tu_fifo_peek_n>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	8898      	ldrh	r0, [r3, #4]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	895b      	ldrh	r3, [r3, #10]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	88fa      	ldrh	r2, [r7, #6]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	f7ff fe0d 	bl	80066b8 <advance_index>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8006aa6:	88fb      	ldrh	r3, [r7, #6]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	8899      	ldrh	r1, [r3, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	891b      	ldrh	r3, [r3, #8]
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	895b      	ldrh	r3, [r3, #10]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	8279      	strh	r1, [r7, #18]
 8006aca:	823a      	strh	r2, [r7, #16]
 8006acc:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 8006ace:	8a3a      	ldrh	r2, [r7, #16]
 8006ad0:	89fb      	ldrh	r3, [r7, #14]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d304      	bcc.n	8006ae0 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8006ad6:	8a3a      	ldrh	r2, [r7, #16]
 8006ad8:	89fb      	ldrh	r3, [r7, #14]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	e008      	b.n	8006af2 <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006ae0:	8a7b      	ldrh	r3, [r7, #18]
 8006ae2:	005b      	lsls	r3, r3, #1
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	8a39      	ldrh	r1, [r7, #16]
 8006ae8:	89fb      	ldrh	r3, [r7, #14]
 8006aea:	1acb      	subs	r3, r1, r3
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	4413      	add	r3, r2
 8006af0:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	8892      	ldrh	r2, [r2, #4]
 8006af6:	82fb      	strh	r3, [r7, #22]
 8006af8:	4613      	mov	r3, r2
 8006afa:	82bb      	strh	r3, [r7, #20]
 8006afc:	8afa      	ldrh	r2, [r7, #22]
 8006afe:	8abb      	ldrh	r3, [r7, #20]
 8006b00:	4293      	cmp	r3, r2
 8006b02:	bf28      	it	cs
 8006b04:	4613      	movcs	r3, r2
 8006b06:	b29b      	uxth	r3, r3
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	371c      	adds	r7, #28
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	8899      	ldrh	r1, [r3, #4]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	891b      	ldrh	r3, [r3, #8]
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	895b      	ldrh	r3, [r3, #10]
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	81f9      	strh	r1, [r7, #14]
 8006b2e:	81ba      	strh	r2, [r7, #12]
 8006b30:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8006b32:	89ba      	ldrh	r2, [r7, #12]
 8006b34:	897b      	ldrh	r3, [r7, #10]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d304      	bcc.n	8006b44 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8006b3a:	89ba      	ldrh	r2, [r7, #12]
 8006b3c:	897b      	ldrh	r3, [r7, #10]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	e008      	b.n	8006b56 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006b44:	89fb      	ldrh	r3, [r7, #14]
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	89b9      	ldrh	r1, [r7, #12]
 8006b4c:	897b      	ldrh	r3, [r7, #10]
 8006b4e:	1acb      	subs	r3, r1, r3
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	4413      	add	r3, r2
 8006b54:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	8892      	ldrh	r2, [r2, #4]
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	bf2c      	ite	cs
 8006b5e:	2301      	movcs	r3, #1
 8006b60:	2300      	movcc	r3, #0
 8006b62:	b2db      	uxtb	r3, r3
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	8899      	ldrh	r1, [r3, #4]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	891b      	ldrh	r3, [r3, #8]
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	895b      	ldrh	r3, [r3, #10]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	82f9      	strh	r1, [r7, #22]
 8006b8a:	82ba      	strh	r2, [r7, #20]
 8006b8c:	827b      	strh	r3, [r7, #18]
 8006b8e:	8afb      	ldrh	r3, [r7, #22]
 8006b90:	823b      	strh	r3, [r7, #16]
 8006b92:	8abb      	ldrh	r3, [r7, #20]
 8006b94:	81fb      	strh	r3, [r7, #14]
 8006b96:	8a7b      	ldrh	r3, [r7, #18]
 8006b98:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8006b9a:	89fa      	ldrh	r2, [r7, #14]
 8006b9c:	89bb      	ldrh	r3, [r7, #12]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d304      	bcc.n	8006bac <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8006ba2:	89fa      	ldrh	r2, [r7, #14]
 8006ba4:	89bb      	ldrh	r3, [r7, #12]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	e008      	b.n	8006bbe <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006bac:	8a3b      	ldrh	r3, [r7, #16]
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	89f9      	ldrh	r1, [r7, #14]
 8006bb4:	89bb      	ldrh	r3, [r7, #12]
 8006bb6:	1acb      	subs	r3, r1, r3
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	4413      	add	r3, r2
 8006bbc:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8006bbe:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8006bc0:	8afa      	ldrh	r2, [r7, #22]
 8006bc2:	897b      	ldrh	r3, [r7, #10]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d904      	bls.n	8006bd2 <tu_fifo_remaining+0x62>
 8006bc8:	8afa      	ldrh	r2, [r7, #22]
 8006bca:	897b      	ldrh	r3, [r7, #10]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	e000      	b.n	8006bd4 <tu_fifo_remaining+0x64>
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	371c      	adds	r7, #28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	891b      	ldrh	r3, [r3, #8]
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	895b      	ldrh	r3, [r3, #10]
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff fd83 	bl	8006704 <_tu_fifo_peek>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	8898      	ldrh	r0, [r3, #4]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	895b      	ldrh	r3, [r3, #10]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	7bfa      	ldrb	r2, [r7, #15]
 8006c0e:	b292      	uxth	r2, r2
 8006c10:	4619      	mov	r1, r3
 8006c12:	f7ff fd51 	bl	80066b8 <advance_index>
 8006c16:	4603      	mov	r3, r0
 8006c18:	461a      	mov	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	4613      	mov	r3, r2
 8006c34:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8006c36:	88fa      	ldrh	r2, [r7, #6]
 8006c38:	2300      	movs	r3, #0
 8006c3a:	68b9      	ldr	r1, [r7, #8]
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f7ff ff08 	bl	8006a52 <_tu_fifo_read_n>
 8006c42:	4603      	mov	r3, r0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	4613      	mov	r3, r2
 8006c58:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8006c5a:	88fa      	ldrh	r2, [r7, #6]
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	68b9      	ldr	r1, [r7, #8]
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f7ff fef6 	bl	8006a52 <_tu_fifo_read_n>
 8006c66:	4603      	mov	r3, r0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	891b      	ldrh	r3, [r3, #8]
 8006c7e:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7ff ff47 	bl	8006b14 <tu_fifo_full>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00c      	beq.n	8006ca6 <tu_fifo_write+0x36>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	79db      	ldrb	r3, [r3, #7]
 8006c90:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	f083 0301 	eor.w	r3, r3, #1
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <tu_fifo_write+0x36>
  {
    ret = false;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	75fb      	strb	r3, [r7, #23]
 8006ca4:	e022      	b.n	8006cec <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	889b      	ldrh	r3, [r3, #4]
 8006caa:	823b      	strh	r3, [r7, #16]
 8006cac:	8abb      	ldrh	r3, [r7, #20]
 8006cae:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8006cb0:	e003      	b.n	8006cba <tu_fifo_write+0x4a>
 8006cb2:	89fa      	ldrh	r2, [r7, #14]
 8006cb4:	8a3b      	ldrh	r3, [r7, #16]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	81fb      	strh	r3, [r7, #14]
 8006cba:	8a3a      	ldrh	r2, [r7, #16]
 8006cbc:	89fb      	ldrh	r3, [r7, #14]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d9f7      	bls.n	8006cb2 <tu_fifo_write+0x42>
  return idx;
 8006cc2:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006cc4:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8006cc6:	8a7b      	ldrh	r3, [r7, #18]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	6839      	ldr	r1, [r7, #0]
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7ff faf7 	bl	80062c0 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	889b      	ldrh	r3, [r3, #4]
 8006cd6:	8ab9      	ldrh	r1, [r7, #20]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7ff fcec 	bl	80066b8 <advance_index>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	811a      	strh	r2, [r3, #8]

    ret = true;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8006cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	60f8      	str	r0, [r7, #12]
 8006cfe:	60b9      	str	r1, [r7, #8]
 8006d00:	4613      	mov	r3, r2
 8006d02:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8006d04:	88fa      	ldrh	r2, [r7, #6]
 8006d06:	2300      	movs	r3, #0
 8006d08:	68b9      	ldr	r1, [r7, #8]
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f7ff fdd0 	bl	80068b0 <_tu_fifo_write_n>
 8006d10:	4603      	mov	r3, r0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	60f8      	str	r0, [r7, #12]
 8006d22:	60b9      	str	r1, [r7, #8]
 8006d24:	4613      	mov	r3, r2
 8006d26:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8006d28:	88fa      	ldrh	r2, [r7, #6]
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	68b9      	ldr	r1, [r7, #8]
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f7ff fdbe 	bl	80068b0 <_tu_fifo_write_n>
 8006d34:	4603      	mov	r3, r0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8006d52:	2301      	movs	r3, #1
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	4603      	mov	r3, r0
 8006d68:	6039      	str	r1, [r7, #0]
 8006d6a:	71fb      	strb	r3, [r7, #7]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
  return NULL;
}

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
  return NULL;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	4603      	mov	r3, r0
 8006da8:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <tud_mount_cb>:

TU_ATTR_WEAK void tud_mount_cb(void) {
 8006db8:	b480      	push	{r7}
 8006dba:	af00      	add	r7, sp, #0
}
 8006dbc:	bf00      	nop
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <tud_umount_cb>:

TU_ATTR_WEAK void tud_umount_cb(void) {
 8006dc6:	b480      	push	{r7}
 8006dc8:	af00      	add	r7, sp, #0
}
 8006dca:	bf00      	nop
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <tud_suspend_cb>:

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	4603      	mov	r3, r0
 8006ddc:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 8006dde:	bf00      	nop
 8006de0:	370c      	adds	r7, #12
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 8006dea:	b480      	push	{r7}
 8006dec:	af00      	add	r7, sp, #0
}
 8006dee:	bf00      	nop
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8006e02:	2301      	movs	r3, #1
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8006e14:	4b06      	ldr	r3, [pc, #24]	@ (8006e30 <tud_mounted+0x20>)
 8006e16:	785b      	ldrb	r3, [r3, #1]
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	bf14      	ite	ne
 8006e1e:	2301      	movne	r3, #1
 8006e20:	2300      	moveq	r3, #0
 8006e22:	b2db      	uxtb	r3, r3
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	20001070 	.word	0x20001070

08006e34 <tud_suspended>:

bool tud_suspended(void) {
 8006e34:	b480      	push	{r7}
 8006e36:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8006e38:	4b07      	ldr	r3, [pc, #28]	@ (8006e58 <tud_suspended+0x24>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	bf14      	ite	ne
 8006e46:	2301      	movne	r3, #1
 8006e48:	2300      	moveq	r3, #0
 8006e4a:	b2db      	uxtb	r3, r3
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	20001070 	.word	0x20001070

08006e5c <tud_remote_wakeup>:

bool tud_remote_wakeup(void) {
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en);
 8006e60:	4b0f      	ldr	r3, [pc, #60]	@ (8006ea0 <tud_remote_wakeup+0x44>)
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00d      	beq.n	8006e8a <tud_remote_wakeup+0x2e>
 8006e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea0 <tud_remote_wakeup+0x44>)
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	f003 0310 	and.w	r3, r3, #16
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d006      	beq.n	8006e8a <tud_remote_wakeup+0x2e>
 8006e7c:	4b08      	ldr	r3, [pc, #32]	@ (8006ea0 <tud_remote_wakeup+0x44>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	f003 0308 	and.w	r3, r3, #8
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <tud_remote_wakeup+0x32>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	e005      	b.n	8006e9a <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 8006e8e:	4b05      	ldr	r3, [pc, #20]	@ (8006ea4 <tud_remote_wakeup+0x48>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f002 fb96 	bl	80095c4 <dcd_remote_wakeup>
  return true;
 8006e98:	2301      	movs	r3, #1
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	20001070 	.word	0x20001070
 8006ea4:	20000069 	.word	0x20000069

08006ea8 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8006ea8:	b480      	push	{r7}
 8006eaa:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8006eac:	4b05      	ldr	r3, [pc, #20]	@ (8006ec4 <tud_inited+0x1c>)
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	2bff      	cmp	r3, #255	@ 0xff
 8006eb2:	bf14      	ite	ne
 8006eb4:	2301      	movne	r3, #1
 8006eb6:	2300      	moveq	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	20000069 	.word	0x20000069

08006ec8 <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b08c      	sub	sp, #48	@ 0x30
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	4603      	mov	r3, r0
 8006ed0:	6039      	str	r1, [r7, #0]
 8006ed2:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 8006ed4:	f7ff ffe8 	bl	8006ea8 <tud_inited>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e09e      	b.n	8007020 <tud_rhport_init+0x158>
  }
  TU_ASSERT(rh_init);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10a      	bne.n	8006efe <tud_rhport_init+0x36>
 8006ee8:	4b4f      	ldr	r3, [pc, #316]	@ (8007028 <tud_rhport_init+0x160>)
 8006eea:	61bb      	str	r3, [r7, #24]
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d000      	beq.n	8006efa <tud_rhport_init+0x32>
 8006ef8:	be00      	bkpt	0x0000
 8006efa:	2300      	movs	r3, #0
 8006efc:	e090      	b.n	8007020 <tud_rhport_init+0x158>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8006efe:	222c      	movs	r2, #44	@ 0x2c
 8006f00:	2100      	movs	r1, #0
 8006f02:	484a      	ldr	r0, [pc, #296]	@ (800702c <tud_rhport_init+0x164>)
 8006f04:	f004 f902 	bl	800b10c <memset>
  _usbd_queued_setup = 0;
 8006f08:	4b49      	ldr	r3, [pc, #292]	@ (8007030 <tud_rhport_init+0x168>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	4b49      	ldr	r3, [pc, #292]	@ (8007034 <tud_rhport_init+0x16c>)
 8006f10:	613b      	str	r3, [r7, #16]
#define OSAL_SPINLOCK_DEF(_name, _int_set) \
  osal_spinlock_t _name = { .interrupt_set = _int_set }

TU_ATTR_ALWAYS_INLINE static inline void osal_spin_init(osal_spinlock_t *ctx) {
  (void) ctx;
}
 8006f12:	bf00      	nop
 8006f14:	4b48      	ldr	r3, [pc, #288]	@ (8007038 <tud_rhport_init+0x170>)
 8006f16:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7ff ff0e 	bl	8006d3e <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8006f22:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8006f24:	4a45      	ldr	r2, [pc, #276]	@ (800703c <tud_rhport_init+0x174>)
 8006f26:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8006f28:	4b44      	ldr	r3, [pc, #272]	@ (800703c <tud_rhport_init+0x174>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10a      	bne.n	8006f46 <tud_rhport_init+0x7e>
 8006f30:	4b3d      	ldr	r3, [pc, #244]	@ (8007028 <tud_rhport_init+0x160>)
 8006f32:	61fb      	str	r3, [r7, #28]
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d000      	beq.n	8006f42 <tud_rhport_init+0x7a>
 8006f40:	be00      	bkpt	0x0000
 8006f42:	2300      	movs	r3, #0
 8006f44:	e06c      	b.n	8007020 <tud_rhport_init+0x158>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8006f46:	4b3e      	ldr	r3, [pc, #248]	@ (8007040 <tud_rhport_init+0x178>)
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d005      	beq.n	8006f58 <tud_rhport_init+0x90>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8006f4c:	483d      	ldr	r0, [pc, #244]	@ (8007044 <tud_rhport_init+0x17c>)
 8006f4e:	f3af 8000 	nop.w
 8006f52:	4603      	mov	r3, r0
 8006f54:	4a3c      	ldr	r2, [pc, #240]	@ (8007048 <tud_rhport_init+0x180>)
 8006f56:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006f58:	2300      	movs	r3, #0
 8006f5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006f5e:	e03a      	b.n	8006fd6 <tud_rhport_init+0x10e>
 8006f60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006f64:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8006f6a:	4b36      	ldr	r3, [pc, #216]	@ (8007044 <tud_rhport_init+0x17c>)
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	7bfa      	ldrb	r2, [r7, #15]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d206      	bcs.n	8006f82 <tud_rhport_init+0xba>
    driver = &_app_driver[drvid];
 8006f74:	4b34      	ldr	r3, [pc, #208]	@ (8007048 <tud_rhport_init+0x180>)
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
 8006f7a:	015b      	lsls	r3, r3, #5
 8006f7c:	4413      	add	r3, r2
 8006f7e:	60bb      	str	r3, [r7, #8]
 8006f80:	e00d      	b.n	8006f9e <tud_rhport_init+0xd6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006f82:	4b30      	ldr	r3, [pc, #192]	@ (8007044 <tud_rhport_init+0x17c>)
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	db07      	blt.n	8006f9e <tud_rhport_init+0xd6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	4a2c      	ldr	r2, [pc, #176]	@ (8007044 <tud_rhport_init+0x17c>)
 8006f92:	7812      	ldrb	r2, [r2, #0]
 8006f94:	1a9b      	subs	r3, r3, r2
 8006f96:	015b      	lsls	r3, r3, #5
 8006f98:	4a2c      	ldr	r2, [pc, #176]	@ (800704c <tud_rhport_init+0x184>)
 8006f9a:	4413      	add	r3, r2
 8006f9c:	60bb      	str	r3, [r7, #8]
  return driver;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
    usbd_class_driver_t const* driver = get_driver(i);
 8006fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d003      	beq.n	8006fb0 <tud_rhport_init+0xe8>
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10a      	bne.n	8006fc6 <tud_rhport_init+0xfe>
 8006fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8007028 <tud_rhport_init+0x160>)
 8006fb2:	623b      	str	r3, [r7, #32]
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d000      	beq.n	8006fc2 <tud_rhport_init+0xfa>
 8006fc0:	be00      	bkpt	0x0000
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e02c      	b.n	8007020 <tud_rhport_init+0x158>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006fcc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8007044 <tud_rhport_init+0x17c>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	1c5a      	adds	r2, r3, #1
 8006fdc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	dabd      	bge.n	8006f60 <tud_rhport_init+0x98>
  }

  _usbd_rhport = rhport;
 8006fe4:	4a1a      	ldr	r2, [pc, #104]	@ (8007050 <tud_rhport_init+0x188>)
 8006fe6:	79fb      	ldrb	r3, [r7, #7]
 8006fe8:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 8006fea:	79fb      	ldrb	r3, [r7, #7]
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f002 f9be 	bl	8009370 <dcd_init>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	f083 0301 	eor.w	r3, r3, #1
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00a      	beq.n	8007016 <tud_rhport_init+0x14e>
 8007000:	4b09      	ldr	r3, [pc, #36]	@ (8007028 <tud_rhport_init+0x160>)
 8007002:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b00      	cmp	r3, #0
 800700e:	d000      	beq.n	8007012 <tud_rhport_init+0x14a>
 8007010:	be00      	bkpt	0x0000
 8007012:	2300      	movs	r3, #0
 8007014:	e004      	b.n	8007020 <tud_rhport_init+0x158>
  dcd_int_enable(rhport);
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	4618      	mov	r0, r3
 800701a:	f002 fa47 	bl	80094ac <dcd_int_enable>

  return true;
 800701e:	2301      	movs	r3, #1
}
 8007020:	4618      	mov	r0, r3
 8007022:	3730      	adds	r7, #48	@ 0x30
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	e000edf0 	.word	0xe000edf0
 800702c:	20001070 	.word	0x20001070
 8007030:	2000109c 	.word	0x2000109c
 8007034:	2000006c 	.word	0x2000006c
 8007038:	20000070 	.word	0x20000070
 800703c:	20001168 	.word	0x20001168
 8007040:	00000000 	.word	0x00000000
 8007044:	200010a4 	.word	0x200010a4
 8007048:	200010a0 	.word	0x200010a0
 800704c:	0800c298 	.word	0x0800c298
 8007050:	20000069 	.word	0x20000069

08007054 <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8007054:	b580      	push	{r7, lr}
 8007056:	b088      	sub	sp, #32
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 800705e:	2300      	movs	r3, #0
 8007060:	77fb      	strb	r3, [r7, #31]
 8007062:	e034      	b.n	80070ce <configuration_reset+0x7a>
 8007064:	7ffb      	ldrb	r3, [r7, #31]
 8007066:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8007068:	2300      	movs	r3, #0
 800706a:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 800706c:	4b25      	ldr	r3, [pc, #148]	@ (8007104 <configuration_reset+0xb0>)
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	7cfa      	ldrb	r2, [r7, #19]
 8007072:	429a      	cmp	r2, r3
 8007074:	d206      	bcs.n	8007084 <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 8007076:	4b24      	ldr	r3, [pc, #144]	@ (8007108 <configuration_reset+0xb4>)
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	7cfb      	ldrb	r3, [r7, #19]
 800707c:	015b      	lsls	r3, r3, #5
 800707e:	4413      	add	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]
 8007082:	e00d      	b.n	80070a0 <configuration_reset+0x4c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007084:	4b1f      	ldr	r3, [pc, #124]	@ (8007104 <configuration_reset+0xb0>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	7cfb      	ldrb	r3, [r7, #19]
 800708c:	429a      	cmp	r2, r3
 800708e:	db07      	blt.n	80070a0 <configuration_reset+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007090:	7cfb      	ldrb	r3, [r7, #19]
 8007092:	4a1c      	ldr	r2, [pc, #112]	@ (8007104 <configuration_reset+0xb0>)
 8007094:	7812      	ldrb	r2, [r2, #0]
 8007096:	1a9b      	subs	r3, r3, r2
 8007098:	015b      	lsls	r3, r3, #5
 800709a:	4a1c      	ldr	r2, [pc, #112]	@ (800710c <configuration_reset+0xb8>)
 800709c:	4413      	add	r3, r2
 800709e:	60fb      	str	r3, [r7, #12]
  return driver;
 80070a0:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 80070a2:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d109      	bne.n	80070be <configuration_reset+0x6a>
 80070aa:	4b19      	ldr	r3, [pc, #100]	@ (8007110 <configuration_reset+0xbc>)
 80070ac:	617b      	str	r3, [r7, #20]
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d01f      	beq.n	80070fa <configuration_reset+0xa6>
 80070ba:	be00      	bkpt	0x0000
 80070bc:	e01d      	b.n	80070fa <configuration_reset+0xa6>
    driver->reset(rhport);
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	79fa      	ldrb	r2, [r7, #7]
 80070c4:	4610      	mov	r0, r2
 80070c6:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80070c8:	7ffb      	ldrb	r3, [r7, #31]
 80070ca:	3301      	adds	r3, #1
 80070cc:	77fb      	strb	r3, [r7, #31]
 80070ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007104 <configuration_reset+0xb0>)
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	1c5a      	adds	r2, r3, #1
 80070d4:	7ffb      	ldrb	r3, [r7, #31]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	dac4      	bge.n	8007064 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 80070da:	222c      	movs	r2, #44	@ 0x2c
 80070dc:	2100      	movs	r1, #0
 80070de:	480d      	ldr	r0, [pc, #52]	@ (8007114 <configuration_reset+0xc0>)
 80070e0:	f004 f814 	bl	800b10c <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 80070e4:	2210      	movs	r2, #16
 80070e6:	21ff      	movs	r1, #255	@ 0xff
 80070e8:	480b      	ldr	r0, [pc, #44]	@ (8007118 <configuration_reset+0xc4>)
 80070ea:	f004 f80f 	bl	800b10c <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 80070ee:	220c      	movs	r2, #12
 80070f0:	21ff      	movs	r1, #255	@ 0xff
 80070f2:	480a      	ldr	r0, [pc, #40]	@ (800711c <configuration_reset+0xc8>)
 80070f4:	f004 f80a 	bl	800b10c <memset>
 80070f8:	e000      	b.n	80070fc <configuration_reset+0xa8>
    TU_ASSERT(driver,);
 80070fa:	bf00      	nop
}
 80070fc:	3720      	adds	r7, #32
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	200010a4 	.word	0x200010a4
 8007108:	200010a0 	.word	0x200010a0
 800710c:	0800c298 	.word	0x0800c298
 8007110:	e000edf0 	.word	0xe000edf0
 8007114:	20001070 	.word	0x20001070
 8007118:	20001074 	.word	0x20001074
 800711c:	20001084 	.word	0x20001084

08007120 <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	4603      	mov	r3, r0
 8007128:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 800712a:	79fb      	ldrb	r3, [r7, #7]
 800712c:	4618      	mov	r0, r3
 800712e:	f7ff ff91 	bl	8007054 <configuration_reset>
  usbd_control_reset();
 8007132:	f001 fc29 	bl	8008988 <usbd_control_reset>
}
 8007136:	bf00      	nop
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
	...

08007140 <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8007140:	b590      	push	{r4, r7, lr}
 8007142:	b093      	sub	sp, #76	@ 0x4c
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	460b      	mov	r3, r1
 800714a:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 800714c:	f7ff feac 	bl	8006ea8 <tud_inited>
 8007150:	4603      	mov	r3, r0
 8007152:	f083 0301 	eor.w	r3, r3, #1
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	f040 8189 	bne.w	8007470 <tud_task_ext+0x330>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 800715e:	4bb1      	ldr	r3, [pc, #708]	@ (8007424 <tud_task_ext+0x2e4>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	633b      	str	r3, [r7, #48]	@ 0x30
 8007164:	f107 030c 	add.w	r3, r7, #12
 8007168:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 800716e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2000      	movs	r0, #0
 8007174:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 8007176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007178:	3304      	adds	r3, #4
 800717a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800717c:	4618      	mov	r0, r3
 800717e:	f7ff fd2f 	bl	8006be0 <tu_fifo_read>
 8007182:	4603      	mov	r3, r0
 8007184:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 8007188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2001      	movs	r0, #1
 800718e:	4798      	blx	r3

  return success;
 8007190:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007194:	f083 0301 	eor.w	r3, r3, #1
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	f040 816a 	bne.w	8007474 <tud_task_ext+0x334>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 80071a0:	7b7b      	ldrb	r3, [r7, #13]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	2b07      	cmp	r3, #7
 80071a6:	f200 814b 	bhi.w	8007440 <tud_task_ext+0x300>
 80071aa:	a201      	add	r2, pc, #4	@ (adr r2, 80071b0 <tud_task_ext+0x70>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071d1 	.word	0x080071d1
 80071b4:	080071e1 	.word	0x080071e1
 80071b8:	080073f5 	.word	0x080073f5
 80071bc:	080073a7 	.word	0x080073a7
 80071c0:	080073d1 	.word	0x080073d1
 80071c4:	080071ef 	.word	0x080071ef
 80071c8:	0800729f 	.word	0x0800729f
 80071cc:	080073e5 	.word	0x080073e5
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 80071d0:	7b3b      	ldrb	r3, [r7, #12]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff ffa4 	bl	8007120 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 80071d8:	7c3a      	ldrb	r2, [r7, #16]
 80071da:	4b93      	ldr	r3, [pc, #588]	@ (8007428 <tud_task_ext+0x2e8>)
 80071dc:	709a      	strb	r2, [r3, #2]
        break;
 80071de:	e146      	b.n	800746e <tud_task_ext+0x32e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 80071e0:	7b3b      	ldrb	r3, [r7, #12]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7ff ff9c 	bl	8007120 <usbd_reset>
        tud_umount_cb();
 80071e8:	f7ff fded 	bl	8006dc6 <tud_umount_cb>
        break;
 80071ec:	e13f      	b.n	800746e <tud_task_ext+0x32e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 80071ee:	4b8f      	ldr	r3, [pc, #572]	@ (800742c <tud_task_ext+0x2ec>)
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10a      	bne.n	800720e <tud_task_ext+0xce>
 80071f8:	4b8d      	ldr	r3, [pc, #564]	@ (8007430 <tud_task_ext+0x2f0>)
 80071fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 8137 	beq.w	8007478 <tud_task_ext+0x338>
 800720a:	be00      	bkpt	0x0000
 800720c:	e134      	b.n	8007478 <tud_task_ext+0x338>
        _usbd_queued_setup--;
 800720e:	4b87      	ldr	r3, [pc, #540]	@ (800742c <tud_task_ext+0x2ec>)
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	b2db      	uxtb	r3, r3
 8007214:	3b01      	subs	r3, #1
 8007216:	b2da      	uxtb	r2, r3
 8007218:	4b84      	ldr	r3, [pc, #528]	@ (800742c <tud_task_ext+0x2ec>)
 800721a:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 800721c:	4b83      	ldr	r3, [pc, #524]	@ (800742c <tud_task_ext+0x2ec>)
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	f040 8116 	bne.w	8007454 <tud_task_ext+0x314>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8007228:	4a7f      	ldr	r2, [pc, #508]	@ (8007428 <tud_task_ext+0x2e8>)
 800722a:	7813      	ldrb	r3, [r2, #0]
 800722c:	f043 0301 	orr.w	r3, r3, #1
 8007230:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8007232:	4a7d      	ldr	r2, [pc, #500]	@ (8007428 <tud_task_ext+0x2e8>)
 8007234:	f892 3020 	ldrb.w	r3, [r2, #32]
 8007238:	f023 0301 	bic.w	r3, r3, #1
 800723c:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8007240:	4a79      	ldr	r2, [pc, #484]	@ (8007428 <tud_task_ext+0x2e8>)
 8007242:	f892 3020 	ldrb.w	r3, [r2, #32]
 8007246:	f023 0304 	bic.w	r3, r3, #4
 800724a:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 800724e:	4a76      	ldr	r2, [pc, #472]	@ (8007428 <tud_task_ext+0x2e8>)
 8007250:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8007254:	f023 0301 	bic.w	r3, r3, #1
 8007258:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 800725c:	4a72      	ldr	r2, [pc, #456]	@ (8007428 <tud_task_ext+0x2e8>)
 800725e:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8007262:	f023 0304 	bic.w	r3, r3, #4
 8007266:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 800726a:	7b3a      	ldrb	r2, [r7, #12]
 800726c:	f107 030c 	add.w	r3, r7, #12
 8007270:	3304      	adds	r3, #4
 8007272:	4619      	mov	r1, r3
 8007274:	4610      	mov	r0, r2
 8007276:	f000 f91f 	bl	80074b8 <process_control_request>
 800727a:	4603      	mov	r3, r0
 800727c:	f083 0301 	eor.w	r3, r3, #1
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 80e8 	beq.w	8007458 <tud_task_ext+0x318>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8007288:	7b3b      	ldrb	r3, [r7, #12]
 800728a:	2100      	movs	r1, #0
 800728c:	4618      	mov	r0, r3
 800728e:	f002 fb6d 	bl	800996c <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8007292:	7b3b      	ldrb	r3, [r7, #12]
 8007294:	2180      	movs	r1, #128	@ 0x80
 8007296:	4618      	mov	r0, r3
 8007298:	f002 fb68 	bl	800996c <dcd_edpt_stall>
        }
        break;
 800729c:	e0dc      	b.n	8007458 <tud_task_ext+0x318>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 800729e:	7c3b      	ldrb	r3, [r7, #16]
 80072a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80072a4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80072a8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80072ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072b4:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 80072b6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80072ba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80072be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80072c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80072c6:	09db      	lsrs	r3, r3, #7
 80072c8:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 80072ca:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 80072ce:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80072d2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80072d6:	4954      	ldr	r1, [pc, #336]	@ (8007428 <tud_task_ext+0x2e8>)
 80072d8:	0052      	lsls	r2, r2, #1
 80072da:	440a      	add	r2, r1
 80072dc:	4413      	add	r3, r2
 80072de:	f103 0220 	add.w	r2, r3, #32
 80072e2:	7813      	ldrb	r3, [r2, #0]
 80072e4:	f023 0301 	bic.w	r3, r3, #1
 80072e8:	7013      	strb	r3, [r2, #0]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80072ea:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80072ee:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80072f2:	494d      	ldr	r1, [pc, #308]	@ (8007428 <tud_task_ext+0x2e8>)
 80072f4:	0052      	lsls	r2, r2, #1
 80072f6:	440a      	add	r2, r1
 80072f8:	4413      	add	r3, r2
 80072fa:	f103 0220 	add.w	r2, r3, #32
 80072fe:	7813      	ldrb	r3, [r2, #0]
 8007300:	f023 0304 	bic.w	r3, r3, #4
 8007304:	7013      	strb	r3, [r2, #0]

        if (0 == epnum) {
 8007306:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800730a:	2b00      	cmp	r3, #0
 800730c:	d107      	bne.n	800731e <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 800730e:	7b38      	ldrb	r0, [r7, #12]
 8007310:	7c7a      	ldrb	r2, [r7, #17]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8007318:	f001 fb6c 	bl	80089f4 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 800731c:	e0a7      	b.n	800746e <tud_task_ext+0x32e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 800731e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8007322:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007326:	4940      	ldr	r1, [pc, #256]	@ (8007428 <tud_task_ext+0x2e8>)
 8007328:	0052      	lsls	r2, r2, #1
 800732a:	440a      	add	r2, r1
 800732c:	4413      	add	r3, r2
 800732e:	3314      	adds	r3, #20
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 8007336:	2300      	movs	r3, #0
 8007338:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 800733a:	4b3e      	ldr	r3, [pc, #248]	@ (8007434 <tud_task_ext+0x2f4>)
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8007342:	429a      	cmp	r2, r3
 8007344:	d207      	bcs.n	8007356 <tud_task_ext+0x216>
    driver = &_app_driver[drvid];
 8007346:	4b3c      	ldr	r3, [pc, #240]	@ (8007438 <tud_task_ext+0x2f8>)
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800734e:	015b      	lsls	r3, r3, #5
 8007350:	4413      	add	r3, r2
 8007352:	623b      	str	r3, [r7, #32]
 8007354:	e00f      	b.n	8007376 <tud_task_ext+0x236>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007356:	4b37      	ldr	r3, [pc, #220]	@ (8007434 <tud_task_ext+0x2f4>)
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007360:	429a      	cmp	r2, r3
 8007362:	db08      	blt.n	8007376 <tud_task_ext+0x236>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007364:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007368:	4a32      	ldr	r2, [pc, #200]	@ (8007434 <tud_task_ext+0x2f4>)
 800736a:	7812      	ldrb	r2, [r2, #0]
 800736c:	1a9b      	subs	r3, r3, r2
 800736e:	015b      	lsls	r3, r3, #5
 8007370:	4a32      	ldr	r2, [pc, #200]	@ (800743c <tud_task_ext+0x2fc>)
 8007372:	4413      	add	r3, r2
 8007374:	623b      	str	r3, [r7, #32]
  return driver;
 8007376:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8007378:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 800737a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800737c:	2b00      	cmp	r3, #0
 800737e:	d109      	bne.n	8007394 <tud_task_ext+0x254>
 8007380:	4b2b      	ldr	r3, [pc, #172]	@ (8007430 <tud_task_ext+0x2f0>)
 8007382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b00      	cmp	r3, #0
 800738e:	d075      	beq.n	800747c <tud_task_ext+0x33c>
 8007390:	be00      	bkpt	0x0000
 8007392:	e073      	b.n	800747c <tud_task_ext+0x33c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8007394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007396:	699c      	ldr	r4, [r3, #24]
 8007398:	7b38      	ldrb	r0, [r7, #12]
 800739a:	7c7a      	ldrb	r2, [r7, #17]
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80073a2:	47a0      	blx	r4
        break;
 80073a4:	e063      	b.n	800746e <tud_task_ext+0x32e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 80073a6:	4b20      	ldr	r3, [pc, #128]	@ (8007428 <tud_task_ext+0x2e8>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d053      	beq.n	800745c <tud_task_ext+0x31c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 80073b4:	4b1c      	ldr	r3, [pc, #112]	@ (8007428 <tud_task_ext+0x2e8>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	bf14      	ite	ne
 80073c2:	2301      	movne	r3, #1
 80073c4:	2300      	moveq	r3, #0
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7ff fd03 	bl	8006dd4 <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80073ce:	e045      	b.n	800745c <tud_task_ext+0x31c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 80073d0:	4b15      	ldr	r3, [pc, #84]	@ (8007428 <tud_task_ext+0x2e8>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d040      	beq.n	8007460 <tud_task_ext+0x320>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 80073de:	f7ff fd04 	bl	8006dea <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80073e2:	e03d      	b.n	8007460 <tud_task_ext+0x320>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) {
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d03c      	beq.n	8007464 <tud_task_ext+0x324>
          event.func_call.func(event.func_call.param);
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	4610      	mov	r0, r2
 80073f0:	4798      	blx	r3
        }
        break;
 80073f2:	e037      	b.n	8007464 <tud_task_ext+0x324>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 80073f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007428 <tud_task_ext+0x2e8>)
 80073f6:	78db      	ldrb	r3, [r3, #3]
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	61fb      	str	r3, [r7, #28]
 80073fc:	2300      	movs	r3, #0
 80073fe:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8007400:	7efb      	ldrb	r3, [r7, #27]
 8007402:	69fa      	ldr	r2, [r7, #28]
 8007404:	fa22 f303 	lsr.w	r3, r2, r3
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	bf14      	ite	ne
 8007410:	2301      	movne	r3, #1
 8007412:	2300      	moveq	r3, #0
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d026      	beq.n	8007468 <tud_task_ext+0x328>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	4618      	mov	r0, r3
 800741e:	f7ff fcad 	bl	8006d7c <tud_sof_cb>
        }
      break;
 8007422:	e021      	b.n	8007468 <tud_task_ext+0x328>
 8007424:	20001168 	.word	0x20001168
 8007428:	20001070 	.word	0x20001070
 800742c:	2000109c 	.word	0x2000109c
 8007430:	e000edf0 	.word	0xe000edf0
 8007434:	200010a4 	.word	0x200010a4
 8007438:	200010a0 	.word	0x200010a0
 800743c:	0800c298 	.word	0x0800c298

      default:
        TU_BREAKPOINT();
 8007440:	4b10      	ldr	r3, [pc, #64]	@ (8007484 <tud_task_ext+0x344>)
 8007442:	637b      	str	r3, [r7, #52]	@ 0x34
 8007444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00d      	beq.n	800746c <tud_task_ext+0x32c>
 8007450:	be00      	bkpt	0x0000
        break;
 8007452:	e00b      	b.n	800746c <tud_task_ext+0x32c>
          break;
 8007454:	bf00      	nop
 8007456:	e682      	b.n	800715e <tud_task_ext+0x1e>
        break;
 8007458:	bf00      	nop
 800745a:	e680      	b.n	800715e <tud_task_ext+0x1e>
        break;
 800745c:	bf00      	nop
 800745e:	e67e      	b.n	800715e <tud_task_ext+0x1e>
        break;
 8007460:	bf00      	nop
 8007462:	e67c      	b.n	800715e <tud_task_ext+0x1e>
        break;
 8007464:	bf00      	nop
 8007466:	e67a      	b.n	800715e <tud_task_ext+0x1e>
      break;
 8007468:	bf00      	nop
 800746a:	e678      	b.n	800715e <tud_task_ext+0x1e>
        break;
 800746c:	bf00      	nop
  while (1) {
 800746e:	e676      	b.n	800715e <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 8007470:	bf00      	nop
 8007472:	e004      	b.n	800747e <tud_task_ext+0x33e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8007474:	bf00      	nop
 8007476:	e002      	b.n	800747e <tud_task_ext+0x33e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8007478:	bf00      	nop
 800747a:	e000      	b.n	800747e <tud_task_ext+0x33e>
          TU_ASSERT(driver,);
 800747c:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) { return; }
#endif
  }
}
 800747e:	374c      	adds	r7, #76	@ 0x4c
 8007480:	46bd      	mov	sp, r7
 8007482:	bd90      	pop	{r4, r7, pc}
 8007484:	e000edf0 	.word	0xe000edf0

08007488 <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	4603      	mov	r3, r0
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
 8007494:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	4618      	mov	r0, r3
 800749c:	f001 fa80 	bl	80089a0 <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	7bf8      	ldrb	r0, [r7, #15]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	2101      	movs	r1, #1
 80074aa:	4798      	blx	r3
 80074ac:	4603      	mov	r3, r0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
	...

080074b8 <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b09a      	sub	sp, #104	@ 0x68
 80074bc:	af00      	add	r7, sp, #0
 80074be:	4603      	mov	r3, r0
 80074c0:	6039      	str	r1, [r7, #0]
 80074c2:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 80074c4:	2000      	movs	r0, #0
 80074c6:	f001 fa6b 	bl	80089a0 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b60      	cmp	r3, #96	@ 0x60
 80074d6:	d10a      	bne.n	80074ee <process_control_request+0x36>
 80074d8:	4ba5      	ldr	r3, [pc, #660]	@ (8007770 <process_control_request+0x2b8>)
 80074da:	633b      	str	r3, [r7, #48]	@ 0x30
 80074dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d000      	beq.n	80074ea <process_control_request+0x32>
 80074e8:	be00      	bkpt	0x0000
 80074ea:	2300      	movs	r3, #0
 80074ec:	e2bb      	b.n	8007a66 <process_control_request+0x5ae>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b40      	cmp	r3, #64	@ 0x40
 80074fa:	d10a      	bne.n	8007512 <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 80074fc:	489d      	ldr	r0, [pc, #628]	@ (8007774 <process_control_request+0x2bc>)
 80074fe:	f001 fa4f 	bl	80089a0 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8007502:	79fb      	ldrb	r3, [r7, #7]
 8007504:	683a      	ldr	r2, [r7, #0]
 8007506:	2101      	movs	r1, #1
 8007508:	4618      	mov	r0, r3
 800750a:	f7f9 f9cf 	bl	80008ac <tud_vendor_control_xfer_cb>
 800750e:	4603      	mov	r3, r0
 8007510:	e2a9      	b.n	8007a66 <process_control_request+0x5ae>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b02      	cmp	r3, #2
 800751e:	f000 81ca 	beq.w	80078b6 <process_control_request+0x3fe>
 8007522:	2b02      	cmp	r3, #2
 8007524:	f300 8292 	bgt.w	8007a4c <process_control_request+0x594>
 8007528:	2b00      	cmp	r3, #0
 800752a:	d003      	beq.n	8007534 <process_control_request+0x7c>
 800752c:	2b01      	cmp	r3, #1
 800752e:	f000 8151 	beq.w	80077d4 <process_control_request+0x31c>
 8007532:	e28b      	b.n	8007a4c <process_control_request+0x594>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b20      	cmp	r3, #32
 8007540:	d143      	bne.n	80075ca <process_control_request+0x112>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	889b      	ldrh	r3, [r3, #4]
 8007546:	b29b      	uxth	r3, r3
 8007548:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800754a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800754c:	b2db      	uxtb	r3, r3
 800754e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8007552:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007556:	2b0f      	cmp	r3, #15
 8007558:	d901      	bls.n	800755e <process_control_request+0xa6>
 800755a:	2300      	movs	r3, #0
 800755c:	e283      	b.n	8007a66 <process_control_request+0x5ae>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800755e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007562:	4a85      	ldr	r2, [pc, #532]	@ (8007778 <process_control_request+0x2c0>)
 8007564:	4413      	add	r3, r2
 8007566:	791b      	ldrb	r3, [r3, #4]
 8007568:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 800756c:	2300      	movs	r3, #0
 800756e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 8007570:	4b82      	ldr	r3, [pc, #520]	@ (800777c <process_control_request+0x2c4>)
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8007578:	429a      	cmp	r2, r3
 800757a:	d207      	bcs.n	800758c <process_control_request+0xd4>
    driver = &_app_driver[drvid];
 800757c:	4b80      	ldr	r3, [pc, #512]	@ (8007780 <process_control_request+0x2c8>)
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007584:	015b      	lsls	r3, r3, #5
 8007586:	4413      	add	r3, r2
 8007588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800758a:	e00f      	b.n	80075ac <process_control_request+0xf4>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800758c:	4b7b      	ldr	r3, [pc, #492]	@ (800777c <process_control_request+0x2c4>)
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	1c5a      	adds	r2, r3, #1
 8007592:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007596:	429a      	cmp	r2, r3
 8007598:	db08      	blt.n	80075ac <process_control_request+0xf4>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800759a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800759e:	4a77      	ldr	r2, [pc, #476]	@ (800777c <process_control_request+0x2c4>)
 80075a0:	7812      	ldrb	r2, [r2, #0]
 80075a2:	1a9b      	subs	r3, r3, r2
 80075a4:	015b      	lsls	r3, r3, #5
 80075a6:	4a77      	ldr	r2, [pc, #476]	@ (8007784 <process_control_request+0x2cc>)
 80075a8:	4413      	add	r3, r2
 80075aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 80075ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80075ae:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 80075b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <process_control_request+0x102>
 80075b6:	2300      	movs	r3, #0
 80075b8:	e255      	b.n	8007a66 <process_control_request+0x5ae>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 80075ba:	79fb      	ldrb	r3, [r7, #7]
 80075bc:	683a      	ldr	r2, [r7, #0]
 80075be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff ff61 	bl	8007488 <invoke_class_control>
 80075c6:	4603      	mov	r3, r0
 80075c8:	e24d      	b.n	8007a66 <process_control_request+0x5ae>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00a      	beq.n	80075ee <process_control_request+0x136>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 80075d8:	4b65      	ldr	r3, [pc, #404]	@ (8007770 <process_control_request+0x2b8>)
 80075da:	643b      	str	r3, [r7, #64]	@ 0x40
 80075dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d000      	beq.n	80075ea <process_control_request+0x132>
 80075e8:	be00      	bkpt	0x0000
        return false;
 80075ea:	2300      	movs	r3, #0
 80075ec:	e23b      	b.n	8007a66 <process_control_request+0x5ae>
      }

      switch ( p_request->bRequest ) {
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	785b      	ldrb	r3, [r3, #1]
 80075f2:	2b09      	cmp	r3, #9
 80075f4:	f200 80e1 	bhi.w	80077ba <process_control_request+0x302>
 80075f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007600 <process_control_request+0x148>)
 80075fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fe:	bf00      	nop
 8007600:	08007789 	.word	0x08007789
 8007604:	0800774d 	.word	0x0800774d
 8007608:	080077bb 	.word	0x080077bb
 800760c:	08007727 	.word	0x08007727
 8007610:	080077bb 	.word	0x080077bb
 8007614:	08007629 	.word	0x08007629
 8007618:	0800770d 	.word	0x0800770d
 800761c:	080077bb 	.word	0x080077bb
 8007620:	0800764d 	.word	0x0800764d
 8007624:	08007665 	.word	0x08007665
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8007628:	6838      	ldr	r0, [r7, #0]
 800762a:	f001 f9c9 	bl	80089c0 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	885b      	ldrh	r3, [r3, #2]
 8007632:	b29b      	uxth	r3, r3
 8007634:	b2da      	uxtb	r2, r3
 8007636:	79fb      	ldrb	r3, [r7, #7]
 8007638:	4611      	mov	r1, r2
 800763a:	4618      	mov	r0, r3
 800763c:	f001 ff86 	bl	800954c <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8007640:	4a4d      	ldr	r2, [pc, #308]	@ (8007778 <process_control_request+0x2c0>)
 8007642:	7813      	ldrb	r3, [r2, #0]
 8007644:	f043 0302 	orr.w	r3, r3, #2
 8007648:	7013      	strb	r3, [r2, #0]
        break;
 800764a:	e0c2      	b.n	80077d2 <process_control_request+0x31a>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 800764c:	4b4a      	ldr	r3, [pc, #296]	@ (8007778 <process_control_request+0x2c0>)
 800764e:	785b      	ldrb	r3, [r3, #1]
 8007650:	b2db      	uxtb	r3, r3
 8007652:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8007654:	f107 0213 	add.w	r2, r7, #19
 8007658:	79f8      	ldrb	r0, [r7, #7]
 800765a:	2301      	movs	r3, #1
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	f001 f923 	bl	80088a8 <tud_control_xfer>
        }
        break;
 8007662:	e0b6      	b.n	80077d2 <process_control_request+0x31a>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	885b      	ldrh	r3, [r3, #2]
 8007668:	b29b      	uxth	r3, r3
 800766a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 800766e:	4b42      	ldr	r3, [pc, #264]	@ (8007778 <process_control_request+0x2c0>)
 8007670:	785b      	ldrb	r3, [r3, #1]
 8007672:	b2db      	uxtb	r3, r3
 8007674:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007678:	429a      	cmp	r2, r3
 800767a:	d041      	beq.n	8007700 <process_control_request+0x248>
            if ( _usbd_dev.cfg_num ) {
 800767c:	4b3e      	ldr	r3, [pc, #248]	@ (8007778 <process_control_request+0x2c0>)
 800767e:	785b      	ldrb	r3, [r3, #1]
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d014      	beq.n	80076b0 <process_control_request+0x1f8>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 8007686:	79fb      	ldrb	r3, [r7, #7]
 8007688:	2100      	movs	r1, #0
 800768a:	4618      	mov	r0, r3
 800768c:	f002 f824 	bl	80096d8 <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8007690:	79fb      	ldrb	r3, [r7, #7]
 8007692:	4618      	mov	r0, r3
 8007694:	f002 f888 	bl	80097a8 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8007698:	4b37      	ldr	r3, [pc, #220]	@ (8007778 <process_control_request+0x2c0>)
 800769a:	789b      	ldrb	r3, [r3, #2]
 800769c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 80076a0:	79fb      	ldrb	r3, [r7, #7]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7ff fcd6 	bl	8007054 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 80076a8:	4a33      	ldr	r2, [pc, #204]	@ (8007778 <process_control_request+0x2c0>)
 80076aa:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80076ae:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 80076b0:	4a31      	ldr	r2, [pc, #196]	@ (8007778 <process_control_request+0x2c0>)
 80076b2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80076b6:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 80076b8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d01d      	beq.n	80076fc <process_control_request+0x244>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 80076c0:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80076c4:	79fb      	ldrb	r3, [r7, #7]
 80076c6:	4611      	mov	r1, r2
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 f9d5 	bl	8007a78 <process_set_config>
 80076ce:	4603      	mov	r3, r0
 80076d0:	f083 0301 	eor.w	r3, r3, #1
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00d      	beq.n	80076f6 <process_control_request+0x23e>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 80076da:	4b25      	ldr	r3, [pc, #148]	@ (8007770 <process_control_request+0x2b8>)
 80076dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d000      	beq.n	80076ec <process_control_request+0x234>
 80076ea:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 80076ec:	4b22      	ldr	r3, [pc, #136]	@ (8007778 <process_control_request+0x2c0>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	705a      	strb	r2, [r3, #1]
                return false;
 80076f2:	2300      	movs	r3, #0
 80076f4:	e1b7      	b.n	8007a66 <process_control_request+0x5ae>
              }
              tud_mount_cb();
 80076f6:	f7ff fb5f 	bl	8006db8 <tud_mount_cb>
 80076fa:	e001      	b.n	8007700 <process_control_request+0x248>
            } else {
              tud_umount_cb();
 80076fc:	f7ff fb63 	bl	8006dc6 <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 8007700:	79fb      	ldrb	r3, [r7, #7]
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	4618      	mov	r0, r3
 8007706:	f001 f85d 	bl	80087c4 <tud_control_status>
        }
        break;
 800770a:	e062      	b.n	80077d2 <process_control_request+0x31a>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 800770c:	79fb      	ldrb	r3, [r7, #7]
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	4618      	mov	r0, r3
 8007712:	f000 fad7 	bl	8007cc4 <process_get_descriptor>
 8007716:	4603      	mov	r3, r0
 8007718:	f083 0301 	eor.w	r3, r3, #1
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d056      	beq.n	80077d0 <process_control_request+0x318>
 8007722:	2300      	movs	r3, #0
 8007724:	e19f      	b.n	8007a66 <process_control_request+0x5ae>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	885b      	ldrh	r3, [r3, #2]
 800772a:	b29b      	uxth	r3, r3
 800772c:	2b01      	cmp	r3, #1
 800772e:	d10b      	bne.n	8007748 <process_control_request+0x290>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 8007730:	4a11      	ldr	r2, [pc, #68]	@ (8007778 <process_control_request+0x2c0>)
 8007732:	7813      	ldrb	r3, [r2, #0]
 8007734:	f043 0308 	orr.w	r3, r3, #8
 8007738:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	4618      	mov	r0, r3
 8007740:	f001 f840 	bl	80087c4 <tud_control_status>
            break;
 8007744:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 8007746:	e044      	b.n	80077d2 <process_control_request+0x31a>
            default: return false;
 8007748:	2300      	movs	r3, #0
 800774a:	e18c      	b.n	8007a66 <process_control_request+0x5ae>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	885b      	ldrh	r3, [r3, #2]
 8007750:	b29b      	uxth	r3, r3
 8007752:	2b01      	cmp	r3, #1
 8007754:	d001      	beq.n	800775a <process_control_request+0x2a2>
 8007756:	2300      	movs	r3, #0
 8007758:	e185      	b.n	8007a66 <process_control_request+0x5ae>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 800775a:	4a07      	ldr	r2, [pc, #28]	@ (8007778 <process_control_request+0x2c0>)
 800775c:	7813      	ldrb	r3, [r2, #0]
 800775e:	f023 0308 	bic.w	r3, r3, #8
 8007762:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8007764:	79fb      	ldrb	r3, [r7, #7]
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	4618      	mov	r0, r3
 800776a:	f001 f82b 	bl	80087c4 <tud_control_status>
        break;
 800776e:	e030      	b.n	80077d2 <process_control_request+0x31a>
 8007770:	e000edf0 	.word	0xe000edf0
 8007774:	080008ad 	.word	0x080008ad
 8007778:	20001070 	.word	0x20001070
 800777c:	200010a4 	.word	0x200010a4
 8007780:	200010a0 	.word	0x200010a0
 8007784:	0800c298 	.word	0x0800c298

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8007788:	4b94      	ldr	r3, [pc, #592]	@ (80079dc <process_control_request+0x524>)
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	095b      	lsrs	r3, r3, #5
 800778e:	b2db      	uxtb	r3, r3
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	b29a      	uxth	r2, r3
 8007796:	4b91      	ldr	r3, [pc, #580]	@ (80079dc <process_control_request+0x524>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	089b      	lsrs	r3, r3, #2
 800779c:	b2db      	uxtb	r3, r3
 800779e:	f003 0302 	and.w	r3, r3, #2
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	4313      	orrs	r3, r2
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 80077aa:	f107 0210 	add.w	r2, r7, #16
 80077ae:	79f8      	ldrb	r0, [r7, #7]
 80077b0:	2302      	movs	r3, #2
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	f001 f878 	bl	80088a8 <tud_control_xfer>
          break;
 80077b8:	e00b      	b.n	80077d2 <process_control_request+0x31a>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 80077ba:	4b89      	ldr	r3, [pc, #548]	@ (80079e0 <process_control_request+0x528>)
 80077bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80077be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d000      	beq.n	80077cc <process_control_request+0x314>
 80077ca:	be00      	bkpt	0x0000
 80077cc:	2300      	movs	r3, #0
 80077ce:	e14a      	b.n	8007a66 <process_control_request+0x5ae>
        break;
 80077d0:	bf00      	nop
      }
    break;
 80077d2:	e147      	b.n	8007a64 <process_control_request+0x5ac>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	889b      	ldrh	r3, [r3, #4]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80077dc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80077e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80077e8:	2b0f      	cmp	r3, #15
 80077ea:	d901      	bls.n	80077f0 <process_control_request+0x338>
 80077ec:	2300      	movs	r3, #0
 80077ee:	e13a      	b.n	8007a66 <process_control_request+0x5ae>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80077f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80077f4:	4a79      	ldr	r2, [pc, #484]	@ (80079dc <process_control_request+0x524>)
 80077f6:	4413      	add	r3, r2
 80077f8:	791b      	ldrb	r3, [r3, #4]
 80077fa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 80077fe:	2300      	movs	r3, #0
 8007800:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8007802:	4b78      	ldr	r3, [pc, #480]	@ (80079e4 <process_control_request+0x52c>)
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800780a:	429a      	cmp	r2, r3
 800780c:	d207      	bcs.n	800781e <process_control_request+0x366>
    driver = &_app_driver[drvid];
 800780e:	4b76      	ldr	r3, [pc, #472]	@ (80079e8 <process_control_request+0x530>)
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007816:	015b      	lsls	r3, r3, #5
 8007818:	4413      	add	r3, r2
 800781a:	623b      	str	r3, [r7, #32]
 800781c:	e00f      	b.n	800783e <process_control_request+0x386>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800781e:	4b71      	ldr	r3, [pc, #452]	@ (80079e4 <process_control_request+0x52c>)
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	1c5a      	adds	r2, r3, #1
 8007824:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007828:	429a      	cmp	r2, r3
 800782a:	db08      	blt.n	800783e <process_control_request+0x386>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800782c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007830:	4a6c      	ldr	r2, [pc, #432]	@ (80079e4 <process_control_request+0x52c>)
 8007832:	7812      	ldrb	r2, [r2, #0]
 8007834:	1a9b      	subs	r3, r3, r2
 8007836:	015b      	lsls	r3, r3, #5
 8007838:	4a6c      	ldr	r2, [pc, #432]	@ (80079ec <process_control_request+0x534>)
 800783a:	4413      	add	r3, r2
 800783c:	623b      	str	r3, [r7, #32]
  return driver;
 800783e:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8007840:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 8007842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <process_control_request+0x394>
 8007848:	2300      	movs	r3, #0
 800784a:	e10c      	b.n	8007a66 <process_control_request+0x5ae>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 800784c:	79fb      	ldrb	r3, [r7, #7]
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007852:	4618      	mov	r0, r3
 8007854:	f7ff fe18 	bl	8007488 <invoke_class_control>
 8007858:	4603      	mov	r3, r0
 800785a:	f083 0301 	eor.w	r3, r3, #1
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 80fe 	beq.w	8007a62 <process_control_request+0x5aa>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b00      	cmp	r3, #0
 8007872:	d001      	beq.n	8007878 <process_control_request+0x3c0>
 8007874:	2300      	movs	r3, #0
 8007876:	e0f6      	b.n	8007a66 <process_control_request+0x5ae>

        switch(p_request->bRequest) {
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	785b      	ldrb	r3, [r3, #1]
 800787c:	3b0a      	subs	r3, #10
 800787e:	2b01      	cmp	r3, #1
 8007880:	d816      	bhi.n	80078b0 <process_control_request+0x3f8>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8007882:	2000      	movs	r0, #0
 8007884:	f001 f88c 	bl	80089a0 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	785b      	ldrb	r3, [r3, #1]
 800788c:	2b0a      	cmp	r3, #10
 800788e:	d109      	bne.n	80078a4 <process_control_request+0x3ec>
              uint8_t alternate = 0;
 8007890:	2300      	movs	r3, #0
 8007892:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8007894:	f107 020f 	add.w	r2, r7, #15
 8007898:	79f8      	ldrb	r0, [r7, #7]
 800789a:	2301      	movs	r3, #1
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	f001 f803 	bl	80088a8 <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 80078a2:	e007      	b.n	80078b4 <process_control_request+0x3fc>
              tud_control_status(rhport, p_request);
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 ff8b 	bl	80087c4 <tud_control_status>
          break;
 80078ae:	e001      	b.n	80078b4 <process_control_request+0x3fc>

          default: return false;
 80078b0:	2300      	movs	r3, #0
 80078b2:	e0d8      	b.n	8007a66 <process_control_request+0x5ae>
        }
      }
      break;
 80078b4:	e0d5      	b.n	8007a62 <process_control_request+0x5aa>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	889b      	ldrh	r3, [r3, #4]
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	83bb      	strh	r3, [r7, #28]
 80078be:	8bbb      	ldrh	r3, [r7, #28]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80078c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80078ca:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80078cc:	7fbb      	ldrb	r3, [r7, #30]
 80078ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078d2:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 80078d4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80078d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80078dc:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80078de:	7ffb      	ldrb	r3, [r7, #31]
 80078e0:	09db      	lsrs	r3, r3, #7
 80078e2:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80078e4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 80078e8:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80078ec:	2b05      	cmp	r3, #5
 80078ee:	d90a      	bls.n	8007906 <process_control_request+0x44e>
 80078f0:	4b3b      	ldr	r3, [pc, #236]	@ (80079e0 <process_control_request+0x528>)
 80078f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d000      	beq.n	8007902 <process_control_request+0x44a>
 8007900:	be00      	bkpt	0x0000
 8007902:	2300      	movs	r3, #0
 8007904:	e0af      	b.n	8007a66 <process_control_request+0x5ae>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8007906:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 800790a:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 800790e:	4933      	ldr	r1, [pc, #204]	@ (80079dc <process_control_request+0x524>)
 8007910:	0052      	lsls	r2, r2, #1
 8007912:	440a      	add	r2, r1
 8007914:	4413      	add	r3, r2
 8007916:	3314      	adds	r3, #20
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 800791c:	2300      	movs	r3, #0
 800791e:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 8007920:	4b30      	ldr	r3, [pc, #192]	@ (80079e4 <process_control_request+0x52c>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	7efa      	ldrb	r2, [r7, #27]
 8007926:	429a      	cmp	r2, r3
 8007928:	d206      	bcs.n	8007938 <process_control_request+0x480>
    driver = &_app_driver[drvid];
 800792a:	4b2f      	ldr	r3, [pc, #188]	@ (80079e8 <process_control_request+0x530>)
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	7efb      	ldrb	r3, [r7, #27]
 8007930:	015b      	lsls	r3, r3, #5
 8007932:	4413      	add	r3, r2
 8007934:	617b      	str	r3, [r7, #20]
 8007936:	e00d      	b.n	8007954 <process_control_request+0x49c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007938:	4b2a      	ldr	r3, [pc, #168]	@ (80079e4 <process_control_request+0x52c>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	1c5a      	adds	r2, r3, #1
 800793e:	7efb      	ldrb	r3, [r7, #27]
 8007940:	429a      	cmp	r2, r3
 8007942:	db07      	blt.n	8007954 <process_control_request+0x49c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007944:	7efb      	ldrb	r3, [r7, #27]
 8007946:	4a27      	ldr	r2, [pc, #156]	@ (80079e4 <process_control_request+0x52c>)
 8007948:	7812      	ldrb	r2, [r2, #0]
 800794a:	1a9b      	subs	r3, r3, r2
 800794c:	015b      	lsls	r3, r3, #5
 800794e:	4a27      	ldr	r2, [pc, #156]	@ (80079ec <process_control_request+0x534>)
 8007950:	4413      	add	r3, r2
 8007952:	617b      	str	r3, [r7, #20]
  return driver;
 8007954:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8007956:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00c      	beq.n	8007980 <process_control_request+0x4c8>
        // Forward class request to its driver
        TU_VERIFY(driver);
 8007966:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007968:	2b00      	cmp	r3, #0
 800796a:	d101      	bne.n	8007970 <process_control_request+0x4b8>
 800796c:	2300      	movs	r3, #0
 800796e:	e07a      	b.n	8007a66 <process_control_request+0x5ae>
        return invoke_class_control(rhport, driver, p_request);
 8007970:	79fb      	ldrb	r3, [r7, #7]
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007976:	4618      	mov	r0, r3
 8007978:	f7ff fd86 	bl	8007488 <invoke_class_control>
 800797c:	4603      	mov	r3, r0
 800797e:	e072      	b.n	8007a66 <process_control_request+0x5ae>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	785b      	ldrb	r3, [r3, #1]
 8007984:	2b03      	cmp	r3, #3
 8007986:	d017      	beq.n	80079b8 <process_control_request+0x500>
 8007988:	2b03      	cmp	r3, #3
 800798a:	dc52      	bgt.n	8007a32 <process_control_request+0x57a>
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <process_control_request+0x4de>
 8007990:	2b01      	cmp	r3, #1
 8007992:	d011      	beq.n	80079b8 <process_control_request+0x500>
 8007994:	e04d      	b.n	8007a32 <process_control_request+0x57a>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8007996:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800799a:	79fb      	ldrb	r3, [r7, #7]
 800799c:	4611      	mov	r1, r2
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 feba 	bl	8008718 <usbd_edpt_stalled>
 80079a4:	4603      	mov	r3, r0
 80079a6:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 80079a8:	f107 020c 	add.w	r2, r7, #12
 80079ac:	79f8      	ldrb	r0, [r7, #7]
 80079ae:	2302      	movs	r3, #2
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	f000 ff79 	bl	80088a8 <tud_control_xfer>
          }
          break;
 80079b6:	e048      	b.n	8007a4a <process_control_request+0x592>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	885b      	ldrh	r3, [r3, #2]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d11d      	bne.n	80079fe <process_control_request+0x546>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	785b      	ldrb	r3, [r3, #1]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d112      	bne.n	80079f0 <process_control_request+0x538>
                usbd_edpt_clear_stall(rhport, ep_addr);
 80079ca:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80079ce:	79fb      	ldrb	r3, [r7, #7]
 80079d0:	4611      	mov	r1, r2
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 fe62 	bl	800869c <usbd_edpt_clear_stall>
 80079d8:	e011      	b.n	80079fe <process_control_request+0x546>
 80079da:	bf00      	nop
 80079dc:	20001070 	.word	0x20001070
 80079e0:	e000edf0 	.word	0xe000edf0
 80079e4:	200010a4 	.word	0x200010a4
 80079e8:	200010a0 	.word	0x200010a0
 80079ec:	0800c298 	.word	0x0800c298
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 80079f0:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80079f4:	79fb      	ldrb	r3, [r7, #7]
 80079f6:	4611      	mov	r1, r2
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fe11 	bl	8008620 <usbd_edpt_stall>
              }
            }

            if (driver) {
 80079fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d021      	beq.n	8007a48 <process_control_request+0x590>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8007a04:	79fb      	ldrb	r3, [r7, #7]
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff fd3c 	bl	8007488 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8007a10:	2000      	movs	r0, #0
 8007a12:	f000 ffc5 	bl	80089a0 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8007a16:	4b16      	ldr	r3, [pc, #88]	@ (8007a70 <process_control_request+0x5b8>)
 8007a18:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007a1c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d110      	bne.n	8007a48 <process_control_request+0x590>
 8007a26:	79fb      	ldrb	r3, [r7, #7]
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 feca 	bl	80087c4 <tud_control_status>
            }
          }
          break;
 8007a30:	e00a      	b.n	8007a48 <process_control_request+0x590>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 8007a32:	4b10      	ldr	r3, [pc, #64]	@ (8007a74 <process_control_request+0x5bc>)
 8007a34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d000      	beq.n	8007a44 <process_control_request+0x58c>
 8007a42:	be00      	bkpt	0x0000
            return false;
 8007a44:	2300      	movs	r3, #0
 8007a46:	e00e      	b.n	8007a66 <process_control_request+0x5ae>
          break;
 8007a48:	bf00      	nop
        }
      }
    }
    break;
 8007a4a:	e00b      	b.n	8007a64 <process_control_request+0x5ac>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 8007a4c:	4b09      	ldr	r3, [pc, #36]	@ (8007a74 <process_control_request+0x5bc>)
 8007a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0301 	and.w	r3, r3, #1
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d000      	beq.n	8007a5e <process_control_request+0x5a6>
 8007a5c:	be00      	bkpt	0x0000
      return false;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	e001      	b.n	8007a66 <process_control_request+0x5ae>
      break;
 8007a62:	bf00      	nop
  }

  return true;
 8007a64:	2301      	movs	r3, #1
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3768      	adds	r7, #104	@ 0x68
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	20001070 	.word	0x20001070
 8007a74:	e000edf0 	.word	0xe000edf0

08007a78 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b096      	sub	sp, #88	@ 0x58
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	4603      	mov	r3, r0
 8007a80:	460a      	mov	r2, r1
 8007a82:	71fb      	strb	r3, [r7, #7]
 8007a84:	4613      	mov	r3, r2
 8007a86:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8007a88:	79bb      	ldrb	r3, [r7, #6]
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fa fd16 	bl	80024c0 <tud_descriptor_configuration_cb>
 8007a94:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8007a96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d003      	beq.n	8007aa4 <process_set_config+0x2c>
 8007a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a9e:	785b      	ldrb	r3, [r3, #1]
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d00a      	beq.n	8007aba <process_set_config+0x42>
 8007aa4:	4b81      	ldr	r3, [pc, #516]	@ (8007cac <process_set_config+0x234>)
 8007aa6:	623b      	str	r3, [r7, #32]
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d000      	beq.n	8007ab6 <process_set_config+0x3e>
 8007ab4:	be00      	bkpt	0x0000
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	e0f4      	b.n	8007ca4 <process_set_config+0x22c>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8007aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007abc:	79db      	ldrb	r3, [r3, #7]
 8007abe:	115b      	asrs	r3, r3, #5
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	b2d9      	uxtb	r1, r3
 8007ac6:	4a7a      	ldr	r2, [pc, #488]	@ (8007cb0 <process_set_config+0x238>)
 8007ac8:	7813      	ldrb	r3, [r2, #0]
 8007aca:	f361 1304 	bfi	r3, r1, #4, #1
 8007ace:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8007ad0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ad2:	79db      	ldrb	r3, [r3, #7]
 8007ad4:	119b      	asrs	r3, r3, #6
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	b2d9      	uxtb	r1, r3
 8007adc:	4a74      	ldr	r2, [pc, #464]	@ (8007cb0 <process_set_config+0x238>)
 8007ade:	7813      	ldrb	r3, [r2, #0]
 8007ae0:	f361 1345 	bfi	r3, r1, #5, #1
 8007ae4:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8007ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ae8:	3309      	adds	r3, #9
 8007aea:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8007aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aee:	885b      	ldrh	r3, [r3, #2]
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	461a      	mov	r2, r3
 8007af4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007af6:	4413      	add	r3, r2
 8007af8:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 8007afa:	e0cd      	b.n	8007c98 <process_set_config+0x220>
  {
    uint8_t assoc_itf_count = 1;
 8007afc:	2301      	movs	r3, #1
 8007afe:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8007b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b04:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8007b0c:	2b0b      	cmp	r3, #11
 8007b0e:	d10f      	bne.n	8007b30 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8007b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b12:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 8007b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b16:	78db      	ldrb	r3, [r3, #3]
 8007b18:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8007b1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b1e:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8007b2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b32:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	3301      	adds	r3, #1
 8007b38:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8007b3a:	2b04      	cmp	r3, #4
 8007b3c:	d00a      	beq.n	8007b54 <process_set_config+0xdc>
 8007b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8007cac <process_set_config+0x234>)
 8007b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d000      	beq.n	8007b50 <process_set_config+0xd8>
 8007b4e:	be00      	bkpt	0x0000
 8007b50:	2300      	movs	r3, #0
 8007b52:	e0a7      	b.n	8007ca4 <process_set_config+0x22c>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8007b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b56:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8007b58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8007b60:	2300      	movs	r3, #0
 8007b62:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8007b66:	e07d      	b.n	8007c64 <process_set_config+0x1ec>
 8007b68:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007b6c:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8007b72:	4b50      	ldr	r3, [pc, #320]	@ (8007cb4 <process_set_config+0x23c>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	7bfa      	ldrb	r2, [r7, #15]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d206      	bcs.n	8007b8a <process_set_config+0x112>
    driver = &_app_driver[drvid];
 8007b7c:	4b4e      	ldr	r3, [pc, #312]	@ (8007cb8 <process_set_config+0x240>)
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
 8007b82:	015b      	lsls	r3, r3, #5
 8007b84:	4413      	add	r3, r2
 8007b86:	60bb      	str	r3, [r7, #8]
 8007b88:	e00d      	b.n	8007ba6 <process_set_config+0x12e>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8007cb4 <process_set_config+0x23c>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	1c5a      	adds	r2, r3, #1
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	db07      	blt.n	8007ba6 <process_set_config+0x12e>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
 8007b98:	4a46      	ldr	r2, [pc, #280]	@ (8007cb4 <process_set_config+0x23c>)
 8007b9a:	7812      	ldrb	r2, [r2, #0]
 8007b9c:	1a9b      	subs	r3, r3, r2
 8007b9e:	015b      	lsls	r3, r3, #5
 8007ba0:	4a46      	ldr	r2, [pc, #280]	@ (8007cbc <process_set_config+0x244>)
 8007ba2:	4413      	add	r3, r2
 8007ba4:	60bb      	str	r3, [r7, #8]
  return driver;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8007ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 8007baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10a      	bne.n	8007bc6 <process_set_config+0x14e>
 8007bb0:	4b3e      	ldr	r3, [pc, #248]	@ (8007cac <process_set_config+0x234>)
 8007bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d000      	beq.n	8007bc2 <process_set_config+0x14a>
 8007bc0:	be00      	bkpt	0x0000
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	e06e      	b.n	8007ca4 <process_set_config+0x22c>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8007bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007bcc:	79f8      	ldrb	r0, [r7, #7]
 8007bce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007bd0:	4798      	blx	r3
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8007bd6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007bd8:	2b08      	cmp	r3, #8
 8007bda:	d93e      	bls.n	8007c5a <process_set_config+0x1e2>
 8007bdc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007bde:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d83a      	bhi.n	8007c5a <process_set_config+0x1e2>
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8007be4:	2300      	movs	r3, #0
 8007be6:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8007bea:	e024      	b.n	8007c36 <process_set_config+0x1be>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8007bec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bee:	789a      	ldrb	r2, [r3, #2]
 8007bf0:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8007bfa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8007bfe:	4a2c      	ldr	r2, [pc, #176]	@ (8007cb0 <process_set_config+0x238>)
 8007c00:	4413      	add	r3, r2
 8007c02:	791b      	ldrb	r3, [r3, #4]
 8007c04:	2bff      	cmp	r3, #255	@ 0xff
 8007c06:	d00a      	beq.n	8007c1e <process_set_config+0x1a6>
 8007c08:	4b28      	ldr	r3, [pc, #160]	@ (8007cac <process_set_config+0x234>)
 8007c0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d000      	beq.n	8007c1a <process_set_config+0x1a2>
 8007c18:	be00      	bkpt	0x0000
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	e042      	b.n	8007ca4 <process_set_config+0x22c>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8007c1e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8007c22:	4a23      	ldr	r2, [pc, #140]	@ (8007cb0 <process_set_config+0x238>)
 8007c24:	4413      	add	r3, r2
 8007c26:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8007c2a:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8007c2c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8007c30:	3301      	adds	r3, #1
 8007c32:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8007c36:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8007c3a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d3d4      	bcc.n	8007bec <process_set_config+0x174>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8007c42:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007c46:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007c48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c4a:	481d      	ldr	r0, [pc, #116]	@ (8007cc0 <process_set_config+0x248>)
 8007c4c:	f002 ffb6 	bl	800abbc <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8007c50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c52:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c54:	4413      	add	r3, r2
 8007c56:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 8007c58:	e00c      	b.n	8007c74 <process_set_config+0x1fc>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8007c5a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007c5e:	3301      	adds	r3, #1
 8007c60:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8007c64:	4b13      	ldr	r3, [pc, #76]	@ (8007cb4 <process_set_config+0x23c>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	1c5a      	adds	r2, r3, #1
 8007c6a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	f6bf af7a 	bge.w	8007b68 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8007c74:	4b0f      	ldr	r3, [pc, #60]	@ (8007cb4 <process_set_config+0x23c>)
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	1c5a      	adds	r2, r3, #1
 8007c7a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	da0a      	bge.n	8007c98 <process_set_config+0x220>
 8007c82:	4b0a      	ldr	r3, [pc, #40]	@ (8007cac <process_set_config+0x234>)
 8007c84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d000      	beq.n	8007c94 <process_set_config+0x21c>
 8007c92:	be00      	bkpt	0x0000
 8007c94:	2300      	movs	r3, #0
 8007c96:	e005      	b.n	8007ca4 <process_set_config+0x22c>
  while( p_desc < desc_end )
 8007c98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	f4ff af2d 	bcc.w	8007afc <process_set_config+0x84>
  }

  return true;
 8007ca2:	2301      	movs	r3, #1
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3758      	adds	r7, #88	@ 0x58
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	e000edf0 	.word	0xe000edf0
 8007cb0:	20001070 	.word	0x20001070
 8007cb4:	200010a4 	.word	0x200010a4
 8007cb8:	200010a0 	.word	0x200010a0
 8007cbc:	0800c298 	.word	0x0800c298
 8007cc0:	20001084 	.word	0x20001084

08007cc4 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b094      	sub	sp, #80	@ 0x50
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	6039      	str	r1, [r7, #0]
 8007cce:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	885b      	ldrh	r3, [r3, #2]
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8007cd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007cda:	0a1b      	lsrs	r3, r3, #8
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	885b      	ldrh	r3, [r3, #2]
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8007cec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 8007cf4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	2b0e      	cmp	r3, #14
 8007cfc:	f200 80b4 	bhi.w	8007e68 <process_get_descriptor+0x1a4>
 8007d00:	a201      	add	r2, pc, #4	@ (adr r2, 8007d08 <process_get_descriptor+0x44>)
 8007d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d06:	bf00      	nop
 8007d08:	08007d45 	.word	0x08007d45
 8007d0c:	08007da9 	.word	0x08007da9
 8007d10:	08007e0f 	.word	0x08007e0f
 8007d14:	08007e69 	.word	0x08007e69
 8007d18:	08007e69 	.word	0x08007e69
 8007d1c:	08007e43 	.word	0x08007e43
 8007d20:	08007da9 	.word	0x08007da9
 8007d24:	08007e69 	.word	0x08007e69
 8007d28:	08007e69 	.word	0x08007e69
 8007d2c:	08007e69 	.word	0x08007e69
 8007d30:	08007e69 	.word	0x08007e69
 8007d34:	08007e69 	.word	0x08007e69
 8007d38:	08007e69 	.word	0x08007e69
 8007d3c:	08007e69 	.word	0x08007e69
 8007d40:	08007d77 	.word	0x08007d77
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8007d44:	f7fa fb9e 	bl	8002484 <tud_descriptor_device_cb>
 8007d48:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 8007d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10a      	bne.n	8007d66 <process_get_descriptor+0xa2>
 8007d50:	4b48      	ldr	r3, [pc, #288]	@ (8007e74 <process_get_descriptor+0x1b0>)
 8007d52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d000      	beq.n	8007d62 <process_get_descriptor+0x9e>
 8007d60:	be00      	bkpt	0x0000
 8007d62:	2300      	movs	r3, #0
 8007d64:	e081      	b.n	8007e6a <process_get_descriptor+0x1a6>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8007d66:	79f8      	ldrb	r0, [r7, #7]
 8007d68:	2312      	movs	r3, #18
 8007d6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	f000 fd9b 	bl	80088a8 <tud_control_xfer>
 8007d72:	4603      	mov	r3, r0
 8007d74:	e079      	b.n	8007e6a <process_get_descriptor+0x1a6>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8007d76:	f7fa fbb1 	bl	80024dc <tud_descriptor_bos_cb>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 8007d7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <process_get_descriptor+0xc4>
 8007d84:	2300      	movs	r3, #0
 8007d86:	e070      	b.n	8007e6a <process_get_descriptor+0x1a6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8007d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d8a:	3302      	adds	r3, #2
 8007d8c:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8007d96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007d9c:	79f8      	ldrb	r0, [r7, #7]
 8007d9e:	6839      	ldr	r1, [r7, #0]
 8007da0:	f000 fd82 	bl	80088a8 <tud_control_xfer>
 8007da4:	4603      	mov	r3, r0
 8007da6:	e060      	b.n	8007e6a <process_get_descriptor+0x1a6>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 8007da8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d114      	bne.n	8007dda <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8007db0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fa fb83 	bl	80024c0 <tud_descriptor_configuration_cb>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 8007dbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d116      	bne.n	8007df2 <process_get_descriptor+0x12e>
 8007dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8007e74 <process_get_descriptor+0x1b0>)
 8007dc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d000      	beq.n	8007dd6 <process_get_descriptor+0x112>
 8007dd4:	be00      	bkpt	0x0000
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	e047      	b.n	8007e6a <process_get_descriptor+0x1a6>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8007dda:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fe ffde 	bl	8006da0 <tud_descriptor_other_speed_configuration_cb>
 8007de4:	4603      	mov	r3, r0
 8007de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 8007de8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <process_get_descriptor+0x12e>
 8007dee:	2300      	movs	r3, #0
 8007df0:	e03b      	b.n	8007e6a <process_get_descriptor+0x1a6>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8007df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007df4:	3302      	adds	r3, #2
 8007df6:	61fb      	str	r3, [r7, #28]
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8007dfe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e00:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007e02:	79f8      	ldrb	r0, [r7, #7]
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	f000 fd4f 	bl	80088a8 <tud_control_xfer>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	e02d      	b.n	8007e6a <process_get_descriptor+0x1a6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	889b      	ldrh	r3, [r3, #4]
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007e18:	4611      	mov	r1, r2
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fa fb68 	bl	80024f0 <tud_descriptor_string_cb>
 8007e20:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 8007e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <process_get_descriptor+0x168>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	e01e      	b.n	8007e6a <process_get_descriptor+0x1a6>
 8007e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e2e:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8007e34:	79f8      	ldrb	r0, [r7, #7]
 8007e36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	f000 fd35 	bl	80088a8 <tud_control_xfer>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	e013      	b.n	8007e6a <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8007e42:	f7fe ffa5 	bl	8006d90 <tud_descriptor_device_qualifier_cb>
 8007e46:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 8007e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <process_get_descriptor+0x18e>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	e00b      	b.n	8007e6a <process_get_descriptor+0x1a6>
 8007e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e54:	617b      	str	r3, [r7, #20]
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8007e5a:	79f8      	ldrb	r0, [r7, #7]
 8007e5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	f000 fd22 	bl	80088a8 <tud_control_xfer>
 8007e64:	4603      	mov	r3, r0
 8007e66:	e000      	b.n	8007e6a <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    default: return false;
 8007e68:	2300      	movs	r3, #0
  }
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3750      	adds	r7, #80	@ 0x50
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	e000edf0 	.word	0xe000edf0

08007e78 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b0a0      	sub	sp, #128	@ 0x80
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8007e84:	2300      	movs	r3, #0
 8007e86:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	785b      	ldrb	r3, [r3, #1]
 8007e8e:	3b02      	subs	r3, #2
 8007e90:	2b04      	cmp	r3, #4
 8007e92:	f200 8175 	bhi.w	8008180 <dcd_event_handler+0x308>
 8007e96:	a201      	add	r2, pc, #4	@ (adr r2, 8007e9c <dcd_event_handler+0x24>)
 8007e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9c:	08007eb1 	.word	0x08007eb1
 8007ea0:	08007f21 	.word	0x08007f21
 8007ea4:	08007edd 	.word	0x08007edd
 8007ea8:	08007eff 	.word	0x08007eff
 8007eac:	0800814d 	.word	0x0800814d
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8007eb0:	4aac      	ldr	r2, [pc, #688]	@ (8008164 <dcd_event_handler+0x2ec>)
 8007eb2:	7813      	ldrb	r3, [r2, #0]
 8007eb4:	f023 0301 	bic.w	r3, r3, #1
 8007eb8:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8007eba:	4aaa      	ldr	r2, [pc, #680]	@ (8008164 <dcd_event_handler+0x2ec>)
 8007ebc:	7813      	ldrb	r3, [r2, #0]
 8007ebe:	f023 0302 	bic.w	r3, r3, #2
 8007ec2:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8007ec4:	4ba7      	ldr	r3, [pc, #668]	@ (8008164 <dcd_event_handler+0x2ec>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8007eca:	4aa6      	ldr	r2, [pc, #664]	@ (8008164 <dcd_event_handler+0x2ec>)
 8007ecc:	7813      	ldrb	r3, [r2, #0]
 8007ece:	f023 0304 	bic.w	r3, r3, #4
 8007ed2:	7013      	strb	r3, [r2, #0]
      send = true;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8007eda:	e15a      	b.n	8008192 <dcd_event_handler+0x31a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8007edc:	4ba1      	ldr	r3, [pc, #644]	@ (8008164 <dcd_event_handler+0x2ec>)
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 814e 	beq.w	8008188 <dcd_event_handler+0x310>
        _usbd_dev.suspended = 1;
 8007eec:	4a9d      	ldr	r2, [pc, #628]	@ (8008164 <dcd_event_handler+0x2ec>)
 8007eee:	7813      	ldrb	r3, [r2, #0]
 8007ef0:	f043 0304 	orr.w	r3, r3, #4
 8007ef4:	7013      	strb	r3, [r2, #0]
        send = true;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8007efc:	e144      	b.n	8008188 <dcd_event_handler+0x310>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8007efe:	4b99      	ldr	r3, [pc, #612]	@ (8008164 <dcd_event_handler+0x2ec>)
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 813f 	beq.w	800818c <dcd_event_handler+0x314>
        _usbd_dev.suspended = 0;
 8007f0e:	4a95      	ldr	r2, [pc, #596]	@ (8008164 <dcd_event_handler+0x2ec>)
 8007f10:	7813      	ldrb	r3, [r2, #0]
 8007f12:	f023 0304 	bic.w	r3, r3, #4
 8007f16:	7013      	strb	r3, [r2, #0]
        send = true;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8007f1e:	e135      	b.n	800818c <dcd_event_handler+0x314>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8007f20:	2300      	movs	r3, #0
 8007f22:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8007f26:	e039      	b.n	8007f9c <dcd_event_handler+0x124>
 8007f28:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8007f2c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 8007f30:	2300      	movs	r3, #0
 8007f32:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 8007f34:	4b8c      	ldr	r3, [pc, #560]	@ (8008168 <dcd_event_handler+0x2f0>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d207      	bcs.n	8007f50 <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 8007f40:	4b8a      	ldr	r3, [pc, #552]	@ (800816c <dcd_event_handler+0x2f4>)
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007f48:	015b      	lsls	r3, r3, #5
 8007f4a:	4413      	add	r3, r2
 8007f4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f4e:	e00f      	b.n	8007f70 <dcd_event_handler+0xf8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007f50:	4b85      	ldr	r3, [pc, #532]	@ (8008168 <dcd_event_handler+0x2f0>)
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	db08      	blt.n	8007f70 <dcd_event_handler+0xf8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007f5e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007f62:	4a81      	ldr	r2, [pc, #516]	@ (8008168 <dcd_event_handler+0x2f0>)
 8007f64:	7812      	ldrb	r2, [r2, #0]
 8007f66:	1a9b      	subs	r3, r3, r2
 8007f68:	015b      	lsls	r3, r3, #5
 8007f6a:	4a81      	ldr	r2, [pc, #516]	@ (8008170 <dcd_event_handler+0x2f8>)
 8007f6c:	4413      	add	r3, r2
 8007f6e:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 8007f70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 8007f72:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 8007f74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00b      	beq.n	8007f92 <dcd_event_handler+0x11a>
 8007f7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f7c:	69db      	ldr	r3, [r3, #28]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d007      	beq.n	8007f92 <dcd_event_handler+0x11a>
          driver->sof(event->rhport, event->sof.frame_count);
 8007f82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f84:	69db      	ldr	r3, [r3, #28]
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	7810      	ldrb	r0, [r2, #0]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	6852      	ldr	r2, [r2, #4]
 8007f8e:	4611      	mov	r1, r2
 8007f90:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8007f92:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8007f96:	3301      	adds	r3, #1
 8007f98:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8007f9c:	4b72      	ldr	r3, [pc, #456]	@ (8008168 <dcd_event_handler+0x2f0>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	dabe      	bge.n	8007f28 <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8007faa:	4b6e      	ldr	r3, [pc, #440]	@ (8008164 <dcd_event_handler+0x2ec>)
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d05a      	beq.n	800806e <dcd_event_handler+0x1f6>
        _usbd_dev.suspended = 0;
 8007fb8:	4a6a      	ldr	r2, [pc, #424]	@ (8008164 <dcd_event_handler+0x2ec>)
 8007fba:	7813      	ldrb	r3, [r2, #0]
 8007fbc:	f023 0304 	bic.w	r3, r3, #4
 8007fc0:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8007fc2:	f107 0314 	add.w	r3, r7, #20
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	605a      	str	r2, [r3, #4]
 8007fcc:	609a      	str	r2, [r3, #8]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	753b      	strb	r3, [r7, #20]
 8007fd4:	2305      	movs	r3, #5
 8007fd6:	757b      	strb	r3, [r7, #21]
 8007fd8:	f107 0314 	add.w	r3, r7, #20
 8007fdc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007fde:	78fb      	ldrb	r3, [r7, #3]
 8007fe0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8007fe4:	4b63      	ldr	r3, [pc, #396]	@ (8008174 <dcd_event_handler+0x2fc>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007fea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fec:	663b      	str	r3, [r7, #96]	@ 0x60
 8007fee:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8007ff2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8007ff6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007ffa:	f083 0301 	eor.w	r3, r3, #1
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b00      	cmp	r3, #0
 8008002:	d003      	beq.n	800800c <dcd_event_handler+0x194>
    qhdl->interrupt_set(false);
 8008004:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2000      	movs	r0, #0
 800800a:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 800800c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800800e:	3304      	adds	r3, #4
 8008010:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe fe2c 	bl	8006c70 <tu_fifo_write>
 8008018:	4603      	mov	r3, r0
 800801a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 800801e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008022:	f083 0301 	eor.w	r3, r3, #1
 8008026:	b2db      	uxtb	r3, r3
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <dcd_event_handler+0x1bc>
    qhdl->interrupt_set(true);
 800802c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2001      	movs	r0, #1
 8008032:	4798      	blx	r3
  }

  return success;
 8008034:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8008038:	f083 0301 	eor.w	r3, r3, #1
 800803c:	b2db      	uxtb	r3, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	d009      	beq.n	8008056 <dcd_event_handler+0x1de>
 8008042:	4b4d      	ldr	r3, [pc, #308]	@ (8008178 <dcd_event_handler+0x300>)
 8008044:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008046:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00c      	beq.n	800806c <dcd_event_handler+0x1f4>
 8008052:	be00      	bkpt	0x0000
 8008054:	e00a      	b.n	800806c <dcd_event_handler+0x1f4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8008056:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008058:	7818      	ldrb	r0, [r3, #0]
 800805a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800805c:	785b      	ldrb	r3, [r3, #1]
 800805e:	4619      	mov	r1, r3
 8008060:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008064:	461a      	mov	r2, r3
 8008066:	f7fe fe7b 	bl	8006d60 <tud_event_hook_cb>
  return true;
 800806a:	e000      	b.n	800806e <dcd_event_handler+0x1f6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 800806c:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 800806e:	4b3d      	ldr	r3, [pc, #244]	@ (8008164 <dcd_event_handler+0x2ec>)
 8008070:	78db      	ldrb	r3, [r3, #3]
 8008072:	b2db      	uxtb	r3, r3
 8008074:	657b      	str	r3, [r7, #84]	@ 0x54
 8008076:	2300      	movs	r3, #0
 8008078:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 800807c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8008080:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008082:	fa22 f303 	lsr.w	r3, r2, r3
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	2b00      	cmp	r3, #0
 800808c:	bf14      	ite	ne
 800808e:	2301      	movne	r3, #1
 8008090:	2300      	moveq	r3, #0
 8008092:	b2db      	uxtb	r3, r3
 8008094:	2b00      	cmp	r3, #0
 8008096:	d07b      	beq.n	8008190 <dcd_event_handler+0x318>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 8008098:	f107 0308 	add.w	r3, r7, #8
 800809c:	2200      	movs	r2, #0
 800809e:	601a      	str	r2, [r3, #0]
 80080a0:	605a      	str	r2, [r3, #4]
 80080a2:	609a      	str	r2, [r3, #8]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	723b      	strb	r3, [r7, #8]
 80080aa:	2303      	movs	r3, #3
 80080ac:	727b      	strb	r3, [r7, #9]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	f107 0308 	add.w	r3, r7, #8
 80080b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080ba:	78fb      	ldrb	r3, [r7, #3]
 80080bc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80080c0:	4b2c      	ldr	r3, [pc, #176]	@ (8008174 <dcd_event_handler+0x2fc>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80080c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80080ca:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80080ce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 80080d2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80080d6:	f083 0301 	eor.w	r3, r3, #1
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d003      	beq.n	80080e8 <dcd_event_handler+0x270>
    qhdl->interrupt_set(false);
 80080e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2000      	movs	r0, #0
 80080e6:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 80080e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080ea:	3304      	adds	r3, #4
 80080ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fe fdbe 	bl	8006c70 <tu_fifo_write>
 80080f4:	4603      	mov	r3, r0
 80080f6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 80080fa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80080fe:	f083 0301 	eor.w	r3, r3, #1
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b00      	cmp	r3, #0
 8008106:	d003      	beq.n	8008110 <dcd_event_handler+0x298>
    qhdl->interrupt_set(true);
 8008108:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2001      	movs	r0, #1
 800810e:	4798      	blx	r3
  return success;
 8008110:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008114:	f083 0301 	eor.w	r3, r3, #1
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d009      	beq.n	8008132 <dcd_event_handler+0x2ba>
 800811e:	4b16      	ldr	r3, [pc, #88]	@ (8008178 <dcd_event_handler+0x300>)
 8008120:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00c      	beq.n	8008148 <dcd_event_handler+0x2d0>
 800812e:	be00      	bkpt	0x0000
 8008130:	e00a      	b.n	8008148 <dcd_event_handler+0x2d0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8008132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008134:	7818      	ldrb	r0, [r3, #0]
 8008136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008138:	785b      	ldrb	r3, [r3, #1]
 800813a:	4619      	mov	r1, r3
 800813c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8008140:	461a      	mov	r2, r3
 8008142:	f7fe fe0d 	bl	8006d60 <tud_event_hook_cb>
  return true;
 8008146:	e000      	b.n	800814a <dcd_event_handler+0x2d2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8008148:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 800814a:	e021      	b.n	8008190 <dcd_event_handler+0x318>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 800814c:	4b0b      	ldr	r3, [pc, #44]	@ (800817c <dcd_event_handler+0x304>)
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	b2db      	uxtb	r3, r3
 8008152:	3301      	adds	r3, #1
 8008154:	b2da      	uxtb	r2, r3
 8008156:	4b09      	ldr	r3, [pc, #36]	@ (800817c <dcd_event_handler+0x304>)
 8008158:	701a      	strb	r2, [r3, #0]
      send = true;
 800815a:	2301      	movs	r3, #1
 800815c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8008160:	e017      	b.n	8008192 <dcd_event_handler+0x31a>
 8008162:	bf00      	nop
 8008164:	20001070 	.word	0x20001070
 8008168:	200010a4 	.word	0x200010a4
 800816c:	200010a0 	.word	0x200010a0
 8008170:	0800c298 	.word	0x0800c298
 8008174:	20001168 	.word	0x20001168
 8008178:	e000edf0 	.word	0xe000edf0
 800817c:	2000109c 	.word	0x2000109c

    default:
      send = true;
 8008180:	2301      	movs	r3, #1
 8008182:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8008186:	e004      	b.n	8008192 <dcd_event_handler+0x31a>
      break;
 8008188:	bf00      	nop
 800818a:	e002      	b.n	8008192 <dcd_event_handler+0x31a>
      break;
 800818c:	bf00      	nop
 800818e:	e000      	b.n	8008192 <dcd_event_handler+0x31a>
      break;
 8008190:	bf00      	nop
  }

  if (send) {
 8008192:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008196:	2b00      	cmp	r3, #0
 8008198:	d049      	beq.n	800822e <dcd_event_handler+0x3b6>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	637b      	str	r3, [r7, #52]	@ 0x34
 800819e:	78fb      	ldrb	r3, [r7, #3]
 80081a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80081a4:	4b24      	ldr	r3, [pc, #144]	@ (8008238 <dcd_event_handler+0x3c0>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80081b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 80081b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081ba:	f083 0301 	eor.w	r3, r3, #1
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d003      	beq.n	80081cc <dcd_event_handler+0x354>
    qhdl->interrupt_set(false);
 80081c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2000      	movs	r0, #0
 80081ca:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 80081cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ce:	3304      	adds	r3, #4
 80081d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fe fd4c 	bl	8006c70 <tu_fifo_write>
 80081d8:	4603      	mov	r3, r0
 80081da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 80081de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081e2:	f083 0301 	eor.w	r3, r3, #1
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d003      	beq.n	80081f4 <dcd_event_handler+0x37c>
    qhdl->interrupt_set(true);
 80081ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2001      	movs	r0, #1
 80081f2:	4798      	blx	r3
  return success;
 80081f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80081f8:	f083 0301 	eor.w	r3, r3, #1
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d009      	beq.n	8008216 <dcd_event_handler+0x39e>
 8008202:	4b0e      	ldr	r3, [pc, #56]	@ (800823c <dcd_event_handler+0x3c4>)
 8008204:	623b      	str	r3, [r7, #32]
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0301 	and.w	r3, r3, #1
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00c      	beq.n	800822c <dcd_event_handler+0x3b4>
 8008212:	be00      	bkpt	0x0000
 8008214:	e00a      	b.n	800822c <dcd_event_handler+0x3b4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8008216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008218:	7818      	ldrb	r0, [r3, #0]
 800821a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800821c:	785b      	ldrb	r3, [r3, #1]
 800821e:	4619      	mov	r1, r3
 8008220:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008224:	461a      	mov	r2, r3
 8008226:	f7fe fd9b 	bl	8006d60 <tud_event_hook_cb>
  return true;
 800822a:	e000      	b.n	800822e <dcd_event_handler+0x3b6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 800822c:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 800822e:	bf00      	nop
 8008230:	3780      	adds	r7, #128	@ 0x80
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20001168 	.word	0x20001168
 800823c:	e000edf0 	.word	0xe000edf0

08008240 <usbd_int_set>:

//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled) {
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	71fb      	strb	r3, [r7, #7]
  if (enabled) {
 800824a:	79fb      	ldrb	r3, [r7, #7]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d005      	beq.n	800825c <usbd_int_set+0x1c>
    dcd_int_enable(_usbd_rhport);
 8008250:	4b07      	ldr	r3, [pc, #28]	@ (8008270 <usbd_int_set+0x30>)
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	4618      	mov	r0, r3
 8008256:	f001 f929 	bl	80094ac <dcd_int_enable>
  } else {
    dcd_int_disable(_usbd_rhport);
  }
}
 800825a:	e004      	b.n	8008266 <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 800825c:	4b04      	ldr	r3, [pc, #16]	@ (8008270 <usbd_int_set+0x30>)
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	4618      	mov	r0, r3
 8008262:	f001 f94b 	bl	80094fc <dcd_int_disable>
}
 8008266:	bf00      	nop
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	20000069 	.word	0x20000069

08008274 <usbd_spin_lock>:

void usbd_spin_lock(bool in_isr) {
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	4603      	mov	r3, r0
 800827c:	71fb      	strb	r3, [r7, #7]
 800827e:	4b09      	ldr	r3, [pc, #36]	@ (80082a4 <usbd_spin_lock+0x30>)
 8008280:	60fb      	str	r3, [r7, #12]
 8008282:	79fb      	ldrb	r3, [r7, #7]
 8008284:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 8008286:	7afb      	ldrb	r3, [r7, #11]
 8008288:	f083 0301 	eor.w	r3, r3, #1
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b00      	cmp	r3, #0
 8008290:	d003      	beq.n	800829a <usbd_spin_lock+0x26>
    ctx->interrupt_set(false);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2000      	movs	r0, #0
 8008298:	4798      	blx	r3
}
 800829a:	bf00      	nop
  osal_spin_lock(&_usbd_spin, in_isr);
}
 800829c:	bf00      	nop
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	2000006c 	.word	0x2000006c

080082a8 <usbd_spin_unlock>:
void usbd_spin_unlock(bool in_isr) {
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	71fb      	strb	r3, [r7, #7]
 80082b2:	4b09      	ldr	r3, [pc, #36]	@ (80082d8 <usbd_spin_unlock+0x30>)
 80082b4:	60fb      	str	r3, [r7, #12]
 80082b6:	79fb      	ldrb	r3, [r7, #7]
 80082b8:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 80082ba:	7afb      	ldrb	r3, [r7, #11]
 80082bc:	f083 0301 	eor.w	r3, r3, #1
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d003      	beq.n	80082ce <usbd_spin_unlock+0x26>
    ctx->interrupt_set(true);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2001      	movs	r0, #1
 80082cc:	4798      	blx	r3
}
 80082ce:	bf00      	nop
  osal_spin_unlock(&_usbd_spin, in_isr);
}
 80082d0:	bf00      	nop
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	2000006c 	.word	0x2000006c

080082dc <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b08a      	sub	sp, #40	@ 0x28
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6039      	str	r1, [r7, #0]
 80082e4:	4611      	mov	r1, r2
 80082e6:	461a      	mov	r2, r3
 80082e8:	4603      	mov	r3, r0
 80082ea:	71fb      	strb	r3, [r7, #7]
 80082ec:	460b      	mov	r3, r1
 80082ee:	71bb      	strb	r3, [r7, #6]
 80082f0:	4613      	mov	r3, r2
 80082f2:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 80082f4:	2300      	movs	r3, #0
 80082f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80082f8:	e04d      	b.n	8008396 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	785b      	ldrb	r3, [r3, #1]
 8008302:	2b05      	cmp	r3, #5
 8008304:	d108      	bne.n	8008318 <usbd_open_edpt_pair+0x3c>
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	78db      	ldrb	r3, [r3, #3]
 800830a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800830e:	b2db      	uxtb	r3, r3
 8008310:	461a      	mov	r2, r3
 8008312:	797b      	ldrb	r3, [r7, #5]
 8008314:	4293      	cmp	r3, r2
 8008316:	d00a      	beq.n	800832e <usbd_open_edpt_pair+0x52>
 8008318:	4b23      	ldr	r3, [pc, #140]	@ (80083a8 <usbd_open_edpt_pair+0xcc>)
 800831a:	61bb      	str	r3, [r7, #24]
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 0301 	and.w	r3, r3, #1
 8008324:	2b00      	cmp	r3, #0
 8008326:	d000      	beq.n	800832a <usbd_open_edpt_pair+0x4e>
 8008328:	be00      	bkpt	0x0000
 800832a:	2300      	movs	r3, #0
 800832c:	e038      	b.n	80083a0 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800832e:	79fb      	ldrb	r3, [r7, #7]
 8008330:	6a39      	ldr	r1, [r7, #32]
 8008332:	4618      	mov	r0, r3
 8008334:	f000 f83a 	bl	80083ac <usbd_edpt_open>
 8008338:	4603      	mov	r3, r0
 800833a:	f083 0301 	eor.w	r3, r3, #1
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00a      	beq.n	800835a <usbd_open_edpt_pair+0x7e>
 8008344:	4b18      	ldr	r3, [pc, #96]	@ (80083a8 <usbd_open_edpt_pair+0xcc>)
 8008346:	61fb      	str	r3, [r7, #28]
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 0301 	and.w	r3, r3, #1
 8008350:	2b00      	cmp	r3, #0
 8008352:	d000      	beq.n	8008356 <usbd_open_edpt_pair+0x7a>
 8008354:	be00      	bkpt	0x0000
 8008356:	2300      	movs	r3, #0
 8008358:	e022      	b.n	80083a0 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	789b      	ldrb	r3, [r3, #2]
 800835e:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008360:	7dfb      	ldrb	r3, [r7, #23]
 8008362:	09db      	lsrs	r3, r3, #7
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b01      	cmp	r3, #1
 8008368:	d104      	bne.n	8008374 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	789a      	ldrb	r2, [r3, #2]
 800836e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008370:	701a      	strb	r2, [r3, #0]
 8008372:	e003      	b.n	800837c <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8008374:	6a3b      	ldr	r3, [r7, #32]
 8008376:	789a      	ldrb	r2, [r3, #2]
 8008378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800837a:	701a      	strb	r2, [r3, #0]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	461a      	mov	r2, r3
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 800838e:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8008390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008392:	3301      	adds	r3, #1
 8008394:	627b      	str	r3, [r7, #36]	@ 0x24
 8008396:	79bb      	ldrb	r3, [r7, #6]
 8008398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800839a:	429a      	cmp	r2, r3
 800839c:	dbad      	blt.n	80082fa <usbd_open_edpt_pair+0x1e>
  }

  return true;
 800839e:	2301      	movs	r3, #1
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3728      	adds	r7, #40	@ 0x28
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	e000edf0 	.word	0xe000edf0

080083ac <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	6039      	str	r1, [r7, #0]
 80083b6:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 80083b8:	4b1c      	ldr	r3, [pc, #112]	@ (800842c <usbd_edpt_open+0x80>)
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	789b      	ldrb	r3, [r3, #2]
 80083c2:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
 80083c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b05      	cmp	r3, #5
 80083ce:	d90a      	bls.n	80083e6 <usbd_edpt_open+0x3a>
 80083d0:	4b17      	ldr	r3, [pc, #92]	@ (8008430 <usbd_edpt_open+0x84>)
 80083d2:	613b      	str	r3, [r7, #16]
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 0301 	and.w	r3, r3, #1
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d000      	beq.n	80083e2 <usbd_edpt_open+0x36>
 80083e0:	be00      	bkpt	0x0000
 80083e2:	2300      	movs	r3, #0
 80083e4:	e01d      	b.n	8008422 <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 80083e6:	4b13      	ldr	r3, [pc, #76]	@ (8008434 <usbd_edpt_open+0x88>)
 80083e8:	789b      	ldrb	r3, [r3, #2]
 80083ea:	2200      	movs	r2, #0
 80083ec:	4619      	mov	r1, r3
 80083ee:	6838      	ldr	r0, [r7, #0]
 80083f0:	f002 fb4a 	bl	800aa88 <tu_edpt_validate>
 80083f4:	4603      	mov	r3, r0
 80083f6:	f083 0301 	eor.w	r3, r3, #1
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00a      	beq.n	8008416 <usbd_edpt_open+0x6a>
 8008400:	4b0b      	ldr	r3, [pc, #44]	@ (8008430 <usbd_edpt_open+0x84>)
 8008402:	617b      	str	r3, [r7, #20]
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b00      	cmp	r3, #0
 800840e:	d000      	beq.n	8008412 <usbd_edpt_open+0x66>
 8008410:	be00      	bkpt	0x0000
 8008412:	2300      	movs	r3, #0
 8008414:	e005      	b.n	8008422 <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 8008416:	79fb      	ldrb	r3, [r7, #7]
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	4618      	mov	r0, r3
 800841c:	f001 f992 	bl	8009744 <dcd_edpt_open>
 8008420:	4603      	mov	r3, r0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3718      	adds	r7, #24
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	20000069 	.word	0x20000069
 8008430:	e000edf0 	.word	0xe000edf0
 8008434:	20001070 	.word	0x20001070

08008438 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	4603      	mov	r3, r0
 8008440:	460a      	mov	r2, r1
 8008442:	71fb      	strb	r3, [r7, #7]
 8008444:	4613      	mov	r3, r2
 8008446:	71bb      	strb	r3, [r7, #6]
 8008448:	79bb      	ldrb	r3, [r7, #6]
 800844a:	73bb      	strb	r3, [r7, #14]
 800844c:	7bbb      	ldrb	r3, [r7, #14]
 800844e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008452:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008454:	75fb      	strb	r3, [r7, #23]
 8008456:	79bb      	ldrb	r3, [r7, #6]
 8008458:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800845a:	7bfb      	ldrb	r3, [r7, #15]
 800845c:	09db      	lsrs	r3, r3, #7
 800845e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008460:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8008462:	7dfa      	ldrb	r2, [r7, #23]
 8008464:	7dbb      	ldrb	r3, [r7, #22]
 8008466:	0052      	lsls	r2, r2, #1
 8008468:	4413      	add	r3, r2
 800846a:	3320      	adds	r3, #32
 800846c:	4a05      	ldr	r2, [pc, #20]	@ (8008484 <usbd_edpt_claim+0x4c>)
 800846e:	4413      	add	r3, r2
 8008470:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 8008472:	2100      	movs	r1, #0
 8008474:	6938      	ldr	r0, [r7, #16]
 8008476:	f002 faa2 	bl	800a9be <tu_edpt_claim>
 800847a:	4603      	mov	r3, r0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3718      	adds	r7, #24
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	20001070 	.word	0x20001070

08008488 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	4603      	mov	r3, r0
 8008490:	460a      	mov	r2, r1
 8008492:	71fb      	strb	r3, [r7, #7]
 8008494:	4613      	mov	r3, r2
 8008496:	71bb      	strb	r3, [r7, #6]
 8008498:	79bb      	ldrb	r3, [r7, #6]
 800849a:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800849c:	7bbb      	ldrb	r3, [r7, #14]
 800849e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084a2:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80084a4:	75fb      	strb	r3, [r7, #23]
 80084a6:	79bb      	ldrb	r3, [r7, #6]
 80084a8:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
 80084ac:	09db      	lsrs	r3, r3, #7
 80084ae:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80084b0:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80084b2:	7dfa      	ldrb	r2, [r7, #23]
 80084b4:	7dbb      	ldrb	r3, [r7, #22]
 80084b6:	0052      	lsls	r2, r2, #1
 80084b8:	4413      	add	r3, r2
 80084ba:	3320      	adds	r3, #32
 80084bc:	4a05      	ldr	r2, [pc, #20]	@ (80084d4 <usbd_edpt_release+0x4c>)
 80084be:	4413      	add	r3, r2
 80084c0:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 80084c2:	2100      	movs	r1, #0
 80084c4:	6938      	ldr	r0, [r7, #16]
 80084c6:	f002 fab4 	bl	800aa32 <tu_edpt_release>
 80084ca:	4603      	mov	r3, r0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3718      	adds	r7, #24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	20001070 	.word	0x20001070

080084d8 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	603a      	str	r2, [r7, #0]
 80084e0:	461a      	mov	r2, r3
 80084e2:	4603      	mov	r3, r0
 80084e4:	71fb      	strb	r3, [r7, #7]
 80084e6:	460b      	mov	r3, r1
 80084e8:	71bb      	strb	r3, [r7, #6]
 80084ea:	4613      	mov	r3, r2
 80084ec:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 80084ee:	4b32      	ldr	r3, [pc, #200]	@ (80085b8 <usbd_edpt_xfer+0xe0>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	71fb      	strb	r3, [r7, #7]
 80084f4:	79bb      	ldrb	r3, [r7, #6]
 80084f6:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80084f8:	7abb      	ldrb	r3, [r7, #10]
 80084fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084fe:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008500:	75fb      	strb	r3, [r7, #23]
 8008502:	79bb      	ldrb	r3, [r7, #6]
 8008504:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008506:	7afb      	ldrb	r3, [r7, #11]
 8008508:	09db      	lsrs	r3, r3, #7
 800850a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800850c:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 800850e:	7dfa      	ldrb	r2, [r7, #23]
 8008510:	7dbb      	ldrb	r3, [r7, #22]
 8008512:	492a      	ldr	r1, [pc, #168]	@ (80085bc <usbd_edpt_xfer+0xe4>)
 8008514:	0052      	lsls	r2, r2, #1
 8008516:	440a      	add	r2, r1
 8008518:	4413      	add	r3, r2
 800851a:	3320      	adds	r3, #32
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00a      	beq.n	800853e <usbd_edpt_xfer+0x66>
 8008528:	4b25      	ldr	r3, [pc, #148]	@ (80085c0 <usbd_edpt_xfer+0xe8>)
 800852a:	60fb      	str	r3, [r7, #12]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0301 	and.w	r3, r3, #1
 8008534:	2b00      	cmp	r3, #0
 8008536:	d000      	beq.n	800853a <usbd_edpt_xfer+0x62>
 8008538:	be00      	bkpt	0x0000
 800853a:	2300      	movs	r3, #0
 800853c:	e038      	b.n	80085b0 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800853e:	7dfa      	ldrb	r2, [r7, #23]
 8008540:	7dbb      	ldrb	r3, [r7, #22]
 8008542:	491e      	ldr	r1, [pc, #120]	@ (80085bc <usbd_edpt_xfer+0xe4>)
 8008544:	0052      	lsls	r2, r2, #1
 8008546:	440a      	add	r2, r1
 8008548:	4413      	add	r3, r2
 800854a:	f103 0220 	add.w	r2, r3, #32
 800854e:	7813      	ldrb	r3, [r2, #0]
 8008550:	f043 0301 	orr.w	r3, r3, #1
 8008554:	7013      	strb	r3, [r2, #0]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 8008556:	88bb      	ldrh	r3, [r7, #4]
 8008558:	79b9      	ldrb	r1, [r7, #6]
 800855a:	79f8      	ldrb	r0, [r7, #7]
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	f001 f9b5 	bl	80098cc <dcd_edpt_xfer>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <usbd_edpt_xfer+0x94>
    return true;
 8008568:	2301      	movs	r3, #1
 800856a:	e021      	b.n	80085b0 <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 800856c:	7dfa      	ldrb	r2, [r7, #23]
 800856e:	7dbb      	ldrb	r3, [r7, #22]
 8008570:	4912      	ldr	r1, [pc, #72]	@ (80085bc <usbd_edpt_xfer+0xe4>)
 8008572:	0052      	lsls	r2, r2, #1
 8008574:	440a      	add	r2, r1
 8008576:	4413      	add	r3, r2
 8008578:	f103 0220 	add.w	r2, r3, #32
 800857c:	7813      	ldrb	r3, [r2, #0]
 800857e:	f023 0301 	bic.w	r3, r3, #1
 8008582:	7013      	strb	r3, [r2, #0]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8008584:	7dfa      	ldrb	r2, [r7, #23]
 8008586:	7dbb      	ldrb	r3, [r7, #22]
 8008588:	490c      	ldr	r1, [pc, #48]	@ (80085bc <usbd_edpt_xfer+0xe4>)
 800858a:	0052      	lsls	r2, r2, #1
 800858c:	440a      	add	r2, r1
 800858e:	4413      	add	r3, r2
 8008590:	f103 0220 	add.w	r2, r3, #32
 8008594:	7813      	ldrb	r3, [r2, #0]
 8008596:	f023 0304 	bic.w	r3, r3, #4
 800859a:	7013      	strb	r3, [r2, #0]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 800859c:	4b08      	ldr	r3, [pc, #32]	@ (80085c0 <usbd_edpt_xfer+0xe8>)
 800859e:	613b      	str	r3, [r7, #16]
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 0301 	and.w	r3, r3, #1
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d000      	beq.n	80085ae <usbd_edpt_xfer+0xd6>
 80085ac:	be00      	bkpt	0x0000
    return false;
 80085ae:	2300      	movs	r3, #0
  }
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3718      	adds	r7, #24
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	20000069 	.word	0x20000069
 80085bc:	20001070 	.word	0x20001070
 80085c0:	e000edf0 	.word	0xe000edf0

080085c4 <usbd_edpt_busy>:
    TU_BREAKPOINT();
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr) {
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	460a      	mov	r2, r1
 80085ce:	71fb      	strb	r3, [r7, #7]
 80085d0:	4613      	mov	r3, r2
 80085d2:	71bb      	strb	r3, [r7, #6]
 80085d4:	79bb      	ldrb	r3, [r7, #6]
 80085d6:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80085d8:	7b3b      	ldrb	r3, [r7, #12]
 80085da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085de:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80085e0:	73fb      	strb	r3, [r7, #15]
 80085e2:	79bb      	ldrb	r3, [r7, #6]
 80085e4:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80085e6:	7b7b      	ldrb	r3, [r7, #13]
 80085e8:	09db      	lsrs	r3, r3, #7
 80085ea:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80085ec:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 80085ee:	7bfa      	ldrb	r2, [r7, #15]
 80085f0:	7bbb      	ldrb	r3, [r7, #14]
 80085f2:	490a      	ldr	r1, [pc, #40]	@ (800861c <usbd_edpt_busy+0x58>)
 80085f4:	0052      	lsls	r2, r2, #1
 80085f6:	440a      	add	r2, r1
 80085f8:	4413      	add	r3, r2
 80085fa:	3320      	adds	r3, #32
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2b00      	cmp	r3, #0
 8008606:	bf14      	ite	ne
 8008608:	2301      	movne	r3, #1
 800860a:	2300      	moveq	r3, #0
 800860c:	b2db      	uxtb	r3, r3
}
 800860e:	4618      	mov	r0, r3
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	20001070 	.word	0x20001070

08008620 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	460a      	mov	r2, r1
 800862a:	71fb      	strb	r3, [r7, #7]
 800862c:	4613      	mov	r3, r2
 800862e:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8008630:	4b18      	ldr	r3, [pc, #96]	@ (8008694 <usbd_edpt_stall+0x74>)
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	71fb      	strb	r3, [r7, #7]
 8008636:	79bb      	ldrb	r3, [r7, #6]
 8008638:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800863a:	7b3b      	ldrb	r3, [r7, #12]
 800863c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008640:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008642:	73fb      	strb	r3, [r7, #15]
 8008644:	79bb      	ldrb	r3, [r7, #6]
 8008646:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008648:	7b7b      	ldrb	r3, [r7, #13]
 800864a:	09db      	lsrs	r3, r3, #7
 800864c:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800864e:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 8008650:	79ba      	ldrb	r2, [r7, #6]
 8008652:	79fb      	ldrb	r3, [r7, #7]
 8008654:	4611      	mov	r1, r2
 8008656:	4618      	mov	r0, r3
 8008658:	f001 f988 	bl	800996c <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 800865c:	7bfa      	ldrb	r2, [r7, #15]
 800865e:	7bbb      	ldrb	r3, [r7, #14]
 8008660:	490d      	ldr	r1, [pc, #52]	@ (8008698 <usbd_edpt_stall+0x78>)
 8008662:	0052      	lsls	r2, r2, #1
 8008664:	440a      	add	r2, r1
 8008666:	4413      	add	r3, r2
 8008668:	f103 0220 	add.w	r2, r3, #32
 800866c:	7813      	ldrb	r3, [r2, #0]
 800866e:	f043 0302 	orr.w	r3, r3, #2
 8008672:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8008674:	7bfa      	ldrb	r2, [r7, #15]
 8008676:	7bbb      	ldrb	r3, [r7, #14]
 8008678:	4907      	ldr	r1, [pc, #28]	@ (8008698 <usbd_edpt_stall+0x78>)
 800867a:	0052      	lsls	r2, r2, #1
 800867c:	440a      	add	r2, r1
 800867e:	4413      	add	r3, r2
 8008680:	f103 0220 	add.w	r2, r3, #32
 8008684:	7813      	ldrb	r3, [r2, #0]
 8008686:	f043 0301 	orr.w	r3, r3, #1
 800868a:	7013      	strb	r3, [r2, #0]
}
 800868c:	bf00      	nop
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	20000069 	.word	0x20000069
 8008698:	20001070 	.word	0x20001070

0800869c <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	4603      	mov	r3, r0
 80086a4:	460a      	mov	r2, r1
 80086a6:	71fb      	strb	r3, [r7, #7]
 80086a8:	4613      	mov	r3, r2
 80086aa:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80086ac:	4b18      	ldr	r3, [pc, #96]	@ (8008710 <usbd_edpt_clear_stall+0x74>)
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	71fb      	strb	r3, [r7, #7]
 80086b2:	79bb      	ldrb	r3, [r7, #6]
 80086b4:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80086b6:	7b3b      	ldrb	r3, [r7, #12]
 80086b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086bc:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80086be:	73fb      	strb	r3, [r7, #15]
 80086c0:	79bb      	ldrb	r3, [r7, #6]
 80086c2:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80086c4:	7b7b      	ldrb	r3, [r7, #13]
 80086c6:	09db      	lsrs	r3, r3, #7
 80086c8:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80086ca:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 80086cc:	79ba      	ldrb	r2, [r7, #6]
 80086ce:	79fb      	ldrb	r3, [r7, #7]
 80086d0:	4611      	mov	r1, r2
 80086d2:	4618      	mov	r0, r3
 80086d4:	f001 f980 	bl	80099d8 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 80086d8:	7bfa      	ldrb	r2, [r7, #15]
 80086da:	7bbb      	ldrb	r3, [r7, #14]
 80086dc:	490d      	ldr	r1, [pc, #52]	@ (8008714 <usbd_edpt_clear_stall+0x78>)
 80086de:	0052      	lsls	r2, r2, #1
 80086e0:	440a      	add	r2, r1
 80086e2:	4413      	add	r3, r2
 80086e4:	f103 0220 	add.w	r2, r3, #32
 80086e8:	7813      	ldrb	r3, [r2, #0]
 80086ea:	f023 0302 	bic.w	r3, r3, #2
 80086ee:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 80086f0:	7bfa      	ldrb	r2, [r7, #15]
 80086f2:	7bbb      	ldrb	r3, [r7, #14]
 80086f4:	4907      	ldr	r1, [pc, #28]	@ (8008714 <usbd_edpt_clear_stall+0x78>)
 80086f6:	0052      	lsls	r2, r2, #1
 80086f8:	440a      	add	r2, r1
 80086fa:	4413      	add	r3, r2
 80086fc:	f103 0220 	add.w	r2, r3, #32
 8008700:	7813      	ldrb	r3, [r2, #0]
 8008702:	f023 0301 	bic.w	r3, r3, #1
 8008706:	7013      	strb	r3, [r2, #0]
}
 8008708:	bf00      	nop
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20000069 	.word	0x20000069
 8008714:	20001070 	.word	0x20001070

08008718 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	460a      	mov	r2, r1
 8008722:	71fb      	strb	r3, [r7, #7]
 8008724:	4613      	mov	r3, r2
 8008726:	71bb      	strb	r3, [r7, #6]
 8008728:	79bb      	ldrb	r3, [r7, #6]
 800872a:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800872c:	7b3b      	ldrb	r3, [r7, #12]
 800872e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008732:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008734:	73fb      	strb	r3, [r7, #15]
 8008736:	79bb      	ldrb	r3, [r7, #6]
 8008738:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800873a:	7b7b      	ldrb	r3, [r7, #13]
 800873c:	09db      	lsrs	r3, r3, #7
 800873e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008740:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8008742:	7bfa      	ldrb	r2, [r7, #15]
 8008744:	7bbb      	ldrb	r3, [r7, #14]
 8008746:	490a      	ldr	r1, [pc, #40]	@ (8008770 <usbd_edpt_stalled+0x58>)
 8008748:	0052      	lsls	r2, r2, #1
 800874a:	440a      	add	r2, r1
 800874c:	4413      	add	r3, r2
 800874e:	3320      	adds	r3, #32
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008756:	b2db      	uxtb	r3, r3
 8008758:	2b00      	cmp	r3, #0
 800875a:	bf14      	ite	ne
 800875c:	2301      	movne	r3, #1
 800875e:	2300      	moveq	r3, #0
 8008760:	b2db      	uxtb	r3, r3
}
 8008762:	4618      	mov	r0, r3
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	20001070 	.word	0x20001070

08008774 <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, const tusb_control_request_t* request) {
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	4603      	mov	r3, r0
 800877c:	6039      	str	r1, [r7, #0]
 800877e:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	4603      	mov	r3, r0
 8008794:	6039      	str	r1, [r7, #0]
 8008796:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d001      	beq.n	80087aa <status_stage_xact+0x1e>
 80087a6:	2300      	movs	r3, #0
 80087a8:	e000      	b.n	80087ac <status_stage_xact+0x20>
 80087aa:	2380      	movs	r3, #128	@ 0x80
 80087ac:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80087ae:	7bf9      	ldrb	r1, [r7, #15]
 80087b0:	79f8      	ldrb	r0, [r7, #7]
 80087b2:	2300      	movs	r3, #0
 80087b4:	2200      	movs	r2, #0
 80087b6:	f7ff fe8f 	bl	80084d8 <usbd_edpt_xfer>
 80087ba:	4603      	mov	r3, r0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	4603      	mov	r3, r0
 80087cc:	6039      	str	r1, [r7, #0]
 80087ce:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 80087d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008800 <tud_control_status+0x3c>)
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	6810      	ldr	r0, [r2, #0]
 80087d6:	6851      	ldr	r1, [r2, #4]
 80087d8:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 80087da:	4b09      	ldr	r3, [pc, #36]	@ (8008800 <tud_control_status+0x3c>)
 80087dc:	2200      	movs	r2, #0
 80087de:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 80087e0:	4b07      	ldr	r3, [pc, #28]	@ (8008800 <tud_control_status+0x3c>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 80087e6:	4b06      	ldr	r3, [pc, #24]	@ (8008800 <tud_control_status+0x3c>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 80087ec:	79fb      	ldrb	r3, [r7, #7]
 80087ee:	6839      	ldr	r1, [r7, #0]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7ff ffcb 	bl	800878c <status_stage_xact>
 80087f6:	4603      	mov	r3, r0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	2000116c 	.word	0x2000116c

08008804 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 8008804:	b580      	push	{r7, lr}
 8008806:	b088      	sub	sp, #32
 8008808:	af00      	add	r7, sp, #0
 800880a:	4603      	mov	r3, r0
 800880c:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 800880e:	4b24      	ldr	r3, [pc, #144]	@ (80088a0 <data_stage_xact+0x9c>)
 8008810:	899a      	ldrh	r2, [r3, #12]
 8008812:	4b23      	ldr	r3, [pc, #140]	@ (80088a0 <data_stage_xact+0x9c>)
 8008814:	89db      	ldrh	r3, [r3, #14]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	b29b      	uxth	r3, r3
 800881a:	837b      	strh	r3, [r7, #26]
 800881c:	2340      	movs	r3, #64	@ 0x40
 800881e:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008820:	8b7a      	ldrh	r2, [r7, #26]
 8008822:	8b3b      	ldrh	r3, [r7, #24]
 8008824:	4293      	cmp	r3, r2
 8008826:	bf28      	it	cs
 8008828:	4613      	movcs	r3, r2
 800882a:	b29b      	uxth	r3, r3
 800882c:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 800882e:	2300      	movs	r3, #0
 8008830:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 8008832:	4b1b      	ldr	r3, [pc, #108]	@ (80088a0 <data_stage_xact+0x9c>)
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800883a:	b2db      	uxtb	r3, r3
 800883c:	2b00      	cmp	r3, #0
 800883e:	d01e      	beq.n	800887e <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 8008840:	2380      	movs	r3, #128	@ 0x80
 8008842:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 8008844:	8bbb      	ldrh	r3, [r7, #28]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d019      	beq.n	800887e <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 800884a:	4b15      	ldr	r3, [pc, #84]	@ (80088a0 <data_stage_xact+0x9c>)
 800884c:	689a      	ldr	r2, [r3, #8]
 800884e:	8bbb      	ldrh	r3, [r7, #28]
 8008850:	4914      	ldr	r1, [pc, #80]	@ (80088a4 <data_stage_xact+0xa0>)
 8008852:	6179      	str	r1, [r7, #20]
 8008854:	2140      	movs	r1, #64	@ 0x40
 8008856:	6139      	str	r1, [r7, #16]
 8008858:	60fa      	str	r2, [r7, #12]
 800885a:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	429a      	cmp	r2, r3
 8008862:	d202      	bcs.n	800886a <data_stage_xact+0x66>
    return -1;
 8008864:	f04f 33ff 	mov.w	r3, #4294967295
 8008868:	e005      	b.n	8008876 <data_stage_xact+0x72>
  memcpy(dest, src, count);
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	68f9      	ldr	r1, [r7, #12]
 800886e:	6978      	ldr	r0, [r7, #20]
 8008870:	f002 fc80 	bl	800b174 <memcpy>
  return 0;
 8008874:	2300      	movs	r3, #0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <data_stage_xact+0x7a>
 800887a:	2300      	movs	r3, #0
 800887c:	e00b      	b.n	8008896 <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 800887e:	8bbb      	ldrh	r3, [r7, #28]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d001      	beq.n	8008888 <data_stage_xact+0x84>
 8008884:	4a07      	ldr	r2, [pc, #28]	@ (80088a4 <data_stage_xact+0xa0>)
 8008886:	e000      	b.n	800888a <data_stage_xact+0x86>
 8008888:	2200      	movs	r2, #0
 800888a:	8bbb      	ldrh	r3, [r7, #28]
 800888c:	7ff9      	ldrb	r1, [r7, #31]
 800888e:	79f8      	ldrb	r0, [r7, #7]
 8008890:	f7ff fe22 	bl	80084d8 <usbd_edpt_xfer>
 8008894:	4603      	mov	r3, r0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3720      	adds	r7, #32
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	2000116c 	.word	0x2000116c
 80088a4:	20001180 	.word	0x20001180

080088a8 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b088      	sub	sp, #32
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60b9      	str	r1, [r7, #8]
 80088b0:	607a      	str	r2, [r7, #4]
 80088b2:	461a      	mov	r2, r3
 80088b4:	4603      	mov	r3, r0
 80088b6:	73fb      	strb	r3, [r7, #15]
 80088b8:	4613      	mov	r3, r2
 80088ba:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 80088bc:	4b30      	ldr	r3, [pc, #192]	@ (8008980 <tud_control_xfer+0xd8>)
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	6810      	ldr	r0, [r2, #0]
 80088c2:	6851      	ldr	r1, [r2, #4]
 80088c4:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 80088c6:	4a2e      	ldr	r2, [pc, #184]	@ (8008980 <tud_control_xfer+0xd8>)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 80088cc:	4b2c      	ldr	r3, [pc, #176]	@ (8008980 <tud_control_xfer+0xd8>)
 80088ce:	2200      	movs	r2, #0
 80088d0:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	88db      	ldrh	r3, [r3, #6]
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	89bb      	ldrh	r3, [r7, #12]
 80088da:	827b      	strh	r3, [r7, #18]
 80088dc:	4613      	mov	r3, r2
 80088de:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80088e0:	8a7a      	ldrh	r2, [r7, #18]
 80088e2:	8a3b      	ldrh	r3, [r7, #16]
 80088e4:	4293      	cmp	r3, r2
 80088e6:	bf28      	it	cs
 80088e8:	4613      	movcs	r3, r2
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	4b24      	ldr	r3, [pc, #144]	@ (8008980 <tud_control_xfer+0xd8>)
 80088ee:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	88db      	ldrh	r3, [r3, #6]
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d026      	beq.n	8008948 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 80088fa:	4b21      	ldr	r3, [pc, #132]	@ (8008980 <tud_control_xfer+0xd8>)
 80088fc:	899b      	ldrh	r3, [r3, #12]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00d      	beq.n	800891e <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10a      	bne.n	800891e <tud_control_xfer+0x76>
 8008908:	4b1e      	ldr	r3, [pc, #120]	@ (8008984 <tud_control_xfer+0xdc>)
 800890a:	61bb      	str	r3, [r7, #24]
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	2b00      	cmp	r3, #0
 8008916:	d000      	beq.n	800891a <tud_control_xfer+0x72>
 8008918:	be00      	bkpt	0x0000
 800891a:	2300      	movs	r3, #0
 800891c:	e02b      	b.n	8008976 <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 800891e:	7bfb      	ldrb	r3, [r7, #15]
 8008920:	4618      	mov	r0, r3
 8008922:	f7ff ff6f 	bl	8008804 <data_stage_xact>
 8008926:	4603      	mov	r3, r0
 8008928:	f083 0301 	eor.w	r3, r3, #1
 800892c:	b2db      	uxtb	r3, r3
 800892e:	2b00      	cmp	r3, #0
 8008930:	d020      	beq.n	8008974 <tud_control_xfer+0xcc>
 8008932:	4b14      	ldr	r3, [pc, #80]	@ (8008984 <tud_control_xfer+0xdc>)
 8008934:	617b      	str	r3, [r7, #20]
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	2b00      	cmp	r3, #0
 8008940:	d000      	beq.n	8008944 <tud_control_xfer+0x9c>
 8008942:	be00      	bkpt	0x0000
 8008944:	2300      	movs	r3, #0
 8008946:	e016      	b.n	8008976 <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 8008948:	7bfb      	ldrb	r3, [r7, #15]
 800894a:	68b9      	ldr	r1, [r7, #8]
 800894c:	4618      	mov	r0, r3
 800894e:	f7ff ff1d 	bl	800878c <status_stage_xact>
 8008952:	4603      	mov	r3, r0
 8008954:	f083 0301 	eor.w	r3, r3, #1
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <tud_control_xfer+0xcc>
 800895e:	4b09      	ldr	r3, [pc, #36]	@ (8008984 <tud_control_xfer+0xdc>)
 8008960:	61fb      	str	r3, [r7, #28]
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 0301 	and.w	r3, r3, #1
 800896a:	2b00      	cmp	r3, #0
 800896c:	d000      	beq.n	8008970 <tud_control_xfer+0xc8>
 800896e:	be00      	bkpt	0x0000
 8008970:	2300      	movs	r3, #0
 8008972:	e000      	b.n	8008976 <tud_control_xfer+0xce>
  }

  return true;
 8008974:	2301      	movs	r3, #1
}
 8008976:	4618      	mov	r0, r3
 8008978:	3720      	adds	r7, #32
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	2000116c 	.word	0x2000116c
 8008984:	e000edf0 	.word	0xe000edf0

08008988 <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 8008988:	b580      	push	{r7, lr}
 800898a:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 800898c:	2214      	movs	r2, #20
 800898e:	2100      	movs	r1, #0
 8008990:	4802      	ldr	r0, [pc, #8]	@ (800899c <usbd_control_reset+0x14>)
 8008992:	f002 fbbb 	bl	800b10c <memset>
}
 8008996:	bf00      	nop
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	2000116c 	.word	0x2000116c

080089a0 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 80089a8:	4a04      	ldr	r2, [pc, #16]	@ (80089bc <usbd_control_set_complete_callback+0x1c>)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6113      	str	r3, [r2, #16]
}
 80089ae:	bf00      	nop
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	2000116c 	.word	0x2000116c

080089c0 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 80089c8:	4b09      	ldr	r3, [pc, #36]	@ (80089f0 <usbd_control_set_request+0x30>)
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	6810      	ldr	r0, [r2, #0]
 80089ce:	6851      	ldr	r1, [r2, #4]
 80089d0:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 80089d2:	4b07      	ldr	r3, [pc, #28]	@ (80089f0 <usbd_control_set_request+0x30>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 80089d8:	4b05      	ldr	r3, [pc, #20]	@ (80089f0 <usbd_control_set_request+0x30>)
 80089da:	2200      	movs	r2, #0
 80089dc:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 80089de:	4b04      	ldr	r3, [pc, #16]	@ (80089f0 <usbd_control_set_request+0x30>)
 80089e0:	2200      	movs	r2, #0
 80089e2:	819a      	strh	r2, [r3, #12]
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	2000116c 	.word	0x2000116c

080089f4 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b088      	sub	sp, #32
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	603b      	str	r3, [r7, #0]
 80089fc:	4603      	mov	r3, r0
 80089fe:	71fb      	strb	r3, [r7, #7]
 8008a00:	460b      	mov	r3, r1
 8008a02:	71bb      	strb	r3, [r7, #6]
 8008a04:	4613      	mov	r3, r2
 8008a06:	717b      	strb	r3, [r7, #5]
 8008a08:	79bb      	ldrb	r3, [r7, #6]
 8008a0a:	73fb      	strb	r3, [r7, #15]
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
 8008a0e:	09db      	lsrs	r3, r3, #7
 8008a10:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 8008a12:	4a4f      	ldr	r2, [pc, #316]	@ (8008b50 <usbd_control_xfer_cb+0x15c>)
 8008a14:	7812      	ldrb	r2, [r2, #0]
 8008a16:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8008a1a:	b2d2      	uxtb	r2, r2
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d01e      	beq.n	8008a5e <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00a      	beq.n	8008a3c <usbd_control_xfer_cb+0x48>
 8008a26:	4b4b      	ldr	r3, [pc, #300]	@ (8008b54 <usbd_control_xfer_cb+0x160>)
 8008a28:	613b      	str	r3, [r7, #16]
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d000      	beq.n	8008a38 <usbd_control_xfer_cb+0x44>
 8008a36:	be00      	bkpt	0x0000
 8008a38:	2300      	movs	r3, #0
 8008a3a:	e084      	b.n	8008b46 <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8008a3c:	79fb      	ldrb	r3, [r7, #7]
 8008a3e:	4944      	ldr	r1, [pc, #272]	@ (8008b50 <usbd_control_xfer_cb+0x15c>)
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7ff fe97 	bl	8008774 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 8008a46:	4b42      	ldr	r3, [pc, #264]	@ (8008b50 <usbd_control_xfer_cb+0x15c>)
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d005      	beq.n	8008a5a <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8008a4e:	4b40      	ldr	r3, [pc, #256]	@ (8008b50 <usbd_control_xfer_cb+0x15c>)
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	79f8      	ldrb	r0, [r7, #7]
 8008a54:	4a3e      	ldr	r2, [pc, #248]	@ (8008b50 <usbd_control_xfer_cb+0x15c>)
 8008a56:	2103      	movs	r1, #3
 8008a58:	4798      	blx	r3
    }

    return true;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e073      	b.n	8008b46 <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 8008a5e:	4b3c      	ldr	r3, [pc, #240]	@ (8008b50 <usbd_control_xfer_cb+0x15c>)
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10c      	bne.n	8008a86 <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 8008a6c:	4b38      	ldr	r3, [pc, #224]	@ (8008b50 <usbd_control_xfer_cb+0x15c>)
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d101      	bne.n	8008a78 <usbd_control_xfer_cb+0x84>
 8008a74:	2300      	movs	r3, #0
 8008a76:	e066      	b.n	8008b46 <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 8008a78:	4b35      	ldr	r3, [pc, #212]	@ (8008b50 <usbd_control_xfer_cb+0x15c>)
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	683a      	ldr	r2, [r7, #0]
 8008a7e:	4936      	ldr	r1, [pc, #216]	@ (8008b58 <usbd_control_xfer_cb+0x164>)
 8008a80:	4618      	mov	r0, r3
 8008a82:	f002 fb77 	bl	800b174 <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8008a86:	4b32      	ldr	r3, [pc, #200]	@ (8008b50 <usbd_control_xfer_cb+0x15c>)
 8008a88:	89da      	ldrh	r2, [r3, #14]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	4413      	add	r3, r2
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	4b2f      	ldr	r3, [pc, #188]	@ (8008b50 <usbd_control_xfer_cb+0x15c>)
 8008a94:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8008a96:	4b2e      	ldr	r3, [pc, #184]	@ (8008b50 <usbd_control_xfer_cb+0x15c>)
 8008a98:	689a      	ldr	r2, [r3, #8]
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8008b50 <usbd_control_xfer_cb+0x15c>)
 8008aa0:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 8008aa2:	4b2b      	ldr	r3, [pc, #172]	@ (8008b50 <usbd_control_xfer_cb+0x15c>)
 8008aa4:	88da      	ldrh	r2, [r3, #6]
 8008aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8008b50 <usbd_control_xfer_cb+0x15c>)
 8008aa8:	89db      	ldrh	r3, [r3, #14]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d002      	beq.n	8008ab4 <usbd_control_xfer_cb+0xc0>
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	2b3f      	cmp	r3, #63	@ 0x3f
 8008ab2:	d831      	bhi.n	8008b18 <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 8008ab8:	4b25      	ldr	r3, [pc, #148]	@ (8008b50 <usbd_control_xfer_cb+0x15c>)
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d007      	beq.n	8008ad0 <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8008ac0:	4b23      	ldr	r3, [pc, #140]	@ (8008b50 <usbd_control_xfer_cb+0x15c>)
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	79f8      	ldrb	r0, [r7, #7]
 8008ac6:	4a22      	ldr	r2, [pc, #136]	@ (8008b50 <usbd_control_xfer_cb+0x15c>)
 8008ac8:	2102      	movs	r1, #2
 8008aca:	4798      	blx	r3
 8008acc:	4603      	mov	r3, r0
 8008ace:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 8008ad0:	7ffb      	ldrb	r3, [r7, #31]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d015      	beq.n	8008b02 <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 8008ad6:	79fb      	ldrb	r3, [r7, #7]
 8008ad8:	491d      	ldr	r1, [pc, #116]	@ (8008b50 <usbd_control_xfer_cb+0x15c>)
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7ff fe56 	bl	800878c <status_stage_xact>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	f083 0301 	eor.w	r3, r3, #1
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d02a      	beq.n	8008b42 <usbd_control_xfer_cb+0x14e>
 8008aec:	4b19      	ldr	r3, [pc, #100]	@ (8008b54 <usbd_control_xfer_cb+0x160>)
 8008aee:	617b      	str	r3, [r7, #20]
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 0301 	and.w	r3, r3, #1
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d000      	beq.n	8008afe <usbd_control_xfer_cb+0x10a>
 8008afc:	be00      	bkpt	0x0000
 8008afe:	2300      	movs	r3, #0
 8008b00:	e021      	b.n	8008b46 <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8008b02:	79fb      	ldrb	r3, [r7, #7]
 8008b04:	2100      	movs	r1, #0
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 ff30 	bl	800996c <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8008b0c:	79fb      	ldrb	r3, [r7, #7]
 8008b0e:	2180      	movs	r1, #128	@ 0x80
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 ff2b 	bl	800996c <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8008b16:	e014      	b.n	8008b42 <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 8008b18:	79fb      	ldrb	r3, [r7, #7]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7ff fe72 	bl	8008804 <data_stage_xact>
 8008b20:	4603      	mov	r3, r0
 8008b22:	f083 0301 	eor.w	r3, r3, #1
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00b      	beq.n	8008b44 <usbd_control_xfer_cb+0x150>
 8008b2c:	4b09      	ldr	r3, [pc, #36]	@ (8008b54 <usbd_control_xfer_cb+0x160>)
 8008b2e:	61bb      	str	r3, [r7, #24]
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0301 	and.w	r3, r3, #1
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d000      	beq.n	8008b3e <usbd_control_xfer_cb+0x14a>
 8008b3c:	be00      	bkpt	0x0000
 8008b3e:	2300      	movs	r3, #0
 8008b40:	e001      	b.n	8008b46 <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8008b42:	bf00      	nop
  }

  return true;
 8008b44:	2301      	movs	r3, #1
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3720      	adds	r7, #32
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	2000116c 	.word	0x2000116c
 8008b54:	e000edf0 	.word	0xe000edf0
 8008b58:	20001180 	.word	0x20001180

08008b5c <__NVIC_EnableIRQ>:
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	4603      	mov	r3, r0
 8008b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	db0b      	blt.n	8008b86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b6e:	79fb      	ldrb	r3, [r7, #7]
 8008b70:	f003 021f 	and.w	r2, r3, #31
 8008b74:	4907      	ldr	r1, [pc, #28]	@ (8008b94 <__NVIC_EnableIRQ+0x38>)
 8008b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b7a:	095b      	lsrs	r3, r3, #5
 8008b7c:	2001      	movs	r0, #1
 8008b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8008b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008b86:	bf00      	nop
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	e000e100 	.word	0xe000e100

08008b98 <__NVIC_DisableIRQ>:
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	db12      	blt.n	8008bd0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008baa:	79fb      	ldrb	r3, [r7, #7]
 8008bac:	f003 021f 	and.w	r2, r3, #31
 8008bb0:	490a      	ldr	r1, [pc, #40]	@ (8008bdc <__NVIC_DisableIRQ+0x44>)
 8008bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bb6:	095b      	lsrs	r3, r3, #5
 8008bb8:	2001      	movs	r0, #1
 8008bba:	fa00 f202 	lsl.w	r2, r0, r2
 8008bbe:	3320      	adds	r3, #32
 8008bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008bc4:	f3bf 8f4f 	dsb	sy
}
 8008bc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008bca:	f3bf 8f6f 	isb	sy
}
 8008bce:	bf00      	nop
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr
 8008bdc:	e000e100 	.word	0xe000e100

08008be0 <dma_setup_prepare>:
  // Internal DMA only
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	4603      	mov	r3, r0
 8008be8:	71fb      	strb	r3, [r7, #7]
 8008bea:	79fb      	ldrb	r3, [r7, #7]
 8008bec:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008bee:	7afb      	ldrb	r3, [r7, #11]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008bf8:	7afb      	ldrb	r3, [r7, #11]
 8008bfa:	4a13      	ldr	r2, [pc, #76]	@ (8008c48 <dma_setup_prepare+0x68>)
 8008bfc:	011b      	lsls	r3, r3, #4
 8008bfe:	4413      	add	r3, r2
 8008c00:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008c02:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c08:	4a10      	ldr	r2, [pc, #64]	@ (8008c4c <dma_setup_prepare+0x6c>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d904      	bls.n	8008c18 <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	db10      	blt.n	8008c3a <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8008c50 <dma_setup_prepare+0x70>)
 8008c1c:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 8008c20:	4a0c      	ldr	r2, [pc, #48]	@ (8008c54 <dma_setup_prepare+0x74>)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8008c2e:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8008c38:	e000      	b.n	8008c3c <dma_setup_prepare+0x5c>
      return;
 8008c3a:	bf00      	nop
}
 8008c3c:	3714      	adds	r7, #20
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	0800c2d8 	.word	0x0800c2d8
 8008c4c:	4f543009 	.word	0x4f543009
 8008c50:	20080008 	.word	0x20080008
 8008c54:	20001248 	.word	0x20001248

08008c58 <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 8008c58:	b480      	push	{r7}
 8008c5a:	b091      	sub	sp, #68	@ 0x44
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	4603      	mov	r3, r0
 8008c60:	71fb      	strb	r3, [r7, #7]
 8008c62:	460b      	mov	r3, r1
 8008c64:	71bb      	strb	r3, [r7, #6]
 8008c66:	4613      	mov	r3, r2
 8008c68:	80bb      	strh	r3, [r7, #4]
 8008c6a:	79fb      	ldrb	r3, [r7, #7]
 8008c6c:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008c6e:	7e7b      	ldrb	r3, [r7, #25]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <dfifo_alloc+0x20>
    rhport = 0;
 8008c74:	2300      	movs	r3, #0
 8008c76:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008c78:	7e7b      	ldrb	r3, [r7, #25]
 8008c7a:	4a65      	ldr	r2, [pc, #404]	@ (8008e10 <dfifo_alloc+0x1b8>)
 8008c7c:	011b      	lsls	r3, r3, #4
 8008c7e:	4413      	add	r3, r2
 8008c80:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008c82:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8008c84:	79fb      	ldrb	r3, [r7, #7]
 8008c86:	011b      	lsls	r3, r3, #4
 8008c88:	4a61      	ldr	r2, [pc, #388]	@ (8008e10 <dfifo_alloc+0x1b8>)
 8008c8a:	4413      	add	r3, r2
 8008c8c:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 8008c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c90:	7a1b      	ldrb	r3, [r3, #8]
 8008c92:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008c96:	79bb      	ldrb	r3, [r7, #6]
 8008c98:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008c9a:	7ebb      	ldrb	r3, [r7, #26]
 8008c9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ca0:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8008ca2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8008ca6:	79bb      	ldrb	r3, [r7, #6]
 8008ca8:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008caa:	7efb      	ldrb	r3, [r7, #27]
 8008cac:	09db      	lsrs	r3, r3, #7
 8008cae:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8008cb0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 8008cb4:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8008cb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d30a      	bcc.n	8008cd6 <dfifo_alloc+0x7e>
 8008cc0:	4b54      	ldr	r3, [pc, #336]	@ (8008e14 <dfifo_alloc+0x1bc>)
 8008cc2:	61fb      	str	r3, [r7, #28]
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 0301 	and.w	r3, r3, #1
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d000      	beq.n	8008cd2 <dfifo_alloc+0x7a>
 8008cd0:	be00      	bkpt	0x0000
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	e095      	b.n	8008e02 <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 8008cd6:	88bb      	ldrh	r3, [r7, #4]
 8008cd8:	617b      	str	r3, [r7, #20]
 8008cda:	2304      	movs	r3, #4
 8008cdc:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	1e5a      	subs	r2, r3, #1
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cec:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 8008cee:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d12a      	bne.n	8008d4c <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8008cf6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	81fb      	strh	r3, [r7, #14]
 8008cfe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008d02:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8008d04:	89fb      	ldrh	r3, [r7, #14]
 8008d06:	089b      	lsrs	r3, r3, #2
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	f103 0208 	add.w	r2, r3, #8
 8008d0e:	7b7b      	ldrb	r3, [r7, #13]
 8008d10:	4413      	add	r3, r2
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	005b      	lsls	r3, r3, #1
 8008d16:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8008d18:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d26d      	bcs.n	8008e00 <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 8008d24:	4b3c      	ldr	r3, [pc, #240]	@ (8008e18 <dfifo_alloc+0x1c0>)
 8008d26:	889b      	ldrh	r3, [r3, #4]
 8008d28:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d90a      	bls.n	8008d44 <dfifo_alloc+0xec>
 8008d2e:	4b39      	ldr	r3, [pc, #228]	@ (8008e14 <dfifo_alloc+0x1bc>)
 8008d30:	623b      	str	r3, [r7, #32]
 8008d32:	6a3b      	ldr	r3, [r7, #32]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0301 	and.w	r3, r3, #1
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d000      	beq.n	8008d40 <dfifo_alloc+0xe8>
 8008d3e:	be00      	bkpt	0x0000
 8008d40:	2300      	movs	r3, #0
 8008d42:	e05e      	b.n	8008e02 <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 8008d44:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d48:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d4a:	e059      	b.n	8008e00 <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 8008d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d4e:	7a5b      	ldrb	r3, [r3, #9]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d016      	beq.n	8008d82 <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 8008d54:	4b30      	ldr	r3, [pc, #192]	@ (8008e18 <dfifo_alloc+0x1c0>)
 8008d56:	799a      	ldrb	r2, [r3, #6]
 8008d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d5a:	7a5b      	ldrb	r3, [r3, #9]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d30a      	bcc.n	8008d76 <dfifo_alloc+0x11e>
 8008d60:	4b2c      	ldr	r3, [pc, #176]	@ (8008e14 <dfifo_alloc+0x1bc>)
 8008d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 0301 	and.w	r3, r3, #1
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d000      	beq.n	8008d72 <dfifo_alloc+0x11a>
 8008d70:	be00      	bkpt	0x0000
 8008d72:	2300      	movs	r3, #0
 8008d74:	e045      	b.n	8008e02 <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 8008d76:	4b28      	ldr	r3, [pc, #160]	@ (8008e18 <dfifo_alloc+0x1c0>)
 8008d78:	799b      	ldrb	r3, [r3, #6]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	b2da      	uxtb	r2, r3
 8008d7e:	4b26      	ldr	r3, [pc, #152]	@ (8008e18 <dfifo_alloc+0x1c0>)
 8008d80:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 8008d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d102      	bne.n	8008d94 <dfifo_alloc+0x13c>
      fifo_size *= 2;
 8008d8e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008d90:	005b      	lsls	r3, r3, #1
 8008d92:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 8008d94:	4b20      	ldr	r3, [pc, #128]	@ (8008e18 <dfifo_alloc+0x1c0>)
 8008d96:	889b      	ldrh	r3, [r3, #4]
 8008d98:	4619      	mov	r1, r3
 8008d9a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8008d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da0:	4413      	add	r3, r2
 8008da2:	4299      	cmp	r1, r3
 8008da4:	d20a      	bcs.n	8008dbc <dfifo_alloc+0x164>
 8008da6:	4b1b      	ldr	r3, [pc, #108]	@ (8008e14 <dfifo_alloc+0x1bc>)
 8008da8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d000      	beq.n	8008db8 <dfifo_alloc+0x160>
 8008db6:	be00      	bkpt	0x0000
 8008db8:	2300      	movs	r3, #0
 8008dba:	e022      	b.n	8008e02 <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 8008dbc:	4b16      	ldr	r3, [pc, #88]	@ (8008e18 <dfifo_alloc+0x1c0>)
 8008dbe:	889a      	ldrh	r2, [r3, #4]
 8008dc0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	4b14      	ldr	r3, [pc, #80]	@ (8008e18 <dfifo_alloc+0x1c0>)
 8008dc8:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 8008dca:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d108      	bne.n	8008de4 <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 8008dd2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008dd4:	041b      	lsls	r3, r3, #16
 8008dd6:	4a10      	ldr	r2, [pc, #64]	@ (8008e18 <dfifo_alloc+0x1c0>)
 8008dd8:	8892      	ldrh	r2, [r2, #4]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	461a      	mov	r2, r3
 8008dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de0:	629a      	str	r2, [r3, #40]	@ 0x28
 8008de2:	e00d      	b.n	8008e00 <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 8008de4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008de6:	041b      	lsls	r3, r3, #16
 8008de8:	4a0b      	ldr	r2, [pc, #44]	@ (8008e18 <dfifo_alloc+0x1c0>)
 8008dea:	8892      	ldrh	r2, [r2, #4]
 8008dec:	431a      	orrs	r2, r3
 8008dee:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008df2:	3b01      	subs	r3, #1
 8008df4:	4611      	mov	r1, r2
 8008df6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008df8:	3340      	adds	r3, #64	@ 0x40
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	4413      	add	r3, r2
 8008dfe:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 8008e00:	2301      	movs	r3, #1
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3744      	adds	r7, #68	@ 0x44
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	0800c2d8 	.word	0x0800c2d8
 8008e14:	e000edf0 	.word	0xe000edf0
 8008e18:	20001240 	.word	0x20001240

08008e1c <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b088      	sub	sp, #32
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	4603      	mov	r3, r0
 8008e24:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8008e26:	79fb      	ldrb	r3, [r7, #7]
 8008e28:	011b      	lsls	r3, r3, #4
 8008e2a:	4a27      	ldr	r2, [pc, #156]	@ (8008ec8 <dfifo_device_init+0xac>)
 8008e2c:	4413      	add	r3, r2
 8008e2e:	61fb      	str	r3, [r7, #28]
 8008e30:	79fb      	ldrb	r3, [r7, #7]
 8008e32:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008e34:	7b3b      	ldrb	r3, [r7, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <dfifo_device_init+0x22>
    rhport = 0;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008e3e:	7b3b      	ldrb	r3, [r7, #12]
 8008e40:	4a21      	ldr	r2, [pc, #132]	@ (8008ec8 <dfifo_device_init+0xac>)
 8008e42:	011b      	lsls	r3, r3, #4
 8008e44:	4413      	add	r3, r2
 8008e46:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008e48:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	7a1b      	ldrb	r3, [r3, #8]
 8008e4e:	2240      	movs	r2, #64	@ 0x40
 8008e50:	81fa      	strh	r2, [r7, #14]
 8008e52:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8008e54:	89fb      	ldrh	r3, [r7, #14]
 8008e56:	089b      	lsrs	r3, r3, #2
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	f103 0208 	add.w	r2, r3, #8
 8008e5e:	7b7b      	ldrb	r3, [r7, #13]
 8008e60:	4413      	add	r3, r2
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	005b      	lsls	r3, r3, #1
 8008e66:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8008e68:	461a      	mov	r2, r3
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e76:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8008e78:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 8008e7a:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	089b      	lsrs	r3, r3, #2
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	4b11      	ldr	r3, [pc, #68]	@ (8008ecc <dfifo_device_init+0xb0>)
 8008e86:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 8008e88:	7dfb      	ldrb	r3, [r7, #23]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d009      	beq.n	8008ea2 <dfifo_device_init+0x86>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 8008e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8008ecc <dfifo_device_init+0xb0>)
 8008e90:	889a      	ldrh	r2, [r3, #4]
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	7a1b      	ldrb	r3, [r3, #8]
 8008e96:	005b      	lsls	r3, r3, #1
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8008ecc <dfifo_device_init+0xb0>)
 8008ea0:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 8008ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8008ecc <dfifo_device_init+0xb0>)
 8008ea4:	889b      	ldrh	r3, [r3, #4]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	041b      	lsls	r3, r3, #16
 8008eac:	441a      	add	r2, r3
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 8008eb2:	79fb      	ldrb	r3, [r7, #7]
 8008eb4:	2240      	movs	r2, #64	@ 0x40
 8008eb6:	2180      	movs	r1, #128	@ 0x80
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7ff fecd 	bl	8008c58 <dfifo_alloc>
}
 8008ebe:	bf00      	nop
 8008ec0:	3720      	adds	r7, #32
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	0800c2d8 	.word	0x0800c2d8
 8008ecc:	20001240 	.word	0x20001240

08008ed0 <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 8008ed0:	b480      	push	{r7}
 8008ed2:	b08b      	sub	sp, #44	@ 0x2c
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	6039      	str	r1, [r7, #0]
 8008eda:	71fb      	strb	r3, [r7, #7]
 8008edc:	79fb      	ldrb	r3, [r7, #7]
 8008ede:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008ee0:	7c7b      	ldrb	r3, [r7, #17]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <edpt_activate+0x1a>
    rhport = 0;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008eea:	7c7b      	ldrb	r3, [r7, #17]
 8008eec:	4a45      	ldr	r2, [pc, #276]	@ (8009004 <edpt_activate+0x134>)
 8008eee:	011b      	lsls	r3, r3, #4
 8008ef0:	4413      	add	r3, r2
 8008ef2:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	789b      	ldrb	r3, [r3, #2]
 8008efa:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008efc:	7cbb      	ldrb	r3, [r7, #18]
 8008efe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	789b      	ldrb	r3, [r3, #2]
 8008f0c:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008f0e:	7cfb      	ldrb	r3, [r7, #19]
 8008f10:	09db      	lsrs	r3, r3, #7
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8008f18:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8008f1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8008f20:	0052      	lsls	r2, r2, #1
 8008f22:	4413      	add	r3, r2
 8008f24:	011b      	lsls	r3, r3, #4
 8008f26:	4a38      	ldr	r2, [pc, #224]	@ (8009008 <edpt_activate+0x138>)
 8008f28:	4413      	add	r3, r2
 8008f2a:	61fb      	str	r3, [r7, #28]
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	889b      	ldrh	r3, [r3, #4]
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f3a:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	799a      	ldrb	r2, [r3, #6]
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	731a      	strb	r2, [r3, #12]

  // Endpoint control
  dwc2_depctl_t depctl = {.value = 0};
 8008f48:	2300      	movs	r3, #0
 8008f4a:	60fb      	str	r3, [r7, #12]
  depctl.mps = xfer->max_size;
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	895b      	ldrh	r3, [r3, #10]
 8008f50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	89bb      	ldrh	r3, [r7, #12]
 8008f58:	f362 030a 	bfi	r3, r2, #0, #11
 8008f5c:	81bb      	strh	r3, [r7, #12]
  depctl.active = 1;
 8008f5e:	7b7b      	ldrb	r3, [r7, #13]
 8008f60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f64:	737b      	strb	r3, [r7, #13]
  depctl.type = p_endpoint_desc->bmAttributes.xfer;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	78db      	ldrb	r3, [r3, #3]
 8008f6a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008f6e:	b2da      	uxtb	r2, r3
 8008f70:	7bbb      	ldrb	r3, [r7, #14]
 8008f72:	f362 0383 	bfi	r3, r2, #2, #2
 8008f76:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	78db      	ldrb	r3, [r3, #3]
 8008f7c:	f003 0303 	and.w	r3, r3, #3
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d003      	beq.n	8008f8e <edpt_activate+0xbe>
    depctl.set_data0_iso_even = 1;
 8008f86:	7bfb      	ldrb	r3, [r7, #15]
 8008f88:	f043 0310 	orr.w	r3, r3, #16
 8008f8c:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 8008f8e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d108      	bne.n	8008fa8 <edpt_activate+0xd8>
    depctl.tx_fifo_num = epnum;
 8008f96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008f9a:	f003 030f 	and.w	r3, r3, #15
 8008f9e:	b2da      	uxtb	r2, r3
 8008fa0:	89fb      	ldrh	r3, [r7, #14]
 8008fa2:	f362 1389 	bfi	r3, r2, #6, #4
 8008fa6:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8008fa8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	bf14      	ite	ne
 8008fb0:	2301      	movne	r3, #1
 8008fb2:	2300      	moveq	r3, #0
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008fbc:	0112      	lsls	r2, r2, #4
 8008fbe:	4413      	add	r3, r2
 8008fc0:	3348      	adds	r3, #72	@ 0x48
 8008fc2:	015b      	lsls	r3, r3, #5
 8008fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fc6:	4413      	add	r3, r2
 8008fc8:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd2:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 8008fd6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008fda:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8008fde:	2901      	cmp	r1, #1
 8008fe0:	d101      	bne.n	8008fe6 <edpt_activate+0x116>
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	e000      	b.n	8008fe8 <edpt_activate+0x118>
 8008fe6:	2110      	movs	r1, #16
 8008fe8:	440b      	add	r3, r1
 8008fea:	2101      	movs	r1, #1
 8008fec:	fa01 f303 	lsl.w	r3, r1, r3
 8008ff0:	431a      	orrs	r2, r3
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff4:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 8008ff8:	bf00      	nop
 8008ffa:	372c      	adds	r7, #44	@ 0x2c
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	0800c2d8 	.word	0x0800c2d8
 8009008:	200011c0 	.word	0x200011c0

0800900c <edpt_disable>:

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 800900c:	b480      	push	{r7}
 800900e:	b089      	sub	sp, #36	@ 0x24
 8009010:	af00      	add	r7, sp, #0
 8009012:	4603      	mov	r3, r0
 8009014:	71fb      	strb	r3, [r7, #7]
 8009016:	460b      	mov	r3, r1
 8009018:	71bb      	strb	r3, [r7, #6]
 800901a:	4613      	mov	r3, r2
 800901c:	717b      	strb	r3, [r7, #5]
 800901e:	79fb      	ldrb	r3, [r7, #7]
 8009020:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009022:	7c7b      	ldrb	r3, [r7, #17]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <edpt_disable+0x20>
    rhport = 0;
 8009028:	2300      	movs	r3, #0
 800902a:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800902c:	7c7b      	ldrb	r3, [r7, #17]
 800902e:	4a5b      	ldr	r2, [pc, #364]	@ (800919c <edpt_disable+0x190>)
 8009030:	011b      	lsls	r3, r3, #4
 8009032:	4413      	add	r3, r2
 8009034:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009036:	61fb      	str	r3, [r7, #28]
 8009038:	79bb      	ldrb	r3, [r7, #6]
 800903a:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800903c:	7cbb      	ldrb	r3, [r7, #18]
 800903e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009042:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8009044:	76fb      	strb	r3, [r7, #27]
 8009046:	79bb      	ldrb	r3, [r7, #6]
 8009048:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800904a:	7cfb      	ldrb	r3, [r7, #19]
 800904c:	09db      	lsrs	r3, r3, #7
 800904e:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8009050:	76bb      	strb	r3, [r7, #26]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8009052:	7ebb      	ldrb	r3, [r7, #26]
 8009054:	2b01      	cmp	r3, #1
 8009056:	bf14      	ite	ne
 8009058:	2301      	movne	r3, #1
 800905a:	2300      	moveq	r3, #0
 800905c:	b2db      	uxtb	r3, r3
 800905e:	461a      	mov	r2, r3
 8009060:	7efb      	ldrb	r3, [r7, #27]
 8009062:	0112      	lsls	r2, r2, #4
 8009064:	4413      	add	r3, r2
 8009066:	3348      	adds	r3, #72	@ 0x48
 8009068:	015b      	lsls	r3, r3, #5
 800906a:	69fa      	ldr	r2, [r7, #28]
 800906c:	4413      	add	r3, r2
 800906e:	617b      	str	r3, [r7, #20]

  if (dir == TUSB_DIR_IN) {
 8009070:	7ebb      	ldrb	r3, [r7, #26]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d149      	bne.n	800910a <edpt_disable+0xfe>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 8009076:	7efb      	ldrb	r3, [r7, #27]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d003      	beq.n	8009084 <edpt_disable+0x78>
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	db0d      	blt.n	80090a0 <edpt_disable+0x94>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	797a      	ldrb	r2, [r7, #5]
 800908a:	2a00      	cmp	r2, #0
 800908c:	d002      	beq.n	8009094 <edpt_disable+0x88>
 800908e:	f04f 6202 	mov.w	r2, #136314880	@ 0x8200000
 8009092:	e001      	b.n	8009098 <edpt_disable+0x8c>
 8009094:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009098:	431a      	orrs	r2, r3
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	601a      	str	r2, [r3, #0]
 800909e:	e022      	b.n	80090e6 <edpt_disable+0xda>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      dep->diepctl |= DIEPCTL_SNAK;
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 80090ac:	bf00      	nop
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d0f9      	beq.n	80090ae <edpt_disable+0xa2>

      // Disable the endpoint.
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	797a      	ldrb	r2, [r7, #5]
 80090c0:	2a00      	cmp	r2, #0
 80090c2:	d001      	beq.n	80090c8 <edpt_disable+0xbc>
 80090c4:	4a36      	ldr	r2, [pc, #216]	@ (80091a0 <edpt_disable+0x194>)
 80090c6:	e001      	b.n	80090cc <edpt_disable+0xc0>
 80090c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80090cc:	431a      	orrs	r2, r3
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 80090d2:	bf00      	nop
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	f003 0302 	and.w	r3, r3, #2
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d0f9      	beq.n	80090d4 <edpt_disable+0xc8>

      dep->diepint = DIEPINT_EPDISD;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	2202      	movs	r2, #2
 80090e4:	609a      	str	r2, [r3, #8]
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	60fb      	str	r3, [r7, #12]
 80090ea:	7efb      	ldrb	r3, [r7, #27]
 80090ec:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 80090ee:	7afb      	ldrb	r3, [r7, #11]
 80090f0:	019b      	lsls	r3, r3, #6
 80090f2:	f043 0220 	orr.w	r2, r3, #32
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 80090fa:	bf00      	nop
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	f003 0320 	and.w	r3, r3, #32
 8009104:	2b00      	cmp	r3, #0
 8009106:	d1f9      	bne.n	80090fc <edpt_disable+0xf0>
}
 8009108:	e041      	b.n	800918e <edpt_disable+0x182>

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dfifo_flush_tx(dwc2, epnum);
  } else {
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 800910a:	7efb      	ldrb	r3, [r7, #27]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d003      	beq.n	8009118 <edpt_disable+0x10c>
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	db0c      	blt.n	8009132 <edpt_disable+0x126>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	797a      	ldrb	r2, [r7, #5]
 800911e:	2a00      	cmp	r2, #0
 8009120:	d002      	beq.n	8009128 <edpt_disable+0x11c>
 8009122:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8009126:	e000      	b.n	800912a <edpt_disable+0x11e>
 8009128:	2200      	movs	r2, #0
 800912a:	431a      	orrs	r2, r3
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	601a      	str	r2, [r3, #0]
 8009130:	e02d      	b.n	800918e <edpt_disable+0x182>
    } else {
      // Asserting GONAK is required to STALL an OUT endpoint.
      // Simpler to use polling here, we don't use the "B"OUTNAKEFF interrupt
      // anyway, and it can't be cleared by user code. If this while loop never
      // finishes, we have bigger problems than just the stack.
      dwc2->dctl |= DCTL_SGONAK;
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8009138:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 8009142:	bf00      	nop
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	695b      	ldr	r3, [r3, #20]
 8009148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800914c:	2b00      	cmp	r3, #0
 800914e:	d0f9      	beq.n	8009144 <edpt_disable+0x138>

      // Ditto here disable the endpoint.
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	797a      	ldrb	r2, [r7, #5]
 8009156:	2a00      	cmp	r2, #0
 8009158:	d001      	beq.n	800915e <edpt_disable+0x152>
 800915a:	4a11      	ldr	r2, [pc, #68]	@ (80091a0 <edpt_disable+0x194>)
 800915c:	e001      	b.n	8009162 <edpt_disable+0x156>
 800915e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8009162:	431a      	orrs	r2, r3
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	601a      	str	r2, [r3, #0]
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 8009168:	bf00      	nop
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	f003 0302 	and.w	r3, r3, #2
 8009172:	2b00      	cmp	r3, #0
 8009174:	d0f9      	beq.n	800916a <edpt_disable+0x15e>

      dep->doepint = DOEPINT_EPDISD;
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2202      	movs	r2, #2
 800917a:	609a      	str	r2, [r3, #8]

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8009182:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
  }
}
 800918c:	bf00      	nop
 800918e:	bf00      	nop
 8009190:	3724      	adds	r7, #36	@ 0x24
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	0800c2d8 	.word	0x0800c2d8
 80091a0:	40200000 	.word	0x40200000

080091a4 <edpt_schedule_packets>:

// Since this function returns void, it is not possible to return a boolean success message
// We must make sure that this function is not called when the EP is disabled
// Must be called from critical section
static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b090      	sub	sp, #64	@ 0x40
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	4603      	mov	r3, r0
 80091ac:	71fb      	strb	r3, [r7, #7]
 80091ae:	460b      	mov	r3, r1
 80091b0:	71bb      	strb	r3, [r7, #6]
 80091b2:	4613      	mov	r3, r2
 80091b4:	717b      	strb	r3, [r7, #5]
 80091b6:	79fb      	ldrb	r3, [r7, #7]
 80091b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80091bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d002      	beq.n	80091ca <edpt_schedule_packets+0x26>
    rhport = 0;
 80091c4:	2300      	movs	r3, #0
 80091c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80091ca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80091ce:	4a65      	ldr	r2, [pc, #404]	@ (8009364 <edpt_schedule_packets+0x1c0>)
 80091d0:	011b      	lsls	r3, r3, #4
 80091d2:	4413      	add	r3, r2
 80091d4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80091d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 80091d8:	79ba      	ldrb	r2, [r7, #6]
 80091da:	797b      	ldrb	r3, [r7, #5]
 80091dc:	0052      	lsls	r2, r2, #1
 80091de:	4413      	add	r3, r2
 80091e0:	011b      	lsls	r3, r3, #4
 80091e2:	4a61      	ldr	r2, [pc, #388]	@ (8009368 <edpt_schedule_packets+0x1c4>)
 80091e4:	4413      	add	r3, r2
 80091e6:	637b      	str	r3, [r7, #52]	@ 0x34
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 80091e8:	797b      	ldrb	r3, [r7, #5]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	bf14      	ite	ne
 80091ee:	2301      	movne	r3, #1
 80091f0:	2300      	moveq	r3, #0
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	461a      	mov	r2, r3
 80091f6:	79bb      	ldrb	r3, [r7, #6]
 80091f8:	0112      	lsls	r2, r2, #4
 80091fa:	4413      	add	r3, r2
 80091fc:	3348      	adds	r3, #72	@ 0x48
 80091fe:	015b      	lsls	r3, r3, #5
 8009200:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009202:	4413      	add	r3, r2
 8009204:	633b      	str	r3, [r7, #48]	@ 0x30

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 8009206:	79bb      	ldrb	r3, [r7, #6]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d11c      	bne.n	8009246 <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 800920c:	797b      	ldrb	r3, [r7, #5]
 800920e:	4a57      	ldr	r2, [pc, #348]	@ (800936c <edpt_schedule_packets+0x1c8>)
 8009210:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8009214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009216:	895b      	ldrh	r3, [r3, #10]
 8009218:	853a      	strh	r2, [r7, #40]	@ 0x28
 800921a:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800921c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800921e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009220:	4293      	cmp	r3, r2
 8009222:	bf28      	it	cs
 8009224:	4613      	movcs	r3, r2
 8009226:	b29b      	uxth	r3, r3
 8009228:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    _dcd_data.ep0_pending[dir] -= total_bytes;
 800922a:	797b      	ldrb	r3, [r7, #5]
 800922c:	4a4f      	ldr	r2, [pc, #316]	@ (800936c <edpt_schedule_packets+0x1c8>)
 800922e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8009232:	797b      	ldrb	r3, [r7, #5]
 8009234:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8009236:	1a8a      	subs	r2, r1, r2
 8009238:	b291      	uxth	r1, r2
 800923a:	4a4c      	ldr	r2, [pc, #304]	@ (800936c <edpt_schedule_packets+0x1c8>)
 800923c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 8009240:	2301      	movs	r3, #1
 8009242:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009244:	e014      	b.n	8009270 <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 8009246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009248:	891b      	ldrh	r3, [r3, #8]
 800924a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 800924c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800924e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009250:	8952      	ldrh	r2, [r2, #10]
 8009252:	623b      	str	r3, [r7, #32]
 8009254:	61fa      	str	r2, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8009256:	6a3a      	ldr	r2, [r7, #32]
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	4413      	add	r3, r2
 800925c:	1e5a      	subs	r2, r3, #1
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	fbb2 f3f3 	udiv	r3, r2, r3
 8009264:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if (num_packets == 0) {
 8009266:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009268:	2b00      	cmp	r3, #0
 800926a:	d101      	bne.n	8009270 <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 800926c:	2301      	movs	r3, #1
 800926e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }
  }

  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  dwc2_ep_tsize_t deptsiz = {.value = 0};
 8009270:	2300      	movs	r3, #0
 8009272:	617b      	str	r3, [r7, #20]
  deptsiz.xfer_size = total_bytes;
 8009274:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8009276:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	f362 0312 	bfi	r3, r2, #0, #19
 8009280:	617b      	str	r3, [r7, #20]
  deptsiz.packet_count = num_packets;
 8009282:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009284:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009288:	b29a      	uxth	r2, r3
 800928a:	8afb      	ldrh	r3, [r7, #22]
 800928c:	f362 03cc 	bfi	r3, r2, #3, #10
 8009290:	82fb      	strh	r3, [r7, #22]
  dep->tsiz = deptsiz.value;
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009296:	611a      	str	r2, [r3, #16]

  // control
  dwc2_depctl_t depctl = {.value = dep->ctl};
 8009298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	613b      	str	r3, [r7, #16]
  depctl.clear_nak = 1;
 800929e:	7cfb      	ldrb	r3, [r7, #19]
 80092a0:	f043 0304 	orr.w	r3, r3, #4
 80092a4:	74fb      	strb	r3, [r7, #19]
  depctl.enable = 1;
 80092a6:	7cfb      	ldrb	r3, [r7, #19]
 80092a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092ac:	74fb      	strb	r3, [r7, #19]
  if (depctl.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 80092ae:	7cbb      	ldrb	r3, [r7, #18]
 80092b0:	f003 030c 	and.w	r3, r3, #12
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b04      	cmp	r3, #4
 80092b8:	d11a      	bne.n	80092f0 <edpt_schedule_packets+0x14c>
 80092ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092bc:	7b1b      	ldrb	r3, [r3, #12]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d116      	bne.n	80092f0 <edpt_schedule_packets+0x14c>
    const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 80092c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80092c8:	60bb      	str	r3, [r7, #8]
    const uint32_t odd_now = dsts.frame_number & 1u;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (odd_now) {
 80092d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d004      	beq.n	80092e8 <edpt_schedule_packets+0x144>
      depctl.set_data0_iso_even = 1;
 80092de:	7cfb      	ldrb	r3, [r7, #19]
 80092e0:	f043 0310 	orr.w	r3, r3, #16
 80092e4:	74fb      	strb	r3, [r7, #19]
 80092e6:	e003      	b.n	80092f0 <edpt_schedule_packets+0x14c>
    } else {
      depctl.set_data1_iso_odd = 1;
 80092e8:	7cfb      	ldrb	r3, [r7, #19]
 80092ea:	f043 0320 	orr.w	r3, r3, #32
 80092ee:	74fb      	strb	r3, [r7, #19]
 80092f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f2:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092f8:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 80092fa:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 80092fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if(is_dma) {
 8009300:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009304:	2b00      	cmp	r3, #0
 8009306:	d015      	beq.n	8009334 <edpt_schedule_packets+0x190>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 8009308:	797b      	ldrb	r3, [r7, #5]
 800930a:	2b01      	cmp	r3, #1
 800930c:	d109      	bne.n	8009322 <edpt_schedule_packets+0x17e>
 800930e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009310:	2b00      	cmp	r3, #0
 8009312:	d006      	beq.n	8009322 <edpt_schedule_packets+0x17e>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 8009314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800931a:	4611      	mov	r1, r2
 800931c:	4618      	mov	r0, r3
 800931e:	f7fd fd6b 	bl	8006df8 <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 8009322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	461a      	mov	r2, r3
 8009328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932a:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009330:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 8009332:	e013      	b.n	800935c <edpt_schedule_packets+0x1b8>
    dep->diepctl = depctl.value; // enable endpoint
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009338:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 800933a:	797b      	ldrb	r3, [r7, #5]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d10d      	bne.n	800935c <edpt_schedule_packets+0x1b8>
 8009340:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00a      	beq.n	800935c <edpt_schedule_packets+0x1b8>
      dwc2->diepempmsk |= (1 << epnum);
 8009346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009348:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800934c:	79ba      	ldrb	r2, [r7, #6]
 800934e:	2101      	movs	r1, #1
 8009350:	fa01 f202 	lsl.w	r2, r1, r2
 8009354:	431a      	orrs	r2, r3
 8009356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009358:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 800935c:	bf00      	nop
 800935e:	3740      	adds	r7, #64	@ 0x40
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	0800c2d8 	.word	0x0800c2d8
 8009368:	200011c0 	.word	0x200011c0
 800936c:	20001240 	.word	0x20001240

08009370 <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8009370:	b580      	push	{r7, lr}
 8009372:	b08c      	sub	sp, #48	@ 0x30
 8009374:	af00      	add	r7, sp, #0
 8009376:	4603      	mov	r3, r0
 8009378:	6039      	str	r1, [r7, #0]
 800937a:	71fb      	strb	r3, [r7, #7]
 800937c:	79fb      	ldrb	r3, [r7, #7]
 800937e:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009380:	7dfb      	ldrb	r3, [r7, #23]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <dcd_init+0x1a>
    rhport = 0;
 8009386:	2300      	movs	r3, #0
 8009388:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800938a:	7dfb      	ldrb	r3, [r7, #23]
 800938c:	4a43      	ldr	r2, [pc, #268]	@ (800949c <dcd_init+0x12c>)
 800938e:	011b      	lsls	r3, r3, #4
 8009390:	4413      	add	r3, r2
 8009392:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009394:	62bb      	str	r3, [r7, #40]	@ 0x28

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 8009396:	2208      	movs	r2, #8
 8009398:	2100      	movs	r1, #0
 800939a:	4841      	ldr	r0, [pc, #260]	@ (80094a0 <dcd_init+0x130>)
 800939c:	f001 feb6 	bl	800b10c <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 80093a0:	2101      	movs	r1, #1
 80093a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093a4:	f001 f9c6 	bl	800a734 <dwc2_core_is_highspeed>
 80093a8:	4603      	mov	r3, r0
 80093aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80093ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b0:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093b6:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 80093b8:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 80093ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 80093be:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80093c2:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80093c6:	79fb      	ldrb	r3, [r7, #7]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f001 f9d1 	bl	800a770 <dwc2_core_init>
 80093ce:	4603      	mov	r3, r0
 80093d0:	f083 0301 	eor.w	r3, r3, #1
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00a      	beq.n	80093f0 <dcd_init+0x80>
 80093da:	4b32      	ldr	r3, [pc, #200]	@ (80094a4 <dcd_init+0x134>)
 80093dc:	61fb      	str	r3, [r7, #28]
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 0301 	and.w	r3, r3, #1
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d000      	beq.n	80093ec <dcd_init+0x7c>
 80093ea:	be00      	bkpt	0x0000
 80093ec:	2300      	movs	r3, #0
 80093ee:	e050      	b.n	8009492 <dcd_init+0x122>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 80093f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 80093f6:	f023 0303 	bic.w	r3, r3, #3
 80093fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (is_highspeed) {
 80093fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00d      	beq.n	8009420 <dcd_init+0xb0>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009408:	60fb      	str	r3, [r7, #12]
    if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800940a:	7b3b      	ldrb	r3, [r7, #12]
 800940c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009410:	b2db      	uxtb	r3, r3
 8009412:	2b80      	cmp	r3, #128	@ 0x80
 8009414:	d108      	bne.n	8009428 <dcd_init+0xb8>
      dcfg |= DCFG_XCVRDLY;
 8009416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009418:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800941c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800941e:	e003      	b.n	8009428 <dcd_init+0xb8>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 8009420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009422:	f043 0303 	orr.w	r3, r3, #3
 8009426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 8009428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800942a:	f043 0304 	orr.w	r3, r3, #4
 800942e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2->dcfg = dcfg;
 8009430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009434:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 8009438:	79fb      	ldrb	r3, [r7, #7]
 800943a:	4618      	mov	r0, r3
 800943c:	f000 f92a 	bl	8009694 <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 8009440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009448:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800944c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944e:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8009450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8009458:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 800945c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800945e:	601a      	str	r2, [r3, #0]
  // No hardware detection of Vbus B-session is available on the STM32N6
  dwc2->stm32_gccfg |= STM32_GCCFG_VBVALOVAL;
#endif

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 8009460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009462:	699a      	ldr	r2, [r3, #24]
 8009464:	4b10      	ldr	r3, [pc, #64]	@ (80094a8 <dcd_init+0x138>)
 8009466:	4313      	orrs	r3, r2
 8009468:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800946a:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 800946c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 8009472:	6a3b      	ldr	r3, [r7, #32]
 8009474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009478:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 800947a:	6a3b      	ldr	r3, [r7, #32]
 800947c:	f043 0301 	orr.w	r3, r3, #1
 8009480:	623b      	str	r3, [r7, #32]
  dwc2->gahbcfg = gahbcfg;
 8009482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009484:	6a3a      	ldr	r2, [r7, #32]
 8009486:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 8009488:	79fb      	ldrb	r3, [r7, #7]
 800948a:	4618      	mov	r0, r3
 800948c:	f000 f8e0 	bl	8009650 <dcd_connect>
  return true;
 8009490:	2301      	movs	r3, #1
}
 8009492:	4618      	mov	r0, r3
 8009494:	3730      	adds	r7, #48	@ 0x30
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	0800c2d8 	.word	0x0800c2d8
 80094a0:	20001240 	.word	0x20001240
 80094a4:	e000edf0 	.word	0xe000edf0
 80094a8:	80003804 	.word	0x80003804

080094ac <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4603      	mov	r3, r0
 80094b4:	71fb      	strb	r3, [r7, #7]
 80094b6:	79fb      	ldrb	r3, [r7, #7]
 80094b8:	73fb      	strb	r3, [r7, #15]
 80094ba:	2301      	movs	r3, #1
 80094bc:	73bb      	strb	r3, [r7, #14]
 80094be:	2301      	movs	r3, #1
 80094c0:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
 80094c4:	4a0c      	ldr	r2, [pc, #48]	@ (80094f8 <dcd_int_enable+0x4c>)
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	4413      	add	r3, r2
 80094ca:	3304      	adds	r3, #4
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 80094d0:	7b7b      	ldrb	r3, [r7, #13]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d005      	beq.n	80094e2 <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 80094d6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80094da:	4618      	mov	r0, r3
 80094dc:	f7ff fb3e 	bl	8008b5c <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 80094e0:	e004      	b.n	80094ec <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 80094e2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7ff fb56 	bl	8008b98 <__NVIC_DisableIRQ>
}
 80094ec:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 80094ee:	bf00      	nop
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	0800c2d8 	.word	0x0800c2d8

080094fc <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	4603      	mov	r3, r0
 8009504:	71fb      	strb	r3, [r7, #7]
 8009506:	79fb      	ldrb	r3, [r7, #7]
 8009508:	73fb      	strb	r3, [r7, #15]
 800950a:	2301      	movs	r3, #1
 800950c:	73bb      	strb	r3, [r7, #14]
 800950e:	2300      	movs	r3, #0
 8009510:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 8009512:	7bfb      	ldrb	r3, [r7, #15]
 8009514:	4a0c      	ldr	r2, [pc, #48]	@ (8009548 <dcd_int_disable+0x4c>)
 8009516:	011b      	lsls	r3, r3, #4
 8009518:	4413      	add	r3, r2
 800951a:	3304      	adds	r3, #4
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 8009520:	7b7b      	ldrb	r3, [r7, #13]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d005      	beq.n	8009532 <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 8009526:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800952a:	4618      	mov	r0, r3
 800952c:	f7ff fb16 	bl	8008b5c <__NVIC_EnableIRQ>
}
 8009530:	e004      	b.n	800953c <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 8009532:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009536:	4618      	mov	r0, r3
 8009538:	f7ff fb2e 	bl	8008b98 <__NVIC_DisableIRQ>
}
 800953c:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 800953e:	bf00      	nop
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	0800c2d8 	.word	0x0800c2d8

0800954c <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	4603      	mov	r3, r0
 8009554:	460a      	mov	r2, r1
 8009556:	71fb      	strb	r3, [r7, #7]
 8009558:	4613      	mov	r3, r2
 800955a:	71bb      	strb	r3, [r7, #6]
 800955c:	79fb      	ldrb	r3, [r7, #7]
 800955e:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009560:	7a7b      	ldrb	r3, [r7, #9]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d001      	beq.n	800956a <dcd_set_address+0x1e>
    rhport = 0;
 8009566:	2300      	movs	r3, #0
 8009568:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800956a:	7a7b      	ldrb	r3, [r7, #9]
 800956c:	4a14      	ldr	r2, [pc, #80]	@ (80095c0 <dcd_set_address+0x74>)
 800956e:	011b      	lsls	r3, r3, #4
 8009570:	4413      	add	r3, r2
 8009572:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009574:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800957c:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 8009580:	79bb      	ldrb	r3, [r7, #6]
 8009582:	011b      	lsls	r3, r3, #4
 8009584:	431a      	orrs	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 800958c:	2300      	movs	r3, #0
 800958e:	72fb      	strb	r3, [r7, #11]
 8009590:	2301      	movs	r3, #1
 8009592:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8009594:	7abb      	ldrb	r3, [r7, #10]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d002      	beq.n	80095a0 <dcd_set_address+0x54>
 800959a:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800959e:	e000      	b.n	80095a2 <dcd_set_address+0x56>
 80095a0:	2300      	movs	r3, #0
 80095a2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	b25b      	sxtb	r3, r3
 80095aa:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 80095ac:	79f8      	ldrb	r0, [r7, #7]
 80095ae:	2300      	movs	r3, #0
 80095b0:	2200      	movs	r2, #0
 80095b2:	f000 f98b 	bl	80098cc <dcd_edpt_xfer>
}
 80095b6:	bf00      	nop
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	0800c2d8 	.word	0x0800c2d8

080095c4 <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 80095c4:	b480      	push	{r7}
 80095c6:	b087      	sub	sp, #28
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	4603      	mov	r3, r0
 80095cc:	71fb      	strb	r3, [r7, #7]
 80095ce:	79fb      	ldrb	r3, [r7, #7]
 80095d0:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80095d2:	7bfb      	ldrb	r3, [r7, #15]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <dcd_remote_wakeup+0x18>
    rhport = 0;
 80095d8:	2300      	movs	r3, #0
 80095da:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80095dc:	7bfb      	ldrb	r3, [r7, #15]
 80095de:	4a19      	ldr	r2, [pc, #100]	@ (8009644 <dcd_remote_wakeup+0x80>)
 80095e0:	011b      	lsls	r3, r3, #4
 80095e2:	4413      	add	r3, r2
 80095e4:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80095e6:	617b      	str	r3, [r7, #20]

  // set remote wakeup
  dwc2->dctl |= DCTL_RWUSIG;
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80095ee:	f043 0201 	orr.w	r2, r3, #1
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  // enable SOF to detect bus resume
  dwc2->gintsts = GINTSTS_SOF;
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	2208      	movs	r2, #8
 80095fc:	615a      	str	r2, [r3, #20]
  dwc2->gintmsk |= GINTMSK_SOFM;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	f043 0208 	orr.w	r2, r3, #8
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	619a      	str	r2, [r3, #24]
#define dwc2_dcd_int_disable(_rhport) dwc2_int_set(_rhport, TUSB_ROLE_DEVICE, false)


TU_ATTR_ALWAYS_INLINE static inline void dwc2_remote_wakeup_delay(void) {
  // try to delay for 1 ms
  uint32_t count = SystemCoreClock / 1000;
 800960a:	4b0f      	ldr	r3, [pc, #60]	@ (8009648 <dcd_remote_wakeup+0x84>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a0f      	ldr	r2, [pc, #60]	@ (800964c <dcd_remote_wakeup+0x88>)
 8009610:	fba2 2303 	umull	r2, r3, r2, r3
 8009614:	099b      	lsrs	r3, r3, #6
 8009616:	613b      	str	r3, [r7, #16]
  while (count--) __NOP();
 8009618:	e000      	b.n	800961c <dcd_remote_wakeup+0x58>
 800961a:	bf00      	nop
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	1e5a      	subs	r2, r3, #1
 8009620:	613a      	str	r2, [r7, #16]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1f9      	bne.n	800961a <dcd_remote_wakeup+0x56>
}
 8009626:	bf00      	nop

  // Per specs: remote wakeup signal bit must be clear within 1-15ms
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800962e:	f023 0201 	bic.w	r2, r3, #1
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8009638:	bf00      	nop
 800963a:	371c      	adds	r7, #28
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	0800c2d8 	.word	0x0800c2d8
 8009648:	20000048 	.word	0x20000048
 800964c:	10624dd3 	.word	0x10624dd3

08009650 <dcd_connect>:

void dcd_connect(uint8_t rhport) {
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	4603      	mov	r3, r0
 8009658:	71fb      	strb	r3, [r7, #7]
 800965a:	79fb      	ldrb	r3, [r7, #7]
 800965c:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800965e:	7afb      	ldrb	r3, [r7, #11]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <dcd_connect+0x18>
    rhport = 0;
 8009664:	2300      	movs	r3, #0
 8009666:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009668:	7afb      	ldrb	r3, [r7, #11]
 800966a:	4a09      	ldr	r2, [pc, #36]	@ (8009690 <dcd_connect+0x40>)
 800966c:	011b      	lsls	r3, r3, #4
 800966e:	4413      	add	r3, r2
 8009670:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009672:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800967a:	f023 0202 	bic.w	r2, r3, #2
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8009684:	bf00      	nop
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr
 8009690:	0800c2d8 	.word	0x0800c2d8

08009694 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	4603      	mov	r3, r0
 800969c:	71fb      	strb	r3, [r7, #7]
 800969e:	79fb      	ldrb	r3, [r7, #7]
 80096a0:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80096a2:	7afb      	ldrb	r3, [r7, #11]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <dcd_disconnect+0x18>
    rhport = 0;
 80096a8:	2300      	movs	r3, #0
 80096aa:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80096ac:	7afb      	ldrb	r3, [r7, #11]
 80096ae:	4a09      	ldr	r2, [pc, #36]	@ (80096d4 <dcd_disconnect+0x40>)
 80096b0:	011b      	lsls	r3, r3, #4
 80096b2:	4413      	add	r3, r2
 80096b4:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80096b6:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80096be:	f043 0202 	orr.w	r2, r3, #2
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 80096c8:	bf00      	nop
 80096ca:	3714      	adds	r7, #20
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	0800c2d8 	.word	0x0800c2d8

080096d8 <dcd_sof_enable>:

// Be advised: audio, video and possibly other iso-ep classes use dcd_sof_enable() to enable/disable its corresponding ISR on purpose!
void dcd_sof_enable(uint8_t rhport, bool en) {
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	4603      	mov	r3, r0
 80096e0:	460a      	mov	r2, r1
 80096e2:	71fb      	strb	r3, [r7, #7]
 80096e4:	4613      	mov	r3, r2
 80096e6:	71bb      	strb	r3, [r7, #6]
 80096e8:	79fb      	ldrb	r3, [r7, #7]
 80096ea:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80096ec:	7afb      	ldrb	r3, [r7, #11]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d001      	beq.n	80096f6 <dcd_sof_enable+0x1e>
    rhport = 0;
 80096f2:	2300      	movs	r3, #0
 80096f4:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80096f6:	7afb      	ldrb	r3, [r7, #11]
 80096f8:	4a10      	ldr	r2, [pc, #64]	@ (800973c <dcd_sof_enable+0x64>)
 80096fa:	011b      	lsls	r3, r3, #4
 80096fc:	4413      	add	r3, r2
 80096fe:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009700:	60fb      	str	r3, [r7, #12]

  _dcd_data.sof_en = en;
 8009702:	4a0f      	ldr	r2, [pc, #60]	@ (8009740 <dcd_sof_enable+0x68>)
 8009704:	79bb      	ldrb	r3, [r7, #6]
 8009706:	71d3      	strb	r3, [r2, #7]

  if (en) {
 8009708:	79bb      	ldrb	r3, [r7, #6]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d009      	beq.n	8009722 <dcd_sof_enable+0x4a>
    dwc2->gintsts = GINTSTS_SOF;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2208      	movs	r2, #8
 8009712:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	f043 0208 	orr.w	r2, r3, #8
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	619a      	str	r2, [r3, #24]
  } else {
    dwc2->gintmsk &= ~GINTMSK_SOFM;
  }
}
 8009720:	e005      	b.n	800972e <dcd_sof_enable+0x56>
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	699b      	ldr	r3, [r3, #24]
 8009726:	f023 0208 	bic.w	r2, r3, #8
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	619a      	str	r2, [r3, #24]
}
 800972e:	bf00      	nop
 8009730:	3714      	adds	r7, #20
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	0800c2d8 	.word	0x0800c2d8
 8009740:	20001240 	.word	0x20001240

08009744 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	4603      	mov	r3, r0
 800974c:	6039      	str	r1, [r7, #0]
 800974e:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	7899      	ldrb	r1, [r3, #2]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	889b      	ldrh	r3, [r3, #4]
 800975c:	b29b      	uxth	r3, r3
 800975e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009762:	b29a      	uxth	r2, r3
 8009764:	79fb      	ldrb	r3, [r7, #7]
 8009766:	4618      	mov	r0, r3
 8009768:	f7ff fa76 	bl	8008c58 <dfifo_alloc>
 800976c:	4603      	mov	r3, r0
 800976e:	f083 0301 	eor.w	r3, r3, #1
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00a      	beq.n	800978e <dcd_edpt_open+0x4a>
 8009778:	4b0a      	ldr	r3, [pc, #40]	@ (80097a4 <dcd_edpt_open+0x60>)
 800977a:	60fb      	str	r3, [r7, #12]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	2b00      	cmp	r3, #0
 8009786:	d000      	beq.n	800978a <dcd_edpt_open+0x46>
 8009788:	be00      	bkpt	0x0000
 800978a:	2300      	movs	r3, #0
 800978c:	e005      	b.n	800979a <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 800978e:	79fb      	ldrb	r3, [r7, #7]
 8009790:	6839      	ldr	r1, [r7, #0]
 8009792:	4618      	mov	r0, r3
 8009794:	f7ff fb9c 	bl	8008ed0 <edpt_activate>
  return true;
 8009798:	2301      	movs	r3, #1
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	e000edf0 	.word	0xe000edf0

080097a8 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b08a      	sub	sp, #40	@ 0x28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	4603      	mov	r3, r0
 80097b0:	71fb      	strb	r3, [r7, #7]
 80097b2:	79fb      	ldrb	r3, [r7, #7]
 80097b4:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d001      	beq.n	80097c0 <dcd_edpt_close_all+0x18>
    rhport = 0;
 80097bc:	2300      	movs	r3, #0
 80097be:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80097c0:	7dfb      	ldrb	r3, [r7, #23]
 80097c2:	4a3f      	ldr	r2, [pc, #252]	@ (80098c0 <dcd_edpt_close_all+0x118>)
 80097c4:	011b      	lsls	r3, r3, #4
 80097c6:	4413      	add	r3, r2
 80097c8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80097ca:	623b      	str	r3, [r7, #32]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 80097cc:	79fb      	ldrb	r3, [r7, #7]
 80097ce:	4a3c      	ldr	r2, [pc, #240]	@ (80098c0 <dcd_edpt_close_all+0x118>)
 80097d0:	011b      	lsls	r3, r3, #4
 80097d2:	4413      	add	r3, r2
 80097d4:	3308      	adds	r3, #8
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	77fb      	strb	r3, [r7, #31]

  usbd_spin_lock(false);
 80097da:	2000      	movs	r0, #0
 80097dc:	f7fe fd4a 	bl	8008274 <usbd_spin_lock>

  _dcd_data.allocated_epin_count = 0;
 80097e0:	4b38      	ldr	r3, [pc, #224]	@ (80098c4 <dcd_edpt_close_all+0x11c>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	719a      	strb	r2, [r3, #6]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80097ec:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 80097f0:	2301      	movs	r3, #1
 80097f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80097f6:	e034      	b.n	8009862 <dcd_edpt_close_all+0xba>
    for (uint8_t d = 0; d < 2; d++) {
 80097f8:	2300      	movs	r3, #0
 80097fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80097fe:	e027      	b.n	8009850 <dcd_edpt_close_all+0xa8>
      dwc2_dep_t* dep = &dwc2->ep[d][n];
 8009800:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009804:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009808:	0112      	lsls	r2, r2, #4
 800980a:	4413      	add	r3, r2
 800980c:	3348      	adds	r3, #72	@ 0x48
 800980e:	015b      	lsls	r3, r3, #5
 8009810:	6a3a      	ldr	r2, [r7, #32]
 8009812:	4413      	add	r3, r2
 8009814:	61bb      	str	r3, [r7, #24]
      if (dep->ctl & EPCTL_EPENA) {
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	da05      	bge.n	800982a <dcd_edpt_close_all+0x82>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f043 4290 	orr.w	r2, r3, #1207959552	@ 0x48000000
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	601a      	str	r2, [r3, #0]
      }
      xfer_status[n][1-d].max_size = 0;
 800982a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800982e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009832:	f1c3 0301 	rsb	r3, r3, #1
 8009836:	4924      	ldr	r1, [pc, #144]	@ (80098c8 <dcd_edpt_close_all+0x120>)
 8009838:	0052      	lsls	r2, r2, #1
 800983a:	4413      	add	r3, r2
 800983c:	011b      	lsls	r3, r3, #4
 800983e:	440b      	add	r3, r1
 8009840:	330a      	adds	r3, #10
 8009842:	2200      	movs	r2, #0
 8009844:	801a      	strh	r2, [r3, #0]
    for (uint8_t d = 0; d < 2; d++) {
 8009846:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800984a:	3301      	adds	r3, #1
 800984c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009850:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009854:	2b01      	cmp	r3, #1
 8009856:	d9d3      	bls.n	8009800 <dcd_edpt_close_all+0x58>
  for (uint8_t n = 1; n < ep_count; n++) {
 8009858:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800985c:	3301      	adds	r3, #1
 800985e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009862:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009866:	7ffb      	ldrb	r3, [r7, #31]
 8009868:	429a      	cmp	r2, r3
 800986a:	d3c5      	bcc.n	80097f8 <dcd_edpt_close_all+0x50>
 800986c:	6a3b      	ldr	r3, [r7, #32]
 800986e:	60fb      	str	r3, [r7, #12]
 8009870:	2310      	movs	r3, #16
 8009872:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8009874:	7afb      	ldrb	r3, [r7, #11]
 8009876:	019b      	lsls	r3, r3, #6
 8009878:	f043 0220 	orr.w	r2, r3, #32
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8009880:	bf00      	nop
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	f003 0320 	and.w	r3, r3, #32
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1f9      	bne.n	8009882 <dcd_edpt_close_all+0xda>
}
 800988e:	bf00      	nop
 8009890:	6a3b      	ldr	r3, [r7, #32]
 8009892:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	2210      	movs	r2, #16
 8009898:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800989a:	bf00      	nop
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	f003 0310 	and.w	r3, r3, #16
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1f9      	bne.n	800989c <dcd_edpt_close_all+0xf4>
}
 80098a8:	bf00      	nop
    }
  }

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport); // re-init dfifo
 80098aa:	79fb      	ldrb	r3, [r7, #7]
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7ff fab5 	bl	8008e1c <dfifo_device_init>

  usbd_spin_unlock(false);
 80098b2:	2000      	movs	r0, #0
 80098b4:	f7fe fcf8 	bl	80082a8 <usbd_spin_unlock>
}
 80098b8:	bf00      	nop
 80098ba:	3728      	adds	r7, #40	@ 0x28
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	0800c2d8 	.word	0x0800c2d8
 80098c4:	20001240 	.word	0x20001240
 80098c8:	200011c0 	.word	0x200011c0

080098cc <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	603a      	str	r2, [r7, #0]
 80098d4:	461a      	mov	r2, r3
 80098d6:	4603      	mov	r3, r0
 80098d8:	71fb      	strb	r3, [r7, #7]
 80098da:	460b      	mov	r3, r1
 80098dc:	71bb      	strb	r3, [r7, #6]
 80098de:	4613      	mov	r3, r2
 80098e0:	80bb      	strh	r3, [r7, #4]
 80098e2:	79bb      	ldrb	r3, [r7, #6]
 80098e4:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80098e6:	7bbb      	ldrb	r3, [r7, #14]
 80098e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098ec:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 80098ee:	75bb      	strb	r3, [r7, #22]
 80098f0:	79bb      	ldrb	r3, [r7, #6]
 80098f2:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80098f4:	7bfb      	ldrb	r3, [r7, #15]
 80098f6:	09db      	lsrs	r3, r3, #7
 80098f8:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80098fa:	757b      	strb	r3, [r7, #21]
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 80098fc:	7dba      	ldrb	r2, [r7, #22]
 80098fe:	7d7b      	ldrb	r3, [r7, #21]
 8009900:	0052      	lsls	r2, r2, #1
 8009902:	4413      	add	r3, r2
 8009904:	011b      	lsls	r3, r3, #4
 8009906:	4a17      	ldr	r2, [pc, #92]	@ (8009964 <dcd_edpt_xfer+0x98>)
 8009908:	4413      	add	r3, r2
 800990a:	613b      	str	r3, [r7, #16]
  bool ret;

  usbd_spin_lock(false);
 800990c:	2000      	movs	r0, #0
 800990e:	f7fe fcb1 	bl	8008274 <usbd_spin_lock>

  if (xfer->max_size == 0) {
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	895b      	ldrh	r3, [r3, #10]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d102      	bne.n	8009920 <dcd_edpt_xfer+0x54>
    ret = false;  // Endpoint is closed
 800991a:	2300      	movs	r3, #0
 800991c:	75fb      	strb	r3, [r7, #23]
 800991e:	e018      	b.n	8009952 <dcd_edpt_xfer+0x86>
  } else {
    xfer->buffer = buffer;
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	683a      	ldr	r2, [r7, #0]
 8009924:	601a      	str	r2, [r3, #0]
    xfer->ff = NULL;
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	2200      	movs	r2, #0
 800992a:	605a      	str	r2, [r3, #4]
    xfer->total_len = total_bytes;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	88ba      	ldrh	r2, [r7, #4]
 8009930:	811a      	strh	r2, [r3, #8]

    // EP0 can only handle one packet
    if (epnum == 0) {
 8009932:	7dbb      	ldrb	r3, [r7, #22]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d104      	bne.n	8009942 <dcd_edpt_xfer+0x76>
      _dcd_data.ep0_pending[dir] = total_bytes;
 8009938:	7d7b      	ldrb	r3, [r7, #21]
 800993a:	490b      	ldr	r1, [pc, #44]	@ (8009968 <dcd_edpt_xfer+0x9c>)
 800993c:	88ba      	ldrh	r2, [r7, #4]
 800993e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir);
 8009942:	7d7a      	ldrb	r2, [r7, #21]
 8009944:	7db9      	ldrb	r1, [r7, #22]
 8009946:	79fb      	ldrb	r3, [r7, #7]
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff fc2b 	bl	80091a4 <edpt_schedule_packets>
    ret = true;
 800994e:	2301      	movs	r3, #1
 8009950:	75fb      	strb	r3, [r7, #23]
  }

  usbd_spin_unlock(false);
 8009952:	2000      	movs	r0, #0
 8009954:	f7fe fca8 	bl	80082a8 <usbd_spin_unlock>

  return ret;
 8009958:	7dfb      	ldrb	r3, [r7, #23]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3718      	adds	r7, #24
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	200011c0 	.word	0x200011c0
 8009968:	20001240 	.word	0x20001240

0800996c <dcd_edpt_stall>:
  usbd_spin_unlock(false);

  return ret;
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af00      	add	r7, sp, #0
 8009972:	4603      	mov	r3, r0
 8009974:	460a      	mov	r2, r1
 8009976:	71fb      	strb	r3, [r7, #7]
 8009978:	4613      	mov	r3, r2
 800997a:	71bb      	strb	r3, [r7, #6]
 800997c:	79fb      	ldrb	r3, [r7, #7]
 800997e:	74bb      	strb	r3, [r7, #18]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009980:	7cbb      	ldrb	r3, [r7, #18]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d001      	beq.n	800998a <dcd_edpt_stall+0x1e>
    rhport = 0;
 8009986:	2300      	movs	r3, #0
 8009988:	74bb      	strb	r3, [r7, #18]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800998a:	7cbb      	ldrb	r3, [r7, #18]
 800998c:	4a11      	ldr	r2, [pc, #68]	@ (80099d4 <dcd_edpt_stall+0x68>)
 800998e:	011b      	lsls	r3, r3, #4
 8009990:	4413      	add	r3, r2
 8009992:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009994:	617b      	str	r3, [r7, #20]
  edpt_disable(rhport, ep_addr, true);
 8009996:	79b9      	ldrb	r1, [r7, #6]
 8009998:	79fb      	ldrb	r3, [r7, #7]
 800999a:	2201      	movs	r2, #1
 800999c:	4618      	mov	r0, r3
 800999e:	f7ff fb35 	bl	800900c <edpt_disable>
 80099a2:	79bb      	ldrb	r3, [r7, #6]
 80099a4:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80099a6:	7cfb      	ldrb	r3, [r7, #19]
 80099a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099ac:	b2db      	uxtb	r3, r3
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10b      	bne.n	80099ca <dcd_edpt_stall+0x5e>
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	60fb      	str	r3, [r7, #12]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099ba:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 80099bc:	2300      	movs	r3, #0
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d003      	beq.n	80099ca <dcd_edpt_stall+0x5e>
    dma_setup_prepare(rhport);
 80099c2:	79fb      	ldrb	r3, [r7, #7]
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7ff f90b 	bl	8008be0 <dma_setup_prepare>
  }
}
 80099ca:	bf00      	nop
 80099cc:	3718      	adds	r7, #24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	0800c2d8 	.word	0x0800c2d8

080099d8 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 80099d8:	b480      	push	{r7}
 80099da:	b087      	sub	sp, #28
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	460a      	mov	r2, r1
 80099e2:	71fb      	strb	r3, [r7, #7]
 80099e4:	4613      	mov	r3, r2
 80099e6:	71bb      	strb	r3, [r7, #6]
 80099e8:	79fb      	ldrb	r3, [r7, #7]
 80099ea:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80099ec:	7a7b      	ldrb	r3, [r7, #9]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d001      	beq.n	80099f6 <dcd_edpt_clear_stall+0x1e>
    rhport = 0;
 80099f2:	2300      	movs	r3, #0
 80099f4:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80099f6:	7a7b      	ldrb	r3, [r7, #9]
 80099f8:	4a19      	ldr	r2, [pc, #100]	@ (8009a60 <dcd_edpt_clear_stall+0x88>)
 80099fa:	011b      	lsls	r3, r3, #4
 80099fc:	4413      	add	r3, r2
 80099fe:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009a00:	617b      	str	r3, [r7, #20]
 8009a02:	79bb      	ldrb	r3, [r7, #6]
 8009a04:	72bb      	strb	r3, [r7, #10]
 8009a06:	7abb      	ldrb	r3, [r7, #10]
 8009a08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a0c:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009a0e:	74fb      	strb	r3, [r7, #19]
 8009a10:	79bb      	ldrb	r3, [r7, #6]
 8009a12:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009a14:	7afb      	ldrb	r3, [r7, #11]
 8009a16:	09db      	lsrs	r3, r3, #7
 8009a18:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009a1a:	74bb      	strb	r3, [r7, #18]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8009a1c:	7cbb      	ldrb	r3, [r7, #18]
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	bf14      	ite	ne
 8009a22:	2301      	movne	r3, #1
 8009a24:	2300      	moveq	r3, #0
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	461a      	mov	r2, r3
 8009a2a:	7cfb      	ldrb	r3, [r7, #19]
 8009a2c:	0112      	lsls	r2, r2, #4
 8009a2e:	4413      	add	r3, r2
 8009a30:	3348      	adds	r3, #72	@ 0x48
 8009a32:	015b      	lsls	r3, r3, #5
 8009a34:	697a      	ldr	r2, [r7, #20]
 8009a36:	4413      	add	r3, r2
 8009a38:	60fb      	str	r3, [r7, #12]

  // Clear stall and reset data toggle
  dep->ctl &= ~EPCTL_STALL;;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	601a      	str	r2, [r3, #0]
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	601a      	str	r2, [r3, #0]
}
 8009a52:	bf00      	nop
 8009a54:	371c      	adds	r7, #28
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	0800c2d8 	.word	0x0800c2d8

08009a64 <handle_bus_reset>:
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
// Must be called from critical section
static void handle_bus_reset(uint8_t rhport) {
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b08e      	sub	sp, #56	@ 0x38
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	71fb      	strb	r3, [r7, #7]
 8009a6e:	79fb      	ldrb	r3, [r7, #7]
 8009a70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009a74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d002      	beq.n	8009a82 <handle_bus_reset+0x1e>
    rhport = 0;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009a82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a86:	4a6a      	ldr	r2, [pc, #424]	@ (8009c30 <handle_bus_reset+0x1cc>)
 8009a88:	011b      	lsls	r3, r3, #4
 8009a8a:	4413      	add	r3, r2
 8009a8c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8009a8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a98:	60bb      	str	r3, [r7, #8]
  return ghwcfg2.num_dev_ep + 1;
 8009a9a:	7a7b      	ldrb	r3, [r7, #9]
 8009a9c:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	b2db      	uxtb	r3, r3
  const uint8_t ep_count =  dwc2_ep_count(dwc2);
 8009aa6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  tu_memclr(xfer_status, sizeof(xfer_status));
 8009aaa:	2280      	movs	r2, #128	@ 0x80
 8009aac:	2100      	movs	r1, #0
 8009aae:	4861      	ldr	r0, [pc, #388]	@ (8009c34 <handle_bus_reset+0x1d0>)
 8009ab0:	f001 fb2c 	bl	800b10c <memset>

  _dcd_data.sof_en = false;
 8009ab4:	4b60      	ldr	r3, [pc, #384]	@ (8009c38 <handle_bus_reset+0x1d4>)
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 8009aba:	4b5f      	ldr	r3, [pc, #380]	@ (8009c38 <handle_bus_reset+0x1d4>)
 8009abc:	2200      	movs	r2, #0
 8009abe:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009ac6:	e014      	b.n	8009af2 <handle_bus_reset+0x8e>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8009ac8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ace:	3358      	adds	r3, #88	@ 0x58
 8009ad0:	015b      	lsls	r3, r3, #5
 8009ad2:	4413      	add	r3, r2
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009ada:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8009ade:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009ae0:	3358      	adds	r3, #88	@ 0x58
 8009ae2:	015b      	lsls	r3, r3, #5
 8009ae4:	440b      	add	r3, r1
 8009ae6:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 8009ae8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009aec:	3301      	adds	r3, #1
 8009aee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009af2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8009af6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d3e4      	bcc.n	8009ac8 <handle_bus_reset+0x64>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 8009afe:	2300      	movs	r3, #0
 8009b00:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8009b04:	e01d      	b.n	8009b42 <handle_bus_reset+0xde>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 8009b06:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b0c:	3348      	adds	r3, #72	@ 0x48
 8009b0e:	015b      	lsls	r3, r3, #5
 8009b10:	4413      	add	r3, r2
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	da0f      	bge.n	8009b38 <handle_bus_reset+0xd4>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 8009b18:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009b1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b1e:	3348      	adds	r3, #72	@ 0x48
 8009b20:	015b      	lsls	r3, r3, #5
 8009b22:	4413      	add	r3, r2
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009b2a:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 8009b2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b30:	3348      	adds	r3, #72	@ 0x48
 8009b32:	015b      	lsls	r3, r3, #5
 8009b34:	440b      	add	r3, r1
 8009b36:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 8009b38:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8009b42:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8009b46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d3db      	bcc.n	8009b06 <handle_bus_reset+0xa2>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 8009b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b50:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8009b54:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8009b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5a:	2209      	movs	r2, #9
 8009b5c:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 8009b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b62:	2209      	movs	r2, #9
 8009b64:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 8009b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b6a:	61bb      	str	r3, [r7, #24]
 8009b6c:	2310      	movs	r3, #16
 8009b6e:	75fb      	strb	r3, [r7, #23]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8009b70:	7dfb      	ldrb	r3, [r7, #23]
 8009b72:	019b      	lsls	r3, r3, #6
 8009b74:	f043 0220 	orr.w	r2, r3, #32
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8009b7c:	bf00      	nop
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	f003 0320 	and.w	r3, r3, #32
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1f9      	bne.n	8009b7e <handle_bus_reset+0x11a>
}
 8009b8a:	bf00      	nop
 8009b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8e:	61fb      	str	r3, [r7, #28]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	2210      	movs	r2, #16
 8009b94:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8009b96:	bf00      	nop
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	f003 0310 	and.w	r3, r3, #16
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d1f9      	bne.n	8009b98 <handle_bus_reset+0x134>
}
 8009ba4:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 8009ba6:	79fb      	ldrb	r3, [r7, #7]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7ff f937 	bl	8008e1c <dfifo_device_init>

  // 5. Reset device address
  dwc2_dcfg_t dcfg = {.value = dwc2->dcfg};
 8009bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8009bb4:	613b      	str	r3, [r7, #16]
  dcfg.address = 0;
 8009bb6:	8a3b      	ldrh	r3, [r7, #16]
 8009bb8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009bbc:	823b      	strh	r3, [r7, #16]
  dwc2->dcfg = dcfg.value;
 8009bbe:	693a      	ldr	r2, [r7, #16]
 8009bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc2:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8009bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc8:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8009bcc:	f023 0203 	bic.w	r2, r3, #3
 8009bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd2:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd8:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8009bdc:	f023 0203 	bic.w	r2, r3, #3
 8009be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be2:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8009be6:	4b13      	ldr	r3, [pc, #76]	@ (8009c34 <handle_bus_reset+0x1d0>)
 8009be8:	2240      	movs	r2, #64	@ 0x40
 8009bea:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8009bec:	4b11      	ldr	r3, [pc, #68]	@ (8009c34 <handle_bus_reset+0x1d0>)
 8009bee:	2240      	movs	r2, #64	@ 0x40
 8009bf0:	835a      	strh	r2, [r3, #26]
 8009bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf4:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009bfa:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8009bfc:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d004      	beq.n	8009c0c <handle_bus_reset+0x1a8>
    dma_setup_prepare(rhport);
 8009c02:	79fb      	ldrb	r3, [r7, #7]
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7fe ffeb 	bl	8008be0 <dma_setup_prepare>
 8009c0a:	e007      	b.n	8009c1c <handle_bus_reset+0x1b8>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8009c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0e:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 8009c12:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 8009c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c18:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 8009c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 8009c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c26:	619a      	str	r2, [r3, #24]
}
 8009c28:	bf00      	nop
 8009c2a:	3738      	adds	r7, #56	@ 0x38
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	0800c2d8 	.word	0x0800c2d8
 8009c34:	200011c0 	.word	0x200011c0
 8009c38:	20001240 	.word	0x20001240

08009c3c <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b08a      	sub	sp, #40	@ 0x28
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	4603      	mov	r3, r0
 8009c44:	71fb      	strb	r3, [r7, #7]
 8009c46:	79fb      	ldrb	r3, [r7, #7]
 8009c48:	77fb      	strb	r3, [r7, #31]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009c4a:	7ffb      	ldrb	r3, [r7, #31]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d001      	beq.n	8009c54 <handle_enum_done+0x18>
    rhport = 0;
 8009c50:	2300      	movs	r3, #0
 8009c52:	77fb      	strb	r3, [r7, #31]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009c54:	7ffb      	ldrb	r3, [r7, #31]
 8009c56:	4a1b      	ldr	r2, [pc, #108]	@ (8009cc4 <handle_enum_done+0x88>)
 8009c58:	011b      	lsls	r3, r3, #4
 8009c5a:	4413      	add	r3, r2
 8009c5c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8009c5e:	623b      	str	r3, [r7, #32]
  const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 8009c60:	6a3b      	ldr	r3, [r7, #32]
 8009c62:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8009c66:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dsts.enum_speed) {
 8009c68:	7e3b      	ldrb	r3, [r7, #24]
 8009c6a:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d002      	beq.n	8009c7a <handle_enum_done+0x3e>
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d004      	beq.n	8009c82 <handle_enum_done+0x46>
 8009c78:	e007      	b.n	8009c8a <handle_enum_done+0x4e>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 8009c7a:	2302      	movs	r3, #2
 8009c7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8009c80:	e007      	b.n	8009c92 <handle_enum_done+0x56>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 8009c82:	2301      	movs	r3, #1
 8009c84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8009c88:	e003      	b.n	8009c92 <handle_enum_done+0x56>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8009c90:	bf00      	nop
 8009c92:	79fb      	ldrb	r3, [r7, #7]
 8009c94:	77bb      	strb	r3, [r7, #30]
 8009c96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c9a:	777b      	strb	r3, [r7, #29]
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	773b      	strb	r3, [r7, #28]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8009ca0:	7fbb      	ldrb	r3, [r7, #30]
 8009ca2:	733b      	strb	r3, [r7, #12]
  event.event_id = DCD_EVENT_BUS_RESET;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	737b      	strb	r3, [r7, #13]
  event.bus_reset.speed = speed;
 8009ca8:	7f7b      	ldrb	r3, [r7, #29]
 8009caa:	743b      	strb	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 8009cac:	7f3a      	ldrb	r2, [r7, #28]
 8009cae:	f107 030c 	add.w	r3, r7, #12
 8009cb2:	4611      	mov	r1, r2
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7fe f8df 	bl	8007e78 <dcd_event_handler>
}
 8009cba:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 8009cbc:	bf00      	nop
 8009cbe:	3728      	adds	r7, #40	@ 0x28
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	0800c2d8 	.word	0x0800c2d8

08009cc8 <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b08c      	sub	sp, #48	@ 0x30
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	4603      	mov	r3, r0
 8009cd0:	71fb      	strb	r3, [r7, #7]
 8009cd2:	79fb      	ldrb	r3, [r7, #7]
 8009cd4:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009cd6:	7cfb      	ldrb	r3, [r7, #19]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d001      	beq.n	8009ce0 <handle_rxflvl_irq+0x18>
    rhport = 0;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009ce0:	7cfb      	ldrb	r3, [r7, #19]
 8009ce2:	4a49      	ldr	r2, [pc, #292]	@ (8009e08 <handle_rxflvl_irq+0x140>)
 8009ce4:	011b      	lsls	r3, r3, #4
 8009ce6:	4413      	add	r3, r2
 8009ce8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 8009cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009cf2:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp = {.value = dwc2->grxstsp};
 8009cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf6:	6a1b      	ldr	r3, [r3, #32]
 8009cf8:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp.ep_ch_num;
 8009cfa:	7b3b      	ldrb	r3, [r7, #12]
 8009cfc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 8009d06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d0a:	3358      	adds	r3, #88	@ 0x58
 8009d0c:	015b      	lsls	r3, r3, #5
 8009d0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d10:	4413      	add	r3, r2
 8009d12:	623b      	str	r3, [r7, #32]

  switch (grxstsp.packet_status) {
 8009d14:	7bbb      	ldrb	r3, [r7, #14]
 8009d16:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	2b05      	cmp	r3, #5
 8009d20:	d86a      	bhi.n	8009df8 <handle_rxflvl_irq+0x130>
 8009d22:	a201      	add	r2, pc, #4	@ (adr r2, 8009d28 <handle_rxflvl_irq+0x60>)
 8009d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d28:	08009df9 	.word	0x08009df9
 8009d2c:	08009d67 	.word	0x08009d67
 8009d30:	08009df9 	.word	0x08009df9
 8009d34:	08009d59 	.word	0x08009d59
 8009d38:	08009df9 	.word	0x08009df9
 8009d3c:	08009d41 	.word	0x08009d41
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 8009d40:	4b32      	ldr	r3, [pc, #200]	@ (8009e0c <handle_rxflvl_irq+0x144>)
 8009d42:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 8009d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	3304      	adds	r3, #4
 8009d50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d52:	6812      	ldr	r2, [r2, #0]
 8009d54:	601a      	str	r2, [r3, #0]
      break;
 8009d56:	e052      	b.n	8009dfe <handle_rxflvl_irq+0x136>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8009d58:	6a3b      	ldr	r3, [r7, #32]
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 8009d60:	6a3b      	ldr	r3, [r7, #32]
 8009d62:	611a      	str	r2, [r3, #16]
      break;
 8009d64:	e04b      	b.n	8009dfe <handle_rxflvl_irq+0x136>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp.byte_count;
 8009d66:	89bb      	ldrh	r3, [r7, #12]
 8009d68:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8009d70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d74:	015b      	lsls	r3, r3, #5
 8009d76:	4a26      	ldr	r2, [pc, #152]	@ (8009e10 <handle_rxflvl_irq+0x148>)
 8009d78:	4413      	add	r3, r2
 8009d7a:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 8009d7c:	8b7b      	ldrh	r3, [r7, #26]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d03c      	beq.n	8009dfc <handle_rxflvl_irq+0x134>
        // Read packet off RxFIFO
        if (xfer->ff) {
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d007      	beq.n	8009d9a <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	8b7a      	ldrh	r2, [r7, #26]
 8009d90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fc ffc1 	bl	8006d1a <tu_fifo_write_n_const_addr_full_words>
 8009d98:	e00c      	b.n	8009db4 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	8b7a      	ldrh	r2, [r7, #26]
 8009da0:	4619      	mov	r1, r3
 8009da2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009da4:	f000 fd70 	bl	800a888 <dfifo_read_packet>
          xfer->buffer += byte_count;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	8b7b      	ldrh	r3, [r7, #26]
 8009dae:	441a      	add	r2, r3
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	895b      	ldrh	r3, [r3, #10]
 8009db8:	8b7a      	ldrh	r2, [r7, #26]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d21e      	bcs.n	8009dfc <handle_rxflvl_irq+0x134>
          const dwc2_ep_tsize_t tsiz = {.value = epout->tsiz};
 8009dbe:	6a3b      	ldr	r3, [r7, #32]
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	60bb      	str	r3, [r7, #8]
          xfer->total_len -= tsiz.xfer_size;
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	891a      	ldrh	r2, [r3, #8]
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 8009dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d10d      	bne.n	8009dfc <handle_rxflvl_irq+0x134>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	891a      	ldrh	r2, [r3, #8]
 8009de4:	4b0b      	ldr	r3, [pc, #44]	@ (8009e14 <handle_rxflvl_irq+0x14c>)
 8009de6:	881b      	ldrh	r3, [r3, #0]
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 8009df0:	4b08      	ldr	r3, [pc, #32]	@ (8009e14 <handle_rxflvl_irq+0x14c>)
 8009df2:	2200      	movs	r2, #0
 8009df4:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 8009df6:	e001      	b.n	8009dfc <handle_rxflvl_irq+0x134>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 8009df8:	bf00      	nop
 8009dfa:	e000      	b.n	8009dfe <handle_rxflvl_irq+0x136>
      break;
 8009dfc:	bf00      	nop
  }
}
 8009dfe:	bf00      	nop
 8009e00:	3730      	adds	r7, #48	@ 0x30
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	0800c2d8 	.word	0x0800c2d8
 8009e0c:	20001248 	.word	0x20001248
 8009e10:	200011c0 	.word	0x200011c0
 8009e14:	20001240 	.word	0x20001240

08009e18 <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b08e      	sub	sp, #56	@ 0x38
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	4603      	mov	r3, r0
 8009e20:	603a      	str	r2, [r7, #0]
 8009e22:	71fb      	strb	r3, [r7, #7]
 8009e24:	460b      	mov	r3, r1
 8009e26:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 8009e28:	783b      	ldrb	r3, [r7, #0]
 8009e2a:	f003 0308 	and.w	r3, r3, #8
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d01c      	beq.n	8009e6e <handle_epout_slave+0x56>
 8009e34:	79fb      	ldrb	r3, [r7, #7]
 8009e36:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8009e3a:	4b34      	ldr	r3, [pc, #208]	@ (8009f0c <handle_epout_slave+0xf4>)
 8009e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e3e:	2301      	movs	r3, #1
 8009e40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8009e44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009e48:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 8009e4a:	2306      	movs	r3, #6
 8009e4c:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8009e4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e50:	f107 0318 	add.w	r3, r7, #24
 8009e54:	6810      	ldr	r0, [r2, #0]
 8009e56:	6851      	ldr	r1, [r2, #4]
 8009e58:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 8009e5a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8009e5e:	f107 0314 	add.w	r3, r7, #20
 8009e62:	4611      	mov	r1, r2
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7fe f807 	bl	8007e78 <dcd_event_handler>
}
 8009e6a:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 8009e6c:	e04a      	b.n	8009f04 <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 8009e6e:	783b      	ldrb	r3, [r7, #0]
 8009e70:	f003 0301 	and.w	r3, r3, #1
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d044      	beq.n	8009f04 <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 8009e7a:	783b      	ldrb	r3, [r7, #0]
 8009e7c:	f003 0320 	and.w	r3, r3, #32
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d13e      	bne.n	8009f04 <handle_epout_slave+0xec>
 8009e86:	787b      	ldrb	r3, [r7, #1]
 8009e88:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d138      	bne.n	8009f04 <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8009e92:	79bb      	ldrb	r3, [r7, #6]
 8009e94:	015b      	lsls	r3, r3, #5
 8009e96:	4a1e      	ldr	r2, [pc, #120]	@ (8009f10 <handle_epout_slave+0xf8>)
 8009e98:	4413      	add	r3, r2
 8009e9a:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 8009e9c:	79bb      	ldrb	r3, [r7, #6]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d10a      	bne.n	8009eb8 <handle_epout_slave+0xa0>
 8009ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8009f14 <handle_epout_slave+0xfc>)
 8009ea4:	881b      	ldrh	r3, [r3, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d006      	beq.n	8009eb8 <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 8009eaa:	79b9      	ldrb	r1, [r7, #6]
 8009eac:	79fb      	ldrb	r3, [r7, #7]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7ff f977 	bl	80091a4 <edpt_schedule_packets>
 8009eb6:	e025      	b.n	8009f04 <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8009eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eba:	891b      	ldrh	r3, [r3, #8]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	79fb      	ldrb	r3, [r7, #7]
 8009ec0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009ec4:	79bb      	ldrb	r3, [r7, #6]
 8009ec6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8009eca:	627a      	str	r2, [r7, #36]	@ 0x24
 8009ecc:	2300      	movs	r3, #0
 8009ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8009ed8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009edc:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8009ede:	2307      	movs	r3, #7
 8009ee0:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 8009ee2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009ee6:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eea:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8009eec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009ef0:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 8009ef2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8009ef6:	f107 0308 	add.w	r3, r7, #8
 8009efa:	4611      	mov	r1, r2
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7fd ffbb 	bl	8007e78 <dcd_event_handler>
}
 8009f02:	bf00      	nop
      }
    }
  }
}
 8009f04:	3738      	adds	r7, #56	@ 0x38
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	20001248 	.word	0x20001248
 8009f10:	200011c0 	.word	0x200011c0
 8009f14:	20001240 	.word	0x20001240

08009f18 <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b092      	sub	sp, #72	@ 0x48
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	4603      	mov	r3, r0
 8009f20:	603a      	str	r2, [r7, #0]
 8009f22:	71fb      	strb	r3, [r7, #7]
 8009f24:	460b      	mov	r3, r1
 8009f26:	71bb      	strb	r3, [r7, #6]
 8009f28:	79fb      	ldrb	r3, [r7, #7]
 8009f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009f2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d002      	beq.n	8009f3c <handle_epin_slave+0x24>
    rhport = 0;
 8009f36:	2300      	movs	r3, #0
 8009f38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009f3c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009f40:	4a64      	ldr	r2, [pc, #400]	@ (800a0d4 <handle_epin_slave+0x1bc>)
 8009f42:	011b      	lsls	r3, r3, #4
 8009f44:	4413      	add	r3, r2
 8009f46:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009f48:	643b      	str	r3, [r7, #64]	@ 0x40
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 8009f4a:	79bb      	ldrb	r3, [r7, #6]
 8009f4c:	3348      	adds	r3, #72	@ 0x48
 8009f4e:	015b      	lsls	r3, r3, #5
 8009f50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f52:	4413      	add	r3, r2
 8009f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 8009f56:	79bb      	ldrb	r3, [r7, #6]
 8009f58:	015b      	lsls	r3, r3, #5
 8009f5a:	3310      	adds	r3, #16
 8009f5c:	4a5e      	ldr	r2, [pc, #376]	@ (800a0d8 <handle_epin_slave+0x1c0>)
 8009f5e:	4413      	add	r3, r2
 8009f60:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (diepint_bm.xfer_complete) {
 8009f62:	783b      	ldrb	r3, [r7, #0]
 8009f64:	f003 0301 	and.w	r3, r3, #1
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d037      	beq.n	8009fde <handle_epin_slave+0xc6>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 8009f6e:	79bb      	ldrb	r3, [r7, #6]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10a      	bne.n	8009f8a <handle_epin_slave+0x72>
 8009f74:	4b59      	ldr	r3, [pc, #356]	@ (800a0dc <handle_epin_slave+0x1c4>)
 8009f76:	885b      	ldrh	r3, [r3, #2]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d006      	beq.n	8009f8a <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 8009f7c:	79b9      	ldrb	r1, [r7, #6]
 8009f7e:	79fb      	ldrb	r3, [r7, #7]
 8009f80:	2201      	movs	r2, #1
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7ff f90e 	bl	80091a4 <edpt_schedule_packets>
 8009f88:	e029      	b.n	8009fde <handle_epin_slave+0xc6>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8009f8a:	79bb      	ldrb	r3, [r7, #6]
 8009f8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009f90:	b2d9      	uxtb	r1, r3
 8009f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f94:	891b      	ldrh	r3, [r3, #8]
 8009f96:	461a      	mov	r2, r3
 8009f98:	79fb      	ldrb	r3, [r7, #7]
 8009f9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8009fa4:	627a      	str	r2, [r7, #36]	@ 0x24
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009fac:	2301      	movs	r3, #1
 8009fae:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  event.rhport = rhport;
 8009fb2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009fb6:	743b      	strb	r3, [r7, #16]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8009fb8:	2307      	movs	r3, #7
 8009fba:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 8009fbc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009fc0:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 8009fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc4:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 8009fc6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009fca:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8009fcc:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8009fd0:	f107 0310 	add.w	r3, r7, #16
 8009fd4:	4611      	mov	r1, r2
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fd ff4e 	bl	8007e78 <dcd_event_handler>
}
 8009fdc:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 8009fde:	783b      	ldrb	r3, [r7, #0]
 8009fe0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d070      	beq.n	800a0cc <handle_epin_slave+0x1b4>
 8009fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fec:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8009ff0:	79ba      	ldrb	r2, [r7, #6]
 8009ff2:	2101      	movs	r1, #1
 8009ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d066      	beq.n	800a0cc <handle_epin_slave+0x1b4>
    dwc2_ep_tsize_t tsiz = {.value = epin->tsiz};
 8009ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	60fb      	str	r3, [r7, #12]
    const uint16_t remain_packets = tsiz.packet_count;
 800a004:	89fb      	ldrh	r3, [r7, #14]
 800a006:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 800a00e:	2300      	movs	r3, #0
 800a010:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a014:	e03f      	b.n	800a096 <handle_epin_slave+0x17e>
      tsiz.value = epin->tsiz;
 800a016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	60fb      	str	r3, [r7, #12]
      const uint16_t remain_bytes = (uint16_t) tsiz.xfer_size;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a022:	86bb      	strh	r3, [r7, #52]	@ 0x34
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 800a024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a026:	895a      	ldrh	r2, [r3, #10]
 800a028:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a02a:	843b      	strh	r3, [r7, #32]
 800a02c:	4613      	mov	r3, r2
 800a02e:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a030:	8c3a      	ldrh	r2, [r7, #32]
 800a032:	8bfb      	ldrh	r3, [r7, #30]
 800a034:	4293      	cmp	r3, r2
 800a036:	bf28      	it	cs
 800a038:	4613      	movcs	r3, r2
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	867b      	strh	r3, [r7, #50]	@ 0x32

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 800a03e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800a040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	0099      	lsls	r1, r3, #2
 800a046:	4b26      	ldr	r3, [pc, #152]	@ (800a0e0 <handle_epin_slave+0x1c8>)
 800a048:	400b      	ands	r3, r1
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d829      	bhi.n	800a0a2 <handle_epin_slave+0x18a>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 800a04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00d      	beq.n	800a072 <handle_epin_slave+0x15a>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 800a056:	79bb      	ldrb	r3, [r7, #6]
 800a058:	3301      	adds	r3, #1
 800a05a:	031b      	lsls	r3, r3, #12
 800a05c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a05e:	4413      	add	r3, r2
 800a060:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 800a062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800a068:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fc fdee 	bl	8006c4c <tu_fifo_read_n_const_addr_full_words>
 800a070:	e00c      	b.n	800a08c <handle_epin_slave+0x174>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 800a072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a078:	79b9      	ldrb	r1, [r7, #6]
 800a07a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800a07c:	f000 fc55 	bl	800a92a <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 800a080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a086:	441a      	add	r2, r3
 800a088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08a:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 800a08c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a090:	3301      	adds	r3, #1
 800a092:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a096:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800a09a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d3ba      	bcc.n	800a016 <handle_epin_slave+0xfe>
 800a0a0:	e000      	b.n	800a0a4 <handle_epin_slave+0x18c>
        break;
 800a0a2:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    tsiz.value = epin->tsiz;
 800a0a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	60fb      	str	r3, [r7, #12]
    if (tsiz.xfer_size == 0) {
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10b      	bne.n	800a0cc <handle_epin_slave+0x1b4>
      dwc2->diepempmsk &= ~(1 << epnum);
 800a0b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0b6:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800a0ba:	79ba      	ldrb	r2, [r7, #6]
 800a0bc:	2101      	movs	r1, #1
 800a0be:	fa01 f202 	lsl.w	r2, r1, r2
 800a0c2:	43d2      	mvns	r2, r2
 800a0c4:	401a      	ands	r2, r3
 800a0c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0c8:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 800a0cc:	bf00      	nop
 800a0ce:	3748      	adds	r7, #72	@ 0x48
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	0800c2d8 	.word	0x0800c2d8
 800a0d8:	200011c0 	.word	0x200011c0
 800a0dc:	20001240 	.word	0x20001240
 800a0e0:	0003fffc 	.word	0x0003fffc

0800a0e4 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b08e      	sub	sp, #56	@ 0x38
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	460a      	mov	r2, r1
 800a0ee:	71fb      	strb	r3, [r7, #7]
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	71bb      	strb	r3, [r7, #6]
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
 800a0f6:	76fb      	strb	r3, [r7, #27]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a0f8:	7efb      	ldrb	r3, [r7, #27]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d001      	beq.n	800a102 <handle_ep_irq+0x1e>
    rhport = 0;
 800a0fe:	2300      	movs	r3, #0
 800a100:	76fb      	strb	r3, [r7, #27]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a102:	7efb      	ldrb	r3, [r7, #27]
 800a104:	4a38      	ldr	r2, [pc, #224]	@ (800a1e8 <handle_ep_irq+0x104>)
 800a106:	011b      	lsls	r3, r3, #4
 800a108:	4413      	add	r3, r2
 800a10a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a10c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a110:	61fb      	str	r3, [r7, #28]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a116:	617b      	str	r3, [r7, #20]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800a118:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800a11a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a120:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a122:	6a3b      	ldr	r3, [r7, #32]
 800a124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a126:	613b      	str	r3, [r7, #16]
  return ghwcfg2.num_dev_ep + 1;
 800a128:	7c7b      	ldrb	r3, [r7, #17]
 800a12a:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	3301      	adds	r3, #1
 800a132:	b2db      	uxtb	r3, r3
  const uint8_t ep_count = dwc2_ep_count(dwc2);
 800a134:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 800a138:	79bb      	ldrb	r3, [r7, #6]
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d101      	bne.n	800a142 <handle_ep_irq+0x5e>
 800a13e:	2300      	movs	r3, #0
 800a140:	e000      	b.n	800a144 <handle_ep_irq+0x60>
 800a142:	2310      	movs	r3, #16
 800a144:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 800a148:	79bb      	ldrb	r3, [r7, #6]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	bf14      	ite	ne
 800a14e:	2301      	movne	r3, #1
 800a150:	2300      	moveq	r3, #0
 800a152:	b2db      	uxtb	r3, r3
 800a154:	025b      	lsls	r3, r3, #9
 800a156:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a15a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a15c:	4413      	add	r3, r2
 800a15e:	62bb      	str	r3, [r7, #40]	@ 0x28

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800a160:	2300      	movs	r3, #0
 800a162:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a166:	e034      	b.n	800a1d2 <handle_ep_irq+0xee>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 800a168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a16a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800a16e:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800a172:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a176:	440b      	add	r3, r1
 800a178:	fa22 f303 	lsr.w	r3, r2, r3
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	2b00      	cmp	r3, #0
 800a182:	d021      	beq.n	800a1c8 <handle_ep_irq+0xe4>
      dwc2_dep_t* epout = &ep_base[epnum];
 800a184:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a188:	015b      	lsls	r3, r3, #5
 800a18a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a18c:	4413      	add	r3, r2
 800a18e:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 800a190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	60fb      	str	r3, [r7, #12]

      epout->intr = intr.value; // Clear interrupt
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a19a:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 800a19c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d111      	bne.n	800a1c8 <handle_ep_irq+0xe4>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 800a1a4:	79bb      	ldrb	r3, [r7, #6]
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d107      	bne.n	800a1ba <handle_ep_irq+0xd6>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 800a1aa:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800a1ae:	79fb      	ldrb	r3, [r7, #7]
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7ff feb0 	bl	8009f18 <handle_epin_slave>
 800a1b8:	e006      	b.n	800a1c8 <handle_ep_irq+0xe4>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 800a1ba:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800a1be:	79fb      	ldrb	r3, [r7, #7]
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7ff fe28 	bl	8009e18 <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800a1c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a1d2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800a1d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d3c4      	bcc.n	800a168 <handle_ep_irq+0x84>
        }
        #endif
      }
    }
  }
}
 800a1de:	bf00      	nop
 800a1e0:	bf00      	nop
 800a1e2:	3738      	adds	r7, #56	@ 0x38
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	0800c2d8 	.word	0x0800c2d8

0800a1ec <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b098      	sub	sp, #96	@ 0x60
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	71fb      	strb	r3, [r7, #7]
 800a1f6:	79fb      	ldrb	r3, [r7, #7]
 800a1f8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a1fc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800a200:	2b00      	cmp	r3, #0
 800a202:	d002      	beq.n	800a20a <dcd_int_handler+0x1e>
    rhport = 0;
 800a204:	2300      	movs	r3, #0
 800a206:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a20a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800a20e:	4a80      	ldr	r2, [pc, #512]	@ (800a410 <dcd_int_handler+0x224>)
 800a210:	011b      	lsls	r3, r3, #4
 800a212:	4413      	add	r3, r2
 800a214:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a216:	65fb      	str	r3, [r7, #92]	@ 0x5c
  const uint32_t gintmask = dwc2->gintmsk;
 800a218:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a21a:	699b      	ldr	r3, [r3, #24]
 800a21c:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 800a21e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a220:	695b      	ldr	r3, [r3, #20]
 800a222:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a224:	4013      	ands	r3, r2
 800a226:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 800a228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a22a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00d      	beq.n	800a24e <dcd_int_handler+0x62>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 800a232:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a234:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a238:	615a      	str	r2, [r3, #20]

    usbd_spin_lock(true);
 800a23a:	2001      	movs	r0, #1
 800a23c:	f7fe f81a 	bl	8008274 <usbd_spin_lock>
    handle_bus_reset(rhport);
 800a240:	79fb      	ldrb	r3, [r7, #7]
 800a242:	4618      	mov	r0, r3
 800a244:	f7ff fc0e 	bl	8009a64 <handle_bus_reset>
    usbd_spin_unlock(true);
 800a248:	2001      	movs	r0, #1
 800a24a:	f7fe f82d 	bl	80082a8 <usbd_spin_unlock>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 800a24e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a250:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a254:	2b00      	cmp	r3, #0
 800a256:	d007      	beq.n	800a268 <dcd_int_handler+0x7c>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 800a258:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a25a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a25e:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 800a260:	79fb      	ldrb	r3, [r7, #7]
 800a262:	4618      	mov	r0, r3
 800a264:	f7ff fcea 	bl	8009c3c <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 800a268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a26a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d01d      	beq.n	800a2ae <dcd_int_handler+0xc2>
    dwc2->gintsts = GINTSTS_USBSUSP;
 800a272:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a274:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a278:	615a      	str	r2, [r3, #20]
 800a27a:	79fb      	ldrb	r3, [r7, #7]
 800a27c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800a280:	2304      	movs	r3, #4
 800a282:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 800a286:	2301      	movs	r3, #1
 800a288:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 800a28c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800a290:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 800a294:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800a298:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 800a29c:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800a2a0:	f107 0320 	add.w	r3, r7, #32
 800a2a4:	4611      	mov	r1, r2
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7fd fde6 	bl	8007e78 <dcd_event_handler>
}
 800a2ac:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 800a2ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	da1d      	bge.n	800a2f0 <dcd_int_handler+0x104>
    dwc2->gintsts = GINTSTS_WKUINT;
 800a2b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a2ba:	615a      	str	r2, [r3, #20]
 800a2bc:	79fb      	ldrb	r3, [r7, #7]
 800a2be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a2c2:	2305      	movs	r3, #5
 800a2c4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 800a2ce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a2d2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 800a2d6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a2da:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 800a2de:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a2e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a2e6:	4611      	mov	r1, r2
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7fd fdc5 	bl	8007e78 <dcd_event_handler>
}
 800a2ee:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 800a2f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2f2:	f003 0304 	and.w	r3, r3, #4
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d022      	beq.n	800a340 <dcd_int_handler+0x154>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 800a2fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 800a300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a302:	f003 0304 	and.w	r3, r3, #4
 800a306:	2b00      	cmp	r3, #0
 800a308:	d017      	beq.n	800a33a <dcd_int_handler+0x14e>
 800a30a:	79fb      	ldrb	r3, [r7, #7]
 800a30c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800a310:	2302      	movs	r3, #2
 800a312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a316:	2301      	movs	r3, #1
 800a318:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 800a31c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800a320:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 800a322:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a326:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800a328:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 800a32c:	f107 0314 	add.w	r3, r7, #20
 800a330:	4611      	mov	r1, r2
 800a332:	4618      	mov	r0, r3
 800a334:	f7fd fda0 	bl	8007e78 <dcd_event_handler>
}
 800a338:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 800a33a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a33c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a33e:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 800a340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a342:	f003 0308 	and.w	r3, r3, #8
 800a346:	2b00      	cmp	r3, #0
 800a348:	d02e      	beq.n	800a3a8 <dcd_int_handler+0x1bc>
    dwc2->gintsts = GINTSTS_SOF;
 800a34a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a34c:	2208      	movs	r2, #8
 800a34e:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 800a350:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a352:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800a356:	0a1b      	lsrs	r3, r3, #8
 800a358:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a35c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 800a35e:	4b2d      	ldr	r3, [pc, #180]	@ (800a414 <dcd_int_handler+0x228>)
 800a360:	79db      	ldrb	r3, [r3, #7]
 800a362:	f083 0301 	eor.w	r3, r3, #1
 800a366:	b2db      	uxtb	r3, r3
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d005      	beq.n	800a378 <dcd_int_handler+0x18c>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 800a36c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	f023 0208 	bic.w	r2, r3, #8
 800a374:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a376:	619a      	str	r2, [r3, #24]
 800a378:	79fb      	ldrb	r3, [r7, #7]
 800a37a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800a37e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a380:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a382:	2301      	movs	r3, #1
 800a384:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800a388:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a38c:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 800a38e:	2303      	movs	r3, #3
 800a390:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 800a392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a394:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 800a396:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800a39a:	f107 0308 	add.w	r3, r7, #8
 800a39e:	4611      	mov	r1, r2
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7fd fd69 	bl	8007e78 <dcd_event_handler>
}
 800a3a6:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 800a3a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3aa:	f003 0310 	and.w	r3, r3, #16
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d015      	beq.n	800a3de <dcd_int_handler+0x1f2>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 800a3b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3b4:	699b      	ldr	r3, [r3, #24]
 800a3b6:	f023 0210 	bic.w	r2, r3, #16
 800a3ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3bc:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 800a3be:	79fb      	ldrb	r3, [r7, #7]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7ff fc81 	bl	8009cc8 <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 800a3c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3c8:	695b      	ldr	r3, [r3, #20]
 800a3ca:	f003 0310 	and.w	r3, r3, #16
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1f5      	bne.n	800a3be <dcd_int_handler+0x1d2>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 800a3d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	f043 0210 	orr.w	r2, r3, #16
 800a3da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3dc:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 800a3de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d004      	beq.n	800a3f2 <dcd_int_handler+0x206>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 800a3e8:	79fb      	ldrb	r3, [r7, #7]
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7ff fe79 	bl	800a0e4 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 800a3f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d004      	beq.n	800a406 <dcd_int_handler+0x21a>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 800a3fc:	79fb      	ldrb	r3, [r7, #7]
 800a3fe:	2101      	movs	r1, #1
 800a400:	4618      	mov	r0, r3
 800a402:	f7ff fe6f 	bl	800a0e4 <handle_ep_irq>
  }
}
 800a406:	bf00      	nop
 800a408:	3760      	adds	r7, #96	@ 0x60
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	0800c2d8 	.word	0x0800c2d8
 800a414:	20001240 	.word	0x20001240

0800a418 <dwc2_phy_init>:

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	460b      	mov	r3, r1
 800a422:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800a424:	78fb      	ldrb	r3, [r7, #3]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d106      	bne.n	800a438 <dwc2_phy_init+0x20>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a42e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	639a      	str	r2, [r3, #56]	@ 0x38
      #else

      #endif
    }
  }
}
 800a436:	e005      	b.n	800a444 <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a43c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800a444:	bf00      	nop
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	460b      	mov	r3, r1
 800a45a:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800a45c:	78fb      	ldrb	r3, [r7, #3]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d152      	bne.n	800a508 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 800a462:	4b2c      	ldr	r3, [pc, #176]	@ (800a514 <dwc2_phy_update+0xc4>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a2c      	ldr	r2, [pc, #176]	@ (800a518 <dwc2_phy_update+0xc8>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d302      	bcc.n	800a472 <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 800a46c:	2306      	movs	r3, #6
 800a46e:	60fb      	str	r3, [r7, #12]
 800a470:	e041      	b.n	800a4f6 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 800a472:	4b28      	ldr	r3, [pc, #160]	@ (800a514 <dwc2_phy_update+0xc4>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a29      	ldr	r2, [pc, #164]	@ (800a51c <dwc2_phy_update+0xcc>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d902      	bls.n	800a482 <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 800a47c:	2307      	movs	r3, #7
 800a47e:	60fb      	str	r3, [r7, #12]
 800a480:	e039      	b.n	800a4f6 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 800a482:	4b24      	ldr	r3, [pc, #144]	@ (800a514 <dwc2_phy_update+0xc4>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a26      	ldr	r2, [pc, #152]	@ (800a520 <dwc2_phy_update+0xd0>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d302      	bcc.n	800a492 <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 800a48c:	2308      	movs	r3, #8
 800a48e:	60fb      	str	r3, [r7, #12]
 800a490:	e031      	b.n	800a4f6 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 800a492:	4b20      	ldr	r3, [pc, #128]	@ (800a514 <dwc2_phy_update+0xc4>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a23      	ldr	r2, [pc, #140]	@ (800a524 <dwc2_phy_update+0xd4>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d902      	bls.n	800a4a2 <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 800a49c:	2309      	movs	r3, #9
 800a49e:	60fb      	str	r3, [r7, #12]
 800a4a0:	e029      	b.n	800a4f6 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 800a4a2:	4b1c      	ldr	r3, [pc, #112]	@ (800a514 <dwc2_phy_update+0xc4>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a20      	ldr	r2, [pc, #128]	@ (800a528 <dwc2_phy_update+0xd8>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d902      	bls.n	800a4b2 <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 800a4ac:	230a      	movs	r3, #10
 800a4ae:	60fb      	str	r3, [r7, #12]
 800a4b0:	e021      	b.n	800a4f6 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 800a4b2:	4b18      	ldr	r3, [pc, #96]	@ (800a514 <dwc2_phy_update+0xc4>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a1d      	ldr	r2, [pc, #116]	@ (800a52c <dwc2_phy_update+0xdc>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d902      	bls.n	800a4c2 <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 800a4bc:	230b      	movs	r3, #11
 800a4be:	60fb      	str	r3, [r7, #12]
 800a4c0:	e019      	b.n	800a4f6 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 800a4c2:	4b14      	ldr	r3, [pc, #80]	@ (800a514 <dwc2_phy_update+0xc4>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a1a      	ldr	r2, [pc, #104]	@ (800a530 <dwc2_phy_update+0xe0>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d302      	bcc.n	800a4d2 <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 800a4cc:	230c      	movs	r3, #12
 800a4ce:	60fb      	str	r3, [r7, #12]
 800a4d0:	e011      	b.n	800a4f6 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 800a4d2:	4b10      	ldr	r3, [pc, #64]	@ (800a514 <dwc2_phy_update+0xc4>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a17      	ldr	r2, [pc, #92]	@ (800a534 <dwc2_phy_update+0xe4>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d302      	bcc.n	800a4e2 <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 800a4dc:	230d      	movs	r3, #13
 800a4de:	60fb      	str	r3, [r7, #12]
 800a4e0:	e009      	b.n	800a4f6 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 800a4e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a514 <dwc2_phy_update+0xc4>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a14      	ldr	r2, [pc, #80]	@ (800a538 <dwc2_phy_update+0xe8>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d302      	bcc.n	800a4f2 <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 800a4ec:	230e      	movs	r3, #14
 800a4ee:	60fb      	str	r3, [r7, #12]
 800a4f0:	e001      	b.n	800a4f6 <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 800a4f2:	230f      	movs	r3, #15
 800a4f4:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	029b      	lsls	r3, r3, #10
 800a502:	431a      	orrs	r2, r3
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	60da      	str	r2, [r3, #12]
  }
}
 800a508:	bf00      	nop
 800a50a:	3714      	adds	r7, #20
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr
 800a514:	20000048 	.word	0x20000048
 800a518:	01e84800 	.word	0x01e84800
 800a51c:	01a39ddf 	.word	0x01a39ddf
 800a520:	016e3600 	.word	0x016e3600
 800a524:	014ca43f 	.word	0x014ca43f
 800a528:	01312cff 	.word	0x01312cff
 800a52c:	011a499f 	.word	0x011a499f
 800a530:	01067380 	.word	0x01067380
 800a534:	00f42400 	.word	0x00f42400
 800a538:	00e4e1c0 	.word	0x00e4e1c0

0800a53c <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	f043 0201 	orr.w	r2, r3, #1
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a554:	b29b      	uxth	r3, r3
 800a556:	f244 2209 	movw	r2, #16905	@ 0x4209
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d807      	bhi.n	800a56e <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 800a55e:	bf00      	nop
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	f003 0301 	and.w	r3, r3, #1
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d1f9      	bne.n	800a560 <reset_core+0x24>
 800a56c:	e010      	b.n	800a590 <reset_core+0x54>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 800a56e:	bf00      	nop
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d0f9      	beq.n	800a570 <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	691b      	ldr	r3, [r3, #16]
 800a580:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a584:	f023 0301 	bic.w	r3, r3, #1
 800a588:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 800a590:	bf00      	nop
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	2b00      	cmp	r3, #0
 800a598:	dafb      	bge.n	800a592 <reset_core+0x56>
}
 800a59a:	bf00      	nop
 800a59c:	bf00      	nop
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5bc:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	68fa      	ldr	r2, [r7, #12]
 800a5c2:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f7ff ff26 	bl	800a418 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7ff ffb5 	bl	800a53c <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800a5d8:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800a5e0:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f7ff ff30 	bl	800a450 <dwc2_phy_update>
}
 800a5f0:	bf00      	nop
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b086      	sub	sp, #24
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	617b      	str	r3, [r7, #20]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a60a:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg4_t ghwcfg4 = {.value = dwc2->ghwcfg4};
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a610:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a618:	617b      	str	r3, [r7, #20]

  if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800a61a:	7c3b      	ldrb	r3, [r7, #16]
 800a61c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a620:	b2db      	uxtb	r3, r3
 800a622:	2b80      	cmp	r3, #128	@ 0x80
 800a624:	d114      	bne.n	800a650 <phy_hs_init+0x58>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f043 0310 	orr.w	r3, r3, #16
 800a62c:	617b      	str	r3, [r7, #20]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	f023 0308 	bic.w	r3, r3, #8
 800a634:	617b      	str	r3, [r7, #20]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a63c:	617b      	str	r3, [r7, #20]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a644:	617b      	str	r3, [r7, #20]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 800a64c:	617b      	str	r3, [r7, #20]
 800a64e:	e012      	b.n	800a676 <phy_hs_init+0x7e>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	f023 0310 	bic.w	r3, r3, #16
 800a656:	617b      	str	r3, [r7, #20]

    // Set 16-bit interface if supported
    if (ghwcfg4.phy_data_width) {
 800a658:	7b7b      	ldrb	r3, [r7, #13]
 800a65a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	2b00      	cmp	r3, #0
 800a662:	d004      	beq.n	800a66e <phy_hs_init+0x76>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	f043 0308 	orr.w	r3, r3, #8
 800a66a:	617b      	str	r3, [r7, #20]
 800a66c:	e003      	b.n	800a676 <phy_hs_init+0x7e>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	f023 0308 	bic.w	r3, r3, #8
 800a674:	617b      	str	r3, [r7, #20]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	697a      	ldr	r2, [r7, #20]
 800a67a:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, ghwcfg2.hs_phy_type);
 800a67c:	7c3b      	ldrb	r3, [r7, #16]
 800a67e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a682:	b2db      	uxtb	r3, r3
 800a684:	4619      	mov	r1, r3
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7ff fec6 	bl	800a418 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f7ff ff55 	bl	800a53c <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800a698:	617b      	str	r3, [r7, #20]
  gusbcfg |= (ghwcfg4.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 800a69a:	7b7b      	ldrb	r3, [r7, #13]
 800a69c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d002      	beq.n	800a6ac <phy_hs_init+0xb4>
 800a6a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800a6aa:	e001      	b.n	800a6b0 <phy_hs_init+0xb8>
 800a6ac:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800a6b0:	697a      	ldr	r2, [r7, #20]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	617b      	str	r3, [r7, #20]
  dwc2->gusbcfg = gusbcfg;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	697a      	ldr	r2, [r7, #20]
 800a6ba:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, ghwcfg2.hs_phy_type);
 800a6bc:	7c3b      	ldrb	r3, [r7, #16]
 800a6be:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f7ff fec2 	bl	800a450 <dwc2_phy_update>
}
 800a6cc:	bf00      	nop
 800a6ce:	3718      	adds	r7, #24
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 800a6d4:	b480      	push	{r7}
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6e0:	0c1b      	lsrs	r3, r3, #16
 800a6e2:	041b      	lsls	r3, r3, #16
 800a6e4:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	4a0e      	ldr	r2, [pc, #56]	@ (800a724 <check_dwc2+0x50>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d012      	beq.n	800a714 <check_dwc2+0x40>
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	4a0d      	ldr	r2, [pc, #52]	@ (800a728 <check_dwc2+0x54>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d00e      	beq.n	800a714 <check_dwc2+0x40>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	4a0c      	ldr	r2, [pc, #48]	@ (800a72c <check_dwc2+0x58>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d00a      	beq.n	800a714 <check_dwc2+0x40>
 800a6fe:	4b0c      	ldr	r3, [pc, #48]	@ (800a730 <check_dwc2+0x5c>)
 800a700:	60bb      	str	r3, [r7, #8]
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f003 0301 	and.w	r3, r3, #1
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d000      	beq.n	800a710 <check_dwc2+0x3c>
 800a70e:	be00      	bkpt	0x0000
 800a710:	2300      	movs	r3, #0
 800a712:	e000      	b.n	800a716 <check_dwc2+0x42>
#endif

  return true;
 800a714:	2301      	movs	r3, #1
}
 800a716:	4618      	mov	r0, r3
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	4f540000 	.word	0x4f540000
 800a728:	55310000 	.word	0x55310000
 800a72c:	55320000 	.word	0x55320000
 800a730:	e000edf0 	.word	0xe000edf0

0800a734 <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	460b      	mov	r3, r1
 800a73e:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;
#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 800a740:	78fb      	ldrb	r3, [r7, #3]
 800a742:	2b01      	cmp	r3, #1
 800a744:	d101      	bne.n	800a74a <dwc2_core_is_highspeed+0x16>
    return false;
 800a746:	2300      	movs	r3, #0
 800a748:	e00b      	b.n	800a762 <dwc2_core_is_highspeed+0x2e>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a74e:	60fb      	str	r3, [r7, #12]
  return ghwcfg2.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 800a750:	7b3b      	ldrb	r3, [r7, #12]
 800a752:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a756:	b2db      	uxtb	r3, r3
 800a758:	2b00      	cmp	r3, #0
 800a75a:	bf14      	ite	ne
 800a75c:	2301      	movne	r3, #1
 800a75e:	2300      	moveq	r3, #0
 800a760:	b2db      	uxtb	r3, r3
}
 800a762:	4618      	mov	r0, r3
 800a764:	3714      	adds	r7, #20
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr
	...

0800a770 <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 800a770:	b580      	push	{r7, lr}
 800a772:	b088      	sub	sp, #32
 800a774:	af00      	add	r7, sp, #0
 800a776:	4603      	mov	r3, r0
 800a778:	71fb      	strb	r3, [r7, #7]
 800a77a:	460b      	mov	r3, r1
 800a77c:	71bb      	strb	r3, [r7, #6]
 800a77e:	4613      	mov	r3, r2
 800a780:	717b      	strb	r3, [r7, #5]
 800a782:	79fb      	ldrb	r3, [r7, #7]
 800a784:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a786:	7dfb      	ldrb	r3, [r7, #23]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d001      	beq.n	800a790 <dwc2_core_init+0x20>
    rhport = 0;
 800a78c:	2300      	movs	r3, #0
 800a78e:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a790:	7dfb      	ldrb	r3, [r7, #23]
 800a792:	4a3b      	ldr	r2, [pc, #236]	@ (800a880 <dwc2_core_init+0x110>)
 800a794:	011b      	lsls	r3, r3, #4
 800a796:	4413      	add	r3, r2
 800a798:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a79a:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 800a79c:	69f8      	ldr	r0, [r7, #28]
 800a79e:	f7ff ff99 	bl	800a6d4 <check_dwc2>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	f083 0301 	eor.w	r3, r3, #1
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00a      	beq.n	800a7c4 <dwc2_core_init+0x54>
 800a7ae:	4b35      	ldr	r3, [pc, #212]	@ (800a884 <dwc2_core_init+0x114>)
 800a7b0:	61bb      	str	r3, [r7, #24]
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 0301 	and.w	r3, r3, #1
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d000      	beq.n	800a7c0 <dwc2_core_init+0x50>
 800a7be:	be00      	bkpt	0x0000
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	e058      	b.n	800a876 <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	f023 0201 	bic.w	r2, r3, #1
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 800a7d0:	79bb      	ldrb	r3, [r7, #6]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d003      	beq.n	800a7de <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 800a7d6:	69f8      	ldr	r0, [r7, #28]
 800a7d8:	f7ff ff0e 	bl	800a5f8 <phy_hs_init>
 800a7dc:	e002      	b.n	800a7e4 <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 800a7de:	69f8      	ldr	r0, [r7, #28]
 800a7e0:	f7ff fee2 	bl	800a5a8 <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	f043 0207 	orr.w	r2, r3, #7
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800a7f6:	f023 020f 	bic.w	r2, r3, #15
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	60fb      	str	r3, [r7, #12]
 800a804:	2310      	movs	r3, #16
 800a806:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800a808:	7afb      	ldrb	r3, [r7, #11]
 800a80a:	019b      	lsls	r3, r3, #6
 800a80c:	f043 0220 	orr.w	r2, r3, #32
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800a814:	bf00      	nop
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	f003 0320 	and.w	r3, r3, #32
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d1f9      	bne.n	800a816 <dwc2_core_init+0xa6>
}
 800a822:	bf00      	nop
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	2210      	movs	r2, #16
 800a82c:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800a82e:	bf00      	nop
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	f003 0310 	and.w	r3, r3, #16
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1f9      	bne.n	800a830 <dwc2_core_init+0xc0>
}
 800a83c:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	f04f 32ff 	mov.w	r2, #4294967295
 800a844:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	f04f 32ff 	mov.w	r2, #4294967295
 800a84c:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 800a84e:	69fb      	ldr	r3, [r7, #28]
 800a850:	2200      	movs	r2, #0
 800a852:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 800a854:	797b      	ldrb	r3, [r7, #5]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d006      	beq.n	800a868 <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	689b      	ldr	r3, [r3, #8]
 800a85e:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	609a      	str	r2, [r3, #8]
 800a866:	e005      	b.n	800a874 <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	f043 0210 	orr.w	r2, r3, #16
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	619a      	str	r2, [r3, #24]
  }

  return true;
 800a874:	2301      	movs	r3, #1
}
 800a876:	4618      	mov	r0, r3
 800a878:	3720      	adds	r7, #32
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	0800c2e8 	.word	0x0800c2e8
 800a884:	e000edf0 	.word	0xe000edf0

0800a888 <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 800a888:	b480      	push	{r7}
 800a88a:	b08f      	sub	sp, #60	@ 0x3c
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	4613      	mov	r3, r2
 800a894:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a89c:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 800a89e:	88fb      	ldrh	r3, [r7, #6]
 800a8a0:	089b      	lsrs	r3, r3, #2
 800a8a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 800a8a4:	e00b      	b.n	800a8be <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 800a8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	627a      	str	r2, [r7, #36]	@ 0x24
 800a8ae:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 800a8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b2:	6a3a      	ldr	r2, [r7, #32]
 800a8b4:	601a      	str	r2, [r3, #0]
}
 800a8b6:	bf00      	nop
    dst += 4;
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	3304      	adds	r3, #4
 800a8bc:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 800a8be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a8c0:	1e5a      	subs	r2, r3, #1
 800a8c2:	86fa      	strh	r2, [r7, #54]	@ 0x36
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d1ee      	bne.n	800a8a6 <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 800a8c8:	88fb      	ldrh	r3, [r7, #6]
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	f003 0303 	and.w	r3, r3, #3
 800a8d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 800a8d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d020      	beq.n	800a91e <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 800a8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e4:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 800a8ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d907      	bls.n	800a906 <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8fc:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 800a8fe:	69ba      	ldr	r2, [r7, #24]
 800a900:	0a12      	lsrs	r2, r2, #8
 800a902:	b2d2      	uxtb	r2, r2
 800a904:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 800a906:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	d907      	bls.n	800a91e <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	3302      	adds	r3, #2
 800a912:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a914:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 800a916:	697a      	ldr	r2, [r7, #20]
 800a918:	0c12      	lsrs	r2, r2, #16
 800a91a:	b2d2      	uxtb	r2, r2
 800a91c:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800a91e:	bf00      	nop
 800a920:	373c      	adds	r7, #60	@ 0x3c
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 800a92a:	b480      	push	{r7}
 800a92c:	b08b      	sub	sp, #44	@ 0x2c
 800a92e:	af00      	add	r7, sp, #0
 800a930:	60f8      	str	r0, [r7, #12]
 800a932:	607a      	str	r2, [r7, #4]
 800a934:	461a      	mov	r2, r3
 800a936:	460b      	mov	r3, r1
 800a938:	72fb      	strb	r3, [r7, #11]
 800a93a:	4613      	mov	r3, r2
 800a93c:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 800a93e:	7afb      	ldrb	r3, [r7, #11]
 800a940:	3301      	adds	r3, #1
 800a942:	031b      	lsls	r3, r3, #12
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	4413      	add	r3, r2
 800a948:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 800a94a:	893b      	ldrh	r3, [r7, #8]
 800a94c:	089b      	lsrs	r3, r3, #2
 800a94e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 800a950:	e008      	b.n	800a964 <dfifo_write_packet+0x3a>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	601a      	str	r2, [r3, #0]
    src += 4;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	3304      	adds	r3, #4
 800a962:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 800a964:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a966:	1e5a      	subs	r2, r3, #1
 800a968:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d1f1      	bne.n	800a952 <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 800a96e:	893b      	ldrh	r3, [r7, #8]
 800a970:	b2db      	uxtb	r3, r3
 800a972:	f003 0303 	and.w	r3, r3, #3
 800a976:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 800a978:	7efb      	ldrb	r3, [r7, #27]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d019      	beq.n	800a9b2 <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 800a984:	7efb      	ldrb	r3, [r7, #27]
 800a986:	2b01      	cmp	r3, #1
 800a988:	d906      	bls.n	800a998 <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	3301      	adds	r3, #1
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	021b      	lsls	r3, r3, #8
 800a992:	6a3a      	ldr	r2, [r7, #32]
 800a994:	4313      	orrs	r3, r2
 800a996:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 800a998:	7efb      	ldrb	r3, [r7, #27]
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d906      	bls.n	800a9ac <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	3302      	adds	r3, #2
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	041b      	lsls	r3, r3, #16
 800a9a6:	6a3a      	ldr	r2, [r7, #32]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	6a3a      	ldr	r2, [r7, #32]
 800a9b0:	601a      	str	r2, [r3, #0]
  }
}
 800a9b2:	bf00      	nop
 800a9b4:	372c      	adds	r7, #44	@ 0x2c
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr

0800a9be <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800a9be:	b480      	push	{r7}
 800a9c0:	b085      	sub	sp, #20
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d106      	bne.n	800a9e4 <tu_edpt_claim+0x26>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d001      	beq.n	800a9e8 <tu_edpt_claim+0x2a>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	e01e      	b.n	800aa26 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d108      	bne.n	800aa08 <tu_edpt_claim+0x4a>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d101      	bne.n	800aa08 <tu_edpt_claim+0x4a>
 800aa04:	2301      	movs	r3, #1
 800aa06:	e000      	b.n	800aa0a <tu_edpt_claim+0x4c>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	73fb      	strb	r3, [r7, #15]
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
 800aa0e:	f003 0301 	and.w	r3, r3, #1
 800aa12:	73fb      	strb	r3, [r7, #15]
  if (available) {
 800aa14:	7bfb      	ldrb	r3, [r7, #15]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d004      	beq.n	800aa24 <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	7813      	ldrb	r3, [r2, #0]
 800aa1e:	f043 0304 	orr.w	r3, r3, #4
 800aa22:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 800aa24:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3714      	adds	r7, #20
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800aa32:	b480      	push	{r7}
 800aa34:	b085      	sub	sp, #20
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d108      	bne.n	800aa5c <tu_edpt_release+0x2a>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d101      	bne.n	800aa5c <tu_edpt_release+0x2a>
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e000      	b.n	800aa5e <tu_edpt_release+0x2c>
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	73fb      	strb	r3, [r7, #15]
 800aa60:	7bfb      	ldrb	r3, [r7, #15]
 800aa62:	f003 0301 	and.w	r3, r3, #1
 800aa66:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 800aa68:	7bfb      	ldrb	r3, [r7, #15]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d004      	beq.n	800aa78 <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	7813      	ldrb	r3, [r2, #0]
 800aa72:	f023 0304 	bic.w	r3, r3, #4
 800aa76:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 800aa78:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3714      	adds	r7, #20
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr
	...

0800aa88 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 800aa88:	b480      	push	{r7}
 800aa8a:	b08b      	sub	sp, #44	@ 0x2c
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	460b      	mov	r3, r1
 800aa92:	70fb      	strb	r3, [r7, #3]
 800aa94:	4613      	mov	r3, r2
 800aa96:	70bb      	strb	r3, [r7, #2]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	889b      	ldrh	r3, [r3, #4]
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aaa6:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800aaa8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	78db      	ldrb	r3, [r3, #3]
 800aaae:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	2b03      	cmp	r3, #3
 800aab6:	d059      	beq.n	800ab6c <tu_edpt_validate+0xe4>
 800aab8:	2b03      	cmp	r3, #3
 800aaba:	dc6e      	bgt.n	800ab9a <tu_edpt_validate+0x112>
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d002      	beq.n	800aac6 <tu_edpt_validate+0x3e>
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	d018      	beq.n	800aaf6 <tu_edpt_validate+0x6e>
 800aac4:	e069      	b.n	800ab9a <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800aac6:	78fb      	ldrb	r3, [r7, #3]
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	d102      	bne.n	800aad2 <tu_edpt_validate+0x4a>
 800aacc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aad0:	e001      	b.n	800aad6 <tu_edpt_validate+0x4e>
 800aad2:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800aad6:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 800aad8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800aada:	8a7b      	ldrh	r3, [r7, #18]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d95e      	bls.n	800ab9e <tu_edpt_validate+0x116>
 800aae0:	4b35      	ldr	r3, [pc, #212]	@ (800abb8 <tu_edpt_validate+0x130>)
 800aae2:	60fb      	str	r3, [r7, #12]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f003 0301 	and.w	r3, r3, #1
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d000      	beq.n	800aaf2 <tu_edpt_validate+0x6a>
 800aaf0:	be00      	bkpt	0x0000
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	e059      	b.n	800abaa <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 800aaf6:	78fb      	ldrb	r3, [r7, #3]
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	d10e      	bne.n	800ab1a <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 800aafc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800aafe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab02:	d04e      	beq.n	800aba2 <tu_edpt_validate+0x11a>
 800ab04:	4b2c      	ldr	r3, [pc, #176]	@ (800abb8 <tu_edpt_validate+0x130>)
 800ab06:	617b      	str	r3, [r7, #20]
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 0301 	and.w	r3, r3, #1
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d000      	beq.n	800ab16 <tu_edpt_validate+0x8e>
 800ab14:	be00      	bkpt	0x0000
 800ab16:	2300      	movs	r3, #0
 800ab18:	e047      	b.n	800abaa <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 800ab1a:	78bb      	ldrb	r3, [r7, #2]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00e      	beq.n	800ab3e <tu_edpt_validate+0xb6>
 800ab20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ab22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab26:	d10a      	bne.n	800ab3e <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab34:	711a      	strb	r2, [r3, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 800ab3a:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 800ab3c:	e031      	b.n	800aba2 <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 800ab3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ab40:	2b08      	cmp	r3, #8
 800ab42:	d02e      	beq.n	800aba2 <tu_edpt_validate+0x11a>
 800ab44:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ab46:	2b10      	cmp	r3, #16
 800ab48:	d02b      	beq.n	800aba2 <tu_edpt_validate+0x11a>
 800ab4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ab4c:	2b20      	cmp	r3, #32
 800ab4e:	d028      	beq.n	800aba2 <tu_edpt_validate+0x11a>
 800ab50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ab52:	2b40      	cmp	r3, #64	@ 0x40
 800ab54:	d025      	beq.n	800aba2 <tu_edpt_validate+0x11a>
 800ab56:	4b18      	ldr	r3, [pc, #96]	@ (800abb8 <tu_edpt_validate+0x130>)
 800ab58:	61bb      	str	r3, [r7, #24]
 800ab5a:	69bb      	ldr	r3, [r7, #24]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f003 0301 	and.w	r3, r3, #1
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d000      	beq.n	800ab68 <tu_edpt_validate+0xe0>
 800ab66:	be00      	bkpt	0x0000
 800ab68:	2300      	movs	r3, #0
 800ab6a:	e01e      	b.n	800abaa <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800ab6c:	78fb      	ldrb	r3, [r7, #3]
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d102      	bne.n	800ab78 <tu_edpt_validate+0xf0>
 800ab72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab76:	e000      	b.n	800ab7a <tu_edpt_validate+0xf2>
 800ab78:	2340      	movs	r3, #64	@ 0x40
 800ab7a:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800ab7c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ab7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d910      	bls.n	800aba6 <tu_edpt_validate+0x11e>
 800ab84:	4b0c      	ldr	r3, [pc, #48]	@ (800abb8 <tu_edpt_validate+0x130>)
 800ab86:	623b      	str	r3, [r7, #32]
 800ab88:	6a3b      	ldr	r3, [r7, #32]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f003 0301 	and.w	r3, r3, #1
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d000      	beq.n	800ab96 <tu_edpt_validate+0x10e>
 800ab94:	be00      	bkpt	0x0000
 800ab96:	2300      	movs	r3, #0
 800ab98:	e007      	b.n	800abaa <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	e005      	b.n	800abaa <tu_edpt_validate+0x122>
      break;
 800ab9e:	bf00      	nop
 800aba0:	e002      	b.n	800aba8 <tu_edpt_validate+0x120>
      break;
 800aba2:	bf00      	nop
 800aba4:	e000      	b.n	800aba8 <tu_edpt_validate+0x120>
      break;
 800aba6:	bf00      	nop
  }

  return true;
 800aba8:	2301      	movs	r3, #1
}
 800abaa:	4618      	mov	r0, r3
 800abac:	372c      	adds	r7, #44	@ 0x2c
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	e000edf0 	.word	0xe000edf0

0800abbc <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 800abbc:	b480      	push	{r7}
 800abbe:	b08d      	sub	sp, #52	@ 0x34
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	4611      	mov	r1, r2
 800abc8:	461a      	mov	r2, r3
 800abca:	460b      	mov	r3, r1
 800abcc:	80fb      	strh	r3, [r7, #6]
 800abce:	4613      	mov	r3, r2
 800abd0:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800abd6:	88fb      	ldrh	r3, [r7, #6]
 800abd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800abda:	4413      	add	r3, r2
 800abdc:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 800abde:	e027      	b.n	800ac30 <tu_edpt_bind_driver+0x74>
 800abe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abe2:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800abe4:	6a3b      	ldr	r3, [r7, #32]
 800abe6:	3301      	adds	r3, #1
 800abe8:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 800abea:	2b05      	cmp	r3, #5
 800abec:	d116      	bne.n	800ac1c <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800abee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abf0:	789b      	ldrb	r3, [r3, #2]
 800abf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800abf6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800abfa:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800abfc:	7fbb      	ldrb	r3, [r7, #30]
 800abfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac02:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800ac04:	005b      	lsls	r3, r3, #1
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	4413      	add	r3, r2
 800ac0a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ac0e:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800ac10:	7ffa      	ldrb	r2, [r7, #31]
 800ac12:	09d2      	lsrs	r2, r2, #7
 800ac14:	b2d2      	uxtb	r2, r2
 800ac16:	4611      	mov	r1, r2
 800ac18:	797a      	ldrb	r2, [r7, #5]
 800ac1a:	545a      	strb	r2, [r3, r1]
 800ac1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac1e:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	461a      	mov	r2, r3
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 800ac2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 800ac30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d3d3      	bcc.n	800abe0 <tu_edpt_bind_driver+0x24>
  }
}
 800ac38:	bf00      	nop
 800ac3a:	bf00      	nop
 800ac3c:	3734      	adds	r7, #52	@ 0x34
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr

0800ac46 <tu_edpt_stream_init>:
//--------------------------------------------------------------------+
// Endpoint Stream Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_stream_init(tu_edpt_stream_t* s, bool is_host, bool is_tx, bool overwritable,
                         void* ff_buf, uint16_t ff_bufsize, uint8_t* ep_buf, uint16_t ep_bufsize) {
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b084      	sub	sp, #16
 800ac4a:	af02      	add	r7, sp, #8
 800ac4c:	6078      	str	r0, [r7, #4]
 800ac4e:	4608      	mov	r0, r1
 800ac50:	4611      	mov	r1, r2
 800ac52:	461a      	mov	r2, r3
 800ac54:	4603      	mov	r3, r0
 800ac56:	70fb      	strb	r3, [r7, #3]
 800ac58:	460b      	mov	r3, r1
 800ac5a:	70bb      	strb	r3, [r7, #2]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	707b      	strb	r3, [r7, #1]
  (void) is_tx;

  s->is_host = is_host;
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	7813      	ldrb	r3, [r2, #0]
 800ac64:	78f9      	ldrb	r1, [r7, #3]
 800ac66:	f361 0300 	bfi	r3, r1, #0, #1
 800ac6a:	7013      	strb	r3, [r2, #0]
  tu_fifo_config(&s->ff, ff_buf, ff_bufsize, 1, overwritable);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f103 0008 	add.w	r0, r3, #8
 800ac72:	8aba      	ldrh	r2, [r7, #20]
 800ac74:	787b      	ldrb	r3, [r7, #1]
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	2301      	movs	r3, #1
 800ac7a:	6939      	ldr	r1, [r7, #16]
 800ac7c:	f7fb fa86 	bl	800618c <tu_fifo_config>
    osal_mutex_t new_mutex = osal_mutex_create(&s->ff_mutexdef);
    tu_fifo_config_mutex(&s->ff, is_tx ? new_mutex : NULL, is_tx ? NULL : new_mutex);
  }
  #endif

  s->ep_buf = ep_buf;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	69ba      	ldr	r2, [r7, #24]
 800ac84:	605a      	str	r2, [r3, #4]
  s->ep_bufsize = ep_bufsize;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	8bba      	ldrh	r2, [r7, #28]
 800ac8a:	805a      	strh	r2, [r3, #2]

  return true;
 800ac8c:	2301      	movs	r3, #1
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3708      	adds	r7, #8
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <tu_edpt_stream_deinit>:

bool tu_edpt_stream_deinit(tu_edpt_stream_t* s) {
 800ac96:	b480      	push	{r7}
 800ac98:	b083      	sub	sp, #12
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
  (void) s;
  #if OSAL_MUTEX_REQUIRED
  if (s->ff.mutex_wr) osal_mutex_delete(s->ff.mutex_wr);
  if (s->ff.mutex_rd) osal_mutex_delete(s->ff.mutex_rd);
  #endif
  return true;
 800ac9e:	2301      	movs	r3, #1
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <tu_edpt_stream_write_zlp_if_needed>:
}

//--------------------------------------------------------------------+
// Stream Write
//--------------------------------------------------------------------+
bool tu_edpt_stream_write_zlp_if_needed(uint8_t hwid, tu_edpt_stream_t* s, uint32_t last_xferred_bytes) {
 800acac:	b580      	push	{r7, lr}
 800acae:	b08c      	sub	sp, #48	@ 0x30
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	4603      	mov	r3, r0
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	607a      	str	r2, [r7, #4]
 800acb8:	73fb      	strb	r3, [r7, #15]
  // ZLP condition: no pending data, last transferred bytes is multiple of packet size
  const uint16_t mps = s->is_mps512 ? TUSB_EPSIZE_BULK_HS : TUSB_EPSIZE_BULK_FS;
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	f003 0302 	and.w	r3, r3, #2
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d002      	beq.n	800acce <tu_edpt_stream_write_zlp_if_needed+0x22>
 800acc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800accc:	e000      	b.n	800acd0 <tu_edpt_stream_write_zlp_if_needed+0x24>
 800acce:	2340      	movs	r3, #64	@ 0x40
 800acd0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  TU_VERIFY(!tu_fifo_count(&s->ff) && last_xferred_bytes && (0 == (last_xferred_bytes & (mps - 1))));
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	3308      	adds	r3, #8
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7fb feea 	bl	8006ab0 <tu_fifo_count>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d109      	bne.n	800acf6 <tu_edpt_stream_write_zlp_if_needed+0x4a>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d006      	beq.n	800acf6 <tu_edpt_stream_write_zlp_if_needed+0x4a>
 800ace8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800acea:	3b01      	subs	r3, #1
 800acec:	461a      	mov	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	4013      	ands	r3, r2
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d001      	beq.n	800acfa <tu_edpt_stream_write_zlp_if_needed+0x4e>
 800acf6:	2300      	movs	r3, #0
 800acf8:	e04b      	b.n	800ad92 <tu_edpt_stream_write_zlp_if_needed+0xe6>
 800acfa:	7bfb      	ldrb	r3, [r7, #15]
 800acfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	623b      	str	r3, [r7, #32]
  if (s->is_host) {
 800ad04:	6a3b      	ldr	r3, [r7, #32]
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	f003 0301 	and.w	r3, r3, #1
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d109      	bne.n	800ad26 <tu_edpt_stream_write_zlp_if_needed+0x7a>
    return usbd_edpt_claim(hwid, s->ep_addr);
 800ad12:	6a3b      	ldr	r3, [r7, #32]
 800ad14:	785a      	ldrb	r2, [r3, #1]
 800ad16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad1a:	4611      	mov	r1, r2
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7fd fb8b 	bl	8008438 <usbd_edpt_claim>
 800ad22:	4603      	mov	r3, r0
 800ad24:	e000      	b.n	800ad28 <tu_edpt_stream_write_zlp_if_needed+0x7c>
  return false;
 800ad26:	2300      	movs	r3, #0
  TU_VERIFY(stream_claim(hwid, s));
 800ad28:	f083 0301 	eor.w	r3, r3, #1
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d001      	beq.n	800ad36 <tu_edpt_stream_write_zlp_if_needed+0x8a>
 800ad32:	2300      	movs	r3, #0
 800ad34:	e02d      	b.n	800ad92 <tu_edpt_stream_write_zlp_if_needed+0xe6>
 800ad36:	7bfb      	ldrb	r3, [r7, #15]
 800ad38:	77fb      	strb	r3, [r7, #31]
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	61bb      	str	r3, [r7, #24]
 800ad3e:	2300      	movs	r3, #0
 800ad40:	82fb      	strh	r3, [r7, #22]
  if (s->is_host) {
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d10e      	bne.n	800ad6e <tu_edpt_stream_write_zlp_if_needed+0xc2>
    return usbd_edpt_xfer(hwid, s->ep_addr, count ? s->ep_buf : NULL, count);
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	7859      	ldrb	r1, [r3, #1]
 800ad54:	8afb      	ldrh	r3, [r7, #22]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d002      	beq.n	800ad60 <tu_edpt_stream_write_zlp_if_needed+0xb4>
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	685a      	ldr	r2, [r3, #4]
 800ad5e:	e000      	b.n	800ad62 <tu_edpt_stream_write_zlp_if_needed+0xb6>
 800ad60:	2200      	movs	r2, #0
 800ad62:	8afb      	ldrh	r3, [r7, #22]
 800ad64:	7ff8      	ldrb	r0, [r7, #31]
 800ad66:	f7fd fbb7 	bl	80084d8 <usbd_edpt_xfer>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	e000      	b.n	800ad70 <tu_edpt_stream_write_zlp_if_needed+0xc4>
  return false;
 800ad6e:	2300      	movs	r3, #0
  TU_ASSERT(stream_xfer(hwid, s, 0));
 800ad70:	f083 0301 	eor.w	r3, r3, #1
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00a      	beq.n	800ad90 <tu_edpt_stream_write_zlp_if_needed+0xe4>
 800ad7a:	4b08      	ldr	r3, [pc, #32]	@ (800ad9c <tu_edpt_stream_write_zlp_if_needed+0xf0>)
 800ad7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f003 0301 	and.w	r3, r3, #1
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d000      	beq.n	800ad8c <tu_edpt_stream_write_zlp_if_needed+0xe0>
 800ad8a:	be00      	bkpt	0x0000
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	e000      	b.n	800ad92 <tu_edpt_stream_write_zlp_if_needed+0xe6>
  return true;
 800ad90:	2301      	movs	r3, #1
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3730      	adds	r7, #48	@ 0x30
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	e000edf0 	.word	0xe000edf0

0800ada0 <tu_edpt_stream_write_xfer>:

uint32_t tu_edpt_stream_write_xfer(uint8_t hwid, tu_edpt_stream_t* s) {
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b08a      	sub	sp, #40	@ 0x28
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	4603      	mov	r3, r0
 800ada8:	6039      	str	r1, [r7, #0]
 800adaa:	71fb      	strb	r3, [r7, #7]
  // skip if no data
  TU_VERIFY(tu_fifo_count(&s->ff), 0);
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	3308      	adds	r3, #8
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7fb fe7d 	bl	8006ab0 <tu_fifo_count>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d101      	bne.n	800adc0 <tu_edpt_stream_write_xfer+0x20>
 800adbc:	2300      	movs	r3, #0
 800adbe:	e06e      	b.n	800ae9e <tu_edpt_stream_write_xfer+0xfe>
 800adc0:	79fb      	ldrb	r3, [r7, #7]
 800adc2:	77fb      	strb	r3, [r7, #31]
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	61bb      	str	r3, [r7, #24]
  if (s->is_host) {
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	f003 0301 	and.w	r3, r3, #1
 800add0:	b2db      	uxtb	r3, r3
 800add2:	2b00      	cmp	r3, #0
 800add4:	d108      	bne.n	800ade8 <tu_edpt_stream_write_xfer+0x48>
    return usbd_edpt_claim(hwid, s->ep_addr);
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	785a      	ldrb	r2, [r3, #1]
 800adda:	7ffb      	ldrb	r3, [r7, #31]
 800addc:	4611      	mov	r1, r2
 800adde:	4618      	mov	r0, r3
 800ade0:	f7fd fb2a 	bl	8008438 <usbd_edpt_claim>
 800ade4:	4603      	mov	r3, r0
 800ade6:	e000      	b.n	800adea <tu_edpt_stream_write_xfer+0x4a>
  return false;
 800ade8:	2300      	movs	r3, #0

  TU_VERIFY(stream_claim(hwid, s), 0);
 800adea:	f083 0301 	eor.w	r3, r3, #1
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d001      	beq.n	800adf8 <tu_edpt_stream_write_xfer+0x58>
 800adf4:	2300      	movs	r3, #0
 800adf6:	e052      	b.n	800ae9e <tu_edpt_stream_write_xfer+0xfe>

  // Pull data from FIFO -> EP buf
  uint16_t const count = tu_fifo_read_n(&s->ff, s->ep_buf, s->ep_bufsize);
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	f103 0008 	add.w	r0, r3, #8
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	6859      	ldr	r1, [r3, #4]
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	885b      	ldrh	r3, [r3, #2]
 800ae06:	461a      	mov	r2, r3
 800ae08:	f7fb ff0e 	bl	8006c28 <tu_fifo_read_n>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	84fb      	strh	r3, [r7, #38]	@ 0x26

  if (count) {
 800ae10:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d02e      	beq.n	800ae74 <tu_edpt_stream_write_xfer+0xd4>
 800ae16:	79fb      	ldrb	r3, [r7, #7]
 800ae18:	75fb      	strb	r3, [r7, #23]
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	613b      	str	r3, [r7, #16]
 800ae1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ae20:	81fb      	strh	r3, [r7, #14]
  if (s->is_host) {
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	f003 0301 	and.w	r3, r3, #1
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d10e      	bne.n	800ae4e <tu_edpt_stream_write_xfer+0xae>
    return usbd_edpt_xfer(hwid, s->ep_addr, count ? s->ep_buf : NULL, count);
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	7859      	ldrb	r1, [r3, #1]
 800ae34:	89fb      	ldrh	r3, [r7, #14]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d002      	beq.n	800ae40 <tu_edpt_stream_write_xfer+0xa0>
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	685a      	ldr	r2, [r3, #4]
 800ae3e:	e000      	b.n	800ae42 <tu_edpt_stream_write_xfer+0xa2>
 800ae40:	2200      	movs	r2, #0
 800ae42:	89fb      	ldrh	r3, [r7, #14]
 800ae44:	7df8      	ldrb	r0, [r7, #23]
 800ae46:	f7fd fb47 	bl	80084d8 <usbd_edpt_xfer>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	e000      	b.n	800ae50 <tu_edpt_stream_write_xfer+0xb0>
  return false;
 800ae4e:	2300      	movs	r3, #0
    TU_ASSERT(stream_xfer(hwid, s, count), 0);
 800ae50:	f083 0301 	eor.w	r3, r3, #1
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00a      	beq.n	800ae70 <tu_edpt_stream_write_xfer+0xd0>
 800ae5a:	4b13      	ldr	r3, [pc, #76]	@ (800aea8 <tu_edpt_stream_write_xfer+0x108>)
 800ae5c:	623b      	str	r3, [r7, #32]
 800ae5e:	6a3b      	ldr	r3, [r7, #32]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f003 0301 	and.w	r3, r3, #1
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d000      	beq.n	800ae6c <tu_edpt_stream_write_xfer+0xcc>
 800ae6a:	be00      	bkpt	0x0000
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	e016      	b.n	800ae9e <tu_edpt_stream_write_xfer+0xfe>
    return count;
 800ae70:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ae72:	e014      	b.n	800ae9e <tu_edpt_stream_write_xfer+0xfe>
 800ae74:	79fb      	ldrb	r3, [r7, #7]
 800ae76:	737b      	strb	r3, [r7, #13]
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	60bb      	str	r3, [r7, #8]
  if (s->is_host) {
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	f003 0301 	and.w	r3, r3, #1
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d107      	bne.n	800ae9a <tu_edpt_stream_write_xfer+0xfa>
    return usbd_edpt_release(hwid, s->ep_addr);
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	785a      	ldrb	r2, [r3, #1]
 800ae8e:	7b7b      	ldrb	r3, [r7, #13]
 800ae90:	4611      	mov	r1, r2
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7fd faf8 	bl	8008488 <usbd_edpt_release>
 800ae98:	e000      	b.n	800ae9c <tu_edpt_stream_write_xfer+0xfc>
  return false;
 800ae9a:	bf00      	nop
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    stream_release(hwid, s);
    return 0;
 800ae9c:	2300      	movs	r3, #0
  }
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3728      	adds	r7, #40	@ 0x28
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	e000edf0 	.word	0xe000edf0

0800aeac <tu_edpt_stream_read_xfer>:
}

//--------------------------------------------------------------------+
// Stream Read
//--------------------------------------------------------------------+
uint32_t tu_edpt_stream_read_xfer(uint8_t hwid, tu_edpt_stream_t* s) {
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b092      	sub	sp, #72	@ 0x48
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	6039      	str	r1, [r7, #0]
 800aeb6:	71fb      	strb	r3, [r7, #7]
  if (0 == tu_fifo_depth(&s->ff)) {
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	3308      	adds	r3, #8
 800aebc:	637b      	str	r3, [r7, #52]	@ 0x34
 800aebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aec0:	889b      	ldrh	r3, [r3, #4]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d151      	bne.n	800af6a <tu_edpt_stream_read_xfer+0xbe>
 800aec6:	79fb      	ldrb	r3, [r7, #7]
 800aec8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (s->is_host) {
 800aed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	f003 0301 	and.w	r3, r3, #1
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d109      	bne.n	800aef2 <tu_edpt_stream_read_xfer+0x46>
    return usbd_edpt_claim(hwid, s->ep_addr);
 800aede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aee0:	785a      	ldrb	r2, [r3, #1]
 800aee2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800aee6:	4611      	mov	r1, r2
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7fd faa5 	bl	8008438 <usbd_edpt_claim>
 800aeee:	4603      	mov	r3, r0
 800aef0:	e000      	b.n	800aef4 <tu_edpt_stream_read_xfer+0x48>
  return false;
 800aef2:	2300      	movs	r3, #0
    // no fifo for buffered
    TU_VERIFY(stream_claim(hwid, s), 0);
 800aef4:	f083 0301 	eor.w	r3, r3, #1
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d001      	beq.n	800af02 <tu_edpt_stream_read_xfer+0x56>
 800aefe:	2300      	movs	r3, #0
 800af00:	e0dc      	b.n	800b0bc <tu_edpt_stream_read_xfer+0x210>
    TU_ASSERT(stream_xfer(hwid, s, s->ep_bufsize), 0);
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	885a      	ldrh	r2, [r3, #2]
 800af06:	79fb      	ldrb	r3, [r7, #7]
 800af08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	627b      	str	r3, [r7, #36]	@ 0x24
 800af10:	4613      	mov	r3, r2
 800af12:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (s->is_host) {
 800af14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	f003 0301 	and.w	r3, r3, #1
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d10f      	bne.n	800af42 <tu_edpt_stream_read_xfer+0x96>
    return usbd_edpt_xfer(hwid, s->ep_addr, count ? s->ep_buf : NULL, count);
 800af22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af24:	7859      	ldrb	r1, [r3, #1]
 800af26:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d002      	beq.n	800af32 <tu_edpt_stream_read_xfer+0x86>
 800af2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af2e:	685a      	ldr	r2, [r3, #4]
 800af30:	e000      	b.n	800af34 <tu_edpt_stream_read_xfer+0x88>
 800af32:	2200      	movs	r2, #0
 800af34:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800af36:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 800af3a:	f7fd facd 	bl	80084d8 <usbd_edpt_xfer>
 800af3e:	4603      	mov	r3, r0
 800af40:	e000      	b.n	800af44 <tu_edpt_stream_read_xfer+0x98>
  return false;
 800af42:	2300      	movs	r3, #0
    TU_ASSERT(stream_xfer(hwid, s, s->ep_bufsize), 0);
 800af44:	f083 0301 	eor.w	r3, r3, #1
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00a      	beq.n	800af64 <tu_edpt_stream_read_xfer+0xb8>
 800af4e:	4b5d      	ldr	r3, [pc, #372]	@ (800b0c4 <tu_edpt_stream_read_xfer+0x218>)
 800af50:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f003 0301 	and.w	r3, r3, #1
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d000      	beq.n	800af60 <tu_edpt_stream_read_xfer+0xb4>
 800af5e:	be00      	bkpt	0x0000
 800af60:	2300      	movs	r3, #0
 800af62:	e0ab      	b.n	800b0bc <tu_edpt_stream_read_xfer+0x210>
    return s->ep_bufsize;
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	885b      	ldrh	r3, [r3, #2]
 800af68:	e0a8      	b.n	800b0bc <tu_edpt_stream_read_xfer+0x210>
  } else {
    const uint16_t mps = s->is_mps512 ? TUSB_EPSIZE_BULK_HS : TUSB_EPSIZE_BULK_FS;
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	f003 0302 	and.w	r3, r3, #2
 800af72:	b2db      	uxtb	r3, r3
 800af74:	2b00      	cmp	r3, #0
 800af76:	d002      	beq.n	800af7e <tu_edpt_stream_read_xfer+0xd2>
 800af78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af7c:	e000      	b.n	800af80 <tu_edpt_stream_read_xfer+0xd4>
 800af7e:	2340      	movs	r3, #64	@ 0x40
 800af80:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint16_t available = tu_fifo_remaining(&s->ff);
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	3308      	adds	r3, #8
 800af88:	4618      	mov	r0, r3
 800af8a:	f7fb fdf1 	bl	8006b70 <tu_fifo_remaining>
 800af8e:	4603      	mov	r3, r0
 800af90:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

    // Prepare for incoming data but only allow what we can store in the ring buffer.
    // TODO Actually we can still carry out the transfer, keeping count of received bytes
    // and slowly move it to the FIFO when read().
    // This pre-check reduces endpoint claiming
    TU_VERIFY(available >= mps);
 800af94:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800af98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d201      	bcs.n	800afa4 <tu_edpt_stream_read_xfer+0xf8>
 800afa0:	2300      	movs	r3, #0
 800afa2:	e08b      	b.n	800b0bc <tu_edpt_stream_read_xfer+0x210>
 800afa4:	79fb      	ldrb	r3, [r7, #7]
 800afa6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	61fb      	str	r3, [r7, #28]
  if (s->is_host) {
 800afae:	69fb      	ldr	r3, [r7, #28]
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	f003 0301 	and.w	r3, r3, #1
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d109      	bne.n	800afd0 <tu_edpt_stream_read_xfer+0x124>
    return usbd_edpt_claim(hwid, s->ep_addr);
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	785a      	ldrb	r2, [r3, #1]
 800afc0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800afc4:	4611      	mov	r1, r2
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7fd fa36 	bl	8008438 <usbd_edpt_claim>
 800afcc:	4603      	mov	r3, r0
 800afce:	e000      	b.n	800afd2 <tu_edpt_stream_read_xfer+0x126>
  return false;
 800afd0:	2300      	movs	r3, #0

    TU_VERIFY(stream_claim(hwid, s), 0);
 800afd2:	f083 0301 	eor.w	r3, r3, #1
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d001      	beq.n	800afe0 <tu_edpt_stream_read_xfer+0x134>
 800afdc:	2300      	movs	r3, #0
 800afde:	e06d      	b.n	800b0bc <tu_edpt_stream_read_xfer+0x210>

    // get available again since fifo can be changed before endpoint is claimed
    available = tu_fifo_remaining(&s->ff);
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	3308      	adds	r3, #8
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7fb fdc3 	bl	8006b70 <tu_fifo_remaining>
 800afea:	4603      	mov	r3, r0
 800afec:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

    if (available >= mps) {
 800aff0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800aff4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800aff8:	429a      	cmp	r2, r3
 800affa:	d34a      	bcc.n	800b092 <tu_edpt_stream_read_xfer+0x1e6>
      // multiple of packet size limit by ep bufsize
      uint16_t count = (uint16_t) (available & ~(mps - 1));
 800affc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b000:	425b      	negs	r3, r3
 800b002:	b29b      	uxth	r3, r3
 800b004:	b21a      	sxth	r2, r3
 800b006:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 800b00a:	4013      	ands	r3, r2
 800b00c:	b21b      	sxth	r3, r3
 800b00e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      count = tu_min16(count, s->ep_bufsize);
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	885a      	ldrh	r2, [r3, #2]
 800b016:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b01a:	823b      	strh	r3, [r7, #16]
 800b01c:	4613      	mov	r3, r2
 800b01e:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800b020:	8a3a      	ldrh	r2, [r7, #16]
 800b022:	89fb      	ldrh	r3, [r7, #14]
 800b024:	4293      	cmp	r3, r2
 800b026:	bf28      	it	cs
 800b028:	4613      	movcs	r3, r2
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800b030:	79fb      	ldrb	r3, [r7, #7]
 800b032:	76fb      	strb	r3, [r7, #27]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	617b      	str	r3, [r7, #20]
 800b038:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b03c:	827b      	strh	r3, [r7, #18]
  if (s->is_host) {
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	f003 0301 	and.w	r3, r3, #1
 800b046:	b2db      	uxtb	r3, r3
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d10e      	bne.n	800b06a <tu_edpt_stream_read_xfer+0x1be>
    return usbd_edpt_xfer(hwid, s->ep_addr, count ? s->ep_buf : NULL, count);
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	7859      	ldrb	r1, [r3, #1]
 800b050:	8a7b      	ldrh	r3, [r7, #18]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d002      	beq.n	800b05c <tu_edpt_stream_read_xfer+0x1b0>
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	685a      	ldr	r2, [r3, #4]
 800b05a:	e000      	b.n	800b05e <tu_edpt_stream_read_xfer+0x1b2>
 800b05c:	2200      	movs	r2, #0
 800b05e:	8a7b      	ldrh	r3, [r7, #18]
 800b060:	7ef8      	ldrb	r0, [r7, #27]
 800b062:	f7fd fa39 	bl	80084d8 <usbd_edpt_xfer>
 800b066:	4603      	mov	r3, r0
 800b068:	e000      	b.n	800b06c <tu_edpt_stream_read_xfer+0x1c0>
  return false;
 800b06a:	2300      	movs	r3, #0
      TU_ASSERT(stream_xfer(hwid, s, count), 0);
 800b06c:	f083 0301 	eor.w	r3, r3, #1
 800b070:	b2db      	uxtb	r3, r3
 800b072:	2b00      	cmp	r3, #0
 800b074:	d00a      	beq.n	800b08c <tu_edpt_stream_read_xfer+0x1e0>
 800b076:	4b13      	ldr	r3, [pc, #76]	@ (800b0c4 <tu_edpt_stream_read_xfer+0x218>)
 800b078:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b07a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f003 0301 	and.w	r3, r3, #1
 800b082:	2b00      	cmp	r3, #0
 800b084:	d000      	beq.n	800b088 <tu_edpt_stream_read_xfer+0x1dc>
 800b086:	be00      	bkpt	0x0000
 800b088:	2300      	movs	r3, #0
 800b08a:	e017      	b.n	800b0bc <tu_edpt_stream_read_xfer+0x210>
      return count;
 800b08c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b090:	e014      	b.n	800b0bc <tu_edpt_stream_read_xfer+0x210>
 800b092:	79fb      	ldrb	r3, [r7, #7]
 800b094:	737b      	strb	r3, [r7, #13]
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	60bb      	str	r3, [r7, #8]
  if (s->is_host) {
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	f003 0301 	and.w	r3, r3, #1
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d107      	bne.n	800b0b8 <tu_edpt_stream_read_xfer+0x20c>
    return usbd_edpt_release(hwid, s->ep_addr);
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	785a      	ldrb	r2, [r3, #1]
 800b0ac:	7b7b      	ldrb	r3, [r7, #13]
 800b0ae:	4611      	mov	r1, r2
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7fd f9e9 	bl	8008488 <usbd_edpt_release>
 800b0b6:	e000      	b.n	800b0ba <tu_edpt_stream_read_xfer+0x20e>
  return false;
 800b0b8:	bf00      	nop
    } else {
      // Release endpoint since we don't make any transfer
      stream_release(hwid, s);
      return 0;
 800b0ba:	2300      	movs	r3, #0
    }
  }
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3748      	adds	r7, #72	@ 0x48
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	e000edf0 	.word	0xe000edf0

0800b0c8 <siprintf>:
 800b0c8:	b40e      	push	{r1, r2, r3}
 800b0ca:	b510      	push	{r4, lr}
 800b0cc:	b09d      	sub	sp, #116	@ 0x74
 800b0ce:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b0d0:	9002      	str	r0, [sp, #8]
 800b0d2:	9006      	str	r0, [sp, #24]
 800b0d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b0d8:	480a      	ldr	r0, [pc, #40]	@ (800b104 <siprintf+0x3c>)
 800b0da:	9107      	str	r1, [sp, #28]
 800b0dc:	9104      	str	r1, [sp, #16]
 800b0de:	490a      	ldr	r1, [pc, #40]	@ (800b108 <siprintf+0x40>)
 800b0e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0e4:	9105      	str	r1, [sp, #20]
 800b0e6:	2400      	movs	r4, #0
 800b0e8:	a902      	add	r1, sp, #8
 800b0ea:	6800      	ldr	r0, [r0, #0]
 800b0ec:	9301      	str	r3, [sp, #4]
 800b0ee:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b0f0:	f000 f9a2 	bl	800b438 <_svfiprintf_r>
 800b0f4:	9b02      	ldr	r3, [sp, #8]
 800b0f6:	701c      	strb	r4, [r3, #0]
 800b0f8:	b01d      	add	sp, #116	@ 0x74
 800b0fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0fe:	b003      	add	sp, #12
 800b100:	4770      	bx	lr
 800b102:	bf00      	nop
 800b104:	20000080 	.word	0x20000080
 800b108:	ffff0208 	.word	0xffff0208

0800b10c <memset>:
 800b10c:	4402      	add	r2, r0
 800b10e:	4603      	mov	r3, r0
 800b110:	4293      	cmp	r3, r2
 800b112:	d100      	bne.n	800b116 <memset+0xa>
 800b114:	4770      	bx	lr
 800b116:	f803 1b01 	strb.w	r1, [r3], #1
 800b11a:	e7f9      	b.n	800b110 <memset+0x4>

0800b11c <__errno>:
 800b11c:	4b01      	ldr	r3, [pc, #4]	@ (800b124 <__errno+0x8>)
 800b11e:	6818      	ldr	r0, [r3, #0]
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop
 800b124:	20000080 	.word	0x20000080

0800b128 <__libc_init_array>:
 800b128:	b570      	push	{r4, r5, r6, lr}
 800b12a:	4d0d      	ldr	r5, [pc, #52]	@ (800b160 <__libc_init_array+0x38>)
 800b12c:	4c0d      	ldr	r4, [pc, #52]	@ (800b164 <__libc_init_array+0x3c>)
 800b12e:	1b64      	subs	r4, r4, r5
 800b130:	10a4      	asrs	r4, r4, #2
 800b132:	2600      	movs	r6, #0
 800b134:	42a6      	cmp	r6, r4
 800b136:	d109      	bne.n	800b14c <__libc_init_array+0x24>
 800b138:	4d0b      	ldr	r5, [pc, #44]	@ (800b168 <__libc_init_array+0x40>)
 800b13a:	4c0c      	ldr	r4, [pc, #48]	@ (800b16c <__libc_init_array+0x44>)
 800b13c:	f000 fc64 	bl	800ba08 <_init>
 800b140:	1b64      	subs	r4, r4, r5
 800b142:	10a4      	asrs	r4, r4, #2
 800b144:	2600      	movs	r6, #0
 800b146:	42a6      	cmp	r6, r4
 800b148:	d105      	bne.n	800b156 <__libc_init_array+0x2e>
 800b14a:	bd70      	pop	{r4, r5, r6, pc}
 800b14c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b150:	4798      	blx	r3
 800b152:	3601      	adds	r6, #1
 800b154:	e7ee      	b.n	800b134 <__libc_init_array+0xc>
 800b156:	f855 3b04 	ldr.w	r3, [r5], #4
 800b15a:	4798      	blx	r3
 800b15c:	3601      	adds	r6, #1
 800b15e:	e7f2      	b.n	800b146 <__libc_init_array+0x1e>
 800b160:	0800c334 	.word	0x0800c334
 800b164:	0800c334 	.word	0x0800c334
 800b168:	0800c334 	.word	0x0800c334
 800b16c:	0800c338 	.word	0x0800c338

0800b170 <__retarget_lock_acquire_recursive>:
 800b170:	4770      	bx	lr

0800b172 <__retarget_lock_release_recursive>:
 800b172:	4770      	bx	lr

0800b174 <memcpy>:
 800b174:	440a      	add	r2, r1
 800b176:	4291      	cmp	r1, r2
 800b178:	f100 33ff 	add.w	r3, r0, #4294967295
 800b17c:	d100      	bne.n	800b180 <memcpy+0xc>
 800b17e:	4770      	bx	lr
 800b180:	b510      	push	{r4, lr}
 800b182:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b186:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b18a:	4291      	cmp	r1, r2
 800b18c:	d1f9      	bne.n	800b182 <memcpy+0xe>
 800b18e:	bd10      	pop	{r4, pc}

0800b190 <_free_r>:
 800b190:	b538      	push	{r3, r4, r5, lr}
 800b192:	4605      	mov	r5, r0
 800b194:	2900      	cmp	r1, #0
 800b196:	d041      	beq.n	800b21c <_free_r+0x8c>
 800b198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b19c:	1f0c      	subs	r4, r1, #4
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	bfb8      	it	lt
 800b1a2:	18e4      	addlt	r4, r4, r3
 800b1a4:	f000 f8e0 	bl	800b368 <__malloc_lock>
 800b1a8:	4a1d      	ldr	r2, [pc, #116]	@ (800b220 <_free_r+0x90>)
 800b1aa:	6813      	ldr	r3, [r2, #0]
 800b1ac:	b933      	cbnz	r3, 800b1bc <_free_r+0x2c>
 800b1ae:	6063      	str	r3, [r4, #4]
 800b1b0:	6014      	str	r4, [r2, #0]
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1b8:	f000 b8dc 	b.w	800b374 <__malloc_unlock>
 800b1bc:	42a3      	cmp	r3, r4
 800b1be:	d908      	bls.n	800b1d2 <_free_r+0x42>
 800b1c0:	6820      	ldr	r0, [r4, #0]
 800b1c2:	1821      	adds	r1, r4, r0
 800b1c4:	428b      	cmp	r3, r1
 800b1c6:	bf01      	itttt	eq
 800b1c8:	6819      	ldreq	r1, [r3, #0]
 800b1ca:	685b      	ldreq	r3, [r3, #4]
 800b1cc:	1809      	addeq	r1, r1, r0
 800b1ce:	6021      	streq	r1, [r4, #0]
 800b1d0:	e7ed      	b.n	800b1ae <_free_r+0x1e>
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	b10b      	cbz	r3, 800b1dc <_free_r+0x4c>
 800b1d8:	42a3      	cmp	r3, r4
 800b1da:	d9fa      	bls.n	800b1d2 <_free_r+0x42>
 800b1dc:	6811      	ldr	r1, [r2, #0]
 800b1de:	1850      	adds	r0, r2, r1
 800b1e0:	42a0      	cmp	r0, r4
 800b1e2:	d10b      	bne.n	800b1fc <_free_r+0x6c>
 800b1e4:	6820      	ldr	r0, [r4, #0]
 800b1e6:	4401      	add	r1, r0
 800b1e8:	1850      	adds	r0, r2, r1
 800b1ea:	4283      	cmp	r3, r0
 800b1ec:	6011      	str	r1, [r2, #0]
 800b1ee:	d1e0      	bne.n	800b1b2 <_free_r+0x22>
 800b1f0:	6818      	ldr	r0, [r3, #0]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	6053      	str	r3, [r2, #4]
 800b1f6:	4408      	add	r0, r1
 800b1f8:	6010      	str	r0, [r2, #0]
 800b1fa:	e7da      	b.n	800b1b2 <_free_r+0x22>
 800b1fc:	d902      	bls.n	800b204 <_free_r+0x74>
 800b1fe:	230c      	movs	r3, #12
 800b200:	602b      	str	r3, [r5, #0]
 800b202:	e7d6      	b.n	800b1b2 <_free_r+0x22>
 800b204:	6820      	ldr	r0, [r4, #0]
 800b206:	1821      	adds	r1, r4, r0
 800b208:	428b      	cmp	r3, r1
 800b20a:	bf04      	itt	eq
 800b20c:	6819      	ldreq	r1, [r3, #0]
 800b20e:	685b      	ldreq	r3, [r3, #4]
 800b210:	6063      	str	r3, [r4, #4]
 800b212:	bf04      	itt	eq
 800b214:	1809      	addeq	r1, r1, r0
 800b216:	6021      	streq	r1, [r4, #0]
 800b218:	6054      	str	r4, [r2, #4]
 800b21a:	e7ca      	b.n	800b1b2 <_free_r+0x22>
 800b21c:	bd38      	pop	{r3, r4, r5, pc}
 800b21e:	bf00      	nop
 800b220:	20001394 	.word	0x20001394

0800b224 <sbrk_aligned>:
 800b224:	b570      	push	{r4, r5, r6, lr}
 800b226:	4e0f      	ldr	r6, [pc, #60]	@ (800b264 <sbrk_aligned+0x40>)
 800b228:	460c      	mov	r4, r1
 800b22a:	6831      	ldr	r1, [r6, #0]
 800b22c:	4605      	mov	r5, r0
 800b22e:	b911      	cbnz	r1, 800b236 <sbrk_aligned+0x12>
 800b230:	f000 fba4 	bl	800b97c <_sbrk_r>
 800b234:	6030      	str	r0, [r6, #0]
 800b236:	4621      	mov	r1, r4
 800b238:	4628      	mov	r0, r5
 800b23a:	f000 fb9f 	bl	800b97c <_sbrk_r>
 800b23e:	1c43      	adds	r3, r0, #1
 800b240:	d103      	bne.n	800b24a <sbrk_aligned+0x26>
 800b242:	f04f 34ff 	mov.w	r4, #4294967295
 800b246:	4620      	mov	r0, r4
 800b248:	bd70      	pop	{r4, r5, r6, pc}
 800b24a:	1cc4      	adds	r4, r0, #3
 800b24c:	f024 0403 	bic.w	r4, r4, #3
 800b250:	42a0      	cmp	r0, r4
 800b252:	d0f8      	beq.n	800b246 <sbrk_aligned+0x22>
 800b254:	1a21      	subs	r1, r4, r0
 800b256:	4628      	mov	r0, r5
 800b258:	f000 fb90 	bl	800b97c <_sbrk_r>
 800b25c:	3001      	adds	r0, #1
 800b25e:	d1f2      	bne.n	800b246 <sbrk_aligned+0x22>
 800b260:	e7ef      	b.n	800b242 <sbrk_aligned+0x1e>
 800b262:	bf00      	nop
 800b264:	20001390 	.word	0x20001390

0800b268 <_malloc_r>:
 800b268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b26c:	1ccd      	adds	r5, r1, #3
 800b26e:	f025 0503 	bic.w	r5, r5, #3
 800b272:	3508      	adds	r5, #8
 800b274:	2d0c      	cmp	r5, #12
 800b276:	bf38      	it	cc
 800b278:	250c      	movcc	r5, #12
 800b27a:	2d00      	cmp	r5, #0
 800b27c:	4606      	mov	r6, r0
 800b27e:	db01      	blt.n	800b284 <_malloc_r+0x1c>
 800b280:	42a9      	cmp	r1, r5
 800b282:	d904      	bls.n	800b28e <_malloc_r+0x26>
 800b284:	230c      	movs	r3, #12
 800b286:	6033      	str	r3, [r6, #0]
 800b288:	2000      	movs	r0, #0
 800b28a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b28e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b364 <_malloc_r+0xfc>
 800b292:	f000 f869 	bl	800b368 <__malloc_lock>
 800b296:	f8d8 3000 	ldr.w	r3, [r8]
 800b29a:	461c      	mov	r4, r3
 800b29c:	bb44      	cbnz	r4, 800b2f0 <_malloc_r+0x88>
 800b29e:	4629      	mov	r1, r5
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	f7ff ffbf 	bl	800b224 <sbrk_aligned>
 800b2a6:	1c43      	adds	r3, r0, #1
 800b2a8:	4604      	mov	r4, r0
 800b2aa:	d158      	bne.n	800b35e <_malloc_r+0xf6>
 800b2ac:	f8d8 4000 	ldr.w	r4, [r8]
 800b2b0:	4627      	mov	r7, r4
 800b2b2:	2f00      	cmp	r7, #0
 800b2b4:	d143      	bne.n	800b33e <_malloc_r+0xd6>
 800b2b6:	2c00      	cmp	r4, #0
 800b2b8:	d04b      	beq.n	800b352 <_malloc_r+0xea>
 800b2ba:	6823      	ldr	r3, [r4, #0]
 800b2bc:	4639      	mov	r1, r7
 800b2be:	4630      	mov	r0, r6
 800b2c0:	eb04 0903 	add.w	r9, r4, r3
 800b2c4:	f000 fb5a 	bl	800b97c <_sbrk_r>
 800b2c8:	4581      	cmp	r9, r0
 800b2ca:	d142      	bne.n	800b352 <_malloc_r+0xea>
 800b2cc:	6821      	ldr	r1, [r4, #0]
 800b2ce:	1a6d      	subs	r5, r5, r1
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	f7ff ffa6 	bl	800b224 <sbrk_aligned>
 800b2d8:	3001      	adds	r0, #1
 800b2da:	d03a      	beq.n	800b352 <_malloc_r+0xea>
 800b2dc:	6823      	ldr	r3, [r4, #0]
 800b2de:	442b      	add	r3, r5
 800b2e0:	6023      	str	r3, [r4, #0]
 800b2e2:	f8d8 3000 	ldr.w	r3, [r8]
 800b2e6:	685a      	ldr	r2, [r3, #4]
 800b2e8:	bb62      	cbnz	r2, 800b344 <_malloc_r+0xdc>
 800b2ea:	f8c8 7000 	str.w	r7, [r8]
 800b2ee:	e00f      	b.n	800b310 <_malloc_r+0xa8>
 800b2f0:	6822      	ldr	r2, [r4, #0]
 800b2f2:	1b52      	subs	r2, r2, r5
 800b2f4:	d420      	bmi.n	800b338 <_malloc_r+0xd0>
 800b2f6:	2a0b      	cmp	r2, #11
 800b2f8:	d917      	bls.n	800b32a <_malloc_r+0xc2>
 800b2fa:	1961      	adds	r1, r4, r5
 800b2fc:	42a3      	cmp	r3, r4
 800b2fe:	6025      	str	r5, [r4, #0]
 800b300:	bf18      	it	ne
 800b302:	6059      	strne	r1, [r3, #4]
 800b304:	6863      	ldr	r3, [r4, #4]
 800b306:	bf08      	it	eq
 800b308:	f8c8 1000 	streq.w	r1, [r8]
 800b30c:	5162      	str	r2, [r4, r5]
 800b30e:	604b      	str	r3, [r1, #4]
 800b310:	4630      	mov	r0, r6
 800b312:	f000 f82f 	bl	800b374 <__malloc_unlock>
 800b316:	f104 000b 	add.w	r0, r4, #11
 800b31a:	1d23      	adds	r3, r4, #4
 800b31c:	f020 0007 	bic.w	r0, r0, #7
 800b320:	1ac2      	subs	r2, r0, r3
 800b322:	bf1c      	itt	ne
 800b324:	1a1b      	subne	r3, r3, r0
 800b326:	50a3      	strne	r3, [r4, r2]
 800b328:	e7af      	b.n	800b28a <_malloc_r+0x22>
 800b32a:	6862      	ldr	r2, [r4, #4]
 800b32c:	42a3      	cmp	r3, r4
 800b32e:	bf0c      	ite	eq
 800b330:	f8c8 2000 	streq.w	r2, [r8]
 800b334:	605a      	strne	r2, [r3, #4]
 800b336:	e7eb      	b.n	800b310 <_malloc_r+0xa8>
 800b338:	4623      	mov	r3, r4
 800b33a:	6864      	ldr	r4, [r4, #4]
 800b33c:	e7ae      	b.n	800b29c <_malloc_r+0x34>
 800b33e:	463c      	mov	r4, r7
 800b340:	687f      	ldr	r7, [r7, #4]
 800b342:	e7b6      	b.n	800b2b2 <_malloc_r+0x4a>
 800b344:	461a      	mov	r2, r3
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	42a3      	cmp	r3, r4
 800b34a:	d1fb      	bne.n	800b344 <_malloc_r+0xdc>
 800b34c:	2300      	movs	r3, #0
 800b34e:	6053      	str	r3, [r2, #4]
 800b350:	e7de      	b.n	800b310 <_malloc_r+0xa8>
 800b352:	230c      	movs	r3, #12
 800b354:	6033      	str	r3, [r6, #0]
 800b356:	4630      	mov	r0, r6
 800b358:	f000 f80c 	bl	800b374 <__malloc_unlock>
 800b35c:	e794      	b.n	800b288 <_malloc_r+0x20>
 800b35e:	6005      	str	r5, [r0, #0]
 800b360:	e7d6      	b.n	800b310 <_malloc_r+0xa8>
 800b362:	bf00      	nop
 800b364:	20001394 	.word	0x20001394

0800b368 <__malloc_lock>:
 800b368:	4801      	ldr	r0, [pc, #4]	@ (800b370 <__malloc_lock+0x8>)
 800b36a:	f7ff bf01 	b.w	800b170 <__retarget_lock_acquire_recursive>
 800b36e:	bf00      	nop
 800b370:	2000138c 	.word	0x2000138c

0800b374 <__malloc_unlock>:
 800b374:	4801      	ldr	r0, [pc, #4]	@ (800b37c <__malloc_unlock+0x8>)
 800b376:	f7ff befc 	b.w	800b172 <__retarget_lock_release_recursive>
 800b37a:	bf00      	nop
 800b37c:	2000138c 	.word	0x2000138c

0800b380 <__ssputs_r>:
 800b380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b384:	688e      	ldr	r6, [r1, #8]
 800b386:	461f      	mov	r7, r3
 800b388:	42be      	cmp	r6, r7
 800b38a:	680b      	ldr	r3, [r1, #0]
 800b38c:	4682      	mov	sl, r0
 800b38e:	460c      	mov	r4, r1
 800b390:	4690      	mov	r8, r2
 800b392:	d82d      	bhi.n	800b3f0 <__ssputs_r+0x70>
 800b394:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b398:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b39c:	d026      	beq.n	800b3ec <__ssputs_r+0x6c>
 800b39e:	6965      	ldr	r5, [r4, #20]
 800b3a0:	6909      	ldr	r1, [r1, #16]
 800b3a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3a6:	eba3 0901 	sub.w	r9, r3, r1
 800b3aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3ae:	1c7b      	adds	r3, r7, #1
 800b3b0:	444b      	add	r3, r9
 800b3b2:	106d      	asrs	r5, r5, #1
 800b3b4:	429d      	cmp	r5, r3
 800b3b6:	bf38      	it	cc
 800b3b8:	461d      	movcc	r5, r3
 800b3ba:	0553      	lsls	r3, r2, #21
 800b3bc:	d527      	bpl.n	800b40e <__ssputs_r+0x8e>
 800b3be:	4629      	mov	r1, r5
 800b3c0:	f7ff ff52 	bl	800b268 <_malloc_r>
 800b3c4:	4606      	mov	r6, r0
 800b3c6:	b360      	cbz	r0, 800b422 <__ssputs_r+0xa2>
 800b3c8:	6921      	ldr	r1, [r4, #16]
 800b3ca:	464a      	mov	r2, r9
 800b3cc:	f7ff fed2 	bl	800b174 <memcpy>
 800b3d0:	89a3      	ldrh	r3, [r4, #12]
 800b3d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b3d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3da:	81a3      	strh	r3, [r4, #12]
 800b3dc:	6126      	str	r6, [r4, #16]
 800b3de:	6165      	str	r5, [r4, #20]
 800b3e0:	444e      	add	r6, r9
 800b3e2:	eba5 0509 	sub.w	r5, r5, r9
 800b3e6:	6026      	str	r6, [r4, #0]
 800b3e8:	60a5      	str	r5, [r4, #8]
 800b3ea:	463e      	mov	r6, r7
 800b3ec:	42be      	cmp	r6, r7
 800b3ee:	d900      	bls.n	800b3f2 <__ssputs_r+0x72>
 800b3f0:	463e      	mov	r6, r7
 800b3f2:	6820      	ldr	r0, [r4, #0]
 800b3f4:	4632      	mov	r2, r6
 800b3f6:	4641      	mov	r1, r8
 800b3f8:	f000 faa6 	bl	800b948 <memmove>
 800b3fc:	68a3      	ldr	r3, [r4, #8]
 800b3fe:	1b9b      	subs	r3, r3, r6
 800b400:	60a3      	str	r3, [r4, #8]
 800b402:	6823      	ldr	r3, [r4, #0]
 800b404:	4433      	add	r3, r6
 800b406:	6023      	str	r3, [r4, #0]
 800b408:	2000      	movs	r0, #0
 800b40a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b40e:	462a      	mov	r2, r5
 800b410:	f000 fac4 	bl	800b99c <_realloc_r>
 800b414:	4606      	mov	r6, r0
 800b416:	2800      	cmp	r0, #0
 800b418:	d1e0      	bne.n	800b3dc <__ssputs_r+0x5c>
 800b41a:	6921      	ldr	r1, [r4, #16]
 800b41c:	4650      	mov	r0, sl
 800b41e:	f7ff feb7 	bl	800b190 <_free_r>
 800b422:	230c      	movs	r3, #12
 800b424:	f8ca 3000 	str.w	r3, [sl]
 800b428:	89a3      	ldrh	r3, [r4, #12]
 800b42a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b42e:	81a3      	strh	r3, [r4, #12]
 800b430:	f04f 30ff 	mov.w	r0, #4294967295
 800b434:	e7e9      	b.n	800b40a <__ssputs_r+0x8a>
	...

0800b438 <_svfiprintf_r>:
 800b438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43c:	4698      	mov	r8, r3
 800b43e:	898b      	ldrh	r3, [r1, #12]
 800b440:	061b      	lsls	r3, r3, #24
 800b442:	b09d      	sub	sp, #116	@ 0x74
 800b444:	4607      	mov	r7, r0
 800b446:	460d      	mov	r5, r1
 800b448:	4614      	mov	r4, r2
 800b44a:	d510      	bpl.n	800b46e <_svfiprintf_r+0x36>
 800b44c:	690b      	ldr	r3, [r1, #16]
 800b44e:	b973      	cbnz	r3, 800b46e <_svfiprintf_r+0x36>
 800b450:	2140      	movs	r1, #64	@ 0x40
 800b452:	f7ff ff09 	bl	800b268 <_malloc_r>
 800b456:	6028      	str	r0, [r5, #0]
 800b458:	6128      	str	r0, [r5, #16]
 800b45a:	b930      	cbnz	r0, 800b46a <_svfiprintf_r+0x32>
 800b45c:	230c      	movs	r3, #12
 800b45e:	603b      	str	r3, [r7, #0]
 800b460:	f04f 30ff 	mov.w	r0, #4294967295
 800b464:	b01d      	add	sp, #116	@ 0x74
 800b466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b46a:	2340      	movs	r3, #64	@ 0x40
 800b46c:	616b      	str	r3, [r5, #20]
 800b46e:	2300      	movs	r3, #0
 800b470:	9309      	str	r3, [sp, #36]	@ 0x24
 800b472:	2320      	movs	r3, #32
 800b474:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b478:	f8cd 800c 	str.w	r8, [sp, #12]
 800b47c:	2330      	movs	r3, #48	@ 0x30
 800b47e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b61c <_svfiprintf_r+0x1e4>
 800b482:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b486:	f04f 0901 	mov.w	r9, #1
 800b48a:	4623      	mov	r3, r4
 800b48c:	469a      	mov	sl, r3
 800b48e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b492:	b10a      	cbz	r2, 800b498 <_svfiprintf_r+0x60>
 800b494:	2a25      	cmp	r2, #37	@ 0x25
 800b496:	d1f9      	bne.n	800b48c <_svfiprintf_r+0x54>
 800b498:	ebba 0b04 	subs.w	fp, sl, r4
 800b49c:	d00b      	beq.n	800b4b6 <_svfiprintf_r+0x7e>
 800b49e:	465b      	mov	r3, fp
 800b4a0:	4622      	mov	r2, r4
 800b4a2:	4629      	mov	r1, r5
 800b4a4:	4638      	mov	r0, r7
 800b4a6:	f7ff ff6b 	bl	800b380 <__ssputs_r>
 800b4aa:	3001      	adds	r0, #1
 800b4ac:	f000 80a7 	beq.w	800b5fe <_svfiprintf_r+0x1c6>
 800b4b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4b2:	445a      	add	r2, fp
 800b4b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	f000 809f 	beq.w	800b5fe <_svfiprintf_r+0x1c6>
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4ca:	f10a 0a01 	add.w	sl, sl, #1
 800b4ce:	9304      	str	r3, [sp, #16]
 800b4d0:	9307      	str	r3, [sp, #28]
 800b4d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4d8:	4654      	mov	r4, sl
 800b4da:	2205      	movs	r2, #5
 800b4dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4e0:	484e      	ldr	r0, [pc, #312]	@ (800b61c <_svfiprintf_r+0x1e4>)
 800b4e2:	f7f4 fe85 	bl	80001f0 <memchr>
 800b4e6:	9a04      	ldr	r2, [sp, #16]
 800b4e8:	b9d8      	cbnz	r0, 800b522 <_svfiprintf_r+0xea>
 800b4ea:	06d0      	lsls	r0, r2, #27
 800b4ec:	bf44      	itt	mi
 800b4ee:	2320      	movmi	r3, #32
 800b4f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4f4:	0711      	lsls	r1, r2, #28
 800b4f6:	bf44      	itt	mi
 800b4f8:	232b      	movmi	r3, #43	@ 0x2b
 800b4fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4fe:	f89a 3000 	ldrb.w	r3, [sl]
 800b502:	2b2a      	cmp	r3, #42	@ 0x2a
 800b504:	d015      	beq.n	800b532 <_svfiprintf_r+0xfa>
 800b506:	9a07      	ldr	r2, [sp, #28]
 800b508:	4654      	mov	r4, sl
 800b50a:	2000      	movs	r0, #0
 800b50c:	f04f 0c0a 	mov.w	ip, #10
 800b510:	4621      	mov	r1, r4
 800b512:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b516:	3b30      	subs	r3, #48	@ 0x30
 800b518:	2b09      	cmp	r3, #9
 800b51a:	d94b      	bls.n	800b5b4 <_svfiprintf_r+0x17c>
 800b51c:	b1b0      	cbz	r0, 800b54c <_svfiprintf_r+0x114>
 800b51e:	9207      	str	r2, [sp, #28]
 800b520:	e014      	b.n	800b54c <_svfiprintf_r+0x114>
 800b522:	eba0 0308 	sub.w	r3, r0, r8
 800b526:	fa09 f303 	lsl.w	r3, r9, r3
 800b52a:	4313      	orrs	r3, r2
 800b52c:	9304      	str	r3, [sp, #16]
 800b52e:	46a2      	mov	sl, r4
 800b530:	e7d2      	b.n	800b4d8 <_svfiprintf_r+0xa0>
 800b532:	9b03      	ldr	r3, [sp, #12]
 800b534:	1d19      	adds	r1, r3, #4
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	9103      	str	r1, [sp, #12]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	bfbb      	ittet	lt
 800b53e:	425b      	neglt	r3, r3
 800b540:	f042 0202 	orrlt.w	r2, r2, #2
 800b544:	9307      	strge	r3, [sp, #28]
 800b546:	9307      	strlt	r3, [sp, #28]
 800b548:	bfb8      	it	lt
 800b54a:	9204      	strlt	r2, [sp, #16]
 800b54c:	7823      	ldrb	r3, [r4, #0]
 800b54e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b550:	d10a      	bne.n	800b568 <_svfiprintf_r+0x130>
 800b552:	7863      	ldrb	r3, [r4, #1]
 800b554:	2b2a      	cmp	r3, #42	@ 0x2a
 800b556:	d132      	bne.n	800b5be <_svfiprintf_r+0x186>
 800b558:	9b03      	ldr	r3, [sp, #12]
 800b55a:	1d1a      	adds	r2, r3, #4
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	9203      	str	r2, [sp, #12]
 800b560:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b564:	3402      	adds	r4, #2
 800b566:	9305      	str	r3, [sp, #20]
 800b568:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b62c <_svfiprintf_r+0x1f4>
 800b56c:	7821      	ldrb	r1, [r4, #0]
 800b56e:	2203      	movs	r2, #3
 800b570:	4650      	mov	r0, sl
 800b572:	f7f4 fe3d 	bl	80001f0 <memchr>
 800b576:	b138      	cbz	r0, 800b588 <_svfiprintf_r+0x150>
 800b578:	9b04      	ldr	r3, [sp, #16]
 800b57a:	eba0 000a 	sub.w	r0, r0, sl
 800b57e:	2240      	movs	r2, #64	@ 0x40
 800b580:	4082      	lsls	r2, r0
 800b582:	4313      	orrs	r3, r2
 800b584:	3401      	adds	r4, #1
 800b586:	9304      	str	r3, [sp, #16]
 800b588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b58c:	4824      	ldr	r0, [pc, #144]	@ (800b620 <_svfiprintf_r+0x1e8>)
 800b58e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b592:	2206      	movs	r2, #6
 800b594:	f7f4 fe2c 	bl	80001f0 <memchr>
 800b598:	2800      	cmp	r0, #0
 800b59a:	d036      	beq.n	800b60a <_svfiprintf_r+0x1d2>
 800b59c:	4b21      	ldr	r3, [pc, #132]	@ (800b624 <_svfiprintf_r+0x1ec>)
 800b59e:	bb1b      	cbnz	r3, 800b5e8 <_svfiprintf_r+0x1b0>
 800b5a0:	9b03      	ldr	r3, [sp, #12]
 800b5a2:	3307      	adds	r3, #7
 800b5a4:	f023 0307 	bic.w	r3, r3, #7
 800b5a8:	3308      	adds	r3, #8
 800b5aa:	9303      	str	r3, [sp, #12]
 800b5ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ae:	4433      	add	r3, r6
 800b5b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5b2:	e76a      	b.n	800b48a <_svfiprintf_r+0x52>
 800b5b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5b8:	460c      	mov	r4, r1
 800b5ba:	2001      	movs	r0, #1
 800b5bc:	e7a8      	b.n	800b510 <_svfiprintf_r+0xd8>
 800b5be:	2300      	movs	r3, #0
 800b5c0:	3401      	adds	r4, #1
 800b5c2:	9305      	str	r3, [sp, #20]
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	f04f 0c0a 	mov.w	ip, #10
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5d0:	3a30      	subs	r2, #48	@ 0x30
 800b5d2:	2a09      	cmp	r2, #9
 800b5d4:	d903      	bls.n	800b5de <_svfiprintf_r+0x1a6>
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d0c6      	beq.n	800b568 <_svfiprintf_r+0x130>
 800b5da:	9105      	str	r1, [sp, #20]
 800b5dc:	e7c4      	b.n	800b568 <_svfiprintf_r+0x130>
 800b5de:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5e2:	4604      	mov	r4, r0
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e7f0      	b.n	800b5ca <_svfiprintf_r+0x192>
 800b5e8:	ab03      	add	r3, sp, #12
 800b5ea:	9300      	str	r3, [sp, #0]
 800b5ec:	462a      	mov	r2, r5
 800b5ee:	4b0e      	ldr	r3, [pc, #56]	@ (800b628 <_svfiprintf_r+0x1f0>)
 800b5f0:	a904      	add	r1, sp, #16
 800b5f2:	4638      	mov	r0, r7
 800b5f4:	f3af 8000 	nop.w
 800b5f8:	1c42      	adds	r2, r0, #1
 800b5fa:	4606      	mov	r6, r0
 800b5fc:	d1d6      	bne.n	800b5ac <_svfiprintf_r+0x174>
 800b5fe:	89ab      	ldrh	r3, [r5, #12]
 800b600:	065b      	lsls	r3, r3, #25
 800b602:	f53f af2d 	bmi.w	800b460 <_svfiprintf_r+0x28>
 800b606:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b608:	e72c      	b.n	800b464 <_svfiprintf_r+0x2c>
 800b60a:	ab03      	add	r3, sp, #12
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	462a      	mov	r2, r5
 800b610:	4b05      	ldr	r3, [pc, #20]	@ (800b628 <_svfiprintf_r+0x1f0>)
 800b612:	a904      	add	r1, sp, #16
 800b614:	4638      	mov	r0, r7
 800b616:	f000 f879 	bl	800b70c <_printf_i>
 800b61a:	e7ed      	b.n	800b5f8 <_svfiprintf_r+0x1c0>
 800b61c:	0800c2f8 	.word	0x0800c2f8
 800b620:	0800c302 	.word	0x0800c302
 800b624:	00000000 	.word	0x00000000
 800b628:	0800b381 	.word	0x0800b381
 800b62c:	0800c2fe 	.word	0x0800c2fe

0800b630 <_printf_common>:
 800b630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b634:	4616      	mov	r6, r2
 800b636:	4698      	mov	r8, r3
 800b638:	688a      	ldr	r2, [r1, #8]
 800b63a:	690b      	ldr	r3, [r1, #16]
 800b63c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b640:	4293      	cmp	r3, r2
 800b642:	bfb8      	it	lt
 800b644:	4613      	movlt	r3, r2
 800b646:	6033      	str	r3, [r6, #0]
 800b648:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b64c:	4607      	mov	r7, r0
 800b64e:	460c      	mov	r4, r1
 800b650:	b10a      	cbz	r2, 800b656 <_printf_common+0x26>
 800b652:	3301      	adds	r3, #1
 800b654:	6033      	str	r3, [r6, #0]
 800b656:	6823      	ldr	r3, [r4, #0]
 800b658:	0699      	lsls	r1, r3, #26
 800b65a:	bf42      	ittt	mi
 800b65c:	6833      	ldrmi	r3, [r6, #0]
 800b65e:	3302      	addmi	r3, #2
 800b660:	6033      	strmi	r3, [r6, #0]
 800b662:	6825      	ldr	r5, [r4, #0]
 800b664:	f015 0506 	ands.w	r5, r5, #6
 800b668:	d106      	bne.n	800b678 <_printf_common+0x48>
 800b66a:	f104 0a19 	add.w	sl, r4, #25
 800b66e:	68e3      	ldr	r3, [r4, #12]
 800b670:	6832      	ldr	r2, [r6, #0]
 800b672:	1a9b      	subs	r3, r3, r2
 800b674:	42ab      	cmp	r3, r5
 800b676:	dc26      	bgt.n	800b6c6 <_printf_common+0x96>
 800b678:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b67c:	6822      	ldr	r2, [r4, #0]
 800b67e:	3b00      	subs	r3, #0
 800b680:	bf18      	it	ne
 800b682:	2301      	movne	r3, #1
 800b684:	0692      	lsls	r2, r2, #26
 800b686:	d42b      	bmi.n	800b6e0 <_printf_common+0xb0>
 800b688:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b68c:	4641      	mov	r1, r8
 800b68e:	4638      	mov	r0, r7
 800b690:	47c8      	blx	r9
 800b692:	3001      	adds	r0, #1
 800b694:	d01e      	beq.n	800b6d4 <_printf_common+0xa4>
 800b696:	6823      	ldr	r3, [r4, #0]
 800b698:	6922      	ldr	r2, [r4, #16]
 800b69a:	f003 0306 	and.w	r3, r3, #6
 800b69e:	2b04      	cmp	r3, #4
 800b6a0:	bf02      	ittt	eq
 800b6a2:	68e5      	ldreq	r5, [r4, #12]
 800b6a4:	6833      	ldreq	r3, [r6, #0]
 800b6a6:	1aed      	subeq	r5, r5, r3
 800b6a8:	68a3      	ldr	r3, [r4, #8]
 800b6aa:	bf0c      	ite	eq
 800b6ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6b0:	2500      	movne	r5, #0
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	bfc4      	itt	gt
 800b6b6:	1a9b      	subgt	r3, r3, r2
 800b6b8:	18ed      	addgt	r5, r5, r3
 800b6ba:	2600      	movs	r6, #0
 800b6bc:	341a      	adds	r4, #26
 800b6be:	42b5      	cmp	r5, r6
 800b6c0:	d11a      	bne.n	800b6f8 <_printf_common+0xc8>
 800b6c2:	2000      	movs	r0, #0
 800b6c4:	e008      	b.n	800b6d8 <_printf_common+0xa8>
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	4652      	mov	r2, sl
 800b6ca:	4641      	mov	r1, r8
 800b6cc:	4638      	mov	r0, r7
 800b6ce:	47c8      	blx	r9
 800b6d0:	3001      	adds	r0, #1
 800b6d2:	d103      	bne.n	800b6dc <_printf_common+0xac>
 800b6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6dc:	3501      	adds	r5, #1
 800b6de:	e7c6      	b.n	800b66e <_printf_common+0x3e>
 800b6e0:	18e1      	adds	r1, r4, r3
 800b6e2:	1c5a      	adds	r2, r3, #1
 800b6e4:	2030      	movs	r0, #48	@ 0x30
 800b6e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b6ea:	4422      	add	r2, r4
 800b6ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b6f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b6f4:	3302      	adds	r3, #2
 800b6f6:	e7c7      	b.n	800b688 <_printf_common+0x58>
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	4622      	mov	r2, r4
 800b6fc:	4641      	mov	r1, r8
 800b6fe:	4638      	mov	r0, r7
 800b700:	47c8      	blx	r9
 800b702:	3001      	adds	r0, #1
 800b704:	d0e6      	beq.n	800b6d4 <_printf_common+0xa4>
 800b706:	3601      	adds	r6, #1
 800b708:	e7d9      	b.n	800b6be <_printf_common+0x8e>
	...

0800b70c <_printf_i>:
 800b70c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b710:	7e0f      	ldrb	r7, [r1, #24]
 800b712:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b714:	2f78      	cmp	r7, #120	@ 0x78
 800b716:	4691      	mov	r9, r2
 800b718:	4680      	mov	r8, r0
 800b71a:	460c      	mov	r4, r1
 800b71c:	469a      	mov	sl, r3
 800b71e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b722:	d807      	bhi.n	800b734 <_printf_i+0x28>
 800b724:	2f62      	cmp	r7, #98	@ 0x62
 800b726:	d80a      	bhi.n	800b73e <_printf_i+0x32>
 800b728:	2f00      	cmp	r7, #0
 800b72a:	f000 80d1 	beq.w	800b8d0 <_printf_i+0x1c4>
 800b72e:	2f58      	cmp	r7, #88	@ 0x58
 800b730:	f000 80b8 	beq.w	800b8a4 <_printf_i+0x198>
 800b734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b738:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b73c:	e03a      	b.n	800b7b4 <_printf_i+0xa8>
 800b73e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b742:	2b15      	cmp	r3, #21
 800b744:	d8f6      	bhi.n	800b734 <_printf_i+0x28>
 800b746:	a101      	add	r1, pc, #4	@ (adr r1, 800b74c <_printf_i+0x40>)
 800b748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b74c:	0800b7a5 	.word	0x0800b7a5
 800b750:	0800b7b9 	.word	0x0800b7b9
 800b754:	0800b735 	.word	0x0800b735
 800b758:	0800b735 	.word	0x0800b735
 800b75c:	0800b735 	.word	0x0800b735
 800b760:	0800b735 	.word	0x0800b735
 800b764:	0800b7b9 	.word	0x0800b7b9
 800b768:	0800b735 	.word	0x0800b735
 800b76c:	0800b735 	.word	0x0800b735
 800b770:	0800b735 	.word	0x0800b735
 800b774:	0800b735 	.word	0x0800b735
 800b778:	0800b8b7 	.word	0x0800b8b7
 800b77c:	0800b7e3 	.word	0x0800b7e3
 800b780:	0800b871 	.word	0x0800b871
 800b784:	0800b735 	.word	0x0800b735
 800b788:	0800b735 	.word	0x0800b735
 800b78c:	0800b8d9 	.word	0x0800b8d9
 800b790:	0800b735 	.word	0x0800b735
 800b794:	0800b7e3 	.word	0x0800b7e3
 800b798:	0800b735 	.word	0x0800b735
 800b79c:	0800b735 	.word	0x0800b735
 800b7a0:	0800b879 	.word	0x0800b879
 800b7a4:	6833      	ldr	r3, [r6, #0]
 800b7a6:	1d1a      	adds	r2, r3, #4
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	6032      	str	r2, [r6, #0]
 800b7ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	e09c      	b.n	800b8f2 <_printf_i+0x1e6>
 800b7b8:	6833      	ldr	r3, [r6, #0]
 800b7ba:	6820      	ldr	r0, [r4, #0]
 800b7bc:	1d19      	adds	r1, r3, #4
 800b7be:	6031      	str	r1, [r6, #0]
 800b7c0:	0606      	lsls	r6, r0, #24
 800b7c2:	d501      	bpl.n	800b7c8 <_printf_i+0xbc>
 800b7c4:	681d      	ldr	r5, [r3, #0]
 800b7c6:	e003      	b.n	800b7d0 <_printf_i+0xc4>
 800b7c8:	0645      	lsls	r5, r0, #25
 800b7ca:	d5fb      	bpl.n	800b7c4 <_printf_i+0xb8>
 800b7cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b7d0:	2d00      	cmp	r5, #0
 800b7d2:	da03      	bge.n	800b7dc <_printf_i+0xd0>
 800b7d4:	232d      	movs	r3, #45	@ 0x2d
 800b7d6:	426d      	negs	r5, r5
 800b7d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7dc:	4858      	ldr	r0, [pc, #352]	@ (800b940 <_printf_i+0x234>)
 800b7de:	230a      	movs	r3, #10
 800b7e0:	e011      	b.n	800b806 <_printf_i+0xfa>
 800b7e2:	6821      	ldr	r1, [r4, #0]
 800b7e4:	6833      	ldr	r3, [r6, #0]
 800b7e6:	0608      	lsls	r0, r1, #24
 800b7e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b7ec:	d402      	bmi.n	800b7f4 <_printf_i+0xe8>
 800b7ee:	0649      	lsls	r1, r1, #25
 800b7f0:	bf48      	it	mi
 800b7f2:	b2ad      	uxthmi	r5, r5
 800b7f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b7f6:	4852      	ldr	r0, [pc, #328]	@ (800b940 <_printf_i+0x234>)
 800b7f8:	6033      	str	r3, [r6, #0]
 800b7fa:	bf14      	ite	ne
 800b7fc:	230a      	movne	r3, #10
 800b7fe:	2308      	moveq	r3, #8
 800b800:	2100      	movs	r1, #0
 800b802:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b806:	6866      	ldr	r6, [r4, #4]
 800b808:	60a6      	str	r6, [r4, #8]
 800b80a:	2e00      	cmp	r6, #0
 800b80c:	db05      	blt.n	800b81a <_printf_i+0x10e>
 800b80e:	6821      	ldr	r1, [r4, #0]
 800b810:	432e      	orrs	r6, r5
 800b812:	f021 0104 	bic.w	r1, r1, #4
 800b816:	6021      	str	r1, [r4, #0]
 800b818:	d04b      	beq.n	800b8b2 <_printf_i+0x1a6>
 800b81a:	4616      	mov	r6, r2
 800b81c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b820:	fb03 5711 	mls	r7, r3, r1, r5
 800b824:	5dc7      	ldrb	r7, [r0, r7]
 800b826:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b82a:	462f      	mov	r7, r5
 800b82c:	42bb      	cmp	r3, r7
 800b82e:	460d      	mov	r5, r1
 800b830:	d9f4      	bls.n	800b81c <_printf_i+0x110>
 800b832:	2b08      	cmp	r3, #8
 800b834:	d10b      	bne.n	800b84e <_printf_i+0x142>
 800b836:	6823      	ldr	r3, [r4, #0]
 800b838:	07df      	lsls	r7, r3, #31
 800b83a:	d508      	bpl.n	800b84e <_printf_i+0x142>
 800b83c:	6923      	ldr	r3, [r4, #16]
 800b83e:	6861      	ldr	r1, [r4, #4]
 800b840:	4299      	cmp	r1, r3
 800b842:	bfde      	ittt	le
 800b844:	2330      	movle	r3, #48	@ 0x30
 800b846:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b84a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b84e:	1b92      	subs	r2, r2, r6
 800b850:	6122      	str	r2, [r4, #16]
 800b852:	f8cd a000 	str.w	sl, [sp]
 800b856:	464b      	mov	r3, r9
 800b858:	aa03      	add	r2, sp, #12
 800b85a:	4621      	mov	r1, r4
 800b85c:	4640      	mov	r0, r8
 800b85e:	f7ff fee7 	bl	800b630 <_printf_common>
 800b862:	3001      	adds	r0, #1
 800b864:	d14a      	bne.n	800b8fc <_printf_i+0x1f0>
 800b866:	f04f 30ff 	mov.w	r0, #4294967295
 800b86a:	b004      	add	sp, #16
 800b86c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b870:	6823      	ldr	r3, [r4, #0]
 800b872:	f043 0320 	orr.w	r3, r3, #32
 800b876:	6023      	str	r3, [r4, #0]
 800b878:	4832      	ldr	r0, [pc, #200]	@ (800b944 <_printf_i+0x238>)
 800b87a:	2778      	movs	r7, #120	@ 0x78
 800b87c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b880:	6823      	ldr	r3, [r4, #0]
 800b882:	6831      	ldr	r1, [r6, #0]
 800b884:	061f      	lsls	r7, r3, #24
 800b886:	f851 5b04 	ldr.w	r5, [r1], #4
 800b88a:	d402      	bmi.n	800b892 <_printf_i+0x186>
 800b88c:	065f      	lsls	r7, r3, #25
 800b88e:	bf48      	it	mi
 800b890:	b2ad      	uxthmi	r5, r5
 800b892:	6031      	str	r1, [r6, #0]
 800b894:	07d9      	lsls	r1, r3, #31
 800b896:	bf44      	itt	mi
 800b898:	f043 0320 	orrmi.w	r3, r3, #32
 800b89c:	6023      	strmi	r3, [r4, #0]
 800b89e:	b11d      	cbz	r5, 800b8a8 <_printf_i+0x19c>
 800b8a0:	2310      	movs	r3, #16
 800b8a2:	e7ad      	b.n	800b800 <_printf_i+0xf4>
 800b8a4:	4826      	ldr	r0, [pc, #152]	@ (800b940 <_printf_i+0x234>)
 800b8a6:	e7e9      	b.n	800b87c <_printf_i+0x170>
 800b8a8:	6823      	ldr	r3, [r4, #0]
 800b8aa:	f023 0320 	bic.w	r3, r3, #32
 800b8ae:	6023      	str	r3, [r4, #0]
 800b8b0:	e7f6      	b.n	800b8a0 <_printf_i+0x194>
 800b8b2:	4616      	mov	r6, r2
 800b8b4:	e7bd      	b.n	800b832 <_printf_i+0x126>
 800b8b6:	6833      	ldr	r3, [r6, #0]
 800b8b8:	6825      	ldr	r5, [r4, #0]
 800b8ba:	6961      	ldr	r1, [r4, #20]
 800b8bc:	1d18      	adds	r0, r3, #4
 800b8be:	6030      	str	r0, [r6, #0]
 800b8c0:	062e      	lsls	r6, r5, #24
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	d501      	bpl.n	800b8ca <_printf_i+0x1be>
 800b8c6:	6019      	str	r1, [r3, #0]
 800b8c8:	e002      	b.n	800b8d0 <_printf_i+0x1c4>
 800b8ca:	0668      	lsls	r0, r5, #25
 800b8cc:	d5fb      	bpl.n	800b8c6 <_printf_i+0x1ba>
 800b8ce:	8019      	strh	r1, [r3, #0]
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	6123      	str	r3, [r4, #16]
 800b8d4:	4616      	mov	r6, r2
 800b8d6:	e7bc      	b.n	800b852 <_printf_i+0x146>
 800b8d8:	6833      	ldr	r3, [r6, #0]
 800b8da:	1d1a      	adds	r2, r3, #4
 800b8dc:	6032      	str	r2, [r6, #0]
 800b8de:	681e      	ldr	r6, [r3, #0]
 800b8e0:	6862      	ldr	r2, [r4, #4]
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	4630      	mov	r0, r6
 800b8e6:	f7f4 fc83 	bl	80001f0 <memchr>
 800b8ea:	b108      	cbz	r0, 800b8f0 <_printf_i+0x1e4>
 800b8ec:	1b80      	subs	r0, r0, r6
 800b8ee:	6060      	str	r0, [r4, #4]
 800b8f0:	6863      	ldr	r3, [r4, #4]
 800b8f2:	6123      	str	r3, [r4, #16]
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8fa:	e7aa      	b.n	800b852 <_printf_i+0x146>
 800b8fc:	6923      	ldr	r3, [r4, #16]
 800b8fe:	4632      	mov	r2, r6
 800b900:	4649      	mov	r1, r9
 800b902:	4640      	mov	r0, r8
 800b904:	47d0      	blx	sl
 800b906:	3001      	adds	r0, #1
 800b908:	d0ad      	beq.n	800b866 <_printf_i+0x15a>
 800b90a:	6823      	ldr	r3, [r4, #0]
 800b90c:	079b      	lsls	r3, r3, #30
 800b90e:	d413      	bmi.n	800b938 <_printf_i+0x22c>
 800b910:	68e0      	ldr	r0, [r4, #12]
 800b912:	9b03      	ldr	r3, [sp, #12]
 800b914:	4298      	cmp	r0, r3
 800b916:	bfb8      	it	lt
 800b918:	4618      	movlt	r0, r3
 800b91a:	e7a6      	b.n	800b86a <_printf_i+0x15e>
 800b91c:	2301      	movs	r3, #1
 800b91e:	4632      	mov	r2, r6
 800b920:	4649      	mov	r1, r9
 800b922:	4640      	mov	r0, r8
 800b924:	47d0      	blx	sl
 800b926:	3001      	adds	r0, #1
 800b928:	d09d      	beq.n	800b866 <_printf_i+0x15a>
 800b92a:	3501      	adds	r5, #1
 800b92c:	68e3      	ldr	r3, [r4, #12]
 800b92e:	9903      	ldr	r1, [sp, #12]
 800b930:	1a5b      	subs	r3, r3, r1
 800b932:	42ab      	cmp	r3, r5
 800b934:	dcf2      	bgt.n	800b91c <_printf_i+0x210>
 800b936:	e7eb      	b.n	800b910 <_printf_i+0x204>
 800b938:	2500      	movs	r5, #0
 800b93a:	f104 0619 	add.w	r6, r4, #25
 800b93e:	e7f5      	b.n	800b92c <_printf_i+0x220>
 800b940:	0800c309 	.word	0x0800c309
 800b944:	0800c31a 	.word	0x0800c31a

0800b948 <memmove>:
 800b948:	4288      	cmp	r0, r1
 800b94a:	b510      	push	{r4, lr}
 800b94c:	eb01 0402 	add.w	r4, r1, r2
 800b950:	d902      	bls.n	800b958 <memmove+0x10>
 800b952:	4284      	cmp	r4, r0
 800b954:	4623      	mov	r3, r4
 800b956:	d807      	bhi.n	800b968 <memmove+0x20>
 800b958:	1e43      	subs	r3, r0, #1
 800b95a:	42a1      	cmp	r1, r4
 800b95c:	d008      	beq.n	800b970 <memmove+0x28>
 800b95e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b962:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b966:	e7f8      	b.n	800b95a <memmove+0x12>
 800b968:	4402      	add	r2, r0
 800b96a:	4601      	mov	r1, r0
 800b96c:	428a      	cmp	r2, r1
 800b96e:	d100      	bne.n	800b972 <memmove+0x2a>
 800b970:	bd10      	pop	{r4, pc}
 800b972:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b976:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b97a:	e7f7      	b.n	800b96c <memmove+0x24>

0800b97c <_sbrk_r>:
 800b97c:	b538      	push	{r3, r4, r5, lr}
 800b97e:	4d06      	ldr	r5, [pc, #24]	@ (800b998 <_sbrk_r+0x1c>)
 800b980:	2300      	movs	r3, #0
 800b982:	4604      	mov	r4, r0
 800b984:	4608      	mov	r0, r1
 800b986:	602b      	str	r3, [r5, #0]
 800b988:	f7f6 fd34 	bl	80023f4 <_sbrk>
 800b98c:	1c43      	adds	r3, r0, #1
 800b98e:	d102      	bne.n	800b996 <_sbrk_r+0x1a>
 800b990:	682b      	ldr	r3, [r5, #0]
 800b992:	b103      	cbz	r3, 800b996 <_sbrk_r+0x1a>
 800b994:	6023      	str	r3, [r4, #0]
 800b996:	bd38      	pop	{r3, r4, r5, pc}
 800b998:	20001388 	.word	0x20001388

0800b99c <_realloc_r>:
 800b99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a0:	4607      	mov	r7, r0
 800b9a2:	4614      	mov	r4, r2
 800b9a4:	460d      	mov	r5, r1
 800b9a6:	b921      	cbnz	r1, 800b9b2 <_realloc_r+0x16>
 800b9a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ac:	4611      	mov	r1, r2
 800b9ae:	f7ff bc5b 	b.w	800b268 <_malloc_r>
 800b9b2:	b92a      	cbnz	r2, 800b9c0 <_realloc_r+0x24>
 800b9b4:	f7ff fbec 	bl	800b190 <_free_r>
 800b9b8:	4625      	mov	r5, r4
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9c0:	f000 f81a 	bl	800b9f8 <_malloc_usable_size_r>
 800b9c4:	4284      	cmp	r4, r0
 800b9c6:	4606      	mov	r6, r0
 800b9c8:	d802      	bhi.n	800b9d0 <_realloc_r+0x34>
 800b9ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9ce:	d8f4      	bhi.n	800b9ba <_realloc_r+0x1e>
 800b9d0:	4621      	mov	r1, r4
 800b9d2:	4638      	mov	r0, r7
 800b9d4:	f7ff fc48 	bl	800b268 <_malloc_r>
 800b9d8:	4680      	mov	r8, r0
 800b9da:	b908      	cbnz	r0, 800b9e0 <_realloc_r+0x44>
 800b9dc:	4645      	mov	r5, r8
 800b9de:	e7ec      	b.n	800b9ba <_realloc_r+0x1e>
 800b9e0:	42b4      	cmp	r4, r6
 800b9e2:	4622      	mov	r2, r4
 800b9e4:	4629      	mov	r1, r5
 800b9e6:	bf28      	it	cs
 800b9e8:	4632      	movcs	r2, r6
 800b9ea:	f7ff fbc3 	bl	800b174 <memcpy>
 800b9ee:	4629      	mov	r1, r5
 800b9f0:	4638      	mov	r0, r7
 800b9f2:	f7ff fbcd 	bl	800b190 <_free_r>
 800b9f6:	e7f1      	b.n	800b9dc <_realloc_r+0x40>

0800b9f8 <_malloc_usable_size_r>:
 800b9f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9fc:	1f18      	subs	r0, r3, #4
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	bfbc      	itt	lt
 800ba02:	580b      	ldrlt	r3, [r1, r0]
 800ba04:	18c0      	addlt	r0, r0, r3
 800ba06:	4770      	bx	lr

0800ba08 <_init>:
 800ba08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba0a:	bf00      	nop
 800ba0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba0e:	bc08      	pop	{r3}
 800ba10:	469e      	mov	lr, r3
 800ba12:	4770      	bx	lr

0800ba14 <_fini>:
 800ba14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba16:	bf00      	nop
 800ba18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba1a:	bc08      	pop	{r3}
 800ba1c:	469e      	mov	lr, r3
 800ba1e:	4770      	bx	lr
