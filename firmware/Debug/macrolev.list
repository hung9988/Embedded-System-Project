
macrolev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08040000  08040000  0000c0e0  2**0
                  CONTENTS
  1 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a734  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000274  0800a8cc  0800a8cc  0000b8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800ab40  0800ab40  0000c0e0  2**0
                  CONTENTS
  5 .ARM          00000008  0800ab40  0800ab40  0000bb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800ab48  0800ab48  0000c0e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800ab48  0800ab48  0000bb48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800ab4c  0800ab4c  0000bb4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000e0  20000000  0800ab50  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000d18  200000e0  0800ac30  0000c0e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000df8  0800ac30  0000cdf8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c0e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b77f  00000000  00000000  0000c110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004993  00000000  00000000  0002788f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  0002c228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f5c6  00000000  00000000  0002d628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001adc3  00000000  00000000  0004cbee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b845e  00000000  00000000  000679b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011fe0f  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000fe0  00000000  00000000  0011fe52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005994  00000000  00000000  00120e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  001267c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000e0 	.word	0x200000e0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a8b4 	.word	0x0800a8b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000e4 	.word	0x200000e4
 80001d4:	0800a8b4 	.word	0x0800a8b4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b988 	b.w	8000510 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	468e      	mov	lr, r1
 8000220:	4604      	mov	r4, r0
 8000222:	4688      	mov	r8, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d962      	bls.n	80002f4 <__udivmoddi4+0xdc>
 800022e:	fab2 f682 	clz	r6, r2
 8000232:	b14e      	cbz	r6, 8000248 <__udivmoddi4+0x30>
 8000234:	f1c6 0320 	rsb	r3, r6, #32
 8000238:	fa01 f806 	lsl.w	r8, r1, r6
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	40b7      	lsls	r7, r6
 8000242:	ea43 0808 	orr.w	r8, r3, r8
 8000246:	40b4      	lsls	r4, r6
 8000248:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800024c:	fa1f fc87 	uxth.w	ip, r7
 8000250:	fbb8 f1fe 	udiv	r1, r8, lr
 8000254:	0c23      	lsrs	r3, r4, #16
 8000256:	fb0e 8811 	mls	r8, lr, r1, r8
 800025a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025e:	fb01 f20c 	mul.w	r2, r1, ip
 8000262:	429a      	cmp	r2, r3
 8000264:	d909      	bls.n	800027a <__udivmoddi4+0x62>
 8000266:	18fb      	adds	r3, r7, r3
 8000268:	f101 30ff 	add.w	r0, r1, #4294967295
 800026c:	f080 80ea 	bcs.w	8000444 <__udivmoddi4+0x22c>
 8000270:	429a      	cmp	r2, r3
 8000272:	f240 80e7 	bls.w	8000444 <__udivmoddi4+0x22c>
 8000276:	3902      	subs	r1, #2
 8000278:	443b      	add	r3, r7
 800027a:	1a9a      	subs	r2, r3, r2
 800027c:	b2a3      	uxth	r3, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028a:	fb00 fc0c 	mul.w	ip, r0, ip
 800028e:	459c      	cmp	ip, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x8e>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f100 32ff 	add.w	r2, r0, #4294967295
 8000298:	f080 80d6 	bcs.w	8000448 <__udivmoddi4+0x230>
 800029c:	459c      	cmp	ip, r3
 800029e:	f240 80d3 	bls.w	8000448 <__udivmoddi4+0x230>
 80002a2:	443b      	add	r3, r7
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002aa:	eba3 030c 	sub.w	r3, r3, ip
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11d      	cbz	r5, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40f3      	lsrs	r3, r6
 80002b4:	2200      	movs	r2, #0
 80002b6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d905      	bls.n	80002ce <__udivmoddi4+0xb6>
 80002c2:	b10d      	cbz	r5, 80002c8 <__udivmoddi4+0xb0>
 80002c4:	e9c5 0100 	strd	r0, r1, [r5]
 80002c8:	2100      	movs	r1, #0
 80002ca:	4608      	mov	r0, r1
 80002cc:	e7f5      	b.n	80002ba <__udivmoddi4+0xa2>
 80002ce:	fab3 f183 	clz	r1, r3
 80002d2:	2900      	cmp	r1, #0
 80002d4:	d146      	bne.n	8000364 <__udivmoddi4+0x14c>
 80002d6:	4573      	cmp	r3, lr
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xc8>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 8105 	bhi.w	80004ea <__udivmoddi4+0x2d2>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4690      	mov	r8, r2
 80002ea:	2d00      	cmp	r5, #0
 80002ec:	d0e5      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002ee:	e9c5 4800 	strd	r4, r8, [r5]
 80002f2:	e7e2      	b.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f000 8090 	beq.w	800041a <__udivmoddi4+0x202>
 80002fa:	fab2 f682 	clz	r6, r2
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f040 80a4 	bne.w	800044c <__udivmoddi4+0x234>
 8000304:	1a8a      	subs	r2, r1, r2
 8000306:	0c03      	lsrs	r3, r0, #16
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	b280      	uxth	r0, r0
 800030e:	b2bc      	uxth	r4, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb2 fcfe 	udiv	ip, r2, lr
 8000316:	fb0e 221c 	mls	r2, lr, ip, r2
 800031a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800031e:	fb04 f20c 	mul.w	r2, r4, ip
 8000322:	429a      	cmp	r2, r3
 8000324:	d907      	bls.n	8000336 <__udivmoddi4+0x11e>
 8000326:	18fb      	adds	r3, r7, r3
 8000328:	f10c 38ff 	add.w	r8, ip, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x11c>
 800032e:	429a      	cmp	r2, r3
 8000330:	f200 80e0 	bhi.w	80004f4 <__udivmoddi4+0x2dc>
 8000334:	46c4      	mov	ip, r8
 8000336:	1a9b      	subs	r3, r3, r2
 8000338:	fbb3 f2fe 	udiv	r2, r3, lr
 800033c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000340:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000344:	fb02 f404 	mul.w	r4, r2, r4
 8000348:	429c      	cmp	r4, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x144>
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x142>
 8000354:	429c      	cmp	r4, r3
 8000356:	f200 80ca 	bhi.w	80004ee <__udivmoddi4+0x2d6>
 800035a:	4602      	mov	r2, r0
 800035c:	1b1b      	subs	r3, r3, r4
 800035e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0x98>
 8000364:	f1c1 0620 	rsb	r6, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 f706 	lsr.w	r7, r2, r6
 800036e:	431f      	orrs	r7, r3
 8000370:	fa0e f401 	lsl.w	r4, lr, r1
 8000374:	fa20 f306 	lsr.w	r3, r0, r6
 8000378:	fa2e fe06 	lsr.w	lr, lr, r6
 800037c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	fa1f fc87 	uxth.w	ip, r7
 800038a:	fbbe f0f9 	udiv	r0, lr, r9
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	fb09 ee10 	mls	lr, r9, r0, lr
 8000394:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000398:	fb00 fe0c 	mul.w	lr, r0, ip
 800039c:	45a6      	cmp	lr, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x1a0>
 80003a4:	193c      	adds	r4, r7, r4
 80003a6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003aa:	f080 809c 	bcs.w	80004e6 <__udivmoddi4+0x2ce>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f240 8099 	bls.w	80004e6 <__udivmoddi4+0x2ce>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 040e 	sub.w	r4, r4, lr
 80003bc:	fa1f fe83 	uxth.w	lr, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003cc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d0:	45a4      	cmp	ip, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1ce>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003da:	f080 8082 	bcs.w	80004e2 <__udivmoddi4+0x2ca>
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d97f      	bls.n	80004e2 <__udivmoddi4+0x2ca>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f2:	4564      	cmp	r4, ip
 80003f4:	4673      	mov	r3, lr
 80003f6:	46e1      	mov	r9, ip
 80003f8:	d362      	bcc.n	80004c0 <__udivmoddi4+0x2a8>
 80003fa:	d05f      	beq.n	80004bc <__udivmoddi4+0x2a4>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x1fe>
 80003fe:	ebb8 0203 	subs.w	r2, r8, r3
 8000402:	eb64 0409 	sbc.w	r4, r4, r9
 8000406:	fa04 f606 	lsl.w	r6, r4, r6
 800040a:	fa22 f301 	lsr.w	r3, r2, r1
 800040e:	431e      	orrs	r6, r3
 8000410:	40cc      	lsrs	r4, r1
 8000412:	e9c5 6400 	strd	r6, r4, [r5]
 8000416:	2100      	movs	r1, #0
 8000418:	e74f      	b.n	80002ba <__udivmoddi4+0xa2>
 800041a:	fbb1 fcf2 	udiv	ip, r1, r2
 800041e:	0c01      	lsrs	r1, r0, #16
 8000420:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000424:	b280      	uxth	r0, r0
 8000426:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042a:	463b      	mov	r3, r7
 800042c:	4638      	mov	r0, r7
 800042e:	463c      	mov	r4, r7
 8000430:	46b8      	mov	r8, r7
 8000432:	46be      	mov	lr, r7
 8000434:	2620      	movs	r6, #32
 8000436:	fbb1 f1f7 	udiv	r1, r1, r7
 800043a:	eba2 0208 	sub.w	r2, r2, r8
 800043e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000442:	e766      	b.n	8000312 <__udivmoddi4+0xfa>
 8000444:	4601      	mov	r1, r0
 8000446:	e718      	b.n	800027a <__udivmoddi4+0x62>
 8000448:	4610      	mov	r0, r2
 800044a:	e72c      	b.n	80002a6 <__udivmoddi4+0x8e>
 800044c:	f1c6 0220 	rsb	r2, r6, #32
 8000450:	fa2e f302 	lsr.w	r3, lr, r2
 8000454:	40b7      	lsls	r7, r6
 8000456:	40b1      	lsls	r1, r6
 8000458:	fa20 f202 	lsr.w	r2, r0, r2
 800045c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000460:	430a      	orrs	r2, r1
 8000462:	fbb3 f8fe 	udiv	r8, r3, lr
 8000466:	b2bc      	uxth	r4, r7
 8000468:	fb0e 3318 	mls	r3, lr, r8, r3
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb08 f904 	mul.w	r9, r8, r4
 8000476:	40b0      	lsls	r0, r6
 8000478:	4589      	cmp	r9, r1
 800047a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800047e:	b280      	uxth	r0, r0
 8000480:	d93e      	bls.n	8000500 <__udivmoddi4+0x2e8>
 8000482:	1879      	adds	r1, r7, r1
 8000484:	f108 3cff 	add.w	ip, r8, #4294967295
 8000488:	d201      	bcs.n	800048e <__udivmoddi4+0x276>
 800048a:	4589      	cmp	r9, r1
 800048c:	d81f      	bhi.n	80004ce <__udivmoddi4+0x2b6>
 800048e:	eba1 0109 	sub.w	r1, r1, r9
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fb09 f804 	mul.w	r8, r9, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	b292      	uxth	r2, r2
 80004a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a4:	4542      	cmp	r2, r8
 80004a6:	d229      	bcs.n	80004fc <__udivmoddi4+0x2e4>
 80004a8:	18ba      	adds	r2, r7, r2
 80004aa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ae:	d2c4      	bcs.n	800043a <__udivmoddi4+0x222>
 80004b0:	4542      	cmp	r2, r8
 80004b2:	d2c2      	bcs.n	800043a <__udivmoddi4+0x222>
 80004b4:	f1a9 0102 	sub.w	r1, r9, #2
 80004b8:	443a      	add	r2, r7
 80004ba:	e7be      	b.n	800043a <__udivmoddi4+0x222>
 80004bc:	45f0      	cmp	r8, lr
 80004be:	d29d      	bcs.n	80003fc <__udivmoddi4+0x1e4>
 80004c0:	ebbe 0302 	subs.w	r3, lr, r2
 80004c4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c8:	3801      	subs	r0, #1
 80004ca:	46e1      	mov	r9, ip
 80004cc:	e796      	b.n	80003fc <__udivmoddi4+0x1e4>
 80004ce:	eba7 0909 	sub.w	r9, r7, r9
 80004d2:	4449      	add	r1, r9
 80004d4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004dc:	fb09 f804 	mul.w	r8, r9, r4
 80004e0:	e7db      	b.n	800049a <__udivmoddi4+0x282>
 80004e2:	4673      	mov	r3, lr
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1ce>
 80004e6:	4650      	mov	r0, sl
 80004e8:	e766      	b.n	80003b8 <__udivmoddi4+0x1a0>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e6fd      	b.n	80002ea <__udivmoddi4+0xd2>
 80004ee:	443b      	add	r3, r7
 80004f0:	3a02      	subs	r2, #2
 80004f2:	e733      	b.n	800035c <__udivmoddi4+0x144>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	443b      	add	r3, r7
 80004fa:	e71c      	b.n	8000336 <__udivmoddi4+0x11e>
 80004fc:	4649      	mov	r1, r9
 80004fe:	e79c      	b.n	800043a <__udivmoddi4+0x222>
 8000500:	eba1 0109 	sub.w	r1, r1, r9
 8000504:	46c4      	mov	ip, r8
 8000506:	fbb1 f9fe 	udiv	r9, r1, lr
 800050a:	fb09 f804 	mul.w	r8, r9, r4
 800050e:	e7c4      	b.n	800049a <__udivmoddi4+0x282>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <hid_init>:
static uint8_t keycodes[6] = {0};
// static uint8_t is_screaming = 0;
static uint8_t consumer_report = 0;


void hid_init() {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
	 tusb_rhport_init_t dev_init = {
 800051a:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <hid_init+0x20>)
 800051c:	881b      	ldrh	r3, [r3, #0]
 800051e:	80bb      	strh	r3, [r7, #4]
	     .role = TUSB_ROLE_DEVICE,
	     .speed = TUSB_SPEED_AUTO
	  };
	  tusb_init(0, &dev_init); // initialize device stack on roothub port 0
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	4619      	mov	r1, r3
 8000524:	2000      	movs	r0, #0
 8000526:	f009 fb63 	bl	8009bf0 <tusb_rhport_init>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	0800a8cc 	.word	0x0800a8cc

08000538 <hid_task>:

void hid_task() {
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0

  if ((should_send_consumer_report || should_send_keyboard_report) && tud_hid_ready()) {
 800053e:	4b21      	ldr	r3, [pc, #132]	@ (80005c4 <hid_task+0x8c>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d103      	bne.n	800054e <hid_task+0x16>
 8000546:	4b20      	ldr	r3, [pc, #128]	@ (80005c8 <hid_task+0x90>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d035      	beq.n	80005ba <hid_task+0x82>

//--------------------------------------------------------------------+
// Application API (Single Port)
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_ready(void) {
  return tud_hid_n_ready(0);
 800054e:	2000      	movs	r0, #0
 8000550:	f004 fa5e 	bl	8004a10 <tud_hid_n_ready>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d02f      	beq.n	80005ba <hid_task+0x82>
    if (tud_suspended()) {
 800055a:	f005 fd75 	bl	8006048 <tud_suspended>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d002      	beq.n	800056a <hid_task+0x32>
      tud_remote_wakeup();
 8000564:	f005 fd84 	bl	8006070 <tud_remote_wakeup>
        should_send_keyboard_report = 0;
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
      }
    }
  }
}
 8000568:	e027      	b.n	80005ba <hid_task+0x82>
      if (should_send_consumer_report) {
 800056a:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <hid_task+0x8c>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d00f      	beq.n	8000592 <hid_task+0x5a>
        should_send_consumer_report = 0;
 8000572:	4b14      	ldr	r3, [pc, #80]	@ (80005c4 <hid_task+0x8c>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
 8000578:	2302      	movs	r3, #2
 800057a:	73fb      	strb	r3, [r7, #15]
 800057c:	4b13      	ldr	r3, [pc, #76]	@ (80005cc <hid_task+0x94>)
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	2302      	movs	r3, #2
 8000582:	80fb      	strh	r3, [r7, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tud_hid_get_protocol(void) {
  return tud_hid_n_get_protocol(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_report(uint8_t report_id, void const* report, uint16_t len) {
  return tud_hid_n_report(0, report_id, report, len);
 8000584:	88fb      	ldrh	r3, [r7, #6]
 8000586:	7bf9      	ldrb	r1, [r7, #15]
 8000588:	68ba      	ldr	r2, [r7, #8]
 800058a:	2000      	movs	r0, #0
 800058c:	f004 fa82 	bl	8004a94 <tud_hid_n_report>
 8000590:	e013      	b.n	80005ba <hid_task+0x82>
      } else if (should_send_keyboard_report) {
 8000592:	4b0d      	ldr	r3, [pc, #52]	@ (80005c8 <hid_task+0x90>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00f      	beq.n	80005ba <hid_task+0x82>
        should_send_keyboard_report = 0;
 800059a:	4b0b      	ldr	r3, [pc, #44]	@ (80005c8 <hid_task+0x90>)
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
 80005a0:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <hid_task+0x98>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2201      	movs	r2, #1
 80005a6:	717a      	strb	r2, [r7, #5]
 80005a8:	713b      	strb	r3, [r7, #4]
 80005aa:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <hid_task+0x9c>)
 80005ac:	603b      	str	r3, [r7, #0]
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
  return tud_hid_n_keyboard_report(0, report_id, modifier, keycode);
 80005ae:	793a      	ldrb	r2, [r7, #4]
 80005b0:	7979      	ldrb	r1, [r7, #5]
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	2000      	movs	r0, #0
 80005b6:	f004 faf3 	bl	8004ba0 <tud_hid_n_keyboard_report>
}
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200000fc 	.word	0x200000fc
 80005c8:	200000fd 	.word	0x200000fd
 80005cc:	20000106 	.word	0x20000106
 80005d0:	200000fe 	.word	0x200000fe
 80005d4:	20000100 	.word	0x20000100

080005d8 <hid_press_key>:

void hid_press_key(struct key *key, uint8_t layer) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	70fb      	strb	r3, [r7, #3]
  // Kiểm tra xem có phải phím chuyển đổi chế độ không (phím thứ 16 - MACRO_CTRL_A)
  if (key->layers[layer].type == KEY_TYPE_MACRO && key->layers[layer].value == MACRO_CTRL_A) {
 80005e4:	78fa      	ldrb	r2, [r7, #3]
 80005e6:	6879      	ldr	r1, [r7, #4]
 80005e8:	4613      	mov	r3, r2
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4413      	add	r3, r2
 80005ee:	440b      	add	r3, r1
 80005f0:	3305      	adds	r3, #5
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b04      	cmp	r3, #4
 80005f6:	d111      	bne.n	800061c <hid_press_key+0x44>
 80005f8:	78fa      	ldrb	r2, [r7, #3]
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	4613      	mov	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	4413      	add	r3, r2
 8000602:	440b      	add	r3, r1
 8000604:	88db      	ldrh	r3, [r3, #6]
 8000606:	b29b      	uxth	r3, r3
 8000608:	2bf0      	cmp	r3, #240	@ 0xf0
 800060a:	d107      	bne.n	800061c <hid_press_key+0x44>
    // Kiểm tra xem có phải phím thứ 16 không (row=3, col=3)
    if (key->row == 3 && key->column == 3) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	785b      	ldrb	r3, [r3, #1]
 8000610:	2b03      	cmp	r3, #3
 8000612:	d103      	bne.n	800061c <hid_press_key+0x44>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	789b      	ldrb	r3, [r3, #2]
 8000618:	2b03      	cmp	r3, #3
 800061a:	d075      	beq.n	8000708 <hid_press_key+0x130>
      // Đây là phím chuyển đổi chế độ, không thực hiện macro
      return;
    }
  }

  switch (key->layers[layer].type) {
 800061c:	78fa      	ldrb	r2, [r7, #3]
 800061e:	6879      	ldr	r1, [r7, #4]
 8000620:	4613      	mov	r3, r2
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	4413      	add	r3, r2
 8000626:	440b      	add	r3, r1
 8000628:	3305      	adds	r3, #5
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	3b01      	subs	r3, #1
 800062e:	2b03      	cmp	r3, #3
 8000630:	d86c      	bhi.n	800070c <hid_press_key+0x134>
 8000632:	a201      	add	r2, pc, #4	@ (adr r2, 8000638 <hid_press_key+0x60>)
 8000634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000638:	0800066f 	.word	0x0800066f
 800063c:	08000649 	.word	0x08000649
 8000640:	080006af 	.word	0x080006af
 8000644:	080006cd 	.word	0x080006cd
  case KEY_TYPE_MODIFIER:
    modifiers |= key->layers[layer].value;
 8000648:	78fa      	ldrb	r2, [r7, #3]
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	4613      	mov	r3, r2
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	4413      	add	r3, r2
 8000652:	440b      	add	r3, r1
 8000654:	88db      	ldrh	r3, [r3, #6]
 8000656:	b29b      	uxth	r3, r3
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4b2f      	ldr	r3, [pc, #188]	@ (8000718 <hid_press_key+0x140>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4313      	orrs	r3, r2
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b2d      	ldr	r3, [pc, #180]	@ (8000718 <hid_press_key+0x140>)
 8000664:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 8000666:	4b2d      	ldr	r3, [pc, #180]	@ (800071c <hid_press_key+0x144>)
 8000668:	2201      	movs	r2, #1
 800066a:	701a      	strb	r2, [r3, #0]
    break;
 800066c:	e051      	b.n	8000712 <hid_press_key+0x13a>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 800066e:	2300      	movs	r3, #0
 8000670:	73fb      	strb	r3, [r7, #15]
 8000672:	e018      	b.n	80006a6 <hid_press_key+0xce>
      if (keycodes[i] == 0) {
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	4a2a      	ldr	r2, [pc, #168]	@ (8000720 <hid_press_key+0x148>)
 8000678:	5cd3      	ldrb	r3, [r2, r3]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d110      	bne.n	80006a0 <hid_press_key+0xc8>
        keycodes[i] = key->layers[layer].value;
 800067e:	78fa      	ldrb	r2, [r7, #3]
 8000680:	6879      	ldr	r1, [r7, #4]
 8000682:	4613      	mov	r3, r2
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	4413      	add	r3, r2
 8000688:	440b      	add	r3, r1
 800068a:	88db      	ldrh	r3, [r3, #6]
 800068c:	b29a      	uxth	r2, r3
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	b2d1      	uxtb	r1, r2
 8000692:	4a23      	ldr	r2, [pc, #140]	@ (8000720 <hid_press_key+0x148>)
 8000694:	54d1      	strb	r1, [r2, r3]
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // } else if (i == 0 && key->state.velocity > keyboard_user_config.screaming_velocity_trigger) {
        //   is_screaming = 1;
        //   modifiers |= get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 8000696:	4b21      	ldr	r3, [pc, #132]	@ (800071c <hid_press_key+0x144>)
 8000698:	2201      	movs	r2, #1
 800069a:	701a      	strb	r2, [r3, #0]
        break;
 800069c:	bf00      	nop
      }
    }
    break;
 800069e:	e038      	b.n	8000712 <hid_press_key+0x13a>
    for (uint8_t i = 0; i < 6; i++) {
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	3301      	adds	r3, #1
 80006a4:	73fb      	strb	r3, [r7, #15]
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	2b05      	cmp	r3, #5
 80006aa:	d9e3      	bls.n	8000674 <hid_press_key+0x9c>
    break;
 80006ac:	e031      	b.n	8000712 <hid_press_key+0x13a>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = key->layers[layer].value;
 80006ae:	78fa      	ldrb	r2, [r7, #3]
 80006b0:	6879      	ldr	r1, [r7, #4]
 80006b2:	4613      	mov	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	440b      	add	r3, r1
 80006ba:	88db      	ldrh	r3, [r3, #6]
 80006bc:	b29b      	uxth	r3, r3
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <hid_press_key+0x14c>)
 80006c2:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 80006c4:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <hid_press_key+0x150>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]
    break;
 80006ca:	e022      	b.n	8000712 <hid_press_key+0x13a>

  case KEY_TYPE_MACRO:
    // Xử lý macro CTRL+A
    if (key->layers[layer].value == MACRO_CTRL_A) {
 80006cc:	78fa      	ldrb	r2, [r7, #3]
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	4613      	mov	r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	4413      	add	r3, r2
 80006d6:	440b      	add	r3, r1
 80006d8:	88db      	ldrh	r3, [r3, #6]
 80006da:	b29b      	uxth	r3, r3
 80006dc:	2bf0      	cmp	r3, #240	@ 0xf0
 80006de:	d117      	bne.n	8000710 <hid_press_key+0x138>
      // Nhấn CTRL + A
      modifiers |= get_bitmask_for_modifier(HID_KEY_CONTROL_LEFT);
 80006e0:	20e0      	movs	r0, #224	@ 0xe0
 80006e2:	f000 f921 	bl	8000928 <get_bitmask_for_modifier>
 80006e6:	4603      	mov	r3, r0
 80006e8:	b25a      	sxtb	r2, r3
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <hid_press_key+0x140>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	b25b      	sxtb	r3, r3
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <hid_press_key+0x140>)
 80006f8:	701a      	strb	r2, [r3, #0]
      keycodes[0] = HID_KEY_A;
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <hid_press_key+0x148>)
 80006fc:	2204      	movs	r2, #4
 80006fe:	701a      	strb	r2, [r3, #0]
      should_send_keyboard_report = 1;
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <hid_press_key+0x144>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000706:	e003      	b.n	8000710 <hid_press_key+0x138>
      return;
 8000708:	bf00      	nop
 800070a:	e002      	b.n	8000712 <hid_press_key+0x13a>

  default:
    break;
 800070c:	bf00      	nop
 800070e:	e000      	b.n	8000712 <hid_press_key+0x13a>
    break;
 8000710:	bf00      	nop
  }
}
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200000fe 	.word	0x200000fe
 800071c:	200000fd 	.word	0x200000fd
 8000720:	20000100 	.word	0x20000100
 8000724:	20000106 	.word	0x20000106
 8000728:	200000fc 	.word	0x200000fc

0800072c <hid_release_key>:

void hid_release_key(struct key *key, uint8_t layer) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
  // Kiểm tra xem có phải phím chuyển đổi chế độ không (phím thứ 16 - MACRO_CTRL_A)
  if (key->layers[layer].type == KEY_TYPE_MACRO && key->layers[layer].value == MACRO_CTRL_A) {
 8000738:	78fa      	ldrb	r2, [r7, #3]
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	4613      	mov	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4413      	add	r3, r2
 8000742:	440b      	add	r3, r1
 8000744:	3305      	adds	r3, #5
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b04      	cmp	r3, #4
 800074a:	d111      	bne.n	8000770 <hid_release_key+0x44>
 800074c:	78fa      	ldrb	r2, [r7, #3]
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	4613      	mov	r3, r2
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	4413      	add	r3, r2
 8000756:	440b      	add	r3, r1
 8000758:	88db      	ldrh	r3, [r3, #6]
 800075a:	b29b      	uxth	r3, r3
 800075c:	2bf0      	cmp	r3, #240	@ 0xf0
 800075e:	d107      	bne.n	8000770 <hid_release_key+0x44>
    // Kiểm tra xem có phải phím thứ 16 không (row=3, col=3)
    if (key->row == 3 && key->column == 3) {
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	785b      	ldrb	r3, [r3, #1]
 8000764:	2b03      	cmp	r3, #3
 8000766:	d103      	bne.n	8000770 <hid_release_key+0x44>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	789b      	ldrb	r3, [r3, #2]
 800076c:	2b03      	cmp	r3, #3
 800076e:	d073      	beq.n	8000858 <hid_release_key+0x12c>
      // Đây là phím chuyển đổi chế độ, không thực hiện macro
      return;
    }
  }

  switch (key->layers[layer].type) {
 8000770:	78fa      	ldrb	r2, [r7, #3]
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	4613      	mov	r3, r2
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	4413      	add	r3, r2
 800077a:	440b      	add	r3, r1
 800077c:	3305      	adds	r3, #5
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	3b01      	subs	r3, #1
 8000782:	2b03      	cmp	r3, #3
 8000784:	d86a      	bhi.n	800085c <hid_release_key+0x130>
 8000786:	a201      	add	r2, pc, #4	@ (adr r2, 800078c <hid_release_key+0x60>)
 8000788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078c:	080007cb 	.word	0x080007cb
 8000790:	0800079d 	.word	0x0800079d
 8000794:	0800080d 	.word	0x0800080d
 8000798:	0800081b 	.word	0x0800081b
  case KEY_TYPE_MODIFIER:
    modifiers &= ~key->layers[layer].value;
 800079c:	78fa      	ldrb	r2, [r7, #3]
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	4613      	mov	r3, r2
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	440b      	add	r3, r1
 80007a8:	88db      	ldrh	r3, [r3, #6]
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	b25b      	sxtb	r3, r3
 80007ae:	43db      	mvns	r3, r3
 80007b0:	b25a      	sxtb	r2, r3
 80007b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000868 <hid_release_key+0x13c>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	4013      	ands	r3, r2
 80007ba:	b25b      	sxtb	r3, r3
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b2a      	ldr	r3, [pc, #168]	@ (8000868 <hid_release_key+0x13c>)
 80007c0:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80007c2:	4b2a      	ldr	r3, [pc, #168]	@ (800086c <hid_release_key+0x140>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	701a      	strb	r2, [r3, #0]
    break;
 80007c8:	e04b      	b.n	8000862 <hid_release_key+0x136>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 80007ca:	2300      	movs	r3, #0
 80007cc:	73fb      	strb	r3, [r7, #15]
 80007ce:	e019      	b.n	8000804 <hid_release_key+0xd8>
      if (keycodes[i] == key->layers[layer].value) {
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	4a27      	ldr	r2, [pc, #156]	@ (8000870 <hid_release_key+0x144>)
 80007d4:	5cd3      	ldrb	r3, [r2, r3]
 80007d6:	4618      	mov	r0, r3
 80007d8:	78fa      	ldrb	r2, [r7, #3]
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	4613      	mov	r3, r2
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	4413      	add	r3, r2
 80007e2:	440b      	add	r3, r1
 80007e4:	88db      	ldrh	r3, [r3, #6]
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	4298      	cmp	r0, r3
 80007ea:	d108      	bne.n	80007fe <hid_release_key+0xd2>
        keycodes[i] = 0;
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	4a20      	ldr	r2, [pc, #128]	@ (8000870 <hid_release_key+0x144>)
 80007f0:	2100      	movs	r1, #0
 80007f2:	54d1      	strb	r1, [r2, r3]
        // if (is_screaming) {
        //   is_screaming = 0;
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <hid_release_key+0x140>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
        break;
 80007fa:	bf00      	nop
      }
    }
    break;
 80007fc:	e031      	b.n	8000862 <hid_release_key+0x136>
    for (uint8_t i = 0; i < 6; i++) {
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	3301      	adds	r3, #1
 8000802:	73fb      	strb	r3, [r7, #15]
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	2b05      	cmp	r3, #5
 8000808:	d9e2      	bls.n	80007d0 <hid_release_key+0xa4>
    break;
 800080a:	e02a      	b.n	8000862 <hid_release_key+0x136>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = 0;
 800080c:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <hid_release_key+0x148>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 8000812:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <hid_release_key+0x14c>)
 8000814:	2201      	movs	r2, #1
 8000816:	701a      	strb	r2, [r3, #0]
    break;
 8000818:	e023      	b.n	8000862 <hid_release_key+0x136>

  case KEY_TYPE_MACRO:
    // Xử lý thả macro CTRL+A
    if (key->layers[layer].value == MACRO_CTRL_A) {
 800081a:	78fa      	ldrb	r2, [r7, #3]
 800081c:	6879      	ldr	r1, [r7, #4]
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	440b      	add	r3, r1
 8000826:	88db      	ldrh	r3, [r3, #6]
 8000828:	b29b      	uxth	r3, r3
 800082a:	2bf0      	cmp	r3, #240	@ 0xf0
 800082c:	d118      	bne.n	8000860 <hid_release_key+0x134>
      // Thả CTRL + A
      modifiers &= ~get_bitmask_for_modifier(HID_KEY_CONTROL_LEFT);
 800082e:	20e0      	movs	r0, #224	@ 0xe0
 8000830:	f000 f87a 	bl	8000928 <get_bitmask_for_modifier>
 8000834:	4603      	mov	r3, r0
 8000836:	43db      	mvns	r3, r3
 8000838:	b25a      	sxtb	r2, r3
 800083a:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <hid_release_key+0x13c>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b25b      	sxtb	r3, r3
 8000840:	4013      	ands	r3, r2
 8000842:	b25b      	sxtb	r3, r3
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <hid_release_key+0x13c>)
 8000848:	701a      	strb	r2, [r3, #0]
      keycodes[0] = 0;
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <hid_release_key+0x144>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
      should_send_keyboard_report = 1;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <hid_release_key+0x140>)
 8000852:	2201      	movs	r2, #1
 8000854:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000856:	e003      	b.n	8000860 <hid_release_key+0x134>
      return;
 8000858:	bf00      	nop
 800085a:	e002      	b.n	8000862 <hid_release_key+0x136>

  default:
    break;
 800085c:	bf00      	nop
 800085e:	e000      	b.n	8000862 <hid_release_key+0x136>
    break;
 8000860:	bf00      	nop
  }
}
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200000fe 	.word	0x200000fe
 800086c:	200000fd 	.word	0x200000fd
 8000870:	20000100 	.word	0x20000100
 8000874:	20000106 	.word	0x20000106
 8000878:	200000fc 	.word	0x200000fc

0800087c <tud_hid_set_protocol_cb>:
    }
}

// Invoked when received SET_PROTOCOL request
// protocol is either HID_PROTOCOL_BOOT (0) or HID_PROTOCOL_REPORT (1)
void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	460a      	mov	r2, r1
 8000886:	71fb      	strb	r3, [r7, #7]
 8000888:	4613      	mov	r3, r2
 800088a:	71bb      	strb	r3, [r7, #6]
  (void)instance;
  (void)protocol;

  // nothing to do since we use the same compatible boot report for both Boot and Report mode.
  // TOOD set a indicator for user
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <tud_hid_report_complete_cb>:
//    }
//  }
//}

void tud_hid_report_complete_cb(uint8_t instance, uint8_t const* report, uint16_t len)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
 80008a4:	4613      	mov	r3, r2
 80008a6:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) len;

  uint8_t report_id = report[0];
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	73fb      	strb	r3, [r7, #15]

  switch (report_id)
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d002      	beq.n	80008ba <tud_hid_report_complete_cb+0x22>
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d002      	beq.n	80008be <tud_hid_report_complete_cb+0x26>
    case REPORT_ID_CONSUMER_CONTROL:
      // Consumer control report sent successfully
      break;

    default:
      break;
 80008b8:	e002      	b.n	80008c0 <tud_hid_report_complete_cb+0x28>
      break;
 80008ba:	bf00      	nop
 80008bc:	e000      	b.n	80008c0 <tud_hid_report_complete_cb+0x28>
      break;
 80008be:	bf00      	nop
  }
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <tud_cdc_line_state_cb>:

// CDC

// Invoked when cdc when line state changed e.g connected/disconnected
void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
 80008d6:	460b      	mov	r3, r1
 80008d8:	71bb      	strb	r3, [r7, #6]
 80008da:	4613      	mov	r3, r2
 80008dc:	717b      	strb	r3, [r7, #5]
  (void)itf;

  // connected
  if (dtr && rts)
 80008de:	79bb      	ldrb	r3, [r7, #6]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d00f      	beq.n	8000904 <tud_cdc_line_state_cb+0x38>
 80008e4:	797b      	ldrb	r3, [r7, #5]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d00c      	beq.n	8000904 <tud_cdc_line_state_cb+0x38>
 80008ea:	4b08      	ldr	r3, [pc, #32]	@ (800090c <tud_cdc_line_state_cb+0x40>)
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	2300      	movs	r3, #0
 80008f0:	74fb      	strb	r3, [r7, #19]
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	60fb      	str	r3, [r7, #12]
  return tud_cdc_n_write(itf, &ch, 1);
}

// Write a null-terminated string
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_n_write_str(uint8_t itf, char const* str) {
  return tud_cdc_n_write(itf, str, strlen(str));
 80008f6:	2221      	movs	r2, #33	@ 0x21
 80008f8:	7cfb      	ldrb	r3, [r7, #19]
 80008fa:	68f9      	ldr	r1, [r7, #12]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f003 fc33 	bl	8004168 <tud_cdc_n_write>
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write(void const* buffer, uint32_t bufsize) {
  return tud_cdc_n_write(0, buffer, bufsize);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_str(char const* str) {
  return tud_cdc_n_write_str(0, str);
 8000902:	bf00      	nop
  {
    // print initial message when connected
    tud_cdc_write_str("\r\nTinyUSB WebUSB device example\r\n");
  }
}
 8000904:	bf00      	nop
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	0800a8d0 	.word	0x0800a8d0

08000910 <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
  (void)itf;
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <get_bitmask_for_modifier>:

static uint8_t key_triggered = 0;

struct key* current_pressed_key = NULL;

uint8_t get_bitmask_for_modifier(uint8_t keycode) {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
  switch (keycode) {
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	3be0      	subs	r3, #224	@ 0xe0
 8000936:	2b07      	cmp	r3, #7
 8000938:	d822      	bhi.n	8000980 <get_bitmask_for_modifier+0x58>
 800093a:	a201      	add	r2, pc, #4	@ (adr r2, 8000940 <get_bitmask_for_modifier+0x18>)
 800093c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000940:	08000961 	.word	0x08000961
 8000944:	08000965 	.word	0x08000965
 8000948:	08000969 	.word	0x08000969
 800094c:	0800096d 	.word	0x0800096d
 8000950:	08000971 	.word	0x08000971
 8000954:	08000975 	.word	0x08000975
 8000958:	08000979 	.word	0x08000979
 800095c:	0800097d 	.word	0x0800097d
  case HID_KEY_CONTROL_LEFT:
    return 0b00000001;
 8000960:	2301      	movs	r3, #1
 8000962:	e00e      	b.n	8000982 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_LEFT:
    return 0b00000010;
 8000964:	2302      	movs	r3, #2
 8000966:	e00c      	b.n	8000982 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_LEFT:
    return 0b00000100;
 8000968:	2304      	movs	r3, #4
 800096a:	e00a      	b.n	8000982 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_LEFT:
    return 0b00001000;
 800096c:	2308      	movs	r3, #8
 800096e:	e008      	b.n	8000982 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_CONTROL_RIGHT:
    return 0b00010000;
 8000970:	2310      	movs	r3, #16
 8000972:	e006      	b.n	8000982 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_RIGHT:
    return 0b00100000;
 8000974:	2320      	movs	r3, #32
 8000976:	e004      	b.n	8000982 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_RIGHT:
    return 0b01000000;
 8000978:	2340      	movs	r3, #64	@ 0x40
 800097a:	e002      	b.n	8000982 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_RIGHT:
    return 0b10000000;
 800097c:	2380      	movs	r3, #128	@ 0x80
 800097e:	e000      	b.n	8000982 <get_bitmask_for_modifier+0x5a>
  default:
    return 0b00000000;
 8000980:	2300      	movs	r3, #0
  }
}
 8000982:	4618      	mov	r0, r3
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop

08000990 <get_usage_consumer_control>:

uint16_t get_usage_consumer_control(uint16_t value) {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	80fb      	strh	r3, [r7, #6]
  if (value > 0xFF) {
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	2bff      	cmp	r3, #255	@ 0xff
 800099e:	d904      	bls.n	80009aa <get_usage_consumer_control+0x1a>
    return value & 0b0111111111111111;
 80009a0:	88fb      	ldrh	r3, [r7, #6]
 80009a2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	e000      	b.n	80009ac <get_usage_consumer_control+0x1c>
  } else {
    return 0;
 80009aa:	2300      	movs	r3, #0
  }
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <init_key>:

void init_key(uint8_t adc_channel, uint8_t amux_channel, uint8_t row, uint8_t column) {
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b087      	sub	sp, #28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4604      	mov	r4, r0
 80009c0:	4608      	mov	r0, r1
 80009c2:	4611      	mov	r1, r2
 80009c4:	461a      	mov	r2, r3
 80009c6:	4623      	mov	r3, r4
 80009c8:	71fb      	strb	r3, [r7, #7]
 80009ca:	4603      	mov	r3, r0
 80009cc:	71bb      	strb	r3, [r7, #6]
 80009ce:	460b      	mov	r3, r1
 80009d0:	717b      	strb	r3, [r7, #5]
 80009d2:	4613      	mov	r3, r2
 80009d4:	713b      	strb	r3, [r7, #4]
  struct key *key = &keyboard_keys[adc_channel][amux_channel];
 80009d6:	79f9      	ldrb	r1, [r7, #7]
 80009d8:	79ba      	ldrb	r2, [r7, #6]
 80009da:	4613      	mov	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	4413      	add	r3, r2
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	1a9b      	subs	r3, r3, r2
 80009e4:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80009e8:	fb01 f202 	mul.w	r2, r1, r2
 80009ec:	4413      	add	r3, r2
 80009ee:	4a74      	ldr	r2, [pc, #464]	@ (8000bc0 <init_key+0x208>)
 80009f0:	4413      	add	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]

  key->is_enabled = 1;
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	2201      	movs	r2, #1
 80009f8:	701a      	strb	r2, [r3, #0]
  key->is_idle = 0;
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	2200      	movs	r2, #0
 80009fe:	711a      	strb	r2, [r3, #4]
  key->row = row;
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	797a      	ldrb	r2, [r7, #5]
 8000a04:	705a      	strb	r2, [r3, #1]
  key->column = column;
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	793a      	ldrb	r2, [r7, #4]
 8000a0a:	709a      	strb	r2, [r3, #2]

  key->calibration.cycles_count = 0;
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	72da      	strb	r2, [r3, #11]
 8000a12:	2200      	movs	r2, #0
 8000a14:	731a      	strb	r2, [r3, #12]
  key->calibration.idle_value = IDLE_VALUE_APPROX;
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f042 0208 	orr.w	r2, r2, #8
 8000a1e:	735a      	strb	r2, [r3, #13]
 8000a20:	2200      	movs	r2, #0
 8000a22:	f042 0207 	orr.w	r2, r2, #7
 8000a26:	739a      	strb	r2, [r3, #14]
  key->calibration.max_distance = MAX_DISTANCE_APPROX;
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f062 020b 	orn	r2, r2, #11
 8000a30:	73da      	strb	r2, [r3, #15]
 8000a32:	2200      	movs	r2, #0
 8000a34:	f042 0201 	orr.w	r2, r2, #1
 8000a38:	741a      	strb	r2, [r3, #16]

  key->actuation.status = STATUS_RESET;
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	779a      	strb	r2, [r3, #30]
  key->actuation.trigger_offset = keyboard_user_config.trigger_offset;
 8000a40:	4b60      	ldr	r3, [pc, #384]	@ (8000bc4 <init_key+0x20c>)
 8000a42:	785a      	ldrb	r2, [r3, #1]
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	f883 2020 	strb.w	r2, [r3, #32]
  key->actuation.reset_offset = keyboard_user_config.trigger_offset - keyboard_user_config.reset_threshold;
 8000a4a:	4b5e      	ldr	r3, [pc, #376]	@ (8000bc4 <init_key+0x20c>)
 8000a4c:	785a      	ldrb	r2, [r3, #1]
 8000a4e:	4b5d      	ldr	r3, [pc, #372]	@ (8000bc4 <init_key+0x20c>)
 8000a50:	789b      	ldrb	r3, [r3, #2]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	77da      	strb	r2, [r3, #31]
  key->actuation.rapid_trigger_offset = keyboard_user_config.rapid_trigger_offset;
 8000a5a:	4b5a      	ldr	r3, [pc, #360]	@ (8000bc4 <init_key+0x20c>)
 8000a5c:	78da      	ldrb	r2, [r3, #3]
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  key->actuation.is_continuous_rapid_trigger_enabled = 0;
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	2200      	movs	r2, #0
 8000a68:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	75fb      	strb	r3, [r7, #23]
 8000a70:	e09c      	b.n	8000bac <init_key+0x1f4>
    if (keyboard_user_config.keymaps[i][row][column] != ____) {
 8000a72:	7df9      	ldrb	r1, [r7, #23]
 8000a74:	797a      	ldrb	r2, [r7, #5]
 8000a76:	793b      	ldrb	r3, [r7, #4]
 8000a78:	4852      	ldr	r0, [pc, #328]	@ (8000bc4 <init_key+0x20c>)
 8000a7a:	0089      	lsls	r1, r1, #2
 8000a7c:	440a      	add	r2, r1
 8000a7e:	0092      	lsls	r2, r2, #2
 8000a80:	4413      	add	r3, r2
 8000a82:	3304      	adds	r3, #4
 8000a84:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	f000 808c 	beq.w	8000ba6 <init_key+0x1ee>
      // Kiểm tra macro trước
      if (keyboard_user_config.keymaps[i][row][column] == MACRO_CTRL_A) {
 8000a8e:	7df9      	ldrb	r1, [r7, #23]
 8000a90:	797a      	ldrb	r2, [r7, #5]
 8000a92:	793b      	ldrb	r3, [r7, #4]
 8000a94:	484b      	ldr	r0, [pc, #300]	@ (8000bc4 <init_key+0x20c>)
 8000a96:	0089      	lsls	r1, r1, #2
 8000a98:	440a      	add	r2, r1
 8000a9a:	0092      	lsls	r2, r2, #2
 8000a9c:	4413      	add	r3, r2
 8000a9e:	3304      	adds	r3, #4
 8000aa0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000aa4:	2bf0      	cmp	r3, #240	@ 0xf0
 8000aa6:	d115      	bne.n	8000ad4 <init_key+0x11c>
        key->layers[i].type = KEY_TYPE_MACRO;
 8000aa8:	7dfa      	ldrb	r2, [r7, #23]
 8000aaa:	6939      	ldr	r1, [r7, #16]
 8000aac:	4613      	mov	r3, r2
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	4413      	add	r3, r2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	3305      	adds	r3, #5
 8000ab6:	2204      	movs	r2, #4
 8000ab8:	701a      	strb	r2, [r3, #0]
        key->layers[i].value = MACRO_CTRL_A;
 8000aba:	7dfa      	ldrb	r2, [r7, #23]
 8000abc:	6939      	ldr	r1, [r7, #16]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	4413      	add	r3, r2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f062 020f 	orn	r2, r2, #15
 8000acc:	719a      	strb	r2, [r3, #6]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	71da      	strb	r2, [r3, #7]
 8000ad2:	e068      	b.n	8000ba6 <init_key+0x1ee>
      } else {
        uint16_t usage_consumer_control = get_usage_consumer_control(keyboard_user_config.keymaps[i][row][column]);
 8000ad4:	7df9      	ldrb	r1, [r7, #23]
 8000ad6:	797a      	ldrb	r2, [r7, #5]
 8000ad8:	793b      	ldrb	r3, [r7, #4]
 8000ada:	483a      	ldr	r0, [pc, #232]	@ (8000bc4 <init_key+0x20c>)
 8000adc:	0089      	lsls	r1, r1, #2
 8000ade:	440a      	add	r2, r1
 8000ae0:	0092      	lsls	r2, r2, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff ff50 	bl	8000990 <get_usage_consumer_control>
 8000af0:	4603      	mov	r3, r0
 8000af2:	81fb      	strh	r3, [r7, #14]
        if (usage_consumer_control) {
 8000af4:	89fb      	ldrh	r3, [r7, #14]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d011      	beq.n	8000b1e <init_key+0x166>
          key->layers[i].type = KEY_TYPE_CONSUMER_CONTROL;
 8000afa:	7dfa      	ldrb	r2, [r7, #23]
 8000afc:	6939      	ldr	r1, [r7, #16]
 8000afe:	4613      	mov	r3, r2
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4413      	add	r3, r2
 8000b04:	440b      	add	r3, r1
 8000b06:	3305      	adds	r3, #5
 8000b08:	2203      	movs	r2, #3
 8000b0a:	701a      	strb	r2, [r3, #0]
          key->layers[i].value = usage_consumer_control;
 8000b0c:	7dfa      	ldrb	r2, [r7, #23]
 8000b0e:	6939      	ldr	r1, [r7, #16]
 8000b10:	4613      	mov	r3, r2
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	440b      	add	r3, r1
 8000b18:	89fa      	ldrh	r2, [r7, #14]
 8000b1a:	80da      	strh	r2, [r3, #6]
 8000b1c:	e043      	b.n	8000ba6 <init_key+0x1ee>
        } else {
          uint8_t bitmask = get_bitmask_for_modifier(keyboard_user_config.keymaps[i][row][column]);
 8000b1e:	7df9      	ldrb	r1, [r7, #23]
 8000b20:	797a      	ldrb	r2, [r7, #5]
 8000b22:	793b      	ldrb	r3, [r7, #4]
 8000b24:	4827      	ldr	r0, [pc, #156]	@ (8000bc4 <init_key+0x20c>)
 8000b26:	0089      	lsls	r1, r1, #2
 8000b28:	440a      	add	r2, r1
 8000b2a:	0092      	lsls	r2, r2, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3304      	adds	r3, #4
 8000b30:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fef6 	bl	8000928 <get_bitmask_for_modifier>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	737b      	strb	r3, [r7, #13]
          if (bitmask) {
 8000b40:	7b7b      	ldrb	r3, [r7, #13]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d013      	beq.n	8000b6e <init_key+0x1b6>
            key->layers[i].type = KEY_TYPE_MODIFIER;
 8000b46:	7dfa      	ldrb	r2, [r7, #23]
 8000b48:	6939      	ldr	r1, [r7, #16]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4413      	add	r3, r2
 8000b50:	440b      	add	r3, r1
 8000b52:	3305      	adds	r3, #5
 8000b54:	2202      	movs	r2, #2
 8000b56:	701a      	strb	r2, [r3, #0]
            key->layers[i].value = bitmask;
 8000b58:	7dfa      	ldrb	r2, [r7, #23]
 8000b5a:	7b7b      	ldrb	r3, [r7, #13]
 8000b5c:	b298      	uxth	r0, r3
 8000b5e:	6939      	ldr	r1, [r7, #16]
 8000b60:	4613      	mov	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	4602      	mov	r2, r0
 8000b6a:	80da      	strh	r2, [r3, #6]
 8000b6c:	e01b      	b.n	8000ba6 <init_key+0x1ee>
          } else {
            key->layers[i].type = KEY_TYPE_NORMAL;
 8000b6e:	7dfa      	ldrb	r2, [r7, #23]
 8000b70:	6939      	ldr	r1, [r7, #16]
 8000b72:	4613      	mov	r3, r2
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	4413      	add	r3, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	3305      	adds	r3, #5
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
            key->layers[i].value = keyboard_user_config.keymaps[i][row][column];
 8000b80:	7df8      	ldrb	r0, [r7, #23]
 8000b82:	7979      	ldrb	r1, [r7, #5]
 8000b84:	793b      	ldrb	r3, [r7, #4]
 8000b86:	7dfa      	ldrb	r2, [r7, #23]
 8000b88:	4c0e      	ldr	r4, [pc, #56]	@ (8000bc4 <init_key+0x20c>)
 8000b8a:	0080      	lsls	r0, r0, #2
 8000b8c:	4401      	add	r1, r0
 8000b8e:	0089      	lsls	r1, r1, #2
 8000b90:	440b      	add	r3, r1
 8000b92:	3304      	adds	r3, #4
 8000b94:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
 8000b98:	6939      	ldr	r1, [r7, #16]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	4413      	add	r3, r2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	80da      	strh	r2, [r3, #6]
  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8000ba6:	7dfb      	ldrb	r3, [r7, #23]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	75fb      	strb	r3, [r7, #23]
 8000bac:	7dfb      	ldrb	r3, [r7, #23]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	f67f af5f 	bls.w	8000a72 <init_key+0xba>
          }
        }
      }
    }
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	bf00      	nop
 8000bb8:	371c      	adds	r7, #28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd90      	pop	{r4, r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	2000010c 	.word	0x2000010c
 8000bc4:	20000000 	.word	0x20000000

08000bc8 <update_key_state>:

uint8_t update_key_state(struct key *key) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  struct state state;

  // Get a reading
  state.value = keyboard_user_config.reverse_magnet_pole ? 4095 - keyboard_read_adc() : keyboard_read_adc();
 8000bd0:	4ba5      	ldr	r3, [pc, #660]	@ (8000e68 <update_key_state+0x2a0>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d007      	beq.n	8000be8 <update_key_state+0x20>
 8000bd8:	f000 fe84 	bl	80018e4 <keyboard_read_adc>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8000be2:	330f      	adds	r3, #15
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	e002      	b.n	8000bee <update_key_state+0x26>
 8000be8:	f000 fe7c 	bl	80018e4 <keyboard_read_adc>
 8000bec:	4603      	mov	r3, r0
 8000bee:	813b      	strh	r3, [r7, #8]

  if (key->calibration.cycles_count < CALIBRATION_CYCLES) {
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	2b13      	cmp	r3, #19
 8000bfa:	d82f      	bhi.n	8000c5c <update_key_state+0x94>
    // Calibrate idle value
    float delta = 0.6;
 8000bfc:	4b9b      	ldr	r3, [pc, #620]	@ (8000e6c <update_key_state+0x2a4>)
 8000bfe:	617b      	str	r3, [r7, #20]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8000c00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000c04:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c0c:	893b      	ldrh	r3, [r7, #8]
 8000c0e:	ee07 3a90 	vmov	s15, r3
 8000c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	ee07 3a90 	vmov	s15, r3
 8000c26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c3a:	ee17 3a90 	vmov	r3, s15
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f8a3 200d 	strh.w	r2, [r3, #13]
    key->calibration.cycles_count++;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	3301      	adds	r3, #1
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f8a3 200b 	strh.w	r2, [r3, #11]

    return 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e101      	b.n	8000e60 <update_key_state+0x298>
  }

  // Calibrate idle value
  if (state.value > key->calibration.idle_value) {
 8000c5c:	893a      	ldrh	r2, [r7, #8]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d929      	bls.n	8000cbe <update_key_state+0xf6>
    // opti possible sur float
    float delta = 0.8;
 8000c6a:	4b81      	ldr	r3, [pc, #516]	@ (8000e70 <update_key_state+0x2a8>)
 8000c6c:	61fb      	str	r3, [r7, #28]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8000c6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000c72:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c7a:	893b      	ldrh	r3, [r7, #8]
 8000c7c:	ee07 3a90 	vmov	s15, r3
 8000c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	ee07 3a90 	vmov	s15, r3
 8000c94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c98:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ca8:	ee17 3a90 	vmov	r3, s15
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f8a3 200d 	strh.w	r2, [r3, #13]
    state.value = key->calibration.idle_value;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	813b      	strh	r3, [r7, #8]
  }

  // Do nothing if key is idle
  if (key->state.distance == 0 && state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f8b3 3013 	ldrh.w	r3, [r3, #19]
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d117      	bne.n	8000cfa <update_key_state+0x132>
 8000cca:	893b      	ldrh	r3, [r7, #8]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	3b0a      	subs	r3, #10
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	db0e      	blt.n	8000cfa <update_key_state+0x132>
    if (key->idle_counter >= IDLE_CYCLES_UNTIL_SLEEP) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	78db      	ldrb	r3, [r3, #3]
 8000ce0:	2b0e      	cmp	r3, #14
 8000ce2:	d904      	bls.n	8000cee <update_key_state+0x126>
      key->is_idle = 1;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	711a      	strb	r2, [r3, #4]
      return 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e0b8      	b.n	8000e60 <update_key_state+0x298>
    }
    key->idle_counter++;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	78db      	ldrb	r3, [r3, #3]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	70da      	strb	r2, [r3, #3]
  }

  // Get distance from top
  if (state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8000cfa:	893b      	ldrh	r3, [r7, #8]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	3b0a      	subs	r3, #10
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	db05      	blt.n	8000d18 <update_key_state+0x150>
    state.distance = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	817b      	strh	r3, [r7, #10]
    key->actuation.direction_changed_point = 0;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	775a      	strb	r2, [r3, #29]
 8000d16:	e00f      	b.n	8000d38 <update_key_state+0x170>
  } else {
    state.distance = key->calibration.idle_value - IDLE_VALUE_OFFSET - state.value;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	893b      	ldrh	r3, [r7, #8]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	3b0a      	subs	r3, #10
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	817b      	strh	r3, [r7, #10]
    key->is_idle = 0;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	711a      	strb	r2, [r3, #4]
    key->idle_counter = 0;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	70da      	strb	r2, [r3, #3]
  }

  // Calibrate max distance value
  if (state.distance > key->calibration.max_distance) {
 8000d38:	897a      	ldrh	r2, [r7, #10]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d903      	bls.n	8000d4e <update_key_state+0x186>
    key->calibration.max_distance = state.distance;
 8000d46:	897a      	ldrh	r2, [r7, #10]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f8a3 200f 	strh.w	r2, [r3, #15]
  }

  // Limit max distance
  if (state.distance >= key->calibration.max_distance - MAX_DISTANCE_OFFSET) {
 8000d4e:	897b      	ldrh	r3, [r7, #10]
 8000d50:	461a      	mov	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	3b3c      	subs	r3, #60	@ 0x3c
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	db04      	blt.n	8000d6a <update_key_state+0x1a2>
    state.distance = key->calibration.max_distance;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	817b      	strh	r3, [r7, #10]
  }

  // Map distance in percentages
  state.distance_8bits = (state.distance * 0xff) / key->calibration.max_distance;
 8000d6a:	897b      	ldrh	r3, [r7, #10]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4613      	mov	r3, r2
 8000d70:	021b      	lsls	r3, r3, #8
 8000d72:	1a9b      	subs	r3, r3, r2
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	f8b2 200f 	ldrh.w	r2, [r2, #15]
 8000d7a:	b292      	uxth	r2, r2
 8000d7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	733b      	strb	r3, [r7, #12]

  float delta = 0.8;
 8000d84:	4b3a      	ldr	r3, [pc, #232]	@ (8000e70 <update_key_state+0x2a8>)
 8000d86:	61bb      	str	r3, [r7, #24]
  state.filtered_distance = (1 - delta) * state.distance_8bits + delta * key->state.filtered_distance;
 8000d88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000d8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d94:	7b3b      	ldrb	r3, [r7, #12]
 8000d96:	ee07 3a90 	vmov	s15, r3
 8000d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000da8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dac:	ee06 3a90 	vmov	s13, r3
 8000db0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000db8:	ee17 3a90 	vmov	r3, s15
 8000dbc:	f8c7 300d 	str.w	r3, [r7, #13]
  state.filtered_distance_8bits = state.filtered_distance;
 8000dc0:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8000dc4:	ee07 3a90 	vmov	s15, r3
 8000dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dcc:	edc7 7a00 	vstr	s15, [r7]
 8000dd0:	783b      	ldrb	r3, [r7, #0]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	74bb      	strb	r3, [r7, #18]

  // Update velocity
  state.velocity = state.filtered_distance_8bits - key->state.filtered_distance_8bits;
 8000dd6:	7cba      	ldrb	r2, [r7, #18]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7edb      	ldrb	r3, [r3, #27]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	747b      	strb	r3, [r7, #17]

  // Update direction
  if (key->state.velocity > 0 && state.velocity > 0 && key->actuation.direction != GOING_DOWN) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	dd13      	ble.n	8000e16 <update_key_state+0x24e>
 8000dee:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	dd0f      	ble.n	8000e16 <update_key_state+0x24e>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7f1b      	ldrb	r3, [r3, #28]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d00b      	beq.n	8000e16 <update_key_state+0x24e>
    key->actuation.direction = GOING_DOWN;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2201      	movs	r2, #1
 8000e02:	771a      	strb	r2, [r3, #28]
    if (key->actuation.direction_changed_point != 0) {
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	7f5b      	ldrb	r3, [r3, #29]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d01c      	beq.n	8000e46 <update_key_state+0x27e>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	7eda      	ldrb	r2, [r3, #27]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	775a      	strb	r2, [r3, #29]
    if (key->actuation.direction_changed_point != 0) {
 8000e14:	e017      	b.n	8000e46 <update_key_state+0x27e>
    }
  } else if (key->state.velocity < 0 && state.velocity < 0 && key->actuation.direction != GOING_UP) {
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	da12      	bge.n	8000e46 <update_key_state+0x27e>
 8000e20:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	da0e      	bge.n	8000e46 <update_key_state+0x27e>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	7f1b      	ldrb	r3, [r3, #28]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d00a      	beq.n	8000e46 <update_key_state+0x27e>
    key->actuation.direction = GOING_UP;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	771a      	strb	r2, [r3, #28]
    if (key->actuation.direction_changed_point != 255) {
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	7f5b      	ldrb	r3, [r3, #29]
 8000e3a:	2bff      	cmp	r3, #255	@ 0xff
 8000e3c:	d003      	beq.n	8000e46 <update_key_state+0x27e>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7eda      	ldrb	r2, [r3, #27]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	775a      	strb	r2, [r3, #29]
    }
  }

  key->state = state;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f103 0211 	add.w	r2, r3, #17
 8000e4c:	f107 0308 	add.w	r3, r7, #8
 8000e50:	cb03      	ldmia	r3!, {r0, r1}
 8000e52:	6010      	str	r0, [r2, #0]
 8000e54:	6051      	str	r1, [r2, #4]
 8000e56:	8819      	ldrh	r1, [r3, #0]
 8000e58:	789b      	ldrb	r3, [r3, #2]
 8000e5a:	8111      	strh	r1, [r2, #8]
 8000e5c:	7293      	strb	r3, [r2, #10]
  return 1;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3720      	adds	r7, #32
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	3f19999a 	.word	0x3f19999a
 8000e70:	3f4ccccd 	.word	0x3f4ccccd

08000e74 <update_key_actuation>:

void update_key_actuation(struct key *key) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
   *
   */

  // if rapid trigger enable, move trigger and reset offsets according to the distance taht began the trigger

  uint32_t now = keyboard_get_time();
 8000e7c:	f000 fd48 	bl	8001910 <keyboard_get_time>
 8000e80:	6178      	str	r0, [r7, #20]
  uint8_t is_after_trigger_offset = key->state.distance_8bits > key->actuation.trigger_offset;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7d5a      	ldrb	r2, [r3, #21]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	bf8c      	ite	hi
 8000e90:	2301      	movhi	r3, #1
 8000e92:	2300      	movls	r3, #0
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	74fb      	strb	r3, [r7, #19]
  uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7d5a      	ldrb	r2, [r3, #21]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	7fdb      	ldrb	r3, [r3, #31]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	bf34      	ite	cc
 8000ea4:	2301      	movcc	r3, #1
 8000ea6:	2300      	movcs	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	74bb      	strb	r3, [r7, #18]
  uint8_t has_rapid_trigger = key->actuation.rapid_trigger_offset != 0;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	bf14      	ite	ne
 8000eb6:	2301      	movne	r3, #1
 8000eb8:	2300      	moveq	r3, #0
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	747b      	strb	r3, [r7, #17]
  uint8_t is_after_rapid_trigger_offset = key->state.distance_8bits > key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset + keyboard_user_config.reset_threshold;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7d5b      	ldrb	r3, [r3, #21]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7f5b      	ldrb	r3, [r3, #29]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	4a54      	ldr	r2, [pc, #336]	@ (8001024 <update_key_actuation+0x1b0>)
 8000ed4:	7892      	ldrb	r2, [r2, #2]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4299      	cmp	r1, r3
 8000eda:	bfcc      	ite	gt
 8000edc:	2301      	movgt	r3, #1
 8000ede:	2300      	movle	r3, #0
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	743b      	strb	r3, [r7, #16]
  uint8_t is_before_rapid_reset_offset = key->state.distance_8bits < key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7d5b      	ldrb	r3, [r3, #21]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	7f5b      	ldrb	r3, [r3, #29]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ef6:	1acb      	subs	r3, r1, r3
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	bfb4      	ite	lt
 8000efc:	2301      	movlt	r3, #1
 8000efe:	2300      	movge	r3, #0
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	73fb      	strb	r3, [r7, #15]

  switch (key->actuation.status) {
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7f9b      	ldrb	r3, [r3, #30]
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d87f      	bhi.n	800100e <update_key_actuation+0x19a>
 8000f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f14 <update_key_actuation+0xa0>)
 8000f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f14:	08000fc5 	.word	0x08000fc5
 8000f18:	08000fd5 	.word	0x08000fd5
 8000f1c:	08000f25 	.word	0x08000f25
 8000f20:	08000f5d 	.word	0x08000f5d

  case STATUS_RESET:
    // if reset, can be triggered or tap
    if (is_after_trigger_offset) {
 8000f24:	7cfb      	ldrb	r3, [r7, #19]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d073      	beq.n	8001012 <update_key_actuation+0x19e>
      if (key->layers[_TAP_LAYER].value) {
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <update_key_actuation+0xca>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	779a      	strb	r2, [r3, #30]
 8000f3c:	e009      	b.n	8000f52 <update_key_actuation+0xde>
        // key_triggered = 1;
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2202      	movs	r2, #2
 8000f42:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 8000f44:	4b38      	ldr	r3, [pc, #224]	@ (8001028 <update_key_actuation+0x1b4>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, _BASE_LAYER);
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff fb43 	bl	80005d8 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	f8c3 2023 	str.w	r2, [r3, #35]	@ 0x23
    }
    break;
 8000f5a:	e05a      	b.n	8001012 <update_key_actuation+0x19e>

  case STATUS_RAPID_TRIGGER_RESET:
    if (!has_rapid_trigger) {
 8000f5c:	7c7b      	ldrb	r3, [r7, #17]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d103      	bne.n	8000f6a <update_key_actuation+0xf6>
      key->actuation.status = STATUS_RESET;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2203      	movs	r2, #3
 8000f66:	779a      	strb	r2, [r3, #30]
      break;
 8000f68:	e058      	b.n	800101c <update_key_actuation+0x1a8>
    }
    // if reset, can be triggered or tap
    if (is_after_trigger_offset && key->actuation.direction == GOING_DOWN && is_after_rapid_trigger_offset) {
 8000f6a:	7cfb      	ldrb	r3, [r7, #19]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d022      	beq.n	8000fb6 <update_key_actuation+0x142>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7f1b      	ldrb	r3, [r3, #28]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d11e      	bne.n	8000fb6 <update_key_actuation+0x142>
 8000f78:	7c3b      	ldrb	r3, [r7, #16]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d01b      	beq.n	8000fb6 <update_key_actuation+0x142>
      if (key->layers[_TAP_LAYER].value) {
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d006      	beq.n	8000f98 <update_key_actuation+0x124>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 8000f90:	4b25      	ldr	r3, [pc, #148]	@ (8001028 <update_key_actuation+0x1b4>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
 8000f96:	e009      	b.n	8000fac <update_key_actuation+0x138>
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 8000f9e:	4b22      	ldr	r3, [pc, #136]	@ (8001028 <update_key_actuation+0x1b4>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, _BASE_LAYER);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff fb16 	bl	80005d8 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	697a      	ldr	r2, [r7, #20]
 8000fb0:	f8c3 2023 	str.w	r2, [r3, #35]	@ 0x23
    } else if (is_before_reset_offset) {
      key->actuation.status = STATUS_RESET;
    }
    break;
 8000fb4:	e02f      	b.n	8001016 <update_key_actuation+0x1a2>
    } else if (is_before_reset_offset) {
 8000fb6:	7cbb      	ldrb	r3, [r7, #18]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d02c      	beq.n	8001016 <update_key_actuation+0x1a2>
      key->actuation.status = STATUS_RESET;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	779a      	strb	r2, [r3, #30]
    break;
 8000fc2:	e028      	b.n	8001016 <update_key_actuation+0x1a2>

  case STATUS_TAP:
    // if tap, can be reset
    key->actuation.status = STATUS_RESET;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	779a      	strb	r2, [r3, #30]
    hid_release_key(key, _TAP_LAYER);
 8000fca:	2101      	movs	r1, #1
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff fbad 	bl	800072c <hid_release_key>
    break;
 8000fd2:	e023      	b.n	800101c <update_key_actuation+0x1a8>

  case STATUS_TRIGGERED:
    // if triggered, can be reset
    if (is_before_reset_offset) {
 8000fd4:	7cbb      	ldrb	r3, [r7, #18]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d007      	beq.n	8000fea <update_key_actuation+0x176>
      key->actuation.status = STATUS_RESET;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2203      	movs	r2, #3
 8000fde:	779a      	strb	r2, [r3, #30]
      hid_release_key(key, _BASE_LAYER);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff fba2 	bl	800072c <hid_release_key>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
      hid_release_key(key, _BASE_LAYER);
    }
    break;
 8000fe8:	e017      	b.n	800101a <update_key_actuation+0x1a6>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
 8000fea:	7c7b      	ldrb	r3, [r7, #17]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d014      	beq.n	800101a <update_key_actuation+0x1a6>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	7f1b      	ldrb	r3, [r3, #28]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d110      	bne.n	800101a <update_key_actuation+0x1a6>
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00d      	beq.n	800101a <update_key_actuation+0x1a6>
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2204      	movs	r2, #4
 8001002:	779a      	strb	r2, [r3, #30]
      hid_release_key(key, _BASE_LAYER);
 8001004:	2100      	movs	r1, #0
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff fb90 	bl	800072c <hid_release_key>
    break;
 800100c:	e005      	b.n	800101a <update_key_actuation+0x1a6>

  default:
    break;
 800100e:	bf00      	nop
 8001010:	e004      	b.n	800101c <update_key_actuation+0x1a8>
    break;
 8001012:	bf00      	nop
 8001014:	e002      	b.n	800101c <update_key_actuation+0x1a8>
    break;
 8001016:	bf00      	nop
 8001018:	e000      	b.n	800101c <update_key_actuation+0x1a8>
    break;
 800101a:	bf00      	nop
  }
}
 800101c:	bf00      	nop
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000000 	.word	0x20000000
 8001028:	20000380 	.word	0x20000380

0800102c <update_key>:

void update_key(struct key *key) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if (!update_key_state(key)) {
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff fdc7 	bl	8000bc8 <update_key_state>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <update_key+0x1c>
    return;
  }

  update_key_actuation(key);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff ff17 	bl	8000e74 <update_key_actuation>
 8001046:	e000      	b.n	800104a <update_key+0x1e>
    return;
 8001048:	bf00      	nop
}
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <keyboard_init_keys>:

void keyboard_init_keys() {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0

  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8001056:	2300      	movs	r3, #0
 8001058:	71fb      	strb	r3, [r7, #7]
 800105a:	e027      	b.n	80010ac <keyboard_init_keys+0x5c>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 800105c:	2300      	movs	r3, #0
 800105e:	71bb      	strb	r3, [r7, #6]
 8001060:	e01e      	b.n	80010a0 <keyboard_init_keys+0x50>
      if (channels_by_row_col[row][col][0] != XXXX) {
 8001062:	79fa      	ldrb	r2, [r7, #7]
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	4915      	ldr	r1, [pc, #84]	@ (80010bc <keyboard_init_keys+0x6c>)
 8001068:	0092      	lsls	r2, r2, #2
 800106a:	4413      	add	r3, r2
 800106c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001070:	2bff      	cmp	r3, #255	@ 0xff
 8001072:	d012      	beq.n	800109a <keyboard_init_keys+0x4a>
        init_key(channels_by_row_col[row][col][0], channels_by_row_col[row][col][1], row, col);
 8001074:	79fa      	ldrb	r2, [r7, #7]
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	4910      	ldr	r1, [pc, #64]	@ (80010bc <keyboard_init_keys+0x6c>)
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	4413      	add	r3, r2
 800107e:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 8001082:	79fa      	ldrb	r2, [r7, #7]
 8001084:	79bb      	ldrb	r3, [r7, #6]
 8001086:	490d      	ldr	r1, [pc, #52]	@ (80010bc <keyboard_init_keys+0x6c>)
 8001088:	0092      	lsls	r2, r2, #2
 800108a:	4413      	add	r3, r2
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	440b      	add	r3, r1
 8001090:	7859      	ldrb	r1, [r3, #1]
 8001092:	79bb      	ldrb	r3, [r7, #6]
 8001094:	79fa      	ldrb	r2, [r7, #7]
 8001096:	f7ff fc8f 	bl	80009b8 <init_key>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 800109a:	79bb      	ldrb	r3, [r7, #6]
 800109c:	3301      	adds	r3, #1
 800109e:	71bb      	strb	r3, [r7, #6]
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d9dd      	bls.n	8001062 <keyboard_init_keys+0x12>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	3301      	adds	r3, #1
 80010aa:	71fb      	strb	r3, [r7, #7]
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d9d4      	bls.n	800105c <keyboard_init_keys+0xc>
      }
    }
  }
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	0800a9c0 	.word	0x0800a9c0

080010c0 <keyboard_task>:
void keyboard_task() {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 80010c6:	f000 fc23 	bl	8001910 <keyboard_get_time>
 80010ca:	60b8      	str	r0, [r7, #8]
  key_triggered = 0;
 80010cc:	4b61      	ldr	r3, [pc, #388]	@ (8001254 <keyboard_task+0x194>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80010d2:	2300      	movs	r3, #0
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	e039      	b.n	800114c <keyboard_task+0x8c>
    keyboard_select_amux(amux_channel);
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fbbe 	bl	800185c <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80010e0:	2300      	movs	r3, #0
 80010e2:	73bb      	strb	r3, [r7, #14]
 80010e4:	e02c      	b.n	8001140 <keyboard_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 80010e6:	7bb9      	ldrb	r1, [r7, #14]
 80010e8:	7bfa      	ldrb	r2, [r7, #15]
 80010ea:	485b      	ldr	r0, [pc, #364]	@ (8001258 <keyboard_task+0x198>)
 80010ec:	4613      	mov	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	1a9b      	subs	r3, r3, r2
 80010f6:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80010fa:	fb01 f202 	mul.w	r2, r1, r2
 80010fe:	4413      	add	r3, r2
 8001100:	4403      	add	r3, r0
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d017      	beq.n	8001138 <keyboard_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 8001108:	7bbb      	ldrb	r3, [r7, #14]
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fbce 	bl	80018ac <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 8001110:	7bb9      	ldrb	r1, [r7, #14]
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	4613      	mov	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	1a9b      	subs	r3, r3, r2
 800111e:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001122:	fb01 f202 	mul.w	r2, r1, r2
 8001126:	4413      	add	r3, r2
 8001128:	4a4b      	ldr	r2, [pc, #300]	@ (8001258 <keyboard_task+0x198>)
 800112a:	4413      	add	r3, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff7d 	bl	800102c <update_key>

      keyboard_close_adc();
 8001132:	f000 fbe3 	bl	80018fc <keyboard_close_adc>
 8001136:	e000      	b.n	800113a <keyboard_task+0x7a>
        continue;
 8001138:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	3301      	adds	r3, #1
 800113e:	73bb      	strb	r3, [r7, #14]
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0cf      	beq.n	80010e6 <keyboard_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	3301      	adds	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	2b0f      	cmp	r3, #15
 8001150:	d9c2      	bls.n	80010d8 <keyboard_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8001152:	2300      	movs	r3, #0
 8001154:	737b      	strb	r3, [r7, #13]
 8001156:	e074      	b.n	8001242 <keyboard_task+0x182>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8001158:	2300      	movs	r3, #0
 800115a:	733b      	strb	r3, [r7, #12]
 800115c:	e06b      	b.n	8001236 <keyboard_task+0x176>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 800115e:	7b39      	ldrb	r1, [r7, #12]
 8001160:	7b7a      	ldrb	r2, [r7, #13]
 8001162:	483d      	ldr	r0, [pc, #244]	@ (8001258 <keyboard_task+0x198>)
 8001164:	4613      	mov	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	1a9b      	subs	r3, r3, r2
 800116e:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001172:	fb01 f202 	mul.w	r2, r1, r2
 8001176:	4413      	add	r3, r2
 8001178:	4403      	add	r3, r0
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d056      	beq.n	800122e <keyboard_task+0x16e>
 8001180:	7b39      	ldrb	r1, [r7, #12]
 8001182:	7b7a      	ldrb	r2, [r7, #13]
 8001184:	4834      	ldr	r0, [pc, #208]	@ (8001258 <keyboard_task+0x198>)
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	1a9b      	subs	r3, r3, r2
 8001190:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001194:	fb01 f202 	mul.w	r2, r1, r2
 8001198:	4413      	add	r3, r2
 800119a:	4403      	add	r3, r0
 800119c:	331e      	adds	r3, #30
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d144      	bne.n	800122e <keyboard_task+0x16e>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 80011a4:	7b39      	ldrb	r1, [r7, #12]
 80011a6:	7b7a      	ldrb	r2, [r7, #13]
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	1a9b      	subs	r3, r3, r2
 80011b2:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80011b6:	fb01 f202 	mul.w	r2, r1, r2
 80011ba:	4413      	add	r3, r2
 80011bc:	4a26      	ldr	r2, [pc, #152]	@ (8001258 <keyboard_task+0x198>)
 80011be:	4413      	add	r3, r2
 80011c0:	607b      	str	r3, [r7, #4]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7d5a      	ldrb	r2, [r3, #21]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7fdb      	ldrb	r3, [r3, #31]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	bf34      	ite	cc
 80011ce:	2301      	movcc	r3, #1
 80011d0:	2300      	movcs	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	70fb      	strb	r3, [r7, #3]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 80011d6:	f000 fb9b 	bl	8001910 <keyboard_get_time>
 80011da:	4602      	mov	r2, r0
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f8d3 3023 	ldr.w	r3, [r3, #35]	@ 0x23
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	4a1d      	ldr	r2, [pc, #116]	@ (800125c <keyboard_task+0x19c>)
 80011e6:	88d2      	ldrh	r2, [r2, #6]
 80011e8:	4293      	cmp	r3, r2
 80011ea:	bf94      	ite	ls
 80011ec:	2301      	movls	r3, #1
 80011ee:	2300      	movhi	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	70bb      	strb	r3, [r7, #2]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 80011f4:	78fb      	ldrb	r3, [r7, #3]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00a      	beq.n	8001210 <keyboard_task+0x150>
 80011fa:	78bb      	ldrb	r3, [r7, #2]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d007      	beq.n	8001210 <keyboard_task+0x150>
        key->actuation.status = STATUS_TAP;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	779a      	strb	r2, [r3, #30]
        hid_press_key(key, _TAP_LAYER);
 8001206:	2101      	movs	r1, #1
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff f9e5 	bl	80005d8 <hid_press_key>
 800120e:	e00f      	b.n	8001230 <keyboard_task+0x170>
      } else if (!is_before_timeout || key_triggered) {
 8001210:	78bb      	ldrb	r3, [r7, #2]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <keyboard_task+0x15e>
 8001216:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <keyboard_task+0x194>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d008      	beq.n	8001230 <keyboard_task+0x170>
        key->actuation.status = STATUS_TRIGGERED;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2202      	movs	r2, #2
 8001222:	779a      	strb	r2, [r3, #30]
        hid_press_key(key, _BASE_LAYER);
 8001224:	2100      	movs	r1, #0
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff f9d6 	bl	80005d8 <hid_press_key>
 800122c:	e000      	b.n	8001230 <keyboard_task+0x170>
        continue;
 800122e:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8001230:	7b3b      	ldrb	r3, [r7, #12]
 8001232:	3301      	adds	r3, #1
 8001234:	733b      	strb	r3, [r7, #12]
 8001236:	7b3b      	ldrb	r3, [r7, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d090      	beq.n	800115e <keyboard_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800123c:	7b7b      	ldrb	r3, [r7, #13]
 800123e:	3301      	adds	r3, #1
 8001240:	737b      	strb	r3, [r7, #13]
 8001242:	7b7b      	ldrb	r3, [r7, #13]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d987      	bls.n	8001158 <keyboard_task+0x98>
      }
    }
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000380 	.word	0x20000380
 8001258:	2000010c 	.word	0x2000010c
 800125c:	20000000 	.word	0x20000000

08001260 <keyboard_task_snaptap>:
void keyboard_task_snaptap() {
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 8001266:	f000 fb53 	bl	8001910 <keyboard_get_time>
 800126a:	6138      	str	r0, [r7, #16]
  key_triggered = 0;
 800126c:	4b86      	ldr	r3, [pc, #536]	@ (8001488 <keyboard_task_snaptap+0x228>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8001272:	2300      	movs	r3, #0
 8001274:	77fb      	strb	r3, [r7, #31]
 8001276:	e039      	b.n	80012ec <keyboard_task_snaptap+0x8c>
    keyboard_select_amux(amux_channel);
 8001278:	7ffb      	ldrb	r3, [r7, #31]
 800127a:	4618      	mov	r0, r3
 800127c:	f000 faee 	bl	800185c <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8001280:	2300      	movs	r3, #0
 8001282:	77bb      	strb	r3, [r7, #30]
 8001284:	e02c      	b.n	80012e0 <keyboard_task_snaptap+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 8001286:	7fb9      	ldrb	r1, [r7, #30]
 8001288:	7ffa      	ldrb	r2, [r7, #31]
 800128a:	4880      	ldr	r0, [pc, #512]	@ (800148c <keyboard_task_snaptap+0x22c>)
 800128c:	4613      	mov	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	1a9b      	subs	r3, r3, r2
 8001296:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800129a:	fb01 f202 	mul.w	r2, r1, r2
 800129e:	4413      	add	r3, r2
 80012a0:	4403      	add	r3, r0
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d017      	beq.n	80012d8 <keyboard_task_snaptap+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 80012a8:	7fbb      	ldrb	r3, [r7, #30]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 fafe 	bl	80018ac <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 80012b0:	7fb9      	ldrb	r1, [r7, #30]
 80012b2:	7ffa      	ldrb	r2, [r7, #31]
 80012b4:	4613      	mov	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	1a9b      	subs	r3, r3, r2
 80012be:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80012c2:	fb01 f202 	mul.w	r2, r1, r2
 80012c6:	4413      	add	r3, r2
 80012c8:	4a70      	ldr	r2, [pc, #448]	@ (800148c <keyboard_task_snaptap+0x22c>)
 80012ca:	4413      	add	r3, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fead 	bl	800102c <update_key>

      keyboard_close_adc();
 80012d2:	f000 fb13 	bl	80018fc <keyboard_close_adc>
 80012d6:	e000      	b.n	80012da <keyboard_task_snaptap+0x7a>
        continue;
 80012d8:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80012da:	7fbb      	ldrb	r3, [r7, #30]
 80012dc:	3301      	adds	r3, #1
 80012de:	77bb      	strb	r3, [r7, #30]
 80012e0:	7fbb      	ldrb	r3, [r7, #30]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0cf      	beq.n	8001286 <keyboard_task_snaptap+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80012e6:	7ffb      	ldrb	r3, [r7, #31]
 80012e8:	3301      	adds	r3, #1
 80012ea:	77fb      	strb	r3, [r7, #31]
 80012ec:	7ffb      	ldrb	r3, [r7, #31]
 80012ee:	2b0f      	cmp	r3, #15
 80012f0:	d9c2      	bls.n	8001278 <keyboard_task_snaptap+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80012f2:	2300      	movs	r3, #0
 80012f4:	777b      	strb	r3, [r7, #29]
 80012f6:	e074      	b.n	80013e2 <keyboard_task_snaptap+0x182>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80012f8:	2300      	movs	r3, #0
 80012fa:	773b      	strb	r3, [r7, #28]
 80012fc:	e06b      	b.n	80013d6 <keyboard_task_snaptap+0x176>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 80012fe:	7f39      	ldrb	r1, [r7, #28]
 8001300:	7f7a      	ldrb	r2, [r7, #29]
 8001302:	4862      	ldr	r0, [pc, #392]	@ (800148c <keyboard_task_snaptap+0x22c>)
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	1a9b      	subs	r3, r3, r2
 800130e:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001312:	fb01 f202 	mul.w	r2, r1, r2
 8001316:	4413      	add	r3, r2
 8001318:	4403      	add	r3, r0
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d056      	beq.n	80013ce <keyboard_task_snaptap+0x16e>
 8001320:	7f39      	ldrb	r1, [r7, #28]
 8001322:	7f7a      	ldrb	r2, [r7, #29]
 8001324:	4859      	ldr	r0, [pc, #356]	@ (800148c <keyboard_task_snaptap+0x22c>)
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	1a9b      	subs	r3, r3, r2
 8001330:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001334:	fb01 f202 	mul.w	r2, r1, r2
 8001338:	4413      	add	r3, r2
 800133a:	4403      	add	r3, r0
 800133c:	331e      	adds	r3, #30
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d144      	bne.n	80013ce <keyboard_task_snaptap+0x16e>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8001344:	7f39      	ldrb	r1, [r7, #28]
 8001346:	7f7a      	ldrb	r2, [r7, #29]
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	1a9b      	subs	r3, r3, r2
 8001352:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001356:	fb01 f202 	mul.w	r2, r1, r2
 800135a:	4413      	add	r3, r2
 800135c:	4a4b      	ldr	r2, [pc, #300]	@ (800148c <keyboard_task_snaptap+0x22c>)
 800135e:	4413      	add	r3, r2
 8001360:	60bb      	str	r3, [r7, #8]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	7d5a      	ldrb	r2, [r3, #21]
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	7fdb      	ldrb	r3, [r3, #31]
 800136a:	429a      	cmp	r2, r3
 800136c:	bf34      	ite	cc
 800136e:	2301      	movcc	r3, #1
 8001370:	2300      	movcs	r3, #0
 8001372:	b2db      	uxtb	r3, r3
 8001374:	71fb      	strb	r3, [r7, #7]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 8001376:	f000 facb 	bl	8001910 <keyboard_get_time>
 800137a:	4602      	mov	r2, r0
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	f8d3 3023 	ldr.w	r3, [r3, #35]	@ 0x23
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	4a42      	ldr	r2, [pc, #264]	@ (8001490 <keyboard_task_snaptap+0x230>)
 8001386:	88d2      	ldrh	r2, [r2, #6]
 8001388:	4293      	cmp	r3, r2
 800138a:	bf94      	ite	ls
 800138c:	2301      	movls	r3, #1
 800138e:	2300      	movhi	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	71bb      	strb	r3, [r7, #6]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00a      	beq.n	80013b0 <keyboard_task_snaptap+0x150>
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d007      	beq.n	80013b0 <keyboard_task_snaptap+0x150>
        key->actuation.status = STATUS_TAP;
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2201      	movs	r2, #1
 80013a4:	779a      	strb	r2, [r3, #30]
        hid_press_key(key, _TAP_LAYER);
 80013a6:	2101      	movs	r1, #1
 80013a8:	68b8      	ldr	r0, [r7, #8]
 80013aa:	f7ff f915 	bl	80005d8 <hid_press_key>
 80013ae:	e00f      	b.n	80013d0 <keyboard_task_snaptap+0x170>
      } else if (!is_before_timeout || key_triggered) {
 80013b0:	79bb      	ldrb	r3, [r7, #6]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <keyboard_task_snaptap+0x15e>
 80013b6:	4b34      	ldr	r3, [pc, #208]	@ (8001488 <keyboard_task_snaptap+0x228>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d008      	beq.n	80013d0 <keyboard_task_snaptap+0x170>
        key->actuation.status = STATUS_TRIGGERED;
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	2202      	movs	r2, #2
 80013c2:	779a      	strb	r2, [r3, #30]
        hid_press_key(key, _BASE_LAYER);
 80013c4:	2100      	movs	r1, #0
 80013c6:	68b8      	ldr	r0, [r7, #8]
 80013c8:	f7ff f906 	bl	80005d8 <hid_press_key>
 80013cc:	e000      	b.n	80013d0 <keyboard_task_snaptap+0x170>
        continue;
 80013ce:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80013d0:	7f3b      	ldrb	r3, [r7, #28]
 80013d2:	3301      	adds	r3, #1
 80013d4:	773b      	strb	r3, [r7, #28]
 80013d6:	7f3b      	ldrb	r3, [r7, #28]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d090      	beq.n	80012fe <keyboard_task_snaptap+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80013dc:	7f7b      	ldrb	r3, [r7, #29]
 80013de:	3301      	adds	r3, #1
 80013e0:	777b      	strb	r3, [r7, #29]
 80013e2:	7f7b      	ldrb	r3, [r7, #29]
 80013e4:	2b0f      	cmp	r3, #15
 80013e6:	d987      	bls.n	80012f8 <keyboard_task_snaptap+0x98>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 80013e8:	f000 fa92 	bl	8001910 <keyboard_get_time>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	4a28      	ldr	r2, [pc, #160]	@ (8001494 <keyboard_task_snaptap+0x234>)
 80013f4:	6013      	str	r3, [r2, #0]

  // Snaptap logic - chỉ xử lý việc thả phím cũ, không nhấn phím mới
  static struct key* current_pressed_key = NULL;
  struct key* new_pressed_key = NULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
  
  // Tìm phím đang TRIGGERED
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80013fa:	2300      	movs	r3, #0
 80013fc:	75fb      	strb	r3, [r7, #23]
 80013fe:	e028      	b.n	8001452 <keyboard_task_snaptap+0x1f2>
      for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8001400:	2300      	movs	r3, #0
 8001402:	75bb      	strb	r3, [r7, #22]
 8001404:	e01c      	b.n	8001440 <keyboard_task_snaptap+0x1e0>
          struct key* key = &keyboard_keys[adc_channel][amux_channel];
 8001406:	7db9      	ldrb	r1, [r7, #22]
 8001408:	7dfa      	ldrb	r2, [r7, #23]
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	1a9b      	subs	r3, r3, r2
 8001414:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001418:	fb01 f202 	mul.w	r2, r1, r2
 800141c:	4413      	add	r3, r2
 800141e:	4a1b      	ldr	r2, [pc, #108]	@ (800148c <keyboard_task_snaptap+0x22c>)
 8001420:	4413      	add	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]
          if (key->is_enabled && key->actuation.status == STATUS_TRIGGERED) {
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d006      	beq.n	800143a <keyboard_task_snaptap+0x1da>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	7f9b      	ldrb	r3, [r3, #30]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d102      	bne.n	800143a <keyboard_task_snaptap+0x1da>
              new_pressed_key = key;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	61bb      	str	r3, [r7, #24]
              break;
 8001438:	e005      	b.n	8001446 <keyboard_task_snaptap+0x1e6>
      for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800143a:	7dbb      	ldrb	r3, [r7, #22]
 800143c:	3301      	adds	r3, #1
 800143e:	75bb      	strb	r3, [r7, #22]
 8001440:	7dbb      	ldrb	r3, [r7, #22]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0df      	beq.n	8001406 <keyboard_task_snaptap+0x1a6>
          }
      }
      if (new_pressed_key) break;
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d106      	bne.n	800145a <keyboard_task_snaptap+0x1fa>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	3301      	adds	r3, #1
 8001450:	75fb      	strb	r3, [r7, #23]
 8001452:	7dfb      	ldrb	r3, [r7, #23]
 8001454:	2b0f      	cmp	r3, #15
 8001456:	d9d3      	bls.n	8001400 <keyboard_task_snaptap+0x1a0>
 8001458:	e000      	b.n	800145c <keyboard_task_snaptap+0x1fc>
      if (new_pressed_key) break;
 800145a:	bf00      	nop
  }
  
  // Xử lý snaptap - chỉ thả phím cũ, không nhấn phím mới
  if (new_pressed_key != current_pressed_key) {
 800145c:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <keyboard_task_snaptap+0x238>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	429a      	cmp	r2, r3
 8001464:	d00c      	beq.n	8001480 <keyboard_task_snaptap+0x220>
      if (current_pressed_key) {
 8001466:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <keyboard_task_snaptap+0x238>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <keyboard_task_snaptap+0x21a>
          hid_release_key(current_pressed_key, _BASE_LAYER);
 800146e:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <keyboard_task_snaptap+0x238>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f959 	bl	800072c <hid_release_key>
      }
      // KHÔNG gọi hid_press_key() ở đây vì phím đã được nhấn trong update_key_actuation()
      current_pressed_key = new_pressed_key;
 800147a:	4a07      	ldr	r2, [pc, #28]	@ (8001498 <keyboard_task_snaptap+0x238>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6013      	str	r3, [r2, #0]
  }
}
 8001480:	bf00      	nop
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000380 	.word	0x20000380
 800148c:	2000010c 	.word	0x2000010c
 8001490:	20000000 	.word	0x20000000
 8001494:	2000037c 	.word	0x2000037c
 8001498:	20000384 	.word	0x20000384

0800149c <keyboard_get_current_mode>:
        last_pressed_key = current_pressed_key;
    }
}

// Thêm các hàm quản lý chế độ
enum keyboard_mode keyboard_get_current_mode() {
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
    return current_mode;
 80014a0:	4b03      	ldr	r3, [pc, #12]	@ (80014b0 <keyboard_get_current_mode+0x14>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000107 	.word	0x20000107

080014b4 <keyboard_check_and_toggle_mode>:

void keyboard_check_and_toggle_mode() {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
    // Kiểm tra phím thứ 16 (row=3, col=3) - phím MACRO_CTRL_A
    struct key* mode_key = &keyboard_keys[0][15]; // adc_channel=0, amux_channel=15
 80014ba:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <keyboard_check_and_toggle_mode+0x64>)
 80014bc:	607b      	str	r3, [r7, #4]
    
    if (mode_key->is_enabled && mode_key->actuation.status == STATUS_TRIGGERED) {
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d01f      	beq.n	8001506 <keyboard_check_and_toggle_mode+0x52>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7f9b      	ldrb	r3, [r3, #30]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d11b      	bne.n	8001506 <keyboard_check_and_toggle_mode+0x52>
        if (!mode_toggle_key_pressed) {
 80014ce:	4b13      	ldr	r3, [pc, #76]	@ (800151c <keyboard_check_and_toggle_mode+0x68>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d11b      	bne.n	800150e <keyboard_check_and_toggle_mode+0x5a>
            // Chuyển đổi chế độ
            if (current_mode == MODE_COMBO_KEY) {
 80014d6:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <keyboard_check_and_toggle_mode+0x6c>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d106      	bne.n	80014ec <keyboard_check_and_toggle_mode+0x38>
                current_mode = MODE_SNAPTAP;
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <keyboard_check_and_toggle_mode+0x6c>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	701a      	strb	r2, [r3, #0]
                printf("Switched to SNAPTAP mode\n");
 80014e4:	480f      	ldr	r0, [pc, #60]	@ (8001524 <keyboard_check_and_toggle_mode+0x70>)
 80014e6:	f008 fe43 	bl	800a170 <puts>
 80014ea:	e005      	b.n	80014f8 <keyboard_check_and_toggle_mode+0x44>
            } else {
                current_mode = MODE_COMBO_KEY;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <keyboard_check_and_toggle_mode+0x6c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
                printf("Switched to COMBO_KEY mode\n");
 80014f2:	480d      	ldr	r0, [pc, #52]	@ (8001528 <keyboard_check_and_toggle_mode+0x74>)
 80014f4:	f008 fe3c 	bl	800a170 <puts>
            }
            mode_toggle_key_pressed = 1;
 80014f8:	4b08      	ldr	r3, [pc, #32]	@ (800151c <keyboard_check_and_toggle_mode+0x68>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
            
            // Đặt trạng thái phím về RESET để tránh thực hiện macro
            mode_key->actuation.status = STATUS_RESET;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2203      	movs	r2, #3
 8001502:	779a      	strb	r2, [r3, #30]
        if (!mode_toggle_key_pressed) {
 8001504:	e003      	b.n	800150e <keyboard_check_and_toggle_mode+0x5a>
        }
    } else {
        // Reset flag khi phím được thả
        mode_toggle_key_pressed = 0;
 8001506:	4b05      	ldr	r3, [pc, #20]	@ (800151c <keyboard_check_and_toggle_mode+0x68>)
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
    }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000355 	.word	0x20000355
 800151c:	20000108 	.word	0x20000108
 8001520:	20000107 	.word	0x20000107
 8001524:	0800a930 	.word	0x0800a930
 8001528:	0800a94c 	.word	0x0800a94c

0800152c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001530:	f000 fcda 	bl	8001ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001534:	f000 f82a 	bl	800158c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001538:	f000 f93e 	bl	80017b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800153c:	f000 f88e 	bl	800165c <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001540:	f000 f90c 	bl	800175c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001544:	f000 f8dc 	bl	8001700 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ADC_channel_Config.Rank = 1;
 8001548:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <main+0x5c>)
 800154a:	2201      	movs	r2, #1
 800154c:	605a      	str	r2, [r3, #4]
  ADC_channel_Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800154e:	4b0e      	ldr	r3, [pc, #56]	@ (8001588 <main+0x5c>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  keyboard_init_keys();
 8001554:	f7ff fd7c 	bl	8001050 <keyboard_init_keys>

  hid_init();
 8001558:	f7fe ffdc 	bl	8000514 <hid_init>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 800155c:	2100      	movs	r1, #0
 800155e:	f04f 30ff 	mov.w	r0, #4294967295
 8001562:	f004 fef7 	bl	8006354 <tud_task_ext>
}
 8001566:	bf00      	nop
  while (1) {
    // MARK: Main loop
    tud_task();
    
    // Kiểm tra và chuyển đổi chế độ nếu cần
    keyboard_check_and_toggle_mode();
 8001568:	f7ff ffa4 	bl	80014b4 <keyboard_check_and_toggle_mode>
    
    // Chạy task tương ứng với chế độ hiện tại
    if (keyboard_get_current_mode() == MODE_COMBO_KEY) {
 800156c:	f7ff ff96 	bl	800149c <keyboard_get_current_mode>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d102      	bne.n	800157c <main+0x50>
        keyboard_task();
 8001576:	f7ff fda3 	bl	80010c0 <keyboard_task>
 800157a:	e001      	b.n	8001580 <main+0x54>
    } else {
        keyboard_task_snaptap();
 800157c:	f7ff fe70 	bl	8001260 <keyboard_task_snaptap>
    }
    
    hid_task();
 8001580:	f7fe ffda 	bl	8000538 <hid_task>
    tud_task();
 8001584:	e7ea      	b.n	800155c <main+0x30>
 8001586:	bf00      	nop
 8001588:	20000908 	.word	0x20000908

0800158c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b094      	sub	sp, #80	@ 0x50
 8001590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001592:	f107 0320 	add.w	r3, r7, #32
 8001596:	2230      	movs	r2, #48	@ 0x30
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f008 fec8 	bl	800a330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	4b27      	ldr	r3, [pc, #156]	@ (8001654 <SystemClock_Config+0xc8>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b8:	4a26      	ldr	r2, [pc, #152]	@ (8001654 <SystemClock_Config+0xc8>)
 80015ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015be:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c0:	4b24      	ldr	r3, [pc, #144]	@ (8001654 <SystemClock_Config+0xc8>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	4b21      	ldr	r3, [pc, #132]	@ (8001658 <SystemClock_Config+0xcc>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a20      	ldr	r2, [pc, #128]	@ (8001658 <SystemClock_Config+0xcc>)
 80015d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <SystemClock_Config+0xcc>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015e8:	2301      	movs	r3, #1
 80015ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f2:	2302      	movs	r3, #2
 80015f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 80015fc:	230d      	movs	r3, #13
 80015fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001600:	23a8      	movs	r3, #168	@ 0xa8
 8001602:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001604:	2304      	movs	r3, #4
 8001606:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001608:	2307      	movs	r3, #7
 800160a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800160c:	f107 0320 	add.w	r3, r7, #32
 8001610:	4618      	mov	r0, r3
 8001612:	f001 fdf5 	bl	8003200 <HAL_RCC_OscConfig>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800161c:	f000 f97f 	bl	800191e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001620:	230f      	movs	r3, #15
 8001622:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001624:	2302      	movs	r3, #2
 8001626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800162c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001630:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	2102      	movs	r1, #2
 800163c:	4618      	mov	r0, r3
 800163e:	f002 f857 	bl	80036f0 <HAL_RCC_ClockConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001648:	f000 f969 	bl	800191e <Error_Handler>
  }
}
 800164c:	bf00      	nop
 800164e:	3750      	adds	r7, #80	@ 0x50
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40023800 	.word	0x40023800
 8001658:	40007000 	.word	0x40007000

0800165c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001662:	463b      	mov	r3, r7
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800166e:	4b21      	ldr	r3, [pc, #132]	@ (80016f4 <MX_ADC1_Init+0x98>)
 8001670:	4a21      	ldr	r2, [pc, #132]	@ (80016f8 <MX_ADC1_Init+0x9c>)
 8001672:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001674:	4b1f      	ldr	r3, [pc, #124]	@ (80016f4 <MX_ADC1_Init+0x98>)
 8001676:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800167a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800167c:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <MX_ADC1_Init+0x98>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001682:	4b1c      	ldr	r3, [pc, #112]	@ (80016f4 <MX_ADC1_Init+0x98>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001688:	4b1a      	ldr	r3, [pc, #104]	@ (80016f4 <MX_ADC1_Init+0x98>)
 800168a:	2200      	movs	r2, #0
 800168c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800168e:	4b19      	ldr	r3, [pc, #100]	@ (80016f4 <MX_ADC1_Init+0x98>)
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001696:	4b17      	ldr	r3, [pc, #92]	@ (80016f4 <MX_ADC1_Init+0x98>)
 8001698:	2200      	movs	r2, #0
 800169a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800169c:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <MX_ADC1_Init+0x98>)
 800169e:	4a17      	ldr	r2, [pc, #92]	@ (80016fc <MX_ADC1_Init+0xa0>)
 80016a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016a2:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <MX_ADC1_Init+0x98>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016a8:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <MX_ADC1_Init+0x98>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016ae:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <MX_ADC1_Init+0x98>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016b6:	4b0f      	ldr	r3, [pc, #60]	@ (80016f4 <MX_ADC1_Init+0x98>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016bc:	480d      	ldr	r0, [pc, #52]	@ (80016f4 <MX_ADC1_Init+0x98>)
 80016be:	f000 fca9 	bl	8002014 <HAL_ADC_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016c8:	f000 f929 	bl	800191e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80016cc:	2309      	movs	r3, #9
 80016ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016d0:	2301      	movs	r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d8:	463b      	mov	r3, r7
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <MX_ADC1_Init+0x98>)
 80016de:	f000 fe5d 	bl	800239c <HAL_ADC_ConfigChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016e8:	f000 f919 	bl	800191e <Error_Handler>

  // memcpy(&ADC_channel_Config, &sConfig, sizeof(ADC_ChannelConfTypeDef));

  /* USER CODE END ADC1_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000388 	.word	0x20000388
 80016f8:	40012000 	.word	0x40012000
 80016fc:	0f000001 	.word	0x0f000001

08001700 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001704:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <MX_I2C1_Init+0x50>)
 8001706:	4a13      	ldr	r2, [pc, #76]	@ (8001754 <MX_I2C1_Init+0x54>)
 8001708:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800170a:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <MX_I2C1_Init+0x50>)
 800170c:	4a12      	ldr	r2, [pc, #72]	@ (8001758 <MX_I2C1_Init+0x58>)
 800170e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001710:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <MX_I2C1_Init+0x50>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001716:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <MX_I2C1_Init+0x50>)
 8001718:	2200      	movs	r2, #0
 800171a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800171c:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <MX_I2C1_Init+0x50>)
 800171e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001722:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001724:	4b0a      	ldr	r3, [pc, #40]	@ (8001750 <MX_I2C1_Init+0x50>)
 8001726:	2200      	movs	r2, #0
 8001728:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <MX_I2C1_Init+0x50>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001730:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <MX_I2C1_Init+0x50>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001736:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <MX_I2C1_Init+0x50>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800173c:	4804      	ldr	r0, [pc, #16]	@ (8001750 <MX_I2C1_Init+0x50>)
 800173e:	f001 fb0b 	bl	8002d58 <HAL_I2C_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001748:	f000 f8e9 	bl	800191e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200003d0 	.word	0x200003d0
 8001754:	40005400 	.word	0x40005400
 8001758:	000186a0 	.word	0x000186a0

0800175c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001760:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001762:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001766:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001768:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800176a:	2204      	movs	r2, #4
 800176c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800176e:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001770:	2202      	movs	r2, #2
 8001772:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001774:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001776:	2200      	movs	r2, #0
 8001778:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800177a:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800177c:	2202      	movs	r2, #2
 800177e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001780:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001782:	2200      	movs	r2, #0
 8001784:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800178c:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001792:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	@ (80017b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017a0:	f001 fc1e 	bl	8002fe0 <HAL_PCD_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80017aa:	f000 f8b8 	bl	800191e <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000424 	.word	0x20000424

080017b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	4b20      	ldr	r3, [pc, #128]	@ (8001854 <MX_GPIO_Init+0x9c>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001854 <MX_GPIO_Init+0x9c>)
 80017d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b1d      	ldr	r3, [pc, #116]	@ (8001854 <MX_GPIO_Init+0x9c>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <MX_GPIO_Init+0x9c>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a18      	ldr	r2, [pc, #96]	@ (8001854 <MX_GPIO_Init+0x9c>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <MX_GPIO_Init+0x9c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <MX_GPIO_Init+0x9c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a11      	ldr	r2, [pc, #68]	@ (8001854 <MX_GPIO_Init+0x9c>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b0f      	ldr	r3, [pc, #60]	@ (8001854 <MX_GPIO_Init+0x9c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001828:	480b      	ldr	r0, [pc, #44]	@ (8001858 <MX_GPIO_Init+0xa0>)
 800182a:	f001 fa7b 	bl	8002d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800182e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001834:	2301      	movs	r3, #1
 8001836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	4619      	mov	r1, r3
 8001846:	4804      	ldr	r0, [pc, #16]	@ (8001858 <MX_GPIO_Init+0xa0>)
 8001848:	f001 f8e8 	bl	8002a1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800184c:	bf00      	nop
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	40020400 	.word	0x40020400

0800185c <keyboard_select_amux>:
  }
  HAL_FLASH_Lock();
  return 1;
}

void keyboard_select_amux(uint8_t amux_channel) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  // TODO: set GPIOs at the same time using bitmap on register
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8001866:	2300      	movs	r3, #0
 8001868:	73fb      	strb	r3, [r7, #15]
 800186a:	e013      	b.n	8001894 <keyboard_select_amux+0x38>
    HAL_GPIO_WritePin(GPIOB, amux_select_pins[i], (amux_channel >> i) & 1);
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	4a0d      	ldr	r2, [pc, #52]	@ (80018a4 <keyboard_select_amux+0x48>)
 8001870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001874:	b299      	uxth	r1, r3
 8001876:	79fa      	ldrb	r2, [r7, #7]
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	fa42 f303 	asr.w	r3, r2, r3
 800187e:	b2db      	uxtb	r3, r3
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	461a      	mov	r2, r3
 8001888:	4807      	ldr	r0, [pc, #28]	@ (80018a8 <keyboard_select_amux+0x4c>)
 800188a:	f001 fa4b 	bl	8002d24 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	3301      	adds	r3, #1
 8001892:	73fb      	strb	r3, [r7, #15]
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d9e8      	bls.n	800186c <keyboard_select_amux+0x10>
  }
}
 800189a:	bf00      	nop
 800189c:	bf00      	nop
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	0800a9e0 	.word	0x0800a9e0
 80018a8:	40020400 	.word	0x40020400

080018ac <keyboard_select_adc>:

void keyboard_select_adc(uint8_t adc_channel) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  ADC_channel_Config.Channel = adc_channels[adc_channel];
 80018b6:	2209      	movs	r2, #9
 80018b8:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <keyboard_select_adc+0x30>)
 80018ba:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &ADC_channel_Config);
 80018bc:	4907      	ldr	r1, [pc, #28]	@ (80018dc <keyboard_select_adc+0x30>)
 80018be:	4808      	ldr	r0, [pc, #32]	@ (80018e0 <keyboard_select_adc+0x34>)
 80018c0:	f000 fd6c 	bl	800239c <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 80018c4:	4806      	ldr	r0, [pc, #24]	@ (80018e0 <keyboard_select_adc+0x34>)
 80018c6:	f000 fbe9 	bl	800209c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 80018ca:	2101      	movs	r1, #1
 80018cc:	4804      	ldr	r0, [pc, #16]	@ (80018e0 <keyboard_select_adc+0x34>)
 80018ce:	f000 fccc 	bl	800226a <HAL_ADC_PollForConversion>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000908 	.word	0x20000908
 80018e0:	20000388 	.word	0x20000388

080018e4 <keyboard_read_adc>:

uint16_t keyboard_read_adc() {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 80018e8:	4803      	ldr	r0, [pc, #12]	@ (80018f8 <keyboard_read_adc+0x14>)
 80018ea:	f000 fd49 	bl	8002380 <HAL_ADC_GetValue>
 80018ee:	4603      	mov	r3, r0
 80018f0:	b29b      	uxth	r3, r3
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000388 	.word	0x20000388

080018fc <keyboard_close_adc>:

void keyboard_close_adc() {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  HAL_ADC_Stop(&hadc1);
 8001900:	4802      	ldr	r0, [pc, #8]	@ (800190c <keyboard_close_adc+0x10>)
 8001902:	f000 fc7f 	bl	8002204 <HAL_ADC_Stop>
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000388 	.word	0x20000388

08001910 <keyboard_get_time>:

uint32_t keyboard_get_time() {
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001914:	f000 fb4e 	bl	8001fb4 <HAL_GetTick>
 8001918:	4603      	mov	r3, r0
}
 800191a:	4618      	mov	r0, r3
 800191c:	bd80      	pop	{r7, pc}

0800191e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001922:	b672      	cpsid	i
}
 8001924:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001926:	bf00      	nop
 8001928:	e7fd      	b.n	8001926 <Error_Handler+0x8>
	...

0800192c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <HAL_MspInit+0x4c>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193a:	4a0f      	ldr	r2, [pc, #60]	@ (8001978 <HAL_MspInit+0x4c>)
 800193c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001940:	6453      	str	r3, [r2, #68]	@ 0x44
 8001942:	4b0d      	ldr	r3, [pc, #52]	@ (8001978 <HAL_MspInit+0x4c>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <HAL_MspInit+0x4c>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	4a08      	ldr	r2, [pc, #32]	@ (8001978 <HAL_MspInit+0x4c>)
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800195c:	6413      	str	r3, [r2, #64]	@ 0x40
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <HAL_MspInit+0x4c>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800

0800197c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	@ 0x28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a17      	ldr	r2, [pc, #92]	@ (80019f8 <HAL_ADC_MspInit+0x7c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d127      	bne.n	80019ee <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <HAL_ADC_MspInit+0x80>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	4a15      	ldr	r2, [pc, #84]	@ (80019fc <HAL_ADC_MspInit+0x80>)
 80019a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ae:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <HAL_ADC_MspInit+0x80>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b0f      	ldr	r3, [pc, #60]	@ (80019fc <HAL_ADC_MspInit+0x80>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	4a0e      	ldr	r2, [pc, #56]	@ (80019fc <HAL_ADC_MspInit+0x80>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ca:	4b0c      	ldr	r3, [pc, #48]	@ (80019fc <HAL_ADC_MspInit+0x80>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019d6:	2302      	movs	r3, #2
 80019d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019da:	2303      	movs	r3, #3
 80019dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	4805      	ldr	r0, [pc, #20]	@ (8001a00 <HAL_ADC_MspInit+0x84>)
 80019ea:	f001 f817 	bl	8002a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019ee:	bf00      	nop
 80019f0:	3728      	adds	r7, #40	@ 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40012000 	.word	0x40012000
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020400 	.word	0x40020400

08001a04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	@ 0x28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a19      	ldr	r2, [pc, #100]	@ (8001a88 <HAL_I2C_MspInit+0x84>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d12b      	bne.n	8001a7e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	4b18      	ldr	r3, [pc, #96]	@ (8001a8c <HAL_I2C_MspInit+0x88>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	4a17      	ldr	r2, [pc, #92]	@ (8001a8c <HAL_I2C_MspInit+0x88>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a36:	4b15      	ldr	r3, [pc, #84]	@ (8001a8c <HAL_I2C_MspInit+0x88>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a42:	23c0      	movs	r3, #192	@ 0xc0
 8001a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a46:	2312      	movs	r3, #18
 8001a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a52:	2304      	movs	r3, #4
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480c      	ldr	r0, [pc, #48]	@ (8001a90 <HAL_I2C_MspInit+0x8c>)
 8001a5e:	f000 ffdd 	bl	8002a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b09      	ldr	r3, [pc, #36]	@ (8001a8c <HAL_I2C_MspInit+0x88>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	4a08      	ldr	r2, [pc, #32]	@ (8001a8c <HAL_I2C_MspInit+0x88>)
 8001a6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a72:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_I2C_MspInit+0x88>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a7e:	bf00      	nop
 8001a80:	3728      	adds	r7, #40	@ 0x28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40005400 	.word	0x40005400
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40020400 	.word	0x40020400

08001a94 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	@ 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ab4:	d13a      	bne.n	8001b2c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	4b1e      	ldr	r3, [pc, #120]	@ (8001b34 <HAL_PCD_MspInit+0xa0>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	4a1d      	ldr	r2, [pc, #116]	@ (8001b34 <HAL_PCD_MspInit+0xa0>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b34 <HAL_PCD_MspInit+0xa0>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ad2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ae4:	230a      	movs	r3, #10
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	4619      	mov	r1, r3
 8001aee:	4812      	ldr	r0, [pc, #72]	@ (8001b38 <HAL_PCD_MspInit+0xa4>)
 8001af0:	f000 ff94 	bl	8002a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001af4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <HAL_PCD_MspInit+0xa0>)
 8001af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001af8:	4a0e      	ldr	r2, [pc, #56]	@ (8001b34 <HAL_PCD_MspInit+0xa0>)
 8001afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001afe:	6353      	str	r3, [r2, #52]	@ 0x34
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	4b0b      	ldr	r3, [pc, #44]	@ (8001b34 <HAL_PCD_MspInit+0xa0>)
 8001b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b08:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <HAL_PCD_MspInit+0xa0>)
 8001b0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b0e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b10:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <HAL_PCD_MspInit+0xa0>)
 8001b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2043      	movs	r0, #67	@ 0x43
 8001b22:	f000 ff44 	bl	80029ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001b26:	2043      	movs	r0, #67	@ 0x43
 8001b28:	f000 ff5d 	bl	80029e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b2c:	bf00      	nop
 8001b2e:	3728      	adds	r7, #40	@ 0x28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020000 	.word	0x40020000

08001b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <NMI_Handler+0x4>

08001b44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm("BKPT #0\n");
 8001b48:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b4a:	bf00      	nop
 8001b4c:	e7fd      	b.n	8001b4a <HardFault_Handler+0x6>

08001b4e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b52:	bf00      	nop
 8001b54:	e7fd      	b.n	8001b52 <MemManage_Handler+0x4>

08001b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b5a:	bf00      	nop
 8001b5c:	e7fd      	b.n	8001b5a <BusFault_Handler+0x4>

08001b5e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b62:	bf00      	nop
 8001b64:	e7fd      	b.n	8001b62 <UsageFault_Handler+0x4>

08001b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b94:	f000 f9fa 	bl	8001f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  system_ticks++;
 8001b98:	4b03      	ldr	r3, [pc, #12]	@ (8001ba8 <SysTick_Handler+0x18>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	4a02      	ldr	r2, [pc, #8]	@ (8001ba8 <SysTick_Handler+0x18>)
 8001ba0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000918 	.word	0x20000918

08001bac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(0);
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f007 fc33 	bl	800941c <dcd_int_handler>
	return;
 8001bb6:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	e00a      	b.n	8001be2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bcc:	f3af 8000 	nop.w
 8001bd0:	4601      	mov	r1, r0
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	60ba      	str	r2, [r7, #8]
 8001bd8:	b2ca      	uxtb	r2, r1
 8001bda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	3301      	adds	r3, #1
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	dbf0      	blt.n	8001bcc <_read+0x12>
  }

  return len;
 8001bea:	687b      	ldr	r3, [r7, #4]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	e009      	b.n	8001c1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	60ba      	str	r2, [r7, #8]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3301      	adds	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	dbf1      	blt.n	8001c06 <_write+0x12>
  }
  return len;
 8001c22:	687b      	ldr	r3, [r7, #4]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_close>:

int _close(int file)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c54:	605a      	str	r2, [r3, #4]
  return 0;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <_isatty>:

int _isatty(int file)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c6c:	2301      	movs	r3, #1
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b085      	sub	sp, #20
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c9c:	4a14      	ldr	r2, [pc, #80]	@ (8001cf0 <_sbrk+0x5c>)
 8001c9e:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <_sbrk+0x60>)
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca8:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d102      	bne.n	8001cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <_sbrk+0x64>)
 8001cb2:	4a12      	ldr	r2, [pc, #72]	@ (8001cfc <_sbrk+0x68>)
 8001cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cb6:	4b10      	ldr	r3, [pc, #64]	@ (8001cf8 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d207      	bcs.n	8001cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc4:	f008 fb82 	bl	800a3cc <__errno>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	220c      	movs	r2, #12
 8001ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cce:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd2:	e009      	b.n	8001ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd4:	4b08      	ldr	r3, [pc, #32]	@ (8001cf8 <_sbrk+0x64>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cda:	4b07      	ldr	r3, [pc, #28]	@ (8001cf8 <_sbrk+0x64>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	4a05      	ldr	r2, [pc, #20]	@ (8001cf8 <_sbrk+0x64>)
 8001ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20020000 	.word	0x20020000
 8001cf4:	00000400 	.word	0x00000400
 8001cf8:	2000091c 	.word	0x2000091c
 8001cfc:	20000df8 	.word	0x20000df8

08001d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d04:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <SystemInit+0x20>)
 8001d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d0a:	4a05      	ldr	r2, [pc, #20]	@ (8001d20 <SystemInit+0x20>)
 8001d0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8001d28:	4b02      	ldr	r3, [pc, #8]	@ (8001d34 <tud_descriptor_device_cb+0x10>)
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	0800aa08 	.word	0x0800aa08

08001d38 <tud_hid_descriptor_report_cb>:

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_hid_descriptor_report_cb(uint8_t instance)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
  (void) instance;
  return desc_hid_report;
 8001d42:	4b03      	ldr	r3, [pc, #12]	@ (8001d50 <tud_hid_descriptor_report_cb+0x18>)
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	0800aa1c 	.word	0x0800aa1c

08001d54 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
  (void) index; // for multiple configurations
  return desc_configuration;
 8001d5e:	4b03      	ldr	r3, [pc, #12]	@ (8001d6c <tud_descriptor_configuration_cb+0x18>)
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	0800aa78 	.word	0x0800aa78

08001d70 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	460a      	mov	r2, r1
 8001d7a:	71fb      	strb	r3, [r7, #7]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d108      	bne.n	8001d98 <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8001d86:	4b21      	ldr	r3, [pc, #132]	@ (8001e0c <tud_descriptor_string_cb+0x9c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	4b20      	ldr	r3, [pc, #128]	@ (8001e10 <tud_descriptor_string_cb+0xa0>)
 8001d90:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 8001d92:	2301      	movs	r3, #1
 8001d94:	73fb      	strb	r3, [r7, #15]
 8001d96:	e027      	b.n	8001de8 <tud_descriptor_string_cb+0x78>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	2b05      	cmp	r3, #5
 8001d9c:	d901      	bls.n	8001da2 <tud_descriptor_string_cb+0x32>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e02f      	b.n	8001e02 <tud_descriptor_string_cb+0x92>

    const char* str = string_desc_arr[index];
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	4a19      	ldr	r2, [pc, #100]	@ (8001e0c <tud_descriptor_string_cb+0x9c>)
 8001da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001daa:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = strlen(str);
 8001dac:	68b8      	ldr	r0, [r7, #8]
 8001dae:	f7fe fa13 	bl	80001d8 <strlen>
 8001db2:	4603      	mov	r3, r0
 8001db4:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	2b1f      	cmp	r3, #31
 8001dba:	d901      	bls.n	8001dc0 <tud_descriptor_string_cb+0x50>
 8001dbc:	231f      	movs	r3, #31
 8001dbe:	73fb      	strb	r3, [r7, #15]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73bb      	strb	r3, [r7, #14]
 8001dc4:	e00c      	b.n	8001de0 <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 8001dc6:	7bbb      	ldrb	r3, [r7, #14]
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	4413      	add	r3, r2
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	7bbb      	ldrb	r3, [r7, #14]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4a0e      	ldr	r2, [pc, #56]	@ (8001e10 <tud_descriptor_string_cb+0xa0>)
 8001dd6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 8001dda:	7bbb      	ldrb	r3, [r7, #14]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	73bb      	strb	r3, [r7, #14]
 8001de0:	7bba      	ldrb	r2, [r7, #14]
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d3ee      	bcc.n	8001dc6 <tud_descriptor_string_cb+0x56>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	3301      	adds	r3, #1
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	b21b      	sxth	r3, r3
 8001df4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001df8:	b21b      	sxth	r3, r3
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	4b04      	ldr	r3, [pc, #16]	@ (8001e10 <tud_descriptor_string_cb+0xa0>)
 8001dfe:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8001e00:	4b03      	ldr	r3, [pc, #12]	@ (8001e10 <tud_descriptor_string_cb+0xa0>)
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000004c 	.word	0x2000004c
 8001e10:	20000920 	.word	0x20000920

08001e14 <tud_cdc_line_coding_cb>:
  }
}

// Invoked when line coding is change via SET_LINE_CODING
void tud_cdc_line_coding_cb(uint8_t itf, cdc_line_coding_t const* p_line_coding)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	6039      	str	r1, [r7, #0]
 8001e1e:	71fb      	strb	r3, [r7, #7]
  (void) itf;
  (void) p_line_coding;
  // Handle line coding change if needed
  // The baud rate is already set to 115200 by default
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <tud_hid_get_report_cb>:

// Invoked when received GET_REPORT control request
// Application must fill buffer report's content and return its length.
// Return zero will cause the stack to STALL request
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t* buffer, uint16_t reqlen)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	4603      	mov	r3, r0
 8001e36:	71fb      	strb	r3, [r7, #7]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	71bb      	strb	r3, [r7, #6]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	717b      	strb	r3, [r7, #5]
  (void) instance;
  (void) report_type;
  (void) buffer;
  (void) reqlen;

  switch (report_id)
 8001e40:	79bb      	ldrb	r3, [r7, #6]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d002      	beq.n	8001e4c <tud_hid_get_report_cb+0x20>
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d002      	beq.n	8001e50 <tud_hid_get_report_cb+0x24>
    case REPORT_ID_CONSUMER_CONTROL:
      // TODO: Fill consumer control report if needed
      break;

    default:
      break;
 8001e4a:	e002      	b.n	8001e52 <tud_hid_get_report_cb+0x26>
      break;
 8001e4c:	bf00      	nop
 8001e4e:	e000      	b.n	8001e52 <tud_hid_get_report_cb+0x26>
      break;
 8001e50:	bf00      	nop
  }

  return 0;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const* buffer, uint16_t bufsize)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	4603      	mov	r3, r0
 8001e6a:	71fb      	strb	r3, [r7, #7]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	71bb      	strb	r3, [r7, #6]
 8001e70:	4613      	mov	r3, r2
 8001e72:	717b      	strb	r3, [r7, #5]
  (void) instance;
  (void) report_type;
  (void) buffer;
  (void) bufsize;

  switch (report_id)
 8001e74:	79bb      	ldrb	r3, [r7, #6]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d002      	beq.n	8001e80 <tud_hid_set_report_cb+0x20>
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d002      	beq.n	8001e84 <tud_hid_set_report_cb+0x24>
    case REPORT_ID_CONSUMER_CONTROL:
      // Handle consumer control feedback if needed
      break;

    default:
      break;
 8001e7e:	e002      	b.n	8001e86 <tud_hid_set_report_cb+0x26>
      break;
 8001e80:	bf00      	nop
 8001e82:	e000      	b.n	8001e86 <tud_hid_set_report_cb+0x26>
      break;
 8001e84:	bf00      	nop
  }
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <Reset_Handler>:
 8001e94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ecc <LoopFillZerobss+0xe>
 8001e98:	f7ff ff32 	bl	8001d00 <SystemInit>
 8001e9c:	480c      	ldr	r0, [pc, #48]	@ (8001ed0 <LoopFillZerobss+0x12>)
 8001e9e:	490d      	ldr	r1, [pc, #52]	@ (8001ed4 <LoopFillZerobss+0x16>)
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed8 <LoopFillZerobss+0x1a>)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e002      	b.n	8001eac <LoopCopyDataInit>

08001ea6 <CopyDataInit>:
 8001ea6:	58d4      	ldr	r4, [r2, r3]
 8001ea8:	50c4      	str	r4, [r0, r3]
 8001eaa:	3304      	adds	r3, #4

08001eac <LoopCopyDataInit>:
 8001eac:	18c4      	adds	r4, r0, r3
 8001eae:	428c      	cmp	r4, r1
 8001eb0:	d3f9      	bcc.n	8001ea6 <CopyDataInit>
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001edc <LoopFillZerobss+0x1e>)
 8001eb4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ee0 <LoopFillZerobss+0x22>)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e001      	b.n	8001ebe <LoopFillZerobss>

08001eba <FillZerobss>:
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	3204      	adds	r2, #4

08001ebe <LoopFillZerobss>:
 8001ebe:	42a2      	cmp	r2, r4
 8001ec0:	d3fb      	bcc.n	8001eba <FillZerobss>
 8001ec2:	f008 fa89 	bl	800a3d8 <__libc_init_array>
 8001ec6:	f7ff fb31 	bl	800152c <main>
 8001eca:	4770      	bx	lr
 8001ecc:	20020000 	.word	0x20020000
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	200000e0 	.word	0x200000e0
 8001ed8:	0800ab50 	.word	0x0800ab50
 8001edc:	200000e0 	.word	0x200000e0
 8001ee0:	20000df8 	.word	0x20000df8

08001ee4 <ADC_IRQHandler>:
 8001ee4:	e7fe      	b.n	8001ee4 <ADC_IRQHandler>
	...

08001ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eec:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <HAL_Init+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f28 <HAL_Init+0x40>)
 8001ef2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ef6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0a      	ldr	r2, [pc, #40]	@ (8001f28 <HAL_Init+0x40>)
 8001efe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <HAL_Init+0x40>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a07      	ldr	r2, [pc, #28]	@ (8001f28 <HAL_Init+0x40>)
 8001f0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f10:	2003      	movs	r0, #3
 8001f12:	f000 fd41 	bl	8002998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f16:	200f      	movs	r0, #15
 8001f18:	f000 f808 	bl	8001f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f1c:	f7ff fd06 	bl	800192c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023c00 	.word	0x40023c00

08001f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f34:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <HAL_InitTick+0x54>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <HAL_InitTick+0x58>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fd59 	bl	8002a02 <HAL_SYSTICK_Config>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00e      	b.n	8001f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b0f      	cmp	r3, #15
 8001f5e:	d80a      	bhi.n	8001f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f60:	2200      	movs	r2, #0
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	f000 fd21 	bl	80029ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f6c:	4a06      	ldr	r2, [pc, #24]	@ (8001f88 <HAL_InitTick+0x5c>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e000      	b.n	8001f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000048 	.word	0x20000048
 8001f84:	20000068 	.word	0x20000068
 8001f88:	20000064 	.word	0x20000064

08001f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_IncTick+0x20>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_IncTick+0x24>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4a04      	ldr	r2, [pc, #16]	@ (8001fb0 <HAL_IncTick+0x24>)
 8001f9e:	6013      	str	r3, [r2, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20000068 	.word	0x20000068
 8001fb0:	20000960 	.word	0x20000960

08001fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb8:	4b03      	ldr	r3, [pc, #12]	@ (8001fc8 <HAL_GetTick+0x14>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000960 	.word	0x20000960

08001fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7ff ffee 	bl	8001fb4 <HAL_GetTick>
 8001fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe4:	d005      	beq.n	8001ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <HAL_Delay+0x44>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ff2:	bf00      	nop
 8001ff4:	f7ff ffde 	bl	8001fb4 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	429a      	cmp	r2, r3
 8002002:	d8f7      	bhi.n	8001ff4 <HAL_Delay+0x28>
  {
  }
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000068 	.word	0x20000068

08002014 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e033      	b.n	8002092 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff fca2 	bl	800197c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	2b00      	cmp	r3, #0
 8002050:	d118      	bne.n	8002084 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800205a:	f023 0302 	bic.w	r3, r3, #2
 800205e:	f043 0202 	orr.w	r2, r3, #2
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 faca 	bl	8002600 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	f023 0303 	bic.w	r3, r3, #3
 800207a:	f043 0201 	orr.w	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	641a      	str	r2, [r3, #64]	@ 0x40
 8002082:	e001      	b.n	8002088 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002090:	7bfb      	ldrb	r3, [r7, #15]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_ADC_Start+0x1a>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e097      	b.n	80021e6 <HAL_ADC_Start+0x14a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d018      	beq.n	80020fe <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020dc:	4b45      	ldr	r3, [pc, #276]	@ (80021f4 <HAL_ADC_Start+0x158>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a45      	ldr	r2, [pc, #276]	@ (80021f8 <HAL_ADC_Start+0x15c>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	0c9a      	lsrs	r2, r3, #18
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80020f0:	e002      	b.n	80020f8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f9      	bne.n	80020f2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b01      	cmp	r3, #1
 800210a:	d15f      	bne.n	80021cc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800212a:	2b00      	cmp	r3, #0
 800212c:	d007      	beq.n	800213e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002136:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800214a:	d106      	bne.n	800215a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002150:	f023 0206 	bic.w	r2, r3, #6
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	645a      	str	r2, [r3, #68]	@ 0x44
 8002158:	e002      	b.n	8002160 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002168:	4b24      	ldr	r3, [pc, #144]	@ (80021fc <HAL_ADC_Start+0x160>)
 800216a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002174:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 031f 	and.w	r3, r3, #31
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10f      	bne.n	80021a2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d129      	bne.n	80021e4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	e020      	b.n	80021e4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a16      	ldr	r2, [pc, #88]	@ (8002200 <HAL_ADC_Start+0x164>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d11b      	bne.n	80021e4 <HAL_ADC_Start+0x148>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d114      	bne.n	80021e4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021c8:	609a      	str	r2, [r3, #8]
 80021ca:	e00b      	b.n	80021e4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	f043 0210 	orr.w	r2, r3, #16
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021dc:	f043 0201 	orr.w	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20000048 	.word	0x20000048
 80021f8:	431bde83 	.word	0x431bde83
 80021fc:	40012300 	.word	0x40012300
 8002200:	40012000 	.word	0x40012000

08002204 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_ADC_Stop+0x16>
 8002216:	2302      	movs	r3, #2
 8002218:	e021      	b.n	800225e <HAL_ADC_Stop+0x5a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0201 	bic.w	r2, r2, #1
 8002230:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d109      	bne.n	8002254 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002244:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	f043 0201 	orr.w	r2, r3, #1
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b084      	sub	sp, #16
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002286:	d113      	bne.n	80022b0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002296:	d10b      	bne.n	80022b0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229c:	f043 0220 	orr.w	r2, r3, #32
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e063      	b.n	8002378 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80022b0:	f7ff fe80 	bl	8001fb4 <HAL_GetTick>
 80022b4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022b6:	e021      	b.n	80022fc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022be:	d01d      	beq.n	80022fc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <HAL_ADC_PollForConversion+0x6c>
 80022c6:	f7ff fe75 	bl	8001fb4 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d212      	bcs.n	80022fc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d00b      	beq.n	80022fc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	f043 0204 	orr.w	r2, r3, #4
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e03d      	b.n	8002378 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b02      	cmp	r3, #2
 8002308:	d1d6      	bne.n	80022b8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f06f 0212 	mvn.w	r2, #18
 8002312:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002318:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d123      	bne.n	8002376 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002332:	2b00      	cmp	r3, #0
 8002334:	d11f      	bne.n	8002376 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002340:	2b00      	cmp	r3, #0
 8002342:	d006      	beq.n	8002352 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800234e:	2b00      	cmp	r3, #0
 8002350:	d111      	bne.n	8002376 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d105      	bne.n	8002376 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	f043 0201 	orr.w	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x1c>
 80023b4:	2302      	movs	r3, #2
 80023b6:	e113      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x244>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b09      	cmp	r3, #9
 80023c6:	d925      	bls.n	8002414 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68d9      	ldr	r1, [r3, #12]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	461a      	mov	r2, r3
 80023d6:	4613      	mov	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4413      	add	r3, r2
 80023dc:	3b1e      	subs	r3, #30
 80023de:	2207      	movs	r2, #7
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43da      	mvns	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	400a      	ands	r2, r1
 80023ec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68d9      	ldr	r1, [r3, #12]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	4618      	mov	r0, r3
 8002400:	4603      	mov	r3, r0
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4403      	add	r3, r0
 8002406:	3b1e      	subs	r3, #30
 8002408:	409a      	lsls	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	e022      	b.n	800245a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6919      	ldr	r1, [r3, #16]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	4613      	mov	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	2207      	movs	r2, #7
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	400a      	ands	r2, r1
 8002436:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6919      	ldr	r1, [r3, #16]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	4618      	mov	r0, r3
 800244a:	4603      	mov	r3, r0
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4403      	add	r3, r0
 8002450:	409a      	lsls	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b06      	cmp	r3, #6
 8002460:	d824      	bhi.n	80024ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	3b05      	subs	r3, #5
 8002474:	221f      	movs	r2, #31
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43da      	mvns	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	400a      	ands	r2, r1
 8002482:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	4618      	mov	r0, r3
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	3b05      	subs	r3, #5
 800249e:	fa00 f203 	lsl.w	r2, r0, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80024aa:	e04c      	b.n	8002546 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b0c      	cmp	r3, #12
 80024b2:	d824      	bhi.n	80024fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	3b23      	subs	r3, #35	@ 0x23
 80024c6:	221f      	movs	r2, #31
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43da      	mvns	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	400a      	ands	r2, r1
 80024d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	4618      	mov	r0, r3
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	3b23      	subs	r3, #35	@ 0x23
 80024f0:	fa00 f203 	lsl.w	r2, r0, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80024fc:	e023      	b.n	8002546 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	3b41      	subs	r3, #65	@ 0x41
 8002510:	221f      	movs	r2, #31
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43da      	mvns	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	400a      	ands	r2, r1
 800251e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	4618      	mov	r0, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	3b41      	subs	r3, #65	@ 0x41
 800253a:	fa00 f203 	lsl.w	r2, r0, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002546:	4b29      	ldr	r3, [pc, #164]	@ (80025ec <HAL_ADC_ConfigChannel+0x250>)
 8002548:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a28      	ldr	r2, [pc, #160]	@ (80025f0 <HAL_ADC_ConfigChannel+0x254>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d10f      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x1d8>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b12      	cmp	r3, #18
 800255a:	d10b      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a1d      	ldr	r2, [pc, #116]	@ (80025f0 <HAL_ADC_ConfigChannel+0x254>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d12b      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x23a>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a1c      	ldr	r2, [pc, #112]	@ (80025f4 <HAL_ADC_ConfigChannel+0x258>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d003      	beq.n	8002590 <HAL_ADC_ConfigChannel+0x1f4>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b11      	cmp	r3, #17
 800258e:	d122      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a11      	ldr	r2, [pc, #68]	@ (80025f4 <HAL_ADC_ConfigChannel+0x258>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d111      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025b2:	4b11      	ldr	r3, [pc, #68]	@ (80025f8 <HAL_ADC_ConfigChannel+0x25c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a11      	ldr	r2, [pc, #68]	@ (80025fc <HAL_ADC_ConfigChannel+0x260>)
 80025b8:	fba2 2303 	umull	r2, r3, r2, r3
 80025bc:	0c9a      	lsrs	r2, r3, #18
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025c8:	e002      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	3b01      	subs	r3, #1
 80025ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f9      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	40012300 	.word	0x40012300
 80025f0:	40012000 	.word	0x40012000
 80025f4:	10000012 	.word	0x10000012
 80025f8:	20000048 	.word	0x20000048
 80025fc:	431bde83 	.word	0x431bde83

08002600 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002608:	4b79      	ldr	r3, [pc, #484]	@ (80027f0 <ADC_Init+0x1f0>)
 800260a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	431a      	orrs	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6859      	ldr	r1, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	021a      	lsls	r2, r3, #8
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002658:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6859      	ldr	r1, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800267a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6899      	ldr	r1, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002692:	4a58      	ldr	r2, [pc, #352]	@ (80027f4 <ADC_Init+0x1f4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d022      	beq.n	80026de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6899      	ldr	r1, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6899      	ldr	r1, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	e00f      	b.n	80026fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026fc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0202 	bic.w	r2, r2, #2
 800270c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6899      	ldr	r1, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	7e1b      	ldrb	r3, [r3, #24]
 8002718:	005a      	lsls	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01b      	beq.n	8002764 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800273a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800274a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6859      	ldr	r1, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	3b01      	subs	r3, #1
 8002758:	035a      	lsls	r2, r3, #13
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	e007      	b.n	8002774 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002772:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002782:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	3b01      	subs	r3, #1
 8002790:	051a      	lsls	r2, r3, #20
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80027a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6899      	ldr	r1, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027b6:	025a      	lsls	r2, r3, #9
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6899      	ldr	r1, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	029a      	lsls	r2, r3, #10
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	609a      	str	r2, [r3, #8]
}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	40012300 	.word	0x40012300
 80027f4:	0f000001 	.word	0x0f000001

080027f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002808:	4b0c      	ldr	r3, [pc, #48]	@ (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002814:	4013      	ands	r3, r2
 8002816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002820:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282a:	4a04      	ldr	r2, [pc, #16]	@ (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	60d3      	str	r3, [r2, #12]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002844:	4b04      	ldr	r3, [pc, #16]	@ (8002858 <__NVIC_GetPriorityGrouping+0x18>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	f003 0307 	and.w	r3, r3, #7
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	2b00      	cmp	r3, #0
 800286c:	db0b      	blt.n	8002886 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	f003 021f 	and.w	r2, r3, #31
 8002874:	4907      	ldr	r1, [pc, #28]	@ (8002894 <__NVIC_EnableIRQ+0x38>)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	2001      	movs	r0, #1
 800287e:	fa00 f202 	lsl.w	r2, r0, r2
 8002882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	e000e100 	.word	0xe000e100

08002898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	6039      	str	r1, [r7, #0]
 80028a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	db0a      	blt.n	80028c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	490c      	ldr	r1, [pc, #48]	@ (80028e4 <__NVIC_SetPriority+0x4c>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	0112      	lsls	r2, r2, #4
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	440b      	add	r3, r1
 80028bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c0:	e00a      	b.n	80028d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4908      	ldr	r1, [pc, #32]	@ (80028e8 <__NVIC_SetPriority+0x50>)
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	3b04      	subs	r3, #4
 80028d0:	0112      	lsls	r2, r2, #4
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	440b      	add	r3, r1
 80028d6:	761a      	strb	r2, [r3, #24]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	e000e100 	.word	0xe000e100
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	@ 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f1c3 0307 	rsb	r3, r3, #7
 8002906:	2b04      	cmp	r3, #4
 8002908:	bf28      	it	cs
 800290a:	2304      	movcs	r3, #4
 800290c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3304      	adds	r3, #4
 8002912:	2b06      	cmp	r3, #6
 8002914:	d902      	bls.n	800291c <NVIC_EncodePriority+0x30>
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3b03      	subs	r3, #3
 800291a:	e000      	b.n	800291e <NVIC_EncodePriority+0x32>
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	f04f 32ff 	mov.w	r2, #4294967295
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43da      	mvns	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	401a      	ands	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002934:	f04f 31ff 	mov.w	r1, #4294967295
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	43d9      	mvns	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	4313      	orrs	r3, r2
         );
}
 8002946:	4618      	mov	r0, r3
 8002948:	3724      	adds	r7, #36	@ 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002964:	d301      	bcc.n	800296a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002966:	2301      	movs	r3, #1
 8002968:	e00f      	b.n	800298a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296a:	4a0a      	ldr	r2, [pc, #40]	@ (8002994 <SysTick_Config+0x40>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002972:	210f      	movs	r1, #15
 8002974:	f04f 30ff 	mov.w	r0, #4294967295
 8002978:	f7ff ff8e 	bl	8002898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800297c:	4b05      	ldr	r3, [pc, #20]	@ (8002994 <SysTick_Config+0x40>)
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002982:	4b04      	ldr	r3, [pc, #16]	@ (8002994 <SysTick_Config+0x40>)
 8002984:	2207      	movs	r2, #7
 8002986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	e000e010 	.word	0xe000e010

08002998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ff29 	bl	80027f8 <__NVIC_SetPriorityGrouping>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b086      	sub	sp, #24
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4603      	mov	r3, r0
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c0:	f7ff ff3e 	bl	8002840 <__NVIC_GetPriorityGrouping>
 80029c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	6978      	ldr	r0, [r7, #20]
 80029cc:	f7ff ff8e 	bl	80028ec <NVIC_EncodePriority>
 80029d0:	4602      	mov	r2, r0
 80029d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff5d 	bl	8002898 <__NVIC_SetPriority>
}
 80029de:	bf00      	nop
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	4603      	mov	r3, r0
 80029ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff31 	bl	800285c <__NVIC_EnableIRQ>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ffa2 	bl	8002954 <SysTick_Config>
 8002a10:	4603      	mov	r3, r0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b089      	sub	sp, #36	@ 0x24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	e159      	b.n	8002cec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a38:	2201      	movs	r2, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	f040 8148 	bne.w	8002ce6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d005      	beq.n	8002a6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d130      	bne.n	8002ad0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	2203      	movs	r2, #3
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 0201 	and.w	r2, r3, #1
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d017      	beq.n	8002b0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d123      	bne.n	8002b60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	08da      	lsrs	r2, r3, #3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3208      	adds	r2, #8
 8002b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	220f      	movs	r2, #15
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	08da      	lsrs	r2, r3, #3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3208      	adds	r2, #8
 8002b5a:	69b9      	ldr	r1, [r7, #24]
 8002b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0203 	and.w	r2, r3, #3
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80a2 	beq.w	8002ce6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	4b57      	ldr	r3, [pc, #348]	@ (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002baa:	4a56      	ldr	r2, [pc, #344]	@ (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002bac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bb2:	4b54      	ldr	r3, [pc, #336]	@ (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bbe:	4a52      	ldr	r2, [pc, #328]	@ (8002d08 <HAL_GPIO_Init+0x2ec>)
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	089b      	lsrs	r3, r3, #2
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	220f      	movs	r2, #15
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a49      	ldr	r2, [pc, #292]	@ (8002d0c <HAL_GPIO_Init+0x2f0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d019      	beq.n	8002c1e <HAL_GPIO_Init+0x202>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a48      	ldr	r2, [pc, #288]	@ (8002d10 <HAL_GPIO_Init+0x2f4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <HAL_GPIO_Init+0x1fe>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a47      	ldr	r2, [pc, #284]	@ (8002d14 <HAL_GPIO_Init+0x2f8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00d      	beq.n	8002c16 <HAL_GPIO_Init+0x1fa>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a46      	ldr	r2, [pc, #280]	@ (8002d18 <HAL_GPIO_Init+0x2fc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d007      	beq.n	8002c12 <HAL_GPIO_Init+0x1f6>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a45      	ldr	r2, [pc, #276]	@ (8002d1c <HAL_GPIO_Init+0x300>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d101      	bne.n	8002c0e <HAL_GPIO_Init+0x1f2>
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	e008      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c0e:	2307      	movs	r3, #7
 8002c10:	e006      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c12:	2303      	movs	r3, #3
 8002c14:	e004      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e002      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	f002 0203 	and.w	r2, r2, #3
 8002c26:	0092      	lsls	r2, r2, #2
 8002c28:	4093      	lsls	r3, r2
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c30:	4935      	ldr	r1, [pc, #212]	@ (8002d08 <HAL_GPIO_Init+0x2ec>)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	089b      	lsrs	r3, r3, #2
 8002c36:	3302      	adds	r3, #2
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c3e:	4b38      	ldr	r3, [pc, #224]	@ (8002d20 <HAL_GPIO_Init+0x304>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c62:	4a2f      	ldr	r2, [pc, #188]	@ (8002d20 <HAL_GPIO_Init+0x304>)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c68:	4b2d      	ldr	r3, [pc, #180]	@ (8002d20 <HAL_GPIO_Init+0x304>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c8c:	4a24      	ldr	r2, [pc, #144]	@ (8002d20 <HAL_GPIO_Init+0x304>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c92:	4b23      	ldr	r3, [pc, #140]	@ (8002d20 <HAL_GPIO_Init+0x304>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d20 <HAL_GPIO_Init+0x304>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cbc:	4b18      	ldr	r3, [pc, #96]	@ (8002d20 <HAL_GPIO_Init+0x304>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ce0:	4a0f      	ldr	r2, [pc, #60]	@ (8002d20 <HAL_GPIO_Init+0x304>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b0f      	cmp	r3, #15
 8002cf0:	f67f aea2 	bls.w	8002a38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3724      	adds	r7, #36	@ 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	40020000 	.word	0x40020000
 8002d10:	40020400 	.word	0x40020400
 8002d14:	40020800 	.word	0x40020800
 8002d18:	40020c00 	.word	0x40020c00
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40013c00 	.word	0x40013c00

08002d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	807b      	strh	r3, [r7, #2]
 8002d30:	4613      	mov	r3, r2
 8002d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d34:	787b      	ldrb	r3, [r7, #1]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d3a:	887a      	ldrh	r2, [r7, #2]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d40:	e003      	b.n	8002d4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d42:	887b      	ldrh	r3, [r7, #2]
 8002d44:	041a      	lsls	r2, r3, #16
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	619a      	str	r2, [r3, #24]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e12b      	b.n	8002fc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fe fe40 	bl	8001a04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2224      	movs	r2, #36	@ 0x24
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0201 	bic.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002daa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002dba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dbc:	f000 fe50 	bl	8003a60 <HAL_RCC_GetPCLK1Freq>
 8002dc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4a81      	ldr	r2, [pc, #516]	@ (8002fcc <HAL_I2C_Init+0x274>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d807      	bhi.n	8002ddc <HAL_I2C_Init+0x84>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4a80      	ldr	r2, [pc, #512]	@ (8002fd0 <HAL_I2C_Init+0x278>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	bf94      	ite	ls
 8002dd4:	2301      	movls	r3, #1
 8002dd6:	2300      	movhi	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	e006      	b.n	8002dea <HAL_I2C_Init+0x92>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4a7d      	ldr	r2, [pc, #500]	@ (8002fd4 <HAL_I2C_Init+0x27c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	bf94      	ite	ls
 8002de4:	2301      	movls	r3, #1
 8002de6:	2300      	movhi	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e0e7      	b.n	8002fc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	4a78      	ldr	r2, [pc, #480]	@ (8002fd8 <HAL_I2C_Init+0x280>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	0c9b      	lsrs	r3, r3, #18
 8002dfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	4a6a      	ldr	r2, [pc, #424]	@ (8002fcc <HAL_I2C_Init+0x274>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d802      	bhi.n	8002e2c <HAL_I2C_Init+0xd4>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	e009      	b.n	8002e40 <HAL_I2C_Init+0xe8>
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e32:	fb02 f303 	mul.w	r3, r2, r3
 8002e36:	4a69      	ldr	r2, [pc, #420]	@ (8002fdc <HAL_I2C_Init+0x284>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	099b      	lsrs	r3, r3, #6
 8002e3e:	3301      	adds	r3, #1
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	430b      	orrs	r3, r1
 8002e46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e52:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	495c      	ldr	r1, [pc, #368]	@ (8002fcc <HAL_I2C_Init+0x274>)
 8002e5c:	428b      	cmp	r3, r1
 8002e5e:	d819      	bhi.n	8002e94 <HAL_I2C_Init+0x13c>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1e59      	subs	r1, r3, #1
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e6e:	1c59      	adds	r1, r3, #1
 8002e70:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e74:	400b      	ands	r3, r1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <HAL_I2C_Init+0x138>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1e59      	subs	r1, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e88:	3301      	adds	r3, #1
 8002e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8e:	e051      	b.n	8002f34 <HAL_I2C_Init+0x1dc>
 8002e90:	2304      	movs	r3, #4
 8002e92:	e04f      	b.n	8002f34 <HAL_I2C_Init+0x1dc>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d111      	bne.n	8002ec0 <HAL_I2C_Init+0x168>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1e58      	subs	r0, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	440b      	add	r3, r1
 8002eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	e012      	b.n	8002ee6 <HAL_I2C_Init+0x18e>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1e58      	subs	r0, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6859      	ldr	r1, [r3, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	0099      	lsls	r1, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bf0c      	ite	eq
 8002ee0:	2301      	moveq	r3, #1
 8002ee2:	2300      	movne	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_I2C_Init+0x196>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e022      	b.n	8002f34 <HAL_I2C_Init+0x1dc>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10e      	bne.n	8002f14 <HAL_I2C_Init+0x1bc>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1e58      	subs	r0, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6859      	ldr	r1, [r3, #4]
 8002efe:	460b      	mov	r3, r1
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	440b      	add	r3, r1
 8002f04:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f08:	3301      	adds	r3, #1
 8002f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f12:	e00f      	b.n	8002f34 <HAL_I2C_Init+0x1dc>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1e58      	subs	r0, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6859      	ldr	r1, [r3, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	0099      	lsls	r1, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	6809      	ldr	r1, [r1, #0]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6911      	ldr	r1, [r2, #16]
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68d2      	ldr	r2, [r2, #12]
 8002f6e:	4311      	orrs	r1, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	430b      	orrs	r3, r1
 8002f76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	000186a0 	.word	0x000186a0
 8002fd0:	001e847f 	.word	0x001e847f
 8002fd4:	003d08ff 	.word	0x003d08ff
 8002fd8:	431bde83 	.word	0x431bde83
 8002fdc:	10624dd3 	.word	0x10624dd3

08002fe0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e101      	b.n	80031f6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d106      	bne.n	8003012 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7fe fd41 	bl	8001a94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2203      	movs	r2, #3
 8003016:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003020:	d102      	bne.n	8003028 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fd8f 	bl	8003b50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	7c1a      	ldrb	r2, [r3, #16]
 800303a:	f88d 2000 	strb.w	r2, [sp]
 800303e:	3304      	adds	r3, #4
 8003040:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003042:	f000 fd21 	bl	8003a88 <USB_CoreInit>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0ce      	b.n	80031f6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2100      	movs	r1, #0
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fd87 	bl	8003b72 <USB_SetCurrentMode>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2202      	movs	r2, #2
 800306e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e0bf      	b.n	80031f6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003076:	2300      	movs	r3, #0
 8003078:	73fb      	strb	r3, [r7, #15]
 800307a:	e04a      	b.n	8003112 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800307c:	7bfa      	ldrb	r2, [r7, #15]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	3315      	adds	r3, #21
 800308c:	2201      	movs	r2, #1
 800308e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	3314      	adds	r3, #20
 80030a0:	7bfa      	ldrb	r2, [r7, #15]
 80030a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030a4:	7bfa      	ldrb	r2, [r7, #15]
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	b298      	uxth	r0, r3
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	332e      	adds	r3, #46	@ 0x2e
 80030b8:	4602      	mov	r2, r0
 80030ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	3318      	adds	r3, #24
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	331c      	adds	r3, #28
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	3320      	adds	r3, #32
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	3324      	adds	r3, #36	@ 0x24
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	3301      	adds	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	791b      	ldrb	r3, [r3, #4]
 8003116:	7bfa      	ldrb	r2, [r7, #15]
 8003118:	429a      	cmp	r2, r3
 800311a:	d3af      	bcc.n	800307c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800311c:	2300      	movs	r3, #0
 800311e:	73fb      	strb	r3, [r7, #15]
 8003120:	e044      	b.n	80031ac <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	3301      	adds	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	791b      	ldrb	r3, [r3, #4]
 80031b0:	7bfa      	ldrb	r2, [r7, #15]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d3b5      	bcc.n	8003122 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	7c1a      	ldrb	r2, [r3, #16]
 80031be:	f88d 2000 	strb.w	r2, [sp]
 80031c2:	3304      	adds	r3, #4
 80031c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031c6:	f000 fd21 	bl	8003c0c <USB_DevInit>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e00c      	b.n	80031f6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fee9 	bl	8003fc6 <USB_DevDisconnect>

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e267      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d075      	beq.n	800330a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800321e:	4b88      	ldr	r3, [pc, #544]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b04      	cmp	r3, #4
 8003228:	d00c      	beq.n	8003244 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800322a:	4b85      	ldr	r3, [pc, #532]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003232:	2b08      	cmp	r3, #8
 8003234:	d112      	bne.n	800325c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003236:	4b82      	ldr	r3, [pc, #520]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800323e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003242:	d10b      	bne.n	800325c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003244:	4b7e      	ldr	r3, [pc, #504]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d05b      	beq.n	8003308 <HAL_RCC_OscConfig+0x108>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d157      	bne.n	8003308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e242      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003264:	d106      	bne.n	8003274 <HAL_RCC_OscConfig+0x74>
 8003266:	4b76      	ldr	r3, [pc, #472]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a75      	ldr	r2, [pc, #468]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 800326c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e01d      	b.n	80032b0 <HAL_RCC_OscConfig+0xb0>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0x98>
 800327e:	4b70      	ldr	r3, [pc, #448]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a6f      	ldr	r2, [pc, #444]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003284:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	4b6d      	ldr	r3, [pc, #436]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a6c      	ldr	r2, [pc, #432]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	e00b      	b.n	80032b0 <HAL_RCC_OscConfig+0xb0>
 8003298:	4b69      	ldr	r3, [pc, #420]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a68      	ldr	r2, [pc, #416]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 800329e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	4b66      	ldr	r3, [pc, #408]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a65      	ldr	r2, [pc, #404]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 80032aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d013      	beq.n	80032e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fe fe7c 	bl	8001fb4 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c0:	f7fe fe78 	bl	8001fb4 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	@ 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e207      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0xc0>
 80032de:	e014      	b.n	800330a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fe fe68 	bl	8001fb4 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032e8:	f7fe fe64 	bl	8001fb4 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	@ 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e1f3      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fa:	4b51      	ldr	r3, [pc, #324]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0xe8>
 8003306:	e000      	b.n	800330a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d063      	beq.n	80033de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003316:	4b4a      	ldr	r3, [pc, #296]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00b      	beq.n	800333a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003322:	4b47      	ldr	r3, [pc, #284]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800332a:	2b08      	cmp	r3, #8
 800332c:	d11c      	bne.n	8003368 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800332e:	4b44      	ldr	r3, [pc, #272]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d116      	bne.n	8003368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333a:	4b41      	ldr	r3, [pc, #260]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d005      	beq.n	8003352 <HAL_RCC_OscConfig+0x152>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d001      	beq.n	8003352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e1c7      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003352:	4b3b      	ldr	r3, [pc, #236]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4937      	ldr	r1, [pc, #220]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003362:	4313      	orrs	r3, r2
 8003364:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003366:	e03a      	b.n	80033de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d020      	beq.n	80033b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003370:	4b34      	ldr	r3, [pc, #208]	@ (8003444 <HAL_RCC_OscConfig+0x244>)
 8003372:	2201      	movs	r2, #1
 8003374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003376:	f7fe fe1d 	bl	8001fb4 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800337e:	f7fe fe19 	bl	8001fb4 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e1a8      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003390:	4b2b      	ldr	r3, [pc, #172]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339c:	4b28      	ldr	r3, [pc, #160]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4925      	ldr	r1, [pc, #148]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	600b      	str	r3, [r1, #0]
 80033b0:	e015      	b.n	80033de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b2:	4b24      	ldr	r3, [pc, #144]	@ (8003444 <HAL_RCC_OscConfig+0x244>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fe fdfc 	bl	8001fb4 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c0:	f7fe fdf8 	bl	8001fb4 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e187      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d036      	beq.n	8003458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d016      	beq.n	8003420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f2:	4b15      	ldr	r3, [pc, #84]	@ (8003448 <HAL_RCC_OscConfig+0x248>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f8:	f7fe fddc 	bl	8001fb4 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003400:	f7fe fdd8 	bl	8001fb4 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e167      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003412:	4b0b      	ldr	r3, [pc, #44]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0x200>
 800341e:	e01b      	b.n	8003458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003420:	4b09      	ldr	r3, [pc, #36]	@ (8003448 <HAL_RCC_OscConfig+0x248>)
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003426:	f7fe fdc5 	bl	8001fb4 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800342c:	e00e      	b.n	800344c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800342e:	f7fe fdc1 	bl	8001fb4 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d907      	bls.n	800344c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e150      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
 8003440:	40023800 	.word	0x40023800
 8003444:	42470000 	.word	0x42470000
 8003448:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800344c:	4b88      	ldr	r3, [pc, #544]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 800344e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1ea      	bne.n	800342e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 8097 	beq.w	8003594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003466:	2300      	movs	r3, #0
 8003468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800346a:	4b81      	ldr	r3, [pc, #516]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10f      	bne.n	8003496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	4b7d      	ldr	r3, [pc, #500]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	4a7c      	ldr	r2, [pc, #496]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 8003480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003484:	6413      	str	r3, [r2, #64]	@ 0x40
 8003486:	4b7a      	ldr	r3, [pc, #488]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003492:	2301      	movs	r3, #1
 8003494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003496:	4b77      	ldr	r3, [pc, #476]	@ (8003674 <HAL_RCC_OscConfig+0x474>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d118      	bne.n	80034d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034a2:	4b74      	ldr	r3, [pc, #464]	@ (8003674 <HAL_RCC_OscConfig+0x474>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a73      	ldr	r2, [pc, #460]	@ (8003674 <HAL_RCC_OscConfig+0x474>)
 80034a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ae:	f7fe fd81 	bl	8001fb4 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b6:	f7fe fd7d 	bl	8001fb4 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e10c      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003674 <HAL_RCC_OscConfig+0x474>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f0      	beq.n	80034b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d106      	bne.n	80034ea <HAL_RCC_OscConfig+0x2ea>
 80034dc:	4b64      	ldr	r3, [pc, #400]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 80034de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e0:	4a63      	ldr	r2, [pc, #396]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034e8:	e01c      	b.n	8003524 <HAL_RCC_OscConfig+0x324>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b05      	cmp	r3, #5
 80034f0:	d10c      	bne.n	800350c <HAL_RCC_OscConfig+0x30c>
 80034f2:	4b5f      	ldr	r3, [pc, #380]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f6:	4a5e      	ldr	r2, [pc, #376]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 80034f8:	f043 0304 	orr.w	r3, r3, #4
 80034fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80034fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003502:	4a5b      	ldr	r2, [pc, #364]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6713      	str	r3, [r2, #112]	@ 0x70
 800350a:	e00b      	b.n	8003524 <HAL_RCC_OscConfig+0x324>
 800350c:	4b58      	ldr	r3, [pc, #352]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003510:	4a57      	ldr	r2, [pc, #348]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 8003512:	f023 0301 	bic.w	r3, r3, #1
 8003516:	6713      	str	r3, [r2, #112]	@ 0x70
 8003518:	4b55      	ldr	r3, [pc, #340]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 800351a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800351c:	4a54      	ldr	r2, [pc, #336]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 800351e:	f023 0304 	bic.w	r3, r3, #4
 8003522:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d015      	beq.n	8003558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352c:	f7fe fd42 	bl	8001fb4 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003532:	e00a      	b.n	800354a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003534:	f7fe fd3e 	bl	8001fb4 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e0cb      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354a:	4b49      	ldr	r3, [pc, #292]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0ee      	beq.n	8003534 <HAL_RCC_OscConfig+0x334>
 8003556:	e014      	b.n	8003582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003558:	f7fe fd2c 	bl	8001fb4 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800355e:	e00a      	b.n	8003576 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003560:	f7fe fd28 	bl	8001fb4 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800356e:	4293      	cmp	r3, r2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e0b5      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003576:	4b3e      	ldr	r3, [pc, #248]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 8003578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1ee      	bne.n	8003560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003582:	7dfb      	ldrb	r3, [r7, #23]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d105      	bne.n	8003594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003588:	4b39      	ldr	r3, [pc, #228]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 800358a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358c:	4a38      	ldr	r2, [pc, #224]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 800358e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003592:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80a1 	beq.w	80036e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800359e:	4b34      	ldr	r3, [pc, #208]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d05c      	beq.n	8003664 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d141      	bne.n	8003636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b2:	4b31      	ldr	r3, [pc, #196]	@ (8003678 <HAL_RCC_OscConfig+0x478>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fe fcfc 	bl	8001fb4 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c0:	f7fe fcf8 	bl	8001fb4 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e087      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d2:	4b27      	ldr	r3, [pc, #156]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69da      	ldr	r2, [r3, #28]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	019b      	lsls	r3, r3, #6
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f4:	085b      	lsrs	r3, r3, #1
 80035f6:	3b01      	subs	r3, #1
 80035f8:	041b      	lsls	r3, r3, #16
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003600:	061b      	lsls	r3, r3, #24
 8003602:	491b      	ldr	r1, [pc, #108]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003608:	4b1b      	ldr	r3, [pc, #108]	@ (8003678 <HAL_RCC_OscConfig+0x478>)
 800360a:	2201      	movs	r2, #1
 800360c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360e:	f7fe fcd1 	bl	8001fb4 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003616:	f7fe fccd 	bl	8001fb4 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e05c      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003628:	4b11      	ldr	r3, [pc, #68]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x416>
 8003634:	e054      	b.n	80036e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003636:	4b10      	ldr	r3, [pc, #64]	@ (8003678 <HAL_RCC_OscConfig+0x478>)
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fe fcba 	bl	8001fb4 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003644:	f7fe fcb6 	bl	8001fb4 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e045      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003656:	4b06      	ldr	r3, [pc, #24]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0x444>
 8003662:	e03d      	b.n	80036e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d107      	bne.n	800367c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e038      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
 8003670:	40023800 	.word	0x40023800
 8003674:	40007000 	.word	0x40007000
 8003678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800367c:	4b1b      	ldr	r3, [pc, #108]	@ (80036ec <HAL_RCC_OscConfig+0x4ec>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d028      	beq.n	80036dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003694:	429a      	cmp	r2, r3
 8003696:	d121      	bne.n	80036dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d11a      	bne.n	80036dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80036ac:	4013      	ands	r3, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d111      	bne.n	80036dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c2:	085b      	lsrs	r3, r3, #1
 80036c4:	3b01      	subs	r3, #1
 80036c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d107      	bne.n	80036dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40023800 	.word	0x40023800

080036f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0cc      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003704:	4b68      	ldr	r3, [pc, #416]	@ (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d90c      	bls.n	800372c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003712:	4b65      	ldr	r3, [pc, #404]	@ (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800371a:	4b63      	ldr	r3, [pc, #396]	@ (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0b8      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d020      	beq.n	800377a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003744:	4b59      	ldr	r3, [pc, #356]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	4a58      	ldr	r2, [pc, #352]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800374e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800375c:	4b53      	ldr	r3, [pc, #332]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	4a52      	ldr	r2, [pc, #328]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003768:	4b50      	ldr	r3, [pc, #320]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	494d      	ldr	r1, [pc, #308]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	4313      	orrs	r3, r2
 8003778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d044      	beq.n	8003810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378e:	4b47      	ldr	r3, [pc, #284]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d119      	bne.n	80037ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e07f      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d003      	beq.n	80037ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d107      	bne.n	80037be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ae:	4b3f      	ldr	r3, [pc, #252]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e06f      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037be:	4b3b      	ldr	r3, [pc, #236]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e067      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ce:	4b37      	ldr	r3, [pc, #220]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f023 0203 	bic.w	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4934      	ldr	r1, [pc, #208]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037e0:	f7fe fbe8 	bl	8001fb4 <HAL_GetTick>
 80037e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e6:	e00a      	b.n	80037fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e8:	f7fe fbe4 	bl	8001fb4 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e04f      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fe:	4b2b      	ldr	r3, [pc, #172]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 020c 	and.w	r2, r3, #12
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	429a      	cmp	r2, r3
 800380e:	d1eb      	bne.n	80037e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003810:	4b25      	ldr	r3, [pc, #148]	@ (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d20c      	bcs.n	8003838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381e:	4b22      	ldr	r3, [pc, #136]	@ (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003826:	4b20      	ldr	r3, [pc, #128]	@ (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d001      	beq.n	8003838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e032      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d008      	beq.n	8003856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003844:	4b19      	ldr	r3, [pc, #100]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4916      	ldr	r1, [pc, #88]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003862:	4b12      	ldr	r3, [pc, #72]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	490e      	ldr	r1, [pc, #56]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	4313      	orrs	r3, r2
 8003874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003876:	f000 f821 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 800387a:	4602      	mov	r2, r0
 800387c:	4b0b      	ldr	r3, [pc, #44]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	490a      	ldr	r1, [pc, #40]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003888:	5ccb      	ldrb	r3, [r1, r3]
 800388a:	fa22 f303 	lsr.w	r3, r2, r3
 800388e:	4a09      	ldr	r2, [pc, #36]	@ (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003892:	4b09      	ldr	r3, [pc, #36]	@ (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe fb48 	bl	8001f2c <HAL_InitTick>

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40023c00 	.word	0x40023c00
 80038ac:	40023800 	.word	0x40023800
 80038b0:	0800a9f0 	.word	0x0800a9f0
 80038b4:	20000048 	.word	0x20000048
 80038b8:	20000064 	.word	0x20000064

080038bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c0:	b090      	sub	sp, #64	@ 0x40
 80038c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80038c8:	2300      	movs	r3, #0
 80038ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038cc:	2300      	movs	r3, #0
 80038ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038d4:	4b59      	ldr	r3, [pc, #356]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 030c 	and.w	r3, r3, #12
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d00d      	beq.n	80038fc <HAL_RCC_GetSysClockFreq+0x40>
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	f200 80a1 	bhi.w	8003a28 <HAL_RCC_GetSysClockFreq+0x16c>
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0x34>
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d003      	beq.n	80038f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ee:	e09b      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038f0:	4b53      	ldr	r3, [pc, #332]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x184>)
 80038f2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80038f4:	e09b      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038f6:	4b53      	ldr	r3, [pc, #332]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x188>)
 80038f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038fa:	e098      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038fc:	4b4f      	ldr	r3, [pc, #316]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003904:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003906:	4b4d      	ldr	r3, [pc, #308]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d028      	beq.n	8003964 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003912:	4b4a      	ldr	r3, [pc, #296]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	099b      	lsrs	r3, r3, #6
 8003918:	2200      	movs	r2, #0
 800391a:	623b      	str	r3, [r7, #32]
 800391c:	627a      	str	r2, [r7, #36]	@ 0x24
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003924:	2100      	movs	r1, #0
 8003926:	4b47      	ldr	r3, [pc, #284]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8003928:	fb03 f201 	mul.w	r2, r3, r1
 800392c:	2300      	movs	r3, #0
 800392e:	fb00 f303 	mul.w	r3, r0, r3
 8003932:	4413      	add	r3, r2
 8003934:	4a43      	ldr	r2, [pc, #268]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8003936:	fba0 1202 	umull	r1, r2, r0, r2
 800393a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800393c:	460a      	mov	r2, r1
 800393e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003942:	4413      	add	r3, r2
 8003944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003948:	2200      	movs	r2, #0
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	61fa      	str	r2, [r7, #28]
 800394e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003952:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003956:	f7fc fc47 	bl	80001e8 <__aeabi_uldivmod>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4613      	mov	r3, r2
 8003960:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003962:	e053      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003964:	4b35      	ldr	r3, [pc, #212]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	099b      	lsrs	r3, r3, #6
 800396a:	2200      	movs	r2, #0
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	617a      	str	r2, [r7, #20]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003976:	f04f 0b00 	mov.w	fp, #0
 800397a:	4652      	mov	r2, sl
 800397c:	465b      	mov	r3, fp
 800397e:	f04f 0000 	mov.w	r0, #0
 8003982:	f04f 0100 	mov.w	r1, #0
 8003986:	0159      	lsls	r1, r3, #5
 8003988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800398c:	0150      	lsls	r0, r2, #5
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	ebb2 080a 	subs.w	r8, r2, sl
 8003996:	eb63 090b 	sbc.w	r9, r3, fp
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039ae:	ebb2 0408 	subs.w	r4, r2, r8
 80039b2:	eb63 0509 	sbc.w	r5, r3, r9
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	00eb      	lsls	r3, r5, #3
 80039c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039c4:	00e2      	lsls	r2, r4, #3
 80039c6:	4614      	mov	r4, r2
 80039c8:	461d      	mov	r5, r3
 80039ca:	eb14 030a 	adds.w	r3, r4, sl
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	eb45 030b 	adc.w	r3, r5, fp
 80039d4:	607b      	str	r3, [r7, #4]
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039e2:	4629      	mov	r1, r5
 80039e4:	028b      	lsls	r3, r1, #10
 80039e6:	4621      	mov	r1, r4
 80039e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039ec:	4621      	mov	r1, r4
 80039ee:	028a      	lsls	r2, r1, #10
 80039f0:	4610      	mov	r0, r2
 80039f2:	4619      	mov	r1, r3
 80039f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f6:	2200      	movs	r2, #0
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	60fa      	str	r2, [r7, #12]
 80039fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a00:	f7fc fbf2 	bl	80001e8 <__aeabi_uldivmod>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4613      	mov	r3, r2
 8003a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	0c1b      	lsrs	r3, r3, #16
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	3301      	adds	r3, #1
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003a1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a26:	e002      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a28:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3740      	adds	r7, #64	@ 0x40
 8003a34:	46bd      	mov	sp, r7
 8003a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	00f42400 	.word	0x00f42400
 8003a44:	018cba80 	.word	0x018cba80

08003a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a4c:	4b03      	ldr	r3, [pc, #12]	@ (8003a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	20000048 	.word	0x20000048

08003a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a64:	f7ff fff0 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	4b05      	ldr	r3, [pc, #20]	@ (8003a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	0a9b      	lsrs	r3, r3, #10
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	4903      	ldr	r1, [pc, #12]	@ (8003a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a76:	5ccb      	ldrb	r3, [r1, r3]
 8003a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40023800 	.word	0x40023800
 8003a84:	0800aa00 	.word	0x0800aa00

08003a88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a88:	b084      	sub	sp, #16
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	f107 001c 	add.w	r0, r7, #28
 8003a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a9a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d123      	bne.n	8003aea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003ab6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003aca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d105      	bne.n	8003ade <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 faa0 	bl	8004024 <USB_CoreReset>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	73fb      	strb	r3, [r7, #15]
 8003ae8:	e01b      	b.n	8003b22 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fa94 	bl	8004024 <USB_CoreReset>
 8003afc:	4603      	mov	r3, r0
 8003afe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d106      	bne.n	8003b16 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b14:	e005      	b.n	8003b22 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b22:	7fbb      	ldrb	r3, [r7, #30]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d10b      	bne.n	8003b40 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f043 0206 	orr.w	r2, r3, #6
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f043 0220 	orr.w	r2, r3, #32
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b4c:	b004      	add	sp, #16
 8003b4e:	4770      	bx	lr

08003b50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f023 0201 	bic.w	r2, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b8e:	78fb      	ldrb	r3, [r7, #3]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d115      	bne.n	8003bc0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ba0:	200a      	movs	r0, #10
 8003ba2:	f7fe fa13 	bl	8001fcc <HAL_Delay>
      ms += 10U;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	330a      	adds	r3, #10
 8003baa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 fa2b 	bl	8004008 <USB_GetMode>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d01e      	beq.n	8003bf6 <USB_SetCurrentMode+0x84>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2bc7      	cmp	r3, #199	@ 0xc7
 8003bbc:	d9f0      	bls.n	8003ba0 <USB_SetCurrentMode+0x2e>
 8003bbe:	e01a      	b.n	8003bf6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d115      	bne.n	8003bf2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003bd2:	200a      	movs	r0, #10
 8003bd4:	f7fe f9fa 	bl	8001fcc <HAL_Delay>
      ms += 10U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	330a      	adds	r3, #10
 8003bdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fa12 	bl	8004008 <USB_GetMode>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <USB_SetCurrentMode+0x84>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2bc7      	cmp	r3, #199	@ 0xc7
 8003bee:	d9f0      	bls.n	8003bd2 <USB_SetCurrentMode+0x60>
 8003bf0:	e001      	b.n	8003bf6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e005      	b.n	8003c02 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2bc8      	cmp	r3, #200	@ 0xc8
 8003bfa:	d101      	bne.n	8003c00 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b086      	sub	sp, #24
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003c1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c26:	2300      	movs	r3, #0
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	e009      	b.n	8003c40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	3340      	adds	r3, #64	@ 0x40
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	2200      	movs	r2, #0
 8003c38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2b0e      	cmp	r3, #14
 8003c44:	d9f2      	bls.n	8003c2c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003c46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d11c      	bne.n	8003c88 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c5c:	f043 0302 	orr.w	r3, r3, #2
 8003c60:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c66:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c72:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c7e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c86:	e00b      	b.n	8003ca0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c98:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	2300      	movs	r3, #0
 8003caa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d10d      	bne.n	8003cd0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d104      	bne.n	8003cc6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f968 	bl	8003f94 <USB_SetDevSpeed>
 8003cc4:	e008      	b.n	8003cd8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f963 	bl	8003f94 <USB_SetDevSpeed>
 8003cce:	e003      	b.n	8003cd8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003cd0:	2103      	movs	r1, #3
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f95e 	bl	8003f94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003cd8:	2110      	movs	r1, #16
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f8fa 	bl	8003ed4 <USB_FlushTxFifo>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f924 	bl	8003f38 <USB_FlushRxFifo>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d00:	461a      	mov	r2, r3
 8003d02:	2300      	movs	r3, #0
 8003d04:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	2300      	movs	r3, #0
 8003d10:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d18:	461a      	mov	r2, r3
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d1e:	2300      	movs	r3, #0
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	e043      	b.n	8003dac <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d3a:	d118      	bne.n	8003d6e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10a      	bne.n	8003d58 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e013      	b.n	8003d80 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d64:	461a      	mov	r2, r3
 8003d66:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	e008      	b.n	8003d80 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	2300      	movs	r3, #0
 8003d90:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003da4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	3301      	adds	r3, #1
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003db0:	461a      	mov	r2, r3
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d3b5      	bcc.n	8003d24 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003db8:	2300      	movs	r3, #0
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	e043      	b.n	8003e46 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003dd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003dd4:	d118      	bne.n	8003e08 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10a      	bne.n	8003df2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de8:	461a      	mov	r2, r3
 8003dea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	e013      	b.n	8003e1a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e008      	b.n	8003e1a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e14:	461a      	mov	r2, r3
 8003e16:	2300      	movs	r3, #0
 8003e18:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e26:	461a      	mov	r2, r3
 8003e28:	2300      	movs	r3, #0
 8003e2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e38:	461a      	mov	r2, r3
 8003e3a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	3301      	adds	r3, #1
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d3b5      	bcc.n	8003dbe <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e64:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003e72:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003e74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d105      	bne.n	8003e88 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	f043 0210 	orr.w	r2, r3, #16
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699a      	ldr	r2, [r3, #24]
 8003e8c:	4b10      	ldr	r3, [pc, #64]	@ (8003ed0 <USB_DevInit+0x2c4>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003e94:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	f043 0208 	orr.w	r2, r3, #8
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ea8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d107      	bne.n	8003ec0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003eb8:	f043 0304 	orr.w	r3, r3, #4
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ecc:	b004      	add	sp, #16
 8003ece:	4770      	bx	lr
 8003ed0:	803c3800 	.word	0x803c3800

08003ed4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003eee:	d901      	bls.n	8003ef4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e01b      	b.n	8003f2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	daf2      	bge.n	8003ee2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	019b      	lsls	r3, r3, #6
 8003f04:	f043 0220 	orr.w	r2, r3, #32
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f18:	d901      	bls.n	8003f1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e006      	b.n	8003f2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	d0f0      	beq.n	8003f0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	3301      	adds	r3, #1
 8003f48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f50:	d901      	bls.n	8003f56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e018      	b.n	8003f88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	daf2      	bge.n	8003f44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2210      	movs	r2, #16
 8003f66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f74:	d901      	bls.n	8003f7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e006      	b.n	8003f88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b10      	cmp	r3, #16
 8003f84:	d0f0      	beq.n	8003f68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	68f9      	ldr	r1, [r7, #12]
 8003fb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b085      	sub	sp, #20
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003fe0:	f023 0303 	bic.w	r3, r3, #3
 8003fe4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ff4:	f043 0302 	orr.w	r3, r3, #2
 8003ff8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	f003 0301 	and.w	r3, r3, #1
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3301      	adds	r3, #1
 8004034:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800403c:	d901      	bls.n	8004042 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e01b      	b.n	800407a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	daf2      	bge.n	8004030 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f043 0201 	orr.w	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3301      	adds	r3, #1
 800405e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004066:	d901      	bls.n	800406c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e006      	b.n	800407a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b01      	cmp	r3, #1
 8004076:	d0f0      	beq.n	800405a <USB_CoreReset+0x36>

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
	...

08004088 <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_t _cdcd_cfg = TUD_CDC_CONFIGURE_DEFAULT();

static bool _prep_out_transaction(uint8_t itf) {
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 8004092:	2300      	movs	r3, #0
 8004094:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	22a8      	movs	r2, #168	@ 0xa8
 800409a:	fb02 f303 	mul.w	r3, r2, r3
 800409e:	4a30      	ldr	r2, [pc, #192]	@ (8004160 <_prep_out_transaction+0xd8>)
 80040a0:	4413      	add	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	01db      	lsls	r3, r3, #7
 80040a8:	4a2e      	ldr	r2, [pc, #184]	@ (8004164 <_prep_out_transaction+0xdc>)
 80040aa:	4413      	add	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 80040ae:	f001 ffb9 	bl	8006024 <tud_mounted>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d009      	beq.n	80040cc <_prep_out_transaction+0x44>
 80040b8:	f001 ffc6 	bl	8006048 <tud_suspended>
 80040bc:	4603      	mov	r3, r0
 80040be:	f083 0301 	eor.w	r3, r3, #1
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <_prep_out_transaction+0x44>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <_prep_out_transaction+0x46>
 80040cc:	2300      	movs	r3, #0
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 80040d4:	f083 0301 	eor.w	r3, r3, #1
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <_prep_out_transaction+0x5e>
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	78db      	ldrb	r3, [r3, #3]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <_prep_out_transaction+0x62>
 80040e6:	2300      	movs	r3, #0
 80040e8:	e035      	b.n	8004156 <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	3310      	adds	r3, #16
 80040ee:	4618      	mov	r0, r3
 80040f0:	f001 fe13 	bl	8005d1a <tu_fifo_remaining>
 80040f4:	4603      	mov	r3, r0
 80040f6:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 80040f8:	897b      	ldrh	r3, [r7, #10]
 80040fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80040fc:	d801      	bhi.n	8004102 <_prep_out_transaction+0x7a>
 80040fe:	2300      	movs	r3, #0
 8004100:	e029      	b.n	8004156 <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	78da      	ldrb	r2, [r3, #3]
 8004106:	7dfb      	ldrb	r3, [r7, #23]
 8004108:	4611      	mov	r1, r2
 800410a:	4618      	mov	r0, r3
 800410c:	f003 faac 	bl	8007668 <usbd_edpt_claim>
 8004110:	4603      	mov	r3, r0
 8004112:	f083 0301 	eor.w	r3, r3, #1
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <_prep_out_transaction+0x98>
 800411c:	2300      	movs	r3, #0
 800411e:	e01a      	b.n	8004156 <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	3310      	adds	r3, #16
 8004124:	4618      	mov	r0, r3
 8004126:	f001 fdf8 	bl	8005d1a <tu_fifo_remaining>
 800412a:	4603      	mov	r3, r0
 800412c:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 800412e:	897b      	ldrh	r3, [r7, #10]
 8004130:	2b3f      	cmp	r3, #63	@ 0x3f
 8004132:	d908      	bls.n	8004146 <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	78d9      	ldrb	r1, [r3, #3]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	7df8      	ldrb	r0, [r7, #23]
 800413c:	2340      	movs	r3, #64	@ 0x40
 800413e:	f003 fae3 	bl	8007708 <usbd_edpt_xfer>
 8004142:	4603      	mov	r3, r0
 8004144:	e007      	b.n	8004156 <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	78da      	ldrb	r2, [r3, #3]
 800414a:	7dfb      	ldrb	r3, [r7, #23]
 800414c:	4611      	mov	r1, r2
 800414e:	4618      	mov	r0, r3
 8004150:	f003 fab2 	bl	80076b8 <usbd_edpt_release>
    return false;
 8004154:	2300      	movs	r3, #0
  }
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20000964 	.word	0x20000964
 8004164:	20000a0c 	.word	0x20000a0c

08004168 <tud_cdc_n_write>:
}

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, const void* buffer, uint32_t bufsize) {
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	22a8      	movs	r2, #168	@ 0xa8
 800417a:	fb02 f303 	mul.w	r3, r2, r3
 800417e:	4a13      	ldr	r2, [pc, #76]	@ (80041cc <tud_cdc_n_write+0x64>)
 8004180:	4413      	add	r3, r2
 8004182:	617b      	str	r3, [r7, #20]
  uint16_t wr_count = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f103 001c 	add.w	r0, r3, #28
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004190:	4293      	cmp	r3, r2
 8004192:	d802      	bhi.n	800419a <tud_cdc_n_write+0x32>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	b29b      	uxth	r3, r3
 8004198:	e001      	b.n	800419e <tud_cdc_n_write+0x36>
 800419a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800419e:	461a      	mov	r2, r3
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	f001 fe7d 	bl	8005ea0 <tu_fifo_write_n>
 80041a6:	4603      	mov	r3, r0
 80041a8:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	331c      	adds	r3, #28
 80041ae:	4618      	mov	r0, r3
 80041b0:	f001 fd3e 	bl	8005c30 <tu_fifo_count>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80041b8:	d903      	bls.n	80041c2 <tud_cdc_n_write+0x5a>
      #if CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
      || tu_fifo_full(&p_cdc->tx_ff) // check full if fifo size is less than packet size
      #endif
      ) {
    tud_cdc_n_write_flush(itf);
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 f807 	bl	80041d0 <tud_cdc_n_write_flush>
  }

  return wr_count;
 80041c2:	8a7b      	ldrh	r3, [r7, #18]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	20000964 	.word	0x20000964

080041d0 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80041da:	79fb      	ldrb	r3, [r7, #7]
 80041dc:	22a8      	movs	r2, #168	@ 0xa8
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	4a39      	ldr	r2, [pc, #228]	@ (80042c8 <tud_cdc_n_write_flush+0xf8>)
 80041e4:	4413      	add	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 80041e8:	79fb      	ldrb	r3, [r7, #7]
 80041ea:	01db      	lsls	r3, r3, #7
 80041ec:	4a37      	ldr	r2, [pc, #220]	@ (80042cc <tud_cdc_n_write_flush+0xfc>)
 80041ee:	4413      	add	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	f001 ff17 	bl	8006024 <tud_mounted>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d009      	beq.n	8004210 <tud_cdc_n_write_flush+0x40>
 80041fc:	f001 ff24 	bl	8006048 <tud_suspended>
 8004200:	4603      	mov	r3, r0
 8004202:	f083 0301 	eor.w	r3, r3, #1
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <tud_cdc_n_write_flush+0x40>
 800420c:	2301      	movs	r3, #1
 800420e:	e000      	b.n	8004212 <tud_cdc_n_write_flush+0x42>
 8004210:	2300      	movs	r3, #0
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 8004218:	f083 0301 	eor.w	r3, r3, #1
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <tud_cdc_n_write_flush+0x56>
 8004222:	2300      	movs	r3, #0
 8004224:	e04c      	b.n	80042c0 <tud_cdc_n_write_flush+0xf0>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	331c      	adds	r3, #28
 800422a:	4618      	mov	r0, r3
 800422c:	f001 fd00 	bl	8005c30 <tu_fifo_count>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <tud_cdc_n_write_flush+0x6a>
    return 0;
 8004236:	2300      	movs	r3, #0
 8004238:	e042      	b.n	80042c0 <tud_cdc_n_write_flush+0xf0>
  }

  const uint8_t rhport = 0;
 800423a:	2300      	movs	r3, #0
 800423c:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	789a      	ldrb	r2, [r3, #2]
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	4611      	mov	r1, r2
 8004246:	4618      	mov	r0, r3
 8004248:	f003 fa0e 	bl	8007668 <usbd_edpt_claim>
 800424c:	4603      	mov	r3, r0
 800424e:	f083 0301 	eor.w	r3, r3, #1
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <tud_cdc_n_write_flush+0x8c>
 8004258:	2300      	movs	r3, #0
 800425a:	e031      	b.n	80042c0 <tud_cdc_n_write_flush+0xf0>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f103 001c 	add.w	r0, r3, #28
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	3340      	adds	r3, #64	@ 0x40
 8004266:	2240      	movs	r2, #64	@ 0x40
 8004268:	4619      	mov	r1, r3
 800426a:	f001 fdb2 	bl	8005dd2 <tu_fifo_read_n>
 800426e:	4603      	mov	r3, r0
 8004270:	81bb      	strh	r3, [r7, #12]

  if (count) {
 8004272:	89bb      	ldrh	r3, [r7, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d01b      	beq.n	80042b0 <tud_cdc_n_write_flush+0xe0>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	7899      	ldrb	r1, [r3, #2]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004282:	89bb      	ldrh	r3, [r7, #12]
 8004284:	7bf8      	ldrb	r0, [r7, #15]
 8004286:	f003 fa3f 	bl	8007708 <usbd_edpt_xfer>
 800428a:	4603      	mov	r3, r0
 800428c:	f083 0301 	eor.w	r3, r3, #1
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <tud_cdc_n_write_flush+0xdc>
 8004296:	4b0e      	ldr	r3, [pc, #56]	@ (80042d0 <tud_cdc_n_write_flush+0x100>)
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d000      	beq.n	80042a8 <tud_cdc_n_write_flush+0xd8>
 80042a6:	be00      	bkpt	0x0000
 80042a8:	2300      	movs	r3, #0
 80042aa:	e009      	b.n	80042c0 <tud_cdc_n_write_flush+0xf0>
    return count;
 80042ac:	89bb      	ldrh	r3, [r7, #12]
 80042ae:	e007      	b.n	80042c0 <tud_cdc_n_write_flush+0xf0>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	789a      	ldrb	r2, [r3, #2]
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	4611      	mov	r1, r2
 80042b8:	4618      	mov	r0, r3
 80042ba:	f003 f9fd 	bl	80076b8 <usbd_edpt_release>
    return 0;
 80042be:	2300      	movs	r3, #0
  }
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	20000964 	.word	0x20000964
 80042cc:	20000a0c 	.word	0x20000a0c
 80042d0:	e000edf0 	.word	0xe000edf0

080042d4 <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 80042da:	22a8      	movs	r2, #168	@ 0xa8
 80042dc:	2100      	movs	r1, #0
 80042de:	4824      	ldr	r0, [pc, #144]	@ (8004370 <cdcd_init+0x9c>)
 80042e0:	f006 f826 	bl	800a330 <memset>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 80042e4:	2300      	movs	r3, #0
 80042e6:	71fb      	strb	r3, [r7, #7]
 80042e8:	e03a      	b.n	8004360 <cdcd_init+0x8c>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	22a8      	movs	r2, #168	@ 0xa8
 80042ee:	fb02 f303 	mul.w	r3, r2, r3
 80042f2:	4a1f      	ldr	r2, [pc, #124]	@ (8004370 <cdcd_init+0x9c>)
 80042f4:	4413      	add	r3, r2
 80042f6:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	22ff      	movs	r2, #255	@ 0xff
 80042fc:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004304:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2200      	movs	r2, #0
 800430a:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2200      	movs	r2, #0
 8004310:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2208      	movs	r2, #8
 8004316:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f103 0010 	add.w	r0, r3, #16
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8004324:	2300      	movs	r3, #0
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	2301      	movs	r3, #1
 800432a:	2240      	movs	r2, #64	@ 0x40
 800432c:	f000 ffee 	bl	800530c <tu_fifo_config>

    // TX fifo can be configured to change to overwritable if not connected (DTR bit not set). Without DTR we do not
    // know if data is actually polled by terminal. This way the most current data is prioritized.
    // Default: is overwritable
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	f103 001c 	add.w	r0, r3, #28
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 800433c:	4b0d      	ldr	r3, [pc, #52]	@ (8004374 <cdcd_init+0xa0>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	bf14      	ite	ne
 800434a:	2301      	movne	r3, #1
 800434c:	2300      	moveq	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	2301      	movs	r3, #1
 8004354:	2240      	movs	r2, #64	@ 0x40
 8004356:	f000 ffd9 	bl	800530c <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 800435a:	79fb      	ldrb	r3, [r7, #7]
 800435c:	3301      	adds	r3, #1
 800435e:	71fb      	strb	r3, [r7, #7]
 8004360:	79fb      	ldrb	r3, [r7, #7]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0c1      	beq.n	80042ea <cdcd_init+0x16>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 8004366:	bf00      	nop
 8004368:	bf00      	nop
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20000964 	.word	0x20000964
 8004374:	2000006c 	.word	0x2000006c

08004378 <cdcd_deinit>:

bool cdcd_deinit(void) {
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 800437c:	2301      	movs	r3, #1
}
 800437e:	4618      	mov	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8004392:	2300      	movs	r3, #0
 8004394:	73fb      	strb	r3, [r7, #15]
 8004396:	e037      	b.n	8004408 <cdcd_reset+0x80>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	22a8      	movs	r2, #168	@ 0xa8
 800439c:	fb02 f303 	mul.w	r3, r2, r3
 80043a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004418 <cdcd_reset+0x90>)
 80043a2:	4413      	add	r3, r2
 80043a4:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 80043a6:	2205      	movs	r2, #5
 80043a8:	2100      	movs	r1, #0
 80043aa:	68b8      	ldr	r0, [r7, #8]
 80043ac:	f005 ffc0 	bl	800a330 <memset>
    if (!_cdcd_cfg.rx_persistent) {
 80043b0:	4b1a      	ldr	r3, [pc, #104]	@ (800441c <cdcd_reset+0x94>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d104      	bne.n	80043c8 <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	3310      	adds	r3, #16
 80043c2:	4618      	mov	r0, r3
 80043c4:	f001 fd90 	bl	8005ee8 <tu_fifo_clear>
    }
    if (!_cdcd_cfg.tx_persistent) {
 80043c8:	4b14      	ldr	r3, [pc, #80]	@ (800441c <cdcd_reset+0x94>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d104      	bne.n	80043e0 <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	331c      	adds	r3, #28
 80043da:	4618      	mov	r0, r3
 80043dc:	f001 fd84 	bl	8005ee8 <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, _cdcd_cfg.tx_overwritabe_if_not_connected);
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f103 021c 	add.w	r2, r3, #28
 80043e6:	4b0d      	ldr	r3, [pc, #52]	@ (800441c <cdcd_reset+0x94>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bf14      	ite	ne
 80043f4:	2301      	movne	r3, #1
 80043f6:	2300      	moveq	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	4619      	mov	r1, r3
 80043fc:	4610      	mov	r0, r2
 80043fe:	f001 fd84 	bl	8005f0a <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	3301      	adds	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0c4      	beq.n	8004398 <cdcd_reset+0x10>
  }
}
 800440e:	bf00      	nop
 8004410:	bf00      	nop
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	20000964 	.word	0x20000964
 800441c:	2000006c 	.word	0x2000006c

08004420 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 8004420:	b580      	push	{r7, lr}
 8004422:	b09a      	sub	sp, #104	@ 0x68
 8004424:	af02      	add	r7, sp, #8
 8004426:	4603      	mov	r3, r0
 8004428:	6039      	str	r1, [r7, #0]
 800442a:	71fb      	strb	r3, [r7, #7]
 800442c:	4613      	mov	r3, r2
 800442e:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	795b      	ldrb	r3, [r3, #5]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d103      	bne.n	8004440 <cdcd_open+0x20>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	799b      	ldrb	r3, [r3, #6]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d001      	beq.n	8004444 <cdcd_open+0x24>
 8004440:	2300      	movs	r3, #0
 8004442:	e0da      	b.n	80045fa <cdcd_open+0x1da>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8004444:	2300      	movs	r3, #0
 8004446:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800444a:	e010      	b.n	800446e <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 800444c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004450:	22a8      	movs	r2, #168	@ 0xa8
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	4a6b      	ldr	r2, [pc, #428]	@ (8004604 <cdcd_open+0x1e4>)
 8004458:	4413      	add	r3, r2
 800445a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 800445c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800445e:	789b      	ldrb	r3, [r3, #2]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d009      	beq.n	8004478 <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8004464:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004468:	3301      	adds	r3, #1
 800446a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800446e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0ea      	beq.n	800444c <cdcd_open+0x2c>
 8004476:	e000      	b.n	800447a <cdcd_open+0x5a>
      break;
 8004478:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 800447a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <cdcd_open+0x78>
 8004482:	4b61      	ldr	r3, [pc, #388]	@ (8004608 <cdcd_open+0x1e8>)
 8004484:	647b      	str	r3, [r7, #68]	@ 0x44
 8004486:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d000      	beq.n	8004494 <cdcd_open+0x74>
 8004492:	be00      	bkpt	0x0000
 8004494:	2300      	movs	r3, #0
 8004496:	e0b0      	b.n	80045fa <cdcd_open+0x1da>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	789a      	ldrb	r2, [r3, #2]
 800449c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800449e:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 80044a0:	2309      	movs	r3, #9
 80044a2:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 80044aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 80044ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b6:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 80044b8:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 80044ba:	e013      	b.n	80044e4 <cdcd_open+0xc4>
 80044bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044be:	633b      	str	r3, [r7, #48]	@ 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80044c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c2:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 80044c4:	461a      	mov	r2, r3
 80044c6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80044ca:	4413      	add	r3, r2
 80044cc:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80044d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 80044d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d6:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 80044d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044e0:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 80044e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80044e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80044e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ea:	3301      	adds	r3, #1
 80044ec:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 80044ee:	2b24      	cmp	r3, #36	@ 0x24
 80044f0:	d104      	bne.n	80044fc <cdcd_open+0xdc>
 80044f2:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80044f6:	88bb      	ldrh	r3, [r7, #4]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d9df      	bls.n	80044bc <cdcd_open+0x9c>
 80044fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004502:	3301      	adds	r3, #1
 8004504:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 8004506:	2b05      	cmp	r3, #5
 8004508:	d12f      	bne.n	800456a <cdcd_open+0x14a>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 800450a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800450c:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004512:	4618      	mov	r0, r3
 8004514:	f003 f862 	bl	80075dc <usbd_edpt_open>
 8004518:	4603      	mov	r3, r0
 800451a:	f083 0301 	eor.w	r3, r3, #1
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00a      	beq.n	800453a <cdcd_open+0x11a>
 8004524:	4b38      	ldr	r3, [pc, #224]	@ (8004608 <cdcd_open+0x1e8>)
 8004526:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004528:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d000      	beq.n	8004536 <cdcd_open+0x116>
 8004534:	be00      	bkpt	0x0000
 8004536:	2300      	movs	r3, #0
 8004538:	e05f      	b.n	80045fa <cdcd_open+0x1da>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 800453a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800453c:	789a      	ldrb	r2, [r3, #2]
 800453e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004540:	705a      	strb	r2, [r3, #1]
 8004542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004544:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 800454a:	461a      	mov	r2, r3
 800454c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004550:	4413      	add	r3, r2
 8004552:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8004556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004558:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 800455a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455c:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	461a      	mov	r2, r3
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8004568:	657b      	str	r3, [r7, #84]	@ 0x54
 800456a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800456c:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	3301      	adds	r3, #1
 8004572:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8004574:	2b04      	cmp	r3, #4
 8004576:	d139      	bne.n	80045ec <cdcd_open+0x1cc>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 8004578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800457a:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 800457c:	2b0a      	cmp	r3, #10
 800457e:	d135      	bne.n	80045ec <cdcd_open+0x1cc>
 8004580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004582:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8004588:	461a      	mov	r2, r3
 800458a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800458e:	4413      	add	r3, r2
 8004590:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8004594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004596:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 80045a6:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 80045a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045aa:	3303      	adds	r3, #3
 80045ac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80045ae:	3202      	adds	r2, #2
 80045b0:	79f8      	ldrb	r0, [r7, #7]
 80045b2:	9201      	str	r2, [sp, #4]
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	2302      	movs	r3, #2
 80045b8:	2202      	movs	r2, #2
 80045ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045bc:	f002 ffa6 	bl	800750c <usbd_open_edpt_pair>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f083 0301 	eor.w	r3, r3, #1
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <cdcd_open+0x1c2>
 80045cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004608 <cdcd_open+0x1e8>)
 80045ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d000      	beq.n	80045de <cdcd_open+0x1be>
 80045dc:	be00      	bkpt	0x0000
 80045de:	2300      	movs	r3, #0
 80045e0:	e00b      	b.n	80045fa <cdcd_open+0x1da>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 80045e2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80045e6:	330e      	adds	r3, #14
 80045e8:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 80045ec:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff fd49 	bl	8004088 <_prep_out_transaction>

  return drv_len;
 80045f6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3760      	adds	r7, #96	@ 0x60
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20000964 	.word	0x20000964
 8004608:	e000edf0 	.word	0xe000edf0

0800460c <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	@ 0x28
 8004610:	af00      	add	r7, sp, #0
 8004612:	4603      	mov	r3, r0
 8004614:	603a      	str	r2, [r7, #0]
 8004616:	71fb      	strb	r3, [r7, #7]
 8004618:	460b      	mov	r3, r1
 800461a:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b20      	cmp	r3, #32
 8004628:	d001      	beq.n	800462e <cdcd_control_xfer_cb+0x22>
 800462a:	2300      	movs	r3, #0
 800462c:	e0e6      	b.n	80047fc <cdcd_control_xfer_cb+0x1f0>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 800462e:	2300      	movs	r3, #0
 8004630:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004634:	e014      	b.n	8004660 <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 8004636:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800463a:	22a8      	movs	r2, #168	@ 0xa8
 800463c:	fb02 f303 	mul.w	r3, r2, r3
 8004640:	4a70      	ldr	r2, [pc, #448]	@ (8004804 <cdcd_control_xfer_cb+0x1f8>)
 8004642:	4413      	add	r3, r2
 8004644:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	889b      	ldrh	r3, [r3, #4]
 8004650:	b29b      	uxth	r3, r3
 8004652:	429a      	cmp	r2, r3
 8004654:	d009      	beq.n	800466a <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8004656:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800465a:	3301      	adds	r3, #1
 800465c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004660:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0e6      	beq.n	8004636 <cdcd_control_xfer_cb+0x2a>
 8004668:	e000      	b.n	800466c <cdcd_control_xfer_cb+0x60>
      break;
 800466a:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 800466c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <cdcd_control_xfer_cb+0x6c>
 8004674:	2300      	movs	r3, #0
 8004676:	e0c1      	b.n	80047fc <cdcd_control_xfer_cb+0x1f0>

  switch (request->bRequest) {
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	785b      	ldrb	r3, [r3, #1]
 800467c:	3b20      	subs	r3, #32
 800467e:	2b03      	cmp	r3, #3
 8004680:	f200 80b2 	bhi.w	80047e8 <cdcd_control_xfer_cb+0x1dc>
 8004684:	a201      	add	r2, pc, #4	@ (adr r2, 800468c <cdcd_control_xfer_cb+0x80>)
 8004686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468a:	bf00      	nop
 800468c:	0800469d 	.word	0x0800469d
 8004690:	080046d9 	.word	0x080046d9
 8004694:	080046f3 	.word	0x080046f3
 8004698:	080047b7 	.word	0x080047b7
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 800469c:	79bb      	ldrb	r3, [r7, #6]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d108      	bne.n	80046b4 <cdcd_control_xfer_cb+0xa8>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	f103 0208 	add.w	r2, r3, #8
 80046a8:	79f8      	ldrb	r0, [r7, #7]
 80046aa:	2307      	movs	r3, #7
 80046ac:	6839      	ldr	r1, [r7, #0]
 80046ae:	f003 fa13 	bl	8007ad8 <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 80046b2:	e09b      	b.n	80047ec <cdcd_control_xfer_cb+0x1e0>
      } else if (stage == CONTROL_STAGE_ACK) {
 80046b4:	79bb      	ldrb	r3, [r7, #6]
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	f040 8098 	bne.w	80047ec <cdcd_control_xfer_cb+0x1e0>
        if (tud_cdc_line_coding_cb) {
 80046bc:	4b52      	ldr	r3, [pc, #328]	@ (8004808 <cdcd_control_xfer_cb+0x1fc>)
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 8094 	beq.w	80047ec <cdcd_control_xfer_cb+0x1e0>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	f103 0208 	add.w	r2, r3, #8
 80046ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fd fb9f 	bl	8001e14 <tud_cdc_line_coding_cb>
      break;
 80046d6:	e089      	b.n	80047ec <cdcd_control_xfer_cb+0x1e0>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 80046d8:	79bb      	ldrb	r3, [r7, #6]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	f040 8088 	bne.w	80047f0 <cdcd_control_xfer_cb+0x1e4>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	f103 0208 	add.w	r2, r3, #8
 80046e6:	79f8      	ldrb	r0, [r7, #7]
 80046e8:	2307      	movs	r3, #7
 80046ea:	6839      	ldr	r1, [r7, #0]
 80046ec:	f003 f9f4 	bl	8007ad8 <tud_control_xfer>
      }
      break;
 80046f0:	e07e      	b.n	80047f0 <cdcd_control_xfer_cb+0x1e4>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 80046f2:	79bb      	ldrb	r3, [r7, #6]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d105      	bne.n	8004704 <cdcd_control_xfer_cb+0xf8>
        tud_control_status(rhport, request);
 80046f8:	79fb      	ldrb	r3, [r7, #7]
 80046fa:	6839      	ldr	r1, [r7, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f003 f979 	bl	80079f4 <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 8004702:	e077      	b.n	80047f4 <cdcd_control_xfer_cb+0x1e8>
      } else if (stage == CONTROL_STAGE_ACK) {
 8004704:	79bb      	ldrb	r3, [r7, #6]
 8004706:	2b03      	cmp	r3, #3
 8004708:	d174      	bne.n	80047f4 <cdcd_control_xfer_cb+0x1e8>
        bool const dtr = tu_bit_test(request->wValue, 0);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	885b      	ldrh	r3, [r3, #2]
 800470e:	b29b      	uxth	r3, r3
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	2300      	movs	r3, #0
 8004714:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8004716:	7bfb      	ldrb	r3, [r7, #15]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	fa22 f303 	lsr.w	r3, r2, r3
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	bf14      	ite	ne
 8004726:	2301      	movne	r3, #1
 8004728:	2300      	moveq	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	885b      	ldrh	r3, [r3, #2]
 8004732:	b29b      	uxth	r3, r3
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	2301      	movs	r3, #1
 8004738:	75fb      	strb	r3, [r7, #23]
 800473a:	7dfb      	ldrb	r3, [r7, #23]
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	fa22 f303 	lsr.w	r3, r2, r3
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	bf14      	ite	ne
 800474a:	2301      	movne	r3, #1
 800474c:	2300      	moveq	r3, #0
 800474e:	b2db      	uxtb	r3, r3
 8004750:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	885b      	ldrh	r3, [r3, #2]
 8004756:	b29b      	uxth	r3, r3
 8004758:	b2da      	uxtb	r2, r3
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	711a      	strb	r2, [r3, #4]
        if (_cdcd_cfg.tx_overwritabe_if_not_connected) {
 800475e:	4b2b      	ldr	r3, [pc, #172]	@ (800480c <cdcd_control_xfer_cb+0x200>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d013      	beq.n	8004794 <cdcd_control_xfer_cb+0x188>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	f103 021c 	add.w	r2, r3, #28
 8004772:	7ffb      	ldrb	r3, [r7, #31]
 8004774:	2b00      	cmp	r3, #0
 8004776:	bf14      	ite	ne
 8004778:	2301      	movne	r3, #1
 800477a:	2300      	moveq	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	f083 0301 	eor.w	r3, r3, #1
 8004782:	b2db      	uxtb	r3, r3
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	b2db      	uxtb	r3, r3
 800478a:	4619      	mov	r1, r3
 800478c:	4610      	mov	r0, r2
 800478e:	f001 fbbc 	bl	8005f0a <tu_fifo_set_overwritable>
 8004792:	e005      	b.n	80047a0 <cdcd_control_xfer_cb+0x194>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, false);
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	331c      	adds	r3, #28
 8004798:	2100      	movs	r1, #0
 800479a:	4618      	mov	r0, r3
 800479c:	f001 fbb5 	bl	8005f0a <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 80047a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004810 <cdcd_control_xfer_cb+0x204>)
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d026      	beq.n	80047f4 <cdcd_control_xfer_cb+0x1e8>
          tud_cdc_line_state_cb(itf, dtr, rts);
 80047a6:	7fba      	ldrb	r2, [r7, #30]
 80047a8:	7ff9      	ldrb	r1, [r7, #31]
 80047aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fc f88c 	bl	80008cc <tud_cdc_line_state_cb>
      break;
 80047b4:	e01e      	b.n	80047f4 <cdcd_control_xfer_cb+0x1e8>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 80047b6:	79bb      	ldrb	r3, [r7, #6]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d105      	bne.n	80047c8 <cdcd_control_xfer_cb+0x1bc>
        tud_control_status(rhport, request);
 80047bc:	79fb      	ldrb	r3, [r7, #7]
 80047be:	6839      	ldr	r1, [r7, #0]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f003 f917 	bl	80079f4 <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 80047c6:	e017      	b.n	80047f8 <cdcd_control_xfer_cb+0x1ec>
      } else if (stage == CONTROL_STAGE_ACK) {
 80047c8:	79bb      	ldrb	r3, [r7, #6]
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	d114      	bne.n	80047f8 <cdcd_control_xfer_cb+0x1ec>
        if (tud_cdc_send_break_cb) {
 80047ce:	4b11      	ldr	r3, [pc, #68]	@ (8004814 <cdcd_control_xfer_cb+0x208>)
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d011      	beq.n	80047f8 <cdcd_control_xfer_cb+0x1ec>
          tud_cdc_send_break_cb(itf, request->wValue);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	885b      	ldrh	r3, [r3, #2]
 80047d8:	b29a      	uxth	r2, r3
 80047da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047de:	4611      	mov	r1, r2
 80047e0:	4618      	mov	r0, r3
 80047e2:	f3af 8000 	nop.w
      break;
 80047e6:	e007      	b.n	80047f8 <cdcd_control_xfer_cb+0x1ec>

    default:
      return false; // stall unsupported request
 80047e8:	2300      	movs	r3, #0
 80047ea:	e007      	b.n	80047fc <cdcd_control_xfer_cb+0x1f0>
      break;
 80047ec:	bf00      	nop
 80047ee:	e004      	b.n	80047fa <cdcd_control_xfer_cb+0x1ee>
      break;
 80047f0:	bf00      	nop
 80047f2:	e002      	b.n	80047fa <cdcd_control_xfer_cb+0x1ee>
      break;
 80047f4:	bf00      	nop
 80047f6:	e000      	b.n	80047fa <cdcd_control_xfer_cb+0x1ee>
      break;
 80047f8:	bf00      	nop
  }

  return true;
 80047fa:	2301      	movs	r3, #1
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3728      	adds	r7, #40	@ 0x28
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20000964 	.word	0x20000964
 8004808:	08001e15 	.word	0x08001e15
 800480c:	2000006c 	.word	0x2000006c
 8004810:	080008cd 	.word	0x080008cd
 8004814:	00000000 	.word	0x00000000

08004818 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8004818:	b580      	push	{r7, lr}
 800481a:	b088      	sub	sp, #32
 800481c:	af00      	add	r7, sp, #0
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	4603      	mov	r3, r0
 8004822:	71fb      	strb	r3, [r7, #7]
 8004824:	460b      	mov	r3, r1
 8004826:	71bb      	strb	r3, [r7, #6]
 8004828:	4613      	mov	r3, r2
 800482a:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 800482c:	2300      	movs	r3, #0
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e013      	b.n	800485a <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 8004832:	7ffb      	ldrb	r3, [r7, #31]
 8004834:	22a8      	movs	r2, #168	@ 0xa8
 8004836:	fb02 f303 	mul.w	r3, r2, r3
 800483a:	4a5f      	ldr	r2, [pc, #380]	@ (80049b8 <cdcd_xfer_cb+0x1a0>)
 800483c:	4413      	add	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	78db      	ldrb	r3, [r3, #3]
 8004844:	79ba      	ldrb	r2, [r7, #6]
 8004846:	429a      	cmp	r2, r3
 8004848:	d00a      	beq.n	8004860 <cdcd_xfer_cb+0x48>
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	789b      	ldrb	r3, [r3, #2]
 800484e:	79ba      	ldrb	r2, [r7, #6]
 8004850:	429a      	cmp	r2, r3
 8004852:	d005      	beq.n	8004860 <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8004854:	7ffb      	ldrb	r3, [r7, #31]
 8004856:	3301      	adds	r3, #1
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	7ffb      	ldrb	r3, [r7, #31]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0e8      	beq.n	8004832 <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8004860:	7ffb      	ldrb	r3, [r7, #31]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <cdcd_xfer_cb+0x64>
 8004866:	4b55      	ldr	r3, [pc, #340]	@ (80049bc <cdcd_xfer_cb+0x1a4>)
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d000      	beq.n	8004878 <cdcd_xfer_cb+0x60>
 8004876:	be00      	bkpt	0x0000
 8004878:	2300      	movs	r3, #0
 800487a:	e098      	b.n	80049ae <cdcd_xfer_cb+0x196>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 800487c:	7ffb      	ldrb	r3, [r7, #31]
 800487e:	01db      	lsls	r3, r3, #7
 8004880:	4a4f      	ldr	r2, [pc, #316]	@ (80049c0 <cdcd_xfer_cb+0x1a8>)
 8004882:	4413      	add	r3, r2
 8004884:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	78db      	ldrb	r3, [r3, #3]
 800488a:	79ba      	ldrb	r2, [r7, #6]
 800488c:	429a      	cmp	r2, r3
 800488e:	d148      	bne.n	8004922 <cdcd_xfer_cb+0x10a>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	3310      	adds	r3, #16
 8004894:	6939      	ldr	r1, [r7, #16]
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	b292      	uxth	r2, r2
 800489a:	4618      	mov	r0, r3
 800489c:	f001 fb00 	bl	8005ea0 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 80048a0:	4b48      	ldr	r3, [pc, #288]	@ (80049c4 <cdcd_xfer_cb+0x1ac>)
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d027      	beq.n	80048f6 <cdcd_xfer_cb+0xde>
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	795b      	ldrb	r3, [r3, #5]
 80048aa:	2bff      	cmp	r3, #255	@ 0xff
 80048ac:	d023      	beq.n	80048f6 <cdcd_xfer_cb+0xde>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	e01c      	b.n	80048ee <cdcd_xfer_cb+0xd6>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	795a      	ldrb	r2, [r3, #5]
 80048b8:	6939      	ldr	r1, [r7, #16]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	440b      	add	r3, r1
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d111      	bne.n	80048e8 <cdcd_xfer_cb+0xd0>
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	3310      	adds	r3, #16
 80048c8:	4618      	mov	r0, r3
 80048ca:	f001 f9e3 	bl	8005c94 <tu_fifo_empty>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f083 0301 	eor.w	r3, r3, #1
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d006      	beq.n	80048e8 <cdcd_xfer_cb+0xd0>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	795a      	ldrb	r2, [r3, #5]
 80048de:	7ffb      	ldrb	r3, [r7, #31]
 80048e0:	4611      	mov	r1, r2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	3301      	adds	r3, #1
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d3de      	bcc.n	80048b4 <cdcd_xfer_cb+0x9c>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 80048f6:	4b34      	ldr	r3, [pc, #208]	@ (80049c8 <cdcd_xfer_cb+0x1b0>)
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00e      	beq.n	800491a <cdcd_xfer_cb+0x102>
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	3310      	adds	r3, #16
 8004900:	4618      	mov	r0, r3
 8004902:	f001 f9c7 	bl	8005c94 <tu_fifo_empty>
 8004906:	4603      	mov	r3, r0
 8004908:	f083 0301 	eor.w	r3, r3, #1
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <cdcd_xfer_cb+0x102>
      tud_cdc_rx_cb(itf);
 8004912:	7ffb      	ldrb	r3, [r7, #31]
 8004914:	4618      	mov	r0, r3
 8004916:	f7fb fffb 	bl	8000910 <tud_cdc_rx_cb>
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 800491a:	7ffb      	ldrb	r3, [r7, #31]
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff fbb3 	bl	8004088 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	789b      	ldrb	r3, [r3, #2]
 8004926:	79ba      	ldrb	r2, [r7, #6]
 8004928:	429a      	cmp	r2, r3
 800492a:	d13f      	bne.n	80049ac <cdcd_xfer_cb+0x194>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 800492c:	4b27      	ldr	r3, [pc, #156]	@ (80049cc <cdcd_xfer_cb+0x1b4>)
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <cdcd_xfer_cb+0x122>
      tud_cdc_tx_complete_cb(itf);
 8004932:	7ffb      	ldrb	r3, [r7, #31]
 8004934:	4618      	mov	r0, r3
 8004936:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 800493a:	7ffb      	ldrb	r3, [r7, #31]
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff fc47 	bl	80041d0 <tud_cdc_n_write_flush>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d131      	bne.n	80049ac <cdcd_xfer_cb+0x194>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	331c      	adds	r3, #28
 800494c:	4618      	mov	r0, r3
 800494e:	f001 f96f 	bl	8005c30 <tu_fifo_count>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d129      	bne.n	80049ac <cdcd_xfer_cb+0x194>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d026      	beq.n	80049ac <cdcd_xfer_cb+0x194>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004964:	2b00      	cmp	r3, #0
 8004966:	d121      	bne.n	80049ac <cdcd_xfer_cb+0x194>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	789a      	ldrb	r2, [r3, #2]
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	4611      	mov	r1, r2
 8004970:	4618      	mov	r0, r3
 8004972:	f002 fe79 	bl	8007668 <usbd_edpt_claim>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d017      	beq.n	80049ac <cdcd_xfer_cb+0x194>
          TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0));
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	7899      	ldrb	r1, [r3, #2]
 8004980:	79f8      	ldrb	r0, [r7, #7]
 8004982:	2300      	movs	r3, #0
 8004984:	2200      	movs	r2, #0
 8004986:	f002 febf 	bl	8007708 <usbd_edpt_xfer>
 800498a:	4603      	mov	r3, r0
 800498c:	f083 0301 	eor.w	r3, r3, #1
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <cdcd_xfer_cb+0x194>
 8004996:	4b09      	ldr	r3, [pc, #36]	@ (80049bc <cdcd_xfer_cb+0x1a4>)
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d000      	beq.n	80049a8 <cdcd_xfer_cb+0x190>
 80049a6:	be00      	bkpt	0x0000
 80049a8:	2300      	movs	r3, #0
 80049aa:	e000      	b.n	80049ae <cdcd_xfer_cb+0x196>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 80049ac:	2301      	movs	r3, #1
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3720      	adds	r7, #32
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20000964 	.word	0x20000964
 80049bc:	e000edf0 	.word	0xe000edf0
 80049c0:	20000a0c 	.word	0x20000a0c
 80049c4:	00000000 	.word	0x00000000
 80049c8:	08000911 	.word	0x08000911
 80049cc:	00000000 	.word	0x00000000

080049d0 <tud_hid_set_idle_cb>:
TU_ATTR_WEAK void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
  (void) instance;
  (void) protocol;
}

TU_ATTR_WEAK bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate) {
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	460a      	mov	r2, r1
 80049da:	71fb      	strb	r3, [r7, #7]
 80049dc:	4613      	mov	r3, r2
 80049de:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) idle_rate;
  return true;
 80049e0:	2301      	movs	r3, #1
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <tud_hid_report_failed_cb>:
  (void) report;
  (void) len;
}

// Invoked when a transfer wasn't successful
TU_ATTR_WEAK void tud_hid_report_failed_cb(uint8_t instance, hid_report_type_t report_type, uint8_t const* report, uint16_t xferred_bytes) {
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	603a      	str	r2, [r7, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	4603      	mov	r3, r0
 80049fa:	71fb      	strb	r3, [r7, #7]
 80049fc:	460b      	mov	r3, r1
 80049fe:	71bb      	strb	r3, [r7, #6]
 8004a00:	4613      	mov	r3, r2
 8004a02:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report_type;
  (void) report;
  (void) xferred_bytes;
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance) {
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	4603      	mov	r3, r0
 8004a18:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 8004a1e:	79fa      	ldrb	r2, [r7, #7]
 8004a20:	491b      	ldr	r1, [pc, #108]	@ (8004a90 <tud_hid_n_ready+0x80>)
 8004a22:	4613      	mov	r3, r2
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	73bb      	strb	r3, [r7, #14]
 8004a32:	f001 faf7 	bl	8006024 <tud_mounted>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d009      	beq.n	8004a50 <tud_hid_n_ready+0x40>
 8004a3c:	f001 fb04 	bl	8006048 <tud_suspended>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f083 0301 	eor.w	r3, r3, #1
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <tud_hid_n_ready+0x40>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e000      	b.n	8004a52 <tud_hid_n_ready+0x42>
 8004a50:	2300      	movs	r3, #0
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d010      	beq.n	8004a7e <tud_hid_n_ready+0x6e>
 8004a5c:	7bbb      	ldrb	r3, [r7, #14]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00d      	beq.n	8004a7e <tud_hid_n_ready+0x6e>
 8004a62:	7bba      	ldrb	r2, [r7, #14]
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	4611      	mov	r1, r2
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f002 fec3 	bl	80077f4 <usbd_edpt_busy>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	f083 0301 	eor.w	r3, r3, #1
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <tud_hid_n_ready+0x6e>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <tud_hid_n_ready+0x70>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	b2db      	uxtb	r3, r3
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000a8c 	.word	0x20000a8c

08004a94 <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const *report, uint16_t len) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08e      	sub	sp, #56	@ 0x38
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	603a      	str	r2, [r7, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	71bb      	strb	r3, [r7, #6]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(instance < CFG_TUD_HID);
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <tud_hid_n_report+0x20>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	e06d      	b.n	8004b90 <tud_hid_n_report+0xfc>
  const uint8_t rhport = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  hidd_interface_t *p_hid = &_hidd_itf[instance];
 8004aba:	79fa      	ldrb	r2, [r7, #7]
 8004abc:	4613      	mov	r3, r2
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4a34      	ldr	r2, [pc, #208]	@ (8004b98 <tud_hid_n_report+0x104>)
 8004ac6:	4413      	add	r3, r2
 8004ac8:	633b      	str	r3, [r7, #48]	@ 0x30
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8004aca:	79fa      	ldrb	r2, [r7, #7]
 8004acc:	4613      	mov	r3, r2
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	4413      	add	r3, r2
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	4a31      	ldr	r2, [pc, #196]	@ (8004b9c <tud_hid_n_report+0x108>)
 8004ad6:	4413      	add	r3, r2
 8004ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_hid->ep_in));
 8004ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004adc:	785a      	ldrb	r2, [r3, #1]
 8004ade:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f002 fdbf 	bl	8007668 <usbd_edpt_claim>
 8004aea:	4603      	mov	r3, r0
 8004aec:	f083 0301 	eor.w	r3, r3, #1
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <tud_hid_n_report+0x66>
 8004af6:	2300      	movs	r3, #0
 8004af8:	e04a      	b.n	8004b90 <tud_hid_n_report+0xfc>

  // prepare data
  if (report_id) {
 8004afa:	79bb      	ldrb	r3, [r7, #6]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d021      	beq.n	8004b44 <tud_hid_n_report+0xb0>
    p_epbuf->epin[0] = report_id;
 8004b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b02:	79ba      	ldrb	r2, [r7, #6]
 8004b04:	741a      	strb	r2, [r3, #16]
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin + 1, CFG_TUD_HID_EP_BUFSIZE - 1, report, len));
 8004b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b08:	3310      	adds	r3, #16
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	88bb      	ldrh	r3, [r7, #4]
 8004b0e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004b10:	220f      	movs	r2, #15
 8004b12:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	623a      	str	r2, [r7, #32]
 8004b18:	61fb      	str	r3, [r7, #28]
  if ( count > destsz ) {
 8004b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d202      	bcs.n	8004b28 <tud_hid_n_report+0x94>
    return -1;
 8004b22:	f04f 33ff 	mov.w	r3, #4294967295
 8004b26:	e005      	b.n	8004b34 <tud_hid_n_report+0xa0>
  memcpy(dest, src, count);
 8004b28:	69fa      	ldr	r2, [r7, #28]
 8004b2a:	6a39      	ldr	r1, [r7, #32]
 8004b2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b2e:	f005 fc7a 	bl	800a426 <memcpy>
  return 0;
 8004b32:	2300      	movs	r3, #0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <tud_hid_n_report+0xa8>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e029      	b.n	8004b90 <tud_hid_n_report+0xfc>
    len++;
 8004b3c:	88bb      	ldrh	r3, [r7, #4]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	80bb      	strh	r3, [r7, #4]
 8004b42:	e01a      	b.n	8004b7a <tud_hid_n_report+0xe6>
  } else {
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin, CFG_TUD_HID_EP_BUFSIZE, report, len));
 8004b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b46:	f103 0210 	add.w	r2, r3, #16
 8004b4a:	88bb      	ldrh	r3, [r7, #4]
 8004b4c:	61ba      	str	r2, [r7, #24]
 8004b4e:	2210      	movs	r2, #16
 8004b50:	617a      	str	r2, [r7, #20]
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	613a      	str	r2, [r7, #16]
 8004b56:	60fb      	str	r3, [r7, #12]
  if ( count > destsz ) {
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d202      	bcs.n	8004b66 <tud_hid_n_report+0xd2>
    return -1;
 8004b60:	f04f 33ff 	mov.w	r3, #4294967295
 8004b64:	e005      	b.n	8004b72 <tud_hid_n_report+0xde>
  memcpy(dest, src, count);
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	6939      	ldr	r1, [r7, #16]
 8004b6a:	69b8      	ldr	r0, [r7, #24]
 8004b6c:	f005 fc5b 	bl	800a426 <memcpy>
  return 0;
 8004b70:	2300      	movs	r3, #0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <tud_hid_n_report+0xe6>
 8004b76:	2300      	movs	r3, #0
 8004b78:	e00a      	b.n	8004b90 <tud_hid_n_report+0xfc>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_epbuf->epin, len);
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7c:	7859      	ldrb	r1, [r3, #1]
 8004b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b80:	f103 0210 	add.w	r2, r3, #16
 8004b84:	88bb      	ldrh	r3, [r7, #4]
 8004b86:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8004b8a:	f002 fdbd 	bl	8007708 <usbd_edpt_xfer>
 8004b8e:	4603      	mov	r3, r0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3738      	adds	r7, #56	@ 0x38
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	20000a8c 	.word	0x20000a8c
 8004b9c:	20000a98 	.word	0x20000a98

08004ba0 <tud_hid_n_keyboard_report>:

uint8_t tud_hid_n_get_protocol(uint8_t instance) {
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	4603      	mov	r3, r0
 8004baa:	71fb      	strb	r3, [r7, #7]
 8004bac:	460b      	mov	r3, r1
 8004bae:	71bb      	strb	r3, [r7, #6]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;
  report.modifier = modifier;
 8004bb4:	797b      	ldrb	r3, [r7, #5]
 8004bb6:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	727b      	strb	r3, [r7, #9]

  if (keycode) {
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d007      	beq.n	8004bd2 <tud_hid_n_keyboard_report+0x32>
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	f107 030a 	add.w	r3, r7, #10
 8004bc8:	6811      	ldr	r1, [r2, #0]
 8004bca:	6019      	str	r1, [r3, #0]
 8004bcc:	8892      	ldrh	r2, [r2, #4]
 8004bce:	809a      	strh	r2, [r3, #4]
 8004bd0:	e007      	b.n	8004be2 <tud_hid_n_keyboard_report+0x42>
  } else {
    tu_memclr(report.keycode, 6);
 8004bd2:	f107 0308 	add.w	r3, r7, #8
 8004bd6:	3302      	adds	r3, #2
 8004bd8:	2206      	movs	r2, #6
 8004bda:	2100      	movs	r1, #0
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f005 fba7 	bl	800a330 <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 8004be2:	f107 0208 	add.w	r2, r7, #8
 8004be6:	79b9      	ldrb	r1, [r7, #6]
 8004be8:	79f8      	ldrb	r0, [r7, #7]
 8004bea:	2308      	movs	r3, #8
 8004bec:	f7ff ff52 	bl	8004a94 <tud_hid_n_report>
 8004bf0:	4603      	mov	r3, r0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <hidd_init>:
}

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void) {
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	af00      	add	r7, sp, #0
  hidd_reset(0);
 8004bfe:	2000      	movs	r0, #0
 8004c00:	f000 f80a 	bl	8004c18 <hidd_reset>
}
 8004c04:	bf00      	nop
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <hidd_deinit>:

bool hidd_deinit(void) {
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  return true;
 8004c0c:	2301      	movs	r3, #1
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <hidd_reset>:

void hidd_reset(uint8_t rhport) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 8004c22:	220c      	movs	r2, #12
 8004c24:	2100      	movs	r1, #0
 8004c26:	4803      	ldr	r0, [pc, #12]	@ (8004c34 <hidd_reset+0x1c>)
 8004c28:	f005 fb82 	bl	800a330 <memset>
}
 8004c2c:	bf00      	nop
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	20000a8c 	.word	0x20000a8c

08004c38 <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const *desc_itf, uint16_t max_len) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b094      	sub	sp, #80	@ 0x50
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	4603      	mov	r3, r0
 8004c40:	6039      	str	r1, [r7, #0]
 8004c42:	71fb      	strb	r3, [r7, #7]
 8004c44:	4613      	mov	r3, r2
 8004c46:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	795b      	ldrb	r3, [r3, #5]
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d001      	beq.n	8004c54 <hidd_open+0x1c>
 8004c50:	2300      	movs	r3, #0
 8004c52:	e0ce      	b.n	8004df2 <hidd_open+0x1ba>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	791b      	ldrb	r3, [r3, #4]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	00d2      	lsls	r2, r2, #3
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 8004c60:	3312      	adds	r3, #18
 8004c62:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  TU_ASSERT(max_len >= drv_len, 0);
 8004c66:	88ba      	ldrh	r2, [r7, #4]
 8004c68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d20a      	bcs.n	8004c86 <hidd_open+0x4e>
 8004c70:	4b62      	ldr	r3, [pc, #392]	@ (8004dfc <hidd_open+0x1c4>)
 8004c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d000      	beq.n	8004c82 <hidd_open+0x4a>
 8004c80:	be00      	bkpt	0x0000
 8004c82:	2300      	movs	r3, #0
 8004c84:	e0b5      	b.n	8004df2 <hidd_open+0x1ba>

  // Find available interface
  hidd_interface_t *p_hid;
  uint8_t hid_id;
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8004c86:	2300      	movs	r3, #0
 8004c88:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c8c:	e011      	b.n	8004cb2 <hidd_open+0x7a>
    p_hid = &_hidd_itf[hid_id];
 8004c8e:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8004c92:	4613      	mov	r3, r2
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	4413      	add	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4a59      	ldr	r2, [pc, #356]	@ (8004e00 <hidd_open+0x1c8>)
 8004c9c:	4413      	add	r3, r2
 8004c9e:	647b      	str	r3, [r7, #68]	@ 0x44
    if (p_hid->ep_in == 0) {
 8004ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ca2:	785b      	ldrb	r3, [r3, #1]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d009      	beq.n	8004cbc <hidd_open+0x84>
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8004ca8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004cac:	3301      	adds	r3, #1
 8004cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cb2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0e9      	beq.n	8004c8e <hidd_open+0x56>
 8004cba:	e000      	b.n	8004cbe <hidd_open+0x86>
      break;
 8004cbc:	bf00      	nop
    }
  }
  TU_ASSERT(hid_id < CFG_TUD_HID, 0);
 8004cbe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <hidd_open+0xa4>
 8004cc6:	4b4d      	ldr	r3, [pc, #308]	@ (8004dfc <hidd_open+0x1c4>)
 8004cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d000      	beq.n	8004cd8 <hidd_open+0xa0>
 8004cd6:	be00      	bkpt	0x0000
 8004cd8:	2300      	movs	r3, #0
 8004cda:	e08a      	b.n	8004df2 <hidd_open+0x1ba>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_id];
 8004cdc:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	4413      	add	r3, r2
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	4a46      	ldr	r2, [pc, #280]	@ (8004e04 <hidd_open+0x1cc>)
 8004cea:	4413      	add	r3, r2
 8004cec:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint8_t const *p_desc = (uint8_t const *)desc_itf;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf4:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8004d04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d08:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 8004d10:	2b21      	cmp	r3, #33	@ 0x21
 8004d12:	d00a      	beq.n	8004d2a <hidd_open+0xf2>
 8004d14:	4b39      	ldr	r3, [pc, #228]	@ (8004dfc <hidd_open+0x1c4>)
 8004d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d000      	beq.n	8004d26 <hidd_open+0xee>
 8004d24:	be00      	bkpt	0x0000
 8004d26:	2300      	movs	r3, #0
 8004d28:	e063      	b.n	8004df2 <hidd_open+0x1ba>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *)p_desc;
 8004d2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d2e:	609a      	str	r2, [r3, #8]
 8004d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d32:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8004d42:	63bb      	str	r3, [r7, #56]	@ 0x38
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	7919      	ldrb	r1, [r3, #4]
 8004d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d4a:	3302      	adds	r3, #2
 8004d4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d4e:	3201      	adds	r2, #1
 8004d50:	79f8      	ldrb	r0, [r7, #7]
 8004d52:	9201      	str	r2, [sp, #4]
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	2303      	movs	r3, #3
 8004d58:	460a      	mov	r2, r1
 8004d5a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d5c:	f002 fbd6 	bl	800750c <usbd_open_edpt_pair>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f083 0301 	eor.w	r3, r3, #1
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <hidd_open+0x14a>
 8004d6c:	4b23      	ldr	r3, [pc, #140]	@ (8004dfc <hidd_open+0x1c4>)
 8004d6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d000      	beq.n	8004d7e <hidd_open+0x146>
 8004d7c:	be00      	bkpt	0x0000
 8004d7e:	2300      	movs	r3, #0
 8004d80:	e037      	b.n	8004df2 <hidd_open+0x1ba>

  if (desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT) {
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	799b      	ldrb	r3, [r3, #6]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d103      	bne.n	8004d92 <hidd_open+0x15a>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	79da      	ldrb	r2, [r3, #7]
 8004d8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d90:	70da      	strb	r2, [r3, #3]
  }

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 8004d92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d94:	2201      	movs	r2, #1
 8004d96:	719a      	strb	r2, [r3, #6]
  p_hid->itf_num = desc_itf->bInterfaceNumber;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	789a      	ldrb	r2, [r3, #2]
 8004d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d9e:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const *)p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 8004da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	3307      	adds	r3, #7
 8004da6:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	881a      	ldrh	r2, [r3, #0]
 8004dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dae:	809a      	strh	r2, [r3, #4]

  // Prepare for output endpoint
  if (p_hid->ep_out) {
 8004db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004db2:	789b      	ldrb	r3, [r3, #2]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01a      	beq.n	8004dee <hidd_open+0x1b6>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE), drv_len);
 8004db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dba:	7899      	ldrb	r1, [r3, #2]
 8004dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dbe:	f103 0220 	add.w	r2, r3, #32
 8004dc2:	79f8      	ldrb	r0, [r7, #7]
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	f002 fc9f 	bl	8007708 <usbd_edpt_xfer>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	f083 0301 	eor.w	r3, r3, #1
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00b      	beq.n	8004dee <hidd_open+0x1b6>
 8004dd6:	4b09      	ldr	r3, [pc, #36]	@ (8004dfc <hidd_open+0x1c4>)
 8004dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d000      	beq.n	8004de8 <hidd_open+0x1b0>
 8004de6:	be00      	bkpt	0x0000
 8004de8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004dec:	e001      	b.n	8004df2 <hidd_open+0x1ba>
  }

  return drv_len;
 8004dee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3748      	adds	r7, #72	@ 0x48
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	e000edf0 	.word	0xe000edf0
 8004e00:	20000a8c 	.word	0x20000a8c
 8004e04:	20000a98 	.word	0x20000a98

08004e08 <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b094      	sub	sp, #80	@ 0x50
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	4603      	mov	r3, r0
 8004e10:	603a      	str	r2, [r7, #0]
 8004e12:	71fb      	strb	r3, [r7, #7]
 8004e14:	460b      	mov	r3, r1
 8004e16:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	f003 031f 	and.w	r3, r3, #31
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d001      	beq.n	8004e2a <hidd_control_xfer_cb+0x22>
 8004e26:	2300      	movs	r3, #0
 8004e28:	e1d6      	b.n	80051d8 <hidd_control_xfer_cb+0x3d0>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	889b      	ldrh	r3, [r3, #4]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8004e34:	2300      	movs	r3, #0
 8004e36:	77bb      	strb	r3, [r7, #30]
 8004e38:	e00f      	b.n	8004e5a <hidd_control_xfer_cb+0x52>
    if (itf_num == _hidd_itf[i].itf_num) {
 8004e3a:	7fba      	ldrb	r2, [r7, #30]
 8004e3c:	498f      	ldr	r1, [pc, #572]	@ (800507c <hidd_control_xfer_cb+0x274>)
 8004e3e:	4613      	mov	r3, r2
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	7ffa      	ldrb	r2, [r7, #31]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d101      	bne.n	8004e54 <hidd_control_xfer_cb+0x4c>
      return i;
 8004e50:	7fbb      	ldrb	r3, [r7, #30]
 8004e52:	e006      	b.n	8004e62 <hidd_control_xfer_cb+0x5a>
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8004e54:	7fbb      	ldrb	r3, [r7, #30]
 8004e56:	3301      	adds	r3, #1
 8004e58:	77bb      	strb	r3, [r7, #30]
 8004e5a:	7fbb      	ldrb	r3, [r7, #30]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0ec      	beq.n	8004e3a <hidd_control_xfer_cb+0x32>
  return 0xFF;
 8004e60:	23ff      	movs	r3, #255	@ 0xff
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 8004e62:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 8004e66:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <hidd_control_xfer_cb+0x6a>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e1b2      	b.n	80051d8 <hidd_control_xfer_cb+0x3d0>
  hidd_interface_t *p_hid = &_hidd_itf[hid_itf];
 8004e72:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004e76:	4613      	mov	r3, r2
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4a7f      	ldr	r2, [pc, #508]	@ (800507c <hidd_control_xfer_cb+0x274>)
 8004e80:	4413      	add	r3, r2
 8004e82:	637b      	str	r3, [r7, #52]	@ 0x34
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_itf];
 8004e84:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004e88:	4613      	mov	r3, r2
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	4413      	add	r3, r2
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	4a7b      	ldr	r2, [pc, #492]	@ (8005080 <hidd_control_xfer_cb+0x278>)
 8004e92:	4413      	add	r3, r2
 8004e94:	633b      	str	r3, [r7, #48]	@ 0x30

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) {
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d145      	bne.n	8004f30 <hidd_control_xfer_cb+0x128>
    //------------- STD Request -------------//
    if (stage == CONTROL_STAGE_SETUP) {
 8004ea4:	79bb      	ldrb	r3, [r7, #6]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	f040 8195 	bne.w	80051d6 <hidd_control_xfer_cb+0x3ce>
      uint8_t const desc_type = tu_u16_high(request->wValue);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	885b      	ldrh	r3, [r3, #2]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8004eb4:	8bbb      	ldrh	r3, [r7, #28]
 8004eb6:	0a1b      	lsrs	r3, r3, #8
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID) {
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	785b      	ldrb	r3, [r3, #1]
 8004ec4:	2b06      	cmp	r3, #6
 8004ec6:	d11b      	bne.n	8004f00 <hidd_control_xfer_cb+0xf8>
 8004ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ecc:	2b21      	cmp	r3, #33	@ 0x21
 8004ece:	d117      	bne.n	8004f00 <hidd_control_xfer_cb+0xf8>
        TU_VERIFY(p_hid->hid_descriptor);
 8004ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <hidd_control_xfer_cb+0xd4>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e17d      	b.n	80051d8 <hidd_control_xfer_cb+0x3d0>
        TU_VERIFY(tud_control_xfer(rhport, request, (void *)(uintptr_t)p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 8004edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	79f8      	ldrb	r0, [r7, #7]
 8004ee8:	6839      	ldr	r1, [r7, #0]
 8004eea:	f002 fdf5 	bl	8007ad8 <tud_control_xfer>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	f083 0301 	eor.w	r3, r3, #1
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 816d 	beq.w	80051d6 <hidd_control_xfer_cb+0x3ce>
 8004efc:	2300      	movs	r3, #0
 8004efe:	e16b      	b.n	80051d8 <hidd_control_xfer_cb+0x3d0>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	785b      	ldrb	r3, [r3, #1]
 8004f04:	2b06      	cmp	r3, #6
 8004f06:	d111      	bne.n	8004f2c <hidd_control_xfer_cb+0x124>
 8004f08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f0c:	2b22      	cmp	r3, #34	@ 0x22
 8004f0e:	d10d      	bne.n	8004f2c <hidd_control_xfer_cb+0x124>
        uint8_t const *desc_report = tud_hid_descriptor_report_cb(hid_itf);
 8004f10:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fc ff0f 	bl	8001d38 <tud_hid_descriptor_report_cb>
 8004f1a:	6238      	str	r0, [r7, #32]
        tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_report, p_hid->report_desc_len);
 8004f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f1e:	889b      	ldrh	r3, [r3, #4]
 8004f20:	79f8      	ldrb	r0, [r7, #7]
 8004f22:	6a3a      	ldr	r2, [r7, #32]
 8004f24:	6839      	ldr	r1, [r7, #0]
 8004f26:	f002 fdd7 	bl	8007ad8 <tud_control_xfer>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8004f2a:	e154      	b.n	80051d6 <hidd_control_xfer_cb+0x3ce>
      } else {
        return false; // stall unsupported request
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e153      	b.n	80051d8 <hidd_control_xfer_cb+0x3d0>
      }
    }
  } else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS) {
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	f040 813e 	bne.w	80051bc <hidd_control_xfer_cb+0x3b4>
    //------------- Class Specific Request -------------//
    switch (request->bRequest) {
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	785b      	ldrb	r3, [r3, #1]
 8004f44:	3b01      	subs	r3, #1
 8004f46:	2b0a      	cmp	r3, #10
 8004f48:	f200 8136 	bhi.w	80051b8 <hidd_control_xfer_cb+0x3b0>
 8004f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f54 <hidd_control_xfer_cb+0x14c>)
 8004f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f52:	bf00      	nop
 8004f54:	08004f81 	.word	0x08004f81
 8004f58:	08005157 	.word	0x08005157
 8004f5c:	0800516d 	.word	0x0800516d
 8004f60:	080051b9 	.word	0x080051b9
 8004f64:	080051b9 	.word	0x080051b9
 8004f68:	080051b9 	.word	0x080051b9
 8004f6c:	080051b9 	.word	0x080051b9
 8004f70:	080051b9 	.word	0x080051b9
 8004f74:	08005057 	.word	0x08005057
 8004f78:	08005111 	.word	0x08005111
 8004f7c:	08005183 	.word	0x08005183
      case HID_REQ_CONTROL_GET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8004f80:	79bb      	ldrb	r3, [r7, #6]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	f040 811c 	bne.w	80051c0 <hidd_control_xfer_cb+0x3b8>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	885b      	ldrh	r3, [r3, #2]
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	82bb      	strh	r3, [r7, #20]
 8004f90:	8abb      	ldrh	r3, [r7, #20]
 8004f92:	0a1b      	lsrs	r3, r3, #8
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          uint8_t const report_id = tu_u16_low(request->wValue);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	885b      	ldrh	r3, [r3, #2]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8004fa4:	8afb      	ldrh	r3, [r7, #22]
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

          uint8_t* report_buf = p_epbuf->ctrl;
 8004fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fae:	647b      	str	r3, [r7, #68]	@ 0x44
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	88db      	ldrh	r3, [r3, #6]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	837b      	strh	r3, [r7, #26]
 8004fb8:	2310      	movs	r3, #16
 8004fba:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8004fbc:	8b7a      	ldrh	r2, [r7, #26]
 8004fbe:	8b3b      	ldrh	r3, [r7, #24]
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	bf28      	it	cs
 8004fc4:	4613      	movcs	r3, r2
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          uint16_t xferlen = 0;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ((report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1)) {
 8004fd2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d013      	beq.n	8005002 <hidd_control_xfer_cb+0x1fa>
 8004fda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d90f      	bls.n	8005002 <hidd_control_xfer_cb+0x1fa>
            *report_buf++ = report_id;
 8004fe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004fe8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004fec:	701a      	strb	r2, [r3, #0]
            req_len--;
 8004fee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            xferlen++;
 8004ff8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 8005002:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8005006:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 800500a:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 800500e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005016:	f7fc ff09 	bl	8001e2c <tud_hid_get_report_cb>
 800501a:	4603      	mov	r3, r0
 800501c:	461a      	mov	r2, r3
 800501e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005022:	4413      	add	r3, r2
 8005024:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          TU_ASSERT(xferlen > 0);
 8005028:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10a      	bne.n	8005046 <hidd_control_xfer_cb+0x23e>
 8005030:	4b14      	ldr	r3, [pc, #80]	@ (8005084 <hidd_control_xfer_cb+0x27c>)
 8005032:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d000      	beq.n	8005042 <hidd_control_xfer_cb+0x23a>
 8005040:	be00      	bkpt	0x0000
 8005042:	2300      	movs	r3, #0
 8005044:	e0c8      	b.n	80051d8 <hidd_control_xfer_cb+0x3d0>

          tud_control_xfer(rhport, request, p_epbuf->ctrl, xferlen);
 8005046:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005048:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800504c:	79f8      	ldrb	r0, [r7, #7]
 800504e:	6839      	ldr	r1, [r7, #0]
 8005050:	f002 fd42 	bl	8007ad8 <tud_control_xfer>
        }
        break;
 8005054:	e0b4      	b.n	80051c0 <hidd_control_xfer_cb+0x3b8>

      case HID_REQ_CONTROL_SET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8005056:	79bb      	ldrb	r3, [r7, #6]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d115      	bne.n	8005088 <hidd_control_xfer_cb+0x280>
          TU_VERIFY(request->wLength <= CFG_TUD_HID_EP_BUFSIZE);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	88db      	ldrh	r3, [r3, #6]
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b10      	cmp	r3, #16
 8005064:	d901      	bls.n	800506a <hidd_control_xfer_cb+0x262>
 8005066:	2300      	movs	r3, #0
 8005068:	e0b6      	b.n	80051d8 <hidd_control_xfer_cb+0x3d0>
          tud_control_xfer(rhport, request, p_epbuf->ctrl, request->wLength);
 800506a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	88db      	ldrh	r3, [r3, #6]
 8005070:	b29b      	uxth	r3, r3
 8005072:	79f8      	ldrb	r0, [r7, #7]
 8005074:	6839      	ldr	r1, [r7, #0]
 8005076:	f002 fd2f 	bl	8007ad8 <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
        break;
 800507a:	e0a3      	b.n	80051c4 <hidd_control_xfer_cb+0x3bc>
 800507c:	20000a8c 	.word	0x20000a8c
 8005080:	20000a98 	.word	0x20000a98
 8005084:	e000edf0 	.word	0xe000edf0
        } else if (stage == CONTROL_STAGE_ACK) {
 8005088:	79bb      	ldrb	r3, [r7, #6]
 800508a:	2b03      	cmp	r3, #3
 800508c:	f040 809a 	bne.w	80051c4 <hidd_control_xfer_cb+0x3bc>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	885b      	ldrh	r3, [r3, #2]
 8005094:	b29b      	uxth	r3, r3
 8005096:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8005098:	89bb      	ldrh	r3, [r7, #12]
 800509a:	0a1b      	lsrs	r3, r3, #8
 800509c:	b29b      	uxth	r3, r3
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          uint8_t const report_id = tu_u16_low(request->wValue);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	885b      	ldrh	r3, [r3, #2]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80050ac:	89fb      	ldrh	r3, [r7, #14]
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          uint8_t const* report_buf = p_epbuf->ctrl;
 80050b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	88db      	ldrh	r3, [r3, #6]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	827b      	strh	r3, [r7, #18]
 80050c0:	2310      	movs	r3, #16
 80050c2:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80050c4:	8a7a      	ldrh	r2, [r7, #18]
 80050c6:	8a3b      	ldrh	r3, [r7, #16]
 80050c8:	4293      	cmp	r3, r2
 80050ca:	bf28      	it	cs
 80050cc:	4613      	movcs	r3, r2
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	877b      	strh	r3, [r7, #58]	@ 0x3a
          if ((report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0])) {
 80050d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00e      	beq.n	80050f8 <hidd_control_xfer_cb+0x2f0>
 80050da:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d90b      	bls.n	80050f8 <hidd_control_xfer_cb+0x2f0>
 80050e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d105      	bne.n	80050f8 <hidd_control_xfer_cb+0x2f0>
            report_buf++;
 80050ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ee:	3301      	adds	r3, #1
 80050f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            report_len--;
 80050f2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80050f4:	3b01      	subs	r3, #1
 80050f6:	877b      	strh	r3, [r7, #58]	@ 0x3a
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 80050f8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80050fc:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8005100:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8005104:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800510a:	f7fc fea9 	bl	8001e60 <tud_hid_set_report_cb>
        break;
 800510e:	e059      	b.n	80051c4 <hidd_control_xfer_cb+0x3bc>

      case HID_REQ_CONTROL_SET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8005110:	79bb      	ldrb	r3, [r7, #6]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d158      	bne.n	80051c8 <hidd_control_xfer_cb+0x3c0>
          p_hid->idle_rate = tu_u16_high(request->wValue);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	885b      	ldrh	r3, [r3, #2]
 800511a:	b29b      	uxth	r3, r3
 800511c:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 800511e:	897b      	ldrh	r3, [r7, #10]
 8005120:	0a1b      	lsrs	r3, r3, #8
 8005122:	b29b      	uxth	r3, r3
 8005124:	b2da      	uxtb	r2, r3
 8005126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005128:	71da      	strb	r2, [r3, #7]
          TU_VERIFY(tud_hid_set_idle_cb(hid_itf, p_hid->idle_rate)); // stall if false
 800512a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800512c:	79da      	ldrb	r2, [r3, #7]
 800512e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005132:	4611      	mov	r1, r2
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff fc4b 	bl	80049d0 <tud_hid_set_idle_cb>
 800513a:	4603      	mov	r3, r0
 800513c:	f083 0301 	eor.w	r3, r3, #1
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <hidd_control_xfer_cb+0x342>
 8005146:	2300      	movs	r3, #0
 8005148:	e046      	b.n	80051d8 <hidd_control_xfer_cb+0x3d0>
          tud_control_status(rhport, request);
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	6839      	ldr	r1, [r7, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f002 fc50 	bl	80079f4 <tud_control_status>
        }
        break;
 8005154:	e038      	b.n	80051c8 <hidd_control_xfer_cb+0x3c0>

      case HID_REQ_CONTROL_GET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8005156:	79bb      	ldrb	r3, [r7, #6]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d137      	bne.n	80051cc <hidd_control_xfer_cb+0x3c4>
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 800515c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800515e:	1dda      	adds	r2, r3, #7
 8005160:	79f8      	ldrb	r0, [r7, #7]
 8005162:	2301      	movs	r3, #1
 8005164:	6839      	ldr	r1, [r7, #0]
 8005166:	f002 fcb7 	bl	8007ad8 <tud_control_xfer>
        }
        break;
 800516a:	e02f      	b.n	80051cc <hidd_control_xfer_cb+0x3c4>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 800516c:	79bb      	ldrb	r3, [r7, #6]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d12e      	bne.n	80051d0 <hidd_control_xfer_cb+0x3c8>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 8005172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005174:	1d9a      	adds	r2, r3, #6
 8005176:	79f8      	ldrb	r0, [r7, #7]
 8005178:	2301      	movs	r3, #1
 800517a:	6839      	ldr	r1, [r7, #0]
 800517c:	f002 fcac 	bl	8007ad8 <tud_control_xfer>
        }
        break;
 8005180:	e026      	b.n	80051d0 <hidd_control_xfer_cb+0x3c8>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8005182:	79bb      	ldrb	r3, [r7, #6]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d105      	bne.n	8005194 <hidd_control_xfer_cb+0x38c>
          tud_control_status(rhport, request);
 8005188:	79fb      	ldrb	r3, [r7, #7]
 800518a:	6839      	ldr	r1, [r7, #0]
 800518c:	4618      	mov	r0, r3
 800518e:	f002 fc31 	bl	80079f4 <tud_control_status>
        } else if (stage == CONTROL_STAGE_ACK) {
          p_hid->protocol_mode = (uint8_t) request->wValue;
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
        }
        break;
 8005192:	e01f      	b.n	80051d4 <hidd_control_xfer_cb+0x3cc>
        } else if (stage == CONTROL_STAGE_ACK) {
 8005194:	79bb      	ldrb	r3, [r7, #6]
 8005196:	2b03      	cmp	r3, #3
 8005198:	d11c      	bne.n	80051d4 <hidd_control_xfer_cb+0x3cc>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	885b      	ldrh	r3, [r3, #2]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a4:	719a      	strb	r2, [r3, #6]
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 80051a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a8:	799a      	ldrb	r2, [r3, #6]
 80051aa:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80051ae:	4611      	mov	r1, r2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fb fb63 	bl	800087c <tud_hid_set_protocol_cb>
        break;
 80051b6:	e00d      	b.n	80051d4 <hidd_control_xfer_cb+0x3cc>

      default:
        return false; // stall unsupported request
 80051b8:	2300      	movs	r3, #0
 80051ba:	e00d      	b.n	80051d8 <hidd_control_xfer_cb+0x3d0>
    }
  } else {
    return false; // stall unsupported request
 80051bc:	2300      	movs	r3, #0
 80051be:	e00b      	b.n	80051d8 <hidd_control_xfer_cb+0x3d0>
        break;
 80051c0:	bf00      	nop
 80051c2:	e008      	b.n	80051d6 <hidd_control_xfer_cb+0x3ce>
        break;
 80051c4:	bf00      	nop
 80051c6:	e006      	b.n	80051d6 <hidd_control_xfer_cb+0x3ce>
        break;
 80051c8:	bf00      	nop
 80051ca:	e004      	b.n	80051d6 <hidd_control_xfer_cb+0x3ce>
        break;
 80051cc:	bf00      	nop
 80051ce:	e002      	b.n	80051d6 <hidd_control_xfer_cb+0x3ce>
        break;
 80051d0:	bf00      	nop
 80051d2:	e000      	b.n	80051d6 <hidd_control_xfer_cb+0x3ce>
        break;
 80051d4:	bf00      	nop
  }

  return true;
 80051d6:	2301      	movs	r3, #1
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3748      	adds	r7, #72	@ 0x48
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08a      	sub	sp, #40	@ 0x28
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	603b      	str	r3, [r7, #0]
 80051e8:	4603      	mov	r3, r0
 80051ea:	71fb      	strb	r3, [r7, #7]
 80051ec:	460b      	mov	r3, r1
 80051ee:	71bb      	strb	r3, [r7, #6]
 80051f0:	4613      	mov	r3, r2
 80051f2:	717b      	strb	r3, [r7, #5]
  uint8_t instance;
  hidd_interface_t *p_hid;

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 80051f4:	2300      	movs	r3, #0
 80051f6:	77fb      	strb	r3, [r7, #31]
 80051f8:	e014      	b.n	8005224 <hidd_xfer_cb+0x44>
    p_hid = &_hidd_itf[instance];
 80051fa:	7ffa      	ldrb	r2, [r7, #31]
 80051fc:	4613      	mov	r3, r2
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	4413      	add	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4a3e      	ldr	r2, [pc, #248]	@ (8005300 <hidd_xfer_cb+0x120>)
 8005206:	4413      	add	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in)) {
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	789b      	ldrb	r3, [r3, #2]
 800520e:	79ba      	ldrb	r2, [r7, #6]
 8005210:	429a      	cmp	r2, r3
 8005212:	d00a      	beq.n	800522a <hidd_xfer_cb+0x4a>
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	785b      	ldrb	r3, [r3, #1]
 8005218:	79ba      	ldrb	r2, [r7, #6]
 800521a:	429a      	cmp	r2, r3
 800521c:	d005      	beq.n	800522a <hidd_xfer_cb+0x4a>
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 800521e:	7ffb      	ldrb	r3, [r7, #31]
 8005220:	3301      	adds	r3, #1
 8005222:	77fb      	strb	r3, [r7, #31]
 8005224:	7ffb      	ldrb	r3, [r7, #31]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0e7      	beq.n	80051fa <hidd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 800522a:	7ffb      	ldrb	r3, [r7, #31]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00a      	beq.n	8005246 <hidd_xfer_cb+0x66>
 8005230:	4b34      	ldr	r3, [pc, #208]	@ (8005304 <hidd_xfer_cb+0x124>)
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d000      	beq.n	8005242 <hidd_xfer_cb+0x62>
 8005240:	be00      	bkpt	0x0000
 8005242:	2300      	movs	r3, #0
 8005244:	e057      	b.n	80052f6 <hidd_xfer_cb+0x116>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8005246:	7ffa      	ldrb	r2, [r7, #31]
 8005248:	4613      	mov	r3, r2
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	4413      	add	r3, r2
 800524e:	011b      	lsls	r3, r3, #4
 8005250:	4a2d      	ldr	r2, [pc, #180]	@ (8005308 <hidd_xfer_cb+0x128>)
 8005252:	4413      	add	r3, r2
 8005254:	617b      	str	r3, [r7, #20]

  if (ep_addr == p_hid->ep_in) {
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	785b      	ldrb	r3, [r3, #1]
 800525a:	79ba      	ldrb	r2, [r7, #6]
 800525c:	429a      	cmp	r2, r3
 800525e:	d116      	bne.n	800528e <hidd_xfer_cb+0xae>
    // Input report
    if (XFER_RESULT_SUCCESS == result) {
 8005260:	797b      	ldrb	r3, [r7, #5]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <hidd_xfer_cb+0x9a>
      tud_hid_report_complete_cb(instance, p_epbuf->epin, (uint16_t) xferred_bytes);
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f103 0110 	add.w	r1, r3, #16
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	b29a      	uxth	r2, r3
 8005270:	7ffb      	ldrb	r3, [r7, #31]
 8005272:	4618      	mov	r0, r3
 8005274:	f7fb fb10 	bl	8000898 <tud_hid_report_complete_cb>
 8005278:	e03c      	b.n	80052f4 <hidd_xfer_cb+0x114>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_INPUT, p_epbuf->epin, (uint16_t) xferred_bytes);
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f103 0210 	add.w	r2, r3, #16
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	b29b      	uxth	r3, r3
 8005284:	7ff8      	ldrb	r0, [r7, #31]
 8005286:	2101      	movs	r1, #1
 8005288:	f7ff fbb1 	bl	80049ee <tud_hid_report_failed_cb>
 800528c:	e032      	b.n	80052f4 <hidd_xfer_cb+0x114>
    }
  } else {
    // Output report
    if (XFER_RESULT_SUCCESS == result) {
 800528e:	797b      	ldrb	r3, [r7, #5]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10c      	bne.n	80052ae <hidd_xfer_cb+0xce>
      tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t)xferred_bytes);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f103 0220 	add.w	r2, r3, #32
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	b29b      	uxth	r3, r3
 800529e:	7ff8      	ldrb	r0, [r7, #31]
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	4613      	mov	r3, r2
 80052a4:	2202      	movs	r2, #2
 80052a6:	2100      	movs	r1, #0
 80052a8:	f7fc fdda 	bl	8001e60 <tud_hid_set_report_cb>
 80052ac:	e008      	b.n	80052c0 <hidd_xfer_cb+0xe0>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t) xferred_bytes);
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f103 0220 	add.w	r2, r3, #32
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	7ff8      	ldrb	r0, [r7, #31]
 80052ba:	2102      	movs	r1, #2
 80052bc:	f7ff fb97 	bl	80049ee <tud_hid_report_failed_cb>
    }

    // prepare for new transfer
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE));
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	7899      	ldrb	r1, [r3, #2]
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f103 0220 	add.w	r2, r3, #32
 80052ca:	79f8      	ldrb	r0, [r7, #7]
 80052cc:	2310      	movs	r3, #16
 80052ce:	f002 fa1b 	bl	8007708 <usbd_edpt_xfer>
 80052d2:	4603      	mov	r3, r0
 80052d4:	f083 0301 	eor.w	r3, r3, #1
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <hidd_xfer_cb+0x114>
 80052de:	4b09      	ldr	r3, [pc, #36]	@ (8005304 <hidd_xfer_cb+0x124>)
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d000      	beq.n	80052f0 <hidd_xfer_cb+0x110>
 80052ee:	be00      	bkpt	0x0000
 80052f0:	2300      	movs	r3, #0
 80052f2:	e000      	b.n	80052f6 <hidd_xfer_cb+0x116>
  }

  return true;
 80052f4:	2301      	movs	r3, #1
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3720      	adds	r7, #32
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	20000a8c 	.word	0x20000a8c
 8005304:	e000edf0 	.word	0xe000edf0
 8005308:	20000a98 	.word	0x20000a98

0800530c <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	4611      	mov	r1, r2
 8005318:	461a      	mov	r2, r3
 800531a:	460b      	mov	r3, r1
 800531c:	80fb      	strh	r3, [r7, #6]
 800531e:	4613      	mov	r3, r2
 8005320:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8005322:	88fb      	ldrh	r3, [r7, #6]
 8005324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005328:	d901      	bls.n	800532e <tu_fifo_config+0x22>
 800532a:	2300      	movs	r3, #0
 800532c:	e01b      	b.n	8005366 <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	88fa      	ldrh	r2, [r7, #6]
 8005338:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800533a:	88bb      	ldrh	r3, [r7, #4]
 800533c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005340:	b299      	uxth	r1, r3
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	88d3      	ldrh	r3, [r2, #6]
 8005346:	f361 030e 	bfi	r3, r1, #0, #15
 800534a:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	79d3      	ldrb	r3, [r2, #7]
 8005350:	7e39      	ldrb	r1, [r7, #24]
 8005352:	f361 13c7 	bfi	r3, r1, #7, #1
 8005356:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8005364:	2301      	movs	r3, #1
}
 8005366:	4618      	mov	r0, r3
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b08a      	sub	sp, #40	@ 0x28
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	4613      	mov	r3, r2
 800537e:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8005384:	88fb      	ldrh	r3, [r7, #6]
 8005386:	089b      	lsrs	r3, r3, #2
 8005388:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 800538a:	e00b      	b.n	80053a4 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	61ba      	str	r2, [r7, #24]
 8005394:	617b      	str	r3, [r7, #20]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	601a      	str	r2, [r3, #0]
}
 800539c:	bf00      	nop
    ff_buf += 4;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3304      	adds	r3, #4
 80053a2:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 80053a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80053a6:	1e5a      	subs	r2, r3, #1
 80053a8:	84fa      	strh	r2, [r7, #38]	@ 0x26
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1ee      	bne.n	800538c <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 80053ae:	88fb      	ldrh	r3, [r7, #6]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80053b8:	7ffb      	ldrb	r3, [r7, #31]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 80053c4:	7ffa      	ldrb	r2, [r7, #31]
 80053c6:	f107 0310 	add.w	r3, r7, #16
 80053ca:	4619      	mov	r1, r3
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f005 f82a 	bl	800a426 <memcpy>
  }
}
 80053d2:	bf00      	nop
 80053d4:	3728      	adds	r7, #40	@ 0x28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b08a      	sub	sp, #40	@ 0x28
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	4613      	mov	r3, r2
 80053e6:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 80053ec:	88fb      	ldrh	r3, [r7, #6]
 80053ee:	089b      	lsrs	r3, r3, #2
 80053f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 80053f2:	e008      	b.n	8005406 <_ff_pull_const_addr+0x2c>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	3304      	adds	r3, #4
 8005404:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8005406:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005408:	1e5a      	subs	r2, r3, #1
 800540a:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1f1      	bne.n	80053f4 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8005410:	88fb      	ldrh	r3, [r7, #6]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	f003 0303 	and.w	r3, r3, #3
 8005418:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 800541a:	7ffb      	ldrb	r3, [r7, #31]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00b      	beq.n	8005438 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8005424:	7ffa      	ldrb	r2, [r7, #31]
 8005426:	f107 0314 	add.w	r3, r7, #20
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	4618      	mov	r0, r3
 800542e:	f004 fffa 	bl	800a426 <memcpy>

    *reg_tx = tmp32;
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	601a      	str	r2, [r3, #0]
  }
}
 8005438:	bf00      	nop
 800543a:	3728      	adds	r7, #40	@ 0x28
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	4613      	mov	r3, r2
 800544c:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	88fa      	ldrh	r2, [r7, #6]
 8005454:	68f9      	ldr	r1, [r7, #12]
 8005456:	88c9      	ldrh	r1, [r1, #6]
 8005458:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800545c:	b289      	uxth	r1, r1
 800545e:	fb01 f202 	mul.w	r2, r1, r2
 8005462:	1898      	adds	r0, r3, r2
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	88db      	ldrh	r3, [r3, #6]
 8005468:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800546c:	b29b      	uxth	r3, r3
 800546e:	461a      	mov	r2, r3
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	f004 ffd8 	bl	800a426 <memcpy>
}
 8005476:	bf00      	nop
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b08e      	sub	sp, #56	@ 0x38
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	4611      	mov	r1, r2
 800548a:	461a      	mov	r2, r3
 800548c:	460b      	mov	r3, r1
 800548e:	80fb      	strh	r3, [r7, #6]
 8005490:	4613      	mov	r3, r2
 8005492:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	889a      	ldrh	r2, [r3, #4]
 8005498:	88bb      	ldrh	r3, [r7, #4]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 800549e:	88fa      	ldrh	r2, [r7, #6]
 80054a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	88db      	ldrh	r3, [r3, #6]
 80054aa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	461a      	mov	r2, r3
 80054b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80054b4:	fb13 f302 	smulbb	r3, r3, r2
 80054b8:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	88db      	ldrh	r3, [r3, #6]
 80054be:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80054c8:	fb13 f302 	smulbb	r3, r3, r2
 80054cc:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	88ba      	ldrh	r2, [r7, #4]
 80054d4:	68f9      	ldr	r1, [r7, #12]
 80054d6:	88c9      	ldrh	r1, [r1, #6]
 80054d8:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80054dc:	b289      	uxth	r1, r1
 80054de:	fb01 f202 	mul.w	r2, r1, r2
 80054e2:	4413      	add	r3, r2
 80054e4:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 80054e6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <_ff_push_n+0x76>
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d022      	beq.n	8005538 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 80054f2:	e09e      	b.n	8005632 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 80054f4:	88fa      	ldrh	r2, [r7, #6]
 80054f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d80d      	bhi.n	8005518 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 80054fc:	88fb      	ldrh	r3, [r7, #6]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	88d2      	ldrh	r2, [r2, #6]
 8005502:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8005506:	b292      	uxth	r2, r2
 8005508:	fb02 f303 	mul.w	r3, r2, r3
 800550c:	461a      	mov	r2, r3
 800550e:	68b9      	ldr	r1, [r7, #8]
 8005510:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005512:	f004 ff88 	bl	800a426 <memcpy>
      break;
 8005516:	e08c      	b.n	8005632 <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8005518:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800551a:	461a      	mov	r2, r3
 800551c:	68b9      	ldr	r1, [r7, #8]
 800551e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005520:	f004 ff81 	bl	800a426 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6818      	ldr	r0, [r3, #0]
 8005528:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	4413      	add	r3, r2
 800552e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005530:	4619      	mov	r1, r3
 8005532:	f004 ff78 	bl	800a426 <memcpy>
      break;
 8005536:	e07c      	b.n	8005632 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8005538:	88fa      	ldrh	r2, [r7, #6]
 800553a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800553c:	429a      	cmp	r2, r3
 800553e:	d80f      	bhi.n	8005560 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	88db      	ldrh	r3, [r3, #6]
 8005544:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005548:	b29b      	uxth	r3, r3
 800554a:	461a      	mov	r2, r3
 800554c:	88fb      	ldrh	r3, [r7, #6]
 800554e:	fb13 f302 	smulbb	r3, r3, r2
 8005552:	b29b      	uxth	r3, r3
 8005554:	461a      	mov	r2, r3
 8005556:	68b9      	ldr	r1, [r7, #8]
 8005558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800555a:	f7ff ff0a 	bl	8005372 <_ff_push_const_addr>
      break;
 800555e:	e067      	b.n	8005630 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8005560:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005562:	f023 0303 	bic.w	r3, r3, #3
 8005566:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8005568:	8c3b      	ldrh	r3, [r7, #32]
 800556a:	461a      	mov	r2, r3
 800556c:	68b9      	ldr	r1, [r7, #8]
 800556e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005570:	f7ff feff 	bl	8005372 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8005574:	8c3b      	ldrh	r3, [r7, #32]
 8005576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005578:	4413      	add	r3, r2
 800557a:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 800557c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800557e:	b2db      	uxtb	r3, r3
 8005580:	f003 0303 	and.w	r3, r3, #3
 8005584:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8005588:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800558c:	2b00      	cmp	r3, #0
 800558e:	d043      	beq.n	8005618 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8005594:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005598:	b29b      	uxth	r3, r3
 800559a:	f1c3 0304 	rsb	r3, r3, #4
 800559e:	b29a      	uxth	r2, r3
 80055a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80055a2:	837b      	strh	r3, [r7, #26]
 80055a4:	4613      	mov	r3, r2
 80055a6:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80055a8:	8b7a      	ldrh	r2, [r7, #26]
 80055aa:	8b3b      	ldrh	r3, [r7, #24]
 80055ac:	4293      	cmp	r3, r2
 80055ae:	bf28      	it	cs
 80055b0:	4613      	movcs	r3, r2
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 80055b8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055bc:	b29b      	uxth	r3, r3
 80055be:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 80055ca:	f107 0314 	add.w	r3, r7, #20
 80055ce:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 80055d0:	e007      	b.n	80055e2 <_ff_push_n+0x164>
 80055d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055d4:	1c53      	adds	r3, r2, #1
 80055d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055da:	1c59      	adds	r1, r3, #1
 80055dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80055de:	7812      	ldrb	r2, [r2, #0]
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80055e6:	1e5a      	subs	r2, r3, #1
 80055e8:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1f0      	bne.n	80055d2 <_ff_push_n+0x154>
          ff_buf = f->buffer;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 80055f6:	e007      	b.n	8005608 <_ff_push_n+0x18a>
 80055f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055fa:	1c53      	adds	r3, r2, #1
 80055fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005600:	1c59      	adds	r1, r3, #1
 8005602:	6339      	str	r1, [r7, #48]	@ 0x30
 8005604:	7812      	ldrb	r2, [r2, #0]
 8005606:	701a      	strb	r2, [r3, #0]
 8005608:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800560c:	1e5a      	subs	r2, r3, #1
 800560e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1f0      	bne.n	80055f8 <_ff_push_n+0x17a>
 8005616:	e002      	b.n	800561e <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 800561e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <_ff_push_n+0x1b2>
 8005624:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005626:	461a      	mov	r2, r3
 8005628:	68b9      	ldr	r1, [r7, #8]
 800562a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800562c:	f7ff fea1 	bl	8005372 <_ff_push_const_addr>
      break;
 8005630:	bf00      	nop
  }
}
 8005632:	bf00      	nop
 8005634:	3738      	adds	r7, #56	@ 0x38
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	4613      	mov	r3, r2
 8005646:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	88fa      	ldrh	r2, [r7, #6]
 800564e:	68f9      	ldr	r1, [r7, #12]
 8005650:	88c9      	ldrh	r1, [r1, #6]
 8005652:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8005656:	b289      	uxth	r1, r1
 8005658:	fb01 f202 	mul.w	r2, r1, r2
 800565c:	1899      	adds	r1, r3, r2
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	88db      	ldrh	r3, [r3, #6]
 8005662:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005666:	b29b      	uxth	r3, r3
 8005668:	461a      	mov	r2, r3
 800566a:	68b8      	ldr	r0, [r7, #8]
 800566c:	f004 fedb 	bl	800a426 <memcpy>
}
 8005670:	bf00      	nop
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08e      	sub	sp, #56	@ 0x38
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	4611      	mov	r1, r2
 8005684:	461a      	mov	r2, r3
 8005686:	460b      	mov	r3, r1
 8005688:	80fb      	strh	r3, [r7, #6]
 800568a:	4613      	mov	r3, r2
 800568c:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	889a      	ldrh	r2, [r3, #4]
 8005692:	88bb      	ldrh	r3, [r7, #4]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8005698:	88fa      	ldrh	r2, [r7, #6]
 800569a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	88db      	ldrh	r3, [r3, #6]
 80056a4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	461a      	mov	r2, r3
 80056ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80056ae:	fb13 f302 	smulbb	r3, r3, r2
 80056b2:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	88db      	ldrh	r3, [r3, #6]
 80056b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80056bc:	b29b      	uxth	r3, r3
 80056be:	461a      	mov	r2, r3
 80056c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80056c2:	fb13 f302 	smulbb	r3, r3, r2
 80056c6:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	88ba      	ldrh	r2, [r7, #4]
 80056ce:	68f9      	ldr	r1, [r7, #12]
 80056d0:	88c9      	ldrh	r1, [r1, #6]
 80056d2:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80056d6:	b289      	uxth	r1, r1
 80056d8:	fb01 f202 	mul.w	r2, r1, r2
 80056dc:	4413      	add	r3, r2
 80056de:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 80056e0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <_ff_pull_n+0x76>
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d022      	beq.n	8005732 <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 80056ec:	e0a0      	b.n	8005830 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 80056ee:	88fa      	ldrh	r2, [r7, #6]
 80056f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d80d      	bhi.n	8005712 <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 80056f6:	88fb      	ldrh	r3, [r7, #6]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	88d2      	ldrh	r2, [r2, #6]
 80056fc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8005700:	b292      	uxth	r2, r2
 8005702:	fb02 f303 	mul.w	r3, r2, r3
 8005706:	461a      	mov	r2, r3
 8005708:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800570a:	68b8      	ldr	r0, [r7, #8]
 800570c:	f004 fe8b 	bl	800a426 <memcpy>
    break;
 8005710:	e08e      	b.n	8005830 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 8005712:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005714:	461a      	mov	r2, r3
 8005716:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005718:	68b8      	ldr	r0, [r7, #8]
 800571a:	f004 fe84 	bl	800a426 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 800571e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	18d0      	adds	r0, r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800572a:	4619      	mov	r1, r3
 800572c:	f004 fe7b 	bl	800a426 <memcpy>
    break;
 8005730:	e07e      	b.n	8005830 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8005732:	88fa      	ldrh	r2, [r7, #6]
 8005734:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005736:	429a      	cmp	r2, r3
 8005738:	d80f      	bhi.n	800575a <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	88db      	ldrh	r3, [r3, #6]
 800573e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005742:	b29b      	uxth	r3, r3
 8005744:	461a      	mov	r2, r3
 8005746:	88fb      	ldrh	r3, [r7, #6]
 8005748:	fb13 f302 	smulbb	r3, r3, r2
 800574c:	b29b      	uxth	r3, r3
 800574e:	461a      	mov	r2, r3
 8005750:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005752:	68b8      	ldr	r0, [r7, #8]
 8005754:	f7ff fe41 	bl	80053da <_ff_pull_const_addr>
    break;
 8005758:	e069      	b.n	800582e <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 800575a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800575c:	f023 0303 	bic.w	r3, r3, #3
 8005760:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 8005762:	8c3b      	ldrh	r3, [r7, #32]
 8005764:	461a      	mov	r2, r3
 8005766:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005768:	68b8      	ldr	r0, [r7, #8]
 800576a:	f7ff fe36 	bl	80053da <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 800576e:	8c3b      	ldrh	r3, [r7, #32]
 8005770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005772:	4413      	add	r3, r2
 8005774:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8005776:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005778:	b2db      	uxtb	r3, r3
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8005782:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005786:	2b00      	cmp	r3, #0
 8005788:	d045      	beq.n	8005816 <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800578e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005792:	b29b      	uxth	r3, r3
 8005794:	f1c3 0304 	rsb	r3, r3, #4
 8005798:	b29a      	uxth	r2, r3
 800579a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800579c:	837b      	strh	r3, [r7, #26]
 800579e:	4613      	mov	r3, r2
 80057a0:	833b      	strh	r3, [r7, #24]
 80057a2:	8b7a      	ldrh	r2, [r7, #26]
 80057a4:	8b3b      	ldrh	r3, [r7, #24]
 80057a6:	4293      	cmp	r3, r2
 80057a8:	bf28      	it	cs
 80057aa:	4613      	movcs	r3, r2
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 80057b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 80057c2:	f107 0314 	add.w	r3, r7, #20
 80057c6:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 80057c8:	e007      	b.n	80057da <_ff_pull_n+0x162>
 80057ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057cc:	1c53      	adds	r3, r2, #1
 80057ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80057d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d2:	1c59      	adds	r1, r3, #1
 80057d4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80057d6:	7812      	ldrb	r2, [r2, #0]
 80057d8:	701a      	strb	r2, [r3, #0]
 80057da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80057de:	1e5a      	subs	r2, r3, #1
 80057e0:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1f0      	bne.n	80057ca <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 80057ee:	e007      	b.n	8005800 <_ff_pull_n+0x188>
 80057f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057f2:	1c53      	adds	r3, r2, #1
 80057f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80057f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f8:	1c59      	adds	r1, r3, #1
 80057fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80057fc:	7812      	ldrb	r2, [r2, #0]
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005804:	1e5a      	subs	r2, r3, #1
 8005806:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f0      	bne.n	80057f0 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	e002      	b.n	800581c <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 800581c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800581e:	2b00      	cmp	r3, #0
 8005820:	d005      	beq.n	800582e <_ff_pull_n+0x1b6>
 8005822:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005824:	461a      	mov	r2, r3
 8005826:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005828:	68b8      	ldr	r0, [r7, #8]
 800582a:	f7ff fdd6 	bl	80053da <_ff_pull_const_addr>
    break;
 800582e:	bf00      	nop
  }
}
 8005830:	bf00      	nop
 8005832:	3738      	adds	r7, #56	@ 0x38
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	4603      	mov	r3, r0
 8005840:	80fb      	strh	r3, [r7, #6]
 8005842:	460b      	mov	r3, r1
 8005844:	80bb      	strh	r3, [r7, #4]
 8005846:	4613      	mov	r3, r2
 8005848:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 800584a:	88ba      	ldrh	r2, [r7, #4]
 800584c:	887b      	ldrh	r3, [r7, #2]
 800584e:	4413      	add	r3, r2
 8005850:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8005852:	88ba      	ldrh	r2, [r7, #4]
 8005854:	89fb      	ldrh	r3, [r7, #14]
 8005856:	429a      	cmp	r2, r3
 8005858:	d804      	bhi.n	8005864 <advance_index+0x2c>
 800585a:	89fa      	ldrh	r2, [r7, #14]
 800585c:	88fb      	ldrh	r3, [r7, #6]
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	429a      	cmp	r2, r3
 8005862:	db08      	blt.n	8005876 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8005864:	88fb      	ldrh	r3, [r7, #6]
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	b29b      	uxth	r3, r3
 800586a:	425b      	negs	r3, r3
 800586c:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800586e:	89fa      	ldrh	r2, [r7, #14]
 8005870:	89bb      	ldrh	r3, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8005876:	89fb      	ldrh	r3, [r7, #14]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08a      	sub	sp, #40	@ 0x28
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	4611      	mov	r1, r2
 8005890:	461a      	mov	r2, r3
 8005892:	460b      	mov	r3, r1
 8005894:	80fb      	strh	r3, [r7, #6]
 8005896:	4613      	mov	r3, r2
 8005898:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	889b      	ldrh	r3, [r3, #4]
 800589e:	847b      	strh	r3, [r7, #34]	@ 0x22
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	843b      	strh	r3, [r7, #32]
 80058a4:	88bb      	ldrh	r3, [r7, #4]
 80058a6:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80058a8:	8c3a      	ldrh	r2, [r7, #32]
 80058aa:	8bfb      	ldrh	r3, [r7, #30]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d304      	bcc.n	80058ba <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80058b0:	8c3a      	ldrh	r2, [r7, #32]
 80058b2:	8bfb      	ldrh	r3, [r7, #30]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	e008      	b.n	80058cc <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80058ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	b29a      	uxth	r2, r3
 80058c0:	8c39      	ldrh	r1, [r7, #32]
 80058c2:	8bfb      	ldrh	r3, [r7, #30]
 80058c4:	1acb      	subs	r3, r1, r3
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	4413      	add	r3, r2
 80058ca:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80058cc:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 80058ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <_tu_fifo_peek+0x54>
 80058d4:	2300      	movs	r3, #0
 80058d6:	e037      	b.n	8005948 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	889b      	ldrh	r3, [r3, #4]
 80058dc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80058de:	429a      	cmp	r2, r3
 80058e0:	d91b      	bls.n	800591a <_tu_fifo_peek+0x96>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	61bb      	str	r3, [r7, #24]
 80058e6:	88fb      	ldrh	r3, [r7, #6]
 80058e8:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	889b      	ldrh	r3, [r3, #4]
 80058ee:	8afa      	ldrh	r2, [r7, #22]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d305      	bcc.n	8005900 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	889b      	ldrh	r3, [r3, #4]
 80058f8:	8afa      	ldrh	r2, [r7, #22]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	82bb      	strh	r3, [r7, #20]
 80058fe:	e004      	b.n	800590a <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	889a      	ldrh	r2, [r3, #4]
 8005904:	8afb      	ldrh	r3, [r7, #22]
 8005906:	4413      	add	r3, r2
 8005908:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	8aba      	ldrh	r2, [r7, #20]
 800590e:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8005910:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8005912:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	889b      	ldrh	r3, [r3, #4]
 8005918:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	889b      	ldrh	r3, [r3, #4]
 800591e:	827b      	strh	r3, [r7, #18]
 8005920:	88bb      	ldrh	r3, [r7, #4]
 8005922:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8005924:	e003      	b.n	800592e <_tu_fifo_peek+0xaa>
 8005926:	8a3a      	ldrh	r2, [r7, #16]
 8005928:	8a7b      	ldrh	r3, [r7, #18]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	823b      	strh	r3, [r7, #16]
 800592e:	8a7a      	ldrh	r2, [r7, #18]
 8005930:	8a3b      	ldrh	r3, [r7, #16]
 8005932:	429a      	cmp	r2, r3
 8005934:	d9f7      	bls.n	8005926 <_tu_fifo_peek+0xa2>
  return idx;
 8005936:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8005938:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 800593a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800593c:	461a      	mov	r2, r3
 800593e:	68b9      	ldr	r1, [r7, #8]
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f7ff fe7a 	bl	800563a <_ff_pull>

  return true;
 8005946:	2301      	movs	r3, #1
}
 8005948:	4618      	mov	r0, r3
 800594a:	3728      	adds	r7, #40	@ 0x28
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b08c      	sub	sp, #48	@ 0x30
 8005954:	af02      	add	r7, sp, #8
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	4611      	mov	r1, r2
 800595c:	461a      	mov	r2, r3
 800595e:	460b      	mov	r3, r1
 8005960:	80fb      	strh	r3, [r7, #6]
 8005962:	4613      	mov	r3, r2
 8005964:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	889b      	ldrh	r3, [r3, #4]
 800596a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800596c:	88bb      	ldrh	r3, [r7, #4]
 800596e:	843b      	strh	r3, [r7, #32]
 8005970:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005972:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8005974:	8c3a      	ldrh	r2, [r7, #32]
 8005976:	8bfb      	ldrh	r3, [r7, #30]
 8005978:	429a      	cmp	r2, r3
 800597a:	d304      	bcc.n	8005986 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 800597c:	8c3a      	ldrh	r2, [r7, #32]
 800597e:	8bfb      	ldrh	r3, [r7, #30]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	b29b      	uxth	r3, r3
 8005984:	e008      	b.n	8005998 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8005986:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	8c39      	ldrh	r1, [r7, #32]
 800598e:	8bfb      	ldrh	r3, [r7, #30]
 8005990:	1acb      	subs	r3, r1, r3
 8005992:	b29b      	uxth	r3, r3
 8005994:	4413      	add	r3, r2
 8005996:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8005998:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 800599a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <_tu_fifo_peek_n+0x54>
 80059a0:	2300      	movs	r3, #0
 80059a2:	e041      	b.n	8005a28 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	889b      	ldrh	r3, [r3, #4]
 80059a8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d91b      	bls.n	80059e6 <_tu_fifo_peek_n+0x96>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	61bb      	str	r3, [r7, #24]
 80059b2:	88bb      	ldrh	r3, [r7, #4]
 80059b4:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	889b      	ldrh	r3, [r3, #4]
 80059ba:	8afa      	ldrh	r2, [r7, #22]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d305      	bcc.n	80059cc <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	889b      	ldrh	r3, [r3, #4]
 80059c4:	8afa      	ldrh	r2, [r7, #22]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	82bb      	strh	r3, [r7, #20]
 80059ca:	e004      	b.n	80059d6 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	889a      	ldrh	r2, [r3, #4]
 80059d0:	8afb      	ldrh	r3, [r7, #22]
 80059d2:	4413      	add	r3, r2
 80059d4:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	8aba      	ldrh	r2, [r7, #20]
 80059da:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 80059dc:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 80059de:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	889b      	ldrh	r3, [r3, #4]
 80059e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 80059e6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80059e8:	88fb      	ldrh	r3, [r7, #6]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d201      	bcs.n	80059f2 <_tu_fifo_peek_n+0xa2>
 80059ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80059f0:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	889b      	ldrh	r3, [r3, #4]
 80059f6:	827b      	strh	r3, [r7, #18]
 80059f8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80059fa:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80059fc:	e003      	b.n	8005a06 <_tu_fifo_peek_n+0xb6>
 80059fe:	8a3a      	ldrh	r2, [r7, #16]
 8005a00:	8a7b      	ldrh	r3, [r7, #18]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	823b      	strh	r3, [r7, #16]
 8005a06:	8a7a      	ldrh	r2, [r7, #18]
 8005a08:	8a3b      	ldrh	r3, [r7, #16]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d9f7      	bls.n	80059fe <_tu_fifo_peek_n+0xae>
  return idx;
 8005a0e:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8005a10:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8005a12:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8005a14:	88fa      	ldrh	r2, [r7, #6]
 8005a16:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	68b9      	ldr	r1, [r7, #8]
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f7ff fe29 	bl	8005678 <_ff_pull_n>

  return n;
 8005a26:	88fb      	ldrh	r3, [r7, #6]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3728      	adds	r7, #40	@ 0x28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b092      	sub	sp, #72	@ 0x48
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	460b      	mov	r3, r1
 8005a40:	80fb      	strh	r3, [r7, #6]
 8005a42:	4613      	mov	r3, r2
 8005a44:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8005a46:	88fb      	ldrh	r3, [r7, #6]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <_tu_fifo_write_n+0x20>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	e0bc      	b.n	8005bca <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	891b      	ldrh	r3, [r3, #8]
 8005a54:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	895b      	ldrh	r3, [r3, #10]
 8005a5a:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	79db      	ldrb	r3, [r3, #7]
 8005a64:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	f083 0301 	eor.w	r3, r3, #1
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d036      	beq.n	8005ae2 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	889b      	ldrh	r3, [r3, #4]
 8005a78:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005a7a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005a7c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005a7e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005a80:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005a82:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005a84:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005a86:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a88:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005a8a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a8c:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 8005a8e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005a90:	8c3b      	ldrh	r3, [r7, #32]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d304      	bcc.n	8005aa0 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 8005a96:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005a98:	8c3b      	ldrh	r3, [r7, #32]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	e008      	b.n	8005ab2 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8005aa0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8005aa8:	8c3b      	ldrh	r3, [r7, #32]
 8005aaa:	1acb      	subs	r3, r1, r3
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	4413      	add	r3, r2
 8005ab0:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8005ab2:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8005ab4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005ab6:	8bfb      	ldrh	r3, [r7, #30]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d904      	bls.n	8005ac6 <_tu_fifo_write_n+0x96>
 8005abc:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005abe:	8bfb      	ldrh	r3, [r7, #30]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	e000      	b.n	8005ac8 <_tu_fifo_write_n+0x98>
 8005ac6:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8005ac8:	867b      	strh	r3, [r7, #50]	@ 0x32
 8005aca:	88fb      	ldrh	r3, [r7, #6]
 8005acc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005ace:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005ad0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005ad2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005ad4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	bf28      	it	cs
 8005ada:	4613      	movcs	r3, r2
 8005adc:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 8005ade:	80fb      	strh	r3, [r7, #6]
 8005ae0:	e04b      	b.n	8005b7a <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	889b      	ldrh	r3, [r3, #4]
 8005ae6:	88fa      	ldrh	r2, [r7, #6]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d317      	bcc.n	8005b1c <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8005aec:	797b      	ldrb	r3, [r7, #5]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10e      	bne.n	8005b10 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8005af2:	88fb      	ldrh	r3, [r7, #6]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	8892      	ldrh	r2, [r2, #4]
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	88d2      	ldrh	r2, [r2, #6]
 8005afe:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8005b02:	b292      	uxth	r2, r2
 8005b04:	fb02 f303 	mul.w	r3, r2, r3
 8005b08:	461a      	mov	r2, r3
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b0c:	4413      	add	r3, r2
 8005b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	889b      	ldrh	r3, [r3, #4]
 8005b14:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8005b16:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b18:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005b1a:	e02e      	b.n	8005b7a <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	889b      	ldrh	r3, [r3, #4]
 8005b20:	83bb      	strh	r3, [r7, #28]
 8005b22:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005b24:	837b      	strh	r3, [r7, #26]
 8005b26:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b28:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8005b2a:	8b7a      	ldrh	r2, [r7, #26]
 8005b2c:	8b3b      	ldrh	r3, [r7, #24]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d304      	bcc.n	8005b3c <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8005b32:	8b7a      	ldrh	r2, [r7, #26]
 8005b34:	8b3b      	ldrh	r3, [r7, #24]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	e008      	b.n	8005b4e <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8005b3c:	8bbb      	ldrh	r3, [r7, #28]
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	8b79      	ldrh	r1, [r7, #26]
 8005b44:	8b3b      	ldrh	r3, [r7, #24]
 8005b46:	1acb      	subs	r3, r1, r3
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	4413      	add	r3, r2
 8005b4c:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8005b4e:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 8005b50:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005b52:	88fb      	ldrh	r3, [r7, #6]
 8005b54:	441a      	add	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	889b      	ldrh	r3, [r3, #4]
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	db0c      	blt.n	8005b7a <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	8898      	ldrh	r0, [r3, #4]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	889a      	ldrh	r2, [r3, #4]
 8005b68:	88fb      	ldrh	r3, [r7, #6]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b70:	4619      	mov	r1, r3
 8005b72:	f7ff fe61 	bl	8005838 <advance_index>
 8005b76:	4603      	mov	r3, r0
 8005b78:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 8005b7a:	88fb      	ldrh	r3, [r7, #6]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d023      	beq.n	8005bc8 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	889b      	ldrh	r3, [r3, #4]
 8005b84:	82fb      	strh	r3, [r7, #22]
 8005b86:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005b88:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8005b8a:	e003      	b.n	8005b94 <_tu_fifo_write_n+0x164>
 8005b8c:	8aba      	ldrh	r2, [r7, #20]
 8005b8e:	8afb      	ldrh	r3, [r7, #22]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	82bb      	strh	r3, [r7, #20]
 8005b94:	8afa      	ldrh	r2, [r7, #22]
 8005b96:	8abb      	ldrh	r3, [r7, #20]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d9f7      	bls.n	8005b8c <_tu_fifo_write_n+0x15c>
  return idx;
 8005b9c:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8005b9e:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8005ba0:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8005ba2:	88fa      	ldrh	r2, [r7, #6]
 8005ba4:	797b      	ldrb	r3, [r7, #5]
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f7ff fc66 	bl	800547e <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	889b      	ldrh	r3, [r3, #4]
 8005bb6:	88fa      	ldrh	r2, [r7, #6]
 8005bb8:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff fe3c 	bl	8005838 <advance_index>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8005bc8:	88fb      	ldrh	r3, [r7, #6]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3740      	adds	r7, #64	@ 0x40
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b086      	sub	sp, #24
 8005bd6:	af02      	add	r7, sp, #8
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	4611      	mov	r1, r2
 8005bde:	461a      	mov	r2, r3
 8005be0:	460b      	mov	r3, r1
 8005be2:	80fb      	strh	r3, [r7, #6]
 8005be4:	4613      	mov	r3, r2
 8005be6:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	891b      	ldrh	r3, [r3, #8]
 8005bec:	b298      	uxth	r0, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	895b      	ldrh	r3, [r3, #10]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	88f9      	ldrh	r1, [r7, #6]
 8005bf6:	797a      	ldrb	r2, [r7, #5]
 8005bf8:	9201      	str	r2, [sp, #4]
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	460a      	mov	r2, r1
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f7ff fea4 	bl	8005950 <_tu_fifo_peek_n>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8898      	ldrh	r0, [r3, #4]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	895b      	ldrh	r3, [r3, #10]
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	88fa      	ldrh	r2, [r7, #6]
 8005c18:	4619      	mov	r1, r3
 8005c1a:	f7ff fe0d 	bl	8005838 <advance_index>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	461a      	mov	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8005c26:	88fb      	ldrh	r3, [r7, #6]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	8899      	ldrh	r1, [r3, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	891b      	ldrh	r3, [r3, #8]
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	895b      	ldrh	r3, [r3, #10]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	8279      	strh	r1, [r7, #18]
 8005c4a:	823a      	strh	r2, [r7, #16]
 8005c4c:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 8005c4e:	8a3a      	ldrh	r2, [r7, #16]
 8005c50:	89fb      	ldrh	r3, [r7, #14]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d304      	bcc.n	8005c60 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8005c56:	8a3a      	ldrh	r2, [r7, #16]
 8005c58:	89fb      	ldrh	r3, [r7, #14]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	e008      	b.n	8005c72 <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8005c60:	8a7b      	ldrh	r3, [r7, #18]
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	8a39      	ldrh	r1, [r7, #16]
 8005c68:	89fb      	ldrh	r3, [r7, #14]
 8005c6a:	1acb      	subs	r3, r1, r3
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	4413      	add	r3, r2
 8005c70:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	8892      	ldrh	r2, [r2, #4]
 8005c76:	82fb      	strh	r3, [r7, #22]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	82bb      	strh	r3, [r7, #20]
 8005c7c:	8afa      	ldrh	r2, [r7, #22]
 8005c7e:	8abb      	ldrh	r3, [r7, #20]
 8005c80:	4293      	cmp	r3, r2
 8005c82:	bf28      	it	cs
 8005c84:	4613      	movcs	r3, r2
 8005c86:	b29b      	uxth	r3, r3
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	371c      	adds	r7, #28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	891b      	ldrh	r3, [r3, #8]
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	895b      	ldrh	r3, [r3, #10]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	bf0c      	ite	eq
 8005cac:	2301      	moveq	r3, #1
 8005cae:	2300      	movne	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b085      	sub	sp, #20
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	8899      	ldrh	r1, [r3, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	891b      	ldrh	r3, [r3, #8]
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	895b      	ldrh	r3, [r3, #10]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	81f9      	strh	r1, [r7, #14]
 8005cd8:	81ba      	strh	r2, [r7, #12]
 8005cda:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8005cdc:	89ba      	ldrh	r2, [r7, #12]
 8005cde:	897b      	ldrh	r3, [r7, #10]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d304      	bcc.n	8005cee <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8005ce4:	89ba      	ldrh	r2, [r7, #12]
 8005ce6:	897b      	ldrh	r3, [r7, #10]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	e008      	b.n	8005d00 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8005cee:	89fb      	ldrh	r3, [r7, #14]
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	89b9      	ldrh	r1, [r7, #12]
 8005cf6:	897b      	ldrh	r3, [r7, #10]
 8005cf8:	1acb      	subs	r3, r1, r3
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	8892      	ldrh	r2, [r2, #4]
 8005d04:	4293      	cmp	r3, r2
 8005d06:	bf2c      	ite	cs
 8005d08:	2301      	movcs	r3, #1
 8005d0a:	2300      	movcc	r3, #0
 8005d0c:	b2db      	uxtb	r3, r3
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b087      	sub	sp, #28
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	8899      	ldrh	r1, [r3, #4]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	891b      	ldrh	r3, [r3, #8]
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	895b      	ldrh	r3, [r3, #10]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	82f9      	strh	r1, [r7, #22]
 8005d34:	82ba      	strh	r2, [r7, #20]
 8005d36:	827b      	strh	r3, [r7, #18]
 8005d38:	8afb      	ldrh	r3, [r7, #22]
 8005d3a:	823b      	strh	r3, [r7, #16]
 8005d3c:	8abb      	ldrh	r3, [r7, #20]
 8005d3e:	81fb      	strh	r3, [r7, #14]
 8005d40:	8a7b      	ldrh	r3, [r7, #18]
 8005d42:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8005d44:	89fa      	ldrh	r2, [r7, #14]
 8005d46:	89bb      	ldrh	r3, [r7, #12]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d304      	bcc.n	8005d56 <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8005d4c:	89fa      	ldrh	r2, [r7, #14]
 8005d4e:	89bb      	ldrh	r3, [r7, #12]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	e008      	b.n	8005d68 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8005d56:	8a3b      	ldrh	r3, [r7, #16]
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	89f9      	ldrh	r1, [r7, #14]
 8005d5e:	89bb      	ldrh	r3, [r7, #12]
 8005d60:	1acb      	subs	r3, r1, r3
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	4413      	add	r3, r2
 8005d66:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8005d68:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8005d6a:	8afa      	ldrh	r2, [r7, #22]
 8005d6c:	897b      	ldrh	r3, [r7, #10]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d904      	bls.n	8005d7c <tu_fifo_remaining+0x62>
 8005d72:	8afa      	ldrh	r2, [r7, #22]
 8005d74:	897b      	ldrh	r3, [r7, #10]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	e000      	b.n	8005d7e <tu_fifo_remaining+0x64>
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	891b      	ldrh	r3, [r3, #8]
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	895b      	ldrh	r3, [r3, #10]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	6839      	ldr	r1, [r7, #0]
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7ff fd6e 	bl	8005884 <_tu_fifo_peek>
 8005da8:	4603      	mov	r3, r0
 8005daa:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	8898      	ldrh	r0, [r3, #4]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	895b      	ldrh	r3, [r3, #10]
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	7bfa      	ldrb	r2, [r7, #15]
 8005db8:	b292      	uxth	r2, r2
 8005dba:	4619      	mov	r1, r3
 8005dbc:	f7ff fd3c 	bl	8005838 <advance_index>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8005de0:	88fa      	ldrh	r2, [r7, #6]
 8005de2:	2300      	movs	r3, #0
 8005de4:	68b9      	ldr	r1, [r7, #8]
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f7ff fef3 	bl	8005bd2 <_tu_fifo_read_n>
 8005dec:	4603      	mov	r3, r0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b084      	sub	sp, #16
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	60f8      	str	r0, [r7, #12]
 8005dfe:	60b9      	str	r1, [r7, #8]
 8005e00:	4613      	mov	r3, r2
 8005e02:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8005e04:	88fa      	ldrh	r2, [r7, #6]
 8005e06:	2301      	movs	r3, #1
 8005e08:	68b9      	ldr	r1, [r7, #8]
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f7ff fee1 	bl	8005bd2 <_tu_fifo_read_n>
 8005e10:	4603      	mov	r3, r0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b086      	sub	sp, #24
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	891b      	ldrh	r3, [r3, #8]
 8005e28:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7ff ff47 	bl	8005cbe <tu_fifo_full>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00c      	beq.n	8005e50 <tu_fifo_write+0x36>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	79db      	ldrb	r3, [r3, #7]
 8005e3a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	f083 0301 	eor.w	r3, r3, #1
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <tu_fifo_write+0x36>
  {
    ret = false;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	75fb      	strb	r3, [r7, #23]
 8005e4e:	e022      	b.n	8005e96 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	889b      	ldrh	r3, [r3, #4]
 8005e54:	823b      	strh	r3, [r7, #16]
 8005e56:	8abb      	ldrh	r3, [r7, #20]
 8005e58:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8005e5a:	e003      	b.n	8005e64 <tu_fifo_write+0x4a>
 8005e5c:	89fa      	ldrh	r2, [r7, #14]
 8005e5e:	8a3b      	ldrh	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	81fb      	strh	r3, [r7, #14]
 8005e64:	8a3a      	ldrh	r2, [r7, #16]
 8005e66:	89fb      	ldrh	r3, [r7, #14]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d9f7      	bls.n	8005e5c <tu_fifo_write+0x42>
  return idx;
 8005e6c:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8005e6e:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8005e70:	8a7b      	ldrh	r3, [r7, #18]
 8005e72:	461a      	mov	r2, r3
 8005e74:	6839      	ldr	r1, [r7, #0]
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff fae2 	bl	8005440 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	889b      	ldrh	r3, [r3, #4]
 8005e80:	8ab9      	ldrh	r1, [r7, #20]
 8005e82:	2201      	movs	r2, #1
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff fcd7 	bl	8005838 <advance_index>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	811a      	strh	r2, [r3, #8]

    ret = true;
 8005e92:	2301      	movs	r3, #1
 8005e94:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8005eae:	88fa      	ldrh	r2, [r7, #6]
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f7ff fdbb 	bl	8005a30 <_tu_fifo_write_n>
 8005eba:	4603      	mov	r3, r0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8005ed2:	88fa      	ldrh	r2, [r7, #6]
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	68b9      	ldr	r1, [r7, #8]
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f7ff fda9 	bl	8005a30 <_tu_fifo_write_n>
 8005ede:	4603      	mov	r3, r0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8005efc:	2301      	movs	r3, #1
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <tu_fifo_set_overwritable>:
                Pointer to the FIFO buffer to manipulate
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable) {
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	460b      	mov	r3, r1
 8005f14:	70fb      	strb	r3, [r7, #3]
  if (f->overwritable == overwritable) {
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	79db      	ldrb	r3, [r3, #7]
 8005f1a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	78fa      	ldrb	r2, [r7, #3]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d101      	bne.n	8005f2a <tu_fifo_set_overwritable+0x20>
    return true;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e006      	b.n	8005f38 <tu_fifo_set_overwritable+0x2e>
  }

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	79d3      	ldrb	r3, [r2, #7]
 8005f2e:	78f9      	ldrb	r1, [r7, #3]
 8005f30:	f361 13c7 	bfi	r3, r1, #7, #1
 8005f34:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8005f36:	2301      	movs	r3, #1
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	6039      	str	r1, [r7, #0]
 8005f4e:	71fb      	strb	r3, [r7, #7]
 8005f50:	4613      	mov	r3, r2
 8005f52:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <tud_descriptor_bos_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0
  return NULL;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8005f84:	b480      	push	{r7}
 8005f86:	af00      	add	r7, sp, #0
  return NULL;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <tud_mount_cb>:

TU_ATTR_WEAK void tud_mount_cb(void) {
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
}
 8005fb0:	bf00      	nop
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <tud_umount_cb>:

TU_ATTR_WEAK void tud_umount_cb(void) {
 8005fba:	b480      	push	{r7}
 8005fbc:	af00      	add	r7, sp, #0
}
 8005fbe:	bf00      	nop
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <tud_suspend_cb>:

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	4603      	mov	r3, r0
 8005fd0:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 8005fd2:	bf00      	nop
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 8005fde:	b480      	push	{r7}
 8005fe0:	af00      	add	r7, sp, #0
}
 8005fe2:	bf00      	nop
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <tud_vendor_control_xfer_cb>:

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	603a      	str	r2, [r7, #0]
 8005ff6:	71fb      	strb	r3, [r7, #7]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) stage; (void) request;
  return false;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8006014:	2301      	movs	r3, #1
}
 8006016:	4618      	mov	r0, r3
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
	...

08006024 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8006024:	b480      	push	{r7}
 8006026:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8006028:	4b06      	ldr	r3, [pc, #24]	@ (8006044 <tud_mounted+0x20>)
 800602a:	785b      	ldrb	r3, [r3, #1]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	bf14      	ite	ne
 8006032:	2301      	movne	r3, #1
 8006034:	2300      	moveq	r3, #0
 8006036:	b2db      	uxtb	r3, r3
}
 8006038:	4618      	mov	r0, r3
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	20000ac8 	.word	0x20000ac8

08006048 <tud_suspended>:

bool tud_suspended(void) {
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 800604c:	4b07      	ldr	r3, [pc, #28]	@ (800606c <tud_suspended+0x24>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	bf14      	ite	ne
 800605a:	2301      	movne	r3, #1
 800605c:	2300      	moveq	r3, #0
 800605e:	b2db      	uxtb	r3, r3
}
 8006060:	4618      	mov	r0, r3
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	20000ac8 	.word	0x20000ac8

08006070 <tud_remote_wakeup>:

bool tud_remote_wakeup(void) {
 8006070:	b580      	push	{r7, lr}
 8006072:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en);
 8006074:	4b0f      	ldr	r3, [pc, #60]	@ (80060b4 <tud_remote_wakeup+0x44>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00d      	beq.n	800609e <tud_remote_wakeup+0x2e>
 8006082:	4b0c      	ldr	r3, [pc, #48]	@ (80060b4 <tud_remote_wakeup+0x44>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	f003 0310 	and.w	r3, r3, #16
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d006      	beq.n	800609e <tud_remote_wakeup+0x2e>
 8006090:	4b08      	ldr	r3, [pc, #32]	@ (80060b4 <tud_remote_wakeup+0x44>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <tud_remote_wakeup+0x32>
 800609e:	2300      	movs	r3, #0
 80060a0:	e005      	b.n	80060ae <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 80060a2:	4b05      	ldr	r3, [pc, #20]	@ (80060b8 <tud_remote_wakeup+0x48>)
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f002 fba4 	bl	80087f4 <dcd_remote_wakeup>
  return true;
 80060ac:	2301      	movs	r3, #1
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20000ac8 	.word	0x20000ac8
 80060b8:	2000006d 	.word	0x2000006d

080060bc <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 80060c0:	4b05      	ldr	r3, [pc, #20]	@ (80060d8 <tud_inited+0x1c>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	2bff      	cmp	r3, #255	@ 0xff
 80060c6:	bf14      	ite	ne
 80060c8:	2301      	movne	r3, #1
 80060ca:	2300      	moveq	r3, #0
 80060cc:	b2db      	uxtb	r3, r3
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	2000006d 	.word	0x2000006d

080060dc <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 80060dc:	b580      	push	{r7, lr}
 80060de:	b08c      	sub	sp, #48	@ 0x30
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	4603      	mov	r3, r0
 80060e4:	6039      	str	r1, [r7, #0]
 80060e6:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 80060e8:	f7ff ffe8 	bl	80060bc <tud_inited>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 80060f2:	2301      	movs	r3, #1
 80060f4:	e09e      	b.n	8006234 <tud_rhport_init+0x158>
  }
  TU_ASSERT(rh_init);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10a      	bne.n	8006112 <tud_rhport_init+0x36>
 80060fc:	4b4f      	ldr	r3, [pc, #316]	@ (800623c <tud_rhport_init+0x160>)
 80060fe:	61bb      	str	r3, [r7, #24]
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d000      	beq.n	800610e <tud_rhport_init+0x32>
 800610c:	be00      	bkpt	0x0000
 800610e:	2300      	movs	r3, #0
 8006110:	e090      	b.n	8006234 <tud_rhport_init+0x158>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8006112:	222c      	movs	r2, #44	@ 0x2c
 8006114:	2100      	movs	r1, #0
 8006116:	484a      	ldr	r0, [pc, #296]	@ (8006240 <tud_rhport_init+0x164>)
 8006118:	f004 f90a 	bl	800a330 <memset>
  _usbd_queued_setup = 0;
 800611c:	4b49      	ldr	r3, [pc, #292]	@ (8006244 <tud_rhport_init+0x168>)
 800611e:	2200      	movs	r2, #0
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	4b49      	ldr	r3, [pc, #292]	@ (8006248 <tud_rhport_init+0x16c>)
 8006124:	613b      	str	r3, [r7, #16]
#define OSAL_SPINLOCK_DEF(_name, _int_set) \
  osal_spinlock_t _name = { .interrupt_set = _int_set }

TU_ATTR_ALWAYS_INLINE static inline void osal_spin_init(osal_spinlock_t *ctx) {
  (void) ctx;
}
 8006126:	bf00      	nop
 8006128:	4b48      	ldr	r3, [pc, #288]	@ (800624c <tud_rhport_init+0x170>)
 800612a:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	3304      	adds	r3, #4
 8006130:	4618      	mov	r0, r3
 8006132:	f7ff fed9 	bl	8005ee8 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8006136:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8006138:	4a45      	ldr	r2, [pc, #276]	@ (8006250 <tud_rhport_init+0x174>)
 800613a:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 800613c:	4b44      	ldr	r3, [pc, #272]	@ (8006250 <tud_rhport_init+0x174>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10a      	bne.n	800615a <tud_rhport_init+0x7e>
 8006144:	4b3d      	ldr	r3, [pc, #244]	@ (800623c <tud_rhport_init+0x160>)
 8006146:	61fb      	str	r3, [r7, #28]
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d000      	beq.n	8006156 <tud_rhport_init+0x7a>
 8006154:	be00      	bkpt	0x0000
 8006156:	2300      	movs	r3, #0
 8006158:	e06c      	b.n	8006234 <tud_rhport_init+0x158>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 800615a:	4b3e      	ldr	r3, [pc, #248]	@ (8006254 <tud_rhport_init+0x178>)
 800615c:	2b00      	cmp	r3, #0
 800615e:	d005      	beq.n	800616c <tud_rhport_init+0x90>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8006160:	483d      	ldr	r0, [pc, #244]	@ (8006258 <tud_rhport_init+0x17c>)
 8006162:	f3af 8000 	nop.w
 8006166:	4603      	mov	r3, r0
 8006168:	4a3c      	ldr	r2, [pc, #240]	@ (800625c <tud_rhport_init+0x180>)
 800616a:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 800616c:	2300      	movs	r3, #0
 800616e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006172:	e03a      	b.n	80061ea <tud_rhport_init+0x10e>
 8006174:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006178:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 800617a:	2300      	movs	r3, #0
 800617c:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 800617e:	4b36      	ldr	r3, [pc, #216]	@ (8006258 <tud_rhport_init+0x17c>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	7bfa      	ldrb	r2, [r7, #15]
 8006184:	429a      	cmp	r2, r3
 8006186:	d206      	bcs.n	8006196 <tud_rhport_init+0xba>
    driver = &_app_driver[drvid];
 8006188:	4b34      	ldr	r3, [pc, #208]	@ (800625c <tud_rhport_init+0x180>)
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	015b      	lsls	r3, r3, #5
 8006190:	4413      	add	r3, r2
 8006192:	60bb      	str	r3, [r7, #8]
 8006194:	e00d      	b.n	80061b2 <tud_rhport_init+0xd6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006196:	4b30      	ldr	r3, [pc, #192]	@ (8006258 <tud_rhport_init+0x17c>)
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	429a      	cmp	r2, r3
 80061a0:	db07      	blt.n	80061b2 <tud_rhport_init+0xd6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	4a2c      	ldr	r2, [pc, #176]	@ (8006258 <tud_rhport_init+0x17c>)
 80061a6:	7812      	ldrb	r2, [r2, #0]
 80061a8:	1a9b      	subs	r3, r3, r2
 80061aa:	015b      	lsls	r3, r3, #5
 80061ac:	4a2c      	ldr	r2, [pc, #176]	@ (8006260 <tud_rhport_init+0x184>)
 80061ae:	4413      	add	r3, r2
 80061b0:	60bb      	str	r3, [r7, #8]
  return driver;
 80061b2:	68bb      	ldr	r3, [r7, #8]
    usbd_class_driver_t const* driver = get_driver(i);
 80061b4:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 80061b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <tud_rhport_init+0xe8>
 80061bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10a      	bne.n	80061da <tud_rhport_init+0xfe>
 80061c4:	4b1d      	ldr	r3, [pc, #116]	@ (800623c <tud_rhport_init+0x160>)
 80061c6:	623b      	str	r3, [r7, #32]
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d000      	beq.n	80061d6 <tud_rhport_init+0xfa>
 80061d4:	be00      	bkpt	0x0000
 80061d6:	2300      	movs	r3, #0
 80061d8:	e02c      	b.n	8006234 <tud_rhport_init+0x158>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 80061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80061e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80061e4:	3301      	adds	r3, #1
 80061e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80061ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006258 <tud_rhport_init+0x17c>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80061f4:	429a      	cmp	r2, r3
 80061f6:	dabd      	bge.n	8006174 <tud_rhport_init+0x98>
  }

  _usbd_rhport = rhport;
 80061f8:	4a1a      	ldr	r2, [pc, #104]	@ (8006264 <tud_rhport_init+0x188>)
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 80061fe:	79fb      	ldrb	r3, [r7, #7]
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	4618      	mov	r0, r3
 8006204:	f002 f9cc 	bl	80085a0 <dcd_init>
 8006208:	4603      	mov	r3, r0
 800620a:	f083 0301 	eor.w	r3, r3, #1
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <tud_rhport_init+0x14e>
 8006214:	4b09      	ldr	r3, [pc, #36]	@ (800623c <tud_rhport_init+0x160>)
 8006216:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	d000      	beq.n	8006226 <tud_rhport_init+0x14a>
 8006224:	be00      	bkpt	0x0000
 8006226:	2300      	movs	r3, #0
 8006228:	e004      	b.n	8006234 <tud_rhport_init+0x158>
  dcd_int_enable(rhport);
 800622a:	79fb      	ldrb	r3, [r7, #7]
 800622c:	4618      	mov	r0, r3
 800622e:	f002 fa55 	bl	80086dc <dcd_int_enable>

  return true;
 8006232:	2301      	movs	r3, #1
}
 8006234:	4618      	mov	r0, r3
 8006236:	3730      	adds	r7, #48	@ 0x30
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	e000edf0 	.word	0xe000edf0
 8006240:	20000ac8 	.word	0x20000ac8
 8006244:	20000af4 	.word	0x20000af4
 8006248:	20000070 	.word	0x20000070
 800624c:	20000074 	.word	0x20000074
 8006250:	20000bc0 	.word	0x20000bc0
 8006254:	00000000 	.word	0x00000000
 8006258:	20000afc 	.word	0x20000afc
 800625c:	20000af8 	.word	0x20000af8
 8006260:	0800aae0 	.word	0x0800aae0
 8006264:	2000006d 	.word	0x2000006d

08006268 <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8006268:	b580      	push	{r7, lr}
 800626a:	b088      	sub	sp, #32
 800626c:	af00      	add	r7, sp, #0
 800626e:	4603      	mov	r3, r0
 8006270:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006272:	2300      	movs	r3, #0
 8006274:	77fb      	strb	r3, [r7, #31]
 8006276:	e034      	b.n	80062e2 <configuration_reset+0x7a>
 8006278:	7ffb      	ldrb	r3, [r7, #31]
 800627a:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 800627c:	2300      	movs	r3, #0
 800627e:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8006280:	4b25      	ldr	r3, [pc, #148]	@ (8006318 <configuration_reset+0xb0>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	7cfa      	ldrb	r2, [r7, #19]
 8006286:	429a      	cmp	r2, r3
 8006288:	d206      	bcs.n	8006298 <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 800628a:	4b24      	ldr	r3, [pc, #144]	@ (800631c <configuration_reset+0xb4>)
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	7cfb      	ldrb	r3, [r7, #19]
 8006290:	015b      	lsls	r3, r3, #5
 8006292:	4413      	add	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	e00d      	b.n	80062b4 <configuration_reset+0x4c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006298:	4b1f      	ldr	r3, [pc, #124]	@ (8006318 <configuration_reset+0xb0>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	7cfb      	ldrb	r3, [r7, #19]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	db07      	blt.n	80062b4 <configuration_reset+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80062a4:	7cfb      	ldrb	r3, [r7, #19]
 80062a6:	4a1c      	ldr	r2, [pc, #112]	@ (8006318 <configuration_reset+0xb0>)
 80062a8:	7812      	ldrb	r2, [r2, #0]
 80062aa:	1a9b      	subs	r3, r3, r2
 80062ac:	015b      	lsls	r3, r3, #5
 80062ae:	4a1c      	ldr	r2, [pc, #112]	@ (8006320 <configuration_reset+0xb8>)
 80062b0:	4413      	add	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]
  return driver;
 80062b4:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 80062b6:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d109      	bne.n	80062d2 <configuration_reset+0x6a>
 80062be:	4b19      	ldr	r3, [pc, #100]	@ (8006324 <configuration_reset+0xbc>)
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d01f      	beq.n	800630e <configuration_reset+0xa6>
 80062ce:	be00      	bkpt	0x0000
 80062d0:	e01d      	b.n	800630e <configuration_reset+0xa6>
    driver->reset(rhport);
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	79fa      	ldrb	r2, [r7, #7]
 80062d8:	4610      	mov	r0, r2
 80062da:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80062dc:	7ffb      	ldrb	r3, [r7, #31]
 80062de:	3301      	adds	r3, #1
 80062e0:	77fb      	strb	r3, [r7, #31]
 80062e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006318 <configuration_reset+0xb0>)
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	7ffb      	ldrb	r3, [r7, #31]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	dac4      	bge.n	8006278 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 80062ee:	222c      	movs	r2, #44	@ 0x2c
 80062f0:	2100      	movs	r1, #0
 80062f2:	480d      	ldr	r0, [pc, #52]	@ (8006328 <configuration_reset+0xc0>)
 80062f4:	f004 f81c 	bl	800a330 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 80062f8:	2210      	movs	r2, #16
 80062fa:	21ff      	movs	r1, #255	@ 0xff
 80062fc:	480b      	ldr	r0, [pc, #44]	@ (800632c <configuration_reset+0xc4>)
 80062fe:	f004 f817 	bl	800a330 <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 8006302:	220c      	movs	r2, #12
 8006304:	21ff      	movs	r1, #255	@ 0xff
 8006306:	480a      	ldr	r0, [pc, #40]	@ (8006330 <configuration_reset+0xc8>)
 8006308:	f004 f812 	bl	800a330 <memset>
 800630c:	e000      	b.n	8006310 <configuration_reset+0xa8>
    TU_ASSERT(driver,);
 800630e:	bf00      	nop
}
 8006310:	3720      	adds	r7, #32
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	20000afc 	.word	0x20000afc
 800631c:	20000af8 	.word	0x20000af8
 8006320:	0800aae0 	.word	0x0800aae0
 8006324:	e000edf0 	.word	0xe000edf0
 8006328:	20000ac8 	.word	0x20000ac8
 800632c:	20000acc 	.word	0x20000acc
 8006330:	20000adc 	.word	0x20000adc

08006334 <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	4603      	mov	r3, r0
 800633c:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	4618      	mov	r0, r3
 8006342:	f7ff ff91 	bl	8006268 <configuration_reset>
  usbd_control_reset();
 8006346:	f001 fc37 	bl	8007bb8 <usbd_control_reset>
}
 800634a:	bf00      	nop
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
	...

08006354 <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8006354:	b590      	push	{r4, r7, lr}
 8006356:	b093      	sub	sp, #76	@ 0x4c
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 8006360:	f7ff feac 	bl	80060bc <tud_inited>
 8006364:	4603      	mov	r3, r0
 8006366:	f083 0301 	eor.w	r3, r3, #1
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	f040 8189 	bne.w	8006684 <tud_task_ext+0x330>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8006372:	4bb1      	ldr	r3, [pc, #708]	@ (8006638 <tud_task_ext+0x2e4>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	633b      	str	r3, [r7, #48]	@ 0x30
 8006378:	f107 030c 	add.w	r3, r7, #12
 800637c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 8006382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2000      	movs	r0, #0
 8006388:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 800638a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638c:	3304      	adds	r3, #4
 800638e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006390:	4618      	mov	r0, r3
 8006392:	f7ff fcfa 	bl	8005d8a <tu_fifo_read>
 8006396:	4603      	mov	r3, r0
 8006398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 800639c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2001      	movs	r0, #1
 80063a2:	4798      	blx	r3

  return success;
 80063a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063a8:	f083 0301 	eor.w	r3, r3, #1
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f040 816a 	bne.w	8006688 <tud_task_ext+0x334>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 80063b4:	7b7b      	ldrb	r3, [r7, #13]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	2b07      	cmp	r3, #7
 80063ba:	f200 814b 	bhi.w	8006654 <tud_task_ext+0x300>
 80063be:	a201      	add	r2, pc, #4	@ (adr r2, 80063c4 <tud_task_ext+0x70>)
 80063c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c4:	080063e5 	.word	0x080063e5
 80063c8:	080063f5 	.word	0x080063f5
 80063cc:	08006609 	.word	0x08006609
 80063d0:	080065bb 	.word	0x080065bb
 80063d4:	080065e5 	.word	0x080065e5
 80063d8:	08006403 	.word	0x08006403
 80063dc:	080064b3 	.word	0x080064b3
 80063e0:	080065f9 	.word	0x080065f9
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 80063e4:	7b3b      	ldrb	r3, [r7, #12]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7ff ffa4 	bl	8006334 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 80063ec:	7c3a      	ldrb	r2, [r7, #16]
 80063ee:	4b93      	ldr	r3, [pc, #588]	@ (800663c <tud_task_ext+0x2e8>)
 80063f0:	709a      	strb	r2, [r3, #2]
        break;
 80063f2:	e146      	b.n	8006682 <tud_task_ext+0x32e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 80063f4:	7b3b      	ldrb	r3, [r7, #12]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7ff ff9c 	bl	8006334 <usbd_reset>
        tud_umount_cb();
 80063fc:	f7ff fddd 	bl	8005fba <tud_umount_cb>
        break;
 8006400:	e13f      	b.n	8006682 <tud_task_ext+0x32e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 8006402:	4b8f      	ldr	r3, [pc, #572]	@ (8006640 <tud_task_ext+0x2ec>)
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <tud_task_ext+0xce>
 800640c:	4b8d      	ldr	r3, [pc, #564]	@ (8006644 <tud_task_ext+0x2f0>)
 800640e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 8137 	beq.w	800668c <tud_task_ext+0x338>
 800641e:	be00      	bkpt	0x0000
 8006420:	e134      	b.n	800668c <tud_task_ext+0x338>
        _usbd_queued_setup--;
 8006422:	4b87      	ldr	r3, [pc, #540]	@ (8006640 <tud_task_ext+0x2ec>)
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	b2db      	uxtb	r3, r3
 8006428:	3b01      	subs	r3, #1
 800642a:	b2da      	uxtb	r2, r3
 800642c:	4b84      	ldr	r3, [pc, #528]	@ (8006640 <tud_task_ext+0x2ec>)
 800642e:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 8006430:	4b83      	ldr	r3, [pc, #524]	@ (8006640 <tud_task_ext+0x2ec>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	f040 8116 	bne.w	8006668 <tud_task_ext+0x314>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 800643c:	4a7f      	ldr	r2, [pc, #508]	@ (800663c <tud_task_ext+0x2e8>)
 800643e:	7813      	ldrb	r3, [r2, #0]
 8006440:	f043 0301 	orr.w	r3, r3, #1
 8006444:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8006446:	4a7d      	ldr	r2, [pc, #500]	@ (800663c <tud_task_ext+0x2e8>)
 8006448:	f892 3020 	ldrb.w	r3, [r2, #32]
 800644c:	f023 0301 	bic.w	r3, r3, #1
 8006450:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8006454:	4a79      	ldr	r2, [pc, #484]	@ (800663c <tud_task_ext+0x2e8>)
 8006456:	f892 3020 	ldrb.w	r3, [r2, #32]
 800645a:	f023 0304 	bic.w	r3, r3, #4
 800645e:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 8006462:	4a76      	ldr	r2, [pc, #472]	@ (800663c <tud_task_ext+0x2e8>)
 8006464:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8006468:	f023 0301 	bic.w	r3, r3, #1
 800646c:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 8006470:	4a72      	ldr	r2, [pc, #456]	@ (800663c <tud_task_ext+0x2e8>)
 8006472:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8006476:	f023 0304 	bic.w	r3, r3, #4
 800647a:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 800647e:	7b3a      	ldrb	r2, [r7, #12]
 8006480:	f107 030c 	add.w	r3, r7, #12
 8006484:	3304      	adds	r3, #4
 8006486:	4619      	mov	r1, r3
 8006488:	4610      	mov	r0, r2
 800648a:	f000 f91f 	bl	80066cc <process_control_request>
 800648e:	4603      	mov	r3, r0
 8006490:	f083 0301 	eor.w	r3, r3, #1
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 80e8 	beq.w	800666c <tud_task_ext+0x318>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 800649c:	7b3b      	ldrb	r3, [r7, #12]
 800649e:	2100      	movs	r1, #0
 80064a0:	4618      	mov	r0, r3
 80064a2:	f002 fb7b 	bl	8008b9c <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 80064a6:	7b3b      	ldrb	r3, [r7, #12]
 80064a8:	2180      	movs	r1, #128	@ 0x80
 80064aa:	4618      	mov	r0, r3
 80064ac:	f002 fb76 	bl	8008b9c <dcd_edpt_stall>
        }
        break;
 80064b0:	e0dc      	b.n	800666c <tud_task_ext+0x318>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 80064b2:	7c3b      	ldrb	r3, [r7, #16]
 80064b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80064b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80064bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80064c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80064c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064c8:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 80064ca:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80064ce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80064d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80064d6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80064da:	09db      	lsrs	r3, r3, #7
 80064dc:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 80064de:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 80064e2:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80064e6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80064ea:	4954      	ldr	r1, [pc, #336]	@ (800663c <tud_task_ext+0x2e8>)
 80064ec:	0052      	lsls	r2, r2, #1
 80064ee:	440a      	add	r2, r1
 80064f0:	4413      	add	r3, r2
 80064f2:	f103 0220 	add.w	r2, r3, #32
 80064f6:	7813      	ldrb	r3, [r2, #0]
 80064f8:	f023 0301 	bic.w	r3, r3, #1
 80064fc:	7013      	strb	r3, [r2, #0]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80064fe:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8006502:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8006506:	494d      	ldr	r1, [pc, #308]	@ (800663c <tud_task_ext+0x2e8>)
 8006508:	0052      	lsls	r2, r2, #1
 800650a:	440a      	add	r2, r1
 800650c:	4413      	add	r3, r2
 800650e:	f103 0220 	add.w	r2, r3, #32
 8006512:	7813      	ldrb	r3, [r2, #0]
 8006514:	f023 0304 	bic.w	r3, r3, #4
 8006518:	7013      	strb	r3, [r2, #0]

        if (0 == epnum) {
 800651a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800651e:	2b00      	cmp	r3, #0
 8006520:	d107      	bne.n	8006532 <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 8006522:	7b38      	ldrb	r0, [r7, #12]
 8006524:	7c7a      	ldrb	r2, [r7, #17]
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800652c:	f001 fb7a 	bl	8007c24 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 8006530:	e0a7      	b.n	8006682 <tud_task_ext+0x32e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8006532:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8006536:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800653a:	4940      	ldr	r1, [pc, #256]	@ (800663c <tud_task_ext+0x2e8>)
 800653c:	0052      	lsls	r2, r2, #1
 800653e:	440a      	add	r2, r1
 8006540:	4413      	add	r3, r2
 8006542:	3314      	adds	r3, #20
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 800654a:	2300      	movs	r3, #0
 800654c:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 800654e:	4b3e      	ldr	r3, [pc, #248]	@ (8006648 <tud_task_ext+0x2f4>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8006556:	429a      	cmp	r2, r3
 8006558:	d207      	bcs.n	800656a <tud_task_ext+0x216>
    driver = &_app_driver[drvid];
 800655a:	4b3c      	ldr	r3, [pc, #240]	@ (800664c <tud_task_ext+0x2f8>)
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006562:	015b      	lsls	r3, r3, #5
 8006564:	4413      	add	r3, r2
 8006566:	623b      	str	r3, [r7, #32]
 8006568:	e00f      	b.n	800658a <tud_task_ext+0x236>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800656a:	4b37      	ldr	r3, [pc, #220]	@ (8006648 <tud_task_ext+0x2f4>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	1c5a      	adds	r2, r3, #1
 8006570:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006574:	429a      	cmp	r2, r3
 8006576:	db08      	blt.n	800658a <tud_task_ext+0x236>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006578:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800657c:	4a32      	ldr	r2, [pc, #200]	@ (8006648 <tud_task_ext+0x2f4>)
 800657e:	7812      	ldrb	r2, [r2, #0]
 8006580:	1a9b      	subs	r3, r3, r2
 8006582:	015b      	lsls	r3, r3, #5
 8006584:	4a32      	ldr	r2, [pc, #200]	@ (8006650 <tud_task_ext+0x2fc>)
 8006586:	4413      	add	r3, r2
 8006588:	623b      	str	r3, [r7, #32]
  return driver;
 800658a:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 800658c:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 800658e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	d109      	bne.n	80065a8 <tud_task_ext+0x254>
 8006594:	4b2b      	ldr	r3, [pc, #172]	@ (8006644 <tud_task_ext+0x2f0>)
 8006596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d075      	beq.n	8006690 <tud_task_ext+0x33c>
 80065a4:	be00      	bkpt	0x0000
 80065a6:	e073      	b.n	8006690 <tud_task_ext+0x33c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 80065a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065aa:	699c      	ldr	r4, [r3, #24]
 80065ac:	7b38      	ldrb	r0, [r7, #12]
 80065ae:	7c7a      	ldrb	r2, [r7, #17]
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80065b6:	47a0      	blx	r4
        break;
 80065b8:	e063      	b.n	8006682 <tud_task_ext+0x32e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 80065ba:	4b20      	ldr	r3, [pc, #128]	@ (800663c <tud_task_ext+0x2e8>)
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d053      	beq.n	8006670 <tud_task_ext+0x31c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 80065c8:	4b1c      	ldr	r3, [pc, #112]	@ (800663c <tud_task_ext+0x2e8>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	bf14      	ite	ne
 80065d6:	2301      	movne	r3, #1
 80065d8:	2300      	moveq	r3, #0
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	4618      	mov	r0, r3
 80065de:	f7ff fcf3 	bl	8005fc8 <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80065e2:	e045      	b.n	8006670 <tud_task_ext+0x31c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 80065e4:	4b15      	ldr	r3, [pc, #84]	@ (800663c <tud_task_ext+0x2e8>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d040      	beq.n	8006674 <tud_task_ext+0x320>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 80065f2:	f7ff fcf4 	bl	8005fde <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80065f6:	e03d      	b.n	8006674 <tud_task_ext+0x320>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) {
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d03c      	beq.n	8006678 <tud_task_ext+0x324>
          event.func_call.func(event.func_call.param);
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	4610      	mov	r0, r2
 8006604:	4798      	blx	r3
        }
        break;
 8006606:	e037      	b.n	8006678 <tud_task_ext+0x324>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8006608:	4b0c      	ldr	r3, [pc, #48]	@ (800663c <tud_task_ext+0x2e8>)
 800660a:	78db      	ldrb	r3, [r3, #3]
 800660c:	b2db      	uxtb	r3, r3
 800660e:	61fb      	str	r3, [r7, #28]
 8006610:	2300      	movs	r3, #0
 8006612:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8006614:	7efb      	ldrb	r3, [r7, #27]
 8006616:	69fa      	ldr	r2, [r7, #28]
 8006618:	fa22 f303 	lsr.w	r3, r2, r3
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	bf14      	ite	ne
 8006624:	2301      	movne	r3, #1
 8006626:	2300      	moveq	r3, #0
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d026      	beq.n	800667c <tud_task_ext+0x328>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4618      	mov	r0, r3
 8006632:	f7ff fc95 	bl	8005f60 <tud_sof_cb>
        }
      break;
 8006636:	e021      	b.n	800667c <tud_task_ext+0x328>
 8006638:	20000bc0 	.word	0x20000bc0
 800663c:	20000ac8 	.word	0x20000ac8
 8006640:	20000af4 	.word	0x20000af4
 8006644:	e000edf0 	.word	0xe000edf0
 8006648:	20000afc 	.word	0x20000afc
 800664c:	20000af8 	.word	0x20000af8
 8006650:	0800aae0 	.word	0x0800aae0

      default:
        TU_BREAKPOINT();
 8006654:	4b10      	ldr	r3, [pc, #64]	@ (8006698 <tud_task_ext+0x344>)
 8006656:	637b      	str	r3, [r7, #52]	@ 0x34
 8006658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00d      	beq.n	8006680 <tud_task_ext+0x32c>
 8006664:	be00      	bkpt	0x0000
        break;
 8006666:	e00b      	b.n	8006680 <tud_task_ext+0x32c>
          break;
 8006668:	bf00      	nop
 800666a:	e682      	b.n	8006372 <tud_task_ext+0x1e>
        break;
 800666c:	bf00      	nop
 800666e:	e680      	b.n	8006372 <tud_task_ext+0x1e>
        break;
 8006670:	bf00      	nop
 8006672:	e67e      	b.n	8006372 <tud_task_ext+0x1e>
        break;
 8006674:	bf00      	nop
 8006676:	e67c      	b.n	8006372 <tud_task_ext+0x1e>
        break;
 8006678:	bf00      	nop
 800667a:	e67a      	b.n	8006372 <tud_task_ext+0x1e>
      break;
 800667c:	bf00      	nop
 800667e:	e678      	b.n	8006372 <tud_task_ext+0x1e>
        break;
 8006680:	bf00      	nop
  while (1) {
 8006682:	e676      	b.n	8006372 <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 8006684:	bf00      	nop
 8006686:	e004      	b.n	8006692 <tud_task_ext+0x33e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8006688:	bf00      	nop
 800668a:	e002      	b.n	8006692 <tud_task_ext+0x33e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 800668c:	bf00      	nop
 800668e:	e000      	b.n	8006692 <tud_task_ext+0x33e>
          TU_ASSERT(driver,);
 8006690:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) { return; }
#endif
  }
}
 8006692:	374c      	adds	r7, #76	@ 0x4c
 8006694:	46bd      	mov	sp, r7
 8006696:	bd90      	pop	{r4, r7, pc}
 8006698:	e000edf0 	.word	0xe000edf0

0800669c <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	4603      	mov	r3, r0
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
 80066a8:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f001 fa8e 	bl	8007bd0 <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	7bf8      	ldrb	r0, [r7, #15]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	2101      	movs	r1, #1
 80066be:	4798      	blx	r3
 80066c0:	4603      	mov	r3, r0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
	...

080066cc <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b09a      	sub	sp, #104	@ 0x68
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	4603      	mov	r3, r0
 80066d4:	6039      	str	r1, [r7, #0]
 80066d6:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 80066d8:	2000      	movs	r0, #0
 80066da:	f001 fa79 	bl	8007bd0 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b60      	cmp	r3, #96	@ 0x60
 80066ea:	d10a      	bne.n	8006702 <process_control_request+0x36>
 80066ec:	4ba5      	ldr	r3, [pc, #660]	@ (8006984 <process_control_request+0x2b8>)
 80066ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80066f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d000      	beq.n	80066fe <process_control_request+0x32>
 80066fc:	be00      	bkpt	0x0000
 80066fe:	2300      	movs	r3, #0
 8006700:	e2bb      	b.n	8006c7a <process_control_request+0x5ae>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b40      	cmp	r3, #64	@ 0x40
 800670e:	d10a      	bne.n	8006726 <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8006710:	489d      	ldr	r0, [pc, #628]	@ (8006988 <process_control_request+0x2bc>)
 8006712:	f001 fa5d 	bl	8007bd0 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8006716:	79fb      	ldrb	r3, [r7, #7]
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	2101      	movs	r1, #1
 800671c:	4618      	mov	r0, r3
 800671e:	f7ff fc65 	bl	8005fec <tud_vendor_control_xfer_cb>
 8006722:	4603      	mov	r3, r0
 8006724:	e2a9      	b.n	8006c7a <process_control_request+0x5ae>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b02      	cmp	r3, #2
 8006732:	f000 81ca 	beq.w	8006aca <process_control_request+0x3fe>
 8006736:	2b02      	cmp	r3, #2
 8006738:	f300 8292 	bgt.w	8006c60 <process_control_request+0x594>
 800673c:	2b00      	cmp	r3, #0
 800673e:	d003      	beq.n	8006748 <process_control_request+0x7c>
 8006740:	2b01      	cmp	r3, #1
 8006742:	f000 8151 	beq.w	80069e8 <process_control_request+0x31c>
 8006746:	e28b      	b.n	8006c60 <process_control_request+0x594>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b20      	cmp	r3, #32
 8006754:	d143      	bne.n	80067de <process_control_request+0x112>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	889b      	ldrh	r3, [r3, #4]
 800675a:	b29b      	uxth	r3, r3
 800675c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800675e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006760:	b2db      	uxtb	r3, r3
 8006762:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8006766:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800676a:	2b0f      	cmp	r3, #15
 800676c:	d901      	bls.n	8006772 <process_control_request+0xa6>
 800676e:	2300      	movs	r3, #0
 8006770:	e283      	b.n	8006c7a <process_control_request+0x5ae>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8006772:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006776:	4a85      	ldr	r2, [pc, #532]	@ (800698c <process_control_request+0x2c0>)
 8006778:	4413      	add	r3, r2
 800677a:	791b      	ldrb	r3, [r3, #4]
 800677c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 8006780:	2300      	movs	r3, #0
 8006782:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 8006784:	4b82      	ldr	r3, [pc, #520]	@ (8006990 <process_control_request+0x2c4>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800678c:	429a      	cmp	r2, r3
 800678e:	d207      	bcs.n	80067a0 <process_control_request+0xd4>
    driver = &_app_driver[drvid];
 8006790:	4b80      	ldr	r3, [pc, #512]	@ (8006994 <process_control_request+0x2c8>)
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006798:	015b      	lsls	r3, r3, #5
 800679a:	4413      	add	r3, r2
 800679c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800679e:	e00f      	b.n	80067c0 <process_control_request+0xf4>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80067a0:	4b7b      	ldr	r3, [pc, #492]	@ (8006990 <process_control_request+0x2c4>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80067aa:	429a      	cmp	r2, r3
 80067ac:	db08      	blt.n	80067c0 <process_control_request+0xf4>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80067ae:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80067b2:	4a77      	ldr	r2, [pc, #476]	@ (8006990 <process_control_request+0x2c4>)
 80067b4:	7812      	ldrb	r2, [r2, #0]
 80067b6:	1a9b      	subs	r3, r3, r2
 80067b8:	015b      	lsls	r3, r3, #5
 80067ba:	4a77      	ldr	r2, [pc, #476]	@ (8006998 <process_control_request+0x2cc>)
 80067bc:	4413      	add	r3, r2
 80067be:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 80067c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80067c2:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 80067c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <process_control_request+0x102>
 80067ca:	2300      	movs	r3, #0
 80067cc:	e255      	b.n	8006c7a <process_control_request+0x5ae>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 80067ce:	79fb      	ldrb	r3, [r7, #7]
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff ff61 	bl	800669c <invoke_class_control>
 80067da:	4603      	mov	r3, r0
 80067dc:	e24d      	b.n	8006c7a <process_control_request+0x5ae>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00a      	beq.n	8006802 <process_control_request+0x136>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 80067ec:	4b65      	ldr	r3, [pc, #404]	@ (8006984 <process_control_request+0x2b8>)
 80067ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80067f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d000      	beq.n	80067fe <process_control_request+0x132>
 80067fc:	be00      	bkpt	0x0000
        return false;
 80067fe:	2300      	movs	r3, #0
 8006800:	e23b      	b.n	8006c7a <process_control_request+0x5ae>
      }

      switch ( p_request->bRequest ) {
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	785b      	ldrb	r3, [r3, #1]
 8006806:	2b09      	cmp	r3, #9
 8006808:	f200 80e1 	bhi.w	80069ce <process_control_request+0x302>
 800680c:	a201      	add	r2, pc, #4	@ (adr r2, 8006814 <process_control_request+0x148>)
 800680e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006812:	bf00      	nop
 8006814:	0800699d 	.word	0x0800699d
 8006818:	08006961 	.word	0x08006961
 800681c:	080069cf 	.word	0x080069cf
 8006820:	0800693b 	.word	0x0800693b
 8006824:	080069cf 	.word	0x080069cf
 8006828:	0800683d 	.word	0x0800683d
 800682c:	08006921 	.word	0x08006921
 8006830:	080069cf 	.word	0x080069cf
 8006834:	08006861 	.word	0x08006861
 8006838:	08006879 	.word	0x08006879
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 800683c:	6838      	ldr	r0, [r7, #0]
 800683e:	f001 f9d7 	bl	8007bf0 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	885b      	ldrh	r3, [r3, #2]
 8006846:	b29b      	uxth	r3, r3
 8006848:	b2da      	uxtb	r2, r3
 800684a:	79fb      	ldrb	r3, [r7, #7]
 800684c:	4611      	mov	r1, r2
 800684e:	4618      	mov	r0, r3
 8006850:	f001 ff94 	bl	800877c <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8006854:	4a4d      	ldr	r2, [pc, #308]	@ (800698c <process_control_request+0x2c0>)
 8006856:	7813      	ldrb	r3, [r2, #0]
 8006858:	f043 0302 	orr.w	r3, r3, #2
 800685c:	7013      	strb	r3, [r2, #0]
        break;
 800685e:	e0c2      	b.n	80069e6 <process_control_request+0x31a>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8006860:	4b4a      	ldr	r3, [pc, #296]	@ (800698c <process_control_request+0x2c0>)
 8006862:	785b      	ldrb	r3, [r3, #1]
 8006864:	b2db      	uxtb	r3, r3
 8006866:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8006868:	f107 0213 	add.w	r2, r7, #19
 800686c:	79f8      	ldrb	r0, [r7, #7]
 800686e:	2301      	movs	r3, #1
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	f001 f931 	bl	8007ad8 <tud_control_xfer>
        }
        break;
 8006876:	e0b6      	b.n	80069e6 <process_control_request+0x31a>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	885b      	ldrh	r3, [r3, #2]
 800687c:	b29b      	uxth	r3, r3
 800687e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 8006882:	4b42      	ldr	r3, [pc, #264]	@ (800698c <process_control_request+0x2c0>)
 8006884:	785b      	ldrb	r3, [r3, #1]
 8006886:	b2db      	uxtb	r3, r3
 8006888:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800688c:	429a      	cmp	r2, r3
 800688e:	d041      	beq.n	8006914 <process_control_request+0x248>
            if ( _usbd_dev.cfg_num ) {
 8006890:	4b3e      	ldr	r3, [pc, #248]	@ (800698c <process_control_request+0x2c0>)
 8006892:	785b      	ldrb	r3, [r3, #1]
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d014      	beq.n	80068c4 <process_control_request+0x1f8>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 800689a:	79fb      	ldrb	r3, [r7, #7]
 800689c:	2100      	movs	r1, #0
 800689e:	4618      	mov	r0, r3
 80068a0:	f002 f832 	bl	8008908 <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 80068a4:	79fb      	ldrb	r3, [r7, #7]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f002 f896 	bl	80089d8 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 80068ac:	4b37      	ldr	r3, [pc, #220]	@ (800698c <process_control_request+0x2c0>)
 80068ae:	789b      	ldrb	r3, [r3, #2]
 80068b0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 80068b4:	79fb      	ldrb	r3, [r7, #7]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7ff fcd6 	bl	8006268 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 80068bc:	4a33      	ldr	r2, [pc, #204]	@ (800698c <process_control_request+0x2c0>)
 80068be:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80068c2:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 80068c4:	4a31      	ldr	r2, [pc, #196]	@ (800698c <process_control_request+0x2c0>)
 80068c6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80068ca:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 80068cc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d01d      	beq.n	8006910 <process_control_request+0x244>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 80068d4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80068d8:	79fb      	ldrb	r3, [r7, #7]
 80068da:	4611      	mov	r1, r2
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 f9d5 	bl	8006c8c <process_set_config>
 80068e2:	4603      	mov	r3, r0
 80068e4:	f083 0301 	eor.w	r3, r3, #1
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00d      	beq.n	800690a <process_control_request+0x23e>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 80068ee:	4b25      	ldr	r3, [pc, #148]	@ (8006984 <process_control_request+0x2b8>)
 80068f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d000      	beq.n	8006900 <process_control_request+0x234>
 80068fe:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 8006900:	4b22      	ldr	r3, [pc, #136]	@ (800698c <process_control_request+0x2c0>)
 8006902:	2200      	movs	r2, #0
 8006904:	705a      	strb	r2, [r3, #1]
                return false;
 8006906:	2300      	movs	r3, #0
 8006908:	e1b7      	b.n	8006c7a <process_control_request+0x5ae>
              }
              tud_mount_cb();
 800690a:	f7ff fb4f 	bl	8005fac <tud_mount_cb>
 800690e:	e001      	b.n	8006914 <process_control_request+0x248>
            } else {
              tud_umount_cb();
 8006910:	f7ff fb53 	bl	8005fba <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 8006914:	79fb      	ldrb	r3, [r7, #7]
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	4618      	mov	r0, r3
 800691a:	f001 f86b 	bl	80079f4 <tud_control_status>
        }
        break;
 800691e:	e062      	b.n	80069e6 <process_control_request+0x31a>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 8006920:	79fb      	ldrb	r3, [r7, #7]
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fae5 	bl	8006ef4 <process_get_descriptor>
 800692a:	4603      	mov	r3, r0
 800692c:	f083 0301 	eor.w	r3, r3, #1
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d056      	beq.n	80069e4 <process_control_request+0x318>
 8006936:	2300      	movs	r3, #0
 8006938:	e19f      	b.n	8006c7a <process_control_request+0x5ae>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	885b      	ldrh	r3, [r3, #2]
 800693e:	b29b      	uxth	r3, r3
 8006940:	2b01      	cmp	r3, #1
 8006942:	d10b      	bne.n	800695c <process_control_request+0x290>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 8006944:	4a11      	ldr	r2, [pc, #68]	@ (800698c <process_control_request+0x2c0>)
 8006946:	7813      	ldrb	r3, [r2, #0]
 8006948:	f043 0308 	orr.w	r3, r3, #8
 800694c:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 800694e:	79fb      	ldrb	r3, [r7, #7]
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	4618      	mov	r0, r3
 8006954:	f001 f84e 	bl	80079f4 <tud_control_status>
            break;
 8006958:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 800695a:	e044      	b.n	80069e6 <process_control_request+0x31a>
            default: return false;
 800695c:	2300      	movs	r3, #0
 800695e:	e18c      	b.n	8006c7a <process_control_request+0x5ae>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	885b      	ldrh	r3, [r3, #2]
 8006964:	b29b      	uxth	r3, r3
 8006966:	2b01      	cmp	r3, #1
 8006968:	d001      	beq.n	800696e <process_control_request+0x2a2>
 800696a:	2300      	movs	r3, #0
 800696c:	e185      	b.n	8006c7a <process_control_request+0x5ae>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 800696e:	4a07      	ldr	r2, [pc, #28]	@ (800698c <process_control_request+0x2c0>)
 8006970:	7813      	ldrb	r3, [r2, #0]
 8006972:	f023 0308 	bic.w	r3, r3, #8
 8006976:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8006978:	79fb      	ldrb	r3, [r7, #7]
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	4618      	mov	r0, r3
 800697e:	f001 f839 	bl	80079f4 <tud_control_status>
        break;
 8006982:	e030      	b.n	80069e6 <process_control_request+0x31a>
 8006984:	e000edf0 	.word	0xe000edf0
 8006988:	08005fed 	.word	0x08005fed
 800698c:	20000ac8 	.word	0x20000ac8
 8006990:	20000afc 	.word	0x20000afc
 8006994:	20000af8 	.word	0x20000af8
 8006998:	0800aae0 	.word	0x0800aae0

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 800699c:	4b94      	ldr	r3, [pc, #592]	@ (8006bf0 <process_control_request+0x524>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	4b91      	ldr	r3, [pc, #580]	@ (8006bf0 <process_control_request+0x524>)
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	089b      	lsrs	r3, r3, #2
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	4313      	orrs	r3, r2
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 80069be:	f107 0210 	add.w	r2, r7, #16
 80069c2:	79f8      	ldrb	r0, [r7, #7]
 80069c4:	2302      	movs	r3, #2
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	f001 f886 	bl	8007ad8 <tud_control_xfer>
          break;
 80069cc:	e00b      	b.n	80069e6 <process_control_request+0x31a>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 80069ce:	4b89      	ldr	r3, [pc, #548]	@ (8006bf4 <process_control_request+0x528>)
 80069d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80069d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d000      	beq.n	80069e0 <process_control_request+0x314>
 80069de:	be00      	bkpt	0x0000
 80069e0:	2300      	movs	r3, #0
 80069e2:	e14a      	b.n	8006c7a <process_control_request+0x5ae>
        break;
 80069e4:	bf00      	nop
      }
    break;
 80069e6:	e147      	b.n	8006c78 <process_control_request+0x5ac>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	889b      	ldrh	r3, [r3, #4]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80069f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80069f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80069fc:	2b0f      	cmp	r3, #15
 80069fe:	d901      	bls.n	8006a04 <process_control_request+0x338>
 8006a00:	2300      	movs	r3, #0
 8006a02:	e13a      	b.n	8006c7a <process_control_request+0x5ae>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8006a04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a08:	4a79      	ldr	r2, [pc, #484]	@ (8006bf0 <process_control_request+0x524>)
 8006a0a:	4413      	add	r3, r2
 8006a0c:	791b      	ldrb	r3, [r3, #4]
 8006a0e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 8006a12:	2300      	movs	r3, #0
 8006a14:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8006a16:	4b78      	ldr	r3, [pc, #480]	@ (8006bf8 <process_control_request+0x52c>)
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d207      	bcs.n	8006a32 <process_control_request+0x366>
    driver = &_app_driver[drvid];
 8006a22:	4b76      	ldr	r3, [pc, #472]	@ (8006bfc <process_control_request+0x530>)
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006a2a:	015b      	lsls	r3, r3, #5
 8006a2c:	4413      	add	r3, r2
 8006a2e:	623b      	str	r3, [r7, #32]
 8006a30:	e00f      	b.n	8006a52 <process_control_request+0x386>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006a32:	4b71      	ldr	r3, [pc, #452]	@ (8006bf8 <process_control_request+0x52c>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	db08      	blt.n	8006a52 <process_control_request+0x386>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006a40:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006a44:	4a6c      	ldr	r2, [pc, #432]	@ (8006bf8 <process_control_request+0x52c>)
 8006a46:	7812      	ldrb	r2, [r2, #0]
 8006a48:	1a9b      	subs	r3, r3, r2
 8006a4a:	015b      	lsls	r3, r3, #5
 8006a4c:	4a6c      	ldr	r2, [pc, #432]	@ (8006c00 <process_control_request+0x534>)
 8006a4e:	4413      	add	r3, r2
 8006a50:	623b      	str	r3, [r7, #32]
  return driver;
 8006a52:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8006a54:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 8006a56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d101      	bne.n	8006a60 <process_control_request+0x394>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	e10c      	b.n	8006c7a <process_control_request+0x5ae>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 8006a60:	79fb      	ldrb	r3, [r7, #7]
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7ff fe18 	bl	800669c <invoke_class_control>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	f083 0301 	eor.w	r3, r3, #1
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 80fe 	beq.w	8006c76 <process_control_request+0x5aa>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <process_control_request+0x3c0>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	e0f6      	b.n	8006c7a <process_control_request+0x5ae>

        switch(p_request->bRequest) {
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	785b      	ldrb	r3, [r3, #1]
 8006a90:	3b0a      	subs	r3, #10
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d816      	bhi.n	8006ac4 <process_control_request+0x3f8>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8006a96:	2000      	movs	r0, #0
 8006a98:	f001 f89a 	bl	8007bd0 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	785b      	ldrb	r3, [r3, #1]
 8006aa0:	2b0a      	cmp	r3, #10
 8006aa2:	d109      	bne.n	8006ab8 <process_control_request+0x3ec>
              uint8_t alternate = 0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8006aa8:	f107 020f 	add.w	r2, r7, #15
 8006aac:	79f8      	ldrb	r0, [r7, #7]
 8006aae:	2301      	movs	r3, #1
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	f001 f811 	bl	8007ad8 <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 8006ab6:	e007      	b.n	8006ac8 <process_control_request+0x3fc>
              tud_control_status(rhport, p_request);
 8006ab8:	79fb      	ldrb	r3, [r7, #7]
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f000 ff99 	bl	80079f4 <tud_control_status>
          break;
 8006ac2:	e001      	b.n	8006ac8 <process_control_request+0x3fc>

          default: return false;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	e0d8      	b.n	8006c7a <process_control_request+0x5ae>
        }
      }
      break;
 8006ac8:	e0d5      	b.n	8006c76 <process_control_request+0x5aa>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	889b      	ldrh	r3, [r3, #4]
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	83bb      	strh	r3, [r7, #28]
 8006ad2:	8bbb      	ldrh	r3, [r7, #28]
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006ada:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006ade:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006ae0:	7fbb      	ldrb	r3, [r7, #30]
 8006ae2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ae6:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8006ae8:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8006aec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006af0:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006af2:	7ffb      	ldrb	r3, [r7, #31]
 8006af4:	09db      	lsrs	r3, r3, #7
 8006af6:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8006af8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8006afc:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8006b00:	2b05      	cmp	r3, #5
 8006b02:	d90a      	bls.n	8006b1a <process_control_request+0x44e>
 8006b04:	4b3b      	ldr	r3, [pc, #236]	@ (8006bf4 <process_control_request+0x528>)
 8006b06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d000      	beq.n	8006b16 <process_control_request+0x44a>
 8006b14:	be00      	bkpt	0x0000
 8006b16:	2300      	movs	r3, #0
 8006b18:	e0af      	b.n	8006c7a <process_control_request+0x5ae>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8006b1a:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8006b1e:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8006b22:	4933      	ldr	r1, [pc, #204]	@ (8006bf0 <process_control_request+0x524>)
 8006b24:	0052      	lsls	r2, r2, #1
 8006b26:	440a      	add	r2, r1
 8006b28:	4413      	add	r3, r2
 8006b2a:	3314      	adds	r3, #20
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 8006b30:	2300      	movs	r3, #0
 8006b32:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 8006b34:	4b30      	ldr	r3, [pc, #192]	@ (8006bf8 <process_control_request+0x52c>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	7efa      	ldrb	r2, [r7, #27]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d206      	bcs.n	8006b4c <process_control_request+0x480>
    driver = &_app_driver[drvid];
 8006b3e:	4b2f      	ldr	r3, [pc, #188]	@ (8006bfc <process_control_request+0x530>)
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	7efb      	ldrb	r3, [r7, #27]
 8006b44:	015b      	lsls	r3, r3, #5
 8006b46:	4413      	add	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]
 8006b4a:	e00d      	b.n	8006b68 <process_control_request+0x49c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8006bf8 <process_control_request+0x52c>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	7efb      	ldrb	r3, [r7, #27]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	db07      	blt.n	8006b68 <process_control_request+0x49c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006b58:	7efb      	ldrb	r3, [r7, #27]
 8006b5a:	4a27      	ldr	r2, [pc, #156]	@ (8006bf8 <process_control_request+0x52c>)
 8006b5c:	7812      	ldrb	r2, [r2, #0]
 8006b5e:	1a9b      	subs	r3, r3, r2
 8006b60:	015b      	lsls	r3, r3, #5
 8006b62:	4a27      	ldr	r2, [pc, #156]	@ (8006c00 <process_control_request+0x534>)
 8006b64:	4413      	add	r3, r2
 8006b66:	617b      	str	r3, [r7, #20]
  return driver;
 8006b68:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8006b6a:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00c      	beq.n	8006b94 <process_control_request+0x4c8>
        // Forward class request to its driver
        TU_VERIFY(driver);
 8006b7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <process_control_request+0x4b8>
 8006b80:	2300      	movs	r3, #0
 8006b82:	e07a      	b.n	8006c7a <process_control_request+0x5ae>
        return invoke_class_control(rhport, driver, p_request);
 8006b84:	79fb      	ldrb	r3, [r7, #7]
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7ff fd86 	bl	800669c <invoke_class_control>
 8006b90:	4603      	mov	r3, r0
 8006b92:	e072      	b.n	8006c7a <process_control_request+0x5ae>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	785b      	ldrb	r3, [r3, #1]
 8006b98:	2b03      	cmp	r3, #3
 8006b9a:	d017      	beq.n	8006bcc <process_control_request+0x500>
 8006b9c:	2b03      	cmp	r3, #3
 8006b9e:	dc52      	bgt.n	8006c46 <process_control_request+0x57a>
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d002      	beq.n	8006baa <process_control_request+0x4de>
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d011      	beq.n	8006bcc <process_control_request+0x500>
 8006ba8:	e04d      	b.n	8006c46 <process_control_request+0x57a>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8006baa:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8006bae:	79fb      	ldrb	r3, [r7, #7]
 8006bb0:	4611      	mov	r1, r2
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 fec8 	bl	8007948 <usbd_edpt_stalled>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 8006bbc:	f107 020c 	add.w	r2, r7, #12
 8006bc0:	79f8      	ldrb	r0, [r7, #7]
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	f000 ff87 	bl	8007ad8 <tud_control_xfer>
          }
          break;
 8006bca:	e048      	b.n	8006c5e <process_control_request+0x592>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	885b      	ldrh	r3, [r3, #2]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d11d      	bne.n	8006c12 <process_control_request+0x546>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	785b      	ldrb	r3, [r3, #1]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d112      	bne.n	8006c04 <process_control_request+0x538>
                usbd_edpt_clear_stall(rhport, ep_addr);
 8006bde:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8006be2:	79fb      	ldrb	r3, [r7, #7]
 8006be4:	4611      	mov	r1, r2
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 fe70 	bl	80078cc <usbd_edpt_clear_stall>
 8006bec:	e011      	b.n	8006c12 <process_control_request+0x546>
 8006bee:	bf00      	nop
 8006bf0:	20000ac8 	.word	0x20000ac8
 8006bf4:	e000edf0 	.word	0xe000edf0
 8006bf8:	20000afc 	.word	0x20000afc
 8006bfc:	20000af8 	.word	0x20000af8
 8006c00:	0800aae0 	.word	0x0800aae0
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 8006c04:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8006c08:	79fb      	ldrb	r3, [r7, #7]
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 fe1f 	bl	8007850 <usbd_edpt_stall>
              }
            }

            if (driver) {
 8006c12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d021      	beq.n	8006c5c <process_control_request+0x590>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8006c18:	79fb      	ldrb	r3, [r7, #7]
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff fd3c 	bl	800669c <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8006c24:	2000      	movs	r0, #0
 8006c26:	f000 ffd3 	bl	8007bd0 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8006c2a:	4b16      	ldr	r3, [pc, #88]	@ (8006c84 <process_control_request+0x5b8>)
 8006c2c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006c30:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d110      	bne.n	8006c5c <process_control_request+0x590>
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 fed8 	bl	80079f4 <tud_control_status>
            }
          }
          break;
 8006c44:	e00a      	b.n	8006c5c <process_control_request+0x590>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 8006c46:	4b10      	ldr	r3, [pc, #64]	@ (8006c88 <process_control_request+0x5bc>)
 8006c48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d000      	beq.n	8006c58 <process_control_request+0x58c>
 8006c56:	be00      	bkpt	0x0000
            return false;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	e00e      	b.n	8006c7a <process_control_request+0x5ae>
          break;
 8006c5c:	bf00      	nop
        }
      }
    }
    break;
 8006c5e:	e00b      	b.n	8006c78 <process_control_request+0x5ac>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 8006c60:	4b09      	ldr	r3, [pc, #36]	@ (8006c88 <process_control_request+0x5bc>)
 8006c62:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d000      	beq.n	8006c72 <process_control_request+0x5a6>
 8006c70:	be00      	bkpt	0x0000
      return false;
 8006c72:	2300      	movs	r3, #0
 8006c74:	e001      	b.n	8006c7a <process_control_request+0x5ae>
      break;
 8006c76:	bf00      	nop
  }

  return true;
 8006c78:	2301      	movs	r3, #1
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3768      	adds	r7, #104	@ 0x68
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20000ac8 	.word	0x20000ac8
 8006c88:	e000edf0 	.word	0xe000edf0

08006c8c <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b096      	sub	sp, #88	@ 0x58
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	4603      	mov	r3, r0
 8006c94:	460a      	mov	r2, r1
 8006c96:	71fb      	strb	r3, [r7, #7]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8006c9c:	79bb      	ldrb	r3, [r7, #6]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7fb f856 	bl	8001d54 <tud_descriptor_configuration_cb>
 8006ca8:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8006caa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <process_set_config+0x2c>
 8006cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cb2:	785b      	ldrb	r3, [r3, #1]
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d00a      	beq.n	8006cce <process_set_config+0x42>
 8006cb8:	4b87      	ldr	r3, [pc, #540]	@ (8006ed8 <process_set_config+0x24c>)
 8006cba:	623b      	str	r3, [r7, #32]
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d000      	beq.n	8006cca <process_set_config+0x3e>
 8006cc8:	be00      	bkpt	0x0000
 8006cca:	2300      	movs	r3, #0
 8006ccc:	e100      	b.n	8006ed0 <process_set_config+0x244>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8006cce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cd0:	79db      	ldrb	r3, [r3, #7]
 8006cd2:	115b      	asrs	r3, r3, #5
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	b2d9      	uxtb	r1, r3
 8006cda:	4a80      	ldr	r2, [pc, #512]	@ (8006edc <process_set_config+0x250>)
 8006cdc:	7813      	ldrb	r3, [r2, #0]
 8006cde:	f361 1304 	bfi	r3, r1, #4, #1
 8006ce2:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8006ce4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ce6:	79db      	ldrb	r3, [r3, #7]
 8006ce8:	119b      	asrs	r3, r3, #6
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	b2d9      	uxtb	r1, r3
 8006cf0:	4a7a      	ldr	r2, [pc, #488]	@ (8006edc <process_set_config+0x250>)
 8006cf2:	7813      	ldrb	r3, [r2, #0]
 8006cf4:	f361 1345 	bfi	r3, r1, #5, #1
 8006cf8:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8006cfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cfc:	3309      	adds	r3, #9
 8006cfe:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8006d00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d02:	885b      	ldrh	r3, [r3, #2]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	461a      	mov	r2, r3
 8006d08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d0a:	4413      	add	r3, r2
 8006d0c:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 8006d0e:	e0d9      	b.n	8006ec4 <process_set_config+0x238>
  {
    uint8_t assoc_itf_count = 1;
 8006d10:	2301      	movs	r3, #1
 8006d12:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8006d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d18:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8006d20:	2b0b      	cmp	r3, #11
 8006d22:	d10f      	bne.n	8006d44 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8006d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d26:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 8006d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d2a:	78db      	ldrb	r3, [r3, #3]
 8006d2c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8006d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d32:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8006d42:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d46:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d00a      	beq.n	8006d68 <process_set_config+0xdc>
 8006d52:	4b61      	ldr	r3, [pc, #388]	@ (8006ed8 <process_set_config+0x24c>)
 8006d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d000      	beq.n	8006d64 <process_set_config+0xd8>
 8006d62:	be00      	bkpt	0x0000
 8006d64:	2300      	movs	r3, #0
 8006d66:	e0b3      	b.n	8006ed0 <process_set_config+0x244>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8006d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d6a:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8006d6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8006d74:	2300      	movs	r3, #0
 8006d76:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8006d7a:	e089      	b.n	8006e90 <process_set_config+0x204>
 8006d7c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8006d80:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8006d82:	2300      	movs	r3, #0
 8006d84:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8006d86:	4b56      	ldr	r3, [pc, #344]	@ (8006ee0 <process_set_config+0x254>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	7bfa      	ldrb	r2, [r7, #15]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d206      	bcs.n	8006d9e <process_set_config+0x112>
    driver = &_app_driver[drvid];
 8006d90:	4b54      	ldr	r3, [pc, #336]	@ (8006ee4 <process_set_config+0x258>)
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
 8006d96:	015b      	lsls	r3, r3, #5
 8006d98:	4413      	add	r3, r2
 8006d9a:	60bb      	str	r3, [r7, #8]
 8006d9c:	e00d      	b.n	8006dba <process_set_config+0x12e>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006d9e:	4b50      	ldr	r3, [pc, #320]	@ (8006ee0 <process_set_config+0x254>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	1c5a      	adds	r2, r3, #1
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	db07      	blt.n	8006dba <process_set_config+0x12e>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
 8006dac:	4a4c      	ldr	r2, [pc, #304]	@ (8006ee0 <process_set_config+0x254>)
 8006dae:	7812      	ldrb	r2, [r2, #0]
 8006db0:	1a9b      	subs	r3, r3, r2
 8006db2:	015b      	lsls	r3, r3, #5
 8006db4:	4a4c      	ldr	r2, [pc, #304]	@ (8006ee8 <process_set_config+0x25c>)
 8006db6:	4413      	add	r3, r2
 8006db8:	60bb      	str	r3, [r7, #8]
  return driver;
 8006dba:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8006dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 8006dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10a      	bne.n	8006dda <process_set_config+0x14e>
 8006dc4:	4b44      	ldr	r3, [pc, #272]	@ (8006ed8 <process_set_config+0x24c>)
 8006dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d000      	beq.n	8006dd6 <process_set_config+0x14a>
 8006dd4:	be00      	bkpt	0x0000
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e07a      	b.n	8006ed0 <process_set_config+0x244>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8006dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8006de0:	79f8      	ldrb	r0, [r7, #7]
 8006de2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006de4:	4798      	blx	r3
 8006de6:	4603      	mov	r3, r0
 8006de8:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8006dea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d94a      	bls.n	8006e86 <process_set_config+0x1fa>
 8006df0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006df2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d846      	bhi.n	8006e86 <process_set_config+0x1fa>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 8006df8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d107      	bne.n	8006e10 <process_set_config+0x184>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 8006e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	4a39      	ldr	r2, [pc, #228]	@ (8006eec <process_set_config+0x260>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d102      	bne.n	8006e10 <process_set_config+0x184>
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8006e10:	2300      	movs	r3, #0
 8006e12:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8006e16:	e024      	b.n	8006e62 <process_set_config+0x1d6>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8006e18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e1a:	789a      	ldrb	r2, [r3, #2]
 8006e1c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8006e20:	4413      	add	r3, r2
 8006e22:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8006e26:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8006edc <process_set_config+0x250>)
 8006e2c:	4413      	add	r3, r2
 8006e2e:	791b      	ldrb	r3, [r3, #4]
 8006e30:	2bff      	cmp	r3, #255	@ 0xff
 8006e32:	d00a      	beq.n	8006e4a <process_set_config+0x1be>
 8006e34:	4b28      	ldr	r3, [pc, #160]	@ (8006ed8 <process_set_config+0x24c>)
 8006e36:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d000      	beq.n	8006e46 <process_set_config+0x1ba>
 8006e44:	be00      	bkpt	0x0000
 8006e46:	2300      	movs	r3, #0
 8006e48:	e042      	b.n	8006ed0 <process_set_config+0x244>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8006e4a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006e4e:	4a23      	ldr	r2, [pc, #140]	@ (8006edc <process_set_config+0x250>)
 8006e50:	4413      	add	r3, r2
 8006e52:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8006e56:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8006e58:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8006e62:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8006e66:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d3d4      	bcc.n	8006e18 <process_set_config+0x18c>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8006e6e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8006e72:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006e74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e76:	481e      	ldr	r0, [pc, #120]	@ (8006ef0 <process_set_config+0x264>)
 8006e78:	f003 f81c 	bl	8009eb4 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8006e7c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e7e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e80:	4413      	add	r3, r2
 8006e82:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 8006e84:	e00c      	b.n	8006ea0 <process_set_config+0x214>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8006e86:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8006e90:	4b13      	ldr	r3, [pc, #76]	@ (8006ee0 <process_set_config+0x254>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	f6bf af6e 	bge.w	8006d7c <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8006ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8006ee0 <process_set_config+0x254>)
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	da0a      	bge.n	8006ec4 <process_set_config+0x238>
 8006eae:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed8 <process_set_config+0x24c>)
 8006eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d000      	beq.n	8006ec0 <process_set_config+0x234>
 8006ebe:	be00      	bkpt	0x0000
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	e005      	b.n	8006ed0 <process_set_config+0x244>
  while( p_desc < desc_end )
 8006ec4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	f4ff af21 	bcc.w	8006d10 <process_set_config+0x84>
  }

  return true;
 8006ece:	2301      	movs	r3, #1
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3758      	adds	r7, #88	@ 0x58
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	e000edf0 	.word	0xe000edf0
 8006edc:	20000ac8 	.word	0x20000ac8
 8006ee0:	20000afc 	.word	0x20000afc
 8006ee4:	20000af8 	.word	0x20000af8
 8006ee8:	0800aae0 	.word	0x0800aae0
 8006eec:	08004421 	.word	0x08004421
 8006ef0:	20000adc 	.word	0x20000adc

08006ef4 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b094      	sub	sp, #80	@ 0x50
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	4603      	mov	r3, r0
 8006efc:	6039      	str	r1, [r7, #0]
 8006efe:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	885b      	ldrh	r3, [r3, #2]
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8006f08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f0a:	0a1b      	lsrs	r3, r3, #8
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	885b      	ldrh	r3, [r3, #2]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8006f1c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 8006f24:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	2b0e      	cmp	r3, #14
 8006f2c:	f200 80b4 	bhi.w	8007098 <process_get_descriptor+0x1a4>
 8006f30:	a201      	add	r2, pc, #4	@ (adr r2, 8006f38 <process_get_descriptor+0x44>)
 8006f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f36:	bf00      	nop
 8006f38:	08006f75 	.word	0x08006f75
 8006f3c:	08006fd9 	.word	0x08006fd9
 8006f40:	0800703f 	.word	0x0800703f
 8006f44:	08007099 	.word	0x08007099
 8006f48:	08007099 	.word	0x08007099
 8006f4c:	08007073 	.word	0x08007073
 8006f50:	08006fd9 	.word	0x08006fd9
 8006f54:	08007099 	.word	0x08007099
 8006f58:	08007099 	.word	0x08007099
 8006f5c:	08007099 	.word	0x08007099
 8006f60:	08007099 	.word	0x08007099
 8006f64:	08007099 	.word	0x08007099
 8006f68:	08007099 	.word	0x08007099
 8006f6c:	08007099 	.word	0x08007099
 8006f70:	08006fa7 	.word	0x08006fa7
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8006f74:	f7fa fed6 	bl	8001d24 <tud_descriptor_device_cb>
 8006f78:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 8006f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10a      	bne.n	8006f96 <process_get_descriptor+0xa2>
 8006f80:	4b48      	ldr	r3, [pc, #288]	@ (80070a4 <process_get_descriptor+0x1b0>)
 8006f82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d000      	beq.n	8006f92 <process_get_descriptor+0x9e>
 8006f90:	be00      	bkpt	0x0000
 8006f92:	2300      	movs	r3, #0
 8006f94:	e081      	b.n	800709a <process_get_descriptor+0x1a6>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8006f96:	79f8      	ldrb	r0, [r7, #7]
 8006f98:	2312      	movs	r3, #18
 8006f9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f9c:	6839      	ldr	r1, [r7, #0]
 8006f9e:	f000 fd9b 	bl	8007ad8 <tud_control_xfer>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	e079      	b.n	800709a <process_get_descriptor+0x1a6>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8006fa6:	f7fe ffe5 	bl	8005f74 <tud_descriptor_bos_cb>
 8006faa:	4603      	mov	r3, r0
 8006fac:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 8006fae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <process_get_descriptor+0xc4>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	e070      	b.n	800709a <process_get_descriptor+0x1a6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8006fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fba:	3302      	adds	r3, #2
 8006fbc:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8006fc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006fcc:	79f8      	ldrb	r0, [r7, #7]
 8006fce:	6839      	ldr	r1, [r7, #0]
 8006fd0:	f000 fd82 	bl	8007ad8 <tud_control_xfer>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	e060      	b.n	800709a <process_get_descriptor+0x1a6>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 8006fd8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d114      	bne.n	800700a <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8006fe0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7fa feb5 	bl	8001d54 <tud_descriptor_configuration_cb>
 8006fea:	4603      	mov	r3, r0
 8006fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 8006fee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d116      	bne.n	8007022 <process_get_descriptor+0x12e>
 8006ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80070a4 <process_get_descriptor+0x1b0>)
 8006ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b00      	cmp	r3, #0
 8007002:	d000      	beq.n	8007006 <process_get_descriptor+0x112>
 8007004:	be00      	bkpt	0x0000
 8007006:	2300      	movs	r3, #0
 8007008:	e047      	b.n	800709a <process_get_descriptor+0x1a6>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 800700a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800700e:	4618      	mov	r0, r3
 8007010:	f7fe ffc0 	bl	8005f94 <tud_descriptor_other_speed_configuration_cb>
 8007014:	4603      	mov	r3, r0
 8007016:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 8007018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <process_get_descriptor+0x12e>
 800701e:	2300      	movs	r3, #0
 8007020:	e03b      	b.n	800709a <process_get_descriptor+0x1a6>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8007022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007024:	3302      	adds	r3, #2
 8007026:	61fb      	str	r3, [r7, #28]
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 800702e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007030:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007032:	79f8      	ldrb	r0, [r7, #7]
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	f000 fd4f 	bl	8007ad8 <tud_control_xfer>
 800703a:	4603      	mov	r3, r0
 800703c:	e02d      	b.n	800709a <process_get_descriptor+0x1a6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	889b      	ldrh	r3, [r3, #4]
 8007042:	b29a      	uxth	r2, r3
 8007044:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007048:	4611      	mov	r1, r2
 800704a:	4618      	mov	r0, r3
 800704c:	f7fa fe90 	bl	8001d70 <tud_descriptor_string_cb>
 8007050:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 8007052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <process_get_descriptor+0x168>
 8007058:	2300      	movs	r3, #0
 800705a:	e01e      	b.n	800709a <process_get_descriptor+0x1a6>
 800705c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705e:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8007064:	79f8      	ldrb	r0, [r7, #7]
 8007066:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	f000 fd35 	bl	8007ad8 <tud_control_xfer>
 800706e:	4603      	mov	r3, r0
 8007070:	e013      	b.n	800709a <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8007072:	f7fe ff87 	bl	8005f84 <tud_descriptor_device_qualifier_cb>
 8007076:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 8007078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <process_get_descriptor+0x18e>
 800707e:	2300      	movs	r3, #0
 8007080:	e00b      	b.n	800709a <process_get_descriptor+0x1a6>
 8007082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007084:	617b      	str	r3, [r7, #20]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 800708a:	79f8      	ldrb	r0, [r7, #7]
 800708c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	f000 fd22 	bl	8007ad8 <tud_control_xfer>
 8007094:	4603      	mov	r3, r0
 8007096:	e000      	b.n	800709a <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    default: return false;
 8007098:	2300      	movs	r3, #0
  }
}
 800709a:	4618      	mov	r0, r3
 800709c:	3750      	adds	r7, #80	@ 0x50
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	e000edf0 	.word	0xe000edf0

080070a8 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b0a0      	sub	sp, #128	@ 0x80
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	460b      	mov	r3, r1
 80070b2:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 80070b4:	2300      	movs	r3, #0
 80070b6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	785b      	ldrb	r3, [r3, #1]
 80070be:	3b02      	subs	r3, #2
 80070c0:	2b04      	cmp	r3, #4
 80070c2:	f200 8175 	bhi.w	80073b0 <dcd_event_handler+0x308>
 80070c6:	a201      	add	r2, pc, #4	@ (adr r2, 80070cc <dcd_event_handler+0x24>)
 80070c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070cc:	080070e1 	.word	0x080070e1
 80070d0:	08007151 	.word	0x08007151
 80070d4:	0800710d 	.word	0x0800710d
 80070d8:	0800712f 	.word	0x0800712f
 80070dc:	0800737d 	.word	0x0800737d
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 80070e0:	4aac      	ldr	r2, [pc, #688]	@ (8007394 <dcd_event_handler+0x2ec>)
 80070e2:	7813      	ldrb	r3, [r2, #0]
 80070e4:	f023 0301 	bic.w	r3, r3, #1
 80070e8:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 80070ea:	4aaa      	ldr	r2, [pc, #680]	@ (8007394 <dcd_event_handler+0x2ec>)
 80070ec:	7813      	ldrb	r3, [r2, #0]
 80070ee:	f023 0302 	bic.w	r3, r3, #2
 80070f2:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 80070f4:	4ba7      	ldr	r3, [pc, #668]	@ (8007394 <dcd_event_handler+0x2ec>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 80070fa:	4aa6      	ldr	r2, [pc, #664]	@ (8007394 <dcd_event_handler+0x2ec>)
 80070fc:	7813      	ldrb	r3, [r2, #0]
 80070fe:	f023 0304 	bic.w	r3, r3, #4
 8007102:	7013      	strb	r3, [r2, #0]
      send = true;
 8007104:	2301      	movs	r3, #1
 8007106:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 800710a:	e15a      	b.n	80073c2 <dcd_event_handler+0x31a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 800710c:	4ba1      	ldr	r3, [pc, #644]	@ (8007394 <dcd_event_handler+0x2ec>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 814e 	beq.w	80073b8 <dcd_event_handler+0x310>
        _usbd_dev.suspended = 1;
 800711c:	4a9d      	ldr	r2, [pc, #628]	@ (8007394 <dcd_event_handler+0x2ec>)
 800711e:	7813      	ldrb	r3, [r2, #0]
 8007120:	f043 0304 	orr.w	r3, r3, #4
 8007124:	7013      	strb	r3, [r2, #0]
        send = true;
 8007126:	2301      	movs	r3, #1
 8007128:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 800712c:	e144      	b.n	80073b8 <dcd_event_handler+0x310>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 800712e:	4b99      	ldr	r3, [pc, #612]	@ (8007394 <dcd_event_handler+0x2ec>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 813f 	beq.w	80073bc <dcd_event_handler+0x314>
        _usbd_dev.suspended = 0;
 800713e:	4a95      	ldr	r2, [pc, #596]	@ (8007394 <dcd_event_handler+0x2ec>)
 8007140:	7813      	ldrb	r3, [r2, #0]
 8007142:	f023 0304 	bic.w	r3, r3, #4
 8007146:	7013      	strb	r3, [r2, #0]
        send = true;
 8007148:	2301      	movs	r3, #1
 800714a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 800714e:	e135      	b.n	80073bc <dcd_event_handler+0x314>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8007150:	2300      	movs	r3, #0
 8007152:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8007156:	e039      	b.n	80071cc <dcd_event_handler+0x124>
 8007158:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800715c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 8007160:	2300      	movs	r3, #0
 8007162:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 8007164:	4b8c      	ldr	r3, [pc, #560]	@ (8007398 <dcd_event_handler+0x2f0>)
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800716c:	429a      	cmp	r2, r3
 800716e:	d207      	bcs.n	8007180 <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 8007170:	4b8a      	ldr	r3, [pc, #552]	@ (800739c <dcd_event_handler+0x2f4>)
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007178:	015b      	lsls	r3, r3, #5
 800717a:	4413      	add	r3, r2
 800717c:	673b      	str	r3, [r7, #112]	@ 0x70
 800717e:	e00f      	b.n	80071a0 <dcd_event_handler+0xf8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007180:	4b85      	ldr	r3, [pc, #532]	@ (8007398 <dcd_event_handler+0x2f0>)
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800718a:	429a      	cmp	r2, r3
 800718c:	db08      	blt.n	80071a0 <dcd_event_handler+0xf8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800718e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007192:	4a81      	ldr	r2, [pc, #516]	@ (8007398 <dcd_event_handler+0x2f0>)
 8007194:	7812      	ldrb	r2, [r2, #0]
 8007196:	1a9b      	subs	r3, r3, r2
 8007198:	015b      	lsls	r3, r3, #5
 800719a:	4a81      	ldr	r2, [pc, #516]	@ (80073a0 <dcd_event_handler+0x2f8>)
 800719c:	4413      	add	r3, r2
 800719e:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 80071a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 80071a2:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 80071a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00b      	beq.n	80071c2 <dcd_event_handler+0x11a>
 80071aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d007      	beq.n	80071c2 <dcd_event_handler+0x11a>
          driver->sof(event->rhport, event->sof.frame_count);
 80071b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	7810      	ldrb	r0, [r2, #0]
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	6852      	ldr	r2, [r2, #4]
 80071be:	4611      	mov	r1, r2
 80071c0:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80071c2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80071c6:	3301      	adds	r3, #1
 80071c8:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80071cc:	4b72      	ldr	r3, [pc, #456]	@ (8007398 <dcd_event_handler+0x2f0>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	1c5a      	adds	r2, r3, #1
 80071d2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80071d6:	429a      	cmp	r2, r3
 80071d8:	dabe      	bge.n	8007158 <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 80071da:	4b6e      	ldr	r3, [pc, #440]	@ (8007394 <dcd_event_handler+0x2ec>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d05a      	beq.n	800729e <dcd_event_handler+0x1f6>
        _usbd_dev.suspended = 0;
 80071e8:	4a6a      	ldr	r2, [pc, #424]	@ (8007394 <dcd_event_handler+0x2ec>)
 80071ea:	7813      	ldrb	r3, [r2, #0]
 80071ec:	f023 0304 	bic.w	r3, r3, #4
 80071f0:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 80071f2:	f107 0314 	add.w	r3, r7, #20
 80071f6:	2200      	movs	r2, #0
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	605a      	str	r2, [r3, #4]
 80071fc:	609a      	str	r2, [r3, #8]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	753b      	strb	r3, [r7, #20]
 8007204:	2305      	movs	r3, #5
 8007206:	757b      	strb	r3, [r7, #21]
 8007208:	f107 0314 	add.w	r3, r7, #20
 800720c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800720e:	78fb      	ldrb	r3, [r7, #3]
 8007210:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8007214:	4b63      	ldr	r3, [pc, #396]	@ (80073a4 <dcd_event_handler+0x2fc>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	667b      	str	r3, [r7, #100]	@ 0x64
 800721a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800721c:	663b      	str	r3, [r7, #96]	@ 0x60
 800721e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8007222:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8007226:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800722a:	f083 0301 	eor.w	r3, r3, #1
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <dcd_event_handler+0x194>
    qhdl->interrupt_set(false);
 8007234:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2000      	movs	r0, #0
 800723a:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 800723c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800723e:	3304      	adds	r3, #4
 8007240:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007242:	4618      	mov	r0, r3
 8007244:	f7fe fde9 	bl	8005e1a <tu_fifo_write>
 8007248:	4603      	mov	r3, r0
 800724a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 800724e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007252:	f083 0301 	eor.w	r3, r3, #1
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <dcd_event_handler+0x1bc>
    qhdl->interrupt_set(true);
 800725c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2001      	movs	r0, #1
 8007262:	4798      	blx	r3
  }

  return success;
 8007264:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8007268:	f083 0301 	eor.w	r3, r3, #1
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d009      	beq.n	8007286 <dcd_event_handler+0x1de>
 8007272:	4b4d      	ldr	r3, [pc, #308]	@ (80073a8 <dcd_event_handler+0x300>)
 8007274:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007276:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00c      	beq.n	800729c <dcd_event_handler+0x1f4>
 8007282:	be00      	bkpt	0x0000
 8007284:	e00a      	b.n	800729c <dcd_event_handler+0x1f4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8007286:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007288:	7818      	ldrb	r0, [r3, #0]
 800728a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800728c:	785b      	ldrb	r3, [r3, #1]
 800728e:	4619      	mov	r1, r3
 8007290:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8007294:	461a      	mov	r2, r3
 8007296:	f7fe fe55 	bl	8005f44 <tud_event_hook_cb>
  return true;
 800729a:	e000      	b.n	800729e <dcd_event_handler+0x1f6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 800729c:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 800729e:	4b3d      	ldr	r3, [pc, #244]	@ (8007394 <dcd_event_handler+0x2ec>)
 80072a0:	78db      	ldrb	r3, [r3, #3]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80072a6:	2300      	movs	r3, #0
 80072a8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80072ac:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80072b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80072b2:	fa22 f303 	lsr.w	r3, r2, r3
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	bf14      	ite	ne
 80072be:	2301      	movne	r3, #1
 80072c0:	2300      	moveq	r3, #0
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d07b      	beq.n	80073c0 <dcd_event_handler+0x318>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 80072c8:	f107 0308 	add.w	r3, r7, #8
 80072cc:	2200      	movs	r2, #0
 80072ce:	601a      	str	r2, [r3, #0]
 80072d0:	605a      	str	r2, [r3, #4]
 80072d2:	609a      	str	r2, [r3, #8]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	723b      	strb	r3, [r7, #8]
 80072da:	2303      	movs	r3, #3
 80072dc:	727b      	strb	r3, [r7, #9]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	60fb      	str	r3, [r7, #12]
 80072e4:	f107 0308 	add.w	r3, r7, #8
 80072e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80072f0:	4b2c      	ldr	r3, [pc, #176]	@ (80073a4 <dcd_event_handler+0x2fc>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80072f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80072fa:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80072fe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 8007302:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007306:	f083 0301 	eor.w	r3, r3, #1
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b00      	cmp	r3, #0
 800730e:	d003      	beq.n	8007318 <dcd_event_handler+0x270>
    qhdl->interrupt_set(false);
 8007310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2000      	movs	r0, #0
 8007316:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8007318:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800731a:	3304      	adds	r3, #4
 800731c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800731e:	4618      	mov	r0, r3
 8007320:	f7fe fd7b 	bl	8005e1a <tu_fifo_write>
 8007324:	4603      	mov	r3, r0
 8007326:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 800732a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800732e:	f083 0301 	eor.w	r3, r3, #1
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <dcd_event_handler+0x298>
    qhdl->interrupt_set(true);
 8007338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2001      	movs	r0, #1
 800733e:	4798      	blx	r3
  return success;
 8007340:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007344:	f083 0301 	eor.w	r3, r3, #1
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d009      	beq.n	8007362 <dcd_event_handler+0x2ba>
 800734e:	4b16      	ldr	r3, [pc, #88]	@ (80073a8 <dcd_event_handler+0x300>)
 8007350:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00c      	beq.n	8007378 <dcd_event_handler+0x2d0>
 800735e:	be00      	bkpt	0x0000
 8007360:	e00a      	b.n	8007378 <dcd_event_handler+0x2d0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8007362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007364:	7818      	ldrb	r0, [r3, #0]
 8007366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007368:	785b      	ldrb	r3, [r3, #1]
 800736a:	4619      	mov	r1, r3
 800736c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007370:	461a      	mov	r2, r3
 8007372:	f7fe fde7 	bl	8005f44 <tud_event_hook_cb>
  return true;
 8007376:	e000      	b.n	800737a <dcd_event_handler+0x2d2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8007378:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 800737a:	e021      	b.n	80073c0 <dcd_event_handler+0x318>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 800737c:	4b0b      	ldr	r3, [pc, #44]	@ (80073ac <dcd_event_handler+0x304>)
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	b2db      	uxtb	r3, r3
 8007382:	3301      	adds	r3, #1
 8007384:	b2da      	uxtb	r2, r3
 8007386:	4b09      	ldr	r3, [pc, #36]	@ (80073ac <dcd_event_handler+0x304>)
 8007388:	701a      	strb	r2, [r3, #0]
      send = true;
 800738a:	2301      	movs	r3, #1
 800738c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8007390:	e017      	b.n	80073c2 <dcd_event_handler+0x31a>
 8007392:	bf00      	nop
 8007394:	20000ac8 	.word	0x20000ac8
 8007398:	20000afc 	.word	0x20000afc
 800739c:	20000af8 	.word	0x20000af8
 80073a0:	0800aae0 	.word	0x0800aae0
 80073a4:	20000bc0 	.word	0x20000bc0
 80073a8:	e000edf0 	.word	0xe000edf0
 80073ac:	20000af4 	.word	0x20000af4

    default:
      send = true;
 80073b0:	2301      	movs	r3, #1
 80073b2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 80073b6:	e004      	b.n	80073c2 <dcd_event_handler+0x31a>
      break;
 80073b8:	bf00      	nop
 80073ba:	e002      	b.n	80073c2 <dcd_event_handler+0x31a>
      break;
 80073bc:	bf00      	nop
 80073be:	e000      	b.n	80073c2 <dcd_event_handler+0x31a>
      break;
 80073c0:	bf00      	nop
  }

  if (send) {
 80073c2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d049      	beq.n	800745e <dcd_event_handler+0x3b6>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ce:	78fb      	ldrb	r3, [r7, #3]
 80073d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80073d4:	4b24      	ldr	r3, [pc, #144]	@ (8007468 <dcd_event_handler+0x3c0>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80073e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 80073e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073ea:	f083 0301 	eor.w	r3, r3, #1
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <dcd_event_handler+0x354>
    qhdl->interrupt_set(false);
 80073f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2000      	movs	r0, #0
 80073fa:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 80073fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073fe:	3304      	adds	r3, #4
 8007400:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007402:	4618      	mov	r0, r3
 8007404:	f7fe fd09 	bl	8005e1a <tu_fifo_write>
 8007408:	4603      	mov	r3, r0
 800740a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 800740e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007412:	f083 0301 	eor.w	r3, r3, #1
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <dcd_event_handler+0x37c>
    qhdl->interrupt_set(true);
 800741c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2001      	movs	r0, #1
 8007422:	4798      	blx	r3
  return success;
 8007424:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007428:	f083 0301 	eor.w	r3, r3, #1
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d009      	beq.n	8007446 <dcd_event_handler+0x39e>
 8007432:	4b0e      	ldr	r3, [pc, #56]	@ (800746c <dcd_event_handler+0x3c4>)
 8007434:	623b      	str	r3, [r7, #32]
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00c      	beq.n	800745c <dcd_event_handler+0x3b4>
 8007442:	be00      	bkpt	0x0000
 8007444:	e00a      	b.n	800745c <dcd_event_handler+0x3b4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8007446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007448:	7818      	ldrb	r0, [r3, #0]
 800744a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800744c:	785b      	ldrb	r3, [r3, #1]
 800744e:	4619      	mov	r1, r3
 8007450:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007454:	461a      	mov	r2, r3
 8007456:	f7fe fd75 	bl	8005f44 <tud_event_hook_cb>
  return true;
 800745a:	e000      	b.n	800745e <dcd_event_handler+0x3b6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 800745c:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 800745e:	bf00      	nop
 8007460:	3780      	adds	r7, #128	@ 0x80
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20000bc0 	.word	0x20000bc0
 800746c:	e000edf0 	.word	0xe000edf0

08007470 <usbd_int_set>:

//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled) {
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	4603      	mov	r3, r0
 8007478:	71fb      	strb	r3, [r7, #7]
  if (enabled) {
 800747a:	79fb      	ldrb	r3, [r7, #7]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <usbd_int_set+0x1c>
    dcd_int_enable(_usbd_rhport);
 8007480:	4b07      	ldr	r3, [pc, #28]	@ (80074a0 <usbd_int_set+0x30>)
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	4618      	mov	r0, r3
 8007486:	f001 f929 	bl	80086dc <dcd_int_enable>
  } else {
    dcd_int_disable(_usbd_rhport);
  }
}
 800748a:	e004      	b.n	8007496 <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 800748c:	4b04      	ldr	r3, [pc, #16]	@ (80074a0 <usbd_int_set+0x30>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	4618      	mov	r0, r3
 8007492:	f001 f94b 	bl	800872c <dcd_int_disable>
}
 8007496:	bf00      	nop
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	2000006d 	.word	0x2000006d

080074a4 <usbd_spin_lock>:

void usbd_spin_lock(bool in_isr) {
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	4603      	mov	r3, r0
 80074ac:	71fb      	strb	r3, [r7, #7]
 80074ae:	4b09      	ldr	r3, [pc, #36]	@ (80074d4 <usbd_spin_lock+0x30>)
 80074b0:	60fb      	str	r3, [r7, #12]
 80074b2:	79fb      	ldrb	r3, [r7, #7]
 80074b4:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 80074b6:	7afb      	ldrb	r3, [r7, #11]
 80074b8:	f083 0301 	eor.w	r3, r3, #1
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <usbd_spin_lock+0x26>
    ctx->interrupt_set(false);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2000      	movs	r0, #0
 80074c8:	4798      	blx	r3
}
 80074ca:	bf00      	nop
  osal_spin_lock(&_usbd_spin, in_isr);
}
 80074cc:	bf00      	nop
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	20000070 	.word	0x20000070

080074d8 <usbd_spin_unlock>:
void usbd_spin_unlock(bool in_isr) {
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	4603      	mov	r3, r0
 80074e0:	71fb      	strb	r3, [r7, #7]
 80074e2:	4b09      	ldr	r3, [pc, #36]	@ (8007508 <usbd_spin_unlock+0x30>)
 80074e4:	60fb      	str	r3, [r7, #12]
 80074e6:	79fb      	ldrb	r3, [r7, #7]
 80074e8:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 80074ea:	7afb      	ldrb	r3, [r7, #11]
 80074ec:	f083 0301 	eor.w	r3, r3, #1
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <usbd_spin_unlock+0x26>
    ctx->interrupt_set(true);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2001      	movs	r0, #1
 80074fc:	4798      	blx	r3
}
 80074fe:	bf00      	nop
  osal_spin_unlock(&_usbd_spin, in_isr);
}
 8007500:	bf00      	nop
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	20000070 	.word	0x20000070

0800750c <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08a      	sub	sp, #40	@ 0x28
 8007510:	af00      	add	r7, sp, #0
 8007512:	6039      	str	r1, [r7, #0]
 8007514:	4611      	mov	r1, r2
 8007516:	461a      	mov	r2, r3
 8007518:	4603      	mov	r3, r0
 800751a:	71fb      	strb	r3, [r7, #7]
 800751c:	460b      	mov	r3, r1
 800751e:	71bb      	strb	r3, [r7, #6]
 8007520:	4613      	mov	r3, r2
 8007522:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8007524:	2300      	movs	r3, #0
 8007526:	627b      	str	r3, [r7, #36]	@ 0x24
 8007528:	e04d      	b.n	80075c6 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	785b      	ldrb	r3, [r3, #1]
 8007532:	2b05      	cmp	r3, #5
 8007534:	d108      	bne.n	8007548 <usbd_open_edpt_pair+0x3c>
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	78db      	ldrb	r3, [r3, #3]
 800753a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800753e:	b2db      	uxtb	r3, r3
 8007540:	461a      	mov	r2, r3
 8007542:	797b      	ldrb	r3, [r7, #5]
 8007544:	4293      	cmp	r3, r2
 8007546:	d00a      	beq.n	800755e <usbd_open_edpt_pair+0x52>
 8007548:	4b23      	ldr	r3, [pc, #140]	@ (80075d8 <usbd_open_edpt_pair+0xcc>)
 800754a:	61bb      	str	r3, [r7, #24]
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	2b00      	cmp	r3, #0
 8007556:	d000      	beq.n	800755a <usbd_open_edpt_pair+0x4e>
 8007558:	be00      	bkpt	0x0000
 800755a:	2300      	movs	r3, #0
 800755c:	e038      	b.n	80075d0 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	6a39      	ldr	r1, [r7, #32]
 8007562:	4618      	mov	r0, r3
 8007564:	f000 f83a 	bl	80075dc <usbd_edpt_open>
 8007568:	4603      	mov	r3, r0
 800756a:	f083 0301 	eor.w	r3, r3, #1
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00a      	beq.n	800758a <usbd_open_edpt_pair+0x7e>
 8007574:	4b18      	ldr	r3, [pc, #96]	@ (80075d8 <usbd_open_edpt_pair+0xcc>)
 8007576:	61fb      	str	r3, [r7, #28]
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b00      	cmp	r3, #0
 8007582:	d000      	beq.n	8007586 <usbd_open_edpt_pair+0x7a>
 8007584:	be00      	bkpt	0x0000
 8007586:	2300      	movs	r3, #0
 8007588:	e022      	b.n	80075d0 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	789b      	ldrb	r3, [r3, #2]
 800758e:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007590:	7dfb      	ldrb	r3, [r7, #23]
 8007592:	09db      	lsrs	r3, r3, #7
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b01      	cmp	r3, #1
 8007598:	d104      	bne.n	80075a4 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	789a      	ldrb	r2, [r3, #2]
 800759e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075a0:	701a      	strb	r2, [r3, #0]
 80075a2:	e003      	b.n	80075ac <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	789a      	ldrb	r2, [r3, #2]
 80075a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075aa:	701a      	strb	r2, [r3, #0]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	461a      	mov	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 80075be:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 80075c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c2:	3301      	adds	r3, #1
 80075c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80075c6:	79bb      	ldrb	r3, [r7, #6]
 80075c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ca:	429a      	cmp	r2, r3
 80075cc:	dbad      	blt.n	800752a <usbd_open_edpt_pair+0x1e>
  }

  return true;
 80075ce:	2301      	movs	r3, #1
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3728      	adds	r7, #40	@ 0x28
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	e000edf0 	.word	0xe000edf0

080075dc <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	4603      	mov	r3, r0
 80075e4:	6039      	str	r1, [r7, #0]
 80075e6:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 80075e8:	4b1c      	ldr	r3, [pc, #112]	@ (800765c <usbd_edpt_open+0x80>)
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	789b      	ldrb	r3, [r3, #2]
 80075f2:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b05      	cmp	r3, #5
 80075fe:	d90a      	bls.n	8007616 <usbd_edpt_open+0x3a>
 8007600:	4b17      	ldr	r3, [pc, #92]	@ (8007660 <usbd_edpt_open+0x84>)
 8007602:	613b      	str	r3, [r7, #16]
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	d000      	beq.n	8007612 <usbd_edpt_open+0x36>
 8007610:	be00      	bkpt	0x0000
 8007612:	2300      	movs	r3, #0
 8007614:	e01d      	b.n	8007652 <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 8007616:	4b13      	ldr	r3, [pc, #76]	@ (8007664 <usbd_edpt_open+0x88>)
 8007618:	789b      	ldrb	r3, [r3, #2]
 800761a:	2200      	movs	r2, #0
 800761c:	4619      	mov	r1, r3
 800761e:	6838      	ldr	r0, [r7, #0]
 8007620:	f002 fbae 	bl	8009d80 <tu_edpt_validate>
 8007624:	4603      	mov	r3, r0
 8007626:	f083 0301 	eor.w	r3, r3, #1
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00a      	beq.n	8007646 <usbd_edpt_open+0x6a>
 8007630:	4b0b      	ldr	r3, [pc, #44]	@ (8007660 <usbd_edpt_open+0x84>)
 8007632:	617b      	str	r3, [r7, #20]
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	d000      	beq.n	8007642 <usbd_edpt_open+0x66>
 8007640:	be00      	bkpt	0x0000
 8007642:	2300      	movs	r3, #0
 8007644:	e005      	b.n	8007652 <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 8007646:	79fb      	ldrb	r3, [r7, #7]
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	4618      	mov	r0, r3
 800764c:	f001 f992 	bl	8008974 <dcd_edpt_open>
 8007650:	4603      	mov	r3, r0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	2000006d 	.word	0x2000006d
 8007660:	e000edf0 	.word	0xe000edf0
 8007664:	20000ac8 	.word	0x20000ac8

08007668 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
 800766e:	4603      	mov	r3, r0
 8007670:	460a      	mov	r2, r1
 8007672:	71fb      	strb	r3, [r7, #7]
 8007674:	4613      	mov	r3, r2
 8007676:	71bb      	strb	r3, [r7, #6]
 8007678:	79bb      	ldrb	r3, [r7, #6]
 800767a:	73bb      	strb	r3, [r7, #14]
 800767c:	7bbb      	ldrb	r3, [r7, #14]
 800767e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007682:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007684:	75fb      	strb	r3, [r7, #23]
 8007686:	79bb      	ldrb	r3, [r7, #6]
 8007688:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800768a:	7bfb      	ldrb	r3, [r7, #15]
 800768c:	09db      	lsrs	r3, r3, #7
 800768e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8007690:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8007692:	7dfa      	ldrb	r2, [r7, #23]
 8007694:	7dbb      	ldrb	r3, [r7, #22]
 8007696:	0052      	lsls	r2, r2, #1
 8007698:	4413      	add	r3, r2
 800769a:	3320      	adds	r3, #32
 800769c:	4a05      	ldr	r2, [pc, #20]	@ (80076b4 <usbd_edpt_claim+0x4c>)
 800769e:	4413      	add	r3, r2
 80076a0:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 80076a2:	2100      	movs	r1, #0
 80076a4:	6938      	ldr	r0, [r7, #16]
 80076a6:	f002 fb07 	bl	8009cb8 <tu_edpt_claim>
 80076aa:	4603      	mov	r3, r0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3718      	adds	r7, #24
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	20000ac8 	.word	0x20000ac8

080076b8 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	4603      	mov	r3, r0
 80076c0:	460a      	mov	r2, r1
 80076c2:	71fb      	strb	r3, [r7, #7]
 80076c4:	4613      	mov	r3, r2
 80076c6:	71bb      	strb	r3, [r7, #6]
 80076c8:	79bb      	ldrb	r3, [r7, #6]
 80076ca:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
 80076ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076d2:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80076d4:	75fb      	strb	r3, [r7, #23]
 80076d6:	79bb      	ldrb	r3, [r7, #6]
 80076d8:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80076da:	7bfb      	ldrb	r3, [r7, #15]
 80076dc:	09db      	lsrs	r3, r3, #7
 80076de:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80076e0:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80076e2:	7dfa      	ldrb	r2, [r7, #23]
 80076e4:	7dbb      	ldrb	r3, [r7, #22]
 80076e6:	0052      	lsls	r2, r2, #1
 80076e8:	4413      	add	r3, r2
 80076ea:	3320      	adds	r3, #32
 80076ec:	4a05      	ldr	r2, [pc, #20]	@ (8007704 <usbd_edpt_release+0x4c>)
 80076ee:	4413      	add	r3, r2
 80076f0:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 80076f2:	2100      	movs	r1, #0
 80076f4:	6938      	ldr	r0, [r7, #16]
 80076f6:	f002 fb19 	bl	8009d2c <tu_edpt_release>
 80076fa:	4603      	mov	r3, r0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3718      	adds	r7, #24
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	20000ac8 	.word	0x20000ac8

08007708 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	603a      	str	r2, [r7, #0]
 8007710:	461a      	mov	r2, r3
 8007712:	4603      	mov	r3, r0
 8007714:	71fb      	strb	r3, [r7, #7]
 8007716:	460b      	mov	r3, r1
 8007718:	71bb      	strb	r3, [r7, #6]
 800771a:	4613      	mov	r3, r2
 800771c:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 800771e:	4b32      	ldr	r3, [pc, #200]	@ (80077e8 <usbd_edpt_xfer+0xe0>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	71fb      	strb	r3, [r7, #7]
 8007724:	79bb      	ldrb	r3, [r7, #6]
 8007726:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007728:	7abb      	ldrb	r3, [r7, #10]
 800772a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800772e:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007730:	75fb      	strb	r3, [r7, #23]
 8007732:	79bb      	ldrb	r3, [r7, #6]
 8007734:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007736:	7afb      	ldrb	r3, [r7, #11]
 8007738:	09db      	lsrs	r3, r3, #7
 800773a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800773c:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 800773e:	7dfa      	ldrb	r2, [r7, #23]
 8007740:	7dbb      	ldrb	r3, [r7, #22]
 8007742:	492a      	ldr	r1, [pc, #168]	@ (80077ec <usbd_edpt_xfer+0xe4>)
 8007744:	0052      	lsls	r2, r2, #1
 8007746:	440a      	add	r2, r1
 8007748:	4413      	add	r3, r2
 800774a:	3320      	adds	r3, #32
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00a      	beq.n	800776e <usbd_edpt_xfer+0x66>
 8007758:	4b25      	ldr	r3, [pc, #148]	@ (80077f0 <usbd_edpt_xfer+0xe8>)
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	d000      	beq.n	800776a <usbd_edpt_xfer+0x62>
 8007768:	be00      	bkpt	0x0000
 800776a:	2300      	movs	r3, #0
 800776c:	e038      	b.n	80077e0 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800776e:	7dfa      	ldrb	r2, [r7, #23]
 8007770:	7dbb      	ldrb	r3, [r7, #22]
 8007772:	491e      	ldr	r1, [pc, #120]	@ (80077ec <usbd_edpt_xfer+0xe4>)
 8007774:	0052      	lsls	r2, r2, #1
 8007776:	440a      	add	r2, r1
 8007778:	4413      	add	r3, r2
 800777a:	f103 0220 	add.w	r2, r3, #32
 800777e:	7813      	ldrb	r3, [r2, #0]
 8007780:	f043 0301 	orr.w	r3, r3, #1
 8007784:	7013      	strb	r3, [r2, #0]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 8007786:	88bb      	ldrh	r3, [r7, #4]
 8007788:	79b9      	ldrb	r1, [r7, #6]
 800778a:	79f8      	ldrb	r0, [r7, #7]
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	f001 f9b5 	bl	8008afc <dcd_edpt_xfer>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <usbd_edpt_xfer+0x94>
    return true;
 8007798:	2301      	movs	r3, #1
 800779a:	e021      	b.n	80077e0 <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 800779c:	7dfa      	ldrb	r2, [r7, #23]
 800779e:	7dbb      	ldrb	r3, [r7, #22]
 80077a0:	4912      	ldr	r1, [pc, #72]	@ (80077ec <usbd_edpt_xfer+0xe4>)
 80077a2:	0052      	lsls	r2, r2, #1
 80077a4:	440a      	add	r2, r1
 80077a6:	4413      	add	r3, r2
 80077a8:	f103 0220 	add.w	r2, r3, #32
 80077ac:	7813      	ldrb	r3, [r2, #0]
 80077ae:	f023 0301 	bic.w	r3, r3, #1
 80077b2:	7013      	strb	r3, [r2, #0]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 80077b4:	7dfa      	ldrb	r2, [r7, #23]
 80077b6:	7dbb      	ldrb	r3, [r7, #22]
 80077b8:	490c      	ldr	r1, [pc, #48]	@ (80077ec <usbd_edpt_xfer+0xe4>)
 80077ba:	0052      	lsls	r2, r2, #1
 80077bc:	440a      	add	r2, r1
 80077be:	4413      	add	r3, r2
 80077c0:	f103 0220 	add.w	r2, r3, #32
 80077c4:	7813      	ldrb	r3, [r2, #0]
 80077c6:	f023 0304 	bic.w	r3, r3, #4
 80077ca:	7013      	strb	r3, [r2, #0]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 80077cc:	4b08      	ldr	r3, [pc, #32]	@ (80077f0 <usbd_edpt_xfer+0xe8>)
 80077ce:	613b      	str	r3, [r7, #16]
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d000      	beq.n	80077de <usbd_edpt_xfer+0xd6>
 80077dc:	be00      	bkpt	0x0000
    return false;
 80077de:	2300      	movs	r3, #0
  }
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3718      	adds	r7, #24
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	2000006d 	.word	0x2000006d
 80077ec:	20000ac8 	.word	0x20000ac8
 80077f0:	e000edf0 	.word	0xe000edf0

080077f4 <usbd_edpt_busy>:
    TU_BREAKPOINT();
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr) {
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	460a      	mov	r2, r1
 80077fe:	71fb      	strb	r3, [r7, #7]
 8007800:	4613      	mov	r3, r2
 8007802:	71bb      	strb	r3, [r7, #6]
 8007804:	79bb      	ldrb	r3, [r7, #6]
 8007806:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007808:	7b3b      	ldrb	r3, [r7, #12]
 800780a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800780e:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007810:	73fb      	strb	r3, [r7, #15]
 8007812:	79bb      	ldrb	r3, [r7, #6]
 8007814:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007816:	7b7b      	ldrb	r3, [r7, #13]
 8007818:	09db      	lsrs	r3, r3, #7
 800781a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800781c:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 800781e:	7bfa      	ldrb	r2, [r7, #15]
 8007820:	7bbb      	ldrb	r3, [r7, #14]
 8007822:	490a      	ldr	r1, [pc, #40]	@ (800784c <usbd_edpt_busy+0x58>)
 8007824:	0052      	lsls	r2, r2, #1
 8007826:	440a      	add	r2, r1
 8007828:	4413      	add	r3, r2
 800782a:	3320      	adds	r3, #32
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b00      	cmp	r3, #0
 8007836:	bf14      	ite	ne
 8007838:	2301      	movne	r3, #1
 800783a:	2300      	moveq	r3, #0
 800783c:	b2db      	uxtb	r3, r3
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	20000ac8 	.word	0x20000ac8

08007850 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	4603      	mov	r3, r0
 8007858:	460a      	mov	r2, r1
 800785a:	71fb      	strb	r3, [r7, #7]
 800785c:	4613      	mov	r3, r2
 800785e:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8007860:	4b18      	ldr	r3, [pc, #96]	@ (80078c4 <usbd_edpt_stall+0x74>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	71fb      	strb	r3, [r7, #7]
 8007866:	79bb      	ldrb	r3, [r7, #6]
 8007868:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800786a:	7b3b      	ldrb	r3, [r7, #12]
 800786c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007870:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007872:	73fb      	strb	r3, [r7, #15]
 8007874:	79bb      	ldrb	r3, [r7, #6]
 8007876:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007878:	7b7b      	ldrb	r3, [r7, #13]
 800787a:	09db      	lsrs	r3, r3, #7
 800787c:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800787e:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 8007880:	79ba      	ldrb	r2, [r7, #6]
 8007882:	79fb      	ldrb	r3, [r7, #7]
 8007884:	4611      	mov	r1, r2
 8007886:	4618      	mov	r0, r3
 8007888:	f001 f988 	bl	8008b9c <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 800788c:	7bfa      	ldrb	r2, [r7, #15]
 800788e:	7bbb      	ldrb	r3, [r7, #14]
 8007890:	490d      	ldr	r1, [pc, #52]	@ (80078c8 <usbd_edpt_stall+0x78>)
 8007892:	0052      	lsls	r2, r2, #1
 8007894:	440a      	add	r2, r1
 8007896:	4413      	add	r3, r2
 8007898:	f103 0220 	add.w	r2, r3, #32
 800789c:	7813      	ldrb	r3, [r2, #0]
 800789e:	f043 0302 	orr.w	r3, r3, #2
 80078a2:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 80078a4:	7bfa      	ldrb	r2, [r7, #15]
 80078a6:	7bbb      	ldrb	r3, [r7, #14]
 80078a8:	4907      	ldr	r1, [pc, #28]	@ (80078c8 <usbd_edpt_stall+0x78>)
 80078aa:	0052      	lsls	r2, r2, #1
 80078ac:	440a      	add	r2, r1
 80078ae:	4413      	add	r3, r2
 80078b0:	f103 0220 	add.w	r2, r3, #32
 80078b4:	7813      	ldrb	r3, [r2, #0]
 80078b6:	f043 0301 	orr.w	r3, r3, #1
 80078ba:	7013      	strb	r3, [r2, #0]
}
 80078bc:	bf00      	nop
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	2000006d 	.word	0x2000006d
 80078c8:	20000ac8 	.word	0x20000ac8

080078cc <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	460a      	mov	r2, r1
 80078d6:	71fb      	strb	r3, [r7, #7]
 80078d8:	4613      	mov	r3, r2
 80078da:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80078dc:	4b18      	ldr	r3, [pc, #96]	@ (8007940 <usbd_edpt_clear_stall+0x74>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	71fb      	strb	r3, [r7, #7]
 80078e2:	79bb      	ldrb	r3, [r7, #6]
 80078e4:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80078e6:	7b3b      	ldrb	r3, [r7, #12]
 80078e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078ec:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80078ee:	73fb      	strb	r3, [r7, #15]
 80078f0:	79bb      	ldrb	r3, [r7, #6]
 80078f2:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80078f4:	7b7b      	ldrb	r3, [r7, #13]
 80078f6:	09db      	lsrs	r3, r3, #7
 80078f8:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80078fa:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 80078fc:	79ba      	ldrb	r2, [r7, #6]
 80078fe:	79fb      	ldrb	r3, [r7, #7]
 8007900:	4611      	mov	r1, r2
 8007902:	4618      	mov	r0, r3
 8007904:	f001 f980 	bl	8008c08 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8007908:	7bfa      	ldrb	r2, [r7, #15]
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	490d      	ldr	r1, [pc, #52]	@ (8007944 <usbd_edpt_clear_stall+0x78>)
 800790e:	0052      	lsls	r2, r2, #1
 8007910:	440a      	add	r2, r1
 8007912:	4413      	add	r3, r2
 8007914:	f103 0220 	add.w	r2, r3, #32
 8007918:	7813      	ldrb	r3, [r2, #0]
 800791a:	f023 0302 	bic.w	r3, r3, #2
 800791e:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 8007920:	7bfa      	ldrb	r2, [r7, #15]
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	4907      	ldr	r1, [pc, #28]	@ (8007944 <usbd_edpt_clear_stall+0x78>)
 8007926:	0052      	lsls	r2, r2, #1
 8007928:	440a      	add	r2, r1
 800792a:	4413      	add	r3, r2
 800792c:	f103 0220 	add.w	r2, r3, #32
 8007930:	7813      	ldrb	r3, [r2, #0]
 8007932:	f023 0301 	bic.w	r3, r3, #1
 8007936:	7013      	strb	r3, [r2, #0]
}
 8007938:	bf00      	nop
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	2000006d 	.word	0x2000006d
 8007944:	20000ac8 	.word	0x20000ac8

08007948 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	460a      	mov	r2, r1
 8007952:	71fb      	strb	r3, [r7, #7]
 8007954:	4613      	mov	r3, r2
 8007956:	71bb      	strb	r3, [r7, #6]
 8007958:	79bb      	ldrb	r3, [r7, #6]
 800795a:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800795c:	7b3b      	ldrb	r3, [r7, #12]
 800795e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007962:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007964:	73fb      	strb	r3, [r7, #15]
 8007966:	79bb      	ldrb	r3, [r7, #6]
 8007968:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800796a:	7b7b      	ldrb	r3, [r7, #13]
 800796c:	09db      	lsrs	r3, r3, #7
 800796e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8007970:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8007972:	7bfa      	ldrb	r2, [r7, #15]
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	490a      	ldr	r1, [pc, #40]	@ (80079a0 <usbd_edpt_stalled+0x58>)
 8007978:	0052      	lsls	r2, r2, #1
 800797a:	440a      	add	r2, r1
 800797c:	4413      	add	r3, r2
 800797e:	3320      	adds	r3, #32
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b00      	cmp	r3, #0
 800798a:	bf14      	ite	ne
 800798c:	2301      	movne	r3, #1
 800798e:	2300      	moveq	r3, #0
 8007990:	b2db      	uxtb	r3, r3
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	20000ac8 	.word	0x20000ac8

080079a4 <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, const tusb_control_request_t* request) {
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	4603      	mov	r3, r0
 80079ac:	6039      	str	r1, [r7, #0]
 80079ae:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	4603      	mov	r3, r0
 80079c4:	6039      	str	r1, [r7, #0]
 80079c6:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <status_stage_xact+0x1e>
 80079d6:	2300      	movs	r3, #0
 80079d8:	e000      	b.n	80079dc <status_stage_xact+0x20>
 80079da:	2380      	movs	r3, #128	@ 0x80
 80079dc:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80079de:	7bf9      	ldrb	r1, [r7, #15]
 80079e0:	79f8      	ldrb	r0, [r7, #7]
 80079e2:	2300      	movs	r3, #0
 80079e4:	2200      	movs	r2, #0
 80079e6:	f7ff fe8f 	bl	8007708 <usbd_edpt_xfer>
 80079ea:	4603      	mov	r3, r0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	6039      	str	r1, [r7, #0]
 80079fe:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 8007a00:	4b0b      	ldr	r3, [pc, #44]	@ (8007a30 <tud_control_status+0x3c>)
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	6810      	ldr	r0, [r2, #0]
 8007a06:	6851      	ldr	r1, [r2, #4]
 8007a08:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 8007a0a:	4b09      	ldr	r3, [pc, #36]	@ (8007a30 <tud_control_status+0x3c>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8007a10:	4b07      	ldr	r3, [pc, #28]	@ (8007a30 <tud_control_status+0x3c>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 8007a16:	4b06      	ldr	r3, [pc, #24]	@ (8007a30 <tud_control_status+0x3c>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 8007a1c:	79fb      	ldrb	r3, [r7, #7]
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7ff ffcb 	bl	80079bc <status_stage_xact>
 8007a26:	4603      	mov	r3, r0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20000bc4 	.word	0x20000bc4

08007a34 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b088      	sub	sp, #32
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8007a3e:	4b24      	ldr	r3, [pc, #144]	@ (8007ad0 <data_stage_xact+0x9c>)
 8007a40:	899a      	ldrh	r2, [r3, #12]
 8007a42:	4b23      	ldr	r3, [pc, #140]	@ (8007ad0 <data_stage_xact+0x9c>)
 8007a44:	89db      	ldrh	r3, [r3, #14]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	837b      	strh	r3, [r7, #26]
 8007a4c:	2340      	movs	r3, #64	@ 0x40
 8007a4e:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007a50:	8b7a      	ldrh	r2, [r7, #26]
 8007a52:	8b3b      	ldrh	r3, [r7, #24]
 8007a54:	4293      	cmp	r3, r2
 8007a56:	bf28      	it	cs
 8007a58:	4613      	movcs	r3, r2
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 8007a62:	4b1b      	ldr	r3, [pc, #108]	@ (8007ad0 <data_stage_xact+0x9c>)
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d01e      	beq.n	8007aae <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 8007a70:	2380      	movs	r3, #128	@ 0x80
 8007a72:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 8007a74:	8bbb      	ldrh	r3, [r7, #28]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d019      	beq.n	8007aae <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 8007a7a:	4b15      	ldr	r3, [pc, #84]	@ (8007ad0 <data_stage_xact+0x9c>)
 8007a7c:	689a      	ldr	r2, [r3, #8]
 8007a7e:	8bbb      	ldrh	r3, [r7, #28]
 8007a80:	4914      	ldr	r1, [pc, #80]	@ (8007ad4 <data_stage_xact+0xa0>)
 8007a82:	6179      	str	r1, [r7, #20]
 8007a84:	2140      	movs	r1, #64	@ 0x40
 8007a86:	6139      	str	r1, [r7, #16]
 8007a88:	60fa      	str	r2, [r7, #12]
 8007a8a:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d202      	bcs.n	8007a9a <data_stage_xact+0x66>
    return -1;
 8007a94:	f04f 33ff 	mov.w	r3, #4294967295
 8007a98:	e005      	b.n	8007aa6 <data_stage_xact+0x72>
  memcpy(dest, src, count);
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	68f9      	ldr	r1, [r7, #12]
 8007a9e:	6978      	ldr	r0, [r7, #20]
 8007aa0:	f002 fcc1 	bl	800a426 <memcpy>
  return 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <data_stage_xact+0x7a>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	e00b      	b.n	8007ac6 <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 8007aae:	8bbb      	ldrh	r3, [r7, #28]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <data_stage_xact+0x84>
 8007ab4:	4a07      	ldr	r2, [pc, #28]	@ (8007ad4 <data_stage_xact+0xa0>)
 8007ab6:	e000      	b.n	8007aba <data_stage_xact+0x86>
 8007ab8:	2200      	movs	r2, #0
 8007aba:	8bbb      	ldrh	r3, [r7, #28]
 8007abc:	7ff9      	ldrb	r1, [r7, #31]
 8007abe:	79f8      	ldrb	r0, [r7, #7]
 8007ac0:	f7ff fe22 	bl	8007708 <usbd_edpt_xfer>
 8007ac4:	4603      	mov	r3, r0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3720      	adds	r7, #32
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20000bc4 	.word	0x20000bc4
 8007ad4:	20000bd8 	.word	0x20000bd8

08007ad8 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b088      	sub	sp, #32
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60b9      	str	r1, [r7, #8]
 8007ae0:	607a      	str	r2, [r7, #4]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	73fb      	strb	r3, [r7, #15]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 8007aec:	4b30      	ldr	r3, [pc, #192]	@ (8007bb0 <tud_control_xfer+0xd8>)
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	6810      	ldr	r0, [r2, #0]
 8007af2:	6851      	ldr	r1, [r2, #4]
 8007af4:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 8007af6:	4a2e      	ldr	r2, [pc, #184]	@ (8007bb0 <tud_control_xfer+0xd8>)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8007afc:	4b2c      	ldr	r3, [pc, #176]	@ (8007bb0 <tud_control_xfer+0xd8>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	88db      	ldrh	r3, [r3, #6]
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	89bb      	ldrh	r3, [r7, #12]
 8007b0a:	827b      	strh	r3, [r7, #18]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007b10:	8a7a      	ldrh	r2, [r7, #18]
 8007b12:	8a3b      	ldrh	r3, [r7, #16]
 8007b14:	4293      	cmp	r3, r2
 8007b16:	bf28      	it	cs
 8007b18:	4613      	movcs	r3, r2
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	4b24      	ldr	r3, [pc, #144]	@ (8007bb0 <tud_control_xfer+0xd8>)
 8007b1e:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	88db      	ldrh	r3, [r3, #6]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d026      	beq.n	8007b78 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 8007b2a:	4b21      	ldr	r3, [pc, #132]	@ (8007bb0 <tud_control_xfer+0xd8>)
 8007b2c:	899b      	ldrh	r3, [r3, #12]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00d      	beq.n	8007b4e <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10a      	bne.n	8007b4e <tud_control_xfer+0x76>
 8007b38:	4b1e      	ldr	r3, [pc, #120]	@ (8007bb4 <tud_control_xfer+0xdc>)
 8007b3a:	61bb      	str	r3, [r7, #24]
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d000      	beq.n	8007b4a <tud_control_xfer+0x72>
 8007b48:	be00      	bkpt	0x0000
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	e02b      	b.n	8007ba6 <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7ff ff6f 	bl	8007a34 <data_stage_xact>
 8007b56:	4603      	mov	r3, r0
 8007b58:	f083 0301 	eor.w	r3, r3, #1
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d020      	beq.n	8007ba4 <tud_control_xfer+0xcc>
 8007b62:	4b14      	ldr	r3, [pc, #80]	@ (8007bb4 <tud_control_xfer+0xdc>)
 8007b64:	617b      	str	r3, [r7, #20]
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d000      	beq.n	8007b74 <tud_control_xfer+0x9c>
 8007b72:	be00      	bkpt	0x0000
 8007b74:	2300      	movs	r3, #0
 8007b76:	e016      	b.n	8007ba6 <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	68b9      	ldr	r1, [r7, #8]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7ff ff1d 	bl	80079bc <status_stage_xact>
 8007b82:	4603      	mov	r3, r0
 8007b84:	f083 0301 	eor.w	r3, r3, #1
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00a      	beq.n	8007ba4 <tud_control_xfer+0xcc>
 8007b8e:	4b09      	ldr	r3, [pc, #36]	@ (8007bb4 <tud_control_xfer+0xdc>)
 8007b90:	61fb      	str	r3, [r7, #28]
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d000      	beq.n	8007ba0 <tud_control_xfer+0xc8>
 8007b9e:	be00      	bkpt	0x0000
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	e000      	b.n	8007ba6 <tud_control_xfer+0xce>
  }

  return true;
 8007ba4:	2301      	movs	r3, #1
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3720      	adds	r7, #32
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000bc4 	.word	0x20000bc4
 8007bb4:	e000edf0 	.word	0xe000edf0

08007bb8 <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8007bbc:	2214      	movs	r2, #20
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	4802      	ldr	r0, [pc, #8]	@ (8007bcc <usbd_control_reset+0x14>)
 8007bc2:	f002 fbb5 	bl	800a330 <memset>
}
 8007bc6:	bf00      	nop
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	20000bc4 	.word	0x20000bc4

08007bd0 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8007bd8:	4a04      	ldr	r2, [pc, #16]	@ (8007bec <usbd_control_set_complete_callback+0x1c>)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6113      	str	r3, [r2, #16]
}
 8007bde:	bf00      	nop
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	20000bc4 	.word	0x20000bc4

08007bf0 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 8007bf8:	4b09      	ldr	r3, [pc, #36]	@ (8007c20 <usbd_control_set_request+0x30>)
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	6810      	ldr	r0, [r2, #0]
 8007bfe:	6851      	ldr	r1, [r2, #4]
 8007c00:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 8007c02:	4b07      	ldr	r3, [pc, #28]	@ (8007c20 <usbd_control_set_request+0x30>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8007c08:	4b05      	ldr	r3, [pc, #20]	@ (8007c20 <usbd_control_set_request+0x30>)
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 8007c0e:	4b04      	ldr	r3, [pc, #16]	@ (8007c20 <usbd_control_set_request+0x30>)
 8007c10:	2200      	movs	r2, #0
 8007c12:	819a      	strh	r2, [r3, #12]
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	20000bc4 	.word	0x20000bc4

08007c24 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b088      	sub	sp, #32
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	603b      	str	r3, [r7, #0]
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	71fb      	strb	r3, [r7, #7]
 8007c30:	460b      	mov	r3, r1
 8007c32:	71bb      	strb	r3, [r7, #6]
 8007c34:	4613      	mov	r3, r2
 8007c36:	717b      	strb	r3, [r7, #5]
 8007c38:	79bb      	ldrb	r3, [r7, #6]
 8007c3a:	73fb      	strb	r3, [r7, #15]
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
 8007c3e:	09db      	lsrs	r3, r3, #7
 8007c40:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 8007c42:	4a4f      	ldr	r2, [pc, #316]	@ (8007d80 <usbd_control_xfer_cb+0x15c>)
 8007c44:	7812      	ldrb	r2, [r2, #0]
 8007c46:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8007c4a:	b2d2      	uxtb	r2, r2
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d01e      	beq.n	8007c8e <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00a      	beq.n	8007c6c <usbd_control_xfer_cb+0x48>
 8007c56:	4b4b      	ldr	r3, [pc, #300]	@ (8007d84 <usbd_control_xfer_cb+0x160>)
 8007c58:	613b      	str	r3, [r7, #16]
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d000      	beq.n	8007c68 <usbd_control_xfer_cb+0x44>
 8007c66:	be00      	bkpt	0x0000
 8007c68:	2300      	movs	r3, #0
 8007c6a:	e084      	b.n	8007d76 <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8007c6c:	79fb      	ldrb	r3, [r7, #7]
 8007c6e:	4944      	ldr	r1, [pc, #272]	@ (8007d80 <usbd_control_xfer_cb+0x15c>)
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7ff fe97 	bl	80079a4 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 8007c76:	4b42      	ldr	r3, [pc, #264]	@ (8007d80 <usbd_control_xfer_cb+0x15c>)
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d005      	beq.n	8007c8a <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8007c7e:	4b40      	ldr	r3, [pc, #256]	@ (8007d80 <usbd_control_xfer_cb+0x15c>)
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	79f8      	ldrb	r0, [r7, #7]
 8007c84:	4a3e      	ldr	r2, [pc, #248]	@ (8007d80 <usbd_control_xfer_cb+0x15c>)
 8007c86:	2103      	movs	r1, #3
 8007c88:	4798      	blx	r3
    }

    return true;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e073      	b.n	8007d76 <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 8007c8e:	4b3c      	ldr	r3, [pc, #240]	@ (8007d80 <usbd_control_xfer_cb+0x15c>)
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d10c      	bne.n	8007cb6 <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 8007c9c:	4b38      	ldr	r3, [pc, #224]	@ (8007d80 <usbd_control_xfer_cb+0x15c>)
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d101      	bne.n	8007ca8 <usbd_control_xfer_cb+0x84>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	e066      	b.n	8007d76 <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 8007ca8:	4b35      	ldr	r3, [pc, #212]	@ (8007d80 <usbd_control_xfer_cb+0x15c>)
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	683a      	ldr	r2, [r7, #0]
 8007cae:	4936      	ldr	r1, [pc, #216]	@ (8007d88 <usbd_control_xfer_cb+0x164>)
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f002 fbb8 	bl	800a426 <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8007cb6:	4b32      	ldr	r3, [pc, #200]	@ (8007d80 <usbd_control_xfer_cb+0x15c>)
 8007cb8:	89da      	ldrh	r2, [r3, #14]
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	4413      	add	r3, r2
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8007d80 <usbd_control_xfer_cb+0x15c>)
 8007cc4:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8007cc6:	4b2e      	ldr	r3, [pc, #184]	@ (8007d80 <usbd_control_xfer_cb+0x15c>)
 8007cc8:	689a      	ldr	r2, [r3, #8]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	4413      	add	r3, r2
 8007cce:	4a2c      	ldr	r2, [pc, #176]	@ (8007d80 <usbd_control_xfer_cb+0x15c>)
 8007cd0:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 8007cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8007d80 <usbd_control_xfer_cb+0x15c>)
 8007cd4:	88da      	ldrh	r2, [r3, #6]
 8007cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8007d80 <usbd_control_xfer_cb+0x15c>)
 8007cd8:	89db      	ldrh	r3, [r3, #14]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d002      	beq.n	8007ce4 <usbd_control_xfer_cb+0xc0>
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b3f      	cmp	r3, #63	@ 0x3f
 8007ce2:	d831      	bhi.n	8007d48 <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 8007ce8:	4b25      	ldr	r3, [pc, #148]	@ (8007d80 <usbd_control_xfer_cb+0x15c>)
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d007      	beq.n	8007d00 <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8007cf0:	4b23      	ldr	r3, [pc, #140]	@ (8007d80 <usbd_control_xfer_cb+0x15c>)
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	79f8      	ldrb	r0, [r7, #7]
 8007cf6:	4a22      	ldr	r2, [pc, #136]	@ (8007d80 <usbd_control_xfer_cb+0x15c>)
 8007cf8:	2102      	movs	r1, #2
 8007cfa:	4798      	blx	r3
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 8007d00:	7ffb      	ldrb	r3, [r7, #31]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d015      	beq.n	8007d32 <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 8007d06:	79fb      	ldrb	r3, [r7, #7]
 8007d08:	491d      	ldr	r1, [pc, #116]	@ (8007d80 <usbd_control_xfer_cb+0x15c>)
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7ff fe56 	bl	80079bc <status_stage_xact>
 8007d10:	4603      	mov	r3, r0
 8007d12:	f083 0301 	eor.w	r3, r3, #1
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d02a      	beq.n	8007d72 <usbd_control_xfer_cb+0x14e>
 8007d1c:	4b19      	ldr	r3, [pc, #100]	@ (8007d84 <usbd_control_xfer_cb+0x160>)
 8007d1e:	617b      	str	r3, [r7, #20]
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d000      	beq.n	8007d2e <usbd_control_xfer_cb+0x10a>
 8007d2c:	be00      	bkpt	0x0000
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e021      	b.n	8007d76 <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8007d32:	79fb      	ldrb	r3, [r7, #7]
 8007d34:	2100      	movs	r1, #0
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 ff30 	bl	8008b9c <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8007d3c:	79fb      	ldrb	r3, [r7, #7]
 8007d3e:	2180      	movs	r1, #128	@ 0x80
 8007d40:	4618      	mov	r0, r3
 8007d42:	f000 ff2b 	bl	8008b9c <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8007d46:	e014      	b.n	8007d72 <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 8007d48:	79fb      	ldrb	r3, [r7, #7]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7ff fe72 	bl	8007a34 <data_stage_xact>
 8007d50:	4603      	mov	r3, r0
 8007d52:	f083 0301 	eor.w	r3, r3, #1
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00b      	beq.n	8007d74 <usbd_control_xfer_cb+0x150>
 8007d5c:	4b09      	ldr	r3, [pc, #36]	@ (8007d84 <usbd_control_xfer_cb+0x160>)
 8007d5e:	61bb      	str	r3, [r7, #24]
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d000      	beq.n	8007d6e <usbd_control_xfer_cb+0x14a>
 8007d6c:	be00      	bkpt	0x0000
 8007d6e:	2300      	movs	r3, #0
 8007d70:	e001      	b.n	8007d76 <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8007d72:	bf00      	nop
  }

  return true;
 8007d74:	2301      	movs	r3, #1
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3720      	adds	r7, #32
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	20000bc4 	.word	0x20000bc4
 8007d84:	e000edf0 	.word	0xe000edf0
 8007d88:	20000bd8 	.word	0x20000bd8

08007d8c <__NVIC_EnableIRQ>:
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	4603      	mov	r3, r0
 8007d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	db0b      	blt.n	8007db6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d9e:	79fb      	ldrb	r3, [r7, #7]
 8007da0:	f003 021f 	and.w	r2, r3, #31
 8007da4:	4907      	ldr	r1, [pc, #28]	@ (8007dc4 <__NVIC_EnableIRQ+0x38>)
 8007da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007daa:	095b      	lsrs	r3, r3, #5
 8007dac:	2001      	movs	r0, #1
 8007dae:	fa00 f202 	lsl.w	r2, r0, r2
 8007db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007db6:	bf00      	nop
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	e000e100 	.word	0xe000e100

08007dc8 <__NVIC_DisableIRQ>:
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	4603      	mov	r3, r0
 8007dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	db12      	blt.n	8007e00 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007dda:	79fb      	ldrb	r3, [r7, #7]
 8007ddc:	f003 021f 	and.w	r2, r3, #31
 8007de0:	490a      	ldr	r1, [pc, #40]	@ (8007e0c <__NVIC_DisableIRQ+0x44>)
 8007de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007de6:	095b      	lsrs	r3, r3, #5
 8007de8:	2001      	movs	r0, #1
 8007dea:	fa00 f202 	lsl.w	r2, r0, r2
 8007dee:	3320      	adds	r3, #32
 8007df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007df4:	f3bf 8f4f 	dsb	sy
}
 8007df8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007dfa:	f3bf 8f6f 	isb	sy
}
 8007dfe:	bf00      	nop
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	e000e100 	.word	0xe000e100

08007e10 <dma_setup_prepare>:
  // Internal DMA only
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	4603      	mov	r3, r0
 8007e18:	71fb      	strb	r3, [r7, #7]
 8007e1a:	79fb      	ldrb	r3, [r7, #7]
 8007e1c:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007e1e:	7afb      	ldrb	r3, [r7, #11]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 8007e24:	2300      	movs	r3, #0
 8007e26:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007e28:	7afb      	ldrb	r3, [r7, #11]
 8007e2a:	4a13      	ldr	r2, [pc, #76]	@ (8007e78 <dma_setup_prepare+0x68>)
 8007e2c:	011b      	lsls	r3, r3, #4
 8007e2e:	4413      	add	r3, r2
 8007e30:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007e32:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e38:	4a10      	ldr	r2, [pc, #64]	@ (8007e7c <dma_setup_prepare+0x6c>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d904      	bls.n	8007e48 <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	db10      	blt.n	8007e6a <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	4a0d      	ldr	r2, [pc, #52]	@ (8007e80 <dma_setup_prepare+0x70>)
 8007e4c:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 8007e50:	4a0c      	ldr	r2, [pc, #48]	@ (8007e84 <dma_setup_prepare+0x74>)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8007e5e:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8007e68:	e000      	b.n	8007e6c <dma_setup_prepare+0x5c>
      return;
 8007e6a:	bf00      	nop
}
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	0800ab20 	.word	0x0800ab20
 8007e7c:	4f543009 	.word	0x4f543009
 8007e80:	20080008 	.word	0x20080008
 8007e84:	20000ca0 	.word	0x20000ca0

08007e88 <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 8007e88:	b480      	push	{r7}
 8007e8a:	b091      	sub	sp, #68	@ 0x44
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	71fb      	strb	r3, [r7, #7]
 8007e92:	460b      	mov	r3, r1
 8007e94:	71bb      	strb	r3, [r7, #6]
 8007e96:	4613      	mov	r3, r2
 8007e98:	80bb      	strh	r3, [r7, #4]
 8007e9a:	79fb      	ldrb	r3, [r7, #7]
 8007e9c:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007e9e:	7e7b      	ldrb	r3, [r7, #25]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <dfifo_alloc+0x20>
    rhport = 0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007ea8:	7e7b      	ldrb	r3, [r7, #25]
 8007eaa:	4a65      	ldr	r2, [pc, #404]	@ (8008040 <dfifo_alloc+0x1b8>)
 8007eac:	011b      	lsls	r3, r3, #4
 8007eae:	4413      	add	r3, r2
 8007eb0:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8007eb4:	79fb      	ldrb	r3, [r7, #7]
 8007eb6:	011b      	lsls	r3, r3, #4
 8007eb8:	4a61      	ldr	r2, [pc, #388]	@ (8008040 <dfifo_alloc+0x1b8>)
 8007eba:	4413      	add	r3, r2
 8007ebc:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 8007ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ec0:	7a1b      	ldrb	r3, [r3, #8]
 8007ec2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8007ec6:	79bb      	ldrb	r3, [r7, #6]
 8007ec8:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007eca:	7ebb      	ldrb	r3, [r7, #26]
 8007ecc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ed0:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8007ed2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8007ed6:	79bb      	ldrb	r3, [r7, #6]
 8007ed8:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007eda:	7efb      	ldrb	r3, [r7, #27]
 8007edc:	09db      	lsrs	r3, r3, #7
 8007ede:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8007ee0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 8007ee4:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8007ee8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d30a      	bcc.n	8007f06 <dfifo_alloc+0x7e>
 8007ef0:	4b54      	ldr	r3, [pc, #336]	@ (8008044 <dfifo_alloc+0x1bc>)
 8007ef2:	61fb      	str	r3, [r7, #28]
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d000      	beq.n	8007f02 <dfifo_alloc+0x7a>
 8007f00:	be00      	bkpt	0x0000
 8007f02:	2300      	movs	r3, #0
 8007f04:	e095      	b.n	8008032 <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 8007f06:	88bb      	ldrh	r3, [r7, #4]
 8007f08:	617b      	str	r3, [r7, #20]
 8007f0a:	2304      	movs	r3, #4
 8007f0c:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	4413      	add	r3, r2
 8007f14:	1e5a      	subs	r2, r3, #1
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f1c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 8007f1e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d12a      	bne.n	8007f7c <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8007f26:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	81fb      	strh	r3, [r7, #14]
 8007f2e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007f32:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8007f34:	89fb      	ldrh	r3, [r7, #14]
 8007f36:	089b      	lsrs	r3, r3, #2
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	f103 0208 	add.w	r2, r3, #8
 8007f3e:	7b7b      	ldrb	r3, [r7, #13]
 8007f40:	4413      	add	r3, r2
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8007f48:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 8007f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d26d      	bcs.n	8008030 <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 8007f54:	4b3c      	ldr	r3, [pc, #240]	@ (8008048 <dfifo_alloc+0x1c0>)
 8007f56:	889b      	ldrh	r3, [r3, #4]
 8007f58:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d90a      	bls.n	8007f74 <dfifo_alloc+0xec>
 8007f5e:	4b39      	ldr	r3, [pc, #228]	@ (8008044 <dfifo_alloc+0x1bc>)
 8007f60:	623b      	str	r3, [r7, #32]
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d000      	beq.n	8007f70 <dfifo_alloc+0xe8>
 8007f6e:	be00      	bkpt	0x0000
 8007f70:	2300      	movs	r3, #0
 8007f72:	e05e      	b.n	8008032 <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 8007f74:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f78:	625a      	str	r2, [r3, #36]	@ 0x24
 8007f7a:	e059      	b.n	8008030 <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 8007f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f7e:	7a5b      	ldrb	r3, [r3, #9]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d016      	beq.n	8007fb2 <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 8007f84:	4b30      	ldr	r3, [pc, #192]	@ (8008048 <dfifo_alloc+0x1c0>)
 8007f86:	799a      	ldrb	r2, [r3, #6]
 8007f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f8a:	7a5b      	ldrb	r3, [r3, #9]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d30a      	bcc.n	8007fa6 <dfifo_alloc+0x11e>
 8007f90:	4b2c      	ldr	r3, [pc, #176]	@ (8008044 <dfifo_alloc+0x1bc>)
 8007f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d000      	beq.n	8007fa2 <dfifo_alloc+0x11a>
 8007fa0:	be00      	bkpt	0x0000
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	e045      	b.n	8008032 <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 8007fa6:	4b28      	ldr	r3, [pc, #160]	@ (8008048 <dfifo_alloc+0x1c0>)
 8007fa8:	799b      	ldrb	r3, [r3, #6]
 8007faa:	3301      	adds	r3, #1
 8007fac:	b2da      	uxtb	r2, r3
 8007fae:	4b26      	ldr	r3, [pc, #152]	@ (8008048 <dfifo_alloc+0x1c0>)
 8007fb0:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d102      	bne.n	8007fc4 <dfifo_alloc+0x13c>
      fifo_size *= 2;
 8007fbe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007fc0:	005b      	lsls	r3, r3, #1
 8007fc2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 8007fc4:	4b20      	ldr	r3, [pc, #128]	@ (8008048 <dfifo_alloc+0x1c0>)
 8007fc6:	889b      	ldrh	r3, [r3, #4]
 8007fc8:	4619      	mov	r1, r3
 8007fca:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd0:	4413      	add	r3, r2
 8007fd2:	4299      	cmp	r1, r3
 8007fd4:	d20a      	bcs.n	8007fec <dfifo_alloc+0x164>
 8007fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8008044 <dfifo_alloc+0x1bc>)
 8007fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d000      	beq.n	8007fe8 <dfifo_alloc+0x160>
 8007fe6:	be00      	bkpt	0x0000
 8007fe8:	2300      	movs	r3, #0
 8007fea:	e022      	b.n	8008032 <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 8007fec:	4b16      	ldr	r3, [pc, #88]	@ (8008048 <dfifo_alloc+0x1c0>)
 8007fee:	889a      	ldrh	r2, [r3, #4]
 8007ff0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	4b14      	ldr	r3, [pc, #80]	@ (8008048 <dfifo_alloc+0x1c0>)
 8007ff8:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 8007ffa:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d108      	bne.n	8008014 <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 8008002:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008004:	041b      	lsls	r3, r3, #16
 8008006:	4a10      	ldr	r2, [pc, #64]	@ (8008048 <dfifo_alloc+0x1c0>)
 8008008:	8892      	ldrh	r2, [r2, #4]
 800800a:	4313      	orrs	r3, r2
 800800c:	461a      	mov	r2, r3
 800800e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008010:	629a      	str	r2, [r3, #40]	@ 0x28
 8008012:	e00d      	b.n	8008030 <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 8008014:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008016:	041b      	lsls	r3, r3, #16
 8008018:	4a0b      	ldr	r2, [pc, #44]	@ (8008048 <dfifo_alloc+0x1c0>)
 800801a:	8892      	ldrh	r2, [r2, #4]
 800801c:	431a      	orrs	r2, r3
 800801e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008022:	3b01      	subs	r3, #1
 8008024:	4611      	mov	r1, r2
 8008026:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008028:	3340      	adds	r3, #64	@ 0x40
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 8008030:	2301      	movs	r3, #1
}
 8008032:	4618      	mov	r0, r3
 8008034:	3744      	adds	r7, #68	@ 0x44
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	0800ab20 	.word	0x0800ab20
 8008044:	e000edf0 	.word	0xe000edf0
 8008048:	20000c98 	.word	0x20000c98

0800804c <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 800804c:	b580      	push	{r7, lr}
 800804e:	b088      	sub	sp, #32
 8008050:	af00      	add	r7, sp, #0
 8008052:	4603      	mov	r3, r0
 8008054:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8008056:	79fb      	ldrb	r3, [r7, #7]
 8008058:	011b      	lsls	r3, r3, #4
 800805a:	4a27      	ldr	r2, [pc, #156]	@ (80080f8 <dfifo_device_init+0xac>)
 800805c:	4413      	add	r3, r2
 800805e:	61fb      	str	r3, [r7, #28]
 8008060:	79fb      	ldrb	r3, [r7, #7]
 8008062:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008064:	7b3b      	ldrb	r3, [r7, #12]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d001      	beq.n	800806e <dfifo_device_init+0x22>
    rhport = 0;
 800806a:	2300      	movs	r3, #0
 800806c:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800806e:	7b3b      	ldrb	r3, [r7, #12]
 8008070:	4a21      	ldr	r2, [pc, #132]	@ (80080f8 <dfifo_device_init+0xac>)
 8008072:	011b      	lsls	r3, r3, #4
 8008074:	4413      	add	r3, r2
 8008076:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008078:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	7a1b      	ldrb	r3, [r3, #8]
 800807e:	2240      	movs	r2, #64	@ 0x40
 8008080:	81fa      	strh	r2, [r7, #14]
 8008082:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8008084:	89fb      	ldrh	r3, [r7, #14]
 8008086:	089b      	lsrs	r3, r3, #2
 8008088:	b29b      	uxth	r3, r3
 800808a:	f103 0208 	add.w	r2, r3, #8
 800808e:	7b7b      	ldrb	r3, [r7, #13]
 8008090:	4413      	add	r3, r2
 8008092:	b29b      	uxth	r3, r3
 8008094:	005b      	lsls	r3, r3, #1
 8008096:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8008098:	461a      	mov	r2, r3
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	625a      	str	r2, [r3, #36]	@ 0x24
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080a6:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 80080a8:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 80080aa:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	089b      	lsrs	r3, r3, #2
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	4b11      	ldr	r3, [pc, #68]	@ (80080fc <dfifo_device_init+0xb0>)
 80080b6:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d009      	beq.n	80080d2 <dfifo_device_init+0x86>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 80080be:	4b0f      	ldr	r3, [pc, #60]	@ (80080fc <dfifo_device_init+0xb0>)
 80080c0:	889a      	ldrh	r2, [r3, #4]
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	7a1b      	ldrb	r3, [r3, #8]
 80080c6:	005b      	lsls	r3, r3, #1
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	4b0b      	ldr	r3, [pc, #44]	@ (80080fc <dfifo_device_init+0xb0>)
 80080d0:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 80080d2:	4b0a      	ldr	r3, [pc, #40]	@ (80080fc <dfifo_device_init+0xb0>)
 80080d4:	889b      	ldrh	r3, [r3, #4]
 80080d6:	461a      	mov	r2, r3
 80080d8:	4613      	mov	r3, r2
 80080da:	041b      	lsls	r3, r3, #16
 80080dc:	441a      	add	r2, r3
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 80080e2:	79fb      	ldrb	r3, [r7, #7]
 80080e4:	2240      	movs	r2, #64	@ 0x40
 80080e6:	2180      	movs	r1, #128	@ 0x80
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7ff fecd 	bl	8007e88 <dfifo_alloc>
}
 80080ee:	bf00      	nop
 80080f0:	3720      	adds	r7, #32
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	0800ab20 	.word	0x0800ab20
 80080fc:	20000c98 	.word	0x20000c98

08008100 <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 8008100:	b480      	push	{r7}
 8008102:	b08b      	sub	sp, #44	@ 0x2c
 8008104:	af00      	add	r7, sp, #0
 8008106:	4603      	mov	r3, r0
 8008108:	6039      	str	r1, [r7, #0]
 800810a:	71fb      	strb	r3, [r7, #7]
 800810c:	79fb      	ldrb	r3, [r7, #7]
 800810e:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008110:	7c7b      	ldrb	r3, [r7, #17]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <edpt_activate+0x1a>
    rhport = 0;
 8008116:	2300      	movs	r3, #0
 8008118:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800811a:	7c7b      	ldrb	r3, [r7, #17]
 800811c:	4a45      	ldr	r2, [pc, #276]	@ (8008234 <edpt_activate+0x134>)
 800811e:	011b      	lsls	r3, r3, #4
 8008120:	4413      	add	r3, r2
 8008122:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008124:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	789b      	ldrb	r3, [r3, #2]
 800812a:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800812c:	7cbb      	ldrb	r3, [r7, #18]
 800812e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008132:	b2db      	uxtb	r3, r3
 8008134:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	789b      	ldrb	r3, [r3, #2]
 800813c:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800813e:	7cfb      	ldrb	r3, [r7, #19]
 8008140:	09db      	lsrs	r3, r3, #7
 8008142:	b2db      	uxtb	r3, r3
 8008144:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8008148:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800814c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8008150:	0052      	lsls	r2, r2, #1
 8008152:	4413      	add	r3, r2
 8008154:	011b      	lsls	r3, r3, #4
 8008156:	4a38      	ldr	r2, [pc, #224]	@ (8008238 <edpt_activate+0x138>)
 8008158:	4413      	add	r3, r2
 800815a:	61fb      	str	r3, [r7, #28]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	889b      	ldrh	r3, [r3, #4]
 8008164:	b29b      	uxth	r3, r3
 8008166:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800816a:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	799a      	ldrb	r2, [r3, #6]
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	731a      	strb	r2, [r3, #12]

  // Endpoint control
  dwc2_depctl_t depctl = {.value = 0};
 8008178:	2300      	movs	r3, #0
 800817a:	60fb      	str	r3, [r7, #12]
  depctl.mps = xfer->max_size;
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	895b      	ldrh	r3, [r3, #10]
 8008180:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008184:	b29a      	uxth	r2, r3
 8008186:	89bb      	ldrh	r3, [r7, #12]
 8008188:	f362 030a 	bfi	r3, r2, #0, #11
 800818c:	81bb      	strh	r3, [r7, #12]
  depctl.active = 1;
 800818e:	7b7b      	ldrb	r3, [r7, #13]
 8008190:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008194:	737b      	strb	r3, [r7, #13]
  depctl.type = p_endpoint_desc->bmAttributes.xfer;
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	78db      	ldrb	r3, [r3, #3]
 800819a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800819e:	b2da      	uxtb	r2, r3
 80081a0:	7bbb      	ldrb	r3, [r7, #14]
 80081a2:	f362 0383 	bfi	r3, r2, #2, #2
 80081a6:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	78db      	ldrb	r3, [r3, #3]
 80081ac:	f003 0303 	and.w	r3, r3, #3
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d003      	beq.n	80081be <edpt_activate+0xbe>
    depctl.set_data0_iso_even = 1;
 80081b6:	7bfb      	ldrb	r3, [r7, #15]
 80081b8:	f043 0310 	orr.w	r3, r3, #16
 80081bc:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 80081be:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d108      	bne.n	80081d8 <edpt_activate+0xd8>
    depctl.tx_fifo_num = epnum;
 80081c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80081ca:	f003 030f 	and.w	r3, r3, #15
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	89fb      	ldrh	r3, [r7, #14]
 80081d2:	f362 1389 	bfi	r3, r2, #6, #4
 80081d6:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 80081d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80081dc:	2b01      	cmp	r3, #1
 80081de:	bf14      	ite	ne
 80081e0:	2301      	movne	r3, #1
 80081e2:	2300      	moveq	r3, #0
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	461a      	mov	r2, r3
 80081e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80081ec:	0112      	lsls	r2, r2, #4
 80081ee:	4413      	add	r3, r2
 80081f0:	3348      	adds	r3, #72	@ 0x48
 80081f2:	015b      	lsls	r3, r3, #5
 80081f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081f6:	4413      	add	r3, r2
 80081f8:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 8008200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008202:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 8008206:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800820a:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 800820e:	2901      	cmp	r1, #1
 8008210:	d101      	bne.n	8008216 <edpt_activate+0x116>
 8008212:	2100      	movs	r1, #0
 8008214:	e000      	b.n	8008218 <edpt_activate+0x118>
 8008216:	2110      	movs	r1, #16
 8008218:	440b      	add	r3, r1
 800821a:	2101      	movs	r1, #1
 800821c:	fa01 f303 	lsl.w	r3, r1, r3
 8008220:	431a      	orrs	r2, r3
 8008222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008224:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 8008228:	bf00      	nop
 800822a:	372c      	adds	r7, #44	@ 0x2c
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	0800ab20 	.word	0x0800ab20
 8008238:	20000c18 	.word	0x20000c18

0800823c <edpt_disable>:

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 800823c:	b480      	push	{r7}
 800823e:	b089      	sub	sp, #36	@ 0x24
 8008240:	af00      	add	r7, sp, #0
 8008242:	4603      	mov	r3, r0
 8008244:	71fb      	strb	r3, [r7, #7]
 8008246:	460b      	mov	r3, r1
 8008248:	71bb      	strb	r3, [r7, #6]
 800824a:	4613      	mov	r3, r2
 800824c:	717b      	strb	r3, [r7, #5]
 800824e:	79fb      	ldrb	r3, [r7, #7]
 8008250:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008252:	7c7b      	ldrb	r3, [r7, #17]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <edpt_disable+0x20>
    rhport = 0;
 8008258:	2300      	movs	r3, #0
 800825a:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800825c:	7c7b      	ldrb	r3, [r7, #17]
 800825e:	4a5b      	ldr	r2, [pc, #364]	@ (80083cc <edpt_disable+0x190>)
 8008260:	011b      	lsls	r3, r3, #4
 8008262:	4413      	add	r3, r2
 8008264:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008266:	61fb      	str	r3, [r7, #28]
 8008268:	79bb      	ldrb	r3, [r7, #6]
 800826a:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800826c:	7cbb      	ldrb	r3, [r7, #18]
 800826e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008272:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8008274:	76fb      	strb	r3, [r7, #27]
 8008276:	79bb      	ldrb	r3, [r7, #6]
 8008278:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800827a:	7cfb      	ldrb	r3, [r7, #19]
 800827c:	09db      	lsrs	r3, r3, #7
 800827e:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8008280:	76bb      	strb	r3, [r7, #26]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8008282:	7ebb      	ldrb	r3, [r7, #26]
 8008284:	2b01      	cmp	r3, #1
 8008286:	bf14      	ite	ne
 8008288:	2301      	movne	r3, #1
 800828a:	2300      	moveq	r3, #0
 800828c:	b2db      	uxtb	r3, r3
 800828e:	461a      	mov	r2, r3
 8008290:	7efb      	ldrb	r3, [r7, #27]
 8008292:	0112      	lsls	r2, r2, #4
 8008294:	4413      	add	r3, r2
 8008296:	3348      	adds	r3, #72	@ 0x48
 8008298:	015b      	lsls	r3, r3, #5
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	4413      	add	r3, r2
 800829e:	617b      	str	r3, [r7, #20]

  if (dir == TUSB_DIR_IN) {
 80082a0:	7ebb      	ldrb	r3, [r7, #26]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d149      	bne.n	800833a <edpt_disable+0xfe>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 80082a6:	7efb      	ldrb	r3, [r7, #27]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d003      	beq.n	80082b4 <edpt_disable+0x78>
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	db0d      	blt.n	80082d0 <edpt_disable+0x94>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	797a      	ldrb	r2, [r7, #5]
 80082ba:	2a00      	cmp	r2, #0
 80082bc:	d002      	beq.n	80082c4 <edpt_disable+0x88>
 80082be:	f04f 6202 	mov.w	r2, #136314880	@ 0x8200000
 80082c2:	e001      	b.n	80082c8 <edpt_disable+0x8c>
 80082c4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80082c8:	431a      	orrs	r2, r3
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	e022      	b.n	8008316 <edpt_disable+0xda>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      dep->diepctl |= DIEPCTL_SNAK;
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 80082dc:	bf00      	nop
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d0f9      	beq.n	80082de <edpt_disable+0xa2>

      // Disable the endpoint.
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	797a      	ldrb	r2, [r7, #5]
 80082f0:	2a00      	cmp	r2, #0
 80082f2:	d001      	beq.n	80082f8 <edpt_disable+0xbc>
 80082f4:	4a36      	ldr	r2, [pc, #216]	@ (80083d0 <edpt_disable+0x194>)
 80082f6:	e001      	b.n	80082fc <edpt_disable+0xc0>
 80082f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80082fc:	431a      	orrs	r2, r3
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 8008302:	bf00      	nop
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	f003 0302 	and.w	r3, r3, #2
 800830c:	2b00      	cmp	r3, #0
 800830e:	d0f9      	beq.n	8008304 <edpt_disable+0xc8>

      dep->diepint = DIEPINT_EPDISD;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	2202      	movs	r2, #2
 8008314:	609a      	str	r2, [r3, #8]
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	60fb      	str	r3, [r7, #12]
 800831a:	7efb      	ldrb	r3, [r7, #27]
 800831c:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800831e:	7afb      	ldrb	r3, [r7, #11]
 8008320:	019b      	lsls	r3, r3, #6
 8008322:	f043 0220 	orr.w	r2, r3, #32
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800832a:	bf00      	nop
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	f003 0320 	and.w	r3, r3, #32
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1f9      	bne.n	800832c <edpt_disable+0xf0>
}
 8008338:	e041      	b.n	80083be <edpt_disable+0x182>

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dfifo_flush_tx(dwc2, epnum);
  } else {
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 800833a:	7efb      	ldrb	r3, [r7, #27]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d003      	beq.n	8008348 <edpt_disable+0x10c>
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	db0c      	blt.n	8008362 <edpt_disable+0x126>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	797a      	ldrb	r2, [r7, #5]
 800834e:	2a00      	cmp	r2, #0
 8008350:	d002      	beq.n	8008358 <edpt_disable+0x11c>
 8008352:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8008356:	e000      	b.n	800835a <edpt_disable+0x11e>
 8008358:	2200      	movs	r2, #0
 800835a:	431a      	orrs	r2, r3
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	601a      	str	r2, [r3, #0]
 8008360:	e02d      	b.n	80083be <edpt_disable+0x182>
    } else {
      // Asserting GONAK is required to STALL an OUT endpoint.
      // Simpler to use polling here, we don't use the "B"OUTNAKEFF interrupt
      // anyway, and it can't be cleared by user code. If this while loop never
      // finishes, we have bigger problems than just the stack.
      dwc2->dctl |= DCTL_SGONAK;
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8008368:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 8008372:	bf00      	nop
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	695b      	ldr	r3, [r3, #20]
 8008378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800837c:	2b00      	cmp	r3, #0
 800837e:	d0f9      	beq.n	8008374 <edpt_disable+0x138>

      // Ditto here disable the endpoint.
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	797a      	ldrb	r2, [r7, #5]
 8008386:	2a00      	cmp	r2, #0
 8008388:	d001      	beq.n	800838e <edpt_disable+0x152>
 800838a:	4a11      	ldr	r2, [pc, #68]	@ (80083d0 <edpt_disable+0x194>)
 800838c:	e001      	b.n	8008392 <edpt_disable+0x156>
 800838e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008392:	431a      	orrs	r2, r3
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	601a      	str	r2, [r3, #0]
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 8008398:	bf00      	nop
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f003 0302 	and.w	r3, r3, #2
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d0f9      	beq.n	800839a <edpt_disable+0x15e>

      dep->doepint = DOEPINT_EPDISD;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	2202      	movs	r2, #2
 80083aa:	609a      	str	r2, [r3, #8]

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80083b2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
  }
}
 80083bc:	bf00      	nop
 80083be:	bf00      	nop
 80083c0:	3724      	adds	r7, #36	@ 0x24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	0800ab20 	.word	0x0800ab20
 80083d0:	40200000 	.word	0x40200000

080083d4 <edpt_schedule_packets>:

// Since this function returns void, it is not possible to return a boolean success message
// We must make sure that this function is not called when the EP is disabled
// Must be called from critical section
static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b090      	sub	sp, #64	@ 0x40
 80083d8:	af00      	add	r7, sp, #0
 80083da:	4603      	mov	r3, r0
 80083dc:	71fb      	strb	r3, [r7, #7]
 80083de:	460b      	mov	r3, r1
 80083e0:	71bb      	strb	r3, [r7, #6]
 80083e2:	4613      	mov	r3, r2
 80083e4:	717b      	strb	r3, [r7, #5]
 80083e6:	79fb      	ldrb	r3, [r7, #7]
 80083e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80083ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d002      	beq.n	80083fa <edpt_schedule_packets+0x26>
    rhport = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80083fa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80083fe:	4a65      	ldr	r2, [pc, #404]	@ (8008594 <edpt_schedule_packets+0x1c0>)
 8008400:	011b      	lsls	r3, r3, #4
 8008402:	4413      	add	r3, r2
 8008404:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008406:	63bb      	str	r3, [r7, #56]	@ 0x38
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 8008408:	79ba      	ldrb	r2, [r7, #6]
 800840a:	797b      	ldrb	r3, [r7, #5]
 800840c:	0052      	lsls	r2, r2, #1
 800840e:	4413      	add	r3, r2
 8008410:	011b      	lsls	r3, r3, #4
 8008412:	4a61      	ldr	r2, [pc, #388]	@ (8008598 <edpt_schedule_packets+0x1c4>)
 8008414:	4413      	add	r3, r2
 8008416:	637b      	str	r3, [r7, #52]	@ 0x34
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8008418:	797b      	ldrb	r3, [r7, #5]
 800841a:	2b01      	cmp	r3, #1
 800841c:	bf14      	ite	ne
 800841e:	2301      	movne	r3, #1
 8008420:	2300      	moveq	r3, #0
 8008422:	b2db      	uxtb	r3, r3
 8008424:	461a      	mov	r2, r3
 8008426:	79bb      	ldrb	r3, [r7, #6]
 8008428:	0112      	lsls	r2, r2, #4
 800842a:	4413      	add	r3, r2
 800842c:	3348      	adds	r3, #72	@ 0x48
 800842e:	015b      	lsls	r3, r3, #5
 8008430:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008432:	4413      	add	r3, r2
 8008434:	633b      	str	r3, [r7, #48]	@ 0x30

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 8008436:	79bb      	ldrb	r3, [r7, #6]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d11c      	bne.n	8008476 <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 800843c:	797b      	ldrb	r3, [r7, #5]
 800843e:	4a57      	ldr	r2, [pc, #348]	@ (800859c <edpt_schedule_packets+0x1c8>)
 8008440:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008446:	895b      	ldrh	r3, [r3, #10]
 8008448:	853a      	strh	r2, [r7, #40]	@ 0x28
 800844a:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800844c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800844e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008450:	4293      	cmp	r3, r2
 8008452:	bf28      	it	cs
 8008454:	4613      	movcs	r3, r2
 8008456:	b29b      	uxth	r3, r3
 8008458:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    _dcd_data.ep0_pending[dir] -= total_bytes;
 800845a:	797b      	ldrb	r3, [r7, #5]
 800845c:	4a4f      	ldr	r2, [pc, #316]	@ (800859c <edpt_schedule_packets+0x1c8>)
 800845e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8008462:	797b      	ldrb	r3, [r7, #5]
 8008464:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8008466:	1a8a      	subs	r2, r1, r2
 8008468:	b291      	uxth	r1, r2
 800846a:	4a4c      	ldr	r2, [pc, #304]	@ (800859c <edpt_schedule_packets+0x1c8>)
 800846c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 8008470:	2301      	movs	r3, #1
 8008472:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008474:	e014      	b.n	80084a0 <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 8008476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008478:	891b      	ldrh	r3, [r3, #8]
 800847a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 800847c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800847e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008480:	8952      	ldrh	r2, [r2, #10]
 8008482:	623b      	str	r3, [r7, #32]
 8008484:	61fa      	str	r2, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8008486:	6a3a      	ldr	r2, [r7, #32]
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	4413      	add	r3, r2
 800848c:	1e5a      	subs	r2, r3, #1
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	fbb2 f3f3 	udiv	r3, r2, r3
 8008494:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if (num_packets == 0) {
 8008496:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 800849c:	2301      	movs	r3, #1
 800849e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }
  }

  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  dwc2_ep_tsize_t deptsiz = {.value = 0};
 80084a0:	2300      	movs	r3, #0
 80084a2:	617b      	str	r3, [r7, #20]
  deptsiz.xfer_size = total_bytes;
 80084a4:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80084a6:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f362 0312 	bfi	r3, r2, #0, #19
 80084b0:	617b      	str	r3, [r7, #20]
  deptsiz.packet_count = num_packets;
 80084b2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80084b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	8afb      	ldrh	r3, [r7, #22]
 80084bc:	f362 03cc 	bfi	r3, r2, #3, #10
 80084c0:	82fb      	strh	r3, [r7, #22]
  dep->tsiz = deptsiz.value;
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c6:	611a      	str	r2, [r3, #16]

  // control
  dwc2_depctl_t depctl = {.value = dep->ctl};
 80084c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	613b      	str	r3, [r7, #16]
  depctl.clear_nak = 1;
 80084ce:	7cfb      	ldrb	r3, [r7, #19]
 80084d0:	f043 0304 	orr.w	r3, r3, #4
 80084d4:	74fb      	strb	r3, [r7, #19]
  depctl.enable = 1;
 80084d6:	7cfb      	ldrb	r3, [r7, #19]
 80084d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084dc:	74fb      	strb	r3, [r7, #19]
  if (depctl.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 80084de:	7cbb      	ldrb	r3, [r7, #18]
 80084e0:	f003 030c 	and.w	r3, r3, #12
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b04      	cmp	r3, #4
 80084e8:	d11a      	bne.n	8008520 <edpt_schedule_packets+0x14c>
 80084ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ec:	7b1b      	ldrb	r3, [r3, #12]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d116      	bne.n	8008520 <edpt_schedule_packets+0x14c>
    const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 80084f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80084f8:	60bb      	str	r3, [r7, #8]
    const uint32_t odd_now = dsts.frame_number & 1u;
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8008500:	b29b      	uxth	r3, r3
 8008502:	f003 0301 	and.w	r3, r3, #1
 8008506:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (odd_now) {
 8008508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800850a:	2b00      	cmp	r3, #0
 800850c:	d004      	beq.n	8008518 <edpt_schedule_packets+0x144>
      depctl.set_data0_iso_even = 1;
 800850e:	7cfb      	ldrb	r3, [r7, #19]
 8008510:	f043 0310 	orr.w	r3, r3, #16
 8008514:	74fb      	strb	r3, [r7, #19]
 8008516:	e003      	b.n	8008520 <edpt_schedule_packets+0x14c>
    } else {
      depctl.set_data1_iso_odd = 1;
 8008518:	7cfb      	ldrb	r3, [r7, #19]
 800851a:	f043 0320 	orr.w	r3, r3, #32
 800851e:	74fb      	strb	r3, [r7, #19]
 8008520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008522:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008528:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800852a:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 800852c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if(is_dma) {
 8008530:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008534:	2b00      	cmp	r3, #0
 8008536:	d015      	beq.n	8008564 <edpt_schedule_packets+0x190>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 8008538:	797b      	ldrb	r3, [r7, #5]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d109      	bne.n	8008552 <edpt_schedule_packets+0x17e>
 800853e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008540:	2b00      	cmp	r3, #0
 8008542:	d006      	beq.n	8008552 <edpt_schedule_packets+0x17e>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 8008544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800854a:	4611      	mov	r1, r2
 800854c:	4618      	mov	r0, r3
 800854e:	f7fd fd5c 	bl	800600a <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 8008552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	461a      	mov	r2, r3
 8008558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855a:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008560:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 8008562:	e013      	b.n	800858c <edpt_schedule_packets+0x1b8>
    dep->diepctl = depctl.value; // enable endpoint
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008568:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 800856a:	797b      	ldrb	r3, [r7, #5]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d10d      	bne.n	800858c <edpt_schedule_packets+0x1b8>
 8008570:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00a      	beq.n	800858c <edpt_schedule_packets+0x1b8>
      dwc2->diepempmsk |= (1 << epnum);
 8008576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008578:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800857c:	79ba      	ldrb	r2, [r7, #6]
 800857e:	2101      	movs	r1, #1
 8008580:	fa01 f202 	lsl.w	r2, r1, r2
 8008584:	431a      	orrs	r2, r3
 8008586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008588:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 800858c:	bf00      	nop
 800858e:	3740      	adds	r7, #64	@ 0x40
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	0800ab20 	.word	0x0800ab20
 8008598:	20000c18 	.word	0x20000c18
 800859c:	20000c98 	.word	0x20000c98

080085a0 <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b08c      	sub	sp, #48	@ 0x30
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4603      	mov	r3, r0
 80085a8:	6039      	str	r1, [r7, #0]
 80085aa:	71fb      	strb	r3, [r7, #7]
 80085ac:	79fb      	ldrb	r3, [r7, #7]
 80085ae:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80085b0:	7dfb      	ldrb	r3, [r7, #23]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d001      	beq.n	80085ba <dcd_init+0x1a>
    rhport = 0;
 80085b6:	2300      	movs	r3, #0
 80085b8:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
 80085bc:	4a43      	ldr	r2, [pc, #268]	@ (80086cc <dcd_init+0x12c>)
 80085be:	011b      	lsls	r3, r3, #4
 80085c0:	4413      	add	r3, r2
 80085c2:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80085c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 80085c6:	2208      	movs	r2, #8
 80085c8:	2100      	movs	r1, #0
 80085ca:	4841      	ldr	r0, [pc, #260]	@ (80086d0 <dcd_init+0x130>)
 80085cc:	f001 feb0 	bl	800a330 <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 80085d0:	2101      	movs	r1, #1
 80085d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085d4:	f001 f9c6 	bl	8009964 <dwc2_core_is_highspeed>
 80085d8:	4603      	mov	r3, r0
 80085da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80085de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e0:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085e6:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 80085e8:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 80085ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 80085ee:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80085f2:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80085f6:	79fb      	ldrb	r3, [r7, #7]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f001 f9d1 	bl	80099a0 <dwc2_core_init>
 80085fe:	4603      	mov	r3, r0
 8008600:	f083 0301 	eor.w	r3, r3, #1
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00a      	beq.n	8008620 <dcd_init+0x80>
 800860a:	4b32      	ldr	r3, [pc, #200]	@ (80086d4 <dcd_init+0x134>)
 800860c:	61fb      	str	r3, [r7, #28]
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0301 	and.w	r3, r3, #1
 8008616:	2b00      	cmp	r3, #0
 8008618:	d000      	beq.n	800861c <dcd_init+0x7c>
 800861a:	be00      	bkpt	0x0000
 800861c:	2300      	movs	r3, #0
 800861e:	e050      	b.n	80086c2 <dcd_init+0x122>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 8008620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008622:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8008626:	f023 0303 	bic.w	r3, r3, #3
 800862a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (is_highspeed) {
 800862c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00d      	beq.n	8008650 <dcd_init+0xb0>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8008634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008638:	60fb      	str	r3, [r7, #12]
    if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800863a:	7b3b      	ldrb	r3, [r7, #12]
 800863c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008640:	b2db      	uxtb	r3, r3
 8008642:	2b80      	cmp	r3, #128	@ 0x80
 8008644:	d108      	bne.n	8008658 <dcd_init+0xb8>
      dcfg |= DCFG_XCVRDLY;
 8008646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008648:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800864c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800864e:	e003      	b.n	8008658 <dcd_init+0xb8>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 8008650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008652:	f043 0303 	orr.w	r3, r3, #3
 8008656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 8008658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865a:	f043 0304 	orr.w	r3, r3, #4
 800865e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2->dcfg = dcfg;
 8008660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008664:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 8008668:	79fb      	ldrb	r3, [r7, #7]
 800866a:	4618      	mov	r0, r3
 800866c:	f000 f92a 	bl	80088c4 <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 8008670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008678:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800867c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867e:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8008680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8008688:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 800868c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868e:	601a      	str	r2, [r3, #0]
  // No hardware detection of Vbus B-session is available on the STM32N6
  dwc2->stm32_gccfg |= STM32_GCCFG_VBVALOVAL;
#endif

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 8008690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008692:	699a      	ldr	r2, [r3, #24]
 8008694:	4b10      	ldr	r3, [pc, #64]	@ (80086d8 <dcd_init+0x138>)
 8008696:	4313      	orrs	r3, r2
 8008698:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800869a:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 800869c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 80086a2:	6a3b      	ldr	r3, [r7, #32]
 80086a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086a8:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	f043 0301 	orr.w	r3, r3, #1
 80086b0:	623b      	str	r3, [r7, #32]
  dwc2->gahbcfg = gahbcfg;
 80086b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b4:	6a3a      	ldr	r2, [r7, #32]
 80086b6:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 80086b8:	79fb      	ldrb	r3, [r7, #7]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 f8e0 	bl	8008880 <dcd_connect>
  return true;
 80086c0:	2301      	movs	r3, #1
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3730      	adds	r7, #48	@ 0x30
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	0800ab20 	.word	0x0800ab20
 80086d0:	20000c98 	.word	0x20000c98
 80086d4:	e000edf0 	.word	0xe000edf0
 80086d8:	80003804 	.word	0x80003804

080086dc <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	4603      	mov	r3, r0
 80086e4:	71fb      	strb	r3, [r7, #7]
 80086e6:	79fb      	ldrb	r3, [r7, #7]
 80086e8:	73fb      	strb	r3, [r7, #15]
 80086ea:	2301      	movs	r3, #1
 80086ec:	73bb      	strb	r3, [r7, #14]
 80086ee:	2301      	movs	r3, #1
 80086f0:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
 80086f4:	4a0c      	ldr	r2, [pc, #48]	@ (8008728 <dcd_int_enable+0x4c>)
 80086f6:	011b      	lsls	r3, r3, #4
 80086f8:	4413      	add	r3, r2
 80086fa:	3304      	adds	r3, #4
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 8008700:	7b7b      	ldrb	r3, [r7, #13]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d005      	beq.n	8008712 <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 8008706:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800870a:	4618      	mov	r0, r3
 800870c:	f7ff fb3e 	bl	8007d8c <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 8008710:	e004      	b.n	800871c <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 8008712:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8008716:	4618      	mov	r0, r3
 8008718:	f7ff fb56 	bl	8007dc8 <__NVIC_DisableIRQ>
}
 800871c:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 800871e:	bf00      	nop
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	0800ab20 	.word	0x0800ab20

0800872c <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	4603      	mov	r3, r0
 8008734:	71fb      	strb	r3, [r7, #7]
 8008736:	79fb      	ldrb	r3, [r7, #7]
 8008738:	73fb      	strb	r3, [r7, #15]
 800873a:	2301      	movs	r3, #1
 800873c:	73bb      	strb	r3, [r7, #14]
 800873e:	2300      	movs	r3, #0
 8008740:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 8008742:	7bfb      	ldrb	r3, [r7, #15]
 8008744:	4a0c      	ldr	r2, [pc, #48]	@ (8008778 <dcd_int_disable+0x4c>)
 8008746:	011b      	lsls	r3, r3, #4
 8008748:	4413      	add	r3, r2
 800874a:	3304      	adds	r3, #4
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 8008750:	7b7b      	ldrb	r3, [r7, #13]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d005      	beq.n	8008762 <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 8008756:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800875a:	4618      	mov	r0, r3
 800875c:	f7ff fb16 	bl	8007d8c <__NVIC_EnableIRQ>
}
 8008760:	e004      	b.n	800876c <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 8008762:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8008766:	4618      	mov	r0, r3
 8008768:	f7ff fb2e 	bl	8007dc8 <__NVIC_DisableIRQ>
}
 800876c:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 800876e:	bf00      	nop
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	0800ab20 	.word	0x0800ab20

0800877c <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	460a      	mov	r2, r1
 8008786:	71fb      	strb	r3, [r7, #7]
 8008788:	4613      	mov	r3, r2
 800878a:	71bb      	strb	r3, [r7, #6]
 800878c:	79fb      	ldrb	r3, [r7, #7]
 800878e:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008790:	7a7b      	ldrb	r3, [r7, #9]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <dcd_set_address+0x1e>
    rhport = 0;
 8008796:	2300      	movs	r3, #0
 8008798:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800879a:	7a7b      	ldrb	r3, [r7, #9]
 800879c:	4a14      	ldr	r2, [pc, #80]	@ (80087f0 <dcd_set_address+0x74>)
 800879e:	011b      	lsls	r3, r3, #4
 80087a0:	4413      	add	r3, r2
 80087a2:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80087a4:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 80087ac:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 80087b0:	79bb      	ldrb	r3, [r7, #6]
 80087b2:	011b      	lsls	r3, r3, #4
 80087b4:	431a      	orrs	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 80087bc:	2300      	movs	r3, #0
 80087be:	72fb      	strb	r3, [r7, #11]
 80087c0:	2301      	movs	r3, #1
 80087c2:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 80087c4:	7abb      	ldrb	r3, [r7, #10]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d002      	beq.n	80087d0 <dcd_set_address+0x54>
 80087ca:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80087ce:	e000      	b.n	80087d2 <dcd_set_address+0x56>
 80087d0:	2300      	movs	r3, #0
 80087d2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	b25b      	sxtb	r3, r3
 80087da:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 80087dc:	79f8      	ldrb	r0, [r7, #7]
 80087de:	2300      	movs	r3, #0
 80087e0:	2200      	movs	r2, #0
 80087e2:	f000 f98b 	bl	8008afc <dcd_edpt_xfer>
}
 80087e6:	bf00      	nop
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	0800ab20 	.word	0x0800ab20

080087f4 <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 80087f4:	b480      	push	{r7}
 80087f6:	b087      	sub	sp, #28
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	4603      	mov	r3, r0
 80087fc:	71fb      	strb	r3, [r7, #7]
 80087fe:	79fb      	ldrb	r3, [r7, #7]
 8008800:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008802:	7bfb      	ldrb	r3, [r7, #15]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d001      	beq.n	800880c <dcd_remote_wakeup+0x18>
    rhport = 0;
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800880c:	7bfb      	ldrb	r3, [r7, #15]
 800880e:	4a19      	ldr	r2, [pc, #100]	@ (8008874 <dcd_remote_wakeup+0x80>)
 8008810:	011b      	lsls	r3, r3, #4
 8008812:	4413      	add	r3, r2
 8008814:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008816:	617b      	str	r3, [r7, #20]

  // set remote wakeup
  dwc2->dctl |= DCTL_RWUSIG;
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800881e:	f043 0201 	orr.w	r2, r3, #1
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  // enable SOF to detect bus resume
  dwc2->gintsts = GINTSTS_SOF;
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	2208      	movs	r2, #8
 800882c:	615a      	str	r2, [r3, #20]
  dwc2->gintmsk |= GINTMSK_SOFM;
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	f043 0208 	orr.w	r2, r3, #8
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	619a      	str	r2, [r3, #24]
#define dwc2_dcd_int_disable(_rhport) dwc2_int_set(_rhport, TUSB_ROLE_DEVICE, false)


TU_ATTR_ALWAYS_INLINE static inline void dwc2_remote_wakeup_delay(void) {
  // try to delay for 1 ms
  uint32_t count = SystemCoreClock / 1000;
 800883a:	4b0f      	ldr	r3, [pc, #60]	@ (8008878 <dcd_remote_wakeup+0x84>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a0f      	ldr	r2, [pc, #60]	@ (800887c <dcd_remote_wakeup+0x88>)
 8008840:	fba2 2303 	umull	r2, r3, r2, r3
 8008844:	099b      	lsrs	r3, r3, #6
 8008846:	613b      	str	r3, [r7, #16]
  while (count--) __NOP();
 8008848:	e000      	b.n	800884c <dcd_remote_wakeup+0x58>
 800884a:	bf00      	nop
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	1e5a      	subs	r2, r3, #1
 8008850:	613a      	str	r2, [r7, #16]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1f9      	bne.n	800884a <dcd_remote_wakeup+0x56>
}
 8008856:	bf00      	nop

  // Per specs: remote wakeup signal bit must be clear within 1-15ms
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800885e:	f023 0201 	bic.w	r2, r3, #1
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8008868:	bf00      	nop
 800886a:	371c      	adds	r7, #28
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	0800ab20 	.word	0x0800ab20
 8008878:	20000048 	.word	0x20000048
 800887c:	10624dd3 	.word	0x10624dd3

08008880 <dcd_connect>:

void dcd_connect(uint8_t rhport) {
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	4603      	mov	r3, r0
 8008888:	71fb      	strb	r3, [r7, #7]
 800888a:	79fb      	ldrb	r3, [r7, #7]
 800888c:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800888e:	7afb      	ldrb	r3, [r7, #11]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d001      	beq.n	8008898 <dcd_connect+0x18>
    rhport = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008898:	7afb      	ldrb	r3, [r7, #11]
 800889a:	4a09      	ldr	r2, [pc, #36]	@ (80088c0 <dcd_connect+0x40>)
 800889c:	011b      	lsls	r3, r3, #4
 800889e:	4413      	add	r3, r2
 80088a0:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80088a2:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80088aa:	f023 0202 	bic.w	r2, r3, #2
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 80088b4:	bf00      	nop
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr
 80088c0:	0800ab20 	.word	0x0800ab20

080088c4 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	4603      	mov	r3, r0
 80088cc:	71fb      	strb	r3, [r7, #7]
 80088ce:	79fb      	ldrb	r3, [r7, #7]
 80088d0:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80088d2:	7afb      	ldrb	r3, [r7, #11]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <dcd_disconnect+0x18>
    rhport = 0;
 80088d8:	2300      	movs	r3, #0
 80088da:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80088dc:	7afb      	ldrb	r3, [r7, #11]
 80088de:	4a09      	ldr	r2, [pc, #36]	@ (8008904 <dcd_disconnect+0x40>)
 80088e0:	011b      	lsls	r3, r3, #4
 80088e2:	4413      	add	r3, r2
 80088e4:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80088e6:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80088ee:	f043 0202 	orr.w	r2, r3, #2
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 80088f8:	bf00      	nop
 80088fa:	3714      	adds	r7, #20
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr
 8008904:	0800ab20 	.word	0x0800ab20

08008908 <dcd_sof_enable>:

// Be advised: audio, video and possibly other iso-ep classes use dcd_sof_enable() to enable/disable its corresponding ISR on purpose!
void dcd_sof_enable(uint8_t rhport, bool en) {
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	4603      	mov	r3, r0
 8008910:	460a      	mov	r2, r1
 8008912:	71fb      	strb	r3, [r7, #7]
 8008914:	4613      	mov	r3, r2
 8008916:	71bb      	strb	r3, [r7, #6]
 8008918:	79fb      	ldrb	r3, [r7, #7]
 800891a:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800891c:	7afb      	ldrb	r3, [r7, #11]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <dcd_sof_enable+0x1e>
    rhport = 0;
 8008922:	2300      	movs	r3, #0
 8008924:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008926:	7afb      	ldrb	r3, [r7, #11]
 8008928:	4a10      	ldr	r2, [pc, #64]	@ (800896c <dcd_sof_enable+0x64>)
 800892a:	011b      	lsls	r3, r3, #4
 800892c:	4413      	add	r3, r2
 800892e:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008930:	60fb      	str	r3, [r7, #12]

  _dcd_data.sof_en = en;
 8008932:	4a0f      	ldr	r2, [pc, #60]	@ (8008970 <dcd_sof_enable+0x68>)
 8008934:	79bb      	ldrb	r3, [r7, #6]
 8008936:	71d3      	strb	r3, [r2, #7]

  if (en) {
 8008938:	79bb      	ldrb	r3, [r7, #6]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d009      	beq.n	8008952 <dcd_sof_enable+0x4a>
    dwc2->gintsts = GINTSTS_SOF;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2208      	movs	r2, #8
 8008942:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	f043 0208 	orr.w	r2, r3, #8
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	619a      	str	r2, [r3, #24]
  } else {
    dwc2->gintmsk &= ~GINTMSK_SOFM;
  }
}
 8008950:	e005      	b.n	800895e <dcd_sof_enable+0x56>
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	f023 0208 	bic.w	r2, r3, #8
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	619a      	str	r2, [r3, #24]
}
 800895e:	bf00      	nop
 8008960:	3714      	adds	r7, #20
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	0800ab20 	.word	0x0800ab20
 8008970:	20000c98 	.word	0x20000c98

08008974 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	4603      	mov	r3, r0
 800897c:	6039      	str	r1, [r7, #0]
 800897e:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	7899      	ldrb	r1, [r3, #2]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	889b      	ldrh	r3, [r3, #4]
 800898c:	b29b      	uxth	r3, r3
 800898e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008992:	b29a      	uxth	r2, r3
 8008994:	79fb      	ldrb	r3, [r7, #7]
 8008996:	4618      	mov	r0, r3
 8008998:	f7ff fa76 	bl	8007e88 <dfifo_alloc>
 800899c:	4603      	mov	r3, r0
 800899e:	f083 0301 	eor.w	r3, r3, #1
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00a      	beq.n	80089be <dcd_edpt_open+0x4a>
 80089a8:	4b0a      	ldr	r3, [pc, #40]	@ (80089d4 <dcd_edpt_open+0x60>)
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0301 	and.w	r3, r3, #1
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d000      	beq.n	80089ba <dcd_edpt_open+0x46>
 80089b8:	be00      	bkpt	0x0000
 80089ba:	2300      	movs	r3, #0
 80089bc:	e005      	b.n	80089ca <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 80089be:	79fb      	ldrb	r3, [r7, #7]
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7ff fb9c 	bl	8008100 <edpt_activate>
  return true;
 80089c8:	2301      	movs	r3, #1
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	e000edf0 	.word	0xe000edf0

080089d8 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 80089d8:	b580      	push	{r7, lr}
 80089da:	b08a      	sub	sp, #40	@ 0x28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	4603      	mov	r3, r0
 80089e0:	71fb      	strb	r3, [r7, #7]
 80089e2:	79fb      	ldrb	r3, [r7, #7]
 80089e4:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80089e6:	7dfb      	ldrb	r3, [r7, #23]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d001      	beq.n	80089f0 <dcd_edpt_close_all+0x18>
    rhport = 0;
 80089ec:	2300      	movs	r3, #0
 80089ee:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80089f0:	7dfb      	ldrb	r3, [r7, #23]
 80089f2:	4a3f      	ldr	r2, [pc, #252]	@ (8008af0 <dcd_edpt_close_all+0x118>)
 80089f4:	011b      	lsls	r3, r3, #4
 80089f6:	4413      	add	r3, r2
 80089f8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80089fa:	623b      	str	r3, [r7, #32]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 80089fc:	79fb      	ldrb	r3, [r7, #7]
 80089fe:	4a3c      	ldr	r2, [pc, #240]	@ (8008af0 <dcd_edpt_close_all+0x118>)
 8008a00:	011b      	lsls	r3, r3, #4
 8008a02:	4413      	add	r3, r2
 8008a04:	3308      	adds	r3, #8
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	77fb      	strb	r3, [r7, #31]

  usbd_spin_lock(false);
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	f7fe fd4a 	bl	80074a4 <usbd_spin_lock>

  _dcd_data.allocated_epin_count = 0;
 8008a10:	4b38      	ldr	r3, [pc, #224]	@ (8008af4 <dcd_edpt_close_all+0x11c>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	719a      	strb	r2, [r3, #6]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8008a1c:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 8008a20:	2301      	movs	r3, #1
 8008a22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008a26:	e034      	b.n	8008a92 <dcd_edpt_close_all+0xba>
    for (uint8_t d = 0; d < 2; d++) {
 8008a28:	2300      	movs	r3, #0
 8008a2a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008a2e:	e027      	b.n	8008a80 <dcd_edpt_close_all+0xa8>
      dwc2_dep_t* dep = &dwc2->ep[d][n];
 8008a30:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a38:	0112      	lsls	r2, r2, #4
 8008a3a:	4413      	add	r3, r2
 8008a3c:	3348      	adds	r3, #72	@ 0x48
 8008a3e:	015b      	lsls	r3, r3, #5
 8008a40:	6a3a      	ldr	r2, [r7, #32]
 8008a42:	4413      	add	r3, r2
 8008a44:	61bb      	str	r3, [r7, #24]
      if (dep->ctl & EPCTL_EPENA) {
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	da05      	bge.n	8008a5a <dcd_edpt_close_all+0x82>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f043 4290 	orr.w	r2, r3, #1207959552	@ 0x48000000
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	601a      	str	r2, [r3, #0]
      }
      xfer_status[n][1-d].max_size = 0;
 8008a5a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008a5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a62:	f1c3 0301 	rsb	r3, r3, #1
 8008a66:	4924      	ldr	r1, [pc, #144]	@ (8008af8 <dcd_edpt_close_all+0x120>)
 8008a68:	0052      	lsls	r2, r2, #1
 8008a6a:	4413      	add	r3, r2
 8008a6c:	011b      	lsls	r3, r3, #4
 8008a6e:	440b      	add	r3, r1
 8008a70:	330a      	adds	r3, #10
 8008a72:	2200      	movs	r2, #0
 8008a74:	801a      	strh	r2, [r3, #0]
    for (uint8_t d = 0; d < 2; d++) {
 8008a76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008a80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d9d3      	bls.n	8008a30 <dcd_edpt_close_all+0x58>
  for (uint8_t n = 1; n < ep_count; n++) {
 8008a88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008a92:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008a96:	7ffb      	ldrb	r3, [r7, #31]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d3c5      	bcc.n	8008a28 <dcd_edpt_close_all+0x50>
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	2310      	movs	r3, #16
 8008aa2:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8008aa4:	7afb      	ldrb	r3, [r7, #11]
 8008aa6:	019b      	lsls	r3, r3, #6
 8008aa8:	f043 0220 	orr.w	r2, r3, #32
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8008ab0:	bf00      	nop
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	f003 0320 	and.w	r3, r3, #32
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1f9      	bne.n	8008ab2 <dcd_edpt_close_all+0xda>
}
 8008abe:	bf00      	nop
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	2210      	movs	r2, #16
 8008ac8:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8008aca:	bf00      	nop
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	f003 0310 	and.w	r3, r3, #16
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1f9      	bne.n	8008acc <dcd_edpt_close_all+0xf4>
}
 8008ad8:	bf00      	nop
    }
  }

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport); // re-init dfifo
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7ff fab5 	bl	800804c <dfifo_device_init>

  usbd_spin_unlock(false);
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	f7fe fcf8 	bl	80074d8 <usbd_spin_unlock>
}
 8008ae8:	bf00      	nop
 8008aea:	3728      	adds	r7, #40	@ 0x28
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	0800ab20 	.word	0x0800ab20
 8008af4:	20000c98 	.word	0x20000c98
 8008af8:	20000c18 	.word	0x20000c18

08008afc <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	603a      	str	r2, [r7, #0]
 8008b04:	461a      	mov	r2, r3
 8008b06:	4603      	mov	r3, r0
 8008b08:	71fb      	strb	r3, [r7, #7]
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	71bb      	strb	r3, [r7, #6]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	80bb      	strh	r3, [r7, #4]
 8008b12:	79bb      	ldrb	r3, [r7, #6]
 8008b14:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008b16:	7bbb      	ldrb	r3, [r7, #14]
 8008b18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b1c:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008b1e:	75bb      	strb	r3, [r7, #22]
 8008b20:	79bb      	ldrb	r3, [r7, #6]
 8008b22:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008b24:	7bfb      	ldrb	r3, [r7, #15]
 8008b26:	09db      	lsrs	r3, r3, #7
 8008b28:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008b2a:	757b      	strb	r3, [r7, #21]
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8008b2c:	7dba      	ldrb	r2, [r7, #22]
 8008b2e:	7d7b      	ldrb	r3, [r7, #21]
 8008b30:	0052      	lsls	r2, r2, #1
 8008b32:	4413      	add	r3, r2
 8008b34:	011b      	lsls	r3, r3, #4
 8008b36:	4a17      	ldr	r2, [pc, #92]	@ (8008b94 <dcd_edpt_xfer+0x98>)
 8008b38:	4413      	add	r3, r2
 8008b3a:	613b      	str	r3, [r7, #16]
  bool ret;

  usbd_spin_lock(false);
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	f7fe fcb1 	bl	80074a4 <usbd_spin_lock>

  if (xfer->max_size == 0) {
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	895b      	ldrh	r3, [r3, #10]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d102      	bne.n	8008b50 <dcd_edpt_xfer+0x54>
    ret = false;  // Endpoint is closed
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	75fb      	strb	r3, [r7, #23]
 8008b4e:	e018      	b.n	8008b82 <dcd_edpt_xfer+0x86>
  } else {
    xfer->buffer = buffer;
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	601a      	str	r2, [r3, #0]
    xfer->ff = NULL;
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	605a      	str	r2, [r3, #4]
    xfer->total_len = total_bytes;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	88ba      	ldrh	r2, [r7, #4]
 8008b60:	811a      	strh	r2, [r3, #8]

    // EP0 can only handle one packet
    if (epnum == 0) {
 8008b62:	7dbb      	ldrb	r3, [r7, #22]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d104      	bne.n	8008b72 <dcd_edpt_xfer+0x76>
      _dcd_data.ep0_pending[dir] = total_bytes;
 8008b68:	7d7b      	ldrb	r3, [r7, #21]
 8008b6a:	490b      	ldr	r1, [pc, #44]	@ (8008b98 <dcd_edpt_xfer+0x9c>)
 8008b6c:	88ba      	ldrh	r2, [r7, #4]
 8008b6e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir);
 8008b72:	7d7a      	ldrb	r2, [r7, #21]
 8008b74:	7db9      	ldrb	r1, [r7, #22]
 8008b76:	79fb      	ldrb	r3, [r7, #7]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7ff fc2b 	bl	80083d4 <edpt_schedule_packets>
    ret = true;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	75fb      	strb	r3, [r7, #23]
  }

  usbd_spin_unlock(false);
 8008b82:	2000      	movs	r0, #0
 8008b84:	f7fe fca8 	bl	80074d8 <usbd_spin_unlock>

  return ret;
 8008b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	20000c18 	.word	0x20000c18
 8008b98:	20000c98 	.word	0x20000c98

08008b9c <dcd_edpt_stall>:
  usbd_spin_unlock(false);

  return ret;
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	460a      	mov	r2, r1
 8008ba6:	71fb      	strb	r3, [r7, #7]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	71bb      	strb	r3, [r7, #6]
 8008bac:	79fb      	ldrb	r3, [r7, #7]
 8008bae:	74bb      	strb	r3, [r7, #18]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008bb0:	7cbb      	ldrb	r3, [r7, #18]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <dcd_edpt_stall+0x1e>
    rhport = 0;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	74bb      	strb	r3, [r7, #18]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008bba:	7cbb      	ldrb	r3, [r7, #18]
 8008bbc:	4a11      	ldr	r2, [pc, #68]	@ (8008c04 <dcd_edpt_stall+0x68>)
 8008bbe:	011b      	lsls	r3, r3, #4
 8008bc0:	4413      	add	r3, r2
 8008bc2:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008bc4:	617b      	str	r3, [r7, #20]
  edpt_disable(rhport, ep_addr, true);
 8008bc6:	79b9      	ldrb	r1, [r7, #6]
 8008bc8:	79fb      	ldrb	r3, [r7, #7]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7ff fb35 	bl	800823c <edpt_disable>
 8008bd2:	79bb      	ldrb	r3, [r7, #6]
 8008bd4:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008bd6:	7cfb      	ldrb	r3, [r7, #19]
 8008bd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bdc:	b2db      	uxtb	r3, r3
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10b      	bne.n	8008bfa <dcd_edpt_stall+0x5e>
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	60fb      	str	r3, [r7, #12]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bea:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8008bec:	2300      	movs	r3, #0
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <dcd_edpt_stall+0x5e>
    dma_setup_prepare(rhport);
 8008bf2:	79fb      	ldrb	r3, [r7, #7]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7ff f90b 	bl	8007e10 <dma_setup_prepare>
  }
}
 8008bfa:	bf00      	nop
 8008bfc:	3718      	adds	r7, #24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	0800ab20 	.word	0x0800ab20

08008c08 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 8008c08:	b480      	push	{r7}
 8008c0a:	b087      	sub	sp, #28
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	4603      	mov	r3, r0
 8008c10:	460a      	mov	r2, r1
 8008c12:	71fb      	strb	r3, [r7, #7]
 8008c14:	4613      	mov	r3, r2
 8008c16:	71bb      	strb	r3, [r7, #6]
 8008c18:	79fb      	ldrb	r3, [r7, #7]
 8008c1a:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008c1c:	7a7b      	ldrb	r3, [r7, #9]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d001      	beq.n	8008c26 <dcd_edpt_clear_stall+0x1e>
    rhport = 0;
 8008c22:	2300      	movs	r3, #0
 8008c24:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008c26:	7a7b      	ldrb	r3, [r7, #9]
 8008c28:	4a19      	ldr	r2, [pc, #100]	@ (8008c90 <dcd_edpt_clear_stall+0x88>)
 8008c2a:	011b      	lsls	r3, r3, #4
 8008c2c:	4413      	add	r3, r2
 8008c2e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008c30:	617b      	str	r3, [r7, #20]
 8008c32:	79bb      	ldrb	r3, [r7, #6]
 8008c34:	72bb      	strb	r3, [r7, #10]
 8008c36:	7abb      	ldrb	r3, [r7, #10]
 8008c38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c3c:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008c3e:	74fb      	strb	r3, [r7, #19]
 8008c40:	79bb      	ldrb	r3, [r7, #6]
 8008c42:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008c44:	7afb      	ldrb	r3, [r7, #11]
 8008c46:	09db      	lsrs	r3, r3, #7
 8008c48:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008c4a:	74bb      	strb	r3, [r7, #18]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8008c4c:	7cbb      	ldrb	r3, [r7, #18]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	bf14      	ite	ne
 8008c52:	2301      	movne	r3, #1
 8008c54:	2300      	moveq	r3, #0
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	461a      	mov	r2, r3
 8008c5a:	7cfb      	ldrb	r3, [r7, #19]
 8008c5c:	0112      	lsls	r2, r2, #4
 8008c5e:	4413      	add	r3, r2
 8008c60:	3348      	adds	r3, #72	@ 0x48
 8008c62:	015b      	lsls	r3, r3, #5
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	4413      	add	r3, r2
 8008c68:	60fb      	str	r3, [r7, #12]

  // Clear stall and reset data toggle
  dep->ctl &= ~EPCTL_STALL;;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	601a      	str	r2, [r3, #0]
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	601a      	str	r2, [r3, #0]
}
 8008c82:	bf00      	nop
 8008c84:	371c      	adds	r7, #28
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	0800ab20 	.word	0x0800ab20

08008c94 <handle_bus_reset>:
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
// Must be called from critical section
static void handle_bus_reset(uint8_t rhport) {
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b08e      	sub	sp, #56	@ 0x38
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	71fb      	strb	r3, [r7, #7]
 8008c9e:	79fb      	ldrb	r3, [r7, #7]
 8008ca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d002      	beq.n	8008cb2 <handle_bus_reset+0x1e>
    rhport = 0;
 8008cac:	2300      	movs	r3, #0
 8008cae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cb6:	4a6a      	ldr	r2, [pc, #424]	@ (8008e60 <handle_bus_reset+0x1cc>)
 8008cb8:	011b      	lsls	r3, r3, #4
 8008cba:	4413      	add	r3, r2
 8008cbc:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8008cbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8008cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8008cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cc8:	60bb      	str	r3, [r7, #8]
  return ghwcfg2.num_dev_ep + 1;
 8008cca:	7a7b      	ldrb	r3, [r7, #9]
 8008ccc:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	b2db      	uxtb	r3, r3
  const uint8_t ep_count =  dwc2_ep_count(dwc2);
 8008cd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  tu_memclr(xfer_status, sizeof(xfer_status));
 8008cda:	2280      	movs	r2, #128	@ 0x80
 8008cdc:	2100      	movs	r1, #0
 8008cde:	4861      	ldr	r0, [pc, #388]	@ (8008e64 <handle_bus_reset+0x1d0>)
 8008ce0:	f001 fb26 	bl	800a330 <memset>

  _dcd_data.sof_en = false;
 8008ce4:	4b60      	ldr	r3, [pc, #384]	@ (8008e68 <handle_bus_reset+0x1d4>)
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 8008cea:	4b5f      	ldr	r3, [pc, #380]	@ (8008e68 <handle_bus_reset+0x1d4>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008cf6:	e014      	b.n	8008d22 <handle_bus_reset+0x8e>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8008cf8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cfe:	3358      	adds	r3, #88	@ 0x58
 8008d00:	015b      	lsls	r3, r3, #5
 8008d02:	4413      	add	r3, r2
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008d0a:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8008d0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d10:	3358      	adds	r3, #88	@ 0x58
 8008d12:	015b      	lsls	r3, r3, #5
 8008d14:	440b      	add	r3, r1
 8008d16:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 8008d18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008d22:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8008d26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d3e4      	bcc.n	8008cf8 <handle_bus_reset+0x64>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 8008d2e:	2300      	movs	r3, #0
 8008d30:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8008d34:	e01d      	b.n	8008d72 <handle_bus_reset+0xde>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 8008d36:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d3c:	3348      	adds	r3, #72	@ 0x48
 8008d3e:	015b      	lsls	r3, r3, #5
 8008d40:	4413      	add	r3, r2
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	da0f      	bge.n	8008d68 <handle_bus_reset+0xd4>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 8008d48:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008d4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d4e:	3348      	adds	r3, #72	@ 0x48
 8008d50:	015b      	lsls	r3, r3, #5
 8008d52:	4413      	add	r3, r2
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008d5a:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 8008d5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d60:	3348      	adds	r3, #72	@ 0x48
 8008d62:	015b      	lsls	r3, r3, #5
 8008d64:	440b      	add	r3, r1
 8008d66:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 8008d68:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8008d72:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8008d76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d3db      	bcc.n	8008d36 <handle_bus_reset+0xa2>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d80:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8008d84:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8008d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8a:	2209      	movs	r2, #9
 8008d8c:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 8008d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d92:	2209      	movs	r2, #9
 8008d94:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 8008d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9a:	61bb      	str	r3, [r7, #24]
 8008d9c:	2310      	movs	r3, #16
 8008d9e:	75fb      	strb	r3, [r7, #23]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8008da0:	7dfb      	ldrb	r3, [r7, #23]
 8008da2:	019b      	lsls	r3, r3, #6
 8008da4:	f043 0220 	orr.w	r2, r3, #32
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8008dac:	bf00      	nop
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	f003 0320 	and.w	r3, r3, #32
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1f9      	bne.n	8008dae <handle_bus_reset+0x11a>
}
 8008dba:	bf00      	nop
 8008dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dbe:	61fb      	str	r3, [r7, #28]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	2210      	movs	r2, #16
 8008dc4:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8008dc6:	bf00      	nop
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	f003 0310 	and.w	r3, r3, #16
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1f9      	bne.n	8008dc8 <handle_bus_reset+0x134>
}
 8008dd4:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 8008dd6:	79fb      	ldrb	r3, [r7, #7]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7ff f937 	bl	800804c <dfifo_device_init>

  // 5. Reset device address
  dwc2_dcfg_t dcfg = {.value = dwc2->dcfg};
 8008dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8008de4:	613b      	str	r3, [r7, #16]
  dcfg.address = 0;
 8008de6:	8a3b      	ldrh	r3, [r7, #16]
 8008de8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008dec:	823b      	strh	r3, [r7, #16]
  dwc2->dcfg = dcfg.value;
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df2:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8008df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df8:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8008dfc:	f023 0203 	bic.w	r2, r3, #3
 8008e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e02:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 8008e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e08:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8008e0c:	f023 0203 	bic.w	r2, r3, #3
 8008e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e12:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8008e16:	4b13      	ldr	r3, [pc, #76]	@ (8008e64 <handle_bus_reset+0x1d0>)
 8008e18:	2240      	movs	r2, #64	@ 0x40
 8008e1a:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8008e1c:	4b11      	ldr	r3, [pc, #68]	@ (8008e64 <handle_bus_reset+0x1d0>)
 8008e1e:	2240      	movs	r2, #64	@ 0x40
 8008e20:	835a      	strh	r2, [r3, #26]
 8008e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e24:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8008e26:	6a3b      	ldr	r3, [r7, #32]
 8008e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e2a:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8008e2c:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d004      	beq.n	8008e3c <handle_bus_reset+0x1a8>
    dma_setup_prepare(rhport);
 8008e32:	79fb      	ldrb	r3, [r7, #7]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fe ffeb 	bl	8007e10 <dma_setup_prepare>
 8008e3a:	e007      	b.n	8008e4c <handle_bus_reset+0x1b8>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3e:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 8008e42:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 8008e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e48:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 8008e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e56:	619a      	str	r2, [r3, #24]
}
 8008e58:	bf00      	nop
 8008e5a:	3738      	adds	r7, #56	@ 0x38
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	0800ab20 	.word	0x0800ab20
 8008e64:	20000c18 	.word	0x20000c18
 8008e68:	20000c98 	.word	0x20000c98

08008e6c <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b08a      	sub	sp, #40	@ 0x28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	4603      	mov	r3, r0
 8008e74:	71fb      	strb	r3, [r7, #7]
 8008e76:	79fb      	ldrb	r3, [r7, #7]
 8008e78:	77fb      	strb	r3, [r7, #31]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008e7a:	7ffb      	ldrb	r3, [r7, #31]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <handle_enum_done+0x18>
    rhport = 0;
 8008e80:	2300      	movs	r3, #0
 8008e82:	77fb      	strb	r3, [r7, #31]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008e84:	7ffb      	ldrb	r3, [r7, #31]
 8008e86:	4a1b      	ldr	r2, [pc, #108]	@ (8008ef4 <handle_enum_done+0x88>)
 8008e88:	011b      	lsls	r3, r3, #4
 8008e8a:	4413      	add	r3, r2
 8008e8c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8008e8e:	623b      	str	r3, [r7, #32]
  const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8008e96:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dsts.enum_speed) {
 8008e98:	7e3b      	ldrb	r3, [r7, #24]
 8008e9a:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d002      	beq.n	8008eaa <handle_enum_done+0x3e>
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d004      	beq.n	8008eb2 <handle_enum_done+0x46>
 8008ea8:	e007      	b.n	8008eba <handle_enum_done+0x4e>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 8008eaa:	2302      	movs	r3, #2
 8008eac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8008eb0:	e007      	b.n	8008ec2 <handle_enum_done+0x56>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8008eb8:	e003      	b.n	8008ec2 <handle_enum_done+0x56>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8008ec0:	bf00      	nop
 8008ec2:	79fb      	ldrb	r3, [r7, #7]
 8008ec4:	77bb      	strb	r3, [r7, #30]
 8008ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008eca:	777b      	strb	r3, [r7, #29]
 8008ecc:	2301      	movs	r3, #1
 8008ece:	773b      	strb	r3, [r7, #28]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8008ed0:	7fbb      	ldrb	r3, [r7, #30]
 8008ed2:	733b      	strb	r3, [r7, #12]
  event.event_id = DCD_EVENT_BUS_RESET;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	737b      	strb	r3, [r7, #13]
  event.bus_reset.speed = speed;
 8008ed8:	7f7b      	ldrb	r3, [r7, #29]
 8008eda:	743b      	strb	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 8008edc:	7f3a      	ldrb	r2, [r7, #28]
 8008ede:	f107 030c 	add.w	r3, r7, #12
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7fe f8df 	bl	80070a8 <dcd_event_handler>
}
 8008eea:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 8008eec:	bf00      	nop
 8008eee:	3728      	adds	r7, #40	@ 0x28
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	0800ab20 	.word	0x0800ab20

08008ef8 <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b08c      	sub	sp, #48	@ 0x30
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	4603      	mov	r3, r0
 8008f00:	71fb      	strb	r3, [r7, #7]
 8008f02:	79fb      	ldrb	r3, [r7, #7]
 8008f04:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008f06:	7cfb      	ldrb	r3, [r7, #19]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <handle_rxflvl_irq+0x18>
    rhport = 0;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008f10:	7cfb      	ldrb	r3, [r7, #19]
 8008f12:	4a49      	ldr	r2, [pc, #292]	@ (8009038 <handle_rxflvl_irq+0x140>)
 8008f14:	011b      	lsls	r3, r3, #4
 8008f16:	4413      	add	r3, r2
 8008f18:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 8008f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f22:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp = {.value = dwc2->grxstsp};
 8008f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f26:	6a1b      	ldr	r3, [r3, #32]
 8008f28:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp.ep_ch_num;
 8008f2a:	7b3b      	ldrb	r3, [r7, #12]
 8008f2c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 8008f36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f3a:	3358      	adds	r3, #88	@ 0x58
 8008f3c:	015b      	lsls	r3, r3, #5
 8008f3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f40:	4413      	add	r3, r2
 8008f42:	623b      	str	r3, [r7, #32]

  switch (grxstsp.packet_status) {
 8008f44:	7bbb      	ldrb	r3, [r7, #14]
 8008f46:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	2b05      	cmp	r3, #5
 8008f50:	d86a      	bhi.n	8009028 <handle_rxflvl_irq+0x130>
 8008f52:	a201      	add	r2, pc, #4	@ (adr r2, 8008f58 <handle_rxflvl_irq+0x60>)
 8008f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f58:	08009029 	.word	0x08009029
 8008f5c:	08008f97 	.word	0x08008f97
 8008f60:	08009029 	.word	0x08009029
 8008f64:	08008f89 	.word	0x08008f89
 8008f68:	08009029 	.word	0x08009029
 8008f6c:	08008f71 	.word	0x08008f71
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 8008f70:	4b32      	ldr	r3, [pc, #200]	@ (800903c <handle_rxflvl_irq+0x144>)
 8008f72:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 8008f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	3304      	adds	r3, #4
 8008f80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f82:	6812      	ldr	r2, [r2, #0]
 8008f84:	601a      	str	r2, [r3, #0]
      break;
 8008f86:	e052      	b.n	800902e <handle_rxflvl_irq+0x136>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 8008f90:	6a3b      	ldr	r3, [r7, #32]
 8008f92:	611a      	str	r2, [r3, #16]
      break;
 8008f94:	e04b      	b.n	800902e <handle_rxflvl_irq+0x136>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp.byte_count;
 8008f96:	89bb      	ldrh	r3, [r7, #12]
 8008f98:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8008fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008fa4:	015b      	lsls	r3, r3, #5
 8008fa6:	4a26      	ldr	r2, [pc, #152]	@ (8009040 <handle_rxflvl_irq+0x148>)
 8008fa8:	4413      	add	r3, r2
 8008faa:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 8008fac:	8b7b      	ldrh	r3, [r7, #26]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d03c      	beq.n	800902c <handle_rxflvl_irq+0x134>
        // Read packet off RxFIFO
        if (xfer->ff) {
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d007      	beq.n	8008fca <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	8b7a      	ldrh	r2, [r7, #26]
 8008fc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fc ff7e 	bl	8005ec4 <tu_fifo_write_n_const_addr_full_words>
 8008fc8:	e00c      	b.n	8008fe4 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	8b7a      	ldrh	r2, [r7, #26]
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008fd4:	f000 fd70 	bl	8009ab8 <dfifo_read_packet>
          xfer->buffer += byte_count;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	8b7b      	ldrh	r3, [r7, #26]
 8008fde:	441a      	add	r2, r3
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	895b      	ldrh	r3, [r3, #10]
 8008fe8:	8b7a      	ldrh	r2, [r7, #26]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d21e      	bcs.n	800902c <handle_rxflvl_irq+0x134>
          const dwc2_ep_tsize_t tsiz = {.value = epout->tsiz};
 8008fee:	6a3b      	ldr	r3, [r7, #32]
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	60bb      	str	r3, [r7, #8]
          xfer->total_len -= tsiz.xfer_size;
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	891a      	ldrh	r2, [r3, #8]
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	b29a      	uxth	r2, r3
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 8009008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10d      	bne.n	800902c <handle_rxflvl_irq+0x134>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	891a      	ldrh	r2, [r3, #8]
 8009014:	4b0b      	ldr	r3, [pc, #44]	@ (8009044 <handle_rxflvl_irq+0x14c>)
 8009016:	881b      	ldrh	r3, [r3, #0]
 8009018:	1ad3      	subs	r3, r2, r3
 800901a:	b29a      	uxth	r2, r3
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 8009020:	4b08      	ldr	r3, [pc, #32]	@ (8009044 <handle_rxflvl_irq+0x14c>)
 8009022:	2200      	movs	r2, #0
 8009024:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 8009026:	e001      	b.n	800902c <handle_rxflvl_irq+0x134>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 8009028:	bf00      	nop
 800902a:	e000      	b.n	800902e <handle_rxflvl_irq+0x136>
      break;
 800902c:	bf00      	nop
  }
}
 800902e:	bf00      	nop
 8009030:	3730      	adds	r7, #48	@ 0x30
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	0800ab20 	.word	0x0800ab20
 800903c:	20000ca0 	.word	0x20000ca0
 8009040:	20000c18 	.word	0x20000c18
 8009044:	20000c98 	.word	0x20000c98

08009048 <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 8009048:	b580      	push	{r7, lr}
 800904a:	b08e      	sub	sp, #56	@ 0x38
 800904c:	af00      	add	r7, sp, #0
 800904e:	4603      	mov	r3, r0
 8009050:	603a      	str	r2, [r7, #0]
 8009052:	71fb      	strb	r3, [r7, #7]
 8009054:	460b      	mov	r3, r1
 8009056:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 8009058:	783b      	ldrb	r3, [r7, #0]
 800905a:	f003 0308 	and.w	r3, r3, #8
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	d01c      	beq.n	800909e <handle_epout_slave+0x56>
 8009064:	79fb      	ldrb	r3, [r7, #7]
 8009066:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800906a:	4b34      	ldr	r3, [pc, #208]	@ (800913c <handle_epout_slave+0xf4>)
 800906c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800906e:	2301      	movs	r3, #1
 8009070:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8009074:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009078:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 800907a:	2306      	movs	r3, #6
 800907c:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 800907e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009080:	f107 0318 	add.w	r3, r7, #24
 8009084:	6810      	ldr	r0, [r2, #0]
 8009086:	6851      	ldr	r1, [r2, #4]
 8009088:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 800908a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800908e:	f107 0314 	add.w	r3, r7, #20
 8009092:	4611      	mov	r1, r2
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe f807 	bl	80070a8 <dcd_event_handler>
}
 800909a:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 800909c:	e04a      	b.n	8009134 <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 800909e:	783b      	ldrb	r3, [r7, #0]
 80090a0:	f003 0301 	and.w	r3, r3, #1
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d044      	beq.n	8009134 <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 80090aa:	783b      	ldrb	r3, [r7, #0]
 80090ac:	f003 0320 	and.w	r3, r3, #32
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d13e      	bne.n	8009134 <handle_epout_slave+0xec>
 80090b6:	787b      	ldrb	r3, [r7, #1]
 80090b8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d138      	bne.n	8009134 <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 80090c2:	79bb      	ldrb	r3, [r7, #6]
 80090c4:	015b      	lsls	r3, r3, #5
 80090c6:	4a1e      	ldr	r2, [pc, #120]	@ (8009140 <handle_epout_slave+0xf8>)
 80090c8:	4413      	add	r3, r2
 80090ca:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 80090cc:	79bb      	ldrb	r3, [r7, #6]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10a      	bne.n	80090e8 <handle_epout_slave+0xa0>
 80090d2:	4b1c      	ldr	r3, [pc, #112]	@ (8009144 <handle_epout_slave+0xfc>)
 80090d4:	881b      	ldrh	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d006      	beq.n	80090e8 <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 80090da:	79b9      	ldrb	r1, [r7, #6]
 80090dc:	79fb      	ldrb	r3, [r7, #7]
 80090de:	2200      	movs	r2, #0
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7ff f977 	bl	80083d4 <edpt_schedule_packets>
 80090e6:	e025      	b.n	8009134 <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 80090e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ea:	891b      	ldrh	r3, [r3, #8]
 80090ec:	461a      	mov	r2, r3
 80090ee:	79fb      	ldrb	r3, [r7, #7]
 80090f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80090f4:	79bb      	ldrb	r3, [r7, #6]
 80090f6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80090fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80090fc:	2300      	movs	r3, #0
 80090fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009102:	2301      	movs	r3, #1
 8009104:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8009108:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800910c:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800910e:	2307      	movs	r3, #7
 8009110:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 8009112:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009116:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8009118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911a:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 800911c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009120:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 8009122:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8009126:	f107 0308 	add.w	r3, r7, #8
 800912a:	4611      	mov	r1, r2
 800912c:	4618      	mov	r0, r3
 800912e:	f7fd ffbb 	bl	80070a8 <dcd_event_handler>
}
 8009132:	bf00      	nop
      }
    }
  }
}
 8009134:	3738      	adds	r7, #56	@ 0x38
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	20000ca0 	.word	0x20000ca0
 8009140:	20000c18 	.word	0x20000c18
 8009144:	20000c98 	.word	0x20000c98

08009148 <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 8009148:	b580      	push	{r7, lr}
 800914a:	b092      	sub	sp, #72	@ 0x48
 800914c:	af00      	add	r7, sp, #0
 800914e:	4603      	mov	r3, r0
 8009150:	603a      	str	r2, [r7, #0]
 8009152:	71fb      	strb	r3, [r7, #7]
 8009154:	460b      	mov	r3, r1
 8009156:	71bb      	strb	r3, [r7, #6]
 8009158:	79fb      	ldrb	r3, [r7, #7]
 800915a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800915e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009162:	2b00      	cmp	r3, #0
 8009164:	d002      	beq.n	800916c <handle_epin_slave+0x24>
    rhport = 0;
 8009166:	2300      	movs	r3, #0
 8009168:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800916c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009170:	4a64      	ldr	r2, [pc, #400]	@ (8009304 <handle_epin_slave+0x1bc>)
 8009172:	011b      	lsls	r3, r3, #4
 8009174:	4413      	add	r3, r2
 8009176:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009178:	643b      	str	r3, [r7, #64]	@ 0x40
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 800917a:	79bb      	ldrb	r3, [r7, #6]
 800917c:	3348      	adds	r3, #72	@ 0x48
 800917e:	015b      	lsls	r3, r3, #5
 8009180:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009182:	4413      	add	r3, r2
 8009184:	63fb      	str	r3, [r7, #60]	@ 0x3c
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 8009186:	79bb      	ldrb	r3, [r7, #6]
 8009188:	015b      	lsls	r3, r3, #5
 800918a:	3310      	adds	r3, #16
 800918c:	4a5e      	ldr	r2, [pc, #376]	@ (8009308 <handle_epin_slave+0x1c0>)
 800918e:	4413      	add	r3, r2
 8009190:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (diepint_bm.xfer_complete) {
 8009192:	783b      	ldrb	r3, [r7, #0]
 8009194:	f003 0301 	and.w	r3, r3, #1
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	d037      	beq.n	800920e <handle_epin_slave+0xc6>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 800919e:	79bb      	ldrb	r3, [r7, #6]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10a      	bne.n	80091ba <handle_epin_slave+0x72>
 80091a4:	4b59      	ldr	r3, [pc, #356]	@ (800930c <handle_epin_slave+0x1c4>)
 80091a6:	885b      	ldrh	r3, [r3, #2]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d006      	beq.n	80091ba <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 80091ac:	79b9      	ldrb	r1, [r7, #6]
 80091ae:	79fb      	ldrb	r3, [r7, #7]
 80091b0:	2201      	movs	r2, #1
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7ff f90e 	bl	80083d4 <edpt_schedule_packets>
 80091b8:	e029      	b.n	800920e <handle_epin_slave+0xc6>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 80091ba:	79bb      	ldrb	r3, [r7, #6]
 80091bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80091c0:	b2d9      	uxtb	r1, r3
 80091c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c4:	891b      	ldrh	r3, [r3, #8]
 80091c6:	461a      	mov	r2, r3
 80091c8:	79fb      	ldrb	r3, [r7, #7]
 80091ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80091ce:	460b      	mov	r3, r1
 80091d0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80091d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80091d6:	2300      	movs	r3, #0
 80091d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091dc:	2301      	movs	r3, #1
 80091de:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  event.rhport = rhport;
 80091e2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80091e6:	743b      	strb	r3, [r7, #16]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 80091e8:	2307      	movs	r3, #7
 80091ea:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 80091ec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80091f0:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 80091f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f4:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 80091f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80091fa:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 80091fc:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8009200:	f107 0310 	add.w	r3, r7, #16
 8009204:	4611      	mov	r1, r2
 8009206:	4618      	mov	r0, r3
 8009208:	f7fd ff4e 	bl	80070a8 <dcd_event_handler>
}
 800920c:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 800920e:	783b      	ldrb	r3, [r7, #0]
 8009210:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	d070      	beq.n	80092fc <handle_epin_slave+0x1b4>
 800921a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800921c:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8009220:	79ba      	ldrb	r2, [r7, #6]
 8009222:	2101      	movs	r1, #1
 8009224:	fa01 f202 	lsl.w	r2, r1, r2
 8009228:	4013      	ands	r3, r2
 800922a:	2b00      	cmp	r3, #0
 800922c:	d066      	beq.n	80092fc <handle_epin_slave+0x1b4>
    dwc2_ep_tsize_t tsiz = {.value = epin->tsiz};
 800922e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	60fb      	str	r3, [r7, #12]
    const uint16_t remain_packets = tsiz.packet_count;
 8009234:	89fb      	ldrh	r3, [r7, #14]
 8009236:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800923a:	b29b      	uxth	r3, r3
 800923c:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 800923e:	2300      	movs	r3, #0
 8009240:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8009244:	e03f      	b.n	80092c6 <handle_epin_slave+0x17e>
      tsiz.value = epin->tsiz;
 8009246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	60fb      	str	r3, [r7, #12]
      const uint16_t remain_bytes = (uint16_t) tsiz.xfer_size;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009252:	86bb      	strh	r3, [r7, #52]	@ 0x34
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 8009254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009256:	895a      	ldrh	r2, [r3, #10]
 8009258:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800925a:	843b      	strh	r3, [r7, #32]
 800925c:	4613      	mov	r3, r2
 800925e:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8009260:	8c3a      	ldrh	r2, [r7, #32]
 8009262:	8bfb      	ldrh	r3, [r7, #30]
 8009264:	4293      	cmp	r3, r2
 8009266:	bf28      	it	cs
 8009268:	4613      	movcs	r3, r2
 800926a:	b29b      	uxth	r3, r3
 800926c:	867b      	strh	r3, [r7, #50]	@ 0x32

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 800926e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8009270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	0099      	lsls	r1, r3, #2
 8009276:	4b26      	ldr	r3, [pc, #152]	@ (8009310 <handle_epin_slave+0x1c8>)
 8009278:	400b      	ands	r3, r1
 800927a:	429a      	cmp	r2, r3
 800927c:	d829      	bhi.n	80092d2 <handle_epin_slave+0x18a>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 800927e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00d      	beq.n	80092a2 <handle_epin_slave+0x15a>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 8009286:	79bb      	ldrb	r3, [r7, #6]
 8009288:	3301      	adds	r3, #1
 800928a:	031b      	lsls	r3, r3, #12
 800928c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800928e:	4413      	add	r3, r2
 8009290:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 8009292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8009298:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800929a:	4618      	mov	r0, r3
 800929c:	f7fc fdab 	bl	8005df6 <tu_fifo_read_n_const_addr_full_words>
 80092a0:	e00c      	b.n	80092bc <handle_epin_slave+0x174>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 80092a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80092a8:	79b9      	ldrb	r1, [r7, #6]
 80092aa:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80092ac:	f000 fc55 	bl	8009b5a <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 80092b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80092b6:	441a      	add	r2, r3
 80092b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ba:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 80092bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80092c0:	3301      	adds	r3, #1
 80092c2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80092c6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80092ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d3ba      	bcc.n	8009246 <handle_epin_slave+0xfe>
 80092d0:	e000      	b.n	80092d4 <handle_epin_slave+0x18c>
        break;
 80092d2:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    tsiz.value = epin->tsiz;
 80092d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	60fb      	str	r3, [r7, #12]
    if (tsiz.xfer_size == 0) {
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10b      	bne.n	80092fc <handle_epin_slave+0x1b4>
      dwc2->diepempmsk &= ~(1 << epnum);
 80092e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092e6:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 80092ea:	79ba      	ldrb	r2, [r7, #6]
 80092ec:	2101      	movs	r1, #1
 80092ee:	fa01 f202 	lsl.w	r2, r1, r2
 80092f2:	43d2      	mvns	r2, r2
 80092f4:	401a      	ands	r2, r3
 80092f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092f8:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 80092fc:	bf00      	nop
 80092fe:	3748      	adds	r7, #72	@ 0x48
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	0800ab20 	.word	0x0800ab20
 8009308:	20000c18 	.word	0x20000c18
 800930c:	20000c98 	.word	0x20000c98
 8009310:	0003fffc 	.word	0x0003fffc

08009314 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 8009314:	b580      	push	{r7, lr}
 8009316:	b08e      	sub	sp, #56	@ 0x38
 8009318:	af00      	add	r7, sp, #0
 800931a:	4603      	mov	r3, r0
 800931c:	460a      	mov	r2, r1
 800931e:	71fb      	strb	r3, [r7, #7]
 8009320:	4613      	mov	r3, r2
 8009322:	71bb      	strb	r3, [r7, #6]
 8009324:	79fb      	ldrb	r3, [r7, #7]
 8009326:	76fb      	strb	r3, [r7, #27]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009328:	7efb      	ldrb	r3, [r7, #27]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <handle_ep_irq+0x1e>
    rhport = 0;
 800932e:	2300      	movs	r3, #0
 8009330:	76fb      	strb	r3, [r7, #27]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009332:	7efb      	ldrb	r3, [r7, #27]
 8009334:	4a38      	ldr	r2, [pc, #224]	@ (8009418 <handle_ep_irq+0x104>)
 8009336:	011b      	lsls	r3, r3, #4
 8009338:	4413      	add	r3, r2
 800933a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800933c:	633b      	str	r3, [r7, #48]	@ 0x30
 800933e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009340:	61fb      	str	r3, [r7, #28]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009346:	617b      	str	r3, [r7, #20]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8009348:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800934a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800934e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009350:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009356:	613b      	str	r3, [r7, #16]
  return ghwcfg2.num_dev_ep + 1;
 8009358:	7c7b      	ldrb	r3, [r7, #17]
 800935a:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800935e:	b2db      	uxtb	r3, r3
 8009360:	3301      	adds	r3, #1
 8009362:	b2db      	uxtb	r3, r3
  const uint8_t ep_count = dwc2_ep_count(dwc2);
 8009364:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 8009368:	79bb      	ldrb	r3, [r7, #6]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d101      	bne.n	8009372 <handle_ep_irq+0x5e>
 800936e:	2300      	movs	r3, #0
 8009370:	e000      	b.n	8009374 <handle_ep_irq+0x60>
 8009372:	2310      	movs	r3, #16
 8009374:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 8009378:	79bb      	ldrb	r3, [r7, #6]
 800937a:	2b01      	cmp	r3, #1
 800937c:	bf14      	ite	ne
 800937e:	2301      	movne	r3, #1
 8009380:	2300      	moveq	r3, #0
 8009382:	b2db      	uxtb	r3, r3
 8009384:	025b      	lsls	r3, r3, #9
 8009386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800938a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800938c:	4413      	add	r3, r2
 800938e:	62bb      	str	r3, [r7, #40]	@ 0x28

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8009390:	2300      	movs	r3, #0
 8009392:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009396:	e034      	b.n	8009402 <handle_ep_irq+0xee>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 8009398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800939e:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80093a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80093a6:	440b      	add	r3, r1
 80093a8:	fa22 f303 	lsr.w	r3, r2, r3
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d021      	beq.n	80093f8 <handle_ep_irq+0xe4>
      dwc2_dep_t* epout = &ep_base[epnum];
 80093b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80093b8:	015b      	lsls	r3, r3, #5
 80093ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093bc:	4413      	add	r3, r2
 80093be:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 80093c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	60fb      	str	r3, [r7, #12]

      epout->intr = intr.value; // Clear interrupt
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ca:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 80093cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d111      	bne.n	80093f8 <handle_ep_irq+0xe4>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 80093d4:	79bb      	ldrb	r3, [r7, #6]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d107      	bne.n	80093ea <handle_ep_irq+0xd6>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 80093da:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 80093de:	79fb      	ldrb	r3, [r7, #7]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7ff feb0 	bl	8009148 <handle_epin_slave>
 80093e8:	e006      	b.n	80093f8 <handle_ep_irq+0xe4>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 80093ea:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 80093ee:	79fb      	ldrb	r3, [r7, #7]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7ff fe28 	bl	8009048 <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 80093f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80093fc:	3301      	adds	r3, #1
 80093fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009402:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8009406:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800940a:	429a      	cmp	r2, r3
 800940c:	d3c4      	bcc.n	8009398 <handle_ep_irq+0x84>
        }
        #endif
      }
    }
  }
}
 800940e:	bf00      	nop
 8009410:	bf00      	nop
 8009412:	3738      	adds	r7, #56	@ 0x38
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	0800ab20 	.word	0x0800ab20

0800941c <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 800941c:	b580      	push	{r7, lr}
 800941e:	b098      	sub	sp, #96	@ 0x60
 8009420:	af00      	add	r7, sp, #0
 8009422:	4603      	mov	r3, r0
 8009424:	71fb      	strb	r3, [r7, #7]
 8009426:	79fb      	ldrb	r3, [r7, #7]
 8009428:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800942c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009430:	2b00      	cmp	r3, #0
 8009432:	d002      	beq.n	800943a <dcd_int_handler+0x1e>
    rhport = 0;
 8009434:	2300      	movs	r3, #0
 8009436:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800943a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800943e:	4a80      	ldr	r2, [pc, #512]	@ (8009640 <dcd_int_handler+0x224>)
 8009440:	011b      	lsls	r3, r3, #4
 8009442:	4413      	add	r3, r2
 8009444:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009446:	65fb      	str	r3, [r7, #92]	@ 0x5c
  const uint32_t gintmask = dwc2->gintmsk;
 8009448:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 800944e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009450:	695b      	ldr	r3, [r3, #20]
 8009452:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009454:	4013      	ands	r3, r2
 8009456:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 8009458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800945a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00d      	beq.n	800947e <dcd_int_handler+0x62>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 8009462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009464:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009468:	615a      	str	r2, [r3, #20]

    usbd_spin_lock(true);
 800946a:	2001      	movs	r0, #1
 800946c:	f7fe f81a 	bl	80074a4 <usbd_spin_lock>
    handle_bus_reset(rhport);
 8009470:	79fb      	ldrb	r3, [r7, #7]
 8009472:	4618      	mov	r0, r3
 8009474:	f7ff fc0e 	bl	8008c94 <handle_bus_reset>
    usbd_spin_unlock(true);
 8009478:	2001      	movs	r0, #1
 800947a:	f7fe f82d 	bl	80074d8 <usbd_spin_unlock>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 800947e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009480:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009484:	2b00      	cmp	r3, #0
 8009486:	d007      	beq.n	8009498 <dcd_int_handler+0x7c>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 8009488:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800948a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800948e:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	4618      	mov	r0, r3
 8009494:	f7ff fcea 	bl	8008e6c <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 8009498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800949a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d01d      	beq.n	80094de <dcd_int_handler+0xc2>
    dwc2->gintsts = GINTSTS_USBSUSP;
 80094a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80094a8:	615a      	str	r2, [r3, #20]
 80094aa:	79fb      	ldrb	r3, [r7, #7]
 80094ac:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 80094b0:	2304      	movs	r3, #4
 80094b2:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 80094b6:	2301      	movs	r3, #1
 80094b8:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 80094bc:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80094c0:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 80094c4:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80094c8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 80094cc:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80094d0:	f107 0320 	add.w	r3, r7, #32
 80094d4:	4611      	mov	r1, r2
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7fd fde6 	bl	80070a8 <dcd_event_handler>
}
 80094dc:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 80094de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	da1d      	bge.n	8009520 <dcd_int_handler+0x104>
    dwc2->gintsts = GINTSTS_WKUINT;
 80094e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80094ea:	615a      	str	r2, [r3, #20]
 80094ec:	79fb      	ldrb	r3, [r7, #7]
 80094ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80094f2:	2305      	movs	r3, #5
 80094f4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80094f8:	2301      	movs	r3, #1
 80094fa:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 80094fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009502:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 8009506:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800950a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 800950e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009512:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009516:	4611      	mov	r1, r2
 8009518:	4618      	mov	r0, r3
 800951a:	f7fd fdc5 	bl	80070a8 <dcd_event_handler>
}
 800951e:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 8009520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009522:	f003 0304 	and.w	r3, r3, #4
 8009526:	2b00      	cmp	r3, #0
 8009528:	d022      	beq.n	8009570 <dcd_int_handler+0x154>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 800952a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 8009530:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009532:	f003 0304 	and.w	r3, r3, #4
 8009536:	2b00      	cmp	r3, #0
 8009538:	d017      	beq.n	800956a <dcd_int_handler+0x14e>
 800953a:	79fb      	ldrb	r3, [r7, #7]
 800953c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8009540:	2302      	movs	r3, #2
 8009542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009546:	2301      	movs	r3, #1
 8009548:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 800954c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8009550:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 8009552:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009556:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8009558:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 800955c:	f107 0314 	add.w	r3, r7, #20
 8009560:	4611      	mov	r1, r2
 8009562:	4618      	mov	r0, r3
 8009564:	f7fd fda0 	bl	80070a8 <dcd_event_handler>
}
 8009568:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 800956a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800956c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800956e:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 8009570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009572:	f003 0308 	and.w	r3, r3, #8
 8009576:	2b00      	cmp	r3, #0
 8009578:	d02e      	beq.n	80095d8 <dcd_int_handler+0x1bc>
    dwc2->gintsts = GINTSTS_SOF;
 800957a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800957c:	2208      	movs	r2, #8
 800957e:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 8009580:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009582:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8009586:	0a1b      	lsrs	r3, r3, #8
 8009588:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800958c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 800958e:	4b2d      	ldr	r3, [pc, #180]	@ (8009644 <dcd_int_handler+0x228>)
 8009590:	79db      	ldrb	r3, [r3, #7]
 8009592:	f083 0301 	eor.w	r3, r3, #1
 8009596:	b2db      	uxtb	r3, r3
 8009598:	2b00      	cmp	r3, #0
 800959a:	d005      	beq.n	80095a8 <dcd_int_handler+0x18c>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 800959c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	f023 0208 	bic.w	r2, r3, #8
 80095a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095a6:	619a      	str	r2, [r3, #24]
 80095a8:	79fb      	ldrb	r3, [r7, #7]
 80095aa:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 80095ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095b2:	2301      	movs	r3, #1
 80095b4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 80095b8:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80095bc:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 80095be:	2303      	movs	r3, #3
 80095c0:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 80095c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095c4:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 80095c6:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 80095ca:	f107 0308 	add.w	r3, r7, #8
 80095ce:	4611      	mov	r1, r2
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fd fd69 	bl	80070a8 <dcd_event_handler>
}
 80095d6:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 80095d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095da:	f003 0310 	and.w	r3, r3, #16
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d015      	beq.n	800960e <dcd_int_handler+0x1f2>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 80095e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	f023 0210 	bic.w	r2, r3, #16
 80095ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095ec:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 80095ee:	79fb      	ldrb	r3, [r7, #7]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7ff fc81 	bl	8008ef8 <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 80095f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095f8:	695b      	ldr	r3, [r3, #20]
 80095fa:	f003 0310 	and.w	r3, r3, #16
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1f5      	bne.n	80095ee <dcd_int_handler+0x1d2>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 8009602:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009604:	699b      	ldr	r3, [r3, #24]
 8009606:	f043 0210 	orr.w	r2, r3, #16
 800960a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800960c:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 800960e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009610:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d004      	beq.n	8009622 <dcd_int_handler+0x206>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 8009618:	79fb      	ldrb	r3, [r7, #7]
 800961a:	2100      	movs	r1, #0
 800961c:	4618      	mov	r0, r3
 800961e:	f7ff fe79 	bl	8009314 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 8009622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009624:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d004      	beq.n	8009636 <dcd_int_handler+0x21a>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 800962c:	79fb      	ldrb	r3, [r7, #7]
 800962e:	2101      	movs	r1, #1
 8009630:	4618      	mov	r0, r3
 8009632:	f7ff fe6f 	bl	8009314 <handle_ep_irq>
  }
}
 8009636:	bf00      	nop
 8009638:	3760      	adds	r7, #96	@ 0x60
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	0800ab20 	.word	0x0800ab20
 8009644:	20000c98 	.word	0x20000c98

08009648 <dwc2_phy_init>:

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	460b      	mov	r3, r1
 8009652:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 8009654:	78fb      	ldrb	r3, [r7, #3]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d106      	bne.n	8009668 <dwc2_phy_init+0x20>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800965e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	639a      	str	r2, [r3, #56]	@ 0x38
      #else

      #endif
    }
  }
}
 8009666:	e005      	b.n	8009674 <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800966c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	460b      	mov	r3, r1
 800968a:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800968c:	78fb      	ldrb	r3, [r7, #3]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d152      	bne.n	8009738 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 8009692:	4b2c      	ldr	r3, [pc, #176]	@ (8009744 <dwc2_phy_update+0xc4>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a2c      	ldr	r2, [pc, #176]	@ (8009748 <dwc2_phy_update+0xc8>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d302      	bcc.n	80096a2 <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 800969c:	2306      	movs	r3, #6
 800969e:	60fb      	str	r3, [r7, #12]
 80096a0:	e041      	b.n	8009726 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 80096a2:	4b28      	ldr	r3, [pc, #160]	@ (8009744 <dwc2_phy_update+0xc4>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a29      	ldr	r2, [pc, #164]	@ (800974c <dwc2_phy_update+0xcc>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d902      	bls.n	80096b2 <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 80096ac:	2307      	movs	r3, #7
 80096ae:	60fb      	str	r3, [r7, #12]
 80096b0:	e039      	b.n	8009726 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 80096b2:	4b24      	ldr	r3, [pc, #144]	@ (8009744 <dwc2_phy_update+0xc4>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a26      	ldr	r2, [pc, #152]	@ (8009750 <dwc2_phy_update+0xd0>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d302      	bcc.n	80096c2 <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 80096bc:	2308      	movs	r3, #8
 80096be:	60fb      	str	r3, [r7, #12]
 80096c0:	e031      	b.n	8009726 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 80096c2:	4b20      	ldr	r3, [pc, #128]	@ (8009744 <dwc2_phy_update+0xc4>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a23      	ldr	r2, [pc, #140]	@ (8009754 <dwc2_phy_update+0xd4>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d902      	bls.n	80096d2 <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 80096cc:	2309      	movs	r3, #9
 80096ce:	60fb      	str	r3, [r7, #12]
 80096d0:	e029      	b.n	8009726 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 80096d2:	4b1c      	ldr	r3, [pc, #112]	@ (8009744 <dwc2_phy_update+0xc4>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a20      	ldr	r2, [pc, #128]	@ (8009758 <dwc2_phy_update+0xd8>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d902      	bls.n	80096e2 <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 80096dc:	230a      	movs	r3, #10
 80096de:	60fb      	str	r3, [r7, #12]
 80096e0:	e021      	b.n	8009726 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 80096e2:	4b18      	ldr	r3, [pc, #96]	@ (8009744 <dwc2_phy_update+0xc4>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a1d      	ldr	r2, [pc, #116]	@ (800975c <dwc2_phy_update+0xdc>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d902      	bls.n	80096f2 <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 80096ec:	230b      	movs	r3, #11
 80096ee:	60fb      	str	r3, [r7, #12]
 80096f0:	e019      	b.n	8009726 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 80096f2:	4b14      	ldr	r3, [pc, #80]	@ (8009744 <dwc2_phy_update+0xc4>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a1a      	ldr	r2, [pc, #104]	@ (8009760 <dwc2_phy_update+0xe0>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d302      	bcc.n	8009702 <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 80096fc:	230c      	movs	r3, #12
 80096fe:	60fb      	str	r3, [r7, #12]
 8009700:	e011      	b.n	8009726 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 8009702:	4b10      	ldr	r3, [pc, #64]	@ (8009744 <dwc2_phy_update+0xc4>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a17      	ldr	r2, [pc, #92]	@ (8009764 <dwc2_phy_update+0xe4>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d302      	bcc.n	8009712 <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 800970c:	230d      	movs	r3, #13
 800970e:	60fb      	str	r3, [r7, #12]
 8009710:	e009      	b.n	8009726 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 8009712:	4b0c      	ldr	r3, [pc, #48]	@ (8009744 <dwc2_phy_update+0xc4>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a14      	ldr	r2, [pc, #80]	@ (8009768 <dwc2_phy_update+0xe8>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d302      	bcc.n	8009722 <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 800971c:	230e      	movs	r3, #14
 800971e:	60fb      	str	r3, [r7, #12]
 8009720:	e001      	b.n	8009726 <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 8009722:	230f      	movs	r3, #15
 8009724:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	029b      	lsls	r3, r3, #10
 8009732:	431a      	orrs	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	60da      	str	r2, [r3, #12]
  }
}
 8009738:	bf00      	nop
 800973a:	3714      	adds	r7, #20
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr
 8009744:	20000048 	.word	0x20000048
 8009748:	01e84800 	.word	0x01e84800
 800974c:	01a39ddf 	.word	0x01a39ddf
 8009750:	016e3600 	.word	0x016e3600
 8009754:	014ca43f 	.word	0x014ca43f
 8009758:	01312cff 	.word	0x01312cff
 800975c:	011a499f 	.word	0x011a499f
 8009760:	01067380 	.word	0x01067380
 8009764:	00f42400 	.word	0x00f42400
 8009768:	00e4e1c0 	.word	0x00e4e1c0

0800976c <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	f043 0201 	orr.w	r2, r3, #1
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009784:	b29b      	uxth	r3, r3
 8009786:	f244 2209 	movw	r2, #16905	@ 0x4209
 800978a:	4293      	cmp	r3, r2
 800978c:	d807      	bhi.n	800979e <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 800978e:	bf00      	nop
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	691b      	ldr	r3, [r3, #16]
 8009794:	f003 0301 	and.w	r3, r3, #1
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1f9      	bne.n	8009790 <reset_core+0x24>
 800979c:	e010      	b.n	80097c0 <reset_core+0x54>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 800979e:	bf00      	nop
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d0f9      	beq.n	80097a0 <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80097b4:	f023 0301 	bic.w	r3, r3, #1
 80097b8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 80097c0:	bf00      	nop
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	dafb      	bge.n	80097c2 <reset_core+0x56>
}
 80097ca:	bf00      	nop
 80097cc:	bf00      	nop
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097ec:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 80097f4:	2100      	movs	r1, #0
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f7ff ff26 	bl	8009648 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f7ff ffb5 	bl	800976c <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8009808:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8009810:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 8009818:	2100      	movs	r1, #0
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f7ff ff30 	bl	8009680 <dwc2_phy_update>
}
 8009820:	bf00      	nop
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	617b      	str	r3, [r7, #20]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800983a:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg4_t ghwcfg4 = {.value = dwc2->ghwcfg4};
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009840:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009848:	617b      	str	r3, [r7, #20]

  if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800984a:	7c3b      	ldrb	r3, [r7, #16]
 800984c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009850:	b2db      	uxtb	r3, r3
 8009852:	2b80      	cmp	r3, #128	@ 0x80
 8009854:	d114      	bne.n	8009880 <phy_hs_init+0x58>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	f043 0310 	orr.w	r3, r3, #16
 800985c:	617b      	str	r3, [r7, #20]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f023 0308 	bic.w	r3, r3, #8
 8009864:	617b      	str	r3, [r7, #20]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800986c:	617b      	str	r3, [r7, #20]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009874:	617b      	str	r3, [r7, #20]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 800987c:	617b      	str	r3, [r7, #20]
 800987e:	e012      	b.n	80098a6 <phy_hs_init+0x7e>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	f023 0310 	bic.w	r3, r3, #16
 8009886:	617b      	str	r3, [r7, #20]

    // Set 16-bit interface if supported
    if (ghwcfg4.phy_data_width) {
 8009888:	7b7b      	ldrb	r3, [r7, #13]
 800988a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b00      	cmp	r3, #0
 8009892:	d004      	beq.n	800989e <phy_hs_init+0x76>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	f043 0308 	orr.w	r3, r3, #8
 800989a:	617b      	str	r3, [r7, #20]
 800989c:	e003      	b.n	80098a6 <phy_hs_init+0x7e>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	f023 0308 	bic.w	r3, r3, #8
 80098a4:	617b      	str	r3, [r7, #20]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	697a      	ldr	r2, [r7, #20]
 80098aa:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, ghwcfg2.hs_phy_type);
 80098ac:	7c3b      	ldrb	r3, [r7, #16]
 80098ae:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	4619      	mov	r1, r3
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7ff fec6 	bl	8009648 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7ff ff55 	bl	800976c <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 80098c8:	617b      	str	r3, [r7, #20]
  gusbcfg |= (ghwcfg4.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 80098ca:	7b7b      	ldrb	r3, [r7, #13]
 80098cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d002      	beq.n	80098dc <phy_hs_init+0xb4>
 80098d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80098da:	e001      	b.n	80098e0 <phy_hs_init+0xb8>
 80098dc:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80098e0:	697a      	ldr	r2, [r7, #20]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	617b      	str	r3, [r7, #20]
  dwc2->gusbcfg = gusbcfg;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	697a      	ldr	r2, [r7, #20]
 80098ea:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, ghwcfg2.hs_phy_type);
 80098ec:	7c3b      	ldrb	r3, [r7, #16]
 80098ee:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	4619      	mov	r1, r3
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f7ff fec2 	bl	8009680 <dwc2_phy_update>
}
 80098fc:	bf00      	nop
 80098fe:	3718      	adds	r7, #24
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 8009904:	b480      	push	{r7}
 8009906:	b085      	sub	sp, #20
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009910:	0c1b      	lsrs	r3, r3, #16
 8009912:	041b      	lsls	r3, r3, #16
 8009914:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	4a0e      	ldr	r2, [pc, #56]	@ (8009954 <check_dwc2+0x50>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d012      	beq.n	8009944 <check_dwc2+0x40>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	4a0d      	ldr	r2, [pc, #52]	@ (8009958 <check_dwc2+0x54>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d00e      	beq.n	8009944 <check_dwc2+0x40>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	4a0c      	ldr	r2, [pc, #48]	@ (800995c <check_dwc2+0x58>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d00a      	beq.n	8009944 <check_dwc2+0x40>
 800992e:	4b0c      	ldr	r3, [pc, #48]	@ (8009960 <check_dwc2+0x5c>)
 8009930:	60bb      	str	r3, [r7, #8]
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0301 	and.w	r3, r3, #1
 800993a:	2b00      	cmp	r3, #0
 800993c:	d000      	beq.n	8009940 <check_dwc2+0x3c>
 800993e:	be00      	bkpt	0x0000
 8009940:	2300      	movs	r3, #0
 8009942:	e000      	b.n	8009946 <check_dwc2+0x42>
#endif

  return true;
 8009944:	2301      	movs	r3, #1
}
 8009946:	4618      	mov	r0, r3
 8009948:	3714      	adds	r7, #20
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	4f540000 	.word	0x4f540000
 8009958:	55310000 	.word	0x55310000
 800995c:	55320000 	.word	0x55320000
 8009960:	e000edf0 	.word	0xe000edf0

08009964 <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	460b      	mov	r3, r1
 800996e:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;
#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 8009970:	78fb      	ldrb	r3, [r7, #3]
 8009972:	2b01      	cmp	r3, #1
 8009974:	d101      	bne.n	800997a <dwc2_core_is_highspeed+0x16>
    return false;
 8009976:	2300      	movs	r3, #0
 8009978:	e00b      	b.n	8009992 <dwc2_core_is_highspeed+0x2e>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800997e:	60fb      	str	r3, [r7, #12]
  return ghwcfg2.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 8009980:	7b3b      	ldrb	r3, [r7, #12]
 8009982:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009986:	b2db      	uxtb	r3, r3
 8009988:	2b00      	cmp	r3, #0
 800998a:	bf14      	ite	ne
 800998c:	2301      	movne	r3, #1
 800998e:	2300      	moveq	r3, #0
 8009990:	b2db      	uxtb	r3, r3
}
 8009992:	4618      	mov	r0, r3
 8009994:	3714      	adds	r7, #20
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
	...

080099a0 <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b088      	sub	sp, #32
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	4603      	mov	r3, r0
 80099a8:	71fb      	strb	r3, [r7, #7]
 80099aa:	460b      	mov	r3, r1
 80099ac:	71bb      	strb	r3, [r7, #6]
 80099ae:	4613      	mov	r3, r2
 80099b0:	717b      	strb	r3, [r7, #5]
 80099b2:	79fb      	ldrb	r3, [r7, #7]
 80099b4:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80099b6:	7dfb      	ldrb	r3, [r7, #23]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d001      	beq.n	80099c0 <dwc2_core_init+0x20>
    rhport = 0;
 80099bc:	2300      	movs	r3, #0
 80099be:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80099c0:	7dfb      	ldrb	r3, [r7, #23]
 80099c2:	4a3b      	ldr	r2, [pc, #236]	@ (8009ab0 <dwc2_core_init+0x110>)
 80099c4:	011b      	lsls	r3, r3, #4
 80099c6:	4413      	add	r3, r2
 80099c8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80099ca:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 80099cc:	69f8      	ldr	r0, [r7, #28]
 80099ce:	f7ff ff99 	bl	8009904 <check_dwc2>
 80099d2:	4603      	mov	r3, r0
 80099d4:	f083 0301 	eor.w	r3, r3, #1
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00a      	beq.n	80099f4 <dwc2_core_init+0x54>
 80099de:	4b35      	ldr	r3, [pc, #212]	@ (8009ab4 <dwc2_core_init+0x114>)
 80099e0:	61bb      	str	r3, [r7, #24]
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 0301 	and.w	r3, r3, #1
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d000      	beq.n	80099f0 <dwc2_core_init+0x50>
 80099ee:	be00      	bkpt	0x0000
 80099f0:	2300      	movs	r3, #0
 80099f2:	e058      	b.n	8009aa6 <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	f023 0201 	bic.w	r2, r3, #1
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 8009a00:	79bb      	ldrb	r3, [r7, #6]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d003      	beq.n	8009a0e <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 8009a06:	69f8      	ldr	r0, [r7, #28]
 8009a08:	f7ff ff0e 	bl	8009828 <phy_hs_init>
 8009a0c:	e002      	b.n	8009a14 <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 8009a0e:	69f8      	ldr	r0, [r7, #28]
 8009a10:	f7ff fee2 	bl	80097d8 <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	f043 0207 	orr.w	r2, r3, #7
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8009a26:	f023 020f 	bic.w	r2, r3, #15
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	60fb      	str	r3, [r7, #12]
 8009a34:	2310      	movs	r3, #16
 8009a36:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8009a38:	7afb      	ldrb	r3, [r7, #11]
 8009a3a:	019b      	lsls	r3, r3, #6
 8009a3c:	f043 0220 	orr.w	r2, r3, #32
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8009a44:	bf00      	nop
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	f003 0320 	and.w	r3, r3, #32
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1f9      	bne.n	8009a46 <dwc2_core_init+0xa6>
}
 8009a52:	bf00      	nop
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	2210      	movs	r2, #16
 8009a5c:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8009a5e:	bf00      	nop
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	f003 0310 	and.w	r3, r3, #16
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1f9      	bne.n	8009a60 <dwc2_core_init+0xc0>
}
 8009a6c:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	f04f 32ff 	mov.w	r2, #4294967295
 8009a74:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	f04f 32ff 	mov.w	r2, #4294967295
 8009a7c:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	2200      	movs	r2, #0
 8009a82:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 8009a84:	797b      	ldrb	r3, [r7, #5]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d006      	beq.n	8009a98 <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	609a      	str	r2, [r3, #8]
 8009a96:	e005      	b.n	8009aa4 <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 8009a98:	69fb      	ldr	r3, [r7, #28]
 8009a9a:	699b      	ldr	r3, [r3, #24]
 8009a9c:	f043 0210 	orr.w	r2, r3, #16
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	619a      	str	r2, [r3, #24]
  }

  return true;
 8009aa4:	2301      	movs	r3, #1
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3720      	adds	r7, #32
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	0800ab30 	.word	0x0800ab30
 8009ab4:	e000edf0 	.word	0xe000edf0

08009ab8 <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 8009ab8:	b480      	push	{r7}
 8009aba:	b08f      	sub	sp, #60	@ 0x3c
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009acc:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 8009ace:	88fb      	ldrh	r3, [r7, #6]
 8009ad0:	089b      	lsrs	r3, r3, #2
 8009ad2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 8009ad4:	e00b      	b.n	8009aee <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	627a      	str	r2, [r7, #36]	@ 0x24
 8009ade:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae2:	6a3a      	ldr	r2, [r7, #32]
 8009ae4:	601a      	str	r2, [r3, #0]
}
 8009ae6:	bf00      	nop
    dst += 4;
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	3304      	adds	r3, #4
 8009aec:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 8009aee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009af0:	1e5a      	subs	r2, r3, #1
 8009af2:	86fa      	strh	r2, [r7, #54]	@ 0x36
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d1ee      	bne.n	8009ad6 <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 8009af8:	88fb      	ldrh	r3, [r7, #6]
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	f003 0303 	and.w	r3, r3, #3
 8009b00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 8009b04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d020      	beq.n	8009b4e <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 8009b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b14:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 8009b1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d907      	bls.n	8009b36 <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b2c:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 8009b2e:	69ba      	ldr	r2, [r7, #24]
 8009b30:	0a12      	lsrs	r2, r2, #8
 8009b32:	b2d2      	uxtb	r2, r2
 8009b34:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 8009b36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	d907      	bls.n	8009b4e <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	3302      	adds	r3, #2
 8009b42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b44:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	0c12      	lsrs	r2, r2, #16
 8009b4a:	b2d2      	uxtb	r2, r2
 8009b4c:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8009b4e:	bf00      	nop
 8009b50:	373c      	adds	r7, #60	@ 0x3c
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 8009b5a:	b480      	push	{r7}
 8009b5c:	b08b      	sub	sp, #44	@ 0x2c
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	60f8      	str	r0, [r7, #12]
 8009b62:	607a      	str	r2, [r7, #4]
 8009b64:	461a      	mov	r2, r3
 8009b66:	460b      	mov	r3, r1
 8009b68:	72fb      	strb	r3, [r7, #11]
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 8009b6e:	7afb      	ldrb	r3, [r7, #11]
 8009b70:	3301      	adds	r3, #1
 8009b72:	031b      	lsls	r3, r3, #12
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	4413      	add	r3, r2
 8009b78:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 8009b7a:	893b      	ldrh	r3, [r7, #8]
 8009b7c:	089b      	lsrs	r3, r3, #2
 8009b7e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 8009b80:	e008      	b.n	8009b94 <dfifo_write_packet+0x3a>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	601a      	str	r2, [r3, #0]
    src += 4;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	3304      	adds	r3, #4
 8009b92:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 8009b94:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009b96:	1e5a      	subs	r2, r3, #1
 8009b98:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1f1      	bne.n	8009b82 <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 8009b9e:	893b      	ldrh	r3, [r7, #8]
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	f003 0303 	and.w	r3, r3, #3
 8009ba6:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 8009ba8:	7efb      	ldrb	r3, [r7, #27]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d019      	beq.n	8009be2 <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 8009bb4:	7efb      	ldrb	r3, [r7, #27]
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d906      	bls.n	8009bc8 <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	021b      	lsls	r3, r3, #8
 8009bc2:	6a3a      	ldr	r2, [r7, #32]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 8009bc8:	7efb      	ldrb	r3, [r7, #27]
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d906      	bls.n	8009bdc <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	3302      	adds	r3, #2
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	041b      	lsls	r3, r3, #16
 8009bd6:	6a3a      	ldr	r2, [r7, #32]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	6a3a      	ldr	r2, [r7, #32]
 8009be0:	601a      	str	r2, [r3, #0]
  }
}
 8009be2:	bf00      	nop
 8009be4:	372c      	adds	r7, #44	@ 0x2c
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
	...

08009bf0 <tusb_rhport_init>:
}

//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+
bool tusb_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	6039      	str	r1, [r7, #0]
 8009bfa:	71fb      	strb	r3, [r7, #7]
  //  backward compatible called with tusb_init(void)
  #if defined(TUD_OPT_RHPORT) || defined(TUH_OPT_RHPORT)
  if (rh_init == NULL) {
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d11f      	bne.n	8009c42 <tusb_rhport_init+0x52>
    #if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
    // init device stack CFG_TUSB_RHPORTx_MODE must be defined
    const tusb_rhport_init_t dev_init = {
 8009c02:	2301      	movs	r3, #1
 8009c04:	723b      	strb	r3, [r7, #8]
 8009c06:	2300      	movs	r3, #0
 8009c08:	727b      	strb	r3, [r7, #9]
      .role = TUSB_ROLE_DEVICE,
      .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
    };
    TU_ASSERT ( tud_rhport_init(TUD_OPT_RHPORT, &dev_init) );
 8009c0a:	f107 0308 	add.w	r3, r7, #8
 8009c0e:	4619      	mov	r1, r3
 8009c10:	2000      	movs	r0, #0
 8009c12:	f7fc fa63 	bl	80060dc <tud_rhport_init>
 8009c16:	4603      	mov	r3, r0
 8009c18:	f083 0301 	eor.w	r3, r3, #1
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00a      	beq.n	8009c38 <tusb_rhport_init+0x48>
 8009c22:	4b23      	ldr	r3, [pc, #140]	@ (8009cb0 <tusb_rhport_init+0xc0>)
 8009c24:	60fb      	str	r3, [r7, #12]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d000      	beq.n	8009c34 <tusb_rhport_init+0x44>
 8009c32:	be00      	bkpt	0x0000
 8009c34:	2300      	movs	r3, #0
 8009c36:	e036      	b.n	8009ca6 <tusb_rhport_init+0xb6>
    _tusb_rhport_role[TUD_OPT_RHPORT] = TUSB_ROLE_DEVICE;
 8009c38:	4b1e      	ldr	r3, [pc, #120]	@ (8009cb4 <tusb_rhport_init+0xc4>)
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	701a      	strb	r2, [r3, #0]
    };
    TU_ASSERT( tuh_rhport_init(TUH_OPT_RHPORT, &host_init) );
    _tusb_rhport_role[TUH_OPT_RHPORT] = TUSB_ROLE_HOST;
    #endif

    return true;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e031      	b.n	8009ca6 <tusb_rhport_init+0xb6>
  }
  #endif

  // new API with explicit rhport and role
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 8009c42:	79fb      	ldrb	r3, [r7, #7]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d803      	bhi.n	8009c50 <tusb_rhport_init+0x60>
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d10a      	bne.n	8009c66 <tusb_rhport_init+0x76>
 8009c50:	4b17      	ldr	r3, [pc, #92]	@ (8009cb0 <tusb_rhport_init+0xc0>)
 8009c52:	613b      	str	r3, [r7, #16]
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f003 0301 	and.w	r3, r3, #1
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d000      	beq.n	8009c62 <tusb_rhport_init+0x72>
 8009c60:	be00      	bkpt	0x0000
 8009c62:	2300      	movs	r3, #0
 8009c64:	e01f      	b.n	8009ca6 <tusb_rhport_init+0xb6>
  _tusb_rhport_role[rhport] = rh_init->role;
 8009c66:	79fb      	ldrb	r3, [r7, #7]
 8009c68:	683a      	ldr	r2, [r7, #0]
 8009c6a:	7811      	ldrb	r1, [r2, #0]
 8009c6c:	4a11      	ldr	r2, [pc, #68]	@ (8009cb4 <tusb_rhport_init+0xc4>)
 8009c6e:	54d1      	strb	r1, [r2, r3]

  #if CFG_TUD_ENABLED
  if (rh_init->role == TUSB_ROLE_DEVICE) {
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d115      	bne.n	8009ca4 <tusb_rhport_init+0xb4>
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
 8009c78:	79fb      	ldrb	r3, [r7, #7]
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fc fa2d 	bl	80060dc <tud_rhport_init>
 8009c82:	4603      	mov	r3, r0
 8009c84:	f083 0301 	eor.w	r3, r3, #1
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00a      	beq.n	8009ca4 <tusb_rhport_init+0xb4>
 8009c8e:	4b08      	ldr	r3, [pc, #32]	@ (8009cb0 <tusb_rhport_init+0xc0>)
 8009c90:	617b      	str	r3, [r7, #20]
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 0301 	and.w	r3, r3, #1
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d000      	beq.n	8009ca0 <tusb_rhport_init+0xb0>
 8009c9e:	be00      	bkpt	0x0000
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	e000      	b.n	8009ca6 <tusb_rhport_init+0xb6>
  if (rh_init->role == TUSB_ROLE_HOST) {
    TU_ASSERT(tuh_rhport_init(rhport, rh_init));
  }
  #endif

  return true;
 8009ca4:	2301      	movs	r3, #1
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3718      	adds	r7, #24
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	e000edf0 	.word	0xe000edf0
 8009cb4:	20000ca8 	.word	0x20000ca8

08009cb8 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d106      	bne.n	8009cde <tu_edpt_claim+0x26>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <tu_edpt_claim+0x2a>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	e01e      	b.n	8009d20 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d108      	bne.n	8009d02 <tu_edpt_claim+0x4a>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d101      	bne.n	8009d02 <tu_edpt_claim+0x4a>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e000      	b.n	8009d04 <tu_edpt_claim+0x4c>
 8009d02:	2300      	movs	r3, #0
 8009d04:	73fb      	strb	r3, [r7, #15]
 8009d06:	7bfb      	ldrb	r3, [r7, #15]
 8009d08:	f003 0301 	and.w	r3, r3, #1
 8009d0c:	73fb      	strb	r3, [r7, #15]
  if (available) {
 8009d0e:	7bfb      	ldrb	r3, [r7, #15]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d004      	beq.n	8009d1e <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	7813      	ldrb	r3, [r2, #0]
 8009d18:	f043 0304 	orr.w	r3, r3, #4
 8009d1c:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 8009d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3714      	adds	r7, #20
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d108      	bne.n	8009d56 <tu_edpt_release+0x2a>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <tu_edpt_release+0x2a>
 8009d52:	2301      	movs	r3, #1
 8009d54:	e000      	b.n	8009d58 <tu_edpt_release+0x2c>
 8009d56:	2300      	movs	r3, #0
 8009d58:	73fb      	strb	r3, [r7, #15]
 8009d5a:	7bfb      	ldrb	r3, [r7, #15]
 8009d5c:	f003 0301 	and.w	r3, r3, #1
 8009d60:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 8009d62:	7bfb      	ldrb	r3, [r7, #15]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d004      	beq.n	8009d72 <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	7813      	ldrb	r3, [r2, #0]
 8009d6c:	f023 0304 	bic.w	r3, r3, #4
 8009d70:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 8009d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3714      	adds	r7, #20
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 8009d80:	b480      	push	{r7}
 8009d82:	b08b      	sub	sp, #44	@ 0x2c
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	460b      	mov	r3, r1
 8009d8a:	70fb      	strb	r3, [r7, #3]
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	70bb      	strb	r3, [r7, #2]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	889b      	ldrh	r3, [r3, #4]
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d9e:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 8009da0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	78db      	ldrb	r3, [r3, #3]
 8009da6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	2b03      	cmp	r3, #3
 8009dae:	d059      	beq.n	8009e64 <tu_edpt_validate+0xe4>
 8009db0:	2b03      	cmp	r3, #3
 8009db2:	dc6e      	bgt.n	8009e92 <tu_edpt_validate+0x112>
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d002      	beq.n	8009dbe <tu_edpt_validate+0x3e>
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d018      	beq.n	8009dee <tu_edpt_validate+0x6e>
 8009dbc:	e069      	b.n	8009e92 <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8009dbe:	78fb      	ldrb	r3, [r7, #3]
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	d102      	bne.n	8009dca <tu_edpt_validate+0x4a>
 8009dc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009dc8:	e001      	b.n	8009dce <tu_edpt_validate+0x4e>
 8009dca:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8009dce:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 8009dd0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009dd2:	8a7b      	ldrh	r3, [r7, #18]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d95e      	bls.n	8009e96 <tu_edpt_validate+0x116>
 8009dd8:	4b35      	ldr	r3, [pc, #212]	@ (8009eb0 <tu_edpt_validate+0x130>)
 8009dda:	60fb      	str	r3, [r7, #12]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f003 0301 	and.w	r3, r3, #1
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d000      	beq.n	8009dea <tu_edpt_validate+0x6a>
 8009de8:	be00      	bkpt	0x0000
 8009dea:	2300      	movs	r3, #0
 8009dec:	e059      	b.n	8009ea2 <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 8009dee:	78fb      	ldrb	r3, [r7, #3]
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d10e      	bne.n	8009e12 <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8009df4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009df6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dfa:	d04e      	beq.n	8009e9a <tu_edpt_validate+0x11a>
 8009dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8009eb0 <tu_edpt_validate+0x130>)
 8009dfe:	617b      	str	r3, [r7, #20]
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 0301 	and.w	r3, r3, #1
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d000      	beq.n	8009e0e <tu_edpt_validate+0x8e>
 8009e0c:	be00      	bkpt	0x0000
 8009e0e:	2300      	movs	r3, #0
 8009e10:	e047      	b.n	8009ea2 <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 8009e12:	78bb      	ldrb	r3, [r7, #2]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00e      	beq.n	8009e36 <tu_edpt_validate+0xb6>
 8009e18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009e1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e1e:	d10a      	bne.n	8009e36 <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e2c:	711a      	strb	r2, [r3, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 8009e32:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 8009e34:	e031      	b.n	8009e9a <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 8009e36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009e38:	2b08      	cmp	r3, #8
 8009e3a:	d02e      	beq.n	8009e9a <tu_edpt_validate+0x11a>
 8009e3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009e3e:	2b10      	cmp	r3, #16
 8009e40:	d02b      	beq.n	8009e9a <tu_edpt_validate+0x11a>
 8009e42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009e44:	2b20      	cmp	r3, #32
 8009e46:	d028      	beq.n	8009e9a <tu_edpt_validate+0x11a>
 8009e48:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009e4a:	2b40      	cmp	r3, #64	@ 0x40
 8009e4c:	d025      	beq.n	8009e9a <tu_edpt_validate+0x11a>
 8009e4e:	4b18      	ldr	r3, [pc, #96]	@ (8009eb0 <tu_edpt_validate+0x130>)
 8009e50:	61bb      	str	r3, [r7, #24]
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f003 0301 	and.w	r3, r3, #1
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d000      	beq.n	8009e60 <tu_edpt_validate+0xe0>
 8009e5e:	be00      	bkpt	0x0000
 8009e60:	2300      	movs	r3, #0
 8009e62:	e01e      	b.n	8009ea2 <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8009e64:	78fb      	ldrb	r3, [r7, #3]
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d102      	bne.n	8009e70 <tu_edpt_validate+0xf0>
 8009e6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e6e:	e000      	b.n	8009e72 <tu_edpt_validate+0xf2>
 8009e70:	2340      	movs	r3, #64	@ 0x40
 8009e72:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 8009e74:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009e76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d910      	bls.n	8009e9e <tu_edpt_validate+0x11e>
 8009e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8009eb0 <tu_edpt_validate+0x130>)
 8009e7e:	623b      	str	r3, [r7, #32]
 8009e80:	6a3b      	ldr	r3, [r7, #32]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f003 0301 	and.w	r3, r3, #1
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d000      	beq.n	8009e8e <tu_edpt_validate+0x10e>
 8009e8c:	be00      	bkpt	0x0000
 8009e8e:	2300      	movs	r3, #0
 8009e90:	e007      	b.n	8009ea2 <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 8009e92:	2300      	movs	r3, #0
 8009e94:	e005      	b.n	8009ea2 <tu_edpt_validate+0x122>
      break;
 8009e96:	bf00      	nop
 8009e98:	e002      	b.n	8009ea0 <tu_edpt_validate+0x120>
      break;
 8009e9a:	bf00      	nop
 8009e9c:	e000      	b.n	8009ea0 <tu_edpt_validate+0x120>
      break;
 8009e9e:	bf00      	nop
  }

  return true;
 8009ea0:	2301      	movs	r3, #1
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	372c      	adds	r7, #44	@ 0x2c
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	e000edf0 	.word	0xe000edf0

08009eb4 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 8009eb4:	b480      	push	{r7}
 8009eb6:	b08d      	sub	sp, #52	@ 0x34
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	4611      	mov	r1, r2
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	80fb      	strh	r3, [r7, #6]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 8009ece:	88fb      	ldrh	r3, [r7, #6]
 8009ed0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ed2:	4413      	add	r3, r2
 8009ed4:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 8009ed6:	e027      	b.n	8009f28 <tu_edpt_bind_driver+0x74>
 8009ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eda:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8009edc:	6a3b      	ldr	r3, [r7, #32]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 8009ee2:	2b05      	cmp	r3, #5
 8009ee4:	d116      	bne.n	8009f14 <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8009ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee8:	789b      	ldrb	r3, [r3, #2]
 8009eea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009eee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ef2:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009ef4:	7fbb      	ldrb	r3, [r7, #30]
 8009ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009efa:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8009efc:	005b      	lsls	r3, r3, #1
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	4413      	add	r3, r2
 8009f02:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009f06:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009f08:	7ffa      	ldrb	r2, [r7, #31]
 8009f0a:	09d2      	lsrs	r2, r2, #7
 8009f0c:	b2d2      	uxtb	r2, r2
 8009f0e:	4611      	mov	r1, r2
 8009f10:	797a      	ldrb	r2, [r7, #5]
 8009f12:	545a      	strb	r2, [r3, r1]
 8009f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f16:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	461a      	mov	r2, r3
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 8009f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 8009f28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d3d3      	bcc.n	8009ed8 <tu_edpt_bind_driver+0x24>
  }
}
 8009f30:	bf00      	nop
 8009f32:	bf00      	nop
 8009f34:	3734      	adds	r7, #52	@ 0x34
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
	...

08009f40 <std>:
 8009f40:	2300      	movs	r3, #0
 8009f42:	b510      	push	{r4, lr}
 8009f44:	4604      	mov	r4, r0
 8009f46:	e9c0 3300 	strd	r3, r3, [r0]
 8009f4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f4e:	6083      	str	r3, [r0, #8]
 8009f50:	8181      	strh	r1, [r0, #12]
 8009f52:	6643      	str	r3, [r0, #100]	@ 0x64
 8009f54:	81c2      	strh	r2, [r0, #14]
 8009f56:	6183      	str	r3, [r0, #24]
 8009f58:	4619      	mov	r1, r3
 8009f5a:	2208      	movs	r2, #8
 8009f5c:	305c      	adds	r0, #92	@ 0x5c
 8009f5e:	f000 f9e7 	bl	800a330 <memset>
 8009f62:	4b0d      	ldr	r3, [pc, #52]	@ (8009f98 <std+0x58>)
 8009f64:	6263      	str	r3, [r4, #36]	@ 0x24
 8009f66:	4b0d      	ldr	r3, [pc, #52]	@ (8009f9c <std+0x5c>)
 8009f68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009fa0 <std+0x60>)
 8009f6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8009fa4 <std+0x64>)
 8009f70:	6323      	str	r3, [r4, #48]	@ 0x30
 8009f72:	4b0d      	ldr	r3, [pc, #52]	@ (8009fa8 <std+0x68>)
 8009f74:	6224      	str	r4, [r4, #32]
 8009f76:	429c      	cmp	r4, r3
 8009f78:	d006      	beq.n	8009f88 <std+0x48>
 8009f7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009f7e:	4294      	cmp	r4, r2
 8009f80:	d002      	beq.n	8009f88 <std+0x48>
 8009f82:	33d0      	adds	r3, #208	@ 0xd0
 8009f84:	429c      	cmp	r4, r3
 8009f86:	d105      	bne.n	8009f94 <std+0x54>
 8009f88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f90:	f000 ba46 	b.w	800a420 <__retarget_lock_init_recursive>
 8009f94:	bd10      	pop	{r4, pc}
 8009f96:	bf00      	nop
 8009f98:	0800a181 	.word	0x0800a181
 8009f9c:	0800a1a3 	.word	0x0800a1a3
 8009fa0:	0800a1db 	.word	0x0800a1db
 8009fa4:	0800a1ff 	.word	0x0800a1ff
 8009fa8:	20000cac 	.word	0x20000cac

08009fac <stdio_exit_handler>:
 8009fac:	4a02      	ldr	r2, [pc, #8]	@ (8009fb8 <stdio_exit_handler+0xc>)
 8009fae:	4903      	ldr	r1, [pc, #12]	@ (8009fbc <stdio_exit_handler+0x10>)
 8009fb0:	4803      	ldr	r0, [pc, #12]	@ (8009fc0 <stdio_exit_handler+0x14>)
 8009fb2:	f000 b869 	b.w	800a088 <_fwalk_sglue>
 8009fb6:	bf00      	nop
 8009fb8:	20000084 	.word	0x20000084
 8009fbc:	0800a73d 	.word	0x0800a73d
 8009fc0:	20000094 	.word	0x20000094

08009fc4 <cleanup_stdio>:
 8009fc4:	6841      	ldr	r1, [r0, #4]
 8009fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8009ff8 <cleanup_stdio+0x34>)
 8009fc8:	4299      	cmp	r1, r3
 8009fca:	b510      	push	{r4, lr}
 8009fcc:	4604      	mov	r4, r0
 8009fce:	d001      	beq.n	8009fd4 <cleanup_stdio+0x10>
 8009fd0:	f000 fbb4 	bl	800a73c <_fflush_r>
 8009fd4:	68a1      	ldr	r1, [r4, #8]
 8009fd6:	4b09      	ldr	r3, [pc, #36]	@ (8009ffc <cleanup_stdio+0x38>)
 8009fd8:	4299      	cmp	r1, r3
 8009fda:	d002      	beq.n	8009fe2 <cleanup_stdio+0x1e>
 8009fdc:	4620      	mov	r0, r4
 8009fde:	f000 fbad 	bl	800a73c <_fflush_r>
 8009fe2:	68e1      	ldr	r1, [r4, #12]
 8009fe4:	4b06      	ldr	r3, [pc, #24]	@ (800a000 <cleanup_stdio+0x3c>)
 8009fe6:	4299      	cmp	r1, r3
 8009fe8:	d004      	beq.n	8009ff4 <cleanup_stdio+0x30>
 8009fea:	4620      	mov	r0, r4
 8009fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ff0:	f000 bba4 	b.w	800a73c <_fflush_r>
 8009ff4:	bd10      	pop	{r4, pc}
 8009ff6:	bf00      	nop
 8009ff8:	20000cac 	.word	0x20000cac
 8009ffc:	20000d14 	.word	0x20000d14
 800a000:	20000d7c 	.word	0x20000d7c

0800a004 <global_stdio_init.part.0>:
 800a004:	b510      	push	{r4, lr}
 800a006:	4b0b      	ldr	r3, [pc, #44]	@ (800a034 <global_stdio_init.part.0+0x30>)
 800a008:	4c0b      	ldr	r4, [pc, #44]	@ (800a038 <global_stdio_init.part.0+0x34>)
 800a00a:	4a0c      	ldr	r2, [pc, #48]	@ (800a03c <global_stdio_init.part.0+0x38>)
 800a00c:	601a      	str	r2, [r3, #0]
 800a00e:	4620      	mov	r0, r4
 800a010:	2200      	movs	r2, #0
 800a012:	2104      	movs	r1, #4
 800a014:	f7ff ff94 	bl	8009f40 <std>
 800a018:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a01c:	2201      	movs	r2, #1
 800a01e:	2109      	movs	r1, #9
 800a020:	f7ff ff8e 	bl	8009f40 <std>
 800a024:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a028:	2202      	movs	r2, #2
 800a02a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a02e:	2112      	movs	r1, #18
 800a030:	f7ff bf86 	b.w	8009f40 <std>
 800a034:	20000de4 	.word	0x20000de4
 800a038:	20000cac 	.word	0x20000cac
 800a03c:	08009fad 	.word	0x08009fad

0800a040 <__sfp_lock_acquire>:
 800a040:	4801      	ldr	r0, [pc, #4]	@ (800a048 <__sfp_lock_acquire+0x8>)
 800a042:	f000 b9ee 	b.w	800a422 <__retarget_lock_acquire_recursive>
 800a046:	bf00      	nop
 800a048:	20000ded 	.word	0x20000ded

0800a04c <__sfp_lock_release>:
 800a04c:	4801      	ldr	r0, [pc, #4]	@ (800a054 <__sfp_lock_release+0x8>)
 800a04e:	f000 b9e9 	b.w	800a424 <__retarget_lock_release_recursive>
 800a052:	bf00      	nop
 800a054:	20000ded 	.word	0x20000ded

0800a058 <__sinit>:
 800a058:	b510      	push	{r4, lr}
 800a05a:	4604      	mov	r4, r0
 800a05c:	f7ff fff0 	bl	800a040 <__sfp_lock_acquire>
 800a060:	6a23      	ldr	r3, [r4, #32]
 800a062:	b11b      	cbz	r3, 800a06c <__sinit+0x14>
 800a064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a068:	f7ff bff0 	b.w	800a04c <__sfp_lock_release>
 800a06c:	4b04      	ldr	r3, [pc, #16]	@ (800a080 <__sinit+0x28>)
 800a06e:	6223      	str	r3, [r4, #32]
 800a070:	4b04      	ldr	r3, [pc, #16]	@ (800a084 <__sinit+0x2c>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d1f5      	bne.n	800a064 <__sinit+0xc>
 800a078:	f7ff ffc4 	bl	800a004 <global_stdio_init.part.0>
 800a07c:	e7f2      	b.n	800a064 <__sinit+0xc>
 800a07e:	bf00      	nop
 800a080:	08009fc5 	.word	0x08009fc5
 800a084:	20000de4 	.word	0x20000de4

0800a088 <_fwalk_sglue>:
 800a088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a08c:	4607      	mov	r7, r0
 800a08e:	4688      	mov	r8, r1
 800a090:	4614      	mov	r4, r2
 800a092:	2600      	movs	r6, #0
 800a094:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a098:	f1b9 0901 	subs.w	r9, r9, #1
 800a09c:	d505      	bpl.n	800a0aa <_fwalk_sglue+0x22>
 800a09e:	6824      	ldr	r4, [r4, #0]
 800a0a0:	2c00      	cmp	r4, #0
 800a0a2:	d1f7      	bne.n	800a094 <_fwalk_sglue+0xc>
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0aa:	89ab      	ldrh	r3, [r5, #12]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d907      	bls.n	800a0c0 <_fwalk_sglue+0x38>
 800a0b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	d003      	beq.n	800a0c0 <_fwalk_sglue+0x38>
 800a0b8:	4629      	mov	r1, r5
 800a0ba:	4638      	mov	r0, r7
 800a0bc:	47c0      	blx	r8
 800a0be:	4306      	orrs	r6, r0
 800a0c0:	3568      	adds	r5, #104	@ 0x68
 800a0c2:	e7e9      	b.n	800a098 <_fwalk_sglue+0x10>

0800a0c4 <_puts_r>:
 800a0c4:	6a03      	ldr	r3, [r0, #32]
 800a0c6:	b570      	push	{r4, r5, r6, lr}
 800a0c8:	6884      	ldr	r4, [r0, #8]
 800a0ca:	4605      	mov	r5, r0
 800a0cc:	460e      	mov	r6, r1
 800a0ce:	b90b      	cbnz	r3, 800a0d4 <_puts_r+0x10>
 800a0d0:	f7ff ffc2 	bl	800a058 <__sinit>
 800a0d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0d6:	07db      	lsls	r3, r3, #31
 800a0d8:	d405      	bmi.n	800a0e6 <_puts_r+0x22>
 800a0da:	89a3      	ldrh	r3, [r4, #12]
 800a0dc:	0598      	lsls	r0, r3, #22
 800a0de:	d402      	bmi.n	800a0e6 <_puts_r+0x22>
 800a0e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0e2:	f000 f99e 	bl	800a422 <__retarget_lock_acquire_recursive>
 800a0e6:	89a3      	ldrh	r3, [r4, #12]
 800a0e8:	0719      	lsls	r1, r3, #28
 800a0ea:	d502      	bpl.n	800a0f2 <_puts_r+0x2e>
 800a0ec:	6923      	ldr	r3, [r4, #16]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d135      	bne.n	800a15e <_puts_r+0x9a>
 800a0f2:	4621      	mov	r1, r4
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	f000 f8c5 	bl	800a284 <__swsetup_r>
 800a0fa:	b380      	cbz	r0, 800a15e <_puts_r+0x9a>
 800a0fc:	f04f 35ff 	mov.w	r5, #4294967295
 800a100:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a102:	07da      	lsls	r2, r3, #31
 800a104:	d405      	bmi.n	800a112 <_puts_r+0x4e>
 800a106:	89a3      	ldrh	r3, [r4, #12]
 800a108:	059b      	lsls	r3, r3, #22
 800a10a:	d402      	bmi.n	800a112 <_puts_r+0x4e>
 800a10c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a10e:	f000 f989 	bl	800a424 <__retarget_lock_release_recursive>
 800a112:	4628      	mov	r0, r5
 800a114:	bd70      	pop	{r4, r5, r6, pc}
 800a116:	2b00      	cmp	r3, #0
 800a118:	da04      	bge.n	800a124 <_puts_r+0x60>
 800a11a:	69a2      	ldr	r2, [r4, #24]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	dc17      	bgt.n	800a150 <_puts_r+0x8c>
 800a120:	290a      	cmp	r1, #10
 800a122:	d015      	beq.n	800a150 <_puts_r+0x8c>
 800a124:	6823      	ldr	r3, [r4, #0]
 800a126:	1c5a      	adds	r2, r3, #1
 800a128:	6022      	str	r2, [r4, #0]
 800a12a:	7019      	strb	r1, [r3, #0]
 800a12c:	68a3      	ldr	r3, [r4, #8]
 800a12e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a132:	3b01      	subs	r3, #1
 800a134:	60a3      	str	r3, [r4, #8]
 800a136:	2900      	cmp	r1, #0
 800a138:	d1ed      	bne.n	800a116 <_puts_r+0x52>
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	da11      	bge.n	800a162 <_puts_r+0x9e>
 800a13e:	4622      	mov	r2, r4
 800a140:	210a      	movs	r1, #10
 800a142:	4628      	mov	r0, r5
 800a144:	f000 f85f 	bl	800a206 <__swbuf_r>
 800a148:	3001      	adds	r0, #1
 800a14a:	d0d7      	beq.n	800a0fc <_puts_r+0x38>
 800a14c:	250a      	movs	r5, #10
 800a14e:	e7d7      	b.n	800a100 <_puts_r+0x3c>
 800a150:	4622      	mov	r2, r4
 800a152:	4628      	mov	r0, r5
 800a154:	f000 f857 	bl	800a206 <__swbuf_r>
 800a158:	3001      	adds	r0, #1
 800a15a:	d1e7      	bne.n	800a12c <_puts_r+0x68>
 800a15c:	e7ce      	b.n	800a0fc <_puts_r+0x38>
 800a15e:	3e01      	subs	r6, #1
 800a160:	e7e4      	b.n	800a12c <_puts_r+0x68>
 800a162:	6823      	ldr	r3, [r4, #0]
 800a164:	1c5a      	adds	r2, r3, #1
 800a166:	6022      	str	r2, [r4, #0]
 800a168:	220a      	movs	r2, #10
 800a16a:	701a      	strb	r2, [r3, #0]
 800a16c:	e7ee      	b.n	800a14c <_puts_r+0x88>
	...

0800a170 <puts>:
 800a170:	4b02      	ldr	r3, [pc, #8]	@ (800a17c <puts+0xc>)
 800a172:	4601      	mov	r1, r0
 800a174:	6818      	ldr	r0, [r3, #0]
 800a176:	f7ff bfa5 	b.w	800a0c4 <_puts_r>
 800a17a:	bf00      	nop
 800a17c:	20000090 	.word	0x20000090

0800a180 <__sread>:
 800a180:	b510      	push	{r4, lr}
 800a182:	460c      	mov	r4, r1
 800a184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a188:	f000 f8fc 	bl	800a384 <_read_r>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	bfab      	itete	ge
 800a190:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a192:	89a3      	ldrhlt	r3, [r4, #12]
 800a194:	181b      	addge	r3, r3, r0
 800a196:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a19a:	bfac      	ite	ge
 800a19c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a19e:	81a3      	strhlt	r3, [r4, #12]
 800a1a0:	bd10      	pop	{r4, pc}

0800a1a2 <__swrite>:
 800a1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a6:	461f      	mov	r7, r3
 800a1a8:	898b      	ldrh	r3, [r1, #12]
 800a1aa:	05db      	lsls	r3, r3, #23
 800a1ac:	4605      	mov	r5, r0
 800a1ae:	460c      	mov	r4, r1
 800a1b0:	4616      	mov	r6, r2
 800a1b2:	d505      	bpl.n	800a1c0 <__swrite+0x1e>
 800a1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1b8:	2302      	movs	r3, #2
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f000 f8d0 	bl	800a360 <_lseek_r>
 800a1c0:	89a3      	ldrh	r3, [r4, #12]
 800a1c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a1ca:	81a3      	strh	r3, [r4, #12]
 800a1cc:	4632      	mov	r2, r6
 800a1ce:	463b      	mov	r3, r7
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d6:	f000 b8e7 	b.w	800a3a8 <_write_r>

0800a1da <__sseek>:
 800a1da:	b510      	push	{r4, lr}
 800a1dc:	460c      	mov	r4, r1
 800a1de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e2:	f000 f8bd 	bl	800a360 <_lseek_r>
 800a1e6:	1c43      	adds	r3, r0, #1
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	bf15      	itete	ne
 800a1ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a1ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a1f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a1f6:	81a3      	strheq	r3, [r4, #12]
 800a1f8:	bf18      	it	ne
 800a1fa:	81a3      	strhne	r3, [r4, #12]
 800a1fc:	bd10      	pop	{r4, pc}

0800a1fe <__sclose>:
 800a1fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a202:	f000 b89d 	b.w	800a340 <_close_r>

0800a206 <__swbuf_r>:
 800a206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a208:	460e      	mov	r6, r1
 800a20a:	4614      	mov	r4, r2
 800a20c:	4605      	mov	r5, r0
 800a20e:	b118      	cbz	r0, 800a218 <__swbuf_r+0x12>
 800a210:	6a03      	ldr	r3, [r0, #32]
 800a212:	b90b      	cbnz	r3, 800a218 <__swbuf_r+0x12>
 800a214:	f7ff ff20 	bl	800a058 <__sinit>
 800a218:	69a3      	ldr	r3, [r4, #24]
 800a21a:	60a3      	str	r3, [r4, #8]
 800a21c:	89a3      	ldrh	r3, [r4, #12]
 800a21e:	071a      	lsls	r2, r3, #28
 800a220:	d501      	bpl.n	800a226 <__swbuf_r+0x20>
 800a222:	6923      	ldr	r3, [r4, #16]
 800a224:	b943      	cbnz	r3, 800a238 <__swbuf_r+0x32>
 800a226:	4621      	mov	r1, r4
 800a228:	4628      	mov	r0, r5
 800a22a:	f000 f82b 	bl	800a284 <__swsetup_r>
 800a22e:	b118      	cbz	r0, 800a238 <__swbuf_r+0x32>
 800a230:	f04f 37ff 	mov.w	r7, #4294967295
 800a234:	4638      	mov	r0, r7
 800a236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a238:	6823      	ldr	r3, [r4, #0]
 800a23a:	6922      	ldr	r2, [r4, #16]
 800a23c:	1a98      	subs	r0, r3, r2
 800a23e:	6963      	ldr	r3, [r4, #20]
 800a240:	b2f6      	uxtb	r6, r6
 800a242:	4283      	cmp	r3, r0
 800a244:	4637      	mov	r7, r6
 800a246:	dc05      	bgt.n	800a254 <__swbuf_r+0x4e>
 800a248:	4621      	mov	r1, r4
 800a24a:	4628      	mov	r0, r5
 800a24c:	f000 fa76 	bl	800a73c <_fflush_r>
 800a250:	2800      	cmp	r0, #0
 800a252:	d1ed      	bne.n	800a230 <__swbuf_r+0x2a>
 800a254:	68a3      	ldr	r3, [r4, #8]
 800a256:	3b01      	subs	r3, #1
 800a258:	60a3      	str	r3, [r4, #8]
 800a25a:	6823      	ldr	r3, [r4, #0]
 800a25c:	1c5a      	adds	r2, r3, #1
 800a25e:	6022      	str	r2, [r4, #0]
 800a260:	701e      	strb	r6, [r3, #0]
 800a262:	6962      	ldr	r2, [r4, #20]
 800a264:	1c43      	adds	r3, r0, #1
 800a266:	429a      	cmp	r2, r3
 800a268:	d004      	beq.n	800a274 <__swbuf_r+0x6e>
 800a26a:	89a3      	ldrh	r3, [r4, #12]
 800a26c:	07db      	lsls	r3, r3, #31
 800a26e:	d5e1      	bpl.n	800a234 <__swbuf_r+0x2e>
 800a270:	2e0a      	cmp	r6, #10
 800a272:	d1df      	bne.n	800a234 <__swbuf_r+0x2e>
 800a274:	4621      	mov	r1, r4
 800a276:	4628      	mov	r0, r5
 800a278:	f000 fa60 	bl	800a73c <_fflush_r>
 800a27c:	2800      	cmp	r0, #0
 800a27e:	d0d9      	beq.n	800a234 <__swbuf_r+0x2e>
 800a280:	e7d6      	b.n	800a230 <__swbuf_r+0x2a>
	...

0800a284 <__swsetup_r>:
 800a284:	b538      	push	{r3, r4, r5, lr}
 800a286:	4b29      	ldr	r3, [pc, #164]	@ (800a32c <__swsetup_r+0xa8>)
 800a288:	4605      	mov	r5, r0
 800a28a:	6818      	ldr	r0, [r3, #0]
 800a28c:	460c      	mov	r4, r1
 800a28e:	b118      	cbz	r0, 800a298 <__swsetup_r+0x14>
 800a290:	6a03      	ldr	r3, [r0, #32]
 800a292:	b90b      	cbnz	r3, 800a298 <__swsetup_r+0x14>
 800a294:	f7ff fee0 	bl	800a058 <__sinit>
 800a298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a29c:	0719      	lsls	r1, r3, #28
 800a29e:	d422      	bmi.n	800a2e6 <__swsetup_r+0x62>
 800a2a0:	06da      	lsls	r2, r3, #27
 800a2a2:	d407      	bmi.n	800a2b4 <__swsetup_r+0x30>
 800a2a4:	2209      	movs	r2, #9
 800a2a6:	602a      	str	r2, [r5, #0]
 800a2a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2ac:	81a3      	strh	r3, [r4, #12]
 800a2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b2:	e033      	b.n	800a31c <__swsetup_r+0x98>
 800a2b4:	0758      	lsls	r0, r3, #29
 800a2b6:	d512      	bpl.n	800a2de <__swsetup_r+0x5a>
 800a2b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a2ba:	b141      	cbz	r1, 800a2ce <__swsetup_r+0x4a>
 800a2bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2c0:	4299      	cmp	r1, r3
 800a2c2:	d002      	beq.n	800a2ca <__swsetup_r+0x46>
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	f000 f8bd 	bl	800a444 <_free_r>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2ce:	89a3      	ldrh	r3, [r4, #12]
 800a2d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a2d4:	81a3      	strh	r3, [r4, #12]
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	6063      	str	r3, [r4, #4]
 800a2da:	6923      	ldr	r3, [r4, #16]
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	89a3      	ldrh	r3, [r4, #12]
 800a2e0:	f043 0308 	orr.w	r3, r3, #8
 800a2e4:	81a3      	strh	r3, [r4, #12]
 800a2e6:	6923      	ldr	r3, [r4, #16]
 800a2e8:	b94b      	cbnz	r3, 800a2fe <__swsetup_r+0x7a>
 800a2ea:	89a3      	ldrh	r3, [r4, #12]
 800a2ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a2f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2f4:	d003      	beq.n	800a2fe <__swsetup_r+0x7a>
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	f000 fa6d 	bl	800a7d8 <__smakebuf_r>
 800a2fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a302:	f013 0201 	ands.w	r2, r3, #1
 800a306:	d00a      	beq.n	800a31e <__swsetup_r+0x9a>
 800a308:	2200      	movs	r2, #0
 800a30a:	60a2      	str	r2, [r4, #8]
 800a30c:	6962      	ldr	r2, [r4, #20]
 800a30e:	4252      	negs	r2, r2
 800a310:	61a2      	str	r2, [r4, #24]
 800a312:	6922      	ldr	r2, [r4, #16]
 800a314:	b942      	cbnz	r2, 800a328 <__swsetup_r+0xa4>
 800a316:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a31a:	d1c5      	bne.n	800a2a8 <__swsetup_r+0x24>
 800a31c:	bd38      	pop	{r3, r4, r5, pc}
 800a31e:	0799      	lsls	r1, r3, #30
 800a320:	bf58      	it	pl
 800a322:	6962      	ldrpl	r2, [r4, #20]
 800a324:	60a2      	str	r2, [r4, #8]
 800a326:	e7f4      	b.n	800a312 <__swsetup_r+0x8e>
 800a328:	2000      	movs	r0, #0
 800a32a:	e7f7      	b.n	800a31c <__swsetup_r+0x98>
 800a32c:	20000090 	.word	0x20000090

0800a330 <memset>:
 800a330:	4402      	add	r2, r0
 800a332:	4603      	mov	r3, r0
 800a334:	4293      	cmp	r3, r2
 800a336:	d100      	bne.n	800a33a <memset+0xa>
 800a338:	4770      	bx	lr
 800a33a:	f803 1b01 	strb.w	r1, [r3], #1
 800a33e:	e7f9      	b.n	800a334 <memset+0x4>

0800a340 <_close_r>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	4d06      	ldr	r5, [pc, #24]	@ (800a35c <_close_r+0x1c>)
 800a344:	2300      	movs	r3, #0
 800a346:	4604      	mov	r4, r0
 800a348:	4608      	mov	r0, r1
 800a34a:	602b      	str	r3, [r5, #0]
 800a34c:	f7f7 fc6e 	bl	8001c2c <_close>
 800a350:	1c43      	adds	r3, r0, #1
 800a352:	d102      	bne.n	800a35a <_close_r+0x1a>
 800a354:	682b      	ldr	r3, [r5, #0]
 800a356:	b103      	cbz	r3, 800a35a <_close_r+0x1a>
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	bd38      	pop	{r3, r4, r5, pc}
 800a35c:	20000de8 	.word	0x20000de8

0800a360 <_lseek_r>:
 800a360:	b538      	push	{r3, r4, r5, lr}
 800a362:	4d07      	ldr	r5, [pc, #28]	@ (800a380 <_lseek_r+0x20>)
 800a364:	4604      	mov	r4, r0
 800a366:	4608      	mov	r0, r1
 800a368:	4611      	mov	r1, r2
 800a36a:	2200      	movs	r2, #0
 800a36c:	602a      	str	r2, [r5, #0]
 800a36e:	461a      	mov	r2, r3
 800a370:	f7f7 fc83 	bl	8001c7a <_lseek>
 800a374:	1c43      	adds	r3, r0, #1
 800a376:	d102      	bne.n	800a37e <_lseek_r+0x1e>
 800a378:	682b      	ldr	r3, [r5, #0]
 800a37a:	b103      	cbz	r3, 800a37e <_lseek_r+0x1e>
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	bd38      	pop	{r3, r4, r5, pc}
 800a380:	20000de8 	.word	0x20000de8

0800a384 <_read_r>:
 800a384:	b538      	push	{r3, r4, r5, lr}
 800a386:	4d07      	ldr	r5, [pc, #28]	@ (800a3a4 <_read_r+0x20>)
 800a388:	4604      	mov	r4, r0
 800a38a:	4608      	mov	r0, r1
 800a38c:	4611      	mov	r1, r2
 800a38e:	2200      	movs	r2, #0
 800a390:	602a      	str	r2, [r5, #0]
 800a392:	461a      	mov	r2, r3
 800a394:	f7f7 fc11 	bl	8001bba <_read>
 800a398:	1c43      	adds	r3, r0, #1
 800a39a:	d102      	bne.n	800a3a2 <_read_r+0x1e>
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	b103      	cbz	r3, 800a3a2 <_read_r+0x1e>
 800a3a0:	6023      	str	r3, [r4, #0]
 800a3a2:	bd38      	pop	{r3, r4, r5, pc}
 800a3a4:	20000de8 	.word	0x20000de8

0800a3a8 <_write_r>:
 800a3a8:	b538      	push	{r3, r4, r5, lr}
 800a3aa:	4d07      	ldr	r5, [pc, #28]	@ (800a3c8 <_write_r+0x20>)
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	4608      	mov	r0, r1
 800a3b0:	4611      	mov	r1, r2
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	602a      	str	r2, [r5, #0]
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	f7f7 fc1c 	bl	8001bf4 <_write>
 800a3bc:	1c43      	adds	r3, r0, #1
 800a3be:	d102      	bne.n	800a3c6 <_write_r+0x1e>
 800a3c0:	682b      	ldr	r3, [r5, #0]
 800a3c2:	b103      	cbz	r3, 800a3c6 <_write_r+0x1e>
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	bd38      	pop	{r3, r4, r5, pc}
 800a3c8:	20000de8 	.word	0x20000de8

0800a3cc <__errno>:
 800a3cc:	4b01      	ldr	r3, [pc, #4]	@ (800a3d4 <__errno+0x8>)
 800a3ce:	6818      	ldr	r0, [r3, #0]
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	20000090 	.word	0x20000090

0800a3d8 <__libc_init_array>:
 800a3d8:	b570      	push	{r4, r5, r6, lr}
 800a3da:	4d0d      	ldr	r5, [pc, #52]	@ (800a410 <__libc_init_array+0x38>)
 800a3dc:	4c0d      	ldr	r4, [pc, #52]	@ (800a414 <__libc_init_array+0x3c>)
 800a3de:	1b64      	subs	r4, r4, r5
 800a3e0:	10a4      	asrs	r4, r4, #2
 800a3e2:	2600      	movs	r6, #0
 800a3e4:	42a6      	cmp	r6, r4
 800a3e6:	d109      	bne.n	800a3fc <__libc_init_array+0x24>
 800a3e8:	4d0b      	ldr	r5, [pc, #44]	@ (800a418 <__libc_init_array+0x40>)
 800a3ea:	4c0c      	ldr	r4, [pc, #48]	@ (800a41c <__libc_init_array+0x44>)
 800a3ec:	f000 fa62 	bl	800a8b4 <_init>
 800a3f0:	1b64      	subs	r4, r4, r5
 800a3f2:	10a4      	asrs	r4, r4, #2
 800a3f4:	2600      	movs	r6, #0
 800a3f6:	42a6      	cmp	r6, r4
 800a3f8:	d105      	bne.n	800a406 <__libc_init_array+0x2e>
 800a3fa:	bd70      	pop	{r4, r5, r6, pc}
 800a3fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a400:	4798      	blx	r3
 800a402:	3601      	adds	r6, #1
 800a404:	e7ee      	b.n	800a3e4 <__libc_init_array+0xc>
 800a406:	f855 3b04 	ldr.w	r3, [r5], #4
 800a40a:	4798      	blx	r3
 800a40c:	3601      	adds	r6, #1
 800a40e:	e7f2      	b.n	800a3f6 <__libc_init_array+0x1e>
 800a410:	0800ab48 	.word	0x0800ab48
 800a414:	0800ab48 	.word	0x0800ab48
 800a418:	0800ab48 	.word	0x0800ab48
 800a41c:	0800ab4c 	.word	0x0800ab4c

0800a420 <__retarget_lock_init_recursive>:
 800a420:	4770      	bx	lr

0800a422 <__retarget_lock_acquire_recursive>:
 800a422:	4770      	bx	lr

0800a424 <__retarget_lock_release_recursive>:
 800a424:	4770      	bx	lr

0800a426 <memcpy>:
 800a426:	440a      	add	r2, r1
 800a428:	4291      	cmp	r1, r2
 800a42a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a42e:	d100      	bne.n	800a432 <memcpy+0xc>
 800a430:	4770      	bx	lr
 800a432:	b510      	push	{r4, lr}
 800a434:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a438:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a43c:	4291      	cmp	r1, r2
 800a43e:	d1f9      	bne.n	800a434 <memcpy+0xe>
 800a440:	bd10      	pop	{r4, pc}
	...

0800a444 <_free_r>:
 800a444:	b538      	push	{r3, r4, r5, lr}
 800a446:	4605      	mov	r5, r0
 800a448:	2900      	cmp	r1, #0
 800a44a:	d041      	beq.n	800a4d0 <_free_r+0x8c>
 800a44c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a450:	1f0c      	subs	r4, r1, #4
 800a452:	2b00      	cmp	r3, #0
 800a454:	bfb8      	it	lt
 800a456:	18e4      	addlt	r4, r4, r3
 800a458:	f000 f8e0 	bl	800a61c <__malloc_lock>
 800a45c:	4a1d      	ldr	r2, [pc, #116]	@ (800a4d4 <_free_r+0x90>)
 800a45e:	6813      	ldr	r3, [r2, #0]
 800a460:	b933      	cbnz	r3, 800a470 <_free_r+0x2c>
 800a462:	6063      	str	r3, [r4, #4]
 800a464:	6014      	str	r4, [r2, #0]
 800a466:	4628      	mov	r0, r5
 800a468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a46c:	f000 b8dc 	b.w	800a628 <__malloc_unlock>
 800a470:	42a3      	cmp	r3, r4
 800a472:	d908      	bls.n	800a486 <_free_r+0x42>
 800a474:	6820      	ldr	r0, [r4, #0]
 800a476:	1821      	adds	r1, r4, r0
 800a478:	428b      	cmp	r3, r1
 800a47a:	bf01      	itttt	eq
 800a47c:	6819      	ldreq	r1, [r3, #0]
 800a47e:	685b      	ldreq	r3, [r3, #4]
 800a480:	1809      	addeq	r1, r1, r0
 800a482:	6021      	streq	r1, [r4, #0]
 800a484:	e7ed      	b.n	800a462 <_free_r+0x1e>
 800a486:	461a      	mov	r2, r3
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	b10b      	cbz	r3, 800a490 <_free_r+0x4c>
 800a48c:	42a3      	cmp	r3, r4
 800a48e:	d9fa      	bls.n	800a486 <_free_r+0x42>
 800a490:	6811      	ldr	r1, [r2, #0]
 800a492:	1850      	adds	r0, r2, r1
 800a494:	42a0      	cmp	r0, r4
 800a496:	d10b      	bne.n	800a4b0 <_free_r+0x6c>
 800a498:	6820      	ldr	r0, [r4, #0]
 800a49a:	4401      	add	r1, r0
 800a49c:	1850      	adds	r0, r2, r1
 800a49e:	4283      	cmp	r3, r0
 800a4a0:	6011      	str	r1, [r2, #0]
 800a4a2:	d1e0      	bne.n	800a466 <_free_r+0x22>
 800a4a4:	6818      	ldr	r0, [r3, #0]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	6053      	str	r3, [r2, #4]
 800a4aa:	4408      	add	r0, r1
 800a4ac:	6010      	str	r0, [r2, #0]
 800a4ae:	e7da      	b.n	800a466 <_free_r+0x22>
 800a4b0:	d902      	bls.n	800a4b8 <_free_r+0x74>
 800a4b2:	230c      	movs	r3, #12
 800a4b4:	602b      	str	r3, [r5, #0]
 800a4b6:	e7d6      	b.n	800a466 <_free_r+0x22>
 800a4b8:	6820      	ldr	r0, [r4, #0]
 800a4ba:	1821      	adds	r1, r4, r0
 800a4bc:	428b      	cmp	r3, r1
 800a4be:	bf04      	itt	eq
 800a4c0:	6819      	ldreq	r1, [r3, #0]
 800a4c2:	685b      	ldreq	r3, [r3, #4]
 800a4c4:	6063      	str	r3, [r4, #4]
 800a4c6:	bf04      	itt	eq
 800a4c8:	1809      	addeq	r1, r1, r0
 800a4ca:	6021      	streq	r1, [r4, #0]
 800a4cc:	6054      	str	r4, [r2, #4]
 800a4ce:	e7ca      	b.n	800a466 <_free_r+0x22>
 800a4d0:	bd38      	pop	{r3, r4, r5, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20000df4 	.word	0x20000df4

0800a4d8 <sbrk_aligned>:
 800a4d8:	b570      	push	{r4, r5, r6, lr}
 800a4da:	4e0f      	ldr	r6, [pc, #60]	@ (800a518 <sbrk_aligned+0x40>)
 800a4dc:	460c      	mov	r4, r1
 800a4de:	6831      	ldr	r1, [r6, #0]
 800a4e0:	4605      	mov	r5, r0
 800a4e2:	b911      	cbnz	r1, 800a4ea <sbrk_aligned+0x12>
 800a4e4:	f000 f9d6 	bl	800a894 <_sbrk_r>
 800a4e8:	6030      	str	r0, [r6, #0]
 800a4ea:	4621      	mov	r1, r4
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	f000 f9d1 	bl	800a894 <_sbrk_r>
 800a4f2:	1c43      	adds	r3, r0, #1
 800a4f4:	d103      	bne.n	800a4fe <sbrk_aligned+0x26>
 800a4f6:	f04f 34ff 	mov.w	r4, #4294967295
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	bd70      	pop	{r4, r5, r6, pc}
 800a4fe:	1cc4      	adds	r4, r0, #3
 800a500:	f024 0403 	bic.w	r4, r4, #3
 800a504:	42a0      	cmp	r0, r4
 800a506:	d0f8      	beq.n	800a4fa <sbrk_aligned+0x22>
 800a508:	1a21      	subs	r1, r4, r0
 800a50a:	4628      	mov	r0, r5
 800a50c:	f000 f9c2 	bl	800a894 <_sbrk_r>
 800a510:	3001      	adds	r0, #1
 800a512:	d1f2      	bne.n	800a4fa <sbrk_aligned+0x22>
 800a514:	e7ef      	b.n	800a4f6 <sbrk_aligned+0x1e>
 800a516:	bf00      	nop
 800a518:	20000df0 	.word	0x20000df0

0800a51c <_malloc_r>:
 800a51c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a520:	1ccd      	adds	r5, r1, #3
 800a522:	f025 0503 	bic.w	r5, r5, #3
 800a526:	3508      	adds	r5, #8
 800a528:	2d0c      	cmp	r5, #12
 800a52a:	bf38      	it	cc
 800a52c:	250c      	movcc	r5, #12
 800a52e:	2d00      	cmp	r5, #0
 800a530:	4606      	mov	r6, r0
 800a532:	db01      	blt.n	800a538 <_malloc_r+0x1c>
 800a534:	42a9      	cmp	r1, r5
 800a536:	d904      	bls.n	800a542 <_malloc_r+0x26>
 800a538:	230c      	movs	r3, #12
 800a53a:	6033      	str	r3, [r6, #0]
 800a53c:	2000      	movs	r0, #0
 800a53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a542:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a618 <_malloc_r+0xfc>
 800a546:	f000 f869 	bl	800a61c <__malloc_lock>
 800a54a:	f8d8 3000 	ldr.w	r3, [r8]
 800a54e:	461c      	mov	r4, r3
 800a550:	bb44      	cbnz	r4, 800a5a4 <_malloc_r+0x88>
 800a552:	4629      	mov	r1, r5
 800a554:	4630      	mov	r0, r6
 800a556:	f7ff ffbf 	bl	800a4d8 <sbrk_aligned>
 800a55a:	1c43      	adds	r3, r0, #1
 800a55c:	4604      	mov	r4, r0
 800a55e:	d158      	bne.n	800a612 <_malloc_r+0xf6>
 800a560:	f8d8 4000 	ldr.w	r4, [r8]
 800a564:	4627      	mov	r7, r4
 800a566:	2f00      	cmp	r7, #0
 800a568:	d143      	bne.n	800a5f2 <_malloc_r+0xd6>
 800a56a:	2c00      	cmp	r4, #0
 800a56c:	d04b      	beq.n	800a606 <_malloc_r+0xea>
 800a56e:	6823      	ldr	r3, [r4, #0]
 800a570:	4639      	mov	r1, r7
 800a572:	4630      	mov	r0, r6
 800a574:	eb04 0903 	add.w	r9, r4, r3
 800a578:	f000 f98c 	bl	800a894 <_sbrk_r>
 800a57c:	4581      	cmp	r9, r0
 800a57e:	d142      	bne.n	800a606 <_malloc_r+0xea>
 800a580:	6821      	ldr	r1, [r4, #0]
 800a582:	1a6d      	subs	r5, r5, r1
 800a584:	4629      	mov	r1, r5
 800a586:	4630      	mov	r0, r6
 800a588:	f7ff ffa6 	bl	800a4d8 <sbrk_aligned>
 800a58c:	3001      	adds	r0, #1
 800a58e:	d03a      	beq.n	800a606 <_malloc_r+0xea>
 800a590:	6823      	ldr	r3, [r4, #0]
 800a592:	442b      	add	r3, r5
 800a594:	6023      	str	r3, [r4, #0]
 800a596:	f8d8 3000 	ldr.w	r3, [r8]
 800a59a:	685a      	ldr	r2, [r3, #4]
 800a59c:	bb62      	cbnz	r2, 800a5f8 <_malloc_r+0xdc>
 800a59e:	f8c8 7000 	str.w	r7, [r8]
 800a5a2:	e00f      	b.n	800a5c4 <_malloc_r+0xa8>
 800a5a4:	6822      	ldr	r2, [r4, #0]
 800a5a6:	1b52      	subs	r2, r2, r5
 800a5a8:	d420      	bmi.n	800a5ec <_malloc_r+0xd0>
 800a5aa:	2a0b      	cmp	r2, #11
 800a5ac:	d917      	bls.n	800a5de <_malloc_r+0xc2>
 800a5ae:	1961      	adds	r1, r4, r5
 800a5b0:	42a3      	cmp	r3, r4
 800a5b2:	6025      	str	r5, [r4, #0]
 800a5b4:	bf18      	it	ne
 800a5b6:	6059      	strne	r1, [r3, #4]
 800a5b8:	6863      	ldr	r3, [r4, #4]
 800a5ba:	bf08      	it	eq
 800a5bc:	f8c8 1000 	streq.w	r1, [r8]
 800a5c0:	5162      	str	r2, [r4, r5]
 800a5c2:	604b      	str	r3, [r1, #4]
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	f000 f82f 	bl	800a628 <__malloc_unlock>
 800a5ca:	f104 000b 	add.w	r0, r4, #11
 800a5ce:	1d23      	adds	r3, r4, #4
 800a5d0:	f020 0007 	bic.w	r0, r0, #7
 800a5d4:	1ac2      	subs	r2, r0, r3
 800a5d6:	bf1c      	itt	ne
 800a5d8:	1a1b      	subne	r3, r3, r0
 800a5da:	50a3      	strne	r3, [r4, r2]
 800a5dc:	e7af      	b.n	800a53e <_malloc_r+0x22>
 800a5de:	6862      	ldr	r2, [r4, #4]
 800a5e0:	42a3      	cmp	r3, r4
 800a5e2:	bf0c      	ite	eq
 800a5e4:	f8c8 2000 	streq.w	r2, [r8]
 800a5e8:	605a      	strne	r2, [r3, #4]
 800a5ea:	e7eb      	b.n	800a5c4 <_malloc_r+0xa8>
 800a5ec:	4623      	mov	r3, r4
 800a5ee:	6864      	ldr	r4, [r4, #4]
 800a5f0:	e7ae      	b.n	800a550 <_malloc_r+0x34>
 800a5f2:	463c      	mov	r4, r7
 800a5f4:	687f      	ldr	r7, [r7, #4]
 800a5f6:	e7b6      	b.n	800a566 <_malloc_r+0x4a>
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	42a3      	cmp	r3, r4
 800a5fe:	d1fb      	bne.n	800a5f8 <_malloc_r+0xdc>
 800a600:	2300      	movs	r3, #0
 800a602:	6053      	str	r3, [r2, #4]
 800a604:	e7de      	b.n	800a5c4 <_malloc_r+0xa8>
 800a606:	230c      	movs	r3, #12
 800a608:	6033      	str	r3, [r6, #0]
 800a60a:	4630      	mov	r0, r6
 800a60c:	f000 f80c 	bl	800a628 <__malloc_unlock>
 800a610:	e794      	b.n	800a53c <_malloc_r+0x20>
 800a612:	6005      	str	r5, [r0, #0]
 800a614:	e7d6      	b.n	800a5c4 <_malloc_r+0xa8>
 800a616:	bf00      	nop
 800a618:	20000df4 	.word	0x20000df4

0800a61c <__malloc_lock>:
 800a61c:	4801      	ldr	r0, [pc, #4]	@ (800a624 <__malloc_lock+0x8>)
 800a61e:	f7ff bf00 	b.w	800a422 <__retarget_lock_acquire_recursive>
 800a622:	bf00      	nop
 800a624:	20000dec 	.word	0x20000dec

0800a628 <__malloc_unlock>:
 800a628:	4801      	ldr	r0, [pc, #4]	@ (800a630 <__malloc_unlock+0x8>)
 800a62a:	f7ff befb 	b.w	800a424 <__retarget_lock_release_recursive>
 800a62e:	bf00      	nop
 800a630:	20000dec 	.word	0x20000dec

0800a634 <__sflush_r>:
 800a634:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a63c:	0716      	lsls	r6, r2, #28
 800a63e:	4605      	mov	r5, r0
 800a640:	460c      	mov	r4, r1
 800a642:	d454      	bmi.n	800a6ee <__sflush_r+0xba>
 800a644:	684b      	ldr	r3, [r1, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	dc02      	bgt.n	800a650 <__sflush_r+0x1c>
 800a64a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	dd48      	ble.n	800a6e2 <__sflush_r+0xae>
 800a650:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a652:	2e00      	cmp	r6, #0
 800a654:	d045      	beq.n	800a6e2 <__sflush_r+0xae>
 800a656:	2300      	movs	r3, #0
 800a658:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a65c:	682f      	ldr	r7, [r5, #0]
 800a65e:	6a21      	ldr	r1, [r4, #32]
 800a660:	602b      	str	r3, [r5, #0]
 800a662:	d030      	beq.n	800a6c6 <__sflush_r+0x92>
 800a664:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a666:	89a3      	ldrh	r3, [r4, #12]
 800a668:	0759      	lsls	r1, r3, #29
 800a66a:	d505      	bpl.n	800a678 <__sflush_r+0x44>
 800a66c:	6863      	ldr	r3, [r4, #4]
 800a66e:	1ad2      	subs	r2, r2, r3
 800a670:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a672:	b10b      	cbz	r3, 800a678 <__sflush_r+0x44>
 800a674:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a676:	1ad2      	subs	r2, r2, r3
 800a678:	2300      	movs	r3, #0
 800a67a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a67c:	6a21      	ldr	r1, [r4, #32]
 800a67e:	4628      	mov	r0, r5
 800a680:	47b0      	blx	r6
 800a682:	1c43      	adds	r3, r0, #1
 800a684:	89a3      	ldrh	r3, [r4, #12]
 800a686:	d106      	bne.n	800a696 <__sflush_r+0x62>
 800a688:	6829      	ldr	r1, [r5, #0]
 800a68a:	291d      	cmp	r1, #29
 800a68c:	d82b      	bhi.n	800a6e6 <__sflush_r+0xb2>
 800a68e:	4a2a      	ldr	r2, [pc, #168]	@ (800a738 <__sflush_r+0x104>)
 800a690:	40ca      	lsrs	r2, r1
 800a692:	07d6      	lsls	r6, r2, #31
 800a694:	d527      	bpl.n	800a6e6 <__sflush_r+0xb2>
 800a696:	2200      	movs	r2, #0
 800a698:	6062      	str	r2, [r4, #4]
 800a69a:	04d9      	lsls	r1, r3, #19
 800a69c:	6922      	ldr	r2, [r4, #16]
 800a69e:	6022      	str	r2, [r4, #0]
 800a6a0:	d504      	bpl.n	800a6ac <__sflush_r+0x78>
 800a6a2:	1c42      	adds	r2, r0, #1
 800a6a4:	d101      	bne.n	800a6aa <__sflush_r+0x76>
 800a6a6:	682b      	ldr	r3, [r5, #0]
 800a6a8:	b903      	cbnz	r3, 800a6ac <__sflush_r+0x78>
 800a6aa:	6560      	str	r0, [r4, #84]	@ 0x54
 800a6ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6ae:	602f      	str	r7, [r5, #0]
 800a6b0:	b1b9      	cbz	r1, 800a6e2 <__sflush_r+0xae>
 800a6b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6b6:	4299      	cmp	r1, r3
 800a6b8:	d002      	beq.n	800a6c0 <__sflush_r+0x8c>
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	f7ff fec2 	bl	800a444 <_free_r>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a6c4:	e00d      	b.n	800a6e2 <__sflush_r+0xae>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	47b0      	blx	r6
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	1c50      	adds	r0, r2, #1
 800a6d0:	d1c9      	bne.n	800a666 <__sflush_r+0x32>
 800a6d2:	682b      	ldr	r3, [r5, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d0c6      	beq.n	800a666 <__sflush_r+0x32>
 800a6d8:	2b1d      	cmp	r3, #29
 800a6da:	d001      	beq.n	800a6e0 <__sflush_r+0xac>
 800a6dc:	2b16      	cmp	r3, #22
 800a6de:	d11e      	bne.n	800a71e <__sflush_r+0xea>
 800a6e0:	602f      	str	r7, [r5, #0]
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	e022      	b.n	800a72c <__sflush_r+0xf8>
 800a6e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6ea:	b21b      	sxth	r3, r3
 800a6ec:	e01b      	b.n	800a726 <__sflush_r+0xf2>
 800a6ee:	690f      	ldr	r7, [r1, #16]
 800a6f0:	2f00      	cmp	r7, #0
 800a6f2:	d0f6      	beq.n	800a6e2 <__sflush_r+0xae>
 800a6f4:	0793      	lsls	r3, r2, #30
 800a6f6:	680e      	ldr	r6, [r1, #0]
 800a6f8:	bf08      	it	eq
 800a6fa:	694b      	ldreq	r3, [r1, #20]
 800a6fc:	600f      	str	r7, [r1, #0]
 800a6fe:	bf18      	it	ne
 800a700:	2300      	movne	r3, #0
 800a702:	eba6 0807 	sub.w	r8, r6, r7
 800a706:	608b      	str	r3, [r1, #8]
 800a708:	f1b8 0f00 	cmp.w	r8, #0
 800a70c:	dde9      	ble.n	800a6e2 <__sflush_r+0xae>
 800a70e:	6a21      	ldr	r1, [r4, #32]
 800a710:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a712:	4643      	mov	r3, r8
 800a714:	463a      	mov	r2, r7
 800a716:	4628      	mov	r0, r5
 800a718:	47b0      	blx	r6
 800a71a:	2800      	cmp	r0, #0
 800a71c:	dc08      	bgt.n	800a730 <__sflush_r+0xfc>
 800a71e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a726:	81a3      	strh	r3, [r4, #12]
 800a728:	f04f 30ff 	mov.w	r0, #4294967295
 800a72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a730:	4407      	add	r7, r0
 800a732:	eba8 0800 	sub.w	r8, r8, r0
 800a736:	e7e7      	b.n	800a708 <__sflush_r+0xd4>
 800a738:	20400001 	.word	0x20400001

0800a73c <_fflush_r>:
 800a73c:	b538      	push	{r3, r4, r5, lr}
 800a73e:	690b      	ldr	r3, [r1, #16]
 800a740:	4605      	mov	r5, r0
 800a742:	460c      	mov	r4, r1
 800a744:	b913      	cbnz	r3, 800a74c <_fflush_r+0x10>
 800a746:	2500      	movs	r5, #0
 800a748:	4628      	mov	r0, r5
 800a74a:	bd38      	pop	{r3, r4, r5, pc}
 800a74c:	b118      	cbz	r0, 800a756 <_fflush_r+0x1a>
 800a74e:	6a03      	ldr	r3, [r0, #32]
 800a750:	b90b      	cbnz	r3, 800a756 <_fflush_r+0x1a>
 800a752:	f7ff fc81 	bl	800a058 <__sinit>
 800a756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d0f3      	beq.n	800a746 <_fflush_r+0xa>
 800a75e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a760:	07d0      	lsls	r0, r2, #31
 800a762:	d404      	bmi.n	800a76e <_fflush_r+0x32>
 800a764:	0599      	lsls	r1, r3, #22
 800a766:	d402      	bmi.n	800a76e <_fflush_r+0x32>
 800a768:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a76a:	f7ff fe5a 	bl	800a422 <__retarget_lock_acquire_recursive>
 800a76e:	4628      	mov	r0, r5
 800a770:	4621      	mov	r1, r4
 800a772:	f7ff ff5f 	bl	800a634 <__sflush_r>
 800a776:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a778:	07da      	lsls	r2, r3, #31
 800a77a:	4605      	mov	r5, r0
 800a77c:	d4e4      	bmi.n	800a748 <_fflush_r+0xc>
 800a77e:	89a3      	ldrh	r3, [r4, #12]
 800a780:	059b      	lsls	r3, r3, #22
 800a782:	d4e1      	bmi.n	800a748 <_fflush_r+0xc>
 800a784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a786:	f7ff fe4d 	bl	800a424 <__retarget_lock_release_recursive>
 800a78a:	e7dd      	b.n	800a748 <_fflush_r+0xc>

0800a78c <__swhatbuf_r>:
 800a78c:	b570      	push	{r4, r5, r6, lr}
 800a78e:	460c      	mov	r4, r1
 800a790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a794:	2900      	cmp	r1, #0
 800a796:	b096      	sub	sp, #88	@ 0x58
 800a798:	4615      	mov	r5, r2
 800a79a:	461e      	mov	r6, r3
 800a79c:	da0d      	bge.n	800a7ba <__swhatbuf_r+0x2e>
 800a79e:	89a3      	ldrh	r3, [r4, #12]
 800a7a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a7a4:	f04f 0100 	mov.w	r1, #0
 800a7a8:	bf14      	ite	ne
 800a7aa:	2340      	movne	r3, #64	@ 0x40
 800a7ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	6031      	str	r1, [r6, #0]
 800a7b4:	602b      	str	r3, [r5, #0]
 800a7b6:	b016      	add	sp, #88	@ 0x58
 800a7b8:	bd70      	pop	{r4, r5, r6, pc}
 800a7ba:	466a      	mov	r2, sp
 800a7bc:	f000 f848 	bl	800a850 <_fstat_r>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	dbec      	blt.n	800a79e <__swhatbuf_r+0x12>
 800a7c4:	9901      	ldr	r1, [sp, #4]
 800a7c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a7ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a7ce:	4259      	negs	r1, r3
 800a7d0:	4159      	adcs	r1, r3
 800a7d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7d6:	e7eb      	b.n	800a7b0 <__swhatbuf_r+0x24>

0800a7d8 <__smakebuf_r>:
 800a7d8:	898b      	ldrh	r3, [r1, #12]
 800a7da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7dc:	079d      	lsls	r5, r3, #30
 800a7de:	4606      	mov	r6, r0
 800a7e0:	460c      	mov	r4, r1
 800a7e2:	d507      	bpl.n	800a7f4 <__smakebuf_r+0x1c>
 800a7e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	6123      	str	r3, [r4, #16]
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	6163      	str	r3, [r4, #20]
 800a7f0:	b003      	add	sp, #12
 800a7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7f4:	ab01      	add	r3, sp, #4
 800a7f6:	466a      	mov	r2, sp
 800a7f8:	f7ff ffc8 	bl	800a78c <__swhatbuf_r>
 800a7fc:	9f00      	ldr	r7, [sp, #0]
 800a7fe:	4605      	mov	r5, r0
 800a800:	4639      	mov	r1, r7
 800a802:	4630      	mov	r0, r6
 800a804:	f7ff fe8a 	bl	800a51c <_malloc_r>
 800a808:	b948      	cbnz	r0, 800a81e <__smakebuf_r+0x46>
 800a80a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a80e:	059a      	lsls	r2, r3, #22
 800a810:	d4ee      	bmi.n	800a7f0 <__smakebuf_r+0x18>
 800a812:	f023 0303 	bic.w	r3, r3, #3
 800a816:	f043 0302 	orr.w	r3, r3, #2
 800a81a:	81a3      	strh	r3, [r4, #12]
 800a81c:	e7e2      	b.n	800a7e4 <__smakebuf_r+0xc>
 800a81e:	89a3      	ldrh	r3, [r4, #12]
 800a820:	6020      	str	r0, [r4, #0]
 800a822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a826:	81a3      	strh	r3, [r4, #12]
 800a828:	9b01      	ldr	r3, [sp, #4]
 800a82a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a82e:	b15b      	cbz	r3, 800a848 <__smakebuf_r+0x70>
 800a830:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a834:	4630      	mov	r0, r6
 800a836:	f000 f81d 	bl	800a874 <_isatty_r>
 800a83a:	b128      	cbz	r0, 800a848 <__smakebuf_r+0x70>
 800a83c:	89a3      	ldrh	r3, [r4, #12]
 800a83e:	f023 0303 	bic.w	r3, r3, #3
 800a842:	f043 0301 	orr.w	r3, r3, #1
 800a846:	81a3      	strh	r3, [r4, #12]
 800a848:	89a3      	ldrh	r3, [r4, #12]
 800a84a:	431d      	orrs	r5, r3
 800a84c:	81a5      	strh	r5, [r4, #12]
 800a84e:	e7cf      	b.n	800a7f0 <__smakebuf_r+0x18>

0800a850 <_fstat_r>:
 800a850:	b538      	push	{r3, r4, r5, lr}
 800a852:	4d07      	ldr	r5, [pc, #28]	@ (800a870 <_fstat_r+0x20>)
 800a854:	2300      	movs	r3, #0
 800a856:	4604      	mov	r4, r0
 800a858:	4608      	mov	r0, r1
 800a85a:	4611      	mov	r1, r2
 800a85c:	602b      	str	r3, [r5, #0]
 800a85e:	f7f7 f9f1 	bl	8001c44 <_fstat>
 800a862:	1c43      	adds	r3, r0, #1
 800a864:	d102      	bne.n	800a86c <_fstat_r+0x1c>
 800a866:	682b      	ldr	r3, [r5, #0]
 800a868:	b103      	cbz	r3, 800a86c <_fstat_r+0x1c>
 800a86a:	6023      	str	r3, [r4, #0]
 800a86c:	bd38      	pop	{r3, r4, r5, pc}
 800a86e:	bf00      	nop
 800a870:	20000de8 	.word	0x20000de8

0800a874 <_isatty_r>:
 800a874:	b538      	push	{r3, r4, r5, lr}
 800a876:	4d06      	ldr	r5, [pc, #24]	@ (800a890 <_isatty_r+0x1c>)
 800a878:	2300      	movs	r3, #0
 800a87a:	4604      	mov	r4, r0
 800a87c:	4608      	mov	r0, r1
 800a87e:	602b      	str	r3, [r5, #0]
 800a880:	f7f7 f9f0 	bl	8001c64 <_isatty>
 800a884:	1c43      	adds	r3, r0, #1
 800a886:	d102      	bne.n	800a88e <_isatty_r+0x1a>
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	b103      	cbz	r3, 800a88e <_isatty_r+0x1a>
 800a88c:	6023      	str	r3, [r4, #0]
 800a88e:	bd38      	pop	{r3, r4, r5, pc}
 800a890:	20000de8 	.word	0x20000de8

0800a894 <_sbrk_r>:
 800a894:	b538      	push	{r3, r4, r5, lr}
 800a896:	4d06      	ldr	r5, [pc, #24]	@ (800a8b0 <_sbrk_r+0x1c>)
 800a898:	2300      	movs	r3, #0
 800a89a:	4604      	mov	r4, r0
 800a89c:	4608      	mov	r0, r1
 800a89e:	602b      	str	r3, [r5, #0]
 800a8a0:	f7f7 f9f8 	bl	8001c94 <_sbrk>
 800a8a4:	1c43      	adds	r3, r0, #1
 800a8a6:	d102      	bne.n	800a8ae <_sbrk_r+0x1a>
 800a8a8:	682b      	ldr	r3, [r5, #0]
 800a8aa:	b103      	cbz	r3, 800a8ae <_sbrk_r+0x1a>
 800a8ac:	6023      	str	r3, [r4, #0]
 800a8ae:	bd38      	pop	{r3, r4, r5, pc}
 800a8b0:	20000de8 	.word	0x20000de8

0800a8b4 <_init>:
 800a8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8b6:	bf00      	nop
 800a8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ba:	bc08      	pop	{r3}
 800a8bc:	469e      	mov	lr, r3
 800a8be:	4770      	bx	lr

0800a8c0 <_fini>:
 800a8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c2:	bf00      	nop
 800a8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8c6:	bc08      	pop	{r3}
 800a8c8:	469e      	mov	lr, r3
 800a8ca:	4770      	bx	lr
